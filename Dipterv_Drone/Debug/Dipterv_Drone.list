
Dipterv_Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014140  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  080142d0  080142d0  000242d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d50  08014d50  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08014d50  08014d50  00024d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d58  08014d58  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014d58  08014d58  00024d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d5c  08014d5c  00024d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08014d60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301ec  2**0
                  CONTENTS
 10 .bss          00004750  200001f0  200001f0  000301f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004940  20004940  000301f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f9a5  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000401d  00000000  00000000  0004fbc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bd0  00000000  00000000  00053be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a50  00000000  00000000  000557b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002509f  00000000  00000000  00057200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020193  00000000  00000000  0007c29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de844  00000000  00000000  0009c432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017ac76  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008fb8  00000000  00000000  0017acc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080142b8 	.word	0x080142b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	080142b8 	.word	0x080142b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <vApplicationGetIdleTaskMemory+0x30>)
 8000fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000020c 	.word	0x2000020c
 8000fbc:	20000260 	.word	0x20000260

08000fc0 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000fe4 <FusionRadiansToDegrees+0x24>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	42652ee0 	.word	0x42652ee0

08000fe8 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	d802      	bhi.n	800100a <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8001004:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001038 <FusionAsin+0x50>
 8001008:	e011      	b.n	800102e <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	db02      	blt.n	8001022 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 800101c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800103c <FusionAsin+0x54>
 8001020:	e005      	b.n	800102e <FusionAsin+0x46>
    }
    return asinf(value);
 8001022:	ed97 0a01 	vldr	s0, [r7, #4]
 8001026:	f010 ff9f 	bl	8011f68 <asinf>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	bfc90fdb 	.word	0xbfc90fdb
 800103c:	3fc90fdb 	.word	0x3fc90fdb

08001040 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8001040:	b480      	push	{r7}
 8001042:	b091      	sub	sp, #68	; 0x44
 8001044:	af00      	add	r7, sp, #0
 8001046:	eeb0 5a40 	vmov.f32	s10, s0
 800104a:	eef0 5a60 	vmov.f32	s11, s1
 800104e:	eeb0 6a41 	vmov.f32	s12, s2
 8001052:	eef0 6a61 	vmov.f32	s13, s3
 8001056:	eeb0 7a42 	vmov.f32	s14, s4
 800105a:	eef0 7a62 	vmov.f32	s15, s5
 800105e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001062:	edc7 5a08 	vstr	s11, [r7, #32]
 8001066:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800106a:	edc7 6a04 	vstr	s13, [r7, #16]
 800106e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001072:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8001076:	ed97 7a07 	vldr	s14, [r7, #28]
 800107a:	edd7 7a04 	vldr	s15, [r7, #16]
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001082:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8001086:	ed97 7a08 	vldr	s14, [r7, #32]
 800108a:	edd7 7a05 	vldr	s15, [r7, #20]
 800108e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001092:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8001096:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800109a:	edd7 7a06 	vldr	s15, [r7, #24]
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80010a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ba:	ee06 1a90 	vmov	s13, r1
 80010be:	ee07 2a10 	vmov	s14, r2
 80010c2:	ee07 3a90 	vmov	s15, r3
}
 80010c6:	eeb0 0a66 	vmov.f32	s0, s13
 80010ca:	eef0 0a47 	vmov.f32	s1, s14
 80010ce:	eeb0 1a67 	vmov.f32	s2, s15
 80010d2:	3744      	adds	r7, #68	; 0x44
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80010dc:	b480      	push	{r7}
 80010de:	b08f      	sub	sp, #60	; 0x3c
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	eef0 6a40 	vmov.f32	s13, s0
 80010e6:	eeb0 7a60 	vmov.f32	s14, s1
 80010ea:	eef0 7a41 	vmov.f32	s15, s2
 80010ee:	edc7 1a04 	vstr	s3, [r7, #16]
 80010f2:	edc7 6a05 	vstr	s13, [r7, #20]
 80010f6:	ed87 7a06 	vstr	s14, [r7, #24]
 80010fa:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 80010fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001102:	edd7 7a04 	vldr	s15, [r7, #16]
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800110a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800110e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001112:	edd7 7a04 	vldr	s15, [r7, #16]
 8001116:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800111a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800111e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001122:	edd7 7a04 	vldr	s15, [r7, #16]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800112a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800112e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001132:	f107 0220 	add.w	r2, r7, #32
 8001136:	ca07      	ldmia	r2, {r0, r1, r2}
 8001138:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800113c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800113e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001142:	ee06 1a90 	vmov	s13, r1
 8001146:	ee07 2a10 	vmov	s14, r2
 800114a:	ee07 3a90 	vmov	s15, r3
}
 800114e:	eeb0 0a66 	vmov.f32	s0, s13
 8001152:	eef0 0a47 	vmov.f32	s1, s14
 8001156:	eeb0 1a67 	vmov.f32	s2, s15
 800115a:	373c      	adds	r7, #60	; 0x3c
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001164:	b084      	sub	sp, #16
 8001166:	b480      	push	{r7}
 8001168:	b08f      	sub	sp, #60	; 0x3c
 800116a:	af00      	add	r7, sp, #0
 800116c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8001170:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001174:	eef0 6a40 	vmov.f32	s13, s0
 8001178:	eeb0 7a60 	vmov.f32	s14, s1
 800117c:	eef0 7a41 	vmov.f32	s15, s2
 8001180:	edc7 6a05 	vstr	s13, [r7, #20]
 8001184:	ed87 7a06 	vstr	s14, [r7, #24]
 8001188:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 800118c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001190:	edd7 7a05 	vldr	s15, [r7, #20]
 8001194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001198:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800119c:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80011ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011b8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80011bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80011cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80011dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 80011ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001208:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800120c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001218:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	f107 0220 	add.w	r2, r7, #32
 8001224:	ca07      	ldmia	r2, {r0, r1, r2}
 8001226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800122a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800122c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001230:	ee06 1a90 	vmov	s13, r1
 8001234:	ee07 2a10 	vmov	s14, r2
 8001238:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800123c:	eeb0 0a66 	vmov.f32	s0, s13
 8001240:	eef0 0a47 	vmov.f32	s1, s14
 8001244:	eeb0 1a67 	vmov.f32	s2, s15
 8001248:	373c      	adds	r7, #60	; 0x3c
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	b004      	add	sp, #16
 8001252:	4770      	bx	lr

08001254 <FusionQuaternionToMatrix>:
/**
 * @brief Converts a quaternion to a rotation matrix.
 * @param quaternion Quaternion.
 * @return Rotation matrix.
 */
static inline FusionMatrix FusionQuaternionToMatrix(const FusionQuaternion quaternion) {
 8001254:	b4b0      	push	{r4, r5, r7}
 8001256:	b097      	sub	sp, #92	; 0x5c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6178      	str	r0, [r7, #20]
 800125c:	eeb0 6a40 	vmov.f32	s12, s0
 8001260:	eef0 6a60 	vmov.f32	s13, s1
 8001264:	eeb0 7a41 	vmov.f32	s14, s2
 8001268:	eef0 7a61 	vmov.f32	s15, s3
 800126c:	ed87 6a01 	vstr	s12, [r7, #4]
 8001270:	edc7 6a02 	vstr	s13, [r7, #8]
 8001274:	ed87 7a03 	vstr	s14, [r7, #12]
 8001278:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q quaternion.element
    const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 800127c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001280:	edd7 7a01 	vldr	s15, [r7, #4]
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    const float qwqx = Q.w * Q.x;
 800128c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001290:	edd7 7a02 	vldr	s15, [r7, #8]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    const float qwqy = Q.w * Q.y;
 800129c:	ed97 7a01 	vldr	s14, [r7, #4]
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    const float qwqz = Q.w * Q.z;
 80012ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    const float qxqy = Q.x * Q.y;
 80012bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    const float qxqz = Q.x * Q.z;
 80012cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    const float qyqz = Q.y * Q.z;
 80012dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionMatrix matrix = {.element = {
            .xx = 2.0f * (qwqw - 0.5f + Q.x * Q.x),
 80012ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80012f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80012fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800130c:	edc7 7a06 	vstr	s15, [r7, #24]
            .xy = 2.0f * (qxqy - qwqz),
 8001310:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001314:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001320:	edc7 7a07 	vstr	s15, [r7, #28]
            .xz = 2.0f * (qxqz + qwqy),
 8001324:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001328:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001334:	edc7 7a08 	vstr	s15, [r7, #32]
            .yx = 2.0f * (qxqy + qwqz),
 8001338:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800133c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001348:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .yy = 2.0f * (qwqw - 0.5f + Q.y * Q.y),
 800134c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001350:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001354:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001358:	edd7 6a03 	vldr	s13, [r7, #12]
 800135c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001368:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800136c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yz = 2.0f * (qyqz - qwqx),
 8001370:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001374:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001380:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .zx = 2.0f * (qxqz - qwqy),
 8001384:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001388:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001394:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .zy = 2.0f * (qyqz + qwqx),
 8001398:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800139c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .zz = 2.0f * (qwqw - 0.5f + Q.z * Q.z),
 80013ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80013bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013cc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    }};
    return matrix;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	461d      	mov	r5, r3
 80013d4:	f107 0418 	add.w	r4, r7, #24
 80013d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	602b      	str	r3, [r5, #0]
#undef Q
}
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	375c      	adds	r7, #92	; 0x5c
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bcb0      	pop	{r4, r5, r7}
 80013ec:	4770      	bx	lr

080013ee <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b090      	sub	sp, #64	; 0x40
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	eeb0 6a40 	vmov.f32	s12, s0
 80013f8:	eef0 6a60 	vmov.f32	s13, s1
 80013fc:	eeb0 7a41 	vmov.f32	s14, s2
 8001400:	eef0 7a61 	vmov.f32	s15, s3
 8001404:	ed87 6a04 	vstr	s12, [r7, #16]
 8001408:	edc7 6a05 	vstr	s13, [r7, #20]
 800140c:	ed87 7a06 	vstr	s14, [r7, #24]
 8001410:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8001414:	ed97 7a06 	vldr	s14, [r7, #24]
 8001418:	edd7 7a06 	vldr	s15, [r7, #24]
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001428:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 800142c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001430:	edd7 7a05 	vldr	s15, [r7, #20]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001438:	edd7 6a06 	vldr	s13, [r7, #24]
 800143c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001448:	ed97 7a05 	vldr	s14, [r7, #20]
 800144c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001454:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145c:	eef0 0a67 	vmov.f32	s1, s15
 8001460:	eeb0 0a66 	vmov.f32	s0, s13
 8001464:	f010 fdac 	bl	8011fc0 <atan2f>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	f7ff fda6 	bl	8000fc0 <FusionRadiansToDegrees>
 8001474:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001478:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 800147c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001480:	edd7 7a06 	vldr	s15, [r7, #24]
 8001484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001488:	edd7 6a07 	vldr	s13, [r7, #28]
 800148c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001498:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	f7ff fda2 	bl	8000fe8 <FusionAsin>
 80014a4:	eef0 7a40 	vmov.f32	s15, s0
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	f7ff fd88 	bl	8000fc0 <FusionRadiansToDegrees>
 80014b0:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80014b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 80014b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80014bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80014d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80014d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e8:	eef0 0a67 	vmov.f32	s1, s15
 80014ec:	eeb0 0a66 	vmov.f32	s0, s13
 80014f0:	f010 fd66 	bl	8011fc0 <atan2f>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	f7ff fd60 	bl	8000fc0 <FusionRadiansToDegrees>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001504:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8001508:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800150c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001510:	ca07      	ldmia	r2, {r0, r1, r2}
 8001512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151c:	ee06 1a90 	vmov	s13, r1
 8001520:	ee07 2a10 	vmov	s14, r2
 8001524:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8001528:	eeb0 0a66 	vmov.f32	s0, s13
 800152c:	eef0 0a47 	vmov.f32	s1, s14
 8001530:	eeb0 1a67 	vmov.f32	s2, s15
 8001534:	3740      	adds	r7, #64	; 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b096      	sub	sp, #88	; 0x58
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f003 ff89 	bl	8005458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f89f 	bl	8001688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f000 fd83 	bl	8002054 <MX_GPIO_Init>
  MX_DMA_Init();
 800154e:	f000 fd61 	bl	8002014 <MX_DMA_Init>
  MX_TIM2_Init();
 8001552:	f000 fab9 	bl	8001ac8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001556:	f000 fcdf 	bl	8001f18 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800155a:	f000 f9f5 	bl	8001948 <MX_I2C1_Init>
  MX_I2C2_Init();
 800155e:	f000 fa21 	bl	80019a4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001562:	f000 fa4d 	bl	8001a00 <MX_I2C3_Init>
  MX_TIM3_Init();
 8001566:	f000 fb1f 	bl	8001ba8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800156a:	f000 fbcb 	bl	8001d04 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800156e:	f000 fca9 	bl	8001ec4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001572:	f000 fcfb 	bl	8001f6c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001576:	f000 fa71 	bl	8001a5c <MX_SPI2_Init>
  MX_USART6_UART_Init();
 800157a:	f000 fd21 	bl	8001fc0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800157e:	f000 f8ed 	bl	800175c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001582:	f000 f93d 	bl	8001800 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001586:	f000 f98d 	bl	80018a4 <MX_ADC3_Init>
  MX_TIM6_Init();
 800158a:	f000 fc2f 	bl	8001dec <MX_TIM6_Init>
  MX_TIM7_Init();
 800158e:	f000 fc63 	bl	8001e58 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */




  __HAL_SPI_ENABLE(&hspi2);
 8001592:	4b33      	ldr	r3, [pc, #204]	; (8001660 <main+0x124>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b31      	ldr	r3, [pc, #196]	; (8001660 <main+0x124>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a0:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_1  );
 80015a2:	2100      	movs	r1, #0
 80015a4:	482f      	ldr	r0, [pc, #188]	; (8001664 <main+0x128>)
 80015a6:	f007 fafd 	bl	8008ba4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_2  );
 80015aa:	2104      	movs	r1, #4
 80015ac:	482d      	ldr	r0, [pc, #180]	; (8001664 <main+0x128>)
 80015ae:	f007 faf9 	bl	8008ba4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_3  );
 80015b2:	2108      	movs	r1, #8
 80015b4:	482b      	ldr	r0, [pc, #172]	; (8001664 <main+0x128>)
 80015b6:	f007 faf5 	bl	8008ba4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_4  );
 80015ba:	210c      	movs	r1, #12
 80015bc:	4829      	ldr	r0, [pc, #164]	; (8001664 <main+0x128>)
 80015be:	f007 faf1 	bl	8008ba4 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  telemetria_Queue = xQueueCreate( 19, 19*sizeof( float ) );
 80015c2:	2200      	movs	r2, #0
 80015c4:	214c      	movs	r1, #76	; 0x4c
 80015c6:	2013      	movs	r0, #19
 80015c8:	f00b fd8a 	bl	800d0e0 <xQueueGenericCreate>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4a26      	ldr	r2, [pc, #152]	; (8001668 <main+0x12c>)
 80015d0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 500);
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <main+0x130>)
 80015d4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80015d8:	461d      	mov	r5, r3
 80015da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00b fbfb 	bl	800cde8 <osThreadCreate>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <main+0x134>)
 80015f6:	6013      	str	r3, [r2, #0]
  vTaskSuspend( defaultTaskHandle );
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <main+0x134>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00c fa7f 	bl	800db00 <vTaskSuspend>

  /* definition and creation of Data_Reading */
  osThreadDef(Data_Reading, Start_Data_Reading, osPriorityNormal, 0, 600);
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <main+0x138>)
 8001604:	f107 0420 	add.w	r4, r7, #32
 8001608:	461d      	mov	r5, r3
 800160a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Data_ReadingHandle = osThreadCreate(osThread(Data_Reading), NULL);
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f00b fbe3 	bl	800cde8 <osThreadCreate>
 8001622:	4603      	mov	r3, r0
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <main+0x13c>)
 8001626:	6013      	str	r3, [r2, #0]

  /* definition and creation of Orientation_cal */
  osThreadDef(Orientation_cal, Start_Orientation, osPriorityBelowNormal, 0, 200);
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <main+0x140>)
 800162a:	1d3c      	adds	r4, r7, #4
 800162c:	461d      	mov	r5, r3
 800162e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Orientation_calHandle = osThreadCreate(osThread(Orientation_cal), NULL);
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f00b fbd2 	bl	800cde8 <osThreadCreate>
 8001644:	4603      	mov	r3, r0
 8001646:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <main+0x144>)
 8001648:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800164a:	f00b fbc6 	bl	800cdda <osKernelStart>

  while (1)
  {


	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800164e:	2108      	movs	r1, #8
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <main+0x148>)
 8001652:	f005 f8c2 	bl	80067da <HAL_GPIO_TogglePin>

	  HAL_Delay(3);
 8001656:	2003      	movs	r0, #3
 8001658:	f003 ff70 	bl	800553c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800165c:	e7f7      	b.n	800164e <main+0x112>
 800165e:	bf00      	nop
 8001660:	20000634 	.word	0x20000634
 8001664:	200006d4 	.word	0x200006d4
 8001668:	20000bd0 	.word	0x20000bd0
 800166c:	080142fc 	.word	0x080142fc
 8001670:	20000964 	.word	0x20000964
 8001674:	08014318 	.word	0x08014318
 8001678:	20000968 	.word	0x20000968
 800167c:	08014334 	.word	0x08014334
 8001680:	2000096c 	.word	0x2000096c
 8001684:	40020400 	.word	0x40020400

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b094      	sub	sp, #80	; 0x50
 800168c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	2230      	movs	r2, #48	; 0x30
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f00d fc90 	bl	800efbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <SystemClock_Config+0xcc>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	4a27      	ldr	r2, [pc, #156]	; (8001754 <SystemClock_Config+0xcc>)
 80016b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ba:	6413      	str	r3, [r2, #64]	; 0x40
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <SystemClock_Config+0xcc>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <SystemClock_Config+0xd0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a21      	ldr	r2, [pc, #132]	; (8001758 <SystemClock_Config+0xd0>)
 80016d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <SystemClock_Config+0xd0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e4:	2301      	movs	r3, #1
 80016e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ee:	2302      	movs	r3, #2
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016f8:	2304      	movs	r3, #4
 80016fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016fc:	23a8      	movs	r3, #168	; 0xa8
 80016fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001700:	2302      	movs	r3, #2
 8001702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001704:	2304      	movs	r3, #4
 8001706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001708:	f107 0320 	add.w	r3, r7, #32
 800170c:	4618      	mov	r0, r3
 800170e:	f006 f857 	bl	80077c0 <HAL_RCC_OscConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001718:	f002 f8fa 	bl	8003910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171c:	230f      	movs	r3, #15
 800171e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001720:	2302      	movs	r3, #2
 8001722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800172c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800172e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	2105      	movs	r1, #5
 800173a:	4618      	mov	r0, r3
 800173c:	f006 fab8 	bl	8007cb0 <HAL_RCC_ClockConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001746:	f002 f8e3 	bl	8003910 <Error_Handler>
  }
}
 800174a:	bf00      	nop
 800174c:	3750      	adds	r7, #80	; 0x50
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40007000 	.word	0x40007000

0800175c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001762:	463b      	mov	r3, r7
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001770:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <MX_ADC1_Init+0x9c>)
 8001772:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800177a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <MX_ADC1_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_ADC1_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001798:	2200      	movs	r2, #0
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <MX_ADC1_Init+0x98>)
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <MX_ADC1_Init+0xa0>)
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017bc:	480d      	ldr	r0, [pc, #52]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017be:	f003 fee1 	bl	8005584 <HAL_ADC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017c8:	f002 f8a2 	bl	8003910 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017cc:	2305      	movs	r3, #5
 80017ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017d0:	2301      	movs	r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017de:	f003 ff15 	bl	800560c <HAL_ADC_ConfigChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017e8:	f002 f892 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000460 	.word	0x20000460
 80017f8:	40012000 	.word	0x40012000
 80017fc:	0f000001 	.word	0x0f000001

08001800 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <MX_ADC2_Init+0x98>)
 8001814:	4a21      	ldr	r2, [pc, #132]	; (800189c <MX_ADC2_Init+0x9c>)
 8001816:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <MX_ADC2_Init+0x98>)
 800181a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800181e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <MX_ADC2_Init+0x98>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <MX_ADC2_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_ADC2_Init+0x98>)
 800182e:	2200      	movs	r2, #0
 8001830:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <MX_ADC2_Init+0x98>)
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <MX_ADC2_Init+0x98>)
 800183c:	2200      	movs	r2, #0
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <MX_ADC2_Init+0x98>)
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <MX_ADC2_Init+0xa0>)
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_ADC2_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_ADC2_Init+0x98>)
 800184e:	2201      	movs	r2, #1
 8001850:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_ADC2_Init+0x98>)
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_ADC2_Init+0x98>)
 800185c:	2201      	movs	r2, #1
 800185e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <MX_ADC2_Init+0x98>)
 8001862:	f003 fe8f 	bl	8005584 <HAL_ADC_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800186c:	f002 f850 	bl	8003910 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001870:	2304      	movs	r3, #4
 8001872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001874:	2301      	movs	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800187c:	463b      	mov	r3, r7
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_ADC2_Init+0x98>)
 8001882:	f003 fec3 	bl	800560c <HAL_ADC_ConfigChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800188c:	f002 f840 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200004a8 	.word	0x200004a8
 800189c:	40012100 	.word	0x40012100
 80018a0:	0f000001 	.word	0x0f000001

080018a4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018aa:	463b      	mov	r3, r7
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <MX_ADC3_Init+0x98>)
 80018b8:	4a21      	ldr	r2, [pc, #132]	; (8001940 <MX_ADC3_Init+0x9c>)
 80018ba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_ADC3_Init+0x98>)
 80018be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018c2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <MX_ADC3_Init+0x98>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <MX_ADC3_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <MX_ADC3_Init+0x98>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <MX_ADC3_Init+0x98>)
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_ADC3_Init+0x98>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_ADC3_Init+0x98>)
 80018e6:	4a17      	ldr	r2, [pc, #92]	; (8001944 <MX_ADC3_Init+0xa0>)
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_ADC3_Init+0x98>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_ADC3_Init+0x98>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_ADC3_Init+0x98>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_ADC3_Init+0x98>)
 8001900:	2201      	movs	r2, #1
 8001902:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <MX_ADC3_Init+0x98>)
 8001906:	f003 fe3d 	bl	8005584 <HAL_ADC_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001910:	f001 fffe 	bl	8003910 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001914:	230d      	movs	r3, #13
 8001916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001920:	463b      	mov	r3, r7
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_ADC3_Init+0x98>)
 8001926:	f003 fe71 	bl	800560c <HAL_ADC_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001930:	f001 ffee 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200004f0 	.word	0x200004f0
 8001940:	40012200 	.word	0x40012200
 8001944:	0f000001 	.word	0x0f000001

08001948 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_I2C1_Init+0x50>)
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <MX_I2C1_Init+0x54>)
 8001950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_I2C1_Init+0x50>)
 8001954:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <MX_I2C1_Init+0x58>)
 8001956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_I2C1_Init+0x50>)
 8001966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <MX_I2C1_Init+0x50>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_I2C1_Init+0x50>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <MX_I2C1_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_I2C1_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <MX_I2C1_Init+0x50>)
 8001986:	f004 ff5b 	bl	8006840 <HAL_I2C_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001990:	f001 ffbe 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000538 	.word	0x20000538
 800199c:	40005400 	.word	0x40005400
 80019a0:	00061a80 	.word	0x00061a80

080019a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <MX_I2C2_Init+0x54>)
 80019ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019b0:	4a12      	ldr	r2, [pc, #72]	; (80019fc <MX_I2C2_Init+0x58>)
 80019b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019e2:	f004 ff2d 	bl	8006840 <HAL_I2C_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019ec:	f001 ff90 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000058c 	.word	0x2000058c
 80019f8:	40005800 	.word	0x40005800
 80019fc:	00061a80 	.word	0x00061a80

08001a00 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <MX_I2C3_Init+0x54>)
 8001a08:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <MX_I2C3_Init+0x58>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a22:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a3c:	4804      	ldr	r0, [pc, #16]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a3e:	f004 feff 	bl	8006840 <HAL_I2C_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a48:	f001 ff62 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200005e0 	.word	0x200005e0
 8001a54:	40005c00 	.word	0x40005c00
 8001a58:	00061a80 	.word	0x00061a80

08001a5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a62:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <MX_SPI2_Init+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a90:	2220      	movs	r2, #32
 8001a92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001aa8:	220a      	movs	r2, #10
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001aae:	f006 fb1f 	bl	80080f0 <HAL_SPI_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ab8:	f001 ff2a 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000634 	.word	0x20000634
 8001ac4:	40003800 	.word	0x40003800

08001ac8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	f107 0318 	add.w	r3, r7, #24
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af2:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001afa:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001afc:	2253      	movs	r2, #83	; 0x53
 8001afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001b06:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b1a:	4822      	ldr	r0, [pc, #136]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b1c:	f006 ff28 	bl	8008970 <HAL_TIM_Base_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001b26:	f001 fef3 	bl	8003910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b30:	f107 0318 	add.w	r3, r7, #24
 8001b34:	4619      	mov	r1, r3
 8001b36:	481b      	ldr	r0, [pc, #108]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b38:	f007 fbbc 	bl	80092b4 <HAL_TIM_ConfigClockSource>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b42:	f001 fee5 	bl	8003910 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b46:	4817      	ldr	r0, [pc, #92]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b48:	f007 f8f4 	bl	8008d34 <HAL_TIM_IC_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b52:	f001 fedd 	bl	8003910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	4619      	mov	r1, r3
 8001b64:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b66:	f008 f9dd 	bl	8009f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001b70:	f001 fece 	bl	8003910 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b74:	2300      	movs	r3, #0
 8001b76:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b84:	463b      	mov	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b8c:	f007 fa33 	bl	8008ff6 <HAL_TIM_IC_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001b96:	f001 febb 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000068c 	.word	0x2000068c

08001ba8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b092      	sub	sp, #72	; 0x48
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	615a      	str	r2, [r3, #20]
 8001be6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be8:	4b44      	ldr	r3, [pc, #272]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bea:	4a45      	ldr	r2, [pc, #276]	; (8001d00 <MX_TIM3_Init+0x158>)
 8001bec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7-1;
 8001bee:	4b43      	ldr	r3, [pc, #268]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bf0:	2206      	movs	r2, #6
 8001bf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001bfa:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c08:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c0e:	483b      	ldr	r0, [pc, #236]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c10:	f006 feae 	bl	8008970 <HAL_TIM_Base_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c1a:	f001 fe79 	bl	8003910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4834      	ldr	r0, [pc, #208]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c2c:	f007 fb42 	bl	80092b4 <HAL_TIM_ConfigClockSource>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c36:	f001 fe6b 	bl	8003910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c3a:	4830      	ldr	r0, [pc, #192]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c3c:	f006 ff58 	bl	8008af0 <HAL_TIM_PWM_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001c46:	f001 fe63 	bl	8003910 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001c4e:	2330      	movs	r3, #48	; 0x30
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	4619      	mov	r1, r3
 8001c58:	4828      	ldr	r0, [pc, #160]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c5a:	f007 fbf2 	bl	8009442 <HAL_TIM_SlaveConfigSynchro>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001c64:	f001 fe54 	bl	8003910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	4821      	ldr	r0, [pc, #132]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c78:	f008 f954 	bl	8009f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c82:	f001 fe45 	bl	8003910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c86:	2360      	movs	r3, #96	; 0x60
 8001c88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c96:	463b      	mov	r3, r7
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4817      	ldr	r0, [pc, #92]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c9e:	f007 fa47 	bl	8009130 <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001ca8:	f001 fe32 	bl	8003910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cac:	463b      	mov	r3, r7
 8001cae:	2204      	movs	r2, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4812      	ldr	r0, [pc, #72]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001cb4:	f007 fa3c 	bl	8009130 <HAL_TIM_PWM_ConfigChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001cbe:	f001 fe27 	bl	8003910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001cca:	f007 fa31 	bl	8009130 <HAL_TIM_PWM_ConfigChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8001cd4:	f001 fe1c 	bl	8003910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cd8:	463b      	mov	r3, r7
 8001cda:	220c      	movs	r2, #12
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4807      	ldr	r0, [pc, #28]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001ce0:	f007 fa26 	bl	8009130 <HAL_TIM_PWM_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8001cea:	f001 fe11 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cee:	4803      	ldr	r0, [pc, #12]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001cf0:	f002 f8ba 	bl	8003e68 <HAL_TIM_MspPostInit>

}
 8001cf4:	bf00      	nop
 8001cf6:	3748      	adds	r7, #72	; 0x48
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	200006d4 	.word	0x200006d4
 8001d00:	40000400 	.word	0x40000400

08001d04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08e      	sub	sp, #56	; 0x38
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
 8001d30:	615a      	str	r2, [r3, #20]
 8001d32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d34:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d36:	4a2c      	ldr	r2, [pc, #176]	; (8001de8 <MX_TIM4_Init+0xe4>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d3a:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d46:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d5a:	4822      	ldr	r0, [pc, #136]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d5c:	f006 fe08 	bl	8008970 <HAL_TIM_Base_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d66:	f001 fdd3 	bl	8003910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d74:	4619      	mov	r1, r3
 8001d76:	481b      	ldr	r0, [pc, #108]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d78:	f007 fa9c 	bl	80092b4 <HAL_TIM_ConfigClockSource>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d82:	f001 fdc5 	bl	8003910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d86:	4817      	ldr	r0, [pc, #92]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d88:	f006 feb2 	bl	8008af0 <HAL_TIM_PWM_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d92:	f001 fdbd 	bl	8003910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	4619      	mov	r1, r3
 8001da4:	480f      	ldr	r0, [pc, #60]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001da6:	f008 f8bd 	bl	8009f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001db0:	f001 fdae 	bl	8003910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db4:	2360      	movs	r3, #96	; 0x60
 8001db6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4806      	ldr	r0, [pc, #24]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001dcc:	f007 f9b0 	bl	8009130 <HAL_TIM_PWM_ConfigChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001dd6:	f001 fd9b 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	3738      	adds	r7, #56	; 0x38
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000071c 	.word	0x2000071c
 8001de8:	40000800 	.word	0x40000800

08001dec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df2:	463b      	mov	r3, r7
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001dfc:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <MX_TIM6_Init+0x68>)
 8001dfe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e02:	2253      	movs	r2, #83	; 0x53
 8001e04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65000;
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e0e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001e12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e1c:	f006 fda8 	bl	8008970 <HAL_TIM_Base_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e26:	f001 fd73 	bl	8003910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e32:	463b      	mov	r3, r7
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e38:	f008 f874 	bl	8009f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e42:	f001 fd65 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000764 	.word	0x20000764
 8001e54:	40001000 	.word	0x40001000

08001e58 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e68:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <MX_TIM7_Init+0x68>)
 8001e6a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 85-1;
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e6e:	2254      	movs	r2, #84	; 0x54
 8001e70:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001e78:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e7e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e86:	480d      	ldr	r0, [pc, #52]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e88:	f006 fd72 	bl	8008970 <HAL_TIM_Base_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001e92:	f001 fd3d 	bl	8003910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4806      	ldr	r0, [pc, #24]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001ea4:	f008 f83e 	bl	8009f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001eae:	f001 fd2f 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200007ac 	.word	0x200007ac
 8001ec0:	40001400 	.word	0x40001400

08001ec4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001eca:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <MX_USART1_UART_Init+0x4c>)
 8001ecc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 420000;
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ed0:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <MX_USART1_UART_Init+0x50>)
 8001ed2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ee8:	220c      	movs	r2, #12
 8001eea:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ef8:	4804      	ldr	r0, [pc, #16]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001efa:	f008 f8a3 	bl	800a044 <HAL_UART_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001f04:	f001 fd04 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200007f4 	.word	0x200007f4
 8001f10:	40011000 	.word	0x40011000
 8001f14:	000668a0 	.word	0x000668a0

08001f18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <MX_USART2_UART_Init+0x50>)
 8001f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f50:	f008 f878 	bl	800a044 <HAL_UART_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f5a:	f001 fcd9 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000838 	.word	0x20000838
 8001f68:	40004400 	.word	0x40004400

08001f6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <MX_USART3_UART_Init+0x50>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001fa4:	f008 f84e 	bl	800a044 <HAL_UART_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fae:	f001 fcaf 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	2000087c 	.word	0x2000087c
 8001fbc:	40004800 	.word	0x40004800

08001fc0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <MX_USART6_UART_Init+0x50>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001ff8:	f008 f824 	bl	800a044 <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002002:	f001 fc85 	bl	8003910 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200008c0 	.word	0x200008c0
 8002010:	40011400 	.word	0x40011400

08002014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_DMA_Init+0x3c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <MX_DMA_Init+0x3c>)
 8002024:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_DMA_Init+0x3c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2105      	movs	r1, #5
 800203a:	203a      	movs	r0, #58	; 0x3a
 800203c:	f003 fddf 	bl	8005bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002040:	203a      	movs	r0, #58	; 0x3a
 8002042:	f003 fdf8 	bl	8005c36 <HAL_NVIC_EnableIRQ>

}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800

08002054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a6c      	ldr	r2, [pc, #432]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b6a      	ldr	r3, [pc, #424]	; (8002224 <MX_GPIO_Init+0x1d0>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b66      	ldr	r3, [pc, #408]	; (8002224 <MX_GPIO_Init+0x1d0>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a65      	ldr	r2, [pc, #404]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b63      	ldr	r3, [pc, #396]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	4b5f      	ldr	r3, [pc, #380]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a5e      	ldr	r2, [pc, #376]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b5c      	ldr	r3, [pc, #368]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	4b58      	ldr	r3, [pc, #352]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a57      	ldr	r2, [pc, #348]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b55      	ldr	r3, [pc, #340]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	4b51      	ldr	r3, [pc, #324]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a50      	ldr	r2, [pc, #320]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|GNSS_RST_Pin, GPIO_PIN_RESET);
 80020f6:	2200      	movs	r2, #0
 80020f8:	f248 0102 	movw	r1, #32770	; 0x8002
 80020fc:	484a      	ldr	r0, [pc, #296]	; (8002228 <MX_GPIO_Init+0x1d4>)
 80020fe:	f004 fb53 	bl	80067a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	f241 0118 	movw	r1, #4120	; 0x1018
 8002108:	4848      	ldr	r0, [pc, #288]	; (800222c <MX_GPIO_Init+0x1d8>)
 800210a:	f004 fb4d 	bl	80067a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002114:	4846      	ldr	r0, [pc, #280]	; (8002230 <MX_GPIO_Init+0x1dc>)
 8002116:	f004 fb47 	bl	80067a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	2104      	movs	r1, #4
 800211e:	4845      	ldr	r0, [pc, #276]	; (8002234 <MX_GPIO_Init+0x1e0>)
 8002120:	f004 fb42 	bl	80067a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IT_MAGN_Pin BUTTON_Pin */
  GPIO_InitStruct.Pin = IT_MAGN_Pin|BUTTON_Pin;
 8002124:	f242 0301 	movw	r3, #8193	; 0x2001
 8002128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800212a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800212e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4619      	mov	r1, r3
 800213a:	483d      	ldr	r0, [pc, #244]	; (8002230 <MX_GPIO_Init+0x1dc>)
 800213c:	f004 f998 	bl	8006470 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin GNSS_RST_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|GNSS_RST_Pin;
 8002140:	f248 0302 	movw	r3, #32770	; 0x8002
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002146:	2301      	movs	r3, #1
 8002148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	4833      	ldr	r0, [pc, #204]	; (8002228 <MX_GPIO_Init+0x1d4>)
 800215a:	f004 f989 	bl	8006470 <HAL_GPIO_Init>

  /*Configure GPIO pin : IT_PRESS_Pin */
  GPIO_InitStruct.Pin = IT_PRESS_Pin;
 800215e:	2304      	movs	r3, #4
 8002160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002162:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IT_PRESS_GPIO_Port, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	482e      	ldr	r0, [pc, #184]	; (800222c <MX_GPIO_Init+0x1d8>)
 8002174:	f004 f97c 	bl	8006470 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_GYRO_Pin PB3 PB4 */
  GPIO_InitStruct.Pin = CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4;
 8002178:	f241 0318 	movw	r3, #4120	; 0x1018
 800217c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217e:	2301      	movs	r3, #1
 8002180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	4826      	ldr	r0, [pc, #152]	; (800222c <MX_GPIO_Init+0x1d8>)
 8002192:	f004 f96d 	bl	8006470 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_ACC_Pin */
  GPIO_InitStruct.Pin = CS_ACC_Pin;
 8002196:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_ACC_GPIO_Port, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	4820      	ldr	r0, [pc, #128]	; (8002230 <MX_GPIO_Init+0x1dc>)
 80021b0:	f004 f95e 	bl	8006470 <HAL_GPIO_Init>

  /*Configure GPIO pins : IT_GYRO_Pin IT_ACC_Pin */
  GPIO_InitStruct.Pin = IT_GYRO_Pin|IT_ACC_Pin;
 80021b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	4817      	ldr	r0, [pc, #92]	; (8002228 <MX_GPIO_Init+0x1d4>)
 80021cc:	f004 f950 	bl	8006470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021d0:	2304      	movs	r3, #4
 80021d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4619      	mov	r1, r3
 80021e6:	4813      	ldr	r0, [pc, #76]	; (8002234 <MX_GPIO_Init+0x1e0>)
 80021e8:	f004 f942 	bl	8006470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80021ec:	2200      	movs	r2, #0
 80021ee:	2105      	movs	r1, #5
 80021f0:	2006      	movs	r0, #6
 80021f2:	f003 fd04 	bl	8005bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021f6:	2006      	movs	r0, #6
 80021f8:	f003 fd1d 	bl	8005c36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2105      	movs	r1, #5
 8002200:	2008      	movs	r0, #8
 8002202:	f003 fcfc 	bl	8005bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002206:	2008      	movs	r0, #8
 8002208:	f003 fd15 	bl	8005c36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2105      	movs	r1, #5
 8002210:	2028      	movs	r0, #40	; 0x28
 8002212:	f003 fcf4 	bl	8005bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002216:	2028      	movs	r0, #40	; 0x28
 8002218:	f003 fd0d 	bl	8005c36 <HAL_NVIC_EnableIRQ>

}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000
 800222c:	40020400 	.word	0x40020400
 8002230:	40020800 	.word	0x40020800
 8002234:	40020c00 	.word	0x40020c00

08002238 <HAL_GPIO_EXTI_Callback>:

    return reversed;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin) {
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d11c      	bne.n	8002282 <HAL_GPIO_EXTI_Callback+0x4a>
		if(state == 4){state = 5;}
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d102      	bne.n	8002256 <HAL_GPIO_EXTI_Callback+0x1e>
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002252:	2205      	movs	r2, #5
 8002254:	701a      	strb	r2, [r3, #0]
		if(state == 3){state = 4;}
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d102      	bne.n	8002264 <HAL_GPIO_EXTI_Callback+0x2c>
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002260:	2204      	movs	r2, #4
 8002262:	701a      	strb	r2, [r3, #0]
		if(state == 2){state = 3;}
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d102      	bne.n	8002272 <HAL_GPIO_EXTI_Callback+0x3a>
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800226e:	2203      	movs	r2, #3
 8002270:	701a      	strb	r2, [r3, #0]
		if(state == 1){state = 2;}
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d104      	bne.n	8002284 <HAL_GPIO_EXTI_Callback+0x4c>
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800227c:	2202      	movs	r2, #2
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e000      	b.n	8002284 <HAL_GPIO_EXTI_Callback+0x4c>
	  } else {
	      __NOP();
 8002282:	bf00      	nop
	  }

	if(GPIO_Pin == IT_ACC_Pin) {
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800228a:	d103      	bne.n	8002294 <HAL_GPIO_EXTI_Callback+0x5c>

	 readstart = 1;
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_GPIO_EXTI_Callback+0x80>)
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	e000      	b.n	8002296 <HAL_GPIO_EXTI_Callback+0x5e>
  } else {
      __NOP();
 8002294:	bf00      	nop
  }
  if(GPIO_Pin == IT_MAGN_Pin) {
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229c:	d103      	bne.n	80022a6 <HAL_GPIO_EXTI_Callback+0x6e>
  	 //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

  	 billent = 1;
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_GPIO_EXTI_Callback+0x84>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
    } else {
        __NOP();
    }
}
 80022a4:	e000      	b.n	80022a8 <HAL_GPIO_EXTI_Callback+0x70>
        __NOP();
 80022a6:	bf00      	nop
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	20000009 	.word	0x20000009
 80022b8:	20000008 	.word	0x20000008
 80022bc:	20000a0c 	.word	0x20000a0c

080022c0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a47      	ldr	r2, [pc, #284]	; (80023e8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	f040 8083 	bne.w	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
	  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80022d2:	2110      	movs	r1, #16
 80022d4:	4845      	ldr	r0, [pc, #276]	; (80023ec <HAL_TIM_IC_CaptureCallback+0x12c>)
 80022d6:	f004 fa80 	bl	80067da <HAL_GPIO_TogglePin>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7f1b      	ldrb	r3, [r3, #28]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d17a      	bne.n	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 80022e2:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d11a      	bne.n	8002320 <HAL_TIM_IC_CaptureCallback+0x60>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80022ea:	2100      	movs	r1, #0
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f007 f8eb 	bl	80094c8 <HAL_TIM_ReadCapturedValue>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4a3f      	ldr	r2, [pc, #252]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80022f6:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 80022f8:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6a1a      	ldr	r2, [r3, #32]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 020a 	bic.w	r2, r2, #10
 800230c:	621a      	str	r2, [r3, #32]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6a1a      	ldr	r2, [r3, #32]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0202 	orr.w	r2, r2, #2
 800231c:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				//__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
			}
		}
	  }
}
 800231e:	e05b      	b.n	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
			else if (Is_First_Captured==1)   // if the first is already captured
 8002320:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d157      	bne.n	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8002328:	2100      	movs	r1, #0
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f007 f8cc 	bl	80094c8 <HAL_TIM_ReadCapturedValue>
 8002330:	4603      	mov	r3, r0
 8002332:	4a31      	ldr	r2, [pc, #196]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002334:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2200      	movs	r2, #0
 800233c:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Val2 > IC_Val1)
 800233e:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d907      	bls.n	800235a <HAL_TIM_IC_CaptureCallback+0x9a>
					Difference = IC_Val2-IC_Val1;
 800234a:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	4a29      	ldr	r2, [pc, #164]	; (80023fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	e00f      	b.n	800237a <HAL_TIM_IC_CaptureCallback+0xba>
				else if (IC_Val1 > IC_Val2)
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d909      	bls.n	800237a <HAL_TIM_IC_CaptureCallback+0xba>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002374:	33ff      	adds	r3, #255	; 0xff
 8002376:	4a21      	ldr	r2, [pc, #132]	; (80023fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002378:	6013      	str	r3, [r2, #0]
				Distance = Difference * .34/2;
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f8c0 	bl	8000504 <__aeabi_ui2d>
 8002384:	a316      	add	r3, pc, #88	; (adr r3, 80023e0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	f7fe f935 	bl	80005f8 <__aeabi_dmul>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800239e:	f7fe fa55 	bl	800084c <__aeabi_ddiv>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	f7fe fbfd 	bl	8000ba8 <__aeabi_d2uiz>
 80023ae:	4603      	mov	r3, r0
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b13      	ldr	r3, [pc, #76]	; (8002400 <HAL_TIM_IC_CaptureCallback+0x140>)
 80023b4:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6a1a      	ldr	r2, [r3, #32]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 020a 	bic.w	r2, r2, #10
 80023ca:	621a      	str	r2, [r3, #32]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6a12      	ldr	r2, [r2, #32]
 80023d6:	621a      	str	r2, [r3, #32]
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	5c28f5c3 	.word	0x5c28f5c3
 80023e4:	3fd5c28f 	.word	0x3fd5c28f
 80023e8:	2000068c 	.word	0x2000068c
 80023ec:	40020400 	.word	0x40020400
 80023f0:	20000b10 	.word	0x20000b10
 80023f4:	20000b04 	.word	0x20000b04
 80023f8:	20000b08 	.word	0x20000b08
 80023fc:	20000b0c 	.word	0x20000b0c
 8002400:	20000b11 	.word	0x20000b11

08002404 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6 )
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d10d      	bne.n	8002430 <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
	  if(timerse == 1){timerse =0;}
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d102      	bne.n	8002422 <HAL_TIM_PeriodElapsedCallback+0x1e>
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
	  if(timerse == 0){timerse =1;}
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <HAL_TIM_PeriodElapsedCallback+0x2c>
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800242c:	2201      	movs	r2, #1
 800242e:	701a      	strb	r2, [r3, #0]
  }
  if(htim == &htim7){

  }
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	20000764 	.word	0x20000764
 8002440:	20000b24 	.word	0x20000b24

08002444 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a06      	ldr	r2, [pc, #24]	; (8002468 <HAL_UART_TxCpltCallback+0x24>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d102      	bne.n	800245a <HAL_UART_TxCpltCallback+0x16>
			telemetria_data_sent = 1;
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_UART_TxCpltCallback+0x28>)
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
	}
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000838 	.word	0x20000838
 800246c:	20000b13 	.word	0x20000b13

08002470 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	if(huart ==&huart1){
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a42      	ldr	r2, [pc, #264]	; (8002584 <HAL_UART_RxCpltCallback+0x114>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d17b      	bne.n	8002578 <HAL_UART_RxCpltCallback+0x108>
		debug_i = __HAL_TIM_GET_COUNTER(&htim6);
 8002480:	4b41      	ldr	r3, [pc, #260]	; (8002588 <HAL_UART_RxCpltCallback+0x118>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	461a      	mov	r2, r3
 8002488:	4b40      	ldr	r3, [pc, #256]	; (800258c <HAL_UART_RxCpltCallback+0x11c>)
 800248a:	601a      	str	r2, [r3, #0]
		if(debug_i < 100){
 800248c:	4b3f      	ldr	r3, [pc, #252]	; (800258c <HAL_UART_RxCpltCallback+0x11c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b63      	cmp	r3, #99	; 0x63
 8002492:	dc0d      	bgt.n	80024b0 <HAL_UART_RxCpltCallback+0x40>
			CRSF_debug[CRSF_i] = UART1_rxBuffer[0];
 8002494:	4b3e      	ldr	r3, [pc, #248]	; (8002590 <HAL_UART_RxCpltCallback+0x120>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4b3e      	ldr	r3, [pc, #248]	; (8002594 <HAL_UART_RxCpltCallback+0x124>)
 800249c:	7819      	ldrb	r1, [r3, #0]
 800249e:	4b3e      	ldr	r3, [pc, #248]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 80024a0:	5499      	strb	r1, [r3, r2]
			CRSF_i++;
 80024a2:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <HAL_UART_RxCpltCallback+0x120>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4b39      	ldr	r3, [pc, #228]	; (8002590 <HAL_UART_RxCpltCallback+0x120>)
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	e05f      	b.n	8002570 <HAL_UART_RxCpltCallback+0x100>
		}
		else{
			if(CRSF_debug[2] == 0x16){
 80024b0:	4b39      	ldr	r3, [pc, #228]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 80024b2:	789b      	ldrb	r3, [r3, #2]
 80024b4:	2b16      	cmp	r3, #22
 80024b6:	d154      	bne.n	8002562 <HAL_UART_RxCpltCallback+0xf2>
				RX_roll = (((uint16_t)(CRSF_debug[4] & 0b00000111)) << 8) + (uint16_t)(CRSF_debug[3]);
 80024b8:	4b37      	ldr	r3, [pc, #220]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 80024ba:	791b      	ldrb	r3, [r3, #4]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	b29b      	uxth	r3, r3
 80024c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4b34      	ldr	r3, [pc, #208]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 80024c8:	78db      	ldrb	r3, [r3, #3]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <HAL_UART_RxCpltCallback+0x12c>)
 80024d2:	801a      	strh	r2, [r3, #0]
				RX_pitch = (((uint16_t)(CRSF_debug[5] & 0b00111111)) << 5) + (((uint16_t)(CRSF_debug[4] & 0b11111000)) >> 3);
 80024d4:	4b30      	ldr	r3, [pc, #192]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 80024d6:	795b      	ldrb	r3, [r3, #5]
 80024d8:	015b      	lsls	r3, r3, #5
 80024da:	b29b      	uxth	r3, r3
 80024dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 80024e4:	791b      	ldrb	r3, [r3, #4]
 80024e6:	08db      	lsrs	r3, r3, #3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_UART_RxCpltCallback+0x130>)
 80024f2:	801a      	strh	r2, [r3, #0]
				RX_throttle = (((uint16_t)(CRSF_debug[7] & 0b00000001)) << 10)+ (((uint16_t)(CRSF_debug[6])) << 2) + (((uint16_t)(CRSF_debug[5] & 0b11000000)) >> 6);
 80024f4:	4b28      	ldr	r3, [pc, #160]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 80024f6:	79db      	ldrb	r3, [r3, #7]
 80024f8:	029b      	lsls	r3, r3, #10
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002500:	b29a      	uxth	r2, r3
 8002502:	4b25      	ldr	r3, [pc, #148]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 8002504:	799b      	ldrb	r3, [r3, #6]
 8002506:	b29b      	uxth	r3, r3
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	b29b      	uxth	r3, r3
 800250c:	4413      	add	r3, r2
 800250e:	b29a      	uxth	r2, r3
 8002510:	4b21      	ldr	r3, [pc, #132]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 8002512:	795b      	ldrb	r3, [r3, #5]
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	b2db      	uxtb	r3, r3
 8002518:	b29b      	uxth	r3, r3
 800251a:	4413      	add	r3, r2
 800251c:	b29a      	uxth	r2, r3
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_UART_RxCpltCallback+0x134>)
 8002520:	801a      	strh	r2, [r3, #0]
				RX_yaw = (((uint16_t)(CRSF_debug[8] & 0b00001111)) << 7) + (((uint16_t)(CRSF_debug[7] & 0b11111110)) >> 1);
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 8002524:	7a1b      	ldrb	r3, [r3, #8]
 8002526:	01db      	lsls	r3, r3, #7
 8002528:	b29b      	uxth	r3, r3
 800252a:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 800252e:	b29a      	uxth	r2, r3
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 8002532:	79db      	ldrb	r3, [r3, #7]
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	b29b      	uxth	r3, r3
 800253a:	4413      	add	r3, r2
 800253c:	b29a      	uxth	r2, r3
 800253e:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <HAL_UART_RxCpltCallback+0x138>)
 8002540:	801a      	strh	r2, [r3, #0]
				RX_arm = (((uint16_t)(CRSF_debug[9] & 0b01111111)) << 4) + (((uint16_t)(CRSF_debug[8] & 0b11110000)) >> 4);
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 8002544:	7a5b      	ldrb	r3, [r3, #9]
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	b29b      	uxth	r3, r3
 800254a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800254e:	b29a      	uxth	r2, r3
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 8002552:	7a1b      	ldrb	r3, [r3, #8]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	b2db      	uxtb	r3, r3
 8002558:	b29b      	uxth	r3, r3
 800255a:	4413      	add	r3, r2
 800255c:	b29a      	uxth	r2, r3
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <HAL_UART_RxCpltCallback+0x13c>)
 8002560:	801a      	strh	r2, [r3, #0]
			}
			CRSF_debug[0] = UART1_rxBuffer[0];
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_UART_RxCpltCallback+0x124>)
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <HAL_UART_RxCpltCallback+0x128>)
 8002568:	701a      	strb	r2, [r3, #0]
			CRSF_i = 1;
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_UART_RxCpltCallback+0x120>)
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
		}
		htim6.Instance->CNT = 0;
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_UART_RxCpltCallback+0x118>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	625a      	str	r2, [r3, #36]	; 0x24
//			HAL_UART_Receive_IT(&huart2, telem, 11);
//		}
//		else
//			HAL_UART_Receive_IT(&huart2, telem, 11);
	}
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	200007f4 	.word	0x200007f4
 8002588:	20000764 	.word	0x20000764
 800258c:	20000b20 	.word	0x20000b20
 8002590:	20000ba8 	.word	0x20000ba8
 8002594:	20000bac 	.word	0x20000bac
 8002598:	20000b68 	.word	0x20000b68
 800259c:	20000bae 	.word	0x20000bae
 80025a0:	20000bb0 	.word	0x20000bb0
 80025a4:	20000bb4 	.word	0x20000bb4
 80025a8:	20000bb2 	.word	0x20000bb2
 80025ac:	20000bb6 	.word	0x20000bb6

080025b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80025b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025b4:	b0fa      	sub	sp, #488	; 0x1e8
 80025b6:	af24      	add	r7, sp, #144	; 0x90
 80025b8:	67f8      	str	r0, [r7, #124]	; 0x7c
  /* USER CODE BEGIN 5 */
	uint8_t telemetria_data[140] = "HELLO WORLD \r\n";
 80025ba:	4bc1      	ldr	r3, [pc, #772]	; (80028c0 <StartDefaultTask+0x310>)
 80025bc:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 80025c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025c2:	c407      	stmia	r4!, {r0, r1, r2}
 80025c4:	8023      	strh	r3, [r4, #0]
 80025c6:	3402      	adds	r4, #2
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	7023      	strb	r3, [r4, #0]
 80025cc:	f107 03db 	add.w	r3, r7, #219	; 0xdb
 80025d0:	227d      	movs	r2, #125	; 0x7d
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f00c fcf1 	bl	800efbc <memset>


  /* Infinite loop */
  for(;;)
  {
	  if(uart_telemetria == 1){
 80025da:	4bba      	ldr	r3, [pc, #744]	; (80028c4 <StartDefaultTask+0x314>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	f040 8086 	bne.w	80026f0 <StartDefaultTask+0x140>
		  if(telem[0] == 'P'){
 80025e4:	4bb8      	ldr	r3, [pc, #736]	; (80028c8 <StartDefaultTask+0x318>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b50      	cmp	r3, #80	; 0x50
 80025ea:	d13e      	bne.n	800266a <StartDefaultTask+0xba>
			  telem_P = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 80025ec:	4bb6      	ldr	r3, [pc, #728]	; (80028c8 <StartDefaultTask+0x318>)
 80025ee:	785b      	ldrb	r3, [r3, #1]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4bb6      	ldr	r3, [pc, #728]	; (80028cc <StartDefaultTask+0x31c>)
 80025f4:	fb03 f202 	mul.w	r2, r3, r2
 80025f8:	4bb3      	ldr	r3, [pc, #716]	; (80028c8 <StartDefaultTask+0x318>)
 80025fa:	789b      	ldrb	r3, [r3, #2]
 80025fc:	4619      	mov	r1, r3
 80025fe:	4bb4      	ldr	r3, [pc, #720]	; (80028d0 <StartDefaultTask+0x320>)
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	441a      	add	r2, r3
 8002606:	4bb0      	ldr	r3, [pc, #704]	; (80028c8 <StartDefaultTask+0x318>)
 8002608:	78db      	ldrb	r3, [r3, #3]
 800260a:	4619      	mov	r1, r3
 800260c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	441a      	add	r2, r3
 8002616:	4bac      	ldr	r3, [pc, #688]	; (80028c8 <StartDefaultTask+0x318>)
 8002618:	791b      	ldrb	r3, [r3, #4]
 800261a:	4619      	mov	r1, r3
 800261c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	441a      	add	r2, r3
 8002626:	4ba8      	ldr	r3, [pc, #672]	; (80028c8 <StartDefaultTask+0x318>)
 8002628:	795b      	ldrb	r3, [r3, #5]
 800262a:	4619      	mov	r1, r3
 800262c:	2364      	movs	r3, #100	; 0x64
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	441a      	add	r2, r3
 8002634:	4ba4      	ldr	r3, [pc, #656]	; (80028c8 <StartDefaultTask+0x318>)
 8002636:	799b      	ldrb	r3, [r3, #6]
 8002638:	4619      	mov	r1, r3
 800263a:	460b      	mov	r3, r1
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4413      	add	r3, r2
 8002644:	4aa0      	ldr	r2, [pc, #640]	; (80028c8 <StartDefaultTask+0x318>)
 8002646:	79d2      	ldrb	r2, [r2, #7]
 8002648:	441a      	add	r2, r3
 800264a:	4ba2      	ldr	r3, [pc, #648]	; (80028d4 <StartDefaultTask+0x324>)
 800264c:	4413      	add	r3, r2
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002656:	eddf 6aa0 	vldr	s13, [pc, #640]	; 80028d8 <StartDefaultTask+0x328>
 800265a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800265e:	4b9f      	ldr	r3, [pc, #636]	; (80028dc <StartDefaultTask+0x32c>)
 8002660:	edc3 7a00 	vstr	s15, [r3]
			  new_P = 1;
 8002664:	4b9e      	ldr	r3, [pc, #632]	; (80028e0 <StartDefaultTask+0x330>)
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
		  }
		  if(telem[0] == 'D'){
 800266a:	4b97      	ldr	r3, [pc, #604]	; (80028c8 <StartDefaultTask+0x318>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b44      	cmp	r3, #68	; 0x44
 8002670:	d13e      	bne.n	80026f0 <StartDefaultTask+0x140>
			  telem_D = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 8002672:	4b95      	ldr	r3, [pc, #596]	; (80028c8 <StartDefaultTask+0x318>)
 8002674:	785b      	ldrb	r3, [r3, #1]
 8002676:	461a      	mov	r2, r3
 8002678:	4b94      	ldr	r3, [pc, #592]	; (80028cc <StartDefaultTask+0x31c>)
 800267a:	fb03 f202 	mul.w	r2, r3, r2
 800267e:	4b92      	ldr	r3, [pc, #584]	; (80028c8 <StartDefaultTask+0x318>)
 8002680:	789b      	ldrb	r3, [r3, #2]
 8002682:	4619      	mov	r1, r3
 8002684:	4b92      	ldr	r3, [pc, #584]	; (80028d0 <StartDefaultTask+0x320>)
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	441a      	add	r2, r3
 800268c:	4b8e      	ldr	r3, [pc, #568]	; (80028c8 <StartDefaultTask+0x318>)
 800268e:	78db      	ldrb	r3, [r3, #3]
 8002690:	4619      	mov	r1, r3
 8002692:	f242 7310 	movw	r3, #10000	; 0x2710
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	441a      	add	r2, r3
 800269c:	4b8a      	ldr	r3, [pc, #552]	; (80028c8 <StartDefaultTask+0x318>)
 800269e:	791b      	ldrb	r3, [r3, #4]
 80026a0:	4619      	mov	r1, r3
 80026a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	441a      	add	r2, r3
 80026ac:	4b86      	ldr	r3, [pc, #536]	; (80028c8 <StartDefaultTask+0x318>)
 80026ae:	795b      	ldrb	r3, [r3, #5]
 80026b0:	4619      	mov	r1, r3
 80026b2:	2364      	movs	r3, #100	; 0x64
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	441a      	add	r2, r3
 80026ba:	4b83      	ldr	r3, [pc, #524]	; (80028c8 <StartDefaultTask+0x318>)
 80026bc:	799b      	ldrb	r3, [r3, #6]
 80026be:	4619      	mov	r1, r3
 80026c0:	460b      	mov	r3, r1
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	4a7f      	ldr	r2, [pc, #508]	; (80028c8 <StartDefaultTask+0x318>)
 80026cc:	79d2      	ldrb	r2, [r2, #7]
 80026ce:	441a      	add	r2, r3
 80026d0:	4b80      	ldr	r3, [pc, #512]	; (80028d4 <StartDefaultTask+0x324>)
 80026d2:	4413      	add	r3, r2
 80026d4:	ee07 3a90 	vmov	s15, r3
 80026d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026dc:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80028d8 <StartDefaultTask+0x328>
 80026e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026e4:	4b7f      	ldr	r3, [pc, #508]	; (80028e4 <StartDefaultTask+0x334>)
 80026e6:	edc3 7a00 	vstr	s15, [r3]
			  new_D = 1;
 80026ea:	4b7f      	ldr	r3, [pc, #508]	; (80028e8 <StartDefaultTask+0x338>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if (xQueueReceive(telemetria_Queue, (void*)&telemetria_send, 0) == pdTRUE){
 80026f0:	4b7e      	ldr	r3, [pc, #504]	; (80028ec <StartDefaultTask+0x33c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80026f8:	2200      	movs	r2, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f00a fe48 	bl	800d390 <xQueueReceive>
 8002700:	4603      	mov	r3, r0
 8002702:	2b01      	cmp	r3, #1
 8002704:	f040 80fa 	bne.w	80028fc <StartDefaultTask+0x34c>

		  if(telemetria_data_sent == 1){
 8002708:	4b79      	ldr	r3, [pc, #484]	; (80028f0 <StartDefaultTask+0x340>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	f040 80f5 	bne.w	80028fc <StartDefaultTask+0x34c>
//			  sprintf((char*)telemetria_data, "%2.2f, %2.2f, %2.2f, %3.2f, %3.2f, %3.2f, %4.1f, %4.1f, %4.1f, %3.1f, %3.1f, %3.1f, %3.1f\r\n", telemetria_send[0], telemetria_send[1], telemetria_send[2], telemetria_send[3], telemetria_send[4], telemetria_send[5], telemetria_send[6], telemetria_send[7], telemetria_send[8], telemetria_send[9], telemetria_send[10], telemetria_send[11], telemetria_send[12]); //%5.2f
			  sprintf((char*)telemetria_data, "%2.2f, %2.2f, %2.2f, %3.2f, %3.2f, %3.2f, %4.1f, %4.1f, %4.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f\r\n", telemetria_send[0], telemetria_send[1], telemetria_send[2], telemetria_send[3], telemetria_send[4], telemetria_send[5], telemetria_send[6], telemetria_send[7], telemetria_send[8], telemetria_send[9], telemetria_send[10], telemetria_send[11], telemetria_send[12],telemetria_send[13], telemetria_send[14], telemetria_send[15], telemetria_send[16], telemetria_send[17], telemetria_send[18]); //%5.2f
 8002712:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd ff16 	bl	8000548 <__aeabi_f2d>
 800271c:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
 8002720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd ff0f 	bl	8000548 <__aeabi_f2d>
 800272a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
 800272e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd ff08 	bl	8000548 <__aeabi_f2d>
 8002738:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 800273c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd ff01 	bl	8000548 <__aeabi_f2d>
 8002746:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 800274a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd fefa 	bl	8000548 <__aeabi_f2d>
 8002754:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8002758:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd fef3 	bl	8000548 <__aeabi_f2d>
 8002762:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8002766:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd feec 	bl	8000548 <__aeabi_f2d>
 8002770:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8002774:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002778:	4618      	mov	r0, r3
 800277a:	f7fd fee5 	bl	8000548 <__aeabi_f2d>
 800277e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8002782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd fede 	bl	8000548 <__aeabi_f2d>
 800278c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8002790:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd fed7 	bl	8000548 <__aeabi_f2d>
 800279a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 800279e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fd fed0 	bl	8000548 <__aeabi_f2d>
 80027a8:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80027ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd fec9 	bl	8000548 <__aeabi_f2d>
 80027b6:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80027ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd fec2 	bl	8000548 <__aeabi_f2d>
 80027c4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80027c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd febb 	bl	8000548 <__aeabi_f2d>
 80027d2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80027d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fd feb4 	bl	8000548 <__aeabi_f2d>
 80027e0:	e9c7 0100 	strd	r0, r1, [r7]
 80027e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fead 	bl	8000548 <__aeabi_f2d>
 80027ee:	4682      	mov	sl, r0
 80027f0:	468b      	mov	fp, r1
 80027f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fea6 	bl	8000548 <__aeabi_f2d>
 80027fc:	4680      	mov	r8, r0
 80027fe:	4689      	mov	r9, r1
 8002800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd fe9f 	bl	8000548 <__aeabi_f2d>
 800280a:	4604      	mov	r4, r0
 800280c:	460d      	mov	r5, r1
 800280e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fe98 	bl	8000548 <__aeabi_f2d>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8002820:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8002824:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 8002828:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 800282c:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 8002830:	ed97 7b00 	vldr	d7, [r7]
 8002834:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8002838:	ed97 7b02 	vldr	d7, [r7, #8]
 800283c:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8002840:	ed97 7b04 	vldr	d7, [r7, #16]
 8002844:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8002848:	ed97 7b06 	vldr	d7, [r7, #24]
 800284c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002850:	ed97 7b08 	vldr	d7, [r7, #32]
 8002854:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002858:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800285c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002860:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002864:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002868:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800286c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002870:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002874:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002878:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800287c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002880:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002884:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002888:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800288c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002890:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002894:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002898:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800289c:	ed8d 7b00 	vstr	d7, [sp]
 80028a0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80028a4:	4913      	ldr	r1, [pc, #76]	; (80028f4 <StartDefaultTask+0x344>)
 80028a6:	f00c fffb 	bl	800f8a0 <siprintf>
			  HAL_UART_Transmit_IT(&huart2, telemetria_data, sizeof (telemetria_data));
 80028aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028ae:	228c      	movs	r2, #140	; 0x8c
 80028b0:	4619      	mov	r1, r3
 80028b2:	4811      	ldr	r0, [pc, #68]	; (80028f8 <StartDefaultTask+0x348>)
 80028b4:	f007 fc13 	bl	800a0de <HAL_UART_Transmit_IT>
			  telemetria_data_sent = 0;
 80028b8:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <StartDefaultTask+0x340>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	e01d      	b.n	80028fc <StartDefaultTask+0x34c>
 80028c0:	080143d8 	.word	0x080143d8
 80028c4:	20000b12 	.word	0x20000b12
 80028c8:	20000000 	.word	0x20000000
 80028cc:	000f4240 	.word	0x000f4240
 80028d0:	000186a0 	.word	0x000186a0
 80028d4:	fcd232b0 	.word	0xfcd232b0
 80028d8:	47c35000 	.word	0x47c35000
 80028dc:	20000b14 	.word	0x20000b14
 80028e0:	20000b1c 	.word	0x20000b1c
 80028e4:	20000b18 	.word	0x20000b18
 80028e8:	20000b1d 	.word	0x20000b1d
 80028ec:	20000bd0 	.word	0x20000bd0
 80028f0:	20000b13 	.word	0x20000b13
 80028f4:	08014350 	.word	0x08014350
 80028f8:	20000838 	.word	0x20000838
		  }
	  }


	  osDelay(10);
 80028fc:	200a      	movs	r0, #10
 80028fe:	f00a fabf 	bl	800ce80 <osDelay>
	  if(uart_telemetria == 1){
 8002902:	e66a      	b.n	80025da <StartDefaultTask+0x2a>
 8002904:	0000      	movs	r0, r0
	...

08002908 <Start_Data_Reading>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Data_Reading */
void Start_Data_Reading(void const * argument)
{
 8002908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800290a:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 800290e:	af06      	add	r7, sp, #24
 8002910:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002914:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002918:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Data_Reading */
	extern QueueHandle_t telemetria_Queue;

	//magnetometer calibration
	FusionVector magneto_offset = {-11.31, -3.64, 0.43};//{-11.8, -5.68, 3.08};
 800291a:	4a6a      	ldr	r2, [pc, #424]	; (8002ac4 <Start_Data_Reading+0x1bc>)
 800291c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002920:	ca07      	ldmia	r2, {r0, r1, r2}
 8002922:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionMatrix magneto_transform = {1.015, 0.018, -0.002, 0.018, 1.015, -0.004, -0.002, -0.004, 0.972};
 8002926:	4b68      	ldr	r3, [pc, #416]	; (8002ac8 <Start_Data_Reading+0x1c0>)
 8002928:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 800292c:	461d      	mov	r5, r3
 800292e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002936:	682b      	ldr	r3, [r5, #0]
 8002938:	6023      	str	r3, [r4, #0]
	FusionVector magneto_data;

	//pitch angle velocity control params
	float err_pitch = 0;
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	float errd_pitch = 0;
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	float prev_err_pitch = 0;
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	float control_pitch = 0;
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	float P_pitch = 16;//20;
 800295a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800295e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	float D_pitch = 0.1;
 8002962:	4b5a      	ldr	r3, [pc, #360]	; (8002acc <Start_Data_Reading+0x1c4>)
 8002964:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	//pitch angle control params
	float err_angle_pitch = 0;
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	float errd_angle_pitch = 0;
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	float prev_err_angle_pitch = 0;
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	float angle_control_pitch = 0;
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	float P_angle_pitch = 0.04;//0.04;
 8002988:	4b51      	ldr	r3, [pc, #324]	; (8002ad0 <Start_Data_Reading+0x1c8>)
 800298a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	float D_angle_pitch = 0.0001;
 800298e:	4b51      	ldr	r3, [pc, #324]	; (8002ad4 <Start_Data_Reading+0x1cc>)
 8002990:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

	//roll angle velocity control params
	float err_roll = 0;
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	float errd_roll = 0;
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	float prev_err_roll = 0;
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	float control_roll = 0;
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	float P_roll = 4;//5;
 80029b4:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80029b8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	float D_roll = 0.1;
 80029bc:	4b43      	ldr	r3, [pc, #268]	; (8002acc <Start_Data_Reading+0x1c4>)
 80029be:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

	//roll angle control params
	float P_angle_roll = 0.2;//0.2;
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <Start_Data_Reading+0x1d0>)
 80029c4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	float D_angle_roll = 0.0001;
 80029c8:	4b42      	ldr	r3, [pc, #264]	; (8002ad4 <Start_Data_Reading+0x1cc>)
 80029ca:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	float err_angle_roll = 0;
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	float errd_angle_roll = 0;
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	float prev_err_angle_roll = 0;
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	float angle_control_roll = 0;
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	//yaw angle velocity control params
	float err_yaw = 0;
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	float errd_yaw = 0;
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	float prev_err_yaw = 0;
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	float control_yaw = 0;
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	float P_yaw = 20;
 8002a0e:	4b33      	ldr	r3, [pc, #204]	; (8002adc <Start_Data_Reading+0x1d4>)
 8002a10:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	float D_yaw = 0.1;
 8002a14:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <Start_Data_Reading+0x1c4>)
 8002a16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

	//yaw angle control params
	float P_angle_yaw = 0.8;
 8002a1a:	4b31      	ldr	r3, [pc, #196]	; (8002ae0 <Start_Data_Reading+0x1d8>)
 8002a1c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	float D_angle_yaw = 0.000;
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	float err_angle_yaw = 0;
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	float errd_angle_yaw = 0;
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	float prev_err_angle_yaw = 0;
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	float angle_control_yaw = 0;
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

	float yaw_angle = 0;
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	float prev_euler_yaw = 0;
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	int n = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0



	//imu init function
	BMI088_Init(&imu, &hspi2, CS_ACC_GPIO_Port, CS_ACC_Pin, CS_GYRO_GPIO_Port, CS_GYRO_Pin);
 8002a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <Start_Data_Reading+0x1dc>)
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <Start_Data_Reading+0x1e0>)
 8002a6e:	491f      	ldr	r1, [pc, #124]	; (8002aec <Start_Data_Reading+0x1e4>)
 8002a70:	481f      	ldr	r0, [pc, #124]	; (8002af0 <Start_Data_Reading+0x1e8>)
 8002a72:	f001 fced 	bl	8004450 <BMI088_Init>


	//bmp388 pressure sensor init
	bmp._hi2c = &hi2c2;
 8002a76:	4b1f      	ldr	r3, [pc, #124]	; (8002af4 <Start_Data_Reading+0x1ec>)
 8002a78:	4a1f      	ldr	r2, [pc, #124]	; (8002af8 <Start_Data_Reading+0x1f0>)
 8002a7a:	601a      	str	r2, [r3, #0]


	BMP388_SetTempOS(&bmp, 0);
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	481d      	ldr	r0, [pc, #116]	; (8002af4 <Start_Data_Reading+0x1ec>)
 8002a80:	f002 f857 	bl	8004b32 <BMP388_SetTempOS>
	HAL_Delay(10);
 8002a84:	200a      	movs	r0, #10
 8002a86:	f002 fd59 	bl	800553c <HAL_Delay>
	BMP388_SetPressOS(&bmp, 0x03); //0 volt, de adatlap alapján 8x-nek megfelelő 0x03 beírva
 8002a8a:	2103      	movs	r1, #3
 8002a8c:	4819      	ldr	r0, [pc, #100]	; (8002af4 <Start_Data_Reading+0x1ec>)
 8002a8e:	f002 f870 	bl	8004b72 <BMP388_SetPressOS>
	HAL_Delay(10);
 8002a92:	200a      	movs	r0, #10
 8002a94:	f002 fd52 	bl	800553c <HAL_Delay>
	BMP388_SetIIRFilterCoeff(&bmp, 2);
 8002a98:	2102      	movs	r1, #2
 8002a9a:	4816      	ldr	r0, [pc, #88]	; (8002af4 <Start_Data_Reading+0x1ec>)
 8002a9c:	f002 f888 	bl	8004bb0 <BMP388_SetIIRFilterCoeff>
	HAL_Delay(10);
 8002aa0:	200a      	movs	r0, #10
 8002aa2:	f002 fd4b 	bl	800553c <HAL_Delay>
	BMP388_SetOutputDataRate(&bmp, 0x02);
 8002aa6:	2102      	movs	r1, #2
 8002aa8:	4812      	ldr	r0, [pc, #72]	; (8002af4 <Start_Data_Reading+0x1ec>)
 8002aaa:	f002 f898 	bl	8004bde <BMP388_SetOutputDataRate>
	HAL_Delay(10);
 8002aae:	200a      	movs	r0, #10
 8002ab0:	f002 fd44 	bl	800553c <HAL_Delay>
	BMP388_Init(&bmp);
 8002ab4:	480f      	ldr	r0, [pc, #60]	; (8002af4 <Start_Data_Reading+0x1ec>)
 8002ab6:	f001 ffc1 	bl	8004a3c <BMP388_Init>

	for(int i_init = 0; i_init<2000; i_init++ ){
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002ac0:	e077      	b.n	8002bb2 <Start_Data_Reading+0x2aa>
 8002ac2:	bf00      	nop
 8002ac4:	08014464 	.word	0x08014464
 8002ac8:	08014470 	.word	0x08014470
 8002acc:	3dcccccd 	.word	0x3dcccccd
 8002ad0:	3d23d70a 	.word	0x3d23d70a
 8002ad4:	38d1b717 	.word	0x38d1b717
 8002ad8:	3e4ccccd 	.word	0x3e4ccccd
 8002adc:	41a00000 	.word	0x41a00000
 8002ae0:	3f4ccccd 	.word	0x3f4ccccd
 8002ae4:	40020400 	.word	0x40020400
 8002ae8:	40020800 	.word	0x40020800
 8002aec:	20000634 	.word	0x20000634
 8002af0:	20000970 	.word	0x20000970
 8002af4:	200009c0 	.word	0x200009c0
 8002af8:	2000058c 	.word	0x2000058c
	  BMP388_ReadRawPressTempTime(&bmp, &raw_press, &raw_temp, &raw_time);
 8002afc:	4bb8      	ldr	r3, [pc, #736]	; (8002de0 <Start_Data_Reading+0x4d8>)
 8002afe:	4ab9      	ldr	r2, [pc, #740]	; (8002de4 <Start_Data_Reading+0x4dc>)
 8002b00:	49b9      	ldr	r1, [pc, #740]	; (8002de8 <Start_Data_Reading+0x4e0>)
 8002b02:	48ba      	ldr	r0, [pc, #744]	; (8002dec <Start_Data_Reading+0x4e4>)
 8002b04:	f002 f880 	bl	8004c08 <BMP388_ReadRawPressTempTime>
	  BMP388_CompensateRawPressTemp(&bmp, raw_press, raw_temp, &press, &temp);
 8002b08:	4bb7      	ldr	r3, [pc, #732]	; (8002de8 <Start_Data_Reading+0x4e0>)
 8002b0a:	6819      	ldr	r1, [r3, #0]
 8002b0c:	4bb5      	ldr	r3, [pc, #724]	; (8002de4 <Start_Data_Reading+0x4dc>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4bb7      	ldr	r3, [pc, #732]	; (8002df0 <Start_Data_Reading+0x4e8>)
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	4bb7      	ldr	r3, [pc, #732]	; (8002df4 <Start_Data_Reading+0x4ec>)
 8002b16:	48b5      	ldr	r0, [pc, #724]	; (8002dec <Start_Data_Reading+0x4e4>)
 8002b18:	f002 f8a2 	bl	8004c60 <BMP388_CompensateRawPressTemp>
	  h0 += BMP388_FindAltitude(ground_pressure, press);
 8002b1c:	4bb5      	ldr	r3, [pc, #724]	; (8002df4 <Start_Data_Reading+0x4ec>)
 8002b1e:	edd3 7a00 	vldr	s15, [r3]
 8002b22:	eef0 0a67 	vmov.f32	s1, s15
 8002b26:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8002df8 <Start_Data_Reading+0x4f0>
 8002b2a:	f002 f8bd 	bl	8004ca8 <BMP388_FindAltitude>
 8002b2e:	eeb0 7a40 	vmov.f32	s14, s0
 8002b32:	4bb2      	ldr	r3, [pc, #712]	; (8002dfc <Start_Data_Reading+0x4f4>)
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3c:	4baf      	ldr	r3, [pc, #700]	; (8002dfc <Start_Data_Reading+0x4f4>)
 8002b3e:	edc3 7a00 	vstr	s15, [r3]
	  BMI088_ReadGyroscope(&imu);
 8002b42:	48af      	ldr	r0, [pc, #700]	; (8002e00 <Start_Data_Reading+0x4f8>)
 8002b44:	f001 ff02 	bl	800494c <BMI088_ReadGyroscope>
	  gyro_offset_x_calc += imu.gyr_rps[0];
 8002b48:	4bad      	ldr	r3, [pc, #692]	; (8002e00 <Start_Data_Reading+0x4f8>)
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fcfb 	bl	8000548 <__aeabi_f2d>
 8002b52:	4bac      	ldr	r3, [pc, #688]	; (8002e04 <Start_Data_Reading+0x4fc>)
 8002b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b58:	f7fd fb98 	bl	800028c <__adddf3>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	49a8      	ldr	r1, [pc, #672]	; (8002e04 <Start_Data_Reading+0x4fc>)
 8002b62:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_y_calc += imu.gyr_rps[1];
 8002b66:	4ba6      	ldr	r3, [pc, #664]	; (8002e00 <Start_Data_Reading+0x4f8>)
 8002b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fcec 	bl	8000548 <__aeabi_f2d>
 8002b70:	4ba5      	ldr	r3, [pc, #660]	; (8002e08 <Start_Data_Reading+0x500>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f7fd fb89 	bl	800028c <__adddf3>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	49a2      	ldr	r1, [pc, #648]	; (8002e08 <Start_Data_Reading+0x500>)
 8002b80:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_z_calc += imu.gyr_rps[2];
 8002b84:	4b9e      	ldr	r3, [pc, #632]	; (8002e00 <Start_Data_Reading+0x4f8>)
 8002b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fcdd 	bl	8000548 <__aeabi_f2d>
 8002b8e:	4b9f      	ldr	r3, [pc, #636]	; (8002e0c <Start_Data_Reading+0x504>)
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	f7fd fb7a 	bl	800028c <__adddf3>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	499b      	ldr	r1, [pc, #620]	; (8002e0c <Start_Data_Reading+0x504>)
 8002b9e:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_Delay(1);
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f002 fcca 	bl	800553c <HAL_Delay>
	for(int i_init = 0; i_init<2000; i_init++ ){
 8002ba8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002bac:	3301      	adds	r3, #1
 8002bae:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bb2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002bb6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002bba:	db9f      	blt.n	8002afc <Start_Data_Reading+0x1f4>
	}
	h0 /= 2000;
 8002bbc:	4b8f      	ldr	r3, [pc, #572]	; (8002dfc <Start_Data_Reading+0x4f4>)
 8002bbe:	ed93 7a00 	vldr	s14, [r3]
 8002bc2:	eddf 6a93 	vldr	s13, [pc, #588]	; 8002e10 <Start_Data_Reading+0x508>
 8002bc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bca:	4b8c      	ldr	r3, [pc, #560]	; (8002dfc <Start_Data_Reading+0x4f4>)
 8002bcc:	edc3 7a00 	vstr	s15, [r3]
	gyro_offset_x = gyro_offset_x_calc/2000;
 8002bd0:	4b8c      	ldr	r3, [pc, #560]	; (8002e04 <Start_Data_Reading+0x4fc>)
 8002bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	4b8e      	ldr	r3, [pc, #568]	; (8002e14 <Start_Data_Reading+0x50c>)
 8002bdc:	f7fd fe36 	bl	800084c <__aeabi_ddiv>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	498c      	ldr	r1, [pc, #560]	; (8002e18 <Start_Data_Reading+0x510>)
 8002be6:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_y = gyro_offset_y_calc/2000;
 8002bea:	4b87      	ldr	r3, [pc, #540]	; (8002e08 <Start_Data_Reading+0x500>)
 8002bec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	4b87      	ldr	r3, [pc, #540]	; (8002e14 <Start_Data_Reading+0x50c>)
 8002bf6:	f7fd fe29 	bl	800084c <__aeabi_ddiv>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4987      	ldr	r1, [pc, #540]	; (8002e1c <Start_Data_Reading+0x514>)
 8002c00:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_z = gyro_offset_z_calc/2000;
 8002c04:	4b81      	ldr	r3, [pc, #516]	; (8002e0c <Start_Data_Reading+0x504>)
 8002c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	4b81      	ldr	r3, [pc, #516]	; (8002e14 <Start_Data_Reading+0x50c>)
 8002c10:	f7fd fe1c 	bl	800084c <__aeabi_ddiv>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4981      	ldr	r1, [pc, #516]	; (8002e20 <Start_Data_Reading+0x518>)
 8002c1a:	e9c1 2300 	strd	r2, r3, [r1]


	uint8_t transmit_data[60] = "Hello Andris\r\n";
 8002c1e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002c22:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
 8002c26:	4b7f      	ldr	r3, [pc, #508]	; (8002e24 <Start_Data_Reading+0x51c>)
 8002c28:	462c      	mov	r4, r5
 8002c2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c2c:	c407      	stmia	r4!, {r0, r1, r2}
 8002c2e:	8023      	strh	r3, [r4, #0]
 8002c30:	3402      	adds	r4, #2
 8002c32:	0c1b      	lsrs	r3, r3, #16
 8002c34:	7023      	strb	r3, [r4, #0]
 8002c36:	f105 030f 	add.w	r3, r5, #15
 8002c3a:	222d      	movs	r2, #45	; 0x2d
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f00c f9bc 	bl	800efbc <memset>
	float telemetria_float[19];



	q.SEq_1=1;
 8002c44:	4b78      	ldr	r3, [pc, #480]	; (8002e28 <Start_Data_Reading+0x520>)
 8002c46:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c4a:	601a      	str	r2, [r3, #0]
	q.SEq_2=0;
 8002c4c:	4b76      	ldr	r3, [pc, #472]	; (8002e28 <Start_Data_Reading+0x520>)
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	605a      	str	r2, [r3, #4]
	q.SEq_3=0;
 8002c54:	4b74      	ldr	r3, [pc, #464]	; (8002e28 <Start_Data_Reading+0x520>)
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
	q.SEq_4=0;
 8002c5c:	4b72      	ldr	r3, [pc, #456]	; (8002e28 <Start_Data_Reading+0x520>)
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	60da      	str	r2, [r3, #12]

	w.w_bx=0;
 8002c64:	4b71      	ldr	r3, [pc, #452]	; (8002e2c <Start_Data_Reading+0x524>)
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
	w.w_by=0;
 8002c6c:	4b6f      	ldr	r3, [pc, #444]	; (8002e2c <Start_Data_Reading+0x524>)
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	605a      	str	r2, [r3, #4]
	w.w_bz=0;
 8002c74:	4b6d      	ldr	r3, [pc, #436]	; (8002e2c <Start_Data_Reading+0x524>)
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]



	HAL_TIM_Base_Start_IT(&htim6);
 8002c7c:	486c      	ldr	r0, [pc, #432]	; (8002e30 <Start_Data_Reading+0x528>)
 8002c7e:	f005 fec7 	bl	8008a10 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002c82:	486c      	ldr	r0, [pc, #432]	; (8002e34 <Start_Data_Reading+0x52c>)
 8002c84:	f005 fec4 	bl	8008a10 <HAL_TIM_Base_Start_IT>
	FusionAhrsInitialise(&ahrs);
 8002c88:	486b      	ldr	r0, [pc, #428]	; (8002e38 <Start_Data_Reading+0x530>)
 8002c8a:	f009 f81d 	bl	800bcc8 <FusionAhrsInitialise>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2108      	movs	r1, #8
 8002c92:	486a      	ldr	r0, [pc, #424]	; (8002e3c <Start_Data_Reading+0x534>)
 8002c94:	f003 fd88 	bl	80067a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002c98:	2064      	movs	r0, #100	; 0x64
 8002c9a:	f002 fc4f 	bl	800553c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	2108      	movs	r1, #8
 8002ca2:	4866      	ldr	r0, [pc, #408]	; (8002e3c <Start_Data_Reading+0x534>)
 8002ca4:	f003 fd80 	bl	80067a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002ca8:	2064      	movs	r0, #100	; 0x64
 8002caa:	f002 fc47 	bl	800553c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2108      	movs	r1, #8
 8002cb2:	4862      	ldr	r0, [pc, #392]	; (8002e3c <Start_Data_Reading+0x534>)
 8002cb4:	f003 fd78 	bl	80067a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cb8:	2064      	movs	r0, #100	; 0x64
 8002cba:	f002 fc3f 	bl	800553c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	2108      	movs	r1, #8
 8002cc2:	485e      	ldr	r0, [pc, #376]	; (8002e3c <Start_Data_Reading+0x534>)
 8002cc4:	f003 fd70 	bl	80067a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cc8:	2064      	movs	r0, #100	; 0x64
 8002cca:	f002 fc37 	bl	800553c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2108      	movs	r1, #8
 8002cd2:	485a      	ldr	r0, [pc, #360]	; (8002e3c <Start_Data_Reading+0x534>)
 8002cd4:	f003 fd68 	bl	80067a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cd8:	2064      	movs	r0, #100	; 0x64
 8002cda:	f002 fc2f 	bl	800553c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2108      	movs	r1, #8
 8002ce2:	4856      	ldr	r0, [pc, #344]	; (8002e3c <Start_Data_Reading+0x534>)
 8002ce4:	f003 fd60 	bl	80067a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002ce8:	2064      	movs	r0, #100	; 0x64
 8002cea:	f002 fc27 	bl	800553c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2108      	movs	r1, #8
 8002cf2:	4852      	ldr	r0, [pc, #328]	; (8002e3c <Start_Data_Reading+0x534>)
 8002cf4:	f003 fd58 	bl	80067a8 <HAL_GPIO_WritePin>

	HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, bytetoread);
 8002cf8:	4b51      	ldr	r3, [pc, #324]	; (8002e40 <Start_Data_Reading+0x538>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4950      	ldr	r1, [pc, #320]	; (8002e44 <Start_Data_Reading+0x53c>)
 8002d02:	4851      	ldr	r0, [pc, #324]	; (8002e48 <Start_Data_Reading+0x540>)
 8002d04:	f007 fa30 	bl	800a168 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_IT(&huart2, transmit_data, sizeof (transmit_data));
 8002d08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d0c:	223c      	movs	r2, #60	; 0x3c
 8002d0e:	4619      	mov	r1, r3
 8002d10:	484e      	ldr	r0, [pc, #312]	; (8002e4c <Start_Data_Reading+0x544>)
 8002d12:	f007 f9e4 	bl	800a0de <HAL_UART_Transmit_IT>



	vTaskResume( defaultTaskHandle );
 8002d16:	4b4e      	ldr	r3, [pc, #312]	; (8002e50 <Start_Data_Reading+0x548>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f00a ffb4 	bl	800dc88 <vTaskResume>

  /* Infinite loop */
  for(;;)
  {

	  	  mytimer = __HAL_TIM_GET_COUNTER(&htim7);
 8002d20:	4b44      	ldr	r3, [pc, #272]	; (8002e34 <Start_Data_Reading+0x52c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	461a      	mov	r2, r3
 8002d28:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <Start_Data_Reading+0x54c>)
 8002d2a:	601a      	str	r2, [r3, #0]
	  	  htim7.Instance->CNT = 0;
 8002d2c:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <Start_Data_Reading+0x52c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2200      	movs	r2, #0
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24


		  // magnetic field data in uT
		  magneto_data.axis.x = mag_data_y;
 8002d34:	4b48      	ldr	r3, [pc, #288]	; (8002e58 <Start_Data_Reading+0x550>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d40:	601a      	str	r2, [r3, #0]
		  magneto_data.axis.y = -mag_data_x;
 8002d42:	4b46      	ldr	r3, [pc, #280]	; (8002e5c <Start_Data_Reading+0x554>)
 8002d44:	edd3 7a00 	vldr	s15, [r3]
 8002d48:	eef1 7a67 	vneg.f32	s15, s15
 8002d4c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d54:	edc3 7a01 	vstr	s15, [r3, #4]
		  magneto_data.axis.z = mag_data_z;
 8002d58:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <Start_Data_Reading+0x558>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d64:	609a      	str	r2, [r3, #8]


		  //read IMU
		  BMI088_ReadGyroscope(&imu);	// imu read 119 us
 8002d66:	4826      	ldr	r0, [pc, #152]	; (8002e00 <Start_Data_Reading+0x4f8>)
 8002d68:	f001 fdf0 	bl	800494c <BMI088_ReadGyroscope>
		  BMI088_ReadAccelerometer(&imu);
 8002d6c:	4824      	ldr	r0, [pc, #144]	; (8002e00 <Start_Data_Reading+0x4f8>)
 8002d6e:	f001 fd79 	bl	8004864 <BMI088_ReadAccelerometer>




		  gyro_x_degree = ((imu.gyr_rps[0]-gyro_offset_x)*57.29);
 8002d72:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <Start_Data_Reading+0x4f8>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fbe6 	bl	8000548 <__aeabi_f2d>
 8002d7c:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <Start_Data_Reading+0x510>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fa81 	bl	8000288 <__aeabi_dsub>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	a312      	add	r3, pc, #72	; (adr r3, 8002dd8 <Start_Data_Reading+0x4d0>)
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f7fd fc30 	bl	80005f8 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f7fd ff22 	bl	8000be8 <__aeabi_d2f>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4a2f      	ldr	r2, [pc, #188]	; (8002e64 <Start_Data_Reading+0x55c>)
 8002da8:	6013      	str	r3, [r2, #0]
		  gyro_y_degree = ((imu.gyr_rps[1]-gyro_offset_x)*57.29);
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <Start_Data_Reading+0x4f8>)
 8002dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd fbca 	bl	8000548 <__aeabi_f2d>
 8002db4:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <Start_Data_Reading+0x510>)
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	f7fd fa65 	bl	8000288 <__aeabi_dsub>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	a304      	add	r3, pc, #16	; (adr r3, 8002dd8 <Start_Data_Reading+0x4d0>)
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f7fd fc14 	bl	80005f8 <__aeabi_dmul>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	e048      	b.n	8002e68 <Start_Data_Reading+0x560>
 8002dd6:	bf00      	nop
 8002dd8:	b851eb85 	.word	0xb851eb85
 8002ddc:	404ca51e 	.word	0x404ca51e
 8002de0:	20000a18 	.word	0x20000a18
 8002de4:	20000a14 	.word	0x20000a14
 8002de8:	20000a10 	.word	0x20000a10
 8002dec:	200009c0 	.word	0x200009c0
 8002df0:	20000a20 	.word	0x20000a20
 8002df4:	20000a1c 	.word	0x20000a1c
 8002df8:	47c5f400 	.word	0x47c5f400
 8002dfc:	20000a24 	.word	0x20000a24
 8002e00:	20000970 	.word	0x20000970
 8002e04:	20000b30 	.word	0x20000b30
 8002e08:	20000b38 	.word	0x20000b38
 8002e0c:	20000b40 	.word	0x20000b40
 8002e10:	44fa0000 	.word	0x44fa0000
 8002e14:	409f4000 	.word	0x409f4000
 8002e18:	20000b48 	.word	0x20000b48
 8002e1c:	20000b50 	.word	0x20000b50
 8002e20:	20000b58 	.word	0x20000b58
 8002e24:	08014494 	.word	0x08014494
 8002e28:	20000a34 	.word	0x20000a34
 8002e2c:	20000a44 	.word	0x20000a44
 8002e30:	20000764 	.word	0x20000764
 8002e34:	200007ac 	.word	0x200007ac
 8002e38:	20000a54 	.word	0x20000a54
 8002e3c:	40020400 	.word	0x40020400
 8002e40:	2000000a 	.word	0x2000000a
 8002e44:	20000bac 	.word	0x20000bac
 8002e48:	200007f4 	.word	0x200007f4
 8002e4c:	20000838 	.word	0x20000838
 8002e50:	20000964 	.word	0x20000964
 8002e54:	20000b28 	.word	0x20000b28
 8002e58:	20000a04 	.word	0x20000a04
 8002e5c:	20000a00 	.word	0x20000a00
 8002e60:	20000a08 	.word	0x20000a08
 8002e64:	20000a28 	.word	0x20000a28
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f7fd febc 	bl	8000be8 <__aeabi_d2f>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4adb      	ldr	r2, [pc, #876]	; (80031e0 <Start_Data_Reading+0x8d8>)
 8002e74:	6013      	str	r3, [r2, #0]
		  gyro_z_degree = ((imu.gyr_rps[2]-gyro_offset_x)*57.29);
 8002e76:	4bdb      	ldr	r3, [pc, #876]	; (80031e4 <Start_Data_Reading+0x8dc>)
 8002e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd fb64 	bl	8000548 <__aeabi_f2d>
 8002e80:	4bd9      	ldr	r3, [pc, #868]	; (80031e8 <Start_Data_Reading+0x8e0>)
 8002e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e86:	f7fd f9ff 	bl	8000288 <__aeabi_dsub>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	a3cd      	add	r3, pc, #820	; (adr r3, 80031c8 <Start_Data_Reading+0x8c0>)
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	f7fd fbae 	bl	80005f8 <__aeabi_dmul>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f7fd fea0 	bl	8000be8 <__aeabi_d2f>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4ad0      	ldr	r2, [pc, #832]	; (80031ec <Start_Data_Reading+0x8e4>)
 8002eac:	6013      	str	r3, [r2, #0]


		  magneto_data = FusionVectorSubtract(magneto_data, magneto_offset);
 8002eae:	ed97 5a44 	vldr	s10, [r7, #272]	; 0x110
 8002eb2:	edd7 5a45 	vldr	s11, [r7, #276]	; 0x114
 8002eb6:	ed97 6a46 	vldr	s12, [r7, #280]	; 0x118
 8002eba:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ec2:	edd3 6a00 	vldr	s13, [r3]
 8002ec6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002eca:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ece:	eef0 1a45 	vmov.f32	s3, s10
 8002ed2:	eeb0 2a65 	vmov.f32	s4, s11
 8002ed6:	eef0 2a46 	vmov.f32	s5, s12
 8002eda:	eeb0 0a66 	vmov.f32	s0, s13
 8002ede:	eef0 0a47 	vmov.f32	s1, s14
 8002ee2:	eeb0 1a67 	vmov.f32	s2, s15
 8002ee6:	f7fe f8ab 	bl	8001040 <FusionVectorSubtract>
 8002eea:	eef0 6a40 	vmov.f32	s13, s0
 8002eee:	eeb0 7a60 	vmov.f32	s14, s1
 8002ef2:	eef0 7a41 	vmov.f32	s15, s2
 8002ef6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002efe:	edc3 6a00 	vstr	s13, [r3]
 8002f02:	ed83 7a01 	vstr	s14, [r3, #4]
 8002f06:	edc3 7a02 	vstr	s15, [r3, #8]

		  const FusionVector gyroscope = {gyro_x_degree, gyro_y_degree, gyro_z_degree};
 8002f0a:	4bb9      	ldr	r3, [pc, #740]	; (80031f0 <Start_Data_Reading+0x8e8>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f12:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	4bb1      	ldr	r3, [pc, #708]	; (80031e0 <Start_Data_Reading+0x8d8>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f20:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	4bb1      	ldr	r3, [pc, #708]	; (80031ec <Start_Data_Reading+0x8e4>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f2e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f32:	609a      	str	r2, [r3, #8]
		  const FusionVector accelerometer = {imu.acc_mps2[0]/9.81, imu.acc_mps2[1]/9.81, imu.acc_mps2[2]/9.81};
 8002f34:	4bab      	ldr	r3, [pc, #684]	; (80031e4 <Start_Data_Reading+0x8dc>)
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd fb05 	bl	8000548 <__aeabi_f2d>
 8002f3e:	a3a4      	add	r3, pc, #656	; (adr r3, 80031d0 <Start_Data_Reading+0x8c8>)
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f7fd fc82 	bl	800084c <__aeabi_ddiv>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	4619      	mov	r1, r3
 8002f50:	f7fd fe4a 	bl	8000be8 <__aeabi_d2f>
 8002f54:	4602      	mov	r2, r0
 8002f56:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f5a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	4ba0      	ldr	r3, [pc, #640]	; (80031e4 <Start_Data_Reading+0x8dc>)
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd faef 	bl	8000548 <__aeabi_f2d>
 8002f6a:	a399      	add	r3, pc, #612	; (adr r3, 80031d0 <Start_Data_Reading+0x8c8>)
 8002f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f70:	f7fd fc6c 	bl	800084c <__aeabi_ddiv>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f7fd fe34 	bl	8000be8 <__aeabi_d2f>
 8002f80:	4602      	mov	r2, r0
 8002f82:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002f86:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	4b95      	ldr	r3, [pc, #596]	; (80031e4 <Start_Data_Reading+0x8dc>)
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd fad9 	bl	8000548 <__aeabi_f2d>
 8002f96:	a38e      	add	r3, pc, #568	; (adr r3, 80031d0 <Start_Data_Reading+0x8c8>)
 8002f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9c:	f7fd fc56 	bl	800084c <__aeabi_ddiv>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f7fd fe1e 	bl	8000be8 <__aeabi_d2f>
 8002fac:	4602      	mov	r2, r0
 8002fae:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fb2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002fb6:	609a      	str	r2, [r3, #8]
		  const FusionVector magnetometer = {magneto_data.axis.x, magneto_data.axis.y, magneto_data.axis.z};
 8002fb8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fc6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fda:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002fee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ff2:	609a      	str	r2, [r3, #8]


		  //no magnetometer AHRS
		  FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, SAMPLE_PERIOD);
 8002ff4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002ff8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ffc:	ed93 5a00 	vldr	s10, [r3]
 8003000:	edd3 5a01 	vldr	s11, [r3, #4]
 8003004:	ed93 6a02 	vldr	s12, [r3, #8]
 8003008:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800300c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003010:	edd3 6a00 	vldr	s13, [r3]
 8003014:	ed93 7a01 	vldr	s14, [r3, #4]
 8003018:	edd3 7a02 	vldr	s15, [r3, #8]
 800301c:	ed9f 3a75 	vldr	s6, [pc, #468]	; 80031f4 <Start_Data_Reading+0x8ec>
 8003020:	eef0 1a45 	vmov.f32	s3, s10
 8003024:	eeb0 2a65 	vmov.f32	s4, s11
 8003028:	eef0 2a46 	vmov.f32	s5, s12
 800302c:	eeb0 0a66 	vmov.f32	s0, s13
 8003030:	eef0 0a47 	vmov.f32	s1, s14
 8003034:	eeb0 1a67 	vmov.f32	s2, s15
 8003038:	486f      	ldr	r0, [pc, #444]	; (80031f8 <Start_Data_Reading+0x8f0>)
 800303a:	f009 fda3 	bl	800cb84 <FusionAhrsUpdateNoMagnetometer>

		  //magnetometer AHRS
//		  FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, SAMPLE_PERIOD);

		  euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 800303e:	486e      	ldr	r0, [pc, #440]	; (80031f8 <Start_Data_Reading+0x8f0>)
 8003040:	f009 fdfa 	bl	800cc38 <FusionAhrsGetQuaternion>
 8003044:	eeb0 6a40 	vmov.f32	s12, s0
 8003048:	eef0 6a60 	vmov.f32	s13, s1
 800304c:	eeb0 7a41 	vmov.f32	s14, s2
 8003050:	eef0 7a61 	vmov.f32	s15, s3
 8003054:	ed87 6a47 	vstr	s12, [r7, #284]	; 0x11c
 8003058:	edc7 6a48 	vstr	s13, [r7, #288]	; 0x120
 800305c:	ed87 7a49 	vstr	s14, [r7, #292]	; 0x124
 8003060:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
 8003064:	ed97 6a47 	vldr	s12, [r7, #284]	; 0x11c
 8003068:	edd7 6a48 	vldr	s13, [r7, #288]	; 0x120
 800306c:	ed97 7a49 	vldr	s14, [r7, #292]	; 0x124
 8003070:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 8003074:	eeb0 0a46 	vmov.f32	s0, s12
 8003078:	eef0 0a66 	vmov.f32	s1, s13
 800307c:	eeb0 1a47 	vmov.f32	s2, s14
 8003080:	eef0 1a67 	vmov.f32	s3, s15
 8003084:	f7fe f9b3 	bl	80013ee <FusionQuaternionToEuler>
 8003088:	eef0 6a40 	vmov.f32	s13, s0
 800308c:	eeb0 7a60 	vmov.f32	s14, s1
 8003090:	eef0 7a41 	vmov.f32	s15, s2
 8003094:	4b59      	ldr	r3, [pc, #356]	; (80031fc <Start_Data_Reading+0x8f4>)
 8003096:	edc3 6a00 	vstr	s13, [r3]
 800309a:	ed83 7a01 	vstr	s14, [r3, #4]
 800309e:	edc3 7a02 	vstr	s15, [r3, #8]
		  // Rotation matrix from sensor frame to earth(NWU) frame
		  ERS = FusionQuaternionToMatrix(FusionAhrsGetQuaternion(&ahrs));
 80030a2:	4855      	ldr	r0, [pc, #340]	; (80031f8 <Start_Data_Reading+0x8f0>)
 80030a4:	f009 fdc8 	bl	800cc38 <FusionAhrsGetQuaternion>
 80030a8:	eeb0 6a40 	vmov.f32	s12, s0
 80030ac:	eef0 6a60 	vmov.f32	s13, s1
 80030b0:	eeb0 7a41 	vmov.f32	s14, s2
 80030b4:	eef0 7a61 	vmov.f32	s15, s3
 80030b8:	ed87 6a4b 	vstr	s12, [r7, #300]	; 0x12c
 80030bc:	edc7 6a4c 	vstr	s13, [r7, #304]	; 0x130
 80030c0:	ed87 7a4d 	vstr	s14, [r7, #308]	; 0x134
 80030c4:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
 80030c8:	4c4d      	ldr	r4, [pc, #308]	; (8003200 <Start_Data_Reading+0x8f8>)
 80030ca:	463b      	mov	r3, r7
 80030cc:	ed97 6a4b 	vldr	s12, [r7, #300]	; 0x12c
 80030d0:	edd7 6a4c 	vldr	s13, [r7, #304]	; 0x130
 80030d4:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 80030d8:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 80030dc:	eeb0 0a46 	vmov.f32	s0, s12
 80030e0:	eef0 0a66 	vmov.f32	s1, s13
 80030e4:	eeb0 1a47 	vmov.f32	s2, s14
 80030e8:	eef0 1a67 	vmov.f32	s3, s15
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fe f8b1 	bl	8001254 <FusionQuaternionToMatrix>
 80030f2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80030f6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80030fa:	461d      	mov	r5, r3
 80030fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003104:	682b      	ldr	r3, [r5, #0]
 8003106:	6023      	str	r3, [r4, #0]
		  aE = FusionMatrixMultiplyVector(ERS, FusionVectorMultiplyScalar(accelerometer, 9.81));
 8003108:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800310c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003110:	edd3 6a00 	vldr	s13, [r3]
 8003114:	ed93 7a01 	vldr	s14, [r3, #4]
 8003118:	edd3 7a02 	vldr	s15, [r3, #8]
 800311c:	eddf 1a39 	vldr	s3, [pc, #228]	; 8003204 <Start_Data_Reading+0x8fc>
 8003120:	eeb0 0a66 	vmov.f32	s0, s13
 8003124:	eef0 0a47 	vmov.f32	s1, s14
 8003128:	eeb0 1a67 	vmov.f32	s2, s15
 800312c:	f7fd ffd6 	bl	80010dc <FusionVectorMultiplyScalar>
 8003130:	eef0 6a40 	vmov.f32	s13, s0
 8003134:	eeb0 7a60 	vmov.f32	s14, s1
 8003138:	eef0 7a41 	vmov.f32	s15, s2
 800313c:	edc7 6a4f 	vstr	s13, [r7, #316]	; 0x13c
 8003140:	ed87 7a50 	vstr	s14, [r7, #320]	; 0x140
 8003144:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144
 8003148:	edd7 6a4f 	vldr	s13, [r7, #316]	; 0x13c
 800314c:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 8003150:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 8003154:	4e2a      	ldr	r6, [pc, #168]	; (8003200 <Start_Data_Reading+0x8f8>)
 8003156:	466d      	mov	r5, sp
 8003158:	f106 0410 	add.w	r4, r6, #16
 800315c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	602b      	str	r3, [r5, #0]
 8003164:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003168:	eeb0 0a66 	vmov.f32	s0, s13
 800316c:	eef0 0a47 	vmov.f32	s1, s14
 8003170:	eeb0 1a67 	vmov.f32	s2, s15
 8003174:	f7fd fff6 	bl	8001164 <FusionMatrixMultiplyVector>
 8003178:	eef0 6a40 	vmov.f32	s13, s0
 800317c:	eeb0 7a60 	vmov.f32	s14, s1
 8003180:	eef0 7a41 	vmov.f32	s15, s2
 8003184:	4b20      	ldr	r3, [pc, #128]	; (8003208 <Start_Data_Reading+0x900>)
 8003186:	edc3 6a00 	vstr	s13, [r3]
 800318a:	ed83 7a01 	vstr	s14, [r3, #4]
 800318e:	edc3 7a02 	vstr	s15, [r3, #8]
		  aE.axis.z -=9.85173;
 8003192:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <Start_Data_Reading+0x900>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd f9d6 	bl	8000548 <__aeabi_f2d>
 800319c:	a30e      	add	r3, pc, #56	; (adr r3, 80031d8 <Start_Data_Reading+0x8d0>)
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	f7fd f871 	bl	8000288 <__aeabi_dsub>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4610      	mov	r0, r2
 80031ac:	4619      	mov	r1, r3
 80031ae:	f7fd fd1b 	bl	8000be8 <__aeabi_d2f>
 80031b2:	4603      	mov	r3, r0
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <Start_Data_Reading+0x900>)
 80031b6:	6093      	str	r3, [r2, #8]



		  // calculate rotation around yaw axis
		  if(prev_euler_yaw > 170 && euler.angle.yaw < 0){
 80031b8:	edd7 7a71 	vldr	s15, [r7, #452]	; 0x1c4
 80031bc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800320c <Start_Data_Reading+0x904>
 80031c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c4:	e024      	b.n	8003210 <Start_Data_Reading+0x908>
 80031c6:	bf00      	nop
 80031c8:	b851eb85 	.word	0xb851eb85
 80031cc:	404ca51e 	.word	0x404ca51e
 80031d0:	51eb851f 	.word	0x51eb851f
 80031d4:	40239eb8 	.word	0x40239eb8
 80031d8:	f45e0b4e 	.word	0xf45e0b4e
 80031dc:	4023b415 	.word	0x4023b415
 80031e0:	20000a2c 	.word	0x20000a2c
 80031e4:	20000970 	.word	0x20000970
 80031e8:	20000b48 	.word	0x20000b48
 80031ec:	20000a30 	.word	0x20000a30
 80031f0:	20000a28 	.word	0x20000a28
 80031f4:	3ba3d70a 	.word	0x3ba3d70a
 80031f8:	20000a54 	.word	0x20000a54
 80031fc:	20000ac8 	.word	0x20000ac8
 8003200:	20000ad4 	.word	0x20000ad4
 8003204:	411cf5c3 	.word	0x411cf5c3
 8003208:	20000af8 	.word	0x20000af8
 800320c:	432a0000 	.word	0x432a0000
 8003210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003214:	dd0c      	ble.n	8003230 <Start_Data_Reading+0x928>
 8003216:	4be2      	ldr	r3, [pc, #904]	; (80035a0 <Start_Data_Reading+0xc98>)
 8003218:	edd3 7a02 	vldr	s15, [r3, #8]
 800321c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003224:	d504      	bpl.n	8003230 <Start_Data_Reading+0x928>
			  n++;
 8003226:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800322a:	3301      	adds	r3, #1
 800322c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		  }
		  if(prev_euler_yaw < -170 && euler.angle.yaw > 0){
 8003230:	edd7 7a71 	vldr	s15, [r7, #452]	; 0x1c4
 8003234:	ed9f 7adb 	vldr	s14, [pc, #876]	; 80035a4 <Start_Data_Reading+0xc9c>
 8003238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800323c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003240:	d50c      	bpl.n	800325c <Start_Data_Reading+0x954>
 8003242:	4bd7      	ldr	r3, [pc, #860]	; (80035a0 <Start_Data_Reading+0xc98>)
 8003244:	edd3 7a02 	vldr	s15, [r3, #8]
 8003248:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003250:	dd04      	ble.n	800325c <Start_Data_Reading+0x954>
			  n--;
 8003252:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003256:	3b01      	subs	r3, #1
 8003258:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		  }
		  yaw_angle = euler.angle.yaw + n * 360.0;
 800325c:	4bd0      	ldr	r3, [pc, #832]	; (80035a0 <Start_Data_Reading+0xc98>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd f971 	bl	8000548 <__aeabi_f2d>
 8003266:	4604      	mov	r4, r0
 8003268:	460d      	mov	r5, r1
 800326a:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 800326e:	f7fd f959 	bl	8000524 <__aeabi_i2d>
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	4bcc      	ldr	r3, [pc, #816]	; (80035a8 <Start_Data_Reading+0xca0>)
 8003278:	f7fd f9be 	bl	80005f8 <__aeabi_dmul>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4620      	mov	r0, r4
 8003282:	4629      	mov	r1, r5
 8003284:	f7fd f802 	bl	800028c <__adddf3>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	f7fd fcaa 	bl	8000be8 <__aeabi_d2f>
 8003294:	4603      	mov	r3, r0
 8003296:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		  abs_yaw = yaw_angle;
 800329a:	4ac4      	ldr	r2, [pc, #784]	; (80035ac <Start_Data_Reading+0xca4>)
 800329c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80032a0:	6013      	str	r3, [r2, #0]
		  prev_euler_yaw = euler.angle.yaw;
 80032a2:	4bbf      	ldr	r3, [pc, #764]	; (80035a0 <Start_Data_Reading+0xc98>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4



		  M_throttle = CRSFtoDuty(RX_throttle);
 80032aa:	4bc1      	ldr	r3, [pc, #772]	; (80035b0 <Start_Data_Reading+0xca8>)
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f002 f836 	bl	8005320 <CRSFtoDuty>
 80032b4:	eef0 7a40 	vmov.f32	s15, s0
 80032b8:	4bbe      	ldr	r3, [pc, #760]	; (80035b4 <Start_Data_Reading+0xcac>)
 80032ba:	edc3 7a00 	vstr	s15, [r3]
		  M_pitch = CRSFtoPitch(RX_pitch)*25;
 80032be:	4bbe      	ldr	r3, [pc, #760]	; (80035b8 <Start_Data_Reading+0xcb0>)
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 f86e 	bl	80053a4 <CRSFtoPitch>
 80032c8:	eef0 7a40 	vmov.f32	s15, s0
 80032cc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80032d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d4:	4bb9      	ldr	r3, [pc, #740]	; (80035bc <Start_Data_Reading+0xcb4>)
 80032d6:	edc3 7a00 	vstr	s15, [r3]
		  M_roll = CRSFtoRoll(RX_roll)*15;
 80032da:	4bb9      	ldr	r3, [pc, #740]	; (80035c0 <Start_Data_Reading+0xcb8>)
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f002 f87e 	bl	80053e0 <CRSFtoRoll>
 80032e4:	eef0 7a40 	vmov.f32	s15, s0
 80032e8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80032ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f0:	4bb4      	ldr	r3, [pc, #720]	; (80035c4 <Start_Data_Reading+0xcbc>)
 80032f2:	edc3 7a00 	vstr	s15, [r3]
		  M_yaw += CRSFtoYaw(RX_yaw)*0.3;
 80032f6:	4bb4      	ldr	r3, [pc, #720]	; (80035c8 <Start_Data_Reading+0xcc0>)
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f002 f88e 	bl	800541c <CRSFtoYaw>
 8003300:	ee10 3a10 	vmov	r3, s0
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd f91f 	bl	8000548 <__aeabi_f2d>
 800330a:	a3a3      	add	r3, pc, #652	; (adr r3, 8003598 <Start_Data_Reading+0xc90>)
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f7fd f972 	bl	80005f8 <__aeabi_dmul>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4614      	mov	r4, r2
 800331a:	461d      	mov	r5, r3
 800331c:	4bab      	ldr	r3, [pc, #684]	; (80035cc <Start_Data_Reading+0xcc4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7fd f911 	bl	8000548 <__aeabi_f2d>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4620      	mov	r0, r4
 800332c:	4629      	mov	r1, r5
 800332e:	f7fc ffad 	bl	800028c <__adddf3>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4610      	mov	r0, r2
 8003338:	4619      	mov	r1, r3
 800333a:	f7fd fc55 	bl	8000be8 <__aeabi_d2f>
 800333e:	4603      	mov	r3, r0
 8003340:	4aa2      	ldr	r2, [pc, #648]	; (80035cc <Start_Data_Reading+0xcc4>)
 8003342:	6013      	str	r3, [r2, #0]

		  //pitch angle control
		  err_angle_pitch = M_pitch - euler.angle.pitch;
 8003344:	4b9d      	ldr	r3, [pc, #628]	; (80035bc <Start_Data_Reading+0xcb4>)
 8003346:	ed93 7a00 	vldr	s14, [r3]
 800334a:	4b95      	ldr	r3, [pc, #596]	; (80035a0 <Start_Data_Reading+0xc98>)
 800334c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003354:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
		  errd_angle_pitch = (err_angle_pitch - prev_err_angle_pitch)/SAMPLE_PERIOD;
 8003358:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 800335c:	edd7 7a78 	vldr	s15, [r7, #480]	; 0x1e0
 8003360:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003364:	eddf 6a9a 	vldr	s13, [pc, #616]	; 80035d0 <Start_Data_Reading+0xcc8>
 8003368:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800336c:	edc7 7a68 	vstr	s15, [r7, #416]	; 0x1a0
		  angle_control_pitch = P_angle_pitch * err_angle_pitch + D_angle_pitch * errd_angle_pitch;
 8003370:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 8003374:	edd7 7a69 	vldr	s15, [r7, #420]	; 0x1a4
 8003378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800337c:	edd7 6a65 	vldr	s13, [r7, #404]	; 0x194
 8003380:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 8003384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338c:	edc7 7a67 	vstr	s15, [r7, #412]	; 0x19c
		  prev_err_angle_pitch = err_angle_pitch;
 8003390:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003394:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
		  //debug_control1 = err_angle_pitch;

		  //pitch angle velocity control
		  err_pitch = angle_control_pitch - imu.gyr_rps[1];
 8003398:	4b8e      	ldr	r3, [pc, #568]	; (80035d4 <Start_Data_Reading+0xccc>)
 800339a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800339e:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 80033a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a6:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
		  errd_pitch = (err_pitch - prev_err_pitch)/SAMPLE_PERIOD;
 80033aa:	ed97 7a6e 	vldr	s14, [r7, #440]	; 0x1b8
 80033ae:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
 80033b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033b6:	eddf 6a86 	vldr	s13, [pc, #536]	; 80035d0 <Start_Data_Reading+0xcc8>
 80033ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033be:	edc7 7a6d 	vstr	s15, [r7, #436]	; 0x1b4
		  prev_err_pitch = err_pitch;
 80033c2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80033c6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
		  control_pitch = P_pitch * err_pitch + D_pitch * errd_pitch;
 80033ca:	ed97 7a6b 	vldr	s14, [r7, #428]	; 0x1ac
 80033ce:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80033d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033d6:	edd7 6a6a 	vldr	s13, [r7, #424]	; 0x1a8
 80033da:	edd7 7a6d 	vldr	s15, [r7, #436]	; 0x1b4
 80033de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e6:	edc7 7a6c 	vstr	s15, [r7, #432]	; 0x1b0

		  //roll angle control
		  err_angle_roll = M_roll - euler.angle.roll;
 80033ea:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <Start_Data_Reading+0xcbc>)
 80033ec:	ed93 7a00 	vldr	s14, [r3]
 80033f0:	4b6b      	ldr	r3, [pc, #428]	; (80035a0 <Start_Data_Reading+0xc98>)
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033fa:	edc7 7a5d 	vstr	s15, [r7, #372]	; 0x174
		  errd_angle_roll = (err_angle_roll - prev_err_angle_roll)/SAMPLE_PERIOD;
 80033fe:	ed97 7a5d 	vldr	s14, [r7, #372]	; 0x174
 8003402:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8003406:	ee37 7a67 	vsub.f32	s14, s14, s15
 800340a:	eddf 6a71 	vldr	s13, [pc, #452]	; 80035d0 <Start_Data_Reading+0xcc8>
 800340e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003412:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170
		  angle_control_roll = P_angle_roll * err_angle_roll + D_angle_roll * errd_angle_roll;
 8003416:	ed97 7a5f 	vldr	s14, [r7, #380]	; 0x17c
 800341a:	edd7 7a5d 	vldr	s15, [r7, #372]	; 0x174
 800341e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003422:	edd7 6a5e 	vldr	s13, [r7, #376]	; 0x178
 8003426:	edd7 7a5c 	vldr	s15, [r7, #368]	; 0x170
 800342a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800342e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003432:	edc7 7a5b 	vstr	s15, [r7, #364]	; 0x16c
		  prev_err_angle_roll = err_angle_roll;
 8003436:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800343a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
		  debug_control1 = err_angle_roll;
 800343e:	4a66      	ldr	r2, [pc, #408]	; (80035d8 <Start_Data_Reading+0xcd0>)
 8003440:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003444:	6013      	str	r3, [r2, #0]


		  //roll angle velocity control
		  err_roll = angle_control_roll - imu.gyr_rps[0]; //M_roll
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <Start_Data_Reading+0xccc>)
 8003448:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800344c:	ed97 7a5b 	vldr	s14, [r7, #364]	; 0x16c
 8003450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003454:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
		  errd_roll = (err_roll - prev_err_roll)/SAMPLE_PERIOD;
 8003458:	ed97 7a64 	vldr	s14, [r7, #400]	; 0x190
 800345c:	edd7 7a77 	vldr	s15, [r7, #476]	; 0x1dc
 8003460:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003464:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80035d0 <Start_Data_Reading+0xcc8>
 8003468:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800346c:	edc7 7a63 	vstr	s15, [r7, #396]	; 0x18c
		  prev_err_roll = err_roll;
 8003470:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003474:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
		  control_roll = P_roll * err_roll + D_roll * errd_roll;
 8003478:	ed97 7a61 	vldr	s14, [r7, #388]	; 0x184
 800347c:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 8003480:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003484:	edd7 6a60 	vldr	s13, [r7, #384]	; 0x180
 8003488:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 800348c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003494:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188
		  debug_control2 = control_roll;
 8003498:	4a50      	ldr	r2, [pc, #320]	; (80035dc <Start_Data_Reading+0xcd4>)
 800349a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800349e:	6013      	str	r3, [r2, #0]


		  //yaw angle control
//		  err_angle_yaw = M_yaw - euler.angle.yaw;
		  err_angle_yaw = M_yaw - yaw_angle;
 80034a0:	4b4a      	ldr	r3, [pc, #296]	; (80035cc <Start_Data_Reading+0xcc4>)
 80034a2:	ed93 7a00 	vldr	s14, [r3]
 80034a6:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 80034aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ae:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
		  errd_angle_yaw = (err_angle_yaw - prev_err_angle_yaw)/SAMPLE_PERIOD;
 80034b2:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 80034b6:	edd7 7a72 	vldr	s15, [r7, #456]	; 0x1c8
 80034ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034be:	eddf 6a44 	vldr	s13, [pc, #272]	; 80035d0 <Start_Data_Reading+0xcc8>
 80034c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034c6:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
		  angle_control_yaw = P_angle_yaw * err_angle_yaw + D_angle_yaw * errd_angle_yaw;
 80034ca:	ed97 7a57 	vldr	s14, [r7, #348]	; 0x15c
 80034ce:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 80034d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034d6:	edd7 6a56 	vldr	s13, [r7, #344]	; 0x158
 80034da:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 80034de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e6:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
		  prev_err_angle_yaw = err_angle_yaw;
 80034ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80034ee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8



		  //yaw angle velocity control
		  err_yaw = angle_control_yaw - imu.gyr_rps[2]; //angle_control_yaw
 80034f2:	4b38      	ldr	r3, [pc, #224]	; (80035d4 <Start_Data_Reading+0xccc>)
 80034f4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80034f8:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 80034fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003500:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
		  errd_yaw = (err_yaw - prev_err_yaw)/SAMPLE_PERIOD;
 8003504:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
 8003508:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 800350c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003510:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80035d0 <Start_Data_Reading+0xcc8>
 8003514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003518:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
		  prev_err_yaw = err_yaw;
 800351c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003520:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		  control_yaw = P_yaw * err_yaw + D_yaw * errd_yaw;
 8003524:	ed97 7a74 	vldr	s14, [r7, #464]	; 0x1d0
 8003528:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 800352c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003530:	edd7 6a73 	vldr	s13, [r7, #460]	; 0x1cc
 8003534:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8003538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800353c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003540:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160



		  if(RX_arm > 1000){
 8003544:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <Start_Data_Reading+0xcd8>)
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800354c:	f240 80da 	bls.w	8003704 <Start_Data_Reading+0xdfc>
			  uart_telemetria = 0;
 8003550:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <Start_Data_Reading+0xcdc>)
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
//			  ref2 = (uint16_t)(M_throttle + control_yaw);
//			  ref3 = (uint16_t)(M_throttle - control_yaw);
//			  ref4 = (uint16_t)(M_throttle + control_yaw);

			  //all together
			  ref1 = (uint16_t)(M_throttle - control_yaw - control_pitch + control_roll);
 8003556:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <Start_Data_Reading+0xcac>)
 8003558:	ed93 7a00 	vldr	s14, [r3]
 800355c:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8003560:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003564:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8003568:	ee37 7a67 	vsub.f32	s14, s14, s15
 800356c:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8003570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003578:	ee17 3a90 	vmov	r3, s15
 800357c:	b29a      	uxth	r2, r3
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <Start_Data_Reading+0xce0>)
 8003580:	801a      	strh	r2, [r3, #0]
			  ref2 = (uint16_t)(M_throttle + control_yaw - control_pitch - control_roll);
 8003582:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <Start_Data_Reading+0xcac>)
 8003584:	ed93 7a00 	vldr	s14, [r3]
 8003588:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 800358c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003590:	e02c      	b.n	80035ec <Start_Data_Reading+0xce4>
 8003592:	bf00      	nop
 8003594:	f3af 8000 	nop.w
 8003598:	33333333 	.word	0x33333333
 800359c:	3fd33333 	.word	0x3fd33333
 80035a0:	20000ac8 	.word	0x20000ac8
 80035a4:	c32a0000 	.word	0xc32a0000
 80035a8:	40768000 	.word	0x40768000
 80035ac:	20000a50 	.word	0x20000a50
 80035b0:	20000bb4 	.word	0x20000bb4
 80035b4:	20000bb8 	.word	0x20000bb8
 80035b8:	20000bb0 	.word	0x20000bb0
 80035bc:	20000bbc 	.word	0x20000bbc
 80035c0:	20000bae 	.word	0x20000bae
 80035c4:	20000bc0 	.word	0x20000bc0
 80035c8:	20000bb2 	.word	0x20000bb2
 80035cc:	20000bc4 	.word	0x20000bc4
 80035d0:	3ba3d70a 	.word	0x3ba3d70a
 80035d4:	20000970 	.word	0x20000970
 80035d8:	20000bc8 	.word	0x20000bc8
 80035dc:	20000bcc 	.word	0x20000bcc
 80035e0:	20000bb6 	.word	0x20000bb6
 80035e4:	20000b12 	.word	0x20000b12
 80035e8:	20000b60 	.word	0x20000b60
 80035ec:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 80035f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035f4:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 80035f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003600:	ee17 3a90 	vmov	r3, s15
 8003604:	b29a      	uxth	r2, r3
 8003606:	4bae      	ldr	r3, [pc, #696]	; (80038c0 <Start_Data_Reading+0xfb8>)
 8003608:	801a      	strh	r2, [r3, #0]
			  ref3 = (uint16_t)(M_throttle - control_yaw + control_pitch - control_roll);
 800360a:	4bae      	ldr	r3, [pc, #696]	; (80038c4 <Start_Data_Reading+0xfbc>)
 800360c:	ed93 7a00 	vldr	s14, [r3]
 8003610:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8003614:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003618:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 800361c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003620:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8003624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800362c:	ee17 3a90 	vmov	r3, s15
 8003630:	b29a      	uxth	r2, r3
 8003632:	4ba5      	ldr	r3, [pc, #660]	; (80038c8 <Start_Data_Reading+0xfc0>)
 8003634:	801a      	strh	r2, [r3, #0]
			  ref4 = (uint16_t)(M_throttle + control_yaw + control_pitch + control_roll);
 8003636:	4ba3      	ldr	r3, [pc, #652]	; (80038c4 <Start_Data_Reading+0xfbc>)
 8003638:	ed93 7a00 	vldr	s14, [r3]
 800363c:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8003640:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003644:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8003648:	ee37 7a27 	vadd.f32	s14, s14, s15
 800364c:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8003650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003658:	ee17 3a90 	vmov	r3, s15
 800365c:	b29a      	uxth	r2, r3
 800365e:	4b9b      	ldr	r3, [pc, #620]	; (80038cc <Start_Data_Reading+0xfc4>)
 8003660:	801a      	strh	r2, [r3, #0]
//			  ref1 = (uint16_t)(M_throttle);
//			  ref2 = (uint16_t)(M_throttle);
//			  ref3 = (uint16_t)(M_throttle);
//			  ref4 = (uint16_t)(M_throttle);

			  if(ref1<550) ref1 = 550;
 8003662:	4b9b      	ldr	r3, [pc, #620]	; (80038d0 <Start_Data_Reading+0xfc8>)
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	f240 2225 	movw	r2, #549	; 0x225
 800366a:	4293      	cmp	r3, r2
 800366c:	d803      	bhi.n	8003676 <Start_Data_Reading+0xd6e>
 800366e:	4b98      	ldr	r3, [pc, #608]	; (80038d0 <Start_Data_Reading+0xfc8>)
 8003670:	f240 2226 	movw	r2, #550	; 0x226
 8003674:	801a      	strh	r2, [r3, #0]
			  if(ref2<550) ref2 = 550;
 8003676:	4b92      	ldr	r3, [pc, #584]	; (80038c0 <Start_Data_Reading+0xfb8>)
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	f240 2225 	movw	r2, #549	; 0x225
 800367e:	4293      	cmp	r3, r2
 8003680:	d803      	bhi.n	800368a <Start_Data_Reading+0xd82>
 8003682:	4b8f      	ldr	r3, [pc, #572]	; (80038c0 <Start_Data_Reading+0xfb8>)
 8003684:	f240 2226 	movw	r2, #550	; 0x226
 8003688:	801a      	strh	r2, [r3, #0]
			  if(ref3<550) ref3 = 550;
 800368a:	4b8f      	ldr	r3, [pc, #572]	; (80038c8 <Start_Data_Reading+0xfc0>)
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	f240 2225 	movw	r2, #549	; 0x225
 8003692:	4293      	cmp	r3, r2
 8003694:	d803      	bhi.n	800369e <Start_Data_Reading+0xd96>
 8003696:	4b8c      	ldr	r3, [pc, #560]	; (80038c8 <Start_Data_Reading+0xfc0>)
 8003698:	f240 2226 	movw	r2, #550	; 0x226
 800369c:	801a      	strh	r2, [r3, #0]
			  if(ref4<550) ref4 = 550;
 800369e:	4b8b      	ldr	r3, [pc, #556]	; (80038cc <Start_Data_Reading+0xfc4>)
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	f240 2225 	movw	r2, #549	; 0x225
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d803      	bhi.n	80036b2 <Start_Data_Reading+0xdaa>
 80036aa:	4b88      	ldr	r3, [pc, #544]	; (80038cc <Start_Data_Reading+0xfc4>)
 80036ac:	f240 2226 	movw	r2, #550	; 0x226
 80036b0:	801a      	strh	r2, [r3, #0]

			  if(ref1>950) ref1 = 950;
 80036b2:	4b87      	ldr	r3, [pc, #540]	; (80038d0 <Start_Data_Reading+0xfc8>)
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	f240 32b6 	movw	r2, #950	; 0x3b6
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d903      	bls.n	80036c6 <Start_Data_Reading+0xdbe>
 80036be:	4b84      	ldr	r3, [pc, #528]	; (80038d0 <Start_Data_Reading+0xfc8>)
 80036c0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80036c4:	801a      	strh	r2, [r3, #0]
			  if(ref2>950) ref2 = 950;
 80036c6:	4b7e      	ldr	r3, [pc, #504]	; (80038c0 <Start_Data_Reading+0xfb8>)
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	f240 32b6 	movw	r2, #950	; 0x3b6
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d903      	bls.n	80036da <Start_Data_Reading+0xdd2>
 80036d2:	4b7b      	ldr	r3, [pc, #492]	; (80038c0 <Start_Data_Reading+0xfb8>)
 80036d4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80036d8:	801a      	strh	r2, [r3, #0]
			  if(ref3>950) ref3 = 950;
 80036da:	4b7b      	ldr	r3, [pc, #492]	; (80038c8 <Start_Data_Reading+0xfc0>)
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	f240 32b6 	movw	r2, #950	; 0x3b6
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d903      	bls.n	80036ee <Start_Data_Reading+0xde6>
 80036e6:	4b78      	ldr	r3, [pc, #480]	; (80038c8 <Start_Data_Reading+0xfc0>)
 80036e8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80036ec:	801a      	strh	r2, [r3, #0]
			  if(ref4>950) ref4 = 950;
 80036ee:	4b77      	ldr	r3, [pc, #476]	; (80038cc <Start_Data_Reading+0xfc4>)
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	f240 32b6 	movw	r2, #950	; 0x3b6
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d931      	bls.n	800375e <Start_Data_Reading+0xe56>
 80036fa:	4b74      	ldr	r3, [pc, #464]	; (80038cc <Start_Data_Reading+0xfc4>)
 80036fc:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	e02c      	b.n	800375e <Start_Data_Reading+0xe56>


		  }
		  else{
			  uart_telemetria = 1;
 8003704:	4b73      	ldr	r3, [pc, #460]	; (80038d4 <Start_Data_Reading+0xfcc>)
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
			  if(new_P == 1){
 800370a:	4b73      	ldr	r3, [pc, #460]	; (80038d8 <Start_Data_Reading+0xfd0>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d106      	bne.n	8003720 <Start_Data_Reading+0xe18>
				  P_yaw = telem_P;
 8003712:	4b72      	ldr	r3, [pc, #456]	; (80038dc <Start_Data_Reading+0xfd4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
				  new_P = 0;
 800371a:	4b6f      	ldr	r3, [pc, #444]	; (80038d8 <Start_Data_Reading+0xfd0>)
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
			  }
			  if(new_D == 1){
 8003720:	4b6f      	ldr	r3, [pc, #444]	; (80038e0 <Start_Data_Reading+0xfd8>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d106      	bne.n	8003736 <Start_Data_Reading+0xe2e>
				  D_yaw = telem_D;
 8003728:	4b6e      	ldr	r3, [pc, #440]	; (80038e4 <Start_Data_Reading+0xfdc>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
				  new_D = 0;
 8003730:	4b6b      	ldr	r3, [pc, #428]	; (80038e0 <Start_Data_Reading+0xfd8>)
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
			  }
			  // yaw angle reference set to the AHRS calculated yaw angle, this is to prevent the angle offset during arm switch off state
			  M_yaw = yaw_angle;
 8003736:	4a6c      	ldr	r2, [pc, #432]	; (80038e8 <Start_Data_Reading+0xfe0>)
 8003738:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800373c:	6013      	str	r3, [r2, #0]

			  ref1 = 550;
 800373e:	4b64      	ldr	r3, [pc, #400]	; (80038d0 <Start_Data_Reading+0xfc8>)
 8003740:	f240 2226 	movw	r2, #550	; 0x226
 8003744:	801a      	strh	r2, [r3, #0]
			  ref2 = 550;
 8003746:	4b5e      	ldr	r3, [pc, #376]	; (80038c0 <Start_Data_Reading+0xfb8>)
 8003748:	f240 2226 	movw	r2, #550	; 0x226
 800374c:	801a      	strh	r2, [r3, #0]
			  ref3 = 550;
 800374e:	4b5e      	ldr	r3, [pc, #376]	; (80038c8 <Start_Data_Reading+0xfc0>)
 8003750:	f240 2226 	movw	r2, #550	; 0x226
 8003754:	801a      	strh	r2, [r3, #0]
			  ref4 = 550;
 8003756:	4b5d      	ldr	r3, [pc, #372]	; (80038cc <Start_Data_Reading+0xfc4>)
 8003758:	f240 2226 	movw	r2, #550	; 0x226
 800375c:	801a      	strh	r2, [r3, #0]
		  }


		  //telemetria
		  telemetria_float[0] = accelerometer.axis.x;
 800375e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003762:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800376c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003770:	601a      	str	r2, [r3, #0]
		  telemetria_float[1] = accelerometer.axis.y;
 8003772:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003776:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003780:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003784:	605a      	str	r2, [r3, #4]
		  telemetria_float[2] = accelerometer.axis.z;
 8003786:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800378a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003794:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003798:	609a      	str	r2, [r3, #8]
		  telemetria_float[3] = gyroscope.axis.x;
 800379a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800379e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037a8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037ac:	60da      	str	r2, [r3, #12]
		  telemetria_float[4] = gyroscope.axis.y;
 80037ae:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037b2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037bc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037c0:	611a      	str	r2, [r3, #16]
		  telemetria_float[5] = gyroscope.axis.z;
 80037c2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037c6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037d0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037d4:	615a      	str	r2, [r3, #20]
		  telemetria_float[6] = euler.angle.roll;
 80037d6:	4b45      	ldr	r3, [pc, #276]	; (80038ec <Start_Data_Reading+0xfe4>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037e2:	619a      	str	r2, [r3, #24]
		  telemetria_float[7] = euler.angle.pitch;
 80037e4:	4b41      	ldr	r3, [pc, #260]	; (80038ec <Start_Data_Reading+0xfe4>)
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037f0:	61da      	str	r2, [r3, #28]
		  telemetria_float[8] = euler.angle.yaw;
 80037f2:	4b3e      	ldr	r3, [pc, #248]	; (80038ec <Start_Data_Reading+0xfe4>)
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037fa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80037fe:	621a      	str	r2, [r3, #32]
//		  telemetria_float[9] = (float)ref1;
//		  telemetria_float[10] = (float)ref2;
//		  telemetria_float[11] = (float)ref3;
//		  telemetria_float[12] = (float)ref4;
		  telemetria_float[9] = (float)M_roll;
 8003800:	4b3b      	ldr	r3, [pc, #236]	; (80038f0 <Start_Data_Reading+0xfe8>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003808:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800380c:	625a      	str	r2, [r3, #36]	; 0x24
		  telemetria_float[10] = (float)M_pitch;
 800380e:	4b39      	ldr	r3, [pc, #228]	; (80038f4 <Start_Data_Reading+0xfec>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003816:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800381a:	629a      	str	r2, [r3, #40]	; 0x28
		  telemetria_float[11] = (float)M_yaw;
 800381c:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <Start_Data_Reading+0xfe0>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003824:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003828:	62da      	str	r2, [r3, #44]	; 0x2c
		  telemetria_float[12] = (float)M_throttle;
 800382a:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <Start_Data_Reading+0xfbc>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003832:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
		  telemetria_float[13] = (float)angle_control_roll;
 8003838:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800383c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003840:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8003844:	635a      	str	r2, [r3, #52]	; 0x34
		  telemetria_float[14] = (float)angle_control_pitch;
 8003846:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800384a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800384e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
		  telemetria_float[15] = (float)angle_control_yaw;
 8003854:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003858:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800385c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003860:	63da      	str	r2, [r3, #60]	; 0x3c
		  telemetria_float[16] = (float)control_roll;
 8003862:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003866:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800386a:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800386e:	641a      	str	r2, [r3, #64]	; 0x40
		  telemetria_float[17] = (float)control_pitch;
 8003870:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003874:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003878:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
		  telemetria_float[18] = (float)control_yaw;
 800387e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003882:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003886:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800388a:	649a      	str	r2, [r3, #72]	; 0x48
		  xQueueSendToFront(telemetria_Queue, (void*)&telemetria_float, 0);
 800388c:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <Start_Data_Reading+0xff0>)
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003894:	2301      	movs	r3, #1
 8003896:	2200      	movs	r2, #0
 8003898:	f009 fc7c 	bl	800d194 <xQueueGenericSend>





		  set_duty_Oneshot42(&htim3, ref1, ref2, ref3, ref4);
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <Start_Data_Reading+0xfc8>)
 800389e:	8819      	ldrh	r1, [r3, #0]
 80038a0:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <Start_Data_Reading+0xfb8>)
 80038a2:	881a      	ldrh	r2, [r3, #0]
 80038a4:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <Start_Data_Reading+0xfc0>)
 80038a6:	8818      	ldrh	r0, [r3, #0]
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <Start_Data_Reading+0xfc4>)
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	4603      	mov	r3, r0
 80038b0:	4812      	ldr	r0, [pc, #72]	; (80038fc <Start_Data_Reading+0xff4>)
 80038b2:	f001 fd12 	bl	80052da <set_duty_Oneshot42>
	osDelay(3);
 80038b6:	2003      	movs	r0, #3
 80038b8:	f009 fae2 	bl	800ce80 <osDelay>
  {
 80038bc:	f7ff ba30 	b.w	8002d20 <Start_Data_Reading+0x418>
 80038c0:	20000b62 	.word	0x20000b62
 80038c4:	20000bb8 	.word	0x20000bb8
 80038c8:	20000b64 	.word	0x20000b64
 80038cc:	20000b66 	.word	0x20000b66
 80038d0:	20000b60 	.word	0x20000b60
 80038d4:	20000b12 	.word	0x20000b12
 80038d8:	20000b1c 	.word	0x20000b1c
 80038dc:	20000b14 	.word	0x20000b14
 80038e0:	20000b1d 	.word	0x20000b1d
 80038e4:	20000b18 	.word	0x20000b18
 80038e8:	20000bc4 	.word	0x20000bc4
 80038ec:	20000ac8 	.word	0x20000ac8
 80038f0:	20000bc0 	.word	0x20000bc0
 80038f4:	20000bbc 	.word	0x20000bbc
 80038f8:	20000bd0 	.word	0x20000bd0
 80038fc:	200006d4 	.word	0x200006d4

08003900 <Start_Orientation>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Orientation */
void Start_Orientation(void const * argument)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
//		//filterUpdateIMU(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], &q );
//		filterUpdate(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], mag_data_y, -mag_data_x, mag_data_z, &q, &f);
//		eulerAngles(q, &roll, &pitch, &yaw);
//		oricalc = 0;
//	  }
    osDelay(1);
 8003908:	2001      	movs	r0, #1
 800390a:	f009 fab9 	bl	800ce80 <osDelay>
 800390e:	e7fb      	b.n	8003908 <Start_Orientation+0x8>

08003910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003914:	b672      	cpsid	i
}
 8003916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003918:	e7fe      	b.n	8003918 <Error_Handler+0x8>
	...

0800391c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_MspInit+0x54>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	4a11      	ldr	r2, [pc, #68]	; (8003970 <HAL_MspInit+0x54>)
 800392c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003930:	6453      	str	r3, [r2, #68]	; 0x44
 8003932:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <HAL_MspInit+0x54>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_MspInit+0x54>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <HAL_MspInit+0x54>)
 8003948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394c:	6413      	str	r3, [r2, #64]	; 0x40
 800394e:	4b08      	ldr	r3, [pc, #32]	; (8003970 <HAL_MspInit+0x54>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800395a:	2200      	movs	r2, #0
 800395c:	210f      	movs	r1, #15
 800395e:	f06f 0001 	mvn.w	r0, #1
 8003962:	f002 f94c 	bl	8005bfe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800

08003974 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08e      	sub	sp, #56	; 0x38
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a45      	ldr	r2, [pc, #276]	; (8003aa8 <HAL_ADC_MspInit+0x134>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d128      	bne.n	80039e8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	623b      	str	r3, [r7, #32]
 800399a:	4b44      	ldr	r3, [pc, #272]	; (8003aac <HAL_ADC_MspInit+0x138>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	4a43      	ldr	r2, [pc, #268]	; (8003aac <HAL_ADC_MspInit+0x138>)
 80039a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a4:	6453      	str	r3, [r2, #68]	; 0x44
 80039a6:	4b41      	ldr	r3, [pc, #260]	; (8003aac <HAL_ADC_MspInit+0x138>)
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	4b3d      	ldr	r3, [pc, #244]	; (8003aac <HAL_ADC_MspInit+0x138>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	4a3c      	ldr	r2, [pc, #240]	; (8003aac <HAL_ADC_MspInit+0x138>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	6313      	str	r3, [r2, #48]	; 0x30
 80039c2:	4b3a      	ldr	r3, [pc, #232]	; (8003aac <HAL_ADC_MspInit+0x138>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CRNT_Pin;
 80039ce:	2320      	movs	r3, #32
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039d2:	2303      	movs	r3, #3
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CRNT_GPIO_Port, &GPIO_InitStruct);
 80039da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039de:	4619      	mov	r1, r3
 80039e0:	4833      	ldr	r0, [pc, #204]	; (8003ab0 <HAL_ADC_MspInit+0x13c>)
 80039e2:	f002 fd45 	bl	8006470 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80039e6:	e05a      	b.n	8003a9e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a31      	ldr	r2, [pc, #196]	; (8003ab4 <HAL_ADC_MspInit+0x140>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d128      	bne.n	8003a44 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	4b2d      	ldr	r3, [pc, #180]	; (8003aac <HAL_ADC_MspInit+0x138>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	4a2c      	ldr	r2, [pc, #176]	; (8003aac <HAL_ADC_MspInit+0x138>)
 80039fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a00:	6453      	str	r3, [r2, #68]	; 0x44
 8003a02:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <HAL_ADC_MspInit+0x138>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	4b26      	ldr	r3, [pc, #152]	; (8003aac <HAL_ADC_MspInit+0x138>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	4a25      	ldr	r2, [pc, #148]	; (8003aac <HAL_ADC_MspInit+0x138>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1e:	4b23      	ldr	r3, [pc, #140]	; (8003aac <HAL_ADC_MspInit+0x138>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a2a:	2310      	movs	r3, #16
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	481c      	ldr	r0, [pc, #112]	; (8003ab0 <HAL_ADC_MspInit+0x13c>)
 8003a3e:	f002 fd17 	bl	8006470 <HAL_GPIO_Init>
}
 8003a42:	e02c      	b.n	8003a9e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <HAL_ADC_MspInit+0x144>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d127      	bne.n	8003a9e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	4b16      	ldr	r3, [pc, #88]	; (8003aac <HAL_ADC_MspInit+0x138>)
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	4a15      	ldr	r2, [pc, #84]	; (8003aac <HAL_ADC_MspInit+0x138>)
 8003a58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <HAL_ADC_MspInit+0x138>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <HAL_ADC_MspInit+0x138>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	4a0e      	ldr	r2, [pc, #56]	; (8003aac <HAL_ADC_MspInit+0x138>)
 8003a74:	f043 0304 	orr.w	r3, r3, #4
 8003a78:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7a:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_ADC_MspInit+0x138>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a86:	2308      	movs	r3, #8
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a96:	4619      	mov	r1, r3
 8003a98:	4808      	ldr	r0, [pc, #32]	; (8003abc <HAL_ADC_MspInit+0x148>)
 8003a9a:	f002 fce9 	bl	8006470 <HAL_GPIO_Init>
}
 8003a9e:	bf00      	nop
 8003aa0:	3738      	adds	r7, #56	; 0x38
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40012000 	.word	0x40012000
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40020000 	.word	0x40020000
 8003ab4:	40012100 	.word	0x40012100
 8003ab8:	40012200 	.word	0x40012200
 8003abc:	40020800 	.word	0x40020800

08003ac0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08e      	sub	sp, #56	; 0x38
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a5c      	ldr	r2, [pc, #368]	; (8003c50 <HAL_I2C_MspInit+0x190>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d12d      	bne.n	8003b3e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	623b      	str	r3, [r7, #32]
 8003ae6:	4b5b      	ldr	r3, [pc, #364]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	4a5a      	ldr	r2, [pc, #360]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003aec:	f043 0302 	orr.w	r3, r3, #2
 8003af0:	6313      	str	r3, [r2, #48]	; 0x30
 8003af2:	4b58      	ldr	r3, [pc, #352]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	623b      	str	r3, [r7, #32]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAGN_SCL_Pin|MAGN_SDA_Pin;
 8003afe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b04:	2312      	movs	r3, #18
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b10:	2304      	movs	r3, #4
 8003b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b18:	4619      	mov	r1, r3
 8003b1a:	484f      	ldr	r0, [pc, #316]	; (8003c58 <HAL_I2C_MspInit+0x198>)
 8003b1c:	f002 fca8 	bl	8006470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b20:	2300      	movs	r3, #0
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	4b4b      	ldr	r3, [pc, #300]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	4a4a      	ldr	r2, [pc, #296]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003b2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b30:	4b48      	ldr	r3, [pc, #288]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003b3c:	e083      	b.n	8003c46 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a46      	ldr	r2, [pc, #280]	; (8003c5c <HAL_I2C_MspInit+0x19c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d12d      	bne.n	8003ba4 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61bb      	str	r3, [r7, #24]
 8003b4c:	4b41      	ldr	r3, [pc, #260]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	4a40      	ldr	r2, [pc, #256]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003b52:	f043 0302 	orr.w	r3, r3, #2
 8003b56:	6313      	str	r3, [r2, #48]	; 0x30
 8003b58:	4b3e      	ldr	r3, [pc, #248]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PRESS_SCL_Pin|PRESS_SDA_Pin;
 8003b64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b6a:	2312      	movs	r3, #18
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b72:	2303      	movs	r3, #3
 8003b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003b76:	2304      	movs	r3, #4
 8003b78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4835      	ldr	r0, [pc, #212]	; (8003c58 <HAL_I2C_MspInit+0x198>)
 8003b82:	f002 fc75 	bl	8006470 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	4b32      	ldr	r3, [pc, #200]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	4a31      	ldr	r2, [pc, #196]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003b90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b94:	6413      	str	r3, [r2, #64]	; 0x40
 8003b96:	4b2f      	ldr	r3, [pc, #188]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	697b      	ldr	r3, [r7, #20]
}
 8003ba2:	e050      	b.n	8003c46 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a2d      	ldr	r2, [pc, #180]	; (8003c60 <HAL_I2C_MspInit+0x1a0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d14b      	bne.n	8003c46 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	4b28      	ldr	r3, [pc, #160]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	4a27      	ldr	r2, [pc, #156]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003bb8:	f043 0304 	orr.w	r3, r3, #4
 8003bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bbe:	4b25      	ldr	r3, [pc, #148]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	4b21      	ldr	r3, [pc, #132]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bda:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bec:	2312      	movs	r3, #18
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c00:	4619      	mov	r1, r3
 8003c02:	4818      	ldr	r0, [pc, #96]	; (8003c64 <HAL_I2C_MspInit+0x1a4>)
 8003c04:	f002 fc34 	bl	8006470 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c0e:	2312      	movs	r3, #18
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c16:	2303      	movs	r3, #3
 8003c18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c1a:	2304      	movs	r3, #4
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c22:	4619      	mov	r1, r3
 8003c24:	4810      	ldr	r0, [pc, #64]	; (8003c68 <HAL_I2C_MspInit+0x1a8>)
 8003c26:	f002 fc23 	bl	8006470 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003c34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c38:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <HAL_I2C_MspInit+0x194>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	68bb      	ldr	r3, [r7, #8]
}
 8003c46:	bf00      	nop
 8003c48:	3738      	adds	r7, #56	; 0x38
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40005400 	.word	0x40005400
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40020400 	.word	0x40020400
 8003c5c:	40005800 	.word	0x40005800
 8003c60:	40005c00 	.word	0x40005c00
 8003c64:	40020800 	.word	0x40020800
 8003c68:	40020000 	.word	0x40020000

08003c6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08a      	sub	sp, #40	; 0x28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	605a      	str	r2, [r3, #4]
 8003c7e:	609a      	str	r2, [r3, #8]
 8003c80:	60da      	str	r2, [r3, #12]
 8003c82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a19      	ldr	r2, [pc, #100]	; (8003cf0 <HAL_SPI_MspInit+0x84>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d12c      	bne.n	8003ce8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <HAL_SPI_MspInit+0x88>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	4a17      	ldr	r2, [pc, #92]	; (8003cf4 <HAL_SPI_MspInit+0x88>)
 8003c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9e:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <HAL_SPI_MspInit+0x88>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <HAL_SPI_MspInit+0x88>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	4a10      	ldr	r2, [pc, #64]	; (8003cf4 <HAL_SPI_MspInit+0x88>)
 8003cb4:	f043 0302 	orr.w	r3, r3, #2
 8003cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <HAL_SPI_MspInit+0x88>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8003cc6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003cd8:	2305      	movs	r3, #5
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cdc:	f107 0314 	add.w	r3, r7, #20
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4805      	ldr	r0, [pc, #20]	; (8003cf8 <HAL_SPI_MspInit+0x8c>)
 8003ce4:	f002 fbc4 	bl	8006470 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003ce8:	bf00      	nop
 8003cea:	3728      	adds	r7, #40	; 0x28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40003800 	.word	0x40003800
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	40020400 	.word	0x40020400

08003cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08e      	sub	sp, #56	; 0x38
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1c:	d134      	bne.n	8003d88 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	623b      	str	r3, [r7, #32]
 8003d22:	4b4b      	ldr	r3, [pc, #300]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	4a4a      	ldr	r2, [pc, #296]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2e:	4b48      	ldr	r3, [pc, #288]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	623b      	str	r3, [r7, #32]
 8003d38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	4b44      	ldr	r3, [pc, #272]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	4a43      	ldr	r2, [pc, #268]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4a:	4b41      	ldr	r3, [pc, #260]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8003d56:	2301      	movs	r3, #1
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d62:	2300      	movs	r3, #0
 8003d64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d66:	2301      	movs	r3, #1
 8003d68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4838      	ldr	r0, [pc, #224]	; (8003e54 <HAL_TIM_Base_MspInit+0x158>)
 8003d72:	f002 fb7d 	bl	8006470 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003d76:	2200      	movs	r2, #0
 8003d78:	2105      	movs	r1, #5
 8003d7a:	201c      	movs	r0, #28
 8003d7c:	f001 ff3f 	bl	8005bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d80:	201c      	movs	r0, #28
 8003d82:	f001 ff58 	bl	8005c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003d86:	e05e      	b.n	8003e46 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM3)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a32      	ldr	r2, [pc, #200]	; (8003e58 <HAL_TIM_Base_MspInit+0x15c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d10e      	bne.n	8003db0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
 8003d96:	4b2e      	ldr	r3, [pc, #184]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	4a2d      	ldr	r2, [pc, #180]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003d9c:	f043 0302 	orr.w	r3, r3, #2
 8003da0:	6413      	str	r3, [r2, #64]	; 0x40
 8003da2:	4b2b      	ldr	r3, [pc, #172]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	69bb      	ldr	r3, [r7, #24]
}
 8003dae:	e04a      	b.n	8003e46 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM4)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a29      	ldr	r2, [pc, #164]	; (8003e5c <HAL_TIM_Base_MspInit+0x160>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10e      	bne.n	8003dd8 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	4a23      	ldr	r2, [pc, #140]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003dc4:	f043 0304 	orr.w	r3, r3, #4
 8003dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dca:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	697b      	ldr	r3, [r7, #20]
}
 8003dd6:	e036      	b.n	8003e46 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM6)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a20      	ldr	r2, [pc, #128]	; (8003e60 <HAL_TIM_Base_MspInit+0x164>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d116      	bne.n	8003e10 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003dec:	f043 0310 	orr.w	r3, r3, #16
 8003df0:	6413      	str	r3, [r2, #64]	; 0x40
 8003df2:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2105      	movs	r1, #5
 8003e02:	2036      	movs	r0, #54	; 0x36
 8003e04:	f001 fefb 	bl	8005bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e08:	2036      	movs	r0, #54	; 0x36
 8003e0a:	f001 ff14 	bl	8005c36 <HAL_NVIC_EnableIRQ>
}
 8003e0e:	e01a      	b.n	8003e46 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM7)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a13      	ldr	r2, [pc, #76]	; (8003e64 <HAL_TIM_Base_MspInit+0x168>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d115      	bne.n	8003e46 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	4a0b      	ldr	r2, [pc, #44]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003e24:	f043 0320 	orr.w	r3, r3, #32
 8003e28:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_TIM_Base_MspInit+0x154>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003e36:	2200      	movs	r2, #0
 8003e38:	2105      	movs	r1, #5
 8003e3a:	2037      	movs	r0, #55	; 0x37
 8003e3c:	f001 fedf 	bl	8005bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e40:	2037      	movs	r0, #55	; 0x37
 8003e42:	f001 fef8 	bl	8005c36 <HAL_NVIC_EnableIRQ>
}
 8003e46:	bf00      	nop
 8003e48:	3738      	adds	r7, #56	; 0x38
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40020000 	.word	0x40020000
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800
 8003e60:	40001000 	.word	0x40001000
 8003e64:	40001400 	.word	0x40001400

08003e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	; 0x28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e70:	f107 0314 	add.w	r3, r7, #20
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	609a      	str	r2, [r3, #8]
 8003e7c:	60da      	str	r2, [r3, #12]
 8003e7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a21      	ldr	r2, [pc, #132]	; (8003f0c <HAL_TIM_MspPostInit+0xa4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d13b      	bne.n	8003f02 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_TIM_MspPostInit+0xa8>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <HAL_TIM_MspPostInit+0xa8>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9a:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <HAL_TIM_MspPostInit+0xa8>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <HAL_TIM_MspPostInit+0xa8>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_TIM_MspPostInit+0xa8>)
 8003eb0:	f043 0302 	orr.w	r3, r3, #2
 8003eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003eb6:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <HAL_TIM_MspPostInit+0xa8>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8003ec2:	23c0      	movs	r3, #192	; 0xc0
 8003ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed6:	f107 0314 	add.w	r3, r7, #20
 8003eda:	4619      	mov	r1, r3
 8003edc:	480d      	ldr	r0, [pc, #52]	; (8003f14 <HAL_TIM_MspPostInit+0xac>)
 8003ede:	f002 fac7 	bl	8006470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef6:	f107 0314 	add.w	r3, r7, #20
 8003efa:	4619      	mov	r1, r3
 8003efc:	4806      	ldr	r0, [pc, #24]	; (8003f18 <HAL_TIM_MspPostInit+0xb0>)
 8003efe:	f002 fab7 	bl	8006470 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003f02:	bf00      	nop
 8003f04:	3728      	adds	r7, #40	; 0x28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40020000 	.word	0x40020000
 8003f18:	40020400 	.word	0x40020400

08003f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b090      	sub	sp, #64	; 0x40
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a81      	ldr	r2, [pc, #516]	; (8004140 <HAL_UART_MspInit+0x224>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d15d      	bne.n	8003ffa <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f42:	4b80      	ldr	r3, [pc, #512]	; (8004144 <HAL_UART_MspInit+0x228>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	4a7f      	ldr	r2, [pc, #508]	; (8004144 <HAL_UART_MspInit+0x228>)
 8003f48:	f043 0310 	orr.w	r3, r3, #16
 8003f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f4e:	4b7d      	ldr	r3, [pc, #500]	; (8004144 <HAL_UART_MspInit+0x228>)
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5e:	4b79      	ldr	r3, [pc, #484]	; (8004144 <HAL_UART_MspInit+0x228>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	4a78      	ldr	r2, [pc, #480]	; (8004144 <HAL_UART_MspInit+0x228>)
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6a:	4b76      	ldr	r3, [pc, #472]	; (8004144 <HAL_UART_MspInit+0x228>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RECEIVER_TX_Pin|RECEIVER_RX_Pin;
 8003f76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f84:	2303      	movs	r3, #3
 8003f86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f88:	2307      	movs	r3, #7
 8003f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f90:	4619      	mov	r1, r3
 8003f92:	486d      	ldr	r0, [pc, #436]	; (8004148 <HAL_UART_MspInit+0x22c>)
 8003f94:	f002 fa6c 	bl	8006470 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003f98:	4b6c      	ldr	r3, [pc, #432]	; (800414c <HAL_UART_MspInit+0x230>)
 8003f9a:	4a6d      	ldr	r2, [pc, #436]	; (8004150 <HAL_UART_MspInit+0x234>)
 8003f9c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003f9e:	4b6b      	ldr	r3, [pc, #428]	; (800414c <HAL_UART_MspInit+0x230>)
 8003fa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fa4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fa6:	4b69      	ldr	r3, [pc, #420]	; (800414c <HAL_UART_MspInit+0x230>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fac:	4b67      	ldr	r3, [pc, #412]	; (800414c <HAL_UART_MspInit+0x230>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fb2:	4b66      	ldr	r3, [pc, #408]	; (800414c <HAL_UART_MspInit+0x230>)
 8003fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fb8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fba:	4b64      	ldr	r3, [pc, #400]	; (800414c <HAL_UART_MspInit+0x230>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fc0:	4b62      	ldr	r3, [pc, #392]	; (800414c <HAL_UART_MspInit+0x230>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003fc6:	4b61      	ldr	r3, [pc, #388]	; (800414c <HAL_UART_MspInit+0x230>)
 8003fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fcc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003fce:	4b5f      	ldr	r3, [pc, #380]	; (800414c <HAL_UART_MspInit+0x230>)
 8003fd0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fd4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fd6:	4b5d      	ldr	r3, [pc, #372]	; (800414c <HAL_UART_MspInit+0x230>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003fdc:	485b      	ldr	r0, [pc, #364]	; (800414c <HAL_UART_MspInit+0x230>)
 8003fde:	f001 fe45 	bl	8005c6c <HAL_DMA_Init>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003fe8:	f7ff fc92 	bl	8003910 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a57      	ldr	r2, [pc, #348]	; (800414c <HAL_UART_MspInit+0x230>)
 8003ff0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ff2:	4a56      	ldr	r2, [pc, #344]	; (800414c <HAL_UART_MspInit+0x230>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003ff8:	e09d      	b.n	8004136 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART2)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a55      	ldr	r2, [pc, #340]	; (8004154 <HAL_UART_MspInit+0x238>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d134      	bne.n	800406e <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004004:	2300      	movs	r3, #0
 8004006:	623b      	str	r3, [r7, #32]
 8004008:	4b4e      	ldr	r3, [pc, #312]	; (8004144 <HAL_UART_MspInit+0x228>)
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	4a4d      	ldr	r2, [pc, #308]	; (8004144 <HAL_UART_MspInit+0x228>)
 800400e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004012:	6413      	str	r3, [r2, #64]	; 0x40
 8004014:	4b4b      	ldr	r3, [pc, #300]	; (8004144 <HAL_UART_MspInit+0x228>)
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401c:	623b      	str	r3, [r7, #32]
 800401e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	4b47      	ldr	r3, [pc, #284]	; (8004144 <HAL_UART_MspInit+0x228>)
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	4a46      	ldr	r2, [pc, #280]	; (8004144 <HAL_UART_MspInit+0x228>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	6313      	str	r3, [r2, #48]	; 0x30
 8004030:	4b44      	ldr	r3, [pc, #272]	; (8004144 <HAL_UART_MspInit+0x228>)
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	61fb      	str	r3, [r7, #28]
 800403a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800403c:	230c      	movs	r3, #12
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004040:	2302      	movs	r3, #2
 8004042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004044:	2300      	movs	r3, #0
 8004046:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004048:	2303      	movs	r3, #3
 800404a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800404c:	2307      	movs	r3, #7
 800404e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004054:	4619      	mov	r1, r3
 8004056:	483c      	ldr	r0, [pc, #240]	; (8004148 <HAL_UART_MspInit+0x22c>)
 8004058:	f002 fa0a 	bl	8006470 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800405c:	2200      	movs	r2, #0
 800405e:	2105      	movs	r1, #5
 8004060:	2026      	movs	r0, #38	; 0x26
 8004062:	f001 fdcc 	bl	8005bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004066:	2026      	movs	r0, #38	; 0x26
 8004068:	f001 fde5 	bl	8005c36 <HAL_NVIC_EnableIRQ>
}
 800406c:	e063      	b.n	8004136 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART3)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a39      	ldr	r2, [pc, #228]	; (8004158 <HAL_UART_MspInit+0x23c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d12d      	bne.n	80040d4 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	4b31      	ldr	r3, [pc, #196]	; (8004144 <HAL_UART_MspInit+0x228>)
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	4a30      	ldr	r2, [pc, #192]	; (8004144 <HAL_UART_MspInit+0x228>)
 8004082:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004086:	6413      	str	r3, [r2, #64]	; 0x40
 8004088:	4b2e      	ldr	r3, [pc, #184]	; (8004144 <HAL_UART_MspInit+0x228>)
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <HAL_UART_MspInit+0x228>)
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	4a29      	ldr	r2, [pc, #164]	; (8004144 <HAL_UART_MspInit+0x228>)
 800409e:	f043 0304 	orr.w	r3, r3, #4
 80040a2:	6313      	str	r3, [r2, #48]	; 0x30
 80040a4:	4b27      	ldr	r3, [pc, #156]	; (8004144 <HAL_UART_MspInit+0x228>)
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 80040b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b6:	2302      	movs	r3, #2
 80040b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040be:	2303      	movs	r3, #3
 80040c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040c2:	2307      	movs	r3, #7
 80040c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040ca:	4619      	mov	r1, r3
 80040cc:	4823      	ldr	r0, [pc, #140]	; (800415c <HAL_UART_MspInit+0x240>)
 80040ce:	f002 f9cf 	bl	8006470 <HAL_GPIO_Init>
}
 80040d2:	e030      	b.n	8004136 <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART6)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a21      	ldr	r2, [pc, #132]	; (8004160 <HAL_UART_MspInit+0x244>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d12b      	bne.n	8004136 <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART6_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	4b18      	ldr	r3, [pc, #96]	; (8004144 <HAL_UART_MspInit+0x228>)
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	4a17      	ldr	r2, [pc, #92]	; (8004144 <HAL_UART_MspInit+0x228>)
 80040e8:	f043 0320 	orr.w	r3, r3, #32
 80040ec:	6453      	str	r3, [r2, #68]	; 0x44
 80040ee:	4b15      	ldr	r3, [pc, #84]	; (8004144 <HAL_UART_MspInit+0x228>)
 80040f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	4b11      	ldr	r3, [pc, #68]	; (8004144 <HAL_UART_MspInit+0x228>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	4a10      	ldr	r2, [pc, #64]	; (8004144 <HAL_UART_MspInit+0x228>)
 8004104:	f043 0304 	orr.w	r3, r3, #4
 8004108:	6313      	str	r3, [r2, #48]	; 0x30
 800410a:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <HAL_UART_MspInit+0x228>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004116:	23c0      	movs	r3, #192	; 0xc0
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411a:	2302      	movs	r3, #2
 800411c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	2300      	movs	r3, #0
 8004120:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004122:	2303      	movs	r3, #3
 8004124:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004126:	2308      	movs	r3, #8
 8004128:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800412a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800412e:	4619      	mov	r1, r3
 8004130:	480a      	ldr	r0, [pc, #40]	; (800415c <HAL_UART_MspInit+0x240>)
 8004132:	f002 f99d 	bl	8006470 <HAL_GPIO_Init>
}
 8004136:	bf00      	nop
 8004138:	3740      	adds	r7, #64	; 0x40
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40011000 	.word	0x40011000
 8004144:	40023800 	.word	0x40023800
 8004148:	40020000 	.word	0x40020000
 800414c:	20000904 	.word	0x20000904
 8004150:	40026440 	.word	0x40026440
 8004154:	40004400 	.word	0x40004400
 8004158:	40004800 	.word	0x40004800
 800415c:	40020800 	.word	0x40020800
 8004160:	40011400 	.word	0x40011400

08004164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004168:	e7fe      	b.n	8004168 <NMI_Handler+0x4>

0800416a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800416a:	b480      	push	{r7}
 800416c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800416e:	e7fe      	b.n	800416e <HardFault_Handler+0x4>

08004170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004174:	e7fe      	b.n	8004174 <MemManage_Handler+0x4>

08004176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004176:	b480      	push	{r7}
 8004178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800417a:	e7fe      	b.n	800417a <BusFault_Handler+0x4>

0800417c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004180:	e7fe      	b.n	8004180 <UsageFault_Handler+0x4>

08004182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004182:	b480      	push	{r7}
 8004184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004186:	bf00      	nop
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004194:	f001 f9b2 	bl	80054fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004198:	f00a f9d2 	bl	800e540 <xTaskGetSchedulerState>
 800419c:	4603      	mov	r3, r0
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d001      	beq.n	80041a6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80041a2:	f00a fc99 	bl	800ead8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}

080041aa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80041ae:	2001      	movs	r0, #1
 80041b0:	f002 fb2e 	bl	8006810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_PRESS_Pin);
 80041bc:	2004      	movs	r0, #4
 80041be:	f002 fb27 	bl	8006810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041cc:	4802      	ldr	r0, [pc, #8]	; (80041d8 <TIM2_IRQHandler+0x10>)
 80041ce:	f004 fe0a 	bl	8008de6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	2000068c 	.word	0x2000068c

080041dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041e0:	4802      	ldr	r0, [pc, #8]	; (80041ec <USART2_IRQHandler+0x10>)
 80041e2:	f005 fff1 	bl	800a1c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000838 	.word	0x20000838

080041f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_GYRO_Pin);
 80041f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80041f8:	f002 fb0a 	bl	8006810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_ACC_Pin);
 80041fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004200:	f002 fb06 	bl	8006810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_MAGN_Pin);
 8004204:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004208:	f002 fb02 	bl	8006810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800420c:	bf00      	nop
 800420e:	bd80      	pop	{r7, pc}

08004210 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004214:	4802      	ldr	r0, [pc, #8]	; (8004220 <TIM6_DAC_IRQHandler+0x10>)
 8004216:	f004 fde6 	bl	8008de6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000764 	.word	0x20000764

08004224 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004228:	4802      	ldr	r0, [pc, #8]	; (8004234 <TIM7_IRQHandler+0x10>)
 800422a:	f004 fddc 	bl	8008de6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	200007ac 	.word	0x200007ac

08004238 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800423c:	4802      	ldr	r0, [pc, #8]	; (8004248 <DMA2_Stream2_IRQHandler+0x10>)
 800423e:	f001 fead 	bl	8005f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000904 	.word	0x20000904

0800424c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  return 1;
 8004250:	2301      	movs	r3, #1
}
 8004252:	4618      	mov	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <_kill>:

int _kill(int pid, int sig)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004266:	f00a fe71 	bl	800ef4c <__errno>
 800426a:	4603      	mov	r3, r0
 800426c:	2216      	movs	r2, #22
 800426e:	601a      	str	r2, [r3, #0]
  return -1;
 8004270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <_exit>:

void _exit (int status)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004284:	f04f 31ff 	mov.w	r1, #4294967295
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff ffe7 	bl	800425c <_kill>
  while (1) {}    /* Make sure we hang here */
 800428e:	e7fe      	b.n	800428e <_exit+0x12>

08004290 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	e00a      	b.n	80042b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80042a2:	f3af 8000 	nop.w
 80042a6:	4601      	mov	r1, r0
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	60ba      	str	r2, [r7, #8]
 80042ae:	b2ca      	uxtb	r2, r1
 80042b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	3301      	adds	r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	dbf0      	blt.n	80042a2 <_read+0x12>
  }

  return len;
 80042c0:	687b      	ldr	r3, [r7, #4]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b086      	sub	sp, #24
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	e009      	b.n	80042f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	60ba      	str	r2, [r7, #8]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	3301      	adds	r3, #1
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	dbf1      	blt.n	80042dc <_write+0x12>
  }
  return len;
 80042f8:	687b      	ldr	r3, [r7, #4]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <_close>:

int _close(int file)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800430a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800432a:	605a      	str	r2, [r3, #4]
  return 0;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <_isatty>:

int _isatty(int file)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004342:	2301      	movs	r3, #1
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004374:	4a14      	ldr	r2, [pc, #80]	; (80043c8 <_sbrk+0x5c>)
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <_sbrk+0x60>)
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004380:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <_sbrk+0x64>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004388:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <_sbrk+0x64>)
 800438a:	4a12      	ldr	r2, [pc, #72]	; (80043d4 <_sbrk+0x68>)
 800438c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <_sbrk+0x64>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4413      	add	r3, r2
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	429a      	cmp	r2, r3
 800439a:	d207      	bcs.n	80043ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800439c:	f00a fdd6 	bl	800ef4c <__errno>
 80043a0:	4603      	mov	r3, r0
 80043a2:	220c      	movs	r2, #12
 80043a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043a6:	f04f 33ff 	mov.w	r3, #4294967295
 80043aa:	e009      	b.n	80043c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043ac:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <_sbrk+0x64>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043b2:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <_sbrk+0x64>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4413      	add	r3, r2
 80043ba:	4a05      	ldr	r2, [pc, #20]	; (80043d0 <_sbrk+0x64>)
 80043bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043be:	68fb      	ldr	r3, [r7, #12]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20020000 	.word	0x20020000
 80043cc:	00000400 	.word	0x00000400
 80043d0:	20000bd4 	.word	0x20000bd4
 80043d4:	20004940 	.word	0x20004940

080043d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <SystemInit+0x20>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	4a05      	ldr	r2, [pc, #20]	; (80043f8 <SystemInit+0x20>)
 80043e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043ec:	bf00      	nop
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	e000ed00 	.word	0xe000ed00

080043fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80043fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004434 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004400:	480d      	ldr	r0, [pc, #52]	; (8004438 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004402:	490e      	ldr	r1, [pc, #56]	; (800443c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004404:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004408:	e002      	b.n	8004410 <LoopCopyDataInit>

0800440a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800440a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800440c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800440e:	3304      	adds	r3, #4

08004410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004414:	d3f9      	bcc.n	800440a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004416:	4a0b      	ldr	r2, [pc, #44]	; (8004444 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004418:	4c0b      	ldr	r4, [pc, #44]	; (8004448 <LoopFillZerobss+0x26>)
  movs r3, #0
 800441a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800441c:	e001      	b.n	8004422 <LoopFillZerobss>

0800441e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800441e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004420:	3204      	adds	r2, #4

08004422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004424:	d3fb      	bcc.n	800441e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004426:	f7ff ffd7 	bl	80043d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800442a:	f00a fd95 	bl	800ef58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800442e:	f7fd f885 	bl	800153c <main>
  bx  lr    
 8004432:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004434:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800443c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004440:	08014d60 	.word	0x08014d60
  ldr r2, =_sbss
 8004444:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004448:	20004940 	.word	0x20004940

0800444c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800444c:	e7fe      	b.n	800444c <ADC_IRQHandler>
	...

08004450 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	887a      	ldrh	r2, [r7, #2]
 800446e:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a3a      	ldr	r2, [r7, #32]
 8004474:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800447a:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	75fb      	strb	r3, [r7, #23]
	/*
	 *
	 * ACCELEROMETER
	 *
	 */
	uint8_t chipID=2;
 800448c:	2302      	movs	r3, #2
 800448e:	75bb      	strb	r3, [r7, #22]
		}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		HAL_Delay(200);
	}*/
	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6858      	ldr	r0, [r3, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	899b      	ldrh	r3, [r3, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	4619      	mov	r1, r3
 800449c:	f002 f984 	bl	80067a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80044a0:	2001      	movs	r0, #1
 80044a2:	f001 f84b 	bl	800553c <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6858      	ldr	r0, [r3, #4]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	899b      	ldrh	r3, [r3, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	4619      	mov	r1, r3
 80044b2:	f002 f979 	bl	80067a8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80044b6:	2032      	movs	r0, #50	; 0x32
 80044b8:	f001 f840 	bl	800553c <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 80044bc:	22b6      	movs	r2, #182	; 0xb6
 80044be:	217e      	movs	r1, #126	; 0x7e
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f95b 	bl	800477c <BMI088_WriteAccRegister>
 80044c6:	4603      	mov	r3, r0
 80044c8:	461a      	mov	r2, r3
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	4413      	add	r3, r2
 80044ce:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 80044d0:	2032      	movs	r0, #50	; 0x32
 80044d2:	f001 f833 	bl	800553c <HAL_Delay>

	/* Check chip ID */
	chipID=2;
 80044d6:	2302      	movs	r3, #2
 80044d8:	75bb      	strb	r3, [r7, #22]

	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 80044da:	f107 0316 	add.w	r3, r7, #22
 80044de:	461a      	mov	r2, r3
 80044e0:	2100      	movs	r1, #0
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 f8d0 	bl	8004688 <BMI088_ReadAccRegister>
 80044e8:	4603      	mov	r3, r0
 80044ea:	461a      	mov	r2, r3
 80044ec:	7dfb      	ldrb	r3, [r7, #23]
 80044ee:	4413      	add	r3, r2
 80044f0:	75fb      	strb	r3, [r7, #23]

	/*HAL_Delay(10);
	//status += BMI088_ReadAccRegister(imu, 0x02, &chipID); //0x02 ACC_ERR_REG return 0xFF ->fatal error
	status += BMI088_ReadAccRegister(imu, 0x02, &chipID);*/

	HAL_Delay(10);
 80044f2:	200a      	movs	r0, #10
 80044f4:	f001 f822 	bl	800553c <HAL_Delay>

	/* Configure accelerometer  */

	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA9); /* (0xA8 no oversampling, ODR = 100 Hz, BW = 40 Hz), 200 Hz no oversampling 0xA9, 0x99 200Hz OSR2  */
 80044f8:	22a9      	movs	r2, #169	; 0xa9
 80044fa:	2140      	movs	r1, #64	; 0x40
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f93d 	bl	800477c <BMI088_WriteAccRegister>
 8004502:	4603      	mov	r3, r0
 8004504:	461a      	mov	r2, r3
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	4413      	add	r3, r2
 800450a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800450c:	200a      	movs	r0, #10
 800450e:	f001 f815 	bl	800553c <HAL_Delay>


	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 8004512:	2200      	movs	r2, #0
 8004514:	2141      	movs	r1, #65	; 0x41
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f930 	bl	800477c <BMI088_WriteAccRegister>
 800451c:	4603      	mov	r3, r0
 800451e:	461a      	mov	r2, r3
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	4413      	add	r3, r2
 8004524:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004526:	200a      	movs	r0, #10
 8004528:	f001 f808 	bl	800553c <HAL_Delay>


	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 800452c:	220a      	movs	r2, #10
 800452e:	2153      	movs	r1, #83	; 0x53
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f923 	bl	800477c <BMI088_WriteAccRegister>
 8004536:	4603      	mov	r3, r0
 8004538:	461a      	mov	r2, r3
 800453a:	7dfb      	ldrb	r3, [r7, #23]
 800453c:	4413      	add	r3, r2
 800453e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004540:	200a      	movs	r0, #10
 8004542:	f000 fffb 	bl	800553c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);//ACC INT -> INT1
 8004546:	2204      	movs	r2, #4
 8004548:	2158      	movs	r1, #88	; 0x58
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f916 	bl	800477c <BMI088_WriteAccRegister>
 8004550:	4603      	mov	r3, r0
 8004552:	461a      	mov	r2, r3
 8004554:	7dfb      	ldrb	r3, [r7, #23]
 8004556:	4413      	add	r3, r2
 8004558:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(10);
 800455a:	200a      	movs	r0, #10
 800455c:	f000 ffee 	bl	800553c <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8004560:	2200      	movs	r2, #0
 8004562:	217c      	movs	r1, #124	; 0x7c
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f909 	bl	800477c <BMI088_WriteAccRegister>
 800456a:	4603      	mov	r3, r0
 800456c:	461a      	mov	r2, r3
 800456e:	7dfb      	ldrb	r3, [r7, #23]
 8004570:	4413      	add	r3, r2
 8004572:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004574:	200a      	movs	r0, #10
 8004576:	f000 ffe1 	bl	800553c <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 800457a:	2204      	movs	r2, #4
 800457c:	217d      	movs	r1, #125	; 0x7d
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f8fc 	bl	800477c <BMI088_WriteAccRegister>
 8004584:	4603      	mov	r3, r0
 8004586:	461a      	mov	r2, r3
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	4413      	add	r3, r2
 800458c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800458e:	200a      	movs	r0, #10
 8004590:	f000 ffd4 	bl	800553c <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2), 9.81 g-constant, 32768 normalize raw data, 2^(<0x41>+1)*1.5, <0x41> is the acc range register */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a3a      	ldr	r2, [pc, #232]	; (8004680 <BMI088_Init+0x230>)
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2292      	movs	r2, #146	; 0x92
 800459e:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6898      	ldr	r0, [r3, #8]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	89db      	ldrh	r3, [r3, #14]
 80045a8:	2201      	movs	r2, #1
 80045aa:	4619      	mov	r1, r3
 80045ac:	f002 f8fc 	bl	80067a8 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 80045b0:	22b6      	movs	r2, #182	; 0xb6
 80045b2:	2114      	movs	r1, #20
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f91b 	bl	80047f0 <BMI088_WriteGyrRegister>
 80045ba:	4603      	mov	r3, r0
 80045bc:	461a      	mov	r2, r3
 80045be:	7dfb      	ldrb	r3, [r7, #23]
 80045c0:	4413      	add	r3, r2
 80045c2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 80045c4:	20fa      	movs	r0, #250	; 0xfa
 80045c6:	f000 ffb9 	bl	800553c <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 80045ca:	f107 0316 	add.w	r3, r7, #22
 80045ce:	461a      	mov	r2, r3
 80045d0:	2100      	movs	r1, #0
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f896 	bl	8004704 <BMI088_ReadGyrRegister>
 80045d8:	4603      	mov	r3, r0
 80045da:	461a      	mov	r2, r3
 80045dc:	7dfb      	ldrb	r3, [r7, #23]
 80045de:	4413      	add	r3, r2
 80045e0:	75fb      	strb	r3, [r7, #23]

		//return 0;

	}

	HAL_Delay(10);
 80045e2:	200a      	movs	r0, #10
 80045e4:	f000 ffaa 	bl	800553c <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 80045e8:	2201      	movs	r2, #1
 80045ea:	210f      	movs	r1, #15
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f8ff 	bl	80047f0 <BMI088_WriteGyrRegister>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
 80045f8:	4413      	add	r3, r2
 80045fa:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80045fc:	200a      	movs	r0, #10
 80045fe:	f000 ff9d 	bl	800553c <HAL_Delay>


	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* 0x07 ODR = 100 Hz, Filter bandwidth = 32 Hz, 0x06 BW = 64Hz ODR = 200 Hz, 0x04 ODR = 200Hz BW = 23Hz */
 8004602:	2206      	movs	r2, #6
 8004604:	2110      	movs	r1, #16
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f8f2 	bl	80047f0 <BMI088_WriteGyrRegister>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	7dfb      	ldrb	r3, [r7, #23]
 8004612:	4413      	add	r3, r2
 8004614:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004616:	200a      	movs	r0, #10
 8004618:	f000 ff90 	bl	800553c <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 800461c:	2280      	movs	r2, #128	; 0x80
 800461e:	2115      	movs	r1, #21
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f8e5 	bl	80047f0 <BMI088_WriteGyrRegister>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	7dfb      	ldrb	r3, [r7, #23]
 800462c:	4413      	add	r3, r2
 800462e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004630:	200a      	movs	r0, #10
 8004632:	f000 ff83 	bl	800553c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 8004636:	2201      	movs	r2, #1
 8004638:	2116      	movs	r1, #22
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f8d8 	bl	80047f0 <BMI088_WriteGyrRegister>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	7dfb      	ldrb	r3, [r7, #23]
 8004646:	4413      	add	r3, r2
 8004648:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800464a:	200a      	movs	r0, #10
 800464c:	f000 ff76 	bl	800553c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8004650:	2201      	movs	r2, #1
 8004652:	2118      	movs	r1, #24
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f8cb 	bl	80047f0 <BMI088_WriteGyrRegister>
 800465a:	4603      	mov	r3, r0
 800465c:	461a      	mov	r2, r3
 800465e:	7dfb      	ldrb	r3, [r7, #23]
 8004660:	4413      	add	r3, r2
 8004662:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004664:	200a      	movs	r0, #10
 8004666:	f000 ff69 	bl	800553c <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) 0.017 °/s -> rad/s, 1000 the range, 32768 normalize the raw data*/
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4a05      	ldr	r2, [pc, #20]	; (8004684 <BMI088_Init+0x234>)
 800466e:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2282      	movs	r2, #130	; 0x82
 8004674:	769a      	strb	r2, [r3, #26]

	return status;
 8004676:	7dfb      	ldrb	r3, [r7, #23]

}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	3a6b70a4 	.word	0x3a6b70a4
 8004684:	3a0ba058 	.word	0x3a0ba058

08004688 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	460b      	mov	r3, r1
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 8004696:	7afb      	ldrb	r3, [r7, #11]
 8004698:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800469c:	b2db      	uxtb	r3, r3
 800469e:	753b      	strb	r3, [r7, #20]
 80046a0:	2300      	movs	r3, #0
 80046a2:	757b      	strb	r3, [r7, #21]
 80046a4:	2300      	movs	r3, #0
 80046a6:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6858      	ldr	r0, [r3, #4]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	899b      	ldrh	r3, [r3, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	4619      	mov	r1, r3
 80046b4:	f002 f878 	bl	80067a8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	f107 0210 	add.w	r2, r7, #16
 80046c0:	f107 0114 	add.w	r1, r7, #20
 80046c4:	f04f 33ff 	mov.w	r3, #4294967295
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	2303      	movs	r3, #3
 80046cc:	f003 fed5 	bl	800847a <HAL_SPI_TransmitReceive>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf0c      	ite	eq
 80046d6:	2301      	moveq	r3, #1
 80046d8:	2300      	movne	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6858      	ldr	r0, [r3, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	899b      	ldrh	r3, [r3, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	4619      	mov	r1, r3
 80046ea:	f002 f85d 	bl	80067a8 <HAL_GPIO_WritePin>

	if (status == 1) {
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d102      	bne.n	80046fa <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 80046f4:	7cba      	ldrb	r2, [r7, #18]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80046fa:	7dfb      	ldrb	r3, [r7, #23]

}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	460b      	mov	r3, r1
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00}; //0x80
 8004712:	7afb      	ldrb	r3, [r7, #11]
 8004714:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004718:	b2db      	uxtb	r3, r3
 800471a:	753b      	strb	r3, [r7, #20]
 800471c:	2300      	movs	r3, #0
 800471e:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6898      	ldr	r0, [r3, #8]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	89db      	ldrh	r3, [r3, #14]
 8004728:	2200      	movs	r2, #0
 800472a:	4619      	mov	r1, r3
 800472c:	f002 f83c 	bl	80067a8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	f107 0210 	add.w	r2, r7, #16
 8004738:	f107 0114 	add.w	r1, r7, #20
 800473c:	f04f 33ff 	mov.w	r3, #4294967295
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	2302      	movs	r3, #2
 8004744:	f003 fe99 	bl	800847a <HAL_SPI_TransmitReceive>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	bf0c      	ite	eq
 800474e:	2301      	moveq	r3, #1
 8004750:	2300      	movne	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6898      	ldr	r0, [r3, #8]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	89db      	ldrh	r3, [r3, #14]
 800475e:	2201      	movs	r2, #1
 8004760:	4619      	mov	r1, r3
 8004762:	f002 f821 	bl	80067a8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);*/

	if (status == 1) {
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d102      	bne.n	8004772 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 800476c:	7c7a      	ldrb	r2, [r7, #17]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8004772:	7dfb      	ldrb	r3, [r7, #23]

}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	70fb      	strb	r3, [r7, #3]
 8004788:	4613      	mov	r3, r2
 800478a:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	733b      	strb	r3, [r7, #12]
 8004790:	78bb      	ldrb	r3, [r7, #2]
 8004792:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6858      	ldr	r0, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	899b      	ldrh	r3, [r3, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	4619      	mov	r1, r3
 80047a0:	f002 f802 	bl	80067a8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	f107 010c 	add.w	r1, r7, #12
 80047ac:	f04f 33ff 	mov.w	r3, #4294967295
 80047b0:	2202      	movs	r2, #2
 80047b2:	f003 fd26 	bl	8008202 <HAL_SPI_Transmit>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80047c4:	bf00      	nop
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f003 fff7 	bl	80087be <HAL_SPI_GetState>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d1f7      	bne.n	80047c6 <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6858      	ldr	r0, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	899b      	ldrh	r3, [r3, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	4619      	mov	r1, r3
 80047e2:	f001 ffe1 	bl	80067a8 <HAL_GPIO_WritePin>

	return status;
 80047e6:	7bfb      	ldrb	r3, [r7, #15]

}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	70fb      	strb	r3, [r7, #3]
 80047fc:	4613      	mov	r3, r2
 80047fe:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8004800:	78fb      	ldrb	r3, [r7, #3]
 8004802:	733b      	strb	r3, [r7, #12]
 8004804:	78bb      	ldrb	r3, [r7, #2]
 8004806:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6898      	ldr	r0, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	89db      	ldrh	r3, [r3, #14]
 8004810:	2200      	movs	r2, #0
 8004812:	4619      	mov	r1, r3
 8004814:	f001 ffc8 	bl	80067a8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	f107 010c 	add.w	r1, r7, #12
 8004820:	f04f 33ff 	mov.w	r3, #4294967295
 8004824:	2202      	movs	r2, #2
 8004826:	f003 fcec 	bl	8008202 <HAL_SPI_Transmit>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	bf0c      	ite	eq
 8004830:	2301      	moveq	r3, #1
 8004832:	2300      	movne	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8004838:	bf00      	nop
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f003 ffbd 	bl	80087be <HAL_SPI_GetState>
 8004844:	4603      	mov	r3, r0
 8004846:	2b01      	cmp	r3, #1
 8004848:	d1f7      	bne.n	800483a <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6898      	ldr	r0, [r3, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	89db      	ldrh	r3, [r3, #14]
 8004852:	2201      	movs	r2, #1
 8004854:	4619      	mov	r1, r3
 8004856:	f001 ffa7 	bl	80067a8 <HAL_GPIO_WritePin>

	return status;
 800485a:	7bfb      	ldrb	r3, [r7, #15]

}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	; 0x28
 8004868:	af02      	add	r7, sp, #8
 800486a:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 800486c:	4a36      	ldr	r2, [pc, #216]	; (8004948 <BMI088_ReadAccelerometer+0xe4>)
 800486e:	f107 0310 	add.w	r3, r7, #16
 8004872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004876:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6858      	ldr	r0, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	899b      	ldrh	r3, [r3, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	4619      	mov	r1, r3
 8004886:	f001 ff8f 	bl	80067a8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	f107 0208 	add.w	r2, r7, #8
 8004892:	f107 0110 	add.w	r1, r7, #16
 8004896:	f04f 33ff 	mov.w	r3, #4294967295
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	2308      	movs	r3, #8
 800489e:	f003 fdec 	bl	800847a <HAL_SPI_TransmitReceive>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf0c      	ite	eq
 80048a8:	2301      	moveq	r3, #1
 80048aa:	2300      	movne	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6858      	ldr	r0, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	899b      	ldrh	r3, [r3, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	4619      	mov	r1, r3
 80048bc:	f001 ff74 	bl	80067a8 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 80048c0:	7afb      	ldrb	r3, [r7, #11]
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	b21a      	sxth	r2, r3
 80048c6:	7abb      	ldrb	r3, [r7, #10]
 80048c8:	b21b      	sxth	r3, r3
 80048ca:	4313      	orrs	r3, r2
 80048cc:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 80048ce:	7b7b      	ldrb	r3, [r7, #13]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	b21a      	sxth	r2, r3
 80048d4:	7b3b      	ldrb	r3, [r7, #12]
 80048d6:	b21b      	sxth	r3, r3
 80048d8:	4313      	orrs	r3, r2
 80048da:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	b21a      	sxth	r2, r3
 80048e2:	7bbb      	ldrb	r3, [r7, #14]
 80048e4:	b21b      	sxth	r3, r3
 80048e6:	4313      	orrs	r3, r2
 80048e8:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80048f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80048f4:	ee07 3a90 	vmov	s15, r3
 80048f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800490c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004910:	ee07 3a90 	vmov	s15, r3
 8004914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004928:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	return status;
 800493e:	7ffb      	ldrb	r3, [r7, #31]

}
 8004940:	4618      	mov	r0, r3
 8004942:	3720      	adds	r7, #32
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	080144d0 	.word	0x080144d0

0800494c <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	; 0x28
 8004950:	af02      	add	r7, sp, #8
 8004952:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 8004954:	4a38      	ldr	r2, [pc, #224]	; (8004a38 <BMI088_ReadGyroscope+0xec>)
 8004956:	f107 0310 	add.w	r3, r7, #16
 800495a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800495e:	6018      	str	r0, [r3, #0]
 8004960:	3304      	adds	r3, #4
 8004962:	8019      	strh	r1, [r3, #0]
 8004964:	3302      	adds	r3, #2
 8004966:	0c0a      	lsrs	r2, r1, #16
 8004968:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6898      	ldr	r0, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	89db      	ldrh	r3, [r3, #14]
 8004972:	2200      	movs	r2, #0
 8004974:	4619      	mov	r1, r3
 8004976:	f001 ff17 	bl	80067a8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	f107 0208 	add.w	r2, r7, #8
 8004982:	f107 0110 	add.w	r1, r7, #16
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	2307      	movs	r3, #7
 800498e:	f003 fd74 	bl	800847a <HAL_SPI_TransmitReceive>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	bf0c      	ite	eq
 8004998:	2301      	moveq	r3, #1
 800499a:	2300      	movne	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6898      	ldr	r0, [r3, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	89db      	ldrh	r3, [r3, #14]
 80049a8:	2201      	movs	r2, #1
 80049aa:	4619      	mov	r1, r3
 80049ac:	f001 fefc 	bl	80067a8 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 80049b0:	7abb      	ldrb	r3, [r7, #10]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	b21a      	sxth	r2, r3
 80049b6:	7a7b      	ldrb	r3, [r7, #9]
 80049b8:	b21b      	sxth	r3, r3
 80049ba:	4313      	orrs	r3, r2
 80049bc:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 80049be:	7b3b      	ldrb	r3, [r7, #12]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	b21a      	sxth	r2, r3
 80049c4:	7afb      	ldrb	r3, [r7, #11]
 80049c6:	b21b      	sxth	r3, r3
 80049c8:	4313      	orrs	r3, r2
 80049ca:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 80049cc:	7bbb      	ldrb	r3, [r7, #14]
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	b21a      	sxth	r2, r3
 80049d2:	7b7b      	ldrb	r3, [r7, #13]
 80049d4:	b21b      	sxth	r3, r3
 80049d6:	4313      	orrs	r3, r2
 80049d8:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;//-0.0000661263;//-0.000220318;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80049e0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80049e4:	ee07 3a90 	vmov	s15, r3
 80049e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;//-0.000491353;//-0.001161367;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80049fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004a00:	ee07 3a90 	vmov	s15, r3
 8004a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;//-0.002349043;//-0.002582031;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004a18:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004a1c:	ee07 3a90 	vmov	s15, r3
 8004a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	//own code line
	//if(status == 1) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	return status;
 8004a2e:	7ffb      	ldrb	r3, [r7, #31]

}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	080144d8 	.word	0x080144d8

08004a3c <BMP388_Init>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_Init(BMP388_HandleTypeDef *bmp){
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t chip_id;

	// Read CHIP_ID byte
	rslt = BMP388_ReadBytes(bmp, CHIP_ID, &chip_id, 1);
 8004a44:	f107 020e 	add.w	r2, r7, #14
 8004a48:	2301      	movs	r3, #1
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fc08 	bl	8005262 <BMP388_ReadBytes>
 8004a52:	4603      	mov	r3, r0
 8004a54:	73fb      	strb	r3, [r7, #15]
	if(rslt == HAL_OK && chip_id == BMP388_CHIP_ID){
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d12a      	bne.n	8004ab2 <BMP388_Init+0x76>
 8004a5c:	7bbb      	ldrb	r3, [r7, #14]
 8004a5e:	2b50      	cmp	r3, #80	; 0x50
 8004a60:	d127      	bne.n	8004ab2 <BMP388_Init+0x76>
		// using softreset command
		rslt = BMP388_SoftReset(bmp);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f962 	bl	8004d2c <BMP388_SoftReset>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d11d      	bne.n	8004aae <BMP388_Init+0x72>
			// get calibration data
			rslt = BMP388_GetCalibData(bmp);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f99a 	bl	8004dac <BMP388_GetCalibData>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004a7c:	bf00      	nop
		}
	}
	else{
		return rslt;
	}
	uint8_t pwr_ctrl = BMP388_PWR_CTRL_PRESS_ON | BMP388_PWR_CTRL_TEMP_ON | BMP388_PWR_CTRL_MODE_NORMAL;
 8004a7e:	2333      	movs	r3, #51	; 0x33
 8004a80:	737b      	strb	r3, [r7, #13]

	uint8_t oversampling = bmp->_oversampling;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	791b      	ldrb	r3, [r3, #4]
 8004a86:	733b      	strb	r3, [r7, #12]
	uint8_t odr = bmp->_odr;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	799b      	ldrb	r3, [r3, #6]
 8004a8c:	72fb      	strb	r3, [r7, #11]
	uint8_t filtercoeff = bmp->_filtercoeff;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	795b      	ldrb	r3, [r3, #5]
 8004a92:	72bb      	strb	r3, [r7, #10]



	// Set OSR register
	rslt = BMP388_WriteBytes(bmp, OSR, &oversampling, 1);
 8004a94:	f107 020c 	add.w	r2, r7, #12
 8004a98:	2301      	movs	r3, #1
 8004a9a:	211c      	movs	r1, #28
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fbfe 	bl	800529e <BMP388_WriteBytes>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d006      	beq.n	8004aba <BMP388_Init+0x7e>
 8004aac:	e003      	b.n	8004ab6 <BMP388_Init+0x7a>
			return rslt;
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	e03b      	b.n	8004b2a <BMP388_Init+0xee>
		return rslt;
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	e039      	b.n	8004b2a <BMP388_Init+0xee>
		return rslt;
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	e037      	b.n	8004b2a <BMP388_Init+0xee>
	}
	// Set ODR register
	rslt = BMP388_WriteBytes(bmp, ODR, &odr, 1);
 8004aba:	f107 020b 	add.w	r2, r7, #11
 8004abe:	2301      	movs	r3, #1
 8004ac0:	211d      	movs	r1, #29
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fbeb 	bl	800529e <BMP388_WriteBytes>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <BMP388_Init+0x9a>
		return rslt;
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	e029      	b.n	8004b2a <BMP388_Init+0xee>
	}
	// Set CONFIG register
	rslt = BMP388_WriteBytes(bmp, CONFIG, &filtercoeff, 1);
 8004ad6:	f107 020a 	add.w	r2, r7, #10
 8004ada:	2301      	movs	r3, #1
 8004adc:	211f      	movs	r1, #31
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fbdd 	bl	800529e <BMP388_WriteBytes>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <BMP388_Init+0xb6>
		return rslt;
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	e01b      	b.n	8004b2a <BMP388_Init+0xee>
	}
	// Set PWR_CTRL register
	rslt = BMP388_WriteBytes(bmp, PWR_CTRL, &pwr_ctrl, 1);
 8004af2:	f107 020d 	add.w	r2, r7, #13
 8004af6:	2301      	movs	r3, #1
 8004af8:	211b      	movs	r1, #27
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fbcf 	bl	800529e <BMP388_WriteBytes>
 8004b00:	4603      	mov	r3, r0
 8004b02:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <BMP388_Init+0xd2>
		return rslt;
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	e00d      	b.n	8004b2a <BMP388_Init+0xee>
	}

	rslt = BMP388_WriteBytes(bmp, INT_CTRL, 0x40, 1);
 8004b0e:	2301      	movs	r3, #1
 8004b10:	2240      	movs	r2, #64	; 0x40
 8004b12:	2119      	movs	r1, #25
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fbc2 	bl	800529e <BMP388_WriteBytes>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <BMP388_Init+0xec>
		return rslt;
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	e000      	b.n	8004b2a <BMP388_Init+0xee>
	}

	return rslt;
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <BMP388_SetTempOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetTempOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	2b05      	cmp	r3, #5
 8004b42:	d901      	bls.n	8004b48 <BMP388_SetTempOS+0x16>
		return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e00e      	b.n	8004b66 <BMP388_SetTempOS+0x34>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11000111) | (oversample << 3); //& clear the temp OS bits and the | set the temp OS reg
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	791b      	ldrb	r3, [r3, #4]
 8004b4c:	b25b      	sxtb	r3, r3
 8004b4e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004b52:	b25a      	sxtb	r2, r3
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	b25b      	sxtb	r3, r3
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	b25b      	sxtb	r3, r3
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <BMP388_SetPressOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetPressOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	2b05      	cmp	r3, #5
 8004b82:	d901      	bls.n	8004b88 <BMP388_SetPressOS+0x16>
		return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e00d      	b.n	8004ba4 <BMP388_SetPressOS+0x32>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11111000) | oversample; //& clear the press OS bits and the | set the press OS reg
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	791b      	ldrb	r3, [r3, #4]
 8004b8c:	b25b      	sxtb	r3, r3
 8004b8e:	f023 0307 	bic.w	r3, r3, #7
 8004b92:	b25a      	sxtb	r2, r3
 8004b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	b25b      	sxtb	r3, r3
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <BMP388_SetIIRFilterCoeff>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong filter coefficient
 */
HAL_StatusTypeDef BMP388_SetIIRFilterCoeff(BMP388_HandleTypeDef *bmp, uint8_t filtercoeff){
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	70fb      	strb	r3, [r7, #3]
	if(filtercoeff > BMP3_IIR_FILTER_COEFF_127){
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	2b07      	cmp	r3, #7
 8004bc0:	d901      	bls.n	8004bc6 <BMP388_SetIIRFilterCoeff+0x16>
		return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e005      	b.n	8004bd2 <BMP388_SetIIRFilterCoeff+0x22>
	}
	bmp->_filtercoeff = filtercoeff << 1;
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <BMP388_SetOutputDataRate>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetOutputDataRate(BMP388_HandleTypeDef *bmp, uint8_t odr){
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	460b      	mov	r3, r1
 8004be8:	70fb      	strb	r3, [r7, #3]
	if(odr > BMP3_ODR_0_001_HZ){
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	2b11      	cmp	r3, #17
 8004bee:	d901      	bls.n	8004bf4 <BMP388_SetOutputDataRate+0x16>
		return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e003      	b.n	8004bfc <BMP388_SetOutputDataRate+0x1e>
	}
	bmp->_odr = odr;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	78fa      	ldrb	r2, [r7, #3]
 8004bf8:	719a      	strb	r2, [r3, #6]
	return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <BMP388_ReadRawPressTempTime>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadRawPressTempTime(BMP388_HandleTypeDef *bmp, uint32_t *raw_pressure, uint32_t *raw_temperature, uint32_t *time){
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
	}*/

	uint8_t raw_data[11]; //registers in order 0x04 - 0x06 press data, 0x07 - 0x09 temp data, 0x0A and 0x0B reserved, 0x0C - 0x0E time data -> 11 byte
	// Get raw data for pressure and temperature
	//rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 11);
	rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 6);
 8004c16:	f107 0214 	add.w	r2, r7, #20
 8004c1a:	2306      	movs	r3, #6
 8004c1c:	2104      	movs	r1, #4
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fb1f 	bl	8005262 <BMP388_ReadBytes>
 8004c24:	4603      	mov	r3, r0
 8004c26:	77fb      	strb	r3, [r7, #31]
	if(rslt != HAL_OK){
 8004c28:	7ffb      	ldrb	r3, [r7, #31]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <BMP388_ReadRawPressTempTime+0x2a>
		return rslt;
 8004c2e:	7ffb      	ldrb	r3, [r7, #31]
 8004c30:	e012      	b.n	8004c58 <BMP388_ReadRawPressTempTime+0x50>
//	uint32_t data_xlsb;
//	uint32_t data_lsb;
//	uint32_t data_msb;

	// Parsing pressure data
	*raw_pressure = (uint32_t)raw_data[2] << 16 | (uint32_t)raw_data[1] << 8 | (uint32_t)raw_data[0];
 8004c32:	7dbb      	ldrb	r3, [r7, #22]
 8004c34:	041a      	lsls	r2, r3, #16
 8004c36:	7d7b      	ldrb	r3, [r7, #21]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	7d3a      	ldrb	r2, [r7, #20]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	601a      	str	r2, [r3, #0]

	// Parsing temperature data
	*raw_temperature = (uint32_t)raw_data[5] << 16 | (uint32_t)raw_data[4] << 8 | (uint32_t)raw_data[3];
 8004c44:	7e7b      	ldrb	r3, [r7, #25]
 8004c46:	041a      	lsls	r2, r3, #16
 8004c48:	7e3b      	ldrb	r3, [r7, #24]
 8004c4a:	021b      	lsls	r3, r3, #8
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	7dfa      	ldrb	r2, [r7, #23]
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	601a      	str	r2, [r3, #0]

	// Parsing time bytes
	//*time = (uint32_t)raw_data[10] << 16 | (uint32_t)raw_data[9] << 8 | (uint32_t)raw_data[8];


	return rslt;
 8004c56:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3720      	adds	r7, #32
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <BMP388_CompensateRawPressTemp>:
 *	@param[out]	temperature		: Pointer to the variable that contain temperature.
 *
 *  @return none
 */
void BMP388_CompensateRawPressTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_pressure, uint32_t raw_temperature,
									  	  	  	  	  	  	  float *pressure, float *temperature){
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
	float temp;
	float press;

	BMP388_CompensateTemp(bmp, raw_temperature, &temp);
 8004c6e:	f107 0314 	add.w	r3, r7, #20
 8004c72:	461a      	mov	r2, r3
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f9ec 	bl	8005054 <BMP388_CompensateTemp>
	BMP388_CompensatePress(bmp, temp, raw_pressure, &press);
 8004c7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c80:	f107 0310 	add.w	r3, r7, #16
 8004c84:	461a      	mov	r2, r3
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	eeb0 0a67 	vmov.f32	s0, s15
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fa17 	bl	80050c0 <BMP388_CompensatePress>

	*pressure = press;
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	601a      	str	r2, [r3, #0]
	*temperature = temp;
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	601a      	str	r2, [r3, #0]
}
 8004c9e:	bf00      	nop
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <BMP388_FindAltitude>:
 *	@param[in] ground_pressure	: Pressure at ground
 *  @param[in] pressure			: Pressure that measured at flight.
 *
 *  @return Altitude
 */
float BMP388_FindAltitude(float ground_pressure, float pressure){
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	ed87 0a01 	vstr	s0, [r7, #4]
 8004cb2:	edc7 0a00 	vstr	s1, [r7]

	// Note that using the equation from wikipedia can give bad results
	// at high altitude. See this thread for more information:
	//  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

	return 44330.0 * (1.0 - pow(pressure / ground_pressure, 0.1903));
 8004cb6:	ed97 7a00 	vldr	s14, [r7]
 8004cba:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cbe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004cc2:	ee16 0a90 	vmov	r0, s13
 8004cc6:	f7fb fc3f 	bl	8000548 <__aeabi_f2d>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8004d18 <BMP388_FindAltitude+0x70>
 8004cd2:	ec43 2b10 	vmov	d0, r2, r3
 8004cd6:	f00d f8d7 	bl	8011e88 <pow>
 8004cda:	ec53 2b10 	vmov	r2, r3, d0
 8004cde:	f04f 0000 	mov.w	r0, #0
 8004ce2:	4911      	ldr	r1, [pc, #68]	; (8004d28 <BMP388_FindAltitude+0x80>)
 8004ce4:	f7fb fad0 	bl	8000288 <__aeabi_dsub>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4610      	mov	r0, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	a30b      	add	r3, pc, #44	; (adr r3, 8004d20 <BMP388_FindAltitude+0x78>)
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	f7fb fc7f 	bl	80005f8 <__aeabi_dmul>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4610      	mov	r0, r2
 8004d00:	4619      	mov	r1, r3
 8004d02:	f7fb ff71 	bl	8000be8 <__aeabi_d2f>
 8004d06:	4603      	mov	r3, r0
 8004d08:	ee07 3a90 	vmov	s15, r3
}
 8004d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	1a36e2eb 	.word	0x1a36e2eb
 8004d1c:	3fc85bc0 	.word	0x3fc85bc0
 8004d20:	00000000 	.word	0x00000000
 8004d24:	40e5a540 	.word	0x40e5a540
 8004d28:	3ff00000 	.word	0x3ff00000

08004d2c <BMP388_SoftReset>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_SoftReset(BMP388_HandleTypeDef *bmp){
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
	uint8_t rst_cmnd = BMP388_SOFTRESET;
 8004d34:	23b6      	movs	r3, #182	; 0xb6
 8004d36:	73bb      	strb	r3, [r7, #14]
    uint8_t cmd_err_status;

	HAL_StatusTypeDef rslt;

	// Reading STATUS reg to understand that the BMP388 is ready to receive command
	rslt = BMP388_ReadBytes(bmp, STATUS, &cmd_rdy_status, 1);
 8004d38:	f107 020d 	add.w	r2, r7, #13
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	2103      	movs	r1, #3
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fa8e 	bl	8005262 <BMP388_ReadBytes>
 8004d46:	4603      	mov	r3, r0
 8004d48:	73fb      	strb	r3, [r7, #15]
	if((rslt == HAL_OK) && (cmd_rdy_status & BMP388_CMD_RDY)){
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d128      	bne.n	8004da2 <BMP388_SoftReset+0x76>
 8004d50:	7b7b      	ldrb	r3, [r7, #13]
 8004d52:	f003 0310 	and.w	r3, r3, #16
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d023      	beq.n	8004da2 <BMP388_SoftReset+0x76>
		// Writing SOFTRESET command to CMD reg
		rslt = BMP388_WriteBytes(bmp, CMD, &rst_cmnd, 1);
 8004d5a:	f107 020e 	add.w	r2, r7, #14
 8004d5e:	2301      	movs	r3, #1
 8004d60:	217e      	movs	r1, #126	; 0x7e
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fa9b 	bl	800529e <BMP388_WriteBytes>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d115      	bne.n	8004d9e <BMP388_SoftReset+0x72>
			// 2 ms pause then check ERR reg
			HAL_Delay(2);
 8004d72:	2002      	movs	r0, #2
 8004d74:	f000 fbe2 	bl	800553c <HAL_Delay>
			rslt = BMP388_ReadBytes(bmp, ERR_REG, &cmd_err_status, 1);
 8004d78:	f107 020c 	add.w	r2, r7, #12
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	2102      	movs	r1, #2
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fa6e 	bl	8005262 <BMP388_ReadBytes>
 8004d86:	4603      	mov	r3, r0
 8004d88:	73fb      	strb	r3, [r7, #15]
			if((cmd_err_status & CMD) || (rslt != HAL_OK)){
 8004d8a:	7b3b      	ldrb	r3, [r7, #12]
 8004d8c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <BMP388_SoftReset+0x6e>
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <BMP388_SoftReset+0x76>
				return rslt;
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	e002      	b.n	8004da4 <BMP388_SoftReset+0x78>
			}
		}
		else{
			return rslt;
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	e000      	b.n	8004da4 <BMP388_SoftReset+0x78>
		}
	}

	return rslt;
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <BMP388_GetCalibData>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_GetCalibData(BMP388_HandleTypeDef *bmp){
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b090      	sub	sp, #64	; 0x40
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t calib_buff[BMP388_CALIBDATA_LEN] = {0};
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	f107 0310 	add.w	r3, r7, #16
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	605a      	str	r2, [r3, #4]
 8004dc2:	609a      	str	r2, [r3, #8]
 8004dc4:	60da      	str	r2, [r3, #12]
 8004dc6:	741a      	strb	r2, [r3, #16]
	int8_t		raw_par_p8;
	int16_t		raw_par_p9;
	int8_t		raw_par_p10;
	int8_t		raw_par_p11;

	rslt = BMP388_ReadBytes(bmp, CALIB_DATA, calib_buff, BMP388_CALIBDATA_LEN);
 8004dc8:	f107 020c 	add.w	r2, r7, #12
 8004dcc:	2315      	movs	r3, #21
 8004dce:	2131      	movs	r1, #49	; 0x31
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fa46 	bl	8005262 <BMP388_ReadBytes>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	float temp_var;
	if(rslt == HAL_OK){
 8004ddc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f040 812f 	bne.w	8005044 <BMP388_GetCalibData+0x298>
		// PAR_T1
		temp_var = 0.00390625f;
 8004de6:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 8004dea:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t1 = ((uint16_t)calib_buff[1] << 8) | (uint16_t)calib_buff[0];
 8004dec:	7b7b      	ldrb	r3, [r7, #13]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	b21a      	sxth	r2, r3
 8004df2:	7b3b      	ldrb	r3, [r7, #12]
 8004df4:	b21b      	sxth	r3, r3
 8004df6:	4313      	orrs	r3, r2
 8004df8:	b21b      	sxth	r3, r3
 8004dfa:	86fb      	strh	r3, [r7, #54]	; 0x36
		bmp->_calib_data.par_t1 = (float)raw_par_t1 / temp_var;
 8004dfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e06:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	edc3 7a02 	vstr	s15, [r3, #8]
		// PAR_T2
		temp_var = 1073741824.f;
 8004e14:	f04f 439d 	mov.w	r3, #1317011456	; 0x4e800000
 8004e18:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t2 = ((uint16_t)calib_buff[3] << 8) | (uint16_t)calib_buff[2];
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	b21a      	sxth	r2, r3
 8004e20:	7bbb      	ldrb	r3, [r7, #14]
 8004e22:	b21b      	sxth	r3, r3
 8004e24:	4313      	orrs	r3, r2
 8004e26:	b21b      	sxth	r3, r3
 8004e28:	86bb      	strh	r3, [r7, #52]	; 0x34
		bmp->_calib_data.par_t2 = (float)raw_par_t2 / temp_var;
 8004e2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e34:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	edc3 7a03 	vstr	s15, [r3, #12]
		// PAR_T3
		temp_var = 281474976710656.f;
 8004e42:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004e46:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t3 = calib_buff[4];
 8004e48:	7c3b      	ldrb	r3, [r7, #16]
 8004e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		bmp->_calib_data.par_t3 = (float)raw_par_t3 / temp_var;
 8004e4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e5a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	edc3 7a04 	vstr	s15, [r3, #16]
		// PAR_P1
		temp_var = 1048576.f;
 8004e68:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 8004e6c:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p1 = ((int16_t)calib_buff[6] << 8) | (int16_t)calib_buff[5];
 8004e6e:	7cbb      	ldrb	r3, [r7, #18]
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	b21a      	sxth	r2, r3
 8004e74:	7c7b      	ldrb	r3, [r7, #17]
 8004e76:	b21b      	sxth	r3, r3
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	863b      	strh	r3, [r7, #48]	; 0x30
		bmp->_calib_data.par_p1 = ((float)raw_par_p1 - 16384) / temp_var;
 8004e7c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8004e80:	ee07 3a90 	vmov	s15, r3
 8004e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e88:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8005050 <BMP388_GetCalibData+0x2a4>
 8004e8c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004e90:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	edc3 7a05 	vstr	s15, [r3, #20]
		// PAR_P2
		temp_var = 536870912.f;
 8004e9e:	f04f 439c 	mov.w	r3, #1308622848	; 0x4e000000
 8004ea2:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p2 = ((int16_t)calib_buff[8] << 8) | (int16_t)calib_buff[7];
 8004ea4:	7d3b      	ldrb	r3, [r7, #20]
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	b21a      	sxth	r2, r3
 8004eaa:	7cfb      	ldrb	r3, [r7, #19]
 8004eac:	b21b      	sxth	r3, r3
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		bmp->_calib_data.par_p2 = ((float)raw_par_p2 - 16384) / temp_var;
 8004eb2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ebe:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005050 <BMP388_GetCalibData+0x2a4>
 8004ec2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004ec6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	edc3 7a06 	vstr	s15, [r3, #24]
		// PAR_P3
		temp_var = 4294967296.f;
 8004ed4:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
 8004ed8:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p3 = (int8_t)calib_buff[9];
 8004eda:	7d7b      	ldrb	r3, [r7, #21]
 8004edc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		bmp->_calib_data.par_p3 = (float)raw_par_p3 / temp_var;
 8004ee0:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004eec:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	edc3 7a07 	vstr	s15, [r3, #28]
		// PAR_P4
		temp_var = 137438953472.f;
 8004efa:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8004efe:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p4 = (int8_t)calib_buff[10];
 8004f00:	7dbb      	ldrb	r3, [r7, #22]
 8004f02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		bmp->_calib_data.par_p4 = (float)raw_par_p4 / temp_var;
 8004f06:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f12:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	edc3 7a08 	vstr	s15, [r3, #32]
		// PAR_P5
		temp_var = 0.125f;
 8004f20:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8004f24:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p5 = ((uint16_t)calib_buff[12] << 8) | (uint16_t)calib_buff[11];
 8004f26:	7e3b      	ldrb	r3, [r7, #24]
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	b21a      	sxth	r2, r3
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
 8004f2e:	b21b      	sxth	r3, r3
 8004f30:	4313      	orrs	r3, r2
 8004f32:	b21b      	sxth	r3, r3
 8004f34:	857b      	strh	r3, [r7, #42]	; 0x2a
		bmp->_calib_data.par_p5 = (float)raw_par_p5 / temp_var;
 8004f36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f38:	ee07 3a90 	vmov	s15, r3
 8004f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f40:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		// PAR_P6
		temp_var = 64.f;
 8004f4e:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8004f52:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p6 = ((uint16_t)calib_buff[14] << 8) | (uint16_t)calib_buff[13];
 8004f54:	7ebb      	ldrb	r3, [r7, #26]
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	b21a      	sxth	r2, r3
 8004f5a:	7e7b      	ldrb	r3, [r7, #25]
 8004f5c:	b21b      	sxth	r3, r3
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	b21b      	sxth	r3, r3
 8004f62:	853b      	strh	r3, [r7, #40]	; 0x28
		bmp->_calib_data.par_p6 = (float)raw_par_p6 / temp_var;
 8004f64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		// PAR_P7
		temp_var = 256.f;
 8004f7c:	f04f 4387 	mov.w	r3, #1132462080	; 0x43800000
 8004f80:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p7 = (int8_t)calib_buff[15];
 8004f82:	7efb      	ldrb	r3, [r7, #27]
 8004f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		bmp->_calib_data.par_p7 = (float)raw_par_p7 / temp_var;
 8004f88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f8c:	ee07 3a90 	vmov	s15, r3
 8004f90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f94:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		// PAR_P8
		temp_var = 32768.f;
 8004fa2:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 8004fa6:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p8 = (int8_t)calib_buff[16];
 8004fa8:	7f3b      	ldrb	r3, [r7, #28]
 8004faa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bmp->_calib_data.par_p8 = (float)raw_par_p8 / temp_var;
 8004fae:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fba:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		// PAR_P9
		temp_var = 281474976710656.f;
 8004fc8:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004fcc:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p9 = ((int16_t)calib_buff[18] << 8) | (int16_t)calib_buff[17];
 8004fce:	7fbb      	ldrb	r3, [r7, #30]
 8004fd0:	021b      	lsls	r3, r3, #8
 8004fd2:	b21a      	sxth	r2, r3
 8004fd4:	7f7b      	ldrb	r3, [r7, #29]
 8004fd6:	b21b      	sxth	r3, r3
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	84bb      	strh	r3, [r7, #36]	; 0x24
		bmp->_calib_data.par_p9 = (float)raw_par_p9 / temp_var;
 8004fdc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004fe0:	ee07 3a90 	vmov	s15, r3
 8004fe4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fe8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		// PAR_P10
		temp_var = 281474976710656.f;
 8004ff6:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004ffa:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p10 = (int8_t)calib_buff[19];
 8004ffc:	7ffb      	ldrb	r3, [r7, #31]
 8004ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		bmp->_calib_data.par_p10 = (float)raw_par_p10 / temp_var;
 8005002:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800500e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// PAR_P11
		temp_var = 36893488147419103232.f;
 800501c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005020:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p11 = (int8_t)calib_buff[20];
 8005022:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005026:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		bmp->_calib_data.par_p11 = (float)raw_par_p11 / temp_var;
 800502a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005036:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800503a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	return rslt;
 8005044:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005048:	4618      	mov	r0, r3
 800504a:	3740      	adds	r7, #64	; 0x40
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	46800000 	.word	0x46800000

08005054 <BMP388_CompensateTemp>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
float BMP388_CompensateTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_temp, float *temp){
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
    float partial_data1 = (float)(raw_temp - bmp->_calib_data.par_t1);;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	ee07 3a90 	vmov	s15, r3
 8005066:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005074:	edc7 7a05 	vstr	s15, [r7, #20]
    float partial_data2 = (float)(partial_data1 * bmp->_calib_data.par_t2);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	edd3 7a03 	vldr	s15, [r3, #12]
 800507e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005086:	edc7 7a04 	vstr	s15, [r7, #16]

    *temp = partial_data2 + (partial_data1 * partial_data1) * bmp->_calib_data.par_t3;
 800508a:	edd7 7a05 	vldr	s15, [r7, #20]
 800508e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	edd3 7a04 	vldr	s15, [r3, #16]
 8005098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800509c:	edd7 7a04 	vldr	s15, [r7, #16]
 80050a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	edc3 7a00 	vstr	s15, [r3]

    return *temp;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	ee07 3a90 	vmov	s15, r3
}
 80050b2:	eeb0 0a67 	vmov.f32	s0, s15
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <BMP388_CompensatePress>:
 *	@param[out] press		: Measured pressure in Pa
 *
 *  @return Status of execution
 *  @retval = press			: Compensated pressure value
 */
float BMP388_CompensatePress(BMP388_HandleTypeDef *bmp, float temp, uint32_t raw_press, float *press){
 80050c0:	b480      	push	{r7}
 80050c2:	b08b      	sub	sp, #44	; 0x2c
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80050cc:	6079      	str	r1, [r7, #4]
 80050ce:	603a      	str	r2, [r7, #0]
    float partial_out1;
    float partial_out2;



    partial_data1 = bmp->_calib_data.par_p6 * temp;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80050d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80050da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p7 * (temp * temp);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80050e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80050ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80050f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f4:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p8 * (temp * temp * temp);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80050fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005102:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005106:	edd7 7a02 	vldr	s15, [r7, #8]
 800510a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800510e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005112:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out1 = bmp->_calib_data.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800511c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005120:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005124:	edd7 7a08 	vldr	s15, [r7, #32]
 8005128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800512c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005134:	edc7 7a06 	vstr	s15, [r7, #24]

    partial_data1 = bmp->_calib_data.par_p2 * temp;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	edd3 7a06 	vldr	s15, [r3, #24]
 800513e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005146:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p3 * (temp * temp);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	ed93 7a07 	vldr	s14, [r3, #28]
 8005150:	edd7 7a02 	vldr	s15, [r7, #8]
 8005154:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515c:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p4 * (temp * temp * temp);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	ed93 7a08 	vldr	s14, [r3, #32]
 8005166:	edd7 7a02 	vldr	s15, [r7, #8]
 800516a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800516e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517a:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out2 = (float)raw_press * (bmp->_calib_data.par_p1 + partial_data1 + partial_data2 + partial_data3);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	ee07 3a90 	vmov	s15, r3
 8005184:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	edd3 6a05 	vldr	s13, [r3, #20]
 800518e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005192:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005196:	edd7 7a08 	vldr	s15, [r7, #32]
 800519a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800519e:	edd7 7a07 	vldr	s15, [r7, #28]
 80051a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051aa:	edc7 7a05 	vstr	s15, [r7, #20]

    partial_data1 = (float)raw_press * (float)raw_press;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	ee07 3a90 	vmov	s15, r3
 80051b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p9 + bmp->_calib_data.par_p10 * temp;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80051d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80051da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e2:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = partial_data1 * partial_data2;
 80051e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80051ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80051ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f2:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_data4 = partial_data3 + ((float)raw_press * (float)raw_press * (float)raw_press) * bmp->_calib_data.par_p11;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	ee07 3a90 	vmov	s15, r3
 80051fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	ee07 3a90 	vmov	s15, r3
 8005214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005226:	ed97 7a07 	vldr	s14, [r7, #28]
 800522a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800522e:	edc7 7a04 	vstr	s15, [r7, #16]

    *press = partial_out1 + partial_out2 + partial_data4;
 8005232:	ed97 7a06 	vldr	s14, [r7, #24]
 8005236:	edd7 7a05 	vldr	s15, [r7, #20]
 800523a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800523e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	edc3 7a00 	vstr	s15, [r3]

    return *press;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	ee07 3a90 	vmov	s15, r3
}
 8005254:	eeb0 0a67 	vmov.f32	s0, s15
 8005258:	372c      	adds	r7, #44	; 0x2c
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <BMP388_ReadBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 8005262:	b580      	push	{r7, lr}
 8005264:	b088      	sub	sp, #32
 8005266:	af04      	add	r7, sp, #16
 8005268:	60f8      	str	r0, [r7, #12]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	461a      	mov	r2, r3
 800526e:	460b      	mov	r3, r1
 8005270:	72fb      	strb	r3, [r7, #11]
 8005272:	4613      	mov	r3, r2
 8005274:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	7afb      	ldrb	r3, [r7, #11]
 800527c:	b29a      	uxth	r2, r3
 800527e:	7abb      	ldrb	r3, [r7, #10]
 8005280:	b29b      	uxth	r3, r3
 8005282:	2164      	movs	r1, #100	; 0x64
 8005284:	9102      	str	r1, [sp, #8]
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	2301      	movs	r3, #1
 800528e:	21ec      	movs	r1, #236	; 0xec
 8005290:	f001 fd14 	bl	8006cbc <HAL_I2C_Mem_Read>
 8005294:	4603      	mov	r3, r0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <BMP388_WriteBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_WriteBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 800529e:	b580      	push	{r7, lr}
 80052a0:	b088      	sub	sp, #32
 80052a2:	af04      	add	r7, sp, #16
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	461a      	mov	r2, r3
 80052aa:	460b      	mov	r3, r1
 80052ac:	72fb      	strb	r3, [r7, #11]
 80052ae:	4613      	mov	r3, r2
 80052b0:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	7afb      	ldrb	r3, [r7, #11]
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	7abb      	ldrb	r3, [r7, #10]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2164      	movs	r1, #100	; 0x64
 80052c0:	9102      	str	r1, [sp, #8]
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	2301      	movs	r3, #1
 80052ca:	21ec      	movs	r1, #236	; 0xec
 80052cc:	f001 fbfc 	bl	8006ac8 <HAL_I2C_Mem_Write>
 80052d0:	4603      	mov	r3, r0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <set_duty_Oneshot42>:
#define P_yaw 5
#define D_yaw 0



void set_duty_Oneshot42(TIM_HandleTypeDef* const pwmHandle1, uint16_t ref_1, uint16_t ref_2, uint16_t ref_3, uint16_t ref_4){
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	4608      	mov	r0, r1
 80052e4:	4611      	mov	r1, r2
 80052e6:	461a      	mov	r2, r3
 80052e8:	4603      	mov	r3, r0
 80052ea:	817b      	strh	r3, [r7, #10]
 80052ec:	460b      	mov	r3, r1
 80052ee:	813b      	strh	r3, [r7, #8]
 80052f0:	4613      	mov	r3, r2
 80052f2:	80fb      	strh	r3, [r7, #6]
	// Multishot42 12 kHz PSC 7-1, ARR 1000-1 -> 1000 = 100%, 500 = stop, ?0 = -100%?
	pwmHandle1 -> Instance -> CCR1 = ref_1;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	897a      	ldrh	r2, [r7, #10]
 80052fa:	635a      	str	r2, [r3, #52]	; 0x34
	pwmHandle1 -> Instance -> CCR2 = ref_2;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	893a      	ldrh	r2, [r7, #8]
 8005302:	639a      	str	r2, [r3, #56]	; 0x38
	pwmHandle1 -> Instance -> CCR3 = ref_3;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	88fa      	ldrh	r2, [r7, #6]
 800530a:	63da      	str	r2, [r3, #60]	; 0x3c
	pwmHandle1 -> Instance -> CCR4 = ref_4;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	8b3a      	ldrh	r2, [r7, #24]
 8005312:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005314:	bf00      	nop
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <CRSFtoDuty>:

float CRSFtoDuty(uint16_t CRSF_val){
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	80fb      	strh	r3, [r7, #6]
	float Duty;
//	Duty = 550+((float)(CRSF_val-172))/4.1; // minimum duty 55% max duty 95%
	Duty = 550+((float)(CRSF_val-172))/4.1*0.4; //for safety reasons minimum duty 55% max duty 71%
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	3bac      	subs	r3, #172	; 0xac
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005336:	ee17 0a90 	vmov	r0, s15
 800533a:	f7fb f905 	bl	8000548 <__aeabi_f2d>
 800533e:	a315      	add	r3, pc, #84	; (adr r3, 8005394 <CRSFtoDuty+0x74>)
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	f7fb fa82 	bl	800084c <__aeabi_ddiv>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4610      	mov	r0, r2
 800534e:	4619      	mov	r1, r3
 8005350:	a312      	add	r3, pc, #72	; (adr r3, 800539c <CRSFtoDuty+0x7c>)
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f7fb f94f 	bl	80005f8 <__aeabi_dmul>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4610      	mov	r0, r2
 8005360:	4619      	mov	r1, r3
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <CRSFtoDuty+0x70>)
 8005368:	f7fa ff90 	bl	800028c <__adddf3>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	f7fb fc38 	bl	8000be8 <__aeabi_d2f>
 8005378:	4603      	mov	r3, r0
 800537a:	60fb      	str	r3, [r7, #12]
	return Duty;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	ee07 3a90 	vmov	s15, r3
}
 8005382:	eeb0 0a67 	vmov.f32	s0, s15
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	f3af 8000 	nop.w
 8005390:	40813000 	.word	0x40813000
 8005394:	66666666 	.word	0x66666666
 8005398:	40106666 	.word	0x40106666
 800539c:	9999999a 	.word	0x9999999a
 80053a0:	3fd99999 	.word	0x3fd99999

080053a4 <CRSFtoPitch>:

float CRSFtoPitch(uint16_t CRSF_val){
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	80fb      	strh	r3, [r7, #6]
	float pitch;
	pitch = ((float)(CRSF_val-992))/820.0;
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80053b4:	ee07 3a90 	vmov	s15, r3
 80053b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053bc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80053dc <CRSFtoPitch+0x38>
 80053c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053c4:	edc7 7a03 	vstr	s15, [r7, #12]
	return pitch;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	ee07 3a90 	vmov	s15, r3
}
 80053ce:	eeb0 0a67 	vmov.f32	s0, s15
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	444d0000 	.word	0x444d0000

080053e0 <CRSFtoRoll>:

float CRSFtoRoll(uint16_t CRSF_val){
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	80fb      	strh	r3, [r7, #6]
	float roll;
	roll = ((float)(CRSF_val-992))/820.0;
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80053f0:	ee07 3a90 	vmov	s15, r3
 80053f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053f8:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005418 <CRSFtoRoll+0x38>
 80053fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005400:	edc7 7a03 	vstr	s15, [r7, #12]
	return roll;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	ee07 3a90 	vmov	s15, r3
}
 800540a:	eeb0 0a67 	vmov.f32	s0, s15
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	444d0000 	.word	0x444d0000

0800541c <CRSFtoYaw>:

float CRSFtoYaw(uint16_t CRSF_val){
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	80fb      	strh	r3, [r7, #6]
	float yaw;
	yaw = ((float)(CRSF_val-992))/820.0;
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800542c:	ee07 3a90 	vmov	s15, r3
 8005430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005434:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005454 <CRSFtoYaw+0x38>
 8005438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800543c:	edc7 7a03 	vstr	s15, [r7, #12]
	return yaw;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	ee07 3a90 	vmov	s15, r3
}
 8005446:	eeb0 0a67 	vmov.f32	s0, s15
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	444d0000 	.word	0x444d0000

08005458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800545c:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <HAL_Init+0x40>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a0d      	ldr	r2, [pc, #52]	; (8005498 <HAL_Init+0x40>)
 8005462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005468:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <HAL_Init+0x40>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a0a      	ldr	r2, [pc, #40]	; (8005498 <HAL_Init+0x40>)
 800546e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005474:	4b08      	ldr	r3, [pc, #32]	; (8005498 <HAL_Init+0x40>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a07      	ldr	r2, [pc, #28]	; (8005498 <HAL_Init+0x40>)
 800547a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800547e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005480:	2003      	movs	r0, #3
 8005482:	f000 fbb1 	bl	8005be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005486:	200f      	movs	r0, #15
 8005488:	f000 f808 	bl	800549c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800548c:	f7fe fa46 	bl	800391c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40023c00 	.word	0x40023c00

0800549c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054a4:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <HAL_InitTick+0x54>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	4b12      	ldr	r3, [pc, #72]	; (80054f4 <HAL_InitTick+0x58>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	4619      	mov	r1, r3
 80054ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80054b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fbc9 	bl	8005c52 <HAL_SYSTICK_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e00e      	b.n	80054e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b0f      	cmp	r3, #15
 80054ce:	d80a      	bhi.n	80054e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054d0:	2200      	movs	r2, #0
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295
 80054d8:	f000 fb91 	bl	8005bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054dc:	4a06      	ldr	r2, [pc, #24]	; (80054f8 <HAL_InitTick+0x5c>)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	e000      	b.n	80054e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	2000000c 	.word	0x2000000c
 80054f4:	20000014 	.word	0x20000014
 80054f8:	20000010 	.word	0x20000010

080054fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005500:	4b06      	ldr	r3, [pc, #24]	; (800551c <HAL_IncTick+0x20>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	4b06      	ldr	r3, [pc, #24]	; (8005520 <HAL_IncTick+0x24>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4413      	add	r3, r2
 800550c:	4a04      	ldr	r2, [pc, #16]	; (8005520 <HAL_IncTick+0x24>)
 800550e:	6013      	str	r3, [r2, #0]
}
 8005510:	bf00      	nop
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20000014 	.word	0x20000014
 8005520:	20000bd8 	.word	0x20000bd8

08005524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  return uwTick;
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <HAL_GetTick+0x14>)
 800552a:	681b      	ldr	r3, [r3, #0]
}
 800552c:	4618      	mov	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000bd8 	.word	0x20000bd8

0800553c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005544:	f7ff ffee 	bl	8005524 <HAL_GetTick>
 8005548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d005      	beq.n	8005562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005556:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <HAL_Delay+0x44>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005562:	bf00      	nop
 8005564:	f7ff ffde 	bl	8005524 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	429a      	cmp	r2, r3
 8005572:	d8f7      	bhi.n	8005564 <HAL_Delay+0x28>
  {
  }
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000014 	.word	0x20000014

08005584 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e033      	b.n	8005602 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fe f9e6 	bl	8003974 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d118      	bne.n	80055f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80055ca:	f023 0302 	bic.w	r3, r3, #2
 80055ce:	f043 0202 	orr.w	r2, r3, #2
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f93a 	bl	8005850 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f023 0303 	bic.w	r3, r3, #3
 80055ea:	f043 0201 	orr.w	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	641a      	str	r2, [r3, #64]	; 0x40
 80055f2:	e001      	b.n	80055f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_ADC_ConfigChannel+0x1c>
 8005624:	2302      	movs	r3, #2
 8005626:	e105      	b.n	8005834 <HAL_ADC_ConfigChannel+0x228>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b09      	cmp	r3, #9
 8005636:	d925      	bls.n	8005684 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68d9      	ldr	r1, [r3, #12]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	461a      	mov	r2, r3
 8005646:	4613      	mov	r3, r2
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	4413      	add	r3, r2
 800564c:	3b1e      	subs	r3, #30
 800564e:	2207      	movs	r2, #7
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	43da      	mvns	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	400a      	ands	r2, r1
 800565c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68d9      	ldr	r1, [r3, #12]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	4618      	mov	r0, r3
 8005670:	4603      	mov	r3, r0
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	4403      	add	r3, r0
 8005676:	3b1e      	subs	r3, #30
 8005678:	409a      	lsls	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	60da      	str	r2, [r3, #12]
 8005682:	e022      	b.n	80056ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6919      	ldr	r1, [r3, #16]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	b29b      	uxth	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	4613      	mov	r3, r2
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	4413      	add	r3, r2
 8005698:	2207      	movs	r2, #7
 800569a:	fa02 f303 	lsl.w	r3, r2, r3
 800569e:	43da      	mvns	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	400a      	ands	r2, r1
 80056a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6919      	ldr	r1, [r3, #16]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	4618      	mov	r0, r3
 80056ba:	4603      	mov	r3, r0
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	4403      	add	r3, r0
 80056c0:	409a      	lsls	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b06      	cmp	r3, #6
 80056d0:	d824      	bhi.n	800571c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	3b05      	subs	r3, #5
 80056e4:	221f      	movs	r2, #31
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	43da      	mvns	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	400a      	ands	r2, r1
 80056f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	4618      	mov	r0, r3
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	3b05      	subs	r3, #5
 800570e:	fa00 f203 	lsl.w	r2, r0, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	635a      	str	r2, [r3, #52]	; 0x34
 800571a:	e04c      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b0c      	cmp	r3, #12
 8005722:	d824      	bhi.n	800576e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	3b23      	subs	r3, #35	; 0x23
 8005736:	221f      	movs	r2, #31
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	43da      	mvns	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	400a      	ands	r2, r1
 8005744:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	4618      	mov	r0, r3
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	3b23      	subs	r3, #35	; 0x23
 8005760:	fa00 f203 	lsl.w	r2, r0, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
 800576c:	e023      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	3b41      	subs	r3, #65	; 0x41
 8005780:	221f      	movs	r2, #31
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	43da      	mvns	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	400a      	ands	r2, r1
 800578e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	b29b      	uxth	r3, r3
 800579c:	4618      	mov	r0, r3
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	3b41      	subs	r3, #65	; 0x41
 80057aa:	fa00 f203 	lsl.w	r2, r0, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057b6:	4b22      	ldr	r3, [pc, #136]	; (8005840 <HAL_ADC_ConfigChannel+0x234>)
 80057b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a21      	ldr	r2, [pc, #132]	; (8005844 <HAL_ADC_ConfigChannel+0x238>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d109      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x1cc>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b12      	cmp	r3, #18
 80057ca:	d105      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a19      	ldr	r2, [pc, #100]	; (8005844 <HAL_ADC_ConfigChannel+0x238>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d123      	bne.n	800582a <HAL_ADC_ConfigChannel+0x21e>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b10      	cmp	r3, #16
 80057e8:	d003      	beq.n	80057f2 <HAL_ADC_ConfigChannel+0x1e6>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b11      	cmp	r3, #17
 80057f0:	d11b      	bne.n	800582a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b10      	cmp	r3, #16
 8005804:	d111      	bne.n	800582a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005806:	4b10      	ldr	r3, [pc, #64]	; (8005848 <HAL_ADC_ConfigChannel+0x23c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a10      	ldr	r2, [pc, #64]	; (800584c <HAL_ADC_ConfigChannel+0x240>)
 800580c:	fba2 2303 	umull	r2, r3, r2, r3
 8005810:	0c9a      	lsrs	r2, r3, #18
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800581c:	e002      	b.n	8005824 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	3b01      	subs	r3, #1
 8005822:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f9      	bne.n	800581e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	40012300 	.word	0x40012300
 8005844:	40012000 	.word	0x40012000
 8005848:	2000000c 	.word	0x2000000c
 800584c:	431bde83 	.word	0x431bde83

08005850 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005858:	4b79      	ldr	r3, [pc, #484]	; (8005a40 <ADC_Init+0x1f0>)
 800585a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	431a      	orrs	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005884:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6859      	ldr	r1, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	021a      	lsls	r2, r3, #8
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80058a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6859      	ldr	r1, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6899      	ldr	r1, [r3, #8]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	4a58      	ldr	r2, [pc, #352]	; (8005a44 <ADC_Init+0x1f4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d022      	beq.n	800592e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6899      	ldr	r1, [r3, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005918:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6899      	ldr	r1, [r3, #8]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	609a      	str	r2, [r3, #8]
 800592c:	e00f      	b.n	800594e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800593c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800594c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0202 	bic.w	r2, r2, #2
 800595c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6899      	ldr	r1, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	7e1b      	ldrb	r3, [r3, #24]
 8005968:	005a      	lsls	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01b      	beq.n	80059b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800598a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800599a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6859      	ldr	r1, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	3b01      	subs	r3, #1
 80059a8:	035a      	lsls	r2, r3, #13
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	605a      	str	r2, [r3, #4]
 80059b2:	e007      	b.n	80059c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80059d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	3b01      	subs	r3, #1
 80059e0:	051a      	lsls	r2, r3, #20
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6899      	ldr	r1, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a06:	025a      	lsls	r2, r3, #9
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6899      	ldr	r1, [r3, #8]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	029a      	lsls	r2, r3, #10
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	609a      	str	r2, [r3, #8]
}
 8005a34:	bf00      	nop
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	40012300 	.word	0x40012300
 8005a44:	0f000001 	.word	0x0f000001

08005a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a58:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <__NVIC_SetPriorityGrouping+0x44>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a64:	4013      	ands	r3, r2
 8005a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a7a:	4a04      	ldr	r2, [pc, #16]	; (8005a8c <__NVIC_SetPriorityGrouping+0x44>)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	60d3      	str	r3, [r2, #12]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	e000ed00 	.word	0xe000ed00

08005a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a94:	4b04      	ldr	r3, [pc, #16]	; (8005aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	0a1b      	lsrs	r3, r3, #8
 8005a9a:	f003 0307 	and.w	r3, r3, #7
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	e000ed00 	.word	0xe000ed00

08005aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	db0b      	blt.n	8005ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005abe:	79fb      	ldrb	r3, [r7, #7]
 8005ac0:	f003 021f 	and.w	r2, r3, #31
 8005ac4:	4907      	ldr	r1, [pc, #28]	; (8005ae4 <__NVIC_EnableIRQ+0x38>)
 8005ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	2001      	movs	r0, #1
 8005ace:	fa00 f202 	lsl.w	r2, r0, r2
 8005ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	e000e100 	.word	0xe000e100

08005ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	4603      	mov	r3, r0
 8005af0:	6039      	str	r1, [r7, #0]
 8005af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	db0a      	blt.n	8005b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	490c      	ldr	r1, [pc, #48]	; (8005b34 <__NVIC_SetPriority+0x4c>)
 8005b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b06:	0112      	lsls	r2, r2, #4
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b10:	e00a      	b.n	8005b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	4908      	ldr	r1, [pc, #32]	; (8005b38 <__NVIC_SetPriority+0x50>)
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	3b04      	subs	r3, #4
 8005b20:	0112      	lsls	r2, r2, #4
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	440b      	add	r3, r1
 8005b26:	761a      	strb	r2, [r3, #24]
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	e000e100 	.word	0xe000e100
 8005b38:	e000ed00 	.word	0xe000ed00

08005b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b089      	sub	sp, #36	; 0x24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	f1c3 0307 	rsb	r3, r3, #7
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	bf28      	it	cs
 8005b5a:	2304      	movcs	r3, #4
 8005b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	3304      	adds	r3, #4
 8005b62:	2b06      	cmp	r3, #6
 8005b64:	d902      	bls.n	8005b6c <NVIC_EncodePriority+0x30>
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	3b03      	subs	r3, #3
 8005b6a:	e000      	b.n	8005b6e <NVIC_EncodePriority+0x32>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b70:	f04f 32ff 	mov.w	r2, #4294967295
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7a:	43da      	mvns	r2, r3
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	401a      	ands	r2, r3
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b84:	f04f 31ff 	mov.w	r1, #4294967295
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8e:	43d9      	mvns	r1, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b94:	4313      	orrs	r3, r2
         );
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3724      	adds	r7, #36	; 0x24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bb4:	d301      	bcc.n	8005bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e00f      	b.n	8005bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bba:	4a0a      	ldr	r2, [pc, #40]	; (8005be4 <SysTick_Config+0x40>)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bc2:	210f      	movs	r1, #15
 8005bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc8:	f7ff ff8e 	bl	8005ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bcc:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <SysTick_Config+0x40>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bd2:	4b04      	ldr	r3, [pc, #16]	; (8005be4 <SysTick_Config+0x40>)
 8005bd4:	2207      	movs	r2, #7
 8005bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	e000e010 	.word	0xe000e010

08005be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff ff29 	bl	8005a48 <__NVIC_SetPriorityGrouping>
}
 8005bf6:	bf00      	nop
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b086      	sub	sp, #24
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	4603      	mov	r3, r0
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	607a      	str	r2, [r7, #4]
 8005c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c10:	f7ff ff3e 	bl	8005a90 <__NVIC_GetPriorityGrouping>
 8005c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	6978      	ldr	r0, [r7, #20]
 8005c1c:	f7ff ff8e 	bl	8005b3c <NVIC_EncodePriority>
 8005c20:	4602      	mov	r2, r0
 8005c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c26:	4611      	mov	r1, r2
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff ff5d 	bl	8005ae8 <__NVIC_SetPriority>
}
 8005c2e:	bf00      	nop
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b082      	sub	sp, #8
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff ff31 	bl	8005aac <__NVIC_EnableIRQ>
}
 8005c4a:	bf00      	nop
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b082      	sub	sp, #8
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff ffa2 	bl	8005ba4 <SysTick_Config>
 8005c60:	4603      	mov	r3, r0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c78:	f7ff fc54 	bl	8005524 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e099      	b.n	8005dbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ca8:	e00f      	b.n	8005cca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005caa:	f7ff fc3b 	bl	8005524 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b05      	cmp	r3, #5
 8005cb6:	d908      	bls.n	8005cca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2203      	movs	r2, #3
 8005cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e078      	b.n	8005dbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e8      	bne.n	8005caa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4b38      	ldr	r3, [pc, #224]	; (8005dc4 <HAL_DMA_Init+0x158>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d107      	bne.n	8005d34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0307 	bic.w	r3, r3, #7
 8005d4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d117      	bne.n	8005d8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00e      	beq.n	8005d8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fb01 	bl	8006378 <DMA_CheckFifoParam>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2240      	movs	r2, #64	; 0x40
 8005d80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e016      	b.n	8005dbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fab8 	bl	800630c <DMA_CalcBaseAndBitshift>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da4:	223f      	movs	r2, #63	; 0x3f
 8005da6:	409a      	lsls	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	f010803f 	.word	0xf010803f

08005dc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_DMA_Start_IT+0x26>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e040      	b.n	8005e70 <HAL_DMA_Start_IT+0xa8>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d12f      	bne.n	8005e62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2202      	movs	r2, #2
 8005e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	68b9      	ldr	r1, [r7, #8]
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 fa4a 	bl	80062b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e20:	223f      	movs	r2, #63	; 0x3f
 8005e22:	409a      	lsls	r2, r3
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0216 	orr.w	r2, r2, #22
 8005e36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d007      	beq.n	8005e50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0208 	orr.w	r2, r2, #8
 8005e4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e005      	b.n	8005e6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e86:	f7ff fb4d 	bl	8005524 <HAL_GetTick>
 8005e8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d008      	beq.n	8005eaa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2280      	movs	r2, #128	; 0x80
 8005e9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e052      	b.n	8005f50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0216 	bic.w	r2, r2, #22
 8005eb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695a      	ldr	r2, [r3, #20]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ec8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d103      	bne.n	8005eda <HAL_DMA_Abort+0x62>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0208 	bic.w	r2, r2, #8
 8005ee8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0201 	bic.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005efa:	e013      	b.n	8005f24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005efc:	f7ff fb12 	bl	8005524 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b05      	cmp	r3, #5
 8005f08:	d90c      	bls.n	8005f24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2203      	movs	r2, #3
 8005f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e015      	b.n	8005f50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e4      	bne.n	8005efc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f36:	223f      	movs	r2, #63	; 0x3f
 8005f38:	409a      	lsls	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d004      	beq.n	8005f76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2280      	movs	r2, #128	; 0x80
 8005f70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e00c      	b.n	8005f90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2205      	movs	r2, #5
 8005f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0201 	bic.w	r2, r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fa8:	4b8e      	ldr	r3, [pc, #568]	; (80061e4 <HAL_DMA_IRQHandler+0x248>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a8e      	ldr	r2, [pc, #568]	; (80061e8 <HAL_DMA_IRQHandler+0x24c>)
 8005fae:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb2:	0a9b      	lsrs	r3, r3, #10
 8005fb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc6:	2208      	movs	r2, #8
 8005fc8:	409a      	lsls	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d01a      	beq.n	8006008 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d013      	beq.n	8006008 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0204 	bic.w	r2, r2, #4
 8005fee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff4:	2208      	movs	r2, #8
 8005ff6:	409a      	lsls	r2, r3
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006000:	f043 0201 	orr.w	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600c:	2201      	movs	r2, #1
 800600e:	409a      	lsls	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4013      	ands	r3, r2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d012      	beq.n	800603e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602a:	2201      	movs	r2, #1
 800602c:	409a      	lsls	r2, r3
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006036:	f043 0202 	orr.w	r2, r3, #2
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006042:	2204      	movs	r2, #4
 8006044:	409a      	lsls	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4013      	ands	r3, r2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d012      	beq.n	8006074 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006060:	2204      	movs	r2, #4
 8006062:	409a      	lsls	r2, r3
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606c:	f043 0204 	orr.w	r2, r3, #4
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006078:	2210      	movs	r2, #16
 800607a:	409a      	lsls	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4013      	ands	r3, r2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d043      	beq.n	800610c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0308 	and.w	r3, r3, #8
 800608e:	2b00      	cmp	r3, #0
 8006090:	d03c      	beq.n	800610c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006096:	2210      	movs	r2, #16
 8006098:	409a      	lsls	r2, r3
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d018      	beq.n	80060de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d108      	bne.n	80060cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d024      	beq.n	800610c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	4798      	blx	r3
 80060ca:	e01f      	b.n	800610c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01b      	beq.n	800610c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
 80060dc:	e016      	b.n	800610c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d107      	bne.n	80060fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0208 	bic.w	r2, r2, #8
 80060fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006110:	2220      	movs	r2, #32
 8006112:	409a      	lsls	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4013      	ands	r3, r2
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 808f 	beq.w	800623c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 8087 	beq.w	800623c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006132:	2220      	movs	r2, #32
 8006134:	409a      	lsls	r2, r3
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b05      	cmp	r3, #5
 8006144:	d136      	bne.n	80061b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0216 	bic.w	r2, r2, #22
 8006154:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	695a      	ldr	r2, [r3, #20]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006164:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	d103      	bne.n	8006176 <HAL_DMA_IRQHandler+0x1da>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006172:	2b00      	cmp	r3, #0
 8006174:	d007      	beq.n	8006186 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0208 	bic.w	r2, r2, #8
 8006184:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800618a:	223f      	movs	r2, #63	; 0x3f
 800618c:	409a      	lsls	r2, r3
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d07e      	beq.n	80062a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	4798      	blx	r3
        }
        return;
 80061b2:	e079      	b.n	80062a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d01d      	beq.n	80061fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10d      	bne.n	80061ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d031      	beq.n	800623c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	4798      	blx	r3
 80061e0:	e02c      	b.n	800623c <HAL_DMA_IRQHandler+0x2a0>
 80061e2:	bf00      	nop
 80061e4:	2000000c 	.word	0x2000000c
 80061e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d023      	beq.n	800623c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4798      	blx	r3
 80061fc:	e01e      	b.n	800623c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10f      	bne.n	800622c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0210 	bic.w	r2, r2, #16
 800621a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006240:	2b00      	cmp	r3, #0
 8006242:	d032      	beq.n	80062aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d022      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2205      	movs	r2, #5
 8006254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0201 	bic.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	3301      	adds	r3, #1
 800626c:	60bb      	str	r3, [r7, #8]
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	429a      	cmp	r2, r3
 8006272:	d307      	bcc.n	8006284 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1f2      	bne.n	8006268 <HAL_DMA_IRQHandler+0x2cc>
 8006282:	e000      	b.n	8006286 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006284:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d005      	beq.n	80062aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
 80062a6:	e000      	b.n	80062aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80062a8:	bf00      	nop
    }
  }
}
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
 80062bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	d108      	bne.n	80062f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80062ee:	e007      	b.n	8006300 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	60da      	str	r2, [r3, #12]
}
 8006300:	bf00      	nop
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	3b10      	subs	r3, #16
 800631c:	4a14      	ldr	r2, [pc, #80]	; (8006370 <DMA_CalcBaseAndBitshift+0x64>)
 800631e:	fba2 2303 	umull	r2, r3, r2, r3
 8006322:	091b      	lsrs	r3, r3, #4
 8006324:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006326:	4a13      	ldr	r2, [pc, #76]	; (8006374 <DMA_CalcBaseAndBitshift+0x68>)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b03      	cmp	r3, #3
 8006338:	d909      	bls.n	800634e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006342:	f023 0303 	bic.w	r3, r3, #3
 8006346:	1d1a      	adds	r2, r3, #4
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	659a      	str	r2, [r3, #88]	; 0x58
 800634c:	e007      	b.n	800635e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006356:	f023 0303 	bic.w	r3, r3, #3
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	aaaaaaab 	.word	0xaaaaaaab
 8006374:	08014518 	.word	0x08014518

08006378 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006388:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d11f      	bne.n	80063d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b03      	cmp	r3, #3
 8006396:	d856      	bhi.n	8006446 <DMA_CheckFifoParam+0xce>
 8006398:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <DMA_CheckFifoParam+0x28>)
 800639a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639e:	bf00      	nop
 80063a0:	080063b1 	.word	0x080063b1
 80063a4:	080063c3 	.word	0x080063c3
 80063a8:	080063b1 	.word	0x080063b1
 80063ac:	08006447 	.word	0x08006447
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d046      	beq.n	800644a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063c0:	e043      	b.n	800644a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063ca:	d140      	bne.n	800644e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063d0:	e03d      	b.n	800644e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063da:	d121      	bne.n	8006420 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d837      	bhi.n	8006452 <DMA_CheckFifoParam+0xda>
 80063e2:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <DMA_CheckFifoParam+0x70>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	080063f9 	.word	0x080063f9
 80063ec:	080063ff 	.word	0x080063ff
 80063f0:	080063f9 	.word	0x080063f9
 80063f4:	08006411 	.word	0x08006411
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
      break;
 80063fc:	e030      	b.n	8006460 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d025      	beq.n	8006456 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800640e:	e022      	b.n	8006456 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006418:	d11f      	bne.n	800645a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800641e:	e01c      	b.n	800645a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2b02      	cmp	r3, #2
 8006424:	d903      	bls.n	800642e <DMA_CheckFifoParam+0xb6>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b03      	cmp	r3, #3
 800642a:	d003      	beq.n	8006434 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800642c:	e018      	b.n	8006460 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	73fb      	strb	r3, [r7, #15]
      break;
 8006432:	e015      	b.n	8006460 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00e      	beq.n	800645e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	73fb      	strb	r3, [r7, #15]
      break;
 8006444:	e00b      	b.n	800645e <DMA_CheckFifoParam+0xe6>
      break;
 8006446:	bf00      	nop
 8006448:	e00a      	b.n	8006460 <DMA_CheckFifoParam+0xe8>
      break;
 800644a:	bf00      	nop
 800644c:	e008      	b.n	8006460 <DMA_CheckFifoParam+0xe8>
      break;
 800644e:	bf00      	nop
 8006450:	e006      	b.n	8006460 <DMA_CheckFifoParam+0xe8>
      break;
 8006452:	bf00      	nop
 8006454:	e004      	b.n	8006460 <DMA_CheckFifoParam+0xe8>
      break;
 8006456:	bf00      	nop
 8006458:	e002      	b.n	8006460 <DMA_CheckFifoParam+0xe8>
      break;   
 800645a:	bf00      	nop
 800645c:	e000      	b.n	8006460 <DMA_CheckFifoParam+0xe8>
      break;
 800645e:	bf00      	nop
    }
  } 
  
  return status; 
 8006460:	7bfb      	ldrb	r3, [r7, #15]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop

08006470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006470:	b480      	push	{r7}
 8006472:	b089      	sub	sp, #36	; 0x24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800647e:	2300      	movs	r3, #0
 8006480:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006482:	2300      	movs	r3, #0
 8006484:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006486:	2300      	movs	r3, #0
 8006488:	61fb      	str	r3, [r7, #28]
 800648a:	e16b      	b.n	8006764 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800648c:	2201      	movs	r2, #1
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	fa02 f303 	lsl.w	r3, r2, r3
 8006494:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4013      	ands	r3, r2
 800649e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	f040 815a 	bne.w	800675e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d005      	beq.n	80064c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d130      	bne.n	8006524 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	2203      	movs	r2, #3
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	43db      	mvns	r3, r3
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	4013      	ands	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	fa02 f303 	lsl.w	r3, r2, r3
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064f8:	2201      	movs	r2, #1
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006500:	43db      	mvns	r3, r3
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	4013      	ands	r3, r2
 8006506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	091b      	lsrs	r3, r3, #4
 800650e:	f003 0201 	and.w	r2, r3, #1
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	4313      	orrs	r3, r2
 800651c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f003 0303 	and.w	r3, r3, #3
 800652c:	2b03      	cmp	r3, #3
 800652e:	d017      	beq.n	8006560 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	2203      	movs	r2, #3
 800653c:	fa02 f303 	lsl.w	r3, r2, r3
 8006540:	43db      	mvns	r3, r3
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	4013      	ands	r3, r2
 8006546:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	fa02 f303 	lsl.w	r3, r2, r3
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	4313      	orrs	r3, r2
 8006558:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d123      	bne.n	80065b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	08da      	lsrs	r2, r3, #3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3208      	adds	r2, #8
 8006574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006578:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	220f      	movs	r2, #15
 8006584:	fa02 f303 	lsl.w	r3, r2, r3
 8006588:	43db      	mvns	r3, r3
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	4013      	ands	r3, r2
 800658e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	08da      	lsrs	r2, r3, #3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3208      	adds	r2, #8
 80065ae:	69b9      	ldr	r1, [r7, #24]
 80065b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	2203      	movs	r2, #3
 80065c0:	fa02 f303 	lsl.w	r3, r2, r3
 80065c4:	43db      	mvns	r3, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4013      	ands	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f003 0203 	and.w	r2, r3, #3
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	4313      	orrs	r3, r2
 80065e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 80b4 	beq.w	800675e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	4b60      	ldr	r3, [pc, #384]	; (800677c <HAL_GPIO_Init+0x30c>)
 80065fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fe:	4a5f      	ldr	r2, [pc, #380]	; (800677c <HAL_GPIO_Init+0x30c>)
 8006600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006604:	6453      	str	r3, [r2, #68]	; 0x44
 8006606:	4b5d      	ldr	r3, [pc, #372]	; (800677c <HAL_GPIO_Init+0x30c>)
 8006608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006612:	4a5b      	ldr	r2, [pc, #364]	; (8006780 <HAL_GPIO_Init+0x310>)
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	089b      	lsrs	r3, r3, #2
 8006618:	3302      	adds	r3, #2
 800661a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800661e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	220f      	movs	r2, #15
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	43db      	mvns	r3, r3
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	4013      	ands	r3, r2
 8006634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a52      	ldr	r2, [pc, #328]	; (8006784 <HAL_GPIO_Init+0x314>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d02b      	beq.n	8006696 <HAL_GPIO_Init+0x226>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a51      	ldr	r2, [pc, #324]	; (8006788 <HAL_GPIO_Init+0x318>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d025      	beq.n	8006692 <HAL_GPIO_Init+0x222>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a50      	ldr	r2, [pc, #320]	; (800678c <HAL_GPIO_Init+0x31c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d01f      	beq.n	800668e <HAL_GPIO_Init+0x21e>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a4f      	ldr	r2, [pc, #316]	; (8006790 <HAL_GPIO_Init+0x320>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d019      	beq.n	800668a <HAL_GPIO_Init+0x21a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a4e      	ldr	r2, [pc, #312]	; (8006794 <HAL_GPIO_Init+0x324>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d013      	beq.n	8006686 <HAL_GPIO_Init+0x216>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a4d      	ldr	r2, [pc, #308]	; (8006798 <HAL_GPIO_Init+0x328>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00d      	beq.n	8006682 <HAL_GPIO_Init+0x212>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a4c      	ldr	r2, [pc, #304]	; (800679c <HAL_GPIO_Init+0x32c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d007      	beq.n	800667e <HAL_GPIO_Init+0x20e>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a4b      	ldr	r2, [pc, #300]	; (80067a0 <HAL_GPIO_Init+0x330>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d101      	bne.n	800667a <HAL_GPIO_Init+0x20a>
 8006676:	2307      	movs	r3, #7
 8006678:	e00e      	b.n	8006698 <HAL_GPIO_Init+0x228>
 800667a:	2308      	movs	r3, #8
 800667c:	e00c      	b.n	8006698 <HAL_GPIO_Init+0x228>
 800667e:	2306      	movs	r3, #6
 8006680:	e00a      	b.n	8006698 <HAL_GPIO_Init+0x228>
 8006682:	2305      	movs	r3, #5
 8006684:	e008      	b.n	8006698 <HAL_GPIO_Init+0x228>
 8006686:	2304      	movs	r3, #4
 8006688:	e006      	b.n	8006698 <HAL_GPIO_Init+0x228>
 800668a:	2303      	movs	r3, #3
 800668c:	e004      	b.n	8006698 <HAL_GPIO_Init+0x228>
 800668e:	2302      	movs	r3, #2
 8006690:	e002      	b.n	8006698 <HAL_GPIO_Init+0x228>
 8006692:	2301      	movs	r3, #1
 8006694:	e000      	b.n	8006698 <HAL_GPIO_Init+0x228>
 8006696:	2300      	movs	r3, #0
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	f002 0203 	and.w	r2, r2, #3
 800669e:	0092      	lsls	r2, r2, #2
 80066a0:	4093      	lsls	r3, r2
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066a8:	4935      	ldr	r1, [pc, #212]	; (8006780 <HAL_GPIO_Init+0x310>)
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	089b      	lsrs	r3, r3, #2
 80066ae:	3302      	adds	r3, #2
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066b6:	4b3b      	ldr	r3, [pc, #236]	; (80067a4 <HAL_GPIO_Init+0x334>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	43db      	mvns	r3, r3
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	4013      	ands	r3, r2
 80066c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066da:	4a32      	ldr	r2, [pc, #200]	; (80067a4 <HAL_GPIO_Init+0x334>)
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066e0:	4b30      	ldr	r3, [pc, #192]	; (80067a4 <HAL_GPIO_Init+0x334>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	43db      	mvns	r3, r3
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	4013      	ands	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006704:	4a27      	ldr	r2, [pc, #156]	; (80067a4 <HAL_GPIO_Init+0x334>)
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800670a:	4b26      	ldr	r3, [pc, #152]	; (80067a4 <HAL_GPIO_Init+0x334>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	43db      	mvns	r3, r3
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	4013      	ands	r3, r2
 8006718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800672e:	4a1d      	ldr	r2, [pc, #116]	; (80067a4 <HAL_GPIO_Init+0x334>)
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006734:	4b1b      	ldr	r3, [pc, #108]	; (80067a4 <HAL_GPIO_Init+0x334>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	43db      	mvns	r3, r3
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	4013      	ands	r3, r2
 8006742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	4313      	orrs	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006758:	4a12      	ldr	r2, [pc, #72]	; (80067a4 <HAL_GPIO_Init+0x334>)
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	3301      	adds	r3, #1
 8006762:	61fb      	str	r3, [r7, #28]
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	2b0f      	cmp	r3, #15
 8006768:	f67f ae90 	bls.w	800648c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800676c:	bf00      	nop
 800676e:	bf00      	nop
 8006770:	3724      	adds	r7, #36	; 0x24
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40023800 	.word	0x40023800
 8006780:	40013800 	.word	0x40013800
 8006784:	40020000 	.word	0x40020000
 8006788:	40020400 	.word	0x40020400
 800678c:	40020800 	.word	0x40020800
 8006790:	40020c00 	.word	0x40020c00
 8006794:	40021000 	.word	0x40021000
 8006798:	40021400 	.word	0x40021400
 800679c:	40021800 	.word	0x40021800
 80067a0:	40021c00 	.word	0x40021c00
 80067a4:	40013c00 	.word	0x40013c00

080067a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	807b      	strh	r3, [r7, #2]
 80067b4:	4613      	mov	r3, r2
 80067b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067b8:	787b      	ldrb	r3, [r7, #1]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067be:	887a      	ldrh	r2, [r7, #2]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067c4:	e003      	b.n	80067ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067c6:	887b      	ldrh	r3, [r7, #2]
 80067c8:	041a      	lsls	r2, r3, #16
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	619a      	str	r2, [r3, #24]
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	460b      	mov	r3, r1
 80067e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80067ec:	887a      	ldrh	r2, [r7, #2]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4013      	ands	r3, r2
 80067f2:	041a      	lsls	r2, r3, #16
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	43d9      	mvns	r1, r3
 80067f8:	887b      	ldrh	r3, [r7, #2]
 80067fa:	400b      	ands	r3, r1
 80067fc:	431a      	orrs	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	619a      	str	r2, [r3, #24]
}
 8006802:	bf00      	nop
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
	...

08006810 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800681a:	4b08      	ldr	r3, [pc, #32]	; (800683c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800681c:	695a      	ldr	r2, [r3, #20]
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	4013      	ands	r3, r2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d006      	beq.n	8006834 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006826:	4a05      	ldr	r2, [pc, #20]	; (800683c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800682c:	88fb      	ldrh	r3, [r7, #6]
 800682e:	4618      	mov	r0, r3
 8006830:	f7fb fd02 	bl	8002238 <HAL_GPIO_EXTI_Callback>
  }
}
 8006834:	bf00      	nop
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40013c00 	.word	0x40013c00

08006840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e12b      	b.n	8006aaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d106      	bne.n	800686c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fd f92a 	bl	8003ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2224      	movs	r2, #36	; 0x24
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0201 	bic.w	r2, r2, #1
 8006882:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006892:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80068a4:	f001 fbfc 	bl	80080a0 <HAL_RCC_GetPCLK1Freq>
 80068a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	4a81      	ldr	r2, [pc, #516]	; (8006ab4 <HAL_I2C_Init+0x274>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d807      	bhi.n	80068c4 <HAL_I2C_Init+0x84>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4a80      	ldr	r2, [pc, #512]	; (8006ab8 <HAL_I2C_Init+0x278>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	bf94      	ite	ls
 80068bc:	2301      	movls	r3, #1
 80068be:	2300      	movhi	r3, #0
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	e006      	b.n	80068d2 <HAL_I2C_Init+0x92>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4a7d      	ldr	r2, [pc, #500]	; (8006abc <HAL_I2C_Init+0x27c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	bf94      	ite	ls
 80068cc:	2301      	movls	r3, #1
 80068ce:	2300      	movhi	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e0e7      	b.n	8006aaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4a78      	ldr	r2, [pc, #480]	; (8006ac0 <HAL_I2C_Init+0x280>)
 80068de:	fba2 2303 	umull	r2, r3, r2, r3
 80068e2:	0c9b      	lsrs	r3, r3, #18
 80068e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	4a6a      	ldr	r2, [pc, #424]	; (8006ab4 <HAL_I2C_Init+0x274>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d802      	bhi.n	8006914 <HAL_I2C_Init+0xd4>
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	3301      	adds	r3, #1
 8006912:	e009      	b.n	8006928 <HAL_I2C_Init+0xe8>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800691a:	fb02 f303 	mul.w	r3, r2, r3
 800691e:	4a69      	ldr	r2, [pc, #420]	; (8006ac4 <HAL_I2C_Init+0x284>)
 8006920:	fba2 2303 	umull	r2, r3, r2, r3
 8006924:	099b      	lsrs	r3, r3, #6
 8006926:	3301      	adds	r3, #1
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	430b      	orrs	r3, r1
 800692e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800693a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	495c      	ldr	r1, [pc, #368]	; (8006ab4 <HAL_I2C_Init+0x274>)
 8006944:	428b      	cmp	r3, r1
 8006946:	d819      	bhi.n	800697c <HAL_I2C_Init+0x13c>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	1e59      	subs	r1, r3, #1
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	fbb1 f3f3 	udiv	r3, r1, r3
 8006956:	1c59      	adds	r1, r3, #1
 8006958:	f640 73fc 	movw	r3, #4092	; 0xffc
 800695c:	400b      	ands	r3, r1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <HAL_I2C_Init+0x138>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	1e59      	subs	r1, r3, #1
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006970:	3301      	adds	r3, #1
 8006972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006976:	e051      	b.n	8006a1c <HAL_I2C_Init+0x1dc>
 8006978:	2304      	movs	r3, #4
 800697a:	e04f      	b.n	8006a1c <HAL_I2C_Init+0x1dc>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d111      	bne.n	80069a8 <HAL_I2C_Init+0x168>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	1e58      	subs	r0, r3, #1
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6859      	ldr	r1, [r3, #4]
 800698c:	460b      	mov	r3, r1
 800698e:	005b      	lsls	r3, r3, #1
 8006990:	440b      	add	r3, r1
 8006992:	fbb0 f3f3 	udiv	r3, r0, r3
 8006996:	3301      	adds	r3, #1
 8006998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800699c:	2b00      	cmp	r3, #0
 800699e:	bf0c      	ite	eq
 80069a0:	2301      	moveq	r3, #1
 80069a2:	2300      	movne	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	e012      	b.n	80069ce <HAL_I2C_Init+0x18e>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	1e58      	subs	r0, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6859      	ldr	r1, [r3, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	440b      	add	r3, r1
 80069b6:	0099      	lsls	r1, r3, #2
 80069b8:	440b      	add	r3, r1
 80069ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80069be:	3301      	adds	r3, #1
 80069c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	bf0c      	ite	eq
 80069c8:	2301      	moveq	r3, #1
 80069ca:	2300      	movne	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <HAL_I2C_Init+0x196>
 80069d2:	2301      	movs	r3, #1
 80069d4:	e022      	b.n	8006a1c <HAL_I2C_Init+0x1dc>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10e      	bne.n	80069fc <HAL_I2C_Init+0x1bc>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	1e58      	subs	r0, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6859      	ldr	r1, [r3, #4]
 80069e6:	460b      	mov	r3, r1
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	440b      	add	r3, r1
 80069ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80069f0:	3301      	adds	r3, #1
 80069f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069fa:	e00f      	b.n	8006a1c <HAL_I2C_Init+0x1dc>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	1e58      	subs	r0, r3, #1
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6859      	ldr	r1, [r3, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	440b      	add	r3, r1
 8006a0a:	0099      	lsls	r1, r3, #2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a12:	3301      	adds	r3, #1
 8006a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	6809      	ldr	r1, [r1, #0]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	69da      	ldr	r2, [r3, #28]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	431a      	orrs	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6911      	ldr	r1, [r2, #16]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	68d2      	ldr	r2, [r2, #12]
 8006a56:	4311      	orrs	r1, r2
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6812      	ldr	r2, [r2, #0]
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	695a      	ldr	r2, [r3, #20]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	000186a0 	.word	0x000186a0
 8006ab8:	001e847f 	.word	0x001e847f
 8006abc:	003d08ff 	.word	0x003d08ff
 8006ac0:	431bde83 	.word	0x431bde83
 8006ac4:	10624dd3 	.word	0x10624dd3

08006ac8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af02      	add	r7, sp, #8
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	817b      	strh	r3, [r7, #10]
 8006ada:	460b      	mov	r3, r1
 8006adc:	813b      	strh	r3, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ae2:	f7fe fd1f 	bl	8005524 <HAL_GetTick>
 8006ae6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	f040 80d9 	bne.w	8006ca8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	2319      	movs	r3, #25
 8006afc:	2201      	movs	r2, #1
 8006afe:	496d      	ldr	r1, [pc, #436]	; (8006cb4 <HAL_I2C_Mem_Write+0x1ec>)
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 fc7f 	bl	8007404 <I2C_WaitOnFlagUntilTimeout>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e0cc      	b.n	8006caa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_I2C_Mem_Write+0x56>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e0c5      	b.n	8006caa <HAL_I2C_Mem_Write+0x1e2>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d007      	beq.n	8006b44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f042 0201 	orr.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2221      	movs	r2, #33	; 0x21
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2240      	movs	r2, #64	; 0x40
 8006b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a3a      	ldr	r2, [r7, #32]
 8006b6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	4a4d      	ldr	r2, [pc, #308]	; (8006cb8 <HAL_I2C_Mem_Write+0x1f0>)
 8006b84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b86:	88f8      	ldrh	r0, [r7, #6]
 8006b88:	893a      	ldrh	r2, [r7, #8]
 8006b8a:	8979      	ldrh	r1, [r7, #10]
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	9301      	str	r3, [sp, #4]
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	4603      	mov	r3, r0
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 fab6 	bl	8007108 <I2C_RequestMemoryWrite>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d052      	beq.n	8006c48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e081      	b.n	8006caa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 fd00 	bl	80075b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00d      	beq.n	8006bd2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d107      	bne.n	8006bce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e06b      	b.n	8006caa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	781a      	ldrb	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d11b      	bne.n	8006c48 <HAL_I2C_Mem_Write+0x180>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d017      	beq.n	8006c48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	781a      	ldrb	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1aa      	bne.n	8006ba6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 fcec 	bl	8007632 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00d      	beq.n	8006c7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d107      	bne.n	8006c78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e016      	b.n	8006caa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e000      	b.n	8006caa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006ca8:	2302      	movs	r3, #2
  }
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	00100002 	.word	0x00100002
 8006cb8:	ffff0000 	.word	0xffff0000

08006cbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08c      	sub	sp, #48	; 0x30
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	4608      	mov	r0, r1
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4603      	mov	r3, r0
 8006ccc:	817b      	strh	r3, [r7, #10]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	813b      	strh	r3, [r7, #8]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006cd6:	f7fe fc25 	bl	8005524 <HAL_GetTick>
 8006cda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	f040 8208 	bne.w	80070fa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	2319      	movs	r3, #25
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	497b      	ldr	r1, [pc, #492]	; (8006ee0 <HAL_I2C_Mem_Read+0x224>)
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 fb85 	bl	8007404 <I2C_WaitOnFlagUntilTimeout>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006d00:	2302      	movs	r3, #2
 8006d02:	e1fb      	b.n	80070fc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d101      	bne.n	8006d12 <HAL_I2C_Mem_Read+0x56>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e1f4      	b.n	80070fc <HAL_I2C_Mem_Read+0x440>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d007      	beq.n	8006d38 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0201 	orr.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2222      	movs	r2, #34	; 0x22
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2240      	movs	r2, #64	; 0x40
 8006d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006d68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4a5b      	ldr	r2, [pc, #364]	; (8006ee4 <HAL_I2C_Mem_Read+0x228>)
 8006d78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d7a:	88f8      	ldrh	r0, [r7, #6]
 8006d7c:	893a      	ldrh	r2, [r7, #8]
 8006d7e:	8979      	ldrh	r1, [r7, #10]
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	4603      	mov	r3, r0
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 fa52 	bl	8007234 <I2C_RequestMemoryRead>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e1b0      	b.n	80070fc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d113      	bne.n	8006dca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006da2:	2300      	movs	r3, #0
 8006da4:	623b      	str	r3, [r7, #32]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	623b      	str	r3, [r7, #32]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	623b      	str	r3, [r7, #32]
 8006db6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	e184      	b.n	80070d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d11b      	bne.n	8006e0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006de2:	2300      	movs	r3, #0
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	61fb      	str	r3, [r7, #28]
 8006df6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	e164      	b.n	80070d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d11b      	bne.n	8006e4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e32:	2300      	movs	r3, #0
 8006e34:	61bb      	str	r3, [r7, #24]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	61bb      	str	r3, [r7, #24]
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	e144      	b.n	80070d4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	617b      	str	r3, [r7, #20]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e60:	e138      	b.n	80070d4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	f200 80f1 	bhi.w	800704e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d123      	bne.n	8006ebc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 fc1b 	bl	80076b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e139      	b.n	80070fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006eba:	e10b      	b.n	80070d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d14e      	bne.n	8006f62 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	2200      	movs	r2, #0
 8006ecc:	4906      	ldr	r1, [pc, #24]	; (8006ee8 <HAL_I2C_Mem_Read+0x22c>)
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 fa98 	bl	8007404 <I2C_WaitOnFlagUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d008      	beq.n	8006eec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e10e      	b.n	80070fc <HAL_I2C_Mem_Read+0x440>
 8006ede:	bf00      	nop
 8006ee0:	00100002 	.word	0x00100002
 8006ee4:	ffff0000 	.word	0xffff0000
 8006ee8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	691a      	ldr	r2, [r3, #16]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	b2d2      	uxtb	r2, r2
 8006f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f60:	e0b8      	b.n	80070d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	2200      	movs	r2, #0
 8006f6a:	4966      	ldr	r1, [pc, #408]	; (8007104 <HAL_I2C_Mem_Read+0x448>)
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 fa49 	bl	8007404 <I2C_WaitOnFlagUntilTimeout>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e0bf      	b.n	80070fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	494f      	ldr	r1, [pc, #316]	; (8007104 <HAL_I2C_Mem_Read+0x448>)
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 fa1b 	bl	8007404 <I2C_WaitOnFlagUntilTimeout>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e091      	b.n	80070fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fe6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691a      	ldr	r2, [r3, #16]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007004:	3b01      	subs	r3, #1
 8007006:	b29a      	uxth	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007010:	b29b      	uxth	r3, r3
 8007012:	3b01      	subs	r3, #1
 8007014:	b29a      	uxth	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007036:	3b01      	subs	r3, #1
 8007038:	b29a      	uxth	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007042:	b29b      	uxth	r3, r3
 8007044:	3b01      	subs	r3, #1
 8007046:	b29a      	uxth	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800704c:	e042      	b.n	80070d4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800704e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007050:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 fb2e 	bl	80076b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e04c      	b.n	80070fc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800707e:	3b01      	subs	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	f003 0304 	and.w	r3, r3, #4
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d118      	bne.n	80070d4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	691a      	ldr	r2, [r3, #16]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	b2d2      	uxtb	r2, r2
 80070ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3b01      	subs	r3, #1
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f47f aec2 	bne.w	8006e62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	e000      	b.n	80070fc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80070fa:	2302      	movs	r3, #2
  }
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3728      	adds	r7, #40	; 0x28
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	00010004 	.word	0x00010004

08007108 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af02      	add	r7, sp, #8
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	4608      	mov	r0, r1
 8007112:	4611      	mov	r1, r2
 8007114:	461a      	mov	r2, r3
 8007116:	4603      	mov	r3, r0
 8007118:	817b      	strh	r3, [r7, #10]
 800711a:	460b      	mov	r3, r1
 800711c:	813b      	strh	r3, [r7, #8]
 800711e:	4613      	mov	r3, r2
 8007120:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007130:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	2200      	movs	r2, #0
 800713a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 f960 	bl	8007404 <I2C_WaitOnFlagUntilTimeout>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00d      	beq.n	8007166 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007158:	d103      	bne.n	8007162 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007160:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e05f      	b.n	8007226 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007166:	897b      	ldrh	r3, [r7, #10]
 8007168:	b2db      	uxtb	r3, r3
 800716a:	461a      	mov	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007174:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	6a3a      	ldr	r2, [r7, #32]
 800717a:	492d      	ldr	r1, [pc, #180]	; (8007230 <I2C_RequestMemoryWrite+0x128>)
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 f998 	bl	80074b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e04c      	b.n	8007226 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800718c:	2300      	movs	r3, #0
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a4:	6a39      	ldr	r1, [r7, #32]
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f000 fa02 	bl	80075b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00d      	beq.n	80071ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	d107      	bne.n	80071ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e02b      	b.n	8007226 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071ce:	88fb      	ldrh	r3, [r7, #6]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d105      	bne.n	80071e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071d4:	893b      	ldrh	r3, [r7, #8]
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	611a      	str	r2, [r3, #16]
 80071de:	e021      	b.n	8007224 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071e0:	893b      	ldrh	r3, [r7, #8]
 80071e2:	0a1b      	lsrs	r3, r3, #8
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f0:	6a39      	ldr	r1, [r7, #32]
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 f9dc 	bl	80075b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00d      	beq.n	800721a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	2b04      	cmp	r3, #4
 8007204:	d107      	bne.n	8007216 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007214:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e005      	b.n	8007226 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800721a:	893b      	ldrh	r3, [r7, #8]
 800721c:	b2da      	uxtb	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	00010002 	.word	0x00010002

08007234 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b088      	sub	sp, #32
 8007238:	af02      	add	r7, sp, #8
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	4608      	mov	r0, r1
 800723e:	4611      	mov	r1, r2
 8007240:	461a      	mov	r2, r3
 8007242:	4603      	mov	r3, r0
 8007244:	817b      	strh	r3, [r7, #10]
 8007246:	460b      	mov	r3, r1
 8007248:	813b      	strh	r3, [r7, #8]
 800724a:	4613      	mov	r3, r2
 800724c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800725c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800726c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	2200      	movs	r2, #0
 8007276:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 f8c2 	bl	8007404 <I2C_WaitOnFlagUntilTimeout>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00d      	beq.n	80072a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007294:	d103      	bne.n	800729e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800729c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e0aa      	b.n	80073f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072a2:	897b      	ldrh	r3, [r7, #10]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	461a      	mov	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	6a3a      	ldr	r2, [r7, #32]
 80072b6:	4952      	ldr	r1, [pc, #328]	; (8007400 <I2C_RequestMemoryRead+0x1cc>)
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 f8fa 	bl	80074b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e097      	b.n	80073f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c8:	2300      	movs	r3, #0
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072e0:	6a39      	ldr	r1, [r7, #32]
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 f964 	bl	80075b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00d      	beq.n	800730a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d107      	bne.n	8007306 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007304:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e076      	b.n	80073f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800730a:	88fb      	ldrh	r3, [r7, #6]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d105      	bne.n	800731c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007310:	893b      	ldrh	r3, [r7, #8]
 8007312:	b2da      	uxtb	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	611a      	str	r2, [r3, #16]
 800731a:	e021      	b.n	8007360 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800731c:	893b      	ldrh	r3, [r7, #8]
 800731e:	0a1b      	lsrs	r3, r3, #8
 8007320:	b29b      	uxth	r3, r3
 8007322:	b2da      	uxtb	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800732a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800732c:	6a39      	ldr	r1, [r7, #32]
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 f93e 	bl	80075b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00d      	beq.n	8007356 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	2b04      	cmp	r3, #4
 8007340:	d107      	bne.n	8007352 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007350:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e050      	b.n	80073f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007356:	893b      	ldrh	r3, [r7, #8]
 8007358:	b2da      	uxtb	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007362:	6a39      	ldr	r1, [r7, #32]
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 f923 	bl	80075b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00d      	beq.n	800738c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	2b04      	cmp	r3, #4
 8007376:	d107      	bne.n	8007388 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007386:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e035      	b.n	80073f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800739a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f82b 	bl	8007404 <I2C_WaitOnFlagUntilTimeout>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00d      	beq.n	80073d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c2:	d103      	bne.n	80073cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e013      	b.n	80073f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80073d0:	897b      	ldrh	r3, [r7, #10]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	f043 0301 	orr.w	r3, r3, #1
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	6a3a      	ldr	r2, [r7, #32]
 80073e4:	4906      	ldr	r1, [pc, #24]	; (8007400 <I2C_RequestMemoryRead+0x1cc>)
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 f863 	bl	80074b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	00010002 	.word	0x00010002

08007404 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	603b      	str	r3, [r7, #0]
 8007410:	4613      	mov	r3, r2
 8007412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007414:	e025      	b.n	8007462 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741c:	d021      	beq.n	8007462 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800741e:	f7fe f881 	bl	8005524 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d302      	bcc.n	8007434 <I2C_WaitOnFlagUntilTimeout+0x30>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d116      	bne.n	8007462 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2220      	movs	r2, #32
 800743e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f043 0220 	orr.w	r2, r3, #32
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e023      	b.n	80074aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	0c1b      	lsrs	r3, r3, #16
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b01      	cmp	r3, #1
 800746a:	d10d      	bne.n	8007488 <I2C_WaitOnFlagUntilTimeout+0x84>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	43da      	mvns	r2, r3
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4013      	ands	r3, r2
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	bf0c      	ite	eq
 800747e:	2301      	moveq	r3, #1
 8007480:	2300      	movne	r3, #0
 8007482:	b2db      	uxtb	r3, r3
 8007484:	461a      	mov	r2, r3
 8007486:	e00c      	b.n	80074a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	43da      	mvns	r2, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4013      	ands	r3, r2
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	bf0c      	ite	eq
 800749a:	2301      	moveq	r3, #1
 800749c:	2300      	movne	r3, #0
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	461a      	mov	r2, r3
 80074a2:	79fb      	ldrb	r3, [r7, #7]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d0b6      	beq.n	8007416 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	607a      	str	r2, [r7, #4]
 80074be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074c0:	e051      	b.n	8007566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d0:	d123      	bne.n	800751a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	f043 0204 	orr.w	r2, r3, #4
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e046      	b.n	80075a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007520:	d021      	beq.n	8007566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007522:	f7fd ffff 	bl	8005524 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	429a      	cmp	r2, r3
 8007530:	d302      	bcc.n	8007538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d116      	bne.n	8007566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2220      	movs	r2, #32
 8007542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	f043 0220 	orr.w	r2, r3, #32
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e020      	b.n	80075a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	0c1b      	lsrs	r3, r3, #16
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b01      	cmp	r3, #1
 800756e:	d10c      	bne.n	800758a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	43da      	mvns	r2, r3
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	4013      	ands	r3, r2
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	bf14      	ite	ne
 8007582:	2301      	movne	r3, #1
 8007584:	2300      	moveq	r3, #0
 8007586:	b2db      	uxtb	r3, r3
 8007588:	e00b      	b.n	80075a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	43da      	mvns	r2, r3
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	4013      	ands	r3, r2
 8007596:	b29b      	uxth	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	bf14      	ite	ne
 800759c:	2301      	movne	r3, #1
 800759e:	2300      	moveq	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d18d      	bne.n	80074c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075bc:	e02d      	b.n	800761a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 f8ce 	bl	8007760 <I2C_IsAcknowledgeFailed>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e02d      	b.n	800762a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d4:	d021      	beq.n	800761a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d6:	f7fd ffa5 	bl	8005524 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d302      	bcc.n	80075ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d116      	bne.n	800761a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	f043 0220 	orr.w	r2, r3, #32
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e007      	b.n	800762a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007624:	2b80      	cmp	r3, #128	; 0x80
 8007626:	d1ca      	bne.n	80075be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800763e:	e02d      	b.n	800769c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 f88d 	bl	8007760 <I2C_IsAcknowledgeFailed>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e02d      	b.n	80076ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007656:	d021      	beq.n	800769c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007658:	f7fd ff64 	bl	8005524 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	429a      	cmp	r2, r3
 8007666:	d302      	bcc.n	800766e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d116      	bne.n	800769c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007688:	f043 0220 	orr.w	r2, r3, #32
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e007      	b.n	80076ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	f003 0304 	and.w	r3, r3, #4
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d1ca      	bne.n	8007640 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076c0:	e042      	b.n	8007748 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	f003 0310 	and.w	r3, r3, #16
 80076cc:	2b10      	cmp	r3, #16
 80076ce:	d119      	bne.n	8007704 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f06f 0210 	mvn.w	r2, #16
 80076d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e029      	b.n	8007758 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007704:	f7fd ff0e 	bl	8005524 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	429a      	cmp	r2, r3
 8007712:	d302      	bcc.n	800771a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d116      	bne.n	8007748 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2220      	movs	r2, #32
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007734:	f043 0220 	orr.w	r2, r3, #32
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e007      	b.n	8007758 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007752:	2b40      	cmp	r3, #64	; 0x40
 8007754:	d1b5      	bne.n	80076c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007776:	d11b      	bne.n	80077b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007780:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779c:	f043 0204 	orr.w	r2, r3, #4
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
	...

080077c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e267      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d075      	beq.n	80078ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077de:	4b88      	ldr	r3, [pc, #544]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f003 030c 	and.w	r3, r3, #12
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	d00c      	beq.n	8007804 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077ea:	4b85      	ldr	r3, [pc, #532]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077f2:	2b08      	cmp	r3, #8
 80077f4:	d112      	bne.n	800781c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077f6:	4b82      	ldr	r3, [pc, #520]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007802:	d10b      	bne.n	800781c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007804:	4b7e      	ldr	r3, [pc, #504]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d05b      	beq.n	80078c8 <HAL_RCC_OscConfig+0x108>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d157      	bne.n	80078c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e242      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007824:	d106      	bne.n	8007834 <HAL_RCC_OscConfig+0x74>
 8007826:	4b76      	ldr	r3, [pc, #472]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a75      	ldr	r2, [pc, #468]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 800782c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	e01d      	b.n	8007870 <HAL_RCC_OscConfig+0xb0>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800783c:	d10c      	bne.n	8007858 <HAL_RCC_OscConfig+0x98>
 800783e:	4b70      	ldr	r3, [pc, #448]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a6f      	ldr	r2, [pc, #444]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 8007844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	4b6d      	ldr	r3, [pc, #436]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a6c      	ldr	r2, [pc, #432]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 8007850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	e00b      	b.n	8007870 <HAL_RCC_OscConfig+0xb0>
 8007858:	4b69      	ldr	r3, [pc, #420]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a68      	ldr	r2, [pc, #416]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 800785e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	4b66      	ldr	r3, [pc, #408]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a65      	ldr	r2, [pc, #404]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 800786a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800786e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d013      	beq.n	80078a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007878:	f7fd fe54 	bl	8005524 <HAL_GetTick>
 800787c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800787e:	e008      	b.n	8007892 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007880:	f7fd fe50 	bl	8005524 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	2b64      	cmp	r3, #100	; 0x64
 800788c:	d901      	bls.n	8007892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e207      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007892:	4b5b      	ldr	r3, [pc, #364]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d0f0      	beq.n	8007880 <HAL_RCC_OscConfig+0xc0>
 800789e:	e014      	b.n	80078ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078a0:	f7fd fe40 	bl	8005524 <HAL_GetTick>
 80078a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078a6:	e008      	b.n	80078ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078a8:	f7fd fe3c 	bl	8005524 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	2b64      	cmp	r3, #100	; 0x64
 80078b4:	d901      	bls.n	80078ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e1f3      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078ba:	4b51      	ldr	r3, [pc, #324]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1f0      	bne.n	80078a8 <HAL_RCC_OscConfig+0xe8>
 80078c6:	e000      	b.n	80078ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d063      	beq.n	800799e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078d6:	4b4a      	ldr	r3, [pc, #296]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f003 030c 	and.w	r3, r3, #12
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00b      	beq.n	80078fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078e2:	4b47      	ldr	r3, [pc, #284]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078ea:	2b08      	cmp	r3, #8
 80078ec:	d11c      	bne.n	8007928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078ee:	4b44      	ldr	r3, [pc, #272]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d116      	bne.n	8007928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078fa:	4b41      	ldr	r3, [pc, #260]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d005      	beq.n	8007912 <HAL_RCC_OscConfig+0x152>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d001      	beq.n	8007912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e1c7      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007912:	4b3b      	ldr	r3, [pc, #236]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	00db      	lsls	r3, r3, #3
 8007920:	4937      	ldr	r1, [pc, #220]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 8007922:	4313      	orrs	r3, r2
 8007924:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007926:	e03a      	b.n	800799e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d020      	beq.n	8007972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007930:	4b34      	ldr	r3, [pc, #208]	; (8007a04 <HAL_RCC_OscConfig+0x244>)
 8007932:	2201      	movs	r2, #1
 8007934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007936:	f7fd fdf5 	bl	8005524 <HAL_GetTick>
 800793a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800793c:	e008      	b.n	8007950 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800793e:	f7fd fdf1 	bl	8005524 <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d901      	bls.n	8007950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e1a8      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007950:	4b2b      	ldr	r3, [pc, #172]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d0f0      	beq.n	800793e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800795c:	4b28      	ldr	r3, [pc, #160]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	00db      	lsls	r3, r3, #3
 800796a:	4925      	ldr	r1, [pc, #148]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 800796c:	4313      	orrs	r3, r2
 800796e:	600b      	str	r3, [r1, #0]
 8007970:	e015      	b.n	800799e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007972:	4b24      	ldr	r3, [pc, #144]	; (8007a04 <HAL_RCC_OscConfig+0x244>)
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007978:	f7fd fdd4 	bl	8005524 <HAL_GetTick>
 800797c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800797e:	e008      	b.n	8007992 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007980:	f7fd fdd0 	bl	8005524 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e187      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007992:	4b1b      	ldr	r3, [pc, #108]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1f0      	bne.n	8007980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0308 	and.w	r3, r3, #8
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d036      	beq.n	8007a18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d016      	beq.n	80079e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079b2:	4b15      	ldr	r3, [pc, #84]	; (8007a08 <HAL_RCC_OscConfig+0x248>)
 80079b4:	2201      	movs	r2, #1
 80079b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079b8:	f7fd fdb4 	bl	8005524 <HAL_GetTick>
 80079bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079be:	e008      	b.n	80079d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079c0:	f7fd fdb0 	bl	8005524 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d901      	bls.n	80079d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e167      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079d2:	4b0b      	ldr	r3, [pc, #44]	; (8007a00 <HAL_RCC_OscConfig+0x240>)
 80079d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079d6:	f003 0302 	and.w	r3, r3, #2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0f0      	beq.n	80079c0 <HAL_RCC_OscConfig+0x200>
 80079de:	e01b      	b.n	8007a18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079e0:	4b09      	ldr	r3, [pc, #36]	; (8007a08 <HAL_RCC_OscConfig+0x248>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079e6:	f7fd fd9d 	bl	8005524 <HAL_GetTick>
 80079ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079ec:	e00e      	b.n	8007a0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079ee:	f7fd fd99 	bl	8005524 <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d907      	bls.n	8007a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e150      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
 8007a00:	40023800 	.word	0x40023800
 8007a04:	42470000 	.word	0x42470000
 8007a08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a0c:	4b88      	ldr	r3, [pc, #544]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1ea      	bne.n	80079ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 8097 	beq.w	8007b54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a26:	2300      	movs	r3, #0
 8007a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a2a:	4b81      	ldr	r3, [pc, #516]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10f      	bne.n	8007a56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a36:	2300      	movs	r3, #0
 8007a38:	60bb      	str	r3, [r7, #8]
 8007a3a:	4b7d      	ldr	r3, [pc, #500]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	4a7c      	ldr	r2, [pc, #496]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a44:	6413      	str	r3, [r2, #64]	; 0x40
 8007a46:	4b7a      	ldr	r3, [pc, #488]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a4e:	60bb      	str	r3, [r7, #8]
 8007a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a52:	2301      	movs	r3, #1
 8007a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a56:	4b77      	ldr	r3, [pc, #476]	; (8007c34 <HAL_RCC_OscConfig+0x474>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d118      	bne.n	8007a94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a62:	4b74      	ldr	r3, [pc, #464]	; (8007c34 <HAL_RCC_OscConfig+0x474>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a73      	ldr	r2, [pc, #460]	; (8007c34 <HAL_RCC_OscConfig+0x474>)
 8007a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a6e:	f7fd fd59 	bl	8005524 <HAL_GetTick>
 8007a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a74:	e008      	b.n	8007a88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a76:	f7fd fd55 	bl	8005524 <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d901      	bls.n	8007a88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e10c      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a88:	4b6a      	ldr	r3, [pc, #424]	; (8007c34 <HAL_RCC_OscConfig+0x474>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0f0      	beq.n	8007a76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d106      	bne.n	8007aaa <HAL_RCC_OscConfig+0x2ea>
 8007a9c:	4b64      	ldr	r3, [pc, #400]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa0:	4a63      	ldr	r2, [pc, #396]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007aa2:	f043 0301 	orr.w	r3, r3, #1
 8007aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8007aa8:	e01c      	b.n	8007ae4 <HAL_RCC_OscConfig+0x324>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	2b05      	cmp	r3, #5
 8007ab0:	d10c      	bne.n	8007acc <HAL_RCC_OscConfig+0x30c>
 8007ab2:	4b5f      	ldr	r3, [pc, #380]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab6:	4a5e      	ldr	r2, [pc, #376]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007ab8:	f043 0304 	orr.w	r3, r3, #4
 8007abc:	6713      	str	r3, [r2, #112]	; 0x70
 8007abe:	4b5c      	ldr	r3, [pc, #368]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac2:	4a5b      	ldr	r2, [pc, #364]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007ac4:	f043 0301 	orr.w	r3, r3, #1
 8007ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8007aca:	e00b      	b.n	8007ae4 <HAL_RCC_OscConfig+0x324>
 8007acc:	4b58      	ldr	r3, [pc, #352]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad0:	4a57      	ldr	r2, [pc, #348]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007ad2:	f023 0301 	bic.w	r3, r3, #1
 8007ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad8:	4b55      	ldr	r3, [pc, #340]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007adc:	4a54      	ldr	r2, [pc, #336]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007ade:	f023 0304 	bic.w	r3, r3, #4
 8007ae2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d015      	beq.n	8007b18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aec:	f7fd fd1a 	bl	8005524 <HAL_GetTick>
 8007af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007af2:	e00a      	b.n	8007b0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007af4:	f7fd fd16 	bl	8005524 <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d901      	bls.n	8007b0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e0cb      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b0a:	4b49      	ldr	r3, [pc, #292]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0ee      	beq.n	8007af4 <HAL_RCC_OscConfig+0x334>
 8007b16:	e014      	b.n	8007b42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b18:	f7fd fd04 	bl	8005524 <HAL_GetTick>
 8007b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b1e:	e00a      	b.n	8007b36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b20:	f7fd fd00 	bl	8005524 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e0b5      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b36:	4b3e      	ldr	r3, [pc, #248]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1ee      	bne.n	8007b20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d105      	bne.n	8007b54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b48:	4b39      	ldr	r3, [pc, #228]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4c:	4a38      	ldr	r2, [pc, #224]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 80a1 	beq.w	8007ca0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b5e:	4b34      	ldr	r3, [pc, #208]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f003 030c 	and.w	r3, r3, #12
 8007b66:	2b08      	cmp	r3, #8
 8007b68:	d05c      	beq.n	8007c24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d141      	bne.n	8007bf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b72:	4b31      	ldr	r3, [pc, #196]	; (8007c38 <HAL_RCC_OscConfig+0x478>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b78:	f7fd fcd4 	bl	8005524 <HAL_GetTick>
 8007b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b7e:	e008      	b.n	8007b92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b80:	f7fd fcd0 	bl	8005524 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d901      	bls.n	8007b92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e087      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b92:	4b27      	ldr	r3, [pc, #156]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1f0      	bne.n	8007b80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	69da      	ldr	r2, [r3, #28]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	019b      	lsls	r3, r3, #6
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb4:	085b      	lsrs	r3, r3, #1
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	041b      	lsls	r3, r3, #16
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc0:	061b      	lsls	r3, r3, #24
 8007bc2:	491b      	ldr	r1, [pc, #108]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bc8:	4b1b      	ldr	r3, [pc, #108]	; (8007c38 <HAL_RCC_OscConfig+0x478>)
 8007bca:	2201      	movs	r2, #1
 8007bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bce:	f7fd fca9 	bl	8005524 <HAL_GetTick>
 8007bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bd4:	e008      	b.n	8007be8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bd6:	f7fd fca5 	bl	8005524 <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d901      	bls.n	8007be8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e05c      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007be8:	4b11      	ldr	r3, [pc, #68]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d0f0      	beq.n	8007bd6 <HAL_RCC_OscConfig+0x416>
 8007bf4:	e054      	b.n	8007ca0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bf6:	4b10      	ldr	r3, [pc, #64]	; (8007c38 <HAL_RCC_OscConfig+0x478>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bfc:	f7fd fc92 	bl	8005524 <HAL_GetTick>
 8007c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c02:	e008      	b.n	8007c16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c04:	f7fd fc8e 	bl	8005524 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d901      	bls.n	8007c16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e045      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c16:	4b06      	ldr	r3, [pc, #24]	; (8007c30 <HAL_RCC_OscConfig+0x470>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1f0      	bne.n	8007c04 <HAL_RCC_OscConfig+0x444>
 8007c22:	e03d      	b.n	8007ca0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d107      	bne.n	8007c3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e038      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
 8007c30:	40023800 	.word	0x40023800
 8007c34:	40007000 	.word	0x40007000
 8007c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c3c:	4b1b      	ldr	r3, [pc, #108]	; (8007cac <HAL_RCC_OscConfig+0x4ec>)
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d028      	beq.n	8007c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d121      	bne.n	8007c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d11a      	bne.n	8007c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d111      	bne.n	8007c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c82:	085b      	lsrs	r3, r3, #1
 8007c84:	3b01      	subs	r3, #1
 8007c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d107      	bne.n	8007c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d001      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e000      	b.n	8007ca2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	40023800 	.word	0x40023800

08007cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e0cc      	b.n	8007e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cc4:	4b68      	ldr	r3, [pc, #416]	; (8007e68 <HAL_RCC_ClockConfig+0x1b8>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d90c      	bls.n	8007cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cd2:	4b65      	ldr	r3, [pc, #404]	; (8007e68 <HAL_RCC_ClockConfig+0x1b8>)
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cda:	4b63      	ldr	r3, [pc, #396]	; (8007e68 <HAL_RCC_ClockConfig+0x1b8>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0307 	and.w	r3, r3, #7
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d001      	beq.n	8007cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e0b8      	b.n	8007e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d020      	beq.n	8007d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d04:	4b59      	ldr	r3, [pc, #356]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	4a58      	ldr	r2, [pc, #352]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0308 	and.w	r3, r3, #8
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d1c:	4b53      	ldr	r3, [pc, #332]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	4a52      	ldr	r2, [pc, #328]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d28:	4b50      	ldr	r3, [pc, #320]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	494d      	ldr	r1, [pc, #308]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d044      	beq.n	8007dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d107      	bne.n	8007d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d4e:	4b47      	ldr	r3, [pc, #284]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d119      	bne.n	8007d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e07f      	b.n	8007e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d003      	beq.n	8007d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d107      	bne.n	8007d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d6e:	4b3f      	ldr	r3, [pc, #252]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d109      	bne.n	8007d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e06f      	b.n	8007e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d7e:	4b3b      	ldr	r3, [pc, #236]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e067      	b.n	8007e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d8e:	4b37      	ldr	r3, [pc, #220]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f023 0203 	bic.w	r2, r3, #3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	4934      	ldr	r1, [pc, #208]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007da0:	f7fd fbc0 	bl	8005524 <HAL_GetTick>
 8007da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007da6:	e00a      	b.n	8007dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007da8:	f7fd fbbc 	bl	8005524 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e04f      	b.n	8007e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dbe:	4b2b      	ldr	r3, [pc, #172]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 020c 	and.w	r2, r3, #12
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d1eb      	bne.n	8007da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007dd0:	4b25      	ldr	r3, [pc, #148]	; (8007e68 <HAL_RCC_ClockConfig+0x1b8>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0307 	and.w	r3, r3, #7
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d20c      	bcs.n	8007df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dde:	4b22      	ldr	r3, [pc, #136]	; (8007e68 <HAL_RCC_ClockConfig+0x1b8>)
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	b2d2      	uxtb	r2, r2
 8007de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007de6:	4b20      	ldr	r3, [pc, #128]	; (8007e68 <HAL_RCC_ClockConfig+0x1b8>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0307 	and.w	r3, r3, #7
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d001      	beq.n	8007df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e032      	b.n	8007e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0304 	and.w	r3, r3, #4
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d008      	beq.n	8007e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e04:	4b19      	ldr	r3, [pc, #100]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	4916      	ldr	r1, [pc, #88]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0308 	and.w	r3, r3, #8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e22:	4b12      	ldr	r3, [pc, #72]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	490e      	ldr	r1, [pc, #56]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e36:	f000 f821 	bl	8007e7c <HAL_RCC_GetSysClockFreq>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	4b0b      	ldr	r3, [pc, #44]	; (8007e6c <HAL_RCC_ClockConfig+0x1bc>)
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	091b      	lsrs	r3, r3, #4
 8007e42:	f003 030f 	and.w	r3, r3, #15
 8007e46:	490a      	ldr	r1, [pc, #40]	; (8007e70 <HAL_RCC_ClockConfig+0x1c0>)
 8007e48:	5ccb      	ldrb	r3, [r1, r3]
 8007e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e4e:	4a09      	ldr	r2, [pc, #36]	; (8007e74 <HAL_RCC_ClockConfig+0x1c4>)
 8007e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e52:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <HAL_RCC_ClockConfig+0x1c8>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fd fb20 	bl	800549c <HAL_InitTick>

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	40023c00 	.word	0x40023c00
 8007e6c:	40023800 	.word	0x40023800
 8007e70:	08014500 	.word	0x08014500
 8007e74:	2000000c 	.word	0x2000000c
 8007e78:	20000010 	.word	0x20000010

08007e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e80:	b094      	sub	sp, #80	; 0x50
 8007e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	647b      	str	r3, [r7, #68]	; 0x44
 8007e88:	2300      	movs	r3, #0
 8007e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e94:	4b79      	ldr	r3, [pc, #484]	; (800807c <HAL_RCC_GetSysClockFreq+0x200>)
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f003 030c 	and.w	r3, r3, #12
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d00d      	beq.n	8007ebc <HAL_RCC_GetSysClockFreq+0x40>
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	f200 80e1 	bhi.w	8008068 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d003      	beq.n	8007eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007eae:	e0db      	b.n	8008068 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007eb0:	4b73      	ldr	r3, [pc, #460]	; (8008080 <HAL_RCC_GetSysClockFreq+0x204>)
 8007eb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007eb4:	e0db      	b.n	800806e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007eb6:	4b73      	ldr	r3, [pc, #460]	; (8008084 <HAL_RCC_GetSysClockFreq+0x208>)
 8007eb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007eba:	e0d8      	b.n	800806e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ebc:	4b6f      	ldr	r3, [pc, #444]	; (800807c <HAL_RCC_GetSysClockFreq+0x200>)
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ec4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ec6:	4b6d      	ldr	r3, [pc, #436]	; (800807c <HAL_RCC_GetSysClockFreq+0x200>)
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d063      	beq.n	8007f9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ed2:	4b6a      	ldr	r3, [pc, #424]	; (800807c <HAL_RCC_GetSysClockFreq+0x200>)
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	099b      	lsrs	r3, r3, #6
 8007ed8:	2200      	movs	r2, #0
 8007eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8007edc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007eee:	4622      	mov	r2, r4
 8007ef0:	462b      	mov	r3, r5
 8007ef2:	f04f 0000 	mov.w	r0, #0
 8007ef6:	f04f 0100 	mov.w	r1, #0
 8007efa:	0159      	lsls	r1, r3, #5
 8007efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f00:	0150      	lsls	r0, r2, #5
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	4621      	mov	r1, r4
 8007f08:	1a51      	subs	r1, r2, r1
 8007f0a:	6139      	str	r1, [r7, #16]
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8007f12:	617b      	str	r3, [r7, #20]
 8007f14:	f04f 0200 	mov.w	r2, #0
 8007f18:	f04f 0300 	mov.w	r3, #0
 8007f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f20:	4659      	mov	r1, fp
 8007f22:	018b      	lsls	r3, r1, #6
 8007f24:	4651      	mov	r1, sl
 8007f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f2a:	4651      	mov	r1, sl
 8007f2c:	018a      	lsls	r2, r1, #6
 8007f2e:	4651      	mov	r1, sl
 8007f30:	ebb2 0801 	subs.w	r8, r2, r1
 8007f34:	4659      	mov	r1, fp
 8007f36:	eb63 0901 	sbc.w	r9, r3, r1
 8007f3a:	f04f 0200 	mov.w	r2, #0
 8007f3e:	f04f 0300 	mov.w	r3, #0
 8007f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f4e:	4690      	mov	r8, r2
 8007f50:	4699      	mov	r9, r3
 8007f52:	4623      	mov	r3, r4
 8007f54:	eb18 0303 	adds.w	r3, r8, r3
 8007f58:	60bb      	str	r3, [r7, #8]
 8007f5a:	462b      	mov	r3, r5
 8007f5c:	eb49 0303 	adc.w	r3, r9, r3
 8007f60:	60fb      	str	r3, [r7, #12]
 8007f62:	f04f 0200 	mov.w	r2, #0
 8007f66:	f04f 0300 	mov.w	r3, #0
 8007f6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007f6e:	4629      	mov	r1, r5
 8007f70:	024b      	lsls	r3, r1, #9
 8007f72:	4621      	mov	r1, r4
 8007f74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007f78:	4621      	mov	r1, r4
 8007f7a:	024a      	lsls	r2, r1, #9
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f82:	2200      	movs	r2, #0
 8007f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f8c:	f7f8 fe7c 	bl	8000c88 <__aeabi_uldivmod>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4613      	mov	r3, r2
 8007f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f98:	e058      	b.n	800804c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f9a:	4b38      	ldr	r3, [pc, #224]	; (800807c <HAL_RCC_GetSysClockFreq+0x200>)
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	099b      	lsrs	r3, r3, #6
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007faa:	623b      	str	r3, [r7, #32]
 8007fac:	2300      	movs	r3, #0
 8007fae:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007fb4:	4642      	mov	r2, r8
 8007fb6:	464b      	mov	r3, r9
 8007fb8:	f04f 0000 	mov.w	r0, #0
 8007fbc:	f04f 0100 	mov.w	r1, #0
 8007fc0:	0159      	lsls	r1, r3, #5
 8007fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fc6:	0150      	lsls	r0, r2, #5
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4641      	mov	r1, r8
 8007fce:	ebb2 0a01 	subs.w	sl, r2, r1
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007fec:	ebb2 040a 	subs.w	r4, r2, sl
 8007ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8007ff4:	f04f 0200 	mov.w	r2, #0
 8007ff8:	f04f 0300 	mov.w	r3, #0
 8007ffc:	00eb      	lsls	r3, r5, #3
 8007ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008002:	00e2      	lsls	r2, r4, #3
 8008004:	4614      	mov	r4, r2
 8008006:	461d      	mov	r5, r3
 8008008:	4643      	mov	r3, r8
 800800a:	18e3      	adds	r3, r4, r3
 800800c:	603b      	str	r3, [r7, #0]
 800800e:	464b      	mov	r3, r9
 8008010:	eb45 0303 	adc.w	r3, r5, r3
 8008014:	607b      	str	r3, [r7, #4]
 8008016:	f04f 0200 	mov.w	r2, #0
 800801a:	f04f 0300 	mov.w	r3, #0
 800801e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008022:	4629      	mov	r1, r5
 8008024:	028b      	lsls	r3, r1, #10
 8008026:	4621      	mov	r1, r4
 8008028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800802c:	4621      	mov	r1, r4
 800802e:	028a      	lsls	r2, r1, #10
 8008030:	4610      	mov	r0, r2
 8008032:	4619      	mov	r1, r3
 8008034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008036:	2200      	movs	r2, #0
 8008038:	61bb      	str	r3, [r7, #24]
 800803a:	61fa      	str	r2, [r7, #28]
 800803c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008040:	f7f8 fe22 	bl	8000c88 <__aeabi_uldivmod>
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	4613      	mov	r3, r2
 800804a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800804c:	4b0b      	ldr	r3, [pc, #44]	; (800807c <HAL_RCC_GetSysClockFreq+0x200>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	0c1b      	lsrs	r3, r3, #16
 8008052:	f003 0303 	and.w	r3, r3, #3
 8008056:	3301      	adds	r3, #1
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800805c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800805e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008060:	fbb2 f3f3 	udiv	r3, r2, r3
 8008064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008066:	e002      	b.n	800806e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008068:	4b05      	ldr	r3, [pc, #20]	; (8008080 <HAL_RCC_GetSysClockFreq+0x204>)
 800806a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800806c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800806e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008070:	4618      	mov	r0, r3
 8008072:	3750      	adds	r7, #80	; 0x50
 8008074:	46bd      	mov	sp, r7
 8008076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800807a:	bf00      	nop
 800807c:	40023800 	.word	0x40023800
 8008080:	00f42400 	.word	0x00f42400
 8008084:	007a1200 	.word	0x007a1200

08008088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008088:	b480      	push	{r7}
 800808a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800808c:	4b03      	ldr	r3, [pc, #12]	; (800809c <HAL_RCC_GetHCLKFreq+0x14>)
 800808e:	681b      	ldr	r3, [r3, #0]
}
 8008090:	4618      	mov	r0, r3
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	2000000c 	.word	0x2000000c

080080a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80080a4:	f7ff fff0 	bl	8008088 <HAL_RCC_GetHCLKFreq>
 80080a8:	4602      	mov	r2, r0
 80080aa:	4b05      	ldr	r3, [pc, #20]	; (80080c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	0a9b      	lsrs	r3, r3, #10
 80080b0:	f003 0307 	and.w	r3, r3, #7
 80080b4:	4903      	ldr	r1, [pc, #12]	; (80080c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080b6:	5ccb      	ldrb	r3, [r1, r3]
 80080b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080bc:	4618      	mov	r0, r3
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	40023800 	.word	0x40023800
 80080c4:	08014510 	.word	0x08014510

080080c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80080cc:	f7ff ffdc 	bl	8008088 <HAL_RCC_GetHCLKFreq>
 80080d0:	4602      	mov	r2, r0
 80080d2:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	0b5b      	lsrs	r3, r3, #13
 80080d8:	f003 0307 	and.w	r3, r3, #7
 80080dc:	4903      	ldr	r1, [pc, #12]	; (80080ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80080de:	5ccb      	ldrb	r3, [r1, r3]
 80080e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	40023800 	.word	0x40023800
 80080ec:	08014510 	.word	0x08014510

080080f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e07b      	b.n	80081fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	2b00      	cmp	r3, #0
 8008108:	d108      	bne.n	800811c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008112:	d009      	beq.n	8008128 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	61da      	str	r2, [r3, #28]
 800811a:	e005      	b.n	8008128 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d106      	bne.n	8008148 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7fb fd92 	bl	8003c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2202      	movs	r2, #2
 800814c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800815e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008170:	431a      	orrs	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800817a:	431a      	orrs	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	431a      	orrs	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	431a      	orrs	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008198:	431a      	orrs	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081a2:	431a      	orrs	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a1b      	ldr	r3, [r3, #32]
 80081a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ac:	ea42 0103 	orr.w	r1, r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	0c1b      	lsrs	r3, r3, #16
 80081c6:	f003 0104 	and.w	r1, r3, #4
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	f003 0210 	and.w	r2, r3, #16
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	430a      	orrs	r2, r1
 80081d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	69da      	ldr	r2, [r3, #28]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b088      	sub	sp, #32
 8008206:	af00      	add	r7, sp, #0
 8008208:	60f8      	str	r0, [r7, #12]
 800820a:	60b9      	str	r1, [r7, #8]
 800820c:	603b      	str	r3, [r7, #0]
 800820e:	4613      	mov	r3, r2
 8008210:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800821c:	2b01      	cmp	r3, #1
 800821e:	d101      	bne.n	8008224 <HAL_SPI_Transmit+0x22>
 8008220:	2302      	movs	r3, #2
 8008222:	e126      	b.n	8008472 <HAL_SPI_Transmit+0x270>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800822c:	f7fd f97a 	bl	8005524 <HAL_GetTick>
 8008230:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008232:	88fb      	ldrh	r3, [r7, #6]
 8008234:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b01      	cmp	r3, #1
 8008240:	d002      	beq.n	8008248 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008242:	2302      	movs	r3, #2
 8008244:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008246:	e10b      	b.n	8008460 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d002      	beq.n	8008254 <HAL_SPI_Transmit+0x52>
 800824e:	88fb      	ldrh	r3, [r7, #6]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d102      	bne.n	800825a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008258:	e102      	b.n	8008460 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2203      	movs	r2, #3
 800825e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	88fa      	ldrh	r2, [r7, #6]
 8008272:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	88fa      	ldrh	r2, [r7, #6]
 8008278:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082a0:	d10f      	bne.n	80082c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082cc:	2b40      	cmp	r3, #64	; 0x40
 80082ce:	d007      	beq.n	80082e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082e8:	d14b      	bne.n	8008382 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <HAL_SPI_Transmit+0xf6>
 80082f2:	8afb      	ldrh	r3, [r7, #22]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d13e      	bne.n	8008376 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fc:	881a      	ldrh	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	1c9a      	adds	r2, r3, #2
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008312:	b29b      	uxth	r3, r3
 8008314:	3b01      	subs	r3, #1
 8008316:	b29a      	uxth	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800831c:	e02b      	b.n	8008376 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f003 0302 	and.w	r3, r3, #2
 8008328:	2b02      	cmp	r3, #2
 800832a:	d112      	bne.n	8008352 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008330:	881a      	ldrh	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833c:	1c9a      	adds	r2, r3, #2
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008346:	b29b      	uxth	r3, r3
 8008348:	3b01      	subs	r3, #1
 800834a:	b29a      	uxth	r2, r3
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008350:	e011      	b.n	8008376 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008352:	f7fd f8e7 	bl	8005524 <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	683a      	ldr	r2, [r7, #0]
 800835e:	429a      	cmp	r2, r3
 8008360:	d803      	bhi.n	800836a <HAL_SPI_Transmit+0x168>
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008368:	d102      	bne.n	8008370 <HAL_SPI_Transmit+0x16e>
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d102      	bne.n	8008376 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008374:	e074      	b.n	8008460 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800837a:	b29b      	uxth	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1ce      	bne.n	800831e <HAL_SPI_Transmit+0x11c>
 8008380:	e04c      	b.n	800841c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <HAL_SPI_Transmit+0x18e>
 800838a:	8afb      	ldrh	r3, [r7, #22]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d140      	bne.n	8008412 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	330c      	adds	r3, #12
 800839a:	7812      	ldrb	r2, [r2, #0]
 800839c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	3b01      	subs	r3, #1
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80083b6:	e02c      	b.n	8008412 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d113      	bne.n	80083ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	330c      	adds	r3, #12
 80083d0:	7812      	ldrb	r2, [r2, #0]
 80083d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	3b01      	subs	r3, #1
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80083ec:	e011      	b.n	8008412 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083ee:	f7fd f899 	bl	8005524 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d803      	bhi.n	8008406 <HAL_SPI_Transmit+0x204>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008404:	d102      	bne.n	800840c <HAL_SPI_Transmit+0x20a>
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d102      	bne.n	8008412 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008410:	e026      	b.n	8008460 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008416:	b29b      	uxth	r3, r3
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1cd      	bne.n	80083b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800841c:	69ba      	ldr	r2, [r7, #24]
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 fa63 	bl	80088ec <SPI_EndRxTxTransaction>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2220      	movs	r2, #32
 8008430:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800843a:	2300      	movs	r3, #0
 800843c:	613b      	str	r3, [r7, #16]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	613b      	str	r3, [r7, #16]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	613b      	str	r3, [r7, #16]
 800844e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	77fb      	strb	r3, [r7, #31]
 800845c:	e000      	b.n	8008460 <HAL_SPI_Transmit+0x25e>
  }

error:
 800845e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008470:	7ffb      	ldrb	r3, [r7, #31]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3720      	adds	r7, #32
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b08c      	sub	sp, #48	; 0x30
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	607a      	str	r2, [r7, #4]
 8008486:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008488:	2301      	movs	r3, #1
 800848a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008498:	2b01      	cmp	r3, #1
 800849a:	d101      	bne.n	80084a0 <HAL_SPI_TransmitReceive+0x26>
 800849c:	2302      	movs	r3, #2
 800849e:	e18a      	b.n	80087b6 <HAL_SPI_TransmitReceive+0x33c>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084a8:	f7fd f83c 	bl	8005524 <HAL_GetTick>
 80084ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80084be:	887b      	ldrh	r3, [r7, #2]
 80084c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80084c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d00f      	beq.n	80084ea <HAL_SPI_TransmitReceive+0x70>
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084d0:	d107      	bne.n	80084e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d103      	bne.n	80084e2 <HAL_SPI_TransmitReceive+0x68>
 80084da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084de:	2b04      	cmp	r3, #4
 80084e0:	d003      	beq.n	80084ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80084e2:	2302      	movs	r3, #2
 80084e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80084e8:	e15b      	b.n	80087a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d005      	beq.n	80084fc <HAL_SPI_TransmitReceive+0x82>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <HAL_SPI_TransmitReceive+0x82>
 80084f6:	887b      	ldrh	r3, [r7, #2]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d103      	bne.n	8008504 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008502:	e14e      	b.n	80087a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b04      	cmp	r3, #4
 800850e:	d003      	beq.n	8008518 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2205      	movs	r2, #5
 8008514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	887a      	ldrh	r2, [r7, #2]
 8008528:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	887a      	ldrh	r2, [r7, #2]
 800852e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	887a      	ldrh	r2, [r7, #2]
 800853a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	887a      	ldrh	r2, [r7, #2]
 8008540:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008558:	2b40      	cmp	r3, #64	; 0x40
 800855a:	d007      	beq.n	800856c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800856a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008574:	d178      	bne.n	8008668 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <HAL_SPI_TransmitReceive+0x10a>
 800857e:	8b7b      	ldrh	r3, [r7, #26]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d166      	bne.n	8008652 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008588:	881a      	ldrh	r2, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008594:	1c9a      	adds	r2, r3, #2
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800859e:	b29b      	uxth	r3, r3
 80085a0:	3b01      	subs	r3, #1
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085a8:	e053      	b.n	8008652 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f003 0302 	and.w	r3, r3, #2
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d11b      	bne.n	80085f0 <HAL_SPI_TransmitReceive+0x176>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d016      	beq.n	80085f0 <HAL_SPI_TransmitReceive+0x176>
 80085c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d113      	bne.n	80085f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085cc:	881a      	ldrh	r2, [r3, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d8:	1c9a      	adds	r2, r3, #2
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	3b01      	subs	r3, #1
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d119      	bne.n	8008632 <HAL_SPI_TransmitReceive+0x1b8>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008602:	b29b      	uxth	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	d014      	beq.n	8008632 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68da      	ldr	r2, [r3, #12]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	b292      	uxth	r2, r2
 8008614:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861a:	1c9a      	adds	r2, r3, #2
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008624:	b29b      	uxth	r3, r3
 8008626:	3b01      	subs	r3, #1
 8008628:	b29a      	uxth	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800862e:	2301      	movs	r3, #1
 8008630:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008632:	f7fc ff77 	bl	8005524 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800863e:	429a      	cmp	r2, r3
 8008640:	d807      	bhi.n	8008652 <HAL_SPI_TransmitReceive+0x1d8>
 8008642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d003      	beq.n	8008652 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008650:	e0a7      	b.n	80087a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008656:	b29b      	uxth	r3, r3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1a6      	bne.n	80085aa <HAL_SPI_TransmitReceive+0x130>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008660:	b29b      	uxth	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1a1      	bne.n	80085aa <HAL_SPI_TransmitReceive+0x130>
 8008666:	e07c      	b.n	8008762 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <HAL_SPI_TransmitReceive+0x1fc>
 8008670:	8b7b      	ldrh	r3, [r7, #26]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d16b      	bne.n	800874e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	330c      	adds	r3, #12
 8008680:	7812      	ldrb	r2, [r2, #0]
 8008682:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008692:	b29b      	uxth	r3, r3
 8008694:	3b01      	subs	r3, #1
 8008696:	b29a      	uxth	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800869c:	e057      	b.n	800874e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d11c      	bne.n	80086e6 <HAL_SPI_TransmitReceive+0x26c>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d017      	beq.n	80086e6 <HAL_SPI_TransmitReceive+0x26c>
 80086b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d114      	bne.n	80086e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	330c      	adds	r3, #12
 80086c6:	7812      	ldrb	r2, [r2, #0]
 80086c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086d8:	b29b      	uxth	r3, r3
 80086da:	3b01      	subs	r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d119      	bne.n	8008728 <HAL_SPI_TransmitReceive+0x2ae>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d014      	beq.n	8008728 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68da      	ldr	r2, [r3, #12]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008708:	b2d2      	uxtb	r2, r2
 800870a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800871a:	b29b      	uxth	r3, r3
 800871c:	3b01      	subs	r3, #1
 800871e:	b29a      	uxth	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008724:	2301      	movs	r3, #1
 8008726:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008728:	f7fc fefc 	bl	8005524 <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008734:	429a      	cmp	r2, r3
 8008736:	d803      	bhi.n	8008740 <HAL_SPI_TransmitReceive+0x2c6>
 8008738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873e:	d102      	bne.n	8008746 <HAL_SPI_TransmitReceive+0x2cc>
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	2b00      	cmp	r3, #0
 8008744:	d103      	bne.n	800874e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008746:	2303      	movs	r3, #3
 8008748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800874c:	e029      	b.n	80087a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008752:	b29b      	uxth	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1a2      	bne.n	800869e <HAL_SPI_TransmitReceive+0x224>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800875c:	b29b      	uxth	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d19d      	bne.n	800869e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008764:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 f8c0 	bl	80088ec <SPI_EndRxTxTransaction>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d006      	beq.n	8008780 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2220      	movs	r2, #32
 800877c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800877e:	e010      	b.n	80087a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10b      	bne.n	80087a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008788:	2300      	movs	r3, #0
 800878a:	617b      	str	r3, [r7, #20]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	617b      	str	r3, [r7, #20]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	617b      	str	r3, [r7, #20]
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	e000      	b.n	80087a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80087a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80087b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3730      	adds	r7, #48	; 0x30
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087cc:	b2db      	uxtb	r3, r3
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
	...

080087dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b088      	sub	sp, #32
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	603b      	str	r3, [r7, #0]
 80087e8:	4613      	mov	r3, r2
 80087ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087ec:	f7fc fe9a 	bl	8005524 <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	1a9b      	subs	r3, r3, r2
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	4413      	add	r3, r2
 80087fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087fc:	f7fc fe92 	bl	8005524 <HAL_GetTick>
 8008800:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008802:	4b39      	ldr	r3, [pc, #228]	; (80088e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	015b      	lsls	r3, r3, #5
 8008808:	0d1b      	lsrs	r3, r3, #20
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	fb02 f303 	mul.w	r3, r2, r3
 8008810:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008812:	e054      	b.n	80088be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881a:	d050      	beq.n	80088be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800881c:	f7fc fe82 	bl	8005524 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	69fa      	ldr	r2, [r7, #28]
 8008828:	429a      	cmp	r2, r3
 800882a:	d902      	bls.n	8008832 <SPI_WaitFlagStateUntilTimeout+0x56>
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d13d      	bne.n	80088ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008840:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800884a:	d111      	bne.n	8008870 <SPI_WaitFlagStateUntilTimeout+0x94>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008854:	d004      	beq.n	8008860 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800885e:	d107      	bne.n	8008870 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800886e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008878:	d10f      	bne.n	800889a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008898:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e017      	b.n	80088de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	689a      	ldr	r2, [r3, #8]
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	4013      	ands	r3, r2
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	bf0c      	ite	eq
 80088ce:	2301      	moveq	r3, #1
 80088d0:	2300      	movne	r3, #0
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	461a      	mov	r2, r3
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d19b      	bne.n	8008814 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3720      	adds	r7, #32
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	2000000c 	.word	0x2000000c

080088ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af02      	add	r7, sp, #8
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088f8:	4b1b      	ldr	r3, [pc, #108]	; (8008968 <SPI_EndRxTxTransaction+0x7c>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a1b      	ldr	r2, [pc, #108]	; (800896c <SPI_EndRxTxTransaction+0x80>)
 80088fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008902:	0d5b      	lsrs	r3, r3, #21
 8008904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008908:	fb02 f303 	mul.w	r3, r2, r3
 800890c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008916:	d112      	bne.n	800893e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2200      	movs	r2, #0
 8008920:	2180      	movs	r1, #128	; 0x80
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f7ff ff5a 	bl	80087dc <SPI_WaitFlagStateUntilTimeout>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d016      	beq.n	800895c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008932:	f043 0220 	orr.w	r2, r3, #32
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e00f      	b.n	800895e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00a      	beq.n	800895a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	3b01      	subs	r3, #1
 8008948:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008954:	2b80      	cmp	r3, #128	; 0x80
 8008956:	d0f2      	beq.n	800893e <SPI_EndRxTxTransaction+0x52>
 8008958:	e000      	b.n	800895c <SPI_EndRxTxTransaction+0x70>
        break;
 800895a:	bf00      	nop
  }

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	2000000c 	.word	0x2000000c
 800896c:	165e9f81 	.word	0x165e9f81

08008970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d101      	bne.n	8008982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e041      	b.n	8008a06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d106      	bne.n	800899c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7fb f9b0 	bl	8003cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2202      	movs	r2, #2
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3304      	adds	r3, #4
 80089ac:	4619      	mov	r1, r3
 80089ae:	4610      	mov	r0, r2
 80089b0:	f000 fdec 	bl	800958c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
	...

08008a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d001      	beq.n	8008a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e04e      	b.n	8008ac6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68da      	ldr	r2, [r3, #12]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f042 0201 	orr.w	r2, r2, #1
 8008a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a23      	ldr	r2, [pc, #140]	; (8008ad4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d022      	beq.n	8008a90 <HAL_TIM_Base_Start_IT+0x80>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a52:	d01d      	beq.n	8008a90 <HAL_TIM_Base_Start_IT+0x80>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a1f      	ldr	r2, [pc, #124]	; (8008ad8 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d018      	beq.n	8008a90 <HAL_TIM_Base_Start_IT+0x80>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a1e      	ldr	r2, [pc, #120]	; (8008adc <HAL_TIM_Base_Start_IT+0xcc>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d013      	beq.n	8008a90 <HAL_TIM_Base_Start_IT+0x80>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a1c      	ldr	r2, [pc, #112]	; (8008ae0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d00e      	beq.n	8008a90 <HAL_TIM_Base_Start_IT+0x80>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a1b      	ldr	r2, [pc, #108]	; (8008ae4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d009      	beq.n	8008a90 <HAL_TIM_Base_Start_IT+0x80>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a19      	ldr	r2, [pc, #100]	; (8008ae8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d004      	beq.n	8008a90 <HAL_TIM_Base_Start_IT+0x80>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a18      	ldr	r2, [pc, #96]	; (8008aec <HAL_TIM_Base_Start_IT+0xdc>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d111      	bne.n	8008ab4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f003 0307 	and.w	r3, r3, #7
 8008a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b06      	cmp	r3, #6
 8008aa0:	d010      	beq.n	8008ac4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f042 0201 	orr.w	r2, r2, #1
 8008ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ab2:	e007      	b.n	8008ac4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0201 	orr.w	r2, r2, #1
 8008ac2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	40010000 	.word	0x40010000
 8008ad8:	40000400 	.word	0x40000400
 8008adc:	40000800 	.word	0x40000800
 8008ae0:	40000c00 	.word	0x40000c00
 8008ae4:	40010400 	.word	0x40010400
 8008ae8:	40014000 	.word	0x40014000
 8008aec:	40001800 	.word	0x40001800

08008af0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e041      	b.n	8008b86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d106      	bne.n	8008b1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f839 	bl	8008b8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	4610      	mov	r0, r2
 8008b30:	f000 fd2c 	bl	800958c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b96:	bf00      	nop
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
	...

08008ba4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d109      	bne.n	8008bc8 <HAL_TIM_PWM_Start+0x24>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	bf14      	ite	ne
 8008bc0:	2301      	movne	r3, #1
 8008bc2:	2300      	moveq	r3, #0
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	e022      	b.n	8008c0e <HAL_TIM_PWM_Start+0x6a>
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2b04      	cmp	r3, #4
 8008bcc:	d109      	bne.n	8008be2 <HAL_TIM_PWM_Start+0x3e>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	bf14      	ite	ne
 8008bda:	2301      	movne	r3, #1
 8008bdc:	2300      	moveq	r3, #0
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	e015      	b.n	8008c0e <HAL_TIM_PWM_Start+0x6a>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b08      	cmp	r3, #8
 8008be6:	d109      	bne.n	8008bfc <HAL_TIM_PWM_Start+0x58>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	bf14      	ite	ne
 8008bf4:	2301      	movne	r3, #1
 8008bf6:	2300      	moveq	r3, #0
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	e008      	b.n	8008c0e <HAL_TIM_PWM_Start+0x6a>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	bf14      	ite	ne
 8008c08:	2301      	movne	r3, #1
 8008c0a:	2300      	moveq	r3, #0
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e07c      	b.n	8008d10 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d104      	bne.n	8008c26 <HAL_TIM_PWM_Start+0x82>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c24:	e013      	b.n	8008c4e <HAL_TIM_PWM_Start+0xaa>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b04      	cmp	r3, #4
 8008c2a:	d104      	bne.n	8008c36 <HAL_TIM_PWM_Start+0x92>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c34:	e00b      	b.n	8008c4e <HAL_TIM_PWM_Start+0xaa>
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d104      	bne.n	8008c46 <HAL_TIM_PWM_Start+0xa2>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c44:	e003      	b.n	8008c4e <HAL_TIM_PWM_Start+0xaa>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2202      	movs	r2, #2
 8008c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2201      	movs	r2, #1
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f001 f93e 	bl	8009ed8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a2d      	ldr	r2, [pc, #180]	; (8008d18 <HAL_TIM_PWM_Start+0x174>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d004      	beq.n	8008c70 <HAL_TIM_PWM_Start+0xcc>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a2c      	ldr	r2, [pc, #176]	; (8008d1c <HAL_TIM_PWM_Start+0x178>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d101      	bne.n	8008c74 <HAL_TIM_PWM_Start+0xd0>
 8008c70:	2301      	movs	r3, #1
 8008c72:	e000      	b.n	8008c76 <HAL_TIM_PWM_Start+0xd2>
 8008c74:	2300      	movs	r3, #0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d007      	beq.n	8008c8a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a22      	ldr	r2, [pc, #136]	; (8008d18 <HAL_TIM_PWM_Start+0x174>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d022      	beq.n	8008cda <HAL_TIM_PWM_Start+0x136>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9c:	d01d      	beq.n	8008cda <HAL_TIM_PWM_Start+0x136>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a1f      	ldr	r2, [pc, #124]	; (8008d20 <HAL_TIM_PWM_Start+0x17c>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d018      	beq.n	8008cda <HAL_TIM_PWM_Start+0x136>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a1d      	ldr	r2, [pc, #116]	; (8008d24 <HAL_TIM_PWM_Start+0x180>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d013      	beq.n	8008cda <HAL_TIM_PWM_Start+0x136>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a1c      	ldr	r2, [pc, #112]	; (8008d28 <HAL_TIM_PWM_Start+0x184>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d00e      	beq.n	8008cda <HAL_TIM_PWM_Start+0x136>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a16      	ldr	r2, [pc, #88]	; (8008d1c <HAL_TIM_PWM_Start+0x178>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d009      	beq.n	8008cda <HAL_TIM_PWM_Start+0x136>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a18      	ldr	r2, [pc, #96]	; (8008d2c <HAL_TIM_PWM_Start+0x188>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d004      	beq.n	8008cda <HAL_TIM_PWM_Start+0x136>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a16      	ldr	r2, [pc, #88]	; (8008d30 <HAL_TIM_PWM_Start+0x18c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d111      	bne.n	8008cfe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f003 0307 	and.w	r3, r3, #7
 8008ce4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b06      	cmp	r3, #6
 8008cea:	d010      	beq.n	8008d0e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f042 0201 	orr.w	r2, r2, #1
 8008cfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cfc:	e007      	b.n	8008d0e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f042 0201 	orr.w	r2, r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	40010000 	.word	0x40010000
 8008d1c:	40010400 	.word	0x40010400
 8008d20:	40000400 	.word	0x40000400
 8008d24:	40000800 	.word	0x40000800
 8008d28:	40000c00 	.word	0x40000c00
 8008d2c:	40014000 	.word	0x40014000
 8008d30:	40001800 	.word	0x40001800

08008d34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e041      	b.n	8008dca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d106      	bne.n	8008d60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f839 	bl	8008dd2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2202      	movs	r2, #2
 8008d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3304      	adds	r3, #4
 8008d70:	4619      	mov	r1, r3
 8008d72:	4610      	mov	r0, r2
 8008d74:	f000 fc0a 	bl	800958c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008dda:	bf00      	nop
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	f003 0302 	and.w	r3, r3, #2
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d122      	bne.n	8008e42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d11b      	bne.n	8008e42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f06f 0202 	mvn.w	r2, #2
 8008e12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	f003 0303 	and.w	r3, r3, #3
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d003      	beq.n	8008e30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7f9 fa49 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8008e2e:	e005      	b.n	8008e3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fb8d 	bl	8009550 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fb94 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	f003 0304 	and.w	r3, r3, #4
 8008e4c:	2b04      	cmp	r3, #4
 8008e4e:	d122      	bne.n	8008e96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	2b04      	cmp	r3, #4
 8008e5c:	d11b      	bne.n	8008e96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f06f 0204 	mvn.w	r2, #4
 8008e66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7f9 fa1f 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8008e82:	e005      	b.n	8008e90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fb63 	bl	8009550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fb6a 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	f003 0308 	and.w	r3, r3, #8
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	d122      	bne.n	8008eea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	f003 0308 	and.w	r3, r3, #8
 8008eae:	2b08      	cmp	r3, #8
 8008eb0:	d11b      	bne.n	8008eea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f06f 0208 	mvn.w	r2, #8
 8008eba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2204      	movs	r2, #4
 8008ec0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	69db      	ldr	r3, [r3, #28]
 8008ec8:	f003 0303 	and.w	r3, r3, #3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d003      	beq.n	8008ed8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7f9 f9f5 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8008ed6:	e005      	b.n	8008ee4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fb39 	bl	8009550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fb40 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	f003 0310 	and.w	r3, r3, #16
 8008ef4:	2b10      	cmp	r3, #16
 8008ef6:	d122      	bne.n	8008f3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	f003 0310 	and.w	r3, r3, #16
 8008f02:	2b10      	cmp	r3, #16
 8008f04:	d11b      	bne.n	8008f3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f06f 0210 	mvn.w	r2, #16
 8008f0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2208      	movs	r2, #8
 8008f14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69db      	ldr	r3, [r3, #28]
 8008f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7f9 f9cb 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8008f2a:	e005      	b.n	8008f38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fb0f 	bl	8009550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fb16 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d10e      	bne.n	8008f6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d107      	bne.n	8008f6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f06f 0201 	mvn.w	r2, #1
 8008f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7f9 fa4d 	bl	8002404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f74:	2b80      	cmp	r3, #128	; 0x80
 8008f76:	d10e      	bne.n	8008f96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f82:	2b80      	cmp	r3, #128	; 0x80
 8008f84:	d107      	bne.n	8008f96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f001 f84d 	bl	800a030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa0:	2b40      	cmp	r3, #64	; 0x40
 8008fa2:	d10e      	bne.n	8008fc2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fae:	2b40      	cmp	r3, #64	; 0x40
 8008fb0:	d107      	bne.n	8008fc2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fadb 	bl	8009578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	f003 0320 	and.w	r3, r3, #32
 8008fcc:	2b20      	cmp	r3, #32
 8008fce:	d10e      	bne.n	8008fee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	f003 0320 	and.w	r3, r3, #32
 8008fda:	2b20      	cmp	r3, #32
 8008fdc:	d107      	bne.n	8008fee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f06f 0220 	mvn.w	r2, #32
 8008fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f001 f817 	bl	800a01c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fee:	bf00      	nop
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b086      	sub	sp, #24
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	60f8      	str	r0, [r7, #12]
 8008ffe:	60b9      	str	r1, [r7, #8]
 8009000:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800900c:	2b01      	cmp	r3, #1
 800900e:	d101      	bne.n	8009014 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009010:	2302      	movs	r3, #2
 8009012:	e088      	b.n	8009126 <HAL_TIM_IC_ConfigChannel+0x130>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d11b      	bne.n	800905a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6818      	ldr	r0, [r3, #0]
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	6819      	ldr	r1, [r3, #0]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	f000 fd8d 	bl	8009b50 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	699a      	ldr	r2, [r3, #24]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f022 020c 	bic.w	r2, r2, #12
 8009044:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	6999      	ldr	r1, [r3, #24]
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	689a      	ldr	r2, [r3, #8]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	430a      	orrs	r2, r1
 8009056:	619a      	str	r2, [r3, #24]
 8009058:	e060      	b.n	800911c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b04      	cmp	r3, #4
 800905e:	d11c      	bne.n	800909a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6818      	ldr	r0, [r3, #0]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	6819      	ldr	r1, [r3, #0]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	f000 fe11 	bl	8009c96 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	699a      	ldr	r2, [r3, #24]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009082:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6999      	ldr	r1, [r3, #24]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	021a      	lsls	r2, r3, #8
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	430a      	orrs	r2, r1
 8009096:	619a      	str	r2, [r3, #24]
 8009098:	e040      	b.n	800911c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b08      	cmp	r3, #8
 800909e:	d11b      	bne.n	80090d8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6818      	ldr	r0, [r3, #0]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	6819      	ldr	r1, [r3, #0]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	f000 fe5e 	bl	8009d70 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	69da      	ldr	r2, [r3, #28]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 020c 	bic.w	r2, r2, #12
 80090c2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	69d9      	ldr	r1, [r3, #28]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	689a      	ldr	r2, [r3, #8]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	430a      	orrs	r2, r1
 80090d4:	61da      	str	r2, [r3, #28]
 80090d6:	e021      	b.n	800911c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b0c      	cmp	r3, #12
 80090dc:	d11c      	bne.n	8009118 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6818      	ldr	r0, [r3, #0]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	6819      	ldr	r1, [r3, #0]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	685a      	ldr	r2, [r3, #4]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	f000 fe7b 	bl	8009de8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	69da      	ldr	r2, [r3, #28]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009100:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	69d9      	ldr	r1, [r3, #28]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	021a      	lsls	r2, r3, #8
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	430a      	orrs	r2, r1
 8009114:	61da      	str	r2, [r3, #28]
 8009116:	e001      	b.n	800911c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009124:	7dfb      	ldrb	r3, [r7, #23]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
	...

08009130 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009146:	2b01      	cmp	r3, #1
 8009148:	d101      	bne.n	800914e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800914a:	2302      	movs	r3, #2
 800914c:	e0ae      	b.n	80092ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b0c      	cmp	r3, #12
 800915a:	f200 809f 	bhi.w	800929c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800915e:	a201      	add	r2, pc, #4	; (adr r2, 8009164 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009164:	08009199 	.word	0x08009199
 8009168:	0800929d 	.word	0x0800929d
 800916c:	0800929d 	.word	0x0800929d
 8009170:	0800929d 	.word	0x0800929d
 8009174:	080091d9 	.word	0x080091d9
 8009178:	0800929d 	.word	0x0800929d
 800917c:	0800929d 	.word	0x0800929d
 8009180:	0800929d 	.word	0x0800929d
 8009184:	0800921b 	.word	0x0800921b
 8009188:	0800929d 	.word	0x0800929d
 800918c:	0800929d 	.word	0x0800929d
 8009190:	0800929d 	.word	0x0800929d
 8009194:	0800925b 	.word	0x0800925b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68b9      	ldr	r1, [r7, #8]
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 fa94 	bl	80096cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	699a      	ldr	r2, [r3, #24]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f042 0208 	orr.w	r2, r2, #8
 80091b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	699a      	ldr	r2, [r3, #24]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f022 0204 	bic.w	r2, r2, #4
 80091c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6999      	ldr	r1, [r3, #24]
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	691a      	ldr	r2, [r3, #16]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	430a      	orrs	r2, r1
 80091d4:	619a      	str	r2, [r3, #24]
      break;
 80091d6:	e064      	b.n	80092a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68b9      	ldr	r1, [r7, #8]
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 fae4 	bl	80097ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	699a      	ldr	r2, [r3, #24]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	699a      	ldr	r2, [r3, #24]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6999      	ldr	r1, [r3, #24]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	021a      	lsls	r2, r3, #8
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	430a      	orrs	r2, r1
 8009216:	619a      	str	r2, [r3, #24]
      break;
 8009218:	e043      	b.n	80092a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68b9      	ldr	r1, [r7, #8]
 8009220:	4618      	mov	r0, r3
 8009222:	f000 fb39 	bl	8009898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	69da      	ldr	r2, [r3, #28]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f042 0208 	orr.w	r2, r2, #8
 8009234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	69da      	ldr	r2, [r3, #28]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f022 0204 	bic.w	r2, r2, #4
 8009244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	69d9      	ldr	r1, [r3, #28]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	691a      	ldr	r2, [r3, #16]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	430a      	orrs	r2, r1
 8009256:	61da      	str	r2, [r3, #28]
      break;
 8009258:	e023      	b.n	80092a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68b9      	ldr	r1, [r7, #8]
 8009260:	4618      	mov	r0, r3
 8009262:	f000 fb8d 	bl	8009980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	69da      	ldr	r2, [r3, #28]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	69da      	ldr	r2, [r3, #28]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	69d9      	ldr	r1, [r3, #28]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	021a      	lsls	r2, r3, #8
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	430a      	orrs	r2, r1
 8009298:	61da      	str	r2, [r3, #28]
      break;
 800929a:	e002      	b.n	80092a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	75fb      	strb	r3, [r7, #23]
      break;
 80092a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d101      	bne.n	80092d0 <HAL_TIM_ConfigClockSource+0x1c>
 80092cc:	2302      	movs	r3, #2
 80092ce:	e0b4      	b.n	800943a <HAL_TIM_ConfigClockSource+0x186>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80092ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009308:	d03e      	beq.n	8009388 <HAL_TIM_ConfigClockSource+0xd4>
 800930a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800930e:	f200 8087 	bhi.w	8009420 <HAL_TIM_ConfigClockSource+0x16c>
 8009312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009316:	f000 8086 	beq.w	8009426 <HAL_TIM_ConfigClockSource+0x172>
 800931a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800931e:	d87f      	bhi.n	8009420 <HAL_TIM_ConfigClockSource+0x16c>
 8009320:	2b70      	cmp	r3, #112	; 0x70
 8009322:	d01a      	beq.n	800935a <HAL_TIM_ConfigClockSource+0xa6>
 8009324:	2b70      	cmp	r3, #112	; 0x70
 8009326:	d87b      	bhi.n	8009420 <HAL_TIM_ConfigClockSource+0x16c>
 8009328:	2b60      	cmp	r3, #96	; 0x60
 800932a:	d050      	beq.n	80093ce <HAL_TIM_ConfigClockSource+0x11a>
 800932c:	2b60      	cmp	r3, #96	; 0x60
 800932e:	d877      	bhi.n	8009420 <HAL_TIM_ConfigClockSource+0x16c>
 8009330:	2b50      	cmp	r3, #80	; 0x50
 8009332:	d03c      	beq.n	80093ae <HAL_TIM_ConfigClockSource+0xfa>
 8009334:	2b50      	cmp	r3, #80	; 0x50
 8009336:	d873      	bhi.n	8009420 <HAL_TIM_ConfigClockSource+0x16c>
 8009338:	2b40      	cmp	r3, #64	; 0x40
 800933a:	d058      	beq.n	80093ee <HAL_TIM_ConfigClockSource+0x13a>
 800933c:	2b40      	cmp	r3, #64	; 0x40
 800933e:	d86f      	bhi.n	8009420 <HAL_TIM_ConfigClockSource+0x16c>
 8009340:	2b30      	cmp	r3, #48	; 0x30
 8009342:	d064      	beq.n	800940e <HAL_TIM_ConfigClockSource+0x15a>
 8009344:	2b30      	cmp	r3, #48	; 0x30
 8009346:	d86b      	bhi.n	8009420 <HAL_TIM_ConfigClockSource+0x16c>
 8009348:	2b20      	cmp	r3, #32
 800934a:	d060      	beq.n	800940e <HAL_TIM_ConfigClockSource+0x15a>
 800934c:	2b20      	cmp	r3, #32
 800934e:	d867      	bhi.n	8009420 <HAL_TIM_ConfigClockSource+0x16c>
 8009350:	2b00      	cmp	r3, #0
 8009352:	d05c      	beq.n	800940e <HAL_TIM_ConfigClockSource+0x15a>
 8009354:	2b10      	cmp	r3, #16
 8009356:	d05a      	beq.n	800940e <HAL_TIM_ConfigClockSource+0x15a>
 8009358:	e062      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6818      	ldr	r0, [r3, #0]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	6899      	ldr	r1, [r3, #8]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	685a      	ldr	r2, [r3, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	f000 fd95 	bl	8009e98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800937c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	609a      	str	r2, [r3, #8]
      break;
 8009386:	e04f      	b.n	8009428 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	6899      	ldr	r1, [r3, #8]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f000 fd7e 	bl	8009e98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689a      	ldr	r2, [r3, #8]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093aa:	609a      	str	r2, [r3, #8]
      break;
 80093ac:	e03c      	b.n	8009428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6818      	ldr	r0, [r3, #0]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	6859      	ldr	r1, [r3, #4]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	461a      	mov	r2, r3
 80093bc:	f000 fc3c 	bl	8009c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2150      	movs	r1, #80	; 0x50
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 fd4b 	bl	8009e62 <TIM_ITRx_SetConfig>
      break;
 80093cc:	e02c      	b.n	8009428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	6859      	ldr	r1, [r3, #4]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	461a      	mov	r2, r3
 80093dc:	f000 fc98 	bl	8009d10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2160      	movs	r1, #96	; 0x60
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 fd3b 	bl	8009e62 <TIM_ITRx_SetConfig>
      break;
 80093ec:	e01c      	b.n	8009428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	6859      	ldr	r1, [r3, #4]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	461a      	mov	r2, r3
 80093fc:	f000 fc1c 	bl	8009c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2140      	movs	r1, #64	; 0x40
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fd2b 	bl	8009e62 <TIM_ITRx_SetConfig>
      break;
 800940c:	e00c      	b.n	8009428 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4619      	mov	r1, r3
 8009418:	4610      	mov	r0, r2
 800941a:	f000 fd22 	bl	8009e62 <TIM_ITRx_SetConfig>
      break;
 800941e:	e003      	b.n	8009428 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	73fb      	strb	r3, [r7, #15]
      break;
 8009424:	e000      	b.n	8009428 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009438:	7bfb      	ldrb	r3, [r7, #15]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b082      	sub	sp, #8
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
 800944a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009452:	2b01      	cmp	r3, #1
 8009454:	d101      	bne.n	800945a <HAL_TIM_SlaveConfigSynchro+0x18>
 8009456:	2302      	movs	r3, #2
 8009458:	e031      	b.n	80094be <HAL_TIM_SlaveConfigSynchro+0x7c>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2202      	movs	r2, #2
 8009466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fadd 	bl	8009a2c <TIM_SlaveTimer_SetConfig>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d009      	beq.n	800948c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e018      	b.n	80094be <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68da      	ldr	r2, [r3, #12]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800949a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68da      	ldr	r2, [r3, #12]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80094aa:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80094d2:	2300      	movs	r3, #0
 80094d4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	2b0c      	cmp	r3, #12
 80094da:	d831      	bhi.n	8009540 <HAL_TIM_ReadCapturedValue+0x78>
 80094dc:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80094de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e2:	bf00      	nop
 80094e4:	08009519 	.word	0x08009519
 80094e8:	08009541 	.word	0x08009541
 80094ec:	08009541 	.word	0x08009541
 80094f0:	08009541 	.word	0x08009541
 80094f4:	08009523 	.word	0x08009523
 80094f8:	08009541 	.word	0x08009541
 80094fc:	08009541 	.word	0x08009541
 8009500:	08009541 	.word	0x08009541
 8009504:	0800952d 	.word	0x0800952d
 8009508:	08009541 	.word	0x08009541
 800950c:	08009541 	.word	0x08009541
 8009510:	08009541 	.word	0x08009541
 8009514:	08009537 	.word	0x08009537
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800951e:	60fb      	str	r3, [r7, #12]

      break;
 8009520:	e00f      	b.n	8009542 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009528:	60fb      	str	r3, [r7, #12]

      break;
 800952a:	e00a      	b.n	8009542 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009532:	60fb      	str	r3, [r7, #12]

      break;
 8009534:	e005      	b.n	8009542 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953c:	60fb      	str	r3, [r7, #12]

      break;
 800953e:	e000      	b.n	8009542 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009540:	bf00      	nop
  }

  return tmpreg;
 8009542:	68fb      	ldr	r3, [r7, #12]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a40      	ldr	r2, [pc, #256]	; (80096a0 <TIM_Base_SetConfig+0x114>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d013      	beq.n	80095cc <TIM_Base_SetConfig+0x40>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095aa:	d00f      	beq.n	80095cc <TIM_Base_SetConfig+0x40>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a3d      	ldr	r2, [pc, #244]	; (80096a4 <TIM_Base_SetConfig+0x118>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d00b      	beq.n	80095cc <TIM_Base_SetConfig+0x40>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a3c      	ldr	r2, [pc, #240]	; (80096a8 <TIM_Base_SetConfig+0x11c>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d007      	beq.n	80095cc <TIM_Base_SetConfig+0x40>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a3b      	ldr	r2, [pc, #236]	; (80096ac <TIM_Base_SetConfig+0x120>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d003      	beq.n	80095cc <TIM_Base_SetConfig+0x40>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a3a      	ldr	r2, [pc, #232]	; (80096b0 <TIM_Base_SetConfig+0x124>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d108      	bne.n	80095de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	4313      	orrs	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a2f      	ldr	r2, [pc, #188]	; (80096a0 <TIM_Base_SetConfig+0x114>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d02b      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ec:	d027      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a2c      	ldr	r2, [pc, #176]	; (80096a4 <TIM_Base_SetConfig+0x118>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d023      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a2b      	ldr	r2, [pc, #172]	; (80096a8 <TIM_Base_SetConfig+0x11c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d01f      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a2a      	ldr	r2, [pc, #168]	; (80096ac <TIM_Base_SetConfig+0x120>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d01b      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a29      	ldr	r2, [pc, #164]	; (80096b0 <TIM_Base_SetConfig+0x124>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d017      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a28      	ldr	r2, [pc, #160]	; (80096b4 <TIM_Base_SetConfig+0x128>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d013      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a27      	ldr	r2, [pc, #156]	; (80096b8 <TIM_Base_SetConfig+0x12c>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d00f      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a26      	ldr	r2, [pc, #152]	; (80096bc <TIM_Base_SetConfig+0x130>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d00b      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a25      	ldr	r2, [pc, #148]	; (80096c0 <TIM_Base_SetConfig+0x134>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d007      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a24      	ldr	r2, [pc, #144]	; (80096c4 <TIM_Base_SetConfig+0x138>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d003      	beq.n	800963e <TIM_Base_SetConfig+0xb2>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a23      	ldr	r2, [pc, #140]	; (80096c8 <TIM_Base_SetConfig+0x13c>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d108      	bne.n	8009650 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	4313      	orrs	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	4313      	orrs	r3, r2
 800965c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	689a      	ldr	r2, [r3, #8]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a0a      	ldr	r2, [pc, #40]	; (80096a0 <TIM_Base_SetConfig+0x114>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d003      	beq.n	8009684 <TIM_Base_SetConfig+0xf8>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a0c      	ldr	r2, [pc, #48]	; (80096b0 <TIM_Base_SetConfig+0x124>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d103      	bne.n	800968c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	691a      	ldr	r2, [r3, #16]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	615a      	str	r2, [r3, #20]
}
 8009692:	bf00      	nop
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	40010000 	.word	0x40010000
 80096a4:	40000400 	.word	0x40000400
 80096a8:	40000800 	.word	0x40000800
 80096ac:	40000c00 	.word	0x40000c00
 80096b0:	40010400 	.word	0x40010400
 80096b4:	40014000 	.word	0x40014000
 80096b8:	40014400 	.word	0x40014400
 80096bc:	40014800 	.word	0x40014800
 80096c0:	40001800 	.word	0x40001800
 80096c4:	40001c00 	.word	0x40001c00
 80096c8:	40002000 	.word	0x40002000

080096cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b087      	sub	sp, #28
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	f023 0201 	bic.w	r2, r3, #1
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f023 0303 	bic.w	r3, r3, #3
 8009702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	4313      	orrs	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f023 0302 	bic.w	r3, r3, #2
 8009714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	697a      	ldr	r2, [r7, #20]
 800971c:	4313      	orrs	r3, r2
 800971e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a20      	ldr	r2, [pc, #128]	; (80097a4 <TIM_OC1_SetConfig+0xd8>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d003      	beq.n	8009730 <TIM_OC1_SetConfig+0x64>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a1f      	ldr	r2, [pc, #124]	; (80097a8 <TIM_OC1_SetConfig+0xdc>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d10c      	bne.n	800974a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f023 0308 	bic.w	r3, r3, #8
 8009736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	4313      	orrs	r3, r2
 8009740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f023 0304 	bic.w	r3, r3, #4
 8009748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a15      	ldr	r2, [pc, #84]	; (80097a4 <TIM_OC1_SetConfig+0xd8>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d003      	beq.n	800975a <TIM_OC1_SetConfig+0x8e>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a14      	ldr	r2, [pc, #80]	; (80097a8 <TIM_OC1_SetConfig+0xdc>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d111      	bne.n	800977e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	4313      	orrs	r3, r2
 8009772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	4313      	orrs	r3, r2
 800977c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	621a      	str	r2, [r3, #32]
}
 8009798:	bf00      	nop
 800979a:	371c      	adds	r7, #28
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	40010000 	.word	0x40010000
 80097a8:	40010400 	.word	0x40010400

080097ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b087      	sub	sp, #28
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	f023 0210 	bic.w	r2, r3, #16
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	021b      	lsls	r3, r3, #8
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	f023 0320 	bic.w	r3, r3, #32
 80097f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	011b      	lsls	r3, r3, #4
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	4313      	orrs	r3, r2
 8009802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a22      	ldr	r2, [pc, #136]	; (8009890 <TIM_OC2_SetConfig+0xe4>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d003      	beq.n	8009814 <TIM_OC2_SetConfig+0x68>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a21      	ldr	r2, [pc, #132]	; (8009894 <TIM_OC2_SetConfig+0xe8>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d10d      	bne.n	8009830 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800981a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	011b      	lsls	r3, r3, #4
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	4313      	orrs	r3, r2
 8009826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800982e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a17      	ldr	r2, [pc, #92]	; (8009890 <TIM_OC2_SetConfig+0xe4>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d003      	beq.n	8009840 <TIM_OC2_SetConfig+0x94>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a16      	ldr	r2, [pc, #88]	; (8009894 <TIM_OC2_SetConfig+0xe8>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d113      	bne.n	8009868 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009846:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800984e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	4313      	orrs	r3, r2
 800985a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	4313      	orrs	r3, r2
 8009866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	621a      	str	r2, [r3, #32]
}
 8009882:	bf00      	nop
 8009884:	371c      	adds	r7, #28
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	40010000 	.word	0x40010000
 8009894:	40010400 	.word	0x40010400

08009898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009898:	b480      	push	{r7}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	69db      	ldr	r3, [r3, #28]
 80098be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f023 0303 	bic.w	r3, r3, #3
 80098ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	021b      	lsls	r3, r3, #8
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a21      	ldr	r2, [pc, #132]	; (8009978 <TIM_OC3_SetConfig+0xe0>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d003      	beq.n	80098fe <TIM_OC3_SetConfig+0x66>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a20      	ldr	r2, [pc, #128]	; (800997c <TIM_OC3_SetConfig+0xe4>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d10d      	bne.n	800991a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	021b      	lsls	r3, r3, #8
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	4313      	orrs	r3, r2
 8009910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a16      	ldr	r2, [pc, #88]	; (8009978 <TIM_OC3_SetConfig+0xe0>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d003      	beq.n	800992a <TIM_OC3_SetConfig+0x92>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a15      	ldr	r2, [pc, #84]	; (800997c <TIM_OC3_SetConfig+0xe4>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d113      	bne.n	8009952 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	011b      	lsls	r3, r3, #4
 8009940:	693a      	ldr	r2, [r7, #16]
 8009942:	4313      	orrs	r3, r2
 8009944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	011b      	lsls	r3, r3, #4
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	4313      	orrs	r3, r2
 8009950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	621a      	str	r2, [r3, #32]
}
 800996c:	bf00      	nop
 800996e:	371c      	adds	r7, #28
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	40010000 	.word	0x40010000
 800997c:	40010400 	.word	0x40010400

08009980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009980:	b480      	push	{r7}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a1b      	ldr	r3, [r3, #32]
 800998e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	021b      	lsls	r3, r3, #8
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	031b      	lsls	r3, r3, #12
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a12      	ldr	r2, [pc, #72]	; (8009a24 <TIM_OC4_SetConfig+0xa4>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d003      	beq.n	80099e8 <TIM_OC4_SetConfig+0x68>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a11      	ldr	r2, [pc, #68]	; (8009a28 <TIM_OC4_SetConfig+0xa8>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d109      	bne.n	80099fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	695b      	ldr	r3, [r3, #20]
 80099f4:	019b      	lsls	r3, r3, #6
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	621a      	str	r2, [r3, #32]
}
 8009a16:	bf00      	nop
 8009a18:	371c      	adds	r7, #28
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	40010000 	.word	0x40010000
 8009a28:	40010400 	.word	0x40010400

08009a2c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a48:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	f023 0307 	bic.w	r3, r3, #7
 8009a5a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	2b70      	cmp	r3, #112	; 0x70
 8009a74:	d01a      	beq.n	8009aac <TIM_SlaveTimer_SetConfig+0x80>
 8009a76:	2b70      	cmp	r3, #112	; 0x70
 8009a78:	d860      	bhi.n	8009b3c <TIM_SlaveTimer_SetConfig+0x110>
 8009a7a:	2b60      	cmp	r3, #96	; 0x60
 8009a7c:	d054      	beq.n	8009b28 <TIM_SlaveTimer_SetConfig+0xfc>
 8009a7e:	2b60      	cmp	r3, #96	; 0x60
 8009a80:	d85c      	bhi.n	8009b3c <TIM_SlaveTimer_SetConfig+0x110>
 8009a82:	2b50      	cmp	r3, #80	; 0x50
 8009a84:	d046      	beq.n	8009b14 <TIM_SlaveTimer_SetConfig+0xe8>
 8009a86:	2b50      	cmp	r3, #80	; 0x50
 8009a88:	d858      	bhi.n	8009b3c <TIM_SlaveTimer_SetConfig+0x110>
 8009a8a:	2b40      	cmp	r3, #64	; 0x40
 8009a8c:	d019      	beq.n	8009ac2 <TIM_SlaveTimer_SetConfig+0x96>
 8009a8e:	2b40      	cmp	r3, #64	; 0x40
 8009a90:	d854      	bhi.n	8009b3c <TIM_SlaveTimer_SetConfig+0x110>
 8009a92:	2b30      	cmp	r3, #48	; 0x30
 8009a94:	d055      	beq.n	8009b42 <TIM_SlaveTimer_SetConfig+0x116>
 8009a96:	2b30      	cmp	r3, #48	; 0x30
 8009a98:	d850      	bhi.n	8009b3c <TIM_SlaveTimer_SetConfig+0x110>
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	d051      	beq.n	8009b42 <TIM_SlaveTimer_SetConfig+0x116>
 8009a9e:	2b20      	cmp	r3, #32
 8009aa0:	d84c      	bhi.n	8009b3c <TIM_SlaveTimer_SetConfig+0x110>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d04d      	beq.n	8009b42 <TIM_SlaveTimer_SetConfig+0x116>
 8009aa6:	2b10      	cmp	r3, #16
 8009aa8:	d04b      	beq.n	8009b42 <TIM_SlaveTimer_SetConfig+0x116>
 8009aaa:	e047      	b.n	8009b3c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	68d9      	ldr	r1, [r3, #12]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	689a      	ldr	r2, [r3, #8]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	f000 f9ec 	bl	8009e98 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8009ac0:	e040      	b.n	8009b44 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b05      	cmp	r3, #5
 8009ac8:	d101      	bne.n	8009ace <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e03b      	b.n	8009b46 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6a1b      	ldr	r3, [r3, #32]
 8009ad4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	6a1a      	ldr	r2, [r3, #32]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f022 0201 	bic.w	r2, r2, #1
 8009ae4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009af4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	011b      	lsls	r3, r3, #4
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68ba      	ldr	r2, [r7, #8]
 8009b08:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	621a      	str	r2, [r3, #32]
      break;
 8009b12:	e017      	b.n	8009b44 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	6899      	ldr	r1, [r3, #8]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	461a      	mov	r2, r3
 8009b22:	f000 f889 	bl	8009c38 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009b26:	e00d      	b.n	8009b44 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6818      	ldr	r0, [r3, #0]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	6899      	ldr	r1, [r3, #8]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	461a      	mov	r2, r3
 8009b36:	f000 f8eb 	bl	8009d10 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009b3a:	e003      	b.n	8009b44 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b40:	e000      	b.n	8009b44 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009b42:	bf00      	nop
  }

  return status;
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
	...

08009b50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
 8009b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	f023 0201 	bic.w	r2, r3, #1
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	4a28      	ldr	r2, [pc, #160]	; (8009c1c <TIM_TI1_SetConfig+0xcc>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d01b      	beq.n	8009bb6 <TIM_TI1_SetConfig+0x66>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b84:	d017      	beq.n	8009bb6 <TIM_TI1_SetConfig+0x66>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	4a25      	ldr	r2, [pc, #148]	; (8009c20 <TIM_TI1_SetConfig+0xd0>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d013      	beq.n	8009bb6 <TIM_TI1_SetConfig+0x66>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	4a24      	ldr	r2, [pc, #144]	; (8009c24 <TIM_TI1_SetConfig+0xd4>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d00f      	beq.n	8009bb6 <TIM_TI1_SetConfig+0x66>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	4a23      	ldr	r2, [pc, #140]	; (8009c28 <TIM_TI1_SetConfig+0xd8>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d00b      	beq.n	8009bb6 <TIM_TI1_SetConfig+0x66>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	4a22      	ldr	r2, [pc, #136]	; (8009c2c <TIM_TI1_SetConfig+0xdc>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d007      	beq.n	8009bb6 <TIM_TI1_SetConfig+0x66>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	4a21      	ldr	r2, [pc, #132]	; (8009c30 <TIM_TI1_SetConfig+0xe0>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d003      	beq.n	8009bb6 <TIM_TI1_SetConfig+0x66>
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	4a20      	ldr	r2, [pc, #128]	; (8009c34 <TIM_TI1_SetConfig+0xe4>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d101      	bne.n	8009bba <TIM_TI1_SetConfig+0x6a>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e000      	b.n	8009bbc <TIM_TI1_SetConfig+0x6c>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d008      	beq.n	8009bd2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	f023 0303 	bic.w	r3, r3, #3
 8009bc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009bc8:	697a      	ldr	r2, [r7, #20]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	e003      	b.n	8009bda <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f043 0301 	orr.w	r3, r3, #1
 8009bd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009be0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	011b      	lsls	r3, r3, #4
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	697a      	ldr	r2, [r7, #20]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	f023 030a 	bic.w	r3, r3, #10
 8009bf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	f003 030a 	and.w	r3, r3, #10
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	693a      	ldr	r2, [r7, #16]
 8009c0c:	621a      	str	r2, [r3, #32]
}
 8009c0e:	bf00      	nop
 8009c10:	371c      	adds	r7, #28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	40010000 	.word	0x40010000
 8009c20:	40000400 	.word	0x40000400
 8009c24:	40000800 	.word	0x40000800
 8009c28:	40000c00 	.word	0x40000c00
 8009c2c:	40010400 	.word	0x40010400
 8009c30:	40014000 	.word	0x40014000
 8009c34:	40001800 	.word	0x40001800

08009c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6a1b      	ldr	r3, [r3, #32]
 8009c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	f023 0201 	bic.w	r2, r3, #1
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	011b      	lsls	r3, r3, #4
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f023 030a 	bic.w	r3, r3, #10
 8009c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	621a      	str	r2, [r3, #32]
}
 8009c8a:	bf00      	nop
 8009c8c:	371c      	adds	r7, #28
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b087      	sub	sp, #28
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	60f8      	str	r0, [r7, #12]
 8009c9e:	60b9      	str	r1, [r7, #8]
 8009ca0:	607a      	str	r2, [r7, #4]
 8009ca2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6a1b      	ldr	r3, [r3, #32]
 8009ca8:	f023 0210 	bic.w	r2, r3, #16
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	021b      	lsls	r3, r3, #8
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009cd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	031b      	lsls	r3, r3, #12
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ce8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	011b      	lsls	r3, r3, #4
 8009cee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	621a      	str	r2, [r3, #32]
}
 8009d04:	bf00      	nop
 8009d06:	371c      	adds	r7, #28
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b087      	sub	sp, #28
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6a1b      	ldr	r3, [r3, #32]
 8009d20:	f023 0210 	bic.w	r2, r3, #16
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	031b      	lsls	r3, r3, #12
 8009d40:	697a      	ldr	r2, [r7, #20]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	011b      	lsls	r3, r3, #4
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	621a      	str	r2, [r3, #32]
}
 8009d64:	bf00      	nop
 8009d66:	371c      	adds	r7, #28
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b087      	sub	sp, #28
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
 8009d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6a1b      	ldr	r3, [r3, #32]
 8009d94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	f023 0303 	bic.w	r3, r3, #3
 8009d9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009d9e:	697a      	ldr	r2, [r7, #20]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	011b      	lsls	r3, r3, #4
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009dc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	021b      	lsls	r3, r3, #8
 8009dc6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009dca:	693a      	ldr	r2, [r7, #16]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	697a      	ldr	r2, [r7, #20]
 8009dd4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	693a      	ldr	r2, [r7, #16]
 8009dda:	621a      	str	r2, [r3, #32]
}
 8009ddc:	bf00      	nop
 8009dde:	371c      	adds	r7, #28
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b087      	sub	sp, #28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
 8009df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	021b      	lsls	r3, r3, #8
 8009e1a:	697a      	ldr	r2, [r7, #20]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	031b      	lsls	r3, r3, #12
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009e3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	031b      	lsls	r3, r3, #12
 8009e40:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	697a      	ldr	r2, [r7, #20]
 8009e4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	621a      	str	r2, [r3, #32]
}
 8009e56:	bf00      	nop
 8009e58:	371c      	adds	r7, #28
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b085      	sub	sp, #20
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	f043 0307 	orr.w	r3, r3, #7
 8009e84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	609a      	str	r2, [r3, #8]
}
 8009e8c:	bf00      	nop
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
 8009ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009eb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	021a      	lsls	r2, r3, #8
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	431a      	orrs	r2, r3
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	697a      	ldr	r2, [r7, #20]
 8009eca:	609a      	str	r2, [r3, #8]
}
 8009ecc:	bf00      	nop
 8009ece:	371c      	adds	r7, #28
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b087      	sub	sp, #28
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	f003 031f 	and.w	r3, r3, #31
 8009eea:	2201      	movs	r2, #1
 8009eec:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6a1a      	ldr	r2, [r3, #32]
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	43db      	mvns	r3, r3
 8009efa:	401a      	ands	r2, r3
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6a1a      	ldr	r2, [r3, #32]
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	f003 031f 	and.w	r3, r3, #31
 8009f0a:	6879      	ldr	r1, [r7, #4]
 8009f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f10:	431a      	orrs	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	621a      	str	r2, [r3, #32]
}
 8009f16:	bf00      	nop
 8009f18:	371c      	adds	r7, #28
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
	...

08009f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d101      	bne.n	8009f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f38:	2302      	movs	r3, #2
 8009f3a:	e05a      	b.n	8009ff2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2202      	movs	r2, #2
 8009f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a21      	ldr	r2, [pc, #132]	; (800a000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d022      	beq.n	8009fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f88:	d01d      	beq.n	8009fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a1d      	ldr	r2, [pc, #116]	; (800a004 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d018      	beq.n	8009fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a1b      	ldr	r2, [pc, #108]	; (800a008 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d013      	beq.n	8009fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a1a      	ldr	r2, [pc, #104]	; (800a00c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d00e      	beq.n	8009fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a18      	ldr	r2, [pc, #96]	; (800a010 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d009      	beq.n	8009fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a17      	ldr	r2, [pc, #92]	; (800a014 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d004      	beq.n	8009fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a15      	ldr	r2, [pc, #84]	; (800a018 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d10c      	bne.n	8009fe0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	40010000 	.word	0x40010000
 800a004:	40000400 	.word	0x40000400
 800a008:	40000800 	.word	0x40000800
 800a00c:	40000c00 	.word	0x40000c00
 800a010:	40010400 	.word	0x40010400
 800a014:	40014000 	.word	0x40014000
 800a018:	40001800 	.word	0x40001800

0800a01c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	e03f      	b.n	800a0d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d106      	bne.n	800a070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7f9 ff56 	bl	8003f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2224      	movs	r2, #36	; 0x24
 800a074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68da      	ldr	r2, [r3, #12]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 fea3 	bl	800add4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	691a      	ldr	r2, [r3, #16]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a09c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	695a      	ldr	r2, [r3, #20]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68da      	ldr	r2, [r3, #12]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2220      	movs	r2, #32
 800a0d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b085      	sub	sp, #20
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	60f8      	str	r0, [r7, #12]
 800a0e6:	60b9      	str	r1, [r7, #8]
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	2b20      	cmp	r3, #32
 800a0f6:	d130      	bne.n	800a15a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d002      	beq.n	800a104 <HAL_UART_Transmit_IT+0x26>
 800a0fe:	88fb      	ldrh	r3, [r7, #6]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e029      	b.n	800a15c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d101      	bne.n	800a116 <HAL_UART_Transmit_IT+0x38>
 800a112:	2302      	movs	r3, #2
 800a114:	e022      	b.n	800a15c <HAL_UART_Transmit_IT+0x7e>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	88fa      	ldrh	r2, [r7, #6]
 800a128:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	88fa      	ldrh	r2, [r7, #6]
 800a12e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2221      	movs	r2, #33	; 0x21
 800a13a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68da      	ldr	r2, [r3, #12]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a154:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	e000      	b.n	800a15c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a15a:	2302      	movs	r3, #2
  }
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	4613      	mov	r3, r2
 800a174:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	2b20      	cmp	r3, #32
 800a180:	d11d      	bne.n	800a1be <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d002      	beq.n	800a18e <HAL_UART_Receive_DMA+0x26>
 800a188:	88fb      	ldrh	r3, [r7, #6]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e016      	b.n	800a1c0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d101      	bne.n	800a1a0 <HAL_UART_Receive_DMA+0x38>
 800a19c:	2302      	movs	r3, #2
 800a19e:	e00f      	b.n	800a1c0 <HAL_UART_Receive_DMA+0x58>
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a1ae:	88fb      	ldrh	r3, [r7, #6]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	68b9      	ldr	r1, [r7, #8]
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f000 fbad 	bl	800a914 <UART_Start_Receive_DMA>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	e000      	b.n	800a1c0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a1be:	2302      	movs	r3, #2
  }
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b0ba      	sub	sp, #232	; 0xe8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a1fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1fe:	f003 030f 	and.w	r3, r3, #15
 800a202:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a206:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10f      	bne.n	800a22e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a20e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a212:	f003 0320 	and.w	r3, r3, #32
 800a216:	2b00      	cmp	r3, #0
 800a218:	d009      	beq.n	800a22e <HAL_UART_IRQHandler+0x66>
 800a21a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a21e:	f003 0320 	and.w	r3, r3, #32
 800a222:	2b00      	cmp	r3, #0
 800a224:	d003      	beq.n	800a22e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fd19 	bl	800ac5e <UART_Receive_IT>
      return;
 800a22c:	e256      	b.n	800a6dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a22e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 80de 	beq.w	800a3f4 <HAL_UART_IRQHandler+0x22c>
 800a238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a23c:	f003 0301 	and.w	r3, r3, #1
 800a240:	2b00      	cmp	r3, #0
 800a242:	d106      	bne.n	800a252 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a248:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f000 80d1 	beq.w	800a3f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a256:	f003 0301 	and.w	r3, r3, #1
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00b      	beq.n	800a276 <HAL_UART_IRQHandler+0xae>
 800a25e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a266:	2b00      	cmp	r3, #0
 800a268:	d005      	beq.n	800a276 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26e:	f043 0201 	orr.w	r2, r3, #1
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a27a:	f003 0304 	and.w	r3, r3, #4
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00b      	beq.n	800a29a <HAL_UART_IRQHandler+0xd2>
 800a282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a286:	f003 0301 	and.w	r3, r3, #1
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d005      	beq.n	800a29a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a292:	f043 0202 	orr.w	r2, r3, #2
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a29e:	f003 0302 	and.w	r3, r3, #2
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00b      	beq.n	800a2be <HAL_UART_IRQHandler+0xf6>
 800a2a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d005      	beq.n	800a2be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b6:	f043 0204 	orr.w	r2, r3, #4
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a2be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2c2:	f003 0308 	and.w	r3, r3, #8
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d011      	beq.n	800a2ee <HAL_UART_IRQHandler+0x126>
 800a2ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2ce:	f003 0320 	and.w	r3, r3, #32
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d105      	bne.n	800a2e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a2d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d005      	beq.n	800a2ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e6:	f043 0208 	orr.w	r2, r3, #8
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 81ed 	beq.w	800a6d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a2f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2fc:	f003 0320 	and.w	r3, r3, #32
 800a300:	2b00      	cmp	r3, #0
 800a302:	d008      	beq.n	800a316 <HAL_UART_IRQHandler+0x14e>
 800a304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a308:	f003 0320 	and.w	r3, r3, #32
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fca4 	bl	800ac5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a320:	2b40      	cmp	r3, #64	; 0x40
 800a322:	bf0c      	ite	eq
 800a324:	2301      	moveq	r3, #1
 800a326:	2300      	movne	r3, #0
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a332:	f003 0308 	and.w	r3, r3, #8
 800a336:	2b00      	cmp	r3, #0
 800a338:	d103      	bne.n	800a342 <HAL_UART_IRQHandler+0x17a>
 800a33a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d04f      	beq.n	800a3e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fbac 	bl	800aaa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	695b      	ldr	r3, [r3, #20]
 800a34e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a352:	2b40      	cmp	r3, #64	; 0x40
 800a354:	d141      	bne.n	800a3da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	3314      	adds	r3, #20
 800a35c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a364:	e853 3f00 	ldrex	r3, [r3]
 800a368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a36c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	3314      	adds	r3, #20
 800a37e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a382:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a386:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a38e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a392:	e841 2300 	strex	r3, r2, [r1]
 800a396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a39a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1d9      	bne.n	800a356 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d013      	beq.n	800a3d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ae:	4a7d      	ldr	r2, [pc, #500]	; (800a5a4 <HAL_UART_IRQHandler+0x3dc>)
 800a3b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fb fdce 	bl	8005f58 <HAL_DMA_Abort_IT>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d016      	beq.n	800a3f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a3cc:	4610      	mov	r0, r2
 800a3ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3d0:	e00e      	b.n	800a3f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f990 	bl	800a6f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3d8:	e00a      	b.n	800a3f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f98c 	bl	800a6f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3e0:	e006      	b.n	800a3f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f988 	bl	800a6f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a3ee:	e170      	b.n	800a6d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f0:	bf00      	nop
    return;
 800a3f2:	e16e      	b.n	800a6d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	f040 814a 	bne.w	800a692 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a3fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a402:	f003 0310 	and.w	r3, r3, #16
 800a406:	2b00      	cmp	r3, #0
 800a408:	f000 8143 	beq.w	800a692 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a40c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a410:	f003 0310 	and.w	r3, r3, #16
 800a414:	2b00      	cmp	r3, #0
 800a416:	f000 813c 	beq.w	800a692 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a41a:	2300      	movs	r3, #0
 800a41c:	60bb      	str	r3, [r7, #8]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	60bb      	str	r3, [r7, #8]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	60bb      	str	r3, [r7, #8]
 800a42e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a43a:	2b40      	cmp	r3, #64	; 0x40
 800a43c:	f040 80b4 	bne.w	800a5a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a44c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a450:	2b00      	cmp	r3, #0
 800a452:	f000 8140 	beq.w	800a6d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a45a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a45e:	429a      	cmp	r2, r3
 800a460:	f080 8139 	bcs.w	800a6d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a46a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a476:	f000 8088 	beq.w	800a58a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	330c      	adds	r3, #12
 800a480:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a484:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a488:	e853 3f00 	ldrex	r3, [r3]
 800a48c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a490:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a498:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	330c      	adds	r3, #12
 800a4a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a4a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a4aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a4b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a4b6:	e841 2300 	strex	r3, r2, [r1]
 800a4ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a4be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1d9      	bne.n	800a47a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3314      	adds	r3, #20
 800a4cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4d0:	e853 3f00 	ldrex	r3, [r3]
 800a4d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a4d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4d8:	f023 0301 	bic.w	r3, r3, #1
 800a4dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	3314      	adds	r3, #20
 800a4e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a4ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a4ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a4f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a4f6:	e841 2300 	strex	r3, r2, [r1]
 800a4fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a4fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1e1      	bne.n	800a4c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	3314      	adds	r3, #20
 800a508:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a50c:	e853 3f00 	ldrex	r3, [r3]
 800a510:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a518:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	3314      	adds	r3, #20
 800a522:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a526:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a528:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a52c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a52e:	e841 2300 	strex	r3, r2, [r1]
 800a532:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1e3      	bne.n	800a502 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2220      	movs	r2, #32
 800a53e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	330c      	adds	r3, #12
 800a54e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a552:	e853 3f00 	ldrex	r3, [r3]
 800a556:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a55a:	f023 0310 	bic.w	r3, r3, #16
 800a55e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	330c      	adds	r3, #12
 800a568:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a56c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a56e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a570:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a572:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a574:	e841 2300 	strex	r3, r2, [r1]
 800a578:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a57a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1e3      	bne.n	800a548 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a584:	4618      	mov	r0, r3
 800a586:	f7fb fc77 	bl	8005e78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a592:	b29b      	uxth	r3, r3
 800a594:	1ad3      	subs	r3, r2, r3
 800a596:	b29b      	uxth	r3, r3
 800a598:	4619      	mov	r1, r3
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f8b6 	bl	800a70c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a5a0:	e099      	b.n	800a6d6 <HAL_UART_IRQHandler+0x50e>
 800a5a2:	bf00      	nop
 800a5a4:	0800ab67 	.word	0x0800ab67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f000 808b 	beq.w	800a6da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a5c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 8086 	beq.w	800a6da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	330c      	adds	r3, #12
 800a5d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d8:	e853 3f00 	ldrex	r3, [r3]
 800a5dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	330c      	adds	r3, #12
 800a5ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a5f2:	647a      	str	r2, [r7, #68]	; 0x44
 800a5f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a5f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5fa:	e841 2300 	strex	r3, r2, [r1]
 800a5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a602:	2b00      	cmp	r3, #0
 800a604:	d1e3      	bne.n	800a5ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3314      	adds	r3, #20
 800a60c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a610:	e853 3f00 	ldrex	r3, [r3]
 800a614:	623b      	str	r3, [r7, #32]
   return(result);
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	f023 0301 	bic.w	r3, r3, #1
 800a61c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	3314      	adds	r3, #20
 800a626:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a62a:	633a      	str	r2, [r7, #48]	; 0x30
 800a62c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a62e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a632:	e841 2300 	strex	r3, r2, [r1]
 800a636:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1e3      	bne.n	800a606 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2220      	movs	r2, #32
 800a642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	330c      	adds	r3, #12
 800a652:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	e853 3f00 	ldrex	r3, [r3]
 800a65a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f023 0310 	bic.w	r3, r3, #16
 800a662:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	330c      	adds	r3, #12
 800a66c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a670:	61fa      	str	r2, [r7, #28]
 800a672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a674:	69b9      	ldr	r1, [r7, #24]
 800a676:	69fa      	ldr	r2, [r7, #28]
 800a678:	e841 2300 	strex	r3, r2, [r1]
 800a67c:	617b      	str	r3, [r7, #20]
   return(result);
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e3      	bne.n	800a64c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a684:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a688:	4619      	mov	r1, r3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f83e 	bl	800a70c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a690:	e023      	b.n	800a6da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d009      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x4ea>
 800a69e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fa6f 	bl	800ab8e <UART_Transmit_IT>
    return;
 800a6b0:	e014      	b.n	800a6dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a6b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00e      	beq.n	800a6dc <HAL_UART_IRQHandler+0x514>
 800a6be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d008      	beq.n	800a6dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 faaf 	bl	800ac2e <UART_EndTransmit_IT>
    return;
 800a6d0:	e004      	b.n	800a6dc <HAL_UART_IRQHandler+0x514>
    return;
 800a6d2:	bf00      	nop
 800a6d4:	e002      	b.n	800a6dc <HAL_UART_IRQHandler+0x514>
      return;
 800a6d6:	bf00      	nop
 800a6d8:	e000      	b.n	800a6dc <HAL_UART_IRQHandler+0x514>
      return;
 800a6da:	bf00      	nop
  }
}
 800a6dc:	37e8      	adds	r7, #232	; 0xe8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop

0800a6e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a6ec:	bf00      	nop
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	460b      	mov	r3, r1
 800a716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b09c      	sub	sp, #112	; 0x70
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a730:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d172      	bne.n	800a826 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a742:	2200      	movs	r2, #0
 800a744:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	330c      	adds	r3, #12
 800a74c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a750:	e853 3f00 	ldrex	r3, [r3]
 800a754:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a75c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a75e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	330c      	adds	r3, #12
 800a764:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a766:	65ba      	str	r2, [r7, #88]	; 0x58
 800a768:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a76c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a76e:	e841 2300 	strex	r3, r2, [r1]
 800a772:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e5      	bne.n	800a746 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a77a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	3314      	adds	r3, #20
 800a780:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a784:	e853 3f00 	ldrex	r3, [r3]
 800a788:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a78c:	f023 0301 	bic.w	r3, r3, #1
 800a790:	667b      	str	r3, [r7, #100]	; 0x64
 800a792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	3314      	adds	r3, #20
 800a798:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a79a:	647a      	str	r2, [r7, #68]	; 0x44
 800a79c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7a2:	e841 2300 	strex	r3, r2, [r1]
 800a7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1e5      	bne.n	800a77a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3314      	adds	r3, #20
 800a7b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b8:	e853 3f00 	ldrex	r3, [r3]
 800a7bc:	623b      	str	r3, [r7, #32]
   return(result);
 800a7be:	6a3b      	ldr	r3, [r7, #32]
 800a7c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7c4:	663b      	str	r3, [r7, #96]	; 0x60
 800a7c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3314      	adds	r3, #20
 800a7cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a7ce:	633a      	str	r2, [r7, #48]	; 0x30
 800a7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7d6:	e841 2300 	strex	r3, r2, [r1]
 800a7da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1e5      	bne.n	800a7ae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a7e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7e4:	2220      	movs	r2, #32
 800a7e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d119      	bne.n	800a826 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	330c      	adds	r3, #12
 800a7f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	e853 3f00 	ldrex	r3, [r3]
 800a800:	60fb      	str	r3, [r7, #12]
   return(result);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f023 0310 	bic.w	r3, r3, #16
 800a808:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a80a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	330c      	adds	r3, #12
 800a810:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a812:	61fa      	str	r2, [r7, #28]
 800a814:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a816:	69b9      	ldr	r1, [r7, #24]
 800a818:	69fa      	ldr	r2, [r7, #28]
 800a81a:	e841 2300 	strex	r3, r2, [r1]
 800a81e:	617b      	str	r3, [r7, #20]
   return(result);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1e5      	bne.n	800a7f2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d106      	bne.n	800a83c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a82e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a830:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a832:	4619      	mov	r1, r3
 800a834:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a836:	f7ff ff69 	bl	800a70c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a83a:	e002      	b.n	800a842 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a83c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a83e:	f7f7 fe17 	bl	8002470 <HAL_UART_RxCpltCallback>
}
 800a842:	bf00      	nop
 800a844:	3770      	adds	r7, #112	; 0x70
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b084      	sub	sp, #16
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a856:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d108      	bne.n	800a872 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a864:	085b      	lsrs	r3, r3, #1
 800a866:	b29b      	uxth	r3, r3
 800a868:	4619      	mov	r1, r3
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f7ff ff4e 	bl	800a70c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a870:	e002      	b.n	800a878 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f7ff ff36 	bl	800a6e4 <HAL_UART_RxHalfCpltCallback>
}
 800a878:	bf00      	nop
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a888:	2300      	movs	r3, #0
 800a88a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a890:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	695b      	ldr	r3, [r3, #20]
 800a898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a89c:	2b80      	cmp	r3, #128	; 0x80
 800a89e:	bf0c      	ite	eq
 800a8a0:	2301      	moveq	r3, #1
 800a8a2:	2300      	movne	r3, #0
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	2b21      	cmp	r3, #33	; 0x21
 800a8b2:	d108      	bne.n	800a8c6 <UART_DMAError+0x46>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d005      	beq.n	800a8c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a8c0:	68b8      	ldr	r0, [r7, #8]
 800a8c2:	f000 f8c5 	bl	800aa50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d0:	2b40      	cmp	r3, #64	; 0x40
 800a8d2:	bf0c      	ite	eq
 800a8d4:	2301      	moveq	r3, #1
 800a8d6:	2300      	movne	r3, #0
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	2b22      	cmp	r3, #34	; 0x22
 800a8e6:	d108      	bne.n	800a8fa <UART_DMAError+0x7a>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d005      	beq.n	800a8fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a8f4:	68b8      	ldr	r0, [r7, #8]
 800a8f6:	f000 f8d3 	bl	800aaa0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fe:	f043 0210 	orr.w	r2, r3, #16
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a906:	68b8      	ldr	r0, [r7, #8]
 800a908:	f7ff fef6 	bl	800a6f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a90c:	bf00      	nop
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b098      	sub	sp, #96	; 0x60
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	4613      	mov	r3, r2
 800a920:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	88fa      	ldrh	r2, [r7, #6]
 800a92c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2222      	movs	r2, #34	; 0x22
 800a938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a940:	4a40      	ldr	r2, [pc, #256]	; (800aa44 <UART_Start_Receive_DMA+0x130>)
 800a942:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a948:	4a3f      	ldr	r2, [pc, #252]	; (800aa48 <UART_Start_Receive_DMA+0x134>)
 800a94a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a950:	4a3e      	ldr	r2, [pc, #248]	; (800aa4c <UART_Start_Receive_DMA+0x138>)
 800a952:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a958:	2200      	movs	r2, #0
 800a95a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a95c:	f107 0308 	add.w	r3, r7, #8
 800a960:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	3304      	adds	r3, #4
 800a96c:	4619      	mov	r1, r3
 800a96e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	88fb      	ldrh	r3, [r7, #6]
 800a974:	f7fb fa28 	bl	8005dc8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a978:	2300      	movs	r3, #0
 800a97a:	613b      	str	r3, [r7, #16]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	613b      	str	r3, [r7, #16]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	613b      	str	r3, [r7, #16]
 800a98c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d019      	beq.n	800a9d2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	330c      	adds	r3, #12
 800a9a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9a8:	e853 3f00 	ldrex	r3, [r3]
 800a9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	330c      	adds	r3, #12
 800a9bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9be:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a9c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a9c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a9c6:	e841 2300 	strex	r3, r2, [r1]
 800a9ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a9cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1e5      	bne.n	800a99e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	3314      	adds	r3, #20
 800a9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9dc:	e853 3f00 	ldrex	r3, [r3]
 800a9e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e4:	f043 0301 	orr.w	r3, r3, #1
 800a9e8:	657b      	str	r3, [r7, #84]	; 0x54
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3314      	adds	r3, #20
 800a9f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9f2:	63ba      	str	r2, [r7, #56]	; 0x38
 800a9f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a9f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9fa:	e841 2300 	strex	r3, r2, [r1]
 800a9fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1e5      	bne.n	800a9d2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	3314      	adds	r3, #20
 800aa0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	e853 3f00 	ldrex	r3, [r3]
 800aa14:	617b      	str	r3, [r7, #20]
   return(result);
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa1c:	653b      	str	r3, [r7, #80]	; 0x50
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	3314      	adds	r3, #20
 800aa24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa26:	627a      	str	r2, [r7, #36]	; 0x24
 800aa28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2a:	6a39      	ldr	r1, [r7, #32]
 800aa2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa2e:	e841 2300 	strex	r3, r2, [r1]
 800aa32:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1e5      	bne.n	800aa06 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3760      	adds	r7, #96	; 0x60
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	0800a725 	.word	0x0800a725
 800aa48:	0800a84b 	.word	0x0800a84b
 800aa4c:	0800a881 	.word	0x0800a881

0800aa50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b089      	sub	sp, #36	; 0x24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	330c      	adds	r3, #12
 800aa5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	e853 3f00 	ldrex	r3, [r3]
 800aa66:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aa6e:	61fb      	str	r3, [r7, #28]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	330c      	adds	r3, #12
 800aa76:	69fa      	ldr	r2, [r7, #28]
 800aa78:	61ba      	str	r2, [r7, #24]
 800aa7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7c:	6979      	ldr	r1, [r7, #20]
 800aa7e:	69ba      	ldr	r2, [r7, #24]
 800aa80:	e841 2300 	strex	r3, r2, [r1]
 800aa84:	613b      	str	r3, [r7, #16]
   return(result);
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1e5      	bne.n	800aa58 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2220      	movs	r2, #32
 800aa90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800aa94:	bf00      	nop
 800aa96:	3724      	adds	r7, #36	; 0x24
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b095      	sub	sp, #84	; 0x54
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	330c      	adds	r3, #12
 800aaae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab2:	e853 3f00 	ldrex	r3, [r3]
 800aab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aabe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	330c      	adds	r3, #12
 800aac6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aac8:	643a      	str	r2, [r7, #64]	; 0x40
 800aaca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aacc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aad0:	e841 2300 	strex	r3, r2, [r1]
 800aad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1e5      	bne.n	800aaa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3314      	adds	r3, #20
 800aae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae4:	6a3b      	ldr	r3, [r7, #32]
 800aae6:	e853 3f00 	ldrex	r3, [r3]
 800aaea:	61fb      	str	r3, [r7, #28]
   return(result);
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	f023 0301 	bic.w	r3, r3, #1
 800aaf2:	64bb      	str	r3, [r7, #72]	; 0x48
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3314      	adds	r3, #20
 800aafa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aafc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aafe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab04:	e841 2300 	strex	r3, r2, [r1]
 800ab08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1e5      	bne.n	800aadc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d119      	bne.n	800ab4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	330c      	adds	r3, #12
 800ab1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	e853 3f00 	ldrex	r3, [r3]
 800ab26:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	f023 0310 	bic.w	r3, r3, #16
 800ab2e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	330c      	adds	r3, #12
 800ab36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab38:	61ba      	str	r2, [r7, #24]
 800ab3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3c:	6979      	ldr	r1, [r7, #20]
 800ab3e:	69ba      	ldr	r2, [r7, #24]
 800ab40:	e841 2300 	strex	r3, r2, [r1]
 800ab44:	613b      	str	r3, [r7, #16]
   return(result);
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1e5      	bne.n	800ab18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2220      	movs	r2, #32
 800ab50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ab5a:	bf00      	nop
 800ab5c:	3754      	adds	r7, #84	; 0x54
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b084      	sub	sp, #16
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2200      	movs	r2, #0
 800ab78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f7ff fdb9 	bl	800a6f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab86:	bf00      	nop
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b085      	sub	sp, #20
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b21      	cmp	r3, #33	; 0x21
 800aba0:	d13e      	bne.n	800ac20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abaa:	d114      	bne.n	800abd6 <UART_Transmit_IT+0x48>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d110      	bne.n	800abd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a1b      	ldr	r3, [r3, #32]
 800abb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	461a      	mov	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a1b      	ldr	r3, [r3, #32]
 800abce:	1c9a      	adds	r2, r3, #2
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	621a      	str	r2, [r3, #32]
 800abd4:	e008      	b.n	800abe8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6a1b      	ldr	r3, [r3, #32]
 800abda:	1c59      	adds	r1, r3, #1
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	6211      	str	r1, [r2, #32]
 800abe0:	781a      	ldrb	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800abec:	b29b      	uxth	r3, r3
 800abee:	3b01      	subs	r3, #1
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	4619      	mov	r1, r3
 800abf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10f      	bne.n	800ac1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68da      	ldr	r2, [r3, #12]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68da      	ldr	r2, [r3, #12]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	e000      	b.n	800ac22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ac20:	2302      	movs	r3, #2
  }
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3714      	adds	r7, #20
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr

0800ac2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b082      	sub	sp, #8
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	68da      	ldr	r2, [r3, #12]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2220      	movs	r2, #32
 800ac4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f7f7 fbf8 	bl	8002444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3708      	adds	r7, #8
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b08c      	sub	sp, #48	; 0x30
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b22      	cmp	r3, #34	; 0x22
 800ac70:	f040 80ab 	bne.w	800adca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac7c:	d117      	bne.n	800acae <UART_Receive_IT+0x50>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d113      	bne.n	800acae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ac86:	2300      	movs	r3, #0
 800ac88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca6:	1c9a      	adds	r2, r3, #2
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	629a      	str	r2, [r3, #40]	; 0x28
 800acac:	e026      	b.n	800acfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800acb4:	2300      	movs	r3, #0
 800acb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	689b      	ldr	r3, [r3, #8]
 800acbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acc0:	d007      	beq.n	800acd2 <UART_Receive_IT+0x74>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10a      	bne.n	800ace0 <UART_Receive_IT+0x82>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d106      	bne.n	800ace0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acdc:	701a      	strb	r2, [r3, #0]
 800acde:	e008      	b.n	800acf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acec:	b2da      	uxtb	r2, r3
 800acee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf6:	1c5a      	adds	r2, r3, #1
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	3b01      	subs	r3, #1
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d15a      	bne.n	800adc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68da      	ldr	r2, [r3, #12]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f022 0220 	bic.w	r2, r2, #32
 800ad1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68da      	ldr	r2, [r3, #12]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ad2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	695a      	ldr	r2, [r3, #20]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f022 0201 	bic.w	r2, r2, #1
 800ad3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2220      	movs	r2, #32
 800ad44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d135      	bne.n	800adbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	330c      	adds	r3, #12
 800ad5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	e853 3f00 	ldrex	r3, [r3]
 800ad64:	613b      	str	r3, [r7, #16]
   return(result);
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	f023 0310 	bic.w	r3, r3, #16
 800ad6c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	330c      	adds	r3, #12
 800ad74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad76:	623a      	str	r2, [r7, #32]
 800ad78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7a:	69f9      	ldr	r1, [r7, #28]
 800ad7c:	6a3a      	ldr	r2, [r7, #32]
 800ad7e:	e841 2300 	strex	r3, r2, [r1]
 800ad82:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1e5      	bne.n	800ad56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f003 0310 	and.w	r3, r3, #16
 800ad94:	2b10      	cmp	r3, #16
 800ad96:	d10a      	bne.n	800adae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad98:	2300      	movs	r3, #0
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	60fb      	str	r3, [r7, #12]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	60fb      	str	r3, [r7, #12]
 800adac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800adb2:	4619      	mov	r1, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff fca9 	bl	800a70c <HAL_UARTEx_RxEventCallback>
 800adba:	e002      	b.n	800adc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f7f7 fb57 	bl	8002470 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800adc2:	2300      	movs	r3, #0
 800adc4:	e002      	b.n	800adcc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	e000      	b.n	800adcc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800adca:	2302      	movs	r3, #2
  }
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3730      	adds	r7, #48	; 0x30
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800add4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800add8:	b0c0      	sub	sp, #256	; 0x100
 800adda:	af00      	add	r7, sp, #0
 800addc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ade0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800adec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adf0:	68d9      	ldr	r1, [r3, #12]
 800adf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	ea40 0301 	orr.w	r3, r0, r1
 800adfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800adfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae02:	689a      	ldr	r2, [r3, #8]
 800ae04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	431a      	orrs	r2, r3
 800ae0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae10:	695b      	ldr	r3, [r3, #20]
 800ae12:	431a      	orrs	r2, r3
 800ae14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae18:	69db      	ldr	r3, [r3, #28]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ae20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ae2c:	f021 010c 	bic.w	r1, r1, #12
 800ae30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ae3a:	430b      	orrs	r3, r1
 800ae3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ae3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	695b      	ldr	r3, [r3, #20]
 800ae46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ae4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae4e:	6999      	ldr	r1, [r3, #24]
 800ae50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	ea40 0301 	orr.w	r3, r0, r1
 800ae5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ae5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	4b8f      	ldr	r3, [pc, #572]	; (800b0a0 <UART_SetConfig+0x2cc>)
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d005      	beq.n	800ae74 <UART_SetConfig+0xa0>
 800ae68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	4b8d      	ldr	r3, [pc, #564]	; (800b0a4 <UART_SetConfig+0x2d0>)
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d104      	bne.n	800ae7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ae74:	f7fd f928 	bl	80080c8 <HAL_RCC_GetPCLK2Freq>
 800ae78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ae7c:	e003      	b.n	800ae86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ae7e:	f7fd f90f 	bl	80080a0 <HAL_RCC_GetPCLK1Freq>
 800ae82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae8a:	69db      	ldr	r3, [r3, #28]
 800ae8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae90:	f040 810c 	bne.w	800b0ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ae94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800aea2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800aea6:	4622      	mov	r2, r4
 800aea8:	462b      	mov	r3, r5
 800aeaa:	1891      	adds	r1, r2, r2
 800aeac:	65b9      	str	r1, [r7, #88]	; 0x58
 800aeae:	415b      	adcs	r3, r3
 800aeb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aeb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	eb12 0801 	adds.w	r8, r2, r1
 800aebc:	4629      	mov	r1, r5
 800aebe:	eb43 0901 	adc.w	r9, r3, r1
 800aec2:	f04f 0200 	mov.w	r2, #0
 800aec6:	f04f 0300 	mov.w	r3, #0
 800aeca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aece:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aed2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aed6:	4690      	mov	r8, r2
 800aed8:	4699      	mov	r9, r3
 800aeda:	4623      	mov	r3, r4
 800aedc:	eb18 0303 	adds.w	r3, r8, r3
 800aee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aee4:	462b      	mov	r3, r5
 800aee6:	eb49 0303 	adc.w	r3, r9, r3
 800aeea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aeee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aefa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aefe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800af02:	460b      	mov	r3, r1
 800af04:	18db      	adds	r3, r3, r3
 800af06:	653b      	str	r3, [r7, #80]	; 0x50
 800af08:	4613      	mov	r3, r2
 800af0a:	eb42 0303 	adc.w	r3, r2, r3
 800af0e:	657b      	str	r3, [r7, #84]	; 0x54
 800af10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800af14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800af18:	f7f5 feb6 	bl	8000c88 <__aeabi_uldivmod>
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	4b61      	ldr	r3, [pc, #388]	; (800b0a8 <UART_SetConfig+0x2d4>)
 800af22:	fba3 2302 	umull	r2, r3, r3, r2
 800af26:	095b      	lsrs	r3, r3, #5
 800af28:	011c      	lsls	r4, r3, #4
 800af2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af2e:	2200      	movs	r2, #0
 800af30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800af38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800af3c:	4642      	mov	r2, r8
 800af3e:	464b      	mov	r3, r9
 800af40:	1891      	adds	r1, r2, r2
 800af42:	64b9      	str	r1, [r7, #72]	; 0x48
 800af44:	415b      	adcs	r3, r3
 800af46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800af4c:	4641      	mov	r1, r8
 800af4e:	eb12 0a01 	adds.w	sl, r2, r1
 800af52:	4649      	mov	r1, r9
 800af54:	eb43 0b01 	adc.w	fp, r3, r1
 800af58:	f04f 0200 	mov.w	r2, #0
 800af5c:	f04f 0300 	mov.w	r3, #0
 800af60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800af64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800af68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800af6c:	4692      	mov	sl, r2
 800af6e:	469b      	mov	fp, r3
 800af70:	4643      	mov	r3, r8
 800af72:	eb1a 0303 	adds.w	r3, sl, r3
 800af76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af7a:	464b      	mov	r3, r9
 800af7c:	eb4b 0303 	adc.w	r3, fp, r3
 800af80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800af84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800af94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800af98:	460b      	mov	r3, r1
 800af9a:	18db      	adds	r3, r3, r3
 800af9c:	643b      	str	r3, [r7, #64]	; 0x40
 800af9e:	4613      	mov	r3, r2
 800afa0:	eb42 0303 	adc.w	r3, r2, r3
 800afa4:	647b      	str	r3, [r7, #68]	; 0x44
 800afa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800afaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800afae:	f7f5 fe6b 	bl	8000c88 <__aeabi_uldivmod>
 800afb2:	4602      	mov	r2, r0
 800afb4:	460b      	mov	r3, r1
 800afb6:	4611      	mov	r1, r2
 800afb8:	4b3b      	ldr	r3, [pc, #236]	; (800b0a8 <UART_SetConfig+0x2d4>)
 800afba:	fba3 2301 	umull	r2, r3, r3, r1
 800afbe:	095b      	lsrs	r3, r3, #5
 800afc0:	2264      	movs	r2, #100	; 0x64
 800afc2:	fb02 f303 	mul.w	r3, r2, r3
 800afc6:	1acb      	subs	r3, r1, r3
 800afc8:	00db      	lsls	r3, r3, #3
 800afca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800afce:	4b36      	ldr	r3, [pc, #216]	; (800b0a8 <UART_SetConfig+0x2d4>)
 800afd0:	fba3 2302 	umull	r2, r3, r3, r2
 800afd4:	095b      	lsrs	r3, r3, #5
 800afd6:	005b      	lsls	r3, r3, #1
 800afd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800afdc:	441c      	add	r4, r3
 800afde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afe2:	2200      	movs	r2, #0
 800afe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800afe8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800afec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aff0:	4642      	mov	r2, r8
 800aff2:	464b      	mov	r3, r9
 800aff4:	1891      	adds	r1, r2, r2
 800aff6:	63b9      	str	r1, [r7, #56]	; 0x38
 800aff8:	415b      	adcs	r3, r3
 800affa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800affc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b000:	4641      	mov	r1, r8
 800b002:	1851      	adds	r1, r2, r1
 800b004:	6339      	str	r1, [r7, #48]	; 0x30
 800b006:	4649      	mov	r1, r9
 800b008:	414b      	adcs	r3, r1
 800b00a:	637b      	str	r3, [r7, #52]	; 0x34
 800b00c:	f04f 0200 	mov.w	r2, #0
 800b010:	f04f 0300 	mov.w	r3, #0
 800b014:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b018:	4659      	mov	r1, fp
 800b01a:	00cb      	lsls	r3, r1, #3
 800b01c:	4651      	mov	r1, sl
 800b01e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b022:	4651      	mov	r1, sl
 800b024:	00ca      	lsls	r2, r1, #3
 800b026:	4610      	mov	r0, r2
 800b028:	4619      	mov	r1, r3
 800b02a:	4603      	mov	r3, r0
 800b02c:	4642      	mov	r2, r8
 800b02e:	189b      	adds	r3, r3, r2
 800b030:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b034:	464b      	mov	r3, r9
 800b036:	460a      	mov	r2, r1
 800b038:	eb42 0303 	adc.w	r3, r2, r3
 800b03c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b04c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b050:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b054:	460b      	mov	r3, r1
 800b056:	18db      	adds	r3, r3, r3
 800b058:	62bb      	str	r3, [r7, #40]	; 0x28
 800b05a:	4613      	mov	r3, r2
 800b05c:	eb42 0303 	adc.w	r3, r2, r3
 800b060:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b066:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b06a:	f7f5 fe0d 	bl	8000c88 <__aeabi_uldivmod>
 800b06e:	4602      	mov	r2, r0
 800b070:	460b      	mov	r3, r1
 800b072:	4b0d      	ldr	r3, [pc, #52]	; (800b0a8 <UART_SetConfig+0x2d4>)
 800b074:	fba3 1302 	umull	r1, r3, r3, r2
 800b078:	095b      	lsrs	r3, r3, #5
 800b07a:	2164      	movs	r1, #100	; 0x64
 800b07c:	fb01 f303 	mul.w	r3, r1, r3
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	00db      	lsls	r3, r3, #3
 800b084:	3332      	adds	r3, #50	; 0x32
 800b086:	4a08      	ldr	r2, [pc, #32]	; (800b0a8 <UART_SetConfig+0x2d4>)
 800b088:	fba2 2303 	umull	r2, r3, r2, r3
 800b08c:	095b      	lsrs	r3, r3, #5
 800b08e:	f003 0207 	and.w	r2, r3, #7
 800b092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4422      	add	r2, r4
 800b09a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b09c:	e105      	b.n	800b2aa <UART_SetConfig+0x4d6>
 800b09e:	bf00      	nop
 800b0a0:	40011000 	.word	0x40011000
 800b0a4:	40011400 	.word	0x40011400
 800b0a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b0ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b0b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b0ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b0be:	4642      	mov	r2, r8
 800b0c0:	464b      	mov	r3, r9
 800b0c2:	1891      	adds	r1, r2, r2
 800b0c4:	6239      	str	r1, [r7, #32]
 800b0c6:	415b      	adcs	r3, r3
 800b0c8:	627b      	str	r3, [r7, #36]	; 0x24
 800b0ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b0ce:	4641      	mov	r1, r8
 800b0d0:	1854      	adds	r4, r2, r1
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	eb43 0501 	adc.w	r5, r3, r1
 800b0d8:	f04f 0200 	mov.w	r2, #0
 800b0dc:	f04f 0300 	mov.w	r3, #0
 800b0e0:	00eb      	lsls	r3, r5, #3
 800b0e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b0e6:	00e2      	lsls	r2, r4, #3
 800b0e8:	4614      	mov	r4, r2
 800b0ea:	461d      	mov	r5, r3
 800b0ec:	4643      	mov	r3, r8
 800b0ee:	18e3      	adds	r3, r4, r3
 800b0f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b0f4:	464b      	mov	r3, r9
 800b0f6:	eb45 0303 	adc.w	r3, r5, r3
 800b0fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b0fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b10a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b10e:	f04f 0200 	mov.w	r2, #0
 800b112:	f04f 0300 	mov.w	r3, #0
 800b116:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b11a:	4629      	mov	r1, r5
 800b11c:	008b      	lsls	r3, r1, #2
 800b11e:	4621      	mov	r1, r4
 800b120:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b124:	4621      	mov	r1, r4
 800b126:	008a      	lsls	r2, r1, #2
 800b128:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b12c:	f7f5 fdac 	bl	8000c88 <__aeabi_uldivmod>
 800b130:	4602      	mov	r2, r0
 800b132:	460b      	mov	r3, r1
 800b134:	4b60      	ldr	r3, [pc, #384]	; (800b2b8 <UART_SetConfig+0x4e4>)
 800b136:	fba3 2302 	umull	r2, r3, r3, r2
 800b13a:	095b      	lsrs	r3, r3, #5
 800b13c:	011c      	lsls	r4, r3, #4
 800b13e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b142:	2200      	movs	r2, #0
 800b144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b148:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b14c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b150:	4642      	mov	r2, r8
 800b152:	464b      	mov	r3, r9
 800b154:	1891      	adds	r1, r2, r2
 800b156:	61b9      	str	r1, [r7, #24]
 800b158:	415b      	adcs	r3, r3
 800b15a:	61fb      	str	r3, [r7, #28]
 800b15c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b160:	4641      	mov	r1, r8
 800b162:	1851      	adds	r1, r2, r1
 800b164:	6139      	str	r1, [r7, #16]
 800b166:	4649      	mov	r1, r9
 800b168:	414b      	adcs	r3, r1
 800b16a:	617b      	str	r3, [r7, #20]
 800b16c:	f04f 0200 	mov.w	r2, #0
 800b170:	f04f 0300 	mov.w	r3, #0
 800b174:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b178:	4659      	mov	r1, fp
 800b17a:	00cb      	lsls	r3, r1, #3
 800b17c:	4651      	mov	r1, sl
 800b17e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b182:	4651      	mov	r1, sl
 800b184:	00ca      	lsls	r2, r1, #3
 800b186:	4610      	mov	r0, r2
 800b188:	4619      	mov	r1, r3
 800b18a:	4603      	mov	r3, r0
 800b18c:	4642      	mov	r2, r8
 800b18e:	189b      	adds	r3, r3, r2
 800b190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b194:	464b      	mov	r3, r9
 800b196:	460a      	mov	r2, r1
 800b198:	eb42 0303 	adc.w	r3, r2, r3
 800b19c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b1a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b1aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b1ac:	f04f 0200 	mov.w	r2, #0
 800b1b0:	f04f 0300 	mov.w	r3, #0
 800b1b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b1b8:	4649      	mov	r1, r9
 800b1ba:	008b      	lsls	r3, r1, #2
 800b1bc:	4641      	mov	r1, r8
 800b1be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1c2:	4641      	mov	r1, r8
 800b1c4:	008a      	lsls	r2, r1, #2
 800b1c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b1ca:	f7f5 fd5d 	bl	8000c88 <__aeabi_uldivmod>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4b39      	ldr	r3, [pc, #228]	; (800b2b8 <UART_SetConfig+0x4e4>)
 800b1d4:	fba3 1302 	umull	r1, r3, r3, r2
 800b1d8:	095b      	lsrs	r3, r3, #5
 800b1da:	2164      	movs	r1, #100	; 0x64
 800b1dc:	fb01 f303 	mul.w	r3, r1, r3
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	011b      	lsls	r3, r3, #4
 800b1e4:	3332      	adds	r3, #50	; 0x32
 800b1e6:	4a34      	ldr	r2, [pc, #208]	; (800b2b8 <UART_SetConfig+0x4e4>)
 800b1e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ec:	095b      	lsrs	r3, r3, #5
 800b1ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1f2:	441c      	add	r4, r3
 800b1f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	673b      	str	r3, [r7, #112]	; 0x70
 800b1fc:	677a      	str	r2, [r7, #116]	; 0x74
 800b1fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b202:	4642      	mov	r2, r8
 800b204:	464b      	mov	r3, r9
 800b206:	1891      	adds	r1, r2, r2
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	415b      	adcs	r3, r3
 800b20c:	60fb      	str	r3, [r7, #12]
 800b20e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b212:	4641      	mov	r1, r8
 800b214:	1851      	adds	r1, r2, r1
 800b216:	6039      	str	r1, [r7, #0]
 800b218:	4649      	mov	r1, r9
 800b21a:	414b      	adcs	r3, r1
 800b21c:	607b      	str	r3, [r7, #4]
 800b21e:	f04f 0200 	mov.w	r2, #0
 800b222:	f04f 0300 	mov.w	r3, #0
 800b226:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b22a:	4659      	mov	r1, fp
 800b22c:	00cb      	lsls	r3, r1, #3
 800b22e:	4651      	mov	r1, sl
 800b230:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b234:	4651      	mov	r1, sl
 800b236:	00ca      	lsls	r2, r1, #3
 800b238:	4610      	mov	r0, r2
 800b23a:	4619      	mov	r1, r3
 800b23c:	4603      	mov	r3, r0
 800b23e:	4642      	mov	r2, r8
 800b240:	189b      	adds	r3, r3, r2
 800b242:	66bb      	str	r3, [r7, #104]	; 0x68
 800b244:	464b      	mov	r3, r9
 800b246:	460a      	mov	r2, r1
 800b248:	eb42 0303 	adc.w	r3, r2, r3
 800b24c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b24e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	663b      	str	r3, [r7, #96]	; 0x60
 800b258:	667a      	str	r2, [r7, #100]	; 0x64
 800b25a:	f04f 0200 	mov.w	r2, #0
 800b25e:	f04f 0300 	mov.w	r3, #0
 800b262:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b266:	4649      	mov	r1, r9
 800b268:	008b      	lsls	r3, r1, #2
 800b26a:	4641      	mov	r1, r8
 800b26c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b270:	4641      	mov	r1, r8
 800b272:	008a      	lsls	r2, r1, #2
 800b274:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b278:	f7f5 fd06 	bl	8000c88 <__aeabi_uldivmod>
 800b27c:	4602      	mov	r2, r0
 800b27e:	460b      	mov	r3, r1
 800b280:	4b0d      	ldr	r3, [pc, #52]	; (800b2b8 <UART_SetConfig+0x4e4>)
 800b282:	fba3 1302 	umull	r1, r3, r3, r2
 800b286:	095b      	lsrs	r3, r3, #5
 800b288:	2164      	movs	r1, #100	; 0x64
 800b28a:	fb01 f303 	mul.w	r3, r1, r3
 800b28e:	1ad3      	subs	r3, r2, r3
 800b290:	011b      	lsls	r3, r3, #4
 800b292:	3332      	adds	r3, #50	; 0x32
 800b294:	4a08      	ldr	r2, [pc, #32]	; (800b2b8 <UART_SetConfig+0x4e4>)
 800b296:	fba2 2303 	umull	r2, r3, r2, r3
 800b29a:	095b      	lsrs	r3, r3, #5
 800b29c:	f003 020f 	and.w	r2, r3, #15
 800b2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4422      	add	r2, r4
 800b2a8:	609a      	str	r2, [r3, #8]
}
 800b2aa:	bf00      	nop
 800b2ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2b6:	bf00      	nop
 800b2b8:	51eb851f 	.word	0x51eb851f

0800b2bc <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800b2c6:	edd7 7a01 	vldr	s15, [r7, #4]
 800b2ca:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800b2e0 <FusionDegreesToRadians+0x24>
 800b2ce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b2d2:	eeb0 0a67 	vmov.f32	s0, s15
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	3c8efa35 	.word	0x3c8efa35

0800b2e4 <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	105a      	asrs	r2, r3, #1
 800b2f6:	4b10      	ldr	r3, [pc, #64]	; (800b338 <FusionFastInverseSqrt+0x54>)
 800b2f8:	1a9b      	subs	r3, r3, r2
 800b2fa:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 800b2fc:	ed97 7a03 	vldr	s14, [r7, #12]
 800b300:	edd7 7a01 	vldr	s15, [r7, #4]
 800b304:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800b33c <FusionFastInverseSqrt+0x58>
 800b308:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b30c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b310:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b314:	edd7 7a03 	vldr	s15, [r7, #12]
 800b318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b31c:	eddf 6a08 	vldr	s13, [pc, #32]	; 800b340 <FusionFastInverseSqrt+0x5c>
 800b320:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b324:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800b328:	eeb0 0a67 	vmov.f32	s0, s15
 800b32c:	3714      	adds	r7, #20
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr
 800b336:	bf00      	nop
 800b338:	5f1f1412 	.word	0x5f1f1412
 800b33c:	3f36d312 	.word	0x3f36d312
 800b340:	3fd851ff 	.word	0x3fd851ff

0800b344 <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	eef0 6a40 	vmov.f32	s13, s0
 800b34e:	eeb0 7a60 	vmov.f32	s14, s1
 800b352:	eef0 7a41 	vmov.f32	s15, s2
 800b356:	edc7 6a01 	vstr	s13, [r7, #4]
 800b35a:	ed87 7a02 	vstr	s14, [r7, #8]
 800b35e:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800b362:	edd7 7a01 	vldr	s15, [r7, #4]
 800b366:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b36e:	d10f      	bne.n	800b390 <FusionVectorIsZero+0x4c>
 800b370:	edd7 7a02 	vldr	s15, [r7, #8]
 800b374:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b37c:	d108      	bne.n	800b390 <FusionVectorIsZero+0x4c>
 800b37e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b382:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b38a:	d101      	bne.n	800b390 <FusionVectorIsZero+0x4c>
 800b38c:	2301      	movs	r3, #1
 800b38e:	e000      	b.n	800b392 <FusionVectorIsZero+0x4e>
 800b390:	2300      	movs	r3, #0
 800b392:	f003 0301 	and.w	r3, r3, #1
 800b396:	b2db      	uxtb	r3, r3
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800b3a4:	b480      	push	{r7}
 800b3a6:	b091      	sub	sp, #68	; 0x44
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	eeb0 5a40 	vmov.f32	s10, s0
 800b3ae:	eef0 5a60 	vmov.f32	s11, s1
 800b3b2:	eeb0 6a41 	vmov.f32	s12, s2
 800b3b6:	eef0 6a61 	vmov.f32	s13, s3
 800b3ba:	eeb0 7a42 	vmov.f32	s14, s4
 800b3be:	eef0 7a62 	vmov.f32	s15, s5
 800b3c2:	ed87 5a07 	vstr	s10, [r7, #28]
 800b3c6:	edc7 5a08 	vstr	s11, [r7, #32]
 800b3ca:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b3ce:	edc7 6a04 	vstr	s13, [r7, #16]
 800b3d2:	ed87 7a05 	vstr	s14, [r7, #20]
 800b3d6:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 800b3da:	ed97 7a07 	vldr	s14, [r7, #28]
 800b3de:	edd7 7a04 	vldr	s15, [r7, #16]
 800b3e2:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b3e6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800b3ea:	ed97 7a08 	vldr	s14, [r7, #32]
 800b3ee:	edd7 7a05 	vldr	s15, [r7, #20]
 800b3f2:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b3f6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800b3fa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b3fe:	edd7 7a06 	vldr	s15, [r7, #24]
 800b402:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b406:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b40a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b40e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b412:	ca07      	ldmia	r2, {r0, r1, r2}
 800b414:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b418:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b41a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b41e:	ee06 1a90 	vmov	s13, r1
 800b422:	ee07 2a10 	vmov	s14, r2
 800b426:	ee07 3a90 	vmov	s15, r3
}
 800b42a:	eeb0 0a66 	vmov.f32	s0, s13
 800b42e:	eef0 0a47 	vmov.f32	s1, s14
 800b432:	eeb0 1a67 	vmov.f32	s2, s15
 800b436:	3744      	adds	r7, #68	; 0x44
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 800b440:	b480      	push	{r7}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	eef0 6a40 	vmov.f32	s13, s0
 800b44a:	eeb0 7a60 	vmov.f32	s14, s1
 800b44e:	eef0 7a41 	vmov.f32	s15, s2
 800b452:	edc7 6a01 	vstr	s13, [r7, #4]
 800b456:	ed87 7a02 	vstr	s14, [r7, #8]
 800b45a:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800b45e:	ed97 7a01 	vldr	s14, [r7, #4]
 800b462:	edd7 7a02 	vldr	s15, [r7, #8]
 800b466:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b46a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b46e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800b472:	eeb0 0a67 	vmov.f32	s0, s15
 800b476:	3714      	adds	r7, #20
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800b480:	b480      	push	{r7}
 800b482:	b08f      	sub	sp, #60	; 0x3c
 800b484:	af00      	add	r7, sp, #0
 800b486:	eef0 6a40 	vmov.f32	s13, s0
 800b48a:	eeb0 7a60 	vmov.f32	s14, s1
 800b48e:	eef0 7a41 	vmov.f32	s15, s2
 800b492:	edc7 1a04 	vstr	s3, [r7, #16]
 800b496:	edc7 6a05 	vstr	s13, [r7, #20]
 800b49a:	ed87 7a06 	vstr	s14, [r7, #24]
 800b49e:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 800b4a2:	ed97 7a05 	vldr	s14, [r7, #20]
 800b4a6:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4aa:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b4ae:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800b4b2:	ed97 7a06 	vldr	s14, [r7, #24]
 800b4b6:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4ba:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b4be:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800b4c2:	ed97 7a07 	vldr	s14, [r7, #28]
 800b4c6:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4ca:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b4ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800b4d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b4d6:	f107 0220 	add.w	r2, r7, #32
 800b4da:	ca07      	ldmia	r2, {r0, r1, r2}
 800b4dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b4e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e6:	ee06 1a90 	vmov	s13, r1
 800b4ea:	ee07 2a10 	vmov	s14, r2
 800b4ee:	ee07 3a90 	vmov	s15, r3
}
 800b4f2:	eeb0 0a66 	vmov.f32	s0, s13
 800b4f6:	eef0 0a47 	vmov.f32	s1, s14
 800b4fa:	eeb0 1a67 	vmov.f32	s2, s15
 800b4fe:	373c      	adds	r7, #60	; 0x3c
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b508:	b480      	push	{r7}
 800b50a:	b091      	sub	sp, #68	; 0x44
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	eeb0 5a40 	vmov.f32	s10, s0
 800b512:	eef0 5a60 	vmov.f32	s11, s1
 800b516:	eeb0 6a41 	vmov.f32	s12, s2
 800b51a:	eef0 6a61 	vmov.f32	s13, s3
 800b51e:	eeb0 7a42 	vmov.f32	s14, s4
 800b522:	eef0 7a62 	vmov.f32	s15, s5
 800b526:	ed87 5a07 	vstr	s10, [r7, #28]
 800b52a:	edc7 5a08 	vstr	s11, [r7, #32]
 800b52e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b532:	edc7 6a04 	vstr	s13, [r7, #16]
 800b536:	ed87 7a05 	vstr	s14, [r7, #20]
 800b53a:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800b53e:	ed97 7a07 	vldr	s14, [r7, #28]
 800b542:	edd7 7a04 	vldr	s15, [r7, #16]
 800b546:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b54a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800b54e:	ed97 7a08 	vldr	s14, [r7, #32]
 800b552:	edd7 7a05 	vldr	s15, [r7, #20]
 800b556:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b55a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800b55e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b562:	edd7 7a06 	vldr	s15, [r7, #24]
 800b566:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b56a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b56e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b572:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b576:	ca07      	ldmia	r2, {r0, r1, r2}
 800b578:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b57c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b57e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b582:	ee06 1a90 	vmov	s13, r1
 800b586:	ee07 2a10 	vmov	s14, r2
 800b58a:	ee07 3a90 	vmov	s15, r3
}
 800b58e:	eeb0 0a66 	vmov.f32	s0, s13
 800b592:	eef0 0a47 	vmov.f32	s1, s14
 800b596:	eeb0 1a67 	vmov.f32	s2, s15
 800b59a:	3744      	adds	r7, #68	; 0x44
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b5a4:	b480      	push	{r7}
 800b5a6:	b091      	sub	sp, #68	; 0x44
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	eeb0 5a40 	vmov.f32	s10, s0
 800b5ae:	eef0 5a60 	vmov.f32	s11, s1
 800b5b2:	eeb0 6a41 	vmov.f32	s12, s2
 800b5b6:	eef0 6a61 	vmov.f32	s13, s3
 800b5ba:	eeb0 7a42 	vmov.f32	s14, s4
 800b5be:	eef0 7a62 	vmov.f32	s15, s5
 800b5c2:	ed87 5a07 	vstr	s10, [r7, #28]
 800b5c6:	edc7 5a08 	vstr	s11, [r7, #32]
 800b5ca:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b5ce:	edc7 6a04 	vstr	s13, [r7, #16]
 800b5d2:	ed87 7a05 	vstr	s14, [r7, #20]
 800b5d6:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 800b5da:	ed97 7a08 	vldr	s14, [r7, #32]
 800b5de:	edd7 7a06 	vldr	s15, [r7, #24]
 800b5e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5e6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b5ea:	edd7 7a05 	vldr	s15, [r7, #20]
 800b5ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b5f2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b5f6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800b5fa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b5fe:	edd7 7a04 	vldr	s15, [r7, #16]
 800b602:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b606:	edd7 6a07 	vldr	s13, [r7, #28]
 800b60a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b60e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b612:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b616:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800b61a:	ed97 7a07 	vldr	s14, [r7, #28]
 800b61e:	edd7 7a05 	vldr	s15, [r7, #20]
 800b622:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b626:	edd7 6a08 	vldr	s13, [r7, #32]
 800b62a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b62e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b632:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b636:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b63a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b63e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b642:	ca07      	ldmia	r2, {r0, r1, r2}
 800b644:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b648:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b64a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b64c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b64e:	ee06 1a90 	vmov	s13, r1
 800b652:	ee07 2a10 	vmov	s14, r2
 800b656:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800b65a:	eeb0 0a66 	vmov.f32	s0, s13
 800b65e:	eef0 0a47 	vmov.f32	s1, s14
 800b662:	eeb0 1a67 	vmov.f32	s2, s15
 800b666:	3744      	adds	r7, #68	; 0x44
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <FusionVectorDotProduct>:
 * @brief Returns the dot product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Dot product.
 */
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b670:	b580      	push	{r7, lr}
 800b672:	b08a      	sub	sp, #40	; 0x28
 800b674:	af00      	add	r7, sp, #0
 800b676:	eeb0 5a40 	vmov.f32	s10, s0
 800b67a:	eef0 5a60 	vmov.f32	s11, s1
 800b67e:	eeb0 6a41 	vmov.f32	s12, s2
 800b682:	eef0 6a61 	vmov.f32	s13, s3
 800b686:	eeb0 7a42 	vmov.f32	s14, s4
 800b68a:	eef0 7a62 	vmov.f32	s15, s5
 800b68e:	ed87 5a03 	vstr	s10, [r7, #12]
 800b692:	edc7 5a04 	vstr	s11, [r7, #16]
 800b696:	ed87 6a05 	vstr	s12, [r7, #20]
 800b69a:	edc7 6a00 	vstr	s13, [r7]
 800b69e:	ed87 7a01 	vstr	s14, [r7, #4]
 800b6a2:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 800b6a6:	ed97 5a00 	vldr	s10, [r7]
 800b6aa:	edd7 5a01 	vldr	s11, [r7, #4]
 800b6ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6b2:	edd7 6a03 	vldr	s13, [r7, #12]
 800b6b6:	ed97 7a04 	vldr	s14, [r7, #16]
 800b6ba:	edd7 7a05 	vldr	s15, [r7, #20]
 800b6be:	eef0 1a45 	vmov.f32	s3, s10
 800b6c2:	eeb0 2a65 	vmov.f32	s4, s11
 800b6c6:	eef0 2a46 	vmov.f32	s5, s12
 800b6ca:	eeb0 0a66 	vmov.f32	s0, s13
 800b6ce:	eef0 0a47 	vmov.f32	s1, s14
 800b6d2:	eeb0 1a67 	vmov.f32	s2, s15
 800b6d6:	f7ff ff17 	bl	800b508 <FusionVectorHadamardProduct>
 800b6da:	eef0 6a40 	vmov.f32	s13, s0
 800b6de:	eeb0 7a60 	vmov.f32	s14, s1
 800b6e2:	eef0 7a41 	vmov.f32	s15, s2
 800b6e6:	edc7 6a07 	vstr	s13, [r7, #28]
 800b6ea:	ed87 7a08 	vstr	s14, [r7, #32]
 800b6ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800b6f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6f6:	ed97 7a08 	vldr	s14, [r7, #32]
 800b6fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b6fe:	eeb0 0a66 	vmov.f32	s0, s13
 800b702:	eef0 0a47 	vmov.f32	s1, s14
 800b706:	eeb0 1a67 	vmov.f32	s2, s15
 800b70a:	f7ff fe99 	bl	800b440 <FusionVectorSum>
 800b70e:	eef0 7a40 	vmov.f32	s15, s0
}
 800b712:	eeb0 0a67 	vmov.f32	s0, s15
 800b716:	3728      	adds	r7, #40	; 0x28
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b088      	sub	sp, #32
 800b720:	af00      	add	r7, sp, #0
 800b722:	eef0 6a40 	vmov.f32	s13, s0
 800b726:	eeb0 7a60 	vmov.f32	s14, s1
 800b72a:	eef0 7a41 	vmov.f32	s15, s2
 800b72e:	edc7 6a01 	vstr	s13, [r7, #4]
 800b732:	ed87 7a02 	vstr	s14, [r7, #8]
 800b736:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800b73a:	ed97 5a01 	vldr	s10, [r7, #4]
 800b73e:	edd7 5a02 	vldr	s11, [r7, #8]
 800b742:	ed97 6a03 	vldr	s12, [r7, #12]
 800b746:	edd7 6a01 	vldr	s13, [r7, #4]
 800b74a:	ed97 7a02 	vldr	s14, [r7, #8]
 800b74e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b752:	eef0 1a45 	vmov.f32	s3, s10
 800b756:	eeb0 2a65 	vmov.f32	s4, s11
 800b75a:	eef0 2a46 	vmov.f32	s5, s12
 800b75e:	eeb0 0a66 	vmov.f32	s0, s13
 800b762:	eef0 0a47 	vmov.f32	s1, s14
 800b766:	eeb0 1a67 	vmov.f32	s2, s15
 800b76a:	f7ff fecd 	bl	800b508 <FusionVectorHadamardProduct>
 800b76e:	eef0 6a40 	vmov.f32	s13, s0
 800b772:	eeb0 7a60 	vmov.f32	s14, s1
 800b776:	eef0 7a41 	vmov.f32	s15, s2
 800b77a:	edc7 6a05 	vstr	s13, [r7, #20]
 800b77e:	ed87 7a06 	vstr	s14, [r7, #24]
 800b782:	edc7 7a07 	vstr	s15, [r7, #28]
 800b786:	edd7 6a05 	vldr	s13, [r7, #20]
 800b78a:	ed97 7a06 	vldr	s14, [r7, #24]
 800b78e:	edd7 7a07 	vldr	s15, [r7, #28]
 800b792:	eeb0 0a66 	vmov.f32	s0, s13
 800b796:	eef0 0a47 	vmov.f32	s1, s14
 800b79a:	eeb0 1a67 	vmov.f32	s2, s15
 800b79e:	f7ff fe4f 	bl	800b440 <FusionVectorSum>
 800b7a2:	eef0 7a40 	vmov.f32	s15, s0
}
 800b7a6:	eeb0 0a67 	vmov.f32	s0, s15
 800b7aa:	3720      	adds	r7, #32
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b08c      	sub	sp, #48	; 0x30
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	eef0 6a40 	vmov.f32	s13, s0
 800b7ba:	eeb0 7a60 	vmov.f32	s14, s1
 800b7be:	eef0 7a41 	vmov.f32	s15, s2
 800b7c2:	edc7 6a05 	vstr	s13, [r7, #20]
 800b7c6:	ed87 7a06 	vstr	s14, [r7, #24]
 800b7ca:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800b7ce:	edd7 6a05 	vldr	s13, [r7, #20]
 800b7d2:	ed97 7a06 	vldr	s14, [r7, #24]
 800b7d6:	edd7 7a07 	vldr	s15, [r7, #28]
 800b7da:	eeb0 0a66 	vmov.f32	s0, s13
 800b7de:	eef0 0a47 	vmov.f32	s1, s14
 800b7e2:	eeb0 1a67 	vmov.f32	s2, s15
 800b7e6:	f7ff ff99 	bl	800b71c <FusionVectorMagnitudeSquared>
 800b7ea:	eef0 7a40 	vmov.f32	s15, s0
 800b7ee:	eeb0 0a67 	vmov.f32	s0, s15
 800b7f2:	f7ff fd77 	bl	800b2e4 <FusionFastInverseSqrt>
 800b7f6:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800b7fa:	edd7 6a05 	vldr	s13, [r7, #20]
 800b7fe:	ed97 7a06 	vldr	s14, [r7, #24]
 800b802:	edd7 7a07 	vldr	s15, [r7, #28]
 800b806:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800b80a:	eeb0 0a66 	vmov.f32	s0, s13
 800b80e:	eef0 0a47 	vmov.f32	s1, s14
 800b812:	eeb0 1a67 	vmov.f32	s2, s15
 800b816:	f7ff fe33 	bl	800b480 <FusionVectorMultiplyScalar>
 800b81a:	eef0 6a40 	vmov.f32	s13, s0
 800b81e:	eeb0 7a60 	vmov.f32	s14, s1
 800b822:	eef0 7a41 	vmov.f32	s15, s2
 800b826:	edc7 6a08 	vstr	s13, [r7, #32]
 800b82a:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800b82e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800b832:	6a39      	ldr	r1, [r7, #32]
 800b834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b838:	ee06 1a90 	vmov	s13, r1
 800b83c:	ee07 2a10 	vmov	s14, r2
 800b840:	ee07 3a90 	vmov	s15, r3
}
 800b844:	eeb0 0a66 	vmov.f32	s0, s13
 800b848:	eef0 0a47 	vmov.f32	s1, s14
 800b84c:	eeb0 1a67 	vmov.f32	s2, s15
 800b850:	3730      	adds	r7, #48	; 0x30
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800b856:	b490      	push	{r4, r7}
 800b858:	b094      	sub	sp, #80	; 0x50
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	eeb0 4a40 	vmov.f32	s8, s0
 800b860:	eef0 4a60 	vmov.f32	s9, s1
 800b864:	eeb0 5a41 	vmov.f32	s10, s2
 800b868:	eef0 5a61 	vmov.f32	s11, s3
 800b86c:	eeb0 6a42 	vmov.f32	s12, s4
 800b870:	eef0 6a62 	vmov.f32	s13, s5
 800b874:	eeb0 7a43 	vmov.f32	s14, s6
 800b878:	eef0 7a63 	vmov.f32	s15, s7
 800b87c:	ed87 4a08 	vstr	s8, [r7, #32]
 800b880:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800b884:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800b888:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800b88c:	ed87 6a04 	vstr	s12, [r7, #16]
 800b890:	edc7 6a05 	vstr	s13, [r7, #20]
 800b894:	ed87 7a06 	vstr	s14, [r7, #24]
 800b898:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 800b89c:	ed97 7a08 	vldr	s14, [r7, #32]
 800b8a0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b8a4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b8a8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 800b8ac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b8b0:	edd7 7a05 	vldr	s15, [r7, #20]
 800b8b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b8b8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 800b8bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b8c0:	edd7 7a06 	vldr	s15, [r7, #24]
 800b8c4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b8c8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 800b8cc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b8d0:	edd7 7a07 	vldr	s15, [r7, #28]
 800b8d4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b8d8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800b8dc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800b8e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b8e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b8e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b8ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b8ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b8ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8f2:	ee06 0a10 	vmov	s12, r0
 800b8f6:	ee06 1a90 	vmov	s13, r1
 800b8fa:	ee07 2a10 	vmov	s14, r2
 800b8fe:	ee07 3a90 	vmov	s15, r3
}
 800b902:	eeb0 0a46 	vmov.f32	s0, s12
 800b906:	eef0 0a66 	vmov.f32	s1, s13
 800b90a:	eeb0 1a47 	vmov.f32	s2, s14
 800b90e:	eef0 1a67 	vmov.f32	s3, s15
 800b912:	3750      	adds	r7, #80	; 0x50
 800b914:	46bd      	mov	sp, r7
 800b916:	bc90      	pop	{r4, r7}
 800b918:	4770      	bx	lr

0800b91a <FusionQuaternionMultiply>:
 * @brief Returns the multiplication of two quaternions.
 * @param quaternionA Quaternion A (to be post-multiplied).
 * @param quaternionB Quaternion B (to be pre-multiplied).
 * @return Multiplication of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800b91a:	b490      	push	{r4, r7}
 800b91c:	b094      	sub	sp, #80	; 0x50
 800b91e:	af00      	add	r7, sp, #0
 800b920:	eeb0 4a40 	vmov.f32	s8, s0
 800b924:	eef0 4a60 	vmov.f32	s9, s1
 800b928:	eeb0 5a41 	vmov.f32	s10, s2
 800b92c:	eef0 5a61 	vmov.f32	s11, s3
 800b930:	eeb0 6a42 	vmov.f32	s12, s4
 800b934:	eef0 6a62 	vmov.f32	s13, s5
 800b938:	eeb0 7a43 	vmov.f32	s14, s6
 800b93c:	eef0 7a63 	vmov.f32	s15, s7
 800b940:	ed87 4a08 	vstr	s8, [r7, #32]
 800b944:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800b948:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800b94c:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800b950:	ed87 6a04 	vstr	s12, [r7, #16]
 800b954:	edc7 6a05 	vstr	s13, [r7, #20]
 800b958:	ed87 7a06 	vstr	s14, [r7, #24]
 800b95c:	edc7 7a07 	vstr	s15, [r7, #28]
#define A quaternionA.element
#define B quaternionB.element
    const FusionQuaternion result = {.element = {
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 800b960:	ed97 7a08 	vldr	s14, [r7, #32]
 800b964:	edd7 7a04 	vldr	s15, [r7, #16]
 800b968:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b96c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b970:	edd7 7a05 	vldr	s15, [r7, #20]
 800b974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b978:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b97c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b980:	edd7 7a06 	vldr	s15, [r7, #24]
 800b984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b988:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b98c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b990:	edd7 7a07 	vldr	s15, [r7, #28]
 800b994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b998:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b99c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 800b9a0:	ed97 7a08 	vldr	s14, [r7, #32]
 800b9a4:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9ac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b9b0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9bc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b9c0:	edd7 7a07 	vldr	s15, [r7, #28]
 800b9c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9cc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b9d0:	edd7 7a06 	vldr	s15, [r7, #24]
 800b9d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9d8:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800b9dc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 800b9e0:	ed97 7a08 	vldr	s14, [r7, #32]
 800b9e4:	edd7 7a06 	vldr	s15, [r7, #24]
 800b9e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9ec:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b9f0:	edd7 7a07 	vldr	s15, [r7, #28]
 800b9f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b9fc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ba00:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba08:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba0c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ba10:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba18:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800ba1c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 800ba20:	ed97 7a08 	vldr	s14, [r7, #32]
 800ba24:	edd7 7a07 	vldr	s15, [r7, #28]
 800ba28:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba2c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ba30:	edd7 7a06 	vldr	s15, [r7, #24]
 800ba34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba38:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba3c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ba40:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba48:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ba4c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ba50:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba58:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800ba5c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800ba60:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800ba64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ba6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ba6e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ba70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba76:	ee06 0a10 	vmov	s12, r0
 800ba7a:	ee06 1a90 	vmov	s13, r1
 800ba7e:	ee07 2a10 	vmov	s14, r2
 800ba82:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800ba86:	eeb0 0a46 	vmov.f32	s0, s12
 800ba8a:	eef0 0a66 	vmov.f32	s1, s13
 800ba8e:	eeb0 1a47 	vmov.f32	s2, s14
 800ba92:	eef0 1a67 	vmov.f32	s3, s15
 800ba96:	3750      	adds	r7, #80	; 0x50
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bc90      	pop	{r4, r7}
 800ba9c:	4770      	bx	lr

0800ba9e <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 800ba9e:	b490      	push	{r4, r7}
 800baa0:	b094      	sub	sp, #80	; 0x50
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	eef0 4a40 	vmov.f32	s9, s0
 800baa8:	eeb0 5a60 	vmov.f32	s10, s1
 800baac:	eef0 5a41 	vmov.f32	s11, s2
 800bab0:	eeb0 6a61 	vmov.f32	s12, s3
 800bab4:	eef0 6a42 	vmov.f32	s13, s4
 800bab8:	eeb0 7a62 	vmov.f32	s14, s5
 800babc:	eef0 7a43 	vmov.f32	s15, s6
 800bac0:	edc7 4a08 	vstr	s9, [r7, #32]
 800bac4:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 800bac8:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 800bacc:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 800bad0:	edc7 6a05 	vstr	s13, [r7, #20]
 800bad4:	ed87 7a06 	vstr	s14, [r7, #24]
 800bad8:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 800badc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bae0:	eeb1 7a67 	vneg.f32	s14, s15
 800bae4:	edd7 7a05 	vldr	s15, [r7, #20]
 800bae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800baec:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800baf0:	edd7 7a06 	vldr	s15, [r7, #24]
 800baf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800baf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bafc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bb00:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb08:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bb0c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 800bb10:	ed97 7a08 	vldr	s14, [r7, #32]
 800bb14:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb18:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb1c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bb20:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb28:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb2c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bb30:	edd7 7a06 	vldr	s15, [r7, #24]
 800bb34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb38:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bb3c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800bb40:	ed97 7a08 	vldr	s14, [r7, #32]
 800bb44:	edd7 7a06 	vldr	s15, [r7, #24]
 800bb48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb4c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800bb50:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb58:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bb5c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bb60:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb68:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bb6c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 800bb70:	ed97 7a08 	vldr	s14, [r7, #32]
 800bb74:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb78:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb7c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800bb80:	edd7 7a06 	vldr	s15, [r7, #24]
 800bb84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb88:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb8c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bb90:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb98:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bb9c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800bba0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800bba4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bba8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bbaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bbae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bbb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bbb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb6:	ee06 0a10 	vmov	s12, r0
 800bbba:	ee06 1a90 	vmov	s13, r1
 800bbbe:	ee07 2a10 	vmov	s14, r2
 800bbc2:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 800bbc6:	eeb0 0a46 	vmov.f32	s0, s12
 800bbca:	eef0 0a66 	vmov.f32	s1, s13
 800bbce:	eeb0 1a47 	vmov.f32	s2, s14
 800bbd2:	eef0 1a67 	vmov.f32	s3, s15
 800bbd6:	3750      	adds	r7, #80	; 0x50
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bc90      	pop	{r4, r7}
 800bbdc:	4770      	bx	lr

0800bbde <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800bbde:	b590      	push	{r4, r7, lr}
 800bbe0:	b093      	sub	sp, #76	; 0x4c
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	eeb0 6a40 	vmov.f32	s12, s0
 800bbe8:	eef0 6a60 	vmov.f32	s13, s1
 800bbec:	eeb0 7a41 	vmov.f32	s14, s2
 800bbf0:	eef0 7a61 	vmov.f32	s15, s3
 800bbf4:	ed87 6a04 	vstr	s12, [r7, #16]
 800bbf8:	edc7 6a05 	vstr	s13, [r7, #20]
 800bbfc:	ed87 7a06 	vstr	s14, [r7, #24]
 800bc00:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800bc04:	ed97 7a04 	vldr	s14, [r7, #16]
 800bc08:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc10:	edd7 6a05 	vldr	s13, [r7, #20]
 800bc14:	edd7 7a05 	vldr	s15, [r7, #20]
 800bc18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc20:	edd7 6a06 	vldr	s13, [r7, #24]
 800bc24:	edd7 7a06 	vldr	s15, [r7, #24]
 800bc28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc30:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc34:	edd7 7a07 	vldr	s15, [r7, #28]
 800bc38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bc3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc40:	eeb0 0a67 	vmov.f32	s0, s15
 800bc44:	f7ff fb4e 	bl	800b2e4 <FusionFastInverseSqrt>
 800bc48:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 800bc4c:	ed97 7a04 	vldr	s14, [r7, #16]
 800bc50:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bc54:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bc58:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 800bc5c:	ed97 7a05 	vldr	s14, [r7, #20]
 800bc60:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bc64:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bc68:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 800bc6c:	ed97 7a06 	vldr	s14, [r7, #24]
 800bc70:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bc74:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bc78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 800bc7c:	ed97 7a07 	vldr	s14, [r7, #28]
 800bc80:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bc84:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bc88:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800bc8c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800bc90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bc96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bc9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bca2:	ee06 0a10 	vmov	s12, r0
 800bca6:	ee06 1a90 	vmov	s13, r1
 800bcaa:	ee07 2a10 	vmov	s14, r2
 800bcae:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 800bcb2:	eeb0 0a46 	vmov.f32	s0, s12
 800bcb6:	eef0 0a66 	vmov.f32	s1, s13
 800bcba:	eeb0 1a47 	vmov.f32	s2, s14
 800bcbe:	eef0 1a67 	vmov.f32	s3, s15
 800bcc2:	374c      	adds	r7, #76	; 0x4c
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd90      	pop	{r4, r7, pc}

0800bcc8 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 800bcc8:	b5b0      	push	{r4, r5, r7, lr}
 800bcca:	b088      	sub	sp, #32
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800bcd0:	4b0b      	ldr	r3, [pc, #44]	; (800bd00 <FusionAhrsInitialise+0x38>)
 800bcd2:	f107 0408 	add.w	r4, r7, #8
 800bcd6:	461d      	mov	r5, r3
 800bcd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bcdc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bce0:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800bce4:	f107 0308 	add.w	r3, r7, #8
 800bce8:	4619      	mov	r1, r3
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f86e 	bl	800bdcc <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f807 	bl	800bd04 <FusionAhrsReset>
}
 800bcf6:	bf00      	nop
 800bcf8:	3720      	adds	r7, #32
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bdb0      	pop	{r4, r5, r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	080144e0 	.word	0x080144e0

0800bd04 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800bd04:	b480      	push	{r7}
 800bd06:	b091      	sub	sp, #68	; 0x44
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bd12:	619a      	str	r2, [r3, #24]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f04f 0200 	mov.w	r2, #0
 800bd1a:	61da      	str	r2, [r3, #28]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f04f 0200 	mov.w	r2, #0
 800bd22:	621a      	str	r2, [r3, #32]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f04f 0200 	mov.w	r2, #0
 800bd2a:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f04f 0200 	mov.w	r2, #0
 800bd32:	629a      	str	r2, [r3, #40]	; 0x28
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f04f 0200 	mov.w	r2, #0
 800bd3a:	62da      	str	r2, [r3, #44]	; 0x2c
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f04f 0200 	mov.w	r2, #0
 800bd42:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a1e      	ldr	r2, [pc, #120]	; (800bdc8 <FusionAhrsReset+0xc4>)
 800bd50:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2200      	movs	r2, #0
 800bd56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f04f 0200 	mov.w	r2, #0
 800bd60:	645a      	str	r2, [r3, #68]	; 0x44
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f04f 0200 	mov.w	r2, #0
 800bd68:	649a      	str	r2, [r3, #72]	; 0x48
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f04f 0200 	mov.w	r2, #0
 800bd70:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f04f 0200 	mov.w	r2, #0
 800bd78:	651a      	str	r2, [r3, #80]	; 0x50
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f04f 0200 	mov.w	r2, #0
 800bd80:	655a      	str	r2, [r3, #84]	; 0x54
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f04f 0200 	mov.w	r2, #0
 800bd88:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2200      	movs	r2, #0
 800bd96:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	695b      	ldr	r3, [r3, #20]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	695b      	ldr	r3, [r3, #20]
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bdba:	bf00      	nop
 800bdbc:	3744      	adds	r7, #68	; 0x44
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	41200000 	.word	0x41200000

0800bdcc <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	781a      	ldrb	r2, [r3, #0]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	685a      	ldr	r2, [r3, #4]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	edd3 7a02 	vldr	s15, [r3, #8]
 800bdec:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bdf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdf4:	d007      	beq.n	800be06 <FusionAhrsSetSettings+0x3a>
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	edd3 7a02 	vldr	s15, [r3, #8]
 800bdfc:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800bf30 <FusionAhrsSetSettings+0x164>
 800be00:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be04:	e001      	b.n	800be0a <FusionAhrsSetSettings+0x3e>
 800be06:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800bf34 <FusionAhrsSetSettings+0x168>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	edd3 7a03 	vldr	s15, [r3, #12]
 800be16:	eef5 7a40 	vcmp.f32	s15, #0.0
 800be1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be1e:	d01b      	beq.n	800be58 <FusionAhrsSetSettings+0x8c>
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	edd3 7a03 	vldr	s15, [r3, #12]
 800be26:	eeb0 0a67 	vmov.f32	s0, s15
 800be2a:	f7ff fa47 	bl	800b2bc <FusionDegreesToRadians>
 800be2e:	eef0 7a40 	vmov.f32	s15, s0
 800be32:	eeb0 0a67 	vmov.f32	s0, s15
 800be36:	f005 ffe1 	bl	8011dfc <sinf>
 800be3a:	eef0 7a40 	vmov.f32	s15, s0
 800be3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800be42:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be46:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800be4a:	eeb0 0a67 	vmov.f32	s0, s15
 800be4e:	f006 f8b9 	bl	8011fc4 <powf>
 800be52:	eef0 7a40 	vmov.f32	s15, s0
 800be56:	e001      	b.n	800be5c <FusionAhrsSetSettings+0x90>
 800be58:	eddf 7a36 	vldr	s15, [pc, #216]	; 800bf34 <FusionAhrsSetSettings+0x168>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	edd3 7a04 	vldr	s15, [r3, #16]
 800be68:	eef5 7a40 	vcmp.f32	s15, #0.0
 800be6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be70:	d01b      	beq.n	800beaa <FusionAhrsSetSettings+0xde>
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	edd3 7a04 	vldr	s15, [r3, #16]
 800be78:	eeb0 0a67 	vmov.f32	s0, s15
 800be7c:	f7ff fa1e 	bl	800b2bc <FusionDegreesToRadians>
 800be80:	eef0 7a40 	vmov.f32	s15, s0
 800be84:	eeb0 0a67 	vmov.f32	s0, s15
 800be88:	f005 ffb8 	bl	8011dfc <sinf>
 800be8c:	eef0 7a40 	vmov.f32	s15, s0
 800be90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800be94:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be98:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800be9c:	eeb0 0a67 	vmov.f32	s0, s15
 800bea0:	f006 f890 	bl	8011fc4 <powf>
 800bea4:	eef0 7a40 	vmov.f32	s15, s0
 800bea8:	e001      	b.n	800beae <FusionAhrsSetSettings+0xe2>
 800beaa:	eddf 7a22 	vldr	s15, [pc, #136]	; 800bf34 <FusionAhrsSetSettings+0x168>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	695a      	ldr	r2, [r3, #20]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	695b      	ldr	r3, [r3, #20]
 800bec0:	461a      	mov	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	695b      	ldr	r3, [r3, #20]
 800beca:	461a      	mov	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	edd3 7a01 	vldr	s15, [r3, #4]
 800bed6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800beda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bede:	d003      	beq.n	800bee8 <FusionAhrsSetSettings+0x11c>
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	695b      	ldr	r3, [r3, #20]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d105      	bne.n	800bef4 <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a13      	ldr	r2, [pc, #76]	; (800bf38 <FusionAhrsSetSettings+0x16c>)
 800beec:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	4a11      	ldr	r2, [pc, #68]	; (800bf38 <FusionAhrsSetSettings+0x16c>)
 800bef2:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800befa:	f083 0301 	eor.w	r3, r3, #1
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d003      	beq.n	800bf0c <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	685a      	ldr	r2, [r3, #4]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	edd3 7a01 	vldr	s15, [r3, #4]
 800bf12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800bf16:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bf1a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800bf1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 800bf28:	bf00      	nop
 800bf2a:	3708      	adds	r7, #8
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	3f7ae148 	.word	0x3f7ae148
 800bf34:	7f7fffff 	.word	0x7f7fffff
 800bf38:	7f7fffff 	.word	0x7f7fffff

0800bf3c <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 800bf3c:	b590      	push	{r4, r7, lr}
 800bf3e:	b0bf      	sub	sp, #252	; 0xfc
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bf44:	eeb0 5a61 	vmov.f32	s10, s3
 800bf48:	eef0 5a42 	vmov.f32	s11, s4
 800bf4c:	eeb0 6a62 	vmov.f32	s12, s5
 800bf50:	eef0 6a43 	vmov.f32	s13, s6
 800bf54:	eeb0 7a63 	vmov.f32	s14, s7
 800bf58:	eef0 7a44 	vmov.f32	s15, s8
 800bf5c:	edc7 4a01 	vstr	s9, [r7, #4]
 800bf60:	ed87 0a08 	vstr	s0, [r7, #32]
 800bf64:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 800bf68:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 800bf6c:	ed87 5a05 	vstr	s10, [r7, #20]
 800bf70:	edc7 5a06 	vstr	s11, [r7, #24]
 800bf74:	ed87 6a07 	vstr	s12, [r7, #28]
 800bf78:	edc7 6a02 	vstr	s13, [r7, #8]
 800bf7c:	ed87 7a03 	vstr	s14, [r7, #12]
 800bf80:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800bf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf86:	3328      	adds	r3, #40	; 0x28
 800bf88:	f107 0214 	add.w	r2, r7, #20
 800bf8c:	ca07      	ldmia	r2, {r0, r1, r2}
 800bf8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 800bf92:	edd7 7a08 	vldr	s15, [r7, #32]
 800bf96:	eeb0 7ae7 	vabs.f32	s14, s15
 800bf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9c:	edd3 7a02 	vldr	s15, [r3, #8]
 800bfa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bfa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa8:	dc17      	bgt.n	800bfda <FusionAhrsUpdate+0x9e>
 800bfaa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bfae:	eeb0 7ae7 	vabs.f32	s14, s15
 800bfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb4:	edd3 7a02 	vldr	s15, [r3, #8]
 800bfb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bfbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfc0:	dc0b      	bgt.n	800bfda <FusionAhrsUpdate+0x9e>
 800bfc2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bfc6:	eeb0 7ae7 	vabs.f32	s14, s15
 800bfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfcc:	edd3 7a02 	vldr	s15, [r3, #8]
 800bfd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bfd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd8:	dd15      	ble.n	800c006 <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 800bfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfdc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800bfe0:	3318      	adds	r3, #24
 800bfe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bfe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 800bfe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfea:	f7ff fe8b 	bl	800bd04 <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 800bfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff0:	f103 0418 	add.w	r4, r3, #24
 800bff4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bffa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 800bffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c000:	2201      	movs	r2, #1
 800c002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800c006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c008:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d02d      	beq.n	800c06c <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 800c010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c012:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c018:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800c01c:	edd7 7a01 	vldr	s15, [r7, #4]
 800c020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c024:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 800c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c030:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c036:	edd3 7a01 	vldr	s15, [r3, #4]
 800c03a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c042:	d407      	bmi.n	800c054 <FusionAhrsUpdate+0x118>
 800c044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c046:	edd3 7a01 	vldr	s15, [r3, #4]
 800c04a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c052:	d10b      	bne.n	800c06c <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 800c054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c056:	685a      	ldr	r2, [r3, #4]
 800c058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05a:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 800c05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 800c064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c066:	2200      	movs	r2, #0
 800c068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 800c06c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c06e:	f000 faf4 	bl	800c65a <HalfGravity>
 800c072:	eef0 6a40 	vmov.f32	s13, s0
 800c076:	eeb0 7a60 	vmov.f32	s14, s1
 800c07a:	eef0 7a41 	vmov.f32	s15, s2
 800c07e:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 800c082:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 800c086:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800c08a:	f04f 0300 	mov.w	r3, #0
 800c08e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c092:	f04f 0300 	mov.w	r3, #0
 800c096:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c09a:	f04f 0300 	mov.w	r3, #0
 800c09e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 800c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 800c0aa:	edd7 6a05 	vldr	s13, [r7, #20]
 800c0ae:	ed97 7a06 	vldr	s14, [r7, #24]
 800c0b2:	edd7 7a07 	vldr	s15, [r7, #28]
 800c0b6:	eeb0 0a66 	vmov.f32	s0, s13
 800c0ba:	eef0 0a47 	vmov.f32	s1, s14
 800c0be:	eeb0 1a67 	vmov.f32	s2, s15
 800c0c2:	f7ff f93f 	bl	800b344 <FusionVectorIsZero>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	f083 0301 	eor.w	r3, r3, #1
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f000 809c 	beq.w	800c20c <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 800c0d4:	edd7 6a05 	vldr	s13, [r7, #20]
 800c0d8:	ed97 7a06 	vldr	s14, [r7, #24]
 800c0dc:	edd7 7a07 	vldr	s15, [r7, #28]
 800c0e0:	eeb0 0a66 	vmov.f32	s0, s13
 800c0e4:	eef0 0a47 	vmov.f32	s1, s14
 800c0e8:	eeb0 1a67 	vmov.f32	s2, s15
 800c0ec:	f7ff fb60 	bl	800b7b0 <FusionVectorNormalise>
 800c0f0:	eef0 6a40 	vmov.f32	s13, s0
 800c0f4:	eeb0 7a60 	vmov.f32	s14, s1
 800c0f8:	eef0 7a41 	vmov.f32	s15, s2
 800c0fc:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 800c100:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 800c104:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800c108:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c10a:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 800c10e:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800c112:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 800c116:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800c11a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800c11e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800c122:	eef0 1a45 	vmov.f32	s3, s10
 800c126:	eeb0 2a65 	vmov.f32	s4, s11
 800c12a:	eef0 2a46 	vmov.f32	s5, s12
 800c12e:	eeb0 0a66 	vmov.f32	s0, s13
 800c132:	eef0 0a47 	vmov.f32	s1, s14
 800c136:	eeb0 1a67 	vmov.f32	s2, s15
 800c13a:	f000 fc55 	bl	800c9e8 <Feedback>
 800c13e:	eef0 6a40 	vmov.f32	s13, s0
 800c142:	eeb0 7a60 	vmov.f32	s14, s1
 800c146:	eef0 7a41 	vmov.f32	s15, s2
 800c14a:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 800c14e:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 800c152:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 800c156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c158:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d118      	bne.n	800c192 <FusionAhrsUpdate+0x256>
 800c160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c162:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800c166:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800c16a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c16e:	eeb0 0a66 	vmov.f32	s0, s13
 800c172:	eef0 0a47 	vmov.f32	s1, s14
 800c176:	eeb0 1a67 	vmov.f32	s2, s15
 800c17a:	f7ff facf 	bl	800b71c <FusionVectorMagnitudeSquared>
 800c17e:	eeb0 7a40 	vmov.f32	s14, s0
 800c182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c184:	edd3 7a03 	vldr	s15, [r3, #12]
 800c188:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c190:	d80a      	bhi.n	800c1a8 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 800c192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c194:	2200      	movs	r2, #0
 800c196:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 800c19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c19e:	f1a3 0209 	sub.w	r2, r3, #9
 800c1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a4:	661a      	str	r2, [r3, #96]	; 0x60
 800c1a6:	e004      	b.n	800c1b2 <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 800c1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1ac:	1c5a      	adds	r2, r3, #1
 800c1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 800c1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	dd07      	ble.n	800c1ce <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 800c1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 800c1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800c1cc:	e004      	b.n	800c1d8 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d0:	695b      	ldr	r3, [r3, #20]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d6:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800c1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1da:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1de:	695b      	ldr	r3, [r3, #20]
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	2100      	movs	r1, #0
 800c1e4:	f000 fcb5 	bl	800cb52 <Clamp>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ec:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 800c1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c1f4:	f083 0301 	eor.w	r3, r3, #1
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d006      	beq.n	800c20c <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 800c1fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c200:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c204:	3244      	adds	r2, #68	; 0x44
 800c206:	ca07      	ldmia	r2, {r0, r1, r2}
 800c208:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800c20c:	f04f 0300 	mov.w	r3, #0
 800c210:	673b      	str	r3, [r7, #112]	; 0x70
 800c212:	f04f 0300 	mov.w	r3, #0
 800c216:	677b      	str	r3, [r7, #116]	; 0x74
 800c218:	f04f 0300 	mov.w	r3, #0
 800c21c:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = false;
 800c21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c220:	2200      	movs	r2, #0
 800c222:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 800c226:	edd7 6a02 	vldr	s13, [r7, #8]
 800c22a:	ed97 7a03 	vldr	s14, [r7, #12]
 800c22e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c232:	eeb0 0a66 	vmov.f32	s0, s13
 800c236:	eef0 0a47 	vmov.f32	s1, s14
 800c23a:	eeb0 1a67 	vmov.f32	s2, s15
 800c23e:	f7ff f881 	bl	800b344 <FusionVectorIsZero>
 800c242:	4603      	mov	r3, r0
 800c244:	f083 0301 	eor.w	r3, r3, #1
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f000 80d1 	beq.w	800c3f2 <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800c250:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c252:	f000 fabf 	bl	800c7d4 <HalfMagnetic>
 800c256:	eef0 6a40 	vmov.f32	s13, s0
 800c25a:	eeb0 7a60 	vmov.f32	s14, s1
 800c25e:	eef0 7a41 	vmov.f32	s15, s2
 800c262:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 800c266:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 800c26a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800c26e:	ed97 5a02 	vldr	s10, [r7, #8]
 800c272:	edd7 5a03 	vldr	s11, [r7, #12]
 800c276:	ed97 6a04 	vldr	s12, [r7, #16]
 800c27a:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800c27e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800c282:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c286:	eef0 1a45 	vmov.f32	s3, s10
 800c28a:	eeb0 2a65 	vmov.f32	s4, s11
 800c28e:	eef0 2a46 	vmov.f32	s5, s12
 800c292:	eeb0 0a66 	vmov.f32	s0, s13
 800c296:	eef0 0a47 	vmov.f32	s1, s14
 800c29a:	eeb0 1a67 	vmov.f32	s2, s15
 800c29e:	f7ff f981 	bl	800b5a4 <FusionVectorCrossProduct>
 800c2a2:	eef0 6a40 	vmov.f32	s13, s0
 800c2a6:	eeb0 7a60 	vmov.f32	s14, s1
 800c2aa:	eef0 7a41 	vmov.f32	s15, s2
 800c2ae:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800c2b2:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 800c2b6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 800c2ba:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800c2be:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800c2c2:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800c2c6:	eeb0 0a66 	vmov.f32	s0, s13
 800c2ca:	eef0 0a47 	vmov.f32	s1, s14
 800c2ce:	eeb0 1a67 	vmov.f32	s2, s15
 800c2d2:	f7ff fa6d 	bl	800b7b0 <FusionVectorNormalise>
 800c2d6:	eef0 6a40 	vmov.f32	s13, s0
 800c2da:	eeb0 7a60 	vmov.f32	s14, s1
 800c2de:	eef0 7a41 	vmov.f32	s15, s2
 800c2e2:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 800c2e6:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 800c2ea:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800c2ee:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c2f0:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 800c2f4:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 800c2f8:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800c2fc:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800c300:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800c304:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800c308:	eef0 1a45 	vmov.f32	s3, s10
 800c30c:	eeb0 2a65 	vmov.f32	s4, s11
 800c310:	eef0 2a46 	vmov.f32	s5, s12
 800c314:	eeb0 0a66 	vmov.f32	s0, s13
 800c318:	eef0 0a47 	vmov.f32	s1, s14
 800c31c:	eeb0 1a67 	vmov.f32	s2, s15
 800c320:	f000 fb62 	bl	800c9e8 <Feedback>
 800c324:	eef0 6a40 	vmov.f32	s13, s0
 800c328:	eeb0 7a60 	vmov.f32	s14, s1
 800c32c:	eef0 7a41 	vmov.f32	s15, s2
 800c330:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 800c334:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 800c338:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 800c33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c342:	2b00      	cmp	r3, #0
 800c344:	d118      	bne.n	800c378 <FusionAhrsUpdate+0x43c>
 800c346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c348:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800c34c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800c350:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800c354:	eeb0 0a66 	vmov.f32	s0, s13
 800c358:	eef0 0a47 	vmov.f32	s1, s14
 800c35c:	eeb0 1a67 	vmov.f32	s2, s15
 800c360:	f7ff f9dc 	bl	800b71c <FusionVectorMagnitudeSquared>
 800c364:	eeb0 7a40 	vmov.f32	s14, s0
 800c368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36a:	edd3 7a04 	vldr	s15, [r3, #16]
 800c36e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c376:	d80a      	bhi.n	800c38e <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 800c378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 800c380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c384:	f1a3 0209 	sub.w	r2, r3, #9
 800c388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38a:	66da      	str	r2, [r3, #108]	; 0x6c
 800c38c:	e004      	b.n	800c398 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 800c38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c392:	1c5a      	adds	r2, r3, #1
 800c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c396:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 800c398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	dd07      	ble.n	800c3b4 <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 800c3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 800c3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800c3b2:	e004      	b.n	800c3be <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b6:	695b      	ldr	r3, [r3, #20]
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3bc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800c3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c4:	695b      	ldr	r3, [r3, #20]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	f000 fbc2 	bl	800cb52 <Clamp>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d2:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 800c3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c3da:	f083 0301 	eor.w	r3, r3, #1
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d006      	beq.n	800c3f2 <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 800c3e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c3ea:	3250      	adds	r2, #80	; 0x50
 800c3ec:	ca07      	ldmia	r2, {r0, r1, r2}
 800c3ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800c3f2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800c3f6:	f7fe ff61 	bl	800b2bc <FusionDegreesToRadians>
 800c3fa:	eeb0 6a40 	vmov.f32	s12, s0
 800c3fe:	edd7 6a08 	vldr	s13, [r7, #32]
 800c402:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c406:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c40a:	eef0 1a46 	vmov.f32	s3, s12
 800c40e:	eeb0 0a66 	vmov.f32	s0, s13
 800c412:	eef0 0a47 	vmov.f32	s1, s14
 800c416:	eeb0 1a67 	vmov.f32	s2, s15
 800c41a:	f7ff f831 	bl	800b480 <FusionVectorMultiplyScalar>
 800c41e:	eef0 6a40 	vmov.f32	s13, s0
 800c422:	eeb0 7a60 	vmov.f32	s14, s1
 800c426:	eef0 7a41 	vmov.f32	s15, s2
 800c42a:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 800c42e:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 800c432:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 800c436:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 800c43a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800c43e:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800c442:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800c446:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800c44a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c44e:	eef0 1a45 	vmov.f32	s3, s10
 800c452:	eeb0 2a65 	vmov.f32	s4, s11
 800c456:	eef0 2a46 	vmov.f32	s5, s12
 800c45a:	eeb0 0a66 	vmov.f32	s0, s13
 800c45e:	eef0 0a47 	vmov.f32	s1, s14
 800c462:	eeb0 1a67 	vmov.f32	s2, s15
 800c466:	f7fe ff9d 	bl	800b3a4 <FusionVectorAdd>
 800c46a:	eef0 6a40 	vmov.f32	s13, s0
 800c46e:	eeb0 7a60 	vmov.f32	s14, s1
 800c472:	eef0 7a41 	vmov.f32	s15, s2
 800c476:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 800c47a:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800c47e:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800c482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c484:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800c488:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800c48c:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800c490:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800c494:	eef0 1a46 	vmov.f32	s3, s12
 800c498:	eeb0 0a66 	vmov.f32	s0, s13
 800c49c:	eef0 0a47 	vmov.f32	s1, s14
 800c4a0:	eeb0 1a67 	vmov.f32	s2, s15
 800c4a4:	f7fe ffec 	bl	800b480 <FusionVectorMultiplyScalar>
 800c4a8:	eef0 6a40 	vmov.f32	s13, s0
 800c4ac:	eeb0 7a60 	vmov.f32	s14, s1
 800c4b0:	eef0 7a41 	vmov.f32	s15, s2
 800c4b4:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 800c4b8:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 800c4bc:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800c4c0:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 800c4c4:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 800c4c8:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 800c4cc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800c4d0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800c4d4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800c4d8:	eef0 1a45 	vmov.f32	s3, s10
 800c4dc:	eeb0 2a65 	vmov.f32	s4, s11
 800c4e0:	eef0 2a46 	vmov.f32	s5, s12
 800c4e4:	eeb0 0a66 	vmov.f32	s0, s13
 800c4e8:	eef0 0a47 	vmov.f32	s1, s14
 800c4ec:	eeb0 1a67 	vmov.f32	s2, s15
 800c4f0:	f7fe ff58 	bl	800b3a4 <FusionVectorAdd>
 800c4f4:	eef0 6a40 	vmov.f32	s13, s0
 800c4f8:	eeb0 7a60 	vmov.f32	s14, s1
 800c4fc:	eef0 7a41 	vmov.f32	s15, s2
 800c500:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800c504:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800c508:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 800c50c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800c510:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c514:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c518:	edd7 1a01 	vldr	s3, [r7, #4]
 800c51c:	eeb0 0a66 	vmov.f32	s0, s13
 800c520:	eef0 0a47 	vmov.f32	s1, s14
 800c524:	eeb0 1a67 	vmov.f32	s2, s15
 800c528:	f7fe ffaa 	bl	800b480 <FusionVectorMultiplyScalar>
 800c52c:	eef0 6a40 	vmov.f32	s13, s0
 800c530:	eeb0 7a60 	vmov.f32	s14, s1
 800c534:	eef0 7a41 	vmov.f32	s15, s2
 800c538:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 800c53c:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 800c540:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 800c544:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 800c548:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 800c54c:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 800c550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c552:	ed93 6a06 	vldr	s12, [r3, #24]
 800c556:	edd3 6a07 	vldr	s13, [r3, #28]
 800c55a:	ed93 7a08 	vldr	s14, [r3, #32]
 800c55e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c562:	eeb0 2a64 	vmov.f32	s4, s9
 800c566:	eef0 2a45 	vmov.f32	s5, s10
 800c56a:	eeb0 3a65 	vmov.f32	s6, s11
 800c56e:	eeb0 0a46 	vmov.f32	s0, s12
 800c572:	eef0 0a66 	vmov.f32	s1, s13
 800c576:	eeb0 1a47 	vmov.f32	s2, s14
 800c57a:	eef0 1a67 	vmov.f32	s3, s15
 800c57e:	f7ff fa8e 	bl	800ba9e <FusionQuaternionMultiplyVector>
 800c582:	eeb0 6a40 	vmov.f32	s12, s0
 800c586:	eef0 6a60 	vmov.f32	s13, s1
 800c58a:	eeb0 7a41 	vmov.f32	s14, s2
 800c58e:	eef0 7a61 	vmov.f32	s15, s3
 800c592:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 800c596:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 800c59a:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 800c59e:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 800c5a2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c5a4:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 800c5a8:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 800c5ac:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 800c5b0:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800c5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b6:	ed93 6a06 	vldr	s12, [r3, #24]
 800c5ba:	edd3 6a07 	vldr	s13, [r3, #28]
 800c5be:	ed93 7a08 	vldr	s14, [r3, #32]
 800c5c2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c5c6:	eeb0 2a44 	vmov.f32	s4, s8
 800c5ca:	eef0 2a64 	vmov.f32	s5, s9
 800c5ce:	eeb0 3a45 	vmov.f32	s6, s10
 800c5d2:	eef0 3a65 	vmov.f32	s7, s11
 800c5d6:	eeb0 0a46 	vmov.f32	s0, s12
 800c5da:	eef0 0a66 	vmov.f32	s1, s13
 800c5de:	eeb0 1a47 	vmov.f32	s2, s14
 800c5e2:	eef0 1a67 	vmov.f32	s3, s15
 800c5e6:	f7ff f936 	bl	800b856 <FusionQuaternionAdd>
 800c5ea:	eeb0 6a40 	vmov.f32	s12, s0
 800c5ee:	eef0 6a60 	vmov.f32	s13, s1
 800c5f2:	eeb0 7a41 	vmov.f32	s14, s2
 800c5f6:	eef0 7a61 	vmov.f32	s15, s3
 800c5fa:	ed84 6a06 	vstr	s12, [r4, #24]
 800c5fe:	edc4 6a07 	vstr	s13, [r4, #28]
 800c602:	ed84 7a08 	vstr	s14, [r4, #32]
 800c606:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 800c60a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60e:	ed93 6a06 	vldr	s12, [r3, #24]
 800c612:	edd3 6a07 	vldr	s13, [r3, #28]
 800c616:	ed93 7a08 	vldr	s14, [r3, #32]
 800c61a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c61e:	eeb0 0a46 	vmov.f32	s0, s12
 800c622:	eef0 0a66 	vmov.f32	s1, s13
 800c626:	eeb0 1a47 	vmov.f32	s2, s14
 800c62a:	eef0 1a67 	vmov.f32	s3, s15
 800c62e:	f7ff fad6 	bl	800bbde <FusionQuaternionNormalise>
 800c632:	eeb0 6a40 	vmov.f32	s12, s0
 800c636:	eef0 6a60 	vmov.f32	s13, s1
 800c63a:	eeb0 7a41 	vmov.f32	s14, s2
 800c63e:	eef0 7a61 	vmov.f32	s15, s3
 800c642:	ed84 6a06 	vstr	s12, [r4, #24]
 800c646:	edc4 6a07 	vstr	s13, [r4, #28]
 800c64a:	ed84 7a08 	vstr	s14, [r4, #32]
 800c64e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800c652:	bf00      	nop
 800c654:	37fc      	adds	r7, #252	; 0xfc
 800c656:	46bd      	mov	sp, r7
 800c658:	bd90      	pop	{r4, r7, pc}

0800c65a <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 800c65a:	b480      	push	{r7}
 800c65c:	b093      	sub	sp, #76	; 0x4c
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	2b01      	cmp	r3, #1
 800c668:	dc02      	bgt.n	800c670 <HalfGravity+0x16>
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	da03      	bge.n	800c676 <HalfGravity+0x1c>
 800c66e:	e094      	b.n	800c79a <HalfGravity+0x140>
 800c670:	2b02      	cmp	r3, #2
 800c672:	d048      	beq.n	800c706 <HalfGravity+0xac>
 800c674:	e091      	b.n	800c79a <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	ed93 7a07 	vldr	s14, [r3, #28]
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c682:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	edd3 6a06 	vldr	s13, [r3, #24]
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c696:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c69a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	ed93 7a08 	vldr	s14, [r3, #32]
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c6aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	edd3 6a06 	vldr	s13, [r3, #24]
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	edd3 7a07 	vldr	s15, [r3, #28]
 800c6ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6be:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c6c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	ed93 7a06 	vldr	s14, [r3, #24]
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	edd3 7a06 	vldr	s15, [r3, #24]
 800c6d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c6da:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c6ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6ee:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c6f2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 800c6f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c6fa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c6fe:	ca07      	ldmia	r2, {r0, r1, r2}
 800c700:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c704:	e052      	b.n	800c7ac <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	ed93 7a06 	vldr	s14, [r3, #24]
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c712:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	edd3 6a07 	vldr	s13, [r3, #28]
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c726:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c72a:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	ed93 7a08 	vldr	s14, [r3, #32]
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c73a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	edd3 6a06 	vldr	s13, [r3, #24]
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	edd3 7a07 	vldr	s15, [r3, #28]
 800c74a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c74e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c752:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 800c756:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	ed93 7a06 	vldr	s14, [r3, #24]
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	edd3 7a06 	vldr	s15, [r3, #24]
 800c766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c76a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c76e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c77e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c782:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c786:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 800c78a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c78e:	f107 0218 	add.w	r2, r7, #24
 800c792:	ca07      	ldmia	r2, {r0, r1, r2}
 800c794:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c798:	e008      	b.n	800c7ac <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800c79a:	f04f 0300 	mov.w	r3, #0
 800c79e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7a0:	f04f 0300 	mov.w	r3, #0
 800c7a4:	643b      	str	r3, [r7, #64]	; 0x40
 800c7a6:	f04f 0300 	mov.w	r3, #0
 800c7aa:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 800c7ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c7ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7b2:	ee06 1a90 	vmov	s13, r1
 800c7b6:	ee07 2a10 	vmov	s14, r2
 800c7ba:	ee07 3a90 	vmov	s15, r3
 800c7be:	eeb0 0a66 	vmov.f32	s0, s13
 800c7c2:	eef0 0a47 	vmov.f32	s1, s14
 800c7c6:	eeb0 1a67 	vmov.f32	s2, s15
 800c7ca:	374c      	adds	r7, #76	; 0x4c
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 800c7d4:	b480      	push	{r7}
 800c7d6:	b097      	sub	sp, #92	; 0x5c
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	f000 809a 	beq.w	800c91a <HalfMagnetic+0x146>
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	f300 80e1 	bgt.w	800c9ae <HalfMagnetic+0x1da>
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d002      	beq.n	800c7f6 <HalfMagnetic+0x22>
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d048      	beq.n	800c886 <HalfMagnetic+0xb2>
 800c7f4:	e0db      	b.n	800c9ae <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	ed93 7a07 	vldr	s14, [r3, #28]
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	edd3 7a08 	vldr	s15, [r3, #32]
 800c802:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	edd3 6a06 	vldr	s13, [r3, #24]
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c816:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c81a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	ed93 7a06 	vldr	s14, [r3, #24]
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	edd3 7a06 	vldr	s15, [r3, #24]
 800c82a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c82e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c832:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	edd3 6a08 	vldr	s13, [r3, #32]
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	edd3 7a08 	vldr	s15, [r3, #32]
 800c842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c846:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c84a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	ed93 7a08 	vldr	s14, [r3, #32]
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c85a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	edd3 6a06 	vldr	s13, [r3, #24]
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	edd3 7a07 	vldr	s15, [r3, #28]
 800c86a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c86e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c872:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 800c876:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c87a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800c87e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c880:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c884:	e09c      	b.n	800c9c0 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	ed93 7a06 	vldr	s14, [r3, #24]
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c892:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c896:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c89a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	edd3 6a07 	vldr	s13, [r3, #28]
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	edd3 7a07 	vldr	s15, [r3, #28]
 800c8aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8ae:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c8b2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	ed93 7a06 	vldr	s14, [r3, #24]
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c8c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	edd3 6a07 	vldr	s13, [r3, #28]
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	edd3 7a08 	vldr	s15, [r3, #32]
 800c8d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8d6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c8da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	ed93 7a07 	vldr	s14, [r3, #28]
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c8ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	edd3 6a06 	vldr	s13, [r3, #24]
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	edd3 7a08 	vldr	s15, [r3, #32]
 800c8fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c902:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800c906:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800c90a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c90e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c912:	ca07      	ldmia	r2, {r0, r1, r2}
 800c914:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c918:	e052      	b.n	800c9c0 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	ed93 7a07 	vldr	s14, [r3, #28]
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	edd3 7a08 	vldr	s15, [r3, #32]
 800c926:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	edd3 6a06 	vldr	s13, [r3, #24]
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c93a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c93e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800c942:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	ed93 7a06 	vldr	s14, [r3, #24]
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c952:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c956:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c95a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	edd3 6a08 	vldr	s13, [r3, #32]
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	edd3 7a08 	vldr	s15, [r3, #32]
 800c96a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c96e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c972:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	ed93 7a06 	vldr	s14, [r3, #24]
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c982:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	edd3 6a08 	vldr	s13, [r3, #32]
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c996:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800c99a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800c99e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c9a2:	f107 021c 	add.w	r2, r7, #28
 800c9a6:	ca07      	ldmia	r2, {r0, r1, r2}
 800c9a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c9ac:	e008      	b.n	800c9c0 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800c9ae:	f04f 0300 	mov.w	r3, #0
 800c9b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9b4:	f04f 0300 	mov.w	r3, #0
 800c9b8:	653b      	str	r3, [r7, #80]	; 0x50
 800c9ba:	f04f 0300 	mov.w	r3, #0
 800c9be:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 800c9c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c9c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9c6:	ee06 1a90 	vmov	s13, r1
 800c9ca:	ee07 2a10 	vmov	s14, r2
 800c9ce:	ee07 3a90 	vmov	s15, r3
 800c9d2:	eeb0 0a66 	vmov.f32	s0, s13
 800c9d6:	eef0 0a47 	vmov.f32	s1, s14
 800c9da:	eeb0 1a67 	vmov.f32	s2, s15
 800c9de:	375c      	adds	r7, #92	; 0x5c
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b090      	sub	sp, #64	; 0x40
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	eeb0 5a40 	vmov.f32	s10, s0
 800c9f2:	eef0 5a60 	vmov.f32	s11, s1
 800c9f6:	eeb0 6a41 	vmov.f32	s12, s2
 800c9fa:	eef0 6a61 	vmov.f32	s13, s3
 800c9fe:	eeb0 7a42 	vmov.f32	s14, s4
 800ca02:	eef0 7a62 	vmov.f32	s15, s5
 800ca06:	ed87 5a07 	vstr	s10, [r7, #28]
 800ca0a:	edc7 5a08 	vstr	s11, [r7, #32]
 800ca0e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800ca12:	edc7 6a04 	vstr	s13, [r7, #16]
 800ca16:	ed87 7a05 	vstr	s14, [r7, #20]
 800ca1a:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 800ca1e:	ed97 5a04 	vldr	s10, [r7, #16]
 800ca22:	edd7 5a05 	vldr	s11, [r7, #20]
 800ca26:	ed97 6a06 	vldr	s12, [r7, #24]
 800ca2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca2e:	ed97 7a08 	vldr	s14, [r7, #32]
 800ca32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ca36:	eef0 1a45 	vmov.f32	s3, s10
 800ca3a:	eeb0 2a65 	vmov.f32	s4, s11
 800ca3e:	eef0 2a46 	vmov.f32	s5, s12
 800ca42:	eeb0 0a66 	vmov.f32	s0, s13
 800ca46:	eef0 0a47 	vmov.f32	s1, s14
 800ca4a:	eeb0 1a67 	vmov.f32	s2, s15
 800ca4e:	f7fe fe0f 	bl	800b670 <FusionVectorDotProduct>
 800ca52:	eef0 7a40 	vmov.f32	s15, s0
 800ca56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ca5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca5e:	d540      	bpl.n	800cae2 <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 800ca60:	ed97 5a04 	vldr	s10, [r7, #16]
 800ca64:	edd7 5a05 	vldr	s11, [r7, #20]
 800ca68:	ed97 6a06 	vldr	s12, [r7, #24]
 800ca6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca70:	ed97 7a08 	vldr	s14, [r7, #32]
 800ca74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ca78:	eef0 1a45 	vmov.f32	s3, s10
 800ca7c:	eeb0 2a65 	vmov.f32	s4, s11
 800ca80:	eef0 2a46 	vmov.f32	s5, s12
 800ca84:	eeb0 0a66 	vmov.f32	s0, s13
 800ca88:	eef0 0a47 	vmov.f32	s1, s14
 800ca8c:	eeb0 1a67 	vmov.f32	s2, s15
 800ca90:	f7fe fd88 	bl	800b5a4 <FusionVectorCrossProduct>
 800ca94:	eef0 6a40 	vmov.f32	s13, s0
 800ca98:	eeb0 7a60 	vmov.f32	s14, s1
 800ca9c:	eef0 7a41 	vmov.f32	s15, s2
 800caa0:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800caa4:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800caa8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800caac:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800cab0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800cab4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cab8:	eeb0 0a66 	vmov.f32	s0, s13
 800cabc:	eef0 0a47 	vmov.f32	s1, s14
 800cac0:	eeb0 1a67 	vmov.f32	s2, s15
 800cac4:	f7fe fe74 	bl	800b7b0 <FusionVectorNormalise>
 800cac8:	eef0 6a40 	vmov.f32	s13, s0
 800cacc:	eeb0 7a60 	vmov.f32	s14, s1
 800cad0:	eef0 7a41 	vmov.f32	s15, s2
 800cad4:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800cad8:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800cadc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800cae0:	e025      	b.n	800cb2e <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 800cae2:	ed97 5a04 	vldr	s10, [r7, #16]
 800cae6:	edd7 5a05 	vldr	s11, [r7, #20]
 800caea:	ed97 6a06 	vldr	s12, [r7, #24]
 800caee:	edd7 6a07 	vldr	s13, [r7, #28]
 800caf2:	ed97 7a08 	vldr	s14, [r7, #32]
 800caf6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cafa:	eef0 1a45 	vmov.f32	s3, s10
 800cafe:	eeb0 2a65 	vmov.f32	s4, s11
 800cb02:	eef0 2a46 	vmov.f32	s5, s12
 800cb06:	eeb0 0a66 	vmov.f32	s0, s13
 800cb0a:	eef0 0a47 	vmov.f32	s1, s14
 800cb0e:	eeb0 1a67 	vmov.f32	s2, s15
 800cb12:	f7fe fd47 	bl	800b5a4 <FusionVectorCrossProduct>
 800cb16:	eef0 6a40 	vmov.f32	s13, s0
 800cb1a:	eeb0 7a60 	vmov.f32	s14, s1
 800cb1e:	eef0 7a41 	vmov.f32	s15, s2
 800cb22:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800cb26:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800cb2a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 800cb2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb34:	ee06 1a90 	vmov	s13, r1
 800cb38:	ee07 2a10 	vmov	s14, r2
 800cb3c:	ee07 3a90 	vmov	s15, r3
 800cb40:	eeb0 0a66 	vmov.f32	s0, s13
 800cb44:	eef0 0a47 	vmov.f32	s1, s14
 800cb48:	eeb0 1a67 	vmov.f32	s2, s15
 800cb4c:	3740      	adds	r7, #64	; 0x40
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 800cb52:	b480      	push	{r7}
 800cb54:	b085      	sub	sp, #20
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	60f8      	str	r0, [r7, #12]
 800cb5a:	60b9      	str	r1, [r7, #8]
 800cb5c:	607a      	str	r2, [r7, #4]
    if (value < min) {
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	da01      	bge.n	800cb6a <Clamp+0x18>
        return min;
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	e006      	b.n	800cb78 <Clamp+0x26>
    }
    if (value > max) {
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	dd01      	ble.n	800cb76 <Clamp+0x24>
        return max;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	e000      	b.n	800cb78 <Clamp+0x26>
    }
    return value;
 800cb76:	68fb      	ldr	r3, [r7, #12]
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3714      	adds	r7, #20
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <FusionAhrsUpdateNoMagnetometer>:
 * @param ahrs AHRS algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08c      	sub	sp, #48	; 0x30
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	61f8      	str	r0, [r7, #28]
 800cb8c:	eeb0 5a40 	vmov.f32	s10, s0
 800cb90:	eef0 5a60 	vmov.f32	s11, s1
 800cb94:	eeb0 6a41 	vmov.f32	s12, s2
 800cb98:	eef0 6a61 	vmov.f32	s13, s3
 800cb9c:	eeb0 7a42 	vmov.f32	s14, s4
 800cba0:	eef0 7a62 	vmov.f32	s15, s5
 800cba4:	ed87 3a00 	vstr	s6, [r7]
 800cba8:	ed87 5a04 	vstr	s10, [r7, #16]
 800cbac:	edc7 5a05 	vstr	s11, [r7, #20]
 800cbb0:	ed87 6a06 	vstr	s12, [r7, #24]
 800cbb4:	edc7 6a01 	vstr	s13, [r7, #4]
 800cbb8:	ed87 7a02 	vstr	s14, [r7, #8]
 800cbbc:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 800cbc0:	f04f 0300 	mov.w	r3, #0
 800cbc4:	627b      	str	r3, [r7, #36]	; 0x24
 800cbc6:	f04f 0300 	mov.w	r3, #0
 800cbca:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbcc:	f04f 0300 	mov.w	r3, #0
 800cbd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbd2:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 800cbd6:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 800cbda:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 800cbde:	ed97 5a01 	vldr	s10, [r7, #4]
 800cbe2:	edd7 5a02 	vldr	s11, [r7, #8]
 800cbe6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbea:	edd7 6a04 	vldr	s13, [r7, #16]
 800cbee:	ed97 7a05 	vldr	s14, [r7, #20]
 800cbf2:	edd7 7a06 	vldr	s15, [r7, #24]
 800cbf6:	edd7 4a00 	vldr	s9, [r7]
 800cbfa:	eef0 1a45 	vmov.f32	s3, s10
 800cbfe:	eeb0 2a65 	vmov.f32	s4, s11
 800cc02:	eef0 2a46 	vmov.f32	s5, s12
 800cc06:	eeb0 0a66 	vmov.f32	s0, s13
 800cc0a:	eef0 0a47 	vmov.f32	s1, s14
 800cc0e:	eeb0 1a67 	vmov.f32	s2, s15
 800cc12:	69f8      	ldr	r0, [r7, #28]
 800cc14:	f7ff f992 	bl	800bf3c <FusionAhrsUpdate>

    // Zero heading during initialisation
    if (ahrs->initialising == true) {
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d004      	beq.n	800cc2c <FusionAhrsUpdateNoMagnetometer+0xa8>
        FusionAhrsSetHeading(ahrs, 0.0f);
 800cc22:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800cc34 <FusionAhrsUpdateNoMagnetometer+0xb0>
 800cc26:	69f8      	ldr	r0, [r7, #28]
 800cc28:	f000 f829 	bl	800cc7e <FusionAhrsSetHeading>
    }
}
 800cc2c:	bf00      	nop
 800cc2e:	3730      	adds	r7, #48	; 0x30
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	00000000 	.word	0x00000000

0800cc38 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 800cc38:	b490      	push	{r4, r7}
 800cc3a:	b08a      	sub	sp, #40	; 0x28
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	f107 0418 	add.w	r4, r7, #24
 800cc46:	3318      	adds	r3, #24
 800cc48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cc4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cc4e:	69b8      	ldr	r0, [r7, #24]
 800cc50:	69f9      	ldr	r1, [r7, #28]
 800cc52:	6a3a      	ldr	r2, [r7, #32]
 800cc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc56:	ee06 0a10 	vmov	s12, r0
 800cc5a:	ee06 1a90 	vmov	s13, r1
 800cc5e:	ee07 2a10 	vmov	s14, r2
 800cc62:	ee07 3a90 	vmov	s15, r3
}
 800cc66:	eeb0 0a46 	vmov.f32	s0, s12
 800cc6a:	eef0 0a66 	vmov.f32	s1, s13
 800cc6e:	eeb0 1a47 	vmov.f32	s2, s14
 800cc72:	eef0 1a67 	vmov.f32	s3, s15
 800cc76:	3728      	adds	r7, #40	; 0x28
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bc90      	pop	{r4, r7}
 800cc7c:	4770      	bx	lr

0800cc7e <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 800cc7e:	b590      	push	{r4, r7, lr}
 800cc80:	b089      	sub	sp, #36	; 0x24
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
 800cc86:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	ed93 7a06 	vldr	s14, [r3, #24]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cc96:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	edd3 6a07 	vldr	s13, [r3, #28]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	edd3 7a08 	vldr	s15, [r3, #32]
 800cca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ccaa:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	ed93 7a08 	vldr	s14, [r3, #32]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	edd3 7a08 	vldr	s15, [r3, #32]
 800ccba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccbe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ccc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ccd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ccd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccda:	eef0 0a67 	vmov.f32	s1, s15
 800ccde:	eeb0 0a46 	vmov.f32	s0, s12
 800cce2:	f005 f96d 	bl	8011fc0 <atan2f>
 800cce6:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 800ccea:	ed97 0a00 	vldr	s0, [r7]
 800ccee:	f7fe fae5 	bl	800b2bc <FusionDegreesToRadians>
 800ccf2:	eeb0 7a40 	vmov.f32	s14, s0
 800ccf6:	edd7 7a07 	vldr	s15, [r7, #28]
 800ccfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccfe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cd02:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd06:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 800cd0a:	ed97 0a06 	vldr	s0, [r7, #24]
 800cd0e:	f005 f831 	bl	8011d74 <cosf>
 800cd12:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 800cd16:	edc7 7a02 	vstr	s15, [r7, #8]
 800cd1a:	f04f 0300 	mov.w	r3, #0
 800cd1e:	60fb      	str	r3, [r7, #12]
 800cd20:	f04f 0300 	mov.w	r3, #0
 800cd24:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 800cd26:	ed97 0a06 	vldr	s0, [r7, #24]
 800cd2a:	f005 f867 	bl	8011dfc <sinf>
 800cd2e:	eef0 7a40 	vmov.f32	s15, s0
 800cd32:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 800cd36:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 800cd3a:	687c      	ldr	r4, [r7, #4]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	ed93 4a06 	vldr	s8, [r3, #24]
 800cd42:	edd3 4a07 	vldr	s9, [r3, #28]
 800cd46:	ed93 5a08 	vldr	s10, [r3, #32]
 800cd4a:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 800cd4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800cd52:	edd7 6a03 	vldr	s13, [r7, #12]
 800cd56:	ed97 7a04 	vldr	s14, [r7, #16]
 800cd5a:	edd7 7a05 	vldr	s15, [r7, #20]
 800cd5e:	eeb0 2a44 	vmov.f32	s4, s8
 800cd62:	eef0 2a64 	vmov.f32	s5, s9
 800cd66:	eeb0 3a45 	vmov.f32	s6, s10
 800cd6a:	eef0 3a65 	vmov.f32	s7, s11
 800cd6e:	eeb0 0a46 	vmov.f32	s0, s12
 800cd72:	eef0 0a66 	vmov.f32	s1, s13
 800cd76:	eeb0 1a47 	vmov.f32	s2, s14
 800cd7a:	eef0 1a67 	vmov.f32	s3, s15
 800cd7e:	f7fe fdcc 	bl	800b91a <FusionQuaternionMultiply>
 800cd82:	eeb0 6a40 	vmov.f32	s12, s0
 800cd86:	eef0 6a60 	vmov.f32	s13, s1
 800cd8a:	eeb0 7a41 	vmov.f32	s14, s2
 800cd8e:	eef0 7a61 	vmov.f32	s15, s3
 800cd92:	ed84 6a06 	vstr	s12, [r4, #24]
 800cd96:	edc4 6a07 	vstr	s13, [r4, #28]
 800cd9a:	ed84 7a08 	vstr	s14, [r4, #32]
 800cd9e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800cda2:	bf00      	nop
 800cda4:	3724      	adds	r7, #36	; 0x24
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd90      	pop	{r4, r7, pc}

0800cdaa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cdaa:	b480      	push	{r7}
 800cdac:	b085      	sub	sp, #20
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cdb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdbc:	2b84      	cmp	r3, #132	; 0x84
 800cdbe:	d005      	beq.n	800cdcc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cdc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	3303      	adds	r3, #3
 800cdca:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3714      	adds	r7, #20
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cdde:	f000 ffb1 	bl	800dd44 <vTaskStartScheduler>
  
  return osOK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cde8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdea:	b089      	sub	sp, #36	; 0x24
 800cdec:	af04      	add	r7, sp, #16
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	695b      	ldr	r3, [r3, #20]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d020      	beq.n	800ce3c <osThreadCreate+0x54>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	699b      	ldr	r3, [r3, #24]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d01c      	beq.n	800ce3c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	685c      	ldr	r4, [r3, #4]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681d      	ldr	r5, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	691e      	ldr	r6, [r3, #16]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7ff ffc8 	bl	800cdaa <makeFreeRtosPriority>
 800ce1a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	695b      	ldr	r3, [r3, #20]
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce24:	9202      	str	r2, [sp, #8]
 800ce26:	9301      	str	r3, [sp, #4]
 800ce28:	9100      	str	r1, [sp, #0]
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	4632      	mov	r2, r6
 800ce2e:	4629      	mov	r1, r5
 800ce30:	4620      	mov	r0, r4
 800ce32:	f000 fc9d 	bl	800d770 <xTaskCreateStatic>
 800ce36:	4603      	mov	r3, r0
 800ce38:	60fb      	str	r3, [r7, #12]
 800ce3a:	e01c      	b.n	800ce76 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	685c      	ldr	r4, [r3, #4]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce48:	b29e      	uxth	r6, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7ff ffaa 	bl	800cdaa <makeFreeRtosPriority>
 800ce56:	4602      	mov	r2, r0
 800ce58:	f107 030c 	add.w	r3, r7, #12
 800ce5c:	9301      	str	r3, [sp, #4]
 800ce5e:	9200      	str	r2, [sp, #0]
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	4632      	mov	r2, r6
 800ce64:	4629      	mov	r1, r5
 800ce66:	4620      	mov	r0, r4
 800ce68:	f000 fcdf 	bl	800d82a <xTaskCreate>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d001      	beq.n	800ce76 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ce72:	2300      	movs	r3, #0
 800ce74:	e000      	b.n	800ce78 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ce76:	68fb      	ldr	r3, [r7, #12]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3714      	adds	r7, #20
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce80 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d001      	beq.n	800ce96 <osDelay+0x16>
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	e000      	b.n	800ce98 <osDelay+0x18>
 800ce96:	2301      	movs	r3, #1
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f000 fdfd 	bl	800da98 <vTaskDelay>
  
  return osOK;
 800ce9e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3710      	adds	r7, #16
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f103 0208 	add.w	r2, r3, #8
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f04f 32ff 	mov.w	r2, #4294967295
 800cec0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f103 0208 	add.w	r2, r3, #8
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f103 0208 	add.w	r2, r3, #8
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2200      	movs	r2, #0
 800ceda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cedc:	bf00      	nop
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cef6:	bf00      	nop
 800cef8:	370c      	adds	r7, #12
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr

0800cf02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf02:	b480      	push	{r7}
 800cf04:	b085      	sub	sp, #20
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
 800cf0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	689a      	ldr	r2, [r3, #8]
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	683a      	ldr	r2, [r7, #0]
 800cf26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	683a      	ldr	r2, [r7, #0]
 800cf2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	1c5a      	adds	r2, r3, #1
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	601a      	str	r2, [r3, #0]
}
 800cf3e:	bf00      	nop
 800cf40:	3714      	adds	r7, #20
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf4a:	b480      	push	{r7}
 800cf4c:	b085      	sub	sp, #20
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
 800cf52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf60:	d103      	bne.n	800cf6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	60fb      	str	r3, [r7, #12]
 800cf68:	e00c      	b.n	800cf84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	3308      	adds	r3, #8
 800cf6e:	60fb      	str	r3, [r7, #12]
 800cf70:	e002      	b.n	800cf78 <vListInsert+0x2e>
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	60fb      	str	r3, [r7, #12]
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d2f6      	bcs.n	800cf72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	685a      	ldr	r2, [r3, #4]
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	683a      	ldr	r2, [r7, #0]
 800cf92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	683a      	ldr	r2, [r7, #0]
 800cf9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	1c5a      	adds	r2, r3, #1
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	601a      	str	r2, [r3, #0]
}
 800cfb0:	bf00      	nop
 800cfb2:	3714      	adds	r7, #20
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b085      	sub	sp, #20
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	6892      	ldr	r2, [r2, #8]
 800cfd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	6852      	ldr	r2, [r2, #4]
 800cfdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d103      	bne.n	800cff0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	689a      	ldr	r2, [r3, #8]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2200      	movs	r2, #0
 800cff4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	1e5a      	subs	r2, r3, #1
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3714      	adds	r7, #20
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d10a      	bne.n	800d03a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d028:	f383 8811 	msr	BASEPRI, r3
 800d02c:	f3bf 8f6f 	isb	sy
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d036:	bf00      	nop
 800d038:	e7fe      	b.n	800d038 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d03a:	f001 fcbb 	bl	800e9b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d046:	68f9      	ldr	r1, [r7, #12]
 800d048:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d04a:	fb01 f303 	mul.w	r3, r1, r3
 800d04e:	441a      	add	r2, r3
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2200      	movs	r2, #0
 800d058:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d06a:	3b01      	subs	r3, #1
 800d06c:	68f9      	ldr	r1, [r7, #12]
 800d06e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d070:	fb01 f303 	mul.w	r3, r1, r3
 800d074:	441a      	add	r2, r3
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	22ff      	movs	r2, #255	; 0xff
 800d07e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	22ff      	movs	r2, #255	; 0xff
 800d086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d114      	bne.n	800d0ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	691b      	ldr	r3, [r3, #16]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d01a      	beq.n	800d0ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	3310      	adds	r3, #16
 800d09c:	4618      	mov	r0, r3
 800d09e:	f001 f893 	bl	800e1c8 <xTaskRemoveFromEventList>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d012      	beq.n	800d0ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d0a8:	4b0c      	ldr	r3, [pc, #48]	; (800d0dc <xQueueGenericReset+0xcc>)
 800d0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ae:	601a      	str	r2, [r3, #0]
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	e009      	b.n	800d0ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	3310      	adds	r3, #16
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7ff fef2 	bl	800cea8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	3324      	adds	r3, #36	; 0x24
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7ff feed 	bl	800cea8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d0ce:	f001 fca1 	bl	800ea14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d0d2:	2301      	movs	r3, #1
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3710      	adds	r7, #16
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	e000ed04 	.word	0xe000ed04

0800d0e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b08a      	sub	sp, #40	; 0x28
 800d0e4:	af02      	add	r7, sp, #8
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10a      	bne.n	800d10a <xQueueGenericCreate+0x2a>
	__asm volatile
 800d0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f8:	f383 8811 	msr	BASEPRI, r3
 800d0fc:	f3bf 8f6f 	isb	sy
 800d100:	f3bf 8f4f 	dsb	sy
 800d104:	613b      	str	r3, [r7, #16]
}
 800d106:	bf00      	nop
 800d108:	e7fe      	b.n	800d108 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	68ba      	ldr	r2, [r7, #8]
 800d10e:	fb02 f303 	mul.w	r3, r2, r3
 800d112:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d114:	69fb      	ldr	r3, [r7, #28]
 800d116:	3348      	adds	r3, #72	; 0x48
 800d118:	4618      	mov	r0, r3
 800d11a:	f001 fd2d 	bl	800eb78 <pvPortMalloc>
 800d11e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d011      	beq.n	800d14a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	3348      	adds	r3, #72	; 0x48
 800d12e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	2200      	movs	r2, #0
 800d134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d138:	79fa      	ldrb	r2, [r7, #7]
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	4613      	mov	r3, r2
 800d140:	697a      	ldr	r2, [r7, #20]
 800d142:	68b9      	ldr	r1, [r7, #8]
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f000 f805 	bl	800d154 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d14a:	69bb      	ldr	r3, [r7, #24]
	}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3720      	adds	r7, #32
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	607a      	str	r2, [r7, #4]
 800d160:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d103      	bne.n	800d170 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	69ba      	ldr	r2, [r7, #24]
 800d16c:	601a      	str	r2, [r3, #0]
 800d16e:	e002      	b.n	800d176 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	68ba      	ldr	r2, [r7, #8]
 800d180:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d182:	2101      	movs	r1, #1
 800d184:	69b8      	ldr	r0, [r7, #24]
 800d186:	f7ff ff43 	bl	800d010 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d18a:	bf00      	nop
 800d18c:	3710      	adds	r7, #16
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
	...

0800d194 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b08e      	sub	sp, #56	; 0x38
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	607a      	str	r2, [r7, #4]
 800d1a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d10a      	bne.n	800d1c6 <xQueueGenericSend+0x32>
	__asm volatile
 800d1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b4:	f383 8811 	msr	BASEPRI, r3
 800d1b8:	f3bf 8f6f 	isb	sy
 800d1bc:	f3bf 8f4f 	dsb	sy
 800d1c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d1c2:	bf00      	nop
 800d1c4:	e7fe      	b.n	800d1c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d103      	bne.n	800d1d4 <xQueueGenericSend+0x40>
 800d1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d101      	bne.n	800d1d8 <xQueueGenericSend+0x44>
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	e000      	b.n	800d1da <xQueueGenericSend+0x46>
 800d1d8:	2300      	movs	r3, #0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d10a      	bne.n	800d1f4 <xQueueGenericSend+0x60>
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d1f0:	bf00      	nop
 800d1f2:	e7fe      	b.n	800d1f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	2b02      	cmp	r3, #2
 800d1f8:	d103      	bne.n	800d202 <xQueueGenericSend+0x6e>
 800d1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d101      	bne.n	800d206 <xQueueGenericSend+0x72>
 800d202:	2301      	movs	r3, #1
 800d204:	e000      	b.n	800d208 <xQueueGenericSend+0x74>
 800d206:	2300      	movs	r3, #0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d10a      	bne.n	800d222 <xQueueGenericSend+0x8e>
	__asm volatile
 800d20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d210:	f383 8811 	msr	BASEPRI, r3
 800d214:	f3bf 8f6f 	isb	sy
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	623b      	str	r3, [r7, #32]
}
 800d21e:	bf00      	nop
 800d220:	e7fe      	b.n	800d220 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d222:	f001 f98d 	bl	800e540 <xTaskGetSchedulerState>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d102      	bne.n	800d232 <xQueueGenericSend+0x9e>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d101      	bne.n	800d236 <xQueueGenericSend+0xa2>
 800d232:	2301      	movs	r3, #1
 800d234:	e000      	b.n	800d238 <xQueueGenericSend+0xa4>
 800d236:	2300      	movs	r3, #0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d10a      	bne.n	800d252 <xQueueGenericSend+0xbe>
	__asm volatile
 800d23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d240:	f383 8811 	msr	BASEPRI, r3
 800d244:	f3bf 8f6f 	isb	sy
 800d248:	f3bf 8f4f 	dsb	sy
 800d24c:	61fb      	str	r3, [r7, #28]
}
 800d24e:	bf00      	nop
 800d250:	e7fe      	b.n	800d250 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d252:	f001 fbaf 	bl	800e9b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d25e:	429a      	cmp	r2, r3
 800d260:	d302      	bcc.n	800d268 <xQueueGenericSend+0xd4>
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	2b02      	cmp	r3, #2
 800d266:	d129      	bne.n	800d2bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d268:	683a      	ldr	r2, [r7, #0]
 800d26a:	68b9      	ldr	r1, [r7, #8]
 800d26c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d26e:	f000 f96f 	bl	800d550 <prvCopyDataToQueue>
 800d272:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d010      	beq.n	800d29e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27e:	3324      	adds	r3, #36	; 0x24
 800d280:	4618      	mov	r0, r3
 800d282:	f000 ffa1 	bl	800e1c8 <xTaskRemoveFromEventList>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d013      	beq.n	800d2b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d28c:	4b3f      	ldr	r3, [pc, #252]	; (800d38c <xQueueGenericSend+0x1f8>)
 800d28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d292:	601a      	str	r2, [r3, #0]
 800d294:	f3bf 8f4f 	dsb	sy
 800d298:	f3bf 8f6f 	isb	sy
 800d29c:	e00a      	b.n	800d2b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d007      	beq.n	800d2b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d2a4:	4b39      	ldr	r3, [pc, #228]	; (800d38c <xQueueGenericSend+0x1f8>)
 800d2a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2aa:	601a      	str	r2, [r3, #0]
 800d2ac:	f3bf 8f4f 	dsb	sy
 800d2b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d2b4:	f001 fbae 	bl	800ea14 <vPortExitCritical>
				return pdPASS;
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e063      	b.n	800d384 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d103      	bne.n	800d2ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d2c2:	f001 fba7 	bl	800ea14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	e05c      	b.n	800d384 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d106      	bne.n	800d2de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2d0:	f107 0314 	add.w	r3, r7, #20
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f000 ffd9 	bl	800e28c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d2de:	f001 fb99 	bl	800ea14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d2e2:	f000 fd8f 	bl	800de04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2e6:	f001 fb65 	bl	800e9b4 <vPortEnterCritical>
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2f0:	b25b      	sxtb	r3, r3
 800d2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f6:	d103      	bne.n	800d300 <xQueueGenericSend+0x16c>
 800d2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d306:	b25b      	sxtb	r3, r3
 800d308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30c:	d103      	bne.n	800d316 <xQueueGenericSend+0x182>
 800d30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d310:	2200      	movs	r2, #0
 800d312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d316:	f001 fb7d 	bl	800ea14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d31a:	1d3a      	adds	r2, r7, #4
 800d31c:	f107 0314 	add.w	r3, r7, #20
 800d320:	4611      	mov	r1, r2
 800d322:	4618      	mov	r0, r3
 800d324:	f000 ffc8 	bl	800e2b8 <xTaskCheckForTimeOut>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d124      	bne.n	800d378 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d32e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d330:	f000 fa06 	bl	800d740 <prvIsQueueFull>
 800d334:	4603      	mov	r3, r0
 800d336:	2b00      	cmp	r3, #0
 800d338:	d018      	beq.n	800d36c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33c:	3310      	adds	r3, #16
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	4611      	mov	r1, r2
 800d342:	4618      	mov	r0, r3
 800d344:	f000 ff1c 	bl	800e180 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d34a:	f000 f991 	bl	800d670 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d34e:	f000 fd67 	bl	800de20 <xTaskResumeAll>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	f47f af7c 	bne.w	800d252 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d35a:	4b0c      	ldr	r3, [pc, #48]	; (800d38c <xQueueGenericSend+0x1f8>)
 800d35c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d360:	601a      	str	r2, [r3, #0]
 800d362:	f3bf 8f4f 	dsb	sy
 800d366:	f3bf 8f6f 	isb	sy
 800d36a:	e772      	b.n	800d252 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d36c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d36e:	f000 f97f 	bl	800d670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d372:	f000 fd55 	bl	800de20 <xTaskResumeAll>
 800d376:	e76c      	b.n	800d252 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d37a:	f000 f979 	bl	800d670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d37e:	f000 fd4f 	bl	800de20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d382:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d384:	4618      	mov	r0, r3
 800d386:	3738      	adds	r7, #56	; 0x38
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	e000ed04 	.word	0xe000ed04

0800d390 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b08c      	sub	sp, #48	; 0x30
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d39c:	2300      	movs	r3, #0
 800d39e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d10a      	bne.n	800d3c0 <xQueueReceive+0x30>
	__asm volatile
 800d3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ae:	f383 8811 	msr	BASEPRI, r3
 800d3b2:	f3bf 8f6f 	isb	sy
 800d3b6:	f3bf 8f4f 	dsb	sy
 800d3ba:	623b      	str	r3, [r7, #32]
}
 800d3bc:	bf00      	nop
 800d3be:	e7fe      	b.n	800d3be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d103      	bne.n	800d3ce <xQueueReceive+0x3e>
 800d3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d101      	bne.n	800d3d2 <xQueueReceive+0x42>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	e000      	b.n	800d3d4 <xQueueReceive+0x44>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d10a      	bne.n	800d3ee <xQueueReceive+0x5e>
	__asm volatile
 800d3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3dc:	f383 8811 	msr	BASEPRI, r3
 800d3e0:	f3bf 8f6f 	isb	sy
 800d3e4:	f3bf 8f4f 	dsb	sy
 800d3e8:	61fb      	str	r3, [r7, #28]
}
 800d3ea:	bf00      	nop
 800d3ec:	e7fe      	b.n	800d3ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3ee:	f001 f8a7 	bl	800e540 <xTaskGetSchedulerState>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d102      	bne.n	800d3fe <xQueueReceive+0x6e>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d101      	bne.n	800d402 <xQueueReceive+0x72>
 800d3fe:	2301      	movs	r3, #1
 800d400:	e000      	b.n	800d404 <xQueueReceive+0x74>
 800d402:	2300      	movs	r3, #0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d10a      	bne.n	800d41e <xQueueReceive+0x8e>
	__asm volatile
 800d408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d40c:	f383 8811 	msr	BASEPRI, r3
 800d410:	f3bf 8f6f 	isb	sy
 800d414:	f3bf 8f4f 	dsb	sy
 800d418:	61bb      	str	r3, [r7, #24]
}
 800d41a:	bf00      	nop
 800d41c:	e7fe      	b.n	800d41c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d41e:	f001 fac9 	bl	800e9b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d426:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d01f      	beq.n	800d46e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d42e:	68b9      	ldr	r1, [r7, #8]
 800d430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d432:	f000 f8f7 	bl	800d624 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d438:	1e5a      	subs	r2, r3, #1
 800d43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d440:	691b      	ldr	r3, [r3, #16]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00f      	beq.n	800d466 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d448:	3310      	adds	r3, #16
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 febc 	bl	800e1c8 <xTaskRemoveFromEventList>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d007      	beq.n	800d466 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d456:	4b3d      	ldr	r3, [pc, #244]	; (800d54c <xQueueReceive+0x1bc>)
 800d458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d45c:	601a      	str	r2, [r3, #0]
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d466:	f001 fad5 	bl	800ea14 <vPortExitCritical>
				return pdPASS;
 800d46a:	2301      	movs	r3, #1
 800d46c:	e069      	b.n	800d542 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d103      	bne.n	800d47c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d474:	f001 face 	bl	800ea14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d478:	2300      	movs	r3, #0
 800d47a:	e062      	b.n	800d542 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d106      	bne.n	800d490 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d482:	f107 0310 	add.w	r3, r7, #16
 800d486:	4618      	mov	r0, r3
 800d488:	f000 ff00 	bl	800e28c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d48c:	2301      	movs	r3, #1
 800d48e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d490:	f001 fac0 	bl	800ea14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d494:	f000 fcb6 	bl	800de04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d498:	f001 fa8c 	bl	800e9b4 <vPortEnterCritical>
 800d49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4a2:	b25b      	sxtb	r3, r3
 800d4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4a8:	d103      	bne.n	800d4b2 <xQueueReceive+0x122>
 800d4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4b8:	b25b      	sxtb	r3, r3
 800d4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4be:	d103      	bne.n	800d4c8 <xQueueReceive+0x138>
 800d4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4c8:	f001 faa4 	bl	800ea14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4cc:	1d3a      	adds	r2, r7, #4
 800d4ce:	f107 0310 	add.w	r3, r7, #16
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f000 feef 	bl	800e2b8 <xTaskCheckForTimeOut>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d123      	bne.n	800d528 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4e2:	f000 f917 	bl	800d714 <prvIsQueueEmpty>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d017      	beq.n	800d51c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ee:	3324      	adds	r3, #36	; 0x24
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	4611      	mov	r1, r2
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f000 fe43 	bl	800e180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d4fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4fc:	f000 f8b8 	bl	800d670 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d500:	f000 fc8e 	bl	800de20 <xTaskResumeAll>
 800d504:	4603      	mov	r3, r0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d189      	bne.n	800d41e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d50a:	4b10      	ldr	r3, [pc, #64]	; (800d54c <xQueueReceive+0x1bc>)
 800d50c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d510:	601a      	str	r2, [r3, #0]
 800d512:	f3bf 8f4f 	dsb	sy
 800d516:	f3bf 8f6f 	isb	sy
 800d51a:	e780      	b.n	800d41e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d51c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d51e:	f000 f8a7 	bl	800d670 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d522:	f000 fc7d 	bl	800de20 <xTaskResumeAll>
 800d526:	e77a      	b.n	800d41e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d52a:	f000 f8a1 	bl	800d670 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d52e:	f000 fc77 	bl	800de20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d534:	f000 f8ee 	bl	800d714 <prvIsQueueEmpty>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	f43f af6f 	beq.w	800d41e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d540:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d542:	4618      	mov	r0, r3
 800d544:	3730      	adds	r7, #48	; 0x30
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	e000ed04 	.word	0xe000ed04

0800d550 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b086      	sub	sp, #24
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d55c:	2300      	movs	r3, #0
 800d55e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d564:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d10d      	bne.n	800d58a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d14d      	bne.n	800d612 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	4618      	mov	r0, r3
 800d57c:	f000 fffe 	bl	800e57c <xTaskPriorityDisinherit>
 800d580:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2200      	movs	r2, #0
 800d586:	609a      	str	r2, [r3, #8]
 800d588:	e043      	b.n	800d612 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d119      	bne.n	800d5c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6858      	ldr	r0, [r3, #4]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d598:	461a      	mov	r2, r3
 800d59a:	68b9      	ldr	r1, [r7, #8]
 800d59c:	f001 fd00 	bl	800efa0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	685a      	ldr	r2, [r3, #4]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a8:	441a      	add	r2, r3
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	685a      	ldr	r2, [r3, #4]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d32b      	bcc.n	800d612 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	605a      	str	r2, [r3, #4]
 800d5c2:	e026      	b.n	800d612 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	68d8      	ldr	r0, [r3, #12]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	68b9      	ldr	r1, [r7, #8]
 800d5d0:	f001 fce6 	bl	800efa0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	68da      	ldr	r2, [r3, #12]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5dc:	425b      	negs	r3, r3
 800d5de:	441a      	add	r2, r3
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	68da      	ldr	r2, [r3, #12]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d207      	bcs.n	800d600 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	689a      	ldr	r2, [r3, #8]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5f8:	425b      	negs	r3, r3
 800d5fa:	441a      	add	r2, r3
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b02      	cmp	r3, #2
 800d604:	d105      	bne.n	800d612 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d002      	beq.n	800d612 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	3b01      	subs	r3, #1
 800d610:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	1c5a      	adds	r2, r3, #1
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d61a:	697b      	ldr	r3, [r7, #20]
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3718      	adds	r7, #24
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d632:	2b00      	cmp	r3, #0
 800d634:	d018      	beq.n	800d668 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	68da      	ldr	r2, [r3, #12]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63e:	441a      	add	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	68da      	ldr	r2, [r3, #12]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d303      	bcc.n	800d658 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681a      	ldr	r2, [r3, #0]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	68d9      	ldr	r1, [r3, #12]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d660:	461a      	mov	r2, r3
 800d662:	6838      	ldr	r0, [r7, #0]
 800d664:	f001 fc9c 	bl	800efa0 <memcpy>
	}
}
 800d668:	bf00      	nop
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d678:	f001 f99c 	bl	800e9b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d682:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d684:	e011      	b.n	800d6aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d012      	beq.n	800d6b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	3324      	adds	r3, #36	; 0x24
 800d692:	4618      	mov	r0, r3
 800d694:	f000 fd98 	bl	800e1c8 <xTaskRemoveFromEventList>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d69e:	f000 fe6d 	bl	800e37c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d6a2:	7bfb      	ldrb	r3, [r7, #15]
 800d6a4:	3b01      	subs	r3, #1
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	dce9      	bgt.n	800d686 <prvUnlockQueue+0x16>
 800d6b2:	e000      	b.n	800d6b6 <prvUnlockQueue+0x46>
					break;
 800d6b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	22ff      	movs	r2, #255	; 0xff
 800d6ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d6be:	f001 f9a9 	bl	800ea14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d6c2:	f001 f977 	bl	800e9b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6ce:	e011      	b.n	800d6f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	691b      	ldr	r3, [r3, #16]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d012      	beq.n	800d6fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	3310      	adds	r3, #16
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f000 fd73 	bl	800e1c8 <xTaskRemoveFromEventList>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d001      	beq.n	800d6ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d6e8:	f000 fe48 	bl	800e37c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d6ec:	7bbb      	ldrb	r3, [r7, #14]
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	dce9      	bgt.n	800d6d0 <prvUnlockQueue+0x60>
 800d6fc:	e000      	b.n	800d700 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d6fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	22ff      	movs	r2, #255	; 0xff
 800d704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d708:	f001 f984 	bl	800ea14 <vPortExitCritical>
}
 800d70c:	bf00      	nop
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d71c:	f001 f94a 	bl	800e9b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d724:	2b00      	cmp	r3, #0
 800d726:	d102      	bne.n	800d72e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d728:	2301      	movs	r3, #1
 800d72a:	60fb      	str	r3, [r7, #12]
 800d72c:	e001      	b.n	800d732 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d72e:	2300      	movs	r3, #0
 800d730:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d732:	f001 f96f 	bl	800ea14 <vPortExitCritical>

	return xReturn;
 800d736:	68fb      	ldr	r3, [r7, #12]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d748:	f001 f934 	bl	800e9b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d754:	429a      	cmp	r2, r3
 800d756:	d102      	bne.n	800d75e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d758:	2301      	movs	r3, #1
 800d75a:	60fb      	str	r3, [r7, #12]
 800d75c:	e001      	b.n	800d762 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d75e:	2300      	movs	r3, #0
 800d760:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d762:	f001 f957 	bl	800ea14 <vPortExitCritical>

	return xReturn;
 800d766:	68fb      	ldr	r3, [r7, #12]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3710      	adds	r7, #16
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d770:	b580      	push	{r7, lr}
 800d772:	b08e      	sub	sp, #56	; 0x38
 800d774:	af04      	add	r7, sp, #16
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	607a      	str	r2, [r7, #4]
 800d77c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d780:	2b00      	cmp	r3, #0
 800d782:	d10a      	bne.n	800d79a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d788:	f383 8811 	msr	BASEPRI, r3
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	f3bf 8f4f 	dsb	sy
 800d794:	623b      	str	r3, [r7, #32]
}
 800d796:	bf00      	nop
 800d798:	e7fe      	b.n	800d798 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d10a      	bne.n	800d7b6 <xTaskCreateStatic+0x46>
	__asm volatile
 800d7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a4:	f383 8811 	msr	BASEPRI, r3
 800d7a8:	f3bf 8f6f 	isb	sy
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	61fb      	str	r3, [r7, #28]
}
 800d7b2:	bf00      	nop
 800d7b4:	e7fe      	b.n	800d7b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d7b6:	2354      	movs	r3, #84	; 0x54
 800d7b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	2b54      	cmp	r3, #84	; 0x54
 800d7be:	d00a      	beq.n	800d7d6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c4:	f383 8811 	msr	BASEPRI, r3
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	61bb      	str	r3, [r7, #24]
}
 800d7d2:	bf00      	nop
 800d7d4:	e7fe      	b.n	800d7d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d7d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d01e      	beq.n	800d81c <xTaskCreateStatic+0xac>
 800d7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d01b      	beq.n	800d81c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d7ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f0:	2202      	movs	r2, #2
 800d7f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	9303      	str	r3, [sp, #12]
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fc:	9302      	str	r3, [sp, #8]
 800d7fe:	f107 0314 	add.w	r3, r7, #20
 800d802:	9301      	str	r3, [sp, #4]
 800d804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d806:	9300      	str	r3, [sp, #0]
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	68b9      	ldr	r1, [r7, #8]
 800d80e:	68f8      	ldr	r0, [r7, #12]
 800d810:	f000 f850 	bl	800d8b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d816:	f000 f8d5 	bl	800d9c4 <prvAddNewTaskToReadyList>
 800d81a:	e001      	b.n	800d820 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d81c:	2300      	movs	r3, #0
 800d81e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d820:	697b      	ldr	r3, [r7, #20]
	}
 800d822:	4618      	mov	r0, r3
 800d824:	3728      	adds	r7, #40	; 0x28
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b08c      	sub	sp, #48	; 0x30
 800d82e:	af04      	add	r7, sp, #16
 800d830:	60f8      	str	r0, [r7, #12]
 800d832:	60b9      	str	r1, [r7, #8]
 800d834:	603b      	str	r3, [r7, #0]
 800d836:	4613      	mov	r3, r2
 800d838:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d83a:	88fb      	ldrh	r3, [r7, #6]
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	4618      	mov	r0, r3
 800d840:	f001 f99a 	bl	800eb78 <pvPortMalloc>
 800d844:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00e      	beq.n	800d86a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d84c:	2054      	movs	r0, #84	; 0x54
 800d84e:	f001 f993 	bl	800eb78 <pvPortMalloc>
 800d852:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d003      	beq.n	800d862 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	697a      	ldr	r2, [r7, #20]
 800d85e:	631a      	str	r2, [r3, #48]	; 0x30
 800d860:	e005      	b.n	800d86e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d862:	6978      	ldr	r0, [r7, #20]
 800d864:	f001 fa54 	bl	800ed10 <vPortFree>
 800d868:	e001      	b.n	800d86e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d86a:	2300      	movs	r3, #0
 800d86c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d017      	beq.n	800d8a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	2200      	movs	r2, #0
 800d878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d87c:	88fa      	ldrh	r2, [r7, #6]
 800d87e:	2300      	movs	r3, #0
 800d880:	9303      	str	r3, [sp, #12]
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	9302      	str	r3, [sp, #8]
 800d886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d888:	9301      	str	r3, [sp, #4]
 800d88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88c:	9300      	str	r3, [sp, #0]
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	68b9      	ldr	r1, [r7, #8]
 800d892:	68f8      	ldr	r0, [r7, #12]
 800d894:	f000 f80e 	bl	800d8b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d898:	69f8      	ldr	r0, [r7, #28]
 800d89a:	f000 f893 	bl	800d9c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	61bb      	str	r3, [r7, #24]
 800d8a2:	e002      	b.n	800d8aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d8a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d8aa:	69bb      	ldr	r3, [r7, #24]
	}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3720      	adds	r7, #32
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b088      	sub	sp, #32
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
 800d8c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d8cc:	3b01      	subs	r3, #1
 800d8ce:	009b      	lsls	r3, r3, #2
 800d8d0:	4413      	add	r3, r2
 800d8d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	f023 0307 	bic.w	r3, r3, #7
 800d8da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d8dc:	69bb      	ldr	r3, [r7, #24]
 800d8de:	f003 0307 	and.w	r3, r3, #7
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00a      	beq.n	800d8fc <prvInitialiseNewTask+0x48>
	__asm volatile
 800d8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f3bf 8f4f 	dsb	sy
 800d8f6:	617b      	str	r3, [r7, #20]
}
 800d8f8:	bf00      	nop
 800d8fa:	e7fe      	b.n	800d8fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d01f      	beq.n	800d942 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d902:	2300      	movs	r3, #0
 800d904:	61fb      	str	r3, [r7, #28]
 800d906:	e012      	b.n	800d92e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	4413      	add	r3, r2
 800d90e:	7819      	ldrb	r1, [r3, #0]
 800d910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	4413      	add	r3, r2
 800d916:	3334      	adds	r3, #52	; 0x34
 800d918:	460a      	mov	r2, r1
 800d91a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	4413      	add	r3, r2
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d006      	beq.n	800d936 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	3301      	adds	r3, #1
 800d92c:	61fb      	str	r3, [r7, #28]
 800d92e:	69fb      	ldr	r3, [r7, #28]
 800d930:	2b0f      	cmp	r3, #15
 800d932:	d9e9      	bls.n	800d908 <prvInitialiseNewTask+0x54>
 800d934:	e000      	b.n	800d938 <prvInitialiseNewTask+0x84>
			{
				break;
 800d936:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93a:	2200      	movs	r2, #0
 800d93c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d940:	e003      	b.n	800d94a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d944:	2200      	movs	r2, #0
 800d946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94c:	2b06      	cmp	r3, #6
 800d94e:	d901      	bls.n	800d954 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d950:	2306      	movs	r3, #6
 800d952:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d958:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d95e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d962:	2200      	movs	r2, #0
 800d964:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d968:	3304      	adds	r3, #4
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7ff fabc 	bl	800cee8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d972:	3318      	adds	r3, #24
 800d974:	4618      	mov	r0, r3
 800d976:	f7ff fab7 	bl	800cee8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d97e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d982:	f1c3 0207 	rsb	r2, r3, #7
 800d986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d988:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d98e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d992:	2200      	movs	r2, #0
 800d994:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d998:	2200      	movs	r2, #0
 800d99a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d99e:	683a      	ldr	r2, [r7, #0]
 800d9a0:	68f9      	ldr	r1, [r7, #12]
 800d9a2:	69b8      	ldr	r0, [r7, #24]
 800d9a4:	f000 fed6 	bl	800e754 <pxPortInitialiseStack>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d002      	beq.n	800d9ba <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9ba:	bf00      	nop
 800d9bc:	3720      	adds	r7, #32
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
	...

0800d9c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d9cc:	f000 fff2 	bl	800e9b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d9d0:	4b2a      	ldr	r3, [pc, #168]	; (800da7c <prvAddNewTaskToReadyList+0xb8>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	4a29      	ldr	r2, [pc, #164]	; (800da7c <prvAddNewTaskToReadyList+0xb8>)
 800d9d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d9da:	4b29      	ldr	r3, [pc, #164]	; (800da80 <prvAddNewTaskToReadyList+0xbc>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d109      	bne.n	800d9f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d9e2:	4a27      	ldr	r2, [pc, #156]	; (800da80 <prvAddNewTaskToReadyList+0xbc>)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d9e8:	4b24      	ldr	r3, [pc, #144]	; (800da7c <prvAddNewTaskToReadyList+0xb8>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d110      	bne.n	800da12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d9f0:	f000 fce8 	bl	800e3c4 <prvInitialiseTaskLists>
 800d9f4:	e00d      	b.n	800da12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d9f6:	4b23      	ldr	r3, [pc, #140]	; (800da84 <prvAddNewTaskToReadyList+0xc0>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d109      	bne.n	800da12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d9fe:	4b20      	ldr	r3, [pc, #128]	; (800da80 <prvAddNewTaskToReadyList+0xbc>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da08:	429a      	cmp	r2, r3
 800da0a:	d802      	bhi.n	800da12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800da0c:	4a1c      	ldr	r2, [pc, #112]	; (800da80 <prvAddNewTaskToReadyList+0xbc>)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800da12:	4b1d      	ldr	r3, [pc, #116]	; (800da88 <prvAddNewTaskToReadyList+0xc4>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	3301      	adds	r3, #1
 800da18:	4a1b      	ldr	r2, [pc, #108]	; (800da88 <prvAddNewTaskToReadyList+0xc4>)
 800da1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da20:	2201      	movs	r2, #1
 800da22:	409a      	lsls	r2, r3
 800da24:	4b19      	ldr	r3, [pc, #100]	; (800da8c <prvAddNewTaskToReadyList+0xc8>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4313      	orrs	r3, r2
 800da2a:	4a18      	ldr	r2, [pc, #96]	; (800da8c <prvAddNewTaskToReadyList+0xc8>)
 800da2c:	6013      	str	r3, [r2, #0]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da32:	4613      	mov	r3, r2
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	4413      	add	r3, r2
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	4a15      	ldr	r2, [pc, #84]	; (800da90 <prvAddNewTaskToReadyList+0xcc>)
 800da3c:	441a      	add	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	3304      	adds	r3, #4
 800da42:	4619      	mov	r1, r3
 800da44:	4610      	mov	r0, r2
 800da46:	f7ff fa5c 	bl	800cf02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800da4a:	f000 ffe3 	bl	800ea14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800da4e:	4b0d      	ldr	r3, [pc, #52]	; (800da84 <prvAddNewTaskToReadyList+0xc0>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d00e      	beq.n	800da74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da56:	4b0a      	ldr	r3, [pc, #40]	; (800da80 <prvAddNewTaskToReadyList+0xbc>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da60:	429a      	cmp	r2, r3
 800da62:	d207      	bcs.n	800da74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da64:	4b0b      	ldr	r3, [pc, #44]	; (800da94 <prvAddNewTaskToReadyList+0xd0>)
 800da66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da6a:	601a      	str	r2, [r3, #0]
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da74:	bf00      	nop
 800da76:	3708      	adds	r7, #8
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	20000cdc 	.word	0x20000cdc
 800da80:	20000bdc 	.word	0x20000bdc
 800da84:	20000ce8 	.word	0x20000ce8
 800da88:	20000cf8 	.word	0x20000cf8
 800da8c:	20000ce4 	.word	0x20000ce4
 800da90:	20000be0 	.word	0x20000be0
 800da94:	e000ed04 	.word	0xe000ed04

0800da98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800daa0:	2300      	movs	r3, #0
 800daa2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d017      	beq.n	800dada <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800daaa:	4b13      	ldr	r3, [pc, #76]	; (800daf8 <vTaskDelay+0x60>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00a      	beq.n	800dac8 <vTaskDelay+0x30>
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	60bb      	str	r3, [r7, #8]
}
 800dac4:	bf00      	nop
 800dac6:	e7fe      	b.n	800dac6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dac8:	f000 f99c 	bl	800de04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dacc:	2100      	movs	r1, #0
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 fdda 	bl	800e688 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dad4:	f000 f9a4 	bl	800de20 <xTaskResumeAll>
 800dad8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d107      	bne.n	800daf0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dae0:	4b06      	ldr	r3, [pc, #24]	; (800dafc <vTaskDelay+0x64>)
 800dae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dae6:	601a      	str	r2, [r3, #0]
 800dae8:	f3bf 8f4f 	dsb	sy
 800daec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800daf0:	bf00      	nop
 800daf2:	3710      	adds	r7, #16
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	20000d04 	.word	0x20000d04
 800dafc:	e000ed04 	.word	0xe000ed04

0800db00 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800db08:	f000 ff54 	bl	800e9b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d102      	bne.n	800db18 <vTaskSuspend+0x18>
 800db12:	4b3c      	ldr	r3, [pc, #240]	; (800dc04 <vTaskSuspend+0x104>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	e000      	b.n	800db1a <vTaskSuspend+0x1a>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	3304      	adds	r3, #4
 800db20:	4618      	mov	r0, r3
 800db22:	f7ff fa4b 	bl	800cfbc <uxListRemove>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d115      	bne.n	800db58 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db30:	4935      	ldr	r1, [pc, #212]	; (800dc08 <vTaskSuspend+0x108>)
 800db32:	4613      	mov	r3, r2
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	4413      	add	r3, r2
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	440b      	add	r3, r1
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d10a      	bne.n	800db58 <vTaskSuspend+0x58>
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db46:	2201      	movs	r2, #1
 800db48:	fa02 f303 	lsl.w	r3, r2, r3
 800db4c:	43da      	mvns	r2, r3
 800db4e:	4b2f      	ldr	r3, [pc, #188]	; (800dc0c <vTaskSuspend+0x10c>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4013      	ands	r3, r2
 800db54:	4a2d      	ldr	r2, [pc, #180]	; (800dc0c <vTaskSuspend+0x10c>)
 800db56:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d004      	beq.n	800db6a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	3318      	adds	r3, #24
 800db64:	4618      	mov	r0, r3
 800db66:	f7ff fa29 	bl	800cfbc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	3304      	adds	r3, #4
 800db6e:	4619      	mov	r1, r3
 800db70:	4827      	ldr	r0, [pc, #156]	; (800dc10 <vTaskSuspend+0x110>)
 800db72:	f7ff f9c6 	bl	800cf02 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	2b01      	cmp	r3, #1
 800db80:	d103      	bne.n	800db8a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2200      	movs	r2, #0
 800db86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800db8a:	f000 ff43 	bl	800ea14 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800db8e:	4b21      	ldr	r3, [pc, #132]	; (800dc14 <vTaskSuspend+0x114>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d005      	beq.n	800dba2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800db96:	f000 ff0d 	bl	800e9b4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800db9a:	f000 fcb1 	bl	800e500 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800db9e:	f000 ff39 	bl	800ea14 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800dba2:	4b18      	ldr	r3, [pc, #96]	; (800dc04 <vTaskSuspend+0x104>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d127      	bne.n	800dbfc <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800dbac:	4b19      	ldr	r3, [pc, #100]	; (800dc14 <vTaskSuspend+0x114>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d017      	beq.n	800dbe4 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800dbb4:	4b18      	ldr	r3, [pc, #96]	; (800dc18 <vTaskSuspend+0x118>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00a      	beq.n	800dbd2 <vTaskSuspend+0xd2>
	__asm volatile
 800dbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc0:	f383 8811 	msr	BASEPRI, r3
 800dbc4:	f3bf 8f6f 	isb	sy
 800dbc8:	f3bf 8f4f 	dsb	sy
 800dbcc:	60bb      	str	r3, [r7, #8]
}
 800dbce:	bf00      	nop
 800dbd0:	e7fe      	b.n	800dbd0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800dbd2:	4b12      	ldr	r3, [pc, #72]	; (800dc1c <vTaskSuspend+0x11c>)
 800dbd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbd8:	601a      	str	r2, [r3, #0]
 800dbda:	f3bf 8f4f 	dsb	sy
 800dbde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dbe2:	e00b      	b.n	800dbfc <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800dbe4:	4b0a      	ldr	r3, [pc, #40]	; (800dc10 <vTaskSuspend+0x110>)
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	4b0d      	ldr	r3, [pc, #52]	; (800dc20 <vTaskSuspend+0x120>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d103      	bne.n	800dbf8 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800dbf0:	4b04      	ldr	r3, [pc, #16]	; (800dc04 <vTaskSuspend+0x104>)
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	601a      	str	r2, [r3, #0]
	}
 800dbf6:	e001      	b.n	800dbfc <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800dbf8:	f000 fa66 	bl	800e0c8 <vTaskSwitchContext>
	}
 800dbfc:	bf00      	nop
 800dbfe:	3710      	adds	r7, #16
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	20000bdc 	.word	0x20000bdc
 800dc08:	20000be0 	.word	0x20000be0
 800dc0c:	20000ce4 	.word	0x20000ce4
 800dc10:	20000cc8 	.word	0x20000cc8
 800dc14:	20000ce8 	.word	0x20000ce8
 800dc18:	20000d04 	.word	0x20000d04
 800dc1c:	e000ed04 	.word	0xe000ed04
 800dc20:	20000cdc 	.word	0x20000cdc

0800dc24 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800dc24:	b480      	push	{r7}
 800dc26:	b087      	sub	sp, #28
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d10a      	bne.n	800dc50 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800dc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc3e:	f383 8811 	msr	BASEPRI, r3
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	f3bf 8f4f 	dsb	sy
 800dc4a:	60fb      	str	r3, [r7, #12]
}
 800dc4c:	bf00      	nop
 800dc4e:	e7fe      	b.n	800dc4e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	695b      	ldr	r3, [r3, #20]
 800dc54:	4a0a      	ldr	r2, [pc, #40]	; (800dc80 <prvTaskIsTaskSuspended+0x5c>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d10a      	bne.n	800dc70 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc5e:	4a09      	ldr	r2, [pc, #36]	; (800dc84 <prvTaskIsTaskSuspended+0x60>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d005      	beq.n	800dc70 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d101      	bne.n	800dc70 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc70:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dc72:	4618      	mov	r0, r3
 800dc74:	371c      	adds	r7, #28
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
 800dc7e:	bf00      	nop
 800dc80:	20000cc8 	.word	0x20000cc8
 800dc84:	20000c9c 	.word	0x20000c9c

0800dc88 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d10a      	bne.n	800dcb0 <vTaskResume+0x28>
	__asm volatile
 800dc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9e:	f383 8811 	msr	BASEPRI, r3
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	f3bf 8f4f 	dsb	sy
 800dcaa:	60bb      	str	r3, [r7, #8]
}
 800dcac:	bf00      	nop
 800dcae:	e7fe      	b.n	800dcae <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800dcb0:	4b20      	ldr	r3, [pc, #128]	; (800dd34 <vTaskResume+0xac>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	68fa      	ldr	r2, [r7, #12]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d037      	beq.n	800dd2a <vTaskResume+0xa2>
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d034      	beq.n	800dd2a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800dcc0:	f000 fe78 	bl	800e9b4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f7ff ffad 	bl	800dc24 <prvTaskIsTaskSuspended>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d02a      	beq.n	800dd26 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	3304      	adds	r3, #4
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7ff f971 	bl	800cfbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcde:	2201      	movs	r2, #1
 800dce0:	409a      	lsls	r2, r3
 800dce2:	4b15      	ldr	r3, [pc, #84]	; (800dd38 <vTaskResume+0xb0>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4313      	orrs	r3, r2
 800dce8:	4a13      	ldr	r2, [pc, #76]	; (800dd38 <vTaskResume+0xb0>)
 800dcea:	6013      	str	r3, [r2, #0]
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf0:	4613      	mov	r3, r2
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	4413      	add	r3, r2
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	4a10      	ldr	r2, [pc, #64]	; (800dd3c <vTaskResume+0xb4>)
 800dcfa:	441a      	add	r2, r3
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	3304      	adds	r3, #4
 800dd00:	4619      	mov	r1, r3
 800dd02:	4610      	mov	r0, r2
 800dd04:	f7ff f8fd 	bl	800cf02 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd0c:	4b09      	ldr	r3, [pc, #36]	; (800dd34 <vTaskResume+0xac>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d307      	bcc.n	800dd26 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800dd16:	4b0a      	ldr	r3, [pc, #40]	; (800dd40 <vTaskResume+0xb8>)
 800dd18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd1c:	601a      	str	r2, [r3, #0]
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800dd26:	f000 fe75 	bl	800ea14 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd2a:	bf00      	nop
 800dd2c:	3710      	adds	r7, #16
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	20000bdc 	.word	0x20000bdc
 800dd38:	20000ce4 	.word	0x20000ce4
 800dd3c:	20000be0 	.word	0x20000be0
 800dd40:	e000ed04 	.word	0xe000ed04

0800dd44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b08a      	sub	sp, #40	; 0x28
 800dd48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd52:	463a      	mov	r2, r7
 800dd54:	1d39      	adds	r1, r7, #4
 800dd56:	f107 0308 	add.w	r3, r7, #8
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7f3 f916 	bl	8000f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd60:	6839      	ldr	r1, [r7, #0]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	68ba      	ldr	r2, [r7, #8]
 800dd66:	9202      	str	r2, [sp, #8]
 800dd68:	9301      	str	r3, [sp, #4]
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	2300      	movs	r3, #0
 800dd70:	460a      	mov	r2, r1
 800dd72:	491e      	ldr	r1, [pc, #120]	; (800ddec <vTaskStartScheduler+0xa8>)
 800dd74:	481e      	ldr	r0, [pc, #120]	; (800ddf0 <vTaskStartScheduler+0xac>)
 800dd76:	f7ff fcfb 	bl	800d770 <xTaskCreateStatic>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	4a1d      	ldr	r2, [pc, #116]	; (800ddf4 <vTaskStartScheduler+0xb0>)
 800dd7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd80:	4b1c      	ldr	r3, [pc, #112]	; (800ddf4 <vTaskStartScheduler+0xb0>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d002      	beq.n	800dd8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	617b      	str	r3, [r7, #20]
 800dd8c:	e001      	b.n	800dd92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d116      	bne.n	800ddc6 <vTaskStartScheduler+0x82>
	__asm volatile
 800dd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd9c:	f383 8811 	msr	BASEPRI, r3
 800dda0:	f3bf 8f6f 	isb	sy
 800dda4:	f3bf 8f4f 	dsb	sy
 800dda8:	613b      	str	r3, [r7, #16]
}
 800ddaa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ddac:	4b12      	ldr	r3, [pc, #72]	; (800ddf8 <vTaskStartScheduler+0xb4>)
 800ddae:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ddb4:	4b11      	ldr	r3, [pc, #68]	; (800ddfc <vTaskStartScheduler+0xb8>)
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ddba:	4b11      	ldr	r3, [pc, #68]	; (800de00 <vTaskStartScheduler+0xbc>)
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ddc0:	f000 fd56 	bl	800e870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ddc4:	e00e      	b.n	800dde4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddcc:	d10a      	bne.n	800dde4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800ddce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd2:	f383 8811 	msr	BASEPRI, r3
 800ddd6:	f3bf 8f6f 	isb	sy
 800ddda:	f3bf 8f4f 	dsb	sy
 800ddde:	60fb      	str	r3, [r7, #12]
}
 800dde0:	bf00      	nop
 800dde2:	e7fe      	b.n	800dde2 <vTaskStartScheduler+0x9e>
}
 800dde4:	bf00      	nop
 800dde6:	3718      	adds	r7, #24
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	080144f8 	.word	0x080144f8
 800ddf0:	0800e395 	.word	0x0800e395
 800ddf4:	20000d00 	.word	0x20000d00
 800ddf8:	20000cfc 	.word	0x20000cfc
 800ddfc:	20000ce8 	.word	0x20000ce8
 800de00:	20000ce0 	.word	0x20000ce0

0800de04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de04:	b480      	push	{r7}
 800de06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800de08:	4b04      	ldr	r3, [pc, #16]	; (800de1c <vTaskSuspendAll+0x18>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	3301      	adds	r3, #1
 800de0e:	4a03      	ldr	r2, [pc, #12]	; (800de1c <vTaskSuspendAll+0x18>)
 800de10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800de12:	bf00      	nop
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr
 800de1c:	20000d04 	.word	0x20000d04

0800de20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800de26:	2300      	movs	r3, #0
 800de28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800de2a:	2300      	movs	r3, #0
 800de2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800de2e:	4b41      	ldr	r3, [pc, #260]	; (800df34 <xTaskResumeAll+0x114>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10a      	bne.n	800de4c <xTaskResumeAll+0x2c>
	__asm volatile
 800de36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3a:	f383 8811 	msr	BASEPRI, r3
 800de3e:	f3bf 8f6f 	isb	sy
 800de42:	f3bf 8f4f 	dsb	sy
 800de46:	603b      	str	r3, [r7, #0]
}
 800de48:	bf00      	nop
 800de4a:	e7fe      	b.n	800de4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de4c:	f000 fdb2 	bl	800e9b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de50:	4b38      	ldr	r3, [pc, #224]	; (800df34 <xTaskResumeAll+0x114>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	3b01      	subs	r3, #1
 800de56:	4a37      	ldr	r2, [pc, #220]	; (800df34 <xTaskResumeAll+0x114>)
 800de58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de5a:	4b36      	ldr	r3, [pc, #216]	; (800df34 <xTaskResumeAll+0x114>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d161      	bne.n	800df26 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de62:	4b35      	ldr	r3, [pc, #212]	; (800df38 <xTaskResumeAll+0x118>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d05d      	beq.n	800df26 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de6a:	e02e      	b.n	800deca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de6c:	4b33      	ldr	r3, [pc, #204]	; (800df3c <xTaskResumeAll+0x11c>)
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	68db      	ldr	r3, [r3, #12]
 800de72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	3318      	adds	r3, #24
 800de78:	4618      	mov	r0, r3
 800de7a:	f7ff f89f 	bl	800cfbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	3304      	adds	r3, #4
 800de82:	4618      	mov	r0, r3
 800de84:	f7ff f89a 	bl	800cfbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de8c:	2201      	movs	r2, #1
 800de8e:	409a      	lsls	r2, r3
 800de90:	4b2b      	ldr	r3, [pc, #172]	; (800df40 <xTaskResumeAll+0x120>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4313      	orrs	r3, r2
 800de96:	4a2a      	ldr	r2, [pc, #168]	; (800df40 <xTaskResumeAll+0x120>)
 800de98:	6013      	str	r3, [r2, #0]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de9e:	4613      	mov	r3, r2
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	4413      	add	r3, r2
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	4a27      	ldr	r2, [pc, #156]	; (800df44 <xTaskResumeAll+0x124>)
 800dea8:	441a      	add	r2, r3
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3304      	adds	r3, #4
 800deae:	4619      	mov	r1, r3
 800deb0:	4610      	mov	r0, r2
 800deb2:	f7ff f826 	bl	800cf02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deba:	4b23      	ldr	r3, [pc, #140]	; (800df48 <xTaskResumeAll+0x128>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d302      	bcc.n	800deca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800dec4:	4b21      	ldr	r3, [pc, #132]	; (800df4c <xTaskResumeAll+0x12c>)
 800dec6:	2201      	movs	r2, #1
 800dec8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800deca:	4b1c      	ldr	r3, [pc, #112]	; (800df3c <xTaskResumeAll+0x11c>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d1cc      	bne.n	800de6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ded8:	f000 fb12 	bl	800e500 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dedc:	4b1c      	ldr	r3, [pc, #112]	; (800df50 <xTaskResumeAll+0x130>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d010      	beq.n	800df0a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dee8:	f000 f836 	bl	800df58 <xTaskIncrementTick>
 800deec:	4603      	mov	r3, r0
 800deee:	2b00      	cmp	r3, #0
 800def0:	d002      	beq.n	800def8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800def2:	4b16      	ldr	r3, [pc, #88]	; (800df4c <xTaskResumeAll+0x12c>)
 800def4:	2201      	movs	r2, #1
 800def6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	3b01      	subs	r3, #1
 800defc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1f1      	bne.n	800dee8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800df04:	4b12      	ldr	r3, [pc, #72]	; (800df50 <xTaskResumeAll+0x130>)
 800df06:	2200      	movs	r2, #0
 800df08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df0a:	4b10      	ldr	r3, [pc, #64]	; (800df4c <xTaskResumeAll+0x12c>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d009      	beq.n	800df26 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800df12:	2301      	movs	r3, #1
 800df14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800df16:	4b0f      	ldr	r3, [pc, #60]	; (800df54 <xTaskResumeAll+0x134>)
 800df18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df1c:	601a      	str	r2, [r3, #0]
 800df1e:	f3bf 8f4f 	dsb	sy
 800df22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df26:	f000 fd75 	bl	800ea14 <vPortExitCritical>

	return xAlreadyYielded;
 800df2a:	68bb      	ldr	r3, [r7, #8]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3710      	adds	r7, #16
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	20000d04 	.word	0x20000d04
 800df38:	20000cdc 	.word	0x20000cdc
 800df3c:	20000c9c 	.word	0x20000c9c
 800df40:	20000ce4 	.word	0x20000ce4
 800df44:	20000be0 	.word	0x20000be0
 800df48:	20000bdc 	.word	0x20000bdc
 800df4c:	20000cf0 	.word	0x20000cf0
 800df50:	20000cec 	.word	0x20000cec
 800df54:	e000ed04 	.word	0xe000ed04

0800df58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b086      	sub	sp, #24
 800df5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800df5e:	2300      	movs	r3, #0
 800df60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df62:	4b4e      	ldr	r3, [pc, #312]	; (800e09c <xTaskIncrementTick+0x144>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	f040 808e 	bne.w	800e088 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df6c:	4b4c      	ldr	r3, [pc, #304]	; (800e0a0 <xTaskIncrementTick+0x148>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	3301      	adds	r3, #1
 800df72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800df74:	4a4a      	ldr	r2, [pc, #296]	; (800e0a0 <xTaskIncrementTick+0x148>)
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d120      	bne.n	800dfc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800df80:	4b48      	ldr	r3, [pc, #288]	; (800e0a4 <xTaskIncrementTick+0x14c>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d00a      	beq.n	800dfa0 <xTaskIncrementTick+0x48>
	__asm volatile
 800df8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8e:	f383 8811 	msr	BASEPRI, r3
 800df92:	f3bf 8f6f 	isb	sy
 800df96:	f3bf 8f4f 	dsb	sy
 800df9a:	603b      	str	r3, [r7, #0]
}
 800df9c:	bf00      	nop
 800df9e:	e7fe      	b.n	800df9e <xTaskIncrementTick+0x46>
 800dfa0:	4b40      	ldr	r3, [pc, #256]	; (800e0a4 <xTaskIncrementTick+0x14c>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	60fb      	str	r3, [r7, #12]
 800dfa6:	4b40      	ldr	r3, [pc, #256]	; (800e0a8 <xTaskIncrementTick+0x150>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a3e      	ldr	r2, [pc, #248]	; (800e0a4 <xTaskIncrementTick+0x14c>)
 800dfac:	6013      	str	r3, [r2, #0]
 800dfae:	4a3e      	ldr	r2, [pc, #248]	; (800e0a8 <xTaskIncrementTick+0x150>)
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6013      	str	r3, [r2, #0]
 800dfb4:	4b3d      	ldr	r3, [pc, #244]	; (800e0ac <xTaskIncrementTick+0x154>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	4a3c      	ldr	r2, [pc, #240]	; (800e0ac <xTaskIncrementTick+0x154>)
 800dfbc:	6013      	str	r3, [r2, #0]
 800dfbe:	f000 fa9f 	bl	800e500 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dfc2:	4b3b      	ldr	r3, [pc, #236]	; (800e0b0 <xTaskIncrementTick+0x158>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	693a      	ldr	r2, [r7, #16]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d348      	bcc.n	800e05e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfcc:	4b35      	ldr	r3, [pc, #212]	; (800e0a4 <xTaskIncrementTick+0x14c>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d104      	bne.n	800dfe0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfd6:	4b36      	ldr	r3, [pc, #216]	; (800e0b0 <xTaskIncrementTick+0x158>)
 800dfd8:	f04f 32ff 	mov.w	r2, #4294967295
 800dfdc:	601a      	str	r2, [r3, #0]
					break;
 800dfde:	e03e      	b.n	800e05e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfe0:	4b30      	ldr	r3, [pc, #192]	; (800e0a4 <xTaskIncrementTick+0x14c>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	68db      	ldr	r3, [r3, #12]
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dff0:	693a      	ldr	r2, [r7, #16]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d203      	bcs.n	800e000 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dff8:	4a2d      	ldr	r2, [pc, #180]	; (800e0b0 <xTaskIncrementTick+0x158>)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dffe:	e02e      	b.n	800e05e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	3304      	adds	r3, #4
 800e004:	4618      	mov	r0, r3
 800e006:	f7fe ffd9 	bl	800cfbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d004      	beq.n	800e01c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	3318      	adds	r3, #24
 800e016:	4618      	mov	r0, r3
 800e018:	f7fe ffd0 	bl	800cfbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e020:	2201      	movs	r2, #1
 800e022:	409a      	lsls	r2, r3
 800e024:	4b23      	ldr	r3, [pc, #140]	; (800e0b4 <xTaskIncrementTick+0x15c>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4313      	orrs	r3, r2
 800e02a:	4a22      	ldr	r2, [pc, #136]	; (800e0b4 <xTaskIncrementTick+0x15c>)
 800e02c:	6013      	str	r3, [r2, #0]
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e032:	4613      	mov	r3, r2
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	4413      	add	r3, r2
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	4a1f      	ldr	r2, [pc, #124]	; (800e0b8 <xTaskIncrementTick+0x160>)
 800e03c:	441a      	add	r2, r3
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	3304      	adds	r3, #4
 800e042:	4619      	mov	r1, r3
 800e044:	4610      	mov	r0, r2
 800e046:	f7fe ff5c 	bl	800cf02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e04e:	4b1b      	ldr	r3, [pc, #108]	; (800e0bc <xTaskIncrementTick+0x164>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e054:	429a      	cmp	r2, r3
 800e056:	d3b9      	bcc.n	800dfcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e058:	2301      	movs	r3, #1
 800e05a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e05c:	e7b6      	b.n	800dfcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e05e:	4b17      	ldr	r3, [pc, #92]	; (800e0bc <xTaskIncrementTick+0x164>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e064:	4914      	ldr	r1, [pc, #80]	; (800e0b8 <xTaskIncrementTick+0x160>)
 800e066:	4613      	mov	r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	4413      	add	r3, r2
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	440b      	add	r3, r1
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2b01      	cmp	r3, #1
 800e074:	d901      	bls.n	800e07a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e076:	2301      	movs	r3, #1
 800e078:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e07a:	4b11      	ldr	r3, [pc, #68]	; (800e0c0 <xTaskIncrementTick+0x168>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d007      	beq.n	800e092 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e082:	2301      	movs	r3, #1
 800e084:	617b      	str	r3, [r7, #20]
 800e086:	e004      	b.n	800e092 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e088:	4b0e      	ldr	r3, [pc, #56]	; (800e0c4 <xTaskIncrementTick+0x16c>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	3301      	adds	r3, #1
 800e08e:	4a0d      	ldr	r2, [pc, #52]	; (800e0c4 <xTaskIncrementTick+0x16c>)
 800e090:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e092:	697b      	ldr	r3, [r7, #20]
}
 800e094:	4618      	mov	r0, r3
 800e096:	3718      	adds	r7, #24
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	20000d04 	.word	0x20000d04
 800e0a0:	20000ce0 	.word	0x20000ce0
 800e0a4:	20000c94 	.word	0x20000c94
 800e0a8:	20000c98 	.word	0x20000c98
 800e0ac:	20000cf4 	.word	0x20000cf4
 800e0b0:	20000cfc 	.word	0x20000cfc
 800e0b4:	20000ce4 	.word	0x20000ce4
 800e0b8:	20000be0 	.word	0x20000be0
 800e0bc:	20000bdc 	.word	0x20000bdc
 800e0c0:	20000cf0 	.word	0x20000cf0
 800e0c4:	20000cec 	.word	0x20000cec

0800e0c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b087      	sub	sp, #28
 800e0cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e0ce:	4b27      	ldr	r3, [pc, #156]	; (800e16c <vTaskSwitchContext+0xa4>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d003      	beq.n	800e0de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e0d6:	4b26      	ldr	r3, [pc, #152]	; (800e170 <vTaskSwitchContext+0xa8>)
 800e0d8:	2201      	movs	r2, #1
 800e0da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e0dc:	e03f      	b.n	800e15e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800e0de:	4b24      	ldr	r3, [pc, #144]	; (800e170 <vTaskSwitchContext+0xa8>)
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0e4:	4b23      	ldr	r3, [pc, #140]	; (800e174 <vTaskSwitchContext+0xac>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	fab3 f383 	clz	r3, r3
 800e0f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e0f2:	7afb      	ldrb	r3, [r7, #11]
 800e0f4:	f1c3 031f 	rsb	r3, r3, #31
 800e0f8:	617b      	str	r3, [r7, #20]
 800e0fa:	491f      	ldr	r1, [pc, #124]	; (800e178 <vTaskSwitchContext+0xb0>)
 800e0fc:	697a      	ldr	r2, [r7, #20]
 800e0fe:	4613      	mov	r3, r2
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	4413      	add	r3, r2
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	440b      	add	r3, r1
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d10a      	bne.n	800e124 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	607b      	str	r3, [r7, #4]
}
 800e120:	bf00      	nop
 800e122:	e7fe      	b.n	800e122 <vTaskSwitchContext+0x5a>
 800e124:	697a      	ldr	r2, [r7, #20]
 800e126:	4613      	mov	r3, r2
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	4413      	add	r3, r2
 800e12c:	009b      	lsls	r3, r3, #2
 800e12e:	4a12      	ldr	r2, [pc, #72]	; (800e178 <vTaskSwitchContext+0xb0>)
 800e130:	4413      	add	r3, r2
 800e132:	613b      	str	r3, [r7, #16]
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	685a      	ldr	r2, [r3, #4]
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	605a      	str	r2, [r3, #4]
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	685a      	ldr	r2, [r3, #4]
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	3308      	adds	r3, #8
 800e146:	429a      	cmp	r2, r3
 800e148:	d104      	bne.n	800e154 <vTaskSwitchContext+0x8c>
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	685a      	ldr	r2, [r3, #4]
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	605a      	str	r2, [r3, #4]
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	4a08      	ldr	r2, [pc, #32]	; (800e17c <vTaskSwitchContext+0xb4>)
 800e15c:	6013      	str	r3, [r2, #0]
}
 800e15e:	bf00      	nop
 800e160:	371c      	adds	r7, #28
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr
 800e16a:	bf00      	nop
 800e16c:	20000d04 	.word	0x20000d04
 800e170:	20000cf0 	.word	0x20000cf0
 800e174:	20000ce4 	.word	0x20000ce4
 800e178:	20000be0 	.word	0x20000be0
 800e17c:	20000bdc 	.word	0x20000bdc

0800e180 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d10a      	bne.n	800e1a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e194:	f383 8811 	msr	BASEPRI, r3
 800e198:	f3bf 8f6f 	isb	sy
 800e19c:	f3bf 8f4f 	dsb	sy
 800e1a0:	60fb      	str	r3, [r7, #12]
}
 800e1a2:	bf00      	nop
 800e1a4:	e7fe      	b.n	800e1a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e1a6:	4b07      	ldr	r3, [pc, #28]	; (800e1c4 <vTaskPlaceOnEventList+0x44>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	3318      	adds	r3, #24
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7fe fecb 	bl	800cf4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e1b4:	2101      	movs	r1, #1
 800e1b6:	6838      	ldr	r0, [r7, #0]
 800e1b8:	f000 fa66 	bl	800e688 <prvAddCurrentTaskToDelayedList>
}
 800e1bc:	bf00      	nop
 800e1be:	3710      	adds	r7, #16
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	20000bdc 	.word	0x20000bdc

0800e1c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b086      	sub	sp, #24
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d10a      	bne.n	800e1f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e2:	f383 8811 	msr	BASEPRI, r3
 800e1e6:	f3bf 8f6f 	isb	sy
 800e1ea:	f3bf 8f4f 	dsb	sy
 800e1ee:	60fb      	str	r3, [r7, #12]
}
 800e1f0:	bf00      	nop
 800e1f2:	e7fe      	b.n	800e1f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	3318      	adds	r3, #24
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7fe fedf 	bl	800cfbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1fe:	4b1d      	ldr	r3, [pc, #116]	; (800e274 <xTaskRemoveFromEventList+0xac>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d11c      	bne.n	800e240 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	3304      	adds	r3, #4
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fe fed6 	bl	800cfbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e214:	2201      	movs	r2, #1
 800e216:	409a      	lsls	r2, r3
 800e218:	4b17      	ldr	r3, [pc, #92]	; (800e278 <xTaskRemoveFromEventList+0xb0>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4313      	orrs	r3, r2
 800e21e:	4a16      	ldr	r2, [pc, #88]	; (800e278 <xTaskRemoveFromEventList+0xb0>)
 800e220:	6013      	str	r3, [r2, #0]
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e226:	4613      	mov	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4413      	add	r3, r2
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	4a13      	ldr	r2, [pc, #76]	; (800e27c <xTaskRemoveFromEventList+0xb4>)
 800e230:	441a      	add	r2, r3
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	3304      	adds	r3, #4
 800e236:	4619      	mov	r1, r3
 800e238:	4610      	mov	r0, r2
 800e23a:	f7fe fe62 	bl	800cf02 <vListInsertEnd>
 800e23e:	e005      	b.n	800e24c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	3318      	adds	r3, #24
 800e244:	4619      	mov	r1, r3
 800e246:	480e      	ldr	r0, [pc, #56]	; (800e280 <xTaskRemoveFromEventList+0xb8>)
 800e248:	f7fe fe5b 	bl	800cf02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e250:	4b0c      	ldr	r3, [pc, #48]	; (800e284 <xTaskRemoveFromEventList+0xbc>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e256:	429a      	cmp	r2, r3
 800e258:	d905      	bls.n	800e266 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e25a:	2301      	movs	r3, #1
 800e25c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e25e:	4b0a      	ldr	r3, [pc, #40]	; (800e288 <xTaskRemoveFromEventList+0xc0>)
 800e260:	2201      	movs	r2, #1
 800e262:	601a      	str	r2, [r3, #0]
 800e264:	e001      	b.n	800e26a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e266:	2300      	movs	r3, #0
 800e268:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e26a:	697b      	ldr	r3, [r7, #20]
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3718      	adds	r7, #24
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	20000d04 	.word	0x20000d04
 800e278:	20000ce4 	.word	0x20000ce4
 800e27c:	20000be0 	.word	0x20000be0
 800e280:	20000c9c 	.word	0x20000c9c
 800e284:	20000bdc 	.word	0x20000bdc
 800e288:	20000cf0 	.word	0x20000cf0

0800e28c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e294:	4b06      	ldr	r3, [pc, #24]	; (800e2b0 <vTaskInternalSetTimeOutState+0x24>)
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e29c:	4b05      	ldr	r3, [pc, #20]	; (800e2b4 <vTaskInternalSetTimeOutState+0x28>)
 800e29e:	681a      	ldr	r2, [r3, #0]
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	605a      	str	r2, [r3, #4]
}
 800e2a4:	bf00      	nop
 800e2a6:	370c      	adds	r7, #12
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr
 800e2b0:	20000cf4 	.word	0x20000cf4
 800e2b4:	20000ce0 	.word	0x20000ce0

0800e2b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b088      	sub	sp, #32
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10a      	bne.n	800e2de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2cc:	f383 8811 	msr	BASEPRI, r3
 800e2d0:	f3bf 8f6f 	isb	sy
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	613b      	str	r3, [r7, #16]
}
 800e2da:	bf00      	nop
 800e2dc:	e7fe      	b.n	800e2dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d10a      	bne.n	800e2fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e8:	f383 8811 	msr	BASEPRI, r3
 800e2ec:	f3bf 8f6f 	isb	sy
 800e2f0:	f3bf 8f4f 	dsb	sy
 800e2f4:	60fb      	str	r3, [r7, #12]
}
 800e2f6:	bf00      	nop
 800e2f8:	e7fe      	b.n	800e2f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e2fa:	f000 fb5b 	bl	800e9b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e2fe:	4b1d      	ldr	r3, [pc, #116]	; (800e374 <xTaskCheckForTimeOut+0xbc>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	69ba      	ldr	r2, [r7, #24]
 800e30a:	1ad3      	subs	r3, r2, r3
 800e30c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e316:	d102      	bne.n	800e31e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e318:	2300      	movs	r3, #0
 800e31a:	61fb      	str	r3, [r7, #28]
 800e31c:	e023      	b.n	800e366 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	4b15      	ldr	r3, [pc, #84]	; (800e378 <xTaskCheckForTimeOut+0xc0>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	429a      	cmp	r2, r3
 800e328:	d007      	beq.n	800e33a <xTaskCheckForTimeOut+0x82>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	69ba      	ldr	r2, [r7, #24]
 800e330:	429a      	cmp	r2, r3
 800e332:	d302      	bcc.n	800e33a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e334:	2301      	movs	r3, #1
 800e336:	61fb      	str	r3, [r7, #28]
 800e338:	e015      	b.n	800e366 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	697a      	ldr	r2, [r7, #20]
 800e340:	429a      	cmp	r2, r3
 800e342:	d20b      	bcs.n	800e35c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	1ad2      	subs	r2, r2, r3
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f7ff ff9b 	bl	800e28c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e356:	2300      	movs	r3, #0
 800e358:	61fb      	str	r3, [r7, #28]
 800e35a:	e004      	b.n	800e366 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	2200      	movs	r2, #0
 800e360:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e362:	2301      	movs	r3, #1
 800e364:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e366:	f000 fb55 	bl	800ea14 <vPortExitCritical>

	return xReturn;
 800e36a:	69fb      	ldr	r3, [r7, #28]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3720      	adds	r7, #32
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	20000ce0 	.word	0x20000ce0
 800e378:	20000cf4 	.word	0x20000cf4

0800e37c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e37c:	b480      	push	{r7}
 800e37e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e380:	4b03      	ldr	r3, [pc, #12]	; (800e390 <vTaskMissedYield+0x14>)
 800e382:	2201      	movs	r2, #1
 800e384:	601a      	str	r2, [r3, #0]
}
 800e386:	bf00      	nop
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr
 800e390:	20000cf0 	.word	0x20000cf0

0800e394 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e39c:	f000 f852 	bl	800e444 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e3a0:	4b06      	ldr	r3, [pc, #24]	; (800e3bc <prvIdleTask+0x28>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d9f9      	bls.n	800e39c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e3a8:	4b05      	ldr	r3, [pc, #20]	; (800e3c0 <prvIdleTask+0x2c>)
 800e3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ae:	601a      	str	r2, [r3, #0]
 800e3b0:	f3bf 8f4f 	dsb	sy
 800e3b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e3b8:	e7f0      	b.n	800e39c <prvIdleTask+0x8>
 800e3ba:	bf00      	nop
 800e3bc:	20000be0 	.word	0x20000be0
 800e3c0:	e000ed04 	.word	0xe000ed04

0800e3c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	607b      	str	r3, [r7, #4]
 800e3ce:	e00c      	b.n	800e3ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	009b      	lsls	r3, r3, #2
 800e3d6:	4413      	add	r3, r2
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	4a12      	ldr	r2, [pc, #72]	; (800e424 <prvInitialiseTaskLists+0x60>)
 800e3dc:	4413      	add	r3, r2
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fe fd62 	bl	800cea8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	607b      	str	r3, [r7, #4]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2b06      	cmp	r3, #6
 800e3ee:	d9ef      	bls.n	800e3d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e3f0:	480d      	ldr	r0, [pc, #52]	; (800e428 <prvInitialiseTaskLists+0x64>)
 800e3f2:	f7fe fd59 	bl	800cea8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e3f6:	480d      	ldr	r0, [pc, #52]	; (800e42c <prvInitialiseTaskLists+0x68>)
 800e3f8:	f7fe fd56 	bl	800cea8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e3fc:	480c      	ldr	r0, [pc, #48]	; (800e430 <prvInitialiseTaskLists+0x6c>)
 800e3fe:	f7fe fd53 	bl	800cea8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e402:	480c      	ldr	r0, [pc, #48]	; (800e434 <prvInitialiseTaskLists+0x70>)
 800e404:	f7fe fd50 	bl	800cea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e408:	480b      	ldr	r0, [pc, #44]	; (800e438 <prvInitialiseTaskLists+0x74>)
 800e40a:	f7fe fd4d 	bl	800cea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e40e:	4b0b      	ldr	r3, [pc, #44]	; (800e43c <prvInitialiseTaskLists+0x78>)
 800e410:	4a05      	ldr	r2, [pc, #20]	; (800e428 <prvInitialiseTaskLists+0x64>)
 800e412:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e414:	4b0a      	ldr	r3, [pc, #40]	; (800e440 <prvInitialiseTaskLists+0x7c>)
 800e416:	4a05      	ldr	r2, [pc, #20]	; (800e42c <prvInitialiseTaskLists+0x68>)
 800e418:	601a      	str	r2, [r3, #0]
}
 800e41a:	bf00      	nop
 800e41c:	3708      	adds	r7, #8
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
 800e422:	bf00      	nop
 800e424:	20000be0 	.word	0x20000be0
 800e428:	20000c6c 	.word	0x20000c6c
 800e42c:	20000c80 	.word	0x20000c80
 800e430:	20000c9c 	.word	0x20000c9c
 800e434:	20000cb0 	.word	0x20000cb0
 800e438:	20000cc8 	.word	0x20000cc8
 800e43c:	20000c94 	.word	0x20000c94
 800e440:	20000c98 	.word	0x20000c98

0800e444 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e44a:	e019      	b.n	800e480 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e44c:	f000 fab2 	bl	800e9b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e450:	4b10      	ldr	r3, [pc, #64]	; (800e494 <prvCheckTasksWaitingTermination+0x50>)
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	68db      	ldr	r3, [r3, #12]
 800e456:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	3304      	adds	r3, #4
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7fe fdad 	bl	800cfbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e462:	4b0d      	ldr	r3, [pc, #52]	; (800e498 <prvCheckTasksWaitingTermination+0x54>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	3b01      	subs	r3, #1
 800e468:	4a0b      	ldr	r2, [pc, #44]	; (800e498 <prvCheckTasksWaitingTermination+0x54>)
 800e46a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e46c:	4b0b      	ldr	r3, [pc, #44]	; (800e49c <prvCheckTasksWaitingTermination+0x58>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	3b01      	subs	r3, #1
 800e472:	4a0a      	ldr	r2, [pc, #40]	; (800e49c <prvCheckTasksWaitingTermination+0x58>)
 800e474:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e476:	f000 facd 	bl	800ea14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f000 f810 	bl	800e4a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e480:	4b06      	ldr	r3, [pc, #24]	; (800e49c <prvCheckTasksWaitingTermination+0x58>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d1e1      	bne.n	800e44c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e488:	bf00      	nop
 800e48a:	bf00      	nop
 800e48c:	3708      	adds	r7, #8
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop
 800e494:	20000cb0 	.word	0x20000cb0
 800e498:	20000cdc 	.word	0x20000cdc
 800e49c:	20000cc4 	.word	0x20000cc4

0800e4a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d108      	bne.n	800e4c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f000 fc2a 	bl	800ed10 <vPortFree>
				vPortFree( pxTCB );
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f000 fc27 	bl	800ed10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4c2:	e018      	b.n	800e4f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d103      	bne.n	800e4d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 fc1e 	bl	800ed10 <vPortFree>
	}
 800e4d4:	e00f      	b.n	800e4f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4dc:	2b02      	cmp	r3, #2
 800e4de:	d00a      	beq.n	800e4f6 <prvDeleteTCB+0x56>
	__asm volatile
 800e4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e4:	f383 8811 	msr	BASEPRI, r3
 800e4e8:	f3bf 8f6f 	isb	sy
 800e4ec:	f3bf 8f4f 	dsb	sy
 800e4f0:	60fb      	str	r3, [r7, #12]
}
 800e4f2:	bf00      	nop
 800e4f4:	e7fe      	b.n	800e4f4 <prvDeleteTCB+0x54>
	}
 800e4f6:	bf00      	nop
 800e4f8:	3710      	adds	r7, #16
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
	...

0800e500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e506:	4b0c      	ldr	r3, [pc, #48]	; (800e538 <prvResetNextTaskUnblockTime+0x38>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d104      	bne.n	800e51a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e510:	4b0a      	ldr	r3, [pc, #40]	; (800e53c <prvResetNextTaskUnblockTime+0x3c>)
 800e512:	f04f 32ff 	mov.w	r2, #4294967295
 800e516:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e518:	e008      	b.n	800e52c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e51a:	4b07      	ldr	r3, [pc, #28]	; (800e538 <prvResetNextTaskUnblockTime+0x38>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	68db      	ldr	r3, [r3, #12]
 800e522:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	4a04      	ldr	r2, [pc, #16]	; (800e53c <prvResetNextTaskUnblockTime+0x3c>)
 800e52a:	6013      	str	r3, [r2, #0]
}
 800e52c:	bf00      	nop
 800e52e:	370c      	adds	r7, #12
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr
 800e538:	20000c94 	.word	0x20000c94
 800e53c:	20000cfc 	.word	0x20000cfc

0800e540 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e540:	b480      	push	{r7}
 800e542:	b083      	sub	sp, #12
 800e544:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e546:	4b0b      	ldr	r3, [pc, #44]	; (800e574 <xTaskGetSchedulerState+0x34>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d102      	bne.n	800e554 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e54e:	2301      	movs	r3, #1
 800e550:	607b      	str	r3, [r7, #4]
 800e552:	e008      	b.n	800e566 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e554:	4b08      	ldr	r3, [pc, #32]	; (800e578 <xTaskGetSchedulerState+0x38>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d102      	bne.n	800e562 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e55c:	2302      	movs	r3, #2
 800e55e:	607b      	str	r3, [r7, #4]
 800e560:	e001      	b.n	800e566 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e562:	2300      	movs	r3, #0
 800e564:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e566:	687b      	ldr	r3, [r7, #4]
	}
 800e568:	4618      	mov	r0, r3
 800e56a:	370c      	adds	r7, #12
 800e56c:	46bd      	mov	sp, r7
 800e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e572:	4770      	bx	lr
 800e574:	20000ce8 	.word	0x20000ce8
 800e578:	20000d04 	.word	0x20000d04

0800e57c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b086      	sub	sp, #24
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e588:	2300      	movs	r3, #0
 800e58a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d06e      	beq.n	800e670 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e592:	4b3a      	ldr	r3, [pc, #232]	; (800e67c <xTaskPriorityDisinherit+0x100>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	693a      	ldr	r2, [r7, #16]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d00a      	beq.n	800e5b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	60fb      	str	r3, [r7, #12]
}
 800e5ae:	bf00      	nop
 800e5b0:	e7fe      	b.n	800e5b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d10a      	bne.n	800e5d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5be:	f383 8811 	msr	BASEPRI, r3
 800e5c2:	f3bf 8f6f 	isb	sy
 800e5c6:	f3bf 8f4f 	dsb	sy
 800e5ca:	60bb      	str	r3, [r7, #8]
}
 800e5cc:	bf00      	nop
 800e5ce:	e7fe      	b.n	800e5ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5d4:	1e5a      	subs	r2, r3, #1
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d044      	beq.n	800e670 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d140      	bne.n	800e670 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	3304      	adds	r3, #4
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fe fce2 	bl	800cfbc <uxListRemove>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d115      	bne.n	800e62a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e602:	491f      	ldr	r1, [pc, #124]	; (800e680 <xTaskPriorityDisinherit+0x104>)
 800e604:	4613      	mov	r3, r2
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	4413      	add	r3, r2
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	440b      	add	r3, r1
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d10a      	bne.n	800e62a <xTaskPriorityDisinherit+0xae>
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e618:	2201      	movs	r2, #1
 800e61a:	fa02 f303 	lsl.w	r3, r2, r3
 800e61e:	43da      	mvns	r2, r3
 800e620:	4b18      	ldr	r3, [pc, #96]	; (800e684 <xTaskPriorityDisinherit+0x108>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4013      	ands	r3, r2
 800e626:	4a17      	ldr	r2, [pc, #92]	; (800e684 <xTaskPriorityDisinherit+0x108>)
 800e628:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e636:	f1c3 0207 	rsb	r2, r3, #7
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e642:	2201      	movs	r2, #1
 800e644:	409a      	lsls	r2, r3
 800e646:	4b0f      	ldr	r3, [pc, #60]	; (800e684 <xTaskPriorityDisinherit+0x108>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	4313      	orrs	r3, r2
 800e64c:	4a0d      	ldr	r2, [pc, #52]	; (800e684 <xTaskPriorityDisinherit+0x108>)
 800e64e:	6013      	str	r3, [r2, #0]
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e654:	4613      	mov	r3, r2
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	4413      	add	r3, r2
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	4a08      	ldr	r2, [pc, #32]	; (800e680 <xTaskPriorityDisinherit+0x104>)
 800e65e:	441a      	add	r2, r3
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	3304      	adds	r3, #4
 800e664:	4619      	mov	r1, r3
 800e666:	4610      	mov	r0, r2
 800e668:	f7fe fc4b 	bl	800cf02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e66c:	2301      	movs	r3, #1
 800e66e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e670:	697b      	ldr	r3, [r7, #20]
	}
 800e672:	4618      	mov	r0, r3
 800e674:	3718      	adds	r7, #24
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	20000bdc 	.word	0x20000bdc
 800e680:	20000be0 	.word	0x20000be0
 800e684:	20000ce4 	.word	0x20000ce4

0800e688 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e692:	4b29      	ldr	r3, [pc, #164]	; (800e738 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e698:	4b28      	ldr	r3, [pc, #160]	; (800e73c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	3304      	adds	r3, #4
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7fe fc8c 	bl	800cfbc <uxListRemove>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d10b      	bne.n	800e6c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e6aa:	4b24      	ldr	r3, [pc, #144]	; (800e73c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800e6b6:	43da      	mvns	r2, r3
 800e6b8:	4b21      	ldr	r3, [pc, #132]	; (800e740 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4013      	ands	r3, r2
 800e6be:	4a20      	ldr	r2, [pc, #128]	; (800e740 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e6c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6c8:	d10a      	bne.n	800e6e0 <prvAddCurrentTaskToDelayedList+0x58>
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d007      	beq.n	800e6e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6d0:	4b1a      	ldr	r3, [pc, #104]	; (800e73c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	3304      	adds	r3, #4
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	481a      	ldr	r0, [pc, #104]	; (800e744 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e6da:	f7fe fc12 	bl	800cf02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e6de:	e026      	b.n	800e72e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e6e0:	68fa      	ldr	r2, [r7, #12]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	4413      	add	r3, r2
 800e6e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e6e8:	4b14      	ldr	r3, [pc, #80]	; (800e73c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	68ba      	ldr	r2, [r7, #8]
 800e6ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e6f0:	68ba      	ldr	r2, [r7, #8]
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d209      	bcs.n	800e70c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6f8:	4b13      	ldr	r3, [pc, #76]	; (800e748 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	4b0f      	ldr	r3, [pc, #60]	; (800e73c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	3304      	adds	r3, #4
 800e702:	4619      	mov	r1, r3
 800e704:	4610      	mov	r0, r2
 800e706:	f7fe fc20 	bl	800cf4a <vListInsert>
}
 800e70a:	e010      	b.n	800e72e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e70c:	4b0f      	ldr	r3, [pc, #60]	; (800e74c <prvAddCurrentTaskToDelayedList+0xc4>)
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	4b0a      	ldr	r3, [pc, #40]	; (800e73c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	3304      	adds	r3, #4
 800e716:	4619      	mov	r1, r3
 800e718:	4610      	mov	r0, r2
 800e71a:	f7fe fc16 	bl	800cf4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e71e:	4b0c      	ldr	r3, [pc, #48]	; (800e750 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	68ba      	ldr	r2, [r7, #8]
 800e724:	429a      	cmp	r2, r3
 800e726:	d202      	bcs.n	800e72e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e728:	4a09      	ldr	r2, [pc, #36]	; (800e750 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	6013      	str	r3, [r2, #0]
}
 800e72e:	bf00      	nop
 800e730:	3710      	adds	r7, #16
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	20000ce0 	.word	0x20000ce0
 800e73c:	20000bdc 	.word	0x20000bdc
 800e740:	20000ce4 	.word	0x20000ce4
 800e744:	20000cc8 	.word	0x20000cc8
 800e748:	20000c98 	.word	0x20000c98
 800e74c:	20000c94 	.word	0x20000c94
 800e750:	20000cfc 	.word	0x20000cfc

0800e754 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e754:	b480      	push	{r7}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	60b9      	str	r1, [r7, #8]
 800e75e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	3b04      	subs	r3, #4
 800e764:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e76c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	3b04      	subs	r3, #4
 800e772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	f023 0201 	bic.w	r2, r3, #1
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	3b04      	subs	r3, #4
 800e782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e784:	4a0c      	ldr	r2, [pc, #48]	; (800e7b8 <pxPortInitialiseStack+0x64>)
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	3b14      	subs	r3, #20
 800e78e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	3b04      	subs	r3, #4
 800e79a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f06f 0202 	mvn.w	r2, #2
 800e7a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	3b20      	subs	r3, #32
 800e7a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3714      	adds	r7, #20
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr
 800e7b8:	0800e7bd 	.word	0x0800e7bd

0800e7bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b085      	sub	sp, #20
 800e7c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e7c6:	4b12      	ldr	r3, [pc, #72]	; (800e810 <prvTaskExitError+0x54>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ce:	d00a      	beq.n	800e7e6 <prvTaskExitError+0x2a>
	__asm volatile
 800e7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d4:	f383 8811 	msr	BASEPRI, r3
 800e7d8:	f3bf 8f6f 	isb	sy
 800e7dc:	f3bf 8f4f 	dsb	sy
 800e7e0:	60fb      	str	r3, [r7, #12]
}
 800e7e2:	bf00      	nop
 800e7e4:	e7fe      	b.n	800e7e4 <prvTaskExitError+0x28>
	__asm volatile
 800e7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ea:	f383 8811 	msr	BASEPRI, r3
 800e7ee:	f3bf 8f6f 	isb	sy
 800e7f2:	f3bf 8f4f 	dsb	sy
 800e7f6:	60bb      	str	r3, [r7, #8]
}
 800e7f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e7fa:	bf00      	nop
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d0fc      	beq.n	800e7fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e802:	bf00      	nop
 800e804:	bf00      	nop
 800e806:	3714      	adds	r7, #20
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr
 800e810:	20000018 	.word	0x20000018
	...

0800e820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e820:	4b07      	ldr	r3, [pc, #28]	; (800e840 <pxCurrentTCBConst2>)
 800e822:	6819      	ldr	r1, [r3, #0]
 800e824:	6808      	ldr	r0, [r1, #0]
 800e826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e82a:	f380 8809 	msr	PSP, r0
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f04f 0000 	mov.w	r0, #0
 800e836:	f380 8811 	msr	BASEPRI, r0
 800e83a:	4770      	bx	lr
 800e83c:	f3af 8000 	nop.w

0800e840 <pxCurrentTCBConst2>:
 800e840:	20000bdc 	.word	0x20000bdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e844:	bf00      	nop
 800e846:	bf00      	nop

0800e848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e848:	4808      	ldr	r0, [pc, #32]	; (800e86c <prvPortStartFirstTask+0x24>)
 800e84a:	6800      	ldr	r0, [r0, #0]
 800e84c:	6800      	ldr	r0, [r0, #0]
 800e84e:	f380 8808 	msr	MSP, r0
 800e852:	f04f 0000 	mov.w	r0, #0
 800e856:	f380 8814 	msr	CONTROL, r0
 800e85a:	b662      	cpsie	i
 800e85c:	b661      	cpsie	f
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	f3bf 8f6f 	isb	sy
 800e866:	df00      	svc	0
 800e868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e86a:	bf00      	nop
 800e86c:	e000ed08 	.word	0xe000ed08

0800e870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b086      	sub	sp, #24
 800e874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e876:	4b46      	ldr	r3, [pc, #280]	; (800e990 <xPortStartScheduler+0x120>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a46      	ldr	r2, [pc, #280]	; (800e994 <xPortStartScheduler+0x124>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d10a      	bne.n	800e896 <xPortStartScheduler+0x26>
	__asm volatile
 800e880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e884:	f383 8811 	msr	BASEPRI, r3
 800e888:	f3bf 8f6f 	isb	sy
 800e88c:	f3bf 8f4f 	dsb	sy
 800e890:	613b      	str	r3, [r7, #16]
}
 800e892:	bf00      	nop
 800e894:	e7fe      	b.n	800e894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e896:	4b3e      	ldr	r3, [pc, #248]	; (800e990 <xPortStartScheduler+0x120>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4a3f      	ldr	r2, [pc, #252]	; (800e998 <xPortStartScheduler+0x128>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d10a      	bne.n	800e8b6 <xPortStartScheduler+0x46>
	__asm volatile
 800e8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a4:	f383 8811 	msr	BASEPRI, r3
 800e8a8:	f3bf 8f6f 	isb	sy
 800e8ac:	f3bf 8f4f 	dsb	sy
 800e8b0:	60fb      	str	r3, [r7, #12]
}
 800e8b2:	bf00      	nop
 800e8b4:	e7fe      	b.n	800e8b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e8b6:	4b39      	ldr	r3, [pc, #228]	; (800e99c <xPortStartScheduler+0x12c>)
 800e8b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	22ff      	movs	r2, #255	; 0xff
 800e8c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e8d0:	78fb      	ldrb	r3, [r7, #3]
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e8d8:	b2da      	uxtb	r2, r3
 800e8da:	4b31      	ldr	r3, [pc, #196]	; (800e9a0 <xPortStartScheduler+0x130>)
 800e8dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e8de:	4b31      	ldr	r3, [pc, #196]	; (800e9a4 <xPortStartScheduler+0x134>)
 800e8e0:	2207      	movs	r2, #7
 800e8e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8e4:	e009      	b.n	800e8fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e8e6:	4b2f      	ldr	r3, [pc, #188]	; (800e9a4 <xPortStartScheduler+0x134>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	4a2d      	ldr	r2, [pc, #180]	; (800e9a4 <xPortStartScheduler+0x134>)
 800e8ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e8f0:	78fb      	ldrb	r3, [r7, #3]
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	005b      	lsls	r3, r3, #1
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8fa:	78fb      	ldrb	r3, [r7, #3]
 800e8fc:	b2db      	uxtb	r3, r3
 800e8fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e902:	2b80      	cmp	r3, #128	; 0x80
 800e904:	d0ef      	beq.n	800e8e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e906:	4b27      	ldr	r3, [pc, #156]	; (800e9a4 <xPortStartScheduler+0x134>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f1c3 0307 	rsb	r3, r3, #7
 800e90e:	2b04      	cmp	r3, #4
 800e910:	d00a      	beq.n	800e928 <xPortStartScheduler+0xb8>
	__asm volatile
 800e912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e916:	f383 8811 	msr	BASEPRI, r3
 800e91a:	f3bf 8f6f 	isb	sy
 800e91e:	f3bf 8f4f 	dsb	sy
 800e922:	60bb      	str	r3, [r7, #8]
}
 800e924:	bf00      	nop
 800e926:	e7fe      	b.n	800e926 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e928:	4b1e      	ldr	r3, [pc, #120]	; (800e9a4 <xPortStartScheduler+0x134>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	021b      	lsls	r3, r3, #8
 800e92e:	4a1d      	ldr	r2, [pc, #116]	; (800e9a4 <xPortStartScheduler+0x134>)
 800e930:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e932:	4b1c      	ldr	r3, [pc, #112]	; (800e9a4 <xPortStartScheduler+0x134>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e93a:	4a1a      	ldr	r2, [pc, #104]	; (800e9a4 <xPortStartScheduler+0x134>)
 800e93c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	b2da      	uxtb	r2, r3
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e946:	4b18      	ldr	r3, [pc, #96]	; (800e9a8 <xPortStartScheduler+0x138>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4a17      	ldr	r2, [pc, #92]	; (800e9a8 <xPortStartScheduler+0x138>)
 800e94c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e952:	4b15      	ldr	r3, [pc, #84]	; (800e9a8 <xPortStartScheduler+0x138>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4a14      	ldr	r2, [pc, #80]	; (800e9a8 <xPortStartScheduler+0x138>)
 800e958:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e95c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e95e:	f000 f8dd 	bl	800eb1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e962:	4b12      	ldr	r3, [pc, #72]	; (800e9ac <xPortStartScheduler+0x13c>)
 800e964:	2200      	movs	r2, #0
 800e966:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e968:	f000 f8fc 	bl	800eb64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e96c:	4b10      	ldr	r3, [pc, #64]	; (800e9b0 <xPortStartScheduler+0x140>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a0f      	ldr	r2, [pc, #60]	; (800e9b0 <xPortStartScheduler+0x140>)
 800e972:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e976:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e978:	f7ff ff66 	bl	800e848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e97c:	f7ff fba4 	bl	800e0c8 <vTaskSwitchContext>
	prvTaskExitError();
 800e980:	f7ff ff1c 	bl	800e7bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e984:	2300      	movs	r3, #0
}
 800e986:	4618      	mov	r0, r3
 800e988:	3718      	adds	r7, #24
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	e000ed00 	.word	0xe000ed00
 800e994:	410fc271 	.word	0x410fc271
 800e998:	410fc270 	.word	0x410fc270
 800e99c:	e000e400 	.word	0xe000e400
 800e9a0:	20000d08 	.word	0x20000d08
 800e9a4:	20000d0c 	.word	0x20000d0c
 800e9a8:	e000ed20 	.word	0xe000ed20
 800e9ac:	20000018 	.word	0x20000018
 800e9b0:	e000ef34 	.word	0xe000ef34

0800e9b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b083      	sub	sp, #12
 800e9b8:	af00      	add	r7, sp, #0
	__asm volatile
 800e9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9be:	f383 8811 	msr	BASEPRI, r3
 800e9c2:	f3bf 8f6f 	isb	sy
 800e9c6:	f3bf 8f4f 	dsb	sy
 800e9ca:	607b      	str	r3, [r7, #4]
}
 800e9cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e9ce:	4b0f      	ldr	r3, [pc, #60]	; (800ea0c <vPortEnterCritical+0x58>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	4a0d      	ldr	r2, [pc, #52]	; (800ea0c <vPortEnterCritical+0x58>)
 800e9d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e9d8:	4b0c      	ldr	r3, [pc, #48]	; (800ea0c <vPortEnterCritical+0x58>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d10f      	bne.n	800ea00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e9e0:	4b0b      	ldr	r3, [pc, #44]	; (800ea10 <vPortEnterCritical+0x5c>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d00a      	beq.n	800ea00 <vPortEnterCritical+0x4c>
	__asm volatile
 800e9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ee:	f383 8811 	msr	BASEPRI, r3
 800e9f2:	f3bf 8f6f 	isb	sy
 800e9f6:	f3bf 8f4f 	dsb	sy
 800e9fa:	603b      	str	r3, [r7, #0]
}
 800e9fc:	bf00      	nop
 800e9fe:	e7fe      	b.n	800e9fe <vPortEnterCritical+0x4a>
	}
}
 800ea00:	bf00      	nop
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr
 800ea0c:	20000018 	.word	0x20000018
 800ea10:	e000ed04 	.word	0xe000ed04

0800ea14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ea14:	b480      	push	{r7}
 800ea16:	b083      	sub	sp, #12
 800ea18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ea1a:	4b12      	ldr	r3, [pc, #72]	; (800ea64 <vPortExitCritical+0x50>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d10a      	bne.n	800ea38 <vPortExitCritical+0x24>
	__asm volatile
 800ea22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea26:	f383 8811 	msr	BASEPRI, r3
 800ea2a:	f3bf 8f6f 	isb	sy
 800ea2e:	f3bf 8f4f 	dsb	sy
 800ea32:	607b      	str	r3, [r7, #4]
}
 800ea34:	bf00      	nop
 800ea36:	e7fe      	b.n	800ea36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ea38:	4b0a      	ldr	r3, [pc, #40]	; (800ea64 <vPortExitCritical+0x50>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	4a09      	ldr	r2, [pc, #36]	; (800ea64 <vPortExitCritical+0x50>)
 800ea40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea42:	4b08      	ldr	r3, [pc, #32]	; (800ea64 <vPortExitCritical+0x50>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d105      	bne.n	800ea56 <vPortExitCritical+0x42>
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ea54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea56:	bf00      	nop
 800ea58:	370c      	adds	r7, #12
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	20000018 	.word	0x20000018
	...

0800ea70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea70:	f3ef 8009 	mrs	r0, PSP
 800ea74:	f3bf 8f6f 	isb	sy
 800ea78:	4b15      	ldr	r3, [pc, #84]	; (800ead0 <pxCurrentTCBConst>)
 800ea7a:	681a      	ldr	r2, [r3, #0]
 800ea7c:	f01e 0f10 	tst.w	lr, #16
 800ea80:	bf08      	it	eq
 800ea82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea8a:	6010      	str	r0, [r2, #0]
 800ea8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ea94:	f380 8811 	msr	BASEPRI, r0
 800ea98:	f3bf 8f4f 	dsb	sy
 800ea9c:	f3bf 8f6f 	isb	sy
 800eaa0:	f7ff fb12 	bl	800e0c8 <vTaskSwitchContext>
 800eaa4:	f04f 0000 	mov.w	r0, #0
 800eaa8:	f380 8811 	msr	BASEPRI, r0
 800eaac:	bc09      	pop	{r0, r3}
 800eaae:	6819      	ldr	r1, [r3, #0]
 800eab0:	6808      	ldr	r0, [r1, #0]
 800eab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eab6:	f01e 0f10 	tst.w	lr, #16
 800eaba:	bf08      	it	eq
 800eabc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eac0:	f380 8809 	msr	PSP, r0
 800eac4:	f3bf 8f6f 	isb	sy
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	f3af 8000 	nop.w

0800ead0 <pxCurrentTCBConst>:
 800ead0:	20000bdc 	.word	0x20000bdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ead4:	bf00      	nop
 800ead6:	bf00      	nop

0800ead8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
	__asm volatile
 800eade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae2:	f383 8811 	msr	BASEPRI, r3
 800eae6:	f3bf 8f6f 	isb	sy
 800eaea:	f3bf 8f4f 	dsb	sy
 800eaee:	607b      	str	r3, [r7, #4]
}
 800eaf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eaf2:	f7ff fa31 	bl	800df58 <xTaskIncrementTick>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d003      	beq.n	800eb04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eafc:	4b06      	ldr	r3, [pc, #24]	; (800eb18 <xPortSysTickHandler+0x40>)
 800eafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb02:	601a      	str	r2, [r3, #0]
 800eb04:	2300      	movs	r3, #0
 800eb06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	f383 8811 	msr	BASEPRI, r3
}
 800eb0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eb10:	bf00      	nop
 800eb12:	3708      	adds	r7, #8
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	e000ed04 	.word	0xe000ed04

0800eb1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eb20:	4b0b      	ldr	r3, [pc, #44]	; (800eb50 <vPortSetupTimerInterrupt+0x34>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb26:	4b0b      	ldr	r3, [pc, #44]	; (800eb54 <vPortSetupTimerInterrupt+0x38>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb2c:	4b0a      	ldr	r3, [pc, #40]	; (800eb58 <vPortSetupTimerInterrupt+0x3c>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4a0a      	ldr	r2, [pc, #40]	; (800eb5c <vPortSetupTimerInterrupt+0x40>)
 800eb32:	fba2 2303 	umull	r2, r3, r2, r3
 800eb36:	099b      	lsrs	r3, r3, #6
 800eb38:	4a09      	ldr	r2, [pc, #36]	; (800eb60 <vPortSetupTimerInterrupt+0x44>)
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eb3e:	4b04      	ldr	r3, [pc, #16]	; (800eb50 <vPortSetupTimerInterrupt+0x34>)
 800eb40:	2207      	movs	r2, #7
 800eb42:	601a      	str	r2, [r3, #0]
}
 800eb44:	bf00      	nop
 800eb46:	46bd      	mov	sp, r7
 800eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4c:	4770      	bx	lr
 800eb4e:	bf00      	nop
 800eb50:	e000e010 	.word	0xe000e010
 800eb54:	e000e018 	.word	0xe000e018
 800eb58:	2000000c 	.word	0x2000000c
 800eb5c:	10624dd3 	.word	0x10624dd3
 800eb60:	e000e014 	.word	0xe000e014

0800eb64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eb74 <vPortEnableVFP+0x10>
 800eb68:	6801      	ldr	r1, [r0, #0]
 800eb6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eb6e:	6001      	str	r1, [r0, #0]
 800eb70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb72:	bf00      	nop
 800eb74:	e000ed88 	.word	0xe000ed88

0800eb78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b08a      	sub	sp, #40	; 0x28
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eb80:	2300      	movs	r3, #0
 800eb82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eb84:	f7ff f93e 	bl	800de04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eb88:	4b5b      	ldr	r3, [pc, #364]	; (800ecf8 <pvPortMalloc+0x180>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d101      	bne.n	800eb94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eb90:	f000 f920 	bl	800edd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eb94:	4b59      	ldr	r3, [pc, #356]	; (800ecfc <pvPortMalloc+0x184>)
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	4013      	ands	r3, r2
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	f040 8093 	bne.w	800ecc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d01d      	beq.n	800ebe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eba8:	2208      	movs	r2, #8
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4413      	add	r3, r2
 800ebae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f003 0307 	and.w	r3, r3, #7
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d014      	beq.n	800ebe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f023 0307 	bic.w	r3, r3, #7
 800ebc0:	3308      	adds	r3, #8
 800ebc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f003 0307 	and.w	r3, r3, #7
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d00a      	beq.n	800ebe4 <pvPortMalloc+0x6c>
	__asm volatile
 800ebce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd2:	f383 8811 	msr	BASEPRI, r3
 800ebd6:	f3bf 8f6f 	isb	sy
 800ebda:	f3bf 8f4f 	dsb	sy
 800ebde:	617b      	str	r3, [r7, #20]
}
 800ebe0:	bf00      	nop
 800ebe2:	e7fe      	b.n	800ebe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d06e      	beq.n	800ecc8 <pvPortMalloc+0x150>
 800ebea:	4b45      	ldr	r3, [pc, #276]	; (800ed00 <pvPortMalloc+0x188>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	687a      	ldr	r2, [r7, #4]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d869      	bhi.n	800ecc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ebf4:	4b43      	ldr	r3, [pc, #268]	; (800ed04 <pvPortMalloc+0x18c>)
 800ebf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ebf8:	4b42      	ldr	r3, [pc, #264]	; (800ed04 <pvPortMalloc+0x18c>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ebfe:	e004      	b.n	800ec0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ec00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d903      	bls.n	800ec1c <pvPortMalloc+0xa4>
 800ec14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d1f1      	bne.n	800ec00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec1c:	4b36      	ldr	r3, [pc, #216]	; (800ecf8 <pvPortMalloc+0x180>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d050      	beq.n	800ecc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec26:	6a3b      	ldr	r3, [r7, #32]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2208      	movs	r2, #8
 800ec2c:	4413      	add	r3, r2
 800ec2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	6a3b      	ldr	r3, [r7, #32]
 800ec36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3a:	685a      	ldr	r2, [r3, #4]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	1ad2      	subs	r2, r2, r3
 800ec40:	2308      	movs	r3, #8
 800ec42:	005b      	lsls	r3, r3, #1
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d91f      	bls.n	800ec88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ec48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec50:	69bb      	ldr	r3, [r7, #24]
 800ec52:	f003 0307 	and.w	r3, r3, #7
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d00a      	beq.n	800ec70 <pvPortMalloc+0xf8>
	__asm volatile
 800ec5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec5e:	f383 8811 	msr	BASEPRI, r3
 800ec62:	f3bf 8f6f 	isb	sy
 800ec66:	f3bf 8f4f 	dsb	sy
 800ec6a:	613b      	str	r3, [r7, #16]
}
 800ec6c:	bf00      	nop
 800ec6e:	e7fe      	b.n	800ec6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ec70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec72:	685a      	ldr	r2, [r3, #4]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	1ad2      	subs	r2, r2, r3
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ec7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ec82:	69b8      	ldr	r0, [r7, #24]
 800ec84:	f000 f908 	bl	800ee98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec88:	4b1d      	ldr	r3, [pc, #116]	; (800ed00 <pvPortMalloc+0x188>)
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	1ad3      	subs	r3, r2, r3
 800ec92:	4a1b      	ldr	r2, [pc, #108]	; (800ed00 <pvPortMalloc+0x188>)
 800ec94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec96:	4b1a      	ldr	r3, [pc, #104]	; (800ed00 <pvPortMalloc+0x188>)
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	4b1b      	ldr	r3, [pc, #108]	; (800ed08 <pvPortMalloc+0x190>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d203      	bcs.n	800ecaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eca2:	4b17      	ldr	r3, [pc, #92]	; (800ed00 <pvPortMalloc+0x188>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	4a18      	ldr	r2, [pc, #96]	; (800ed08 <pvPortMalloc+0x190>)
 800eca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ecaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecac:	685a      	ldr	r2, [r3, #4]
 800ecae:	4b13      	ldr	r3, [pc, #76]	; (800ecfc <pvPortMalloc+0x184>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	431a      	orrs	r2, r3
 800ecb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ecb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecba:	2200      	movs	r2, #0
 800ecbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ecbe:	4b13      	ldr	r3, [pc, #76]	; (800ed0c <pvPortMalloc+0x194>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	4a11      	ldr	r2, [pc, #68]	; (800ed0c <pvPortMalloc+0x194>)
 800ecc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ecc8:	f7ff f8aa 	bl	800de20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	f003 0307 	and.w	r3, r3, #7
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d00a      	beq.n	800ecec <pvPortMalloc+0x174>
	__asm volatile
 800ecd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecda:	f383 8811 	msr	BASEPRI, r3
 800ecde:	f3bf 8f6f 	isb	sy
 800ece2:	f3bf 8f4f 	dsb	sy
 800ece6:	60fb      	str	r3, [r7, #12]
}
 800ece8:	bf00      	nop
 800ecea:	e7fe      	b.n	800ecea <pvPortMalloc+0x172>
	return pvReturn;
 800ecec:	69fb      	ldr	r3, [r7, #28]
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3728      	adds	r7, #40	; 0x28
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	20004918 	.word	0x20004918
 800ecfc:	2000492c 	.word	0x2000492c
 800ed00:	2000491c 	.word	0x2000491c
 800ed04:	20004910 	.word	0x20004910
 800ed08:	20004920 	.word	0x20004920
 800ed0c:	20004924 	.word	0x20004924

0800ed10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d04d      	beq.n	800edbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed22:	2308      	movs	r3, #8
 800ed24:	425b      	negs	r3, r3
 800ed26:	697a      	ldr	r2, [r7, #20]
 800ed28:	4413      	add	r3, r2
 800ed2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	685a      	ldr	r2, [r3, #4]
 800ed34:	4b24      	ldr	r3, [pc, #144]	; (800edc8 <vPortFree+0xb8>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4013      	ands	r3, r2
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d10a      	bne.n	800ed54 <vPortFree+0x44>
	__asm volatile
 800ed3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed42:	f383 8811 	msr	BASEPRI, r3
 800ed46:	f3bf 8f6f 	isb	sy
 800ed4a:	f3bf 8f4f 	dsb	sy
 800ed4e:	60fb      	str	r3, [r7, #12]
}
 800ed50:	bf00      	nop
 800ed52:	e7fe      	b.n	800ed52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00a      	beq.n	800ed72 <vPortFree+0x62>
	__asm volatile
 800ed5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed60:	f383 8811 	msr	BASEPRI, r3
 800ed64:	f3bf 8f6f 	isb	sy
 800ed68:	f3bf 8f4f 	dsb	sy
 800ed6c:	60bb      	str	r3, [r7, #8]
}
 800ed6e:	bf00      	nop
 800ed70:	e7fe      	b.n	800ed70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	685a      	ldr	r2, [r3, #4]
 800ed76:	4b14      	ldr	r3, [pc, #80]	; (800edc8 <vPortFree+0xb8>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4013      	ands	r3, r2
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d01e      	beq.n	800edbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d11a      	bne.n	800edbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	685a      	ldr	r2, [r3, #4]
 800ed8c:	4b0e      	ldr	r3, [pc, #56]	; (800edc8 <vPortFree+0xb8>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	43db      	mvns	r3, r3
 800ed92:	401a      	ands	r2, r3
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ed98:	f7ff f834 	bl	800de04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	685a      	ldr	r2, [r3, #4]
 800eda0:	4b0a      	ldr	r3, [pc, #40]	; (800edcc <vPortFree+0xbc>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4413      	add	r3, r2
 800eda6:	4a09      	ldr	r2, [pc, #36]	; (800edcc <vPortFree+0xbc>)
 800eda8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800edaa:	6938      	ldr	r0, [r7, #16]
 800edac:	f000 f874 	bl	800ee98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800edb0:	4b07      	ldr	r3, [pc, #28]	; (800edd0 <vPortFree+0xc0>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	3301      	adds	r3, #1
 800edb6:	4a06      	ldr	r2, [pc, #24]	; (800edd0 <vPortFree+0xc0>)
 800edb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800edba:	f7ff f831 	bl	800de20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800edbe:	bf00      	nop
 800edc0:	3718      	adds	r7, #24
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	2000492c 	.word	0x2000492c
 800edcc:	2000491c 	.word	0x2000491c
 800edd0:	20004928 	.word	0x20004928

0800edd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800edd4:	b480      	push	{r7}
 800edd6:	b085      	sub	sp, #20
 800edd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800edda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800edde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ede0:	4b27      	ldr	r3, [pc, #156]	; (800ee80 <prvHeapInit+0xac>)
 800ede2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f003 0307 	and.w	r3, r3, #7
 800edea:	2b00      	cmp	r3, #0
 800edec:	d00c      	beq.n	800ee08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	3307      	adds	r3, #7
 800edf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f023 0307 	bic.w	r3, r3, #7
 800edfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800edfc:	68ba      	ldr	r2, [r7, #8]
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	1ad3      	subs	r3, r2, r3
 800ee02:	4a1f      	ldr	r2, [pc, #124]	; (800ee80 <prvHeapInit+0xac>)
 800ee04:	4413      	add	r3, r2
 800ee06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee0c:	4a1d      	ldr	r2, [pc, #116]	; (800ee84 <prvHeapInit+0xb0>)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee12:	4b1c      	ldr	r3, [pc, #112]	; (800ee84 <prvHeapInit+0xb0>)
 800ee14:	2200      	movs	r2, #0
 800ee16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	68ba      	ldr	r2, [r7, #8]
 800ee1c:	4413      	add	r3, r2
 800ee1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee20:	2208      	movs	r2, #8
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	1a9b      	subs	r3, r3, r2
 800ee26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f023 0307 	bic.w	r3, r3, #7
 800ee2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	4a15      	ldr	r2, [pc, #84]	; (800ee88 <prvHeapInit+0xb4>)
 800ee34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee36:	4b14      	ldr	r3, [pc, #80]	; (800ee88 <prvHeapInit+0xb4>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee3e:	4b12      	ldr	r3, [pc, #72]	; (800ee88 <prvHeapInit+0xb4>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2200      	movs	r2, #0
 800ee44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	68fa      	ldr	r2, [r7, #12]
 800ee4e:	1ad2      	subs	r2, r2, r3
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ee54:	4b0c      	ldr	r3, [pc, #48]	; (800ee88 <prvHeapInit+0xb4>)
 800ee56:	681a      	ldr	r2, [r3, #0]
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	4a0a      	ldr	r2, [pc, #40]	; (800ee8c <prvHeapInit+0xb8>)
 800ee62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	685b      	ldr	r3, [r3, #4]
 800ee68:	4a09      	ldr	r2, [pc, #36]	; (800ee90 <prvHeapInit+0xbc>)
 800ee6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee6c:	4b09      	ldr	r3, [pc, #36]	; (800ee94 <prvHeapInit+0xc0>)
 800ee6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ee72:	601a      	str	r2, [r3, #0]
}
 800ee74:	bf00      	nop
 800ee76:	3714      	adds	r7, #20
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr
 800ee80:	20000d10 	.word	0x20000d10
 800ee84:	20004910 	.word	0x20004910
 800ee88:	20004918 	.word	0x20004918
 800ee8c:	20004920 	.word	0x20004920
 800ee90:	2000491c 	.word	0x2000491c
 800ee94:	2000492c 	.word	0x2000492c

0800ee98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b085      	sub	sp, #20
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eea0:	4b28      	ldr	r3, [pc, #160]	; (800ef44 <prvInsertBlockIntoFreeList+0xac>)
 800eea2:	60fb      	str	r3, [r7, #12]
 800eea4:	e002      	b.n	800eeac <prvInsertBlockIntoFreeList+0x14>
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	60fb      	str	r3, [r7, #12]
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d8f7      	bhi.n	800eea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	68ba      	ldr	r2, [r7, #8]
 800eec0:	4413      	add	r3, r2
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d108      	bne.n	800eeda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	685a      	ldr	r2, [r3, #4]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	441a      	add	r2, r3
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	68ba      	ldr	r2, [r7, #8]
 800eee4:	441a      	add	r2, r3
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d118      	bne.n	800ef20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681a      	ldr	r2, [r3, #0]
 800eef2:	4b15      	ldr	r3, [pc, #84]	; (800ef48 <prvInsertBlockIntoFreeList+0xb0>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d00d      	beq.n	800ef16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	685a      	ldr	r2, [r3, #4]
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	441a      	add	r2, r3
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	601a      	str	r2, [r3, #0]
 800ef14:	e008      	b.n	800ef28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef16:	4b0c      	ldr	r3, [pc, #48]	; (800ef48 <prvInsertBlockIntoFreeList+0xb0>)
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	601a      	str	r2, [r3, #0]
 800ef1e:	e003      	b.n	800ef28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d002      	beq.n	800ef36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	687a      	ldr	r2, [r7, #4]
 800ef34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef36:	bf00      	nop
 800ef38:	3714      	adds	r7, #20
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr
 800ef42:	bf00      	nop
 800ef44:	20004910 	.word	0x20004910
 800ef48:	20004918 	.word	0x20004918

0800ef4c <__errno>:
 800ef4c:	4b01      	ldr	r3, [pc, #4]	; (800ef54 <__errno+0x8>)
 800ef4e:	6818      	ldr	r0, [r3, #0]
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop
 800ef54:	2000001c 	.word	0x2000001c

0800ef58 <__libc_init_array>:
 800ef58:	b570      	push	{r4, r5, r6, lr}
 800ef5a:	4d0d      	ldr	r5, [pc, #52]	; (800ef90 <__libc_init_array+0x38>)
 800ef5c:	4c0d      	ldr	r4, [pc, #52]	; (800ef94 <__libc_init_array+0x3c>)
 800ef5e:	1b64      	subs	r4, r4, r5
 800ef60:	10a4      	asrs	r4, r4, #2
 800ef62:	2600      	movs	r6, #0
 800ef64:	42a6      	cmp	r6, r4
 800ef66:	d109      	bne.n	800ef7c <__libc_init_array+0x24>
 800ef68:	4d0b      	ldr	r5, [pc, #44]	; (800ef98 <__libc_init_array+0x40>)
 800ef6a:	4c0c      	ldr	r4, [pc, #48]	; (800ef9c <__libc_init_array+0x44>)
 800ef6c:	f005 f9a4 	bl	80142b8 <_init>
 800ef70:	1b64      	subs	r4, r4, r5
 800ef72:	10a4      	asrs	r4, r4, #2
 800ef74:	2600      	movs	r6, #0
 800ef76:	42a6      	cmp	r6, r4
 800ef78:	d105      	bne.n	800ef86 <__libc_init_array+0x2e>
 800ef7a:	bd70      	pop	{r4, r5, r6, pc}
 800ef7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef80:	4798      	blx	r3
 800ef82:	3601      	adds	r6, #1
 800ef84:	e7ee      	b.n	800ef64 <__libc_init_array+0xc>
 800ef86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef8a:	4798      	blx	r3
 800ef8c:	3601      	adds	r6, #1
 800ef8e:	e7f2      	b.n	800ef76 <__libc_init_array+0x1e>
 800ef90:	08014d58 	.word	0x08014d58
 800ef94:	08014d58 	.word	0x08014d58
 800ef98:	08014d58 	.word	0x08014d58
 800ef9c:	08014d5c 	.word	0x08014d5c

0800efa0 <memcpy>:
 800efa0:	440a      	add	r2, r1
 800efa2:	4291      	cmp	r1, r2
 800efa4:	f100 33ff 	add.w	r3, r0, #4294967295
 800efa8:	d100      	bne.n	800efac <memcpy+0xc>
 800efaa:	4770      	bx	lr
 800efac:	b510      	push	{r4, lr}
 800efae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efb6:	4291      	cmp	r1, r2
 800efb8:	d1f9      	bne.n	800efae <memcpy+0xe>
 800efba:	bd10      	pop	{r4, pc}

0800efbc <memset>:
 800efbc:	4402      	add	r2, r0
 800efbe:	4603      	mov	r3, r0
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d100      	bne.n	800efc6 <memset+0xa>
 800efc4:	4770      	bx	lr
 800efc6:	f803 1b01 	strb.w	r1, [r3], #1
 800efca:	e7f9      	b.n	800efc0 <memset+0x4>

0800efcc <__cvt>:
 800efcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efd0:	ec55 4b10 	vmov	r4, r5, d0
 800efd4:	2d00      	cmp	r5, #0
 800efd6:	460e      	mov	r6, r1
 800efd8:	4619      	mov	r1, r3
 800efda:	462b      	mov	r3, r5
 800efdc:	bfbb      	ittet	lt
 800efde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800efe2:	461d      	movlt	r5, r3
 800efe4:	2300      	movge	r3, #0
 800efe6:	232d      	movlt	r3, #45	; 0x2d
 800efe8:	700b      	strb	r3, [r1, #0]
 800efea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800eff0:	4691      	mov	r9, r2
 800eff2:	f023 0820 	bic.w	r8, r3, #32
 800eff6:	bfbc      	itt	lt
 800eff8:	4622      	movlt	r2, r4
 800effa:	4614      	movlt	r4, r2
 800effc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f000:	d005      	beq.n	800f00e <__cvt+0x42>
 800f002:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f006:	d100      	bne.n	800f00a <__cvt+0x3e>
 800f008:	3601      	adds	r6, #1
 800f00a:	2102      	movs	r1, #2
 800f00c:	e000      	b.n	800f010 <__cvt+0x44>
 800f00e:	2103      	movs	r1, #3
 800f010:	ab03      	add	r3, sp, #12
 800f012:	9301      	str	r3, [sp, #4]
 800f014:	ab02      	add	r3, sp, #8
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	ec45 4b10 	vmov	d0, r4, r5
 800f01c:	4653      	mov	r3, sl
 800f01e:	4632      	mov	r2, r6
 800f020:	f000 fcea 	bl	800f9f8 <_dtoa_r>
 800f024:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f028:	4607      	mov	r7, r0
 800f02a:	d102      	bne.n	800f032 <__cvt+0x66>
 800f02c:	f019 0f01 	tst.w	r9, #1
 800f030:	d022      	beq.n	800f078 <__cvt+0xac>
 800f032:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f036:	eb07 0906 	add.w	r9, r7, r6
 800f03a:	d110      	bne.n	800f05e <__cvt+0x92>
 800f03c:	783b      	ldrb	r3, [r7, #0]
 800f03e:	2b30      	cmp	r3, #48	; 0x30
 800f040:	d10a      	bne.n	800f058 <__cvt+0x8c>
 800f042:	2200      	movs	r2, #0
 800f044:	2300      	movs	r3, #0
 800f046:	4620      	mov	r0, r4
 800f048:	4629      	mov	r1, r5
 800f04a:	f7f1 fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800f04e:	b918      	cbnz	r0, 800f058 <__cvt+0x8c>
 800f050:	f1c6 0601 	rsb	r6, r6, #1
 800f054:	f8ca 6000 	str.w	r6, [sl]
 800f058:	f8da 3000 	ldr.w	r3, [sl]
 800f05c:	4499      	add	r9, r3
 800f05e:	2200      	movs	r2, #0
 800f060:	2300      	movs	r3, #0
 800f062:	4620      	mov	r0, r4
 800f064:	4629      	mov	r1, r5
 800f066:	f7f1 fd2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f06a:	b108      	cbz	r0, 800f070 <__cvt+0xa4>
 800f06c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f070:	2230      	movs	r2, #48	; 0x30
 800f072:	9b03      	ldr	r3, [sp, #12]
 800f074:	454b      	cmp	r3, r9
 800f076:	d307      	bcc.n	800f088 <__cvt+0xbc>
 800f078:	9b03      	ldr	r3, [sp, #12]
 800f07a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f07c:	1bdb      	subs	r3, r3, r7
 800f07e:	4638      	mov	r0, r7
 800f080:	6013      	str	r3, [r2, #0]
 800f082:	b004      	add	sp, #16
 800f084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f088:	1c59      	adds	r1, r3, #1
 800f08a:	9103      	str	r1, [sp, #12]
 800f08c:	701a      	strb	r2, [r3, #0]
 800f08e:	e7f0      	b.n	800f072 <__cvt+0xa6>

0800f090 <__exponent>:
 800f090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f092:	4603      	mov	r3, r0
 800f094:	2900      	cmp	r1, #0
 800f096:	bfb8      	it	lt
 800f098:	4249      	neglt	r1, r1
 800f09a:	f803 2b02 	strb.w	r2, [r3], #2
 800f09e:	bfb4      	ite	lt
 800f0a0:	222d      	movlt	r2, #45	; 0x2d
 800f0a2:	222b      	movge	r2, #43	; 0x2b
 800f0a4:	2909      	cmp	r1, #9
 800f0a6:	7042      	strb	r2, [r0, #1]
 800f0a8:	dd2a      	ble.n	800f100 <__exponent+0x70>
 800f0aa:	f10d 0407 	add.w	r4, sp, #7
 800f0ae:	46a4      	mov	ip, r4
 800f0b0:	270a      	movs	r7, #10
 800f0b2:	46a6      	mov	lr, r4
 800f0b4:	460a      	mov	r2, r1
 800f0b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800f0ba:	fb07 1516 	mls	r5, r7, r6, r1
 800f0be:	3530      	adds	r5, #48	; 0x30
 800f0c0:	2a63      	cmp	r2, #99	; 0x63
 800f0c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800f0c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f0ca:	4631      	mov	r1, r6
 800f0cc:	dcf1      	bgt.n	800f0b2 <__exponent+0x22>
 800f0ce:	3130      	adds	r1, #48	; 0x30
 800f0d0:	f1ae 0502 	sub.w	r5, lr, #2
 800f0d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f0d8:	1c44      	adds	r4, r0, #1
 800f0da:	4629      	mov	r1, r5
 800f0dc:	4561      	cmp	r1, ip
 800f0de:	d30a      	bcc.n	800f0f6 <__exponent+0x66>
 800f0e0:	f10d 0209 	add.w	r2, sp, #9
 800f0e4:	eba2 020e 	sub.w	r2, r2, lr
 800f0e8:	4565      	cmp	r5, ip
 800f0ea:	bf88      	it	hi
 800f0ec:	2200      	movhi	r2, #0
 800f0ee:	4413      	add	r3, r2
 800f0f0:	1a18      	subs	r0, r3, r0
 800f0f2:	b003      	add	sp, #12
 800f0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f0fe:	e7ed      	b.n	800f0dc <__exponent+0x4c>
 800f100:	2330      	movs	r3, #48	; 0x30
 800f102:	3130      	adds	r1, #48	; 0x30
 800f104:	7083      	strb	r3, [r0, #2]
 800f106:	70c1      	strb	r1, [r0, #3]
 800f108:	1d03      	adds	r3, r0, #4
 800f10a:	e7f1      	b.n	800f0f0 <__exponent+0x60>

0800f10c <_printf_float>:
 800f10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f110:	ed2d 8b02 	vpush	{d8}
 800f114:	b08d      	sub	sp, #52	; 0x34
 800f116:	460c      	mov	r4, r1
 800f118:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f11c:	4616      	mov	r6, r2
 800f11e:	461f      	mov	r7, r3
 800f120:	4605      	mov	r5, r0
 800f122:	f001 fa57 	bl	80105d4 <_localeconv_r>
 800f126:	f8d0 a000 	ldr.w	sl, [r0]
 800f12a:	4650      	mov	r0, sl
 800f12c:	f7f1 f850 	bl	80001d0 <strlen>
 800f130:	2300      	movs	r3, #0
 800f132:	930a      	str	r3, [sp, #40]	; 0x28
 800f134:	6823      	ldr	r3, [r4, #0]
 800f136:	9305      	str	r3, [sp, #20]
 800f138:	f8d8 3000 	ldr.w	r3, [r8]
 800f13c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f140:	3307      	adds	r3, #7
 800f142:	f023 0307 	bic.w	r3, r3, #7
 800f146:	f103 0208 	add.w	r2, r3, #8
 800f14a:	f8c8 2000 	str.w	r2, [r8]
 800f14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f152:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f156:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f15a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f15e:	9307      	str	r3, [sp, #28]
 800f160:	f8cd 8018 	str.w	r8, [sp, #24]
 800f164:	ee08 0a10 	vmov	s16, r0
 800f168:	4b9f      	ldr	r3, [pc, #636]	; (800f3e8 <_printf_float+0x2dc>)
 800f16a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f16e:	f04f 32ff 	mov.w	r2, #4294967295
 800f172:	f7f1 fcdb 	bl	8000b2c <__aeabi_dcmpun>
 800f176:	bb88      	cbnz	r0, 800f1dc <_printf_float+0xd0>
 800f178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f17c:	4b9a      	ldr	r3, [pc, #616]	; (800f3e8 <_printf_float+0x2dc>)
 800f17e:	f04f 32ff 	mov.w	r2, #4294967295
 800f182:	f7f1 fcb5 	bl	8000af0 <__aeabi_dcmple>
 800f186:	bb48      	cbnz	r0, 800f1dc <_printf_float+0xd0>
 800f188:	2200      	movs	r2, #0
 800f18a:	2300      	movs	r3, #0
 800f18c:	4640      	mov	r0, r8
 800f18e:	4649      	mov	r1, r9
 800f190:	f7f1 fca4 	bl	8000adc <__aeabi_dcmplt>
 800f194:	b110      	cbz	r0, 800f19c <_printf_float+0x90>
 800f196:	232d      	movs	r3, #45	; 0x2d
 800f198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f19c:	4b93      	ldr	r3, [pc, #588]	; (800f3ec <_printf_float+0x2e0>)
 800f19e:	4894      	ldr	r0, [pc, #592]	; (800f3f0 <_printf_float+0x2e4>)
 800f1a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f1a4:	bf94      	ite	ls
 800f1a6:	4698      	movls	r8, r3
 800f1a8:	4680      	movhi	r8, r0
 800f1aa:	2303      	movs	r3, #3
 800f1ac:	6123      	str	r3, [r4, #16]
 800f1ae:	9b05      	ldr	r3, [sp, #20]
 800f1b0:	f023 0204 	bic.w	r2, r3, #4
 800f1b4:	6022      	str	r2, [r4, #0]
 800f1b6:	f04f 0900 	mov.w	r9, #0
 800f1ba:	9700      	str	r7, [sp, #0]
 800f1bc:	4633      	mov	r3, r6
 800f1be:	aa0b      	add	r2, sp, #44	; 0x2c
 800f1c0:	4621      	mov	r1, r4
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	f000 f9d8 	bl	800f578 <_printf_common>
 800f1c8:	3001      	adds	r0, #1
 800f1ca:	f040 8090 	bne.w	800f2ee <_printf_float+0x1e2>
 800f1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d2:	b00d      	add	sp, #52	; 0x34
 800f1d4:	ecbd 8b02 	vpop	{d8}
 800f1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1dc:	4642      	mov	r2, r8
 800f1de:	464b      	mov	r3, r9
 800f1e0:	4640      	mov	r0, r8
 800f1e2:	4649      	mov	r1, r9
 800f1e4:	f7f1 fca2 	bl	8000b2c <__aeabi_dcmpun>
 800f1e8:	b140      	cbz	r0, 800f1fc <_printf_float+0xf0>
 800f1ea:	464b      	mov	r3, r9
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	bfbc      	itt	lt
 800f1f0:	232d      	movlt	r3, #45	; 0x2d
 800f1f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f1f6:	487f      	ldr	r0, [pc, #508]	; (800f3f4 <_printf_float+0x2e8>)
 800f1f8:	4b7f      	ldr	r3, [pc, #508]	; (800f3f8 <_printf_float+0x2ec>)
 800f1fa:	e7d1      	b.n	800f1a0 <_printf_float+0x94>
 800f1fc:	6863      	ldr	r3, [r4, #4]
 800f1fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f202:	9206      	str	r2, [sp, #24]
 800f204:	1c5a      	adds	r2, r3, #1
 800f206:	d13f      	bne.n	800f288 <_printf_float+0x17c>
 800f208:	2306      	movs	r3, #6
 800f20a:	6063      	str	r3, [r4, #4]
 800f20c:	9b05      	ldr	r3, [sp, #20]
 800f20e:	6861      	ldr	r1, [r4, #4]
 800f210:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f214:	2300      	movs	r3, #0
 800f216:	9303      	str	r3, [sp, #12]
 800f218:	ab0a      	add	r3, sp, #40	; 0x28
 800f21a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f21e:	ab09      	add	r3, sp, #36	; 0x24
 800f220:	ec49 8b10 	vmov	d0, r8, r9
 800f224:	9300      	str	r3, [sp, #0]
 800f226:	6022      	str	r2, [r4, #0]
 800f228:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f22c:	4628      	mov	r0, r5
 800f22e:	f7ff fecd 	bl	800efcc <__cvt>
 800f232:	9b06      	ldr	r3, [sp, #24]
 800f234:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f236:	2b47      	cmp	r3, #71	; 0x47
 800f238:	4680      	mov	r8, r0
 800f23a:	d108      	bne.n	800f24e <_printf_float+0x142>
 800f23c:	1cc8      	adds	r0, r1, #3
 800f23e:	db02      	blt.n	800f246 <_printf_float+0x13a>
 800f240:	6863      	ldr	r3, [r4, #4]
 800f242:	4299      	cmp	r1, r3
 800f244:	dd41      	ble.n	800f2ca <_printf_float+0x1be>
 800f246:	f1ab 0b02 	sub.w	fp, fp, #2
 800f24a:	fa5f fb8b 	uxtb.w	fp, fp
 800f24e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f252:	d820      	bhi.n	800f296 <_printf_float+0x18a>
 800f254:	3901      	subs	r1, #1
 800f256:	465a      	mov	r2, fp
 800f258:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f25c:	9109      	str	r1, [sp, #36]	; 0x24
 800f25e:	f7ff ff17 	bl	800f090 <__exponent>
 800f262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f264:	1813      	adds	r3, r2, r0
 800f266:	2a01      	cmp	r2, #1
 800f268:	4681      	mov	r9, r0
 800f26a:	6123      	str	r3, [r4, #16]
 800f26c:	dc02      	bgt.n	800f274 <_printf_float+0x168>
 800f26e:	6822      	ldr	r2, [r4, #0]
 800f270:	07d2      	lsls	r2, r2, #31
 800f272:	d501      	bpl.n	800f278 <_printf_float+0x16c>
 800f274:	3301      	adds	r3, #1
 800f276:	6123      	str	r3, [r4, #16]
 800f278:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d09c      	beq.n	800f1ba <_printf_float+0xae>
 800f280:	232d      	movs	r3, #45	; 0x2d
 800f282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f286:	e798      	b.n	800f1ba <_printf_float+0xae>
 800f288:	9a06      	ldr	r2, [sp, #24]
 800f28a:	2a47      	cmp	r2, #71	; 0x47
 800f28c:	d1be      	bne.n	800f20c <_printf_float+0x100>
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d1bc      	bne.n	800f20c <_printf_float+0x100>
 800f292:	2301      	movs	r3, #1
 800f294:	e7b9      	b.n	800f20a <_printf_float+0xfe>
 800f296:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f29a:	d118      	bne.n	800f2ce <_printf_float+0x1c2>
 800f29c:	2900      	cmp	r1, #0
 800f29e:	6863      	ldr	r3, [r4, #4]
 800f2a0:	dd0b      	ble.n	800f2ba <_printf_float+0x1ae>
 800f2a2:	6121      	str	r1, [r4, #16]
 800f2a4:	b913      	cbnz	r3, 800f2ac <_printf_float+0x1a0>
 800f2a6:	6822      	ldr	r2, [r4, #0]
 800f2a8:	07d0      	lsls	r0, r2, #31
 800f2aa:	d502      	bpl.n	800f2b2 <_printf_float+0x1a6>
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	440b      	add	r3, r1
 800f2b0:	6123      	str	r3, [r4, #16]
 800f2b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800f2b4:	f04f 0900 	mov.w	r9, #0
 800f2b8:	e7de      	b.n	800f278 <_printf_float+0x16c>
 800f2ba:	b913      	cbnz	r3, 800f2c2 <_printf_float+0x1b6>
 800f2bc:	6822      	ldr	r2, [r4, #0]
 800f2be:	07d2      	lsls	r2, r2, #31
 800f2c0:	d501      	bpl.n	800f2c6 <_printf_float+0x1ba>
 800f2c2:	3302      	adds	r3, #2
 800f2c4:	e7f4      	b.n	800f2b0 <_printf_float+0x1a4>
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	e7f2      	b.n	800f2b0 <_printf_float+0x1a4>
 800f2ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2d0:	4299      	cmp	r1, r3
 800f2d2:	db05      	blt.n	800f2e0 <_printf_float+0x1d4>
 800f2d4:	6823      	ldr	r3, [r4, #0]
 800f2d6:	6121      	str	r1, [r4, #16]
 800f2d8:	07d8      	lsls	r0, r3, #31
 800f2da:	d5ea      	bpl.n	800f2b2 <_printf_float+0x1a6>
 800f2dc:	1c4b      	adds	r3, r1, #1
 800f2de:	e7e7      	b.n	800f2b0 <_printf_float+0x1a4>
 800f2e0:	2900      	cmp	r1, #0
 800f2e2:	bfd4      	ite	le
 800f2e4:	f1c1 0202 	rsble	r2, r1, #2
 800f2e8:	2201      	movgt	r2, #1
 800f2ea:	4413      	add	r3, r2
 800f2ec:	e7e0      	b.n	800f2b0 <_printf_float+0x1a4>
 800f2ee:	6823      	ldr	r3, [r4, #0]
 800f2f0:	055a      	lsls	r2, r3, #21
 800f2f2:	d407      	bmi.n	800f304 <_printf_float+0x1f8>
 800f2f4:	6923      	ldr	r3, [r4, #16]
 800f2f6:	4642      	mov	r2, r8
 800f2f8:	4631      	mov	r1, r6
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	47b8      	blx	r7
 800f2fe:	3001      	adds	r0, #1
 800f300:	d12c      	bne.n	800f35c <_printf_float+0x250>
 800f302:	e764      	b.n	800f1ce <_printf_float+0xc2>
 800f304:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f308:	f240 80e0 	bls.w	800f4cc <_printf_float+0x3c0>
 800f30c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f310:	2200      	movs	r2, #0
 800f312:	2300      	movs	r3, #0
 800f314:	f7f1 fbd8 	bl	8000ac8 <__aeabi_dcmpeq>
 800f318:	2800      	cmp	r0, #0
 800f31a:	d034      	beq.n	800f386 <_printf_float+0x27a>
 800f31c:	4a37      	ldr	r2, [pc, #220]	; (800f3fc <_printf_float+0x2f0>)
 800f31e:	2301      	movs	r3, #1
 800f320:	4631      	mov	r1, r6
 800f322:	4628      	mov	r0, r5
 800f324:	47b8      	blx	r7
 800f326:	3001      	adds	r0, #1
 800f328:	f43f af51 	beq.w	800f1ce <_printf_float+0xc2>
 800f32c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f330:	429a      	cmp	r2, r3
 800f332:	db02      	blt.n	800f33a <_printf_float+0x22e>
 800f334:	6823      	ldr	r3, [r4, #0]
 800f336:	07d8      	lsls	r0, r3, #31
 800f338:	d510      	bpl.n	800f35c <_printf_float+0x250>
 800f33a:	ee18 3a10 	vmov	r3, s16
 800f33e:	4652      	mov	r2, sl
 800f340:	4631      	mov	r1, r6
 800f342:	4628      	mov	r0, r5
 800f344:	47b8      	blx	r7
 800f346:	3001      	adds	r0, #1
 800f348:	f43f af41 	beq.w	800f1ce <_printf_float+0xc2>
 800f34c:	f04f 0800 	mov.w	r8, #0
 800f350:	f104 091a 	add.w	r9, r4, #26
 800f354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f356:	3b01      	subs	r3, #1
 800f358:	4543      	cmp	r3, r8
 800f35a:	dc09      	bgt.n	800f370 <_printf_float+0x264>
 800f35c:	6823      	ldr	r3, [r4, #0]
 800f35e:	079b      	lsls	r3, r3, #30
 800f360:	f100 8105 	bmi.w	800f56e <_printf_float+0x462>
 800f364:	68e0      	ldr	r0, [r4, #12]
 800f366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f368:	4298      	cmp	r0, r3
 800f36a:	bfb8      	it	lt
 800f36c:	4618      	movlt	r0, r3
 800f36e:	e730      	b.n	800f1d2 <_printf_float+0xc6>
 800f370:	2301      	movs	r3, #1
 800f372:	464a      	mov	r2, r9
 800f374:	4631      	mov	r1, r6
 800f376:	4628      	mov	r0, r5
 800f378:	47b8      	blx	r7
 800f37a:	3001      	adds	r0, #1
 800f37c:	f43f af27 	beq.w	800f1ce <_printf_float+0xc2>
 800f380:	f108 0801 	add.w	r8, r8, #1
 800f384:	e7e6      	b.n	800f354 <_printf_float+0x248>
 800f386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f388:	2b00      	cmp	r3, #0
 800f38a:	dc39      	bgt.n	800f400 <_printf_float+0x2f4>
 800f38c:	4a1b      	ldr	r2, [pc, #108]	; (800f3fc <_printf_float+0x2f0>)
 800f38e:	2301      	movs	r3, #1
 800f390:	4631      	mov	r1, r6
 800f392:	4628      	mov	r0, r5
 800f394:	47b8      	blx	r7
 800f396:	3001      	adds	r0, #1
 800f398:	f43f af19 	beq.w	800f1ce <_printf_float+0xc2>
 800f39c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f3a0:	4313      	orrs	r3, r2
 800f3a2:	d102      	bne.n	800f3aa <_printf_float+0x29e>
 800f3a4:	6823      	ldr	r3, [r4, #0]
 800f3a6:	07d9      	lsls	r1, r3, #31
 800f3a8:	d5d8      	bpl.n	800f35c <_printf_float+0x250>
 800f3aa:	ee18 3a10 	vmov	r3, s16
 800f3ae:	4652      	mov	r2, sl
 800f3b0:	4631      	mov	r1, r6
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	47b8      	blx	r7
 800f3b6:	3001      	adds	r0, #1
 800f3b8:	f43f af09 	beq.w	800f1ce <_printf_float+0xc2>
 800f3bc:	f04f 0900 	mov.w	r9, #0
 800f3c0:	f104 0a1a 	add.w	sl, r4, #26
 800f3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3c6:	425b      	negs	r3, r3
 800f3c8:	454b      	cmp	r3, r9
 800f3ca:	dc01      	bgt.n	800f3d0 <_printf_float+0x2c4>
 800f3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3ce:	e792      	b.n	800f2f6 <_printf_float+0x1ea>
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	4652      	mov	r2, sl
 800f3d4:	4631      	mov	r1, r6
 800f3d6:	4628      	mov	r0, r5
 800f3d8:	47b8      	blx	r7
 800f3da:	3001      	adds	r0, #1
 800f3dc:	f43f aef7 	beq.w	800f1ce <_printf_float+0xc2>
 800f3e0:	f109 0901 	add.w	r9, r9, #1
 800f3e4:	e7ee      	b.n	800f3c4 <_printf_float+0x2b8>
 800f3e6:	bf00      	nop
 800f3e8:	7fefffff 	.word	0x7fefffff
 800f3ec:	08014524 	.word	0x08014524
 800f3f0:	08014528 	.word	0x08014528
 800f3f4:	08014530 	.word	0x08014530
 800f3f8:	0801452c 	.word	0x0801452c
 800f3fc:	08014534 	.word	0x08014534
 800f400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f402:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f404:	429a      	cmp	r2, r3
 800f406:	bfa8      	it	ge
 800f408:	461a      	movge	r2, r3
 800f40a:	2a00      	cmp	r2, #0
 800f40c:	4691      	mov	r9, r2
 800f40e:	dc37      	bgt.n	800f480 <_printf_float+0x374>
 800f410:	f04f 0b00 	mov.w	fp, #0
 800f414:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f418:	f104 021a 	add.w	r2, r4, #26
 800f41c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f41e:	9305      	str	r3, [sp, #20]
 800f420:	eba3 0309 	sub.w	r3, r3, r9
 800f424:	455b      	cmp	r3, fp
 800f426:	dc33      	bgt.n	800f490 <_printf_float+0x384>
 800f428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f42c:	429a      	cmp	r2, r3
 800f42e:	db3b      	blt.n	800f4a8 <_printf_float+0x39c>
 800f430:	6823      	ldr	r3, [r4, #0]
 800f432:	07da      	lsls	r2, r3, #31
 800f434:	d438      	bmi.n	800f4a8 <_printf_float+0x39c>
 800f436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f438:	9a05      	ldr	r2, [sp, #20]
 800f43a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f43c:	1a9a      	subs	r2, r3, r2
 800f43e:	eba3 0901 	sub.w	r9, r3, r1
 800f442:	4591      	cmp	r9, r2
 800f444:	bfa8      	it	ge
 800f446:	4691      	movge	r9, r2
 800f448:	f1b9 0f00 	cmp.w	r9, #0
 800f44c:	dc35      	bgt.n	800f4ba <_printf_float+0x3ae>
 800f44e:	f04f 0800 	mov.w	r8, #0
 800f452:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f456:	f104 0a1a 	add.w	sl, r4, #26
 800f45a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f45e:	1a9b      	subs	r3, r3, r2
 800f460:	eba3 0309 	sub.w	r3, r3, r9
 800f464:	4543      	cmp	r3, r8
 800f466:	f77f af79 	ble.w	800f35c <_printf_float+0x250>
 800f46a:	2301      	movs	r3, #1
 800f46c:	4652      	mov	r2, sl
 800f46e:	4631      	mov	r1, r6
 800f470:	4628      	mov	r0, r5
 800f472:	47b8      	blx	r7
 800f474:	3001      	adds	r0, #1
 800f476:	f43f aeaa 	beq.w	800f1ce <_printf_float+0xc2>
 800f47a:	f108 0801 	add.w	r8, r8, #1
 800f47e:	e7ec      	b.n	800f45a <_printf_float+0x34e>
 800f480:	4613      	mov	r3, r2
 800f482:	4631      	mov	r1, r6
 800f484:	4642      	mov	r2, r8
 800f486:	4628      	mov	r0, r5
 800f488:	47b8      	blx	r7
 800f48a:	3001      	adds	r0, #1
 800f48c:	d1c0      	bne.n	800f410 <_printf_float+0x304>
 800f48e:	e69e      	b.n	800f1ce <_printf_float+0xc2>
 800f490:	2301      	movs	r3, #1
 800f492:	4631      	mov	r1, r6
 800f494:	4628      	mov	r0, r5
 800f496:	9205      	str	r2, [sp, #20]
 800f498:	47b8      	blx	r7
 800f49a:	3001      	adds	r0, #1
 800f49c:	f43f ae97 	beq.w	800f1ce <_printf_float+0xc2>
 800f4a0:	9a05      	ldr	r2, [sp, #20]
 800f4a2:	f10b 0b01 	add.w	fp, fp, #1
 800f4a6:	e7b9      	b.n	800f41c <_printf_float+0x310>
 800f4a8:	ee18 3a10 	vmov	r3, s16
 800f4ac:	4652      	mov	r2, sl
 800f4ae:	4631      	mov	r1, r6
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	47b8      	blx	r7
 800f4b4:	3001      	adds	r0, #1
 800f4b6:	d1be      	bne.n	800f436 <_printf_float+0x32a>
 800f4b8:	e689      	b.n	800f1ce <_printf_float+0xc2>
 800f4ba:	9a05      	ldr	r2, [sp, #20]
 800f4bc:	464b      	mov	r3, r9
 800f4be:	4442      	add	r2, r8
 800f4c0:	4631      	mov	r1, r6
 800f4c2:	4628      	mov	r0, r5
 800f4c4:	47b8      	blx	r7
 800f4c6:	3001      	adds	r0, #1
 800f4c8:	d1c1      	bne.n	800f44e <_printf_float+0x342>
 800f4ca:	e680      	b.n	800f1ce <_printf_float+0xc2>
 800f4cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4ce:	2a01      	cmp	r2, #1
 800f4d0:	dc01      	bgt.n	800f4d6 <_printf_float+0x3ca>
 800f4d2:	07db      	lsls	r3, r3, #31
 800f4d4:	d538      	bpl.n	800f548 <_printf_float+0x43c>
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	4642      	mov	r2, r8
 800f4da:	4631      	mov	r1, r6
 800f4dc:	4628      	mov	r0, r5
 800f4de:	47b8      	blx	r7
 800f4e0:	3001      	adds	r0, #1
 800f4e2:	f43f ae74 	beq.w	800f1ce <_printf_float+0xc2>
 800f4e6:	ee18 3a10 	vmov	r3, s16
 800f4ea:	4652      	mov	r2, sl
 800f4ec:	4631      	mov	r1, r6
 800f4ee:	4628      	mov	r0, r5
 800f4f0:	47b8      	blx	r7
 800f4f2:	3001      	adds	r0, #1
 800f4f4:	f43f ae6b 	beq.w	800f1ce <_printf_float+0xc2>
 800f4f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	2300      	movs	r3, #0
 800f500:	f7f1 fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 800f504:	b9d8      	cbnz	r0, 800f53e <_printf_float+0x432>
 800f506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f508:	f108 0201 	add.w	r2, r8, #1
 800f50c:	3b01      	subs	r3, #1
 800f50e:	4631      	mov	r1, r6
 800f510:	4628      	mov	r0, r5
 800f512:	47b8      	blx	r7
 800f514:	3001      	adds	r0, #1
 800f516:	d10e      	bne.n	800f536 <_printf_float+0x42a>
 800f518:	e659      	b.n	800f1ce <_printf_float+0xc2>
 800f51a:	2301      	movs	r3, #1
 800f51c:	4652      	mov	r2, sl
 800f51e:	4631      	mov	r1, r6
 800f520:	4628      	mov	r0, r5
 800f522:	47b8      	blx	r7
 800f524:	3001      	adds	r0, #1
 800f526:	f43f ae52 	beq.w	800f1ce <_printf_float+0xc2>
 800f52a:	f108 0801 	add.w	r8, r8, #1
 800f52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f530:	3b01      	subs	r3, #1
 800f532:	4543      	cmp	r3, r8
 800f534:	dcf1      	bgt.n	800f51a <_printf_float+0x40e>
 800f536:	464b      	mov	r3, r9
 800f538:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f53c:	e6dc      	b.n	800f2f8 <_printf_float+0x1ec>
 800f53e:	f04f 0800 	mov.w	r8, #0
 800f542:	f104 0a1a 	add.w	sl, r4, #26
 800f546:	e7f2      	b.n	800f52e <_printf_float+0x422>
 800f548:	2301      	movs	r3, #1
 800f54a:	4642      	mov	r2, r8
 800f54c:	e7df      	b.n	800f50e <_printf_float+0x402>
 800f54e:	2301      	movs	r3, #1
 800f550:	464a      	mov	r2, r9
 800f552:	4631      	mov	r1, r6
 800f554:	4628      	mov	r0, r5
 800f556:	47b8      	blx	r7
 800f558:	3001      	adds	r0, #1
 800f55a:	f43f ae38 	beq.w	800f1ce <_printf_float+0xc2>
 800f55e:	f108 0801 	add.w	r8, r8, #1
 800f562:	68e3      	ldr	r3, [r4, #12]
 800f564:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f566:	1a5b      	subs	r3, r3, r1
 800f568:	4543      	cmp	r3, r8
 800f56a:	dcf0      	bgt.n	800f54e <_printf_float+0x442>
 800f56c:	e6fa      	b.n	800f364 <_printf_float+0x258>
 800f56e:	f04f 0800 	mov.w	r8, #0
 800f572:	f104 0919 	add.w	r9, r4, #25
 800f576:	e7f4      	b.n	800f562 <_printf_float+0x456>

0800f578 <_printf_common>:
 800f578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f57c:	4616      	mov	r6, r2
 800f57e:	4699      	mov	r9, r3
 800f580:	688a      	ldr	r2, [r1, #8]
 800f582:	690b      	ldr	r3, [r1, #16]
 800f584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f588:	4293      	cmp	r3, r2
 800f58a:	bfb8      	it	lt
 800f58c:	4613      	movlt	r3, r2
 800f58e:	6033      	str	r3, [r6, #0]
 800f590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f594:	4607      	mov	r7, r0
 800f596:	460c      	mov	r4, r1
 800f598:	b10a      	cbz	r2, 800f59e <_printf_common+0x26>
 800f59a:	3301      	adds	r3, #1
 800f59c:	6033      	str	r3, [r6, #0]
 800f59e:	6823      	ldr	r3, [r4, #0]
 800f5a0:	0699      	lsls	r1, r3, #26
 800f5a2:	bf42      	ittt	mi
 800f5a4:	6833      	ldrmi	r3, [r6, #0]
 800f5a6:	3302      	addmi	r3, #2
 800f5a8:	6033      	strmi	r3, [r6, #0]
 800f5aa:	6825      	ldr	r5, [r4, #0]
 800f5ac:	f015 0506 	ands.w	r5, r5, #6
 800f5b0:	d106      	bne.n	800f5c0 <_printf_common+0x48>
 800f5b2:	f104 0a19 	add.w	sl, r4, #25
 800f5b6:	68e3      	ldr	r3, [r4, #12]
 800f5b8:	6832      	ldr	r2, [r6, #0]
 800f5ba:	1a9b      	subs	r3, r3, r2
 800f5bc:	42ab      	cmp	r3, r5
 800f5be:	dc26      	bgt.n	800f60e <_printf_common+0x96>
 800f5c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f5c4:	1e13      	subs	r3, r2, #0
 800f5c6:	6822      	ldr	r2, [r4, #0]
 800f5c8:	bf18      	it	ne
 800f5ca:	2301      	movne	r3, #1
 800f5cc:	0692      	lsls	r2, r2, #26
 800f5ce:	d42b      	bmi.n	800f628 <_printf_common+0xb0>
 800f5d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f5d4:	4649      	mov	r1, r9
 800f5d6:	4638      	mov	r0, r7
 800f5d8:	47c0      	blx	r8
 800f5da:	3001      	adds	r0, #1
 800f5dc:	d01e      	beq.n	800f61c <_printf_common+0xa4>
 800f5de:	6823      	ldr	r3, [r4, #0]
 800f5e0:	68e5      	ldr	r5, [r4, #12]
 800f5e2:	6832      	ldr	r2, [r6, #0]
 800f5e4:	f003 0306 	and.w	r3, r3, #6
 800f5e8:	2b04      	cmp	r3, #4
 800f5ea:	bf08      	it	eq
 800f5ec:	1aad      	subeq	r5, r5, r2
 800f5ee:	68a3      	ldr	r3, [r4, #8]
 800f5f0:	6922      	ldr	r2, [r4, #16]
 800f5f2:	bf0c      	ite	eq
 800f5f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f5f8:	2500      	movne	r5, #0
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	bfc4      	itt	gt
 800f5fe:	1a9b      	subgt	r3, r3, r2
 800f600:	18ed      	addgt	r5, r5, r3
 800f602:	2600      	movs	r6, #0
 800f604:	341a      	adds	r4, #26
 800f606:	42b5      	cmp	r5, r6
 800f608:	d11a      	bne.n	800f640 <_printf_common+0xc8>
 800f60a:	2000      	movs	r0, #0
 800f60c:	e008      	b.n	800f620 <_printf_common+0xa8>
 800f60e:	2301      	movs	r3, #1
 800f610:	4652      	mov	r2, sl
 800f612:	4649      	mov	r1, r9
 800f614:	4638      	mov	r0, r7
 800f616:	47c0      	blx	r8
 800f618:	3001      	adds	r0, #1
 800f61a:	d103      	bne.n	800f624 <_printf_common+0xac>
 800f61c:	f04f 30ff 	mov.w	r0, #4294967295
 800f620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f624:	3501      	adds	r5, #1
 800f626:	e7c6      	b.n	800f5b6 <_printf_common+0x3e>
 800f628:	18e1      	adds	r1, r4, r3
 800f62a:	1c5a      	adds	r2, r3, #1
 800f62c:	2030      	movs	r0, #48	; 0x30
 800f62e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f632:	4422      	add	r2, r4
 800f634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f63c:	3302      	adds	r3, #2
 800f63e:	e7c7      	b.n	800f5d0 <_printf_common+0x58>
 800f640:	2301      	movs	r3, #1
 800f642:	4622      	mov	r2, r4
 800f644:	4649      	mov	r1, r9
 800f646:	4638      	mov	r0, r7
 800f648:	47c0      	blx	r8
 800f64a:	3001      	adds	r0, #1
 800f64c:	d0e6      	beq.n	800f61c <_printf_common+0xa4>
 800f64e:	3601      	adds	r6, #1
 800f650:	e7d9      	b.n	800f606 <_printf_common+0x8e>
	...

0800f654 <_printf_i>:
 800f654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f658:	7e0f      	ldrb	r7, [r1, #24]
 800f65a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f65c:	2f78      	cmp	r7, #120	; 0x78
 800f65e:	4691      	mov	r9, r2
 800f660:	4680      	mov	r8, r0
 800f662:	460c      	mov	r4, r1
 800f664:	469a      	mov	sl, r3
 800f666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f66a:	d807      	bhi.n	800f67c <_printf_i+0x28>
 800f66c:	2f62      	cmp	r7, #98	; 0x62
 800f66e:	d80a      	bhi.n	800f686 <_printf_i+0x32>
 800f670:	2f00      	cmp	r7, #0
 800f672:	f000 80d8 	beq.w	800f826 <_printf_i+0x1d2>
 800f676:	2f58      	cmp	r7, #88	; 0x58
 800f678:	f000 80a3 	beq.w	800f7c2 <_printf_i+0x16e>
 800f67c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f684:	e03a      	b.n	800f6fc <_printf_i+0xa8>
 800f686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f68a:	2b15      	cmp	r3, #21
 800f68c:	d8f6      	bhi.n	800f67c <_printf_i+0x28>
 800f68e:	a101      	add	r1, pc, #4	; (adr r1, 800f694 <_printf_i+0x40>)
 800f690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f694:	0800f6ed 	.word	0x0800f6ed
 800f698:	0800f701 	.word	0x0800f701
 800f69c:	0800f67d 	.word	0x0800f67d
 800f6a0:	0800f67d 	.word	0x0800f67d
 800f6a4:	0800f67d 	.word	0x0800f67d
 800f6a8:	0800f67d 	.word	0x0800f67d
 800f6ac:	0800f701 	.word	0x0800f701
 800f6b0:	0800f67d 	.word	0x0800f67d
 800f6b4:	0800f67d 	.word	0x0800f67d
 800f6b8:	0800f67d 	.word	0x0800f67d
 800f6bc:	0800f67d 	.word	0x0800f67d
 800f6c0:	0800f80d 	.word	0x0800f80d
 800f6c4:	0800f731 	.word	0x0800f731
 800f6c8:	0800f7ef 	.word	0x0800f7ef
 800f6cc:	0800f67d 	.word	0x0800f67d
 800f6d0:	0800f67d 	.word	0x0800f67d
 800f6d4:	0800f82f 	.word	0x0800f82f
 800f6d8:	0800f67d 	.word	0x0800f67d
 800f6dc:	0800f731 	.word	0x0800f731
 800f6e0:	0800f67d 	.word	0x0800f67d
 800f6e4:	0800f67d 	.word	0x0800f67d
 800f6e8:	0800f7f7 	.word	0x0800f7f7
 800f6ec:	682b      	ldr	r3, [r5, #0]
 800f6ee:	1d1a      	adds	r2, r3, #4
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	602a      	str	r2, [r5, #0]
 800f6f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	e0a3      	b.n	800f848 <_printf_i+0x1f4>
 800f700:	6820      	ldr	r0, [r4, #0]
 800f702:	6829      	ldr	r1, [r5, #0]
 800f704:	0606      	lsls	r6, r0, #24
 800f706:	f101 0304 	add.w	r3, r1, #4
 800f70a:	d50a      	bpl.n	800f722 <_printf_i+0xce>
 800f70c:	680e      	ldr	r6, [r1, #0]
 800f70e:	602b      	str	r3, [r5, #0]
 800f710:	2e00      	cmp	r6, #0
 800f712:	da03      	bge.n	800f71c <_printf_i+0xc8>
 800f714:	232d      	movs	r3, #45	; 0x2d
 800f716:	4276      	negs	r6, r6
 800f718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f71c:	485e      	ldr	r0, [pc, #376]	; (800f898 <_printf_i+0x244>)
 800f71e:	230a      	movs	r3, #10
 800f720:	e019      	b.n	800f756 <_printf_i+0x102>
 800f722:	680e      	ldr	r6, [r1, #0]
 800f724:	602b      	str	r3, [r5, #0]
 800f726:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f72a:	bf18      	it	ne
 800f72c:	b236      	sxthne	r6, r6
 800f72e:	e7ef      	b.n	800f710 <_printf_i+0xbc>
 800f730:	682b      	ldr	r3, [r5, #0]
 800f732:	6820      	ldr	r0, [r4, #0]
 800f734:	1d19      	adds	r1, r3, #4
 800f736:	6029      	str	r1, [r5, #0]
 800f738:	0601      	lsls	r1, r0, #24
 800f73a:	d501      	bpl.n	800f740 <_printf_i+0xec>
 800f73c:	681e      	ldr	r6, [r3, #0]
 800f73e:	e002      	b.n	800f746 <_printf_i+0xf2>
 800f740:	0646      	lsls	r6, r0, #25
 800f742:	d5fb      	bpl.n	800f73c <_printf_i+0xe8>
 800f744:	881e      	ldrh	r6, [r3, #0]
 800f746:	4854      	ldr	r0, [pc, #336]	; (800f898 <_printf_i+0x244>)
 800f748:	2f6f      	cmp	r7, #111	; 0x6f
 800f74a:	bf0c      	ite	eq
 800f74c:	2308      	moveq	r3, #8
 800f74e:	230a      	movne	r3, #10
 800f750:	2100      	movs	r1, #0
 800f752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f756:	6865      	ldr	r5, [r4, #4]
 800f758:	60a5      	str	r5, [r4, #8]
 800f75a:	2d00      	cmp	r5, #0
 800f75c:	bfa2      	ittt	ge
 800f75e:	6821      	ldrge	r1, [r4, #0]
 800f760:	f021 0104 	bicge.w	r1, r1, #4
 800f764:	6021      	strge	r1, [r4, #0]
 800f766:	b90e      	cbnz	r6, 800f76c <_printf_i+0x118>
 800f768:	2d00      	cmp	r5, #0
 800f76a:	d04d      	beq.n	800f808 <_printf_i+0x1b4>
 800f76c:	4615      	mov	r5, r2
 800f76e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f772:	fb03 6711 	mls	r7, r3, r1, r6
 800f776:	5dc7      	ldrb	r7, [r0, r7]
 800f778:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f77c:	4637      	mov	r7, r6
 800f77e:	42bb      	cmp	r3, r7
 800f780:	460e      	mov	r6, r1
 800f782:	d9f4      	bls.n	800f76e <_printf_i+0x11a>
 800f784:	2b08      	cmp	r3, #8
 800f786:	d10b      	bne.n	800f7a0 <_printf_i+0x14c>
 800f788:	6823      	ldr	r3, [r4, #0]
 800f78a:	07de      	lsls	r6, r3, #31
 800f78c:	d508      	bpl.n	800f7a0 <_printf_i+0x14c>
 800f78e:	6923      	ldr	r3, [r4, #16]
 800f790:	6861      	ldr	r1, [r4, #4]
 800f792:	4299      	cmp	r1, r3
 800f794:	bfde      	ittt	le
 800f796:	2330      	movle	r3, #48	; 0x30
 800f798:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f79c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f7a0:	1b52      	subs	r2, r2, r5
 800f7a2:	6122      	str	r2, [r4, #16]
 800f7a4:	f8cd a000 	str.w	sl, [sp]
 800f7a8:	464b      	mov	r3, r9
 800f7aa:	aa03      	add	r2, sp, #12
 800f7ac:	4621      	mov	r1, r4
 800f7ae:	4640      	mov	r0, r8
 800f7b0:	f7ff fee2 	bl	800f578 <_printf_common>
 800f7b4:	3001      	adds	r0, #1
 800f7b6:	d14c      	bne.n	800f852 <_printf_i+0x1fe>
 800f7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7bc:	b004      	add	sp, #16
 800f7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7c2:	4835      	ldr	r0, [pc, #212]	; (800f898 <_printf_i+0x244>)
 800f7c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f7c8:	6829      	ldr	r1, [r5, #0]
 800f7ca:	6823      	ldr	r3, [r4, #0]
 800f7cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800f7d0:	6029      	str	r1, [r5, #0]
 800f7d2:	061d      	lsls	r5, r3, #24
 800f7d4:	d514      	bpl.n	800f800 <_printf_i+0x1ac>
 800f7d6:	07df      	lsls	r7, r3, #31
 800f7d8:	bf44      	itt	mi
 800f7da:	f043 0320 	orrmi.w	r3, r3, #32
 800f7de:	6023      	strmi	r3, [r4, #0]
 800f7e0:	b91e      	cbnz	r6, 800f7ea <_printf_i+0x196>
 800f7e2:	6823      	ldr	r3, [r4, #0]
 800f7e4:	f023 0320 	bic.w	r3, r3, #32
 800f7e8:	6023      	str	r3, [r4, #0]
 800f7ea:	2310      	movs	r3, #16
 800f7ec:	e7b0      	b.n	800f750 <_printf_i+0xfc>
 800f7ee:	6823      	ldr	r3, [r4, #0]
 800f7f0:	f043 0320 	orr.w	r3, r3, #32
 800f7f4:	6023      	str	r3, [r4, #0]
 800f7f6:	2378      	movs	r3, #120	; 0x78
 800f7f8:	4828      	ldr	r0, [pc, #160]	; (800f89c <_printf_i+0x248>)
 800f7fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f7fe:	e7e3      	b.n	800f7c8 <_printf_i+0x174>
 800f800:	0659      	lsls	r1, r3, #25
 800f802:	bf48      	it	mi
 800f804:	b2b6      	uxthmi	r6, r6
 800f806:	e7e6      	b.n	800f7d6 <_printf_i+0x182>
 800f808:	4615      	mov	r5, r2
 800f80a:	e7bb      	b.n	800f784 <_printf_i+0x130>
 800f80c:	682b      	ldr	r3, [r5, #0]
 800f80e:	6826      	ldr	r6, [r4, #0]
 800f810:	6961      	ldr	r1, [r4, #20]
 800f812:	1d18      	adds	r0, r3, #4
 800f814:	6028      	str	r0, [r5, #0]
 800f816:	0635      	lsls	r5, r6, #24
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	d501      	bpl.n	800f820 <_printf_i+0x1cc>
 800f81c:	6019      	str	r1, [r3, #0]
 800f81e:	e002      	b.n	800f826 <_printf_i+0x1d2>
 800f820:	0670      	lsls	r0, r6, #25
 800f822:	d5fb      	bpl.n	800f81c <_printf_i+0x1c8>
 800f824:	8019      	strh	r1, [r3, #0]
 800f826:	2300      	movs	r3, #0
 800f828:	6123      	str	r3, [r4, #16]
 800f82a:	4615      	mov	r5, r2
 800f82c:	e7ba      	b.n	800f7a4 <_printf_i+0x150>
 800f82e:	682b      	ldr	r3, [r5, #0]
 800f830:	1d1a      	adds	r2, r3, #4
 800f832:	602a      	str	r2, [r5, #0]
 800f834:	681d      	ldr	r5, [r3, #0]
 800f836:	6862      	ldr	r2, [r4, #4]
 800f838:	2100      	movs	r1, #0
 800f83a:	4628      	mov	r0, r5
 800f83c:	f7f0 fcd0 	bl	80001e0 <memchr>
 800f840:	b108      	cbz	r0, 800f846 <_printf_i+0x1f2>
 800f842:	1b40      	subs	r0, r0, r5
 800f844:	6060      	str	r0, [r4, #4]
 800f846:	6863      	ldr	r3, [r4, #4]
 800f848:	6123      	str	r3, [r4, #16]
 800f84a:	2300      	movs	r3, #0
 800f84c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f850:	e7a8      	b.n	800f7a4 <_printf_i+0x150>
 800f852:	6923      	ldr	r3, [r4, #16]
 800f854:	462a      	mov	r2, r5
 800f856:	4649      	mov	r1, r9
 800f858:	4640      	mov	r0, r8
 800f85a:	47d0      	blx	sl
 800f85c:	3001      	adds	r0, #1
 800f85e:	d0ab      	beq.n	800f7b8 <_printf_i+0x164>
 800f860:	6823      	ldr	r3, [r4, #0]
 800f862:	079b      	lsls	r3, r3, #30
 800f864:	d413      	bmi.n	800f88e <_printf_i+0x23a>
 800f866:	68e0      	ldr	r0, [r4, #12]
 800f868:	9b03      	ldr	r3, [sp, #12]
 800f86a:	4298      	cmp	r0, r3
 800f86c:	bfb8      	it	lt
 800f86e:	4618      	movlt	r0, r3
 800f870:	e7a4      	b.n	800f7bc <_printf_i+0x168>
 800f872:	2301      	movs	r3, #1
 800f874:	4632      	mov	r2, r6
 800f876:	4649      	mov	r1, r9
 800f878:	4640      	mov	r0, r8
 800f87a:	47d0      	blx	sl
 800f87c:	3001      	adds	r0, #1
 800f87e:	d09b      	beq.n	800f7b8 <_printf_i+0x164>
 800f880:	3501      	adds	r5, #1
 800f882:	68e3      	ldr	r3, [r4, #12]
 800f884:	9903      	ldr	r1, [sp, #12]
 800f886:	1a5b      	subs	r3, r3, r1
 800f888:	42ab      	cmp	r3, r5
 800f88a:	dcf2      	bgt.n	800f872 <_printf_i+0x21e>
 800f88c:	e7eb      	b.n	800f866 <_printf_i+0x212>
 800f88e:	2500      	movs	r5, #0
 800f890:	f104 0619 	add.w	r6, r4, #25
 800f894:	e7f5      	b.n	800f882 <_printf_i+0x22e>
 800f896:	bf00      	nop
 800f898:	08014536 	.word	0x08014536
 800f89c:	08014547 	.word	0x08014547

0800f8a0 <siprintf>:
 800f8a0:	b40e      	push	{r1, r2, r3}
 800f8a2:	b500      	push	{lr}
 800f8a4:	b09c      	sub	sp, #112	; 0x70
 800f8a6:	ab1d      	add	r3, sp, #116	; 0x74
 800f8a8:	9002      	str	r0, [sp, #8]
 800f8aa:	9006      	str	r0, [sp, #24]
 800f8ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f8b0:	4809      	ldr	r0, [pc, #36]	; (800f8d8 <siprintf+0x38>)
 800f8b2:	9107      	str	r1, [sp, #28]
 800f8b4:	9104      	str	r1, [sp, #16]
 800f8b6:	4909      	ldr	r1, [pc, #36]	; (800f8dc <siprintf+0x3c>)
 800f8b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8bc:	9105      	str	r1, [sp, #20]
 800f8be:	6800      	ldr	r0, [r0, #0]
 800f8c0:	9301      	str	r3, [sp, #4]
 800f8c2:	a902      	add	r1, sp, #8
 800f8c4:	f001 fb68 	bl	8010f98 <_svfiprintf_r>
 800f8c8:	9b02      	ldr	r3, [sp, #8]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	701a      	strb	r2, [r3, #0]
 800f8ce:	b01c      	add	sp, #112	; 0x70
 800f8d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8d4:	b003      	add	sp, #12
 800f8d6:	4770      	bx	lr
 800f8d8:	2000001c 	.word	0x2000001c
 800f8dc:	ffff0208 	.word	0xffff0208

0800f8e0 <quorem>:
 800f8e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e4:	6903      	ldr	r3, [r0, #16]
 800f8e6:	690c      	ldr	r4, [r1, #16]
 800f8e8:	42a3      	cmp	r3, r4
 800f8ea:	4607      	mov	r7, r0
 800f8ec:	f2c0 8081 	blt.w	800f9f2 <quorem+0x112>
 800f8f0:	3c01      	subs	r4, #1
 800f8f2:	f101 0814 	add.w	r8, r1, #20
 800f8f6:	f100 0514 	add.w	r5, r0, #20
 800f8fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8fe:	9301      	str	r3, [sp, #4]
 800f900:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f908:	3301      	adds	r3, #1
 800f90a:	429a      	cmp	r2, r3
 800f90c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f910:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f914:	fbb2 f6f3 	udiv	r6, r2, r3
 800f918:	d331      	bcc.n	800f97e <quorem+0x9e>
 800f91a:	f04f 0e00 	mov.w	lr, #0
 800f91e:	4640      	mov	r0, r8
 800f920:	46ac      	mov	ip, r5
 800f922:	46f2      	mov	sl, lr
 800f924:	f850 2b04 	ldr.w	r2, [r0], #4
 800f928:	b293      	uxth	r3, r2
 800f92a:	fb06 e303 	mla	r3, r6, r3, lr
 800f92e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f932:	b29b      	uxth	r3, r3
 800f934:	ebaa 0303 	sub.w	r3, sl, r3
 800f938:	f8dc a000 	ldr.w	sl, [ip]
 800f93c:	0c12      	lsrs	r2, r2, #16
 800f93e:	fa13 f38a 	uxtah	r3, r3, sl
 800f942:	fb06 e202 	mla	r2, r6, r2, lr
 800f946:	9300      	str	r3, [sp, #0]
 800f948:	9b00      	ldr	r3, [sp, #0]
 800f94a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f94e:	b292      	uxth	r2, r2
 800f950:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f958:	f8bd 3000 	ldrh.w	r3, [sp]
 800f95c:	4581      	cmp	r9, r0
 800f95e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f962:	f84c 3b04 	str.w	r3, [ip], #4
 800f966:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f96a:	d2db      	bcs.n	800f924 <quorem+0x44>
 800f96c:	f855 300b 	ldr.w	r3, [r5, fp]
 800f970:	b92b      	cbnz	r3, 800f97e <quorem+0x9e>
 800f972:	9b01      	ldr	r3, [sp, #4]
 800f974:	3b04      	subs	r3, #4
 800f976:	429d      	cmp	r5, r3
 800f978:	461a      	mov	r2, r3
 800f97a:	d32e      	bcc.n	800f9da <quorem+0xfa>
 800f97c:	613c      	str	r4, [r7, #16]
 800f97e:	4638      	mov	r0, r7
 800f980:	f001 f8b6 	bl	8010af0 <__mcmp>
 800f984:	2800      	cmp	r0, #0
 800f986:	db24      	blt.n	800f9d2 <quorem+0xf2>
 800f988:	3601      	adds	r6, #1
 800f98a:	4628      	mov	r0, r5
 800f98c:	f04f 0c00 	mov.w	ip, #0
 800f990:	f858 2b04 	ldr.w	r2, [r8], #4
 800f994:	f8d0 e000 	ldr.w	lr, [r0]
 800f998:	b293      	uxth	r3, r2
 800f99a:	ebac 0303 	sub.w	r3, ip, r3
 800f99e:	0c12      	lsrs	r2, r2, #16
 800f9a0:	fa13 f38e 	uxtah	r3, r3, lr
 800f9a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f9a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9b2:	45c1      	cmp	r9, r8
 800f9b4:	f840 3b04 	str.w	r3, [r0], #4
 800f9b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f9bc:	d2e8      	bcs.n	800f990 <quorem+0xb0>
 800f9be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f9c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f9c6:	b922      	cbnz	r2, 800f9d2 <quorem+0xf2>
 800f9c8:	3b04      	subs	r3, #4
 800f9ca:	429d      	cmp	r5, r3
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	d30a      	bcc.n	800f9e6 <quorem+0x106>
 800f9d0:	613c      	str	r4, [r7, #16]
 800f9d2:	4630      	mov	r0, r6
 800f9d4:	b003      	add	sp, #12
 800f9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9da:	6812      	ldr	r2, [r2, #0]
 800f9dc:	3b04      	subs	r3, #4
 800f9de:	2a00      	cmp	r2, #0
 800f9e0:	d1cc      	bne.n	800f97c <quorem+0x9c>
 800f9e2:	3c01      	subs	r4, #1
 800f9e4:	e7c7      	b.n	800f976 <quorem+0x96>
 800f9e6:	6812      	ldr	r2, [r2, #0]
 800f9e8:	3b04      	subs	r3, #4
 800f9ea:	2a00      	cmp	r2, #0
 800f9ec:	d1f0      	bne.n	800f9d0 <quorem+0xf0>
 800f9ee:	3c01      	subs	r4, #1
 800f9f0:	e7eb      	b.n	800f9ca <quorem+0xea>
 800f9f2:	2000      	movs	r0, #0
 800f9f4:	e7ee      	b.n	800f9d4 <quorem+0xf4>
	...

0800f9f8 <_dtoa_r>:
 800f9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9fc:	ed2d 8b04 	vpush	{d8-d9}
 800fa00:	ec57 6b10 	vmov	r6, r7, d0
 800fa04:	b093      	sub	sp, #76	; 0x4c
 800fa06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fa08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fa0c:	9106      	str	r1, [sp, #24]
 800fa0e:	ee10 aa10 	vmov	sl, s0
 800fa12:	4604      	mov	r4, r0
 800fa14:	9209      	str	r2, [sp, #36]	; 0x24
 800fa16:	930c      	str	r3, [sp, #48]	; 0x30
 800fa18:	46bb      	mov	fp, r7
 800fa1a:	b975      	cbnz	r5, 800fa3a <_dtoa_r+0x42>
 800fa1c:	2010      	movs	r0, #16
 800fa1e:	f000 fddd 	bl	80105dc <malloc>
 800fa22:	4602      	mov	r2, r0
 800fa24:	6260      	str	r0, [r4, #36]	; 0x24
 800fa26:	b920      	cbnz	r0, 800fa32 <_dtoa_r+0x3a>
 800fa28:	4ba7      	ldr	r3, [pc, #668]	; (800fcc8 <_dtoa_r+0x2d0>)
 800fa2a:	21ea      	movs	r1, #234	; 0xea
 800fa2c:	48a7      	ldr	r0, [pc, #668]	; (800fccc <_dtoa_r+0x2d4>)
 800fa2e:	f001 fbc3 	bl	80111b8 <__assert_func>
 800fa32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa36:	6005      	str	r5, [r0, #0]
 800fa38:	60c5      	str	r5, [r0, #12]
 800fa3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa3c:	6819      	ldr	r1, [r3, #0]
 800fa3e:	b151      	cbz	r1, 800fa56 <_dtoa_r+0x5e>
 800fa40:	685a      	ldr	r2, [r3, #4]
 800fa42:	604a      	str	r2, [r1, #4]
 800fa44:	2301      	movs	r3, #1
 800fa46:	4093      	lsls	r3, r2
 800fa48:	608b      	str	r3, [r1, #8]
 800fa4a:	4620      	mov	r0, r4
 800fa4c:	f000 fe0e 	bl	801066c <_Bfree>
 800fa50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa52:	2200      	movs	r2, #0
 800fa54:	601a      	str	r2, [r3, #0]
 800fa56:	1e3b      	subs	r3, r7, #0
 800fa58:	bfaa      	itet	ge
 800fa5a:	2300      	movge	r3, #0
 800fa5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fa60:	f8c8 3000 	strge.w	r3, [r8]
 800fa64:	4b9a      	ldr	r3, [pc, #616]	; (800fcd0 <_dtoa_r+0x2d8>)
 800fa66:	bfbc      	itt	lt
 800fa68:	2201      	movlt	r2, #1
 800fa6a:	f8c8 2000 	strlt.w	r2, [r8]
 800fa6e:	ea33 030b 	bics.w	r3, r3, fp
 800fa72:	d11b      	bne.n	800faac <_dtoa_r+0xb4>
 800fa74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa76:	f242 730f 	movw	r3, #9999	; 0x270f
 800fa7a:	6013      	str	r3, [r2, #0]
 800fa7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa80:	4333      	orrs	r3, r6
 800fa82:	f000 8592 	beq.w	80105aa <_dtoa_r+0xbb2>
 800fa86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa88:	b963      	cbnz	r3, 800faa4 <_dtoa_r+0xac>
 800fa8a:	4b92      	ldr	r3, [pc, #584]	; (800fcd4 <_dtoa_r+0x2dc>)
 800fa8c:	e022      	b.n	800fad4 <_dtoa_r+0xdc>
 800fa8e:	4b92      	ldr	r3, [pc, #584]	; (800fcd8 <_dtoa_r+0x2e0>)
 800fa90:	9301      	str	r3, [sp, #4]
 800fa92:	3308      	adds	r3, #8
 800fa94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fa96:	6013      	str	r3, [r2, #0]
 800fa98:	9801      	ldr	r0, [sp, #4]
 800fa9a:	b013      	add	sp, #76	; 0x4c
 800fa9c:	ecbd 8b04 	vpop	{d8-d9}
 800faa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa4:	4b8b      	ldr	r3, [pc, #556]	; (800fcd4 <_dtoa_r+0x2dc>)
 800faa6:	9301      	str	r3, [sp, #4]
 800faa8:	3303      	adds	r3, #3
 800faaa:	e7f3      	b.n	800fa94 <_dtoa_r+0x9c>
 800faac:	2200      	movs	r2, #0
 800faae:	2300      	movs	r3, #0
 800fab0:	4650      	mov	r0, sl
 800fab2:	4659      	mov	r1, fp
 800fab4:	f7f1 f808 	bl	8000ac8 <__aeabi_dcmpeq>
 800fab8:	ec4b ab19 	vmov	d9, sl, fp
 800fabc:	4680      	mov	r8, r0
 800fabe:	b158      	cbz	r0, 800fad8 <_dtoa_r+0xe0>
 800fac0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fac2:	2301      	movs	r3, #1
 800fac4:	6013      	str	r3, [r2, #0]
 800fac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fac8:	2b00      	cmp	r3, #0
 800faca:	f000 856b 	beq.w	80105a4 <_dtoa_r+0xbac>
 800face:	4883      	ldr	r0, [pc, #524]	; (800fcdc <_dtoa_r+0x2e4>)
 800fad0:	6018      	str	r0, [r3, #0]
 800fad2:	1e43      	subs	r3, r0, #1
 800fad4:	9301      	str	r3, [sp, #4]
 800fad6:	e7df      	b.n	800fa98 <_dtoa_r+0xa0>
 800fad8:	ec4b ab10 	vmov	d0, sl, fp
 800fadc:	aa10      	add	r2, sp, #64	; 0x40
 800fade:	a911      	add	r1, sp, #68	; 0x44
 800fae0:	4620      	mov	r0, r4
 800fae2:	f001 f8ab 	bl	8010c3c <__d2b>
 800fae6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800faea:	ee08 0a10 	vmov	s16, r0
 800faee:	2d00      	cmp	r5, #0
 800faf0:	f000 8084 	beq.w	800fbfc <_dtoa_r+0x204>
 800faf4:	ee19 3a90 	vmov	r3, s19
 800faf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fafc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fb00:	4656      	mov	r6, sl
 800fb02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fb06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fb0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fb0e:	4b74      	ldr	r3, [pc, #464]	; (800fce0 <_dtoa_r+0x2e8>)
 800fb10:	2200      	movs	r2, #0
 800fb12:	4630      	mov	r0, r6
 800fb14:	4639      	mov	r1, r7
 800fb16:	f7f0 fbb7 	bl	8000288 <__aeabi_dsub>
 800fb1a:	a365      	add	r3, pc, #404	; (adr r3, 800fcb0 <_dtoa_r+0x2b8>)
 800fb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb20:	f7f0 fd6a 	bl	80005f8 <__aeabi_dmul>
 800fb24:	a364      	add	r3, pc, #400	; (adr r3, 800fcb8 <_dtoa_r+0x2c0>)
 800fb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2a:	f7f0 fbaf 	bl	800028c <__adddf3>
 800fb2e:	4606      	mov	r6, r0
 800fb30:	4628      	mov	r0, r5
 800fb32:	460f      	mov	r7, r1
 800fb34:	f7f0 fcf6 	bl	8000524 <__aeabi_i2d>
 800fb38:	a361      	add	r3, pc, #388	; (adr r3, 800fcc0 <_dtoa_r+0x2c8>)
 800fb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3e:	f7f0 fd5b 	bl	80005f8 <__aeabi_dmul>
 800fb42:	4602      	mov	r2, r0
 800fb44:	460b      	mov	r3, r1
 800fb46:	4630      	mov	r0, r6
 800fb48:	4639      	mov	r1, r7
 800fb4a:	f7f0 fb9f 	bl	800028c <__adddf3>
 800fb4e:	4606      	mov	r6, r0
 800fb50:	460f      	mov	r7, r1
 800fb52:	f7f1 f801 	bl	8000b58 <__aeabi_d2iz>
 800fb56:	2200      	movs	r2, #0
 800fb58:	9000      	str	r0, [sp, #0]
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	4630      	mov	r0, r6
 800fb5e:	4639      	mov	r1, r7
 800fb60:	f7f0 ffbc 	bl	8000adc <__aeabi_dcmplt>
 800fb64:	b150      	cbz	r0, 800fb7c <_dtoa_r+0x184>
 800fb66:	9800      	ldr	r0, [sp, #0]
 800fb68:	f7f0 fcdc 	bl	8000524 <__aeabi_i2d>
 800fb6c:	4632      	mov	r2, r6
 800fb6e:	463b      	mov	r3, r7
 800fb70:	f7f0 ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb74:	b910      	cbnz	r0, 800fb7c <_dtoa_r+0x184>
 800fb76:	9b00      	ldr	r3, [sp, #0]
 800fb78:	3b01      	subs	r3, #1
 800fb7a:	9300      	str	r3, [sp, #0]
 800fb7c:	9b00      	ldr	r3, [sp, #0]
 800fb7e:	2b16      	cmp	r3, #22
 800fb80:	d85a      	bhi.n	800fc38 <_dtoa_r+0x240>
 800fb82:	9a00      	ldr	r2, [sp, #0]
 800fb84:	4b57      	ldr	r3, [pc, #348]	; (800fce4 <_dtoa_r+0x2ec>)
 800fb86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb8e:	ec51 0b19 	vmov	r0, r1, d9
 800fb92:	f7f0 ffa3 	bl	8000adc <__aeabi_dcmplt>
 800fb96:	2800      	cmp	r0, #0
 800fb98:	d050      	beq.n	800fc3c <_dtoa_r+0x244>
 800fb9a:	9b00      	ldr	r3, [sp, #0]
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	2300      	movs	r3, #0
 800fba2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fba6:	1b5d      	subs	r5, r3, r5
 800fba8:	1e6b      	subs	r3, r5, #1
 800fbaa:	9305      	str	r3, [sp, #20]
 800fbac:	bf45      	ittet	mi
 800fbae:	f1c5 0301 	rsbmi	r3, r5, #1
 800fbb2:	9304      	strmi	r3, [sp, #16]
 800fbb4:	2300      	movpl	r3, #0
 800fbb6:	2300      	movmi	r3, #0
 800fbb8:	bf4c      	ite	mi
 800fbba:	9305      	strmi	r3, [sp, #20]
 800fbbc:	9304      	strpl	r3, [sp, #16]
 800fbbe:	9b00      	ldr	r3, [sp, #0]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	db3d      	blt.n	800fc40 <_dtoa_r+0x248>
 800fbc4:	9b05      	ldr	r3, [sp, #20]
 800fbc6:	9a00      	ldr	r2, [sp, #0]
 800fbc8:	920a      	str	r2, [sp, #40]	; 0x28
 800fbca:	4413      	add	r3, r2
 800fbcc:	9305      	str	r3, [sp, #20]
 800fbce:	2300      	movs	r3, #0
 800fbd0:	9307      	str	r3, [sp, #28]
 800fbd2:	9b06      	ldr	r3, [sp, #24]
 800fbd4:	2b09      	cmp	r3, #9
 800fbd6:	f200 8089 	bhi.w	800fcec <_dtoa_r+0x2f4>
 800fbda:	2b05      	cmp	r3, #5
 800fbdc:	bfc4      	itt	gt
 800fbde:	3b04      	subgt	r3, #4
 800fbe0:	9306      	strgt	r3, [sp, #24]
 800fbe2:	9b06      	ldr	r3, [sp, #24]
 800fbe4:	f1a3 0302 	sub.w	r3, r3, #2
 800fbe8:	bfcc      	ite	gt
 800fbea:	2500      	movgt	r5, #0
 800fbec:	2501      	movle	r5, #1
 800fbee:	2b03      	cmp	r3, #3
 800fbf0:	f200 8087 	bhi.w	800fd02 <_dtoa_r+0x30a>
 800fbf4:	e8df f003 	tbb	[pc, r3]
 800fbf8:	59383a2d 	.word	0x59383a2d
 800fbfc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fc00:	441d      	add	r5, r3
 800fc02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fc06:	2b20      	cmp	r3, #32
 800fc08:	bfc1      	itttt	gt
 800fc0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fc0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fc12:	fa0b f303 	lslgt.w	r3, fp, r3
 800fc16:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fc1a:	bfda      	itte	le
 800fc1c:	f1c3 0320 	rsble	r3, r3, #32
 800fc20:	fa06 f003 	lslle.w	r0, r6, r3
 800fc24:	4318      	orrgt	r0, r3
 800fc26:	f7f0 fc6d 	bl	8000504 <__aeabi_ui2d>
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	4606      	mov	r6, r0
 800fc2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fc32:	3d01      	subs	r5, #1
 800fc34:	930e      	str	r3, [sp, #56]	; 0x38
 800fc36:	e76a      	b.n	800fb0e <_dtoa_r+0x116>
 800fc38:	2301      	movs	r3, #1
 800fc3a:	e7b2      	b.n	800fba2 <_dtoa_r+0x1aa>
 800fc3c:	900b      	str	r0, [sp, #44]	; 0x2c
 800fc3e:	e7b1      	b.n	800fba4 <_dtoa_r+0x1ac>
 800fc40:	9b04      	ldr	r3, [sp, #16]
 800fc42:	9a00      	ldr	r2, [sp, #0]
 800fc44:	1a9b      	subs	r3, r3, r2
 800fc46:	9304      	str	r3, [sp, #16]
 800fc48:	4253      	negs	r3, r2
 800fc4a:	9307      	str	r3, [sp, #28]
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	930a      	str	r3, [sp, #40]	; 0x28
 800fc50:	e7bf      	b.n	800fbd2 <_dtoa_r+0x1da>
 800fc52:	2300      	movs	r3, #0
 800fc54:	9308      	str	r3, [sp, #32]
 800fc56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	dc55      	bgt.n	800fd08 <_dtoa_r+0x310>
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fc62:	461a      	mov	r2, r3
 800fc64:	9209      	str	r2, [sp, #36]	; 0x24
 800fc66:	e00c      	b.n	800fc82 <_dtoa_r+0x28a>
 800fc68:	2301      	movs	r3, #1
 800fc6a:	e7f3      	b.n	800fc54 <_dtoa_r+0x25c>
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc70:	9308      	str	r3, [sp, #32]
 800fc72:	9b00      	ldr	r3, [sp, #0]
 800fc74:	4413      	add	r3, r2
 800fc76:	9302      	str	r3, [sp, #8]
 800fc78:	3301      	adds	r3, #1
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	9303      	str	r3, [sp, #12]
 800fc7e:	bfb8      	it	lt
 800fc80:	2301      	movlt	r3, #1
 800fc82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fc84:	2200      	movs	r2, #0
 800fc86:	6042      	str	r2, [r0, #4]
 800fc88:	2204      	movs	r2, #4
 800fc8a:	f102 0614 	add.w	r6, r2, #20
 800fc8e:	429e      	cmp	r6, r3
 800fc90:	6841      	ldr	r1, [r0, #4]
 800fc92:	d93d      	bls.n	800fd10 <_dtoa_r+0x318>
 800fc94:	4620      	mov	r0, r4
 800fc96:	f000 fca9 	bl	80105ec <_Balloc>
 800fc9a:	9001      	str	r0, [sp, #4]
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	d13b      	bne.n	800fd18 <_dtoa_r+0x320>
 800fca0:	4b11      	ldr	r3, [pc, #68]	; (800fce8 <_dtoa_r+0x2f0>)
 800fca2:	4602      	mov	r2, r0
 800fca4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fca8:	e6c0      	b.n	800fa2c <_dtoa_r+0x34>
 800fcaa:	2301      	movs	r3, #1
 800fcac:	e7df      	b.n	800fc6e <_dtoa_r+0x276>
 800fcae:	bf00      	nop
 800fcb0:	636f4361 	.word	0x636f4361
 800fcb4:	3fd287a7 	.word	0x3fd287a7
 800fcb8:	8b60c8b3 	.word	0x8b60c8b3
 800fcbc:	3fc68a28 	.word	0x3fc68a28
 800fcc0:	509f79fb 	.word	0x509f79fb
 800fcc4:	3fd34413 	.word	0x3fd34413
 800fcc8:	08014565 	.word	0x08014565
 800fccc:	0801457c 	.word	0x0801457c
 800fcd0:	7ff00000 	.word	0x7ff00000
 800fcd4:	08014561 	.word	0x08014561
 800fcd8:	08014558 	.word	0x08014558
 800fcdc:	08014535 	.word	0x08014535
 800fce0:	3ff80000 	.word	0x3ff80000
 800fce4:	08014670 	.word	0x08014670
 800fce8:	080145d7 	.word	0x080145d7
 800fcec:	2501      	movs	r5, #1
 800fcee:	2300      	movs	r3, #0
 800fcf0:	9306      	str	r3, [sp, #24]
 800fcf2:	9508      	str	r5, [sp, #32]
 800fcf4:	f04f 33ff 	mov.w	r3, #4294967295
 800fcf8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	2312      	movs	r3, #18
 800fd00:	e7b0      	b.n	800fc64 <_dtoa_r+0x26c>
 800fd02:	2301      	movs	r3, #1
 800fd04:	9308      	str	r3, [sp, #32]
 800fd06:	e7f5      	b.n	800fcf4 <_dtoa_r+0x2fc>
 800fd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fd0e:	e7b8      	b.n	800fc82 <_dtoa_r+0x28a>
 800fd10:	3101      	adds	r1, #1
 800fd12:	6041      	str	r1, [r0, #4]
 800fd14:	0052      	lsls	r2, r2, #1
 800fd16:	e7b8      	b.n	800fc8a <_dtoa_r+0x292>
 800fd18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd1a:	9a01      	ldr	r2, [sp, #4]
 800fd1c:	601a      	str	r2, [r3, #0]
 800fd1e:	9b03      	ldr	r3, [sp, #12]
 800fd20:	2b0e      	cmp	r3, #14
 800fd22:	f200 809d 	bhi.w	800fe60 <_dtoa_r+0x468>
 800fd26:	2d00      	cmp	r5, #0
 800fd28:	f000 809a 	beq.w	800fe60 <_dtoa_r+0x468>
 800fd2c:	9b00      	ldr	r3, [sp, #0]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	dd32      	ble.n	800fd98 <_dtoa_r+0x3a0>
 800fd32:	4ab7      	ldr	r2, [pc, #732]	; (8010010 <_dtoa_r+0x618>)
 800fd34:	f003 030f 	and.w	r3, r3, #15
 800fd38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fd3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd40:	9b00      	ldr	r3, [sp, #0]
 800fd42:	05d8      	lsls	r0, r3, #23
 800fd44:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fd48:	d516      	bpl.n	800fd78 <_dtoa_r+0x380>
 800fd4a:	4bb2      	ldr	r3, [pc, #712]	; (8010014 <_dtoa_r+0x61c>)
 800fd4c:	ec51 0b19 	vmov	r0, r1, d9
 800fd50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd54:	f7f0 fd7a 	bl	800084c <__aeabi_ddiv>
 800fd58:	f007 070f 	and.w	r7, r7, #15
 800fd5c:	4682      	mov	sl, r0
 800fd5e:	468b      	mov	fp, r1
 800fd60:	2503      	movs	r5, #3
 800fd62:	4eac      	ldr	r6, [pc, #688]	; (8010014 <_dtoa_r+0x61c>)
 800fd64:	b957      	cbnz	r7, 800fd7c <_dtoa_r+0x384>
 800fd66:	4642      	mov	r2, r8
 800fd68:	464b      	mov	r3, r9
 800fd6a:	4650      	mov	r0, sl
 800fd6c:	4659      	mov	r1, fp
 800fd6e:	f7f0 fd6d 	bl	800084c <__aeabi_ddiv>
 800fd72:	4682      	mov	sl, r0
 800fd74:	468b      	mov	fp, r1
 800fd76:	e028      	b.n	800fdca <_dtoa_r+0x3d2>
 800fd78:	2502      	movs	r5, #2
 800fd7a:	e7f2      	b.n	800fd62 <_dtoa_r+0x36a>
 800fd7c:	07f9      	lsls	r1, r7, #31
 800fd7e:	d508      	bpl.n	800fd92 <_dtoa_r+0x39a>
 800fd80:	4640      	mov	r0, r8
 800fd82:	4649      	mov	r1, r9
 800fd84:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fd88:	f7f0 fc36 	bl	80005f8 <__aeabi_dmul>
 800fd8c:	3501      	adds	r5, #1
 800fd8e:	4680      	mov	r8, r0
 800fd90:	4689      	mov	r9, r1
 800fd92:	107f      	asrs	r7, r7, #1
 800fd94:	3608      	adds	r6, #8
 800fd96:	e7e5      	b.n	800fd64 <_dtoa_r+0x36c>
 800fd98:	f000 809b 	beq.w	800fed2 <_dtoa_r+0x4da>
 800fd9c:	9b00      	ldr	r3, [sp, #0]
 800fd9e:	4f9d      	ldr	r7, [pc, #628]	; (8010014 <_dtoa_r+0x61c>)
 800fda0:	425e      	negs	r6, r3
 800fda2:	4b9b      	ldr	r3, [pc, #620]	; (8010010 <_dtoa_r+0x618>)
 800fda4:	f006 020f 	and.w	r2, r6, #15
 800fda8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb0:	ec51 0b19 	vmov	r0, r1, d9
 800fdb4:	f7f0 fc20 	bl	80005f8 <__aeabi_dmul>
 800fdb8:	1136      	asrs	r6, r6, #4
 800fdba:	4682      	mov	sl, r0
 800fdbc:	468b      	mov	fp, r1
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	2502      	movs	r5, #2
 800fdc2:	2e00      	cmp	r6, #0
 800fdc4:	d17a      	bne.n	800febc <_dtoa_r+0x4c4>
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d1d3      	bne.n	800fd72 <_dtoa_r+0x37a>
 800fdca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	f000 8082 	beq.w	800fed6 <_dtoa_r+0x4de>
 800fdd2:	4b91      	ldr	r3, [pc, #580]	; (8010018 <_dtoa_r+0x620>)
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	4650      	mov	r0, sl
 800fdd8:	4659      	mov	r1, fp
 800fdda:	f7f0 fe7f 	bl	8000adc <__aeabi_dcmplt>
 800fdde:	2800      	cmp	r0, #0
 800fde0:	d079      	beq.n	800fed6 <_dtoa_r+0x4de>
 800fde2:	9b03      	ldr	r3, [sp, #12]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d076      	beq.n	800fed6 <_dtoa_r+0x4de>
 800fde8:	9b02      	ldr	r3, [sp, #8]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	dd36      	ble.n	800fe5c <_dtoa_r+0x464>
 800fdee:	9b00      	ldr	r3, [sp, #0]
 800fdf0:	4650      	mov	r0, sl
 800fdf2:	4659      	mov	r1, fp
 800fdf4:	1e5f      	subs	r7, r3, #1
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	4b88      	ldr	r3, [pc, #544]	; (801001c <_dtoa_r+0x624>)
 800fdfa:	f7f0 fbfd 	bl	80005f8 <__aeabi_dmul>
 800fdfe:	9e02      	ldr	r6, [sp, #8]
 800fe00:	4682      	mov	sl, r0
 800fe02:	468b      	mov	fp, r1
 800fe04:	3501      	adds	r5, #1
 800fe06:	4628      	mov	r0, r5
 800fe08:	f7f0 fb8c 	bl	8000524 <__aeabi_i2d>
 800fe0c:	4652      	mov	r2, sl
 800fe0e:	465b      	mov	r3, fp
 800fe10:	f7f0 fbf2 	bl	80005f8 <__aeabi_dmul>
 800fe14:	4b82      	ldr	r3, [pc, #520]	; (8010020 <_dtoa_r+0x628>)
 800fe16:	2200      	movs	r2, #0
 800fe18:	f7f0 fa38 	bl	800028c <__adddf3>
 800fe1c:	46d0      	mov	r8, sl
 800fe1e:	46d9      	mov	r9, fp
 800fe20:	4682      	mov	sl, r0
 800fe22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fe26:	2e00      	cmp	r6, #0
 800fe28:	d158      	bne.n	800fedc <_dtoa_r+0x4e4>
 800fe2a:	4b7e      	ldr	r3, [pc, #504]	; (8010024 <_dtoa_r+0x62c>)
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	4640      	mov	r0, r8
 800fe30:	4649      	mov	r1, r9
 800fe32:	f7f0 fa29 	bl	8000288 <__aeabi_dsub>
 800fe36:	4652      	mov	r2, sl
 800fe38:	465b      	mov	r3, fp
 800fe3a:	4680      	mov	r8, r0
 800fe3c:	4689      	mov	r9, r1
 800fe3e:	f7f0 fe6b 	bl	8000b18 <__aeabi_dcmpgt>
 800fe42:	2800      	cmp	r0, #0
 800fe44:	f040 8295 	bne.w	8010372 <_dtoa_r+0x97a>
 800fe48:	4652      	mov	r2, sl
 800fe4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fe4e:	4640      	mov	r0, r8
 800fe50:	4649      	mov	r1, r9
 800fe52:	f7f0 fe43 	bl	8000adc <__aeabi_dcmplt>
 800fe56:	2800      	cmp	r0, #0
 800fe58:	f040 8289 	bne.w	801036e <_dtoa_r+0x976>
 800fe5c:	ec5b ab19 	vmov	sl, fp, d9
 800fe60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f2c0 8148 	blt.w	80100f8 <_dtoa_r+0x700>
 800fe68:	9a00      	ldr	r2, [sp, #0]
 800fe6a:	2a0e      	cmp	r2, #14
 800fe6c:	f300 8144 	bgt.w	80100f8 <_dtoa_r+0x700>
 800fe70:	4b67      	ldr	r3, [pc, #412]	; (8010010 <_dtoa_r+0x618>)
 800fe72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe76:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fe7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	f280 80d5 	bge.w	801002c <_dtoa_r+0x634>
 800fe82:	9b03      	ldr	r3, [sp, #12]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	f300 80d1 	bgt.w	801002c <_dtoa_r+0x634>
 800fe8a:	f040 826f 	bne.w	801036c <_dtoa_r+0x974>
 800fe8e:	4b65      	ldr	r3, [pc, #404]	; (8010024 <_dtoa_r+0x62c>)
 800fe90:	2200      	movs	r2, #0
 800fe92:	4640      	mov	r0, r8
 800fe94:	4649      	mov	r1, r9
 800fe96:	f7f0 fbaf 	bl	80005f8 <__aeabi_dmul>
 800fe9a:	4652      	mov	r2, sl
 800fe9c:	465b      	mov	r3, fp
 800fe9e:	f7f0 fe31 	bl	8000b04 <__aeabi_dcmpge>
 800fea2:	9e03      	ldr	r6, [sp, #12]
 800fea4:	4637      	mov	r7, r6
 800fea6:	2800      	cmp	r0, #0
 800fea8:	f040 8245 	bne.w	8010336 <_dtoa_r+0x93e>
 800feac:	9d01      	ldr	r5, [sp, #4]
 800feae:	2331      	movs	r3, #49	; 0x31
 800feb0:	f805 3b01 	strb.w	r3, [r5], #1
 800feb4:	9b00      	ldr	r3, [sp, #0]
 800feb6:	3301      	adds	r3, #1
 800feb8:	9300      	str	r3, [sp, #0]
 800feba:	e240      	b.n	801033e <_dtoa_r+0x946>
 800febc:	07f2      	lsls	r2, r6, #31
 800febe:	d505      	bpl.n	800fecc <_dtoa_r+0x4d4>
 800fec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fec4:	f7f0 fb98 	bl	80005f8 <__aeabi_dmul>
 800fec8:	3501      	adds	r5, #1
 800feca:	2301      	movs	r3, #1
 800fecc:	1076      	asrs	r6, r6, #1
 800fece:	3708      	adds	r7, #8
 800fed0:	e777      	b.n	800fdc2 <_dtoa_r+0x3ca>
 800fed2:	2502      	movs	r5, #2
 800fed4:	e779      	b.n	800fdca <_dtoa_r+0x3d2>
 800fed6:	9f00      	ldr	r7, [sp, #0]
 800fed8:	9e03      	ldr	r6, [sp, #12]
 800feda:	e794      	b.n	800fe06 <_dtoa_r+0x40e>
 800fedc:	9901      	ldr	r1, [sp, #4]
 800fede:	4b4c      	ldr	r3, [pc, #304]	; (8010010 <_dtoa_r+0x618>)
 800fee0:	4431      	add	r1, r6
 800fee2:	910d      	str	r1, [sp, #52]	; 0x34
 800fee4:	9908      	ldr	r1, [sp, #32]
 800fee6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800feea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800feee:	2900      	cmp	r1, #0
 800fef0:	d043      	beq.n	800ff7a <_dtoa_r+0x582>
 800fef2:	494d      	ldr	r1, [pc, #308]	; (8010028 <_dtoa_r+0x630>)
 800fef4:	2000      	movs	r0, #0
 800fef6:	f7f0 fca9 	bl	800084c <__aeabi_ddiv>
 800fefa:	4652      	mov	r2, sl
 800fefc:	465b      	mov	r3, fp
 800fefe:	f7f0 f9c3 	bl	8000288 <__aeabi_dsub>
 800ff02:	9d01      	ldr	r5, [sp, #4]
 800ff04:	4682      	mov	sl, r0
 800ff06:	468b      	mov	fp, r1
 800ff08:	4649      	mov	r1, r9
 800ff0a:	4640      	mov	r0, r8
 800ff0c:	f7f0 fe24 	bl	8000b58 <__aeabi_d2iz>
 800ff10:	4606      	mov	r6, r0
 800ff12:	f7f0 fb07 	bl	8000524 <__aeabi_i2d>
 800ff16:	4602      	mov	r2, r0
 800ff18:	460b      	mov	r3, r1
 800ff1a:	4640      	mov	r0, r8
 800ff1c:	4649      	mov	r1, r9
 800ff1e:	f7f0 f9b3 	bl	8000288 <__aeabi_dsub>
 800ff22:	3630      	adds	r6, #48	; 0x30
 800ff24:	f805 6b01 	strb.w	r6, [r5], #1
 800ff28:	4652      	mov	r2, sl
 800ff2a:	465b      	mov	r3, fp
 800ff2c:	4680      	mov	r8, r0
 800ff2e:	4689      	mov	r9, r1
 800ff30:	f7f0 fdd4 	bl	8000adc <__aeabi_dcmplt>
 800ff34:	2800      	cmp	r0, #0
 800ff36:	d163      	bne.n	8010000 <_dtoa_r+0x608>
 800ff38:	4642      	mov	r2, r8
 800ff3a:	464b      	mov	r3, r9
 800ff3c:	4936      	ldr	r1, [pc, #216]	; (8010018 <_dtoa_r+0x620>)
 800ff3e:	2000      	movs	r0, #0
 800ff40:	f7f0 f9a2 	bl	8000288 <__aeabi_dsub>
 800ff44:	4652      	mov	r2, sl
 800ff46:	465b      	mov	r3, fp
 800ff48:	f7f0 fdc8 	bl	8000adc <__aeabi_dcmplt>
 800ff4c:	2800      	cmp	r0, #0
 800ff4e:	f040 80b5 	bne.w	80100bc <_dtoa_r+0x6c4>
 800ff52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff54:	429d      	cmp	r5, r3
 800ff56:	d081      	beq.n	800fe5c <_dtoa_r+0x464>
 800ff58:	4b30      	ldr	r3, [pc, #192]	; (801001c <_dtoa_r+0x624>)
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	4650      	mov	r0, sl
 800ff5e:	4659      	mov	r1, fp
 800ff60:	f7f0 fb4a 	bl	80005f8 <__aeabi_dmul>
 800ff64:	4b2d      	ldr	r3, [pc, #180]	; (801001c <_dtoa_r+0x624>)
 800ff66:	4682      	mov	sl, r0
 800ff68:	468b      	mov	fp, r1
 800ff6a:	4640      	mov	r0, r8
 800ff6c:	4649      	mov	r1, r9
 800ff6e:	2200      	movs	r2, #0
 800ff70:	f7f0 fb42 	bl	80005f8 <__aeabi_dmul>
 800ff74:	4680      	mov	r8, r0
 800ff76:	4689      	mov	r9, r1
 800ff78:	e7c6      	b.n	800ff08 <_dtoa_r+0x510>
 800ff7a:	4650      	mov	r0, sl
 800ff7c:	4659      	mov	r1, fp
 800ff7e:	f7f0 fb3b 	bl	80005f8 <__aeabi_dmul>
 800ff82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff84:	9d01      	ldr	r5, [sp, #4]
 800ff86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff88:	4682      	mov	sl, r0
 800ff8a:	468b      	mov	fp, r1
 800ff8c:	4649      	mov	r1, r9
 800ff8e:	4640      	mov	r0, r8
 800ff90:	f7f0 fde2 	bl	8000b58 <__aeabi_d2iz>
 800ff94:	4606      	mov	r6, r0
 800ff96:	f7f0 fac5 	bl	8000524 <__aeabi_i2d>
 800ff9a:	3630      	adds	r6, #48	; 0x30
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	4640      	mov	r0, r8
 800ffa2:	4649      	mov	r1, r9
 800ffa4:	f7f0 f970 	bl	8000288 <__aeabi_dsub>
 800ffa8:	f805 6b01 	strb.w	r6, [r5], #1
 800ffac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffae:	429d      	cmp	r5, r3
 800ffb0:	4680      	mov	r8, r0
 800ffb2:	4689      	mov	r9, r1
 800ffb4:	f04f 0200 	mov.w	r2, #0
 800ffb8:	d124      	bne.n	8010004 <_dtoa_r+0x60c>
 800ffba:	4b1b      	ldr	r3, [pc, #108]	; (8010028 <_dtoa_r+0x630>)
 800ffbc:	4650      	mov	r0, sl
 800ffbe:	4659      	mov	r1, fp
 800ffc0:	f7f0 f964 	bl	800028c <__adddf3>
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	460b      	mov	r3, r1
 800ffc8:	4640      	mov	r0, r8
 800ffca:	4649      	mov	r1, r9
 800ffcc:	f7f0 fda4 	bl	8000b18 <__aeabi_dcmpgt>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d173      	bne.n	80100bc <_dtoa_r+0x6c4>
 800ffd4:	4652      	mov	r2, sl
 800ffd6:	465b      	mov	r3, fp
 800ffd8:	4913      	ldr	r1, [pc, #76]	; (8010028 <_dtoa_r+0x630>)
 800ffda:	2000      	movs	r0, #0
 800ffdc:	f7f0 f954 	bl	8000288 <__aeabi_dsub>
 800ffe0:	4602      	mov	r2, r0
 800ffe2:	460b      	mov	r3, r1
 800ffe4:	4640      	mov	r0, r8
 800ffe6:	4649      	mov	r1, r9
 800ffe8:	f7f0 fd78 	bl	8000adc <__aeabi_dcmplt>
 800ffec:	2800      	cmp	r0, #0
 800ffee:	f43f af35 	beq.w	800fe5c <_dtoa_r+0x464>
 800fff2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fff4:	1e6b      	subs	r3, r5, #1
 800fff6:	930f      	str	r3, [sp, #60]	; 0x3c
 800fff8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fffc:	2b30      	cmp	r3, #48	; 0x30
 800fffe:	d0f8      	beq.n	800fff2 <_dtoa_r+0x5fa>
 8010000:	9700      	str	r7, [sp, #0]
 8010002:	e049      	b.n	8010098 <_dtoa_r+0x6a0>
 8010004:	4b05      	ldr	r3, [pc, #20]	; (801001c <_dtoa_r+0x624>)
 8010006:	f7f0 faf7 	bl	80005f8 <__aeabi_dmul>
 801000a:	4680      	mov	r8, r0
 801000c:	4689      	mov	r9, r1
 801000e:	e7bd      	b.n	800ff8c <_dtoa_r+0x594>
 8010010:	08014670 	.word	0x08014670
 8010014:	08014648 	.word	0x08014648
 8010018:	3ff00000 	.word	0x3ff00000
 801001c:	40240000 	.word	0x40240000
 8010020:	401c0000 	.word	0x401c0000
 8010024:	40140000 	.word	0x40140000
 8010028:	3fe00000 	.word	0x3fe00000
 801002c:	9d01      	ldr	r5, [sp, #4]
 801002e:	4656      	mov	r6, sl
 8010030:	465f      	mov	r7, fp
 8010032:	4642      	mov	r2, r8
 8010034:	464b      	mov	r3, r9
 8010036:	4630      	mov	r0, r6
 8010038:	4639      	mov	r1, r7
 801003a:	f7f0 fc07 	bl	800084c <__aeabi_ddiv>
 801003e:	f7f0 fd8b 	bl	8000b58 <__aeabi_d2iz>
 8010042:	4682      	mov	sl, r0
 8010044:	f7f0 fa6e 	bl	8000524 <__aeabi_i2d>
 8010048:	4642      	mov	r2, r8
 801004a:	464b      	mov	r3, r9
 801004c:	f7f0 fad4 	bl	80005f8 <__aeabi_dmul>
 8010050:	4602      	mov	r2, r0
 8010052:	460b      	mov	r3, r1
 8010054:	4630      	mov	r0, r6
 8010056:	4639      	mov	r1, r7
 8010058:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801005c:	f7f0 f914 	bl	8000288 <__aeabi_dsub>
 8010060:	f805 6b01 	strb.w	r6, [r5], #1
 8010064:	9e01      	ldr	r6, [sp, #4]
 8010066:	9f03      	ldr	r7, [sp, #12]
 8010068:	1bae      	subs	r6, r5, r6
 801006a:	42b7      	cmp	r7, r6
 801006c:	4602      	mov	r2, r0
 801006e:	460b      	mov	r3, r1
 8010070:	d135      	bne.n	80100de <_dtoa_r+0x6e6>
 8010072:	f7f0 f90b 	bl	800028c <__adddf3>
 8010076:	4642      	mov	r2, r8
 8010078:	464b      	mov	r3, r9
 801007a:	4606      	mov	r6, r0
 801007c:	460f      	mov	r7, r1
 801007e:	f7f0 fd4b 	bl	8000b18 <__aeabi_dcmpgt>
 8010082:	b9d0      	cbnz	r0, 80100ba <_dtoa_r+0x6c2>
 8010084:	4642      	mov	r2, r8
 8010086:	464b      	mov	r3, r9
 8010088:	4630      	mov	r0, r6
 801008a:	4639      	mov	r1, r7
 801008c:	f7f0 fd1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8010090:	b110      	cbz	r0, 8010098 <_dtoa_r+0x6a0>
 8010092:	f01a 0f01 	tst.w	sl, #1
 8010096:	d110      	bne.n	80100ba <_dtoa_r+0x6c2>
 8010098:	4620      	mov	r0, r4
 801009a:	ee18 1a10 	vmov	r1, s16
 801009e:	f000 fae5 	bl	801066c <_Bfree>
 80100a2:	2300      	movs	r3, #0
 80100a4:	9800      	ldr	r0, [sp, #0]
 80100a6:	702b      	strb	r3, [r5, #0]
 80100a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80100aa:	3001      	adds	r0, #1
 80100ac:	6018      	str	r0, [r3, #0]
 80100ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	f43f acf1 	beq.w	800fa98 <_dtoa_r+0xa0>
 80100b6:	601d      	str	r5, [r3, #0]
 80100b8:	e4ee      	b.n	800fa98 <_dtoa_r+0xa0>
 80100ba:	9f00      	ldr	r7, [sp, #0]
 80100bc:	462b      	mov	r3, r5
 80100be:	461d      	mov	r5, r3
 80100c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100c4:	2a39      	cmp	r2, #57	; 0x39
 80100c6:	d106      	bne.n	80100d6 <_dtoa_r+0x6de>
 80100c8:	9a01      	ldr	r2, [sp, #4]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d1f7      	bne.n	80100be <_dtoa_r+0x6c6>
 80100ce:	9901      	ldr	r1, [sp, #4]
 80100d0:	2230      	movs	r2, #48	; 0x30
 80100d2:	3701      	adds	r7, #1
 80100d4:	700a      	strb	r2, [r1, #0]
 80100d6:	781a      	ldrb	r2, [r3, #0]
 80100d8:	3201      	adds	r2, #1
 80100da:	701a      	strb	r2, [r3, #0]
 80100dc:	e790      	b.n	8010000 <_dtoa_r+0x608>
 80100de:	4ba6      	ldr	r3, [pc, #664]	; (8010378 <_dtoa_r+0x980>)
 80100e0:	2200      	movs	r2, #0
 80100e2:	f7f0 fa89 	bl	80005f8 <__aeabi_dmul>
 80100e6:	2200      	movs	r2, #0
 80100e8:	2300      	movs	r3, #0
 80100ea:	4606      	mov	r6, r0
 80100ec:	460f      	mov	r7, r1
 80100ee:	f7f0 fceb 	bl	8000ac8 <__aeabi_dcmpeq>
 80100f2:	2800      	cmp	r0, #0
 80100f4:	d09d      	beq.n	8010032 <_dtoa_r+0x63a>
 80100f6:	e7cf      	b.n	8010098 <_dtoa_r+0x6a0>
 80100f8:	9a08      	ldr	r2, [sp, #32]
 80100fa:	2a00      	cmp	r2, #0
 80100fc:	f000 80d7 	beq.w	80102ae <_dtoa_r+0x8b6>
 8010100:	9a06      	ldr	r2, [sp, #24]
 8010102:	2a01      	cmp	r2, #1
 8010104:	f300 80ba 	bgt.w	801027c <_dtoa_r+0x884>
 8010108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801010a:	2a00      	cmp	r2, #0
 801010c:	f000 80b2 	beq.w	8010274 <_dtoa_r+0x87c>
 8010110:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010114:	9e07      	ldr	r6, [sp, #28]
 8010116:	9d04      	ldr	r5, [sp, #16]
 8010118:	9a04      	ldr	r2, [sp, #16]
 801011a:	441a      	add	r2, r3
 801011c:	9204      	str	r2, [sp, #16]
 801011e:	9a05      	ldr	r2, [sp, #20]
 8010120:	2101      	movs	r1, #1
 8010122:	441a      	add	r2, r3
 8010124:	4620      	mov	r0, r4
 8010126:	9205      	str	r2, [sp, #20]
 8010128:	f000 fb58 	bl	80107dc <__i2b>
 801012c:	4607      	mov	r7, r0
 801012e:	2d00      	cmp	r5, #0
 8010130:	dd0c      	ble.n	801014c <_dtoa_r+0x754>
 8010132:	9b05      	ldr	r3, [sp, #20]
 8010134:	2b00      	cmp	r3, #0
 8010136:	dd09      	ble.n	801014c <_dtoa_r+0x754>
 8010138:	42ab      	cmp	r3, r5
 801013a:	9a04      	ldr	r2, [sp, #16]
 801013c:	bfa8      	it	ge
 801013e:	462b      	movge	r3, r5
 8010140:	1ad2      	subs	r2, r2, r3
 8010142:	9204      	str	r2, [sp, #16]
 8010144:	9a05      	ldr	r2, [sp, #20]
 8010146:	1aed      	subs	r5, r5, r3
 8010148:	1ad3      	subs	r3, r2, r3
 801014a:	9305      	str	r3, [sp, #20]
 801014c:	9b07      	ldr	r3, [sp, #28]
 801014e:	b31b      	cbz	r3, 8010198 <_dtoa_r+0x7a0>
 8010150:	9b08      	ldr	r3, [sp, #32]
 8010152:	2b00      	cmp	r3, #0
 8010154:	f000 80af 	beq.w	80102b6 <_dtoa_r+0x8be>
 8010158:	2e00      	cmp	r6, #0
 801015a:	dd13      	ble.n	8010184 <_dtoa_r+0x78c>
 801015c:	4639      	mov	r1, r7
 801015e:	4632      	mov	r2, r6
 8010160:	4620      	mov	r0, r4
 8010162:	f000 fbfb 	bl	801095c <__pow5mult>
 8010166:	ee18 2a10 	vmov	r2, s16
 801016a:	4601      	mov	r1, r0
 801016c:	4607      	mov	r7, r0
 801016e:	4620      	mov	r0, r4
 8010170:	f000 fb4a 	bl	8010808 <__multiply>
 8010174:	ee18 1a10 	vmov	r1, s16
 8010178:	4680      	mov	r8, r0
 801017a:	4620      	mov	r0, r4
 801017c:	f000 fa76 	bl	801066c <_Bfree>
 8010180:	ee08 8a10 	vmov	s16, r8
 8010184:	9b07      	ldr	r3, [sp, #28]
 8010186:	1b9a      	subs	r2, r3, r6
 8010188:	d006      	beq.n	8010198 <_dtoa_r+0x7a0>
 801018a:	ee18 1a10 	vmov	r1, s16
 801018e:	4620      	mov	r0, r4
 8010190:	f000 fbe4 	bl	801095c <__pow5mult>
 8010194:	ee08 0a10 	vmov	s16, r0
 8010198:	2101      	movs	r1, #1
 801019a:	4620      	mov	r0, r4
 801019c:	f000 fb1e 	bl	80107dc <__i2b>
 80101a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	4606      	mov	r6, r0
 80101a6:	f340 8088 	ble.w	80102ba <_dtoa_r+0x8c2>
 80101aa:	461a      	mov	r2, r3
 80101ac:	4601      	mov	r1, r0
 80101ae:	4620      	mov	r0, r4
 80101b0:	f000 fbd4 	bl	801095c <__pow5mult>
 80101b4:	9b06      	ldr	r3, [sp, #24]
 80101b6:	2b01      	cmp	r3, #1
 80101b8:	4606      	mov	r6, r0
 80101ba:	f340 8081 	ble.w	80102c0 <_dtoa_r+0x8c8>
 80101be:	f04f 0800 	mov.w	r8, #0
 80101c2:	6933      	ldr	r3, [r6, #16]
 80101c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80101c8:	6918      	ldr	r0, [r3, #16]
 80101ca:	f000 fab7 	bl	801073c <__hi0bits>
 80101ce:	f1c0 0020 	rsb	r0, r0, #32
 80101d2:	9b05      	ldr	r3, [sp, #20]
 80101d4:	4418      	add	r0, r3
 80101d6:	f010 001f 	ands.w	r0, r0, #31
 80101da:	f000 8092 	beq.w	8010302 <_dtoa_r+0x90a>
 80101de:	f1c0 0320 	rsb	r3, r0, #32
 80101e2:	2b04      	cmp	r3, #4
 80101e4:	f340 808a 	ble.w	80102fc <_dtoa_r+0x904>
 80101e8:	f1c0 001c 	rsb	r0, r0, #28
 80101ec:	9b04      	ldr	r3, [sp, #16]
 80101ee:	4403      	add	r3, r0
 80101f0:	9304      	str	r3, [sp, #16]
 80101f2:	9b05      	ldr	r3, [sp, #20]
 80101f4:	4403      	add	r3, r0
 80101f6:	4405      	add	r5, r0
 80101f8:	9305      	str	r3, [sp, #20]
 80101fa:	9b04      	ldr	r3, [sp, #16]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	dd07      	ble.n	8010210 <_dtoa_r+0x818>
 8010200:	ee18 1a10 	vmov	r1, s16
 8010204:	461a      	mov	r2, r3
 8010206:	4620      	mov	r0, r4
 8010208:	f000 fc02 	bl	8010a10 <__lshift>
 801020c:	ee08 0a10 	vmov	s16, r0
 8010210:	9b05      	ldr	r3, [sp, #20]
 8010212:	2b00      	cmp	r3, #0
 8010214:	dd05      	ble.n	8010222 <_dtoa_r+0x82a>
 8010216:	4631      	mov	r1, r6
 8010218:	461a      	mov	r2, r3
 801021a:	4620      	mov	r0, r4
 801021c:	f000 fbf8 	bl	8010a10 <__lshift>
 8010220:	4606      	mov	r6, r0
 8010222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010224:	2b00      	cmp	r3, #0
 8010226:	d06e      	beq.n	8010306 <_dtoa_r+0x90e>
 8010228:	ee18 0a10 	vmov	r0, s16
 801022c:	4631      	mov	r1, r6
 801022e:	f000 fc5f 	bl	8010af0 <__mcmp>
 8010232:	2800      	cmp	r0, #0
 8010234:	da67      	bge.n	8010306 <_dtoa_r+0x90e>
 8010236:	9b00      	ldr	r3, [sp, #0]
 8010238:	3b01      	subs	r3, #1
 801023a:	ee18 1a10 	vmov	r1, s16
 801023e:	9300      	str	r3, [sp, #0]
 8010240:	220a      	movs	r2, #10
 8010242:	2300      	movs	r3, #0
 8010244:	4620      	mov	r0, r4
 8010246:	f000 fa33 	bl	80106b0 <__multadd>
 801024a:	9b08      	ldr	r3, [sp, #32]
 801024c:	ee08 0a10 	vmov	s16, r0
 8010250:	2b00      	cmp	r3, #0
 8010252:	f000 81b1 	beq.w	80105b8 <_dtoa_r+0xbc0>
 8010256:	2300      	movs	r3, #0
 8010258:	4639      	mov	r1, r7
 801025a:	220a      	movs	r2, #10
 801025c:	4620      	mov	r0, r4
 801025e:	f000 fa27 	bl	80106b0 <__multadd>
 8010262:	9b02      	ldr	r3, [sp, #8]
 8010264:	2b00      	cmp	r3, #0
 8010266:	4607      	mov	r7, r0
 8010268:	f300 808e 	bgt.w	8010388 <_dtoa_r+0x990>
 801026c:	9b06      	ldr	r3, [sp, #24]
 801026e:	2b02      	cmp	r3, #2
 8010270:	dc51      	bgt.n	8010316 <_dtoa_r+0x91e>
 8010272:	e089      	b.n	8010388 <_dtoa_r+0x990>
 8010274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010276:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801027a:	e74b      	b.n	8010114 <_dtoa_r+0x71c>
 801027c:	9b03      	ldr	r3, [sp, #12]
 801027e:	1e5e      	subs	r6, r3, #1
 8010280:	9b07      	ldr	r3, [sp, #28]
 8010282:	42b3      	cmp	r3, r6
 8010284:	bfbf      	itttt	lt
 8010286:	9b07      	ldrlt	r3, [sp, #28]
 8010288:	9607      	strlt	r6, [sp, #28]
 801028a:	1af2      	sublt	r2, r6, r3
 801028c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801028e:	bfb6      	itet	lt
 8010290:	189b      	addlt	r3, r3, r2
 8010292:	1b9e      	subge	r6, r3, r6
 8010294:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010296:	9b03      	ldr	r3, [sp, #12]
 8010298:	bfb8      	it	lt
 801029a:	2600      	movlt	r6, #0
 801029c:	2b00      	cmp	r3, #0
 801029e:	bfb7      	itett	lt
 80102a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80102a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80102a8:	1a9d      	sublt	r5, r3, r2
 80102aa:	2300      	movlt	r3, #0
 80102ac:	e734      	b.n	8010118 <_dtoa_r+0x720>
 80102ae:	9e07      	ldr	r6, [sp, #28]
 80102b0:	9d04      	ldr	r5, [sp, #16]
 80102b2:	9f08      	ldr	r7, [sp, #32]
 80102b4:	e73b      	b.n	801012e <_dtoa_r+0x736>
 80102b6:	9a07      	ldr	r2, [sp, #28]
 80102b8:	e767      	b.n	801018a <_dtoa_r+0x792>
 80102ba:	9b06      	ldr	r3, [sp, #24]
 80102bc:	2b01      	cmp	r3, #1
 80102be:	dc18      	bgt.n	80102f2 <_dtoa_r+0x8fa>
 80102c0:	f1ba 0f00 	cmp.w	sl, #0
 80102c4:	d115      	bne.n	80102f2 <_dtoa_r+0x8fa>
 80102c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80102ca:	b993      	cbnz	r3, 80102f2 <_dtoa_r+0x8fa>
 80102cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80102d0:	0d1b      	lsrs	r3, r3, #20
 80102d2:	051b      	lsls	r3, r3, #20
 80102d4:	b183      	cbz	r3, 80102f8 <_dtoa_r+0x900>
 80102d6:	9b04      	ldr	r3, [sp, #16]
 80102d8:	3301      	adds	r3, #1
 80102da:	9304      	str	r3, [sp, #16]
 80102dc:	9b05      	ldr	r3, [sp, #20]
 80102de:	3301      	adds	r3, #1
 80102e0:	9305      	str	r3, [sp, #20]
 80102e2:	f04f 0801 	mov.w	r8, #1
 80102e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	f47f af6a 	bne.w	80101c2 <_dtoa_r+0x7ca>
 80102ee:	2001      	movs	r0, #1
 80102f0:	e76f      	b.n	80101d2 <_dtoa_r+0x7da>
 80102f2:	f04f 0800 	mov.w	r8, #0
 80102f6:	e7f6      	b.n	80102e6 <_dtoa_r+0x8ee>
 80102f8:	4698      	mov	r8, r3
 80102fa:	e7f4      	b.n	80102e6 <_dtoa_r+0x8ee>
 80102fc:	f43f af7d 	beq.w	80101fa <_dtoa_r+0x802>
 8010300:	4618      	mov	r0, r3
 8010302:	301c      	adds	r0, #28
 8010304:	e772      	b.n	80101ec <_dtoa_r+0x7f4>
 8010306:	9b03      	ldr	r3, [sp, #12]
 8010308:	2b00      	cmp	r3, #0
 801030a:	dc37      	bgt.n	801037c <_dtoa_r+0x984>
 801030c:	9b06      	ldr	r3, [sp, #24]
 801030e:	2b02      	cmp	r3, #2
 8010310:	dd34      	ble.n	801037c <_dtoa_r+0x984>
 8010312:	9b03      	ldr	r3, [sp, #12]
 8010314:	9302      	str	r3, [sp, #8]
 8010316:	9b02      	ldr	r3, [sp, #8]
 8010318:	b96b      	cbnz	r3, 8010336 <_dtoa_r+0x93e>
 801031a:	4631      	mov	r1, r6
 801031c:	2205      	movs	r2, #5
 801031e:	4620      	mov	r0, r4
 8010320:	f000 f9c6 	bl	80106b0 <__multadd>
 8010324:	4601      	mov	r1, r0
 8010326:	4606      	mov	r6, r0
 8010328:	ee18 0a10 	vmov	r0, s16
 801032c:	f000 fbe0 	bl	8010af0 <__mcmp>
 8010330:	2800      	cmp	r0, #0
 8010332:	f73f adbb 	bgt.w	800feac <_dtoa_r+0x4b4>
 8010336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010338:	9d01      	ldr	r5, [sp, #4]
 801033a:	43db      	mvns	r3, r3
 801033c:	9300      	str	r3, [sp, #0]
 801033e:	f04f 0800 	mov.w	r8, #0
 8010342:	4631      	mov	r1, r6
 8010344:	4620      	mov	r0, r4
 8010346:	f000 f991 	bl	801066c <_Bfree>
 801034a:	2f00      	cmp	r7, #0
 801034c:	f43f aea4 	beq.w	8010098 <_dtoa_r+0x6a0>
 8010350:	f1b8 0f00 	cmp.w	r8, #0
 8010354:	d005      	beq.n	8010362 <_dtoa_r+0x96a>
 8010356:	45b8      	cmp	r8, r7
 8010358:	d003      	beq.n	8010362 <_dtoa_r+0x96a>
 801035a:	4641      	mov	r1, r8
 801035c:	4620      	mov	r0, r4
 801035e:	f000 f985 	bl	801066c <_Bfree>
 8010362:	4639      	mov	r1, r7
 8010364:	4620      	mov	r0, r4
 8010366:	f000 f981 	bl	801066c <_Bfree>
 801036a:	e695      	b.n	8010098 <_dtoa_r+0x6a0>
 801036c:	2600      	movs	r6, #0
 801036e:	4637      	mov	r7, r6
 8010370:	e7e1      	b.n	8010336 <_dtoa_r+0x93e>
 8010372:	9700      	str	r7, [sp, #0]
 8010374:	4637      	mov	r7, r6
 8010376:	e599      	b.n	800feac <_dtoa_r+0x4b4>
 8010378:	40240000 	.word	0x40240000
 801037c:	9b08      	ldr	r3, [sp, #32]
 801037e:	2b00      	cmp	r3, #0
 8010380:	f000 80ca 	beq.w	8010518 <_dtoa_r+0xb20>
 8010384:	9b03      	ldr	r3, [sp, #12]
 8010386:	9302      	str	r3, [sp, #8]
 8010388:	2d00      	cmp	r5, #0
 801038a:	dd05      	ble.n	8010398 <_dtoa_r+0x9a0>
 801038c:	4639      	mov	r1, r7
 801038e:	462a      	mov	r2, r5
 8010390:	4620      	mov	r0, r4
 8010392:	f000 fb3d 	bl	8010a10 <__lshift>
 8010396:	4607      	mov	r7, r0
 8010398:	f1b8 0f00 	cmp.w	r8, #0
 801039c:	d05b      	beq.n	8010456 <_dtoa_r+0xa5e>
 801039e:	6879      	ldr	r1, [r7, #4]
 80103a0:	4620      	mov	r0, r4
 80103a2:	f000 f923 	bl	80105ec <_Balloc>
 80103a6:	4605      	mov	r5, r0
 80103a8:	b928      	cbnz	r0, 80103b6 <_dtoa_r+0x9be>
 80103aa:	4b87      	ldr	r3, [pc, #540]	; (80105c8 <_dtoa_r+0xbd0>)
 80103ac:	4602      	mov	r2, r0
 80103ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80103b2:	f7ff bb3b 	b.w	800fa2c <_dtoa_r+0x34>
 80103b6:	693a      	ldr	r2, [r7, #16]
 80103b8:	3202      	adds	r2, #2
 80103ba:	0092      	lsls	r2, r2, #2
 80103bc:	f107 010c 	add.w	r1, r7, #12
 80103c0:	300c      	adds	r0, #12
 80103c2:	f7fe fded 	bl	800efa0 <memcpy>
 80103c6:	2201      	movs	r2, #1
 80103c8:	4629      	mov	r1, r5
 80103ca:	4620      	mov	r0, r4
 80103cc:	f000 fb20 	bl	8010a10 <__lshift>
 80103d0:	9b01      	ldr	r3, [sp, #4]
 80103d2:	f103 0901 	add.w	r9, r3, #1
 80103d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80103da:	4413      	add	r3, r2
 80103dc:	9305      	str	r3, [sp, #20]
 80103de:	f00a 0301 	and.w	r3, sl, #1
 80103e2:	46b8      	mov	r8, r7
 80103e4:	9304      	str	r3, [sp, #16]
 80103e6:	4607      	mov	r7, r0
 80103e8:	4631      	mov	r1, r6
 80103ea:	ee18 0a10 	vmov	r0, s16
 80103ee:	f7ff fa77 	bl	800f8e0 <quorem>
 80103f2:	4641      	mov	r1, r8
 80103f4:	9002      	str	r0, [sp, #8]
 80103f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80103fa:	ee18 0a10 	vmov	r0, s16
 80103fe:	f000 fb77 	bl	8010af0 <__mcmp>
 8010402:	463a      	mov	r2, r7
 8010404:	9003      	str	r0, [sp, #12]
 8010406:	4631      	mov	r1, r6
 8010408:	4620      	mov	r0, r4
 801040a:	f000 fb8d 	bl	8010b28 <__mdiff>
 801040e:	68c2      	ldr	r2, [r0, #12]
 8010410:	f109 3bff 	add.w	fp, r9, #4294967295
 8010414:	4605      	mov	r5, r0
 8010416:	bb02      	cbnz	r2, 801045a <_dtoa_r+0xa62>
 8010418:	4601      	mov	r1, r0
 801041a:	ee18 0a10 	vmov	r0, s16
 801041e:	f000 fb67 	bl	8010af0 <__mcmp>
 8010422:	4602      	mov	r2, r0
 8010424:	4629      	mov	r1, r5
 8010426:	4620      	mov	r0, r4
 8010428:	9207      	str	r2, [sp, #28]
 801042a:	f000 f91f 	bl	801066c <_Bfree>
 801042e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010432:	ea43 0102 	orr.w	r1, r3, r2
 8010436:	9b04      	ldr	r3, [sp, #16]
 8010438:	430b      	orrs	r3, r1
 801043a:	464d      	mov	r5, r9
 801043c:	d10f      	bne.n	801045e <_dtoa_r+0xa66>
 801043e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010442:	d02a      	beq.n	801049a <_dtoa_r+0xaa2>
 8010444:	9b03      	ldr	r3, [sp, #12]
 8010446:	2b00      	cmp	r3, #0
 8010448:	dd02      	ble.n	8010450 <_dtoa_r+0xa58>
 801044a:	9b02      	ldr	r3, [sp, #8]
 801044c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010450:	f88b a000 	strb.w	sl, [fp]
 8010454:	e775      	b.n	8010342 <_dtoa_r+0x94a>
 8010456:	4638      	mov	r0, r7
 8010458:	e7ba      	b.n	80103d0 <_dtoa_r+0x9d8>
 801045a:	2201      	movs	r2, #1
 801045c:	e7e2      	b.n	8010424 <_dtoa_r+0xa2c>
 801045e:	9b03      	ldr	r3, [sp, #12]
 8010460:	2b00      	cmp	r3, #0
 8010462:	db04      	blt.n	801046e <_dtoa_r+0xa76>
 8010464:	9906      	ldr	r1, [sp, #24]
 8010466:	430b      	orrs	r3, r1
 8010468:	9904      	ldr	r1, [sp, #16]
 801046a:	430b      	orrs	r3, r1
 801046c:	d122      	bne.n	80104b4 <_dtoa_r+0xabc>
 801046e:	2a00      	cmp	r2, #0
 8010470:	ddee      	ble.n	8010450 <_dtoa_r+0xa58>
 8010472:	ee18 1a10 	vmov	r1, s16
 8010476:	2201      	movs	r2, #1
 8010478:	4620      	mov	r0, r4
 801047a:	f000 fac9 	bl	8010a10 <__lshift>
 801047e:	4631      	mov	r1, r6
 8010480:	ee08 0a10 	vmov	s16, r0
 8010484:	f000 fb34 	bl	8010af0 <__mcmp>
 8010488:	2800      	cmp	r0, #0
 801048a:	dc03      	bgt.n	8010494 <_dtoa_r+0xa9c>
 801048c:	d1e0      	bne.n	8010450 <_dtoa_r+0xa58>
 801048e:	f01a 0f01 	tst.w	sl, #1
 8010492:	d0dd      	beq.n	8010450 <_dtoa_r+0xa58>
 8010494:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010498:	d1d7      	bne.n	801044a <_dtoa_r+0xa52>
 801049a:	2339      	movs	r3, #57	; 0x39
 801049c:	f88b 3000 	strb.w	r3, [fp]
 80104a0:	462b      	mov	r3, r5
 80104a2:	461d      	mov	r5, r3
 80104a4:	3b01      	subs	r3, #1
 80104a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80104aa:	2a39      	cmp	r2, #57	; 0x39
 80104ac:	d071      	beq.n	8010592 <_dtoa_r+0xb9a>
 80104ae:	3201      	adds	r2, #1
 80104b0:	701a      	strb	r2, [r3, #0]
 80104b2:	e746      	b.n	8010342 <_dtoa_r+0x94a>
 80104b4:	2a00      	cmp	r2, #0
 80104b6:	dd07      	ble.n	80104c8 <_dtoa_r+0xad0>
 80104b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80104bc:	d0ed      	beq.n	801049a <_dtoa_r+0xaa2>
 80104be:	f10a 0301 	add.w	r3, sl, #1
 80104c2:	f88b 3000 	strb.w	r3, [fp]
 80104c6:	e73c      	b.n	8010342 <_dtoa_r+0x94a>
 80104c8:	9b05      	ldr	r3, [sp, #20]
 80104ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80104ce:	4599      	cmp	r9, r3
 80104d0:	d047      	beq.n	8010562 <_dtoa_r+0xb6a>
 80104d2:	ee18 1a10 	vmov	r1, s16
 80104d6:	2300      	movs	r3, #0
 80104d8:	220a      	movs	r2, #10
 80104da:	4620      	mov	r0, r4
 80104dc:	f000 f8e8 	bl	80106b0 <__multadd>
 80104e0:	45b8      	cmp	r8, r7
 80104e2:	ee08 0a10 	vmov	s16, r0
 80104e6:	f04f 0300 	mov.w	r3, #0
 80104ea:	f04f 020a 	mov.w	r2, #10
 80104ee:	4641      	mov	r1, r8
 80104f0:	4620      	mov	r0, r4
 80104f2:	d106      	bne.n	8010502 <_dtoa_r+0xb0a>
 80104f4:	f000 f8dc 	bl	80106b0 <__multadd>
 80104f8:	4680      	mov	r8, r0
 80104fa:	4607      	mov	r7, r0
 80104fc:	f109 0901 	add.w	r9, r9, #1
 8010500:	e772      	b.n	80103e8 <_dtoa_r+0x9f0>
 8010502:	f000 f8d5 	bl	80106b0 <__multadd>
 8010506:	4639      	mov	r1, r7
 8010508:	4680      	mov	r8, r0
 801050a:	2300      	movs	r3, #0
 801050c:	220a      	movs	r2, #10
 801050e:	4620      	mov	r0, r4
 8010510:	f000 f8ce 	bl	80106b0 <__multadd>
 8010514:	4607      	mov	r7, r0
 8010516:	e7f1      	b.n	80104fc <_dtoa_r+0xb04>
 8010518:	9b03      	ldr	r3, [sp, #12]
 801051a:	9302      	str	r3, [sp, #8]
 801051c:	9d01      	ldr	r5, [sp, #4]
 801051e:	ee18 0a10 	vmov	r0, s16
 8010522:	4631      	mov	r1, r6
 8010524:	f7ff f9dc 	bl	800f8e0 <quorem>
 8010528:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801052c:	9b01      	ldr	r3, [sp, #4]
 801052e:	f805 ab01 	strb.w	sl, [r5], #1
 8010532:	1aea      	subs	r2, r5, r3
 8010534:	9b02      	ldr	r3, [sp, #8]
 8010536:	4293      	cmp	r3, r2
 8010538:	dd09      	ble.n	801054e <_dtoa_r+0xb56>
 801053a:	ee18 1a10 	vmov	r1, s16
 801053e:	2300      	movs	r3, #0
 8010540:	220a      	movs	r2, #10
 8010542:	4620      	mov	r0, r4
 8010544:	f000 f8b4 	bl	80106b0 <__multadd>
 8010548:	ee08 0a10 	vmov	s16, r0
 801054c:	e7e7      	b.n	801051e <_dtoa_r+0xb26>
 801054e:	9b02      	ldr	r3, [sp, #8]
 8010550:	2b00      	cmp	r3, #0
 8010552:	bfc8      	it	gt
 8010554:	461d      	movgt	r5, r3
 8010556:	9b01      	ldr	r3, [sp, #4]
 8010558:	bfd8      	it	le
 801055a:	2501      	movle	r5, #1
 801055c:	441d      	add	r5, r3
 801055e:	f04f 0800 	mov.w	r8, #0
 8010562:	ee18 1a10 	vmov	r1, s16
 8010566:	2201      	movs	r2, #1
 8010568:	4620      	mov	r0, r4
 801056a:	f000 fa51 	bl	8010a10 <__lshift>
 801056e:	4631      	mov	r1, r6
 8010570:	ee08 0a10 	vmov	s16, r0
 8010574:	f000 fabc 	bl	8010af0 <__mcmp>
 8010578:	2800      	cmp	r0, #0
 801057a:	dc91      	bgt.n	80104a0 <_dtoa_r+0xaa8>
 801057c:	d102      	bne.n	8010584 <_dtoa_r+0xb8c>
 801057e:	f01a 0f01 	tst.w	sl, #1
 8010582:	d18d      	bne.n	80104a0 <_dtoa_r+0xaa8>
 8010584:	462b      	mov	r3, r5
 8010586:	461d      	mov	r5, r3
 8010588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801058c:	2a30      	cmp	r2, #48	; 0x30
 801058e:	d0fa      	beq.n	8010586 <_dtoa_r+0xb8e>
 8010590:	e6d7      	b.n	8010342 <_dtoa_r+0x94a>
 8010592:	9a01      	ldr	r2, [sp, #4]
 8010594:	429a      	cmp	r2, r3
 8010596:	d184      	bne.n	80104a2 <_dtoa_r+0xaaa>
 8010598:	9b00      	ldr	r3, [sp, #0]
 801059a:	3301      	adds	r3, #1
 801059c:	9300      	str	r3, [sp, #0]
 801059e:	2331      	movs	r3, #49	; 0x31
 80105a0:	7013      	strb	r3, [r2, #0]
 80105a2:	e6ce      	b.n	8010342 <_dtoa_r+0x94a>
 80105a4:	4b09      	ldr	r3, [pc, #36]	; (80105cc <_dtoa_r+0xbd4>)
 80105a6:	f7ff ba95 	b.w	800fad4 <_dtoa_r+0xdc>
 80105aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	f47f aa6e 	bne.w	800fa8e <_dtoa_r+0x96>
 80105b2:	4b07      	ldr	r3, [pc, #28]	; (80105d0 <_dtoa_r+0xbd8>)
 80105b4:	f7ff ba8e 	b.w	800fad4 <_dtoa_r+0xdc>
 80105b8:	9b02      	ldr	r3, [sp, #8]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	dcae      	bgt.n	801051c <_dtoa_r+0xb24>
 80105be:	9b06      	ldr	r3, [sp, #24]
 80105c0:	2b02      	cmp	r3, #2
 80105c2:	f73f aea8 	bgt.w	8010316 <_dtoa_r+0x91e>
 80105c6:	e7a9      	b.n	801051c <_dtoa_r+0xb24>
 80105c8:	080145d7 	.word	0x080145d7
 80105cc:	08014534 	.word	0x08014534
 80105d0:	08014558 	.word	0x08014558

080105d4 <_localeconv_r>:
 80105d4:	4800      	ldr	r0, [pc, #0]	; (80105d8 <_localeconv_r+0x4>)
 80105d6:	4770      	bx	lr
 80105d8:	20000170 	.word	0x20000170

080105dc <malloc>:
 80105dc:	4b02      	ldr	r3, [pc, #8]	; (80105e8 <malloc+0xc>)
 80105de:	4601      	mov	r1, r0
 80105e0:	6818      	ldr	r0, [r3, #0]
 80105e2:	f000 bc09 	b.w	8010df8 <_malloc_r>
 80105e6:	bf00      	nop
 80105e8:	2000001c 	.word	0x2000001c

080105ec <_Balloc>:
 80105ec:	b570      	push	{r4, r5, r6, lr}
 80105ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80105f0:	4604      	mov	r4, r0
 80105f2:	460d      	mov	r5, r1
 80105f4:	b976      	cbnz	r6, 8010614 <_Balloc+0x28>
 80105f6:	2010      	movs	r0, #16
 80105f8:	f7ff fff0 	bl	80105dc <malloc>
 80105fc:	4602      	mov	r2, r0
 80105fe:	6260      	str	r0, [r4, #36]	; 0x24
 8010600:	b920      	cbnz	r0, 801060c <_Balloc+0x20>
 8010602:	4b18      	ldr	r3, [pc, #96]	; (8010664 <_Balloc+0x78>)
 8010604:	4818      	ldr	r0, [pc, #96]	; (8010668 <_Balloc+0x7c>)
 8010606:	2166      	movs	r1, #102	; 0x66
 8010608:	f000 fdd6 	bl	80111b8 <__assert_func>
 801060c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010610:	6006      	str	r6, [r0, #0]
 8010612:	60c6      	str	r6, [r0, #12]
 8010614:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010616:	68f3      	ldr	r3, [r6, #12]
 8010618:	b183      	cbz	r3, 801063c <_Balloc+0x50>
 801061a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801061c:	68db      	ldr	r3, [r3, #12]
 801061e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010622:	b9b8      	cbnz	r0, 8010654 <_Balloc+0x68>
 8010624:	2101      	movs	r1, #1
 8010626:	fa01 f605 	lsl.w	r6, r1, r5
 801062a:	1d72      	adds	r2, r6, #5
 801062c:	0092      	lsls	r2, r2, #2
 801062e:	4620      	mov	r0, r4
 8010630:	f000 fb60 	bl	8010cf4 <_calloc_r>
 8010634:	b160      	cbz	r0, 8010650 <_Balloc+0x64>
 8010636:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801063a:	e00e      	b.n	801065a <_Balloc+0x6e>
 801063c:	2221      	movs	r2, #33	; 0x21
 801063e:	2104      	movs	r1, #4
 8010640:	4620      	mov	r0, r4
 8010642:	f000 fb57 	bl	8010cf4 <_calloc_r>
 8010646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010648:	60f0      	str	r0, [r6, #12]
 801064a:	68db      	ldr	r3, [r3, #12]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1e4      	bne.n	801061a <_Balloc+0x2e>
 8010650:	2000      	movs	r0, #0
 8010652:	bd70      	pop	{r4, r5, r6, pc}
 8010654:	6802      	ldr	r2, [r0, #0]
 8010656:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801065a:	2300      	movs	r3, #0
 801065c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010660:	e7f7      	b.n	8010652 <_Balloc+0x66>
 8010662:	bf00      	nop
 8010664:	08014565 	.word	0x08014565
 8010668:	080145e8 	.word	0x080145e8

0801066c <_Bfree>:
 801066c:	b570      	push	{r4, r5, r6, lr}
 801066e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010670:	4605      	mov	r5, r0
 8010672:	460c      	mov	r4, r1
 8010674:	b976      	cbnz	r6, 8010694 <_Bfree+0x28>
 8010676:	2010      	movs	r0, #16
 8010678:	f7ff ffb0 	bl	80105dc <malloc>
 801067c:	4602      	mov	r2, r0
 801067e:	6268      	str	r0, [r5, #36]	; 0x24
 8010680:	b920      	cbnz	r0, 801068c <_Bfree+0x20>
 8010682:	4b09      	ldr	r3, [pc, #36]	; (80106a8 <_Bfree+0x3c>)
 8010684:	4809      	ldr	r0, [pc, #36]	; (80106ac <_Bfree+0x40>)
 8010686:	218a      	movs	r1, #138	; 0x8a
 8010688:	f000 fd96 	bl	80111b8 <__assert_func>
 801068c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010690:	6006      	str	r6, [r0, #0]
 8010692:	60c6      	str	r6, [r0, #12]
 8010694:	b13c      	cbz	r4, 80106a6 <_Bfree+0x3a>
 8010696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010698:	6862      	ldr	r2, [r4, #4]
 801069a:	68db      	ldr	r3, [r3, #12]
 801069c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80106a0:	6021      	str	r1, [r4, #0]
 80106a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80106a6:	bd70      	pop	{r4, r5, r6, pc}
 80106a8:	08014565 	.word	0x08014565
 80106ac:	080145e8 	.word	0x080145e8

080106b0 <__multadd>:
 80106b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106b4:	690d      	ldr	r5, [r1, #16]
 80106b6:	4607      	mov	r7, r0
 80106b8:	460c      	mov	r4, r1
 80106ba:	461e      	mov	r6, r3
 80106bc:	f101 0c14 	add.w	ip, r1, #20
 80106c0:	2000      	movs	r0, #0
 80106c2:	f8dc 3000 	ldr.w	r3, [ip]
 80106c6:	b299      	uxth	r1, r3
 80106c8:	fb02 6101 	mla	r1, r2, r1, r6
 80106cc:	0c1e      	lsrs	r6, r3, #16
 80106ce:	0c0b      	lsrs	r3, r1, #16
 80106d0:	fb02 3306 	mla	r3, r2, r6, r3
 80106d4:	b289      	uxth	r1, r1
 80106d6:	3001      	adds	r0, #1
 80106d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80106dc:	4285      	cmp	r5, r0
 80106de:	f84c 1b04 	str.w	r1, [ip], #4
 80106e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80106e6:	dcec      	bgt.n	80106c2 <__multadd+0x12>
 80106e8:	b30e      	cbz	r6, 801072e <__multadd+0x7e>
 80106ea:	68a3      	ldr	r3, [r4, #8]
 80106ec:	42ab      	cmp	r3, r5
 80106ee:	dc19      	bgt.n	8010724 <__multadd+0x74>
 80106f0:	6861      	ldr	r1, [r4, #4]
 80106f2:	4638      	mov	r0, r7
 80106f4:	3101      	adds	r1, #1
 80106f6:	f7ff ff79 	bl	80105ec <_Balloc>
 80106fa:	4680      	mov	r8, r0
 80106fc:	b928      	cbnz	r0, 801070a <__multadd+0x5a>
 80106fe:	4602      	mov	r2, r0
 8010700:	4b0c      	ldr	r3, [pc, #48]	; (8010734 <__multadd+0x84>)
 8010702:	480d      	ldr	r0, [pc, #52]	; (8010738 <__multadd+0x88>)
 8010704:	21b5      	movs	r1, #181	; 0xb5
 8010706:	f000 fd57 	bl	80111b8 <__assert_func>
 801070a:	6922      	ldr	r2, [r4, #16]
 801070c:	3202      	adds	r2, #2
 801070e:	f104 010c 	add.w	r1, r4, #12
 8010712:	0092      	lsls	r2, r2, #2
 8010714:	300c      	adds	r0, #12
 8010716:	f7fe fc43 	bl	800efa0 <memcpy>
 801071a:	4621      	mov	r1, r4
 801071c:	4638      	mov	r0, r7
 801071e:	f7ff ffa5 	bl	801066c <_Bfree>
 8010722:	4644      	mov	r4, r8
 8010724:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010728:	3501      	adds	r5, #1
 801072a:	615e      	str	r6, [r3, #20]
 801072c:	6125      	str	r5, [r4, #16]
 801072e:	4620      	mov	r0, r4
 8010730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010734:	080145d7 	.word	0x080145d7
 8010738:	080145e8 	.word	0x080145e8

0801073c <__hi0bits>:
 801073c:	0c03      	lsrs	r3, r0, #16
 801073e:	041b      	lsls	r3, r3, #16
 8010740:	b9d3      	cbnz	r3, 8010778 <__hi0bits+0x3c>
 8010742:	0400      	lsls	r0, r0, #16
 8010744:	2310      	movs	r3, #16
 8010746:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801074a:	bf04      	itt	eq
 801074c:	0200      	lsleq	r0, r0, #8
 801074e:	3308      	addeq	r3, #8
 8010750:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010754:	bf04      	itt	eq
 8010756:	0100      	lsleq	r0, r0, #4
 8010758:	3304      	addeq	r3, #4
 801075a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801075e:	bf04      	itt	eq
 8010760:	0080      	lsleq	r0, r0, #2
 8010762:	3302      	addeq	r3, #2
 8010764:	2800      	cmp	r0, #0
 8010766:	db05      	blt.n	8010774 <__hi0bits+0x38>
 8010768:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801076c:	f103 0301 	add.w	r3, r3, #1
 8010770:	bf08      	it	eq
 8010772:	2320      	moveq	r3, #32
 8010774:	4618      	mov	r0, r3
 8010776:	4770      	bx	lr
 8010778:	2300      	movs	r3, #0
 801077a:	e7e4      	b.n	8010746 <__hi0bits+0xa>

0801077c <__lo0bits>:
 801077c:	6803      	ldr	r3, [r0, #0]
 801077e:	f013 0207 	ands.w	r2, r3, #7
 8010782:	4601      	mov	r1, r0
 8010784:	d00b      	beq.n	801079e <__lo0bits+0x22>
 8010786:	07da      	lsls	r2, r3, #31
 8010788:	d423      	bmi.n	80107d2 <__lo0bits+0x56>
 801078a:	0798      	lsls	r0, r3, #30
 801078c:	bf49      	itett	mi
 801078e:	085b      	lsrmi	r3, r3, #1
 8010790:	089b      	lsrpl	r3, r3, #2
 8010792:	2001      	movmi	r0, #1
 8010794:	600b      	strmi	r3, [r1, #0]
 8010796:	bf5c      	itt	pl
 8010798:	600b      	strpl	r3, [r1, #0]
 801079a:	2002      	movpl	r0, #2
 801079c:	4770      	bx	lr
 801079e:	b298      	uxth	r0, r3
 80107a0:	b9a8      	cbnz	r0, 80107ce <__lo0bits+0x52>
 80107a2:	0c1b      	lsrs	r3, r3, #16
 80107a4:	2010      	movs	r0, #16
 80107a6:	b2da      	uxtb	r2, r3
 80107a8:	b90a      	cbnz	r2, 80107ae <__lo0bits+0x32>
 80107aa:	3008      	adds	r0, #8
 80107ac:	0a1b      	lsrs	r3, r3, #8
 80107ae:	071a      	lsls	r2, r3, #28
 80107b0:	bf04      	itt	eq
 80107b2:	091b      	lsreq	r3, r3, #4
 80107b4:	3004      	addeq	r0, #4
 80107b6:	079a      	lsls	r2, r3, #30
 80107b8:	bf04      	itt	eq
 80107ba:	089b      	lsreq	r3, r3, #2
 80107bc:	3002      	addeq	r0, #2
 80107be:	07da      	lsls	r2, r3, #31
 80107c0:	d403      	bmi.n	80107ca <__lo0bits+0x4e>
 80107c2:	085b      	lsrs	r3, r3, #1
 80107c4:	f100 0001 	add.w	r0, r0, #1
 80107c8:	d005      	beq.n	80107d6 <__lo0bits+0x5a>
 80107ca:	600b      	str	r3, [r1, #0]
 80107cc:	4770      	bx	lr
 80107ce:	4610      	mov	r0, r2
 80107d0:	e7e9      	b.n	80107a6 <__lo0bits+0x2a>
 80107d2:	2000      	movs	r0, #0
 80107d4:	4770      	bx	lr
 80107d6:	2020      	movs	r0, #32
 80107d8:	4770      	bx	lr
	...

080107dc <__i2b>:
 80107dc:	b510      	push	{r4, lr}
 80107de:	460c      	mov	r4, r1
 80107e0:	2101      	movs	r1, #1
 80107e2:	f7ff ff03 	bl	80105ec <_Balloc>
 80107e6:	4602      	mov	r2, r0
 80107e8:	b928      	cbnz	r0, 80107f6 <__i2b+0x1a>
 80107ea:	4b05      	ldr	r3, [pc, #20]	; (8010800 <__i2b+0x24>)
 80107ec:	4805      	ldr	r0, [pc, #20]	; (8010804 <__i2b+0x28>)
 80107ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80107f2:	f000 fce1 	bl	80111b8 <__assert_func>
 80107f6:	2301      	movs	r3, #1
 80107f8:	6144      	str	r4, [r0, #20]
 80107fa:	6103      	str	r3, [r0, #16]
 80107fc:	bd10      	pop	{r4, pc}
 80107fe:	bf00      	nop
 8010800:	080145d7 	.word	0x080145d7
 8010804:	080145e8 	.word	0x080145e8

08010808 <__multiply>:
 8010808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801080c:	4691      	mov	r9, r2
 801080e:	690a      	ldr	r2, [r1, #16]
 8010810:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010814:	429a      	cmp	r2, r3
 8010816:	bfb8      	it	lt
 8010818:	460b      	movlt	r3, r1
 801081a:	460c      	mov	r4, r1
 801081c:	bfbc      	itt	lt
 801081e:	464c      	movlt	r4, r9
 8010820:	4699      	movlt	r9, r3
 8010822:	6927      	ldr	r7, [r4, #16]
 8010824:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010828:	68a3      	ldr	r3, [r4, #8]
 801082a:	6861      	ldr	r1, [r4, #4]
 801082c:	eb07 060a 	add.w	r6, r7, sl
 8010830:	42b3      	cmp	r3, r6
 8010832:	b085      	sub	sp, #20
 8010834:	bfb8      	it	lt
 8010836:	3101      	addlt	r1, #1
 8010838:	f7ff fed8 	bl	80105ec <_Balloc>
 801083c:	b930      	cbnz	r0, 801084c <__multiply+0x44>
 801083e:	4602      	mov	r2, r0
 8010840:	4b44      	ldr	r3, [pc, #272]	; (8010954 <__multiply+0x14c>)
 8010842:	4845      	ldr	r0, [pc, #276]	; (8010958 <__multiply+0x150>)
 8010844:	f240 115d 	movw	r1, #349	; 0x15d
 8010848:	f000 fcb6 	bl	80111b8 <__assert_func>
 801084c:	f100 0514 	add.w	r5, r0, #20
 8010850:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010854:	462b      	mov	r3, r5
 8010856:	2200      	movs	r2, #0
 8010858:	4543      	cmp	r3, r8
 801085a:	d321      	bcc.n	80108a0 <__multiply+0x98>
 801085c:	f104 0314 	add.w	r3, r4, #20
 8010860:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010864:	f109 0314 	add.w	r3, r9, #20
 8010868:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801086c:	9202      	str	r2, [sp, #8]
 801086e:	1b3a      	subs	r2, r7, r4
 8010870:	3a15      	subs	r2, #21
 8010872:	f022 0203 	bic.w	r2, r2, #3
 8010876:	3204      	adds	r2, #4
 8010878:	f104 0115 	add.w	r1, r4, #21
 801087c:	428f      	cmp	r7, r1
 801087e:	bf38      	it	cc
 8010880:	2204      	movcc	r2, #4
 8010882:	9201      	str	r2, [sp, #4]
 8010884:	9a02      	ldr	r2, [sp, #8]
 8010886:	9303      	str	r3, [sp, #12]
 8010888:	429a      	cmp	r2, r3
 801088a:	d80c      	bhi.n	80108a6 <__multiply+0x9e>
 801088c:	2e00      	cmp	r6, #0
 801088e:	dd03      	ble.n	8010898 <__multiply+0x90>
 8010890:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010894:	2b00      	cmp	r3, #0
 8010896:	d05a      	beq.n	801094e <__multiply+0x146>
 8010898:	6106      	str	r6, [r0, #16]
 801089a:	b005      	add	sp, #20
 801089c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a0:	f843 2b04 	str.w	r2, [r3], #4
 80108a4:	e7d8      	b.n	8010858 <__multiply+0x50>
 80108a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80108aa:	f1ba 0f00 	cmp.w	sl, #0
 80108ae:	d024      	beq.n	80108fa <__multiply+0xf2>
 80108b0:	f104 0e14 	add.w	lr, r4, #20
 80108b4:	46a9      	mov	r9, r5
 80108b6:	f04f 0c00 	mov.w	ip, #0
 80108ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80108be:	f8d9 1000 	ldr.w	r1, [r9]
 80108c2:	fa1f fb82 	uxth.w	fp, r2
 80108c6:	b289      	uxth	r1, r1
 80108c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80108cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80108d0:	f8d9 2000 	ldr.w	r2, [r9]
 80108d4:	4461      	add	r1, ip
 80108d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80108da:	fb0a c20b 	mla	r2, sl, fp, ip
 80108de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80108e2:	b289      	uxth	r1, r1
 80108e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80108e8:	4577      	cmp	r7, lr
 80108ea:	f849 1b04 	str.w	r1, [r9], #4
 80108ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80108f2:	d8e2      	bhi.n	80108ba <__multiply+0xb2>
 80108f4:	9a01      	ldr	r2, [sp, #4]
 80108f6:	f845 c002 	str.w	ip, [r5, r2]
 80108fa:	9a03      	ldr	r2, [sp, #12]
 80108fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010900:	3304      	adds	r3, #4
 8010902:	f1b9 0f00 	cmp.w	r9, #0
 8010906:	d020      	beq.n	801094a <__multiply+0x142>
 8010908:	6829      	ldr	r1, [r5, #0]
 801090a:	f104 0c14 	add.w	ip, r4, #20
 801090e:	46ae      	mov	lr, r5
 8010910:	f04f 0a00 	mov.w	sl, #0
 8010914:	f8bc b000 	ldrh.w	fp, [ip]
 8010918:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801091c:	fb09 220b 	mla	r2, r9, fp, r2
 8010920:	4492      	add	sl, r2
 8010922:	b289      	uxth	r1, r1
 8010924:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010928:	f84e 1b04 	str.w	r1, [lr], #4
 801092c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010930:	f8be 1000 	ldrh.w	r1, [lr]
 8010934:	0c12      	lsrs	r2, r2, #16
 8010936:	fb09 1102 	mla	r1, r9, r2, r1
 801093a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801093e:	4567      	cmp	r7, ip
 8010940:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010944:	d8e6      	bhi.n	8010914 <__multiply+0x10c>
 8010946:	9a01      	ldr	r2, [sp, #4]
 8010948:	50a9      	str	r1, [r5, r2]
 801094a:	3504      	adds	r5, #4
 801094c:	e79a      	b.n	8010884 <__multiply+0x7c>
 801094e:	3e01      	subs	r6, #1
 8010950:	e79c      	b.n	801088c <__multiply+0x84>
 8010952:	bf00      	nop
 8010954:	080145d7 	.word	0x080145d7
 8010958:	080145e8 	.word	0x080145e8

0801095c <__pow5mult>:
 801095c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010960:	4615      	mov	r5, r2
 8010962:	f012 0203 	ands.w	r2, r2, #3
 8010966:	4606      	mov	r6, r0
 8010968:	460f      	mov	r7, r1
 801096a:	d007      	beq.n	801097c <__pow5mult+0x20>
 801096c:	4c25      	ldr	r4, [pc, #148]	; (8010a04 <__pow5mult+0xa8>)
 801096e:	3a01      	subs	r2, #1
 8010970:	2300      	movs	r3, #0
 8010972:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010976:	f7ff fe9b 	bl	80106b0 <__multadd>
 801097a:	4607      	mov	r7, r0
 801097c:	10ad      	asrs	r5, r5, #2
 801097e:	d03d      	beq.n	80109fc <__pow5mult+0xa0>
 8010980:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010982:	b97c      	cbnz	r4, 80109a4 <__pow5mult+0x48>
 8010984:	2010      	movs	r0, #16
 8010986:	f7ff fe29 	bl	80105dc <malloc>
 801098a:	4602      	mov	r2, r0
 801098c:	6270      	str	r0, [r6, #36]	; 0x24
 801098e:	b928      	cbnz	r0, 801099c <__pow5mult+0x40>
 8010990:	4b1d      	ldr	r3, [pc, #116]	; (8010a08 <__pow5mult+0xac>)
 8010992:	481e      	ldr	r0, [pc, #120]	; (8010a0c <__pow5mult+0xb0>)
 8010994:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010998:	f000 fc0e 	bl	80111b8 <__assert_func>
 801099c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80109a0:	6004      	str	r4, [r0, #0]
 80109a2:	60c4      	str	r4, [r0, #12]
 80109a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80109a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80109ac:	b94c      	cbnz	r4, 80109c2 <__pow5mult+0x66>
 80109ae:	f240 2171 	movw	r1, #625	; 0x271
 80109b2:	4630      	mov	r0, r6
 80109b4:	f7ff ff12 	bl	80107dc <__i2b>
 80109b8:	2300      	movs	r3, #0
 80109ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80109be:	4604      	mov	r4, r0
 80109c0:	6003      	str	r3, [r0, #0]
 80109c2:	f04f 0900 	mov.w	r9, #0
 80109c6:	07eb      	lsls	r3, r5, #31
 80109c8:	d50a      	bpl.n	80109e0 <__pow5mult+0x84>
 80109ca:	4639      	mov	r1, r7
 80109cc:	4622      	mov	r2, r4
 80109ce:	4630      	mov	r0, r6
 80109d0:	f7ff ff1a 	bl	8010808 <__multiply>
 80109d4:	4639      	mov	r1, r7
 80109d6:	4680      	mov	r8, r0
 80109d8:	4630      	mov	r0, r6
 80109da:	f7ff fe47 	bl	801066c <_Bfree>
 80109de:	4647      	mov	r7, r8
 80109e0:	106d      	asrs	r5, r5, #1
 80109e2:	d00b      	beq.n	80109fc <__pow5mult+0xa0>
 80109e4:	6820      	ldr	r0, [r4, #0]
 80109e6:	b938      	cbnz	r0, 80109f8 <__pow5mult+0x9c>
 80109e8:	4622      	mov	r2, r4
 80109ea:	4621      	mov	r1, r4
 80109ec:	4630      	mov	r0, r6
 80109ee:	f7ff ff0b 	bl	8010808 <__multiply>
 80109f2:	6020      	str	r0, [r4, #0]
 80109f4:	f8c0 9000 	str.w	r9, [r0]
 80109f8:	4604      	mov	r4, r0
 80109fa:	e7e4      	b.n	80109c6 <__pow5mult+0x6a>
 80109fc:	4638      	mov	r0, r7
 80109fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a02:	bf00      	nop
 8010a04:	08014738 	.word	0x08014738
 8010a08:	08014565 	.word	0x08014565
 8010a0c:	080145e8 	.word	0x080145e8

08010a10 <__lshift>:
 8010a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a14:	460c      	mov	r4, r1
 8010a16:	6849      	ldr	r1, [r1, #4]
 8010a18:	6923      	ldr	r3, [r4, #16]
 8010a1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010a1e:	68a3      	ldr	r3, [r4, #8]
 8010a20:	4607      	mov	r7, r0
 8010a22:	4691      	mov	r9, r2
 8010a24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010a28:	f108 0601 	add.w	r6, r8, #1
 8010a2c:	42b3      	cmp	r3, r6
 8010a2e:	db0b      	blt.n	8010a48 <__lshift+0x38>
 8010a30:	4638      	mov	r0, r7
 8010a32:	f7ff fddb 	bl	80105ec <_Balloc>
 8010a36:	4605      	mov	r5, r0
 8010a38:	b948      	cbnz	r0, 8010a4e <__lshift+0x3e>
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	4b2a      	ldr	r3, [pc, #168]	; (8010ae8 <__lshift+0xd8>)
 8010a3e:	482b      	ldr	r0, [pc, #172]	; (8010aec <__lshift+0xdc>)
 8010a40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010a44:	f000 fbb8 	bl	80111b8 <__assert_func>
 8010a48:	3101      	adds	r1, #1
 8010a4a:	005b      	lsls	r3, r3, #1
 8010a4c:	e7ee      	b.n	8010a2c <__lshift+0x1c>
 8010a4e:	2300      	movs	r3, #0
 8010a50:	f100 0114 	add.w	r1, r0, #20
 8010a54:	f100 0210 	add.w	r2, r0, #16
 8010a58:	4618      	mov	r0, r3
 8010a5a:	4553      	cmp	r3, sl
 8010a5c:	db37      	blt.n	8010ace <__lshift+0xbe>
 8010a5e:	6920      	ldr	r0, [r4, #16]
 8010a60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a64:	f104 0314 	add.w	r3, r4, #20
 8010a68:	f019 091f 	ands.w	r9, r9, #31
 8010a6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010a70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010a74:	d02f      	beq.n	8010ad6 <__lshift+0xc6>
 8010a76:	f1c9 0e20 	rsb	lr, r9, #32
 8010a7a:	468a      	mov	sl, r1
 8010a7c:	f04f 0c00 	mov.w	ip, #0
 8010a80:	681a      	ldr	r2, [r3, #0]
 8010a82:	fa02 f209 	lsl.w	r2, r2, r9
 8010a86:	ea42 020c 	orr.w	r2, r2, ip
 8010a8a:	f84a 2b04 	str.w	r2, [sl], #4
 8010a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a92:	4298      	cmp	r0, r3
 8010a94:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010a98:	d8f2      	bhi.n	8010a80 <__lshift+0x70>
 8010a9a:	1b03      	subs	r3, r0, r4
 8010a9c:	3b15      	subs	r3, #21
 8010a9e:	f023 0303 	bic.w	r3, r3, #3
 8010aa2:	3304      	adds	r3, #4
 8010aa4:	f104 0215 	add.w	r2, r4, #21
 8010aa8:	4290      	cmp	r0, r2
 8010aaa:	bf38      	it	cc
 8010aac:	2304      	movcc	r3, #4
 8010aae:	f841 c003 	str.w	ip, [r1, r3]
 8010ab2:	f1bc 0f00 	cmp.w	ip, #0
 8010ab6:	d001      	beq.n	8010abc <__lshift+0xac>
 8010ab8:	f108 0602 	add.w	r6, r8, #2
 8010abc:	3e01      	subs	r6, #1
 8010abe:	4638      	mov	r0, r7
 8010ac0:	612e      	str	r6, [r5, #16]
 8010ac2:	4621      	mov	r1, r4
 8010ac4:	f7ff fdd2 	bl	801066c <_Bfree>
 8010ac8:	4628      	mov	r0, r5
 8010aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ace:	f842 0f04 	str.w	r0, [r2, #4]!
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	e7c1      	b.n	8010a5a <__lshift+0x4a>
 8010ad6:	3904      	subs	r1, #4
 8010ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010adc:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ae0:	4298      	cmp	r0, r3
 8010ae2:	d8f9      	bhi.n	8010ad8 <__lshift+0xc8>
 8010ae4:	e7ea      	b.n	8010abc <__lshift+0xac>
 8010ae6:	bf00      	nop
 8010ae8:	080145d7 	.word	0x080145d7
 8010aec:	080145e8 	.word	0x080145e8

08010af0 <__mcmp>:
 8010af0:	b530      	push	{r4, r5, lr}
 8010af2:	6902      	ldr	r2, [r0, #16]
 8010af4:	690c      	ldr	r4, [r1, #16]
 8010af6:	1b12      	subs	r2, r2, r4
 8010af8:	d10e      	bne.n	8010b18 <__mcmp+0x28>
 8010afa:	f100 0314 	add.w	r3, r0, #20
 8010afe:	3114      	adds	r1, #20
 8010b00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010b04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010b08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010b0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010b10:	42a5      	cmp	r5, r4
 8010b12:	d003      	beq.n	8010b1c <__mcmp+0x2c>
 8010b14:	d305      	bcc.n	8010b22 <__mcmp+0x32>
 8010b16:	2201      	movs	r2, #1
 8010b18:	4610      	mov	r0, r2
 8010b1a:	bd30      	pop	{r4, r5, pc}
 8010b1c:	4283      	cmp	r3, r0
 8010b1e:	d3f3      	bcc.n	8010b08 <__mcmp+0x18>
 8010b20:	e7fa      	b.n	8010b18 <__mcmp+0x28>
 8010b22:	f04f 32ff 	mov.w	r2, #4294967295
 8010b26:	e7f7      	b.n	8010b18 <__mcmp+0x28>

08010b28 <__mdiff>:
 8010b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b2c:	460c      	mov	r4, r1
 8010b2e:	4606      	mov	r6, r0
 8010b30:	4611      	mov	r1, r2
 8010b32:	4620      	mov	r0, r4
 8010b34:	4690      	mov	r8, r2
 8010b36:	f7ff ffdb 	bl	8010af0 <__mcmp>
 8010b3a:	1e05      	subs	r5, r0, #0
 8010b3c:	d110      	bne.n	8010b60 <__mdiff+0x38>
 8010b3e:	4629      	mov	r1, r5
 8010b40:	4630      	mov	r0, r6
 8010b42:	f7ff fd53 	bl	80105ec <_Balloc>
 8010b46:	b930      	cbnz	r0, 8010b56 <__mdiff+0x2e>
 8010b48:	4b3a      	ldr	r3, [pc, #232]	; (8010c34 <__mdiff+0x10c>)
 8010b4a:	4602      	mov	r2, r0
 8010b4c:	f240 2132 	movw	r1, #562	; 0x232
 8010b50:	4839      	ldr	r0, [pc, #228]	; (8010c38 <__mdiff+0x110>)
 8010b52:	f000 fb31 	bl	80111b8 <__assert_func>
 8010b56:	2301      	movs	r3, #1
 8010b58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010b5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b60:	bfa4      	itt	ge
 8010b62:	4643      	movge	r3, r8
 8010b64:	46a0      	movge	r8, r4
 8010b66:	4630      	mov	r0, r6
 8010b68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010b6c:	bfa6      	itte	ge
 8010b6e:	461c      	movge	r4, r3
 8010b70:	2500      	movge	r5, #0
 8010b72:	2501      	movlt	r5, #1
 8010b74:	f7ff fd3a 	bl	80105ec <_Balloc>
 8010b78:	b920      	cbnz	r0, 8010b84 <__mdiff+0x5c>
 8010b7a:	4b2e      	ldr	r3, [pc, #184]	; (8010c34 <__mdiff+0x10c>)
 8010b7c:	4602      	mov	r2, r0
 8010b7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010b82:	e7e5      	b.n	8010b50 <__mdiff+0x28>
 8010b84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010b88:	6926      	ldr	r6, [r4, #16]
 8010b8a:	60c5      	str	r5, [r0, #12]
 8010b8c:	f104 0914 	add.w	r9, r4, #20
 8010b90:	f108 0514 	add.w	r5, r8, #20
 8010b94:	f100 0e14 	add.w	lr, r0, #20
 8010b98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010b9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010ba0:	f108 0210 	add.w	r2, r8, #16
 8010ba4:	46f2      	mov	sl, lr
 8010ba6:	2100      	movs	r1, #0
 8010ba8:	f859 3b04 	ldr.w	r3, [r9], #4
 8010bac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010bb0:	fa1f f883 	uxth.w	r8, r3
 8010bb4:	fa11 f18b 	uxtah	r1, r1, fp
 8010bb8:	0c1b      	lsrs	r3, r3, #16
 8010bba:	eba1 0808 	sub.w	r8, r1, r8
 8010bbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010bc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010bc6:	fa1f f888 	uxth.w	r8, r8
 8010bca:	1419      	asrs	r1, r3, #16
 8010bcc:	454e      	cmp	r6, r9
 8010bce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010bd2:	f84a 3b04 	str.w	r3, [sl], #4
 8010bd6:	d8e7      	bhi.n	8010ba8 <__mdiff+0x80>
 8010bd8:	1b33      	subs	r3, r6, r4
 8010bda:	3b15      	subs	r3, #21
 8010bdc:	f023 0303 	bic.w	r3, r3, #3
 8010be0:	3304      	adds	r3, #4
 8010be2:	3415      	adds	r4, #21
 8010be4:	42a6      	cmp	r6, r4
 8010be6:	bf38      	it	cc
 8010be8:	2304      	movcc	r3, #4
 8010bea:	441d      	add	r5, r3
 8010bec:	4473      	add	r3, lr
 8010bee:	469e      	mov	lr, r3
 8010bf0:	462e      	mov	r6, r5
 8010bf2:	4566      	cmp	r6, ip
 8010bf4:	d30e      	bcc.n	8010c14 <__mdiff+0xec>
 8010bf6:	f10c 0203 	add.w	r2, ip, #3
 8010bfa:	1b52      	subs	r2, r2, r5
 8010bfc:	f022 0203 	bic.w	r2, r2, #3
 8010c00:	3d03      	subs	r5, #3
 8010c02:	45ac      	cmp	ip, r5
 8010c04:	bf38      	it	cc
 8010c06:	2200      	movcc	r2, #0
 8010c08:	441a      	add	r2, r3
 8010c0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010c0e:	b17b      	cbz	r3, 8010c30 <__mdiff+0x108>
 8010c10:	6107      	str	r7, [r0, #16]
 8010c12:	e7a3      	b.n	8010b5c <__mdiff+0x34>
 8010c14:	f856 8b04 	ldr.w	r8, [r6], #4
 8010c18:	fa11 f288 	uxtah	r2, r1, r8
 8010c1c:	1414      	asrs	r4, r2, #16
 8010c1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010c22:	b292      	uxth	r2, r2
 8010c24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010c28:	f84e 2b04 	str.w	r2, [lr], #4
 8010c2c:	1421      	asrs	r1, r4, #16
 8010c2e:	e7e0      	b.n	8010bf2 <__mdiff+0xca>
 8010c30:	3f01      	subs	r7, #1
 8010c32:	e7ea      	b.n	8010c0a <__mdiff+0xe2>
 8010c34:	080145d7 	.word	0x080145d7
 8010c38:	080145e8 	.word	0x080145e8

08010c3c <__d2b>:
 8010c3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c40:	4689      	mov	r9, r1
 8010c42:	2101      	movs	r1, #1
 8010c44:	ec57 6b10 	vmov	r6, r7, d0
 8010c48:	4690      	mov	r8, r2
 8010c4a:	f7ff fccf 	bl	80105ec <_Balloc>
 8010c4e:	4604      	mov	r4, r0
 8010c50:	b930      	cbnz	r0, 8010c60 <__d2b+0x24>
 8010c52:	4602      	mov	r2, r0
 8010c54:	4b25      	ldr	r3, [pc, #148]	; (8010cec <__d2b+0xb0>)
 8010c56:	4826      	ldr	r0, [pc, #152]	; (8010cf0 <__d2b+0xb4>)
 8010c58:	f240 310a 	movw	r1, #778	; 0x30a
 8010c5c:	f000 faac 	bl	80111b8 <__assert_func>
 8010c60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010c64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010c68:	bb35      	cbnz	r5, 8010cb8 <__d2b+0x7c>
 8010c6a:	2e00      	cmp	r6, #0
 8010c6c:	9301      	str	r3, [sp, #4]
 8010c6e:	d028      	beq.n	8010cc2 <__d2b+0x86>
 8010c70:	4668      	mov	r0, sp
 8010c72:	9600      	str	r6, [sp, #0]
 8010c74:	f7ff fd82 	bl	801077c <__lo0bits>
 8010c78:	9900      	ldr	r1, [sp, #0]
 8010c7a:	b300      	cbz	r0, 8010cbe <__d2b+0x82>
 8010c7c:	9a01      	ldr	r2, [sp, #4]
 8010c7e:	f1c0 0320 	rsb	r3, r0, #32
 8010c82:	fa02 f303 	lsl.w	r3, r2, r3
 8010c86:	430b      	orrs	r3, r1
 8010c88:	40c2      	lsrs	r2, r0
 8010c8a:	6163      	str	r3, [r4, #20]
 8010c8c:	9201      	str	r2, [sp, #4]
 8010c8e:	9b01      	ldr	r3, [sp, #4]
 8010c90:	61a3      	str	r3, [r4, #24]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	bf14      	ite	ne
 8010c96:	2202      	movne	r2, #2
 8010c98:	2201      	moveq	r2, #1
 8010c9a:	6122      	str	r2, [r4, #16]
 8010c9c:	b1d5      	cbz	r5, 8010cd4 <__d2b+0x98>
 8010c9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010ca2:	4405      	add	r5, r0
 8010ca4:	f8c9 5000 	str.w	r5, [r9]
 8010ca8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010cac:	f8c8 0000 	str.w	r0, [r8]
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	b003      	add	sp, #12
 8010cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010cbc:	e7d5      	b.n	8010c6a <__d2b+0x2e>
 8010cbe:	6161      	str	r1, [r4, #20]
 8010cc0:	e7e5      	b.n	8010c8e <__d2b+0x52>
 8010cc2:	a801      	add	r0, sp, #4
 8010cc4:	f7ff fd5a 	bl	801077c <__lo0bits>
 8010cc8:	9b01      	ldr	r3, [sp, #4]
 8010cca:	6163      	str	r3, [r4, #20]
 8010ccc:	2201      	movs	r2, #1
 8010cce:	6122      	str	r2, [r4, #16]
 8010cd0:	3020      	adds	r0, #32
 8010cd2:	e7e3      	b.n	8010c9c <__d2b+0x60>
 8010cd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010cd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010cdc:	f8c9 0000 	str.w	r0, [r9]
 8010ce0:	6918      	ldr	r0, [r3, #16]
 8010ce2:	f7ff fd2b 	bl	801073c <__hi0bits>
 8010ce6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010cea:	e7df      	b.n	8010cac <__d2b+0x70>
 8010cec:	080145d7 	.word	0x080145d7
 8010cf0:	080145e8 	.word	0x080145e8

08010cf4 <_calloc_r>:
 8010cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010cf6:	fba1 2402 	umull	r2, r4, r1, r2
 8010cfa:	b94c      	cbnz	r4, 8010d10 <_calloc_r+0x1c>
 8010cfc:	4611      	mov	r1, r2
 8010cfe:	9201      	str	r2, [sp, #4]
 8010d00:	f000 f87a 	bl	8010df8 <_malloc_r>
 8010d04:	9a01      	ldr	r2, [sp, #4]
 8010d06:	4605      	mov	r5, r0
 8010d08:	b930      	cbnz	r0, 8010d18 <_calloc_r+0x24>
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	b003      	add	sp, #12
 8010d0e:	bd30      	pop	{r4, r5, pc}
 8010d10:	220c      	movs	r2, #12
 8010d12:	6002      	str	r2, [r0, #0]
 8010d14:	2500      	movs	r5, #0
 8010d16:	e7f8      	b.n	8010d0a <_calloc_r+0x16>
 8010d18:	4621      	mov	r1, r4
 8010d1a:	f7fe f94f 	bl	800efbc <memset>
 8010d1e:	e7f4      	b.n	8010d0a <_calloc_r+0x16>

08010d20 <_free_r>:
 8010d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d22:	2900      	cmp	r1, #0
 8010d24:	d044      	beq.n	8010db0 <_free_r+0x90>
 8010d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d2a:	9001      	str	r0, [sp, #4]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f1a1 0404 	sub.w	r4, r1, #4
 8010d32:	bfb8      	it	lt
 8010d34:	18e4      	addlt	r4, r4, r3
 8010d36:	f000 fa9b 	bl	8011270 <__malloc_lock>
 8010d3a:	4a1e      	ldr	r2, [pc, #120]	; (8010db4 <_free_r+0x94>)
 8010d3c:	9801      	ldr	r0, [sp, #4]
 8010d3e:	6813      	ldr	r3, [r2, #0]
 8010d40:	b933      	cbnz	r3, 8010d50 <_free_r+0x30>
 8010d42:	6063      	str	r3, [r4, #4]
 8010d44:	6014      	str	r4, [r2, #0]
 8010d46:	b003      	add	sp, #12
 8010d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d4c:	f000 ba96 	b.w	801127c <__malloc_unlock>
 8010d50:	42a3      	cmp	r3, r4
 8010d52:	d908      	bls.n	8010d66 <_free_r+0x46>
 8010d54:	6825      	ldr	r5, [r4, #0]
 8010d56:	1961      	adds	r1, r4, r5
 8010d58:	428b      	cmp	r3, r1
 8010d5a:	bf01      	itttt	eq
 8010d5c:	6819      	ldreq	r1, [r3, #0]
 8010d5e:	685b      	ldreq	r3, [r3, #4]
 8010d60:	1949      	addeq	r1, r1, r5
 8010d62:	6021      	streq	r1, [r4, #0]
 8010d64:	e7ed      	b.n	8010d42 <_free_r+0x22>
 8010d66:	461a      	mov	r2, r3
 8010d68:	685b      	ldr	r3, [r3, #4]
 8010d6a:	b10b      	cbz	r3, 8010d70 <_free_r+0x50>
 8010d6c:	42a3      	cmp	r3, r4
 8010d6e:	d9fa      	bls.n	8010d66 <_free_r+0x46>
 8010d70:	6811      	ldr	r1, [r2, #0]
 8010d72:	1855      	adds	r5, r2, r1
 8010d74:	42a5      	cmp	r5, r4
 8010d76:	d10b      	bne.n	8010d90 <_free_r+0x70>
 8010d78:	6824      	ldr	r4, [r4, #0]
 8010d7a:	4421      	add	r1, r4
 8010d7c:	1854      	adds	r4, r2, r1
 8010d7e:	42a3      	cmp	r3, r4
 8010d80:	6011      	str	r1, [r2, #0]
 8010d82:	d1e0      	bne.n	8010d46 <_free_r+0x26>
 8010d84:	681c      	ldr	r4, [r3, #0]
 8010d86:	685b      	ldr	r3, [r3, #4]
 8010d88:	6053      	str	r3, [r2, #4]
 8010d8a:	4421      	add	r1, r4
 8010d8c:	6011      	str	r1, [r2, #0]
 8010d8e:	e7da      	b.n	8010d46 <_free_r+0x26>
 8010d90:	d902      	bls.n	8010d98 <_free_r+0x78>
 8010d92:	230c      	movs	r3, #12
 8010d94:	6003      	str	r3, [r0, #0]
 8010d96:	e7d6      	b.n	8010d46 <_free_r+0x26>
 8010d98:	6825      	ldr	r5, [r4, #0]
 8010d9a:	1961      	adds	r1, r4, r5
 8010d9c:	428b      	cmp	r3, r1
 8010d9e:	bf04      	itt	eq
 8010da0:	6819      	ldreq	r1, [r3, #0]
 8010da2:	685b      	ldreq	r3, [r3, #4]
 8010da4:	6063      	str	r3, [r4, #4]
 8010da6:	bf04      	itt	eq
 8010da8:	1949      	addeq	r1, r1, r5
 8010daa:	6021      	streq	r1, [r4, #0]
 8010dac:	6054      	str	r4, [r2, #4]
 8010dae:	e7ca      	b.n	8010d46 <_free_r+0x26>
 8010db0:	b003      	add	sp, #12
 8010db2:	bd30      	pop	{r4, r5, pc}
 8010db4:	20004930 	.word	0x20004930

08010db8 <sbrk_aligned>:
 8010db8:	b570      	push	{r4, r5, r6, lr}
 8010dba:	4e0e      	ldr	r6, [pc, #56]	; (8010df4 <sbrk_aligned+0x3c>)
 8010dbc:	460c      	mov	r4, r1
 8010dbe:	6831      	ldr	r1, [r6, #0]
 8010dc0:	4605      	mov	r5, r0
 8010dc2:	b911      	cbnz	r1, 8010dca <sbrk_aligned+0x12>
 8010dc4:	f000 f9e8 	bl	8011198 <_sbrk_r>
 8010dc8:	6030      	str	r0, [r6, #0]
 8010dca:	4621      	mov	r1, r4
 8010dcc:	4628      	mov	r0, r5
 8010dce:	f000 f9e3 	bl	8011198 <_sbrk_r>
 8010dd2:	1c43      	adds	r3, r0, #1
 8010dd4:	d00a      	beq.n	8010dec <sbrk_aligned+0x34>
 8010dd6:	1cc4      	adds	r4, r0, #3
 8010dd8:	f024 0403 	bic.w	r4, r4, #3
 8010ddc:	42a0      	cmp	r0, r4
 8010dde:	d007      	beq.n	8010df0 <sbrk_aligned+0x38>
 8010de0:	1a21      	subs	r1, r4, r0
 8010de2:	4628      	mov	r0, r5
 8010de4:	f000 f9d8 	bl	8011198 <_sbrk_r>
 8010de8:	3001      	adds	r0, #1
 8010dea:	d101      	bne.n	8010df0 <sbrk_aligned+0x38>
 8010dec:	f04f 34ff 	mov.w	r4, #4294967295
 8010df0:	4620      	mov	r0, r4
 8010df2:	bd70      	pop	{r4, r5, r6, pc}
 8010df4:	20004934 	.word	0x20004934

08010df8 <_malloc_r>:
 8010df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dfc:	1ccd      	adds	r5, r1, #3
 8010dfe:	f025 0503 	bic.w	r5, r5, #3
 8010e02:	3508      	adds	r5, #8
 8010e04:	2d0c      	cmp	r5, #12
 8010e06:	bf38      	it	cc
 8010e08:	250c      	movcc	r5, #12
 8010e0a:	2d00      	cmp	r5, #0
 8010e0c:	4607      	mov	r7, r0
 8010e0e:	db01      	blt.n	8010e14 <_malloc_r+0x1c>
 8010e10:	42a9      	cmp	r1, r5
 8010e12:	d905      	bls.n	8010e20 <_malloc_r+0x28>
 8010e14:	230c      	movs	r3, #12
 8010e16:	603b      	str	r3, [r7, #0]
 8010e18:	2600      	movs	r6, #0
 8010e1a:	4630      	mov	r0, r6
 8010e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e20:	4e2e      	ldr	r6, [pc, #184]	; (8010edc <_malloc_r+0xe4>)
 8010e22:	f000 fa25 	bl	8011270 <__malloc_lock>
 8010e26:	6833      	ldr	r3, [r6, #0]
 8010e28:	461c      	mov	r4, r3
 8010e2a:	bb34      	cbnz	r4, 8010e7a <_malloc_r+0x82>
 8010e2c:	4629      	mov	r1, r5
 8010e2e:	4638      	mov	r0, r7
 8010e30:	f7ff ffc2 	bl	8010db8 <sbrk_aligned>
 8010e34:	1c43      	adds	r3, r0, #1
 8010e36:	4604      	mov	r4, r0
 8010e38:	d14d      	bne.n	8010ed6 <_malloc_r+0xde>
 8010e3a:	6834      	ldr	r4, [r6, #0]
 8010e3c:	4626      	mov	r6, r4
 8010e3e:	2e00      	cmp	r6, #0
 8010e40:	d140      	bne.n	8010ec4 <_malloc_r+0xcc>
 8010e42:	6823      	ldr	r3, [r4, #0]
 8010e44:	4631      	mov	r1, r6
 8010e46:	4638      	mov	r0, r7
 8010e48:	eb04 0803 	add.w	r8, r4, r3
 8010e4c:	f000 f9a4 	bl	8011198 <_sbrk_r>
 8010e50:	4580      	cmp	r8, r0
 8010e52:	d13a      	bne.n	8010eca <_malloc_r+0xd2>
 8010e54:	6821      	ldr	r1, [r4, #0]
 8010e56:	3503      	adds	r5, #3
 8010e58:	1a6d      	subs	r5, r5, r1
 8010e5a:	f025 0503 	bic.w	r5, r5, #3
 8010e5e:	3508      	adds	r5, #8
 8010e60:	2d0c      	cmp	r5, #12
 8010e62:	bf38      	it	cc
 8010e64:	250c      	movcc	r5, #12
 8010e66:	4629      	mov	r1, r5
 8010e68:	4638      	mov	r0, r7
 8010e6a:	f7ff ffa5 	bl	8010db8 <sbrk_aligned>
 8010e6e:	3001      	adds	r0, #1
 8010e70:	d02b      	beq.n	8010eca <_malloc_r+0xd2>
 8010e72:	6823      	ldr	r3, [r4, #0]
 8010e74:	442b      	add	r3, r5
 8010e76:	6023      	str	r3, [r4, #0]
 8010e78:	e00e      	b.n	8010e98 <_malloc_r+0xa0>
 8010e7a:	6822      	ldr	r2, [r4, #0]
 8010e7c:	1b52      	subs	r2, r2, r5
 8010e7e:	d41e      	bmi.n	8010ebe <_malloc_r+0xc6>
 8010e80:	2a0b      	cmp	r2, #11
 8010e82:	d916      	bls.n	8010eb2 <_malloc_r+0xba>
 8010e84:	1961      	adds	r1, r4, r5
 8010e86:	42a3      	cmp	r3, r4
 8010e88:	6025      	str	r5, [r4, #0]
 8010e8a:	bf18      	it	ne
 8010e8c:	6059      	strne	r1, [r3, #4]
 8010e8e:	6863      	ldr	r3, [r4, #4]
 8010e90:	bf08      	it	eq
 8010e92:	6031      	streq	r1, [r6, #0]
 8010e94:	5162      	str	r2, [r4, r5]
 8010e96:	604b      	str	r3, [r1, #4]
 8010e98:	4638      	mov	r0, r7
 8010e9a:	f104 060b 	add.w	r6, r4, #11
 8010e9e:	f000 f9ed 	bl	801127c <__malloc_unlock>
 8010ea2:	f026 0607 	bic.w	r6, r6, #7
 8010ea6:	1d23      	adds	r3, r4, #4
 8010ea8:	1af2      	subs	r2, r6, r3
 8010eaa:	d0b6      	beq.n	8010e1a <_malloc_r+0x22>
 8010eac:	1b9b      	subs	r3, r3, r6
 8010eae:	50a3      	str	r3, [r4, r2]
 8010eb0:	e7b3      	b.n	8010e1a <_malloc_r+0x22>
 8010eb2:	6862      	ldr	r2, [r4, #4]
 8010eb4:	42a3      	cmp	r3, r4
 8010eb6:	bf0c      	ite	eq
 8010eb8:	6032      	streq	r2, [r6, #0]
 8010eba:	605a      	strne	r2, [r3, #4]
 8010ebc:	e7ec      	b.n	8010e98 <_malloc_r+0xa0>
 8010ebe:	4623      	mov	r3, r4
 8010ec0:	6864      	ldr	r4, [r4, #4]
 8010ec2:	e7b2      	b.n	8010e2a <_malloc_r+0x32>
 8010ec4:	4634      	mov	r4, r6
 8010ec6:	6876      	ldr	r6, [r6, #4]
 8010ec8:	e7b9      	b.n	8010e3e <_malloc_r+0x46>
 8010eca:	230c      	movs	r3, #12
 8010ecc:	603b      	str	r3, [r7, #0]
 8010ece:	4638      	mov	r0, r7
 8010ed0:	f000 f9d4 	bl	801127c <__malloc_unlock>
 8010ed4:	e7a1      	b.n	8010e1a <_malloc_r+0x22>
 8010ed6:	6025      	str	r5, [r4, #0]
 8010ed8:	e7de      	b.n	8010e98 <_malloc_r+0xa0>
 8010eda:	bf00      	nop
 8010edc:	20004930 	.word	0x20004930

08010ee0 <__ssputs_r>:
 8010ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ee4:	688e      	ldr	r6, [r1, #8]
 8010ee6:	429e      	cmp	r6, r3
 8010ee8:	4682      	mov	sl, r0
 8010eea:	460c      	mov	r4, r1
 8010eec:	4690      	mov	r8, r2
 8010eee:	461f      	mov	r7, r3
 8010ef0:	d838      	bhi.n	8010f64 <__ssputs_r+0x84>
 8010ef2:	898a      	ldrh	r2, [r1, #12]
 8010ef4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ef8:	d032      	beq.n	8010f60 <__ssputs_r+0x80>
 8010efa:	6825      	ldr	r5, [r4, #0]
 8010efc:	6909      	ldr	r1, [r1, #16]
 8010efe:	eba5 0901 	sub.w	r9, r5, r1
 8010f02:	6965      	ldr	r5, [r4, #20]
 8010f04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	444b      	add	r3, r9
 8010f10:	106d      	asrs	r5, r5, #1
 8010f12:	429d      	cmp	r5, r3
 8010f14:	bf38      	it	cc
 8010f16:	461d      	movcc	r5, r3
 8010f18:	0553      	lsls	r3, r2, #21
 8010f1a:	d531      	bpl.n	8010f80 <__ssputs_r+0xa0>
 8010f1c:	4629      	mov	r1, r5
 8010f1e:	f7ff ff6b 	bl	8010df8 <_malloc_r>
 8010f22:	4606      	mov	r6, r0
 8010f24:	b950      	cbnz	r0, 8010f3c <__ssputs_r+0x5c>
 8010f26:	230c      	movs	r3, #12
 8010f28:	f8ca 3000 	str.w	r3, [sl]
 8010f2c:	89a3      	ldrh	r3, [r4, #12]
 8010f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f32:	81a3      	strh	r3, [r4, #12]
 8010f34:	f04f 30ff 	mov.w	r0, #4294967295
 8010f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f3c:	6921      	ldr	r1, [r4, #16]
 8010f3e:	464a      	mov	r2, r9
 8010f40:	f7fe f82e 	bl	800efa0 <memcpy>
 8010f44:	89a3      	ldrh	r3, [r4, #12]
 8010f46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f4e:	81a3      	strh	r3, [r4, #12]
 8010f50:	6126      	str	r6, [r4, #16]
 8010f52:	6165      	str	r5, [r4, #20]
 8010f54:	444e      	add	r6, r9
 8010f56:	eba5 0509 	sub.w	r5, r5, r9
 8010f5a:	6026      	str	r6, [r4, #0]
 8010f5c:	60a5      	str	r5, [r4, #8]
 8010f5e:	463e      	mov	r6, r7
 8010f60:	42be      	cmp	r6, r7
 8010f62:	d900      	bls.n	8010f66 <__ssputs_r+0x86>
 8010f64:	463e      	mov	r6, r7
 8010f66:	6820      	ldr	r0, [r4, #0]
 8010f68:	4632      	mov	r2, r6
 8010f6a:	4641      	mov	r1, r8
 8010f6c:	f000 f966 	bl	801123c <memmove>
 8010f70:	68a3      	ldr	r3, [r4, #8]
 8010f72:	1b9b      	subs	r3, r3, r6
 8010f74:	60a3      	str	r3, [r4, #8]
 8010f76:	6823      	ldr	r3, [r4, #0]
 8010f78:	4433      	add	r3, r6
 8010f7a:	6023      	str	r3, [r4, #0]
 8010f7c:	2000      	movs	r0, #0
 8010f7e:	e7db      	b.n	8010f38 <__ssputs_r+0x58>
 8010f80:	462a      	mov	r2, r5
 8010f82:	f000 f981 	bl	8011288 <_realloc_r>
 8010f86:	4606      	mov	r6, r0
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	d1e1      	bne.n	8010f50 <__ssputs_r+0x70>
 8010f8c:	6921      	ldr	r1, [r4, #16]
 8010f8e:	4650      	mov	r0, sl
 8010f90:	f7ff fec6 	bl	8010d20 <_free_r>
 8010f94:	e7c7      	b.n	8010f26 <__ssputs_r+0x46>
	...

08010f98 <_svfiprintf_r>:
 8010f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f9c:	4698      	mov	r8, r3
 8010f9e:	898b      	ldrh	r3, [r1, #12]
 8010fa0:	061b      	lsls	r3, r3, #24
 8010fa2:	b09d      	sub	sp, #116	; 0x74
 8010fa4:	4607      	mov	r7, r0
 8010fa6:	460d      	mov	r5, r1
 8010fa8:	4614      	mov	r4, r2
 8010faa:	d50e      	bpl.n	8010fca <_svfiprintf_r+0x32>
 8010fac:	690b      	ldr	r3, [r1, #16]
 8010fae:	b963      	cbnz	r3, 8010fca <_svfiprintf_r+0x32>
 8010fb0:	2140      	movs	r1, #64	; 0x40
 8010fb2:	f7ff ff21 	bl	8010df8 <_malloc_r>
 8010fb6:	6028      	str	r0, [r5, #0]
 8010fb8:	6128      	str	r0, [r5, #16]
 8010fba:	b920      	cbnz	r0, 8010fc6 <_svfiprintf_r+0x2e>
 8010fbc:	230c      	movs	r3, #12
 8010fbe:	603b      	str	r3, [r7, #0]
 8010fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8010fc4:	e0d1      	b.n	801116a <_svfiprintf_r+0x1d2>
 8010fc6:	2340      	movs	r3, #64	; 0x40
 8010fc8:	616b      	str	r3, [r5, #20]
 8010fca:	2300      	movs	r3, #0
 8010fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8010fce:	2320      	movs	r3, #32
 8010fd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010fd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010fd8:	2330      	movs	r3, #48	; 0x30
 8010fda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011184 <_svfiprintf_r+0x1ec>
 8010fde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010fe2:	f04f 0901 	mov.w	r9, #1
 8010fe6:	4623      	mov	r3, r4
 8010fe8:	469a      	mov	sl, r3
 8010fea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fee:	b10a      	cbz	r2, 8010ff4 <_svfiprintf_r+0x5c>
 8010ff0:	2a25      	cmp	r2, #37	; 0x25
 8010ff2:	d1f9      	bne.n	8010fe8 <_svfiprintf_r+0x50>
 8010ff4:	ebba 0b04 	subs.w	fp, sl, r4
 8010ff8:	d00b      	beq.n	8011012 <_svfiprintf_r+0x7a>
 8010ffa:	465b      	mov	r3, fp
 8010ffc:	4622      	mov	r2, r4
 8010ffe:	4629      	mov	r1, r5
 8011000:	4638      	mov	r0, r7
 8011002:	f7ff ff6d 	bl	8010ee0 <__ssputs_r>
 8011006:	3001      	adds	r0, #1
 8011008:	f000 80aa 	beq.w	8011160 <_svfiprintf_r+0x1c8>
 801100c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801100e:	445a      	add	r2, fp
 8011010:	9209      	str	r2, [sp, #36]	; 0x24
 8011012:	f89a 3000 	ldrb.w	r3, [sl]
 8011016:	2b00      	cmp	r3, #0
 8011018:	f000 80a2 	beq.w	8011160 <_svfiprintf_r+0x1c8>
 801101c:	2300      	movs	r3, #0
 801101e:	f04f 32ff 	mov.w	r2, #4294967295
 8011022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011026:	f10a 0a01 	add.w	sl, sl, #1
 801102a:	9304      	str	r3, [sp, #16]
 801102c:	9307      	str	r3, [sp, #28]
 801102e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011032:	931a      	str	r3, [sp, #104]	; 0x68
 8011034:	4654      	mov	r4, sl
 8011036:	2205      	movs	r2, #5
 8011038:	f814 1b01 	ldrb.w	r1, [r4], #1
 801103c:	4851      	ldr	r0, [pc, #324]	; (8011184 <_svfiprintf_r+0x1ec>)
 801103e:	f7ef f8cf 	bl	80001e0 <memchr>
 8011042:	9a04      	ldr	r2, [sp, #16]
 8011044:	b9d8      	cbnz	r0, 801107e <_svfiprintf_r+0xe6>
 8011046:	06d0      	lsls	r0, r2, #27
 8011048:	bf44      	itt	mi
 801104a:	2320      	movmi	r3, #32
 801104c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011050:	0711      	lsls	r1, r2, #28
 8011052:	bf44      	itt	mi
 8011054:	232b      	movmi	r3, #43	; 0x2b
 8011056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801105a:	f89a 3000 	ldrb.w	r3, [sl]
 801105e:	2b2a      	cmp	r3, #42	; 0x2a
 8011060:	d015      	beq.n	801108e <_svfiprintf_r+0xf6>
 8011062:	9a07      	ldr	r2, [sp, #28]
 8011064:	4654      	mov	r4, sl
 8011066:	2000      	movs	r0, #0
 8011068:	f04f 0c0a 	mov.w	ip, #10
 801106c:	4621      	mov	r1, r4
 801106e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011072:	3b30      	subs	r3, #48	; 0x30
 8011074:	2b09      	cmp	r3, #9
 8011076:	d94e      	bls.n	8011116 <_svfiprintf_r+0x17e>
 8011078:	b1b0      	cbz	r0, 80110a8 <_svfiprintf_r+0x110>
 801107a:	9207      	str	r2, [sp, #28]
 801107c:	e014      	b.n	80110a8 <_svfiprintf_r+0x110>
 801107e:	eba0 0308 	sub.w	r3, r0, r8
 8011082:	fa09 f303 	lsl.w	r3, r9, r3
 8011086:	4313      	orrs	r3, r2
 8011088:	9304      	str	r3, [sp, #16]
 801108a:	46a2      	mov	sl, r4
 801108c:	e7d2      	b.n	8011034 <_svfiprintf_r+0x9c>
 801108e:	9b03      	ldr	r3, [sp, #12]
 8011090:	1d19      	adds	r1, r3, #4
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	9103      	str	r1, [sp, #12]
 8011096:	2b00      	cmp	r3, #0
 8011098:	bfbb      	ittet	lt
 801109a:	425b      	neglt	r3, r3
 801109c:	f042 0202 	orrlt.w	r2, r2, #2
 80110a0:	9307      	strge	r3, [sp, #28]
 80110a2:	9307      	strlt	r3, [sp, #28]
 80110a4:	bfb8      	it	lt
 80110a6:	9204      	strlt	r2, [sp, #16]
 80110a8:	7823      	ldrb	r3, [r4, #0]
 80110aa:	2b2e      	cmp	r3, #46	; 0x2e
 80110ac:	d10c      	bne.n	80110c8 <_svfiprintf_r+0x130>
 80110ae:	7863      	ldrb	r3, [r4, #1]
 80110b0:	2b2a      	cmp	r3, #42	; 0x2a
 80110b2:	d135      	bne.n	8011120 <_svfiprintf_r+0x188>
 80110b4:	9b03      	ldr	r3, [sp, #12]
 80110b6:	1d1a      	adds	r2, r3, #4
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	9203      	str	r2, [sp, #12]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	bfb8      	it	lt
 80110c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80110c4:	3402      	adds	r4, #2
 80110c6:	9305      	str	r3, [sp, #20]
 80110c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011194 <_svfiprintf_r+0x1fc>
 80110cc:	7821      	ldrb	r1, [r4, #0]
 80110ce:	2203      	movs	r2, #3
 80110d0:	4650      	mov	r0, sl
 80110d2:	f7ef f885 	bl	80001e0 <memchr>
 80110d6:	b140      	cbz	r0, 80110ea <_svfiprintf_r+0x152>
 80110d8:	2340      	movs	r3, #64	; 0x40
 80110da:	eba0 000a 	sub.w	r0, r0, sl
 80110de:	fa03 f000 	lsl.w	r0, r3, r0
 80110e2:	9b04      	ldr	r3, [sp, #16]
 80110e4:	4303      	orrs	r3, r0
 80110e6:	3401      	adds	r4, #1
 80110e8:	9304      	str	r3, [sp, #16]
 80110ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110ee:	4826      	ldr	r0, [pc, #152]	; (8011188 <_svfiprintf_r+0x1f0>)
 80110f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80110f4:	2206      	movs	r2, #6
 80110f6:	f7ef f873 	bl	80001e0 <memchr>
 80110fa:	2800      	cmp	r0, #0
 80110fc:	d038      	beq.n	8011170 <_svfiprintf_r+0x1d8>
 80110fe:	4b23      	ldr	r3, [pc, #140]	; (801118c <_svfiprintf_r+0x1f4>)
 8011100:	bb1b      	cbnz	r3, 801114a <_svfiprintf_r+0x1b2>
 8011102:	9b03      	ldr	r3, [sp, #12]
 8011104:	3307      	adds	r3, #7
 8011106:	f023 0307 	bic.w	r3, r3, #7
 801110a:	3308      	adds	r3, #8
 801110c:	9303      	str	r3, [sp, #12]
 801110e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011110:	4433      	add	r3, r6
 8011112:	9309      	str	r3, [sp, #36]	; 0x24
 8011114:	e767      	b.n	8010fe6 <_svfiprintf_r+0x4e>
 8011116:	fb0c 3202 	mla	r2, ip, r2, r3
 801111a:	460c      	mov	r4, r1
 801111c:	2001      	movs	r0, #1
 801111e:	e7a5      	b.n	801106c <_svfiprintf_r+0xd4>
 8011120:	2300      	movs	r3, #0
 8011122:	3401      	adds	r4, #1
 8011124:	9305      	str	r3, [sp, #20]
 8011126:	4619      	mov	r1, r3
 8011128:	f04f 0c0a 	mov.w	ip, #10
 801112c:	4620      	mov	r0, r4
 801112e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011132:	3a30      	subs	r2, #48	; 0x30
 8011134:	2a09      	cmp	r2, #9
 8011136:	d903      	bls.n	8011140 <_svfiprintf_r+0x1a8>
 8011138:	2b00      	cmp	r3, #0
 801113a:	d0c5      	beq.n	80110c8 <_svfiprintf_r+0x130>
 801113c:	9105      	str	r1, [sp, #20]
 801113e:	e7c3      	b.n	80110c8 <_svfiprintf_r+0x130>
 8011140:	fb0c 2101 	mla	r1, ip, r1, r2
 8011144:	4604      	mov	r4, r0
 8011146:	2301      	movs	r3, #1
 8011148:	e7f0      	b.n	801112c <_svfiprintf_r+0x194>
 801114a:	ab03      	add	r3, sp, #12
 801114c:	9300      	str	r3, [sp, #0]
 801114e:	462a      	mov	r2, r5
 8011150:	4b0f      	ldr	r3, [pc, #60]	; (8011190 <_svfiprintf_r+0x1f8>)
 8011152:	a904      	add	r1, sp, #16
 8011154:	4638      	mov	r0, r7
 8011156:	f7fd ffd9 	bl	800f10c <_printf_float>
 801115a:	1c42      	adds	r2, r0, #1
 801115c:	4606      	mov	r6, r0
 801115e:	d1d6      	bne.n	801110e <_svfiprintf_r+0x176>
 8011160:	89ab      	ldrh	r3, [r5, #12]
 8011162:	065b      	lsls	r3, r3, #25
 8011164:	f53f af2c 	bmi.w	8010fc0 <_svfiprintf_r+0x28>
 8011168:	9809      	ldr	r0, [sp, #36]	; 0x24
 801116a:	b01d      	add	sp, #116	; 0x74
 801116c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011170:	ab03      	add	r3, sp, #12
 8011172:	9300      	str	r3, [sp, #0]
 8011174:	462a      	mov	r2, r5
 8011176:	4b06      	ldr	r3, [pc, #24]	; (8011190 <_svfiprintf_r+0x1f8>)
 8011178:	a904      	add	r1, sp, #16
 801117a:	4638      	mov	r0, r7
 801117c:	f7fe fa6a 	bl	800f654 <_printf_i>
 8011180:	e7eb      	b.n	801115a <_svfiprintf_r+0x1c2>
 8011182:	bf00      	nop
 8011184:	08014744 	.word	0x08014744
 8011188:	0801474e 	.word	0x0801474e
 801118c:	0800f10d 	.word	0x0800f10d
 8011190:	08010ee1 	.word	0x08010ee1
 8011194:	0801474a 	.word	0x0801474a

08011198 <_sbrk_r>:
 8011198:	b538      	push	{r3, r4, r5, lr}
 801119a:	4d06      	ldr	r5, [pc, #24]	; (80111b4 <_sbrk_r+0x1c>)
 801119c:	2300      	movs	r3, #0
 801119e:	4604      	mov	r4, r0
 80111a0:	4608      	mov	r0, r1
 80111a2:	602b      	str	r3, [r5, #0]
 80111a4:	f7f3 f8e2 	bl	800436c <_sbrk>
 80111a8:	1c43      	adds	r3, r0, #1
 80111aa:	d102      	bne.n	80111b2 <_sbrk_r+0x1a>
 80111ac:	682b      	ldr	r3, [r5, #0]
 80111ae:	b103      	cbz	r3, 80111b2 <_sbrk_r+0x1a>
 80111b0:	6023      	str	r3, [r4, #0]
 80111b2:	bd38      	pop	{r3, r4, r5, pc}
 80111b4:	20004938 	.word	0x20004938

080111b8 <__assert_func>:
 80111b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111ba:	4614      	mov	r4, r2
 80111bc:	461a      	mov	r2, r3
 80111be:	4b09      	ldr	r3, [pc, #36]	; (80111e4 <__assert_func+0x2c>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	4605      	mov	r5, r0
 80111c4:	68d8      	ldr	r0, [r3, #12]
 80111c6:	b14c      	cbz	r4, 80111dc <__assert_func+0x24>
 80111c8:	4b07      	ldr	r3, [pc, #28]	; (80111e8 <__assert_func+0x30>)
 80111ca:	9100      	str	r1, [sp, #0]
 80111cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111d0:	4906      	ldr	r1, [pc, #24]	; (80111ec <__assert_func+0x34>)
 80111d2:	462b      	mov	r3, r5
 80111d4:	f000 f80e 	bl	80111f4 <fiprintf>
 80111d8:	f000 faac 	bl	8011734 <abort>
 80111dc:	4b04      	ldr	r3, [pc, #16]	; (80111f0 <__assert_func+0x38>)
 80111de:	461c      	mov	r4, r3
 80111e0:	e7f3      	b.n	80111ca <__assert_func+0x12>
 80111e2:	bf00      	nop
 80111e4:	2000001c 	.word	0x2000001c
 80111e8:	08014755 	.word	0x08014755
 80111ec:	08014762 	.word	0x08014762
 80111f0:	08014790 	.word	0x08014790

080111f4 <fiprintf>:
 80111f4:	b40e      	push	{r1, r2, r3}
 80111f6:	b503      	push	{r0, r1, lr}
 80111f8:	4601      	mov	r1, r0
 80111fa:	ab03      	add	r3, sp, #12
 80111fc:	4805      	ldr	r0, [pc, #20]	; (8011214 <fiprintf+0x20>)
 80111fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011202:	6800      	ldr	r0, [r0, #0]
 8011204:	9301      	str	r3, [sp, #4]
 8011206:	f000 f897 	bl	8011338 <_vfiprintf_r>
 801120a:	b002      	add	sp, #8
 801120c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011210:	b003      	add	sp, #12
 8011212:	4770      	bx	lr
 8011214:	2000001c 	.word	0x2000001c

08011218 <__ascii_mbtowc>:
 8011218:	b082      	sub	sp, #8
 801121a:	b901      	cbnz	r1, 801121e <__ascii_mbtowc+0x6>
 801121c:	a901      	add	r1, sp, #4
 801121e:	b142      	cbz	r2, 8011232 <__ascii_mbtowc+0x1a>
 8011220:	b14b      	cbz	r3, 8011236 <__ascii_mbtowc+0x1e>
 8011222:	7813      	ldrb	r3, [r2, #0]
 8011224:	600b      	str	r3, [r1, #0]
 8011226:	7812      	ldrb	r2, [r2, #0]
 8011228:	1e10      	subs	r0, r2, #0
 801122a:	bf18      	it	ne
 801122c:	2001      	movne	r0, #1
 801122e:	b002      	add	sp, #8
 8011230:	4770      	bx	lr
 8011232:	4610      	mov	r0, r2
 8011234:	e7fb      	b.n	801122e <__ascii_mbtowc+0x16>
 8011236:	f06f 0001 	mvn.w	r0, #1
 801123a:	e7f8      	b.n	801122e <__ascii_mbtowc+0x16>

0801123c <memmove>:
 801123c:	4288      	cmp	r0, r1
 801123e:	b510      	push	{r4, lr}
 8011240:	eb01 0402 	add.w	r4, r1, r2
 8011244:	d902      	bls.n	801124c <memmove+0x10>
 8011246:	4284      	cmp	r4, r0
 8011248:	4623      	mov	r3, r4
 801124a:	d807      	bhi.n	801125c <memmove+0x20>
 801124c:	1e43      	subs	r3, r0, #1
 801124e:	42a1      	cmp	r1, r4
 8011250:	d008      	beq.n	8011264 <memmove+0x28>
 8011252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011256:	f803 2f01 	strb.w	r2, [r3, #1]!
 801125a:	e7f8      	b.n	801124e <memmove+0x12>
 801125c:	4402      	add	r2, r0
 801125e:	4601      	mov	r1, r0
 8011260:	428a      	cmp	r2, r1
 8011262:	d100      	bne.n	8011266 <memmove+0x2a>
 8011264:	bd10      	pop	{r4, pc}
 8011266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801126a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801126e:	e7f7      	b.n	8011260 <memmove+0x24>

08011270 <__malloc_lock>:
 8011270:	4801      	ldr	r0, [pc, #4]	; (8011278 <__malloc_lock+0x8>)
 8011272:	f000 bc1f 	b.w	8011ab4 <__retarget_lock_acquire_recursive>
 8011276:	bf00      	nop
 8011278:	2000493c 	.word	0x2000493c

0801127c <__malloc_unlock>:
 801127c:	4801      	ldr	r0, [pc, #4]	; (8011284 <__malloc_unlock+0x8>)
 801127e:	f000 bc1a 	b.w	8011ab6 <__retarget_lock_release_recursive>
 8011282:	bf00      	nop
 8011284:	2000493c 	.word	0x2000493c

08011288 <_realloc_r>:
 8011288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801128c:	4680      	mov	r8, r0
 801128e:	4614      	mov	r4, r2
 8011290:	460e      	mov	r6, r1
 8011292:	b921      	cbnz	r1, 801129e <_realloc_r+0x16>
 8011294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011298:	4611      	mov	r1, r2
 801129a:	f7ff bdad 	b.w	8010df8 <_malloc_r>
 801129e:	b92a      	cbnz	r2, 80112ac <_realloc_r+0x24>
 80112a0:	f7ff fd3e 	bl	8010d20 <_free_r>
 80112a4:	4625      	mov	r5, r4
 80112a6:	4628      	mov	r0, r5
 80112a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112ac:	f000 fc6a 	bl	8011b84 <_malloc_usable_size_r>
 80112b0:	4284      	cmp	r4, r0
 80112b2:	4607      	mov	r7, r0
 80112b4:	d802      	bhi.n	80112bc <_realloc_r+0x34>
 80112b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80112ba:	d812      	bhi.n	80112e2 <_realloc_r+0x5a>
 80112bc:	4621      	mov	r1, r4
 80112be:	4640      	mov	r0, r8
 80112c0:	f7ff fd9a 	bl	8010df8 <_malloc_r>
 80112c4:	4605      	mov	r5, r0
 80112c6:	2800      	cmp	r0, #0
 80112c8:	d0ed      	beq.n	80112a6 <_realloc_r+0x1e>
 80112ca:	42bc      	cmp	r4, r7
 80112cc:	4622      	mov	r2, r4
 80112ce:	4631      	mov	r1, r6
 80112d0:	bf28      	it	cs
 80112d2:	463a      	movcs	r2, r7
 80112d4:	f7fd fe64 	bl	800efa0 <memcpy>
 80112d8:	4631      	mov	r1, r6
 80112da:	4640      	mov	r0, r8
 80112dc:	f7ff fd20 	bl	8010d20 <_free_r>
 80112e0:	e7e1      	b.n	80112a6 <_realloc_r+0x1e>
 80112e2:	4635      	mov	r5, r6
 80112e4:	e7df      	b.n	80112a6 <_realloc_r+0x1e>

080112e6 <__sfputc_r>:
 80112e6:	6893      	ldr	r3, [r2, #8]
 80112e8:	3b01      	subs	r3, #1
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	b410      	push	{r4}
 80112ee:	6093      	str	r3, [r2, #8]
 80112f0:	da08      	bge.n	8011304 <__sfputc_r+0x1e>
 80112f2:	6994      	ldr	r4, [r2, #24]
 80112f4:	42a3      	cmp	r3, r4
 80112f6:	db01      	blt.n	80112fc <__sfputc_r+0x16>
 80112f8:	290a      	cmp	r1, #10
 80112fa:	d103      	bne.n	8011304 <__sfputc_r+0x1e>
 80112fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011300:	f000 b94a 	b.w	8011598 <__swbuf_r>
 8011304:	6813      	ldr	r3, [r2, #0]
 8011306:	1c58      	adds	r0, r3, #1
 8011308:	6010      	str	r0, [r2, #0]
 801130a:	7019      	strb	r1, [r3, #0]
 801130c:	4608      	mov	r0, r1
 801130e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011312:	4770      	bx	lr

08011314 <__sfputs_r>:
 8011314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011316:	4606      	mov	r6, r0
 8011318:	460f      	mov	r7, r1
 801131a:	4614      	mov	r4, r2
 801131c:	18d5      	adds	r5, r2, r3
 801131e:	42ac      	cmp	r4, r5
 8011320:	d101      	bne.n	8011326 <__sfputs_r+0x12>
 8011322:	2000      	movs	r0, #0
 8011324:	e007      	b.n	8011336 <__sfputs_r+0x22>
 8011326:	f814 1b01 	ldrb.w	r1, [r4], #1
 801132a:	463a      	mov	r2, r7
 801132c:	4630      	mov	r0, r6
 801132e:	f7ff ffda 	bl	80112e6 <__sfputc_r>
 8011332:	1c43      	adds	r3, r0, #1
 8011334:	d1f3      	bne.n	801131e <__sfputs_r+0xa>
 8011336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011338 <_vfiprintf_r>:
 8011338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801133c:	460d      	mov	r5, r1
 801133e:	b09d      	sub	sp, #116	; 0x74
 8011340:	4614      	mov	r4, r2
 8011342:	4698      	mov	r8, r3
 8011344:	4606      	mov	r6, r0
 8011346:	b118      	cbz	r0, 8011350 <_vfiprintf_r+0x18>
 8011348:	6983      	ldr	r3, [r0, #24]
 801134a:	b90b      	cbnz	r3, 8011350 <_vfiprintf_r+0x18>
 801134c:	f000 fb14 	bl	8011978 <__sinit>
 8011350:	4b89      	ldr	r3, [pc, #548]	; (8011578 <_vfiprintf_r+0x240>)
 8011352:	429d      	cmp	r5, r3
 8011354:	d11b      	bne.n	801138e <_vfiprintf_r+0x56>
 8011356:	6875      	ldr	r5, [r6, #4]
 8011358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801135a:	07d9      	lsls	r1, r3, #31
 801135c:	d405      	bmi.n	801136a <_vfiprintf_r+0x32>
 801135e:	89ab      	ldrh	r3, [r5, #12]
 8011360:	059a      	lsls	r2, r3, #22
 8011362:	d402      	bmi.n	801136a <_vfiprintf_r+0x32>
 8011364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011366:	f000 fba5 	bl	8011ab4 <__retarget_lock_acquire_recursive>
 801136a:	89ab      	ldrh	r3, [r5, #12]
 801136c:	071b      	lsls	r3, r3, #28
 801136e:	d501      	bpl.n	8011374 <_vfiprintf_r+0x3c>
 8011370:	692b      	ldr	r3, [r5, #16]
 8011372:	b9eb      	cbnz	r3, 80113b0 <_vfiprintf_r+0x78>
 8011374:	4629      	mov	r1, r5
 8011376:	4630      	mov	r0, r6
 8011378:	f000 f96e 	bl	8011658 <__swsetup_r>
 801137c:	b1c0      	cbz	r0, 80113b0 <_vfiprintf_r+0x78>
 801137e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011380:	07dc      	lsls	r4, r3, #31
 8011382:	d50e      	bpl.n	80113a2 <_vfiprintf_r+0x6a>
 8011384:	f04f 30ff 	mov.w	r0, #4294967295
 8011388:	b01d      	add	sp, #116	; 0x74
 801138a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801138e:	4b7b      	ldr	r3, [pc, #492]	; (801157c <_vfiprintf_r+0x244>)
 8011390:	429d      	cmp	r5, r3
 8011392:	d101      	bne.n	8011398 <_vfiprintf_r+0x60>
 8011394:	68b5      	ldr	r5, [r6, #8]
 8011396:	e7df      	b.n	8011358 <_vfiprintf_r+0x20>
 8011398:	4b79      	ldr	r3, [pc, #484]	; (8011580 <_vfiprintf_r+0x248>)
 801139a:	429d      	cmp	r5, r3
 801139c:	bf08      	it	eq
 801139e:	68f5      	ldreq	r5, [r6, #12]
 80113a0:	e7da      	b.n	8011358 <_vfiprintf_r+0x20>
 80113a2:	89ab      	ldrh	r3, [r5, #12]
 80113a4:	0598      	lsls	r0, r3, #22
 80113a6:	d4ed      	bmi.n	8011384 <_vfiprintf_r+0x4c>
 80113a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113aa:	f000 fb84 	bl	8011ab6 <__retarget_lock_release_recursive>
 80113ae:	e7e9      	b.n	8011384 <_vfiprintf_r+0x4c>
 80113b0:	2300      	movs	r3, #0
 80113b2:	9309      	str	r3, [sp, #36]	; 0x24
 80113b4:	2320      	movs	r3, #32
 80113b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80113be:	2330      	movs	r3, #48	; 0x30
 80113c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011584 <_vfiprintf_r+0x24c>
 80113c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113c8:	f04f 0901 	mov.w	r9, #1
 80113cc:	4623      	mov	r3, r4
 80113ce:	469a      	mov	sl, r3
 80113d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113d4:	b10a      	cbz	r2, 80113da <_vfiprintf_r+0xa2>
 80113d6:	2a25      	cmp	r2, #37	; 0x25
 80113d8:	d1f9      	bne.n	80113ce <_vfiprintf_r+0x96>
 80113da:	ebba 0b04 	subs.w	fp, sl, r4
 80113de:	d00b      	beq.n	80113f8 <_vfiprintf_r+0xc0>
 80113e0:	465b      	mov	r3, fp
 80113e2:	4622      	mov	r2, r4
 80113e4:	4629      	mov	r1, r5
 80113e6:	4630      	mov	r0, r6
 80113e8:	f7ff ff94 	bl	8011314 <__sfputs_r>
 80113ec:	3001      	adds	r0, #1
 80113ee:	f000 80aa 	beq.w	8011546 <_vfiprintf_r+0x20e>
 80113f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113f4:	445a      	add	r2, fp
 80113f6:	9209      	str	r2, [sp, #36]	; 0x24
 80113f8:	f89a 3000 	ldrb.w	r3, [sl]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	f000 80a2 	beq.w	8011546 <_vfiprintf_r+0x20e>
 8011402:	2300      	movs	r3, #0
 8011404:	f04f 32ff 	mov.w	r2, #4294967295
 8011408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801140c:	f10a 0a01 	add.w	sl, sl, #1
 8011410:	9304      	str	r3, [sp, #16]
 8011412:	9307      	str	r3, [sp, #28]
 8011414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011418:	931a      	str	r3, [sp, #104]	; 0x68
 801141a:	4654      	mov	r4, sl
 801141c:	2205      	movs	r2, #5
 801141e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011422:	4858      	ldr	r0, [pc, #352]	; (8011584 <_vfiprintf_r+0x24c>)
 8011424:	f7ee fedc 	bl	80001e0 <memchr>
 8011428:	9a04      	ldr	r2, [sp, #16]
 801142a:	b9d8      	cbnz	r0, 8011464 <_vfiprintf_r+0x12c>
 801142c:	06d1      	lsls	r1, r2, #27
 801142e:	bf44      	itt	mi
 8011430:	2320      	movmi	r3, #32
 8011432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011436:	0713      	lsls	r3, r2, #28
 8011438:	bf44      	itt	mi
 801143a:	232b      	movmi	r3, #43	; 0x2b
 801143c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011440:	f89a 3000 	ldrb.w	r3, [sl]
 8011444:	2b2a      	cmp	r3, #42	; 0x2a
 8011446:	d015      	beq.n	8011474 <_vfiprintf_r+0x13c>
 8011448:	9a07      	ldr	r2, [sp, #28]
 801144a:	4654      	mov	r4, sl
 801144c:	2000      	movs	r0, #0
 801144e:	f04f 0c0a 	mov.w	ip, #10
 8011452:	4621      	mov	r1, r4
 8011454:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011458:	3b30      	subs	r3, #48	; 0x30
 801145a:	2b09      	cmp	r3, #9
 801145c:	d94e      	bls.n	80114fc <_vfiprintf_r+0x1c4>
 801145e:	b1b0      	cbz	r0, 801148e <_vfiprintf_r+0x156>
 8011460:	9207      	str	r2, [sp, #28]
 8011462:	e014      	b.n	801148e <_vfiprintf_r+0x156>
 8011464:	eba0 0308 	sub.w	r3, r0, r8
 8011468:	fa09 f303 	lsl.w	r3, r9, r3
 801146c:	4313      	orrs	r3, r2
 801146e:	9304      	str	r3, [sp, #16]
 8011470:	46a2      	mov	sl, r4
 8011472:	e7d2      	b.n	801141a <_vfiprintf_r+0xe2>
 8011474:	9b03      	ldr	r3, [sp, #12]
 8011476:	1d19      	adds	r1, r3, #4
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	9103      	str	r1, [sp, #12]
 801147c:	2b00      	cmp	r3, #0
 801147e:	bfbb      	ittet	lt
 8011480:	425b      	neglt	r3, r3
 8011482:	f042 0202 	orrlt.w	r2, r2, #2
 8011486:	9307      	strge	r3, [sp, #28]
 8011488:	9307      	strlt	r3, [sp, #28]
 801148a:	bfb8      	it	lt
 801148c:	9204      	strlt	r2, [sp, #16]
 801148e:	7823      	ldrb	r3, [r4, #0]
 8011490:	2b2e      	cmp	r3, #46	; 0x2e
 8011492:	d10c      	bne.n	80114ae <_vfiprintf_r+0x176>
 8011494:	7863      	ldrb	r3, [r4, #1]
 8011496:	2b2a      	cmp	r3, #42	; 0x2a
 8011498:	d135      	bne.n	8011506 <_vfiprintf_r+0x1ce>
 801149a:	9b03      	ldr	r3, [sp, #12]
 801149c:	1d1a      	adds	r2, r3, #4
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	9203      	str	r2, [sp, #12]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	bfb8      	it	lt
 80114a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80114aa:	3402      	adds	r4, #2
 80114ac:	9305      	str	r3, [sp, #20]
 80114ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011594 <_vfiprintf_r+0x25c>
 80114b2:	7821      	ldrb	r1, [r4, #0]
 80114b4:	2203      	movs	r2, #3
 80114b6:	4650      	mov	r0, sl
 80114b8:	f7ee fe92 	bl	80001e0 <memchr>
 80114bc:	b140      	cbz	r0, 80114d0 <_vfiprintf_r+0x198>
 80114be:	2340      	movs	r3, #64	; 0x40
 80114c0:	eba0 000a 	sub.w	r0, r0, sl
 80114c4:	fa03 f000 	lsl.w	r0, r3, r0
 80114c8:	9b04      	ldr	r3, [sp, #16]
 80114ca:	4303      	orrs	r3, r0
 80114cc:	3401      	adds	r4, #1
 80114ce:	9304      	str	r3, [sp, #16]
 80114d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114d4:	482c      	ldr	r0, [pc, #176]	; (8011588 <_vfiprintf_r+0x250>)
 80114d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114da:	2206      	movs	r2, #6
 80114dc:	f7ee fe80 	bl	80001e0 <memchr>
 80114e0:	2800      	cmp	r0, #0
 80114e2:	d03f      	beq.n	8011564 <_vfiprintf_r+0x22c>
 80114e4:	4b29      	ldr	r3, [pc, #164]	; (801158c <_vfiprintf_r+0x254>)
 80114e6:	bb1b      	cbnz	r3, 8011530 <_vfiprintf_r+0x1f8>
 80114e8:	9b03      	ldr	r3, [sp, #12]
 80114ea:	3307      	adds	r3, #7
 80114ec:	f023 0307 	bic.w	r3, r3, #7
 80114f0:	3308      	adds	r3, #8
 80114f2:	9303      	str	r3, [sp, #12]
 80114f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114f6:	443b      	add	r3, r7
 80114f8:	9309      	str	r3, [sp, #36]	; 0x24
 80114fa:	e767      	b.n	80113cc <_vfiprintf_r+0x94>
 80114fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011500:	460c      	mov	r4, r1
 8011502:	2001      	movs	r0, #1
 8011504:	e7a5      	b.n	8011452 <_vfiprintf_r+0x11a>
 8011506:	2300      	movs	r3, #0
 8011508:	3401      	adds	r4, #1
 801150a:	9305      	str	r3, [sp, #20]
 801150c:	4619      	mov	r1, r3
 801150e:	f04f 0c0a 	mov.w	ip, #10
 8011512:	4620      	mov	r0, r4
 8011514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011518:	3a30      	subs	r2, #48	; 0x30
 801151a:	2a09      	cmp	r2, #9
 801151c:	d903      	bls.n	8011526 <_vfiprintf_r+0x1ee>
 801151e:	2b00      	cmp	r3, #0
 8011520:	d0c5      	beq.n	80114ae <_vfiprintf_r+0x176>
 8011522:	9105      	str	r1, [sp, #20]
 8011524:	e7c3      	b.n	80114ae <_vfiprintf_r+0x176>
 8011526:	fb0c 2101 	mla	r1, ip, r1, r2
 801152a:	4604      	mov	r4, r0
 801152c:	2301      	movs	r3, #1
 801152e:	e7f0      	b.n	8011512 <_vfiprintf_r+0x1da>
 8011530:	ab03      	add	r3, sp, #12
 8011532:	9300      	str	r3, [sp, #0]
 8011534:	462a      	mov	r2, r5
 8011536:	4b16      	ldr	r3, [pc, #88]	; (8011590 <_vfiprintf_r+0x258>)
 8011538:	a904      	add	r1, sp, #16
 801153a:	4630      	mov	r0, r6
 801153c:	f7fd fde6 	bl	800f10c <_printf_float>
 8011540:	4607      	mov	r7, r0
 8011542:	1c78      	adds	r0, r7, #1
 8011544:	d1d6      	bne.n	80114f4 <_vfiprintf_r+0x1bc>
 8011546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011548:	07d9      	lsls	r1, r3, #31
 801154a:	d405      	bmi.n	8011558 <_vfiprintf_r+0x220>
 801154c:	89ab      	ldrh	r3, [r5, #12]
 801154e:	059a      	lsls	r2, r3, #22
 8011550:	d402      	bmi.n	8011558 <_vfiprintf_r+0x220>
 8011552:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011554:	f000 faaf 	bl	8011ab6 <__retarget_lock_release_recursive>
 8011558:	89ab      	ldrh	r3, [r5, #12]
 801155a:	065b      	lsls	r3, r3, #25
 801155c:	f53f af12 	bmi.w	8011384 <_vfiprintf_r+0x4c>
 8011560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011562:	e711      	b.n	8011388 <_vfiprintf_r+0x50>
 8011564:	ab03      	add	r3, sp, #12
 8011566:	9300      	str	r3, [sp, #0]
 8011568:	462a      	mov	r2, r5
 801156a:	4b09      	ldr	r3, [pc, #36]	; (8011590 <_vfiprintf_r+0x258>)
 801156c:	a904      	add	r1, sp, #16
 801156e:	4630      	mov	r0, r6
 8011570:	f7fe f870 	bl	800f654 <_printf_i>
 8011574:	e7e4      	b.n	8011540 <_vfiprintf_r+0x208>
 8011576:	bf00      	nop
 8011578:	080148bc 	.word	0x080148bc
 801157c:	080148dc 	.word	0x080148dc
 8011580:	0801489c 	.word	0x0801489c
 8011584:	08014744 	.word	0x08014744
 8011588:	0801474e 	.word	0x0801474e
 801158c:	0800f10d 	.word	0x0800f10d
 8011590:	08011315 	.word	0x08011315
 8011594:	0801474a 	.word	0x0801474a

08011598 <__swbuf_r>:
 8011598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801159a:	460e      	mov	r6, r1
 801159c:	4614      	mov	r4, r2
 801159e:	4605      	mov	r5, r0
 80115a0:	b118      	cbz	r0, 80115aa <__swbuf_r+0x12>
 80115a2:	6983      	ldr	r3, [r0, #24]
 80115a4:	b90b      	cbnz	r3, 80115aa <__swbuf_r+0x12>
 80115a6:	f000 f9e7 	bl	8011978 <__sinit>
 80115aa:	4b21      	ldr	r3, [pc, #132]	; (8011630 <__swbuf_r+0x98>)
 80115ac:	429c      	cmp	r4, r3
 80115ae:	d12b      	bne.n	8011608 <__swbuf_r+0x70>
 80115b0:	686c      	ldr	r4, [r5, #4]
 80115b2:	69a3      	ldr	r3, [r4, #24]
 80115b4:	60a3      	str	r3, [r4, #8]
 80115b6:	89a3      	ldrh	r3, [r4, #12]
 80115b8:	071a      	lsls	r2, r3, #28
 80115ba:	d52f      	bpl.n	801161c <__swbuf_r+0x84>
 80115bc:	6923      	ldr	r3, [r4, #16]
 80115be:	b36b      	cbz	r3, 801161c <__swbuf_r+0x84>
 80115c0:	6923      	ldr	r3, [r4, #16]
 80115c2:	6820      	ldr	r0, [r4, #0]
 80115c4:	1ac0      	subs	r0, r0, r3
 80115c6:	6963      	ldr	r3, [r4, #20]
 80115c8:	b2f6      	uxtb	r6, r6
 80115ca:	4283      	cmp	r3, r0
 80115cc:	4637      	mov	r7, r6
 80115ce:	dc04      	bgt.n	80115da <__swbuf_r+0x42>
 80115d0:	4621      	mov	r1, r4
 80115d2:	4628      	mov	r0, r5
 80115d4:	f000 f93c 	bl	8011850 <_fflush_r>
 80115d8:	bb30      	cbnz	r0, 8011628 <__swbuf_r+0x90>
 80115da:	68a3      	ldr	r3, [r4, #8]
 80115dc:	3b01      	subs	r3, #1
 80115de:	60a3      	str	r3, [r4, #8]
 80115e0:	6823      	ldr	r3, [r4, #0]
 80115e2:	1c5a      	adds	r2, r3, #1
 80115e4:	6022      	str	r2, [r4, #0]
 80115e6:	701e      	strb	r6, [r3, #0]
 80115e8:	6963      	ldr	r3, [r4, #20]
 80115ea:	3001      	adds	r0, #1
 80115ec:	4283      	cmp	r3, r0
 80115ee:	d004      	beq.n	80115fa <__swbuf_r+0x62>
 80115f0:	89a3      	ldrh	r3, [r4, #12]
 80115f2:	07db      	lsls	r3, r3, #31
 80115f4:	d506      	bpl.n	8011604 <__swbuf_r+0x6c>
 80115f6:	2e0a      	cmp	r6, #10
 80115f8:	d104      	bne.n	8011604 <__swbuf_r+0x6c>
 80115fa:	4621      	mov	r1, r4
 80115fc:	4628      	mov	r0, r5
 80115fe:	f000 f927 	bl	8011850 <_fflush_r>
 8011602:	b988      	cbnz	r0, 8011628 <__swbuf_r+0x90>
 8011604:	4638      	mov	r0, r7
 8011606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011608:	4b0a      	ldr	r3, [pc, #40]	; (8011634 <__swbuf_r+0x9c>)
 801160a:	429c      	cmp	r4, r3
 801160c:	d101      	bne.n	8011612 <__swbuf_r+0x7a>
 801160e:	68ac      	ldr	r4, [r5, #8]
 8011610:	e7cf      	b.n	80115b2 <__swbuf_r+0x1a>
 8011612:	4b09      	ldr	r3, [pc, #36]	; (8011638 <__swbuf_r+0xa0>)
 8011614:	429c      	cmp	r4, r3
 8011616:	bf08      	it	eq
 8011618:	68ec      	ldreq	r4, [r5, #12]
 801161a:	e7ca      	b.n	80115b2 <__swbuf_r+0x1a>
 801161c:	4621      	mov	r1, r4
 801161e:	4628      	mov	r0, r5
 8011620:	f000 f81a 	bl	8011658 <__swsetup_r>
 8011624:	2800      	cmp	r0, #0
 8011626:	d0cb      	beq.n	80115c0 <__swbuf_r+0x28>
 8011628:	f04f 37ff 	mov.w	r7, #4294967295
 801162c:	e7ea      	b.n	8011604 <__swbuf_r+0x6c>
 801162e:	bf00      	nop
 8011630:	080148bc 	.word	0x080148bc
 8011634:	080148dc 	.word	0x080148dc
 8011638:	0801489c 	.word	0x0801489c

0801163c <__ascii_wctomb>:
 801163c:	b149      	cbz	r1, 8011652 <__ascii_wctomb+0x16>
 801163e:	2aff      	cmp	r2, #255	; 0xff
 8011640:	bf85      	ittet	hi
 8011642:	238a      	movhi	r3, #138	; 0x8a
 8011644:	6003      	strhi	r3, [r0, #0]
 8011646:	700a      	strbls	r2, [r1, #0]
 8011648:	f04f 30ff 	movhi.w	r0, #4294967295
 801164c:	bf98      	it	ls
 801164e:	2001      	movls	r0, #1
 8011650:	4770      	bx	lr
 8011652:	4608      	mov	r0, r1
 8011654:	4770      	bx	lr
	...

08011658 <__swsetup_r>:
 8011658:	4b32      	ldr	r3, [pc, #200]	; (8011724 <__swsetup_r+0xcc>)
 801165a:	b570      	push	{r4, r5, r6, lr}
 801165c:	681d      	ldr	r5, [r3, #0]
 801165e:	4606      	mov	r6, r0
 8011660:	460c      	mov	r4, r1
 8011662:	b125      	cbz	r5, 801166e <__swsetup_r+0x16>
 8011664:	69ab      	ldr	r3, [r5, #24]
 8011666:	b913      	cbnz	r3, 801166e <__swsetup_r+0x16>
 8011668:	4628      	mov	r0, r5
 801166a:	f000 f985 	bl	8011978 <__sinit>
 801166e:	4b2e      	ldr	r3, [pc, #184]	; (8011728 <__swsetup_r+0xd0>)
 8011670:	429c      	cmp	r4, r3
 8011672:	d10f      	bne.n	8011694 <__swsetup_r+0x3c>
 8011674:	686c      	ldr	r4, [r5, #4]
 8011676:	89a3      	ldrh	r3, [r4, #12]
 8011678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801167c:	0719      	lsls	r1, r3, #28
 801167e:	d42c      	bmi.n	80116da <__swsetup_r+0x82>
 8011680:	06dd      	lsls	r5, r3, #27
 8011682:	d411      	bmi.n	80116a8 <__swsetup_r+0x50>
 8011684:	2309      	movs	r3, #9
 8011686:	6033      	str	r3, [r6, #0]
 8011688:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801168c:	81a3      	strh	r3, [r4, #12]
 801168e:	f04f 30ff 	mov.w	r0, #4294967295
 8011692:	e03e      	b.n	8011712 <__swsetup_r+0xba>
 8011694:	4b25      	ldr	r3, [pc, #148]	; (801172c <__swsetup_r+0xd4>)
 8011696:	429c      	cmp	r4, r3
 8011698:	d101      	bne.n	801169e <__swsetup_r+0x46>
 801169a:	68ac      	ldr	r4, [r5, #8]
 801169c:	e7eb      	b.n	8011676 <__swsetup_r+0x1e>
 801169e:	4b24      	ldr	r3, [pc, #144]	; (8011730 <__swsetup_r+0xd8>)
 80116a0:	429c      	cmp	r4, r3
 80116a2:	bf08      	it	eq
 80116a4:	68ec      	ldreq	r4, [r5, #12]
 80116a6:	e7e6      	b.n	8011676 <__swsetup_r+0x1e>
 80116a8:	0758      	lsls	r0, r3, #29
 80116aa:	d512      	bpl.n	80116d2 <__swsetup_r+0x7a>
 80116ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116ae:	b141      	cbz	r1, 80116c2 <__swsetup_r+0x6a>
 80116b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116b4:	4299      	cmp	r1, r3
 80116b6:	d002      	beq.n	80116be <__swsetup_r+0x66>
 80116b8:	4630      	mov	r0, r6
 80116ba:	f7ff fb31 	bl	8010d20 <_free_r>
 80116be:	2300      	movs	r3, #0
 80116c0:	6363      	str	r3, [r4, #52]	; 0x34
 80116c2:	89a3      	ldrh	r3, [r4, #12]
 80116c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80116c8:	81a3      	strh	r3, [r4, #12]
 80116ca:	2300      	movs	r3, #0
 80116cc:	6063      	str	r3, [r4, #4]
 80116ce:	6923      	ldr	r3, [r4, #16]
 80116d0:	6023      	str	r3, [r4, #0]
 80116d2:	89a3      	ldrh	r3, [r4, #12]
 80116d4:	f043 0308 	orr.w	r3, r3, #8
 80116d8:	81a3      	strh	r3, [r4, #12]
 80116da:	6923      	ldr	r3, [r4, #16]
 80116dc:	b94b      	cbnz	r3, 80116f2 <__swsetup_r+0x9a>
 80116de:	89a3      	ldrh	r3, [r4, #12]
 80116e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80116e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80116e8:	d003      	beq.n	80116f2 <__swsetup_r+0x9a>
 80116ea:	4621      	mov	r1, r4
 80116ec:	4630      	mov	r0, r6
 80116ee:	f000 fa09 	bl	8011b04 <__smakebuf_r>
 80116f2:	89a0      	ldrh	r0, [r4, #12]
 80116f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80116f8:	f010 0301 	ands.w	r3, r0, #1
 80116fc:	d00a      	beq.n	8011714 <__swsetup_r+0xbc>
 80116fe:	2300      	movs	r3, #0
 8011700:	60a3      	str	r3, [r4, #8]
 8011702:	6963      	ldr	r3, [r4, #20]
 8011704:	425b      	negs	r3, r3
 8011706:	61a3      	str	r3, [r4, #24]
 8011708:	6923      	ldr	r3, [r4, #16]
 801170a:	b943      	cbnz	r3, 801171e <__swsetup_r+0xc6>
 801170c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011710:	d1ba      	bne.n	8011688 <__swsetup_r+0x30>
 8011712:	bd70      	pop	{r4, r5, r6, pc}
 8011714:	0781      	lsls	r1, r0, #30
 8011716:	bf58      	it	pl
 8011718:	6963      	ldrpl	r3, [r4, #20]
 801171a:	60a3      	str	r3, [r4, #8]
 801171c:	e7f4      	b.n	8011708 <__swsetup_r+0xb0>
 801171e:	2000      	movs	r0, #0
 8011720:	e7f7      	b.n	8011712 <__swsetup_r+0xba>
 8011722:	bf00      	nop
 8011724:	2000001c 	.word	0x2000001c
 8011728:	080148bc 	.word	0x080148bc
 801172c:	080148dc 	.word	0x080148dc
 8011730:	0801489c 	.word	0x0801489c

08011734 <abort>:
 8011734:	b508      	push	{r3, lr}
 8011736:	2006      	movs	r0, #6
 8011738:	f000 fa54 	bl	8011be4 <raise>
 801173c:	2001      	movs	r0, #1
 801173e:	f7f2 fd9d 	bl	800427c <_exit>
	...

08011744 <__sflush_r>:
 8011744:	898a      	ldrh	r2, [r1, #12]
 8011746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801174a:	4605      	mov	r5, r0
 801174c:	0710      	lsls	r0, r2, #28
 801174e:	460c      	mov	r4, r1
 8011750:	d458      	bmi.n	8011804 <__sflush_r+0xc0>
 8011752:	684b      	ldr	r3, [r1, #4]
 8011754:	2b00      	cmp	r3, #0
 8011756:	dc05      	bgt.n	8011764 <__sflush_r+0x20>
 8011758:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801175a:	2b00      	cmp	r3, #0
 801175c:	dc02      	bgt.n	8011764 <__sflush_r+0x20>
 801175e:	2000      	movs	r0, #0
 8011760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011766:	2e00      	cmp	r6, #0
 8011768:	d0f9      	beq.n	801175e <__sflush_r+0x1a>
 801176a:	2300      	movs	r3, #0
 801176c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011770:	682f      	ldr	r7, [r5, #0]
 8011772:	602b      	str	r3, [r5, #0]
 8011774:	d032      	beq.n	80117dc <__sflush_r+0x98>
 8011776:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011778:	89a3      	ldrh	r3, [r4, #12]
 801177a:	075a      	lsls	r2, r3, #29
 801177c:	d505      	bpl.n	801178a <__sflush_r+0x46>
 801177e:	6863      	ldr	r3, [r4, #4]
 8011780:	1ac0      	subs	r0, r0, r3
 8011782:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011784:	b10b      	cbz	r3, 801178a <__sflush_r+0x46>
 8011786:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011788:	1ac0      	subs	r0, r0, r3
 801178a:	2300      	movs	r3, #0
 801178c:	4602      	mov	r2, r0
 801178e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011790:	6a21      	ldr	r1, [r4, #32]
 8011792:	4628      	mov	r0, r5
 8011794:	47b0      	blx	r6
 8011796:	1c43      	adds	r3, r0, #1
 8011798:	89a3      	ldrh	r3, [r4, #12]
 801179a:	d106      	bne.n	80117aa <__sflush_r+0x66>
 801179c:	6829      	ldr	r1, [r5, #0]
 801179e:	291d      	cmp	r1, #29
 80117a0:	d82c      	bhi.n	80117fc <__sflush_r+0xb8>
 80117a2:	4a2a      	ldr	r2, [pc, #168]	; (801184c <__sflush_r+0x108>)
 80117a4:	40ca      	lsrs	r2, r1
 80117a6:	07d6      	lsls	r6, r2, #31
 80117a8:	d528      	bpl.n	80117fc <__sflush_r+0xb8>
 80117aa:	2200      	movs	r2, #0
 80117ac:	6062      	str	r2, [r4, #4]
 80117ae:	04d9      	lsls	r1, r3, #19
 80117b0:	6922      	ldr	r2, [r4, #16]
 80117b2:	6022      	str	r2, [r4, #0]
 80117b4:	d504      	bpl.n	80117c0 <__sflush_r+0x7c>
 80117b6:	1c42      	adds	r2, r0, #1
 80117b8:	d101      	bne.n	80117be <__sflush_r+0x7a>
 80117ba:	682b      	ldr	r3, [r5, #0]
 80117bc:	b903      	cbnz	r3, 80117c0 <__sflush_r+0x7c>
 80117be:	6560      	str	r0, [r4, #84]	; 0x54
 80117c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80117c2:	602f      	str	r7, [r5, #0]
 80117c4:	2900      	cmp	r1, #0
 80117c6:	d0ca      	beq.n	801175e <__sflush_r+0x1a>
 80117c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80117cc:	4299      	cmp	r1, r3
 80117ce:	d002      	beq.n	80117d6 <__sflush_r+0x92>
 80117d0:	4628      	mov	r0, r5
 80117d2:	f7ff faa5 	bl	8010d20 <_free_r>
 80117d6:	2000      	movs	r0, #0
 80117d8:	6360      	str	r0, [r4, #52]	; 0x34
 80117da:	e7c1      	b.n	8011760 <__sflush_r+0x1c>
 80117dc:	6a21      	ldr	r1, [r4, #32]
 80117de:	2301      	movs	r3, #1
 80117e0:	4628      	mov	r0, r5
 80117e2:	47b0      	blx	r6
 80117e4:	1c41      	adds	r1, r0, #1
 80117e6:	d1c7      	bne.n	8011778 <__sflush_r+0x34>
 80117e8:	682b      	ldr	r3, [r5, #0]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d0c4      	beq.n	8011778 <__sflush_r+0x34>
 80117ee:	2b1d      	cmp	r3, #29
 80117f0:	d001      	beq.n	80117f6 <__sflush_r+0xb2>
 80117f2:	2b16      	cmp	r3, #22
 80117f4:	d101      	bne.n	80117fa <__sflush_r+0xb6>
 80117f6:	602f      	str	r7, [r5, #0]
 80117f8:	e7b1      	b.n	801175e <__sflush_r+0x1a>
 80117fa:	89a3      	ldrh	r3, [r4, #12]
 80117fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011800:	81a3      	strh	r3, [r4, #12]
 8011802:	e7ad      	b.n	8011760 <__sflush_r+0x1c>
 8011804:	690f      	ldr	r7, [r1, #16]
 8011806:	2f00      	cmp	r7, #0
 8011808:	d0a9      	beq.n	801175e <__sflush_r+0x1a>
 801180a:	0793      	lsls	r3, r2, #30
 801180c:	680e      	ldr	r6, [r1, #0]
 801180e:	bf08      	it	eq
 8011810:	694b      	ldreq	r3, [r1, #20]
 8011812:	600f      	str	r7, [r1, #0]
 8011814:	bf18      	it	ne
 8011816:	2300      	movne	r3, #0
 8011818:	eba6 0807 	sub.w	r8, r6, r7
 801181c:	608b      	str	r3, [r1, #8]
 801181e:	f1b8 0f00 	cmp.w	r8, #0
 8011822:	dd9c      	ble.n	801175e <__sflush_r+0x1a>
 8011824:	6a21      	ldr	r1, [r4, #32]
 8011826:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011828:	4643      	mov	r3, r8
 801182a:	463a      	mov	r2, r7
 801182c:	4628      	mov	r0, r5
 801182e:	47b0      	blx	r6
 8011830:	2800      	cmp	r0, #0
 8011832:	dc06      	bgt.n	8011842 <__sflush_r+0xfe>
 8011834:	89a3      	ldrh	r3, [r4, #12]
 8011836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801183a:	81a3      	strh	r3, [r4, #12]
 801183c:	f04f 30ff 	mov.w	r0, #4294967295
 8011840:	e78e      	b.n	8011760 <__sflush_r+0x1c>
 8011842:	4407      	add	r7, r0
 8011844:	eba8 0800 	sub.w	r8, r8, r0
 8011848:	e7e9      	b.n	801181e <__sflush_r+0xda>
 801184a:	bf00      	nop
 801184c:	20400001 	.word	0x20400001

08011850 <_fflush_r>:
 8011850:	b538      	push	{r3, r4, r5, lr}
 8011852:	690b      	ldr	r3, [r1, #16]
 8011854:	4605      	mov	r5, r0
 8011856:	460c      	mov	r4, r1
 8011858:	b913      	cbnz	r3, 8011860 <_fflush_r+0x10>
 801185a:	2500      	movs	r5, #0
 801185c:	4628      	mov	r0, r5
 801185e:	bd38      	pop	{r3, r4, r5, pc}
 8011860:	b118      	cbz	r0, 801186a <_fflush_r+0x1a>
 8011862:	6983      	ldr	r3, [r0, #24]
 8011864:	b90b      	cbnz	r3, 801186a <_fflush_r+0x1a>
 8011866:	f000 f887 	bl	8011978 <__sinit>
 801186a:	4b14      	ldr	r3, [pc, #80]	; (80118bc <_fflush_r+0x6c>)
 801186c:	429c      	cmp	r4, r3
 801186e:	d11b      	bne.n	80118a8 <_fflush_r+0x58>
 8011870:	686c      	ldr	r4, [r5, #4]
 8011872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d0ef      	beq.n	801185a <_fflush_r+0xa>
 801187a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801187c:	07d0      	lsls	r0, r2, #31
 801187e:	d404      	bmi.n	801188a <_fflush_r+0x3a>
 8011880:	0599      	lsls	r1, r3, #22
 8011882:	d402      	bmi.n	801188a <_fflush_r+0x3a>
 8011884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011886:	f000 f915 	bl	8011ab4 <__retarget_lock_acquire_recursive>
 801188a:	4628      	mov	r0, r5
 801188c:	4621      	mov	r1, r4
 801188e:	f7ff ff59 	bl	8011744 <__sflush_r>
 8011892:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011894:	07da      	lsls	r2, r3, #31
 8011896:	4605      	mov	r5, r0
 8011898:	d4e0      	bmi.n	801185c <_fflush_r+0xc>
 801189a:	89a3      	ldrh	r3, [r4, #12]
 801189c:	059b      	lsls	r3, r3, #22
 801189e:	d4dd      	bmi.n	801185c <_fflush_r+0xc>
 80118a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118a2:	f000 f908 	bl	8011ab6 <__retarget_lock_release_recursive>
 80118a6:	e7d9      	b.n	801185c <_fflush_r+0xc>
 80118a8:	4b05      	ldr	r3, [pc, #20]	; (80118c0 <_fflush_r+0x70>)
 80118aa:	429c      	cmp	r4, r3
 80118ac:	d101      	bne.n	80118b2 <_fflush_r+0x62>
 80118ae:	68ac      	ldr	r4, [r5, #8]
 80118b0:	e7df      	b.n	8011872 <_fflush_r+0x22>
 80118b2:	4b04      	ldr	r3, [pc, #16]	; (80118c4 <_fflush_r+0x74>)
 80118b4:	429c      	cmp	r4, r3
 80118b6:	bf08      	it	eq
 80118b8:	68ec      	ldreq	r4, [r5, #12]
 80118ba:	e7da      	b.n	8011872 <_fflush_r+0x22>
 80118bc:	080148bc 	.word	0x080148bc
 80118c0:	080148dc 	.word	0x080148dc
 80118c4:	0801489c 	.word	0x0801489c

080118c8 <std>:
 80118c8:	2300      	movs	r3, #0
 80118ca:	b510      	push	{r4, lr}
 80118cc:	4604      	mov	r4, r0
 80118ce:	e9c0 3300 	strd	r3, r3, [r0]
 80118d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80118d6:	6083      	str	r3, [r0, #8]
 80118d8:	8181      	strh	r1, [r0, #12]
 80118da:	6643      	str	r3, [r0, #100]	; 0x64
 80118dc:	81c2      	strh	r2, [r0, #14]
 80118de:	6183      	str	r3, [r0, #24]
 80118e0:	4619      	mov	r1, r3
 80118e2:	2208      	movs	r2, #8
 80118e4:	305c      	adds	r0, #92	; 0x5c
 80118e6:	f7fd fb69 	bl	800efbc <memset>
 80118ea:	4b05      	ldr	r3, [pc, #20]	; (8011900 <std+0x38>)
 80118ec:	6263      	str	r3, [r4, #36]	; 0x24
 80118ee:	4b05      	ldr	r3, [pc, #20]	; (8011904 <std+0x3c>)
 80118f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80118f2:	4b05      	ldr	r3, [pc, #20]	; (8011908 <std+0x40>)
 80118f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80118f6:	4b05      	ldr	r3, [pc, #20]	; (801190c <std+0x44>)
 80118f8:	6224      	str	r4, [r4, #32]
 80118fa:	6323      	str	r3, [r4, #48]	; 0x30
 80118fc:	bd10      	pop	{r4, pc}
 80118fe:	bf00      	nop
 8011900:	08011c1d 	.word	0x08011c1d
 8011904:	08011c3f 	.word	0x08011c3f
 8011908:	08011c77 	.word	0x08011c77
 801190c:	08011c9b 	.word	0x08011c9b

08011910 <_cleanup_r>:
 8011910:	4901      	ldr	r1, [pc, #4]	; (8011918 <_cleanup_r+0x8>)
 8011912:	f000 b8af 	b.w	8011a74 <_fwalk_reent>
 8011916:	bf00      	nop
 8011918:	08011851 	.word	0x08011851

0801191c <__sfmoreglue>:
 801191c:	b570      	push	{r4, r5, r6, lr}
 801191e:	2268      	movs	r2, #104	; 0x68
 8011920:	1e4d      	subs	r5, r1, #1
 8011922:	4355      	muls	r5, r2
 8011924:	460e      	mov	r6, r1
 8011926:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801192a:	f7ff fa65 	bl	8010df8 <_malloc_r>
 801192e:	4604      	mov	r4, r0
 8011930:	b140      	cbz	r0, 8011944 <__sfmoreglue+0x28>
 8011932:	2100      	movs	r1, #0
 8011934:	e9c0 1600 	strd	r1, r6, [r0]
 8011938:	300c      	adds	r0, #12
 801193a:	60a0      	str	r0, [r4, #8]
 801193c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011940:	f7fd fb3c 	bl	800efbc <memset>
 8011944:	4620      	mov	r0, r4
 8011946:	bd70      	pop	{r4, r5, r6, pc}

08011948 <__sfp_lock_acquire>:
 8011948:	4801      	ldr	r0, [pc, #4]	; (8011950 <__sfp_lock_acquire+0x8>)
 801194a:	f000 b8b3 	b.w	8011ab4 <__retarget_lock_acquire_recursive>
 801194e:	bf00      	nop
 8011950:	2000493d 	.word	0x2000493d

08011954 <__sfp_lock_release>:
 8011954:	4801      	ldr	r0, [pc, #4]	; (801195c <__sfp_lock_release+0x8>)
 8011956:	f000 b8ae 	b.w	8011ab6 <__retarget_lock_release_recursive>
 801195a:	bf00      	nop
 801195c:	2000493d 	.word	0x2000493d

08011960 <__sinit_lock_acquire>:
 8011960:	4801      	ldr	r0, [pc, #4]	; (8011968 <__sinit_lock_acquire+0x8>)
 8011962:	f000 b8a7 	b.w	8011ab4 <__retarget_lock_acquire_recursive>
 8011966:	bf00      	nop
 8011968:	2000493e 	.word	0x2000493e

0801196c <__sinit_lock_release>:
 801196c:	4801      	ldr	r0, [pc, #4]	; (8011974 <__sinit_lock_release+0x8>)
 801196e:	f000 b8a2 	b.w	8011ab6 <__retarget_lock_release_recursive>
 8011972:	bf00      	nop
 8011974:	2000493e 	.word	0x2000493e

08011978 <__sinit>:
 8011978:	b510      	push	{r4, lr}
 801197a:	4604      	mov	r4, r0
 801197c:	f7ff fff0 	bl	8011960 <__sinit_lock_acquire>
 8011980:	69a3      	ldr	r3, [r4, #24]
 8011982:	b11b      	cbz	r3, 801198c <__sinit+0x14>
 8011984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011988:	f7ff bff0 	b.w	801196c <__sinit_lock_release>
 801198c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011990:	6523      	str	r3, [r4, #80]	; 0x50
 8011992:	4b13      	ldr	r3, [pc, #76]	; (80119e0 <__sinit+0x68>)
 8011994:	4a13      	ldr	r2, [pc, #76]	; (80119e4 <__sinit+0x6c>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	62a2      	str	r2, [r4, #40]	; 0x28
 801199a:	42a3      	cmp	r3, r4
 801199c:	bf04      	itt	eq
 801199e:	2301      	moveq	r3, #1
 80119a0:	61a3      	streq	r3, [r4, #24]
 80119a2:	4620      	mov	r0, r4
 80119a4:	f000 f820 	bl	80119e8 <__sfp>
 80119a8:	6060      	str	r0, [r4, #4]
 80119aa:	4620      	mov	r0, r4
 80119ac:	f000 f81c 	bl	80119e8 <__sfp>
 80119b0:	60a0      	str	r0, [r4, #8]
 80119b2:	4620      	mov	r0, r4
 80119b4:	f000 f818 	bl	80119e8 <__sfp>
 80119b8:	2200      	movs	r2, #0
 80119ba:	60e0      	str	r0, [r4, #12]
 80119bc:	2104      	movs	r1, #4
 80119be:	6860      	ldr	r0, [r4, #4]
 80119c0:	f7ff ff82 	bl	80118c8 <std>
 80119c4:	68a0      	ldr	r0, [r4, #8]
 80119c6:	2201      	movs	r2, #1
 80119c8:	2109      	movs	r1, #9
 80119ca:	f7ff ff7d 	bl	80118c8 <std>
 80119ce:	68e0      	ldr	r0, [r4, #12]
 80119d0:	2202      	movs	r2, #2
 80119d2:	2112      	movs	r1, #18
 80119d4:	f7ff ff78 	bl	80118c8 <std>
 80119d8:	2301      	movs	r3, #1
 80119da:	61a3      	str	r3, [r4, #24]
 80119dc:	e7d2      	b.n	8011984 <__sinit+0xc>
 80119de:	bf00      	nop
 80119e0:	08014520 	.word	0x08014520
 80119e4:	08011911 	.word	0x08011911

080119e8 <__sfp>:
 80119e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ea:	4607      	mov	r7, r0
 80119ec:	f7ff ffac 	bl	8011948 <__sfp_lock_acquire>
 80119f0:	4b1e      	ldr	r3, [pc, #120]	; (8011a6c <__sfp+0x84>)
 80119f2:	681e      	ldr	r6, [r3, #0]
 80119f4:	69b3      	ldr	r3, [r6, #24]
 80119f6:	b913      	cbnz	r3, 80119fe <__sfp+0x16>
 80119f8:	4630      	mov	r0, r6
 80119fa:	f7ff ffbd 	bl	8011978 <__sinit>
 80119fe:	3648      	adds	r6, #72	; 0x48
 8011a00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011a04:	3b01      	subs	r3, #1
 8011a06:	d503      	bpl.n	8011a10 <__sfp+0x28>
 8011a08:	6833      	ldr	r3, [r6, #0]
 8011a0a:	b30b      	cbz	r3, 8011a50 <__sfp+0x68>
 8011a0c:	6836      	ldr	r6, [r6, #0]
 8011a0e:	e7f7      	b.n	8011a00 <__sfp+0x18>
 8011a10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011a14:	b9d5      	cbnz	r5, 8011a4c <__sfp+0x64>
 8011a16:	4b16      	ldr	r3, [pc, #88]	; (8011a70 <__sfp+0x88>)
 8011a18:	60e3      	str	r3, [r4, #12]
 8011a1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011a1e:	6665      	str	r5, [r4, #100]	; 0x64
 8011a20:	f000 f847 	bl	8011ab2 <__retarget_lock_init_recursive>
 8011a24:	f7ff ff96 	bl	8011954 <__sfp_lock_release>
 8011a28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011a2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011a30:	6025      	str	r5, [r4, #0]
 8011a32:	61a5      	str	r5, [r4, #24]
 8011a34:	2208      	movs	r2, #8
 8011a36:	4629      	mov	r1, r5
 8011a38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011a3c:	f7fd fabe 	bl	800efbc <memset>
 8011a40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011a44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011a48:	4620      	mov	r0, r4
 8011a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a4c:	3468      	adds	r4, #104	; 0x68
 8011a4e:	e7d9      	b.n	8011a04 <__sfp+0x1c>
 8011a50:	2104      	movs	r1, #4
 8011a52:	4638      	mov	r0, r7
 8011a54:	f7ff ff62 	bl	801191c <__sfmoreglue>
 8011a58:	4604      	mov	r4, r0
 8011a5a:	6030      	str	r0, [r6, #0]
 8011a5c:	2800      	cmp	r0, #0
 8011a5e:	d1d5      	bne.n	8011a0c <__sfp+0x24>
 8011a60:	f7ff ff78 	bl	8011954 <__sfp_lock_release>
 8011a64:	230c      	movs	r3, #12
 8011a66:	603b      	str	r3, [r7, #0]
 8011a68:	e7ee      	b.n	8011a48 <__sfp+0x60>
 8011a6a:	bf00      	nop
 8011a6c:	08014520 	.word	0x08014520
 8011a70:	ffff0001 	.word	0xffff0001

08011a74 <_fwalk_reent>:
 8011a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a78:	4606      	mov	r6, r0
 8011a7a:	4688      	mov	r8, r1
 8011a7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011a80:	2700      	movs	r7, #0
 8011a82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a86:	f1b9 0901 	subs.w	r9, r9, #1
 8011a8a:	d505      	bpl.n	8011a98 <_fwalk_reent+0x24>
 8011a8c:	6824      	ldr	r4, [r4, #0]
 8011a8e:	2c00      	cmp	r4, #0
 8011a90:	d1f7      	bne.n	8011a82 <_fwalk_reent+0xe>
 8011a92:	4638      	mov	r0, r7
 8011a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a98:	89ab      	ldrh	r3, [r5, #12]
 8011a9a:	2b01      	cmp	r3, #1
 8011a9c:	d907      	bls.n	8011aae <_fwalk_reent+0x3a>
 8011a9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011aa2:	3301      	adds	r3, #1
 8011aa4:	d003      	beq.n	8011aae <_fwalk_reent+0x3a>
 8011aa6:	4629      	mov	r1, r5
 8011aa8:	4630      	mov	r0, r6
 8011aaa:	47c0      	blx	r8
 8011aac:	4307      	orrs	r7, r0
 8011aae:	3568      	adds	r5, #104	; 0x68
 8011ab0:	e7e9      	b.n	8011a86 <_fwalk_reent+0x12>

08011ab2 <__retarget_lock_init_recursive>:
 8011ab2:	4770      	bx	lr

08011ab4 <__retarget_lock_acquire_recursive>:
 8011ab4:	4770      	bx	lr

08011ab6 <__retarget_lock_release_recursive>:
 8011ab6:	4770      	bx	lr

08011ab8 <__swhatbuf_r>:
 8011ab8:	b570      	push	{r4, r5, r6, lr}
 8011aba:	460e      	mov	r6, r1
 8011abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ac0:	2900      	cmp	r1, #0
 8011ac2:	b096      	sub	sp, #88	; 0x58
 8011ac4:	4614      	mov	r4, r2
 8011ac6:	461d      	mov	r5, r3
 8011ac8:	da08      	bge.n	8011adc <__swhatbuf_r+0x24>
 8011aca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	602a      	str	r2, [r5, #0]
 8011ad2:	061a      	lsls	r2, r3, #24
 8011ad4:	d410      	bmi.n	8011af8 <__swhatbuf_r+0x40>
 8011ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ada:	e00e      	b.n	8011afa <__swhatbuf_r+0x42>
 8011adc:	466a      	mov	r2, sp
 8011ade:	f000 f903 	bl	8011ce8 <_fstat_r>
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	dbf1      	blt.n	8011aca <__swhatbuf_r+0x12>
 8011ae6:	9a01      	ldr	r2, [sp, #4]
 8011ae8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011aec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011af0:	425a      	negs	r2, r3
 8011af2:	415a      	adcs	r2, r3
 8011af4:	602a      	str	r2, [r5, #0]
 8011af6:	e7ee      	b.n	8011ad6 <__swhatbuf_r+0x1e>
 8011af8:	2340      	movs	r3, #64	; 0x40
 8011afa:	2000      	movs	r0, #0
 8011afc:	6023      	str	r3, [r4, #0]
 8011afe:	b016      	add	sp, #88	; 0x58
 8011b00:	bd70      	pop	{r4, r5, r6, pc}
	...

08011b04 <__smakebuf_r>:
 8011b04:	898b      	ldrh	r3, [r1, #12]
 8011b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b08:	079d      	lsls	r5, r3, #30
 8011b0a:	4606      	mov	r6, r0
 8011b0c:	460c      	mov	r4, r1
 8011b0e:	d507      	bpl.n	8011b20 <__smakebuf_r+0x1c>
 8011b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b14:	6023      	str	r3, [r4, #0]
 8011b16:	6123      	str	r3, [r4, #16]
 8011b18:	2301      	movs	r3, #1
 8011b1a:	6163      	str	r3, [r4, #20]
 8011b1c:	b002      	add	sp, #8
 8011b1e:	bd70      	pop	{r4, r5, r6, pc}
 8011b20:	ab01      	add	r3, sp, #4
 8011b22:	466a      	mov	r2, sp
 8011b24:	f7ff ffc8 	bl	8011ab8 <__swhatbuf_r>
 8011b28:	9900      	ldr	r1, [sp, #0]
 8011b2a:	4605      	mov	r5, r0
 8011b2c:	4630      	mov	r0, r6
 8011b2e:	f7ff f963 	bl	8010df8 <_malloc_r>
 8011b32:	b948      	cbnz	r0, 8011b48 <__smakebuf_r+0x44>
 8011b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b38:	059a      	lsls	r2, r3, #22
 8011b3a:	d4ef      	bmi.n	8011b1c <__smakebuf_r+0x18>
 8011b3c:	f023 0303 	bic.w	r3, r3, #3
 8011b40:	f043 0302 	orr.w	r3, r3, #2
 8011b44:	81a3      	strh	r3, [r4, #12]
 8011b46:	e7e3      	b.n	8011b10 <__smakebuf_r+0xc>
 8011b48:	4b0d      	ldr	r3, [pc, #52]	; (8011b80 <__smakebuf_r+0x7c>)
 8011b4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b4c:	89a3      	ldrh	r3, [r4, #12]
 8011b4e:	6020      	str	r0, [r4, #0]
 8011b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b54:	81a3      	strh	r3, [r4, #12]
 8011b56:	9b00      	ldr	r3, [sp, #0]
 8011b58:	6163      	str	r3, [r4, #20]
 8011b5a:	9b01      	ldr	r3, [sp, #4]
 8011b5c:	6120      	str	r0, [r4, #16]
 8011b5e:	b15b      	cbz	r3, 8011b78 <__smakebuf_r+0x74>
 8011b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b64:	4630      	mov	r0, r6
 8011b66:	f000 f8d1 	bl	8011d0c <_isatty_r>
 8011b6a:	b128      	cbz	r0, 8011b78 <__smakebuf_r+0x74>
 8011b6c:	89a3      	ldrh	r3, [r4, #12]
 8011b6e:	f023 0303 	bic.w	r3, r3, #3
 8011b72:	f043 0301 	orr.w	r3, r3, #1
 8011b76:	81a3      	strh	r3, [r4, #12]
 8011b78:	89a0      	ldrh	r0, [r4, #12]
 8011b7a:	4305      	orrs	r5, r0
 8011b7c:	81a5      	strh	r5, [r4, #12]
 8011b7e:	e7cd      	b.n	8011b1c <__smakebuf_r+0x18>
 8011b80:	08011911 	.word	0x08011911

08011b84 <_malloc_usable_size_r>:
 8011b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b88:	1f18      	subs	r0, r3, #4
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	bfbc      	itt	lt
 8011b8e:	580b      	ldrlt	r3, [r1, r0]
 8011b90:	18c0      	addlt	r0, r0, r3
 8011b92:	4770      	bx	lr

08011b94 <_raise_r>:
 8011b94:	291f      	cmp	r1, #31
 8011b96:	b538      	push	{r3, r4, r5, lr}
 8011b98:	4604      	mov	r4, r0
 8011b9a:	460d      	mov	r5, r1
 8011b9c:	d904      	bls.n	8011ba8 <_raise_r+0x14>
 8011b9e:	2316      	movs	r3, #22
 8011ba0:	6003      	str	r3, [r0, #0]
 8011ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ba6:	bd38      	pop	{r3, r4, r5, pc}
 8011ba8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011baa:	b112      	cbz	r2, 8011bb2 <_raise_r+0x1e>
 8011bac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011bb0:	b94b      	cbnz	r3, 8011bc6 <_raise_r+0x32>
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f000 f830 	bl	8011c18 <_getpid_r>
 8011bb8:	462a      	mov	r2, r5
 8011bba:	4601      	mov	r1, r0
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bc2:	f000 b817 	b.w	8011bf4 <_kill_r>
 8011bc6:	2b01      	cmp	r3, #1
 8011bc8:	d00a      	beq.n	8011be0 <_raise_r+0x4c>
 8011bca:	1c59      	adds	r1, r3, #1
 8011bcc:	d103      	bne.n	8011bd6 <_raise_r+0x42>
 8011bce:	2316      	movs	r3, #22
 8011bd0:	6003      	str	r3, [r0, #0]
 8011bd2:	2001      	movs	r0, #1
 8011bd4:	e7e7      	b.n	8011ba6 <_raise_r+0x12>
 8011bd6:	2400      	movs	r4, #0
 8011bd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011bdc:	4628      	mov	r0, r5
 8011bde:	4798      	blx	r3
 8011be0:	2000      	movs	r0, #0
 8011be2:	e7e0      	b.n	8011ba6 <_raise_r+0x12>

08011be4 <raise>:
 8011be4:	4b02      	ldr	r3, [pc, #8]	; (8011bf0 <raise+0xc>)
 8011be6:	4601      	mov	r1, r0
 8011be8:	6818      	ldr	r0, [r3, #0]
 8011bea:	f7ff bfd3 	b.w	8011b94 <_raise_r>
 8011bee:	bf00      	nop
 8011bf0:	2000001c 	.word	0x2000001c

08011bf4 <_kill_r>:
 8011bf4:	b538      	push	{r3, r4, r5, lr}
 8011bf6:	4d07      	ldr	r5, [pc, #28]	; (8011c14 <_kill_r+0x20>)
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	4604      	mov	r4, r0
 8011bfc:	4608      	mov	r0, r1
 8011bfe:	4611      	mov	r1, r2
 8011c00:	602b      	str	r3, [r5, #0]
 8011c02:	f7f2 fb2b 	bl	800425c <_kill>
 8011c06:	1c43      	adds	r3, r0, #1
 8011c08:	d102      	bne.n	8011c10 <_kill_r+0x1c>
 8011c0a:	682b      	ldr	r3, [r5, #0]
 8011c0c:	b103      	cbz	r3, 8011c10 <_kill_r+0x1c>
 8011c0e:	6023      	str	r3, [r4, #0]
 8011c10:	bd38      	pop	{r3, r4, r5, pc}
 8011c12:	bf00      	nop
 8011c14:	20004938 	.word	0x20004938

08011c18 <_getpid_r>:
 8011c18:	f7f2 bb18 	b.w	800424c <_getpid>

08011c1c <__sread>:
 8011c1c:	b510      	push	{r4, lr}
 8011c1e:	460c      	mov	r4, r1
 8011c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c24:	f000 f894 	bl	8011d50 <_read_r>
 8011c28:	2800      	cmp	r0, #0
 8011c2a:	bfab      	itete	ge
 8011c2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8011c30:	181b      	addge	r3, r3, r0
 8011c32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011c36:	bfac      	ite	ge
 8011c38:	6563      	strge	r3, [r4, #84]	; 0x54
 8011c3a:	81a3      	strhlt	r3, [r4, #12]
 8011c3c:	bd10      	pop	{r4, pc}

08011c3e <__swrite>:
 8011c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c42:	461f      	mov	r7, r3
 8011c44:	898b      	ldrh	r3, [r1, #12]
 8011c46:	05db      	lsls	r3, r3, #23
 8011c48:	4605      	mov	r5, r0
 8011c4a:	460c      	mov	r4, r1
 8011c4c:	4616      	mov	r6, r2
 8011c4e:	d505      	bpl.n	8011c5c <__swrite+0x1e>
 8011c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c54:	2302      	movs	r3, #2
 8011c56:	2200      	movs	r2, #0
 8011c58:	f000 f868 	bl	8011d2c <_lseek_r>
 8011c5c:	89a3      	ldrh	r3, [r4, #12]
 8011c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c66:	81a3      	strh	r3, [r4, #12]
 8011c68:	4632      	mov	r2, r6
 8011c6a:	463b      	mov	r3, r7
 8011c6c:	4628      	mov	r0, r5
 8011c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c72:	f000 b817 	b.w	8011ca4 <_write_r>

08011c76 <__sseek>:
 8011c76:	b510      	push	{r4, lr}
 8011c78:	460c      	mov	r4, r1
 8011c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c7e:	f000 f855 	bl	8011d2c <_lseek_r>
 8011c82:	1c43      	adds	r3, r0, #1
 8011c84:	89a3      	ldrh	r3, [r4, #12]
 8011c86:	bf15      	itete	ne
 8011c88:	6560      	strne	r0, [r4, #84]	; 0x54
 8011c8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011c8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011c92:	81a3      	strheq	r3, [r4, #12]
 8011c94:	bf18      	it	ne
 8011c96:	81a3      	strhne	r3, [r4, #12]
 8011c98:	bd10      	pop	{r4, pc}

08011c9a <__sclose>:
 8011c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c9e:	f000 b813 	b.w	8011cc8 <_close_r>
	...

08011ca4 <_write_r>:
 8011ca4:	b538      	push	{r3, r4, r5, lr}
 8011ca6:	4d07      	ldr	r5, [pc, #28]	; (8011cc4 <_write_r+0x20>)
 8011ca8:	4604      	mov	r4, r0
 8011caa:	4608      	mov	r0, r1
 8011cac:	4611      	mov	r1, r2
 8011cae:	2200      	movs	r2, #0
 8011cb0:	602a      	str	r2, [r5, #0]
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	f7f2 fb09 	bl	80042ca <_write>
 8011cb8:	1c43      	adds	r3, r0, #1
 8011cba:	d102      	bne.n	8011cc2 <_write_r+0x1e>
 8011cbc:	682b      	ldr	r3, [r5, #0]
 8011cbe:	b103      	cbz	r3, 8011cc2 <_write_r+0x1e>
 8011cc0:	6023      	str	r3, [r4, #0]
 8011cc2:	bd38      	pop	{r3, r4, r5, pc}
 8011cc4:	20004938 	.word	0x20004938

08011cc8 <_close_r>:
 8011cc8:	b538      	push	{r3, r4, r5, lr}
 8011cca:	4d06      	ldr	r5, [pc, #24]	; (8011ce4 <_close_r+0x1c>)
 8011ccc:	2300      	movs	r3, #0
 8011cce:	4604      	mov	r4, r0
 8011cd0:	4608      	mov	r0, r1
 8011cd2:	602b      	str	r3, [r5, #0]
 8011cd4:	f7f2 fb15 	bl	8004302 <_close>
 8011cd8:	1c43      	adds	r3, r0, #1
 8011cda:	d102      	bne.n	8011ce2 <_close_r+0x1a>
 8011cdc:	682b      	ldr	r3, [r5, #0]
 8011cde:	b103      	cbz	r3, 8011ce2 <_close_r+0x1a>
 8011ce0:	6023      	str	r3, [r4, #0]
 8011ce2:	bd38      	pop	{r3, r4, r5, pc}
 8011ce4:	20004938 	.word	0x20004938

08011ce8 <_fstat_r>:
 8011ce8:	b538      	push	{r3, r4, r5, lr}
 8011cea:	4d07      	ldr	r5, [pc, #28]	; (8011d08 <_fstat_r+0x20>)
 8011cec:	2300      	movs	r3, #0
 8011cee:	4604      	mov	r4, r0
 8011cf0:	4608      	mov	r0, r1
 8011cf2:	4611      	mov	r1, r2
 8011cf4:	602b      	str	r3, [r5, #0]
 8011cf6:	f7f2 fb10 	bl	800431a <_fstat>
 8011cfa:	1c43      	adds	r3, r0, #1
 8011cfc:	d102      	bne.n	8011d04 <_fstat_r+0x1c>
 8011cfe:	682b      	ldr	r3, [r5, #0]
 8011d00:	b103      	cbz	r3, 8011d04 <_fstat_r+0x1c>
 8011d02:	6023      	str	r3, [r4, #0]
 8011d04:	bd38      	pop	{r3, r4, r5, pc}
 8011d06:	bf00      	nop
 8011d08:	20004938 	.word	0x20004938

08011d0c <_isatty_r>:
 8011d0c:	b538      	push	{r3, r4, r5, lr}
 8011d0e:	4d06      	ldr	r5, [pc, #24]	; (8011d28 <_isatty_r+0x1c>)
 8011d10:	2300      	movs	r3, #0
 8011d12:	4604      	mov	r4, r0
 8011d14:	4608      	mov	r0, r1
 8011d16:	602b      	str	r3, [r5, #0]
 8011d18:	f7f2 fb0f 	bl	800433a <_isatty>
 8011d1c:	1c43      	adds	r3, r0, #1
 8011d1e:	d102      	bne.n	8011d26 <_isatty_r+0x1a>
 8011d20:	682b      	ldr	r3, [r5, #0]
 8011d22:	b103      	cbz	r3, 8011d26 <_isatty_r+0x1a>
 8011d24:	6023      	str	r3, [r4, #0]
 8011d26:	bd38      	pop	{r3, r4, r5, pc}
 8011d28:	20004938 	.word	0x20004938

08011d2c <_lseek_r>:
 8011d2c:	b538      	push	{r3, r4, r5, lr}
 8011d2e:	4d07      	ldr	r5, [pc, #28]	; (8011d4c <_lseek_r+0x20>)
 8011d30:	4604      	mov	r4, r0
 8011d32:	4608      	mov	r0, r1
 8011d34:	4611      	mov	r1, r2
 8011d36:	2200      	movs	r2, #0
 8011d38:	602a      	str	r2, [r5, #0]
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	f7f2 fb08 	bl	8004350 <_lseek>
 8011d40:	1c43      	adds	r3, r0, #1
 8011d42:	d102      	bne.n	8011d4a <_lseek_r+0x1e>
 8011d44:	682b      	ldr	r3, [r5, #0]
 8011d46:	b103      	cbz	r3, 8011d4a <_lseek_r+0x1e>
 8011d48:	6023      	str	r3, [r4, #0]
 8011d4a:	bd38      	pop	{r3, r4, r5, pc}
 8011d4c:	20004938 	.word	0x20004938

08011d50 <_read_r>:
 8011d50:	b538      	push	{r3, r4, r5, lr}
 8011d52:	4d07      	ldr	r5, [pc, #28]	; (8011d70 <_read_r+0x20>)
 8011d54:	4604      	mov	r4, r0
 8011d56:	4608      	mov	r0, r1
 8011d58:	4611      	mov	r1, r2
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	602a      	str	r2, [r5, #0]
 8011d5e:	461a      	mov	r2, r3
 8011d60:	f7f2 fa96 	bl	8004290 <_read>
 8011d64:	1c43      	adds	r3, r0, #1
 8011d66:	d102      	bne.n	8011d6e <_read_r+0x1e>
 8011d68:	682b      	ldr	r3, [r5, #0]
 8011d6a:	b103      	cbz	r3, 8011d6e <_read_r+0x1e>
 8011d6c:	6023      	str	r3, [r4, #0]
 8011d6e:	bd38      	pop	{r3, r4, r5, pc}
 8011d70:	20004938 	.word	0x20004938

08011d74 <cosf>:
 8011d74:	ee10 3a10 	vmov	r3, s0
 8011d78:	b507      	push	{r0, r1, r2, lr}
 8011d7a:	4a1e      	ldr	r2, [pc, #120]	; (8011df4 <cosf+0x80>)
 8011d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011d80:	4293      	cmp	r3, r2
 8011d82:	dc06      	bgt.n	8011d92 <cosf+0x1e>
 8011d84:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8011df8 <cosf+0x84>
 8011d88:	b003      	add	sp, #12
 8011d8a:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d8e:	f001 bce7 	b.w	8013760 <__kernel_cosf>
 8011d92:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011d96:	db04      	blt.n	8011da2 <cosf+0x2e>
 8011d98:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011d9c:	b003      	add	sp, #12
 8011d9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011da2:	4668      	mov	r0, sp
 8011da4:	f001 fb9c 	bl	80134e0 <__ieee754_rem_pio2f>
 8011da8:	f000 0003 	and.w	r0, r0, #3
 8011dac:	2801      	cmp	r0, #1
 8011dae:	d009      	beq.n	8011dc4 <cosf+0x50>
 8011db0:	2802      	cmp	r0, #2
 8011db2:	d010      	beq.n	8011dd6 <cosf+0x62>
 8011db4:	b9b0      	cbnz	r0, 8011de4 <cosf+0x70>
 8011db6:	eddd 0a01 	vldr	s1, [sp, #4]
 8011dba:	ed9d 0a00 	vldr	s0, [sp]
 8011dbe:	f001 fccf 	bl	8013760 <__kernel_cosf>
 8011dc2:	e7eb      	b.n	8011d9c <cosf+0x28>
 8011dc4:	eddd 0a01 	vldr	s1, [sp, #4]
 8011dc8:	ed9d 0a00 	vldr	s0, [sp]
 8011dcc:	f001 ff9e 	bl	8013d0c <__kernel_sinf>
 8011dd0:	eeb1 0a40 	vneg.f32	s0, s0
 8011dd4:	e7e2      	b.n	8011d9c <cosf+0x28>
 8011dd6:	eddd 0a01 	vldr	s1, [sp, #4]
 8011dda:	ed9d 0a00 	vldr	s0, [sp]
 8011dde:	f001 fcbf 	bl	8013760 <__kernel_cosf>
 8011de2:	e7f5      	b.n	8011dd0 <cosf+0x5c>
 8011de4:	eddd 0a01 	vldr	s1, [sp, #4]
 8011de8:	ed9d 0a00 	vldr	s0, [sp]
 8011dec:	2001      	movs	r0, #1
 8011dee:	f001 ff8d 	bl	8013d0c <__kernel_sinf>
 8011df2:	e7d3      	b.n	8011d9c <cosf+0x28>
 8011df4:	3f490fd8 	.word	0x3f490fd8
 8011df8:	00000000 	.word	0x00000000

08011dfc <sinf>:
 8011dfc:	ee10 3a10 	vmov	r3, s0
 8011e00:	b507      	push	{r0, r1, r2, lr}
 8011e02:	4a1f      	ldr	r2, [pc, #124]	; (8011e80 <sinf+0x84>)
 8011e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011e08:	4293      	cmp	r3, r2
 8011e0a:	dc07      	bgt.n	8011e1c <sinf+0x20>
 8011e0c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8011e84 <sinf+0x88>
 8011e10:	2000      	movs	r0, #0
 8011e12:	b003      	add	sp, #12
 8011e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e18:	f001 bf78 	b.w	8013d0c <__kernel_sinf>
 8011e1c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011e20:	db04      	blt.n	8011e2c <sinf+0x30>
 8011e22:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011e26:	b003      	add	sp, #12
 8011e28:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e2c:	4668      	mov	r0, sp
 8011e2e:	f001 fb57 	bl	80134e0 <__ieee754_rem_pio2f>
 8011e32:	f000 0003 	and.w	r0, r0, #3
 8011e36:	2801      	cmp	r0, #1
 8011e38:	d00a      	beq.n	8011e50 <sinf+0x54>
 8011e3a:	2802      	cmp	r0, #2
 8011e3c:	d00f      	beq.n	8011e5e <sinf+0x62>
 8011e3e:	b9c0      	cbnz	r0, 8011e72 <sinf+0x76>
 8011e40:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e44:	ed9d 0a00 	vldr	s0, [sp]
 8011e48:	2001      	movs	r0, #1
 8011e4a:	f001 ff5f 	bl	8013d0c <__kernel_sinf>
 8011e4e:	e7ea      	b.n	8011e26 <sinf+0x2a>
 8011e50:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e54:	ed9d 0a00 	vldr	s0, [sp]
 8011e58:	f001 fc82 	bl	8013760 <__kernel_cosf>
 8011e5c:	e7e3      	b.n	8011e26 <sinf+0x2a>
 8011e5e:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e62:	ed9d 0a00 	vldr	s0, [sp]
 8011e66:	2001      	movs	r0, #1
 8011e68:	f001 ff50 	bl	8013d0c <__kernel_sinf>
 8011e6c:	eeb1 0a40 	vneg.f32	s0, s0
 8011e70:	e7d9      	b.n	8011e26 <sinf+0x2a>
 8011e72:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e76:	ed9d 0a00 	vldr	s0, [sp]
 8011e7a:	f001 fc71 	bl	8013760 <__kernel_cosf>
 8011e7e:	e7f5      	b.n	8011e6c <sinf+0x70>
 8011e80:	3f490fd8 	.word	0x3f490fd8
 8011e84:	00000000 	.word	0x00000000

08011e88 <pow>:
 8011e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e8a:	ed2d 8b02 	vpush	{d8}
 8011e8e:	eeb0 8a40 	vmov.f32	s16, s0
 8011e92:	eef0 8a60 	vmov.f32	s17, s1
 8011e96:	ec55 4b11 	vmov	r4, r5, d1
 8011e9a:	f000 f8ed 	bl	8012078 <__ieee754_pow>
 8011e9e:	4622      	mov	r2, r4
 8011ea0:	462b      	mov	r3, r5
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	4629      	mov	r1, r5
 8011ea6:	ec57 6b10 	vmov	r6, r7, d0
 8011eaa:	f7ee fe3f 	bl	8000b2c <__aeabi_dcmpun>
 8011eae:	2800      	cmp	r0, #0
 8011eb0:	d13b      	bne.n	8011f2a <pow+0xa2>
 8011eb2:	ec51 0b18 	vmov	r0, r1, d8
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	2300      	movs	r3, #0
 8011eba:	f7ee fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ebe:	b1b8      	cbz	r0, 8011ef0 <pow+0x68>
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	4629      	mov	r1, r5
 8011ec8:	f7ee fdfe 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ecc:	2800      	cmp	r0, #0
 8011ece:	d146      	bne.n	8011f5e <pow+0xd6>
 8011ed0:	ec45 4b10 	vmov	d0, r4, r5
 8011ed4:	f001 ffbd 	bl	8013e52 <finite>
 8011ed8:	b338      	cbz	r0, 8011f2a <pow+0xa2>
 8011eda:	2200      	movs	r2, #0
 8011edc:	2300      	movs	r3, #0
 8011ede:	4620      	mov	r0, r4
 8011ee0:	4629      	mov	r1, r5
 8011ee2:	f7ee fdfb 	bl	8000adc <__aeabi_dcmplt>
 8011ee6:	b300      	cbz	r0, 8011f2a <pow+0xa2>
 8011ee8:	f7fd f830 	bl	800ef4c <__errno>
 8011eec:	2322      	movs	r3, #34	; 0x22
 8011eee:	e01b      	b.n	8011f28 <pow+0xa0>
 8011ef0:	ec47 6b10 	vmov	d0, r6, r7
 8011ef4:	f001 ffad 	bl	8013e52 <finite>
 8011ef8:	b9e0      	cbnz	r0, 8011f34 <pow+0xac>
 8011efa:	eeb0 0a48 	vmov.f32	s0, s16
 8011efe:	eef0 0a68 	vmov.f32	s1, s17
 8011f02:	f001 ffa6 	bl	8013e52 <finite>
 8011f06:	b1a8      	cbz	r0, 8011f34 <pow+0xac>
 8011f08:	ec45 4b10 	vmov	d0, r4, r5
 8011f0c:	f001 ffa1 	bl	8013e52 <finite>
 8011f10:	b180      	cbz	r0, 8011f34 <pow+0xac>
 8011f12:	4632      	mov	r2, r6
 8011f14:	463b      	mov	r3, r7
 8011f16:	4630      	mov	r0, r6
 8011f18:	4639      	mov	r1, r7
 8011f1a:	f7ee fe07 	bl	8000b2c <__aeabi_dcmpun>
 8011f1e:	2800      	cmp	r0, #0
 8011f20:	d0e2      	beq.n	8011ee8 <pow+0x60>
 8011f22:	f7fd f813 	bl	800ef4c <__errno>
 8011f26:	2321      	movs	r3, #33	; 0x21
 8011f28:	6003      	str	r3, [r0, #0]
 8011f2a:	ecbd 8b02 	vpop	{d8}
 8011f2e:	ec47 6b10 	vmov	d0, r6, r7
 8011f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f34:	2200      	movs	r2, #0
 8011f36:	2300      	movs	r3, #0
 8011f38:	4630      	mov	r0, r6
 8011f3a:	4639      	mov	r1, r7
 8011f3c:	f7ee fdc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f40:	2800      	cmp	r0, #0
 8011f42:	d0f2      	beq.n	8011f2a <pow+0xa2>
 8011f44:	eeb0 0a48 	vmov.f32	s0, s16
 8011f48:	eef0 0a68 	vmov.f32	s1, s17
 8011f4c:	f001 ff81 	bl	8013e52 <finite>
 8011f50:	2800      	cmp	r0, #0
 8011f52:	d0ea      	beq.n	8011f2a <pow+0xa2>
 8011f54:	ec45 4b10 	vmov	d0, r4, r5
 8011f58:	f001 ff7b 	bl	8013e52 <finite>
 8011f5c:	e7c3      	b.n	8011ee6 <pow+0x5e>
 8011f5e:	4f01      	ldr	r7, [pc, #4]	; (8011f64 <pow+0xdc>)
 8011f60:	2600      	movs	r6, #0
 8011f62:	e7e2      	b.n	8011f2a <pow+0xa2>
 8011f64:	3ff00000 	.word	0x3ff00000

08011f68 <asinf>:
 8011f68:	b508      	push	{r3, lr}
 8011f6a:	ed2d 8b02 	vpush	{d8}
 8011f6e:	eeb0 8a40 	vmov.f32	s16, s0
 8011f72:	f000 fe61 	bl	8012c38 <__ieee754_asinf>
 8011f76:	eeb4 8a48 	vcmp.f32	s16, s16
 8011f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f7e:	eef0 8a40 	vmov.f32	s17, s0
 8011f82:	d615      	bvs.n	8011fb0 <asinf+0x48>
 8011f84:	eeb0 0a48 	vmov.f32	s0, s16
 8011f88:	f002 f8c8 	bl	801411c <fabsf>
 8011f8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011f90:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f98:	dd0a      	ble.n	8011fb0 <asinf+0x48>
 8011f9a:	f7fc ffd7 	bl	800ef4c <__errno>
 8011f9e:	ecbd 8b02 	vpop	{d8}
 8011fa2:	2321      	movs	r3, #33	; 0x21
 8011fa4:	6003      	str	r3, [r0, #0]
 8011fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011faa:	4804      	ldr	r0, [pc, #16]	; (8011fbc <asinf+0x54>)
 8011fac:	f002 b90c 	b.w	80141c8 <nanf>
 8011fb0:	eeb0 0a68 	vmov.f32	s0, s17
 8011fb4:	ecbd 8b02 	vpop	{d8}
 8011fb8:	bd08      	pop	{r3, pc}
 8011fba:	bf00      	nop
 8011fbc:	08014790 	.word	0x08014790

08011fc0 <atan2f>:
 8011fc0:	f000 bf20 	b.w	8012e04 <__ieee754_atan2f>

08011fc4 <powf>:
 8011fc4:	b508      	push	{r3, lr}
 8011fc6:	ed2d 8b04 	vpush	{d8-d9}
 8011fca:	eeb0 8a60 	vmov.f32	s16, s1
 8011fce:	eeb0 9a40 	vmov.f32	s18, s0
 8011fd2:	f000 ffb7 	bl	8012f44 <__ieee754_powf>
 8011fd6:	eeb4 8a48 	vcmp.f32	s16, s16
 8011fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fde:	eef0 8a40 	vmov.f32	s17, s0
 8011fe2:	d63e      	bvs.n	8012062 <powf+0x9e>
 8011fe4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fec:	d112      	bne.n	8012014 <powf+0x50>
 8011fee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff6:	d039      	beq.n	801206c <powf+0xa8>
 8011ff8:	eeb0 0a48 	vmov.f32	s0, s16
 8011ffc:	f002 f895 	bl	801412a <finitef>
 8012000:	b378      	cbz	r0, 8012062 <powf+0x9e>
 8012002:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801200a:	d52a      	bpl.n	8012062 <powf+0x9e>
 801200c:	f7fc ff9e 	bl	800ef4c <__errno>
 8012010:	2322      	movs	r3, #34	; 0x22
 8012012:	e014      	b.n	801203e <powf+0x7a>
 8012014:	f002 f889 	bl	801412a <finitef>
 8012018:	b998      	cbnz	r0, 8012042 <powf+0x7e>
 801201a:	eeb0 0a49 	vmov.f32	s0, s18
 801201e:	f002 f884 	bl	801412a <finitef>
 8012022:	b170      	cbz	r0, 8012042 <powf+0x7e>
 8012024:	eeb0 0a48 	vmov.f32	s0, s16
 8012028:	f002 f87f 	bl	801412a <finitef>
 801202c:	b148      	cbz	r0, 8012042 <powf+0x7e>
 801202e:	eef4 8a68 	vcmp.f32	s17, s17
 8012032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012036:	d7e9      	bvc.n	801200c <powf+0x48>
 8012038:	f7fc ff88 	bl	800ef4c <__errno>
 801203c:	2321      	movs	r3, #33	; 0x21
 801203e:	6003      	str	r3, [r0, #0]
 8012040:	e00f      	b.n	8012062 <powf+0x9e>
 8012042:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801204a:	d10a      	bne.n	8012062 <powf+0x9e>
 801204c:	eeb0 0a49 	vmov.f32	s0, s18
 8012050:	f002 f86b 	bl	801412a <finitef>
 8012054:	b128      	cbz	r0, 8012062 <powf+0x9e>
 8012056:	eeb0 0a48 	vmov.f32	s0, s16
 801205a:	f002 f866 	bl	801412a <finitef>
 801205e:	2800      	cmp	r0, #0
 8012060:	d1d4      	bne.n	801200c <powf+0x48>
 8012062:	eeb0 0a68 	vmov.f32	s0, s17
 8012066:	ecbd 8b04 	vpop	{d8-d9}
 801206a:	bd08      	pop	{r3, pc}
 801206c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012070:	e7f7      	b.n	8012062 <powf+0x9e>
 8012072:	0000      	movs	r0, r0
 8012074:	0000      	movs	r0, r0
	...

08012078 <__ieee754_pow>:
 8012078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801207c:	ed2d 8b06 	vpush	{d8-d10}
 8012080:	b089      	sub	sp, #36	; 0x24
 8012082:	ed8d 1b00 	vstr	d1, [sp]
 8012086:	e9dd 2900 	ldrd	r2, r9, [sp]
 801208a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801208e:	ea58 0102 	orrs.w	r1, r8, r2
 8012092:	ec57 6b10 	vmov	r6, r7, d0
 8012096:	d115      	bne.n	80120c4 <__ieee754_pow+0x4c>
 8012098:	19b3      	adds	r3, r6, r6
 801209a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801209e:	4152      	adcs	r2, r2
 80120a0:	4299      	cmp	r1, r3
 80120a2:	4b89      	ldr	r3, [pc, #548]	; (80122c8 <__ieee754_pow+0x250>)
 80120a4:	4193      	sbcs	r3, r2
 80120a6:	f080 84d2 	bcs.w	8012a4e <__ieee754_pow+0x9d6>
 80120aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80120ae:	4630      	mov	r0, r6
 80120b0:	4639      	mov	r1, r7
 80120b2:	f7ee f8eb 	bl	800028c <__adddf3>
 80120b6:	ec41 0b10 	vmov	d0, r0, r1
 80120ba:	b009      	add	sp, #36	; 0x24
 80120bc:	ecbd 8b06 	vpop	{d8-d10}
 80120c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120c4:	4b81      	ldr	r3, [pc, #516]	; (80122cc <__ieee754_pow+0x254>)
 80120c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80120ca:	429c      	cmp	r4, r3
 80120cc:	ee10 aa10 	vmov	sl, s0
 80120d0:	463d      	mov	r5, r7
 80120d2:	dc06      	bgt.n	80120e2 <__ieee754_pow+0x6a>
 80120d4:	d101      	bne.n	80120da <__ieee754_pow+0x62>
 80120d6:	2e00      	cmp	r6, #0
 80120d8:	d1e7      	bne.n	80120aa <__ieee754_pow+0x32>
 80120da:	4598      	cmp	r8, r3
 80120dc:	dc01      	bgt.n	80120e2 <__ieee754_pow+0x6a>
 80120de:	d10f      	bne.n	8012100 <__ieee754_pow+0x88>
 80120e0:	b172      	cbz	r2, 8012100 <__ieee754_pow+0x88>
 80120e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80120e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80120ea:	ea55 050a 	orrs.w	r5, r5, sl
 80120ee:	d1dc      	bne.n	80120aa <__ieee754_pow+0x32>
 80120f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80120f4:	18db      	adds	r3, r3, r3
 80120f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80120fa:	4152      	adcs	r2, r2
 80120fc:	429d      	cmp	r5, r3
 80120fe:	e7d0      	b.n	80120a2 <__ieee754_pow+0x2a>
 8012100:	2d00      	cmp	r5, #0
 8012102:	da3b      	bge.n	801217c <__ieee754_pow+0x104>
 8012104:	4b72      	ldr	r3, [pc, #456]	; (80122d0 <__ieee754_pow+0x258>)
 8012106:	4598      	cmp	r8, r3
 8012108:	dc51      	bgt.n	80121ae <__ieee754_pow+0x136>
 801210a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801210e:	4598      	cmp	r8, r3
 8012110:	f340 84ac 	ble.w	8012a6c <__ieee754_pow+0x9f4>
 8012114:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012118:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801211c:	2b14      	cmp	r3, #20
 801211e:	dd0f      	ble.n	8012140 <__ieee754_pow+0xc8>
 8012120:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012124:	fa22 f103 	lsr.w	r1, r2, r3
 8012128:	fa01 f303 	lsl.w	r3, r1, r3
 801212c:	4293      	cmp	r3, r2
 801212e:	f040 849d 	bne.w	8012a6c <__ieee754_pow+0x9f4>
 8012132:	f001 0101 	and.w	r1, r1, #1
 8012136:	f1c1 0302 	rsb	r3, r1, #2
 801213a:	9304      	str	r3, [sp, #16]
 801213c:	b182      	cbz	r2, 8012160 <__ieee754_pow+0xe8>
 801213e:	e05f      	b.n	8012200 <__ieee754_pow+0x188>
 8012140:	2a00      	cmp	r2, #0
 8012142:	d15b      	bne.n	80121fc <__ieee754_pow+0x184>
 8012144:	f1c3 0314 	rsb	r3, r3, #20
 8012148:	fa48 f103 	asr.w	r1, r8, r3
 801214c:	fa01 f303 	lsl.w	r3, r1, r3
 8012150:	4543      	cmp	r3, r8
 8012152:	f040 8488 	bne.w	8012a66 <__ieee754_pow+0x9ee>
 8012156:	f001 0101 	and.w	r1, r1, #1
 801215a:	f1c1 0302 	rsb	r3, r1, #2
 801215e:	9304      	str	r3, [sp, #16]
 8012160:	4b5c      	ldr	r3, [pc, #368]	; (80122d4 <__ieee754_pow+0x25c>)
 8012162:	4598      	cmp	r8, r3
 8012164:	d132      	bne.n	80121cc <__ieee754_pow+0x154>
 8012166:	f1b9 0f00 	cmp.w	r9, #0
 801216a:	f280 8478 	bge.w	8012a5e <__ieee754_pow+0x9e6>
 801216e:	4959      	ldr	r1, [pc, #356]	; (80122d4 <__ieee754_pow+0x25c>)
 8012170:	4632      	mov	r2, r6
 8012172:	463b      	mov	r3, r7
 8012174:	2000      	movs	r0, #0
 8012176:	f7ee fb69 	bl	800084c <__aeabi_ddiv>
 801217a:	e79c      	b.n	80120b6 <__ieee754_pow+0x3e>
 801217c:	2300      	movs	r3, #0
 801217e:	9304      	str	r3, [sp, #16]
 8012180:	2a00      	cmp	r2, #0
 8012182:	d13d      	bne.n	8012200 <__ieee754_pow+0x188>
 8012184:	4b51      	ldr	r3, [pc, #324]	; (80122cc <__ieee754_pow+0x254>)
 8012186:	4598      	cmp	r8, r3
 8012188:	d1ea      	bne.n	8012160 <__ieee754_pow+0xe8>
 801218a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801218e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012192:	ea53 030a 	orrs.w	r3, r3, sl
 8012196:	f000 845a 	beq.w	8012a4e <__ieee754_pow+0x9d6>
 801219a:	4b4f      	ldr	r3, [pc, #316]	; (80122d8 <__ieee754_pow+0x260>)
 801219c:	429c      	cmp	r4, r3
 801219e:	dd08      	ble.n	80121b2 <__ieee754_pow+0x13a>
 80121a0:	f1b9 0f00 	cmp.w	r9, #0
 80121a4:	f2c0 8457 	blt.w	8012a56 <__ieee754_pow+0x9de>
 80121a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121ac:	e783      	b.n	80120b6 <__ieee754_pow+0x3e>
 80121ae:	2302      	movs	r3, #2
 80121b0:	e7e5      	b.n	801217e <__ieee754_pow+0x106>
 80121b2:	f1b9 0f00 	cmp.w	r9, #0
 80121b6:	f04f 0000 	mov.w	r0, #0
 80121ba:	f04f 0100 	mov.w	r1, #0
 80121be:	f6bf af7a 	bge.w	80120b6 <__ieee754_pow+0x3e>
 80121c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80121c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80121ca:	e774      	b.n	80120b6 <__ieee754_pow+0x3e>
 80121cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80121d0:	d106      	bne.n	80121e0 <__ieee754_pow+0x168>
 80121d2:	4632      	mov	r2, r6
 80121d4:	463b      	mov	r3, r7
 80121d6:	4630      	mov	r0, r6
 80121d8:	4639      	mov	r1, r7
 80121da:	f7ee fa0d 	bl	80005f8 <__aeabi_dmul>
 80121de:	e76a      	b.n	80120b6 <__ieee754_pow+0x3e>
 80121e0:	4b3e      	ldr	r3, [pc, #248]	; (80122dc <__ieee754_pow+0x264>)
 80121e2:	4599      	cmp	r9, r3
 80121e4:	d10c      	bne.n	8012200 <__ieee754_pow+0x188>
 80121e6:	2d00      	cmp	r5, #0
 80121e8:	db0a      	blt.n	8012200 <__ieee754_pow+0x188>
 80121ea:	ec47 6b10 	vmov	d0, r6, r7
 80121ee:	b009      	add	sp, #36	; 0x24
 80121f0:	ecbd 8b06 	vpop	{d8-d10}
 80121f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121f8:	f000 bc6c 	b.w	8012ad4 <__ieee754_sqrt>
 80121fc:	2300      	movs	r3, #0
 80121fe:	9304      	str	r3, [sp, #16]
 8012200:	ec47 6b10 	vmov	d0, r6, r7
 8012204:	f001 fe1c 	bl	8013e40 <fabs>
 8012208:	ec51 0b10 	vmov	r0, r1, d0
 801220c:	f1ba 0f00 	cmp.w	sl, #0
 8012210:	d129      	bne.n	8012266 <__ieee754_pow+0x1ee>
 8012212:	b124      	cbz	r4, 801221e <__ieee754_pow+0x1a6>
 8012214:	4b2f      	ldr	r3, [pc, #188]	; (80122d4 <__ieee754_pow+0x25c>)
 8012216:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801221a:	429a      	cmp	r2, r3
 801221c:	d123      	bne.n	8012266 <__ieee754_pow+0x1ee>
 801221e:	f1b9 0f00 	cmp.w	r9, #0
 8012222:	da05      	bge.n	8012230 <__ieee754_pow+0x1b8>
 8012224:	4602      	mov	r2, r0
 8012226:	460b      	mov	r3, r1
 8012228:	2000      	movs	r0, #0
 801222a:	492a      	ldr	r1, [pc, #168]	; (80122d4 <__ieee754_pow+0x25c>)
 801222c:	f7ee fb0e 	bl	800084c <__aeabi_ddiv>
 8012230:	2d00      	cmp	r5, #0
 8012232:	f6bf af40 	bge.w	80120b6 <__ieee754_pow+0x3e>
 8012236:	9b04      	ldr	r3, [sp, #16]
 8012238:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801223c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012240:	4323      	orrs	r3, r4
 8012242:	d108      	bne.n	8012256 <__ieee754_pow+0x1de>
 8012244:	4602      	mov	r2, r0
 8012246:	460b      	mov	r3, r1
 8012248:	4610      	mov	r0, r2
 801224a:	4619      	mov	r1, r3
 801224c:	f7ee f81c 	bl	8000288 <__aeabi_dsub>
 8012250:	4602      	mov	r2, r0
 8012252:	460b      	mov	r3, r1
 8012254:	e78f      	b.n	8012176 <__ieee754_pow+0xfe>
 8012256:	9b04      	ldr	r3, [sp, #16]
 8012258:	2b01      	cmp	r3, #1
 801225a:	f47f af2c 	bne.w	80120b6 <__ieee754_pow+0x3e>
 801225e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012262:	4619      	mov	r1, r3
 8012264:	e727      	b.n	80120b6 <__ieee754_pow+0x3e>
 8012266:	0feb      	lsrs	r3, r5, #31
 8012268:	3b01      	subs	r3, #1
 801226a:	9306      	str	r3, [sp, #24]
 801226c:	9a06      	ldr	r2, [sp, #24]
 801226e:	9b04      	ldr	r3, [sp, #16]
 8012270:	4313      	orrs	r3, r2
 8012272:	d102      	bne.n	801227a <__ieee754_pow+0x202>
 8012274:	4632      	mov	r2, r6
 8012276:	463b      	mov	r3, r7
 8012278:	e7e6      	b.n	8012248 <__ieee754_pow+0x1d0>
 801227a:	4b19      	ldr	r3, [pc, #100]	; (80122e0 <__ieee754_pow+0x268>)
 801227c:	4598      	cmp	r8, r3
 801227e:	f340 80fb 	ble.w	8012478 <__ieee754_pow+0x400>
 8012282:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012286:	4598      	cmp	r8, r3
 8012288:	4b13      	ldr	r3, [pc, #76]	; (80122d8 <__ieee754_pow+0x260>)
 801228a:	dd0c      	ble.n	80122a6 <__ieee754_pow+0x22e>
 801228c:	429c      	cmp	r4, r3
 801228e:	dc0f      	bgt.n	80122b0 <__ieee754_pow+0x238>
 8012290:	f1b9 0f00 	cmp.w	r9, #0
 8012294:	da0f      	bge.n	80122b6 <__ieee754_pow+0x23e>
 8012296:	2000      	movs	r0, #0
 8012298:	b009      	add	sp, #36	; 0x24
 801229a:	ecbd 8b06 	vpop	{d8-d10}
 801229e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122a2:	f001 bda2 	b.w	8013dea <__math_oflow>
 80122a6:	429c      	cmp	r4, r3
 80122a8:	dbf2      	blt.n	8012290 <__ieee754_pow+0x218>
 80122aa:	4b0a      	ldr	r3, [pc, #40]	; (80122d4 <__ieee754_pow+0x25c>)
 80122ac:	429c      	cmp	r4, r3
 80122ae:	dd19      	ble.n	80122e4 <__ieee754_pow+0x26c>
 80122b0:	f1b9 0f00 	cmp.w	r9, #0
 80122b4:	dcef      	bgt.n	8012296 <__ieee754_pow+0x21e>
 80122b6:	2000      	movs	r0, #0
 80122b8:	b009      	add	sp, #36	; 0x24
 80122ba:	ecbd 8b06 	vpop	{d8-d10}
 80122be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122c2:	f001 bd89 	b.w	8013dd8 <__math_uflow>
 80122c6:	bf00      	nop
 80122c8:	fff00000 	.word	0xfff00000
 80122cc:	7ff00000 	.word	0x7ff00000
 80122d0:	433fffff 	.word	0x433fffff
 80122d4:	3ff00000 	.word	0x3ff00000
 80122d8:	3fefffff 	.word	0x3fefffff
 80122dc:	3fe00000 	.word	0x3fe00000
 80122e0:	41e00000 	.word	0x41e00000
 80122e4:	4b60      	ldr	r3, [pc, #384]	; (8012468 <__ieee754_pow+0x3f0>)
 80122e6:	2200      	movs	r2, #0
 80122e8:	f7ed ffce 	bl	8000288 <__aeabi_dsub>
 80122ec:	a354      	add	r3, pc, #336	; (adr r3, 8012440 <__ieee754_pow+0x3c8>)
 80122ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f2:	4604      	mov	r4, r0
 80122f4:	460d      	mov	r5, r1
 80122f6:	f7ee f97f 	bl	80005f8 <__aeabi_dmul>
 80122fa:	a353      	add	r3, pc, #332	; (adr r3, 8012448 <__ieee754_pow+0x3d0>)
 80122fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012300:	4606      	mov	r6, r0
 8012302:	460f      	mov	r7, r1
 8012304:	4620      	mov	r0, r4
 8012306:	4629      	mov	r1, r5
 8012308:	f7ee f976 	bl	80005f8 <__aeabi_dmul>
 801230c:	4b57      	ldr	r3, [pc, #348]	; (801246c <__ieee754_pow+0x3f4>)
 801230e:	4682      	mov	sl, r0
 8012310:	468b      	mov	fp, r1
 8012312:	2200      	movs	r2, #0
 8012314:	4620      	mov	r0, r4
 8012316:	4629      	mov	r1, r5
 8012318:	f7ee f96e 	bl	80005f8 <__aeabi_dmul>
 801231c:	4602      	mov	r2, r0
 801231e:	460b      	mov	r3, r1
 8012320:	a14b      	add	r1, pc, #300	; (adr r1, 8012450 <__ieee754_pow+0x3d8>)
 8012322:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012326:	f7ed ffaf 	bl	8000288 <__aeabi_dsub>
 801232a:	4622      	mov	r2, r4
 801232c:	462b      	mov	r3, r5
 801232e:	f7ee f963 	bl	80005f8 <__aeabi_dmul>
 8012332:	4602      	mov	r2, r0
 8012334:	460b      	mov	r3, r1
 8012336:	2000      	movs	r0, #0
 8012338:	494d      	ldr	r1, [pc, #308]	; (8012470 <__ieee754_pow+0x3f8>)
 801233a:	f7ed ffa5 	bl	8000288 <__aeabi_dsub>
 801233e:	4622      	mov	r2, r4
 8012340:	4680      	mov	r8, r0
 8012342:	4689      	mov	r9, r1
 8012344:	462b      	mov	r3, r5
 8012346:	4620      	mov	r0, r4
 8012348:	4629      	mov	r1, r5
 801234a:	f7ee f955 	bl	80005f8 <__aeabi_dmul>
 801234e:	4602      	mov	r2, r0
 8012350:	460b      	mov	r3, r1
 8012352:	4640      	mov	r0, r8
 8012354:	4649      	mov	r1, r9
 8012356:	f7ee f94f 	bl	80005f8 <__aeabi_dmul>
 801235a:	a33f      	add	r3, pc, #252	; (adr r3, 8012458 <__ieee754_pow+0x3e0>)
 801235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012360:	f7ee f94a 	bl	80005f8 <__aeabi_dmul>
 8012364:	4602      	mov	r2, r0
 8012366:	460b      	mov	r3, r1
 8012368:	4650      	mov	r0, sl
 801236a:	4659      	mov	r1, fp
 801236c:	f7ed ff8c 	bl	8000288 <__aeabi_dsub>
 8012370:	4602      	mov	r2, r0
 8012372:	460b      	mov	r3, r1
 8012374:	4680      	mov	r8, r0
 8012376:	4689      	mov	r9, r1
 8012378:	4630      	mov	r0, r6
 801237a:	4639      	mov	r1, r7
 801237c:	f7ed ff86 	bl	800028c <__adddf3>
 8012380:	2000      	movs	r0, #0
 8012382:	4632      	mov	r2, r6
 8012384:	463b      	mov	r3, r7
 8012386:	4604      	mov	r4, r0
 8012388:	460d      	mov	r5, r1
 801238a:	f7ed ff7d 	bl	8000288 <__aeabi_dsub>
 801238e:	4602      	mov	r2, r0
 8012390:	460b      	mov	r3, r1
 8012392:	4640      	mov	r0, r8
 8012394:	4649      	mov	r1, r9
 8012396:	f7ed ff77 	bl	8000288 <__aeabi_dsub>
 801239a:	9b04      	ldr	r3, [sp, #16]
 801239c:	9a06      	ldr	r2, [sp, #24]
 801239e:	3b01      	subs	r3, #1
 80123a0:	4313      	orrs	r3, r2
 80123a2:	4682      	mov	sl, r0
 80123a4:	468b      	mov	fp, r1
 80123a6:	f040 81e7 	bne.w	8012778 <__ieee754_pow+0x700>
 80123aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012460 <__ieee754_pow+0x3e8>
 80123ae:	eeb0 8a47 	vmov.f32	s16, s14
 80123b2:	eef0 8a67 	vmov.f32	s17, s15
 80123b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80123ba:	2600      	movs	r6, #0
 80123bc:	4632      	mov	r2, r6
 80123be:	463b      	mov	r3, r7
 80123c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123c4:	f7ed ff60 	bl	8000288 <__aeabi_dsub>
 80123c8:	4622      	mov	r2, r4
 80123ca:	462b      	mov	r3, r5
 80123cc:	f7ee f914 	bl	80005f8 <__aeabi_dmul>
 80123d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123d4:	4680      	mov	r8, r0
 80123d6:	4689      	mov	r9, r1
 80123d8:	4650      	mov	r0, sl
 80123da:	4659      	mov	r1, fp
 80123dc:	f7ee f90c 	bl	80005f8 <__aeabi_dmul>
 80123e0:	4602      	mov	r2, r0
 80123e2:	460b      	mov	r3, r1
 80123e4:	4640      	mov	r0, r8
 80123e6:	4649      	mov	r1, r9
 80123e8:	f7ed ff50 	bl	800028c <__adddf3>
 80123ec:	4632      	mov	r2, r6
 80123ee:	463b      	mov	r3, r7
 80123f0:	4680      	mov	r8, r0
 80123f2:	4689      	mov	r9, r1
 80123f4:	4620      	mov	r0, r4
 80123f6:	4629      	mov	r1, r5
 80123f8:	f7ee f8fe 	bl	80005f8 <__aeabi_dmul>
 80123fc:	460b      	mov	r3, r1
 80123fe:	4604      	mov	r4, r0
 8012400:	460d      	mov	r5, r1
 8012402:	4602      	mov	r2, r0
 8012404:	4649      	mov	r1, r9
 8012406:	4640      	mov	r0, r8
 8012408:	f7ed ff40 	bl	800028c <__adddf3>
 801240c:	4b19      	ldr	r3, [pc, #100]	; (8012474 <__ieee754_pow+0x3fc>)
 801240e:	4299      	cmp	r1, r3
 8012410:	ec45 4b19 	vmov	d9, r4, r5
 8012414:	4606      	mov	r6, r0
 8012416:	460f      	mov	r7, r1
 8012418:	468b      	mov	fp, r1
 801241a:	f340 82f1 	ble.w	8012a00 <__ieee754_pow+0x988>
 801241e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012422:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012426:	4303      	orrs	r3, r0
 8012428:	f000 81e4 	beq.w	80127f4 <__ieee754_pow+0x77c>
 801242c:	ec51 0b18 	vmov	r0, r1, d8
 8012430:	2200      	movs	r2, #0
 8012432:	2300      	movs	r3, #0
 8012434:	f7ee fb52 	bl	8000adc <__aeabi_dcmplt>
 8012438:	3800      	subs	r0, #0
 801243a:	bf18      	it	ne
 801243c:	2001      	movne	r0, #1
 801243e:	e72b      	b.n	8012298 <__ieee754_pow+0x220>
 8012440:	60000000 	.word	0x60000000
 8012444:	3ff71547 	.word	0x3ff71547
 8012448:	f85ddf44 	.word	0xf85ddf44
 801244c:	3e54ae0b 	.word	0x3e54ae0b
 8012450:	55555555 	.word	0x55555555
 8012454:	3fd55555 	.word	0x3fd55555
 8012458:	652b82fe 	.word	0x652b82fe
 801245c:	3ff71547 	.word	0x3ff71547
 8012460:	00000000 	.word	0x00000000
 8012464:	bff00000 	.word	0xbff00000
 8012468:	3ff00000 	.word	0x3ff00000
 801246c:	3fd00000 	.word	0x3fd00000
 8012470:	3fe00000 	.word	0x3fe00000
 8012474:	408fffff 	.word	0x408fffff
 8012478:	4bd5      	ldr	r3, [pc, #852]	; (80127d0 <__ieee754_pow+0x758>)
 801247a:	402b      	ands	r3, r5
 801247c:	2200      	movs	r2, #0
 801247e:	b92b      	cbnz	r3, 801248c <__ieee754_pow+0x414>
 8012480:	4bd4      	ldr	r3, [pc, #848]	; (80127d4 <__ieee754_pow+0x75c>)
 8012482:	f7ee f8b9 	bl	80005f8 <__aeabi_dmul>
 8012486:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801248a:	460c      	mov	r4, r1
 801248c:	1523      	asrs	r3, r4, #20
 801248e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012492:	4413      	add	r3, r2
 8012494:	9305      	str	r3, [sp, #20]
 8012496:	4bd0      	ldr	r3, [pc, #832]	; (80127d8 <__ieee754_pow+0x760>)
 8012498:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801249c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80124a0:	429c      	cmp	r4, r3
 80124a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80124a6:	dd08      	ble.n	80124ba <__ieee754_pow+0x442>
 80124a8:	4bcc      	ldr	r3, [pc, #816]	; (80127dc <__ieee754_pow+0x764>)
 80124aa:	429c      	cmp	r4, r3
 80124ac:	f340 8162 	ble.w	8012774 <__ieee754_pow+0x6fc>
 80124b0:	9b05      	ldr	r3, [sp, #20]
 80124b2:	3301      	adds	r3, #1
 80124b4:	9305      	str	r3, [sp, #20]
 80124b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80124ba:	2400      	movs	r4, #0
 80124bc:	00e3      	lsls	r3, r4, #3
 80124be:	9307      	str	r3, [sp, #28]
 80124c0:	4bc7      	ldr	r3, [pc, #796]	; (80127e0 <__ieee754_pow+0x768>)
 80124c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80124c6:	ed93 7b00 	vldr	d7, [r3]
 80124ca:	4629      	mov	r1, r5
 80124cc:	ec53 2b17 	vmov	r2, r3, d7
 80124d0:	eeb0 9a47 	vmov.f32	s18, s14
 80124d4:	eef0 9a67 	vmov.f32	s19, s15
 80124d8:	4682      	mov	sl, r0
 80124da:	f7ed fed5 	bl	8000288 <__aeabi_dsub>
 80124de:	4652      	mov	r2, sl
 80124e0:	4606      	mov	r6, r0
 80124e2:	460f      	mov	r7, r1
 80124e4:	462b      	mov	r3, r5
 80124e6:	ec51 0b19 	vmov	r0, r1, d9
 80124ea:	f7ed fecf 	bl	800028c <__adddf3>
 80124ee:	4602      	mov	r2, r0
 80124f0:	460b      	mov	r3, r1
 80124f2:	2000      	movs	r0, #0
 80124f4:	49bb      	ldr	r1, [pc, #748]	; (80127e4 <__ieee754_pow+0x76c>)
 80124f6:	f7ee f9a9 	bl	800084c <__aeabi_ddiv>
 80124fa:	ec41 0b1a 	vmov	d10, r0, r1
 80124fe:	4602      	mov	r2, r0
 8012500:	460b      	mov	r3, r1
 8012502:	4630      	mov	r0, r6
 8012504:	4639      	mov	r1, r7
 8012506:	f7ee f877 	bl	80005f8 <__aeabi_dmul>
 801250a:	2300      	movs	r3, #0
 801250c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012510:	9302      	str	r3, [sp, #8]
 8012512:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012516:	46ab      	mov	fp, r5
 8012518:	106d      	asrs	r5, r5, #1
 801251a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801251e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012522:	ec41 0b18 	vmov	d8, r0, r1
 8012526:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801252a:	2200      	movs	r2, #0
 801252c:	4640      	mov	r0, r8
 801252e:	4649      	mov	r1, r9
 8012530:	4614      	mov	r4, r2
 8012532:	461d      	mov	r5, r3
 8012534:	f7ee f860 	bl	80005f8 <__aeabi_dmul>
 8012538:	4602      	mov	r2, r0
 801253a:	460b      	mov	r3, r1
 801253c:	4630      	mov	r0, r6
 801253e:	4639      	mov	r1, r7
 8012540:	f7ed fea2 	bl	8000288 <__aeabi_dsub>
 8012544:	ec53 2b19 	vmov	r2, r3, d9
 8012548:	4606      	mov	r6, r0
 801254a:	460f      	mov	r7, r1
 801254c:	4620      	mov	r0, r4
 801254e:	4629      	mov	r1, r5
 8012550:	f7ed fe9a 	bl	8000288 <__aeabi_dsub>
 8012554:	4602      	mov	r2, r0
 8012556:	460b      	mov	r3, r1
 8012558:	4650      	mov	r0, sl
 801255a:	4659      	mov	r1, fp
 801255c:	f7ed fe94 	bl	8000288 <__aeabi_dsub>
 8012560:	4642      	mov	r2, r8
 8012562:	464b      	mov	r3, r9
 8012564:	f7ee f848 	bl	80005f8 <__aeabi_dmul>
 8012568:	4602      	mov	r2, r0
 801256a:	460b      	mov	r3, r1
 801256c:	4630      	mov	r0, r6
 801256e:	4639      	mov	r1, r7
 8012570:	f7ed fe8a 	bl	8000288 <__aeabi_dsub>
 8012574:	ec53 2b1a 	vmov	r2, r3, d10
 8012578:	f7ee f83e 	bl	80005f8 <__aeabi_dmul>
 801257c:	ec53 2b18 	vmov	r2, r3, d8
 8012580:	ec41 0b19 	vmov	d9, r0, r1
 8012584:	ec51 0b18 	vmov	r0, r1, d8
 8012588:	f7ee f836 	bl	80005f8 <__aeabi_dmul>
 801258c:	a37c      	add	r3, pc, #496	; (adr r3, 8012780 <__ieee754_pow+0x708>)
 801258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012592:	4604      	mov	r4, r0
 8012594:	460d      	mov	r5, r1
 8012596:	f7ee f82f 	bl	80005f8 <__aeabi_dmul>
 801259a:	a37b      	add	r3, pc, #492	; (adr r3, 8012788 <__ieee754_pow+0x710>)
 801259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a0:	f7ed fe74 	bl	800028c <__adddf3>
 80125a4:	4622      	mov	r2, r4
 80125a6:	462b      	mov	r3, r5
 80125a8:	f7ee f826 	bl	80005f8 <__aeabi_dmul>
 80125ac:	a378      	add	r3, pc, #480	; (adr r3, 8012790 <__ieee754_pow+0x718>)
 80125ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b2:	f7ed fe6b 	bl	800028c <__adddf3>
 80125b6:	4622      	mov	r2, r4
 80125b8:	462b      	mov	r3, r5
 80125ba:	f7ee f81d 	bl	80005f8 <__aeabi_dmul>
 80125be:	a376      	add	r3, pc, #472	; (adr r3, 8012798 <__ieee754_pow+0x720>)
 80125c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c4:	f7ed fe62 	bl	800028c <__adddf3>
 80125c8:	4622      	mov	r2, r4
 80125ca:	462b      	mov	r3, r5
 80125cc:	f7ee f814 	bl	80005f8 <__aeabi_dmul>
 80125d0:	a373      	add	r3, pc, #460	; (adr r3, 80127a0 <__ieee754_pow+0x728>)
 80125d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d6:	f7ed fe59 	bl	800028c <__adddf3>
 80125da:	4622      	mov	r2, r4
 80125dc:	462b      	mov	r3, r5
 80125de:	f7ee f80b 	bl	80005f8 <__aeabi_dmul>
 80125e2:	a371      	add	r3, pc, #452	; (adr r3, 80127a8 <__ieee754_pow+0x730>)
 80125e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e8:	f7ed fe50 	bl	800028c <__adddf3>
 80125ec:	4622      	mov	r2, r4
 80125ee:	4606      	mov	r6, r0
 80125f0:	460f      	mov	r7, r1
 80125f2:	462b      	mov	r3, r5
 80125f4:	4620      	mov	r0, r4
 80125f6:	4629      	mov	r1, r5
 80125f8:	f7ed fffe 	bl	80005f8 <__aeabi_dmul>
 80125fc:	4602      	mov	r2, r0
 80125fe:	460b      	mov	r3, r1
 8012600:	4630      	mov	r0, r6
 8012602:	4639      	mov	r1, r7
 8012604:	f7ed fff8 	bl	80005f8 <__aeabi_dmul>
 8012608:	4642      	mov	r2, r8
 801260a:	4604      	mov	r4, r0
 801260c:	460d      	mov	r5, r1
 801260e:	464b      	mov	r3, r9
 8012610:	ec51 0b18 	vmov	r0, r1, d8
 8012614:	f7ed fe3a 	bl	800028c <__adddf3>
 8012618:	ec53 2b19 	vmov	r2, r3, d9
 801261c:	f7ed ffec 	bl	80005f8 <__aeabi_dmul>
 8012620:	4622      	mov	r2, r4
 8012622:	462b      	mov	r3, r5
 8012624:	f7ed fe32 	bl	800028c <__adddf3>
 8012628:	4642      	mov	r2, r8
 801262a:	4682      	mov	sl, r0
 801262c:	468b      	mov	fp, r1
 801262e:	464b      	mov	r3, r9
 8012630:	4640      	mov	r0, r8
 8012632:	4649      	mov	r1, r9
 8012634:	f7ed ffe0 	bl	80005f8 <__aeabi_dmul>
 8012638:	4b6b      	ldr	r3, [pc, #428]	; (80127e8 <__ieee754_pow+0x770>)
 801263a:	2200      	movs	r2, #0
 801263c:	4606      	mov	r6, r0
 801263e:	460f      	mov	r7, r1
 8012640:	f7ed fe24 	bl	800028c <__adddf3>
 8012644:	4652      	mov	r2, sl
 8012646:	465b      	mov	r3, fp
 8012648:	f7ed fe20 	bl	800028c <__adddf3>
 801264c:	2000      	movs	r0, #0
 801264e:	4604      	mov	r4, r0
 8012650:	460d      	mov	r5, r1
 8012652:	4602      	mov	r2, r0
 8012654:	460b      	mov	r3, r1
 8012656:	4640      	mov	r0, r8
 8012658:	4649      	mov	r1, r9
 801265a:	f7ed ffcd 	bl	80005f8 <__aeabi_dmul>
 801265e:	4b62      	ldr	r3, [pc, #392]	; (80127e8 <__ieee754_pow+0x770>)
 8012660:	4680      	mov	r8, r0
 8012662:	4689      	mov	r9, r1
 8012664:	2200      	movs	r2, #0
 8012666:	4620      	mov	r0, r4
 8012668:	4629      	mov	r1, r5
 801266a:	f7ed fe0d 	bl	8000288 <__aeabi_dsub>
 801266e:	4632      	mov	r2, r6
 8012670:	463b      	mov	r3, r7
 8012672:	f7ed fe09 	bl	8000288 <__aeabi_dsub>
 8012676:	4602      	mov	r2, r0
 8012678:	460b      	mov	r3, r1
 801267a:	4650      	mov	r0, sl
 801267c:	4659      	mov	r1, fp
 801267e:	f7ed fe03 	bl	8000288 <__aeabi_dsub>
 8012682:	ec53 2b18 	vmov	r2, r3, d8
 8012686:	f7ed ffb7 	bl	80005f8 <__aeabi_dmul>
 801268a:	4622      	mov	r2, r4
 801268c:	4606      	mov	r6, r0
 801268e:	460f      	mov	r7, r1
 8012690:	462b      	mov	r3, r5
 8012692:	ec51 0b19 	vmov	r0, r1, d9
 8012696:	f7ed ffaf 	bl	80005f8 <__aeabi_dmul>
 801269a:	4602      	mov	r2, r0
 801269c:	460b      	mov	r3, r1
 801269e:	4630      	mov	r0, r6
 80126a0:	4639      	mov	r1, r7
 80126a2:	f7ed fdf3 	bl	800028c <__adddf3>
 80126a6:	4606      	mov	r6, r0
 80126a8:	460f      	mov	r7, r1
 80126aa:	4602      	mov	r2, r0
 80126ac:	460b      	mov	r3, r1
 80126ae:	4640      	mov	r0, r8
 80126b0:	4649      	mov	r1, r9
 80126b2:	f7ed fdeb 	bl	800028c <__adddf3>
 80126b6:	a33e      	add	r3, pc, #248	; (adr r3, 80127b0 <__ieee754_pow+0x738>)
 80126b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126bc:	2000      	movs	r0, #0
 80126be:	4604      	mov	r4, r0
 80126c0:	460d      	mov	r5, r1
 80126c2:	f7ed ff99 	bl	80005f8 <__aeabi_dmul>
 80126c6:	4642      	mov	r2, r8
 80126c8:	ec41 0b18 	vmov	d8, r0, r1
 80126cc:	464b      	mov	r3, r9
 80126ce:	4620      	mov	r0, r4
 80126d0:	4629      	mov	r1, r5
 80126d2:	f7ed fdd9 	bl	8000288 <__aeabi_dsub>
 80126d6:	4602      	mov	r2, r0
 80126d8:	460b      	mov	r3, r1
 80126da:	4630      	mov	r0, r6
 80126dc:	4639      	mov	r1, r7
 80126de:	f7ed fdd3 	bl	8000288 <__aeabi_dsub>
 80126e2:	a335      	add	r3, pc, #212	; (adr r3, 80127b8 <__ieee754_pow+0x740>)
 80126e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e8:	f7ed ff86 	bl	80005f8 <__aeabi_dmul>
 80126ec:	a334      	add	r3, pc, #208	; (adr r3, 80127c0 <__ieee754_pow+0x748>)
 80126ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f2:	4606      	mov	r6, r0
 80126f4:	460f      	mov	r7, r1
 80126f6:	4620      	mov	r0, r4
 80126f8:	4629      	mov	r1, r5
 80126fa:	f7ed ff7d 	bl	80005f8 <__aeabi_dmul>
 80126fe:	4602      	mov	r2, r0
 8012700:	460b      	mov	r3, r1
 8012702:	4630      	mov	r0, r6
 8012704:	4639      	mov	r1, r7
 8012706:	f7ed fdc1 	bl	800028c <__adddf3>
 801270a:	9a07      	ldr	r2, [sp, #28]
 801270c:	4b37      	ldr	r3, [pc, #220]	; (80127ec <__ieee754_pow+0x774>)
 801270e:	4413      	add	r3, r2
 8012710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012714:	f7ed fdba 	bl	800028c <__adddf3>
 8012718:	4682      	mov	sl, r0
 801271a:	9805      	ldr	r0, [sp, #20]
 801271c:	468b      	mov	fp, r1
 801271e:	f7ed ff01 	bl	8000524 <__aeabi_i2d>
 8012722:	9a07      	ldr	r2, [sp, #28]
 8012724:	4b32      	ldr	r3, [pc, #200]	; (80127f0 <__ieee754_pow+0x778>)
 8012726:	4413      	add	r3, r2
 8012728:	e9d3 8900 	ldrd	r8, r9, [r3]
 801272c:	4606      	mov	r6, r0
 801272e:	460f      	mov	r7, r1
 8012730:	4652      	mov	r2, sl
 8012732:	465b      	mov	r3, fp
 8012734:	ec51 0b18 	vmov	r0, r1, d8
 8012738:	f7ed fda8 	bl	800028c <__adddf3>
 801273c:	4642      	mov	r2, r8
 801273e:	464b      	mov	r3, r9
 8012740:	f7ed fda4 	bl	800028c <__adddf3>
 8012744:	4632      	mov	r2, r6
 8012746:	463b      	mov	r3, r7
 8012748:	f7ed fda0 	bl	800028c <__adddf3>
 801274c:	2000      	movs	r0, #0
 801274e:	4632      	mov	r2, r6
 8012750:	463b      	mov	r3, r7
 8012752:	4604      	mov	r4, r0
 8012754:	460d      	mov	r5, r1
 8012756:	f7ed fd97 	bl	8000288 <__aeabi_dsub>
 801275a:	4642      	mov	r2, r8
 801275c:	464b      	mov	r3, r9
 801275e:	f7ed fd93 	bl	8000288 <__aeabi_dsub>
 8012762:	ec53 2b18 	vmov	r2, r3, d8
 8012766:	f7ed fd8f 	bl	8000288 <__aeabi_dsub>
 801276a:	4602      	mov	r2, r0
 801276c:	460b      	mov	r3, r1
 801276e:	4650      	mov	r0, sl
 8012770:	4659      	mov	r1, fp
 8012772:	e610      	b.n	8012396 <__ieee754_pow+0x31e>
 8012774:	2401      	movs	r4, #1
 8012776:	e6a1      	b.n	80124bc <__ieee754_pow+0x444>
 8012778:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80127c8 <__ieee754_pow+0x750>
 801277c:	e617      	b.n	80123ae <__ieee754_pow+0x336>
 801277e:	bf00      	nop
 8012780:	4a454eef 	.word	0x4a454eef
 8012784:	3fca7e28 	.word	0x3fca7e28
 8012788:	93c9db65 	.word	0x93c9db65
 801278c:	3fcd864a 	.word	0x3fcd864a
 8012790:	a91d4101 	.word	0xa91d4101
 8012794:	3fd17460 	.word	0x3fd17460
 8012798:	518f264d 	.word	0x518f264d
 801279c:	3fd55555 	.word	0x3fd55555
 80127a0:	db6fabff 	.word	0xdb6fabff
 80127a4:	3fdb6db6 	.word	0x3fdb6db6
 80127a8:	33333303 	.word	0x33333303
 80127ac:	3fe33333 	.word	0x3fe33333
 80127b0:	e0000000 	.word	0xe0000000
 80127b4:	3feec709 	.word	0x3feec709
 80127b8:	dc3a03fd 	.word	0xdc3a03fd
 80127bc:	3feec709 	.word	0x3feec709
 80127c0:	145b01f5 	.word	0x145b01f5
 80127c4:	be3e2fe0 	.word	0xbe3e2fe0
 80127c8:	00000000 	.word	0x00000000
 80127cc:	3ff00000 	.word	0x3ff00000
 80127d0:	7ff00000 	.word	0x7ff00000
 80127d4:	43400000 	.word	0x43400000
 80127d8:	0003988e 	.word	0x0003988e
 80127dc:	000bb679 	.word	0x000bb679
 80127e0:	08014900 	.word	0x08014900
 80127e4:	3ff00000 	.word	0x3ff00000
 80127e8:	40080000 	.word	0x40080000
 80127ec:	08014920 	.word	0x08014920
 80127f0:	08014910 	.word	0x08014910
 80127f4:	a3b5      	add	r3, pc, #724	; (adr r3, 8012acc <__ieee754_pow+0xa54>)
 80127f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127fa:	4640      	mov	r0, r8
 80127fc:	4649      	mov	r1, r9
 80127fe:	f7ed fd45 	bl	800028c <__adddf3>
 8012802:	4622      	mov	r2, r4
 8012804:	ec41 0b1a 	vmov	d10, r0, r1
 8012808:	462b      	mov	r3, r5
 801280a:	4630      	mov	r0, r6
 801280c:	4639      	mov	r1, r7
 801280e:	f7ed fd3b 	bl	8000288 <__aeabi_dsub>
 8012812:	4602      	mov	r2, r0
 8012814:	460b      	mov	r3, r1
 8012816:	ec51 0b1a 	vmov	r0, r1, d10
 801281a:	f7ee f97d 	bl	8000b18 <__aeabi_dcmpgt>
 801281e:	2800      	cmp	r0, #0
 8012820:	f47f ae04 	bne.w	801242c <__ieee754_pow+0x3b4>
 8012824:	4aa4      	ldr	r2, [pc, #656]	; (8012ab8 <__ieee754_pow+0xa40>)
 8012826:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801282a:	4293      	cmp	r3, r2
 801282c:	f340 8108 	ble.w	8012a40 <__ieee754_pow+0x9c8>
 8012830:	151b      	asrs	r3, r3, #20
 8012832:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012836:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801283a:	fa4a f303 	asr.w	r3, sl, r3
 801283e:	445b      	add	r3, fp
 8012840:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012844:	4e9d      	ldr	r6, [pc, #628]	; (8012abc <__ieee754_pow+0xa44>)
 8012846:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801284a:	4116      	asrs	r6, r2
 801284c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012850:	2000      	movs	r0, #0
 8012852:	ea23 0106 	bic.w	r1, r3, r6
 8012856:	f1c2 0214 	rsb	r2, r2, #20
 801285a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801285e:	fa4a fa02 	asr.w	sl, sl, r2
 8012862:	f1bb 0f00 	cmp.w	fp, #0
 8012866:	4602      	mov	r2, r0
 8012868:	460b      	mov	r3, r1
 801286a:	4620      	mov	r0, r4
 801286c:	4629      	mov	r1, r5
 801286e:	bfb8      	it	lt
 8012870:	f1ca 0a00 	rsblt	sl, sl, #0
 8012874:	f7ed fd08 	bl	8000288 <__aeabi_dsub>
 8012878:	ec41 0b19 	vmov	d9, r0, r1
 801287c:	4642      	mov	r2, r8
 801287e:	464b      	mov	r3, r9
 8012880:	ec51 0b19 	vmov	r0, r1, d9
 8012884:	f7ed fd02 	bl	800028c <__adddf3>
 8012888:	a37b      	add	r3, pc, #492	; (adr r3, 8012a78 <__ieee754_pow+0xa00>)
 801288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801288e:	2000      	movs	r0, #0
 8012890:	4604      	mov	r4, r0
 8012892:	460d      	mov	r5, r1
 8012894:	f7ed feb0 	bl	80005f8 <__aeabi_dmul>
 8012898:	ec53 2b19 	vmov	r2, r3, d9
 801289c:	4606      	mov	r6, r0
 801289e:	460f      	mov	r7, r1
 80128a0:	4620      	mov	r0, r4
 80128a2:	4629      	mov	r1, r5
 80128a4:	f7ed fcf0 	bl	8000288 <__aeabi_dsub>
 80128a8:	4602      	mov	r2, r0
 80128aa:	460b      	mov	r3, r1
 80128ac:	4640      	mov	r0, r8
 80128ae:	4649      	mov	r1, r9
 80128b0:	f7ed fcea 	bl	8000288 <__aeabi_dsub>
 80128b4:	a372      	add	r3, pc, #456	; (adr r3, 8012a80 <__ieee754_pow+0xa08>)
 80128b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ba:	f7ed fe9d 	bl	80005f8 <__aeabi_dmul>
 80128be:	a372      	add	r3, pc, #456	; (adr r3, 8012a88 <__ieee754_pow+0xa10>)
 80128c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c4:	4680      	mov	r8, r0
 80128c6:	4689      	mov	r9, r1
 80128c8:	4620      	mov	r0, r4
 80128ca:	4629      	mov	r1, r5
 80128cc:	f7ed fe94 	bl	80005f8 <__aeabi_dmul>
 80128d0:	4602      	mov	r2, r0
 80128d2:	460b      	mov	r3, r1
 80128d4:	4640      	mov	r0, r8
 80128d6:	4649      	mov	r1, r9
 80128d8:	f7ed fcd8 	bl	800028c <__adddf3>
 80128dc:	4604      	mov	r4, r0
 80128de:	460d      	mov	r5, r1
 80128e0:	4602      	mov	r2, r0
 80128e2:	460b      	mov	r3, r1
 80128e4:	4630      	mov	r0, r6
 80128e6:	4639      	mov	r1, r7
 80128e8:	f7ed fcd0 	bl	800028c <__adddf3>
 80128ec:	4632      	mov	r2, r6
 80128ee:	463b      	mov	r3, r7
 80128f0:	4680      	mov	r8, r0
 80128f2:	4689      	mov	r9, r1
 80128f4:	f7ed fcc8 	bl	8000288 <__aeabi_dsub>
 80128f8:	4602      	mov	r2, r0
 80128fa:	460b      	mov	r3, r1
 80128fc:	4620      	mov	r0, r4
 80128fe:	4629      	mov	r1, r5
 8012900:	f7ed fcc2 	bl	8000288 <__aeabi_dsub>
 8012904:	4642      	mov	r2, r8
 8012906:	4606      	mov	r6, r0
 8012908:	460f      	mov	r7, r1
 801290a:	464b      	mov	r3, r9
 801290c:	4640      	mov	r0, r8
 801290e:	4649      	mov	r1, r9
 8012910:	f7ed fe72 	bl	80005f8 <__aeabi_dmul>
 8012914:	a35e      	add	r3, pc, #376	; (adr r3, 8012a90 <__ieee754_pow+0xa18>)
 8012916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801291a:	4604      	mov	r4, r0
 801291c:	460d      	mov	r5, r1
 801291e:	f7ed fe6b 	bl	80005f8 <__aeabi_dmul>
 8012922:	a35d      	add	r3, pc, #372	; (adr r3, 8012a98 <__ieee754_pow+0xa20>)
 8012924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012928:	f7ed fcae 	bl	8000288 <__aeabi_dsub>
 801292c:	4622      	mov	r2, r4
 801292e:	462b      	mov	r3, r5
 8012930:	f7ed fe62 	bl	80005f8 <__aeabi_dmul>
 8012934:	a35a      	add	r3, pc, #360	; (adr r3, 8012aa0 <__ieee754_pow+0xa28>)
 8012936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801293a:	f7ed fca7 	bl	800028c <__adddf3>
 801293e:	4622      	mov	r2, r4
 8012940:	462b      	mov	r3, r5
 8012942:	f7ed fe59 	bl	80005f8 <__aeabi_dmul>
 8012946:	a358      	add	r3, pc, #352	; (adr r3, 8012aa8 <__ieee754_pow+0xa30>)
 8012948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801294c:	f7ed fc9c 	bl	8000288 <__aeabi_dsub>
 8012950:	4622      	mov	r2, r4
 8012952:	462b      	mov	r3, r5
 8012954:	f7ed fe50 	bl	80005f8 <__aeabi_dmul>
 8012958:	a355      	add	r3, pc, #340	; (adr r3, 8012ab0 <__ieee754_pow+0xa38>)
 801295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801295e:	f7ed fc95 	bl	800028c <__adddf3>
 8012962:	4622      	mov	r2, r4
 8012964:	462b      	mov	r3, r5
 8012966:	f7ed fe47 	bl	80005f8 <__aeabi_dmul>
 801296a:	4602      	mov	r2, r0
 801296c:	460b      	mov	r3, r1
 801296e:	4640      	mov	r0, r8
 8012970:	4649      	mov	r1, r9
 8012972:	f7ed fc89 	bl	8000288 <__aeabi_dsub>
 8012976:	4604      	mov	r4, r0
 8012978:	460d      	mov	r5, r1
 801297a:	4602      	mov	r2, r0
 801297c:	460b      	mov	r3, r1
 801297e:	4640      	mov	r0, r8
 8012980:	4649      	mov	r1, r9
 8012982:	f7ed fe39 	bl	80005f8 <__aeabi_dmul>
 8012986:	2200      	movs	r2, #0
 8012988:	ec41 0b19 	vmov	d9, r0, r1
 801298c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012990:	4620      	mov	r0, r4
 8012992:	4629      	mov	r1, r5
 8012994:	f7ed fc78 	bl	8000288 <__aeabi_dsub>
 8012998:	4602      	mov	r2, r0
 801299a:	460b      	mov	r3, r1
 801299c:	ec51 0b19 	vmov	r0, r1, d9
 80129a0:	f7ed ff54 	bl	800084c <__aeabi_ddiv>
 80129a4:	4632      	mov	r2, r6
 80129a6:	4604      	mov	r4, r0
 80129a8:	460d      	mov	r5, r1
 80129aa:	463b      	mov	r3, r7
 80129ac:	4640      	mov	r0, r8
 80129ae:	4649      	mov	r1, r9
 80129b0:	f7ed fe22 	bl	80005f8 <__aeabi_dmul>
 80129b4:	4632      	mov	r2, r6
 80129b6:	463b      	mov	r3, r7
 80129b8:	f7ed fc68 	bl	800028c <__adddf3>
 80129bc:	4602      	mov	r2, r0
 80129be:	460b      	mov	r3, r1
 80129c0:	4620      	mov	r0, r4
 80129c2:	4629      	mov	r1, r5
 80129c4:	f7ed fc60 	bl	8000288 <__aeabi_dsub>
 80129c8:	4642      	mov	r2, r8
 80129ca:	464b      	mov	r3, r9
 80129cc:	f7ed fc5c 	bl	8000288 <__aeabi_dsub>
 80129d0:	460b      	mov	r3, r1
 80129d2:	4602      	mov	r2, r0
 80129d4:	493a      	ldr	r1, [pc, #232]	; (8012ac0 <__ieee754_pow+0xa48>)
 80129d6:	2000      	movs	r0, #0
 80129d8:	f7ed fc56 	bl	8000288 <__aeabi_dsub>
 80129dc:	ec41 0b10 	vmov	d0, r0, r1
 80129e0:	ee10 3a90 	vmov	r3, s1
 80129e4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80129e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80129ec:	da2b      	bge.n	8012a46 <__ieee754_pow+0x9ce>
 80129ee:	4650      	mov	r0, sl
 80129f0:	f001 fa3a 	bl	8013e68 <scalbn>
 80129f4:	ec51 0b10 	vmov	r0, r1, d0
 80129f8:	ec53 2b18 	vmov	r2, r3, d8
 80129fc:	f7ff bbed 	b.w	80121da <__ieee754_pow+0x162>
 8012a00:	4b30      	ldr	r3, [pc, #192]	; (8012ac4 <__ieee754_pow+0xa4c>)
 8012a02:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012a06:	429e      	cmp	r6, r3
 8012a08:	f77f af0c 	ble.w	8012824 <__ieee754_pow+0x7ac>
 8012a0c:	4b2e      	ldr	r3, [pc, #184]	; (8012ac8 <__ieee754_pow+0xa50>)
 8012a0e:	440b      	add	r3, r1
 8012a10:	4303      	orrs	r3, r0
 8012a12:	d009      	beq.n	8012a28 <__ieee754_pow+0x9b0>
 8012a14:	ec51 0b18 	vmov	r0, r1, d8
 8012a18:	2200      	movs	r2, #0
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	f7ee f85e 	bl	8000adc <__aeabi_dcmplt>
 8012a20:	3800      	subs	r0, #0
 8012a22:	bf18      	it	ne
 8012a24:	2001      	movne	r0, #1
 8012a26:	e447      	b.n	80122b8 <__ieee754_pow+0x240>
 8012a28:	4622      	mov	r2, r4
 8012a2a:	462b      	mov	r3, r5
 8012a2c:	f7ed fc2c 	bl	8000288 <__aeabi_dsub>
 8012a30:	4642      	mov	r2, r8
 8012a32:	464b      	mov	r3, r9
 8012a34:	f7ee f866 	bl	8000b04 <__aeabi_dcmpge>
 8012a38:	2800      	cmp	r0, #0
 8012a3a:	f43f aef3 	beq.w	8012824 <__ieee754_pow+0x7ac>
 8012a3e:	e7e9      	b.n	8012a14 <__ieee754_pow+0x99c>
 8012a40:	f04f 0a00 	mov.w	sl, #0
 8012a44:	e71a      	b.n	801287c <__ieee754_pow+0x804>
 8012a46:	ec51 0b10 	vmov	r0, r1, d0
 8012a4a:	4619      	mov	r1, r3
 8012a4c:	e7d4      	b.n	80129f8 <__ieee754_pow+0x980>
 8012a4e:	491c      	ldr	r1, [pc, #112]	; (8012ac0 <__ieee754_pow+0xa48>)
 8012a50:	2000      	movs	r0, #0
 8012a52:	f7ff bb30 	b.w	80120b6 <__ieee754_pow+0x3e>
 8012a56:	2000      	movs	r0, #0
 8012a58:	2100      	movs	r1, #0
 8012a5a:	f7ff bb2c 	b.w	80120b6 <__ieee754_pow+0x3e>
 8012a5e:	4630      	mov	r0, r6
 8012a60:	4639      	mov	r1, r7
 8012a62:	f7ff bb28 	b.w	80120b6 <__ieee754_pow+0x3e>
 8012a66:	9204      	str	r2, [sp, #16]
 8012a68:	f7ff bb7a 	b.w	8012160 <__ieee754_pow+0xe8>
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	f7ff bb64 	b.w	801213a <__ieee754_pow+0xc2>
 8012a72:	bf00      	nop
 8012a74:	f3af 8000 	nop.w
 8012a78:	00000000 	.word	0x00000000
 8012a7c:	3fe62e43 	.word	0x3fe62e43
 8012a80:	fefa39ef 	.word	0xfefa39ef
 8012a84:	3fe62e42 	.word	0x3fe62e42
 8012a88:	0ca86c39 	.word	0x0ca86c39
 8012a8c:	be205c61 	.word	0xbe205c61
 8012a90:	72bea4d0 	.word	0x72bea4d0
 8012a94:	3e663769 	.word	0x3e663769
 8012a98:	c5d26bf1 	.word	0xc5d26bf1
 8012a9c:	3ebbbd41 	.word	0x3ebbbd41
 8012aa0:	af25de2c 	.word	0xaf25de2c
 8012aa4:	3f11566a 	.word	0x3f11566a
 8012aa8:	16bebd93 	.word	0x16bebd93
 8012aac:	3f66c16c 	.word	0x3f66c16c
 8012ab0:	5555553e 	.word	0x5555553e
 8012ab4:	3fc55555 	.word	0x3fc55555
 8012ab8:	3fe00000 	.word	0x3fe00000
 8012abc:	000fffff 	.word	0x000fffff
 8012ac0:	3ff00000 	.word	0x3ff00000
 8012ac4:	4090cbff 	.word	0x4090cbff
 8012ac8:	3f6f3400 	.word	0x3f6f3400
 8012acc:	652b82fe 	.word	0x652b82fe
 8012ad0:	3c971547 	.word	0x3c971547

08012ad4 <__ieee754_sqrt>:
 8012ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ad8:	ec55 4b10 	vmov	r4, r5, d0
 8012adc:	4e55      	ldr	r6, [pc, #340]	; (8012c34 <__ieee754_sqrt+0x160>)
 8012ade:	43ae      	bics	r6, r5
 8012ae0:	ee10 0a10 	vmov	r0, s0
 8012ae4:	ee10 3a10 	vmov	r3, s0
 8012ae8:	462a      	mov	r2, r5
 8012aea:	4629      	mov	r1, r5
 8012aec:	d110      	bne.n	8012b10 <__ieee754_sqrt+0x3c>
 8012aee:	ee10 2a10 	vmov	r2, s0
 8012af2:	462b      	mov	r3, r5
 8012af4:	f7ed fd80 	bl	80005f8 <__aeabi_dmul>
 8012af8:	4602      	mov	r2, r0
 8012afa:	460b      	mov	r3, r1
 8012afc:	4620      	mov	r0, r4
 8012afe:	4629      	mov	r1, r5
 8012b00:	f7ed fbc4 	bl	800028c <__adddf3>
 8012b04:	4604      	mov	r4, r0
 8012b06:	460d      	mov	r5, r1
 8012b08:	ec45 4b10 	vmov	d0, r4, r5
 8012b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b10:	2d00      	cmp	r5, #0
 8012b12:	dc10      	bgt.n	8012b36 <__ieee754_sqrt+0x62>
 8012b14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012b18:	4330      	orrs	r0, r6
 8012b1a:	d0f5      	beq.n	8012b08 <__ieee754_sqrt+0x34>
 8012b1c:	b15d      	cbz	r5, 8012b36 <__ieee754_sqrt+0x62>
 8012b1e:	ee10 2a10 	vmov	r2, s0
 8012b22:	462b      	mov	r3, r5
 8012b24:	ee10 0a10 	vmov	r0, s0
 8012b28:	f7ed fbae 	bl	8000288 <__aeabi_dsub>
 8012b2c:	4602      	mov	r2, r0
 8012b2e:	460b      	mov	r3, r1
 8012b30:	f7ed fe8c 	bl	800084c <__aeabi_ddiv>
 8012b34:	e7e6      	b.n	8012b04 <__ieee754_sqrt+0x30>
 8012b36:	1512      	asrs	r2, r2, #20
 8012b38:	d074      	beq.n	8012c24 <__ieee754_sqrt+0x150>
 8012b3a:	07d4      	lsls	r4, r2, #31
 8012b3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012b40:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012b44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012b48:	bf5e      	ittt	pl
 8012b4a:	0fda      	lsrpl	r2, r3, #31
 8012b4c:	005b      	lslpl	r3, r3, #1
 8012b4e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8012b52:	2400      	movs	r4, #0
 8012b54:	0fda      	lsrs	r2, r3, #31
 8012b56:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012b5a:	107f      	asrs	r7, r7, #1
 8012b5c:	005b      	lsls	r3, r3, #1
 8012b5e:	2516      	movs	r5, #22
 8012b60:	4620      	mov	r0, r4
 8012b62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012b66:	1886      	adds	r6, r0, r2
 8012b68:	428e      	cmp	r6, r1
 8012b6a:	bfde      	ittt	le
 8012b6c:	1b89      	suble	r1, r1, r6
 8012b6e:	18b0      	addle	r0, r6, r2
 8012b70:	18a4      	addle	r4, r4, r2
 8012b72:	0049      	lsls	r1, r1, #1
 8012b74:	3d01      	subs	r5, #1
 8012b76:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012b7a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012b7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012b82:	d1f0      	bne.n	8012b66 <__ieee754_sqrt+0x92>
 8012b84:	462a      	mov	r2, r5
 8012b86:	f04f 0e20 	mov.w	lr, #32
 8012b8a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012b8e:	4281      	cmp	r1, r0
 8012b90:	eb06 0c05 	add.w	ip, r6, r5
 8012b94:	dc02      	bgt.n	8012b9c <__ieee754_sqrt+0xc8>
 8012b96:	d113      	bne.n	8012bc0 <__ieee754_sqrt+0xec>
 8012b98:	459c      	cmp	ip, r3
 8012b9a:	d811      	bhi.n	8012bc0 <__ieee754_sqrt+0xec>
 8012b9c:	f1bc 0f00 	cmp.w	ip, #0
 8012ba0:	eb0c 0506 	add.w	r5, ip, r6
 8012ba4:	da43      	bge.n	8012c2e <__ieee754_sqrt+0x15a>
 8012ba6:	2d00      	cmp	r5, #0
 8012ba8:	db41      	blt.n	8012c2e <__ieee754_sqrt+0x15a>
 8012baa:	f100 0801 	add.w	r8, r0, #1
 8012bae:	1a09      	subs	r1, r1, r0
 8012bb0:	459c      	cmp	ip, r3
 8012bb2:	bf88      	it	hi
 8012bb4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012bb8:	eba3 030c 	sub.w	r3, r3, ip
 8012bbc:	4432      	add	r2, r6
 8012bbe:	4640      	mov	r0, r8
 8012bc0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012bc4:	f1be 0e01 	subs.w	lr, lr, #1
 8012bc8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012bd0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012bd4:	d1db      	bne.n	8012b8e <__ieee754_sqrt+0xba>
 8012bd6:	430b      	orrs	r3, r1
 8012bd8:	d006      	beq.n	8012be8 <__ieee754_sqrt+0x114>
 8012bda:	1c50      	adds	r0, r2, #1
 8012bdc:	bf13      	iteet	ne
 8012bde:	3201      	addne	r2, #1
 8012be0:	3401      	addeq	r4, #1
 8012be2:	4672      	moveq	r2, lr
 8012be4:	f022 0201 	bicne.w	r2, r2, #1
 8012be8:	1063      	asrs	r3, r4, #1
 8012bea:	0852      	lsrs	r2, r2, #1
 8012bec:	07e1      	lsls	r1, r4, #31
 8012bee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012bf2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012bf6:	bf48      	it	mi
 8012bf8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012bfc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012c00:	4614      	mov	r4, r2
 8012c02:	e781      	b.n	8012b08 <__ieee754_sqrt+0x34>
 8012c04:	0ad9      	lsrs	r1, r3, #11
 8012c06:	3815      	subs	r0, #21
 8012c08:	055b      	lsls	r3, r3, #21
 8012c0a:	2900      	cmp	r1, #0
 8012c0c:	d0fa      	beq.n	8012c04 <__ieee754_sqrt+0x130>
 8012c0e:	02cd      	lsls	r5, r1, #11
 8012c10:	d50a      	bpl.n	8012c28 <__ieee754_sqrt+0x154>
 8012c12:	f1c2 0420 	rsb	r4, r2, #32
 8012c16:	fa23 f404 	lsr.w	r4, r3, r4
 8012c1a:	1e55      	subs	r5, r2, #1
 8012c1c:	4093      	lsls	r3, r2
 8012c1e:	4321      	orrs	r1, r4
 8012c20:	1b42      	subs	r2, r0, r5
 8012c22:	e78a      	b.n	8012b3a <__ieee754_sqrt+0x66>
 8012c24:	4610      	mov	r0, r2
 8012c26:	e7f0      	b.n	8012c0a <__ieee754_sqrt+0x136>
 8012c28:	0049      	lsls	r1, r1, #1
 8012c2a:	3201      	adds	r2, #1
 8012c2c:	e7ef      	b.n	8012c0e <__ieee754_sqrt+0x13a>
 8012c2e:	4680      	mov	r8, r0
 8012c30:	e7bd      	b.n	8012bae <__ieee754_sqrt+0xda>
 8012c32:	bf00      	nop
 8012c34:	7ff00000 	.word	0x7ff00000

08012c38 <__ieee754_asinf>:
 8012c38:	b538      	push	{r3, r4, r5, lr}
 8012c3a:	ee10 5a10 	vmov	r5, s0
 8012c3e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012c42:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012c46:	ed2d 8b04 	vpush	{d8-d9}
 8012c4a:	d10c      	bne.n	8012c66 <__ieee754_asinf+0x2e>
 8012c4c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8012dc4 <__ieee754_asinf+0x18c>
 8012c50:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8012dc8 <__ieee754_asinf+0x190>
 8012c54:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012c58:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8012c60:	ecbd 8b04 	vpop	{d8-d9}
 8012c64:	bd38      	pop	{r3, r4, r5, pc}
 8012c66:	dd04      	ble.n	8012c72 <__ieee754_asinf+0x3a>
 8012c68:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012c6c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012c70:	e7f6      	b.n	8012c60 <__ieee754_asinf+0x28>
 8012c72:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012c76:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012c7a:	da0b      	bge.n	8012c94 <__ieee754_asinf+0x5c>
 8012c7c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012c80:	da52      	bge.n	8012d28 <__ieee754_asinf+0xf0>
 8012c82:	eddf 7a52 	vldr	s15, [pc, #328]	; 8012dcc <__ieee754_asinf+0x194>
 8012c86:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012c8a:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c92:	dce5      	bgt.n	8012c60 <__ieee754_asinf+0x28>
 8012c94:	f001 fa42 	bl	801411c <fabsf>
 8012c98:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8012c9c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8012ca0:	ee20 8a08 	vmul.f32	s16, s0, s16
 8012ca4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8012dd0 <__ieee754_asinf+0x198>
 8012ca8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8012dd4 <__ieee754_asinf+0x19c>
 8012cac:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8012dd8 <__ieee754_asinf+0x1a0>
 8012cb0:	eea8 7a27 	vfma.f32	s14, s16, s15
 8012cb4:	eddf 7a49 	vldr	s15, [pc, #292]	; 8012ddc <__ieee754_asinf+0x1a4>
 8012cb8:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012cbc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012de0 <__ieee754_asinf+0x1a8>
 8012cc0:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012cc4:	eddf 7a47 	vldr	s15, [pc, #284]	; 8012de4 <__ieee754_asinf+0x1ac>
 8012cc8:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012ccc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8012de8 <__ieee754_asinf+0x1b0>
 8012cd0:	eea7 9a88 	vfma.f32	s18, s15, s16
 8012cd4:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012dec <__ieee754_asinf+0x1b4>
 8012cd8:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012cdc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8012df0 <__ieee754_asinf+0x1b8>
 8012ce0:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012ce4:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012df4 <__ieee754_asinf+0x1bc>
 8012ce8:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012cec:	eeb0 0a48 	vmov.f32	s0, s16
 8012cf0:	eee7 8a88 	vfma.f32	s17, s15, s16
 8012cf4:	f000 fd30 	bl	8013758 <__ieee754_sqrtf>
 8012cf8:	4b3f      	ldr	r3, [pc, #252]	; (8012df8 <__ieee754_asinf+0x1c0>)
 8012cfa:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012cfe:	429c      	cmp	r4, r3
 8012d00:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8012d04:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012d08:	dd3d      	ble.n	8012d86 <__ieee754_asinf+0x14e>
 8012d0a:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012d0e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8012dfc <__ieee754_asinf+0x1c4>
 8012d12:	eee0 7a26 	vfma.f32	s15, s0, s13
 8012d16:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8012dc8 <__ieee754_asinf+0x190>
 8012d1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012d1e:	2d00      	cmp	r5, #0
 8012d20:	bfd8      	it	le
 8012d22:	eeb1 0a40 	vnegle.f32	s0, s0
 8012d26:	e79b      	b.n	8012c60 <__ieee754_asinf+0x28>
 8012d28:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012d2c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8012dd0 <__ieee754_asinf+0x198>
 8012d30:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8012dd4 <__ieee754_asinf+0x19c>
 8012d34:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8012de8 <__ieee754_asinf+0x1b0>
 8012d38:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012d3c:	eddf 6a27 	vldr	s13, [pc, #156]	; 8012ddc <__ieee754_asinf+0x1a4>
 8012d40:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012d44:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8012de0 <__ieee754_asinf+0x1a8>
 8012d48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012d4c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8012de4 <__ieee754_asinf+0x1ac>
 8012d50:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012d54:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8012dd8 <__ieee754_asinf+0x1a0>
 8012d58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012d5c:	eddf 6a23 	vldr	s13, [pc, #140]	; 8012dec <__ieee754_asinf+0x1b4>
 8012d60:	eee7 6a86 	vfma.f32	s13, s15, s12
 8012d64:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8012df0 <__ieee754_asinf+0x1b8>
 8012d68:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012d6c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8012df4 <__ieee754_asinf+0x1bc>
 8012d70:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012d74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d78:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8012d7c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8012d80:	eea0 0a27 	vfma.f32	s0, s0, s15
 8012d84:	e76c      	b.n	8012c60 <__ieee754_asinf+0x28>
 8012d86:	ee10 3a10 	vmov	r3, s0
 8012d8a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012d8e:	f023 030f 	bic.w	r3, r3, #15
 8012d92:	ee07 3a10 	vmov	s14, r3
 8012d96:	eea7 8a47 	vfms.f32	s16, s14, s14
 8012d9a:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012d9e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012da2:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8012da6:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012dc4 <__ieee754_asinf+0x18c>
 8012daa:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8012dae:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8012db2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8012e00 <__ieee754_asinf+0x1c8>
 8012db6:	eeb0 6a40 	vmov.f32	s12, s0
 8012dba:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012dbe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012dc2:	e7aa      	b.n	8012d1a <__ieee754_asinf+0xe2>
 8012dc4:	b33bbd2e 	.word	0xb33bbd2e
 8012dc8:	3fc90fdb 	.word	0x3fc90fdb
 8012dcc:	7149f2ca 	.word	0x7149f2ca
 8012dd0:	3811ef08 	.word	0x3811ef08
 8012dd4:	3a4f7f04 	.word	0x3a4f7f04
 8012dd8:	3e2aaaab 	.word	0x3e2aaaab
 8012ddc:	bd241146 	.word	0xbd241146
 8012de0:	3e4e0aa8 	.word	0x3e4e0aa8
 8012de4:	bea6b090 	.word	0xbea6b090
 8012de8:	3d9dc62e 	.word	0x3d9dc62e
 8012dec:	bf303361 	.word	0xbf303361
 8012df0:	4001572d 	.word	0x4001572d
 8012df4:	c019d139 	.word	0xc019d139
 8012df8:	3f799999 	.word	0x3f799999
 8012dfc:	333bbd2e 	.word	0x333bbd2e
 8012e00:	3f490fdb 	.word	0x3f490fdb

08012e04 <__ieee754_atan2f>:
 8012e04:	ee10 2a90 	vmov	r2, s1
 8012e08:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012e0c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012e10:	b510      	push	{r4, lr}
 8012e12:	eef0 7a40 	vmov.f32	s15, s0
 8012e16:	dc06      	bgt.n	8012e26 <__ieee754_atan2f+0x22>
 8012e18:	ee10 0a10 	vmov	r0, s0
 8012e1c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012e20:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012e24:	dd04      	ble.n	8012e30 <__ieee754_atan2f+0x2c>
 8012e26:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8012e2e:	bd10      	pop	{r4, pc}
 8012e30:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8012e34:	d103      	bne.n	8012e3e <__ieee754_atan2f+0x3a>
 8012e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e3a:	f001 b89b 	b.w	8013f74 <atanf>
 8012e3e:	1794      	asrs	r4, r2, #30
 8012e40:	f004 0402 	and.w	r4, r4, #2
 8012e44:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012e48:	b943      	cbnz	r3, 8012e5c <__ieee754_atan2f+0x58>
 8012e4a:	2c02      	cmp	r4, #2
 8012e4c:	d05e      	beq.n	8012f0c <__ieee754_atan2f+0x108>
 8012e4e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8012f20 <__ieee754_atan2f+0x11c>
 8012e52:	2c03      	cmp	r4, #3
 8012e54:	bf08      	it	eq
 8012e56:	eef0 7a47 	vmoveq.f32	s15, s14
 8012e5a:	e7e6      	b.n	8012e2a <__ieee754_atan2f+0x26>
 8012e5c:	b941      	cbnz	r1, 8012e70 <__ieee754_atan2f+0x6c>
 8012e5e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8012f24 <__ieee754_atan2f+0x120>
 8012e62:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8012f28 <__ieee754_atan2f+0x124>
 8012e66:	2800      	cmp	r0, #0
 8012e68:	bfb8      	it	lt
 8012e6a:	eef0 7a40 	vmovlt.f32	s15, s0
 8012e6e:	e7dc      	b.n	8012e2a <__ieee754_atan2f+0x26>
 8012e70:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012e74:	d110      	bne.n	8012e98 <__ieee754_atan2f+0x94>
 8012e76:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012e7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8012e7e:	d107      	bne.n	8012e90 <__ieee754_atan2f+0x8c>
 8012e80:	2c02      	cmp	r4, #2
 8012e82:	d846      	bhi.n	8012f12 <__ieee754_atan2f+0x10e>
 8012e84:	4b29      	ldr	r3, [pc, #164]	; (8012f2c <__ieee754_atan2f+0x128>)
 8012e86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012e8a:	edd4 7a00 	vldr	s15, [r4]
 8012e8e:	e7cc      	b.n	8012e2a <__ieee754_atan2f+0x26>
 8012e90:	2c02      	cmp	r4, #2
 8012e92:	d841      	bhi.n	8012f18 <__ieee754_atan2f+0x114>
 8012e94:	4b26      	ldr	r3, [pc, #152]	; (8012f30 <__ieee754_atan2f+0x12c>)
 8012e96:	e7f6      	b.n	8012e86 <__ieee754_atan2f+0x82>
 8012e98:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012e9c:	d0df      	beq.n	8012e5e <__ieee754_atan2f+0x5a>
 8012e9e:	1a5b      	subs	r3, r3, r1
 8012ea0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8012ea4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8012ea8:	da1a      	bge.n	8012ee0 <__ieee754_atan2f+0xdc>
 8012eaa:	2a00      	cmp	r2, #0
 8012eac:	da01      	bge.n	8012eb2 <__ieee754_atan2f+0xae>
 8012eae:	313c      	adds	r1, #60	; 0x3c
 8012eb0:	db19      	blt.n	8012ee6 <__ieee754_atan2f+0xe2>
 8012eb2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8012eb6:	f001 f931 	bl	801411c <fabsf>
 8012eba:	f001 f85b 	bl	8013f74 <atanf>
 8012ebe:	eef0 7a40 	vmov.f32	s15, s0
 8012ec2:	2c01      	cmp	r4, #1
 8012ec4:	d012      	beq.n	8012eec <__ieee754_atan2f+0xe8>
 8012ec6:	2c02      	cmp	r4, #2
 8012ec8:	d017      	beq.n	8012efa <__ieee754_atan2f+0xf6>
 8012eca:	2c00      	cmp	r4, #0
 8012ecc:	d0ad      	beq.n	8012e2a <__ieee754_atan2f+0x26>
 8012ece:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8012f34 <__ieee754_atan2f+0x130>
 8012ed2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012ed6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8012f38 <__ieee754_atan2f+0x134>
 8012eda:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012ede:	e7a4      	b.n	8012e2a <__ieee754_atan2f+0x26>
 8012ee0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012f24 <__ieee754_atan2f+0x120>
 8012ee4:	e7ed      	b.n	8012ec2 <__ieee754_atan2f+0xbe>
 8012ee6:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012f3c <__ieee754_atan2f+0x138>
 8012eea:	e7ea      	b.n	8012ec2 <__ieee754_atan2f+0xbe>
 8012eec:	ee17 3a90 	vmov	r3, s15
 8012ef0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012ef4:	ee07 3a90 	vmov	s15, r3
 8012ef8:	e797      	b.n	8012e2a <__ieee754_atan2f+0x26>
 8012efa:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8012f34 <__ieee754_atan2f+0x130>
 8012efe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012f02:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8012f38 <__ieee754_atan2f+0x134>
 8012f06:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012f0a:	e78e      	b.n	8012e2a <__ieee754_atan2f+0x26>
 8012f0c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8012f38 <__ieee754_atan2f+0x134>
 8012f10:	e78b      	b.n	8012e2a <__ieee754_atan2f+0x26>
 8012f12:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8012f40 <__ieee754_atan2f+0x13c>
 8012f16:	e788      	b.n	8012e2a <__ieee754_atan2f+0x26>
 8012f18:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012f3c <__ieee754_atan2f+0x138>
 8012f1c:	e785      	b.n	8012e2a <__ieee754_atan2f+0x26>
 8012f1e:	bf00      	nop
 8012f20:	c0490fdb 	.word	0xc0490fdb
 8012f24:	3fc90fdb 	.word	0x3fc90fdb
 8012f28:	bfc90fdb 	.word	0xbfc90fdb
 8012f2c:	08014930 	.word	0x08014930
 8012f30:	0801493c 	.word	0x0801493c
 8012f34:	33bbbd2e 	.word	0x33bbbd2e
 8012f38:	40490fdb 	.word	0x40490fdb
 8012f3c:	00000000 	.word	0x00000000
 8012f40:	3f490fdb 	.word	0x3f490fdb

08012f44 <__ieee754_powf>:
 8012f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f48:	ee10 4a90 	vmov	r4, s1
 8012f4c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8012f50:	ed2d 8b02 	vpush	{d8}
 8012f54:	ee10 6a10 	vmov	r6, s0
 8012f58:	eeb0 8a40 	vmov.f32	s16, s0
 8012f5c:	eef0 8a60 	vmov.f32	s17, s1
 8012f60:	d10c      	bne.n	8012f7c <__ieee754_powf+0x38>
 8012f62:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8012f66:	0076      	lsls	r6, r6, #1
 8012f68:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8012f6c:	f240 8296 	bls.w	801349c <__ieee754_powf+0x558>
 8012f70:	ee38 0a28 	vadd.f32	s0, s16, s17
 8012f74:	ecbd 8b02 	vpop	{d8}
 8012f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f7c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8012f80:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012f84:	dcf4      	bgt.n	8012f70 <__ieee754_powf+0x2c>
 8012f86:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012f8a:	dd08      	ble.n	8012f9e <__ieee754_powf+0x5a>
 8012f8c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8012f90:	d1ee      	bne.n	8012f70 <__ieee754_powf+0x2c>
 8012f92:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8012f96:	0064      	lsls	r4, r4, #1
 8012f98:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8012f9c:	e7e6      	b.n	8012f6c <__ieee754_powf+0x28>
 8012f9e:	2e00      	cmp	r6, #0
 8012fa0:	da20      	bge.n	8012fe4 <__ieee754_powf+0xa0>
 8012fa2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8012fa6:	da2d      	bge.n	8013004 <__ieee754_powf+0xc0>
 8012fa8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012fac:	f2c0 827f 	blt.w	80134ae <__ieee754_powf+0x56a>
 8012fb0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8012fb4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012fb8:	fa48 f703 	asr.w	r7, r8, r3
 8012fbc:	fa07 f303 	lsl.w	r3, r7, r3
 8012fc0:	4543      	cmp	r3, r8
 8012fc2:	f040 8274 	bne.w	80134ae <__ieee754_powf+0x56a>
 8012fc6:	f007 0701 	and.w	r7, r7, #1
 8012fca:	f1c7 0702 	rsb	r7, r7, #2
 8012fce:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012fd2:	d11f      	bne.n	8013014 <__ieee754_powf+0xd0>
 8012fd4:	2c00      	cmp	r4, #0
 8012fd6:	f280 8267 	bge.w	80134a8 <__ieee754_powf+0x564>
 8012fda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012fde:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012fe2:	e7c7      	b.n	8012f74 <__ieee754_powf+0x30>
 8012fe4:	2700      	movs	r7, #0
 8012fe6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012fea:	d1f0      	bne.n	8012fce <__ieee754_powf+0x8a>
 8012fec:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8012ff0:	f000 8254 	beq.w	801349c <__ieee754_powf+0x558>
 8012ff4:	dd08      	ble.n	8013008 <__ieee754_powf+0xc4>
 8012ff6:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8013300 <__ieee754_powf+0x3bc>
 8012ffa:	2c00      	cmp	r4, #0
 8012ffc:	bfa8      	it	ge
 8012ffe:	eeb0 0a68 	vmovge.f32	s0, s17
 8013002:	e7b7      	b.n	8012f74 <__ieee754_powf+0x30>
 8013004:	2702      	movs	r7, #2
 8013006:	e7ee      	b.n	8012fe6 <__ieee754_powf+0xa2>
 8013008:	2c00      	cmp	r4, #0
 801300a:	f280 824a 	bge.w	80134a2 <__ieee754_powf+0x55e>
 801300e:	eeb1 0a68 	vneg.f32	s0, s17
 8013012:	e7af      	b.n	8012f74 <__ieee754_powf+0x30>
 8013014:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8013018:	d102      	bne.n	8013020 <__ieee754_powf+0xdc>
 801301a:	ee28 0a08 	vmul.f32	s0, s16, s16
 801301e:	e7a9      	b.n	8012f74 <__ieee754_powf+0x30>
 8013020:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013024:	eeb0 0a48 	vmov.f32	s0, s16
 8013028:	d107      	bne.n	801303a <__ieee754_powf+0xf6>
 801302a:	2e00      	cmp	r6, #0
 801302c:	db05      	blt.n	801303a <__ieee754_powf+0xf6>
 801302e:	ecbd 8b02 	vpop	{d8}
 8013032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013036:	f000 bb8f 	b.w	8013758 <__ieee754_sqrtf>
 801303a:	f001 f86f 	bl	801411c <fabsf>
 801303e:	b125      	cbz	r5, 801304a <__ieee754_powf+0x106>
 8013040:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8013044:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013048:	d116      	bne.n	8013078 <__ieee754_powf+0x134>
 801304a:	2c00      	cmp	r4, #0
 801304c:	bfbc      	itt	lt
 801304e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8013052:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8013056:	2e00      	cmp	r6, #0
 8013058:	da8c      	bge.n	8012f74 <__ieee754_powf+0x30>
 801305a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801305e:	ea55 0307 	orrs.w	r3, r5, r7
 8013062:	d104      	bne.n	801306e <__ieee754_powf+0x12a>
 8013064:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013068:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801306c:	e782      	b.n	8012f74 <__ieee754_powf+0x30>
 801306e:	2f01      	cmp	r7, #1
 8013070:	d180      	bne.n	8012f74 <__ieee754_powf+0x30>
 8013072:	eeb1 0a40 	vneg.f32	s0, s0
 8013076:	e77d      	b.n	8012f74 <__ieee754_powf+0x30>
 8013078:	0ff0      	lsrs	r0, r6, #31
 801307a:	3801      	subs	r0, #1
 801307c:	ea57 0300 	orrs.w	r3, r7, r0
 8013080:	d104      	bne.n	801308c <__ieee754_powf+0x148>
 8013082:	ee38 8a48 	vsub.f32	s16, s16, s16
 8013086:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801308a:	e773      	b.n	8012f74 <__ieee754_powf+0x30>
 801308c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8013090:	dd74      	ble.n	801317c <__ieee754_powf+0x238>
 8013092:	4b9c      	ldr	r3, [pc, #624]	; (8013304 <__ieee754_powf+0x3c0>)
 8013094:	429d      	cmp	r5, r3
 8013096:	dc08      	bgt.n	80130aa <__ieee754_powf+0x166>
 8013098:	2c00      	cmp	r4, #0
 801309a:	da0b      	bge.n	80130b4 <__ieee754_powf+0x170>
 801309c:	2000      	movs	r0, #0
 801309e:	ecbd 8b02 	vpop	{d8}
 80130a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130a6:	f000 bec5 	b.w	8013e34 <__math_oflowf>
 80130aa:	4b97      	ldr	r3, [pc, #604]	; (8013308 <__ieee754_powf+0x3c4>)
 80130ac:	429d      	cmp	r5, r3
 80130ae:	dd08      	ble.n	80130c2 <__ieee754_powf+0x17e>
 80130b0:	2c00      	cmp	r4, #0
 80130b2:	dcf3      	bgt.n	801309c <__ieee754_powf+0x158>
 80130b4:	2000      	movs	r0, #0
 80130b6:	ecbd 8b02 	vpop	{d8}
 80130ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130be:	f000 beb3 	b.w	8013e28 <__math_uflowf>
 80130c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80130c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80130ca:	eddf 6a90 	vldr	s13, [pc, #576]	; 801330c <__ieee754_powf+0x3c8>
 80130ce:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80130d2:	eee0 6a67 	vfms.f32	s13, s0, s15
 80130d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80130da:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80130de:	ee20 7a00 	vmul.f32	s14, s0, s0
 80130e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80130e6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8013310 <__ieee754_powf+0x3cc>
 80130ea:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80130ee:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8013314 <__ieee754_powf+0x3d0>
 80130f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80130f6:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8013318 <__ieee754_powf+0x3d4>
 80130fa:	eef0 6a67 	vmov.f32	s13, s15
 80130fe:	eee0 6a07 	vfma.f32	s13, s0, s14
 8013102:	ee16 3a90 	vmov	r3, s13
 8013106:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801310a:	f023 030f 	bic.w	r3, r3, #15
 801310e:	ee00 3a90 	vmov	s1, r3
 8013112:	eee0 0a47 	vfms.f32	s1, s0, s14
 8013116:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801311a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801311e:	f024 040f 	bic.w	r4, r4, #15
 8013122:	ee07 4a10 	vmov	s14, r4
 8013126:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801312a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801312e:	ee07 3a90 	vmov	s15, r3
 8013132:	eee7 0a27 	vfma.f32	s1, s14, s15
 8013136:	3f01      	subs	r7, #1
 8013138:	ea57 0200 	orrs.w	r2, r7, r0
 801313c:	ee07 4a10 	vmov	s14, r4
 8013140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013144:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013148:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801314c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013150:	ee17 4a10 	vmov	r4, s14
 8013154:	bf08      	it	eq
 8013156:	eeb0 8a40 	vmoveq.f32	s16, s0
 801315a:	2c00      	cmp	r4, #0
 801315c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013160:	f340 817e 	ble.w	8013460 <__ieee754_powf+0x51c>
 8013164:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8013168:	f340 80f8 	ble.w	801335c <__ieee754_powf+0x418>
 801316c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013174:	bf4c      	ite	mi
 8013176:	2001      	movmi	r0, #1
 8013178:	2000      	movpl	r0, #0
 801317a:	e790      	b.n	801309e <__ieee754_powf+0x15a>
 801317c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8013180:	bf01      	itttt	eq
 8013182:	eddf 7a66 	vldreq	s15, [pc, #408]	; 801331c <__ieee754_powf+0x3d8>
 8013186:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801318a:	f06f 0217 	mvneq.w	r2, #23
 801318e:	ee17 5a90 	vmoveq	r5, s15
 8013192:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8013196:	bf18      	it	ne
 8013198:	2200      	movne	r2, #0
 801319a:	3b7f      	subs	r3, #127	; 0x7f
 801319c:	4413      	add	r3, r2
 801319e:	4a60      	ldr	r2, [pc, #384]	; (8013320 <__ieee754_powf+0x3dc>)
 80131a0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80131a4:	4295      	cmp	r5, r2
 80131a6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80131aa:	dd06      	ble.n	80131ba <__ieee754_powf+0x276>
 80131ac:	4a5d      	ldr	r2, [pc, #372]	; (8013324 <__ieee754_powf+0x3e0>)
 80131ae:	4295      	cmp	r5, r2
 80131b0:	f340 80a4 	ble.w	80132fc <__ieee754_powf+0x3b8>
 80131b4:	3301      	adds	r3, #1
 80131b6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80131ba:	2500      	movs	r5, #0
 80131bc:	4a5a      	ldr	r2, [pc, #360]	; (8013328 <__ieee754_powf+0x3e4>)
 80131be:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80131c2:	ee07 1a90 	vmov	s15, r1
 80131c6:	ed92 7a00 	vldr	s14, [r2]
 80131ca:	4a58      	ldr	r2, [pc, #352]	; (801332c <__ieee754_powf+0x3e8>)
 80131cc:	ee37 6a27 	vadd.f32	s12, s14, s15
 80131d0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80131d4:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80131d8:	1049      	asrs	r1, r1, #1
 80131da:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80131de:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80131e2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80131e6:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80131ea:	ee06 1a10 	vmov	s12, r1
 80131ee:	ee65 4a26 	vmul.f32	s9, s10, s13
 80131f2:	ee36 7a47 	vsub.f32	s14, s12, s14
 80131f6:	ee14 6a90 	vmov	r6, s9
 80131fa:	4016      	ands	r6, r2
 80131fc:	ee05 6a90 	vmov	s11, r6
 8013200:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8013204:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013208:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013330 <__ieee754_powf+0x3ec>
 801320c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8013210:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8013214:	ee25 6a26 	vmul.f32	s12, s10, s13
 8013218:	eddf 6a46 	vldr	s13, [pc, #280]	; 8013334 <__ieee754_powf+0x3f0>
 801321c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013220:	eddf 6a45 	vldr	s13, [pc, #276]	; 8013338 <__ieee754_powf+0x3f4>
 8013224:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013228:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801330c <__ieee754_powf+0x3c8>
 801322c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013230:	eddf 6a42 	vldr	s13, [pc, #264]	; 801333c <__ieee754_powf+0x3f8>
 8013234:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013238:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8013340 <__ieee754_powf+0x3fc>
 801323c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013240:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8013244:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8013248:	ee66 6a86 	vmul.f32	s13, s13, s12
 801324c:	eee5 6a07 	vfma.f32	s13, s10, s14
 8013250:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8013254:	eef0 7a45 	vmov.f32	s15, s10
 8013258:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801325c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013260:	ee17 1a90 	vmov	r1, s15
 8013264:	4011      	ands	r1, r2
 8013266:	ee07 1a90 	vmov	s15, r1
 801326a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 801326e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8013272:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013276:	ee27 7a24 	vmul.f32	s14, s14, s9
 801327a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801327e:	eeb0 6a47 	vmov.f32	s12, s14
 8013282:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8013286:	ee16 1a10 	vmov	r1, s12
 801328a:	4011      	ands	r1, r2
 801328c:	ee06 1a90 	vmov	s13, r1
 8013290:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8013294:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013344 <__ieee754_powf+0x400>
 8013298:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8013348 <__ieee754_powf+0x404>
 801329c:	ee37 7a66 	vsub.f32	s14, s14, s13
 80132a0:	ee06 1a10 	vmov	s12, r1
 80132a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80132a8:	eddf 7a28 	vldr	s15, [pc, #160]	; 801334c <__ieee754_powf+0x408>
 80132ac:	4928      	ldr	r1, [pc, #160]	; (8013350 <__ieee754_powf+0x40c>)
 80132ae:	eea6 7a27 	vfma.f32	s14, s12, s15
 80132b2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80132b6:	edd1 7a00 	vldr	s15, [r1]
 80132ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80132be:	ee07 3a90 	vmov	s15, r3
 80132c2:	4b24      	ldr	r3, [pc, #144]	; (8013354 <__ieee754_powf+0x410>)
 80132c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80132c8:	eef0 7a47 	vmov.f32	s15, s14
 80132cc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80132d0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80132d4:	edd5 0a00 	vldr	s1, [r5]
 80132d8:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80132dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80132e0:	ee17 3a90 	vmov	r3, s15
 80132e4:	4013      	ands	r3, r2
 80132e6:	ee07 3a90 	vmov	s15, r3
 80132ea:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80132ee:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80132f2:	eee6 6a65 	vfms.f32	s13, s12, s11
 80132f6:	ee77 7a66 	vsub.f32	s15, s14, s13
 80132fa:	e70e      	b.n	801311a <__ieee754_powf+0x1d6>
 80132fc:	2501      	movs	r5, #1
 80132fe:	e75d      	b.n	80131bc <__ieee754_powf+0x278>
 8013300:	00000000 	.word	0x00000000
 8013304:	3f7ffff3 	.word	0x3f7ffff3
 8013308:	3f800007 	.word	0x3f800007
 801330c:	3eaaaaab 	.word	0x3eaaaaab
 8013310:	3fb8aa3b 	.word	0x3fb8aa3b
 8013314:	36eca570 	.word	0x36eca570
 8013318:	3fb8aa00 	.word	0x3fb8aa00
 801331c:	4b800000 	.word	0x4b800000
 8013320:	001cc471 	.word	0x001cc471
 8013324:	005db3d6 	.word	0x005db3d6
 8013328:	08014948 	.word	0x08014948
 801332c:	fffff000 	.word	0xfffff000
 8013330:	3e6c3255 	.word	0x3e6c3255
 8013334:	3e53f142 	.word	0x3e53f142
 8013338:	3e8ba305 	.word	0x3e8ba305
 801333c:	3edb6db7 	.word	0x3edb6db7
 8013340:	3f19999a 	.word	0x3f19999a
 8013344:	3f76384f 	.word	0x3f76384f
 8013348:	3f763800 	.word	0x3f763800
 801334c:	369dc3a0 	.word	0x369dc3a0
 8013350:	08014958 	.word	0x08014958
 8013354:	08014950 	.word	0x08014950
 8013358:	3338aa3c 	.word	0x3338aa3c
 801335c:	f040 8095 	bne.w	801348a <__ieee754_powf+0x546>
 8013360:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8013358 <__ieee754_powf+0x414>
 8013364:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013368:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801336c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013374:	f73f aefa 	bgt.w	801316c <__ieee754_powf+0x228>
 8013378:	15db      	asrs	r3, r3, #23
 801337a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801337e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013382:	4103      	asrs	r3, r0
 8013384:	4423      	add	r3, r4
 8013386:	494b      	ldr	r1, [pc, #300]	; (80134b4 <__ieee754_powf+0x570>)
 8013388:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801338c:	3a7f      	subs	r2, #127	; 0x7f
 801338e:	4111      	asrs	r1, r2
 8013390:	ea23 0101 	bic.w	r1, r3, r1
 8013394:	ee07 1a10 	vmov	s14, r1
 8013398:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801339c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80133a0:	f1c2 0217 	rsb	r2, r2, #23
 80133a4:	4110      	asrs	r0, r2
 80133a6:	2c00      	cmp	r4, #0
 80133a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80133ac:	bfb8      	it	lt
 80133ae:	4240      	neglt	r0, r0
 80133b0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80133b4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80134b8 <__ieee754_powf+0x574>
 80133b8:	eddf 6a40 	vldr	s13, [pc, #256]	; 80134bc <__ieee754_powf+0x578>
 80133bc:	ee17 3a10 	vmov	r3, s14
 80133c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80133c4:	f023 030f 	bic.w	r3, r3, #15
 80133c8:	ee07 3a10 	vmov	s14, r3
 80133cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80133d0:	ee27 0a00 	vmul.f32	s0, s14, s0
 80133d4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80133d8:	eddf 7a39 	vldr	s15, [pc, #228]	; 80134c0 <__ieee754_powf+0x57c>
 80133dc:	eea0 0aa7 	vfma.f32	s0, s1, s15
 80133e0:	eef0 7a40 	vmov.f32	s15, s0
 80133e4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80133e8:	eeb0 6a67 	vmov.f32	s12, s15
 80133ec:	eea7 6a66 	vfms.f32	s12, s14, s13
 80133f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80133f4:	ee30 0a46 	vsub.f32	s0, s0, s12
 80133f8:	eddf 6a32 	vldr	s13, [pc, #200]	; 80134c4 <__ieee754_powf+0x580>
 80133fc:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80134c8 <__ieee754_powf+0x584>
 8013400:	eee7 6a06 	vfma.f32	s13, s14, s12
 8013404:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80134cc <__ieee754_powf+0x588>
 8013408:	eea6 6a87 	vfma.f32	s12, s13, s14
 801340c:	eddf 6a30 	vldr	s13, [pc, #192]	; 80134d0 <__ieee754_powf+0x58c>
 8013410:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013414:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80134d4 <__ieee754_powf+0x590>
 8013418:	eea6 6a87 	vfma.f32	s12, s13, s14
 801341c:	eef0 6a67 	vmov.f32	s13, s15
 8013420:	eee6 6a47 	vfms.f32	s13, s12, s14
 8013424:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013428:	ee27 6aa6 	vmul.f32	s12, s15, s13
 801342c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8013430:	eea7 0a80 	vfma.f32	s0, s15, s0
 8013434:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8013438:	ee37 0a40 	vsub.f32	s0, s14, s0
 801343c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013440:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013444:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013448:	ee10 3a10 	vmov	r3, s0
 801344c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8013450:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013454:	da1f      	bge.n	8013496 <__ieee754_powf+0x552>
 8013456:	f000 febd 	bl	80141d4 <scalbnf>
 801345a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801345e:	e589      	b.n	8012f74 <__ieee754_powf+0x30>
 8013460:	4a1d      	ldr	r2, [pc, #116]	; (80134d8 <__ieee754_powf+0x594>)
 8013462:	4293      	cmp	r3, r2
 8013464:	dd07      	ble.n	8013476 <__ieee754_powf+0x532>
 8013466:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801346a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801346e:	bf4c      	ite	mi
 8013470:	2001      	movmi	r0, #1
 8013472:	2000      	movpl	r0, #0
 8013474:	e61f      	b.n	80130b6 <__ieee754_powf+0x172>
 8013476:	d108      	bne.n	801348a <__ieee754_powf+0x546>
 8013478:	ee37 7a67 	vsub.f32	s14, s14, s15
 801347c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8013480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013484:	f6ff af78 	blt.w	8013378 <__ieee754_powf+0x434>
 8013488:	e7ed      	b.n	8013466 <__ieee754_powf+0x522>
 801348a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801348e:	f73f af73 	bgt.w	8013378 <__ieee754_powf+0x434>
 8013492:	2000      	movs	r0, #0
 8013494:	e78c      	b.n	80133b0 <__ieee754_powf+0x46c>
 8013496:	ee00 3a10 	vmov	s0, r3
 801349a:	e7de      	b.n	801345a <__ieee754_powf+0x516>
 801349c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80134a0:	e568      	b.n	8012f74 <__ieee754_powf+0x30>
 80134a2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80134dc <__ieee754_powf+0x598>
 80134a6:	e565      	b.n	8012f74 <__ieee754_powf+0x30>
 80134a8:	eeb0 0a48 	vmov.f32	s0, s16
 80134ac:	e562      	b.n	8012f74 <__ieee754_powf+0x30>
 80134ae:	2700      	movs	r7, #0
 80134b0:	e58d      	b.n	8012fce <__ieee754_powf+0x8a>
 80134b2:	bf00      	nop
 80134b4:	007fffff 	.word	0x007fffff
 80134b8:	35bfbe8c 	.word	0x35bfbe8c
 80134bc:	3f317200 	.word	0x3f317200
 80134c0:	3f317218 	.word	0x3f317218
 80134c4:	b5ddea0e 	.word	0xb5ddea0e
 80134c8:	3331bb4c 	.word	0x3331bb4c
 80134cc:	388ab355 	.word	0x388ab355
 80134d0:	bb360b61 	.word	0xbb360b61
 80134d4:	3e2aaaab 	.word	0x3e2aaaab
 80134d8:	43160000 	.word	0x43160000
 80134dc:	00000000 	.word	0x00000000

080134e0 <__ieee754_rem_pio2f>:
 80134e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134e2:	ee10 6a10 	vmov	r6, s0
 80134e6:	4b8e      	ldr	r3, [pc, #568]	; (8013720 <__ieee754_rem_pio2f+0x240>)
 80134e8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80134ec:	429d      	cmp	r5, r3
 80134ee:	b087      	sub	sp, #28
 80134f0:	eef0 7a40 	vmov.f32	s15, s0
 80134f4:	4604      	mov	r4, r0
 80134f6:	dc05      	bgt.n	8013504 <__ieee754_rem_pio2f+0x24>
 80134f8:	2300      	movs	r3, #0
 80134fa:	ed80 0a00 	vstr	s0, [r0]
 80134fe:	6043      	str	r3, [r0, #4]
 8013500:	2000      	movs	r0, #0
 8013502:	e01a      	b.n	801353a <__ieee754_rem_pio2f+0x5a>
 8013504:	4b87      	ldr	r3, [pc, #540]	; (8013724 <__ieee754_rem_pio2f+0x244>)
 8013506:	429d      	cmp	r5, r3
 8013508:	dc46      	bgt.n	8013598 <__ieee754_rem_pio2f+0xb8>
 801350a:	2e00      	cmp	r6, #0
 801350c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8013728 <__ieee754_rem_pio2f+0x248>
 8013510:	4b86      	ldr	r3, [pc, #536]	; (801372c <__ieee754_rem_pio2f+0x24c>)
 8013512:	f025 050f 	bic.w	r5, r5, #15
 8013516:	dd1f      	ble.n	8013558 <__ieee754_rem_pio2f+0x78>
 8013518:	429d      	cmp	r5, r3
 801351a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801351e:	d00e      	beq.n	801353e <__ieee754_rem_pio2f+0x5e>
 8013520:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8013730 <__ieee754_rem_pio2f+0x250>
 8013524:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8013528:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801352c:	ed80 0a00 	vstr	s0, [r0]
 8013530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013534:	2001      	movs	r0, #1
 8013536:	edc4 7a01 	vstr	s15, [r4, #4]
 801353a:	b007      	add	sp, #28
 801353c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801353e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8013734 <__ieee754_rem_pio2f+0x254>
 8013542:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8013738 <__ieee754_rem_pio2f+0x258>
 8013546:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801354a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801354e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013552:	edc0 6a00 	vstr	s13, [r0]
 8013556:	e7eb      	b.n	8013530 <__ieee754_rem_pio2f+0x50>
 8013558:	429d      	cmp	r5, r3
 801355a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801355e:	d00e      	beq.n	801357e <__ieee754_rem_pio2f+0x9e>
 8013560:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8013730 <__ieee754_rem_pio2f+0x250>
 8013564:	ee37 0a87 	vadd.f32	s0, s15, s14
 8013568:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801356c:	ed80 0a00 	vstr	s0, [r0]
 8013570:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013574:	f04f 30ff 	mov.w	r0, #4294967295
 8013578:	edc4 7a01 	vstr	s15, [r4, #4]
 801357c:	e7dd      	b.n	801353a <__ieee754_rem_pio2f+0x5a>
 801357e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8013734 <__ieee754_rem_pio2f+0x254>
 8013582:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8013738 <__ieee754_rem_pio2f+0x258>
 8013586:	ee77 7a80 	vadd.f32	s15, s15, s0
 801358a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801358e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013592:	edc0 6a00 	vstr	s13, [r0]
 8013596:	e7eb      	b.n	8013570 <__ieee754_rem_pio2f+0x90>
 8013598:	4b68      	ldr	r3, [pc, #416]	; (801373c <__ieee754_rem_pio2f+0x25c>)
 801359a:	429d      	cmp	r5, r3
 801359c:	dc72      	bgt.n	8013684 <__ieee754_rem_pio2f+0x1a4>
 801359e:	f000 fdbd 	bl	801411c <fabsf>
 80135a2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013740 <__ieee754_rem_pio2f+0x260>
 80135a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80135aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80135ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80135b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80135b6:	ee17 0a90 	vmov	r0, s15
 80135ba:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013728 <__ieee754_rem_pio2f+0x248>
 80135be:	eea7 0a67 	vfms.f32	s0, s14, s15
 80135c2:	281f      	cmp	r0, #31
 80135c4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8013730 <__ieee754_rem_pio2f+0x250>
 80135c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80135cc:	eeb1 6a47 	vneg.f32	s12, s14
 80135d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80135d4:	ee16 2a90 	vmov	r2, s13
 80135d8:	dc1c      	bgt.n	8013614 <__ieee754_rem_pio2f+0x134>
 80135da:	495a      	ldr	r1, [pc, #360]	; (8013744 <__ieee754_rem_pio2f+0x264>)
 80135dc:	1e47      	subs	r7, r0, #1
 80135de:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80135e2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80135e6:	428b      	cmp	r3, r1
 80135e8:	d014      	beq.n	8013614 <__ieee754_rem_pio2f+0x134>
 80135ea:	6022      	str	r2, [r4, #0]
 80135ec:	ed94 7a00 	vldr	s14, [r4]
 80135f0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80135f4:	2e00      	cmp	r6, #0
 80135f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80135fa:	ed84 0a01 	vstr	s0, [r4, #4]
 80135fe:	da9c      	bge.n	801353a <__ieee754_rem_pio2f+0x5a>
 8013600:	eeb1 7a47 	vneg.f32	s14, s14
 8013604:	eeb1 0a40 	vneg.f32	s0, s0
 8013608:	ed84 7a00 	vstr	s14, [r4]
 801360c:	ed84 0a01 	vstr	s0, [r4, #4]
 8013610:	4240      	negs	r0, r0
 8013612:	e792      	b.n	801353a <__ieee754_rem_pio2f+0x5a>
 8013614:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013618:	15eb      	asrs	r3, r5, #23
 801361a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801361e:	2d08      	cmp	r5, #8
 8013620:	dde3      	ble.n	80135ea <__ieee754_rem_pio2f+0x10a>
 8013622:	eddf 7a44 	vldr	s15, [pc, #272]	; 8013734 <__ieee754_rem_pio2f+0x254>
 8013626:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013738 <__ieee754_rem_pio2f+0x258>
 801362a:	eef0 6a40 	vmov.f32	s13, s0
 801362e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013632:	ee30 0a66 	vsub.f32	s0, s0, s13
 8013636:	eea6 0a27 	vfma.f32	s0, s12, s15
 801363a:	eef0 7a40 	vmov.f32	s15, s0
 801363e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013642:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013646:	ee15 2a90 	vmov	r2, s11
 801364a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801364e:	1a5b      	subs	r3, r3, r1
 8013650:	2b19      	cmp	r3, #25
 8013652:	dc04      	bgt.n	801365e <__ieee754_rem_pio2f+0x17e>
 8013654:	edc4 5a00 	vstr	s11, [r4]
 8013658:	eeb0 0a66 	vmov.f32	s0, s13
 801365c:	e7c6      	b.n	80135ec <__ieee754_rem_pio2f+0x10c>
 801365e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013748 <__ieee754_rem_pio2f+0x268>
 8013662:	eeb0 0a66 	vmov.f32	s0, s13
 8013666:	eea6 0a25 	vfma.f32	s0, s12, s11
 801366a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801366e:	eddf 6a37 	vldr	s13, [pc, #220]	; 801374c <__ieee754_rem_pio2f+0x26c>
 8013672:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013676:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801367a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801367e:	ed84 7a00 	vstr	s14, [r4]
 8013682:	e7b3      	b.n	80135ec <__ieee754_rem_pio2f+0x10c>
 8013684:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013688:	db06      	blt.n	8013698 <__ieee754_rem_pio2f+0x1b8>
 801368a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801368e:	edc0 7a01 	vstr	s15, [r0, #4]
 8013692:	edc0 7a00 	vstr	s15, [r0]
 8013696:	e733      	b.n	8013500 <__ieee754_rem_pio2f+0x20>
 8013698:	15ea      	asrs	r2, r5, #23
 801369a:	3a86      	subs	r2, #134	; 0x86
 801369c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80136a0:	ee07 3a90 	vmov	s15, r3
 80136a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80136a8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013750 <__ieee754_rem_pio2f+0x270>
 80136ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80136b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80136b4:	ed8d 7a03 	vstr	s14, [sp, #12]
 80136b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80136bc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80136c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80136c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80136c8:	ed8d 7a04 	vstr	s14, [sp, #16]
 80136cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80136d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80136d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136d8:	edcd 7a05 	vstr	s15, [sp, #20]
 80136dc:	d11e      	bne.n	801371c <__ieee754_rem_pio2f+0x23c>
 80136de:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80136e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136e6:	bf14      	ite	ne
 80136e8:	2302      	movne	r3, #2
 80136ea:	2301      	moveq	r3, #1
 80136ec:	4919      	ldr	r1, [pc, #100]	; (8013754 <__ieee754_rem_pio2f+0x274>)
 80136ee:	9101      	str	r1, [sp, #4]
 80136f0:	2102      	movs	r1, #2
 80136f2:	9100      	str	r1, [sp, #0]
 80136f4:	a803      	add	r0, sp, #12
 80136f6:	4621      	mov	r1, r4
 80136f8:	f000 f892 	bl	8013820 <__kernel_rem_pio2f>
 80136fc:	2e00      	cmp	r6, #0
 80136fe:	f6bf af1c 	bge.w	801353a <__ieee754_rem_pio2f+0x5a>
 8013702:	edd4 7a00 	vldr	s15, [r4]
 8013706:	eef1 7a67 	vneg.f32	s15, s15
 801370a:	edc4 7a00 	vstr	s15, [r4]
 801370e:	edd4 7a01 	vldr	s15, [r4, #4]
 8013712:	eef1 7a67 	vneg.f32	s15, s15
 8013716:	edc4 7a01 	vstr	s15, [r4, #4]
 801371a:	e779      	b.n	8013610 <__ieee754_rem_pio2f+0x130>
 801371c:	2303      	movs	r3, #3
 801371e:	e7e5      	b.n	80136ec <__ieee754_rem_pio2f+0x20c>
 8013720:	3f490fd8 	.word	0x3f490fd8
 8013724:	4016cbe3 	.word	0x4016cbe3
 8013728:	3fc90f80 	.word	0x3fc90f80
 801372c:	3fc90fd0 	.word	0x3fc90fd0
 8013730:	37354443 	.word	0x37354443
 8013734:	37354400 	.word	0x37354400
 8013738:	2e85a308 	.word	0x2e85a308
 801373c:	43490f80 	.word	0x43490f80
 8013740:	3f22f984 	.word	0x3f22f984
 8013744:	08014960 	.word	0x08014960
 8013748:	2e85a300 	.word	0x2e85a300
 801374c:	248d3132 	.word	0x248d3132
 8013750:	43800000 	.word	0x43800000
 8013754:	080149e0 	.word	0x080149e0

08013758 <__ieee754_sqrtf>:
 8013758:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801375c:	4770      	bx	lr
	...

08013760 <__kernel_cosf>:
 8013760:	ee10 3a10 	vmov	r3, s0
 8013764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013768:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801376c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013770:	da05      	bge.n	801377e <__kernel_cosf+0x1e>
 8013772:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013776:	ee17 2a90 	vmov	r2, s15
 801377a:	2a00      	cmp	r2, #0
 801377c:	d03d      	beq.n	80137fa <__kernel_cosf+0x9a>
 801377e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8013782:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013800 <__kernel_cosf+0xa0>
 8013786:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8013804 <__kernel_cosf+0xa4>
 801378a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8013808 <__kernel_cosf+0xa8>
 801378e:	4a1f      	ldr	r2, [pc, #124]	; (801380c <__kernel_cosf+0xac>)
 8013790:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013794:	4293      	cmp	r3, r2
 8013796:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8013810 <__kernel_cosf+0xb0>
 801379a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801379e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8013814 <__kernel_cosf+0xb4>
 80137a2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80137a6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8013818 <__kernel_cosf+0xb8>
 80137aa:	eee7 7a25 	vfma.f32	s15, s14, s11
 80137ae:	eeb0 7a66 	vmov.f32	s14, s13
 80137b2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80137b6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80137ba:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80137be:	ee67 6a25 	vmul.f32	s13, s14, s11
 80137c2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80137c6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80137ca:	dc04      	bgt.n	80137d6 <__kernel_cosf+0x76>
 80137cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80137d0:	ee36 0a47 	vsub.f32	s0, s12, s14
 80137d4:	4770      	bx	lr
 80137d6:	4a11      	ldr	r2, [pc, #68]	; (801381c <__kernel_cosf+0xbc>)
 80137d8:	4293      	cmp	r3, r2
 80137da:	bfda      	itte	le
 80137dc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80137e0:	ee06 3a90 	vmovle	s13, r3
 80137e4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80137e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80137ec:	ee36 0a66 	vsub.f32	s0, s12, s13
 80137f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80137f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80137f8:	4770      	bx	lr
 80137fa:	eeb0 0a46 	vmov.f32	s0, s12
 80137fe:	4770      	bx	lr
 8013800:	ad47d74e 	.word	0xad47d74e
 8013804:	310f74f6 	.word	0x310f74f6
 8013808:	3d2aaaab 	.word	0x3d2aaaab
 801380c:	3e999999 	.word	0x3e999999
 8013810:	b493f27c 	.word	0xb493f27c
 8013814:	37d00d01 	.word	0x37d00d01
 8013818:	bab60b61 	.word	0xbab60b61
 801381c:	3f480000 	.word	0x3f480000

08013820 <__kernel_rem_pio2f>:
 8013820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013824:	ed2d 8b04 	vpush	{d8-d9}
 8013828:	b0d9      	sub	sp, #356	; 0x164
 801382a:	4688      	mov	r8, r1
 801382c:	9002      	str	r0, [sp, #8]
 801382e:	49bb      	ldr	r1, [pc, #748]	; (8013b1c <__kernel_rem_pio2f+0x2fc>)
 8013830:	9866      	ldr	r0, [sp, #408]	; 0x198
 8013832:	9301      	str	r3, [sp, #4]
 8013834:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8013838:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801383c:	1e59      	subs	r1, r3, #1
 801383e:	1d13      	adds	r3, r2, #4
 8013840:	db27      	blt.n	8013892 <__kernel_rem_pio2f+0x72>
 8013842:	f1b2 0b03 	subs.w	fp, r2, #3
 8013846:	bf48      	it	mi
 8013848:	f102 0b04 	addmi.w	fp, r2, #4
 801384c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8013850:	1c45      	adds	r5, r0, #1
 8013852:	00ec      	lsls	r4, r5, #3
 8013854:	1a47      	subs	r7, r0, r1
 8013856:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8013b2c <__kernel_rem_pio2f+0x30c>
 801385a:	9403      	str	r4, [sp, #12]
 801385c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8013860:	eb0a 0c01 	add.w	ip, sl, r1
 8013864:	ae1c      	add	r6, sp, #112	; 0x70
 8013866:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801386a:	2400      	movs	r4, #0
 801386c:	4564      	cmp	r4, ip
 801386e:	dd12      	ble.n	8013896 <__kernel_rem_pio2f+0x76>
 8013870:	9b01      	ldr	r3, [sp, #4]
 8013872:	ac1c      	add	r4, sp, #112	; 0x70
 8013874:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8013878:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801387c:	f04f 0c00 	mov.w	ip, #0
 8013880:	45d4      	cmp	ip, sl
 8013882:	dc27      	bgt.n	80138d4 <__kernel_rem_pio2f+0xb4>
 8013884:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8013888:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8013b2c <__kernel_rem_pio2f+0x30c>
 801388c:	4627      	mov	r7, r4
 801388e:	2600      	movs	r6, #0
 8013890:	e016      	b.n	80138c0 <__kernel_rem_pio2f+0xa0>
 8013892:	2000      	movs	r0, #0
 8013894:	e7dc      	b.n	8013850 <__kernel_rem_pio2f+0x30>
 8013896:	42e7      	cmn	r7, r4
 8013898:	bf5d      	ittte	pl
 801389a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801389e:	ee07 3a90 	vmovpl	s15, r3
 80138a2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80138a6:	eef0 7a47 	vmovmi.f32	s15, s14
 80138aa:	ece6 7a01 	vstmia	r6!, {s15}
 80138ae:	3401      	adds	r4, #1
 80138b0:	e7dc      	b.n	801386c <__kernel_rem_pio2f+0x4c>
 80138b2:	ecf9 6a01 	vldmia	r9!, {s13}
 80138b6:	ed97 7a00 	vldr	s14, [r7]
 80138ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80138be:	3601      	adds	r6, #1
 80138c0:	428e      	cmp	r6, r1
 80138c2:	f1a7 0704 	sub.w	r7, r7, #4
 80138c6:	ddf4      	ble.n	80138b2 <__kernel_rem_pio2f+0x92>
 80138c8:	eceb 7a01 	vstmia	fp!, {s15}
 80138cc:	f10c 0c01 	add.w	ip, ip, #1
 80138d0:	3404      	adds	r4, #4
 80138d2:	e7d5      	b.n	8013880 <__kernel_rem_pio2f+0x60>
 80138d4:	ab08      	add	r3, sp, #32
 80138d6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80138da:	eddf 8a93 	vldr	s17, [pc, #588]	; 8013b28 <__kernel_rem_pio2f+0x308>
 80138de:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8013b24 <__kernel_rem_pio2f+0x304>
 80138e2:	9304      	str	r3, [sp, #16]
 80138e4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80138e8:	4656      	mov	r6, sl
 80138ea:	00b3      	lsls	r3, r6, #2
 80138ec:	9305      	str	r3, [sp, #20]
 80138ee:	ab58      	add	r3, sp, #352	; 0x160
 80138f0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80138f4:	ac08      	add	r4, sp, #32
 80138f6:	ab44      	add	r3, sp, #272	; 0x110
 80138f8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80138fc:	46a4      	mov	ip, r4
 80138fe:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013902:	4637      	mov	r7, r6
 8013904:	2f00      	cmp	r7, #0
 8013906:	f1a0 0004 	sub.w	r0, r0, #4
 801390a:	dc4f      	bgt.n	80139ac <__kernel_rem_pio2f+0x18c>
 801390c:	4628      	mov	r0, r5
 801390e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8013912:	f000 fc5f 	bl	80141d4 <scalbnf>
 8013916:	eeb0 8a40 	vmov.f32	s16, s0
 801391a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801391e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013922:	f000 fc0f 	bl	8014144 <floorf>
 8013926:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801392a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801392e:	2d00      	cmp	r5, #0
 8013930:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013934:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013938:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801393c:	ee17 9a90 	vmov	r9, s15
 8013940:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013944:	dd44      	ble.n	80139d0 <__kernel_rem_pio2f+0x1b0>
 8013946:	f106 3cff 	add.w	ip, r6, #4294967295
 801394a:	ab08      	add	r3, sp, #32
 801394c:	f1c5 0e08 	rsb	lr, r5, #8
 8013950:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8013954:	fa47 f00e 	asr.w	r0, r7, lr
 8013958:	4481      	add	r9, r0
 801395a:	fa00 f00e 	lsl.w	r0, r0, lr
 801395e:	1a3f      	subs	r7, r7, r0
 8013960:	f1c5 0007 	rsb	r0, r5, #7
 8013964:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8013968:	4107      	asrs	r7, r0
 801396a:	2f00      	cmp	r7, #0
 801396c:	dd3f      	ble.n	80139ee <__kernel_rem_pio2f+0x1ce>
 801396e:	f04f 0e00 	mov.w	lr, #0
 8013972:	f109 0901 	add.w	r9, r9, #1
 8013976:	4673      	mov	r3, lr
 8013978:	4576      	cmp	r6, lr
 801397a:	dc6b      	bgt.n	8013a54 <__kernel_rem_pio2f+0x234>
 801397c:	2d00      	cmp	r5, #0
 801397e:	dd04      	ble.n	801398a <__kernel_rem_pio2f+0x16a>
 8013980:	2d01      	cmp	r5, #1
 8013982:	d078      	beq.n	8013a76 <__kernel_rem_pio2f+0x256>
 8013984:	2d02      	cmp	r5, #2
 8013986:	f000 8081 	beq.w	8013a8c <__kernel_rem_pio2f+0x26c>
 801398a:	2f02      	cmp	r7, #2
 801398c:	d12f      	bne.n	80139ee <__kernel_rem_pio2f+0x1ce>
 801398e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013992:	ee30 8a48 	vsub.f32	s16, s0, s16
 8013996:	b353      	cbz	r3, 80139ee <__kernel_rem_pio2f+0x1ce>
 8013998:	4628      	mov	r0, r5
 801399a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801399e:	f000 fc19 	bl	80141d4 <scalbnf>
 80139a2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80139a6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80139aa:	e020      	b.n	80139ee <__kernel_rem_pio2f+0x1ce>
 80139ac:	ee60 7a28 	vmul.f32	s15, s0, s17
 80139b0:	3f01      	subs	r7, #1
 80139b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80139b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139ba:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80139be:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80139c2:	ecac 0a01 	vstmia	ip!, {s0}
 80139c6:	ed90 0a00 	vldr	s0, [r0]
 80139ca:	ee37 0a80 	vadd.f32	s0, s15, s0
 80139ce:	e799      	b.n	8013904 <__kernel_rem_pio2f+0xe4>
 80139d0:	d105      	bne.n	80139de <__kernel_rem_pio2f+0x1be>
 80139d2:	1e70      	subs	r0, r6, #1
 80139d4:	ab08      	add	r3, sp, #32
 80139d6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80139da:	11ff      	asrs	r7, r7, #7
 80139dc:	e7c5      	b.n	801396a <__kernel_rem_pio2f+0x14a>
 80139de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80139e2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80139e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ea:	da31      	bge.n	8013a50 <__kernel_rem_pio2f+0x230>
 80139ec:	2700      	movs	r7, #0
 80139ee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80139f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139f6:	f040 809b 	bne.w	8013b30 <__kernel_rem_pio2f+0x310>
 80139fa:	1e74      	subs	r4, r6, #1
 80139fc:	46a4      	mov	ip, r4
 80139fe:	2000      	movs	r0, #0
 8013a00:	45d4      	cmp	ip, sl
 8013a02:	da4a      	bge.n	8013a9a <__kernel_rem_pio2f+0x27a>
 8013a04:	2800      	cmp	r0, #0
 8013a06:	d07a      	beq.n	8013afe <__kernel_rem_pio2f+0x2de>
 8013a08:	ab08      	add	r3, sp, #32
 8013a0a:	3d08      	subs	r5, #8
 8013a0c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	f000 8081 	beq.w	8013b18 <__kernel_rem_pio2f+0x2f8>
 8013a16:	4628      	mov	r0, r5
 8013a18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013a1c:	00a5      	lsls	r5, r4, #2
 8013a1e:	f000 fbd9 	bl	80141d4 <scalbnf>
 8013a22:	aa44      	add	r2, sp, #272	; 0x110
 8013a24:	1d2b      	adds	r3, r5, #4
 8013a26:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8013b28 <__kernel_rem_pio2f+0x308>
 8013a2a:	18d1      	adds	r1, r2, r3
 8013a2c:	4622      	mov	r2, r4
 8013a2e:	2a00      	cmp	r2, #0
 8013a30:	f280 80ae 	bge.w	8013b90 <__kernel_rem_pio2f+0x370>
 8013a34:	4622      	mov	r2, r4
 8013a36:	2a00      	cmp	r2, #0
 8013a38:	f2c0 80cc 	blt.w	8013bd4 <__kernel_rem_pio2f+0x3b4>
 8013a3c:	a944      	add	r1, sp, #272	; 0x110
 8013a3e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8013a42:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8013b20 <__kernel_rem_pio2f+0x300>
 8013a46:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013b2c <__kernel_rem_pio2f+0x30c>
 8013a4a:	2000      	movs	r0, #0
 8013a4c:	1aa1      	subs	r1, r4, r2
 8013a4e:	e0b6      	b.n	8013bbe <__kernel_rem_pio2f+0x39e>
 8013a50:	2702      	movs	r7, #2
 8013a52:	e78c      	b.n	801396e <__kernel_rem_pio2f+0x14e>
 8013a54:	6820      	ldr	r0, [r4, #0]
 8013a56:	b94b      	cbnz	r3, 8013a6c <__kernel_rem_pio2f+0x24c>
 8013a58:	b118      	cbz	r0, 8013a62 <__kernel_rem_pio2f+0x242>
 8013a5a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8013a5e:	6020      	str	r0, [r4, #0]
 8013a60:	2001      	movs	r0, #1
 8013a62:	f10e 0e01 	add.w	lr, lr, #1
 8013a66:	3404      	adds	r4, #4
 8013a68:	4603      	mov	r3, r0
 8013a6a:	e785      	b.n	8013978 <__kernel_rem_pio2f+0x158>
 8013a6c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8013a70:	6020      	str	r0, [r4, #0]
 8013a72:	4618      	mov	r0, r3
 8013a74:	e7f5      	b.n	8013a62 <__kernel_rem_pio2f+0x242>
 8013a76:	1e74      	subs	r4, r6, #1
 8013a78:	a808      	add	r0, sp, #32
 8013a7a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013a7e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8013a82:	f10d 0c20 	add.w	ip, sp, #32
 8013a86:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8013a8a:	e77e      	b.n	801398a <__kernel_rem_pio2f+0x16a>
 8013a8c:	1e74      	subs	r4, r6, #1
 8013a8e:	a808      	add	r0, sp, #32
 8013a90:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013a94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8013a98:	e7f3      	b.n	8013a82 <__kernel_rem_pio2f+0x262>
 8013a9a:	ab08      	add	r3, sp, #32
 8013a9c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8013aa0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013aa4:	4318      	orrs	r0, r3
 8013aa6:	e7ab      	b.n	8013a00 <__kernel_rem_pio2f+0x1e0>
 8013aa8:	f10c 0c01 	add.w	ip, ip, #1
 8013aac:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8013ab0:	2c00      	cmp	r4, #0
 8013ab2:	d0f9      	beq.n	8013aa8 <__kernel_rem_pio2f+0x288>
 8013ab4:	9b05      	ldr	r3, [sp, #20]
 8013ab6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013aba:	eb0d 0003 	add.w	r0, sp, r3
 8013abe:	9b01      	ldr	r3, [sp, #4]
 8013ac0:	18f4      	adds	r4, r6, r3
 8013ac2:	ab1c      	add	r3, sp, #112	; 0x70
 8013ac4:	1c77      	adds	r7, r6, #1
 8013ac6:	384c      	subs	r0, #76	; 0x4c
 8013ac8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013acc:	4466      	add	r6, ip
 8013ace:	42be      	cmp	r6, r7
 8013ad0:	f6ff af0b 	blt.w	80138ea <__kernel_rem_pio2f+0xca>
 8013ad4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8013ad8:	f8dd e008 	ldr.w	lr, [sp, #8]
 8013adc:	ee07 3a90 	vmov	s15, r3
 8013ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ae4:	f04f 0c00 	mov.w	ip, #0
 8013ae8:	ece4 7a01 	vstmia	r4!, {s15}
 8013aec:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013b2c <__kernel_rem_pio2f+0x30c>
 8013af0:	46a1      	mov	r9, r4
 8013af2:	458c      	cmp	ip, r1
 8013af4:	dd07      	ble.n	8013b06 <__kernel_rem_pio2f+0x2e6>
 8013af6:	ece0 7a01 	vstmia	r0!, {s15}
 8013afa:	3701      	adds	r7, #1
 8013afc:	e7e7      	b.n	8013ace <__kernel_rem_pio2f+0x2ae>
 8013afe:	9804      	ldr	r0, [sp, #16]
 8013b00:	f04f 0c01 	mov.w	ip, #1
 8013b04:	e7d2      	b.n	8013aac <__kernel_rem_pio2f+0x28c>
 8013b06:	ecfe 6a01 	vldmia	lr!, {s13}
 8013b0a:	ed39 7a01 	vldmdb	r9!, {s14}
 8013b0e:	f10c 0c01 	add.w	ip, ip, #1
 8013b12:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013b16:	e7ec      	b.n	8013af2 <__kernel_rem_pio2f+0x2d2>
 8013b18:	3c01      	subs	r4, #1
 8013b1a:	e775      	b.n	8013a08 <__kernel_rem_pio2f+0x1e8>
 8013b1c:	08014d24 	.word	0x08014d24
 8013b20:	08014cf8 	.word	0x08014cf8
 8013b24:	43800000 	.word	0x43800000
 8013b28:	3b800000 	.word	0x3b800000
 8013b2c:	00000000 	.word	0x00000000
 8013b30:	9b03      	ldr	r3, [sp, #12]
 8013b32:	eeb0 0a48 	vmov.f32	s0, s16
 8013b36:	1a98      	subs	r0, r3, r2
 8013b38:	f000 fb4c 	bl	80141d4 <scalbnf>
 8013b3c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8013b24 <__kernel_rem_pio2f+0x304>
 8013b40:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b48:	db19      	blt.n	8013b7e <__kernel_rem_pio2f+0x35e>
 8013b4a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8013b28 <__kernel_rem_pio2f+0x308>
 8013b4e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013b52:	aa08      	add	r2, sp, #32
 8013b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b58:	1c74      	adds	r4, r6, #1
 8013b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b5e:	3508      	adds	r5, #8
 8013b60:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013b64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b68:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013b6c:	ee10 3a10 	vmov	r3, s0
 8013b70:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013b74:	ee17 3a90 	vmov	r3, s15
 8013b78:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013b7c:	e74b      	b.n	8013a16 <__kernel_rem_pio2f+0x1f6>
 8013b7e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013b82:	aa08      	add	r2, sp, #32
 8013b84:	ee10 3a10 	vmov	r3, s0
 8013b88:	4634      	mov	r4, r6
 8013b8a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013b8e:	e742      	b.n	8013a16 <__kernel_rem_pio2f+0x1f6>
 8013b90:	a808      	add	r0, sp, #32
 8013b92:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8013b96:	9001      	str	r0, [sp, #4]
 8013b98:	ee07 0a90 	vmov	s15, r0
 8013b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ba0:	3a01      	subs	r2, #1
 8013ba2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013ba6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013baa:	ed61 7a01 	vstmdb	r1!, {s15}
 8013bae:	e73e      	b.n	8013a2e <__kernel_rem_pio2f+0x20e>
 8013bb0:	ecfc 6a01 	vldmia	ip!, {s13}
 8013bb4:	ecb6 7a01 	vldmia	r6!, {s14}
 8013bb8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013bbc:	3001      	adds	r0, #1
 8013bbe:	4550      	cmp	r0, sl
 8013bc0:	dc01      	bgt.n	8013bc6 <__kernel_rem_pio2f+0x3a6>
 8013bc2:	4288      	cmp	r0, r1
 8013bc4:	ddf4      	ble.n	8013bb0 <__kernel_rem_pio2f+0x390>
 8013bc6:	a858      	add	r0, sp, #352	; 0x160
 8013bc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013bcc:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8013bd0:	3a01      	subs	r2, #1
 8013bd2:	e730      	b.n	8013a36 <__kernel_rem_pio2f+0x216>
 8013bd4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8013bd6:	2a02      	cmp	r2, #2
 8013bd8:	dc09      	bgt.n	8013bee <__kernel_rem_pio2f+0x3ce>
 8013bda:	2a00      	cmp	r2, #0
 8013bdc:	dc2a      	bgt.n	8013c34 <__kernel_rem_pio2f+0x414>
 8013bde:	d043      	beq.n	8013c68 <__kernel_rem_pio2f+0x448>
 8013be0:	f009 0007 	and.w	r0, r9, #7
 8013be4:	b059      	add	sp, #356	; 0x164
 8013be6:	ecbd 8b04 	vpop	{d8-d9}
 8013bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bee:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8013bf0:	2b03      	cmp	r3, #3
 8013bf2:	d1f5      	bne.n	8013be0 <__kernel_rem_pio2f+0x3c0>
 8013bf4:	ab30      	add	r3, sp, #192	; 0xc0
 8013bf6:	442b      	add	r3, r5
 8013bf8:	461a      	mov	r2, r3
 8013bfa:	4619      	mov	r1, r3
 8013bfc:	4620      	mov	r0, r4
 8013bfe:	2800      	cmp	r0, #0
 8013c00:	f1a1 0104 	sub.w	r1, r1, #4
 8013c04:	dc51      	bgt.n	8013caa <__kernel_rem_pio2f+0x48a>
 8013c06:	4621      	mov	r1, r4
 8013c08:	2901      	cmp	r1, #1
 8013c0a:	f1a2 0204 	sub.w	r2, r2, #4
 8013c0e:	dc5c      	bgt.n	8013cca <__kernel_rem_pio2f+0x4aa>
 8013c10:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8013b2c <__kernel_rem_pio2f+0x30c>
 8013c14:	3304      	adds	r3, #4
 8013c16:	2c01      	cmp	r4, #1
 8013c18:	dc67      	bgt.n	8013cea <__kernel_rem_pio2f+0x4ca>
 8013c1a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8013c1e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8013c22:	2f00      	cmp	r7, #0
 8013c24:	d167      	bne.n	8013cf6 <__kernel_rem_pio2f+0x4d6>
 8013c26:	edc8 6a00 	vstr	s13, [r8]
 8013c2a:	ed88 7a01 	vstr	s14, [r8, #4]
 8013c2e:	edc8 7a02 	vstr	s15, [r8, #8]
 8013c32:	e7d5      	b.n	8013be0 <__kernel_rem_pio2f+0x3c0>
 8013c34:	aa30      	add	r2, sp, #192	; 0xc0
 8013c36:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8013b2c <__kernel_rem_pio2f+0x30c>
 8013c3a:	4413      	add	r3, r2
 8013c3c:	4622      	mov	r2, r4
 8013c3e:	2a00      	cmp	r2, #0
 8013c40:	da24      	bge.n	8013c8c <__kernel_rem_pio2f+0x46c>
 8013c42:	b34f      	cbz	r7, 8013c98 <__kernel_rem_pio2f+0x478>
 8013c44:	eef1 7a47 	vneg.f32	s15, s14
 8013c48:	edc8 7a00 	vstr	s15, [r8]
 8013c4c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8013c50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c54:	aa31      	add	r2, sp, #196	; 0xc4
 8013c56:	2301      	movs	r3, #1
 8013c58:	429c      	cmp	r4, r3
 8013c5a:	da20      	bge.n	8013c9e <__kernel_rem_pio2f+0x47e>
 8013c5c:	b10f      	cbz	r7, 8013c62 <__kernel_rem_pio2f+0x442>
 8013c5e:	eef1 7a67 	vneg.f32	s15, s15
 8013c62:	edc8 7a01 	vstr	s15, [r8, #4]
 8013c66:	e7bb      	b.n	8013be0 <__kernel_rem_pio2f+0x3c0>
 8013c68:	aa30      	add	r2, sp, #192	; 0xc0
 8013c6a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8013b2c <__kernel_rem_pio2f+0x30c>
 8013c6e:	4413      	add	r3, r2
 8013c70:	2c00      	cmp	r4, #0
 8013c72:	da05      	bge.n	8013c80 <__kernel_rem_pio2f+0x460>
 8013c74:	b10f      	cbz	r7, 8013c7a <__kernel_rem_pio2f+0x45a>
 8013c76:	eef1 7a67 	vneg.f32	s15, s15
 8013c7a:	edc8 7a00 	vstr	s15, [r8]
 8013c7e:	e7af      	b.n	8013be0 <__kernel_rem_pio2f+0x3c0>
 8013c80:	ed33 7a01 	vldmdb	r3!, {s14}
 8013c84:	3c01      	subs	r4, #1
 8013c86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013c8a:	e7f1      	b.n	8013c70 <__kernel_rem_pio2f+0x450>
 8013c8c:	ed73 7a01 	vldmdb	r3!, {s15}
 8013c90:	3a01      	subs	r2, #1
 8013c92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013c96:	e7d2      	b.n	8013c3e <__kernel_rem_pio2f+0x41e>
 8013c98:	eef0 7a47 	vmov.f32	s15, s14
 8013c9c:	e7d4      	b.n	8013c48 <__kernel_rem_pio2f+0x428>
 8013c9e:	ecb2 7a01 	vldmia	r2!, {s14}
 8013ca2:	3301      	adds	r3, #1
 8013ca4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013ca8:	e7d6      	b.n	8013c58 <__kernel_rem_pio2f+0x438>
 8013caa:	edd1 7a00 	vldr	s15, [r1]
 8013cae:	edd1 6a01 	vldr	s13, [r1, #4]
 8013cb2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013cb6:	3801      	subs	r0, #1
 8013cb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013cbc:	ed81 7a00 	vstr	s14, [r1]
 8013cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013cc4:	edc1 7a01 	vstr	s15, [r1, #4]
 8013cc8:	e799      	b.n	8013bfe <__kernel_rem_pio2f+0x3de>
 8013cca:	edd2 7a00 	vldr	s15, [r2]
 8013cce:	edd2 6a01 	vldr	s13, [r2, #4]
 8013cd2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013cd6:	3901      	subs	r1, #1
 8013cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013cdc:	ed82 7a00 	vstr	s14, [r2]
 8013ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ce4:	edc2 7a01 	vstr	s15, [r2, #4]
 8013ce8:	e78e      	b.n	8013c08 <__kernel_rem_pio2f+0x3e8>
 8013cea:	ed33 7a01 	vldmdb	r3!, {s14}
 8013cee:	3c01      	subs	r4, #1
 8013cf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013cf4:	e78f      	b.n	8013c16 <__kernel_rem_pio2f+0x3f6>
 8013cf6:	eef1 6a66 	vneg.f32	s13, s13
 8013cfa:	eeb1 7a47 	vneg.f32	s14, s14
 8013cfe:	edc8 6a00 	vstr	s13, [r8]
 8013d02:	ed88 7a01 	vstr	s14, [r8, #4]
 8013d06:	eef1 7a67 	vneg.f32	s15, s15
 8013d0a:	e790      	b.n	8013c2e <__kernel_rem_pio2f+0x40e>

08013d0c <__kernel_sinf>:
 8013d0c:	ee10 3a10 	vmov	r3, s0
 8013d10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013d14:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013d18:	da04      	bge.n	8013d24 <__kernel_sinf+0x18>
 8013d1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013d1e:	ee17 3a90 	vmov	r3, s15
 8013d22:	b35b      	cbz	r3, 8013d7c <__kernel_sinf+0x70>
 8013d24:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013d28:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013d80 <__kernel_sinf+0x74>
 8013d2c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8013d84 <__kernel_sinf+0x78>
 8013d30:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013d34:	eddf 7a14 	vldr	s15, [pc, #80]	; 8013d88 <__kernel_sinf+0x7c>
 8013d38:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013d3c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8013d8c <__kernel_sinf+0x80>
 8013d40:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013d44:	eddf 7a12 	vldr	s15, [pc, #72]	; 8013d90 <__kernel_sinf+0x84>
 8013d48:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013d4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013d50:	b930      	cbnz	r0, 8013d60 <__kernel_sinf+0x54>
 8013d52:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8013d94 <__kernel_sinf+0x88>
 8013d56:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013d5a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013d5e:	4770      	bx	lr
 8013d60:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013d64:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8013d68:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013d6c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013d70:	eddf 7a09 	vldr	s15, [pc, #36]	; 8013d98 <__kernel_sinf+0x8c>
 8013d74:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013d78:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013d7c:	4770      	bx	lr
 8013d7e:	bf00      	nop
 8013d80:	2f2ec9d3 	.word	0x2f2ec9d3
 8013d84:	b2d72f34 	.word	0xb2d72f34
 8013d88:	3638ef1b 	.word	0x3638ef1b
 8013d8c:	b9500d01 	.word	0xb9500d01
 8013d90:	3c088889 	.word	0x3c088889
 8013d94:	be2aaaab 	.word	0xbe2aaaab
 8013d98:	3e2aaaab 	.word	0x3e2aaaab

08013d9c <with_errno>:
 8013d9c:	b570      	push	{r4, r5, r6, lr}
 8013d9e:	4604      	mov	r4, r0
 8013da0:	460d      	mov	r5, r1
 8013da2:	4616      	mov	r6, r2
 8013da4:	f7fb f8d2 	bl	800ef4c <__errno>
 8013da8:	4629      	mov	r1, r5
 8013daa:	6006      	str	r6, [r0, #0]
 8013dac:	4620      	mov	r0, r4
 8013dae:	bd70      	pop	{r4, r5, r6, pc}

08013db0 <xflow>:
 8013db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013db2:	4614      	mov	r4, r2
 8013db4:	461d      	mov	r5, r3
 8013db6:	b108      	cbz	r0, 8013dbc <xflow+0xc>
 8013db8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013dbc:	e9cd 2300 	strd	r2, r3, [sp]
 8013dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	4629      	mov	r1, r5
 8013dc8:	f7ec fc16 	bl	80005f8 <__aeabi_dmul>
 8013dcc:	2222      	movs	r2, #34	; 0x22
 8013dce:	b003      	add	sp, #12
 8013dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013dd4:	f7ff bfe2 	b.w	8013d9c <with_errno>

08013dd8 <__math_uflow>:
 8013dd8:	b508      	push	{r3, lr}
 8013dda:	2200      	movs	r2, #0
 8013ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013de0:	f7ff ffe6 	bl	8013db0 <xflow>
 8013de4:	ec41 0b10 	vmov	d0, r0, r1
 8013de8:	bd08      	pop	{r3, pc}

08013dea <__math_oflow>:
 8013dea:	b508      	push	{r3, lr}
 8013dec:	2200      	movs	r2, #0
 8013dee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013df2:	f7ff ffdd 	bl	8013db0 <xflow>
 8013df6:	ec41 0b10 	vmov	d0, r0, r1
 8013dfa:	bd08      	pop	{r3, pc}

08013dfc <with_errnof>:
 8013dfc:	b513      	push	{r0, r1, r4, lr}
 8013dfe:	4604      	mov	r4, r0
 8013e00:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013e04:	f7fb f8a2 	bl	800ef4c <__errno>
 8013e08:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013e0c:	6004      	str	r4, [r0, #0]
 8013e0e:	b002      	add	sp, #8
 8013e10:	bd10      	pop	{r4, pc}

08013e12 <xflowf>:
 8013e12:	b130      	cbz	r0, 8013e22 <xflowf+0x10>
 8013e14:	eef1 7a40 	vneg.f32	s15, s0
 8013e18:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013e1c:	2022      	movs	r0, #34	; 0x22
 8013e1e:	f7ff bfed 	b.w	8013dfc <with_errnof>
 8013e22:	eef0 7a40 	vmov.f32	s15, s0
 8013e26:	e7f7      	b.n	8013e18 <xflowf+0x6>

08013e28 <__math_uflowf>:
 8013e28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013e30 <__math_uflowf+0x8>
 8013e2c:	f7ff bff1 	b.w	8013e12 <xflowf>
 8013e30:	10000000 	.word	0x10000000

08013e34 <__math_oflowf>:
 8013e34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013e3c <__math_oflowf+0x8>
 8013e38:	f7ff bfeb 	b.w	8013e12 <xflowf>
 8013e3c:	70000000 	.word	0x70000000

08013e40 <fabs>:
 8013e40:	ec51 0b10 	vmov	r0, r1, d0
 8013e44:	ee10 2a10 	vmov	r2, s0
 8013e48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013e4c:	ec43 2b10 	vmov	d0, r2, r3
 8013e50:	4770      	bx	lr

08013e52 <finite>:
 8013e52:	b082      	sub	sp, #8
 8013e54:	ed8d 0b00 	vstr	d0, [sp]
 8013e58:	9801      	ldr	r0, [sp, #4]
 8013e5a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8013e5e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013e62:	0fc0      	lsrs	r0, r0, #31
 8013e64:	b002      	add	sp, #8
 8013e66:	4770      	bx	lr

08013e68 <scalbn>:
 8013e68:	b570      	push	{r4, r5, r6, lr}
 8013e6a:	ec55 4b10 	vmov	r4, r5, d0
 8013e6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013e72:	4606      	mov	r6, r0
 8013e74:	462b      	mov	r3, r5
 8013e76:	b99a      	cbnz	r2, 8013ea0 <scalbn+0x38>
 8013e78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013e7c:	4323      	orrs	r3, r4
 8013e7e:	d036      	beq.n	8013eee <scalbn+0x86>
 8013e80:	4b39      	ldr	r3, [pc, #228]	; (8013f68 <scalbn+0x100>)
 8013e82:	4629      	mov	r1, r5
 8013e84:	ee10 0a10 	vmov	r0, s0
 8013e88:	2200      	movs	r2, #0
 8013e8a:	f7ec fbb5 	bl	80005f8 <__aeabi_dmul>
 8013e8e:	4b37      	ldr	r3, [pc, #220]	; (8013f6c <scalbn+0x104>)
 8013e90:	429e      	cmp	r6, r3
 8013e92:	4604      	mov	r4, r0
 8013e94:	460d      	mov	r5, r1
 8013e96:	da10      	bge.n	8013eba <scalbn+0x52>
 8013e98:	a32b      	add	r3, pc, #172	; (adr r3, 8013f48 <scalbn+0xe0>)
 8013e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e9e:	e03a      	b.n	8013f16 <scalbn+0xae>
 8013ea0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013ea4:	428a      	cmp	r2, r1
 8013ea6:	d10c      	bne.n	8013ec2 <scalbn+0x5a>
 8013ea8:	ee10 2a10 	vmov	r2, s0
 8013eac:	4620      	mov	r0, r4
 8013eae:	4629      	mov	r1, r5
 8013eb0:	f7ec f9ec 	bl	800028c <__adddf3>
 8013eb4:	4604      	mov	r4, r0
 8013eb6:	460d      	mov	r5, r1
 8013eb8:	e019      	b.n	8013eee <scalbn+0x86>
 8013eba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013ebe:	460b      	mov	r3, r1
 8013ec0:	3a36      	subs	r2, #54	; 0x36
 8013ec2:	4432      	add	r2, r6
 8013ec4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013ec8:	428a      	cmp	r2, r1
 8013eca:	dd08      	ble.n	8013ede <scalbn+0x76>
 8013ecc:	2d00      	cmp	r5, #0
 8013ece:	a120      	add	r1, pc, #128	; (adr r1, 8013f50 <scalbn+0xe8>)
 8013ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ed4:	da1c      	bge.n	8013f10 <scalbn+0xa8>
 8013ed6:	a120      	add	r1, pc, #128	; (adr r1, 8013f58 <scalbn+0xf0>)
 8013ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013edc:	e018      	b.n	8013f10 <scalbn+0xa8>
 8013ede:	2a00      	cmp	r2, #0
 8013ee0:	dd08      	ble.n	8013ef4 <scalbn+0x8c>
 8013ee2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013ee6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013eea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013eee:	ec45 4b10 	vmov	d0, r4, r5
 8013ef2:	bd70      	pop	{r4, r5, r6, pc}
 8013ef4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013ef8:	da19      	bge.n	8013f2e <scalbn+0xc6>
 8013efa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013efe:	429e      	cmp	r6, r3
 8013f00:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013f04:	dd0a      	ble.n	8013f1c <scalbn+0xb4>
 8013f06:	a112      	add	r1, pc, #72	; (adr r1, 8013f50 <scalbn+0xe8>)
 8013f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d1e2      	bne.n	8013ed6 <scalbn+0x6e>
 8013f10:	a30f      	add	r3, pc, #60	; (adr r3, 8013f50 <scalbn+0xe8>)
 8013f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f16:	f7ec fb6f 	bl	80005f8 <__aeabi_dmul>
 8013f1a:	e7cb      	b.n	8013eb4 <scalbn+0x4c>
 8013f1c:	a10a      	add	r1, pc, #40	; (adr r1, 8013f48 <scalbn+0xe0>)
 8013f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d0b8      	beq.n	8013e98 <scalbn+0x30>
 8013f26:	a10e      	add	r1, pc, #56	; (adr r1, 8013f60 <scalbn+0xf8>)
 8013f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f2c:	e7b4      	b.n	8013e98 <scalbn+0x30>
 8013f2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013f32:	3236      	adds	r2, #54	; 0x36
 8013f34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013f38:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	4b0c      	ldr	r3, [pc, #48]	; (8013f70 <scalbn+0x108>)
 8013f40:	2200      	movs	r2, #0
 8013f42:	e7e8      	b.n	8013f16 <scalbn+0xae>
 8013f44:	f3af 8000 	nop.w
 8013f48:	c2f8f359 	.word	0xc2f8f359
 8013f4c:	01a56e1f 	.word	0x01a56e1f
 8013f50:	8800759c 	.word	0x8800759c
 8013f54:	7e37e43c 	.word	0x7e37e43c
 8013f58:	8800759c 	.word	0x8800759c
 8013f5c:	fe37e43c 	.word	0xfe37e43c
 8013f60:	c2f8f359 	.word	0xc2f8f359
 8013f64:	81a56e1f 	.word	0x81a56e1f
 8013f68:	43500000 	.word	0x43500000
 8013f6c:	ffff3cb0 	.word	0xffff3cb0
 8013f70:	3c900000 	.word	0x3c900000

08013f74 <atanf>:
 8013f74:	b538      	push	{r3, r4, r5, lr}
 8013f76:	ee10 5a10 	vmov	r5, s0
 8013f7a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013f7e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013f82:	eef0 7a40 	vmov.f32	s15, s0
 8013f86:	db10      	blt.n	8013faa <atanf+0x36>
 8013f88:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013f8c:	dd04      	ble.n	8013f98 <atanf+0x24>
 8013f8e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8013f92:	eeb0 0a67 	vmov.f32	s0, s15
 8013f96:	bd38      	pop	{r3, r4, r5, pc}
 8013f98:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80140d0 <atanf+0x15c>
 8013f9c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80140d4 <atanf+0x160>
 8013fa0:	2d00      	cmp	r5, #0
 8013fa2:	bfd8      	it	le
 8013fa4:	eef0 7a40 	vmovle.f32	s15, s0
 8013fa8:	e7f3      	b.n	8013f92 <atanf+0x1e>
 8013faa:	4b4b      	ldr	r3, [pc, #300]	; (80140d8 <atanf+0x164>)
 8013fac:	429c      	cmp	r4, r3
 8013fae:	dc10      	bgt.n	8013fd2 <atanf+0x5e>
 8013fb0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013fb4:	da0a      	bge.n	8013fcc <atanf+0x58>
 8013fb6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80140dc <atanf+0x168>
 8013fba:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013fc2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fca:	dce2      	bgt.n	8013f92 <atanf+0x1e>
 8013fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8013fd0:	e013      	b.n	8013ffa <atanf+0x86>
 8013fd2:	f000 f8a3 	bl	801411c <fabsf>
 8013fd6:	4b42      	ldr	r3, [pc, #264]	; (80140e0 <atanf+0x16c>)
 8013fd8:	429c      	cmp	r4, r3
 8013fda:	dc4f      	bgt.n	801407c <atanf+0x108>
 8013fdc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013fe0:	429c      	cmp	r4, r3
 8013fe2:	dc41      	bgt.n	8014068 <atanf+0xf4>
 8013fe4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013fe8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013fec:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013ff6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013ffa:	1c5a      	adds	r2, r3, #1
 8013ffc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014000:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80140e4 <atanf+0x170>
 8014004:	eddf 5a38 	vldr	s11, [pc, #224]	; 80140e8 <atanf+0x174>
 8014008:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80140ec <atanf+0x178>
 801400c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014010:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014014:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80140f0 <atanf+0x17c>
 8014018:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801401c:	eddf 5a35 	vldr	s11, [pc, #212]	; 80140f4 <atanf+0x180>
 8014020:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014024:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80140f8 <atanf+0x184>
 8014028:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801402c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80140fc <atanf+0x188>
 8014030:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014034:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8014100 <atanf+0x18c>
 8014038:	eea6 5a87 	vfma.f32	s10, s13, s14
 801403c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014104 <atanf+0x190>
 8014040:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014044:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8014108 <atanf+0x194>
 8014048:	eea7 5a26 	vfma.f32	s10, s14, s13
 801404c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801410c <atanf+0x198>
 8014050:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014054:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014058:	eea5 7a86 	vfma.f32	s14, s11, s12
 801405c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014060:	d121      	bne.n	80140a6 <atanf+0x132>
 8014062:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014066:	e794      	b.n	8013f92 <atanf+0x1e>
 8014068:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801406c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014070:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014074:	2301      	movs	r3, #1
 8014076:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801407a:	e7be      	b.n	8013ffa <atanf+0x86>
 801407c:	4b24      	ldr	r3, [pc, #144]	; (8014110 <atanf+0x19c>)
 801407e:	429c      	cmp	r4, r3
 8014080:	dc0b      	bgt.n	801409a <atanf+0x126>
 8014082:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014086:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801408a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801408e:	2302      	movs	r3, #2
 8014090:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014098:	e7af      	b.n	8013ffa <atanf+0x86>
 801409a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801409e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80140a2:	2303      	movs	r3, #3
 80140a4:	e7a9      	b.n	8013ffa <atanf+0x86>
 80140a6:	4a1b      	ldr	r2, [pc, #108]	; (8014114 <atanf+0x1a0>)
 80140a8:	491b      	ldr	r1, [pc, #108]	; (8014118 <atanf+0x1a4>)
 80140aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80140ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80140b2:	ed93 0a00 	vldr	s0, [r3]
 80140b6:	ee37 7a40 	vsub.f32	s14, s14, s0
 80140ba:	ed92 0a00 	vldr	s0, [r2]
 80140be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140c2:	2d00      	cmp	r5, #0
 80140c4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80140c8:	bfb8      	it	lt
 80140ca:	eef1 7a67 	vneglt.f32	s15, s15
 80140ce:	e760      	b.n	8013f92 <atanf+0x1e>
 80140d0:	3fc90fdb 	.word	0x3fc90fdb
 80140d4:	bfc90fdb 	.word	0xbfc90fdb
 80140d8:	3edfffff 	.word	0x3edfffff
 80140dc:	7149f2ca 	.word	0x7149f2ca
 80140e0:	3f97ffff 	.word	0x3f97ffff
 80140e4:	3c8569d7 	.word	0x3c8569d7
 80140e8:	3d4bda59 	.word	0x3d4bda59
 80140ec:	bd6ef16b 	.word	0xbd6ef16b
 80140f0:	3d886b35 	.word	0x3d886b35
 80140f4:	3dba2e6e 	.word	0x3dba2e6e
 80140f8:	3e124925 	.word	0x3e124925
 80140fc:	3eaaaaab 	.word	0x3eaaaaab
 8014100:	bd15a221 	.word	0xbd15a221
 8014104:	bd9d8795 	.word	0xbd9d8795
 8014108:	bde38e38 	.word	0xbde38e38
 801410c:	be4ccccd 	.word	0xbe4ccccd
 8014110:	401bffff 	.word	0x401bffff
 8014114:	08014d30 	.word	0x08014d30
 8014118:	08014d40 	.word	0x08014d40

0801411c <fabsf>:
 801411c:	ee10 3a10 	vmov	r3, s0
 8014120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014124:	ee00 3a10 	vmov	s0, r3
 8014128:	4770      	bx	lr

0801412a <finitef>:
 801412a:	b082      	sub	sp, #8
 801412c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014130:	9801      	ldr	r0, [sp, #4]
 8014132:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014136:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801413a:	bfac      	ite	ge
 801413c:	2000      	movge	r0, #0
 801413e:	2001      	movlt	r0, #1
 8014140:	b002      	add	sp, #8
 8014142:	4770      	bx	lr

08014144 <floorf>:
 8014144:	ee10 3a10 	vmov	r3, s0
 8014148:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801414c:	3a7f      	subs	r2, #127	; 0x7f
 801414e:	2a16      	cmp	r2, #22
 8014150:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014154:	dc2a      	bgt.n	80141ac <floorf+0x68>
 8014156:	2a00      	cmp	r2, #0
 8014158:	da11      	bge.n	801417e <floorf+0x3a>
 801415a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80141bc <floorf+0x78>
 801415e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014162:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801416a:	dd05      	ble.n	8014178 <floorf+0x34>
 801416c:	2b00      	cmp	r3, #0
 801416e:	da23      	bge.n	80141b8 <floorf+0x74>
 8014170:	4a13      	ldr	r2, [pc, #76]	; (80141c0 <floorf+0x7c>)
 8014172:	2900      	cmp	r1, #0
 8014174:	bf18      	it	ne
 8014176:	4613      	movne	r3, r2
 8014178:	ee00 3a10 	vmov	s0, r3
 801417c:	4770      	bx	lr
 801417e:	4911      	ldr	r1, [pc, #68]	; (80141c4 <floorf+0x80>)
 8014180:	4111      	asrs	r1, r2
 8014182:	420b      	tst	r3, r1
 8014184:	d0fa      	beq.n	801417c <floorf+0x38>
 8014186:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80141bc <floorf+0x78>
 801418a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801418e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014196:	ddef      	ble.n	8014178 <floorf+0x34>
 8014198:	2b00      	cmp	r3, #0
 801419a:	bfbe      	ittt	lt
 801419c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80141a0:	fa40 f202 	asrlt.w	r2, r0, r2
 80141a4:	189b      	addlt	r3, r3, r2
 80141a6:	ea23 0301 	bic.w	r3, r3, r1
 80141aa:	e7e5      	b.n	8014178 <floorf+0x34>
 80141ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80141b0:	d3e4      	bcc.n	801417c <floorf+0x38>
 80141b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80141b6:	4770      	bx	lr
 80141b8:	2300      	movs	r3, #0
 80141ba:	e7dd      	b.n	8014178 <floorf+0x34>
 80141bc:	7149f2ca 	.word	0x7149f2ca
 80141c0:	bf800000 	.word	0xbf800000
 80141c4:	007fffff 	.word	0x007fffff

080141c8 <nanf>:
 80141c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80141d0 <nanf+0x8>
 80141cc:	4770      	bx	lr
 80141ce:	bf00      	nop
 80141d0:	7fc00000 	.word	0x7fc00000

080141d4 <scalbnf>:
 80141d4:	ee10 3a10 	vmov	r3, s0
 80141d8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80141dc:	d025      	beq.n	801422a <scalbnf+0x56>
 80141de:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80141e2:	d302      	bcc.n	80141ea <scalbnf+0x16>
 80141e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80141e8:	4770      	bx	lr
 80141ea:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80141ee:	d122      	bne.n	8014236 <scalbnf+0x62>
 80141f0:	4b2a      	ldr	r3, [pc, #168]	; (801429c <scalbnf+0xc8>)
 80141f2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80142a0 <scalbnf+0xcc>
 80141f6:	4298      	cmp	r0, r3
 80141f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80141fc:	db16      	blt.n	801422c <scalbnf+0x58>
 80141fe:	ee10 3a10 	vmov	r3, s0
 8014202:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014206:	3a19      	subs	r2, #25
 8014208:	4402      	add	r2, r0
 801420a:	2afe      	cmp	r2, #254	; 0xfe
 801420c:	dd15      	ble.n	801423a <scalbnf+0x66>
 801420e:	ee10 3a10 	vmov	r3, s0
 8014212:	eddf 7a24 	vldr	s15, [pc, #144]	; 80142a4 <scalbnf+0xd0>
 8014216:	eddf 6a24 	vldr	s13, [pc, #144]	; 80142a8 <scalbnf+0xd4>
 801421a:	2b00      	cmp	r3, #0
 801421c:	eeb0 7a67 	vmov.f32	s14, s15
 8014220:	bfb8      	it	lt
 8014222:	eef0 7a66 	vmovlt.f32	s15, s13
 8014226:	ee27 0a27 	vmul.f32	s0, s14, s15
 801422a:	4770      	bx	lr
 801422c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80142ac <scalbnf+0xd8>
 8014230:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014234:	4770      	bx	lr
 8014236:	0dd2      	lsrs	r2, r2, #23
 8014238:	e7e6      	b.n	8014208 <scalbnf+0x34>
 801423a:	2a00      	cmp	r2, #0
 801423c:	dd06      	ble.n	801424c <scalbnf+0x78>
 801423e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014242:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014246:	ee00 3a10 	vmov	s0, r3
 801424a:	4770      	bx	lr
 801424c:	f112 0f16 	cmn.w	r2, #22
 8014250:	da1a      	bge.n	8014288 <scalbnf+0xb4>
 8014252:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014256:	4298      	cmp	r0, r3
 8014258:	ee10 3a10 	vmov	r3, s0
 801425c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014260:	dd0a      	ble.n	8014278 <scalbnf+0xa4>
 8014262:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80142a4 <scalbnf+0xd0>
 8014266:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80142a8 <scalbnf+0xd4>
 801426a:	eef0 7a40 	vmov.f32	s15, s0
 801426e:	2b00      	cmp	r3, #0
 8014270:	bf18      	it	ne
 8014272:	eeb0 0a47 	vmovne.f32	s0, s14
 8014276:	e7db      	b.n	8014230 <scalbnf+0x5c>
 8014278:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80142ac <scalbnf+0xd8>
 801427c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80142b0 <scalbnf+0xdc>
 8014280:	eef0 7a40 	vmov.f32	s15, s0
 8014284:	2b00      	cmp	r3, #0
 8014286:	e7f3      	b.n	8014270 <scalbnf+0x9c>
 8014288:	3219      	adds	r2, #25
 801428a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801428e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014292:	eddf 7a08 	vldr	s15, [pc, #32]	; 80142b4 <scalbnf+0xe0>
 8014296:	ee07 3a10 	vmov	s14, r3
 801429a:	e7c4      	b.n	8014226 <scalbnf+0x52>
 801429c:	ffff3cb0 	.word	0xffff3cb0
 80142a0:	4c000000 	.word	0x4c000000
 80142a4:	7149f2ca 	.word	0x7149f2ca
 80142a8:	f149f2ca 	.word	0xf149f2ca
 80142ac:	0da24260 	.word	0x0da24260
 80142b0:	8da24260 	.word	0x8da24260
 80142b4:	33000000 	.word	0x33000000

080142b8 <_init>:
 80142b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142ba:	bf00      	nop
 80142bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142be:	bc08      	pop	{r3}
 80142c0:	469e      	mov	lr, r3
 80142c2:	4770      	bx	lr

080142c4 <_fini>:
 80142c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142c6:	bf00      	nop
 80142c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142ca:	bc08      	pop	{r3}
 80142cc:	469e      	mov	lr, r3
 80142ce:	4770      	bx	lr
