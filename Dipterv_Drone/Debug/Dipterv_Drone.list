
Dipterv_Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015cb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  08015e48  08015e48  00025e48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080167f8  080167f8  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  080167f8  080167f8  000267f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016800  08016800  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016800  08016800  00026800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016804  08016804  00026804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  08016808  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030248  2**0
                  CONTENTS
 10 .bss          000047c8  20000248  20000248  00030248  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004a10  20004a10  00030248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002295b  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004550  00000000  00000000  00052bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e20  00000000  00000000  00057128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c70  00000000  00000000  00058f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e76  00000000  00000000  0005abb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002272a  00000000  00000000  00080a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0f9f  00000000  00000000  000a3158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001840f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009940  00000000  00000000  00184148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015e30 	.word	0x08015e30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	08015e30 	.word	0x08015e30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <vApplicationGetIdleTaskMemory+0x30>)
 8000fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000264 	.word	0x20000264
 8000fbc:	200002b8 	.word	0x200002b8

08000fc0 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000fe4 <FusionRadiansToDegrees+0x24>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	42652ee0 	.word	0x42652ee0

08000fe8 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	d802      	bhi.n	800100a <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8001004:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001038 <FusionAsin+0x50>
 8001008:	e011      	b.n	800102e <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	db02      	blt.n	8001022 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 800101c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800103c <FusionAsin+0x54>
 8001020:	e005      	b.n	800102e <FusionAsin+0x46>
    }
    return asinf(value);
 8001022:	ed97 0a01 	vldr	s0, [r7, #4]
 8001026:	f012 fd5b 	bl	8013ae0 <asinf>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	bfc90fdb 	.word	0xbfc90fdb
 800103c:	3fc90fdb 	.word	0x3fc90fdb

08001040 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8001040:	b480      	push	{r7}
 8001042:	b091      	sub	sp, #68	; 0x44
 8001044:	af00      	add	r7, sp, #0
 8001046:	eeb0 5a40 	vmov.f32	s10, s0
 800104a:	eef0 5a60 	vmov.f32	s11, s1
 800104e:	eeb0 6a41 	vmov.f32	s12, s2
 8001052:	eef0 6a61 	vmov.f32	s13, s3
 8001056:	eeb0 7a42 	vmov.f32	s14, s4
 800105a:	eef0 7a62 	vmov.f32	s15, s5
 800105e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001062:	edc7 5a08 	vstr	s11, [r7, #32]
 8001066:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800106a:	edc7 6a04 	vstr	s13, [r7, #16]
 800106e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001072:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8001076:	ed97 7a07 	vldr	s14, [r7, #28]
 800107a:	edd7 7a04 	vldr	s15, [r7, #16]
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001082:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8001086:	ed97 7a08 	vldr	s14, [r7, #32]
 800108a:	edd7 7a05 	vldr	s15, [r7, #20]
 800108e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001092:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8001096:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800109a:	edd7 7a06 	vldr	s15, [r7, #24]
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80010a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ba:	ee06 1a90 	vmov	s13, r1
 80010be:	ee07 2a10 	vmov	s14, r2
 80010c2:	ee07 3a90 	vmov	s15, r3
}
 80010c6:	eeb0 0a66 	vmov.f32	s0, s13
 80010ca:	eef0 0a47 	vmov.f32	s1, s14
 80010ce:	eeb0 1a67 	vmov.f32	s2, s15
 80010d2:	3744      	adds	r7, #68	; 0x44
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80010dc:	b480      	push	{r7}
 80010de:	b08f      	sub	sp, #60	; 0x3c
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	eef0 6a40 	vmov.f32	s13, s0
 80010e6:	eeb0 7a60 	vmov.f32	s14, s1
 80010ea:	eef0 7a41 	vmov.f32	s15, s2
 80010ee:	edc7 1a04 	vstr	s3, [r7, #16]
 80010f2:	edc7 6a05 	vstr	s13, [r7, #20]
 80010f6:	ed87 7a06 	vstr	s14, [r7, #24]
 80010fa:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 80010fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001102:	edd7 7a04 	vldr	s15, [r7, #16]
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800110a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800110e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001112:	edd7 7a04 	vldr	s15, [r7, #16]
 8001116:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800111a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800111e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001122:	edd7 7a04 	vldr	s15, [r7, #16]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800112a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800112e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001132:	f107 0220 	add.w	r2, r7, #32
 8001136:	ca07      	ldmia	r2, {r0, r1, r2}
 8001138:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800113c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800113e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001142:	ee06 1a90 	vmov	s13, r1
 8001146:	ee07 2a10 	vmov	s14, r2
 800114a:	ee07 3a90 	vmov	s15, r3
}
 800114e:	eeb0 0a66 	vmov.f32	s0, s13
 8001152:	eef0 0a47 	vmov.f32	s1, s14
 8001156:	eeb0 1a67 	vmov.f32	s2, s15
 800115a:	373c      	adds	r7, #60	; 0x3c
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001164:	b084      	sub	sp, #16
 8001166:	b480      	push	{r7}
 8001168:	b08f      	sub	sp, #60	; 0x3c
 800116a:	af00      	add	r7, sp, #0
 800116c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8001170:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001174:	eef0 6a40 	vmov.f32	s13, s0
 8001178:	eeb0 7a60 	vmov.f32	s14, s1
 800117c:	eef0 7a41 	vmov.f32	s15, s2
 8001180:	edc7 6a05 	vstr	s13, [r7, #20]
 8001184:	ed87 7a06 	vstr	s14, [r7, #24]
 8001188:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 800118c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001190:	edd7 7a05 	vldr	s15, [r7, #20]
 8001194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001198:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800119c:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80011ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011b8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80011bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80011cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80011dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 80011ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001208:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800120c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001218:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	f107 0220 	add.w	r2, r7, #32
 8001224:	ca07      	ldmia	r2, {r0, r1, r2}
 8001226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800122a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800122c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001230:	ee06 1a90 	vmov	s13, r1
 8001234:	ee07 2a10 	vmov	s14, r2
 8001238:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800123c:	eeb0 0a66 	vmov.f32	s0, s13
 8001240:	eef0 0a47 	vmov.f32	s1, s14
 8001244:	eeb0 1a67 	vmov.f32	s2, s15
 8001248:	373c      	adds	r7, #60	; 0x3c
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	b004      	add	sp, #16
 8001252:	4770      	bx	lr

08001254 <FusionQuaternionToMatrix>:
/**
 * @brief Converts a quaternion to a rotation matrix.
 * @param quaternion Quaternion.
 * @return Rotation matrix.
 */
static inline FusionMatrix FusionQuaternionToMatrix(const FusionQuaternion quaternion) {
 8001254:	b4b0      	push	{r4, r5, r7}
 8001256:	b097      	sub	sp, #92	; 0x5c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6178      	str	r0, [r7, #20]
 800125c:	eeb0 6a40 	vmov.f32	s12, s0
 8001260:	eef0 6a60 	vmov.f32	s13, s1
 8001264:	eeb0 7a41 	vmov.f32	s14, s2
 8001268:	eef0 7a61 	vmov.f32	s15, s3
 800126c:	ed87 6a01 	vstr	s12, [r7, #4]
 8001270:	edc7 6a02 	vstr	s13, [r7, #8]
 8001274:	ed87 7a03 	vstr	s14, [r7, #12]
 8001278:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q quaternion.element
    const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 800127c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001280:	edd7 7a01 	vldr	s15, [r7, #4]
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    const float qwqx = Q.w * Q.x;
 800128c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001290:	edd7 7a02 	vldr	s15, [r7, #8]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    const float qwqy = Q.w * Q.y;
 800129c:	ed97 7a01 	vldr	s14, [r7, #4]
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    const float qwqz = Q.w * Q.z;
 80012ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    const float qxqy = Q.x * Q.y;
 80012bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    const float qxqz = Q.x * Q.z;
 80012cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    const float qyqz = Q.y * Q.z;
 80012dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionMatrix matrix = {.element = {
            .xx = 2.0f * (qwqw - 0.5f + Q.x * Q.x),
 80012ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80012f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80012fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800130c:	edc7 7a06 	vstr	s15, [r7, #24]
            .xy = 2.0f * (qxqy - qwqz),
 8001310:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001314:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001320:	edc7 7a07 	vstr	s15, [r7, #28]
            .xz = 2.0f * (qxqz + qwqy),
 8001324:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001328:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001334:	edc7 7a08 	vstr	s15, [r7, #32]
            .yx = 2.0f * (qxqy + qwqz),
 8001338:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800133c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001348:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .yy = 2.0f * (qwqw - 0.5f + Q.y * Q.y),
 800134c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001350:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001354:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001358:	edd7 6a03 	vldr	s13, [r7, #12]
 800135c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001368:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800136c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yz = 2.0f * (qyqz - qwqx),
 8001370:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001374:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001380:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .zx = 2.0f * (qxqz - qwqy),
 8001384:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001388:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001394:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .zy = 2.0f * (qyqz + qwqx),
 8001398:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800139c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .zz = 2.0f * (qwqw - 0.5f + Q.z * Q.z),
 80013ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80013bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013cc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    }};
    return matrix;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	461d      	mov	r5, r3
 80013d4:	f107 0418 	add.w	r4, r7, #24
 80013d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	602b      	str	r3, [r5, #0]
#undef Q
}
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	375c      	adds	r7, #92	; 0x5c
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bcb0      	pop	{r4, r5, r7}
 80013ec:	4770      	bx	lr

080013ee <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b090      	sub	sp, #64	; 0x40
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	eeb0 6a40 	vmov.f32	s12, s0
 80013f8:	eef0 6a60 	vmov.f32	s13, s1
 80013fc:	eeb0 7a41 	vmov.f32	s14, s2
 8001400:	eef0 7a61 	vmov.f32	s15, s3
 8001404:	ed87 6a04 	vstr	s12, [r7, #16]
 8001408:	edc7 6a05 	vstr	s13, [r7, #20]
 800140c:	ed87 7a06 	vstr	s14, [r7, #24]
 8001410:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8001414:	ed97 7a06 	vldr	s14, [r7, #24]
 8001418:	edd7 7a06 	vldr	s15, [r7, #24]
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001428:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 800142c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001430:	edd7 7a05 	vldr	s15, [r7, #20]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001438:	edd7 6a06 	vldr	s13, [r7, #24]
 800143c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001448:	ed97 7a05 	vldr	s14, [r7, #20]
 800144c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001454:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145c:	eef0 0a67 	vmov.f32	s1, s15
 8001460:	eeb0 0a66 	vmov.f32	s0, s13
 8001464:	f012 fb68 	bl	8013b38 <atan2f>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	f7ff fda6 	bl	8000fc0 <FusionRadiansToDegrees>
 8001474:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001478:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 800147c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001480:	edd7 7a06 	vldr	s15, [r7, #24]
 8001484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001488:	edd7 6a07 	vldr	s13, [r7, #28]
 800148c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001498:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	f7ff fda2 	bl	8000fe8 <FusionAsin>
 80014a4:	eef0 7a40 	vmov.f32	s15, s0
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	f7ff fd88 	bl	8000fc0 <FusionRadiansToDegrees>
 80014b0:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80014b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 80014b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80014bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80014d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80014d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e8:	eef0 0a67 	vmov.f32	s1, s15
 80014ec:	eeb0 0a66 	vmov.f32	s0, s13
 80014f0:	f012 fb22 	bl	8013b38 <atan2f>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	f7ff fd60 	bl	8000fc0 <FusionRadiansToDegrees>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001504:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8001508:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800150c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001510:	ca07      	ldmia	r2, {r0, r1, r2}
 8001512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151c:	ee06 1a90 	vmov	s13, r1
 8001520:	ee07 2a10 	vmov	s14, r2
 8001524:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8001528:	eeb0 0a66 	vmov.f32	s0, s13
 800152c:	eef0 0a47 	vmov.f32	s1, s14
 8001530:	eeb0 1a67 	vmov.f32	s2, s15
 8001534:	3740      	adds	r7, #64	; 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b08e      	sub	sp, #56	; 0x38
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f004 fce5 	bl	8005f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f889 	bl	800165c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f000 fd91 	bl	8002070 <MX_GPIO_Init>
  MX_DMA_Init();
 800154e:	f000 fd6f 	bl	8002030 <MX_DMA_Init>
  MX_TIM2_Init();
 8001552:	f000 faa3 	bl	8001a9c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001556:	f000 fced 	bl	8001f34 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800155a:	f000 f9df 	bl	800191c <MX_I2C1_Init>
  MX_I2C2_Init();
 800155e:	f000 fa0b 	bl	8001978 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001562:	f000 fa37 	bl	80019d4 <MX_I2C3_Init>
  MX_TIM3_Init();
 8001566:	f000 fb09 	bl	8001b7c <MX_TIM3_Init>
  MX_TIM4_Init();
 800156a:	f000 fbb5 	bl	8001cd8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800156e:	f000 fcb7 	bl	8001ee0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001572:	f000 fd09 	bl	8001f88 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001576:	f000 fa5b 	bl	8001a30 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 800157a:	f000 fd2f 	bl	8001fdc <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800157e:	f000 f8d7 	bl	8001730 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001582:	f000 f927 	bl	80017d4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001586:	f000 f977 	bl	8001878 <MX_ADC3_Init>
  MX_TIM6_Init();
 800158a:	f000 fc19 	bl	8001dc0 <MX_TIM6_Init>
  MX_TIM7_Init();
 800158e:	f000 fc4d 	bl	8001e2c <MX_TIM7_Init>
  MX_TIM10_Init();
 8001592:	f000 fc81 	bl	8001e98 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */




  __HAL_SPI_ENABLE(&hspi2);
 8001596:	4b28      	ldr	r3, [pc, #160]	; (8001638 <main+0xfc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b26      	ldr	r3, [pc, #152]	; (8001638 <main+0xfc>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a4:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_1  );
 80015a6:	2100      	movs	r1, #0
 80015a8:	4824      	ldr	r0, [pc, #144]	; (800163c <main+0x100>)
 80015aa:	f008 f9ed 	bl	8009988 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_2  );
 80015ae:	2104      	movs	r1, #4
 80015b0:	4822      	ldr	r0, [pc, #136]	; (800163c <main+0x100>)
 80015b2:	f008 f9e9 	bl	8009988 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_3  );
 80015b6:	2108      	movs	r1, #8
 80015b8:	4820      	ldr	r0, [pc, #128]	; (800163c <main+0x100>)
 80015ba:	f008 f9e5 	bl	8009988 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_4  );
 80015be:	210c      	movs	r1, #12
 80015c0:	481e      	ldr	r0, [pc, #120]	; (800163c <main+0x100>)
 80015c2:	f008 f9e1 	bl	8009988 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start  ( &htim10 );
 80015c6:	481e      	ldr	r0, [pc, #120]	; (8001640 <main+0x104>)
 80015c8:	f008 f8ac 	bl	8009724 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  telemetria_Queue = xQueueCreate( 3, 3*sizeof( float ) );
 80015cc:	2200      	movs	r2, #0
 80015ce:	210c      	movs	r1, #12
 80015d0:	2003      	movs	r0, #3
 80015d2:	f00d fc1b 	bl	800ee0c <xQueueGenericCreate>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <main+0x108>)
 80015da:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 500);
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <main+0x10c>)
 80015de:	f107 041c 	add.w	r4, r7, #28
 80015e2:	461d      	mov	r5, r3
 80015e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00d fa8b 	bl	800eb12 <osThreadCreate>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a13      	ldr	r2, [pc, #76]	; (800164c <main+0x110>)
 8001600:	6013      	str	r3, [r2, #0]

  /* definition and creation of Control */
  osThreadDef(Control, Start_Control, osPriorityNormal, 0, 600);
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <main+0x114>)
 8001604:	463c      	mov	r4, r7
 8001606:	461d      	mov	r5, r3
 8001608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlHandle = osThreadCreate(osThread(Control), NULL);
 8001614:	463b      	mov	r3, r7
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f00d fa7a 	bl	800eb12 <osThreadCreate>
 800161e:	4603      	mov	r3, r0
 8001620:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <main+0x118>)
 8001622:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001624:	f00d fa6e 	bl	800eb04 <osKernelStart>

  while (1)
  {


	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001628:	2108      	movs	r1, #8
 800162a:	480b      	ldr	r0, [pc, #44]	; (8001658 <main+0x11c>)
 800162c:	f005 fe31 	bl	8007292 <HAL_GPIO_TogglePin>

	  HAL_Delay(3);
 8001630:	2003      	movs	r0, #3
 8001632:	f004 fcdf 	bl	8005ff4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001636:	e7f7      	b.n	8001628 <main+0xec>
 8001638:	2000068c 	.word	0x2000068c
 800163c:	2000072c 	.word	0x2000072c
 8001640:	2000084c 	.word	0x2000084c
 8001644:	20000c98 	.word	0x20000c98
 8001648:	08015e5c 	.word	0x08015e5c
 800164c:	20000a04 	.word	0x20000a04
 8001650:	08015e78 	.word	0x08015e78
 8001654:	20000a08 	.word	0x20000a08
 8001658:	40020400 	.word	0x40020400

0800165c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b094      	sub	sp, #80	; 0x50
 8001660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001662:	f107 0320 	add.w	r3, r7, #32
 8001666:	2230      	movs	r2, #48	; 0x30
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f00f faa6 	bl	8010bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	4b28      	ldr	r3, [pc, #160]	; (8001728 <SystemClock_Config+0xcc>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <SystemClock_Config+0xcc>)
 800168a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168e:	6413      	str	r3, [r2, #64]	; 0x40
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <SystemClock_Config+0xcc>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <SystemClock_Config+0xd0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a21      	ldr	r2, [pc, #132]	; (800172c <SystemClock_Config+0xd0>)
 80016a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <SystemClock_Config+0xd0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b8:	2301      	movs	r3, #1
 80016ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c2:	2302      	movs	r3, #2
 80016c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016cc:	2304      	movs	r3, #4
 80016ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016d0:	23a8      	movs	r3, #168	; 0xa8
 80016d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016d8:	2304      	movs	r3, #4
 80016da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016dc:	f107 0320 	add.w	r3, r7, #32
 80016e0:	4618      	mov	r0, r3
 80016e2:	f006 fef7 	bl	80084d4 <HAL_RCC_OscConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016ec:	f002 f94c 	bl	8003988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f0:	230f      	movs	r3, #15
 80016f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f4:	2302      	movs	r3, #2
 80016f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2105      	movs	r1, #5
 800170e:	4618      	mov	r0, r3
 8001710:	f007 f958 	bl	80089c4 <HAL_RCC_ClockConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800171a:	f002 f935 	bl	8003988 <Error_Handler>
  }
}
 800171e:	bf00      	nop
 8001720:	3750      	adds	r7, #80	; 0x50
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000

08001730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001736:	463b      	mov	r3, r7
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <MX_ADC1_Init+0x9c>)
 8001746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <MX_ADC1_Init+0x98>)
 800174a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800174e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_ADC1_Init+0x98>)
 800175e:	2200      	movs	r2, #0
 8001760:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_ADC1_Init+0x98>)
 800176c:	2200      	movs	r2, #0
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <MX_ADC1_Init+0xa0>)
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_ADC1_Init+0x98>)
 800177e:	2201      	movs	r2, #1
 8001780:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_ADC1_Init+0x98>)
 800178c:	2201      	movs	r2, #1
 800178e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001790:	480d      	ldr	r0, [pc, #52]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001792:	f004 fc53 	bl	800603c <HAL_ADC_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800179c:	f002 f8f4 	bl	8003988 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017a0:	2305      	movs	r3, #5
 80017a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_ADC1_Init+0x98>)
 80017b2:	f004 fc87 	bl	80060c4 <HAL_ADC_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017bc:	f002 f8e4 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200004b8 	.word	0x200004b8
 80017cc:	40012000 	.word	0x40012000
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017da:	463b      	mov	r3, r7
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <MX_ADC2_Init+0x98>)
 80017e8:	4a21      	ldr	r2, [pc, #132]	; (8001870 <MX_ADC2_Init+0x9c>)
 80017ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <MX_ADC2_Init+0x98>)
 80017ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <MX_ADC2_Init+0x98>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <MX_ADC2_Init+0x98>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <MX_ADC2_Init+0x98>)
 8001802:	2200      	movs	r2, #0
 8001804:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <MX_ADC2_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <MX_ADC2_Init+0x98>)
 8001810:	2200      	movs	r2, #0
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <MX_ADC2_Init+0x98>)
 8001816:	4a17      	ldr	r2, [pc, #92]	; (8001874 <MX_ADC2_Init+0xa0>)
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800181a:	4b14      	ldr	r3, [pc, #80]	; (800186c <MX_ADC2_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <MX_ADC2_Init+0x98>)
 8001822:	2201      	movs	r2, #1
 8001824:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_ADC2_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_ADC2_Init+0x98>)
 8001830:	2201      	movs	r2, #1
 8001832:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <MX_ADC2_Init+0x98>)
 8001836:	f004 fc01 	bl	800603c <HAL_ADC_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001840:	f002 f8a2 	bl	8003988 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001844:	2304      	movs	r3, #4
 8001846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001848:	2301      	movs	r3, #1
 800184a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_ADC2_Init+0x98>)
 8001856:	f004 fc35 	bl	80060c4 <HAL_ADC_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001860:	f002 f892 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000500 	.word	0x20000500
 8001870:	40012100 	.word	0x40012100
 8001874:	0f000001 	.word	0x0f000001

08001878 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800187e:	463b      	mov	r3, r7
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800188a:	4b21      	ldr	r3, [pc, #132]	; (8001910 <MX_ADC3_Init+0x98>)
 800188c:	4a21      	ldr	r2, [pc, #132]	; (8001914 <MX_ADC3_Init+0x9c>)
 800188e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001890:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <MX_ADC3_Init+0x98>)
 8001892:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001896:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <MX_ADC3_Init+0x98>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <MX_ADC3_Init+0x98>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_ADC3_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <MX_ADC3_Init+0x98>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <MX_ADC3_Init+0x98>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MX_ADC3_Init+0x98>)
 80018ba:	4a17      	ldr	r2, [pc, #92]	; (8001918 <MX_ADC3_Init+0xa0>)
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_ADC3_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_ADC3_Init+0x98>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_ADC3_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_ADC3_Init+0x98>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <MX_ADC3_Init+0x98>)
 80018da:	f004 fbaf 	bl	800603c <HAL_ADC_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80018e4:	f002 f850 	bl	8003988 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80018e8:	230d      	movs	r3, #13
 80018ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018f4:	463b      	mov	r3, r7
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_ADC3_Init+0x98>)
 80018fa:	f004 fbe3 	bl	80060c4 <HAL_ADC_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001904:	f002 f840 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000548 	.word	0x20000548
 8001914:	40012200 	.word	0x40012200
 8001918:	0f000001 	.word	0x0f000001

0800191c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <MX_I2C1_Init+0x50>)
 8001922:	4a13      	ldr	r2, [pc, #76]	; (8001970 <MX_I2C1_Init+0x54>)
 8001924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_I2C1_Init+0x50>)
 8001928:	4a12      	ldr	r2, [pc, #72]	; (8001974 <MX_I2C1_Init+0x58>)
 800192a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_I2C1_Init+0x50>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_I2C1_Init+0x50>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_I2C1_Init+0x50>)
 800193a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800193e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <MX_I2C1_Init+0x50>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_I2C1_Init+0x50>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <MX_I2C1_Init+0x50>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_I2C1_Init+0x50>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <MX_I2C1_Init+0x50>)
 800195a:	f005 fccd 	bl	80072f8 <HAL_I2C_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001964:	f002 f810 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000590 	.word	0x20000590
 8001970:	40005400 	.word	0x40005400
 8001974:	00061a80 	.word	0x00061a80

08001978 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <MX_I2C2_Init+0x50>)
 800197e:	4a13      	ldr	r2, [pc, #76]	; (80019cc <MX_I2C2_Init+0x54>)
 8001980:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_I2C2_Init+0x50>)
 8001984:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <MX_I2C2_Init+0x58>)
 8001986:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_I2C2_Init+0x50>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_I2C2_Init+0x50>)
 8001990:	2200      	movs	r2, #0
 8001992:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_I2C2_Init+0x50>)
 8001996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800199a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <MX_I2C2_Init+0x50>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_I2C2_Init+0x50>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <MX_I2C2_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_I2C2_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019b4:	4804      	ldr	r0, [pc, #16]	; (80019c8 <MX_I2C2_Init+0x50>)
 80019b6:	f005 fc9f 	bl	80072f8 <HAL_I2C_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019c0:	f001 ffe2 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200005e4 	.word	0x200005e4
 80019cc:	40005800 	.word	0x40005800
 80019d0:	00061a80 	.word	0x00061a80

080019d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_I2C3_Init+0x50>)
 80019da:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <MX_I2C3_Init+0x54>)
 80019dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_I2C3_Init+0x50>)
 80019e0:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <MX_I2C3_Init+0x58>)
 80019e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_I2C3_Init+0x50>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_I2C3_Init+0x50>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_I2C3_Init+0x50>)
 80019f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <MX_I2C3_Init+0x50>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_I2C3_Init+0x50>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <MX_I2C3_Init+0x50>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_I2C3_Init+0x50>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a10:	4804      	ldr	r0, [pc, #16]	; (8001a24 <MX_I2C3_Init+0x50>)
 8001a12:	f005 fc71 	bl	80072f8 <HAL_I2C_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a1c:	f001 ffb4 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000638 	.word	0x20000638
 8001a28:	40005c00 	.word	0x40005c00
 8001a2c:	00061a80 	.word	0x00061a80

08001a30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <MX_SPI2_Init+0x64>)
 8001a36:	4a18      	ldr	r2, [pc, #96]	; (8001a98 <MX_SPI2_Init+0x68>)
 8001a38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <MX_SPI2_Init+0x64>)
 8001a3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <MX_SPI2_Init+0x64>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <MX_SPI2_Init+0x64>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_SPI2_Init+0x64>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <MX_SPI2_Init+0x64>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_SPI2_Init+0x64>)
 8001a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_SPI2_Init+0x64>)
 8001a64:	2220      	movs	r2, #32
 8001a66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <MX_SPI2_Init+0x64>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_SPI2_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a74:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <MX_SPI2_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_SPI2_Init+0x64>)
 8001a7c:	220a      	movs	r2, #10
 8001a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a80:	4804      	ldr	r0, [pc, #16]	; (8001a94 <MX_SPI2_Init+0x64>)
 8001a82:	f007 f9bf 	bl	8008e04 <HAL_SPI_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a8c:	f001 ff7c 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2000068c 	.word	0x2000068c
 8001a98:	40003800 	.word	0x40003800

08001a9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa2:	f107 0318 	add.w	r3, r7, #24
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001aba:	463b      	mov	r3, r7
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ac6:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <MX_TIM2_Init+0xdc>)
 8001ac8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001acc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001ace:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <MX_TIM2_Init+0xdc>)
 8001ad0:	2253      	movs	r2, #83	; 0x53
 8001ad2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <MX_TIM2_Init+0xdc>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001ada:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <MX_TIM2_Init+0xdc>)
 8001adc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ae0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae2:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <MX_TIM2_Init+0xdc>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <MX_TIM2_Init+0xdc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aee:	4822      	ldr	r0, [pc, #136]	; (8001b78 <MX_TIM2_Init+0xdc>)
 8001af0:	f007 fdc8 	bl	8009684 <HAL_TIM_Base_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001afa:	f001 ff45 	bl	8003988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b02:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b04:	f107 0318 	add.w	r3, r7, #24
 8001b08:	4619      	mov	r1, r3
 8001b0a:	481b      	ldr	r0, [pc, #108]	; (8001b78 <MX_TIM2_Init+0xdc>)
 8001b0c:	f008 fac4 	bl	800a098 <HAL_TIM_ConfigClockSource>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b16:	f001 ff37 	bl	8003988 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b1a:	4817      	ldr	r0, [pc, #92]	; (8001b78 <MX_TIM2_Init+0xdc>)
 8001b1c:	f007 fffc 	bl	8009b18 <HAL_TIM_IC_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b26:	f001 ff2f 	bl	8003988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	4619      	mov	r1, r3
 8001b38:	480f      	ldr	r0, [pc, #60]	; (8001b78 <MX_TIM2_Init+0xdc>)
 8001b3a:	f009 f8e5 	bl	800ad08 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001b44:	f001 ff20 	bl	8003988 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b58:	463b      	mov	r3, r7
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4806      	ldr	r0, [pc, #24]	; (8001b78 <MX_TIM2_Init+0xdc>)
 8001b60:	f008 f93b 	bl	8009dda <HAL_TIM_IC_ConfigChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001b6a:	f001 ff0d 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	3728      	adds	r7, #40	; 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200006e4 	.word	0x200006e4

08001b7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b092      	sub	sp, #72	; 0x48
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001baa:	463b      	mov	r3, r7
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
 8001bb8:	615a      	str	r2, [r3, #20]
 8001bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bbc:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001bbe:	4a45      	ldr	r2, [pc, #276]	; (8001cd4 <MX_TIM3_Init+0x158>)
 8001bc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7-1;
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001bc4:	2206      	movs	r2, #6
 8001bc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc8:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001bce:	4b40      	ldr	r3, [pc, #256]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001bd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd6:	4b3e      	ldr	r3, [pc, #248]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bdc:	4b3c      	ldr	r3, [pc, #240]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001be2:	483b      	ldr	r0, [pc, #236]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001be4:	f007 fd4e 	bl	8009684 <HAL_TIM_Base_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001bee:	f001 fecb 	bl	8003988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bf8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4834      	ldr	r0, [pc, #208]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001c00:	f008 fa4a 	bl	800a098 <HAL_TIM_ConfigClockSource>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c0a:	f001 febd 	bl	8003988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c0e:	4830      	ldr	r0, [pc, #192]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001c10:	f007 fe60 	bl	80098d4 <HAL_TIM_PWM_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001c1a:	f001 feb5 	bl	8003988 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001c22:	2330      	movs	r3, #48	; 0x30
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4828      	ldr	r0, [pc, #160]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001c2e:	f008 fafa 	bl	800a226 <HAL_TIM_SlaveConfigSynchro>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001c38:	f001 fea6 	bl	8003988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4821      	ldr	r0, [pc, #132]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001c4c:	f009 f85c 	bl	800ad08 <HAL_TIMEx_MasterConfigSynchronization>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c56:	f001 fe97 	bl	8003988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5a:	2360      	movs	r3, #96	; 0x60
 8001c5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4817      	ldr	r0, [pc, #92]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001c72:	f008 f94f 	bl	8009f14 <HAL_TIM_PWM_ConfigChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001c7c:	f001 fe84 	bl	8003988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c80:	463b      	mov	r3, r7
 8001c82:	2204      	movs	r2, #4
 8001c84:	4619      	mov	r1, r3
 8001c86:	4812      	ldr	r0, [pc, #72]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001c88:	f008 f944 	bl	8009f14 <HAL_TIM_PWM_ConfigChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001c92:	f001 fe79 	bl	8003988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c96:	463b      	mov	r3, r7
 8001c98:	2208      	movs	r2, #8
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001c9e:	f008 f939 	bl	8009f14 <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8001ca8:	f001 fe6e 	bl	8003988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cac:	463b      	mov	r3, r7
 8001cae:	220c      	movs	r2, #12
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4807      	ldr	r0, [pc, #28]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001cb4:	f008 f92e 	bl	8009f14 <HAL_TIM_PWM_ConfigChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8001cbe:	f001 fe63 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cc2:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <MX_TIM3_Init+0x154>)
 8001cc4:	f002 f922 	bl	8003f0c <HAL_TIM_MspPostInit>

}
 8001cc8:	bf00      	nop
 8001cca:	3748      	adds	r7, #72	; 0x48
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	2000072c 	.word	0x2000072c
 8001cd4:	40000400 	.word	0x40000400

08001cd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08e      	sub	sp, #56	; 0x38
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cec:	f107 0320 	add.w	r3, r7, #32
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
 8001d04:	615a      	str	r2, [r3, #20]
 8001d06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <MX_TIM4_Init+0xe0>)
 8001d0a:	4a2c      	ldr	r2, [pc, #176]	; (8001dbc <MX_TIM4_Init+0xe4>)
 8001d0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <MX_TIM4_Init+0xe0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <MX_TIM4_Init+0xe0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d1a:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <MX_TIM4_Init+0xe0>)
 8001d1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d22:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <MX_TIM4_Init+0xe0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <MX_TIM4_Init+0xe0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d2e:	4822      	ldr	r0, [pc, #136]	; (8001db8 <MX_TIM4_Init+0xe0>)
 8001d30:	f007 fca8 	bl	8009684 <HAL_TIM_Base_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d3a:	f001 fe25 	bl	8003988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d48:	4619      	mov	r1, r3
 8001d4a:	481b      	ldr	r0, [pc, #108]	; (8001db8 <MX_TIM4_Init+0xe0>)
 8001d4c:	f008 f9a4 	bl	800a098 <HAL_TIM_ConfigClockSource>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d56:	f001 fe17 	bl	8003988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d5a:	4817      	ldr	r0, [pc, #92]	; (8001db8 <MX_TIM4_Init+0xe0>)
 8001d5c:	f007 fdba 	bl	80098d4 <HAL_TIM_PWM_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d66:	f001 fe0f 	bl	8003988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d72:	f107 0320 	add.w	r3, r7, #32
 8001d76:	4619      	mov	r1, r3
 8001d78:	480f      	ldr	r0, [pc, #60]	; (8001db8 <MX_TIM4_Init+0xe0>)
 8001d7a:	f008 ffc5 	bl	800ad08 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001d84:	f001 fe00 	bl	8003988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d88:	2360      	movs	r3, #96	; 0x60
 8001d8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	; (8001db8 <MX_TIM4_Init+0xe0>)
 8001da0:	f008 f8b8 	bl	8009f14 <HAL_TIM_PWM_ConfigChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001daa:	f001 fded 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	3738      	adds	r7, #56	; 0x38
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000774 	.word	0x20000774
 8001dbc:	40000800 	.word	0x40000800

08001dc0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc6:	463b      	mov	r3, r7
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001dd0:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <MX_TIM6_Init+0x68>)
 8001dd2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001dd6:	2253      	movs	r2, #83	; 0x53
 8001dd8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65000;
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001de2:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001de6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001dee:	480d      	ldr	r0, [pc, #52]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001df0:	f007 fc48 	bl	8009684 <HAL_TIM_Base_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001dfa:	f001 fdc5 	bl	8003988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e06:	463b      	mov	r3, r7
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4806      	ldr	r0, [pc, #24]	; (8001e24 <MX_TIM6_Init+0x64>)
 8001e0c:	f008 ff7c 	bl	800ad08 <HAL_TIMEx_MasterConfigSynchronization>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e16:	f001 fdb7 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200007bc 	.word	0x200007bc
 8001e28:	40001000 	.word	0x40001000

08001e2c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e32:	463b      	mov	r3, r7
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <MX_TIM7_Init+0x64>)
 8001e3c:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <MX_TIM7_Init+0x68>)
 8001e3e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 85-1;
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <MX_TIM7_Init+0x64>)
 8001e42:	2254      	movs	r2, #84	; 0x54
 8001e44:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <MX_TIM7_Init+0x64>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001e4c:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <MX_TIM7_Init+0x64>)
 8001e4e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e52:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_TIM7_Init+0x64>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e5a:	480d      	ldr	r0, [pc, #52]	; (8001e90 <MX_TIM7_Init+0x64>)
 8001e5c:	f007 fc12 	bl	8009684 <HAL_TIM_Base_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001e66:	f001 fd8f 	bl	8003988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e72:	463b      	mov	r3, r7
 8001e74:	4619      	mov	r1, r3
 8001e76:	4806      	ldr	r0, [pc, #24]	; (8001e90 <MX_TIM7_Init+0x64>)
 8001e78:	f008 ff46 	bl	800ad08 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001e82:	f001 fd81 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000804 	.word	0x20000804
 8001e94:	40001400 	.word	0x40001400

08001e98 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <MX_TIM10_Init+0x40>)
 8001e9e:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <MX_TIM10_Init+0x44>)
 8001ea0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <MX_TIM10_Init+0x40>)
 8001ea4:	22a7      	movs	r2, #167	; 0xa7
 8001ea6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <MX_TIM10_Init+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <MX_TIM10_Init+0x40>)
 8001eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <MX_TIM10_Init+0x40>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <MX_TIM10_Init+0x40>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <MX_TIM10_Init+0x40>)
 8001ec4:	f007 fbde 	bl	8009684 <HAL_TIM_Base_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001ece:	f001 fd5b 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000084c 	.word	0x2000084c
 8001edc:	40014400 	.word	0x40014400

08001ee0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <MX_USART1_UART_Init+0x48>)
 8001ee6:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <MX_USART1_UART_Init+0x4c>)
 8001ee8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 420000;
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <MX_USART1_UART_Init+0x48>)
 8001eec:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <MX_USART1_UART_Init+0x50>)
 8001eee:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <MX_USART1_UART_Init+0x48>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <MX_USART1_UART_Init+0x48>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <MX_USART1_UART_Init+0x48>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <MX_USART1_UART_Init+0x48>)
 8001f04:	220c      	movs	r2, #12
 8001f06:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <MX_USART1_UART_Init+0x48>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <MX_USART1_UART_Init+0x48>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <MX_USART1_UART_Init+0x48>)
 8001f16:	f008 ff87 	bl	800ae28 <HAL_UART_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001f20:	f001 fd32 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000894 	.word	0x20000894
 8001f2c:	40011000 	.word	0x40011000
 8001f30:	000668a0 	.word	0x000668a0

08001f34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <MX_USART2_UART_Init+0x50>)
 8001f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f6c:	f008 ff5c 	bl	800ae28 <HAL_UART_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f76:	f001 fd07 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200008d8 	.word	0x200008d8
 8001f84:	40004400 	.word	0x40004400

08001f88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <MX_USART3_UART_Init+0x50>)
 8001f90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001fae:	220c      	movs	r2, #12
 8001fb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001fc0:	f008 ff32 	bl	800ae28 <HAL_UART_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fca:	f001 fcdd 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000091c 	.word	0x2000091c
 8001fd8:	40004800 	.word	0x40004800

08001fdc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <MX_USART6_UART_Init+0x4c>)
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <MX_USART6_UART_Init+0x50>)
 8001fe4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <MX_USART6_UART_Init+0x4c>)
 8001fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <MX_USART6_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <MX_USART6_UART_Init+0x4c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <MX_USART6_UART_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <MX_USART6_UART_Init+0x4c>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <MX_USART6_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <MX_USART6_UART_Init+0x4c>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <MX_USART6_UART_Init+0x4c>)
 8002014:	f008 ff08 	bl	800ae28 <HAL_UART_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800201e:	f001 fcb3 	bl	8003988 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000960 	.word	0x20000960
 800202c:	40011400 	.word	0x40011400

08002030 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <MX_DMA_Init+0x3c>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a0b      	ldr	r2, [pc, #44]	; (800206c <MX_DMA_Init+0x3c>)
 8002040:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <MX_DMA_Init+0x3c>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2105      	movs	r1, #5
 8002056:	203a      	movs	r0, #58	; 0x3a
 8002058:	f004 fb2d 	bl	80066b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800205c:	203a      	movs	r0, #58	; 0x3a
 800205e:	f004 fb46 	bl	80066ee <HAL_NVIC_EnableIRQ>

}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800

08002070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
 8002084:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b6d      	ldr	r3, [pc, #436]	; (8002240 <MX_GPIO_Init+0x1d0>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a6c      	ldr	r2, [pc, #432]	; (8002240 <MX_GPIO_Init+0x1d0>)
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b6a      	ldr	r3, [pc, #424]	; (8002240 <MX_GPIO_Init+0x1d0>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b66      	ldr	r3, [pc, #408]	; (8002240 <MX_GPIO_Init+0x1d0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a65      	ldr	r2, [pc, #404]	; (8002240 <MX_GPIO_Init+0x1d0>)
 80020ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b63      	ldr	r3, [pc, #396]	; (8002240 <MX_GPIO_Init+0x1d0>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	4b5f      	ldr	r3, [pc, #380]	; (8002240 <MX_GPIO_Init+0x1d0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a5e      	ldr	r2, [pc, #376]	; (8002240 <MX_GPIO_Init+0x1d0>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b5c      	ldr	r3, [pc, #368]	; (8002240 <MX_GPIO_Init+0x1d0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	4b58      	ldr	r3, [pc, #352]	; (8002240 <MX_GPIO_Init+0x1d0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a57      	ldr	r2, [pc, #348]	; (8002240 <MX_GPIO_Init+0x1d0>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b55      	ldr	r3, [pc, #340]	; (8002240 <MX_GPIO_Init+0x1d0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	4b51      	ldr	r3, [pc, #324]	; (8002240 <MX_GPIO_Init+0x1d0>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a50      	ldr	r2, [pc, #320]	; (8002240 <MX_GPIO_Init+0x1d0>)
 8002100:	f043 0308 	orr.w	r3, r3, #8
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b4e      	ldr	r3, [pc, #312]	; (8002240 <MX_GPIO_Init+0x1d0>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|GNSS_RST_Pin, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	f248 0102 	movw	r1, #32770	; 0x8002
 8002118:	484a      	ldr	r0, [pc, #296]	; (8002244 <MX_GPIO_Init+0x1d4>)
 800211a:	f005 f8a1 	bl	8007260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	f241 0118 	movw	r1, #4120	; 0x1018
 8002124:	4848      	ldr	r0, [pc, #288]	; (8002248 <MX_GPIO_Init+0x1d8>)
 8002126:	f005 f89b 	bl	8007260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_RESET);
 800212a:	2200      	movs	r2, #0
 800212c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002130:	4846      	ldr	r0, [pc, #280]	; (800224c <MX_GPIO_Init+0x1dc>)
 8002132:	f005 f895 	bl	8007260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002136:	2200      	movs	r2, #0
 8002138:	2104      	movs	r1, #4
 800213a:	4845      	ldr	r0, [pc, #276]	; (8002250 <MX_GPIO_Init+0x1e0>)
 800213c:	f005 f890 	bl	8007260 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IT_MAGN_Pin BUTTON_Pin */
  GPIO_InitStruct.Pin = IT_MAGN_Pin|BUTTON_Pin;
 8002140:	f242 0301 	movw	r3, #8193	; 0x2001
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002146:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800214a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	483d      	ldr	r0, [pc, #244]	; (800224c <MX_GPIO_Init+0x1dc>)
 8002158:	f004 fee6 	bl	8006f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin GNSS_RST_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|GNSS_RST_Pin;
 800215c:	f248 0302 	movw	r3, #32770	; 0x8002
 8002160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002162:	2301      	movs	r3, #1
 8002164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	4619      	mov	r1, r3
 8002174:	4833      	ldr	r0, [pc, #204]	; (8002244 <MX_GPIO_Init+0x1d4>)
 8002176:	f004 fed7 	bl	8006f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : IT_PRESS_Pin */
  GPIO_InitStruct.Pin = IT_PRESS_Pin;
 800217a:	2304      	movs	r3, #4
 800217c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800217e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002182:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IT_PRESS_GPIO_Port, &GPIO_InitStruct);
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	4619      	mov	r1, r3
 800218e:	482e      	ldr	r0, [pc, #184]	; (8002248 <MX_GPIO_Init+0x1d8>)
 8002190:	f004 feca 	bl	8006f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_GYRO_Pin PB3 PB4 */
  GPIO_InitStruct.Pin = CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4;
 8002194:	f241 0318 	movw	r3, #4120	; 0x1018
 8002198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219a:	2301      	movs	r3, #1
 800219c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	4826      	ldr	r0, [pc, #152]	; (8002248 <MX_GPIO_Init+0x1d8>)
 80021ae:	f004 febb 	bl	8006f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_ACC_Pin */
  GPIO_InitStruct.Pin = CS_ACC_Pin;
 80021b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_ACC_GPIO_Port, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	4820      	ldr	r0, [pc, #128]	; (800224c <MX_GPIO_Init+0x1dc>)
 80021cc:	f004 feac 	bl	8006f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : IT_GYRO_Pin IT_ACC_Pin */
  GPIO_InitStruct.Pin = IT_GYRO_Pin|IT_ACC_Pin;
 80021d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4619      	mov	r1, r3
 80021e6:	4817      	ldr	r0, [pc, #92]	; (8002244 <MX_GPIO_Init+0x1d4>)
 80021e8:	f004 fe9e 	bl	8006f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021ec:	2304      	movs	r3, #4
 80021ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f0:	2301      	movs	r3, #1
 80021f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	2300      	movs	r3, #0
 80021fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	4619      	mov	r1, r3
 8002202:	4813      	ldr	r0, [pc, #76]	; (8002250 <MX_GPIO_Init+0x1e0>)
 8002204:	f004 fe90 	bl	8006f28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2105      	movs	r1, #5
 800220c:	2006      	movs	r0, #6
 800220e:	f004 fa52 	bl	80066b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002212:	2006      	movs	r0, #6
 8002214:	f004 fa6b 	bl	80066ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002218:	2200      	movs	r2, #0
 800221a:	2105      	movs	r1, #5
 800221c:	2008      	movs	r0, #8
 800221e:	f004 fa4a 	bl	80066b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002222:	2008      	movs	r0, #8
 8002224:	f004 fa63 	bl	80066ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2105      	movs	r1, #5
 800222c:	2028      	movs	r0, #40	; 0x28
 800222e:	f004 fa42 	bl	80066b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002232:	2028      	movs	r0, #40	; 0x28
 8002234:	f004 fa5b 	bl	80066ee <HAL_NVIC_EnableIRQ>

}
 8002238:	bf00      	nop
 800223a:	3728      	adds	r7, #40	; 0x28
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800
 8002244:	40020000 	.word	0x40020000
 8002248:	40020400 	.word	0x40020400
 800224c:	40020800 	.word	0x40020800
 8002250:	40020c00 	.word	0x40020c00

08002254 <set_config>:

/* USER CODE BEGIN 4 */
static int8_t set_config(struct bmm150_dev *dev) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    struct bmm150_settings settings;

    /* Set powermode as normal mode */
    settings.pwr_mode = BMM150_POWERMODE_NORMAL;
 800225c:	2300      	movs	r3, #0
 800225e:	737b      	strb	r3, [r7, #13]
    rslt = bmm150_set_op_mode(&settings, dev);
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4618      	mov	r0, r3
 8002268:	f00b fbe0 	bl	800da2c <bmm150_set_op_mode>
 800226c:	4603      	mov	r3, r0
 800226e:	77fb      	strb	r3, [r7, #31]
    bmm150_error_codes_print_result("bmm150_set_op_mode", rslt);
 8002270:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002274:	4619      	mov	r1, r3
 8002276:	481d      	ldr	r0, [pc, #116]	; (80022ec <set_config+0x98>)
 8002278:	f00c fc08 	bl	800ea8c <bmm150_error_codes_print_result>

    if (rslt == BMM150_OK) {
 800227c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d12d      	bne.n	80022e0 <set_config+0x8c>
        /* Setting the preset mode as Low power mode
         * i.e. data rate = 10Hz, XY-rep = 1, Z-rep = 2
         */
        settings.preset_mode = BMM150_PRESETMODE_FORCED200;//BMM150_PRESETMODE_HIGHACCURACY;                  // TODO Change it to the desired preset
 8002284:	2305      	movs	r3, #5
 8002286:	747b      	strb	r3, [r7, #17]
        rslt = bmm150_set_presetmode(&settings, dev);
 8002288:	f107 030c 	add.w	r3, r7, #12
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4618      	mov	r0, r3
 8002290:	f00b fc38 	bl	800db04 <bmm150_set_presetmode>
 8002294:	4603      	mov	r3, r0
 8002296:	77fb      	strb	r3, [r7, #31]
        settings.data_rate = BMM150_DATA_RATE_30HZ;                             // TODO Change it to the desired ODR
 8002298:	2307      	movs	r3, #7
 800229a:	73bb      	strb	r3, [r7, #14]
        bmm150_set_sensor_settings(BMM150_SEL_DATA_RATE, &settings, dev);
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	4619      	mov	r1, r3
 80022a4:	2001      	movs	r0, #1
 80022a6:	f00b fca9 	bl	800dbfc <bmm150_set_sensor_settings>
        bmm150_error_codes_print_result("bmm150_set_presetmode", rslt);
 80022aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022ae:	4619      	mov	r1, r3
 80022b0:	480f      	ldr	r0, [pc, #60]	; (80022f0 <set_config+0x9c>)
 80022b2:	f00c fbeb 	bl	800ea8c <bmm150_error_codes_print_result>

        if (rslt == BMM150_OK) {
 80022b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d110      	bne.n	80022e0 <set_config+0x8c>
            /* Map the data interrupt pin */
            settings.int_settings.drdy_pin_en = 0x01;
 80022be:	2301      	movs	r3, #1
 80022c0:	74bb      	strb	r3, [r7, #18]
            rslt = bmm150_set_sensor_settings(BMM150_SEL_DRDY_PIN_EN, &settings, dev);
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4619      	mov	r1, r3
 80022ca:	2010      	movs	r0, #16
 80022cc:	f00b fc96 	bl	800dbfc <bmm150_set_sensor_settings>
 80022d0:	4603      	mov	r3, r0
 80022d2:	77fb      	strb	r3, [r7, #31]
            bmm150_error_codes_print_result("bmm150_set_sensor_settings", rslt);
 80022d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022d8:	4619      	mov	r1, r3
 80022da:	4806      	ldr	r0, [pc, #24]	; (80022f4 <set_config+0xa0>)
 80022dc:	f00c fbd6 	bl	800ea8c <bmm150_error_codes_print_result>
        }
    }

    return rslt;
 80022e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	08015e94 	.word	0x08015e94
 80022f0:	08015ea8 	.word	0x08015ea8
 80022f4:	08015ec0 	.word	0x08015ec0

080022f8 <HAL_GPIO_EXTI_Callback>:

    return reversed;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin) {
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d11c      	bne.n	8002342 <HAL_GPIO_EXTI_Callback+0x4a>
		if(state == 4){state = 5;}
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <HAL_GPIO_EXTI_Callback+0x7c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b04      	cmp	r3, #4
 800230e:	d102      	bne.n	8002316 <HAL_GPIO_EXTI_Callback+0x1e>
 8002310:	4b18      	ldr	r3, [pc, #96]	; (8002374 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002312:	2205      	movs	r2, #5
 8002314:	701a      	strb	r2, [r3, #0]
		if(state == 3){state = 4;}
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d102      	bne.n	8002324 <HAL_GPIO_EXTI_Callback+0x2c>
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002320:	2204      	movs	r2, #4
 8002322:	701a      	strb	r2, [r3, #0]
		if(state == 2){state = 3;}
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d102      	bne.n	8002332 <HAL_GPIO_EXTI_Callback+0x3a>
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_GPIO_EXTI_Callback+0x7c>)
 800232e:	2203      	movs	r2, #3
 8002330:	701a      	strb	r2, [r3, #0]
		if(state == 1){state = 2;}
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d104      	bne.n	8002344 <HAL_GPIO_EXTI_Callback+0x4c>
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_GPIO_EXTI_Callback+0x7c>)
 800233c:	2202      	movs	r2, #2
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	e000      	b.n	8002344 <HAL_GPIO_EXTI_Callback+0x4c>
	  } else {
	      __NOP();
 8002342:	bf00      	nop
	  }

	if(GPIO_Pin == IT_ACC_Pin) {
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234a:	d103      	bne.n	8002354 <HAL_GPIO_EXTI_Callback+0x5c>

	 readstart = 1;
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_GPIO_EXTI_Callback+0x80>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e000      	b.n	8002356 <HAL_GPIO_EXTI_Callback+0x5e>
  } else {
      __NOP();
 8002354:	bf00      	nop
  }
  if(GPIO_Pin == IT_MAGN_Pin) {
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800235c:	d103      	bne.n	8002366 <HAL_GPIO_EXTI_Callback+0x6e>
  	 //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

  	 billent = 1;
 800235e:	4b07      	ldr	r3, [pc, #28]	; (800237c <HAL_GPIO_EXTI_Callback+0x84>)
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
    } else {
        __NOP();
    }
}
 8002364:	e000      	b.n	8002368 <HAL_GPIO_EXTI_Callback+0x70>
        __NOP();
 8002366:	bf00      	nop
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	20000009 	.word	0x20000009
 8002378:	20000008 	.word	0x20000008
 800237c:	20000a9c 	.word	0x20000a9c

08002380 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a47      	ldr	r2, [pc, #284]	; (80024a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800238c:	4293      	cmp	r3, r2
 800238e:	f040 8083 	bne.w	8002498 <HAL_TIM_IC_CaptureCallback+0x118>
	  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8002392:	2110      	movs	r1, #16
 8002394:	4845      	ldr	r0, [pc, #276]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002396:	f004 ff7c 	bl	8007292 <HAL_GPIO_TogglePin>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	7f1b      	ldrb	r3, [r3, #28]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d17a      	bne.n	8002498 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 80023a2:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11a      	bne.n	80023e0 <HAL_TIM_IC_CaptureCallback+0x60>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80023aa:	2100      	movs	r1, #0
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f007 ff7d 	bl	800a2ac <HAL_TIM_ReadCapturedValue>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4a3f      	ldr	r2, [pc, #252]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80023b6:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 80023b8:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6a1a      	ldr	r2, [r3, #32]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 020a 	bic.w	r2, r2, #10
 80023cc:	621a      	str	r2, [r3, #32]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6a1a      	ldr	r2, [r3, #32]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0202 	orr.w	r2, r2, #2
 80023dc:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				//__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
			}
		}
	  }
}
 80023de:	e05b      	b.n	8002498 <HAL_TIM_IC_CaptureCallback+0x118>
			else if (Is_First_Captured==1)   // if the first is already captured
 80023e0:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d157      	bne.n	8002498 <HAL_TIM_IC_CaptureCallback+0x118>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80023e8:	2100      	movs	r1, #0
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f007 ff5e 	bl	800a2ac <HAL_TIM_ReadCapturedValue>
 80023f0:	4603      	mov	r3, r0
 80023f2:	4a31      	ldr	r2, [pc, #196]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x138>)
 80023f4:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Val2 > IC_Val1)
 80023fe:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d907      	bls.n	800241a <HAL_TIM_IC_CaptureCallback+0x9a>
					Difference = IC_Val2-IC_Val1;
 800240a:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x138>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	4a29      	ldr	r2, [pc, #164]	; (80024bc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	e00f      	b.n	800243a <HAL_TIM_IC_CaptureCallback+0xba>
				else if (IC_Val1 > IC_Val2)
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d909      	bls.n	800243a <HAL_TIM_IC_CaptureCallback+0xba>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002434:	33ff      	adds	r3, #255	; 0xff
 8002436:	4a21      	ldr	r2, [pc, #132]	; (80024bc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002438:	6013      	str	r3, [r2, #0]
				Distance = Difference * .34/2;
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_TIM_IC_CaptureCallback+0x13c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f860 	bl	8000504 <__aeabi_ui2d>
 8002444:	a316      	add	r3, pc, #88	; (adr r3, 80024a0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244a:	f7fe f8d5 	bl	80005f8 <__aeabi_dmul>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800245e:	f7fe f9f5 	bl	800084c <__aeabi_ddiv>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f7fe fb9d 	bl	8000ba8 <__aeabi_d2uiz>
 800246e:	4603      	mov	r3, r0
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8002474:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6a1a      	ldr	r2, [r3, #32]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 020a 	bic.w	r2, r2, #10
 800248a:	621a      	str	r2, [r3, #32]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6a12      	ldr	r2, [r2, #32]
 8002496:	621a      	str	r2, [r3, #32]
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	5c28f5c3 	.word	0x5c28f5c3
 80024a4:	3fd5c28f 	.word	0x3fd5c28f
 80024a8:	200006e4 	.word	0x200006e4
 80024ac:	40020400 	.word	0x40020400
 80024b0:	20000be0 	.word	0x20000be0
 80024b4:	20000bd4 	.word	0x20000bd4
 80024b8:	20000bd8 	.word	0x20000bd8
 80024bc:	20000bdc 	.word	0x20000bdc
 80024c0:	20000be1 	.word	0x20000be1

080024c4 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6 )
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d10d      	bne.n	80024f0 <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
	  if(timerse == 1){timerse =0;}
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d102      	bne.n	80024e2 <HAL_TIM_PeriodElapsedCallback+0x1e>
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
	  if(timerse == 0){timerse =1;}
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <HAL_TIM_PeriodElapsedCallback+0x2c>
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
  }
  if(htim == &htim7){

  }
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	200007bc 	.word	0x200007bc
 8002500:	20000bf4 	.word	0x20000bf4

08002504 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a06      	ldr	r2, [pc, #24]	; (8002528 <HAL_UART_TxCpltCallback+0x24>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d102      	bne.n	800251a <HAL_UART_TxCpltCallback+0x16>
			telemetria_data_sent = 1;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_UART_TxCpltCallback+0x28>)
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
	}
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	200008d8 	.word	0x200008d8
 800252c:	20000bee 	.word	0x20000bee

08002530 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	if(huart ==&huart1){
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a4b      	ldr	r2, [pc, #300]	; (8002668 <HAL_UART_RxCpltCallback+0x138>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d17b      	bne.n	8002638 <HAL_UART_RxCpltCallback+0x108>
		debug_i = __HAL_TIM_GET_COUNTER(&htim6);
 8002540:	4b4a      	ldr	r3, [pc, #296]	; (800266c <HAL_UART_RxCpltCallback+0x13c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	461a      	mov	r2, r3
 8002548:	4b49      	ldr	r3, [pc, #292]	; (8002670 <HAL_UART_RxCpltCallback+0x140>)
 800254a:	601a      	str	r2, [r3, #0]
		if(debug_i < 100){
 800254c:	4b48      	ldr	r3, [pc, #288]	; (8002670 <HAL_UART_RxCpltCallback+0x140>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b63      	cmp	r3, #99	; 0x63
 8002552:	dc0d      	bgt.n	8002570 <HAL_UART_RxCpltCallback+0x40>
			CRSF_debug[CRSF_i] = UART1_rxBuffer[0];
 8002554:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_UART_RxCpltCallback+0x144>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_UART_RxCpltCallback+0x148>)
 800255c:	7819      	ldrb	r1, [r3, #0]
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_UART_RxCpltCallback+0x14c>)
 8002560:	5499      	strb	r1, [r3, r2]
			CRSF_i++;
 8002562:	4b44      	ldr	r3, [pc, #272]	; (8002674 <HAL_UART_RxCpltCallback+0x144>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	3301      	adds	r3, #1
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b42      	ldr	r3, [pc, #264]	; (8002674 <HAL_UART_RxCpltCallback+0x144>)
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	e05f      	b.n	8002630 <HAL_UART_RxCpltCallback+0x100>
		}
		else{
			if(CRSF_debug[2] == 0x16){
 8002570:	4b42      	ldr	r3, [pc, #264]	; (800267c <HAL_UART_RxCpltCallback+0x14c>)
 8002572:	789b      	ldrb	r3, [r3, #2]
 8002574:	2b16      	cmp	r3, #22
 8002576:	d154      	bne.n	8002622 <HAL_UART_RxCpltCallback+0xf2>
				RX_roll = (((uint16_t)(CRSF_debug[4] & 0b00000111)) << 8) + (uint16_t)(CRSF_debug[3]);
 8002578:	4b40      	ldr	r3, [pc, #256]	; (800267c <HAL_UART_RxCpltCallback+0x14c>)
 800257a:	791b      	ldrb	r3, [r3, #4]
 800257c:	021b      	lsls	r3, r3, #8
 800257e:	b29b      	uxth	r3, r3
 8002580:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002584:	b29a      	uxth	r2, r3
 8002586:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_UART_RxCpltCallback+0x14c>)
 8002588:	78db      	ldrb	r3, [r3, #3]
 800258a:	b29b      	uxth	r3, r3
 800258c:	4413      	add	r3, r2
 800258e:	b29a      	uxth	r2, r3
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_UART_RxCpltCallback+0x150>)
 8002592:	801a      	strh	r2, [r3, #0]
				RX_pitch = (((uint16_t)(CRSF_debug[5] & 0b00111111)) << 5) + (((uint16_t)(CRSF_debug[4] & 0b11111000)) >> 3);
 8002594:	4b39      	ldr	r3, [pc, #228]	; (800267c <HAL_UART_RxCpltCallback+0x14c>)
 8002596:	795b      	ldrb	r3, [r3, #5]
 8002598:	015b      	lsls	r3, r3, #5
 800259a:	b29b      	uxth	r3, r3
 800259c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	4b36      	ldr	r3, [pc, #216]	; (800267c <HAL_UART_RxCpltCallback+0x14c>)
 80025a4:	791b      	ldrb	r3, [r3, #4]
 80025a6:	08db      	lsrs	r3, r3, #3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	4b34      	ldr	r3, [pc, #208]	; (8002684 <HAL_UART_RxCpltCallback+0x154>)
 80025b2:	801a      	strh	r2, [r3, #0]
				RX_throttle = (((uint16_t)(CRSF_debug[7] & 0b00000001)) << 10)+ (((uint16_t)(CRSF_debug[6])) << 2) + (((uint16_t)(CRSF_debug[5] & 0b11000000)) >> 6);
 80025b4:	4b31      	ldr	r3, [pc, #196]	; (800267c <HAL_UART_RxCpltCallback+0x14c>)
 80025b6:	79db      	ldrb	r3, [r3, #7]
 80025b8:	029b      	lsls	r3, r3, #10
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	4b2e      	ldr	r3, [pc, #184]	; (800267c <HAL_UART_RxCpltCallback+0x14c>)
 80025c4:	799b      	ldrb	r3, [r3, #6]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	4b2a      	ldr	r3, [pc, #168]	; (800267c <HAL_UART_RxCpltCallback+0x14c>)
 80025d2:	795b      	ldrb	r3, [r3, #5]
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	b29b      	uxth	r3, r3
 80025da:	4413      	add	r3, r2
 80025dc:	b29a      	uxth	r2, r3
 80025de:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_UART_RxCpltCallback+0x158>)
 80025e0:	801a      	strh	r2, [r3, #0]
				RX_yaw = (((uint16_t)(CRSF_debug[8] & 0b00001111)) << 7) + (((uint16_t)(CRSF_debug[7] & 0b11111110)) >> 1);
 80025e2:	4b26      	ldr	r3, [pc, #152]	; (800267c <HAL_UART_RxCpltCallback+0x14c>)
 80025e4:	7a1b      	ldrb	r3, [r3, #8]
 80025e6:	01db      	lsls	r3, r3, #7
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_UART_RxCpltCallback+0x14c>)
 80025f2:	79db      	ldrb	r3, [r3, #7]
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_UART_RxCpltCallback+0x15c>)
 8002600:	801a      	strh	r2, [r3, #0]
				RX_arm = (((uint16_t)(CRSF_debug[9] & 0b01111111)) << 4) + (((uint16_t)(CRSF_debug[8] & 0b11110000)) >> 4);
 8002602:	4b1e      	ldr	r3, [pc, #120]	; (800267c <HAL_UART_RxCpltCallback+0x14c>)
 8002604:	7a5b      	ldrb	r3, [r3, #9]
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	b29b      	uxth	r3, r3
 800260a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800260e:	b29a      	uxth	r2, r3
 8002610:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_UART_RxCpltCallback+0x14c>)
 8002612:	7a1b      	ldrb	r3, [r3, #8]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	b2db      	uxtb	r3, r3
 8002618:	b29b      	uxth	r3, r3
 800261a:	4413      	add	r3, r2
 800261c:	b29a      	uxth	r2, r3
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <HAL_UART_RxCpltCallback+0x160>)
 8002620:	801a      	strh	r2, [r3, #0]
			}
			CRSF_debug[0] = UART1_rxBuffer[0];
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <HAL_UART_RxCpltCallback+0x148>)
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_UART_RxCpltCallback+0x14c>)
 8002628:	701a      	strb	r2, [r3, #0]
			CRSF_i = 1;
 800262a:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_UART_RxCpltCallback+0x144>)
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
		}
		htim6.Instance->CNT = 0;
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_UART_RxCpltCallback+0x13c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2200      	movs	r2, #0
 8002636:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(huart == &huart2){
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a16      	ldr	r2, [pc, #88]	; (8002694 <HAL_UART_RxCpltCallback+0x164>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d10e      	bne.n	800265e <HAL_UART_RxCpltCallback+0x12e>
		if(uart_telemetria == 1){
 8002640:	4b15      	ldr	r3, [pc, #84]	; (8002698 <HAL_UART_RxCpltCallback+0x168>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d105      	bne.n	8002654 <HAL_UART_RxCpltCallback+0x124>
			HAL_UART_Receive_IT(&huart2, telem, 11);
 8002648:	220b      	movs	r2, #11
 800264a:	4914      	ldr	r1, [pc, #80]	; (800269c <HAL_UART_RxCpltCallback+0x16c>)
 800264c:	4811      	ldr	r0, [pc, #68]	; (8002694 <HAL_UART_RxCpltCallback+0x164>)
 800264e:	f008 fc7d 	bl	800af4c <HAL_UART_Receive_IT>
		}
		else
			HAL_UART_Receive_IT(&huart2, telem, 11);
	}
}
 8002652:	e004      	b.n	800265e <HAL_UART_RxCpltCallback+0x12e>
			HAL_UART_Receive_IT(&huart2, telem, 11);
 8002654:	220b      	movs	r2, #11
 8002656:	4911      	ldr	r1, [pc, #68]	; (800269c <HAL_UART_RxCpltCallback+0x16c>)
 8002658:	480e      	ldr	r0, [pc, #56]	; (8002694 <HAL_UART_RxCpltCallback+0x164>)
 800265a:	f008 fc77 	bl	800af4c <HAL_UART_Receive_IT>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000894 	.word	0x20000894
 800266c:	200007bc 	.word	0x200007bc
 8002670:	20000bf0 	.word	0x20000bf0
 8002674:	20000c78 	.word	0x20000c78
 8002678:	20000c7c 	.word	0x20000c7c
 800267c:	20000c38 	.word	0x20000c38
 8002680:	20000c7e 	.word	0x20000c7e
 8002684:	20000c80 	.word	0x20000c80
 8002688:	20000c84 	.word	0x20000c84
 800268c:	20000c82 	.word	0x20000c82
 8002690:	20000c86 	.word	0x20000c86
 8002694:	200008d8 	.word	0x200008d8
 8002698:	20000be2 	.word	0x20000be2
 800269c:	20000000 	.word	0x20000000

080026a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80026a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026a4:	b094      	sub	sp, #80	; 0x50
 80026a6:	af04      	add	r7, sp, #16
 80026a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
//	uint8_t telemetria[8];
	uint8_t telemetria_data[40] = "HELLO WORLD \r\n";
 80026aa:	4b6c      	ldr	r3, [pc, #432]	; (800285c <StartDefaultTask+0x1bc>)
 80026ac:	f107 0418 	add.w	r4, r7, #24
 80026b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b2:	c407      	stmia	r4!, {r0, r1, r2}
 80026b4:	8023      	strh	r3, [r4, #0]
 80026b6:	3402      	adds	r4, #2
 80026b8:	0c1b      	lsrs	r3, r3, #16
 80026ba:	7023      	strb	r3, [r4, #0]
 80026bc:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
 80026cc:	615a      	str	r2, [r3, #20]
 80026ce:	761a      	strb	r2, [r3, #24]


  /* Infinite loop */
  for(;;)
  {
	  if(uart_telemetria == 1){
 80026d0:	4b63      	ldr	r3, [pc, #396]	; (8002860 <StartDefaultTask+0x1c0>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	f040 8086 	bne.w	80027e6 <StartDefaultTask+0x146>
		  if(telem[0] == 'P'){
 80026da:	4b62      	ldr	r3, [pc, #392]	; (8002864 <StartDefaultTask+0x1c4>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b50      	cmp	r3, #80	; 0x50
 80026e0:	d13e      	bne.n	8002760 <StartDefaultTask+0xc0>
			  telem_P = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 80026e2:	4b60      	ldr	r3, [pc, #384]	; (8002864 <StartDefaultTask+0x1c4>)
 80026e4:	785b      	ldrb	r3, [r3, #1]
 80026e6:	461a      	mov	r2, r3
 80026e8:	4b5f      	ldr	r3, [pc, #380]	; (8002868 <StartDefaultTask+0x1c8>)
 80026ea:	fb03 f202 	mul.w	r2, r3, r2
 80026ee:	4b5d      	ldr	r3, [pc, #372]	; (8002864 <StartDefaultTask+0x1c4>)
 80026f0:	789b      	ldrb	r3, [r3, #2]
 80026f2:	4619      	mov	r1, r3
 80026f4:	4b5d      	ldr	r3, [pc, #372]	; (800286c <StartDefaultTask+0x1cc>)
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	441a      	add	r2, r3
 80026fc:	4b59      	ldr	r3, [pc, #356]	; (8002864 <StartDefaultTask+0x1c4>)
 80026fe:	78db      	ldrb	r3, [r3, #3]
 8002700:	4619      	mov	r1, r3
 8002702:	f242 7310 	movw	r3, #10000	; 0x2710
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	441a      	add	r2, r3
 800270c:	4b55      	ldr	r3, [pc, #340]	; (8002864 <StartDefaultTask+0x1c4>)
 800270e:	791b      	ldrb	r3, [r3, #4]
 8002710:	4619      	mov	r1, r3
 8002712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	441a      	add	r2, r3
 800271c:	4b51      	ldr	r3, [pc, #324]	; (8002864 <StartDefaultTask+0x1c4>)
 800271e:	795b      	ldrb	r3, [r3, #5]
 8002720:	4619      	mov	r1, r3
 8002722:	2364      	movs	r3, #100	; 0x64
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	441a      	add	r2, r3
 800272a:	4b4e      	ldr	r3, [pc, #312]	; (8002864 <StartDefaultTask+0x1c4>)
 800272c:	799b      	ldrb	r3, [r3, #6]
 800272e:	4619      	mov	r1, r3
 8002730:	460b      	mov	r3, r1
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	4a4a      	ldr	r2, [pc, #296]	; (8002864 <StartDefaultTask+0x1c4>)
 800273c:	79d2      	ldrb	r2, [r2, #7]
 800273e:	441a      	add	r2, r3
 8002740:	4b4b      	ldr	r3, [pc, #300]	; (8002870 <StartDefaultTask+0x1d0>)
 8002742:	4413      	add	r3, r2
 8002744:	ee07 3a90 	vmov	s15, r3
 8002748:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800274c:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002874 <StartDefaultTask+0x1d4>
 8002750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002754:	4b48      	ldr	r3, [pc, #288]	; (8002878 <StartDefaultTask+0x1d8>)
 8002756:	edc3 7a00 	vstr	s15, [r3]
			  new_P = 1;
 800275a:	4b48      	ldr	r3, [pc, #288]	; (800287c <StartDefaultTask+0x1dc>)
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
		  }
		  if(telem[0] == 'D'){
 8002760:	4b40      	ldr	r3, [pc, #256]	; (8002864 <StartDefaultTask+0x1c4>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b44      	cmp	r3, #68	; 0x44
 8002766:	d13e      	bne.n	80027e6 <StartDefaultTask+0x146>
			  telem_D = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 8002768:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <StartDefaultTask+0x1c4>)
 800276a:	785b      	ldrb	r3, [r3, #1]
 800276c:	461a      	mov	r2, r3
 800276e:	4b3e      	ldr	r3, [pc, #248]	; (8002868 <StartDefaultTask+0x1c8>)
 8002770:	fb03 f202 	mul.w	r2, r3, r2
 8002774:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <StartDefaultTask+0x1c4>)
 8002776:	789b      	ldrb	r3, [r3, #2]
 8002778:	4619      	mov	r1, r3
 800277a:	4b3c      	ldr	r3, [pc, #240]	; (800286c <StartDefaultTask+0x1cc>)
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	441a      	add	r2, r3
 8002782:	4b38      	ldr	r3, [pc, #224]	; (8002864 <StartDefaultTask+0x1c4>)
 8002784:	78db      	ldrb	r3, [r3, #3]
 8002786:	4619      	mov	r1, r3
 8002788:	f242 7310 	movw	r3, #10000	; 0x2710
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	441a      	add	r2, r3
 8002792:	4b34      	ldr	r3, [pc, #208]	; (8002864 <StartDefaultTask+0x1c4>)
 8002794:	791b      	ldrb	r3, [r3, #4]
 8002796:	4619      	mov	r1, r3
 8002798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	441a      	add	r2, r3
 80027a2:	4b30      	ldr	r3, [pc, #192]	; (8002864 <StartDefaultTask+0x1c4>)
 80027a4:	795b      	ldrb	r3, [r3, #5]
 80027a6:	4619      	mov	r1, r3
 80027a8:	2364      	movs	r3, #100	; 0x64
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	441a      	add	r2, r3
 80027b0:	4b2c      	ldr	r3, [pc, #176]	; (8002864 <StartDefaultTask+0x1c4>)
 80027b2:	799b      	ldrb	r3, [r3, #6]
 80027b4:	4619      	mov	r1, r3
 80027b6:	460b      	mov	r3, r1
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4413      	add	r3, r2
 80027c0:	4a28      	ldr	r2, [pc, #160]	; (8002864 <StartDefaultTask+0x1c4>)
 80027c2:	79d2      	ldrb	r2, [r2, #7]
 80027c4:	441a      	add	r2, r3
 80027c6:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <StartDefaultTask+0x1d0>)
 80027c8:	4413      	add	r3, r2
 80027ca:	ee07 3a90 	vmov	s15, r3
 80027ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027d2:	eddf 6a28 	vldr	s13, [pc, #160]	; 8002874 <StartDefaultTask+0x1d4>
 80027d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027da:	4b29      	ldr	r3, [pc, #164]	; (8002880 <StartDefaultTask+0x1e0>)
 80027dc:	edc3 7a00 	vstr	s15, [r3]
			  new_D = 1;
 80027e0:	4b28      	ldr	r3, [pc, #160]	; (8002884 <StartDefaultTask+0x1e4>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if (xQueueReceive(telemetria_Queue, (void*)&telemetria_send, 0) == pdTRUE){
 80027e6:	4b28      	ldr	r3, [pc, #160]	; (8002888 <StartDefaultTask+0x1e8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f107 010c 	add.w	r1, r7, #12
 80027ee:	2200      	movs	r2, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f00c fc63 	bl	800f0bc <xQueueReceive>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d12a      	bne.n	8002852 <StartDefaultTask+0x1b2>
//		  sprintf((char*)telemetria_data, "Raw:0,0,0,0,0,0,%d,%d,%d\r\n", (int)((drone_angle[0])*10), (int)((drone_angle[1])*10), (int)(drone_angle[2])*10); //%5.2f
	//	  sprintf((char*)telemetria_data, "Yaw: 115.47\r\n");
		  HAL_UART_Transmit (&huart2, telemetria_data, sizeof (telemetria_data), 200);
*/

		  if(telemetria_data_sent == 1){
 80027fc:	4b23      	ldr	r3, [pc, #140]	; (800288c <StartDefaultTask+0x1ec>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d126      	bne.n	8002852 <StartDefaultTask+0x1b2>
		  			  sprintf((char*)telemetria_data, "%4.3f,%4.3f,%4.3f\r\n", telemetria_send[0], telemetria_send[1], telemetria_send[2]); //%5.2f
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fd fe9e 	bl	8000548 <__aeabi_f2d>
 800280c:	4680      	mov	r8, r0
 800280e:	4689      	mov	r9, r1
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fe98 	bl	8000548 <__aeabi_f2d>
 8002818:	4604      	mov	r4, r0
 800281a:	460d      	mov	r5, r1
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fd fe92 	bl	8000548 <__aeabi_f2d>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	f107 0018 	add.w	r0, r7, #24
 800282c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002830:	e9cd 4500 	strd	r4, r5, [sp]
 8002834:	4642      	mov	r2, r8
 8002836:	464b      	mov	r3, r9
 8002838:	4915      	ldr	r1, [pc, #84]	; (8002890 <StartDefaultTask+0x1f0>)
 800283a:	f00e fe31 	bl	80114a0 <siprintf>
//		  			  sprintf((char*)telemetria_data, "%2.2f, %2.2f, %2.2f, %3.2f, %3.2f, %3.2f, %4.1f, %4.1f, %4.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f\r\n", telemetria_send[0], telemetria_send[1], telemetria_send[2], telemetria_send[3], telemetria_send[4], telemetria_send[5], telemetria_send[6], telemetria_send[7], telemetria_send[8], telemetria_send[9], telemetria_send[10], telemetria_send[11], telemetria_send[12],telemetria_send[13], telemetria_send[14], telemetria_send[15], telemetria_send[16], telemetria_send[17], telemetria_send[18]); //%5.2f
		  			  HAL_UART_Transmit_IT(&huart2, telemetria_data, sizeof (telemetria_data));
 800283e:	f107 0318 	add.w	r3, r7, #24
 8002842:	2228      	movs	r2, #40	; 0x28
 8002844:	4619      	mov	r1, r3
 8002846:	4813      	ldr	r0, [pc, #76]	; (8002894 <StartDefaultTask+0x1f4>)
 8002848:	f008 fb3b 	bl	800aec2 <HAL_UART_Transmit_IT>
		  			  telemetria_data_sent = 0;
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <StartDefaultTask+0x1ec>)
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
		  		  }
	  }


	  osDelay(20);
 8002852:	2014      	movs	r0, #20
 8002854:	f00c f9a9 	bl	800ebaa <osDelay>
	  if(uart_telemetria == 1){
 8002858:	e73a      	b.n	80026d0 <StartDefaultTask+0x30>
 800285a:	bf00      	nop
 800285c:	08015ef0 	.word	0x08015ef0
 8002860:	20000be2 	.word	0x20000be2
 8002864:	20000000 	.word	0x20000000
 8002868:	000f4240 	.word	0x000f4240
 800286c:	000186a0 	.word	0x000186a0
 8002870:	fcd232b0 	.word	0xfcd232b0
 8002874:	47c35000 	.word	0x47c35000
 8002878:	20000be4 	.word	0x20000be4
 800287c:	20000bec 	.word	0x20000bec
 8002880:	20000be8 	.word	0x20000be8
 8002884:	20000bed 	.word	0x20000bed
 8002888:	20000c98 	.word	0x20000c98
 800288c:	20000bee 	.word	0x20000bee
 8002890:	08015edc 	.word	0x08015edc
 8002894:	200008d8 	.word	0x200008d8

08002898 <Start_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Control */
void Start_Control(void const * argument)
{
 8002898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800289a:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 800289e:	af06      	add	r7, sp, #24
 80028a0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80028a4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80028a8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Control */
	extern QueueHandle_t telemetria_Queue;


	//Magneto 1.2 calibration
	FusionVector magneto_offset = {-10.254290, 1.8038, -4.628919};
 80028aa:	4a8b      	ldr	r2, [pc, #556]	; (8002ad8 <Start_Control+0x240>)
 80028ac:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80028b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionMatrix magneto_transform = {1.030904, 0.011754, -0.008844, 0.011754, 1.040290, -0.000902, -0.008844, -0.000902, 1.008504};
 80028b6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80028ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028be:	4a87      	ldr	r2, [pc, #540]	; (8002adc <Start_Control+0x244>)
 80028c0:	461c      	mov	r4, r3
 80028c2:	4615      	mov	r5, r2
 80028c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	6023      	str	r3, [r4, #0]
//	FusionVector magneto_offset = {0, 0, 0};
//	FusionMatrix magneto_transform = {1,0,0,0,1,0,0,0,1};
	FusionVector magneto_data;

	//pitch angle velocity control params
	float err_pitch = 0;
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	float errd_pitch = 0;
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	float prev_err_pitch = 0;
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	float control_pitch = 0;
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	float P_pitch = 20;
 80028f0:	4b7b      	ldr	r3, [pc, #492]	; (8002ae0 <Start_Control+0x248>)
 80028f2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	float D_pitch = 0.1;
 80028f6:	4b7b      	ldr	r3, [pc, #492]	; (8002ae4 <Start_Control+0x24c>)
 80028f8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

	//pitch angle control params
	float err_angle_pitch = 0;
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	float errd_angle_pitch = 0;
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	float prev_err_angle_pitch = 0;
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	float angle_control_pitch = 0;
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	float P_angle_pitch = 0.04;
 800291c:	4b72      	ldr	r3, [pc, #456]	; (8002ae8 <Start_Control+0x250>)
 800291e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	float D_angle_pitch = 0.0001;//0.005;
 8002922:	4b72      	ldr	r3, [pc, #456]	; (8002aec <Start_Control+0x254>)
 8002924:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

	//roll angle velocity control params
	float err_roll = 0;
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	float errd_roll = 0;
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	float prev_err_roll = 0;
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	float control_roll = 0;
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	float P_roll = 5;
 8002948:	4b69      	ldr	r3, [pc, #420]	; (8002af0 <Start_Control+0x258>)
 800294a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	float D_roll = 0.1;//0.4
 800294e:	4b65      	ldr	r3, [pc, #404]	; (8002ae4 <Start_Control+0x24c>)
 8002950:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

	//roll angle control params
	float P_angle_roll = 0.2;
 8002954:	4b67      	ldr	r3, [pc, #412]	; (8002af4 <Start_Control+0x25c>)
 8002956:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	float D_angle_roll = 0.0001;//0.005;
 800295a:	4b64      	ldr	r3, [pc, #400]	; (8002aec <Start_Control+0x254>)
 800295c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	float err_angle_roll = 0;
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	float errd_angle_roll = 0;
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	float prev_err_angle_roll = 0;
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	float angle_control_roll = 0;
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

	//yaw angle velocity control params
	float err_yaw = 0;
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	float errd_yaw = 0;
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	float prev_err_yaw = 0;
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	float control_yaw = 0;
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	float P_yaw = 20;
 80029a0:	4b4f      	ldr	r3, [pc, #316]	; (8002ae0 <Start_Control+0x248>)
 80029a2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	float D_yaw = 0.1;
 80029a6:	4b4f      	ldr	r3, [pc, #316]	; (8002ae4 <Start_Control+0x24c>)
 80029a8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

	//yaw angle control params
	float P_angle_yaw = 0.8;//0.04;
 80029ac:	4b52      	ldr	r3, [pc, #328]	; (8002af8 <Start_Control+0x260>)
 80029ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	float D_angle_yaw = 0.000;//0.005;
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	float err_angle_yaw = 0;
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	float errd_angle_yaw = 0;
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	float prev_err_angle_yaw = 0;
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	float angle_control_yaw = 0;
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

	float yaw_angle = 0;
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	float prev_euler_yaw = 0;
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	int n = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8



	//imu init function
	BMI088_Init(&imu, &hspi2, CS_ACC_GPIO_Port, CS_ACC_Pin, CS_GYRO_GPIO_Port, CS_GYRO_Pin);
 80029f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	4b41      	ldr	r3, [pc, #260]	; (8002afc <Start_Control+0x264>)
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029fe:	4a40      	ldr	r2, [pc, #256]	; (8002b00 <Start_Control+0x268>)
 8002a00:	4940      	ldr	r1, [pc, #256]	; (8002b04 <Start_Control+0x26c>)
 8002a02:	4841      	ldr	r0, [pc, #260]	; (8002b08 <Start_Control+0x270>)
 8002a04:	f002 fa80 	bl	8004f08 <BMI088_Init>


	//bmp388 pressure sensor init
	bmp._hi2c = &hi2c2;
 8002a08:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <Start_Control+0x274>)
 8002a0a:	4a41      	ldr	r2, [pc, #260]	; (8002b10 <Start_Control+0x278>)
 8002a0c:	601a      	str	r2, [r3, #0]


	BMP388_SetTempOS(&bmp, 0);
 8002a0e:	2100      	movs	r1, #0
 8002a10:	483e      	ldr	r0, [pc, #248]	; (8002b0c <Start_Control+0x274>)
 8002a12:	f002 fdea 	bl	80055ea <BMP388_SetTempOS>
	HAL_Delay(10);
 8002a16:	200a      	movs	r0, #10
 8002a18:	f003 faec 	bl	8005ff4 <HAL_Delay>
	BMP388_SetPressOS(&bmp, 0x03);
 8002a1c:	2103      	movs	r1, #3
 8002a1e:	483b      	ldr	r0, [pc, #236]	; (8002b0c <Start_Control+0x274>)
 8002a20:	f002 fe03 	bl	800562a <BMP388_SetPressOS>
	HAL_Delay(10);
 8002a24:	200a      	movs	r0, #10
 8002a26:	f003 fae5 	bl	8005ff4 <HAL_Delay>
	BMP388_SetIIRFilterCoeff(&bmp, 2);
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	4837      	ldr	r0, [pc, #220]	; (8002b0c <Start_Control+0x274>)
 8002a2e:	f002 fe1b 	bl	8005668 <BMP388_SetIIRFilterCoeff>
	HAL_Delay(10);
 8002a32:	200a      	movs	r0, #10
 8002a34:	f003 fade 	bl	8005ff4 <HAL_Delay>
	BMP388_SetOutputDataRate(&bmp, 0x02);
 8002a38:	2102      	movs	r1, #2
 8002a3a:	4834      	ldr	r0, [pc, #208]	; (8002b0c <Start_Control+0x274>)
 8002a3c:	f002 fe2b 	bl	8005696 <BMP388_SetOutputDataRate>
	HAL_Delay(10);
 8002a40:	200a      	movs	r0, #10
 8002a42:	f003 fad7 	bl	8005ff4 <HAL_Delay>
	BMP388_Init(&bmp);
 8002a46:	4831      	ldr	r0, [pc, #196]	; (8002b0c <Start_Control+0x274>)
 8002a48:	f002 fd54 	bl	80054f4 <BMP388_Init>

	//gyro offset calculation
	for(int i_init = 0; i_init<2000; i_init++ ){
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a52:	e037      	b.n	8002ac4 <Start_Control+0x22c>
	  BMI088_ReadGyroscope(&imu);
 8002a54:	482c      	ldr	r0, [pc, #176]	; (8002b08 <Start_Control+0x270>)
 8002a56:	f002 fcd5 	bl	8005404 <BMI088_ReadGyroscope>
	  gyro_offset_x_calc += imu.gyr_rps[0];
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <Start_Control+0x270>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd fd72 	bl	8000548 <__aeabi_f2d>
 8002a64:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <Start_Control+0x27c>)
 8002a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6a:	f7fd fc0f 	bl	800028c <__adddf3>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4928      	ldr	r1, [pc, #160]	; (8002b14 <Start_Control+0x27c>)
 8002a74:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_y_calc += imu.gyr_rps[1];
 8002a78:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <Start_Control+0x270>)
 8002a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd63 	bl	8000548 <__aeabi_f2d>
 8002a82:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <Start_Control+0x280>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f7fd fc00 	bl	800028c <__adddf3>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4921      	ldr	r1, [pc, #132]	; (8002b18 <Start_Control+0x280>)
 8002a92:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_z_calc += imu.gyr_rps[2];
 8002a96:	4b1c      	ldr	r3, [pc, #112]	; (8002b08 <Start_Control+0x270>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd54 	bl	8000548 <__aeabi_f2d>
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <Start_Control+0x284>)
 8002aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa6:	f7fd fbf1 	bl	800028c <__adddf3>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	491b      	ldr	r1, [pc, #108]	; (8002b1c <Start_Control+0x284>)
 8002ab0:	e9c1 2300 	strd	r2, r3, [r1]
	  osDelay(5);
 8002ab4:	2005      	movs	r0, #5
 8002ab6:	f00c f878 	bl	800ebaa <osDelay>
	for(int i_init = 0; i_init<2000; i_init++ ){
 8002aba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ac4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002ac8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002acc:	dbc2      	blt.n	8002a54 <Start_Control+0x1bc>
	}


	//barometer offset calculation
	for(int i_init = 0; i_init<100; i_init++ ){ //100 seems to work
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ad4:	e05a      	b.n	8002b8c <Start_Control+0x2f4>
 8002ad6:	bf00      	nop
 8002ad8:	08015f4c 	.word	0x08015f4c
 8002adc:	08015f58 	.word	0x08015f58
 8002ae0:	41a00000 	.word	0x41a00000
 8002ae4:	3dcccccd 	.word	0x3dcccccd
 8002ae8:	3d23d70a 	.word	0x3d23d70a
 8002aec:	38d1b717 	.word	0x38d1b717
 8002af0:	40a00000 	.word	0x40a00000
 8002af4:	3e4ccccd 	.word	0x3e4ccccd
 8002af8:	3f4ccccd 	.word	0x3f4ccccd
 8002afc:	40020400 	.word	0x40020400
 8002b00:	40020800 	.word	0x40020800
 8002b04:	2000068c 	.word	0x2000068c
 8002b08:	20000a0c 	.word	0x20000a0c
 8002b0c:	20000a5c 	.word	0x20000a5c
 8002b10:	200005e4 	.word	0x200005e4
 8002b14:	20000c00 	.word	0x20000c00
 8002b18:	20000c08 	.word	0x20000c08
 8002b1c:	20000c10 	.word	0x20000c10
	  BMP388_ReadRawPressTempTime(&bmp, &raw_press, &raw_temp, &raw_time);
 8002b20:	4bc5      	ldr	r3, [pc, #788]	; (8002e38 <Start_Control+0x5a0>)
 8002b22:	4ac6      	ldr	r2, [pc, #792]	; (8002e3c <Start_Control+0x5a4>)
 8002b24:	49c6      	ldr	r1, [pc, #792]	; (8002e40 <Start_Control+0x5a8>)
 8002b26:	48c7      	ldr	r0, [pc, #796]	; (8002e44 <Start_Control+0x5ac>)
 8002b28:	f002 fdca 	bl	80056c0 <BMP388_ReadRawPressTempTime>
	  BMP388_CompensateRawPressTemp(&bmp, raw_press, raw_temp, &press, &temp);
 8002b2c:	4bc4      	ldr	r3, [pc, #784]	; (8002e40 <Start_Control+0x5a8>)
 8002b2e:	6819      	ldr	r1, [r3, #0]
 8002b30:	4bc2      	ldr	r3, [pc, #776]	; (8002e3c <Start_Control+0x5a4>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4bc4      	ldr	r3, [pc, #784]	; (8002e48 <Start_Control+0x5b0>)
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	4bc4      	ldr	r3, [pc, #784]	; (8002e4c <Start_Control+0x5b4>)
 8002b3a:	48c2      	ldr	r0, [pc, #776]	; (8002e44 <Start_Control+0x5ac>)
 8002b3c:	f002 fdec 	bl	8005718 <BMP388_CompensateRawPressTemp>
	  h0 += BMP388_FindAltitude(ground_pressure, press);
 8002b40:	4bc2      	ldr	r3, [pc, #776]	; (8002e4c <Start_Control+0x5b4>)
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	eef0 0a67 	vmov.f32	s1, s15
 8002b4a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8002e50 <Start_Control+0x5b8>
 8002b4e:	f002 fe07 	bl	8005760 <BMP388_FindAltitude>
 8002b52:	eeb0 7a40 	vmov.f32	s14, s0
 8002b56:	4bbf      	ldr	r3, [pc, #764]	; (8002e54 <Start_Control+0x5bc>)
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b60:	4bbc      	ldr	r3, [pc, #752]	; (8002e54 <Start_Control+0x5bc>)
 8002b62:	edc3 7a00 	vstr	s15, [r3]
	  p0 += press;
 8002b66:	4bbc      	ldr	r3, [pc, #752]	; (8002e58 <Start_Control+0x5c0>)
 8002b68:	ed93 7a00 	vldr	s14, [r3]
 8002b6c:	4bb7      	ldr	r3, [pc, #732]	; (8002e4c <Start_Control+0x5b4>)
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b76:	4bb8      	ldr	r3, [pc, #736]	; (8002e58 <Start_Control+0x5c0>)
 8002b78:	edc3 7a00 	vstr	s15, [r3]
	  osDelay(20);
 8002b7c:	2014      	movs	r0, #20
 8002b7e:	f00c f814 	bl	800ebaa <osDelay>
	for(int i_init = 0; i_init<100; i_init++ ){ //100 seems to work
 8002b82:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b86:	3301      	adds	r3, #1
 8002b88:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b8c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b90:	2b63      	cmp	r3, #99	; 0x63
 8002b92:	ddc5      	ble.n	8002b20 <Start_Control+0x288>
	}

	h0 /= 100;
 8002b94:	4baf      	ldr	r3, [pc, #700]	; (8002e54 <Start_Control+0x5bc>)
 8002b96:	ed93 7a00 	vldr	s14, [r3]
 8002b9a:	eddf 6ab0 	vldr	s13, [pc, #704]	; 8002e5c <Start_Control+0x5c4>
 8002b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ba2:	4bac      	ldr	r3, [pc, #688]	; (8002e54 <Start_Control+0x5bc>)
 8002ba4:	edc3 7a00 	vstr	s15, [r3]
	p0 /= 100;
 8002ba8:	4bab      	ldr	r3, [pc, #684]	; (8002e58 <Start_Control+0x5c0>)
 8002baa:	ed93 7a00 	vldr	s14, [r3]
 8002bae:	eddf 6aab 	vldr	s13, [pc, #684]	; 8002e5c <Start_Control+0x5c4>
 8002bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bb6:	4ba8      	ldr	r3, [pc, #672]	; (8002e58 <Start_Control+0x5c0>)
 8002bb8:	edc3 7a00 	vstr	s15, [r3]
	p0 -= ground_pressure;
 8002bbc:	4ba6      	ldr	r3, [pc, #664]	; (8002e58 <Start_Control+0x5c0>)
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8002e50 <Start_Control+0x5b8>
 8002bc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bca:	4ba3      	ldr	r3, [pc, #652]	; (8002e58 <Start_Control+0x5c0>)
 8002bcc:	edc3 7a00 	vstr	s15, [r3]
	gyro_offset_x = gyro_offset_x_calc/2000;
 8002bd0:	4ba3      	ldr	r3, [pc, #652]	; (8002e60 <Start_Control+0x5c8>)
 8002bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	4ba2      	ldr	r3, [pc, #648]	; (8002e64 <Start_Control+0x5cc>)
 8002bdc:	f7fd fe36 	bl	800084c <__aeabi_ddiv>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	49a0      	ldr	r1, [pc, #640]	; (8002e68 <Start_Control+0x5d0>)
 8002be6:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_y = gyro_offset_y_calc/2000;
 8002bea:	4ba0      	ldr	r3, [pc, #640]	; (8002e6c <Start_Control+0x5d4>)
 8002bec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	4b9b      	ldr	r3, [pc, #620]	; (8002e64 <Start_Control+0x5cc>)
 8002bf6:	f7fd fe29 	bl	800084c <__aeabi_ddiv>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	499c      	ldr	r1, [pc, #624]	; (8002e70 <Start_Control+0x5d8>)
 8002c00:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_z = gyro_offset_z_calc/2000;
 8002c04:	4b9b      	ldr	r3, [pc, #620]	; (8002e74 <Start_Control+0x5dc>)
 8002c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	4b95      	ldr	r3, [pc, #596]	; (8002e64 <Start_Control+0x5cc>)
 8002c10:	f7fd fe1c 	bl	800084c <__aeabi_ddiv>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4997      	ldr	r1, [pc, #604]	; (8002e78 <Start_Control+0x5e0>)
 8002c1a:	e9c1 2300 	strd	r2, r3, [r1]
	struct bmm150_settings settings;

	/* Status of api are returned to this variable */
	int8_t rslt;

	rslt = bmm150_interface_selection(&dev);
 8002c1e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002c22:	4618      	mov	r0, r3
 8002c24:	f00b feec 	bl	800ea00 <bmm150_interface_selection>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	bmm150_error_codes_print_result("bmm150_interface_selection", rslt);
 8002c2e:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 8002c32:	4619      	mov	r1, r3
 8002c34:	4891      	ldr	r0, [pc, #580]	; (8002e7c <Start_Control+0x5e4>)
 8002c36:	f00b ff29 	bl	800ea8c <bmm150_error_codes_print_result>

	if (rslt == BMM150_OK) {
 8002c3a:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d11f      	bne.n	8002c82 <Start_Control+0x3ea>
			rslt = bmm150_init(&dev);
 8002c42:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002c46:	4618      	mov	r0, r3
 8002c48:	f00a fe5d 	bl	800d906 <bmm150_init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
			bmm150_error_codes_print_result("bmm150_init", rslt);
 8002c52:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 8002c56:	4619      	mov	r1, r3
 8002c58:	4889      	ldr	r0, [pc, #548]	; (8002e80 <Start_Control+0x5e8>)
 8002c5a:	f00b ff17 	bl	800ea8c <bmm150_error_codes_print_result>

			if (rslt == BMM150_OK) {
 8002c5e:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10d      	bne.n	8002c82 <Start_Control+0x3ea>
				rslt = set_config(&dev);
 8002c66:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff faf2 	bl	8002254 <set_config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
				bmm150_error_codes_print_result("set_config", rslt);
 8002c76:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4881      	ldr	r0, [pc, #516]	; (8002e84 <Start_Control+0x5ec>)
 8002c7e:	f00b ff05 	bl	800ea8c <bmm150_error_codes_print_result>
	uint8_t transmit_data[40];
	float telemetria_float[3];



	q.SEq_1=1;
 8002c82:	4b81      	ldr	r3, [pc, #516]	; (8002e88 <Start_Control+0x5f0>)
 8002c84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c88:	601a      	str	r2, [r3, #0]
	q.SEq_2=0;
 8002c8a:	4b7f      	ldr	r3, [pc, #508]	; (8002e88 <Start_Control+0x5f0>)
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	605a      	str	r2, [r3, #4]
	q.SEq_3=0;
 8002c92:	4b7d      	ldr	r3, [pc, #500]	; (8002e88 <Start_Control+0x5f0>)
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
	q.SEq_4=0;
 8002c9a:	4b7b      	ldr	r3, [pc, #492]	; (8002e88 <Start_Control+0x5f0>)
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	60da      	str	r2, [r3, #12]

	w.w_bx=0;
 8002ca2:	4b7a      	ldr	r3, [pc, #488]	; (8002e8c <Start_Control+0x5f4>)
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
	w.w_by=0;
 8002caa:	4b78      	ldr	r3, [pc, #480]	; (8002e8c <Start_Control+0x5f4>)
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
	w.w_bz=0;
 8002cb2:	4b76      	ldr	r3, [pc, #472]	; (8002e8c <Start_Control+0x5f4>)
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]



	HAL_TIM_Base_Start_IT(&htim6);
 8002cba:	4875      	ldr	r0, [pc, #468]	; (8002e90 <Start_Control+0x5f8>)
 8002cbc:	f006 fd9a 	bl	80097f4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002cc0:	4874      	ldr	r0, [pc, #464]	; (8002e94 <Start_Control+0x5fc>)
 8002cc2:	f006 fd97 	bl	80097f4 <HAL_TIM_Base_Start_IT>
	FusionAhrsInitialise(&ahrs);
 8002cc6:	4874      	ldr	r0, [pc, #464]	; (8002e98 <Start_Control+0x600>)
 8002cc8:	f009 fe9c 	bl	800ca04 <FusionAhrsInitialise>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2108      	movs	r1, #8
 8002cd0:	4872      	ldr	r0, [pc, #456]	; (8002e9c <Start_Control+0x604>)
 8002cd2:	f004 fac5 	bl	8007260 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cd6:	2064      	movs	r0, #100	; 0x64
 8002cd8:	f003 f98c 	bl	8005ff4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002cdc:	2201      	movs	r2, #1
 8002cde:	2108      	movs	r1, #8
 8002ce0:	486e      	ldr	r0, [pc, #440]	; (8002e9c <Start_Control+0x604>)
 8002ce2:	f004 fabd 	bl	8007260 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002ce6:	2064      	movs	r0, #100	; 0x64
 8002ce8:	f003 f984 	bl	8005ff4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cec:	2200      	movs	r2, #0
 8002cee:	2108      	movs	r1, #8
 8002cf0:	486a      	ldr	r0, [pc, #424]	; (8002e9c <Start_Control+0x604>)
 8002cf2:	f004 fab5 	bl	8007260 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cf6:	2064      	movs	r0, #100	; 0x64
 8002cf8:	f003 f97c 	bl	8005ff4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	2108      	movs	r1, #8
 8002d00:	4866      	ldr	r0, [pc, #408]	; (8002e9c <Start_Control+0x604>)
 8002d02:	f004 faad 	bl	8007260 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002d06:	2064      	movs	r0, #100	; 0x64
 8002d08:	f003 f974 	bl	8005ff4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2108      	movs	r1, #8
 8002d10:	4862      	ldr	r0, [pc, #392]	; (8002e9c <Start_Control+0x604>)
 8002d12:	f004 faa5 	bl	8007260 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002d16:	2064      	movs	r0, #100	; 0x64
 8002d18:	f003 f96c 	bl	8005ff4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	2108      	movs	r1, #8
 8002d20:	485e      	ldr	r0, [pc, #376]	; (8002e9c <Start_Control+0x604>)
 8002d22:	f004 fa9d 	bl	8007260 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002d26:	2064      	movs	r0, #100	; 0x64
 8002d28:	f003 f964 	bl	8005ff4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2108      	movs	r1, #8
 8002d30:	485a      	ldr	r0, [pc, #360]	; (8002e9c <Start_Control+0x604>)
 8002d32:	f004 fa95 	bl	8007260 <HAL_GPIO_WritePin>

	HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, bytetoread);
 8002d36:	4b5a      	ldr	r3, [pc, #360]	; (8002ea0 <Start_Control+0x608>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4959      	ldr	r1, [pc, #356]	; (8002ea4 <Start_Control+0x60c>)
 8002d40:	4859      	ldr	r0, [pc, #356]	; (8002ea8 <Start_Control+0x610>)
 8002d42:	f008 f933 	bl	800afac <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_IT(&huart2, transmit_data, sizeof (transmit_data));
 8002d46:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002d4a:	2228      	movs	r2, #40	; 0x28
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4857      	ldr	r0, [pc, #348]	; (8002eac <Start_Control+0x614>)
 8002d50:	f008 f8b7 	bl	800aec2 <HAL_UART_Transmit_IT>
//	HAL_UART_Receive_IT(&huart2, telem, 11);


	vTaskResume( defaultTaskHandle );
 8002d54:	4b56      	ldr	r3, [pc, #344]	; (8002eb0 <Start_Control+0x618>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f00c fd99 	bl	800f890 <vTaskResume>
  /* Infinite loop */
  for(;;)
  {


		  htim7.Instance->CNT = 0;
 8002d5e:	4b4d      	ldr	r3, [pc, #308]	; (8002e94 <Start_Control+0x5fc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2200      	movs	r2, #0
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24

		  //BOSCH API NORMAL MAGNETO END

		  //BOSCH API FORCED MAGNETO START

		  bmm150_read_mag_data(&mag_data, &dev);
 8002d66:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f00a ffa8 	bl	800dcc6 <bmm150_read_mag_data>

		  settings.pwr_mode = BMM150_POWERMODE_FORCED;
 8002d76:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002d7a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d7e:	2201      	movs	r2, #1
 8002d80:	705a      	strb	r2, [r3, #1]
		  rslt = bmm150_set_op_mode(&settings, &dev);
 8002d82:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d86:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f00a fe4d 	bl	800da2c <bmm150_set_op_mode>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
		  bmm150_error_codes_print_result("bmm150_set_op_mode", rslt);
 8002d98:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4845      	ldr	r0, [pc, #276]	; (8002eb4 <Start_Control+0x61c>)
 8002da0:	f00b fe74 	bl	800ea8c <bmm150_error_codes_print_result>
		//BOSCH API FORCED MAGNETO END



		  // magnetic field data in uT
		  magneto_data.axis.x = mag_data.y;
 8002da4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002da8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002db2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002db6:	601a      	str	r2, [r3, #0]
		  magneto_data.axis.y = -mag_data.x;
 8002db8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002dbc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002dc0:	edd3 7a00 	vldr	s15, [r3]
 8002dc4:	eef1 7a67 	vneg.f32	s15, s15
 8002dc8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002dcc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002dd0:	edc3 7a01 	vstr	s15, [r3, #4]
		  magneto_data.axis.z = mag_data.z;
 8002dd4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002dd8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002de2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002de6:	609a      	str	r2, [r3, #8]


		  //read IMU
		  BMI088_ReadGyroscope(&imu);	// imu read 119 us
 8002de8:	4833      	ldr	r0, [pc, #204]	; (8002eb8 <Start_Control+0x620>)
 8002dea:	f002 fb0b 	bl	8005404 <BMI088_ReadGyroscope>
		  BMI088_ReadAccelerometer(&imu);
 8002dee:	4832      	ldr	r0, [pc, #200]	; (8002eb8 <Start_Control+0x620>)
 8002df0:	f002 fa94 	bl	800531c <BMI088_ReadAccelerometer>

		  //read barometer
		  BMP388_ReadRawPressTempTime(&bmp, &raw_press, &raw_temp, &raw_time); //2.46 ms - 400kHz
 8002df4:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <Start_Control+0x5a0>)
 8002df6:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <Start_Control+0x5a4>)
 8002df8:	4911      	ldr	r1, [pc, #68]	; (8002e40 <Start_Control+0x5a8>)
 8002dfa:	4812      	ldr	r0, [pc, #72]	; (8002e44 <Start_Control+0x5ac>)
 8002dfc:	f002 fc60 	bl	80056c0 <BMP388_ReadRawPressTempTime>

		  //compensate barometer
		  BMP388_CompensateRawPressTemp(&bmp, raw_press, raw_temp, &press, &temp); //2.7 us
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <Start_Control+0x5a8>)
 8002e02:	6819      	ldr	r1, [r3, #0]
 8002e04:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <Start_Control+0x5a4>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <Start_Control+0x5b0>)
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <Start_Control+0x5b4>)
 8002e0e:	480d      	ldr	r0, [pc, #52]	; (8002e44 <Start_Control+0x5ac>)
 8002e10:	f002 fc82 	bl	8005718 <BMP388_CompensateRawPressTemp>
		  hz = BMP388_FindAltitude(ground_pressure, press-p0);
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <Start_Control+0x5b4>)
 8002e16:	ed93 7a00 	vldr	s14, [r3]
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <Start_Control+0x5c0>)
 8002e1c:	edd3 7a00 	vldr	s15, [r3]
 8002e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e24:	eef0 0a67 	vmov.f32	s1, s15
 8002e28:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002e50 <Start_Control+0x5b8>
 8002e2c:	f002 fc98 	bl	8005760 <BMP388_FindAltitude>
 8002e30:	eef0 7a40 	vmov.f32	s15, s0
 8002e34:	e042      	b.n	8002ebc <Start_Control+0x624>
 8002e36:	bf00      	nop
 8002e38:	20000aa8 	.word	0x20000aa8
 8002e3c:	20000aa4 	.word	0x20000aa4
 8002e40:	20000aa0 	.word	0x20000aa0
 8002e44:	20000a5c 	.word	0x20000a5c
 8002e48:	20000ab0 	.word	0x20000ab0
 8002e4c:	20000aac 	.word	0x20000aac
 8002e50:	47c5e680 	.word	0x47c5e680
 8002e54:	20000ab8 	.word	0x20000ab8
 8002e58:	20000abc 	.word	0x20000abc
 8002e5c:	42c80000 	.word	0x42c80000
 8002e60:	20000c00 	.word	0x20000c00
 8002e64:	409f4000 	.word	0x409f4000
 8002e68:	20000c18 	.word	0x20000c18
 8002e6c:	20000c08 	.word	0x20000c08
 8002e70:	20000c20 	.word	0x20000c20
 8002e74:	20000c10 	.word	0x20000c10
 8002e78:	20000c28 	.word	0x20000c28
 8002e7c:	08015f18 	.word	0x08015f18
 8002e80:	08015f34 	.word	0x08015f34
 8002e84:	08015f40 	.word	0x08015f40
 8002e88:	20000acc 	.word	0x20000acc
 8002e8c:	20000adc 	.word	0x20000adc
 8002e90:	200007bc 	.word	0x200007bc
 8002e94:	20000804 	.word	0x20000804
 8002e98:	20000aec 	.word	0x20000aec
 8002e9c:	40020400 	.word	0x40020400
 8002ea0:	2000000a 	.word	0x2000000a
 8002ea4:	20000c7c 	.word	0x20000c7c
 8002ea8:	20000894 	.word	0x20000894
 8002eac:	200008d8 	.word	0x200008d8
 8002eb0:	20000a04 	.word	0x20000a04
 8002eb4:	08015e94 	.word	0x08015e94
 8002eb8:	20000a0c 	.word	0x20000a0c
 8002ebc:	4bd8      	ldr	r3, [pc, #864]	; (8003220 <Start_Control+0x988>)
 8002ebe:	edc3 7a00 	vstr	s15, [r3]


		  // compensate gyro data with offset
		  gyro_x_degree = ((imu.gyr_rps[0]-gyro_offset_x)*57.29);
 8002ec2:	4bd8      	ldr	r3, [pc, #864]	; (8003224 <Start_Control+0x98c>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fb3e 	bl	8000548 <__aeabi_f2d>
 8002ecc:	4bd6      	ldr	r3, [pc, #856]	; (8003228 <Start_Control+0x990>)
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f7fd f9d9 	bl	8000288 <__aeabi_dsub>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	a3cc      	add	r3, pc, #816	; (adr r3, 8003210 <Start_Control+0x978>)
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	f7fd fb88 	bl	80005f8 <__aeabi_dmul>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f7fd fe7a 	bl	8000be8 <__aeabi_d2f>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4acd      	ldr	r2, [pc, #820]	; (800322c <Start_Control+0x994>)
 8002ef8:	6013      	str	r3, [r2, #0]
		  gyro_y_degree = ((imu.gyr_rps[1]-gyro_offset_x)*57.29);
 8002efa:	4bca      	ldr	r3, [pc, #808]	; (8003224 <Start_Control+0x98c>)
 8002efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fb22 	bl	8000548 <__aeabi_f2d>
 8002f04:	4bc8      	ldr	r3, [pc, #800]	; (8003228 <Start_Control+0x990>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	f7fd f9bd 	bl	8000288 <__aeabi_dsub>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	a3be      	add	r3, pc, #760	; (adr r3, 8003210 <Start_Control+0x978>)
 8002f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1c:	f7fd fb6c 	bl	80005f8 <__aeabi_dmul>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	f7fd fe5e 	bl	8000be8 <__aeabi_d2f>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4ac0      	ldr	r2, [pc, #768]	; (8003230 <Start_Control+0x998>)
 8002f30:	6013      	str	r3, [r2, #0]
		  gyro_z_degree = ((imu.gyr_rps[2]-gyro_offset_x)*57.29);
 8002f32:	4bbc      	ldr	r3, [pc, #752]	; (8003224 <Start_Control+0x98c>)
 8002f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd fb06 	bl	8000548 <__aeabi_f2d>
 8002f3c:	4bba      	ldr	r3, [pc, #744]	; (8003228 <Start_Control+0x990>)
 8002f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f42:	f7fd f9a1 	bl	8000288 <__aeabi_dsub>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	a3b0      	add	r3, pc, #704	; (adr r3, 8003210 <Start_Control+0x978>)
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	f7fd fb50 	bl	80005f8 <__aeabi_dmul>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f7fd fe42 	bl	8000be8 <__aeabi_d2f>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4ab3      	ldr	r2, [pc, #716]	; (8003234 <Start_Control+0x99c>)
 8002f68:	6013      	str	r3, [r2, #0]


		  // compensate magneto data
		  magneto_data = FusionMatrixMultiplyVector(magneto_transform, FusionVectorSubtract(magneto_data, magneto_offset));
 8002f6a:	ed97 5a41 	vldr	s10, [r7, #260]	; 0x104
 8002f6e:	edd7 5a42 	vldr	s11, [r7, #264]	; 0x108
 8002f72:	ed97 6a43 	vldr	s12, [r7, #268]	; 0x10c
 8002f76:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002f7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f7e:	edd3 6a00 	vldr	s13, [r3]
 8002f82:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f86:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f8a:	eef0 1a45 	vmov.f32	s3, s10
 8002f8e:	eeb0 2a65 	vmov.f32	s4, s11
 8002f92:	eef0 2a46 	vmov.f32	s5, s12
 8002f96:	eeb0 0a66 	vmov.f32	s0, s13
 8002f9a:	eef0 0a47 	vmov.f32	s1, s14
 8002f9e:	eeb0 1a67 	vmov.f32	s2, s15
 8002fa2:	f7fe f84d 	bl	8001040 <FusionVectorSubtract>
 8002fa6:	eef0 6a40 	vmov.f32	s13, s0
 8002faa:	eeb0 7a60 	vmov.f32	s14, s1
 8002fae:	eef0 7a41 	vmov.f32	s15, s2
 8002fb2:	edc7 6a44 	vstr	s13, [r7, #272]	; 0x110
 8002fb6:	ed87 7a45 	vstr	s14, [r7, #276]	; 0x114
 8002fba:	edc7 7a46 	vstr	s15, [r7, #280]	; 0x118
 8002fbe:	edd7 6a44 	vldr	s13, [r7, #272]	; 0x110
 8002fc2:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8002fc6:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 8002fca:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002fce:	f5a3 7688 	sub.w	r6, r3, #272	; 0x110
 8002fd2:	466d      	mov	r5, sp
 8002fd4:	f106 0410 	add.w	r4, r6, #16
 8002fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	602b      	str	r3, [r5, #0]
 8002fe0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002fe4:	eeb0 0a66 	vmov.f32	s0, s13
 8002fe8:	eef0 0a47 	vmov.f32	s1, s14
 8002fec:	eeb0 1a67 	vmov.f32	s2, s15
 8002ff0:	f7fe f8b8 	bl	8001164 <FusionMatrixMultiplyVector>
 8002ff4:	eef0 6a40 	vmov.f32	s13, s0
 8002ff8:	eeb0 7a60 	vmov.f32	s14, s1
 8002ffc:	eef0 7a41 	vmov.f32	s15, s2
 8003000:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003004:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003008:	edc3 6a00 	vstr	s13, [r3]
 800300c:	ed83 7a01 	vstr	s14, [r3, #4]
 8003010:	edc3 7a02 	vstr	s15, [r3, #8]

		  const FusionVector gyroscope = {gyro_x_degree, gyro_y_degree, gyro_z_degree};
 8003014:	4b85      	ldr	r3, [pc, #532]	; (800322c <Start_Control+0x994>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800301c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	4b83      	ldr	r3, [pc, #524]	; (8003230 <Start_Control+0x998>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800302a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	4b80      	ldr	r3, [pc, #512]	; (8003234 <Start_Control+0x99c>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003038:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800303c:	609a      	str	r2, [r3, #8]
		  const FusionVector accelerometer = {imu.acc_mps2[0]/9.81, imu.acc_mps2[1]/9.81, imu.acc_mps2[2]/9.81};
 800303e:	4b79      	ldr	r3, [pc, #484]	; (8003224 <Start_Control+0x98c>)
 8003040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd fa80 	bl	8000548 <__aeabi_f2d>
 8003048:	a373      	add	r3, pc, #460	; (adr r3, 8003218 <Start_Control+0x980>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd fbfd 	bl	800084c <__aeabi_ddiv>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	f7fd fdc5 	bl	8000be8 <__aeabi_d2f>
 800305e:	4602      	mov	r2, r0
 8003060:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003064:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	4b6e      	ldr	r3, [pc, #440]	; (8003224 <Start_Control+0x98c>)
 800306c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306e:	4618      	mov	r0, r3
 8003070:	f7fd fa6a 	bl	8000548 <__aeabi_f2d>
 8003074:	a368      	add	r3, pc, #416	; (adr r3, 8003218 <Start_Control+0x980>)
 8003076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307a:	f7fd fbe7 	bl	800084c <__aeabi_ddiv>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	f7fd fdaf 	bl	8000be8 <__aeabi_d2f>
 800308a:	4602      	mov	r2, r0
 800308c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003090:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	4b63      	ldr	r3, [pc, #396]	; (8003224 <Start_Control+0x98c>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd fa54 	bl	8000548 <__aeabi_f2d>
 80030a0:	a35d      	add	r3, pc, #372	; (adr r3, 8003218 <Start_Control+0x980>)
 80030a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a6:	f7fd fbd1 	bl	800084c <__aeabi_ddiv>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	f7fd fd99 	bl	8000be8 <__aeabi_d2f>
 80030b6:	4602      	mov	r2, r0
 80030b8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030bc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80030c0:	609a      	str	r2, [r3, #8]
		  const FusionVector magnetometer = {magneto_data.axis.x, magneto_data.axis.y, magneto_data.axis.z};
 80030c2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030d0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030e4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030f8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80030fc:	609a      	str	r2, [r3, #8]

		  //no magnetometer AHRS
//		  FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, SAMPLE_PERIOD);

		  //magnetometer AHRS
		  FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, SAMPLE_PERIOD);
 80030fe:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003102:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003106:	ed93 3a00 	vldr	s6, [r3]
 800310a:	edd3 3a01 	vldr	s7, [r3, #4]
 800310e:	ed93 4a02 	vldr	s8, [r3, #8]
 8003112:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003116:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800311a:	ed93 5a00 	vldr	s10, [r3]
 800311e:	edd3 5a01 	vldr	s11, [r3, #4]
 8003122:	ed93 6a02 	vldr	s12, [r3, #8]
 8003126:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800312a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800312e:	edd3 6a00 	vldr	s13, [r3]
 8003132:	ed93 7a01 	vldr	s14, [r3, #4]
 8003136:	edd3 7a02 	vldr	s15, [r3, #8]
 800313a:	eddf 4a3f 	vldr	s9, [pc, #252]	; 8003238 <Start_Control+0x9a0>
 800313e:	eef0 1a45 	vmov.f32	s3, s10
 8003142:	eeb0 2a65 	vmov.f32	s4, s11
 8003146:	eef0 2a46 	vmov.f32	s5, s12
 800314a:	eeb0 0a66 	vmov.f32	s0, s13
 800314e:	eef0 0a47 	vmov.f32	s1, s14
 8003152:	eeb0 1a67 	vmov.f32	s2, s15
 8003156:	4839      	ldr	r0, [pc, #228]	; (800323c <Start_Control+0x9a4>)
 8003158:	f009 fd8e 	bl	800cc78 <FusionAhrsUpdate>

		  euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 800315c:	4837      	ldr	r0, [pc, #220]	; (800323c <Start_Control+0x9a4>)
 800315e:	f00a fbaf 	bl	800d8c0 <FusionAhrsGetQuaternion>
 8003162:	eeb0 6a40 	vmov.f32	s12, s0
 8003166:	eef0 6a60 	vmov.f32	s13, s1
 800316a:	eeb0 7a41 	vmov.f32	s14, s2
 800316e:	eef0 7a61 	vmov.f32	s15, s3
 8003172:	ed87 6a47 	vstr	s12, [r7, #284]	; 0x11c
 8003176:	edc7 6a48 	vstr	s13, [r7, #288]	; 0x120
 800317a:	ed87 7a49 	vstr	s14, [r7, #292]	; 0x124
 800317e:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
 8003182:	ed97 6a47 	vldr	s12, [r7, #284]	; 0x11c
 8003186:	edd7 6a48 	vldr	s13, [r7, #288]	; 0x120
 800318a:	ed97 7a49 	vldr	s14, [r7, #292]	; 0x124
 800318e:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 8003192:	eeb0 0a46 	vmov.f32	s0, s12
 8003196:	eef0 0a66 	vmov.f32	s1, s13
 800319a:	eeb0 1a47 	vmov.f32	s2, s14
 800319e:	eef0 1a67 	vmov.f32	s3, s15
 80031a2:	f7fe f924 	bl	80013ee <FusionQuaternionToEuler>
 80031a6:	eef0 6a40 	vmov.f32	s13, s0
 80031aa:	eeb0 7a60 	vmov.f32	s14, s1
 80031ae:	eef0 7a41 	vmov.f32	s15, s2
 80031b2:	4b23      	ldr	r3, [pc, #140]	; (8003240 <Start_Control+0x9a8>)
 80031b4:	edc3 6a00 	vstr	s13, [r3]
 80031b8:	ed83 7a01 	vstr	s14, [r3, #4]
 80031bc:	edc3 7a02 	vstr	s15, [r3, #8]

		  // Rotation matrix from sensor frame to earth(NWU) frame
		  ERS = FusionQuaternionToMatrix(FusionAhrsGetQuaternion(&ahrs));
 80031c0:	481e      	ldr	r0, [pc, #120]	; (800323c <Start_Control+0x9a4>)
 80031c2:	f00a fb7d 	bl	800d8c0 <FusionAhrsGetQuaternion>
 80031c6:	eeb0 6a40 	vmov.f32	s12, s0
 80031ca:	eef0 6a60 	vmov.f32	s13, s1
 80031ce:	eeb0 7a41 	vmov.f32	s14, s2
 80031d2:	eef0 7a61 	vmov.f32	s15, s3
 80031d6:	ed87 6a4b 	vstr	s12, [r7, #300]	; 0x12c
 80031da:	edc7 6a4c 	vstr	s13, [r7, #304]	; 0x130
 80031de:	ed87 7a4d 	vstr	s14, [r7, #308]	; 0x134
 80031e2:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
 80031e6:	4c17      	ldr	r4, [pc, #92]	; (8003244 <Start_Control+0x9ac>)
 80031e8:	463b      	mov	r3, r7
 80031ea:	ed97 6a4b 	vldr	s12, [r7, #300]	; 0x12c
 80031ee:	edd7 6a4c 	vldr	s13, [r7, #304]	; 0x130
 80031f2:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 80031f6:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 80031fa:	eeb0 0a46 	vmov.f32	s0, s12
 80031fe:	eef0 0a66 	vmov.f32	s1, s13
 8003202:	eeb0 1a47 	vmov.f32	s2, s14
 8003206:	eef0 1a67 	vmov.f32	s3, s15
 800320a:	4618      	mov	r0, r3
 800320c:	e01e      	b.n	800324c <Start_Control+0x9b4>
 800320e:	bf00      	nop
 8003210:	b851eb85 	.word	0xb851eb85
 8003214:	404ca51e 	.word	0x404ca51e
 8003218:	51eb851f 	.word	0x51eb851f
 800321c:	40239eb8 	.word	0x40239eb8
 8003220:	20000ab4 	.word	0x20000ab4
 8003224:	20000a0c 	.word	0x20000a0c
 8003228:	20000c18 	.word	0x20000c18
 800322c:	20000ac0 	.word	0x20000ac0
 8003230:	20000ac4 	.word	0x20000ac4
 8003234:	20000ac8 	.word	0x20000ac8
 8003238:	3ba3d70a 	.word	0x3ba3d70a
 800323c:	20000aec 	.word	0x20000aec
 8003240:	20000b60 	.word	0x20000b60
 8003244:	20000b6c 	.word	0x20000b6c
 8003248:	411cf5c3 	.word	0x411cf5c3
 800324c:	f7fe f802 	bl	8001254 <FusionQuaternionToMatrix>
 8003250:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003254:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003258:	461d      	mov	r5, r3
 800325a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800325c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800325e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003262:	682b      	ldr	r3, [r5, #0]
 8003264:	6023      	str	r3, [r4, #0]
		  aE = FusionMatrixMultiplyVector(ERS, FusionVectorMultiplyScalar(accelerometer, 9.81));
 8003266:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800326a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800326e:	edd3 6a00 	vldr	s13, [r3]
 8003272:	ed93 7a01 	vldr	s14, [r3, #4]
 8003276:	edd3 7a02 	vldr	s15, [r3, #8]
 800327a:	ed5f 1a0d 	vldr	s3, [pc, #-52]	; 8003248 <Start_Control+0x9b0>
 800327e:	eeb0 0a66 	vmov.f32	s0, s13
 8003282:	eef0 0a47 	vmov.f32	s1, s14
 8003286:	eeb0 1a67 	vmov.f32	s2, s15
 800328a:	f7fd ff27 	bl	80010dc <FusionVectorMultiplyScalar>
 800328e:	eef0 6a40 	vmov.f32	s13, s0
 8003292:	eeb0 7a60 	vmov.f32	s14, s1
 8003296:	eef0 7a41 	vmov.f32	s15, s2
 800329a:	edc7 6a4f 	vstr	s13, [r7, #316]	; 0x13c
 800329e:	ed87 7a50 	vstr	s14, [r7, #320]	; 0x140
 80032a2:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144
 80032a6:	edd7 6a4f 	vldr	s13, [r7, #316]	; 0x13c
 80032aa:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 80032ae:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 80032b2:	4ed9      	ldr	r6, [pc, #868]	; (8003618 <Start_Control+0xd80>)
 80032b4:	466d      	mov	r5, sp
 80032b6:	f106 0410 	add.w	r4, r6, #16
 80032ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	602b      	str	r3, [r5, #0]
 80032c2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80032c6:	eeb0 0a66 	vmov.f32	s0, s13
 80032ca:	eef0 0a47 	vmov.f32	s1, s14
 80032ce:	eeb0 1a67 	vmov.f32	s2, s15
 80032d2:	f7fd ff47 	bl	8001164 <FusionMatrixMultiplyVector>
 80032d6:	eef0 6a40 	vmov.f32	s13, s0
 80032da:	eeb0 7a60 	vmov.f32	s14, s1
 80032de:	eef0 7a41 	vmov.f32	s15, s2
 80032e2:	4bce      	ldr	r3, [pc, #824]	; (800361c <Start_Control+0xd84>)
 80032e4:	edc3 6a00 	vstr	s13, [r3]
 80032e8:	ed83 7a01 	vstr	s14, [r3, #4]
 80032ec:	edc3 7a02 	vstr	s15, [r3, #8]
		  // calculate vertical acceleration
		  aE.axis.z -=9.85173;
 80032f0:	4bca      	ldr	r3, [pc, #808]	; (800361c <Start_Control+0xd84>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd f927 	bl	8000548 <__aeabi_f2d>
 80032fa:	a3c3      	add	r3, pc, #780	; (adr r3, 8003608 <Start_Control+0xd70>)
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f7fc ffc2 	bl	8000288 <__aeabi_dsub>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	f7fd fc6c 	bl	8000be8 <__aeabi_d2f>
 8003310:	4603      	mov	r3, r0
 8003312:	4ac2      	ldr	r2, [pc, #776]	; (800361c <Start_Control+0xd84>)
 8003314:	6093      	str	r3, [r2, #8]


		  // altitude KF filter
		  meas.a11 = hz;
 8003316:	4bc2      	ldr	r3, [pc, #776]	; (8003620 <Start_Control+0xd88>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4ac2      	ldr	r2, [pc, #776]	; (8003624 <Start_Control+0xd8c>)
 800331c:	6013      	str	r3, [r2, #0]
		  meas.a21 = aE.axis.z;
 800331e:	4bbf      	ldr	r3, [pc, #764]	; (800361c <Start_Control+0xd84>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	4ac0      	ldr	r2, [pc, #768]	; (8003624 <Start_Control+0xd8c>)
 8003324:	6053      	str	r3, [r2, #4]
		  altitudeKF(prev_state, &current_state, P_prev, &P, meas);
 8003326:	4bbf      	ldr	r3, [pc, #764]	; (8003624 <Start_Control+0xd8c>)
 8003328:	ed93 4a00 	vldr	s8, [r3]
 800332c:	edd3 4a01 	vldr	s9, [r3, #4]
 8003330:	4bbd      	ldr	r3, [pc, #756]	; (8003628 <Start_Control+0xd90>)
 8003332:	ed93 5a00 	vldr	s10, [r3]
 8003336:	edd3 5a01 	vldr	s11, [r3, #4]
 800333a:	ed93 6a02 	vldr	s12, [r3, #8]
 800333e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003342:	4bba      	ldr	r3, [pc, #744]	; (800362c <Start_Control+0xd94>)
 8003344:	ed93 7a00 	vldr	s14, [r3]
 8003348:	edd3 7a01 	vldr	s15, [r3, #4]
 800334c:	eeb0 3a44 	vmov.f32	s6, s8
 8003350:	eef0 3a64 	vmov.f32	s7, s9
 8003354:	49b6      	ldr	r1, [pc, #728]	; (8003630 <Start_Control+0xd98>)
 8003356:	eeb0 1a45 	vmov.f32	s2, s10
 800335a:	eef0 1a65 	vmov.f32	s3, s11
 800335e:	eeb0 2a46 	vmov.f32	s4, s12
 8003362:	eef0 2a66 	vmov.f32	s5, s13
 8003366:	48b3      	ldr	r0, [pc, #716]	; (8003634 <Start_Control+0xd9c>)
 8003368:	eeb0 0a47 	vmov.f32	s0, s14
 800336c:	eef0 0a67 	vmov.f32	s1, s15
 8003370:	f001 f8c0 	bl	80044f4 <altitudeKF>


		  // calculate rotation around yaw axis
		  if(prev_euler_yaw > 170 && euler.angle.yaw < 0){
 8003374:	edd7 7a73 	vldr	s15, [r7, #460]	; 0x1cc
 8003378:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8003638 <Start_Control+0xda0>
 800337c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	dd0c      	ble.n	80033a0 <Start_Control+0xb08>
 8003386:	4bad      	ldr	r3, [pc, #692]	; (800363c <Start_Control+0xda4>)
 8003388:	edd3 7a02 	vldr	s15, [r3, #8]
 800338c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003394:	d504      	bpl.n	80033a0 <Start_Control+0xb08>
			  n++;
 8003396:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800339a:	3301      	adds	r3, #1
 800339c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		  }
		  if(prev_euler_yaw < -170 && euler.angle.yaw > 0){
 80033a0:	edd7 7a73 	vldr	s15, [r7, #460]	; 0x1cc
 80033a4:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8003640 <Start_Control+0xda8>
 80033a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b0:	d50c      	bpl.n	80033cc <Start_Control+0xb34>
 80033b2:	4ba2      	ldr	r3, [pc, #648]	; (800363c <Start_Control+0xda4>)
 80033b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80033b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c0:	dd04      	ble.n	80033cc <Start_Control+0xb34>
			  n--;
 80033c2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80033c6:	3b01      	subs	r3, #1
 80033c8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		  }
		  yaw_angle = euler.angle.yaw + n * 360.0;
 80033cc:	4b9b      	ldr	r3, [pc, #620]	; (800363c <Start_Control+0xda4>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd f8b9 	bl	8000548 <__aeabi_f2d>
 80033d6:	4604      	mov	r4, r0
 80033d8:	460d      	mov	r5, r1
 80033da:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 80033de:	f7fd f8a1 	bl	8000524 <__aeabi_i2d>
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	4b97      	ldr	r3, [pc, #604]	; (8003644 <Start_Control+0xdac>)
 80033e8:	f7fd f906 	bl	80005f8 <__aeabi_dmul>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4620      	mov	r0, r4
 80033f2:	4629      	mov	r1, r5
 80033f4:	f7fc ff4a 	bl	800028c <__adddf3>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4610      	mov	r0, r2
 80033fe:	4619      	mov	r1, r3
 8003400:	f7fd fbf2 	bl	8000be8 <__aeabi_d2f>
 8003404:	4603      	mov	r3, r0
 8003406:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		  abs_yaw = yaw_angle;
 800340a:	4a8f      	ldr	r2, [pc, #572]	; (8003648 <Start_Control+0xdb0>)
 800340c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003410:	6013      	str	r3, [r2, #0]
		  prev_euler_yaw = euler.angle.yaw;
 8003412:	4b8a      	ldr	r3, [pc, #552]	; (800363c <Start_Control+0xda4>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc




		  //radio control references
		  M_throttle = CRSFtoDuty(RX_throttle);
 800341a:	4b8c      	ldr	r3, [pc, #560]	; (800364c <Start_Control+0xdb4>)
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f002 fcda 	bl	8005dd8 <CRSFtoDuty>
 8003424:	eef0 7a40 	vmov.f32	s15, s0
 8003428:	4b89      	ldr	r3, [pc, #548]	; (8003650 <Start_Control+0xdb8>)
 800342a:	edc3 7a00 	vstr	s15, [r3]
		  M_pitch = CRSFtoPitch(RX_pitch)*25;
 800342e:	4b89      	ldr	r3, [pc, #548]	; (8003654 <Start_Control+0xdbc>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f002 fd12 	bl	8005e5c <CRSFtoPitch>
 8003438:	eef0 7a40 	vmov.f32	s15, s0
 800343c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003444:	4b84      	ldr	r3, [pc, #528]	; (8003658 <Start_Control+0xdc0>)
 8003446:	edc3 7a00 	vstr	s15, [r3]
		  M_roll = CRSFtoRoll(RX_roll)*15;
 800344a:	4b84      	ldr	r3, [pc, #528]	; (800365c <Start_Control+0xdc4>)
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f002 fd22 	bl	8005e98 <CRSFtoRoll>
 8003454:	eef0 7a40 	vmov.f32	s15, s0
 8003458:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800345c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003460:	4b7f      	ldr	r3, [pc, #508]	; (8003660 <Start_Control+0xdc8>)
 8003462:	edc3 7a00 	vstr	s15, [r3]
		  M_yaw += CRSFtoYaw(RX_yaw)*0.3;
 8003466:	4b7f      	ldr	r3, [pc, #508]	; (8003664 <Start_Control+0xdcc>)
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f002 fd32 	bl	8005ed4 <CRSFtoYaw>
 8003470:	ee10 3a10 	vmov	r3, s0
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd f867 	bl	8000548 <__aeabi_f2d>
 800347a:	a365      	add	r3, pc, #404	; (adr r3, 8003610 <Start_Control+0xd78>)
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f7fd f8ba 	bl	80005f8 <__aeabi_dmul>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4614      	mov	r4, r2
 800348a:	461d      	mov	r5, r3
 800348c:	4b76      	ldr	r3, [pc, #472]	; (8003668 <Start_Control+0xdd0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd f859 	bl	8000548 <__aeabi_f2d>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4620      	mov	r0, r4
 800349c:	4629      	mov	r1, r5
 800349e:	f7fc fef5 	bl	800028c <__adddf3>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4610      	mov	r0, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	f7fd fb9d 	bl	8000be8 <__aeabi_d2f>
 80034ae:	4603      	mov	r3, r0
 80034b0:	4a6d      	ldr	r2, [pc, #436]	; (8003668 <Start_Control+0xdd0>)
 80034b2:	6013      	str	r3, [r2, #0]

		  //pitch angle control
		  err_angle_pitch = M_pitch - euler.angle.pitch;
 80034b4:	4b68      	ldr	r3, [pc, #416]	; (8003658 <Start_Control+0xdc0>)
 80034b6:	ed93 7a00 	vldr	s14, [r3]
 80034ba:	4b60      	ldr	r3, [pc, #384]	; (800363c <Start_Control+0xda4>)
 80034bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80034c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034c4:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
		  errd_angle_pitch = (err_angle_pitch - prev_err_angle_pitch)/SAMPLE_PERIOD;
 80034c8:	ed97 7a6a 	vldr	s14, [r7, #424]	; 0x1a8
 80034cc:	edd7 7a7a 	vldr	s15, [r7, #488]	; 0x1e8
 80034d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034d4:	eddf 6a65 	vldr	s13, [pc, #404]	; 800366c <Start_Control+0xdd4>
 80034d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034dc:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
		  angle_control_pitch = P_angle_pitch * err_angle_pitch + D_angle_pitch * errd_angle_pitch;
 80034e0:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 80034e4:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 80034e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ec:	edd7 6a66 	vldr	s13, [r7, #408]	; 0x198
 80034f0:	edd7 7a69 	vldr	s15, [r7, #420]	; 0x1a4
 80034f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fc:	edc7 7a68 	vstr	s15, [r7, #416]	; 0x1a0
		  prev_err_angle_pitch = err_angle_pitch;
 8003500:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003504:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
		  //debug_control1 = err_angle_pitch;

		  //pitch angle velocity control
		  err_pitch = angle_control_pitch - imu.gyr_rps[1];
 8003508:	4b59      	ldr	r3, [pc, #356]	; (8003670 <Start_Control+0xdd8>)
 800350a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800350e:	ed97 7a68 	vldr	s14, [r7, #416]	; 0x1a0
 8003512:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003516:	edc7 7a6f 	vstr	s15, [r7, #444]	; 0x1bc
		  errd_pitch = (err_pitch - prev_err_pitch)/SAMPLE_PERIOD;
 800351a:	ed97 7a6f 	vldr	s14, [r7, #444]	; 0x1bc
 800351e:	edd7 7a7b 	vldr	s15, [r7, #492]	; 0x1ec
 8003522:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003526:	eddf 6a51 	vldr	s13, [pc, #324]	; 800366c <Start_Control+0xdd4>
 800352a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800352e:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
		  prev_err_pitch = err_pitch;
 8003532:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003536:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
		  control_pitch = P_pitch * err_pitch + D_pitch * errd_pitch;
 800353a:	ed97 7a6c 	vldr	s14, [r7, #432]	; 0x1b0
 800353e:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 8003542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003546:	edd7 6a6b 	vldr	s13, [r7, #428]	; 0x1ac
 800354a:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 800354e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003556:	edc7 7a6d 	vstr	s15, [r7, #436]	; 0x1b4

		  //roll angle control
		  err_angle_roll = M_roll - euler.angle.roll;
 800355a:	4b41      	ldr	r3, [pc, #260]	; (8003660 <Start_Control+0xdc8>)
 800355c:	ed93 7a00 	vldr	s14, [r3]
 8003560:	4b36      	ldr	r3, [pc, #216]	; (800363c <Start_Control+0xda4>)
 8003562:	edd3 7a00 	vldr	s15, [r3]
 8003566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800356a:	edc7 7a5e 	vstr	s15, [r7, #376]	; 0x178
		  errd_angle_roll = (err_angle_roll - prev_err_angle_roll)/SAMPLE_PERIOD;
 800356e:	ed97 7a5e 	vldr	s14, [r7, #376]	; 0x178
 8003572:	edd7 7a78 	vldr	s15, [r7, #480]	; 0x1e0
 8003576:	ee37 7a67 	vsub.f32	s14, s14, s15
 800357a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800366c <Start_Control+0xdd4>
 800357e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003582:	edc7 7a5d 	vstr	s15, [r7, #372]	; 0x174
		  angle_control_roll = P_angle_roll * err_angle_roll + D_angle_roll * errd_angle_roll;
 8003586:	ed97 7a60 	vldr	s14, [r7, #384]	; 0x180
 800358a:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 800358e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003592:	edd7 6a5f 	vldr	s13, [r7, #380]	; 0x17c
 8003596:	edd7 7a5d 	vldr	s15, [r7, #372]	; 0x174
 800359a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800359e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a2:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170
		  prev_err_angle_roll = err_angle_roll;
 80035a6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80035aa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
		  //debug_control1 = err_angle_roll;


		  //roll angle velocity control
		  err_roll = angle_control_roll - imu.gyr_rps[0]; //M_roll
 80035ae:	4b30      	ldr	r3, [pc, #192]	; (8003670 <Start_Control+0xdd8>)
 80035b0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80035b4:	ed97 7a5c 	vldr	s14, [r7, #368]	; 0x170
 80035b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035bc:	edc7 7a65 	vstr	s15, [r7, #404]	; 0x194
		  errd_roll = (err_roll - prev_err_roll)/SAMPLE_PERIOD;
 80035c0:	ed97 7a65 	vldr	s14, [r7, #404]	; 0x194
 80035c4:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
 80035c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035cc:	eddf 6a27 	vldr	s13, [pc, #156]	; 800366c <Start_Control+0xdd4>
 80035d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035d4:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
		  prev_err_roll = err_roll;
 80035d8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80035dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
		  control_roll = P_roll * err_roll + D_roll * errd_roll;
 80035e0:	ed97 7a62 	vldr	s14, [r7, #392]	; 0x188
 80035e4:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 80035e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ec:	edd7 6a61 	vldr	s13, [r7, #388]	; 0x184
 80035f0:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 80035f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035fc:	edc7 7a63 	vstr	s15, [r7, #396]	; 0x18c
		  //debug_control2 = control_roll;


		  //yaw angle control
		  err_angle_yaw = M_yaw - euler.angle.yaw;
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <Start_Control+0xdd0>)
 8003602:	ed93 7a00 	vldr	s14, [r3]
 8003606:	e035      	b.n	8003674 <Start_Control+0xddc>
 8003608:	f45e0b4e 	.word	0xf45e0b4e
 800360c:	4023b415 	.word	0x4023b415
 8003610:	33333333 	.word	0x33333333
 8003614:	3fd33333 	.word	0x3fd33333
 8003618:	20000b6c 	.word	0x20000b6c
 800361c:	20000b90 	.word	0x20000b90
 8003620:	20000ab4 	.word	0x20000ab4
 8003624:	20000bcc 	.word	0x20000bcc
 8003628:	20000bac 	.word	0x20000bac
 800362c:	20000b9c 	.word	0x20000b9c
 8003630:	20000bbc 	.word	0x20000bbc
 8003634:	20000ba4 	.word	0x20000ba4
 8003638:	432a0000 	.word	0x432a0000
 800363c:	20000b60 	.word	0x20000b60
 8003640:	c32a0000 	.word	0xc32a0000
 8003644:	40768000 	.word	0x40768000
 8003648:	20000ae8 	.word	0x20000ae8
 800364c:	20000c84 	.word	0x20000c84
 8003650:	20000c88 	.word	0x20000c88
 8003654:	20000c80 	.word	0x20000c80
 8003658:	20000c8c 	.word	0x20000c8c
 800365c:	20000c7e 	.word	0x20000c7e
 8003660:	20000c90 	.word	0x20000c90
 8003664:	20000c82 	.word	0x20000c82
 8003668:	20000c94 	.word	0x20000c94
 800366c:	3ba3d70a 	.word	0x3ba3d70a
 8003670:	20000a0c 	.word	0x20000a0c
 8003674:	4baf      	ldr	r3, [pc, #700]	; (8003934 <Start_Control+0x109c>)
 8003676:	edd3 7a02 	vldr	s15, [r3, #8]
 800367a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800367e:	edc7 7a56 	vstr	s15, [r7, #344]	; 0x158
		  errd_angle_yaw = (err_angle_yaw - prev_err_angle_yaw)/SAMPLE_PERIOD;
 8003682:	ed97 7a56 	vldr	s14, [r7, #344]	; 0x158
 8003686:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 800368a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800368e:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8003938 <Start_Control+0x10a0>
 8003692:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003696:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
		  angle_control_yaw = P_angle_yaw * err_angle_yaw + D_angle_yaw * errd_angle_yaw;
 800369a:	ed97 7a58 	vldr	s14, [r7, #352]	; 0x160
 800369e:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 80036a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036a6:	edd7 6a57 	vldr	s13, [r7, #348]	; 0x15c
 80036aa:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 80036ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b6:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
		  prev_err_angle_yaw = err_angle_yaw;
 80036ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80036be:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0



		  //yaw angle velocity control
		  err_yaw = angle_control_yaw - imu.gyr_rps[2]; //angle_control_yaw
 80036c2:	4b9e      	ldr	r3, [pc, #632]	; (800393c <Start_Control+0x10a4>)
 80036c4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80036c8:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 80036cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036d0:	edc7 7a5b 	vstr	s15, [r7, #364]	; 0x16c
		  errd_yaw = (err_yaw - prev_err_yaw)/SAMPLE_PERIOD;
 80036d4:	ed97 7a5b 	vldr	s14, [r7, #364]	; 0x16c
 80036d8:	edd7 7a77 	vldr	s15, [r7, #476]	; 0x1dc
 80036dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036e0:	eddf 6a95 	vldr	s13, [pc, #596]	; 8003938 <Start_Control+0x10a0>
 80036e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036e8:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
		  prev_err_yaw = err_yaw;
 80036ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80036f0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
		  control_yaw = P_yaw * err_yaw + D_yaw * errd_yaw;
 80036f4:	ed97 7a76 	vldr	s14, [r7, #472]	; 0x1d8
 80036f8:	edd7 7a5b 	vldr	s15, [r7, #364]	; 0x16c
 80036fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003700:	edd7 6a75 	vldr	s13, [r7, #468]	; 0x1d4
 8003704:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 8003708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800370c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003710:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164



		  if(RX_arm > 1000){ // arming turn on
 8003714:	4b8a      	ldr	r3, [pc, #552]	; (8003940 <Start_Control+0x10a8>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800371c:	f240 80ac 	bls.w	8003878 <Start_Control+0xfe0>
			  uart_telemetria = 0;
 8003720:	4b88      	ldr	r3, [pc, #544]	; (8003944 <Start_Control+0x10ac>)
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
//			  ref2 = (uint16_t)(M_throttle + control_yaw);
//			  ref3 = (uint16_t)(M_throttle - control_yaw);
//			  ref4 = (uint16_t)(M_throttle + control_yaw);

			  //all together
			  ref1 = (uint16_t)(M_throttle - control_yaw - control_pitch + control_roll);
 8003726:	4b88      	ldr	r3, [pc, #544]	; (8003948 <Start_Control+0x10b0>)
 8003728:	ed93 7a00 	vldr	s14, [r3]
 800372c:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8003730:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003734:	edd7 7a6d 	vldr	s15, [r7, #436]	; 0x1b4
 8003738:	ee37 7a67 	vsub.f32	s14, s14, s15
 800373c:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 8003740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003748:	ee17 3a90 	vmov	r3, s15
 800374c:	b29a      	uxth	r2, r3
 800374e:	4b7f      	ldr	r3, [pc, #508]	; (800394c <Start_Control+0x10b4>)
 8003750:	801a      	strh	r2, [r3, #0]
			  ref2 = (uint16_t)(M_throttle + control_yaw - control_pitch - control_roll);
 8003752:	4b7d      	ldr	r3, [pc, #500]	; (8003948 <Start_Control+0x10b0>)
 8003754:	ed93 7a00 	vldr	s14, [r3]
 8003758:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 800375c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003760:	edd7 7a6d 	vldr	s15, [r7, #436]	; 0x1b4
 8003764:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003768:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 800376c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003774:	ee17 3a90 	vmov	r3, s15
 8003778:	b29a      	uxth	r2, r3
 800377a:	4b75      	ldr	r3, [pc, #468]	; (8003950 <Start_Control+0x10b8>)
 800377c:	801a      	strh	r2, [r3, #0]
			  ref3 = (uint16_t)(M_throttle - control_yaw + control_pitch - control_roll);
 800377e:	4b72      	ldr	r3, [pc, #456]	; (8003948 <Start_Control+0x10b0>)
 8003780:	ed93 7a00 	vldr	s14, [r3]
 8003784:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8003788:	ee37 7a67 	vsub.f32	s14, s14, s15
 800378c:	edd7 7a6d 	vldr	s15, [r7, #436]	; 0x1b4
 8003790:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003794:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 8003798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800379c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037a0:	ee17 3a90 	vmov	r3, s15
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	4b6b      	ldr	r3, [pc, #428]	; (8003954 <Start_Control+0x10bc>)
 80037a8:	801a      	strh	r2, [r3, #0]
			  ref4 = (uint16_t)(M_throttle + control_yaw + control_pitch + control_roll);
 80037aa:	4b67      	ldr	r3, [pc, #412]	; (8003948 <Start_Control+0x10b0>)
 80037ac:	ed93 7a00 	vldr	s14, [r3]
 80037b0:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 80037b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b8:	edd7 7a6d 	vldr	s15, [r7, #436]	; 0x1b4
 80037bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037c0:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 80037c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037cc:	ee17 3a90 	vmov	r3, s15
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	4b61      	ldr	r3, [pc, #388]	; (8003958 <Start_Control+0x10c0>)
 80037d4:	801a      	strh	r2, [r3, #0]
//			  ref2 = (uint16_t)(M_throttle);
//			  ref3 = (uint16_t)(M_throttle);
//			  ref4 = (uint16_t)(M_throttle);

			  // minimum limit for motor refs
			  if(ref1<550) ref1 = 550;
 80037d6:	4b5d      	ldr	r3, [pc, #372]	; (800394c <Start_Control+0x10b4>)
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	f240 2225 	movw	r2, #549	; 0x225
 80037de:	4293      	cmp	r3, r2
 80037e0:	d803      	bhi.n	80037ea <Start_Control+0xf52>
 80037e2:	4b5a      	ldr	r3, [pc, #360]	; (800394c <Start_Control+0x10b4>)
 80037e4:	f240 2226 	movw	r2, #550	; 0x226
 80037e8:	801a      	strh	r2, [r3, #0]
			  if(ref2<550) ref2 = 550;
 80037ea:	4b59      	ldr	r3, [pc, #356]	; (8003950 <Start_Control+0x10b8>)
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	f240 2225 	movw	r2, #549	; 0x225
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d803      	bhi.n	80037fe <Start_Control+0xf66>
 80037f6:	4b56      	ldr	r3, [pc, #344]	; (8003950 <Start_Control+0x10b8>)
 80037f8:	f240 2226 	movw	r2, #550	; 0x226
 80037fc:	801a      	strh	r2, [r3, #0]
			  if(ref3<550) ref3 = 550;
 80037fe:	4b55      	ldr	r3, [pc, #340]	; (8003954 <Start_Control+0x10bc>)
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	f240 2225 	movw	r2, #549	; 0x225
 8003806:	4293      	cmp	r3, r2
 8003808:	d803      	bhi.n	8003812 <Start_Control+0xf7a>
 800380a:	4b52      	ldr	r3, [pc, #328]	; (8003954 <Start_Control+0x10bc>)
 800380c:	f240 2226 	movw	r2, #550	; 0x226
 8003810:	801a      	strh	r2, [r3, #0]
			  if(ref4<550) ref4 = 550;
 8003812:	4b51      	ldr	r3, [pc, #324]	; (8003958 <Start_Control+0x10c0>)
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	f240 2225 	movw	r2, #549	; 0x225
 800381a:	4293      	cmp	r3, r2
 800381c:	d803      	bhi.n	8003826 <Start_Control+0xf8e>
 800381e:	4b4e      	ldr	r3, [pc, #312]	; (8003958 <Start_Control+0x10c0>)
 8003820:	f240 2226 	movw	r2, #550	; 0x226
 8003824:	801a      	strh	r2, [r3, #0]

			  // maximum limit for motor refs
			  if(ref1>950) ref1 = 950;
 8003826:	4b49      	ldr	r3, [pc, #292]	; (800394c <Start_Control+0x10b4>)
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	f240 32b6 	movw	r2, #950	; 0x3b6
 800382e:	4293      	cmp	r3, r2
 8003830:	d903      	bls.n	800383a <Start_Control+0xfa2>
 8003832:	4b46      	ldr	r3, [pc, #280]	; (800394c <Start_Control+0x10b4>)
 8003834:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003838:	801a      	strh	r2, [r3, #0]
			  if(ref2>950) ref2 = 950;
 800383a:	4b45      	ldr	r3, [pc, #276]	; (8003950 <Start_Control+0x10b8>)
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003842:	4293      	cmp	r3, r2
 8003844:	d903      	bls.n	800384e <Start_Control+0xfb6>
 8003846:	4b42      	ldr	r3, [pc, #264]	; (8003950 <Start_Control+0x10b8>)
 8003848:	f240 32b6 	movw	r2, #950	; 0x3b6
 800384c:	801a      	strh	r2, [r3, #0]
			  if(ref3>950) ref3 = 950;
 800384e:	4b41      	ldr	r3, [pc, #260]	; (8003954 <Start_Control+0x10bc>)
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003856:	4293      	cmp	r3, r2
 8003858:	d903      	bls.n	8003862 <Start_Control+0xfca>
 800385a:	4b3e      	ldr	r3, [pc, #248]	; (8003954 <Start_Control+0x10bc>)
 800385c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003860:	801a      	strh	r2, [r3, #0]
			  if(ref4>950) ref4 = 950;
 8003862:	4b3d      	ldr	r3, [pc, #244]	; (8003958 <Start_Control+0x10c0>)
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	f240 32b6 	movw	r2, #950	; 0x3b6
 800386a:	4293      	cmp	r3, r2
 800386c:	d92d      	bls.n	80038ca <Start_Control+0x1032>
 800386e:	4b3a      	ldr	r3, [pc, #232]	; (8003958 <Start_Control+0x10c0>)
 8003870:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003874:	801a      	strh	r2, [r3, #0]
 8003876:	e028      	b.n	80038ca <Start_Control+0x1032>

		  }
		  else{ //arming turn off
			  uart_telemetria = 1;
 8003878:	4b32      	ldr	r3, [pc, #200]	; (8003944 <Start_Control+0x10ac>)
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
			  if(new_P == 1){
 800387e:	4b37      	ldr	r3, [pc, #220]	; (800395c <Start_Control+0x10c4>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d106      	bne.n	8003894 <Start_Control+0xffc>
				  P_yaw = telem_P;
 8003886:	4b36      	ldr	r3, [pc, #216]	; (8003960 <Start_Control+0x10c8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
				  new_P = 0;
 800388e:	4b33      	ldr	r3, [pc, #204]	; (800395c <Start_Control+0x10c4>)
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
			  }
			  if(new_D == 1){
 8003894:	4b33      	ldr	r3, [pc, #204]	; (8003964 <Start_Control+0x10cc>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d106      	bne.n	80038aa <Start_Control+0x1012>
				  D_yaw = telem_D;
 800389c:	4b32      	ldr	r3, [pc, #200]	; (8003968 <Start_Control+0x10d0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
				  new_D = 0;
 80038a4:	4b2f      	ldr	r3, [pc, #188]	; (8003964 <Start_Control+0x10cc>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]
			  }
			  ref1 = 550;
 80038aa:	4b28      	ldr	r3, [pc, #160]	; (800394c <Start_Control+0x10b4>)
 80038ac:	f240 2226 	movw	r2, #550	; 0x226
 80038b0:	801a      	strh	r2, [r3, #0]
			  ref2 = 550;
 80038b2:	4b27      	ldr	r3, [pc, #156]	; (8003950 <Start_Control+0x10b8>)
 80038b4:	f240 2226 	movw	r2, #550	; 0x226
 80038b8:	801a      	strh	r2, [r3, #0]
			  ref3 = 550;
 80038ba:	4b26      	ldr	r3, [pc, #152]	; (8003954 <Start_Control+0x10bc>)
 80038bc:	f240 2226 	movw	r2, #550	; 0x226
 80038c0:	801a      	strh	r2, [r3, #0]
			  ref4 = 550;
 80038c2:	4b25      	ldr	r3, [pc, #148]	; (8003958 <Start_Control+0x10c0>)
 80038c4:	f240 2226 	movw	r2, #550	; 0x226
 80038c8:	801a      	strh	r2, [r3, #0]
		  }

		  //telemetria
		  telemetria_float[0] = hz;
 80038ca:	4b28      	ldr	r3, [pc, #160]	; (800396c <Start_Control+0x10d4>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80038d2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80038d6:	601a      	str	r2, [r3, #0]
		  telemetria_float[1] = h0;
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <Start_Control+0x10d8>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80038e0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80038e4:	605a      	str	r2, [r3, #4]
		  telemetria_float[2] = p0;
 80038e6:	4b23      	ldr	r3, [pc, #140]	; (8003974 <Start_Control+0x10dc>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80038ee:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80038f2:	609a      	str	r2, [r3, #8]
		  xQueueSendToFront(telemetria_Queue, (void*)&telemetria_float, 0);
 80038f4:	4b20      	ldr	r3, [pc, #128]	; (8003978 <Start_Control+0x10e0>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80038fc:	2301      	movs	r3, #1
 80038fe:	2200      	movs	r2, #0
 8003900:	f00b fade 	bl	800eec0 <xQueueGenericSend>


		  set_duty_Oneshot42(&htim3, ref1, ref2, ref3, ref4);
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <Start_Control+0x10b4>)
 8003906:	8819      	ldrh	r1, [r3, #0]
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <Start_Control+0x10b8>)
 800390a:	881a      	ldrh	r2, [r3, #0]
 800390c:	4b11      	ldr	r3, [pc, #68]	; (8003954 <Start_Control+0x10bc>)
 800390e:	8818      	ldrh	r0, [r3, #0]
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <Start_Control+0x10c0>)
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	4603      	mov	r3, r0
 8003918:	4818      	ldr	r0, [pc, #96]	; (800397c <Start_Control+0x10e4>)
 800391a:	f002 fa3a 	bl	8005d92 <set_duty_Oneshot42>
		  mytimer = __HAL_TIM_GET_COUNTER(&htim7);
 800391e:	4b18      	ldr	r3, [pc, #96]	; (8003980 <Start_Control+0x10e8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	461a      	mov	r2, r3
 8003926:	4b17      	ldr	r3, [pc, #92]	; (8003984 <Start_Control+0x10ec>)
 8003928:	601a      	str	r2, [r3, #0]
	osDelay(4);
 800392a:	2004      	movs	r0, #4
 800392c:	f00b f93d 	bl	800ebaa <osDelay>
  {
 8003930:	f7ff ba15 	b.w	8002d5e <Start_Control+0x4c6>
 8003934:	20000b60 	.word	0x20000b60
 8003938:	3ba3d70a 	.word	0x3ba3d70a
 800393c:	20000a0c 	.word	0x20000a0c
 8003940:	20000c86 	.word	0x20000c86
 8003944:	20000be2 	.word	0x20000be2
 8003948:	20000c88 	.word	0x20000c88
 800394c:	20000c30 	.word	0x20000c30
 8003950:	20000c32 	.word	0x20000c32
 8003954:	20000c34 	.word	0x20000c34
 8003958:	20000c36 	.word	0x20000c36
 800395c:	20000bec 	.word	0x20000bec
 8003960:	20000be4 	.word	0x20000be4
 8003964:	20000bed 	.word	0x20000bed
 8003968:	20000be8 	.word	0x20000be8
 800396c:	20000ab4 	.word	0x20000ab4
 8003970:	20000ab8 	.word	0x20000ab8
 8003974:	20000abc 	.word	0x20000abc
 8003978:	20000c98 	.word	0x20000c98
 800397c:	2000072c 	.word	0x2000072c
 8003980:	20000804 	.word	0x20000804
 8003984:	20000bf8 	.word	0x20000bf8

08003988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800398c:	b672      	cpsid	i
}
 800398e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003990:	e7fe      	b.n	8003990 <Error_Handler+0x8>
	...

08003994 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <HAL_MspInit+0x54>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <HAL_MspInit+0x54>)
 80039a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039a8:	6453      	str	r3, [r2, #68]	; 0x44
 80039aa:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <HAL_MspInit+0x54>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_MspInit+0x54>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <HAL_MspInit+0x54>)
 80039c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c4:	6413      	str	r3, [r2, #64]	; 0x40
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <HAL_MspInit+0x54>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039d2:	2200      	movs	r2, #0
 80039d4:	210f      	movs	r1, #15
 80039d6:	f06f 0001 	mvn.w	r0, #1
 80039da:	f002 fe6c 	bl	80066b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800

080039ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08e      	sub	sp, #56	; 0x38
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a45      	ldr	r2, [pc, #276]	; (8003b20 <HAL_ADC_MspInit+0x134>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d128      	bne.n	8003a60 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	623b      	str	r3, [r7, #32]
 8003a12:	4b44      	ldr	r3, [pc, #272]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	4a43      	ldr	r2, [pc, #268]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a1e:	4b41      	ldr	r3, [pc, #260]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	623b      	str	r3, [r7, #32]
 8003a28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	4b3d      	ldr	r3, [pc, #244]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	4a3c      	ldr	r2, [pc, #240]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3a:	4b3a      	ldr	r3, [pc, #232]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	61fb      	str	r3, [r7, #28]
 8003a44:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CRNT_Pin;
 8003a46:	2320      	movs	r3, #32
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CRNT_GPIO_Port, &GPIO_InitStruct);
 8003a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a56:	4619      	mov	r1, r3
 8003a58:	4833      	ldr	r0, [pc, #204]	; (8003b28 <HAL_ADC_MspInit+0x13c>)
 8003a5a:	f003 fa65 	bl	8006f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003a5e:	e05a      	b.n	8003b16 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a31      	ldr	r2, [pc, #196]	; (8003b2c <HAL_ADC_MspInit+0x140>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d128      	bne.n	8003abc <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	4a2c      	ldr	r2, [pc, #176]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a78:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7a:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	4a25      	ldr	r2, [pc, #148]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6313      	str	r3, [r2, #48]	; 0x30
 8003a96:	4b23      	ldr	r3, [pc, #140]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003aa2:	2310      	movs	r3, #16
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	481c      	ldr	r0, [pc, #112]	; (8003b28 <HAL_ADC_MspInit+0x13c>)
 8003ab6:	f003 fa37 	bl	8006f28 <HAL_GPIO_Init>
}
 8003aba:	e02c      	b.n	8003b16 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_ADC_MspInit+0x144>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d127      	bne.n	8003b16 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	4a15      	ldr	r2, [pc, #84]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003ad0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ad6:	4b13      	ldr	r3, [pc, #76]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	4a0e      	ldr	r2, [pc, #56]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003aec:	f043 0304 	orr.w	r3, r3, #4
 8003af0:	6313      	str	r3, [r2, #48]	; 0x30
 8003af2:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <HAL_ADC_MspInit+0x138>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003afe:	2308      	movs	r3, #8
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b02:	2303      	movs	r3, #3
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4808      	ldr	r0, [pc, #32]	; (8003b34 <HAL_ADC_MspInit+0x148>)
 8003b12:	f003 fa09 	bl	8006f28 <HAL_GPIO_Init>
}
 8003b16:	bf00      	nop
 8003b18:	3738      	adds	r7, #56	; 0x38
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40012000 	.word	0x40012000
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40020000 	.word	0x40020000
 8003b2c:	40012100 	.word	0x40012100
 8003b30:	40012200 	.word	0x40012200
 8003b34:	40020800 	.word	0x40020800

08003b38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08e      	sub	sp, #56	; 0x38
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	60da      	str	r2, [r3, #12]
 8003b4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a5c      	ldr	r2, [pc, #368]	; (8003cc8 <HAL_I2C_MspInit+0x190>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d12d      	bne.n	8003bb6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	623b      	str	r3, [r7, #32]
 8003b5e:	4b5b      	ldr	r3, [pc, #364]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	4a5a      	ldr	r2, [pc, #360]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003b64:	f043 0302 	orr.w	r3, r3, #2
 8003b68:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6a:	4b58      	ldr	r3, [pc, #352]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	623b      	str	r3, [r7, #32]
 8003b74:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAGN_SCL_Pin|MAGN_SDA_Pin;
 8003b76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b7c:	2312      	movs	r3, #18
 8003b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b84:	2303      	movs	r3, #3
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b88:	2304      	movs	r3, #4
 8003b8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b90:	4619      	mov	r1, r3
 8003b92:	484f      	ldr	r0, [pc, #316]	; (8003cd0 <HAL_I2C_MspInit+0x198>)
 8003b94:	f003 f9c8 	bl	8006f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	4a4a      	ldr	r2, [pc, #296]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba8:	4b48      	ldr	r3, [pc, #288]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb0:	61fb      	str	r3, [r7, #28]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003bb4:	e083      	b.n	8003cbe <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a46      	ldr	r2, [pc, #280]	; (8003cd4 <HAL_I2C_MspInit+0x19c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d12d      	bne.n	8003c1c <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	4b41      	ldr	r3, [pc, #260]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	4a40      	ldr	r2, [pc, #256]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003bca:	f043 0302 	orr.w	r3, r3, #2
 8003bce:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd0:	4b3e      	ldr	r3, [pc, #248]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PRESS_SCL_Pin|PRESS_SDA_Pin;
 8003bdc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003be2:	2312      	movs	r3, #18
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bea:	2303      	movs	r3, #3
 8003bec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003bee:	2304      	movs	r3, #4
 8003bf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4835      	ldr	r0, [pc, #212]	; (8003cd0 <HAL_I2C_MspInit+0x198>)
 8003bfa:	f003 f995 	bl	8006f28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	4b32      	ldr	r3, [pc, #200]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	4a31      	ldr	r2, [pc, #196]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003c08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c0e:	4b2f      	ldr	r3, [pc, #188]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	697b      	ldr	r3, [r7, #20]
}
 8003c1a:	e050      	b.n	8003cbe <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2d      	ldr	r2, [pc, #180]	; (8003cd8 <HAL_I2C_MspInit+0x1a0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d14b      	bne.n	8003cbe <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	4a27      	ldr	r2, [pc, #156]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003c30:	f043 0304 	orr.w	r3, r3, #4
 8003c34:	6313      	str	r3, [r2, #48]	; 0x30
 8003c36:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	4b21      	ldr	r3, [pc, #132]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	4a20      	ldr	r2, [pc, #128]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6313      	str	r3, [r2, #48]	; 0x30
 8003c52:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c64:	2312      	movs	r3, #18
 8003c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c70:	2304      	movs	r3, #4
 8003c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4818      	ldr	r0, [pc, #96]	; (8003cdc <HAL_I2C_MspInit+0x1a4>)
 8003c7c:	f003 f954 	bl	8006f28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c86:	2312      	movs	r3, #18
 8003c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c92:	2304      	movs	r3, #4
 8003c94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4810      	ldr	r0, [pc, #64]	; (8003ce0 <HAL_I2C_MspInit+0x1a8>)
 8003c9e:	f003 f943 	bl	8006f28 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a08      	ldr	r2, [pc, #32]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003cac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb2:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <HAL_I2C_MspInit+0x194>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
}
 8003cbe:	bf00      	nop
 8003cc0:	3738      	adds	r7, #56	; 0x38
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40005400 	.word	0x40005400
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	40020400 	.word	0x40020400
 8003cd4:	40005800 	.word	0x40005800
 8003cd8:	40005c00 	.word	0x40005c00
 8003cdc:	40020800 	.word	0x40020800
 8003ce0:	40020000 	.word	0x40020000

08003ce4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	; 0x28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cec:	f107 0314 	add.w	r3, r7, #20
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <HAL_SPI_MspInit+0x84>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d12c      	bne.n	8003d60 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <HAL_SPI_MspInit+0x88>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	4a17      	ldr	r2, [pc, #92]	; (8003d6c <HAL_SPI_MspInit+0x88>)
 8003d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d14:	6413      	str	r3, [r2, #64]	; 0x40
 8003d16:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <HAL_SPI_MspInit+0x88>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <HAL_SPI_MspInit+0x88>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	4a10      	ldr	r2, [pc, #64]	; (8003d6c <HAL_SPI_MspInit+0x88>)
 8003d2c:	f043 0302 	orr.w	r3, r3, #2
 8003d30:	6313      	str	r3, [r2, #48]	; 0x30
 8003d32:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <HAL_SPI_MspInit+0x88>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8003d3e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	2302      	movs	r3, #2
 8003d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d50:	2305      	movs	r3, #5
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d54:	f107 0314 	add.w	r3, r7, #20
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4805      	ldr	r0, [pc, #20]	; (8003d70 <HAL_SPI_MspInit+0x8c>)
 8003d5c:	f003 f8e4 	bl	8006f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003d60:	bf00      	nop
 8003d62:	3728      	adds	r7, #40	; 0x28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40003800 	.word	0x40003800
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40020400 	.word	0x40020400

08003d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08e      	sub	sp, #56	; 0x38
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d94:	d134      	bne.n	8003e00 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	623b      	str	r3, [r7, #32]
 8003d9a:	4b55      	ldr	r3, [pc, #340]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a54      	ldr	r2, [pc, #336]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
 8003da6:	4b52      	ldr	r3, [pc, #328]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	623b      	str	r3, [r7, #32]
 8003db0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	4b4e      	ldr	r3, [pc, #312]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	4a4d      	ldr	r2, [pc, #308]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc2:	4b4b      	ldr	r3, [pc, #300]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003dde:	2301      	movs	r3, #1
 8003de0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003de6:	4619      	mov	r1, r3
 8003de8:	4842      	ldr	r0, [pc, #264]	; (8003ef4 <HAL_TIM_Base_MspInit+0x180>)
 8003dea:	f003 f89d 	bl	8006f28 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003dee:	2200      	movs	r2, #0
 8003df0:	2105      	movs	r1, #5
 8003df2:	201c      	movs	r0, #28
 8003df4:	f002 fc5f 	bl	80066b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003df8:	201c      	movs	r0, #28
 8003dfa:	f002 fc78 	bl	80066ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003dfe:	e072      	b.n	8003ee6 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM3)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a3c      	ldr	r2, [pc, #240]	; (8003ef8 <HAL_TIM_Base_MspInit+0x184>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d10e      	bne.n	8003e28 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61bb      	str	r3, [r7, #24]
 8003e0e:	4b38      	ldr	r3, [pc, #224]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4a37      	ldr	r2, [pc, #220]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003e14:	f043 0302 	orr.w	r3, r3, #2
 8003e18:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1a:	4b35      	ldr	r3, [pc, #212]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	69bb      	ldr	r3, [r7, #24]
}
 8003e26:	e05e      	b.n	8003ee6 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM4)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a33      	ldr	r2, [pc, #204]	; (8003efc <HAL_TIM_Base_MspInit+0x188>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d10e      	bne.n	8003e50 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	4a2d      	ldr	r2, [pc, #180]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003e3c:	f043 0304 	orr.w	r3, r3, #4
 8003e40:	6413      	str	r3, [r2, #64]	; 0x40
 8003e42:	4b2b      	ldr	r3, [pc, #172]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	697b      	ldr	r3, [r7, #20]
}
 8003e4e:	e04a      	b.n	8003ee6 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM6)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2a      	ldr	r2, [pc, #168]	; (8003f00 <HAL_TIM_Base_MspInit+0x18c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d116      	bne.n	8003e88 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	4a23      	ldr	r2, [pc, #140]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003e64:	f043 0310 	orr.w	r3, r3, #16
 8003e68:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6a:	4b21      	ldr	r3, [pc, #132]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003e76:	2200      	movs	r2, #0
 8003e78:	2105      	movs	r1, #5
 8003e7a:	2036      	movs	r0, #54	; 0x36
 8003e7c:	f002 fc1b 	bl	80066b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e80:	2036      	movs	r0, #54	; 0x36
 8003e82:	f002 fc34 	bl	80066ee <HAL_NVIC_EnableIRQ>
}
 8003e86:	e02e      	b.n	8003ee6 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM7)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <HAL_TIM_Base_MspInit+0x190>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d116      	bne.n	8003ec0 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	4a15      	ldr	r2, [pc, #84]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003e9c:	f043 0320 	orr.w	r3, r3, #32
 8003ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ea2:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2105      	movs	r1, #5
 8003eb2:	2037      	movs	r0, #55	; 0x37
 8003eb4:	f002 fbff 	bl	80066b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003eb8:	2037      	movs	r0, #55	; 0x37
 8003eba:	f002 fc18 	bl	80066ee <HAL_NVIC_EnableIRQ>
}
 8003ebe:	e012      	b.n	8003ee6 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM10)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a10      	ldr	r2, [pc, #64]	; (8003f08 <HAL_TIM_Base_MspInit+0x194>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d10d      	bne.n	8003ee6 <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	4a07      	ldr	r2, [pc, #28]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eda:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <HAL_TIM_Base_MspInit+0x17c>)
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
}
 8003ee6:	bf00      	nop
 8003ee8:	3738      	adds	r7, #56	; 0x38
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40020000 	.word	0x40020000
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800
 8003f00:	40001000 	.word	0x40001000
 8003f04:	40001400 	.word	0x40001400
 8003f08:	40014400 	.word	0x40014400

08003f0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <HAL_TIM_MspPostInit+0xa4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d13b      	bne.n	8003fa6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_TIM_MspPostInit+0xa8>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <HAL_TIM_MspPostInit+0xa8>)
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3e:	4b1d      	ldr	r3, [pc, #116]	; (8003fb4 <HAL_TIM_MspPostInit+0xa8>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_TIM_MspPostInit+0xa8>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <HAL_TIM_MspPostInit+0xa8>)
 8003f54:	f043 0302 	orr.w	r3, r3, #2
 8003f58:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5a:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <HAL_TIM_MspPostInit+0xa8>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8003f66:	23c0      	movs	r3, #192	; 0xc0
 8003f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f72:	2300      	movs	r3, #0
 8003f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f76:	2302      	movs	r3, #2
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7a:	f107 0314 	add.w	r3, r7, #20
 8003f7e:	4619      	mov	r1, r3
 8003f80:	480d      	ldr	r0, [pc, #52]	; (8003fb8 <HAL_TIM_MspPostInit+0xac>)
 8003f82:	f002 ffd1 	bl	8006f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 8003f86:	2303      	movs	r3, #3
 8003f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f92:	2300      	movs	r3, #0
 8003f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f96:	2302      	movs	r3, #2
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9a:	f107 0314 	add.w	r3, r7, #20
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4806      	ldr	r0, [pc, #24]	; (8003fbc <HAL_TIM_MspPostInit+0xb0>)
 8003fa2:	f002 ffc1 	bl	8006f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003fa6:	bf00      	nop
 8003fa8:	3728      	adds	r7, #40	; 0x28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40000400 	.word	0x40000400
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40020000 	.word	0x40020000
 8003fbc:	40020400 	.word	0x40020400

08003fc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b090      	sub	sp, #64	; 0x40
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	60da      	str	r2, [r3, #12]
 8003fd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a81      	ldr	r2, [pc, #516]	; (80041e4 <HAL_UART_MspInit+0x224>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d15d      	bne.n	800409e <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe6:	4b80      	ldr	r3, [pc, #512]	; (80041e8 <HAL_UART_MspInit+0x228>)
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	4a7f      	ldr	r2, [pc, #508]	; (80041e8 <HAL_UART_MspInit+0x228>)
 8003fec:	f043 0310 	orr.w	r3, r3, #16
 8003ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff2:	4b7d      	ldr	r3, [pc, #500]	; (80041e8 <HAL_UART_MspInit+0x228>)
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
 8004002:	4b79      	ldr	r3, [pc, #484]	; (80041e8 <HAL_UART_MspInit+0x228>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	4a78      	ldr	r2, [pc, #480]	; (80041e8 <HAL_UART_MspInit+0x228>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6313      	str	r3, [r2, #48]	; 0x30
 800400e:	4b76      	ldr	r3, [pc, #472]	; (80041e8 <HAL_UART_MspInit+0x228>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RECEIVER_TX_Pin|RECEIVER_RX_Pin;
 800401a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004020:	2302      	movs	r3, #2
 8004022:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004024:	2300      	movs	r3, #0
 8004026:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004028:	2303      	movs	r3, #3
 800402a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800402c:	2307      	movs	r3, #7
 800402e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004034:	4619      	mov	r1, r3
 8004036:	486d      	ldr	r0, [pc, #436]	; (80041ec <HAL_UART_MspInit+0x22c>)
 8004038:	f002 ff76 	bl	8006f28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800403c:	4b6c      	ldr	r3, [pc, #432]	; (80041f0 <HAL_UART_MspInit+0x230>)
 800403e:	4a6d      	ldr	r2, [pc, #436]	; (80041f4 <HAL_UART_MspInit+0x234>)
 8004040:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004042:	4b6b      	ldr	r3, [pc, #428]	; (80041f0 <HAL_UART_MspInit+0x230>)
 8004044:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004048:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800404a:	4b69      	ldr	r3, [pc, #420]	; (80041f0 <HAL_UART_MspInit+0x230>)
 800404c:	2200      	movs	r2, #0
 800404e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004050:	4b67      	ldr	r3, [pc, #412]	; (80041f0 <HAL_UART_MspInit+0x230>)
 8004052:	2200      	movs	r2, #0
 8004054:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004056:	4b66      	ldr	r3, [pc, #408]	; (80041f0 <HAL_UART_MspInit+0x230>)
 8004058:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800405c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800405e:	4b64      	ldr	r3, [pc, #400]	; (80041f0 <HAL_UART_MspInit+0x230>)
 8004060:	2200      	movs	r2, #0
 8004062:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004064:	4b62      	ldr	r3, [pc, #392]	; (80041f0 <HAL_UART_MspInit+0x230>)
 8004066:	2200      	movs	r2, #0
 8004068:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800406a:	4b61      	ldr	r3, [pc, #388]	; (80041f0 <HAL_UART_MspInit+0x230>)
 800406c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004070:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004072:	4b5f      	ldr	r3, [pc, #380]	; (80041f0 <HAL_UART_MspInit+0x230>)
 8004074:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004078:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800407a:	4b5d      	ldr	r3, [pc, #372]	; (80041f0 <HAL_UART_MspInit+0x230>)
 800407c:	2200      	movs	r2, #0
 800407e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004080:	485b      	ldr	r0, [pc, #364]	; (80041f0 <HAL_UART_MspInit+0x230>)
 8004082:	f002 fb4f 	bl	8006724 <HAL_DMA_Init>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800408c:	f7ff fc7c 	bl	8003988 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a57      	ldr	r2, [pc, #348]	; (80041f0 <HAL_UART_MspInit+0x230>)
 8004094:	639a      	str	r2, [r3, #56]	; 0x38
 8004096:	4a56      	ldr	r2, [pc, #344]	; (80041f0 <HAL_UART_MspInit+0x230>)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800409c:	e09d      	b.n	80041da <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART2)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a55      	ldr	r2, [pc, #340]	; (80041f8 <HAL_UART_MspInit+0x238>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d134      	bne.n	8004112 <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART2_CLK_ENABLE();
 80040a8:	2300      	movs	r3, #0
 80040aa:	623b      	str	r3, [r7, #32]
 80040ac:	4b4e      	ldr	r3, [pc, #312]	; (80041e8 <HAL_UART_MspInit+0x228>)
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	4a4d      	ldr	r2, [pc, #308]	; (80041e8 <HAL_UART_MspInit+0x228>)
 80040b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b6:	6413      	str	r3, [r2, #64]	; 0x40
 80040b8:	4b4b      	ldr	r3, [pc, #300]	; (80041e8 <HAL_UART_MspInit+0x228>)
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c0:	623b      	str	r3, [r7, #32]
 80040c2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <HAL_UART_MspInit+0x228>)
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	4a46      	ldr	r2, [pc, #280]	; (80041e8 <HAL_UART_MspInit+0x228>)
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	6313      	str	r3, [r2, #48]	; 0x30
 80040d4:	4b44      	ldr	r3, [pc, #272]	; (80041e8 <HAL_UART_MspInit+0x228>)
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	61fb      	str	r3, [r7, #28]
 80040de:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040e0:	230c      	movs	r3, #12
 80040e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e4:	2302      	movs	r3, #2
 80040e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ec:	2303      	movs	r3, #3
 80040ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040f0:	2307      	movs	r3, #7
 80040f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040f8:	4619      	mov	r1, r3
 80040fa:	483c      	ldr	r0, [pc, #240]	; (80041ec <HAL_UART_MspInit+0x22c>)
 80040fc:	f002 ff14 	bl	8006f28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004100:	2200      	movs	r2, #0
 8004102:	2105      	movs	r1, #5
 8004104:	2026      	movs	r0, #38	; 0x26
 8004106:	f002 fad6 	bl	80066b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800410a:	2026      	movs	r0, #38	; 0x26
 800410c:	f002 faef 	bl	80066ee <HAL_NVIC_EnableIRQ>
}
 8004110:	e063      	b.n	80041da <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART3)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a39      	ldr	r2, [pc, #228]	; (80041fc <HAL_UART_MspInit+0x23c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d12d      	bne.n	8004178 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800411c:	2300      	movs	r3, #0
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	4b31      	ldr	r3, [pc, #196]	; (80041e8 <HAL_UART_MspInit+0x228>)
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	4a30      	ldr	r2, [pc, #192]	; (80041e8 <HAL_UART_MspInit+0x228>)
 8004126:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800412a:	6413      	str	r3, [r2, #64]	; 0x40
 800412c:	4b2e      	ldr	r3, [pc, #184]	; (80041e8 <HAL_UART_MspInit+0x228>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	4b2a      	ldr	r3, [pc, #168]	; (80041e8 <HAL_UART_MspInit+0x228>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	4a29      	ldr	r2, [pc, #164]	; (80041e8 <HAL_UART_MspInit+0x228>)
 8004142:	f043 0304 	orr.w	r3, r3, #4
 8004146:	6313      	str	r3, [r2, #48]	; 0x30
 8004148:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <HAL_UART_MspInit+0x228>)
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8004154:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415a:	2302      	movs	r3, #2
 800415c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415e:	2300      	movs	r3, #0
 8004160:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004162:	2303      	movs	r3, #3
 8004164:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004166:	2307      	movs	r3, #7
 8004168:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800416a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800416e:	4619      	mov	r1, r3
 8004170:	4823      	ldr	r0, [pc, #140]	; (8004200 <HAL_UART_MspInit+0x240>)
 8004172:	f002 fed9 	bl	8006f28 <HAL_GPIO_Init>
}
 8004176:	e030      	b.n	80041da <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART6)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a21      	ldr	r2, [pc, #132]	; (8004204 <HAL_UART_MspInit+0x244>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d12b      	bne.n	80041da <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <HAL_UART_MspInit+0x228>)
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <HAL_UART_MspInit+0x228>)
 800418c:	f043 0320 	orr.w	r3, r3, #32
 8004190:	6453      	str	r3, [r2, #68]	; 0x44
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <HAL_UART_MspInit+0x228>)
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <HAL_UART_MspInit+0x228>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	4a10      	ldr	r2, [pc, #64]	; (80041e8 <HAL_UART_MspInit+0x228>)
 80041a8:	f043 0304 	orr.w	r3, r3, #4
 80041ac:	6313      	str	r3, [r2, #48]	; 0x30
 80041ae:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <HAL_UART_MspInit+0x228>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041ba:	23c0      	movs	r3, #192	; 0xc0
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041be:	2302      	movs	r3, #2
 80041c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c6:	2303      	movs	r3, #3
 80041c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80041ca:	2308      	movs	r3, #8
 80041cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041d2:	4619      	mov	r1, r3
 80041d4:	480a      	ldr	r0, [pc, #40]	; (8004200 <HAL_UART_MspInit+0x240>)
 80041d6:	f002 fea7 	bl	8006f28 <HAL_GPIO_Init>
}
 80041da:	bf00      	nop
 80041dc:	3740      	adds	r7, #64	; 0x40
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40011000 	.word	0x40011000
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40020000 	.word	0x40020000
 80041f0:	200009a4 	.word	0x200009a4
 80041f4:	40026440 	.word	0x40026440
 80041f8:	40004400 	.word	0x40004400
 80041fc:	40004800 	.word	0x40004800
 8004200:	40020800 	.word	0x40020800
 8004204:	40011400 	.word	0x40011400

08004208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800420c:	e7fe      	b.n	800420c <NMI_Handler+0x4>

0800420e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800420e:	b480      	push	{r7}
 8004210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004212:	e7fe      	b.n	8004212 <HardFault_Handler+0x4>

08004214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004218:	e7fe      	b.n	8004218 <MemManage_Handler+0x4>

0800421a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800421a:	b480      	push	{r7}
 800421c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800421e:	e7fe      	b.n	800421e <BusFault_Handler+0x4>

08004220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004224:	e7fe      	b.n	8004224 <UsageFault_Handler+0x4>

08004226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004226:	b480      	push	{r7}
 8004228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004238:	f001 febc 	bl	8005fb4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800423c:	f00b ff84 	bl	8010148 <xTaskGetSchedulerState>
 8004240:	4603      	mov	r3, r0
 8004242:	2b01      	cmp	r3, #1
 8004244:	d001      	beq.n	800424a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004246:	f00c fa47 	bl	80106d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}

0800424e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8004252:	2001      	movs	r0, #1
 8004254:	f003 f838 	bl	80072c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004258:	bf00      	nop
 800425a:	bd80      	pop	{r7, pc}

0800425c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_PRESS_Pin);
 8004260:	2004      	movs	r0, #4
 8004262:	f003 f831 	bl	80072c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004270:	4802      	ldr	r0, [pc, #8]	; (800427c <TIM2_IRQHandler+0x10>)
 8004272:	f005 fcaa 	bl	8009bca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	200006e4 	.word	0x200006e4

08004280 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004284:	4802      	ldr	r0, [pc, #8]	; (8004290 <USART2_IRQHandler+0x10>)
 8004286:	f006 fec1 	bl	800b00c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	200008d8 	.word	0x200008d8

08004294 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_GYRO_Pin);
 8004298:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800429c:	f003 f814 	bl	80072c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_ACC_Pin);
 80042a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80042a4:	f003 f810 	bl	80072c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_MAGN_Pin);
 80042a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80042ac:	f003 f80c 	bl	80072c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80042b0:	bf00      	nop
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80042b8:	4802      	ldr	r0, [pc, #8]	; (80042c4 <TIM6_DAC_IRQHandler+0x10>)
 80042ba:	f005 fc86 	bl	8009bca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80042be:	bf00      	nop
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	200007bc 	.word	0x200007bc

080042c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80042cc:	4802      	ldr	r0, [pc, #8]	; (80042d8 <TIM7_IRQHandler+0x10>)
 80042ce:	f005 fc7c 	bl	8009bca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000804 	.word	0x20000804

080042dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80042e0:	4802      	ldr	r0, [pc, #8]	; (80042ec <DMA2_Stream2_IRQHandler+0x10>)
 80042e2:	f002 fbb7 	bl	8006a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	200009a4 	.word	0x200009a4

080042f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return 1;
 80042f4:	2301      	movs	r3, #1
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <_kill>:

int _kill(int pid, int sig)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800430a:	f00c fc1f 	bl	8010b4c <__errno>
 800430e:	4603      	mov	r3, r0
 8004310:	2216      	movs	r2, #22
 8004312:	601a      	str	r2, [r3, #0]
  return -1;
 8004314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <_exit>:

void _exit (int status)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004328:	f04f 31ff 	mov.w	r1, #4294967295
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ffe7 	bl	8004300 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004332:	e7fe      	b.n	8004332 <_exit+0x12>

08004334 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	e00a      	b.n	800435c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004346:	f3af 8000 	nop.w
 800434a:	4601      	mov	r1, r0
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	60ba      	str	r2, [r7, #8]
 8004352:	b2ca      	uxtb	r2, r1
 8004354:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	3301      	adds	r3, #1
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	429a      	cmp	r2, r3
 8004362:	dbf0      	blt.n	8004346 <_read+0x12>
  }

  return len;
 8004364:	687b      	ldr	r3, [r7, #4]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b086      	sub	sp, #24
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e009      	b.n	8004394 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	60ba      	str	r2, [r7, #8]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	3301      	adds	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	429a      	cmp	r2, r3
 800439a:	dbf1      	blt.n	8004380 <_write+0x12>
  }
  return len;
 800439c:	687b      	ldr	r3, [r7, #4]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <_close>:

int _close(int file)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043ce:	605a      	str	r2, [r3, #4]
  return 0;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <_isatty>:

int _isatty(int file)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043e6:	2301      	movs	r3, #1
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004418:	4a14      	ldr	r2, [pc, #80]	; (800446c <_sbrk+0x5c>)
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <_sbrk+0x60>)
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004424:	4b13      	ldr	r3, [pc, #76]	; (8004474 <_sbrk+0x64>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800442c:	4b11      	ldr	r3, [pc, #68]	; (8004474 <_sbrk+0x64>)
 800442e:	4a12      	ldr	r2, [pc, #72]	; (8004478 <_sbrk+0x68>)
 8004430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <_sbrk+0x64>)
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4413      	add	r3, r2
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	429a      	cmp	r2, r3
 800443e:	d207      	bcs.n	8004450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004440:	f00c fb84 	bl	8010b4c <__errno>
 8004444:	4603      	mov	r3, r0
 8004446:	220c      	movs	r2, #12
 8004448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800444a:	f04f 33ff 	mov.w	r3, #4294967295
 800444e:	e009      	b.n	8004464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004450:	4b08      	ldr	r3, [pc, #32]	; (8004474 <_sbrk+0x64>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004456:	4b07      	ldr	r3, [pc, #28]	; (8004474 <_sbrk+0x64>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	4a05      	ldr	r2, [pc, #20]	; (8004474 <_sbrk+0x64>)
 8004460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004462:	68fb      	ldr	r3, [r7, #12]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20020000 	.word	0x20020000
 8004470:	00000400 	.word	0x00000400
 8004474:	20000c9c 	.word	0x20000c9c
 8004478:	20004a10 	.word	0x20004a10

0800447c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004480:	4b06      	ldr	r3, [pc, #24]	; (800449c <SystemInit+0x20>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004486:	4a05      	ldr	r2, [pc, #20]	; (800449c <SystemInit+0x20>)
 8004488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800448c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044a4:	480d      	ldr	r0, [pc, #52]	; (80044dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044a6:	490e      	ldr	r1, [pc, #56]	; (80044e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044a8:	4a0e      	ldr	r2, [pc, #56]	; (80044e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044ac:	e002      	b.n	80044b4 <LoopCopyDataInit>

080044ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044b2:	3304      	adds	r3, #4

080044b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044b8:	d3f9      	bcc.n	80044ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044ba:	4a0b      	ldr	r2, [pc, #44]	; (80044e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044bc:	4c0b      	ldr	r4, [pc, #44]	; (80044ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80044be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044c0:	e001      	b.n	80044c6 <LoopFillZerobss>

080044c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044c4:	3204      	adds	r2, #4

080044c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044c8:	d3fb      	bcc.n	80044c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80044ca:	f7ff ffd7 	bl	800447c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044ce:	f00c fb43 	bl	8010b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044d2:	f7fd f833 	bl	800153c <main>
  bx  lr    
 80044d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80044d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80044dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044e0:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 80044e4:	08016808 	.word	0x08016808
  ldr r2, =_sbss
 80044e8:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 80044ec:	20004a10 	.word	0x20004a10

080044f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044f0:	e7fe      	b.n	80044f0 <ADC_IRQHandler>
	...

080044f4 <altitudeKF>:
KF_Matrix22 Q = {0.25*SAMPLE_PERIOD*SAMPLE_PERIOD*SAMPLE_PERIOD*SAMPLE_PERIOD,0.5*SAMPLE_PERIOD*SAMPLE_PERIOD*SAMPLE_PERIOD,0.5*SAMPLE_PERIOD*SAMPLE_PERIOD*SAMPLE_PERIOD,SAMPLE_PERIOD*SAMPLE_PERIOD};
float R = 0.3*0.3;
float Lk = 0;
KF_Matrix22 eye = {1,0,0,1};

void altitudeKF(KF_Matrix21 prev_state, KF_Matrix21 *current_state, KF_Matrix22 P_prev, KF_Matrix22 *P, KF_Matrix21 meas){
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b0ae      	sub	sp, #184	; 0xb8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	eeb0 4a40 	vmov.f32	s8, s0
 80044fe:	eef0 4a60 	vmov.f32	s9, s1
 8004502:	61f8      	str	r0, [r7, #28]
 8004504:	eeb0 5a41 	vmov.f32	s10, s2
 8004508:	eef0 5a61 	vmov.f32	s11, s3
 800450c:	eeb0 6a42 	vmov.f32	s12, s4
 8004510:	eef0 6a62 	vmov.f32	s13, s5
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	eeb0 7a43 	vmov.f32	s14, s6
 800451a:	eef0 7a63 	vmov.f32	s15, s7
 800451e:	ed87 4a08 	vstr	s8, [r7, #32]
 8004522:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8004526:	ed87 5a03 	vstr	s10, [r7, #12]
 800452a:	edc7 5a04 	vstr	s11, [r7, #16]
 800452e:	ed87 6a05 	vstr	s12, [r7, #20]
 8004532:	edc7 6a06 	vstr	s13, [r7, #24]
 8004536:	ed87 7a00 	vstr	s14, [r7]
 800453a:	edc7 7a01 	vstr	s15, [r7, #4]
	// meas.a21 accz
	// meas.a11 h


	// prediction
	Sk = KF_matrix_add21(KF_matrix_multiply22_21(F, prev_state), KF_matrix_scalar_multi_21(G, meas.a21));
 800453e:	ed97 5a08 	vldr	s10, [r7, #32]
 8004542:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8004546:	4bf8      	ldr	r3, [pc, #992]	; (8004928 <altitudeKF+0x434>)
 8004548:	ed93 6a00 	vldr	s12, [r3]
 800454c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004550:	ed93 7a02 	vldr	s14, [r3, #8]
 8004554:	edd3 7a03 	vldr	s15, [r3, #12]
 8004558:	eeb0 2a45 	vmov.f32	s4, s10
 800455c:	eef0 2a65 	vmov.f32	s5, s11
 8004560:	eeb0 0a46 	vmov.f32	s0, s12
 8004564:	eef0 0a66 	vmov.f32	s1, s13
 8004568:	eeb0 1a47 	vmov.f32	s2, s14
 800456c:	eef0 1a67 	vmov.f32	s3, s15
 8004570:	f000 faa0 	bl	8004ab4 <KF_matrix_multiply22_21>
 8004574:	eeb0 7a40 	vmov.f32	s14, s0
 8004578:	eef0 7a60 	vmov.f32	s15, s1
 800457c:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 8004580:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 8004584:	edd7 6a01 	vldr	s13, [r7, #4]
 8004588:	4be8      	ldr	r3, [pc, #928]	; (800492c <altitudeKF+0x438>)
 800458a:	ed93 7a00 	vldr	s14, [r3]
 800458e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004592:	eeb0 1a66 	vmov.f32	s2, s13
 8004596:	eeb0 0a47 	vmov.f32	s0, s14
 800459a:	eef0 0a67 	vmov.f32	s1, s15
 800459e:	f000 fc7f 	bl	8004ea0 <KF_matrix_scalar_multi_21>
 80045a2:	eeb0 7a40 	vmov.f32	s14, s0
 80045a6:	eef0 7a60 	vmov.f32	s15, s1
 80045aa:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 80045ae:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 80045b2:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 80045b6:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80045ba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80045be:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80045c2:	eeb0 1a46 	vmov.f32	s2, s12
 80045c6:	eef0 1a66 	vmov.f32	s3, s13
 80045ca:	eeb0 0a47 	vmov.f32	s0, s14
 80045ce:	eef0 0a67 	vmov.f32	s1, s15
 80045d2:	f000 fb75 	bl	8004cc0 <KF_matrix_add21>
 80045d6:	eeb0 7a40 	vmov.f32	s14, s0
 80045da:	eef0 7a60 	vmov.f32	s15, s1
 80045de:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 80045e2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	Pk = KF_matrix_add22(KF_matrix_multiply22_22(KF_matrix_multiply22_22(F, P_prev),FT),KF_matrix_scalar_multi_22(Q,0.01));
 80045e6:	ed97 4a03 	vldr	s8, [r7, #12]
 80045ea:	edd7 4a04 	vldr	s9, [r7, #16]
 80045ee:	ed97 5a05 	vldr	s10, [r7, #20]
 80045f2:	edd7 5a06 	vldr	s11, [r7, #24]
 80045f6:	4bcc      	ldr	r3, [pc, #816]	; (8004928 <altitudeKF+0x434>)
 80045f8:	ed93 6a00 	vldr	s12, [r3]
 80045fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8004600:	ed93 7a02 	vldr	s14, [r3, #8]
 8004604:	edd3 7a03 	vldr	s15, [r3, #12]
 8004608:	eeb0 2a44 	vmov.f32	s4, s8
 800460c:	eef0 2a64 	vmov.f32	s5, s9
 8004610:	eeb0 3a45 	vmov.f32	s6, s10
 8004614:	eef0 3a65 	vmov.f32	s7, s11
 8004618:	eeb0 0a46 	vmov.f32	s0, s12
 800461c:	eef0 0a66 	vmov.f32	s1, s13
 8004620:	eeb0 1a47 	vmov.f32	s2, s14
 8004624:	eef0 1a67 	vmov.f32	s3, s15
 8004628:	f000 f9c2 	bl	80049b0 <KF_matrix_multiply22_22>
 800462c:	eeb0 6a40 	vmov.f32	s12, s0
 8004630:	eef0 6a60 	vmov.f32	s13, s1
 8004634:	eeb0 7a41 	vmov.f32	s14, s2
 8004638:	eef0 7a61 	vmov.f32	s15, s3
 800463c:	ed87 6a1a 	vstr	s12, [r7, #104]	; 0x68
 8004640:	edc7 6a1b 	vstr	s13, [r7, #108]	; 0x6c
 8004644:	ed87 7a1c 	vstr	s14, [r7, #112]	; 0x70
 8004648:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 800464c:	4bb8      	ldr	r3, [pc, #736]	; (8004930 <altitudeKF+0x43c>)
 800464e:	ed93 4a00 	vldr	s8, [r3]
 8004652:	edd3 4a01 	vldr	s9, [r3, #4]
 8004656:	ed93 5a02 	vldr	s10, [r3, #8]
 800465a:	edd3 5a03 	vldr	s11, [r3, #12]
 800465e:	ed97 6a1a 	vldr	s12, [r7, #104]	; 0x68
 8004662:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8004666:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800466a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800466e:	eeb0 2a44 	vmov.f32	s4, s8
 8004672:	eef0 2a64 	vmov.f32	s5, s9
 8004676:	eeb0 3a45 	vmov.f32	s6, s10
 800467a:	eef0 3a65 	vmov.f32	s7, s11
 800467e:	eeb0 0a46 	vmov.f32	s0, s12
 8004682:	eef0 0a66 	vmov.f32	s1, s13
 8004686:	eeb0 1a47 	vmov.f32	s2, s14
 800468a:	eef0 1a67 	vmov.f32	s3, s15
 800468e:	f000 f98f 	bl	80049b0 <KF_matrix_multiply22_22>
 8004692:	eeb0 6a40 	vmov.f32	s12, s0
 8004696:	eef0 6a60 	vmov.f32	s13, s1
 800469a:	eeb0 7a41 	vmov.f32	s14, s2
 800469e:	eef0 7a61 	vmov.f32	s15, s3
 80046a2:	ed87 6a1e 	vstr	s12, [r7, #120]	; 0x78
 80046a6:	edc7 6a1f 	vstr	s13, [r7, #124]	; 0x7c
 80046aa:	ed87 7a20 	vstr	s14, [r7, #128]	; 0x80
 80046ae:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 80046b2:	4ba0      	ldr	r3, [pc, #640]	; (8004934 <altitudeKF+0x440>)
 80046b4:	ed93 6a00 	vldr	s12, [r3]
 80046b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80046bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80046c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80046c4:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8004938 <altitudeKF+0x444>
 80046c8:	eeb0 0a46 	vmov.f32	s0, s12
 80046cc:	eef0 0a66 	vmov.f32	s1, s13
 80046d0:	eeb0 1a47 	vmov.f32	s2, s14
 80046d4:	eef0 1a67 	vmov.f32	s3, s15
 80046d8:	f000 fb8e 	bl	8004df8 <KF_matrix_scalar_multi_22>
 80046dc:	eeb0 6a40 	vmov.f32	s12, s0
 80046e0:	eef0 6a60 	vmov.f32	s13, s1
 80046e4:	eeb0 7a41 	vmov.f32	s14, s2
 80046e8:	eef0 7a61 	vmov.f32	s15, s3
 80046ec:	ed87 6a22 	vstr	s12, [r7, #136]	; 0x88
 80046f0:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 80046f4:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 80046f8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 80046fc:	ed97 4a22 	vldr	s8, [r7, #136]	; 0x88
 8004700:	edd7 4a23 	vldr	s9, [r7, #140]	; 0x8c
 8004704:	ed97 5a24 	vldr	s10, [r7, #144]	; 0x90
 8004708:	edd7 5a25 	vldr	s11, [r7, #148]	; 0x94
 800470c:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 8004710:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8004714:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004718:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800471c:	eeb0 2a44 	vmov.f32	s4, s8
 8004720:	eef0 2a64 	vmov.f32	s5, s9
 8004724:	eeb0 3a45 	vmov.f32	s6, s10
 8004728:	eef0 3a65 	vmov.f32	s7, s11
 800472c:	eeb0 0a46 	vmov.f32	s0, s12
 8004730:	eef0 0a66 	vmov.f32	s1, s13
 8004734:	eeb0 1a47 	vmov.f32	s2, s14
 8004738:	eef0 1a67 	vmov.f32	s3, s15
 800473c:	f000 fa5e 	bl	8004bfc <KF_matrix_add22>
 8004740:	eeb0 6a40 	vmov.f32	s12, s0
 8004744:	eef0 6a60 	vmov.f32	s13, s1
 8004748:	eeb0 7a41 	vmov.f32	s14, s2
 800474c:	eef0 7a61 	vmov.f32	s15, s3
 8004750:	ed87 6a10 	vstr	s12, [r7, #64]	; 0x40
 8004754:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8004758:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800475c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	//correction
	Lk = Pk.a11 + R;
 8004760:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004764:	4b75      	ldr	r3, [pc, #468]	; (800493c <altitudeKF+0x448>)
 8004766:	edd3 7a00 	vldr	s15, [r3]
 800476a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800476e:	4b74      	ldr	r3, [pc, #464]	; (8004940 <altitudeKF+0x44c>)
 8004770:	edc3 7a00 	vstr	s15, [r3]
	Kk = KF_matrix_scalar_multi_21(KF_matrix_multiply22_21(Pk, HT),1/Lk);
 8004774:	4b73      	ldr	r3, [pc, #460]	; (8004944 <altitudeKF+0x450>)
 8004776:	ed93 5a00 	vldr	s10, [r3]
 800477a:	edd3 5a01 	vldr	s11, [r3, #4]
 800477e:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8004782:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8004786:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800478a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800478e:	eeb0 2a45 	vmov.f32	s4, s10
 8004792:	eef0 2a65 	vmov.f32	s5, s11
 8004796:	eeb0 0a46 	vmov.f32	s0, s12
 800479a:	eef0 0a66 	vmov.f32	s1, s13
 800479e:	eeb0 1a47 	vmov.f32	s2, s14
 80047a2:	eef0 1a67 	vmov.f32	s3, s15
 80047a6:	f000 f985 	bl	8004ab4 <KF_matrix_multiply22_21>
 80047aa:	eeb0 7a40 	vmov.f32	s14, s0
 80047ae:	eef0 7a60 	vmov.f32	s15, s1
 80047b2:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 80047b6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
 80047ba:	4b61      	ldr	r3, [pc, #388]	; (8004940 <altitudeKF+0x44c>)
 80047bc:	edd3 7a00 	vldr	s15, [r3]
 80047c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80047c8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80047cc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80047d0:	eeb0 1a66 	vmov.f32	s2, s13
 80047d4:	eeb0 0a47 	vmov.f32	s0, s14
 80047d8:	eef0 0a67 	vmov.f32	s1, s15
 80047dc:	f000 fb60 	bl	8004ea0 <KF_matrix_scalar_multi_21>
 80047e0:	eeb0 7a40 	vmov.f32	s14, s0
 80047e4:	eef0 7a60 	vmov.f32	s15, s1
 80047e8:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80047ec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	Sk = KF_matrix_add21(Sk,KF_matrix_scalar_multi_21(Kk,(meas.a11-Sk.a11)));
 80047f0:	ed97 7a00 	vldr	s14, [r7]
 80047f4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80047f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80047fc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004800:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004804:	eeb0 1a66 	vmov.f32	s2, s13
 8004808:	eeb0 0a47 	vmov.f32	s0, s14
 800480c:	eef0 0a67 	vmov.f32	s1, s15
 8004810:	f000 fb46 	bl	8004ea0 <KF_matrix_scalar_multi_21>
 8004814:	eeb0 7a40 	vmov.f32	s14, s0
 8004818:	eef0 7a60 	vmov.f32	s15, s1
 800481c:	ed87 7a28 	vstr	s14, [r7, #160]	; 0xa0
 8004820:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
 8004824:	ed97 6a28 	vldr	s12, [r7, #160]	; 0xa0
 8004828:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 800482c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004830:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004834:	eeb0 1a46 	vmov.f32	s2, s12
 8004838:	eef0 1a66 	vmov.f32	s3, s13
 800483c:	eeb0 0a47 	vmov.f32	s0, s14
 8004840:	eef0 0a67 	vmov.f32	s1, s15
 8004844:	f000 fa3c 	bl	8004cc0 <KF_matrix_add21>
 8004848:	eeb0 7a40 	vmov.f32	s14, s0
 800484c:	eef0 7a60 	vmov.f32	s15, s1
 8004850:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8004854:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	*current_state = Sk;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	461a      	mov	r2, r3
 800485c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004860:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004864:	e882 0003 	stmia.w	r2, {r0, r1}
	Pcalc = KF_matrix_sub22(eye, KF_matrix_multiply21_12(Kk, H));
 8004868:	4b37      	ldr	r3, [pc, #220]	; (8004948 <altitudeKF+0x454>)
 800486a:	ed93 6a00 	vldr	s12, [r3]
 800486e:	edd3 6a01 	vldr	s13, [r3, #4]
 8004872:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004876:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800487a:	eeb0 1a46 	vmov.f32	s2, s12
 800487e:	eef0 1a66 	vmov.f32	s3, s13
 8004882:	eeb0 0a47 	vmov.f32	s0, s14
 8004886:	eef0 0a67 	vmov.f32	s1, s15
 800488a:	f000 f965 	bl	8004b58 <KF_matrix_multiply21_12>
 800488e:	eeb0 6a40 	vmov.f32	s12, s0
 8004892:	eef0 6a60 	vmov.f32	s13, s1
 8004896:	eeb0 7a41 	vmov.f32	s14, s2
 800489a:	eef0 7a61 	vmov.f32	s15, s3
 800489e:	ed87 6a2a 	vstr	s12, [r7, #168]	; 0xa8
 80048a2:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 80048a6:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 80048aa:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 80048ae:	ed97 4a2a 	vldr	s8, [r7, #168]	; 0xa8
 80048b2:	edd7 4a2b 	vldr	s9, [r7, #172]	; 0xac
 80048b6:	ed97 5a2c 	vldr	s10, [r7, #176]	; 0xb0
 80048ba:	edd7 5a2d 	vldr	s11, [r7, #180]	; 0xb4
 80048be:	4b23      	ldr	r3, [pc, #140]	; (800494c <altitudeKF+0x458>)
 80048c0:	ed93 6a00 	vldr	s12, [r3]
 80048c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80048c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80048cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80048d0:	eeb0 2a44 	vmov.f32	s4, s8
 80048d4:	eef0 2a64 	vmov.f32	s5, s9
 80048d8:	eeb0 3a45 	vmov.f32	s6, s10
 80048dc:	eef0 3a65 	vmov.f32	s7, s11
 80048e0:	eeb0 0a46 	vmov.f32	s0, s12
 80048e4:	eef0 0a66 	vmov.f32	s1, s13
 80048e8:	eeb0 1a47 	vmov.f32	s2, s14
 80048ec:	eef0 1a67 	vmov.f32	s3, s15
 80048f0:	f000 fa20 	bl	8004d34 <KF_matrix_sub22>
 80048f4:	eeb0 6a40 	vmov.f32	s12, s0
 80048f8:	eef0 6a60 	vmov.f32	s13, s1
 80048fc:	eeb0 7a41 	vmov.f32	s14, s2
 8004900:	eef0 7a61 	vmov.f32	s15, s3
 8004904:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 8004908:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800490c:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8004910:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	*P = KF_matrix_multiply22_22(Pcalc, Pk);
 8004914:	ed97 4a10 	vldr	s8, [r7, #64]	; 0x40
 8004918:	edd7 4a11 	vldr	s9, [r7, #68]	; 0x44
 800491c:	ed97 5a12 	vldr	s10, [r7, #72]	; 0x48
 8004920:	edd7 5a13 	vldr	s11, [r7, #76]	; 0x4c
 8004924:	e014      	b.n	8004950 <altitudeKF+0x45c>
 8004926:	bf00      	nop
 8004928:	20000010 	.word	0x20000010
 800492c:	20000030 	.word	0x20000030
 8004930:	20000020 	.word	0x20000020
 8004934:	20000048 	.word	0x20000048
 8004938:	3c23d70a 	.word	0x3c23d70a
 800493c:	20000058 	.word	0x20000058
 8004940:	20000ca0 	.word	0x20000ca0
 8004944:	20000040 	.word	0x20000040
 8004948:	20000038 	.word	0x20000038
 800494c:	2000005c 	.word	0x2000005c
 8004950:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8004954:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8004958:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800495c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004960:	eeb0 2a44 	vmov.f32	s4, s8
 8004964:	eef0 2a64 	vmov.f32	s5, s9
 8004968:	eeb0 3a45 	vmov.f32	s6, s10
 800496c:	eef0 3a65 	vmov.f32	s7, s11
 8004970:	eeb0 0a46 	vmov.f32	s0, s12
 8004974:	eef0 0a66 	vmov.f32	s1, s13
 8004978:	eeb0 1a47 	vmov.f32	s2, s14
 800497c:	eef0 1a67 	vmov.f32	s3, s15
 8004980:	f000 f816 	bl	80049b0 <KF_matrix_multiply22_22>
 8004984:	eeb0 6a40 	vmov.f32	s12, s0
 8004988:	eef0 6a60 	vmov.f32	s13, s1
 800498c:	eeb0 7a41 	vmov.f32	s14, s2
 8004990:	eef0 7a61 	vmov.f32	s15, s3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	ed83 6a00 	vstr	s12, [r3]
 800499a:	edc3 6a01 	vstr	s13, [r3, #4]
 800499e:	ed83 7a02 	vstr	s14, [r3, #8]
 80049a2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80049a6:	bf00      	nop
 80049a8:	37b8      	adds	r7, #184	; 0xb8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop

080049b0 <KF_matrix_multiply22_22>:


//matrix multiply by matrix
KF_Matrix22 KF_matrix_multiply22_22(KF_Matrix22 left, KF_Matrix22 right){
 80049b0:	b490      	push	{r4, r7}
 80049b2:	b094      	sub	sp, #80	; 0x50
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	eeb0 4a40 	vmov.f32	s8, s0
 80049ba:	eef0 4a60 	vmov.f32	s9, s1
 80049be:	eeb0 5a41 	vmov.f32	s10, s2
 80049c2:	eef0 5a61 	vmov.f32	s11, s3
 80049c6:	eeb0 6a42 	vmov.f32	s12, s4
 80049ca:	eef0 6a62 	vmov.f32	s13, s5
 80049ce:	eeb0 7a43 	vmov.f32	s14, s6
 80049d2:	eef0 7a63 	vmov.f32	s15, s7
 80049d6:	ed87 4a08 	vstr	s8, [r7, #32]
 80049da:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 80049de:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 80049e2:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 80049e6:	ed87 6a04 	vstr	s12, [r7, #16]
 80049ea:	edc7 6a05 	vstr	s13, [r7, #20]
 80049ee:	ed87 7a06 	vstr	s14, [r7, #24]
 80049f2:	edc7 7a07 	vstr	s15, [r7, #28]
    KF_Matrix22 results;
    results.a11 = left.a11 * right.a11 + left.a12 * right.a21;
 80049f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80049fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80049fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a02:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004a06:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a12:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    results.a12 = left.a11 * right.a12 + left.a12 * right.a22;
 8004a16:	ed97 7a08 	vldr	s14, [r7, #32]
 8004a1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a22:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004a26:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a32:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    results.a21 = left.a21 * right.a11 + left.a22 * right.a21;
 8004a36:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004a3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a42:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8004a46:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a52:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    results.a22 = left.a21 * right.a12 + left.a22 * right.a22;
 8004a56:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a62:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8004a66:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a72:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return results;
 8004a76:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004a7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004a84:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004a86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8c:	ee06 0a10 	vmov	s12, r0
 8004a90:	ee06 1a90 	vmov	s13, r1
 8004a94:	ee07 2a10 	vmov	s14, r2
 8004a98:	ee07 3a90 	vmov	s15, r3
}
 8004a9c:	eeb0 0a46 	vmov.f32	s0, s12
 8004aa0:	eef0 0a66 	vmov.f32	s1, s13
 8004aa4:	eeb0 1a47 	vmov.f32	s2, s14
 8004aa8:	eef0 1a67 	vmov.f32	s3, s15
 8004aac:	3750      	adds	r7, #80	; 0x50
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc90      	pop	{r4, r7}
 8004ab2:	4770      	bx	lr

08004ab4 <KF_matrix_multiply22_21>:

KF_Matrix21 KF_matrix_multiply22_21(KF_Matrix22 left, KF_Matrix21 right) {
 8004ab4:	b480      	push	{r7}
 8004ab6:	b08d      	sub	sp, #52	; 0x34
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	eeb0 5a40 	vmov.f32	s10, s0
 8004abe:	eef0 5a60 	vmov.f32	s11, s1
 8004ac2:	eeb0 6a41 	vmov.f32	s12, s2
 8004ac6:	eef0 6a61 	vmov.f32	s13, s3
 8004aca:	eeb0 7a42 	vmov.f32	s14, s4
 8004ace:	eef0 7a62 	vmov.f32	s15, s5
 8004ad2:	ed87 5a04 	vstr	s10, [r7, #16]
 8004ad6:	edc7 5a05 	vstr	s11, [r7, #20]
 8004ada:	ed87 6a06 	vstr	s12, [r7, #24]
 8004ade:	edc7 6a07 	vstr	s13, [r7, #28]
 8004ae2:	ed87 7a02 	vstr	s14, [r7, #8]
 8004ae6:	edc7 7a03 	vstr	s15, [r7, #12]
    KF_Matrix21 result;
    result.a11 = left.a11 * right.a11 + left.a12 * right.a21;
 8004aea:	ed97 7a04 	vldr	s14, [r7, #16]
 8004aee:	edd7 7a02 	vldr	s15, [r7, #8]
 8004af2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004af6:	edd7 6a05 	vldr	s13, [r7, #20]
 8004afa:	edd7 7a03 	vldr	s15, [r7, #12]
 8004afe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b06:	edc7 7a08 	vstr	s15, [r7, #32]
    result.a21 = left.a21 * right.a11 + left.a22 * right.a21;
 8004b0a:	ed97 7a06 	vldr	s14, [r7, #24]
 8004b0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b16:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return result;
 8004b2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b2e:	f107 0220 	add.w	r2, r7, #32
 8004b32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b36:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	ee07 2a10 	vmov	s14, r2
 8004b42:	ee07 3a90 	vmov	s15, r3
}
 8004b46:	eeb0 0a47 	vmov.f32	s0, s14
 8004b4a:	eef0 0a67 	vmov.f32	s1, s15
 8004b4e:	3734      	adds	r7, #52	; 0x34
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <KF_matrix_multiply21_12>:
    float result;
    result = left.a11 * right.a11 + left.a12 * right.a21;
    return result;
}

KF_Matrix22 KF_matrix_multiply21_12(KF_Matrix21 left, KF_Matrix12 right) {
 8004b58:	b490      	push	{r4, r7}
 8004b5a:	b090      	sub	sp, #64	; 0x40
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	eeb0 6a40 	vmov.f32	s12, s0
 8004b62:	eef0 6a60 	vmov.f32	s13, s1
 8004b66:	eeb0 7a41 	vmov.f32	s14, s2
 8004b6a:	eef0 7a61 	vmov.f32	s15, s3
 8004b6e:	ed87 6a06 	vstr	s12, [r7, #24]
 8004b72:	edc7 6a07 	vstr	s13, [r7, #28]
 8004b76:	ed87 7a04 	vstr	s14, [r7, #16]
 8004b7a:	edc7 7a05 	vstr	s15, [r7, #20]
    KF_Matrix22 result;
    result.a11 = left.a11 * right.a11;
 8004b7e:	ed97 7a06 	vldr	s14, [r7, #24]
 8004b82:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	edc7 7a08 	vstr	s15, [r7, #32]
    result.a12 = left.a21 * right.a11;
 8004b8e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004b92:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.a21 = left.a11 * right.a12;
 8004b9e:	ed97 7a06 	vldr	s14, [r7, #24]
 8004ba2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004baa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.a22 = left.a21 * right.a12;
 8004bae:	ed97 7a07 	vldr	s14, [r7, #28]
 8004bb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bba:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return result;
 8004bbe:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004bc2:	f107 0320 	add.w	r3, r7, #32
 8004bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004bc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd4:	ee06 0a10 	vmov	s12, r0
 8004bd8:	ee06 1a90 	vmov	s13, r1
 8004bdc:	ee07 2a10 	vmov	s14, r2
 8004be0:	ee07 3a90 	vmov	s15, r3
}
 8004be4:	eeb0 0a46 	vmov.f32	s0, s12
 8004be8:	eef0 0a66 	vmov.f32	s1, s13
 8004bec:	eeb0 1a47 	vmov.f32	s2, s14
 8004bf0:	eef0 1a67 	vmov.f32	s3, s15
 8004bf4:	3740      	adds	r7, #64	; 0x40
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc90      	pop	{r4, r7}
 8004bfa:	4770      	bx	lr

08004bfc <KF_matrix_add22>:
    results.a12 = matrix.a21;
    return results;
}

//mx add
KF_Matrix22 KF_matrix_add22(KF_Matrix22 mx1, KF_Matrix22 mx2){
 8004bfc:	b490      	push	{r4, r7}
 8004bfe:	b094      	sub	sp, #80	; 0x50
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	eeb0 4a40 	vmov.f32	s8, s0
 8004c06:	eef0 4a60 	vmov.f32	s9, s1
 8004c0a:	eeb0 5a41 	vmov.f32	s10, s2
 8004c0e:	eef0 5a61 	vmov.f32	s11, s3
 8004c12:	eeb0 6a42 	vmov.f32	s12, s4
 8004c16:	eef0 6a62 	vmov.f32	s13, s5
 8004c1a:	eeb0 7a43 	vmov.f32	s14, s6
 8004c1e:	eef0 7a63 	vmov.f32	s15, s7
 8004c22:	ed87 4a08 	vstr	s8, [r7, #32]
 8004c26:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8004c2a:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8004c2e:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8004c32:	ed87 6a04 	vstr	s12, [r7, #16]
 8004c36:	edc7 6a05 	vstr	s13, [r7, #20]
 8004c3a:	ed87 7a06 	vstr	s14, [r7, #24]
 8004c3e:	edc7 7a07 	vstr	s15, [r7, #28]
    KF_Matrix22 results;
    results.a11 = mx1.a11 + mx2.a11;
 8004c42:	ed97 7a08 	vldr	s14, [r7, #32]
 8004c46:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c4e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    results.a12 = mx1.a12 + mx2.a12;
 8004c52:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004c56:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c5e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    results.a21 = mx1.a21 + mx2.a21;
 8004c62:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004c66:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c6e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    results.a22 = mx1.a22 + mx2.a22;
 8004c72:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004c76:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c7e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return results;
 8004c82:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004c86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004c90:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004c92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c98:	ee06 0a10 	vmov	s12, r0
 8004c9c:	ee06 1a90 	vmov	s13, r1
 8004ca0:	ee07 2a10 	vmov	s14, r2
 8004ca4:	ee07 3a90 	vmov	s15, r3
}
 8004ca8:	eeb0 0a46 	vmov.f32	s0, s12
 8004cac:	eef0 0a66 	vmov.f32	s1, s13
 8004cb0:	eeb0 1a47 	vmov.f32	s2, s14
 8004cb4:	eef0 1a67 	vmov.f32	s3, s15
 8004cb8:	3750      	adds	r7, #80	; 0x50
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc90      	pop	{r4, r7}
 8004cbe:	4770      	bx	lr

08004cc0 <KF_matrix_add21>:

KF_Matrix21 KF_matrix_add21(KF_Matrix21 mx1, KF_Matrix21 mx2){
 8004cc0:	b480      	push	{r7}
 8004cc2:	b08b      	sub	sp, #44	; 0x2c
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	eeb0 6a40 	vmov.f32	s12, s0
 8004cca:	eef0 6a60 	vmov.f32	s13, s1
 8004cce:	eeb0 7a41 	vmov.f32	s14, s2
 8004cd2:	eef0 7a61 	vmov.f32	s15, s3
 8004cd6:	ed87 6a04 	vstr	s12, [r7, #16]
 8004cda:	edc7 6a05 	vstr	s13, [r7, #20]
 8004cde:	ed87 7a02 	vstr	s14, [r7, #8]
 8004ce2:	edc7 7a03 	vstr	s15, [r7, #12]
    KF_Matrix21 results;
    results.a11 = mx1.a11 + mx2.a11;
 8004ce6:	ed97 7a04 	vldr	s14, [r7, #16]
 8004cea:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cf2:	edc7 7a06 	vstr	s15, [r7, #24]
    results.a21 = mx1.a21 + mx2.a21;
 8004cf6:	ed97 7a05 	vldr	s14, [r7, #20]
 8004cfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d02:	edc7 7a07 	vstr	s15, [r7, #28]
    return results;
 8004d06:	f107 0320 	add.w	r3, r7, #32
 8004d0a:	f107 0218 	add.w	r2, r7, #24
 8004d0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d12:	e883 0003 	stmia.w	r3, {r0, r1}
 8004d16:	6a3a      	ldr	r2, [r7, #32]
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	ee07 2a10 	vmov	s14, r2
 8004d1e:	ee07 3a90 	vmov	s15, r3
}
 8004d22:	eeb0 0a47 	vmov.f32	s0, s14
 8004d26:	eef0 0a67 	vmov.f32	s1, s15
 8004d2a:	372c      	adds	r7, #44	; 0x2c
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <KF_matrix_sub22>:

//mx sub
KF_Matrix22 KF_matrix_sub22(KF_Matrix22 mx1, KF_Matrix22 mx2){
 8004d34:	b490      	push	{r4, r7}
 8004d36:	b094      	sub	sp, #80	; 0x50
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	eeb0 4a40 	vmov.f32	s8, s0
 8004d3e:	eef0 4a60 	vmov.f32	s9, s1
 8004d42:	eeb0 5a41 	vmov.f32	s10, s2
 8004d46:	eef0 5a61 	vmov.f32	s11, s3
 8004d4a:	eeb0 6a42 	vmov.f32	s12, s4
 8004d4e:	eef0 6a62 	vmov.f32	s13, s5
 8004d52:	eeb0 7a43 	vmov.f32	s14, s6
 8004d56:	eef0 7a63 	vmov.f32	s15, s7
 8004d5a:	ed87 4a08 	vstr	s8, [r7, #32]
 8004d5e:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8004d62:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8004d66:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8004d6a:	ed87 6a04 	vstr	s12, [r7, #16]
 8004d6e:	edc7 6a05 	vstr	s13, [r7, #20]
 8004d72:	ed87 7a06 	vstr	s14, [r7, #24]
 8004d76:	edc7 7a07 	vstr	s15, [r7, #28]
    KF_Matrix22 results;
    results.a11 = mx1.a11 - mx2.a11;
 8004d7a:	ed97 7a08 	vldr	s14, [r7, #32]
 8004d7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d86:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    results.a12 = mx1.a12 - mx2.a12;
 8004d8a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004d8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d96:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    results.a21 = mx1.a21 - mx2.a21;
 8004d9a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004d9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004da6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    results.a22 = mx1.a22 - mx2.a22;
 8004daa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004dae:	edd7 7a07 	vldr	s15, [r7, #28]
 8004db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004db6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return results;
 8004dba:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004dbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004dc8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd0:	ee06 0a10 	vmov	s12, r0
 8004dd4:	ee06 1a90 	vmov	s13, r1
 8004dd8:	ee07 2a10 	vmov	s14, r2
 8004ddc:	ee07 3a90 	vmov	s15, r3
}
 8004de0:	eeb0 0a46 	vmov.f32	s0, s12
 8004de4:	eef0 0a66 	vmov.f32	s1, s13
 8004de8:	eeb0 1a47 	vmov.f32	s2, s14
 8004dec:	eef0 1a67 	vmov.f32	s3, s15
 8004df0:	3750      	adds	r7, #80	; 0x50
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc90      	pop	{r4, r7}
 8004df6:	4770      	bx	lr

08004df8 <KF_matrix_scalar_multi_22>:
    results.a21 = mx1.a21 - mx2.a21;
    return results;
}

//mx multiply by scalar
KF_Matrix22 KF_matrix_scalar_multi_22(KF_Matrix22 mx, float scalar){
 8004df8:	b490      	push	{r4, r7}
 8004dfa:	b092      	sub	sp, #72	; 0x48
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	eeb0 6a40 	vmov.f32	s12, s0
 8004e02:	eef0 6a60 	vmov.f32	s13, s1
 8004e06:	eeb0 7a41 	vmov.f32	s14, s2
 8004e0a:	eef0 7a61 	vmov.f32	s15, s3
 8004e0e:	ed87 2a05 	vstr	s4, [r7, #20]
 8004e12:	ed87 6a06 	vstr	s12, [r7, #24]
 8004e16:	edc7 6a07 	vstr	s13, [r7, #28]
 8004e1a:	ed87 7a08 	vstr	s14, [r7, #32]
 8004e1e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    KF_Matrix22 results;
    results.a11 = mx.a11 * scalar;
 8004e22:	ed97 7a06 	vldr	s14, [r7, #24]
 8004e26:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    results.a12 = mx.a12 * scalar;
 8004e32:	ed97 7a07 	vldr	s14, [r7, #28]
 8004e36:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    results.a21 = mx.a21 * scalar;
 8004e42:	ed97 7a08 	vldr	s14, [r7, #32]
 8004e46:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e4e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    results.a22 = mx.a22 * scalar;
 8004e52:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004e56:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    return results;
 8004e62:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004e70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e78:	ee06 0a10 	vmov	s12, r0
 8004e7c:	ee06 1a90 	vmov	s13, r1
 8004e80:	ee07 2a10 	vmov	s14, r2
 8004e84:	ee07 3a90 	vmov	s15, r3
}
 8004e88:	eeb0 0a46 	vmov.f32	s0, s12
 8004e8c:	eef0 0a66 	vmov.f32	s1, s13
 8004e90:	eeb0 1a47 	vmov.f32	s2, s14
 8004e94:	eef0 1a67 	vmov.f32	s3, s15
 8004e98:	3748      	adds	r7, #72	; 0x48
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc90      	pop	{r4, r7}
 8004e9e:	4770      	bx	lr

08004ea0 <KF_matrix_scalar_multi_21>:

KF_Matrix21 KF_matrix_scalar_multi_21(KF_Matrix21 mx, float scalar){
 8004ea0:	b480      	push	{r7}
 8004ea2:	b08b      	sub	sp, #44	; 0x2c
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	eeb0 7a40 	vmov.f32	s14, s0
 8004eaa:	eef0 7a60 	vmov.f32	s15, s1
 8004eae:	ed87 1a03 	vstr	s2, [r7, #12]
 8004eb2:	ed87 7a04 	vstr	s14, [r7, #16]
 8004eb6:	edc7 7a05 	vstr	s15, [r7, #20]
    KF_Matrix21 results;
    results.a11 = mx.a11 * scalar;
 8004eba:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ebe:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec6:	edc7 7a06 	vstr	s15, [r7, #24]
    results.a21 = mx.a21 * scalar;
 8004eca:	ed97 7a05 	vldr	s14, [r7, #20]
 8004ece:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	edc7 7a07 	vstr	s15, [r7, #28]
    return results;
 8004eda:	f107 0320 	add.w	r3, r7, #32
 8004ede:	f107 0218 	add.w	r2, r7, #24
 8004ee2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ee6:	e883 0003 	stmia.w	r3, {r0, r1}
 8004eea:	6a3a      	ldr	r2, [r7, #32]
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	ee07 2a10 	vmov	s14, r2
 8004ef2:	ee07 3a90 	vmov	s15, r3
}
 8004ef6:	eeb0 0a47 	vmov.f32	s0, s14
 8004efa:	eef0 0a67 	vmov.f32	s1, s15
 8004efe:	372c      	adds	r7, #44	; 0x2c
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	887a      	ldrh	r2, [r7, #2]
 8004f26:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a3a      	ldr	r2, [r7, #32]
 8004f2c:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f32:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	75fb      	strb	r3, [r7, #23]
	/*
	 *
	 * ACCELEROMETER
	 *
	 */
	uint8_t chipID=2;
 8004f44:	2302      	movs	r3, #2
 8004f46:	75bb      	strb	r3, [r7, #22]
		}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		HAL_Delay(200);
	}*/
	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6858      	ldr	r0, [r3, #4]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	899b      	ldrh	r3, [r3, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	4619      	mov	r1, r3
 8004f54:	f002 f984 	bl	8007260 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004f58:	2001      	movs	r0, #1
 8004f5a:	f001 f84b 	bl	8005ff4 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6858      	ldr	r0, [r3, #4]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	899b      	ldrh	r3, [r3, #12]
 8004f66:	2201      	movs	r2, #1
 8004f68:	4619      	mov	r1, r3
 8004f6a:	f002 f979 	bl	8007260 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8004f6e:	2032      	movs	r0, #50	; 0x32
 8004f70:	f001 f840 	bl	8005ff4 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8004f74:	22b6      	movs	r2, #182	; 0xb6
 8004f76:	217e      	movs	r1, #126	; 0x7e
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f95b 	bl	8005234 <BMI088_WriteAccRegister>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	461a      	mov	r2, r3
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
 8004f84:	4413      	add	r3, r2
 8004f86:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8004f88:	2032      	movs	r0, #50	; 0x32
 8004f8a:	f001 f833 	bl	8005ff4 <HAL_Delay>

	/* Check chip ID */
	chipID=2;
 8004f8e:	2302      	movs	r3, #2
 8004f90:	75bb      	strb	r3, [r7, #22]

	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8004f92:	f107 0316 	add.w	r3, r7, #22
 8004f96:	461a      	mov	r2, r3
 8004f98:	2100      	movs	r1, #0
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f8d0 	bl	8005140 <BMI088_ReadAccRegister>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	75fb      	strb	r3, [r7, #23]

	/*HAL_Delay(10);
	//status += BMI088_ReadAccRegister(imu, 0x02, &chipID); //0x02 ACC_ERR_REG return 0xFF ->fatal error
	status += BMI088_ReadAccRegister(imu, 0x02, &chipID);*/

	HAL_Delay(10);
 8004faa:	200a      	movs	r0, #10
 8004fac:	f001 f822 	bl	8005ff4 <HAL_Delay>

	/* Configure accelerometer  */

	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA9); /* (0xA8 no oversampling, ODR = 100 Hz, BW = 40 Hz), 200 Hz no oversampling 0xA9, 0x99 200Hz OSR2  */
 8004fb0:	22a9      	movs	r2, #169	; 0xa9
 8004fb2:	2140      	movs	r1, #64	; 0x40
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f93d 	bl	8005234 <BMI088_WriteAccRegister>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004fc4:	200a      	movs	r0, #10
 8004fc6:	f001 f815 	bl	8005ff4 <HAL_Delay>


	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2141      	movs	r1, #65	; 0x41
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f930 	bl	8005234 <BMI088_WriteAccRegister>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
 8004fda:	4413      	add	r3, r2
 8004fdc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004fde:	200a      	movs	r0, #10
 8004fe0:	f001 f808 	bl	8005ff4 <HAL_Delay>


	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 8004fe4:	220a      	movs	r2, #10
 8004fe6:	2153      	movs	r1, #83	; 0x53
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f923 	bl	8005234 <BMI088_WriteAccRegister>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	7dfb      	ldrb	r3, [r7, #23]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004ff8:	200a      	movs	r0, #10
 8004ffa:	f000 fffb 	bl	8005ff4 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);//ACC INT -> INT1
 8004ffe:	2204      	movs	r2, #4
 8005000:	2158      	movs	r1, #88	; 0x58
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f916 	bl	8005234 <BMI088_WriteAccRegister>
 8005008:	4603      	mov	r3, r0
 800500a:	461a      	mov	r2, r3
 800500c:	7dfb      	ldrb	r3, [r7, #23]
 800500e:	4413      	add	r3, r2
 8005010:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(10);
 8005012:	200a      	movs	r0, #10
 8005014:	f000 ffee 	bl	8005ff4 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8005018:	2200      	movs	r2, #0
 800501a:	217c      	movs	r1, #124	; 0x7c
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f909 	bl	8005234 <BMI088_WriteAccRegister>
 8005022:	4603      	mov	r3, r0
 8005024:	461a      	mov	r2, r3
 8005026:	7dfb      	ldrb	r3, [r7, #23]
 8005028:	4413      	add	r3, r2
 800502a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800502c:	200a      	movs	r0, #10
 800502e:	f000 ffe1 	bl	8005ff4 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 8005032:	2204      	movs	r2, #4
 8005034:	217d      	movs	r1, #125	; 0x7d
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f8fc 	bl	8005234 <BMI088_WriteAccRegister>
 800503c:	4603      	mov	r3, r0
 800503e:	461a      	mov	r2, r3
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	4413      	add	r3, r2
 8005044:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8005046:	200a      	movs	r0, #10
 8005048:	f000 ffd4 	bl	8005ff4 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2), 9.81 g-constant, 32768 normalize raw data, 2^(<0x41>+1)*1.5, <0x41> is the acc range register */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4a3a      	ldr	r2, [pc, #232]	; (8005138 <BMI088_Init+0x230>)
 8005050:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2292      	movs	r2, #146	; 0x92
 8005056:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6898      	ldr	r0, [r3, #8]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	89db      	ldrh	r3, [r3, #14]
 8005060:	2201      	movs	r2, #1
 8005062:	4619      	mov	r1, r3
 8005064:	f002 f8fc 	bl	8007260 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8005068:	22b6      	movs	r2, #182	; 0xb6
 800506a:	2114      	movs	r1, #20
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f91b 	bl	80052a8 <BMI088_WriteGyrRegister>
 8005072:	4603      	mov	r3, r0
 8005074:	461a      	mov	r2, r3
 8005076:	7dfb      	ldrb	r3, [r7, #23]
 8005078:	4413      	add	r3, r2
 800507a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 800507c:	20fa      	movs	r0, #250	; 0xfa
 800507e:	f000 ffb9 	bl	8005ff4 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 8005082:	f107 0316 	add.w	r3, r7, #22
 8005086:	461a      	mov	r2, r3
 8005088:	2100      	movs	r1, #0
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 f896 	bl	80051bc <BMI088_ReadGyrRegister>
 8005090:	4603      	mov	r3, r0
 8005092:	461a      	mov	r2, r3
 8005094:	7dfb      	ldrb	r3, [r7, #23]
 8005096:	4413      	add	r3, r2
 8005098:	75fb      	strb	r3, [r7, #23]

		//return 0;

	}

	HAL_Delay(10);
 800509a:	200a      	movs	r0, #10
 800509c:	f000 ffaa 	bl	8005ff4 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 80050a0:	2201      	movs	r2, #1
 80050a2:	210f      	movs	r1, #15
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f8ff 	bl	80052a8 <BMI088_WriteGyrRegister>
 80050aa:	4603      	mov	r3, r0
 80050ac:	461a      	mov	r2, r3
 80050ae:	7dfb      	ldrb	r3, [r7, #23]
 80050b0:	4413      	add	r3, r2
 80050b2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80050b4:	200a      	movs	r0, #10
 80050b6:	f000 ff9d 	bl	8005ff4 <HAL_Delay>


	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* 0x07 ODR = 100 Hz, Filter bandwidth = 32 Hz, 0x06 BW = 64Hz ODR = 200 Hz, 0x04 ODR = 200Hz BW = 23Hz */
 80050ba:	2206      	movs	r2, #6
 80050bc:	2110      	movs	r1, #16
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f8f2 	bl	80052a8 <BMI088_WriteGyrRegister>
 80050c4:	4603      	mov	r3, r0
 80050c6:	461a      	mov	r2, r3
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
 80050ca:	4413      	add	r3, r2
 80050cc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80050ce:	200a      	movs	r0, #10
 80050d0:	f000 ff90 	bl	8005ff4 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 80050d4:	2280      	movs	r2, #128	; 0x80
 80050d6:	2115      	movs	r1, #21
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f8e5 	bl	80052a8 <BMI088_WriteGyrRegister>
 80050de:	4603      	mov	r3, r0
 80050e0:	461a      	mov	r2, r3
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
 80050e4:	4413      	add	r3, r2
 80050e6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80050e8:	200a      	movs	r0, #10
 80050ea:	f000 ff83 	bl	8005ff4 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 80050ee:	2201      	movs	r2, #1
 80050f0:	2116      	movs	r1, #22
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f8d8 	bl	80052a8 <BMI088_WriteGyrRegister>
 80050f8:	4603      	mov	r3, r0
 80050fa:	461a      	mov	r2, r3
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
 80050fe:	4413      	add	r3, r2
 8005100:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8005102:	200a      	movs	r0, #10
 8005104:	f000 ff76 	bl	8005ff4 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8005108:	2201      	movs	r2, #1
 800510a:	2118      	movs	r1, #24
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f8cb 	bl	80052a8 <BMI088_WriteGyrRegister>
 8005112:	4603      	mov	r3, r0
 8005114:	461a      	mov	r2, r3
 8005116:	7dfb      	ldrb	r3, [r7, #23]
 8005118:	4413      	add	r3, r2
 800511a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800511c:	200a      	movs	r0, #10
 800511e:	f000 ff69 	bl	8005ff4 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) 0.017 °/s -> rad/s, 1000 the range, 32768 normalize the raw data*/
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4a05      	ldr	r2, [pc, #20]	; (800513c <BMI088_Init+0x234>)
 8005126:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2282      	movs	r2, #130	; 0x82
 800512c:	769a      	strb	r2, [r3, #26]

	return status;
 800512e:	7dfb      	ldrb	r3, [r7, #23]

}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	3a6b70a4 	.word	0x3a6b70a4
 800513c:	3a0ba058 	.word	0x3a0ba058

08005140 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	460b      	mov	r3, r1
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 800514e:	7afb      	ldrb	r3, [r7, #11]
 8005150:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005154:	b2db      	uxtb	r3, r3
 8005156:	753b      	strb	r3, [r7, #20]
 8005158:	2300      	movs	r3, #0
 800515a:	757b      	strb	r3, [r7, #21]
 800515c:	2300      	movs	r3, #0
 800515e:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6858      	ldr	r0, [r3, #4]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	899b      	ldrh	r3, [r3, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	4619      	mov	r1, r3
 800516c:	f002 f878 	bl	8007260 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	f107 0210 	add.w	r2, r7, #16
 8005178:	f107 0114 	add.w	r1, r7, #20
 800517c:	f04f 33ff 	mov.w	r3, #4294967295
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	2303      	movs	r3, #3
 8005184:	f004 f803 	bl	800918e <HAL_SPI_TransmitReceive>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	bf0c      	ite	eq
 800518e:	2301      	moveq	r3, #1
 8005190:	2300      	movne	r3, #0
 8005192:	b2db      	uxtb	r3, r3
 8005194:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6858      	ldr	r0, [r3, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	899b      	ldrh	r3, [r3, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	4619      	mov	r1, r3
 80051a2:	f002 f85d 	bl	8007260 <HAL_GPIO_WritePin>

	if (status == 1) {
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d102      	bne.n	80051b2 <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 80051ac:	7cba      	ldrb	r2, [r7, #18]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80051b2:	7dfb      	ldrb	r3, [r7, #23]

}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	460b      	mov	r3, r1
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00}; //0x80
 80051ca:	7afb      	ldrb	r3, [r7, #11]
 80051cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	753b      	strb	r3, [r7, #20]
 80051d4:	2300      	movs	r3, #0
 80051d6:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6898      	ldr	r0, [r3, #8]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	89db      	ldrh	r3, [r3, #14]
 80051e0:	2200      	movs	r2, #0
 80051e2:	4619      	mov	r1, r3
 80051e4:	f002 f83c 	bl	8007260 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6818      	ldr	r0, [r3, #0]
 80051ec:	f107 0210 	add.w	r2, r7, #16
 80051f0:	f107 0114 	add.w	r1, r7, #20
 80051f4:	f04f 33ff 	mov.w	r3, #4294967295
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	2302      	movs	r3, #2
 80051fc:	f003 ffc7 	bl	800918e <HAL_SPI_TransmitReceive>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	bf0c      	ite	eq
 8005206:	2301      	moveq	r3, #1
 8005208:	2300      	movne	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6898      	ldr	r0, [r3, #8]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	89db      	ldrh	r3, [r3, #14]
 8005216:	2201      	movs	r2, #1
 8005218:	4619      	mov	r1, r3
 800521a:	f002 f821 	bl	8007260 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);*/

	if (status == 1) {
 800521e:	7dfb      	ldrb	r3, [r7, #23]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d102      	bne.n	800522a <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 8005224:	7c7a      	ldrb	r2, [r7, #17]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800522a:	7dfb      	ldrb	r3, [r7, #23]

}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	70fb      	strb	r3, [r7, #3]
 8005240:	4613      	mov	r3, r2
 8005242:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	733b      	strb	r3, [r7, #12]
 8005248:	78bb      	ldrb	r3, [r7, #2]
 800524a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6858      	ldr	r0, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	899b      	ldrh	r3, [r3, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	4619      	mov	r1, r3
 8005258:	f002 f802 	bl	8007260 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	f107 010c 	add.w	r1, r7, #12
 8005264:	f04f 33ff 	mov.w	r3, #4294967295
 8005268:	2202      	movs	r2, #2
 800526a:	f003 fe54 	bl	8008f16 <HAL_SPI_Transmit>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	bf0c      	ite	eq
 8005274:	2301      	moveq	r3, #1
 8005276:	2300      	movne	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800527c:	bf00      	nop
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f004 f925 	bl	80094d2 <HAL_SPI_GetState>
 8005288:	4603      	mov	r3, r0
 800528a:	2b01      	cmp	r3, #1
 800528c:	d1f7      	bne.n	800527e <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6858      	ldr	r0, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	899b      	ldrh	r3, [r3, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	4619      	mov	r1, r3
 800529a:	f001 ffe1 	bl	8007260 <HAL_GPIO_WritePin>

	return status;
 800529e:	7bfb      	ldrb	r3, [r7, #15]

}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	70fb      	strb	r3, [r7, #3]
 80052b4:	4613      	mov	r3, r2
 80052b6:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	733b      	strb	r3, [r7, #12]
 80052bc:	78bb      	ldrb	r3, [r7, #2]
 80052be:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6898      	ldr	r0, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	89db      	ldrh	r3, [r3, #14]
 80052c8:	2200      	movs	r2, #0
 80052ca:	4619      	mov	r1, r3
 80052cc:	f001 ffc8 	bl	8007260 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6818      	ldr	r0, [r3, #0]
 80052d4:	f107 010c 	add.w	r1, r7, #12
 80052d8:	f04f 33ff 	mov.w	r3, #4294967295
 80052dc:	2202      	movs	r2, #2
 80052de:	f003 fe1a 	bl	8008f16 <HAL_SPI_Transmit>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	bf0c      	ite	eq
 80052e8:	2301      	moveq	r3, #1
 80052ea:	2300      	movne	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80052f0:	bf00      	nop
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f004 f8eb 	bl	80094d2 <HAL_SPI_GetState>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d1f7      	bne.n	80052f2 <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6898      	ldr	r0, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	89db      	ldrh	r3, [r3, #14]
 800530a:	2201      	movs	r2, #1
 800530c:	4619      	mov	r1, r3
 800530e:	f001 ffa7 	bl	8007260 <HAL_GPIO_WritePin>

	return status;
 8005312:	7bfb      	ldrb	r3, [r7, #15]

}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	; 0x28
 8005320:	af02      	add	r7, sp, #8
 8005322:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 8005324:	4a36      	ldr	r2, [pc, #216]	; (8005400 <BMI088_ReadAccelerometer+0xe4>)
 8005326:	f107 0310 	add.w	r3, r7, #16
 800532a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800532e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6858      	ldr	r0, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	899b      	ldrh	r3, [r3, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	4619      	mov	r1, r3
 800533e:	f001 ff8f 	bl	8007260 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	f107 0208 	add.w	r2, r7, #8
 800534a:	f107 0110 	add.w	r1, r7, #16
 800534e:	f04f 33ff 	mov.w	r3, #4294967295
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2308      	movs	r3, #8
 8005356:	f003 ff1a 	bl	800918e <HAL_SPI_TransmitReceive>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	bf0c      	ite	eq
 8005360:	2301      	moveq	r3, #1
 8005362:	2300      	movne	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6858      	ldr	r0, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	899b      	ldrh	r3, [r3, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	4619      	mov	r1, r3
 8005374:	f001 ff74 	bl	8007260 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 8005378:	7afb      	ldrb	r3, [r7, #11]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	b21a      	sxth	r2, r3
 800537e:	7abb      	ldrb	r3, [r7, #10]
 8005380:	b21b      	sxth	r3, r3
 8005382:	4313      	orrs	r3, r2
 8005384:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 8005386:	7b7b      	ldrb	r3, [r7, #13]
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	b21a      	sxth	r2, r3
 800538c:	7b3b      	ldrb	r3, [r7, #12]
 800538e:	b21b      	sxth	r3, r3
 8005390:	4313      	orrs	r3, r2
 8005392:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	b21a      	sxth	r2, r3
 800539a:	7bbb      	ldrb	r3, [r7, #14]
 800539c:	b21b      	sxth	r3, r3
 800539e:	4313      	orrs	r3, r2
 80053a0:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80053a8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80053ac:	ee07 3a90 	vmov	s15, r3
 80053b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80053c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80053c8:	ee07 3a90 	vmov	s15, r3
 80053cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80053e0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	return status;
 80053f6:	7ffb      	ldrb	r3, [r7, #31]

}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3720      	adds	r7, #32
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	08015f7c 	.word	0x08015f7c

08005404 <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b08a      	sub	sp, #40	; 0x28
 8005408:	af02      	add	r7, sp, #8
 800540a:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 800540c:	4a38      	ldr	r2, [pc, #224]	; (80054f0 <BMI088_ReadGyroscope+0xec>)
 800540e:	f107 0310 	add.w	r3, r7, #16
 8005412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005416:	6018      	str	r0, [r3, #0]
 8005418:	3304      	adds	r3, #4
 800541a:	8019      	strh	r1, [r3, #0]
 800541c:	3302      	adds	r3, #2
 800541e:	0c0a      	lsrs	r2, r1, #16
 8005420:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6898      	ldr	r0, [r3, #8]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	89db      	ldrh	r3, [r3, #14]
 800542a:	2200      	movs	r2, #0
 800542c:	4619      	mov	r1, r3
 800542e:	f001 ff17 	bl	8007260 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6818      	ldr	r0, [r3, #0]
 8005436:	f107 0208 	add.w	r2, r7, #8
 800543a:	f107 0110 	add.w	r1, r7, #16
 800543e:	f04f 33ff 	mov.w	r3, #4294967295
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	2307      	movs	r3, #7
 8005446:	f003 fea2 	bl	800918e <HAL_SPI_TransmitReceive>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6898      	ldr	r0, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	89db      	ldrh	r3, [r3, #14]
 8005460:	2201      	movs	r2, #1
 8005462:	4619      	mov	r1, r3
 8005464:	f001 fefc 	bl	8007260 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 8005468:	7abb      	ldrb	r3, [r7, #10]
 800546a:	021b      	lsls	r3, r3, #8
 800546c:	b21a      	sxth	r2, r3
 800546e:	7a7b      	ldrb	r3, [r7, #9]
 8005470:	b21b      	sxth	r3, r3
 8005472:	4313      	orrs	r3, r2
 8005474:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 8005476:	7b3b      	ldrb	r3, [r7, #12]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	b21a      	sxth	r2, r3
 800547c:	7afb      	ldrb	r3, [r7, #11]
 800547e:	b21b      	sxth	r3, r3
 8005480:	4313      	orrs	r3, r2
 8005482:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 8005484:	7bbb      	ldrb	r3, [r7, #14]
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	b21a      	sxth	r2, r3
 800548a:	7b7b      	ldrb	r3, [r7, #13]
 800548c:	b21b      	sxth	r3, r3
 800548e:	4313      	orrs	r3, r2
 8005490:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;//-0.0000661263;//-0.000220318;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005498:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800549c:	ee07 3a90 	vmov	s15, r3
 80054a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;//-0.000491353;//-0.001161367;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80054b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80054b8:	ee07 3a90 	vmov	s15, r3
 80054bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;//-0.002349043;//-0.002582031;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80054d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80054d4:	ee07 3a90 	vmov	s15, r3
 80054d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	//own code line
	//if(status == 1) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	return status;
 80054e6:	7ffb      	ldrb	r3, [r7, #31]

}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3720      	adds	r7, #32
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	08015f84 	.word	0x08015f84

080054f4 <BMP388_Init>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_Init(BMP388_HandleTypeDef *bmp){
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t chip_id;

	// Read CHIP_ID byte
	rslt = BMP388_ReadBytes(bmp, CHIP_ID, &chip_id, 1);
 80054fc:	f107 020e 	add.w	r2, r7, #14
 8005500:	2301      	movs	r3, #1
 8005502:	2100      	movs	r1, #0
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fc08 	bl	8005d1a <BMP388_ReadBytes>
 800550a:	4603      	mov	r3, r0
 800550c:	73fb      	strb	r3, [r7, #15]
	if(rslt == HAL_OK && chip_id == BMP388_CHIP_ID){
 800550e:	7bfb      	ldrb	r3, [r7, #15]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d12a      	bne.n	800556a <BMP388_Init+0x76>
 8005514:	7bbb      	ldrb	r3, [r7, #14]
 8005516:	2b50      	cmp	r3, #80	; 0x50
 8005518:	d127      	bne.n	800556a <BMP388_Init+0x76>
		// using softreset command
		rslt = BMP388_SoftReset(bmp);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f962 	bl	80057e4 <BMP388_SoftReset>
 8005520:	4603      	mov	r3, r0
 8005522:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d11d      	bne.n	8005566 <BMP388_Init+0x72>
			// get calibration data
			rslt = BMP388_GetCalibData(bmp);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f99a 	bl	8005864 <BMP388_GetCalibData>
 8005530:	4603      	mov	r3, r0
 8005532:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8005534:	bf00      	nop
		}
	}
	else{
		return rslt;
	}
	uint8_t pwr_ctrl = BMP388_PWR_CTRL_PRESS_ON | BMP388_PWR_CTRL_TEMP_ON | BMP388_PWR_CTRL_MODE_NORMAL;
 8005536:	2333      	movs	r3, #51	; 0x33
 8005538:	737b      	strb	r3, [r7, #13]

	uint8_t oversampling = bmp->_oversampling;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	791b      	ldrb	r3, [r3, #4]
 800553e:	733b      	strb	r3, [r7, #12]
	uint8_t odr = bmp->_odr;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	799b      	ldrb	r3, [r3, #6]
 8005544:	72fb      	strb	r3, [r7, #11]
	uint8_t filtercoeff = bmp->_filtercoeff;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	795b      	ldrb	r3, [r3, #5]
 800554a:	72bb      	strb	r3, [r7, #10]



	// Set OSR register
	rslt = BMP388_WriteBytes(bmp, OSR, &oversampling, 1);
 800554c:	f107 020c 	add.w	r2, r7, #12
 8005550:	2301      	movs	r3, #1
 8005552:	211c      	movs	r1, #28
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fbfe 	bl	8005d56 <BMP388_WriteBytes>
 800555a:	4603      	mov	r3, r0
 800555c:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d006      	beq.n	8005572 <BMP388_Init+0x7e>
 8005564:	e003      	b.n	800556e <BMP388_Init+0x7a>
			return rslt;
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	e03b      	b.n	80055e2 <BMP388_Init+0xee>
		return rslt;
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	e039      	b.n	80055e2 <BMP388_Init+0xee>
		return rslt;
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	e037      	b.n	80055e2 <BMP388_Init+0xee>
	}
	// Set ODR register
	rslt = BMP388_WriteBytes(bmp, ODR, &odr, 1);
 8005572:	f107 020b 	add.w	r2, r7, #11
 8005576:	2301      	movs	r3, #1
 8005578:	211d      	movs	r1, #29
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fbeb 	bl	8005d56 <BMP388_WriteBytes>
 8005580:	4603      	mov	r3, r0
 8005582:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <BMP388_Init+0x9a>
		return rslt;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
 800558c:	e029      	b.n	80055e2 <BMP388_Init+0xee>
	}
	// Set CONFIG register
	rslt = BMP388_WriteBytes(bmp, CONFIG, &filtercoeff, 1);
 800558e:	f107 020a 	add.w	r2, r7, #10
 8005592:	2301      	movs	r3, #1
 8005594:	211f      	movs	r1, #31
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fbdd 	bl	8005d56 <BMP388_WriteBytes>
 800559c:	4603      	mov	r3, r0
 800559e:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <BMP388_Init+0xb6>
		return rslt;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	e01b      	b.n	80055e2 <BMP388_Init+0xee>
	}
	// Set PWR_CTRL register
	rslt = BMP388_WriteBytes(bmp, PWR_CTRL, &pwr_ctrl, 1);
 80055aa:	f107 020d 	add.w	r2, r7, #13
 80055ae:	2301      	movs	r3, #1
 80055b0:	211b      	movs	r1, #27
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fbcf 	bl	8005d56 <BMP388_WriteBytes>
 80055b8:	4603      	mov	r3, r0
 80055ba:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <BMP388_Init+0xd2>
		return rslt;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	e00d      	b.n	80055e2 <BMP388_Init+0xee>
	}

	rslt = BMP388_WriteBytes(bmp, INT_CTRL, 0x40, 1);
 80055c6:	2301      	movs	r3, #1
 80055c8:	2240      	movs	r2, #64	; 0x40
 80055ca:	2119      	movs	r1, #25
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fbc2 	bl	8005d56 <BMP388_WriteBytes>
 80055d2:	4603      	mov	r3, r0
 80055d4:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <BMP388_Init+0xec>
		return rslt;
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
 80055de:	e000      	b.n	80055e2 <BMP388_Init+0xee>
	}

	return rslt;
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <BMP388_SetTempOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetTempOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	460b      	mov	r3, r1
 80055f4:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	2b05      	cmp	r3, #5
 80055fa:	d901      	bls.n	8005600 <BMP388_SetTempOS+0x16>
		return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e00e      	b.n	800561e <BMP388_SetTempOS+0x34>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11000111) | (oversample << 3); //& clear the temp OS bits and the | set the temp OS reg
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	791b      	ldrb	r3, [r3, #4]
 8005604:	b25b      	sxtb	r3, r3
 8005606:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800560a:	b25a      	sxtb	r2, r3
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	b25b      	sxtb	r3, r3
 8005612:	4313      	orrs	r3, r2
 8005614:	b25b      	sxtb	r3, r3
 8005616:	b2da      	uxtb	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <BMP388_SetPressOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetPressOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	460b      	mov	r3, r1
 8005634:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	2b05      	cmp	r3, #5
 800563a:	d901      	bls.n	8005640 <BMP388_SetPressOS+0x16>
		return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e00d      	b.n	800565c <BMP388_SetPressOS+0x32>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11111000) | oversample; //& clear the press OS bits and the | set the press OS reg
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	791b      	ldrb	r3, [r3, #4]
 8005644:	b25b      	sxtb	r3, r3
 8005646:	f023 0307 	bic.w	r3, r3, #7
 800564a:	b25a      	sxtb	r2, r3
 800564c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005650:	4313      	orrs	r3, r2
 8005652:	b25b      	sxtb	r3, r3
 8005654:	b2da      	uxtb	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <BMP388_SetIIRFilterCoeff>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong filter coefficient
 */
HAL_StatusTypeDef BMP388_SetIIRFilterCoeff(BMP388_HandleTypeDef *bmp, uint8_t filtercoeff){
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	70fb      	strb	r3, [r7, #3]
	if(filtercoeff > BMP3_IIR_FILTER_COEFF_127){
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	2b07      	cmp	r3, #7
 8005678:	d901      	bls.n	800567e <BMP388_SetIIRFilterCoeff+0x16>
		return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e005      	b.n	800568a <BMP388_SetIIRFilterCoeff+0x22>
	}
	bmp->_filtercoeff = filtercoeff << 1;
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	b2da      	uxtb	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <BMP388_SetOutputDataRate>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetOutputDataRate(BMP388_HandleTypeDef *bmp, uint8_t odr){
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	70fb      	strb	r3, [r7, #3]
	if(odr > BMP3_ODR_0_001_HZ){
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	2b11      	cmp	r3, #17
 80056a6:	d901      	bls.n	80056ac <BMP388_SetOutputDataRate+0x16>
		return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e003      	b.n	80056b4 <BMP388_SetOutputDataRate+0x1e>
	}
	bmp->_odr = odr;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	78fa      	ldrb	r2, [r7, #3]
 80056b0:	719a      	strb	r2, [r3, #6]
	return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <BMP388_ReadRawPressTempTime>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadRawPressTempTime(BMP388_HandleTypeDef *bmp, uint32_t *raw_pressure, uint32_t *raw_temperature, uint32_t *time){
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
	}*/

	uint8_t raw_data[11]; //registers in order 0x04 - 0x06 press data, 0x07 - 0x09 temp data, 0x0A and 0x0B reserved, 0x0C - 0x0E time data -> 11 byte
	// Get raw data for pressure and temperature
	//rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 11);
	rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 6);
 80056ce:	f107 0214 	add.w	r2, r7, #20
 80056d2:	2306      	movs	r3, #6
 80056d4:	2104      	movs	r1, #4
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 fb1f 	bl	8005d1a <BMP388_ReadBytes>
 80056dc:	4603      	mov	r3, r0
 80056de:	77fb      	strb	r3, [r7, #31]
	if(rslt != HAL_OK){
 80056e0:	7ffb      	ldrb	r3, [r7, #31]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <BMP388_ReadRawPressTempTime+0x2a>
		return rslt;
 80056e6:	7ffb      	ldrb	r3, [r7, #31]
 80056e8:	e012      	b.n	8005710 <BMP388_ReadRawPressTempTime+0x50>
//	uint32_t data_xlsb;
//	uint32_t data_lsb;
//	uint32_t data_msb;

	// Parsing pressure data
	*raw_pressure = (uint32_t)raw_data[2] << 16 | (uint32_t)raw_data[1] << 8 | (uint32_t)raw_data[0];
 80056ea:	7dbb      	ldrb	r3, [r7, #22]
 80056ec:	041a      	lsls	r2, r3, #16
 80056ee:	7d7b      	ldrb	r3, [r7, #21]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	4313      	orrs	r3, r2
 80056f4:	7d3a      	ldrb	r2, [r7, #20]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	601a      	str	r2, [r3, #0]

	// Parsing temperature data
	*raw_temperature = (uint32_t)raw_data[5] << 16 | (uint32_t)raw_data[4] << 8 | (uint32_t)raw_data[3];
 80056fc:	7e7b      	ldrb	r3, [r7, #25]
 80056fe:	041a      	lsls	r2, r3, #16
 8005700:	7e3b      	ldrb	r3, [r7, #24]
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	4313      	orrs	r3, r2
 8005706:	7dfa      	ldrb	r2, [r7, #23]
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	601a      	str	r2, [r3, #0]

	// Parsing time bytes
	//*time = (uint32_t)raw_data[10] << 16 | (uint32_t)raw_data[9] << 8 | (uint32_t)raw_data[8];


	return rslt;
 800570e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3720      	adds	r7, #32
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <BMP388_CompensateRawPressTemp>:
 *	@param[out]	temperature		: Pointer to the variable that contain temperature.
 *
 *  @return none
 */
void BMP388_CompensateRawPressTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_pressure, uint32_t raw_temperature,
									  	  	  	  	  	  	  float *pressure, float *temperature){
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
	float temp;
	float press;

	BMP388_CompensateTemp(bmp, raw_temperature, &temp);
 8005726:	f107 0314 	add.w	r3, r7, #20
 800572a:	461a      	mov	r2, r3
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f9ec 	bl	8005b0c <BMP388_CompensateTemp>
	BMP388_CompensatePress(bmp, temp, raw_pressure, &press);
 8005734:	edd7 7a05 	vldr	s15, [r7, #20]
 8005738:	f107 0310 	add.w	r3, r7, #16
 800573c:	461a      	mov	r2, r3
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	eeb0 0a67 	vmov.f32	s0, s15
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 fa17 	bl	8005b78 <BMP388_CompensatePress>

	*pressure = press;
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	601a      	str	r2, [r3, #0]
	*temperature = temp;
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	601a      	str	r2, [r3, #0]
}
 8005756:	bf00      	nop
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <BMP388_FindAltitude>:
 *	@param[in] ground_pressure	: Pressure at ground
 *  @param[in] pressure			: Pressure that measured at flight.
 *
 *  @return Altitude
 */
float BMP388_FindAltitude(float ground_pressure, float pressure){
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	ed87 0a01 	vstr	s0, [r7, #4]
 800576a:	edc7 0a00 	vstr	s1, [r7]

	// Note that using the equation from wikipedia can give bad results
	// at high altitude. See this thread for more information:
	//  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

	return 44330.0 * (1.0 - pow(pressure / ground_pressure, 0.1903));
 800576e:	ed97 7a00 	vldr	s14, [r7]
 8005772:	edd7 7a01 	vldr	s15, [r7, #4]
 8005776:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800577a:	ee16 0a90 	vmov	r0, s13
 800577e:	f7fa fee3 	bl	8000548 <__aeabi_f2d>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80057d0 <BMP388_FindAltitude+0x70>
 800578a:	ec43 2b10 	vmov	d0, r2, r3
 800578e:	f00e f937 	bl	8013a00 <pow>
 8005792:	ec53 2b10 	vmov	r2, r3, d0
 8005796:	f04f 0000 	mov.w	r0, #0
 800579a:	4911      	ldr	r1, [pc, #68]	; (80057e0 <BMP388_FindAltitude+0x80>)
 800579c:	f7fa fd74 	bl	8000288 <__aeabi_dsub>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4610      	mov	r0, r2
 80057a6:	4619      	mov	r1, r3
 80057a8:	a30b      	add	r3, pc, #44	; (adr r3, 80057d8 <BMP388_FindAltitude+0x78>)
 80057aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ae:	f7fa ff23 	bl	80005f8 <__aeabi_dmul>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4610      	mov	r0, r2
 80057b8:	4619      	mov	r1, r3
 80057ba:	f7fb fa15 	bl	8000be8 <__aeabi_d2f>
 80057be:	4603      	mov	r3, r0
 80057c0:	ee07 3a90 	vmov	s15, r3
}
 80057c4:	eeb0 0a67 	vmov.f32	s0, s15
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	1a36e2eb 	.word	0x1a36e2eb
 80057d4:	3fc85bc0 	.word	0x3fc85bc0
 80057d8:	00000000 	.word	0x00000000
 80057dc:	40e5a540 	.word	0x40e5a540
 80057e0:	3ff00000 	.word	0x3ff00000

080057e4 <BMP388_SoftReset>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_SoftReset(BMP388_HandleTypeDef *bmp){
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
	uint8_t rst_cmnd = BMP388_SOFTRESET;
 80057ec:	23b6      	movs	r3, #182	; 0xb6
 80057ee:	73bb      	strb	r3, [r7, #14]
    uint8_t cmd_err_status;

	HAL_StatusTypeDef rslt;

	// Reading STATUS reg to understand that the BMP388 is ready to receive command
	rslt = BMP388_ReadBytes(bmp, STATUS, &cmd_rdy_status, 1);
 80057f0:	f107 020d 	add.w	r2, r7, #13
 80057f4:	2301      	movs	r3, #1
 80057f6:	2103      	movs	r1, #3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fa8e 	bl	8005d1a <BMP388_ReadBytes>
 80057fe:	4603      	mov	r3, r0
 8005800:	73fb      	strb	r3, [r7, #15]
	if((rslt == HAL_OK) && (cmd_rdy_status & BMP388_CMD_RDY)){
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d128      	bne.n	800585a <BMP388_SoftReset+0x76>
 8005808:	7b7b      	ldrb	r3, [r7, #13]
 800580a:	f003 0310 	and.w	r3, r3, #16
 800580e:	2b00      	cmp	r3, #0
 8005810:	d023      	beq.n	800585a <BMP388_SoftReset+0x76>
		// Writing SOFTRESET command to CMD reg
		rslt = BMP388_WriteBytes(bmp, CMD, &rst_cmnd, 1);
 8005812:	f107 020e 	add.w	r2, r7, #14
 8005816:	2301      	movs	r3, #1
 8005818:	217e      	movs	r1, #126	; 0x7e
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fa9b 	bl	8005d56 <BMP388_WriteBytes>
 8005820:	4603      	mov	r3, r0
 8005822:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d115      	bne.n	8005856 <BMP388_SoftReset+0x72>
			// 2 ms pause then check ERR reg
			HAL_Delay(2);
 800582a:	2002      	movs	r0, #2
 800582c:	f000 fbe2 	bl	8005ff4 <HAL_Delay>
			rslt = BMP388_ReadBytes(bmp, ERR_REG, &cmd_err_status, 1);
 8005830:	f107 020c 	add.w	r2, r7, #12
 8005834:	2301      	movs	r3, #1
 8005836:	2102      	movs	r1, #2
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fa6e 	bl	8005d1a <BMP388_ReadBytes>
 800583e:	4603      	mov	r3, r0
 8005840:	73fb      	strb	r3, [r7, #15]
			if((cmd_err_status & CMD) || (rslt != HAL_OK)){
 8005842:	7b3b      	ldrb	r3, [r7, #12]
 8005844:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005848:	2b00      	cmp	r3, #0
 800584a:	d102      	bne.n	8005852 <BMP388_SoftReset+0x6e>
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <BMP388_SoftReset+0x76>
				return rslt;
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	e002      	b.n	800585c <BMP388_SoftReset+0x78>
			}
		}
		else{
			return rslt;
 8005856:	7bfb      	ldrb	r3, [r7, #15]
 8005858:	e000      	b.n	800585c <BMP388_SoftReset+0x78>
		}
	}

	return rslt;
 800585a:	7bfb      	ldrb	r3, [r7, #15]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <BMP388_GetCalibData>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_GetCalibData(BMP388_HandleTypeDef *bmp){
 8005864:	b580      	push	{r7, lr}
 8005866:	b090      	sub	sp, #64	; 0x40
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t calib_buff[BMP388_CALIBDATA_LEN] = {0};
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	f107 0310 	add.w	r3, r7, #16
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	609a      	str	r2, [r3, #8]
 800587c:	60da      	str	r2, [r3, #12]
 800587e:	741a      	strb	r2, [r3, #16]
	int8_t		raw_par_p8;
	int16_t		raw_par_p9;
	int8_t		raw_par_p10;
	int8_t		raw_par_p11;

	rslt = BMP388_ReadBytes(bmp, CALIB_DATA, calib_buff, BMP388_CALIBDATA_LEN);
 8005880:	f107 020c 	add.w	r2, r7, #12
 8005884:	2315      	movs	r3, #21
 8005886:	2131      	movs	r1, #49	; 0x31
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fa46 	bl	8005d1a <BMP388_ReadBytes>
 800588e:	4603      	mov	r3, r0
 8005890:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	float temp_var;
	if(rslt == HAL_OK){
 8005894:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005898:	2b00      	cmp	r3, #0
 800589a:	f040 812f 	bne.w	8005afc <BMP388_GetCalibData+0x298>
		// PAR_T1
		temp_var = 0.00390625f;
 800589e:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 80058a2:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t1 = ((uint16_t)calib_buff[1] << 8) | (uint16_t)calib_buff[0];
 80058a4:	7b7b      	ldrb	r3, [r7, #13]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	b21a      	sxth	r2, r3
 80058aa:	7b3b      	ldrb	r3, [r7, #12]
 80058ac:	b21b      	sxth	r3, r3
 80058ae:	4313      	orrs	r3, r2
 80058b0:	b21b      	sxth	r3, r3
 80058b2:	86fb      	strh	r3, [r7, #54]	; 0x36
		bmp->_calib_data.par_t1 = (float)raw_par_t1 / temp_var;
 80058b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058b6:	ee07 3a90 	vmov	s15, r3
 80058ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058be:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80058c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	edc3 7a02 	vstr	s15, [r3, #8]
		// PAR_T2
		temp_var = 1073741824.f;
 80058cc:	f04f 439d 	mov.w	r3, #1317011456	; 0x4e800000
 80058d0:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t2 = ((uint16_t)calib_buff[3] << 8) | (uint16_t)calib_buff[2];
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	b21a      	sxth	r2, r3
 80058d8:	7bbb      	ldrb	r3, [r7, #14]
 80058da:	b21b      	sxth	r3, r3
 80058dc:	4313      	orrs	r3, r2
 80058de:	b21b      	sxth	r3, r3
 80058e0:	86bb      	strh	r3, [r7, #52]	; 0x34
		bmp->_calib_data.par_t2 = (float)raw_par_t2 / temp_var;
 80058e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058e4:	ee07 3a90 	vmov	s15, r3
 80058e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ec:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80058f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	edc3 7a03 	vstr	s15, [r3, #12]
		// PAR_T3
		temp_var = 281474976710656.f;
 80058fa:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 80058fe:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t3 = calib_buff[4];
 8005900:	7c3b      	ldrb	r3, [r7, #16]
 8005902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		bmp->_calib_data.par_t3 = (float)raw_par_t3 / temp_var;
 8005906:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800590a:	ee07 3a90 	vmov	s15, r3
 800590e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005912:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	edc3 7a04 	vstr	s15, [r3, #16]
		// PAR_P1
		temp_var = 1048576.f;
 8005920:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 8005924:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p1 = ((int16_t)calib_buff[6] << 8) | (int16_t)calib_buff[5];
 8005926:	7cbb      	ldrb	r3, [r7, #18]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	b21a      	sxth	r2, r3
 800592c:	7c7b      	ldrb	r3, [r7, #17]
 800592e:	b21b      	sxth	r3, r3
 8005930:	4313      	orrs	r3, r2
 8005932:	863b      	strh	r3, [r7, #48]	; 0x30
		bmp->_calib_data.par_p1 = ((float)raw_par_p1 - 16384) / temp_var;
 8005934:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8005938:	ee07 3a90 	vmov	s15, r3
 800593c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005940:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8005b08 <BMP388_GetCalibData+0x2a4>
 8005944:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005948:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800594c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	edc3 7a05 	vstr	s15, [r3, #20]
		// PAR_P2
		temp_var = 536870912.f;
 8005956:	f04f 439c 	mov.w	r3, #1308622848	; 0x4e000000
 800595a:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p2 = ((int16_t)calib_buff[8] << 8) | (int16_t)calib_buff[7];
 800595c:	7d3b      	ldrb	r3, [r7, #20]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	b21a      	sxth	r2, r3
 8005962:	7cfb      	ldrb	r3, [r7, #19]
 8005964:	b21b      	sxth	r3, r3
 8005966:	4313      	orrs	r3, r2
 8005968:	85fb      	strh	r3, [r7, #46]	; 0x2e
		bmp->_calib_data.par_p2 = ((float)raw_par_p2 - 16384) / temp_var;
 800596a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005976:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005b08 <BMP388_GetCalibData+0x2a4>
 800597a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800597e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	edc3 7a06 	vstr	s15, [r3, #24]
		// PAR_P3
		temp_var = 4294967296.f;
 800598c:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
 8005990:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p3 = (int8_t)calib_buff[9];
 8005992:	7d7b      	ldrb	r3, [r7, #21]
 8005994:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		bmp->_calib_data.par_p3 = (float)raw_par_p3 / temp_var;
 8005998:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800599c:	ee07 3a90 	vmov	s15, r3
 80059a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80059a4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80059a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	edc3 7a07 	vstr	s15, [r3, #28]
		// PAR_P4
		temp_var = 137438953472.f;
 80059b2:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 80059b6:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p4 = (int8_t)calib_buff[10];
 80059b8:	7dbb      	ldrb	r3, [r7, #22]
 80059ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		bmp->_calib_data.par_p4 = (float)raw_par_p4 / temp_var;
 80059be:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80059ca:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80059ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	edc3 7a08 	vstr	s15, [r3, #32]
		// PAR_P5
		temp_var = 0.125f;
 80059d8:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 80059dc:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p5 = ((uint16_t)calib_buff[12] << 8) | (uint16_t)calib_buff[11];
 80059de:	7e3b      	ldrb	r3, [r7, #24]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	b21a      	sxth	r2, r3
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
 80059e6:	b21b      	sxth	r3, r3
 80059e8:	4313      	orrs	r3, r2
 80059ea:	b21b      	sxth	r3, r3
 80059ec:	857b      	strh	r3, [r7, #42]	; 0x2a
		bmp->_calib_data.par_p5 = (float)raw_par_p5 / temp_var;
 80059ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80059fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		// PAR_P6
		temp_var = 64.f;
 8005a06:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8005a0a:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p6 = ((uint16_t)calib_buff[14] << 8) | (uint16_t)calib_buff[13];
 8005a0c:	7ebb      	ldrb	r3, [r7, #26]
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	b21a      	sxth	r2, r3
 8005a12:	7e7b      	ldrb	r3, [r7, #25]
 8005a14:	b21b      	sxth	r3, r3
 8005a16:	4313      	orrs	r3, r2
 8005a18:	b21b      	sxth	r3, r3
 8005a1a:	853b      	strh	r3, [r7, #40]	; 0x28
		bmp->_calib_data.par_p6 = (float)raw_par_p6 / temp_var;
 8005a1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a26:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		// PAR_P7
		temp_var = 256.f;
 8005a34:	f04f 4387 	mov.w	r3, #1132462080	; 0x43800000
 8005a38:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p7 = (int8_t)calib_buff[15];
 8005a3a:	7efb      	ldrb	r3, [r7, #27]
 8005a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		bmp->_calib_data.par_p7 = (float)raw_par_p7 / temp_var;
 8005a40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a44:	ee07 3a90 	vmov	s15, r3
 8005a48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005a4c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005a50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		// PAR_P8
		temp_var = 32768.f;
 8005a5a:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 8005a5e:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p8 = (int8_t)calib_buff[16];
 8005a60:	7f3b      	ldrb	r3, [r7, #28]
 8005a62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bmp->_calib_data.par_p8 = (float)raw_par_p8 / temp_var;
 8005a66:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005a72:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		// PAR_P9
		temp_var = 281474976710656.f;
 8005a80:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8005a84:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p9 = ((int16_t)calib_buff[18] << 8) | (int16_t)calib_buff[17];
 8005a86:	7fbb      	ldrb	r3, [r7, #30]
 8005a88:	021b      	lsls	r3, r3, #8
 8005a8a:	b21a      	sxth	r2, r3
 8005a8c:	7f7b      	ldrb	r3, [r7, #29]
 8005a8e:	b21b      	sxth	r3, r3
 8005a90:	4313      	orrs	r3, r2
 8005a92:	84bb      	strh	r3, [r7, #36]	; 0x24
		bmp->_calib_data.par_p9 = (float)raw_par_p9 / temp_var;
 8005a94:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005a98:	ee07 3a90 	vmov	s15, r3
 8005a9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005aa0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		// PAR_P10
		temp_var = 281474976710656.f;
 8005aae:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8005ab2:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p10 = (int8_t)calib_buff[19];
 8005ab4:	7ffb      	ldrb	r3, [r7, #31]
 8005ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		bmp->_calib_data.par_p10 = (float)raw_par_p10 / temp_var;
 8005aba:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005ac6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// PAR_P11
		temp_var = 36893488147419103232.f;
 8005ad4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005ad8:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p11 = (int8_t)calib_buff[20];
 8005ada:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ade:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		bmp->_calib_data.par_p11 = (float)raw_par_p11 / temp_var;
 8005ae2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005ae6:	ee07 3a90 	vmov	s15, r3
 8005aea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005aee:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	return rslt;
 8005afc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3740      	adds	r7, #64	; 0x40
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	46800000 	.word	0x46800000

08005b0c <BMP388_CompensateTemp>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
float BMP388_CompensateTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_temp, float *temp){
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
    float partial_data1 = (float)(raw_temp - bmp->_calib_data.par_t1);;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	edd3 7a02 	vldr	s15, [r3, #8]
 8005b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b2c:	edc7 7a05 	vstr	s15, [r7, #20]
    float partial_data2 = (float)(partial_data1 * bmp->_calib_data.par_t2);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b36:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	edc7 7a04 	vstr	s15, [r7, #16]

    *temp = partial_data2 + (partial_data1 * partial_data1) * bmp->_calib_data.par_t3;
 8005b42:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b46:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b54:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	edc3 7a00 	vstr	s15, [r3]

    return *temp;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	ee07 3a90 	vmov	s15, r3
}
 8005b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <BMP388_CompensatePress>:
 *	@param[out] press		: Measured pressure in Pa
 *
 *  @return Status of execution
 *  @retval = press			: Compensated pressure value
 */
float BMP388_CompensatePress(BMP388_HandleTypeDef *bmp, float temp, uint32_t raw_press, float *press){
 8005b78:	b480      	push	{r7}
 8005b7a:	b08b      	sub	sp, #44	; 0x2c
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b84:	6079      	str	r1, [r7, #4]
 8005b86:	603a      	str	r2, [r7, #0]
    float partial_out1;
    float partial_out2;



    partial_data1 = bmp->_calib_data.par_p6 * temp;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005b8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b96:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p7 * (temp * temp);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005ba0:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ba4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bac:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p8 * (temp * temp * temp);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005bb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bba:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005bbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bca:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out1 = bmp->_calib_data.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005bd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bdc:	edd7 7a08 	vldr	s15, [r7, #32]
 8005be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be4:	ed97 7a07 	vldr	s14, [r7, #28]
 8005be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bec:	edc7 7a06 	vstr	s15, [r7, #24]

    partial_data1 = bmp->_calib_data.par_p2 * temp;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	edd3 7a06 	vldr	s15, [r3, #24]
 8005bf6:	ed97 7a02 	vldr	s14, [r7, #8]
 8005bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p3 * (temp * temp);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	ed93 7a07 	vldr	s14, [r3, #28]
 8005c08:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c14:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p4 * (temp * temp * temp);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	ed93 7a08 	vldr	s14, [r3, #32]
 8005c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c22:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c32:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out2 = (float)raw_press * (bmp->_calib_data.par_p1 + partial_data1 + partial_data2 + partial_data3);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	ee07 3a90 	vmov	s15, r3
 8005c3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	edd3 6a05 	vldr	s13, [r3, #20]
 8005c46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005c4a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005c4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005c52:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005c56:	edd7 7a07 	vldr	s15, [r7, #28]
 8005c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c62:	edc7 7a05 	vstr	s15, [r7, #20]

    partial_data1 = (float)raw_press * (float)raw_press;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	ee07 3a90 	vmov	s15, r3
 8005c6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p9 + bmp->_calib_data.par_p10 * temp;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005c8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c9a:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = partial_data1 * partial_data2;
 8005c9e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005ca2:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005caa:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_data4 = partial_data3 + ((float)raw_press * (float)raw_press * (float)raw_press) * bmp->_calib_data.par_p11;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	ee07 3a90 	vmov	s15, r3
 8005cb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	ee07 3a90 	vmov	s15, r3
 8005ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cde:	ed97 7a07 	vldr	s14, [r7, #28]
 8005ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ce6:	edc7 7a04 	vstr	s15, [r7, #16]

    *press = partial_out1 + partial_out2 + partial_data4;
 8005cea:	ed97 7a06 	vldr	s14, [r7, #24]
 8005cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8005cf2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8005cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	edc3 7a00 	vstr	s15, [r3]

    return *press;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	ee07 3a90 	vmov	s15, r3
}
 8005d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d10:	372c      	adds	r7, #44	; 0x2c
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <BMP388_ReadBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b088      	sub	sp, #32
 8005d1e:	af04      	add	r7, sp, #16
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	461a      	mov	r2, r3
 8005d26:	460b      	mov	r3, r1
 8005d28:	72fb      	strb	r3, [r7, #11]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	7afb      	ldrb	r3, [r7, #11]
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	7abb      	ldrb	r3, [r7, #10]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2164      	movs	r1, #100	; 0x64
 8005d3c:	9102      	str	r1, [sp, #8]
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	2301      	movs	r3, #1
 8005d46:	21ec      	movs	r1, #236	; 0xec
 8005d48:	f001 fd14 	bl	8007774 <HAL_I2C_Mem_Read>
 8005d4c:	4603      	mov	r3, r0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <BMP388_WriteBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_WriteBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b088      	sub	sp, #32
 8005d5a:	af04      	add	r7, sp, #16
 8005d5c:	60f8      	str	r0, [r7, #12]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	461a      	mov	r2, r3
 8005d62:	460b      	mov	r3, r1
 8005d64:	72fb      	strb	r3, [r7, #11]
 8005d66:	4613      	mov	r3, r2
 8005d68:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	7afb      	ldrb	r3, [r7, #11]
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	7abb      	ldrb	r3, [r7, #10]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2164      	movs	r1, #100	; 0x64
 8005d78:	9102      	str	r1, [sp, #8]
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	2301      	movs	r3, #1
 8005d82:	21ec      	movs	r1, #236	; 0xec
 8005d84:	f001 fbfc 	bl	8007580 <HAL_I2C_Mem_Write>
 8005d88:	4603      	mov	r3, r0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <set_duty_Oneshot42>:
#define P_yaw 5
#define D_yaw 0



void set_duty_Oneshot42(TIM_HandleTypeDef* const pwmHandle1, uint16_t ref_1, uint16_t ref_2, uint16_t ref_3, uint16_t ref_4){
 8005d92:	b480      	push	{r7}
 8005d94:	b085      	sub	sp, #20
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	4608      	mov	r0, r1
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4603      	mov	r3, r0
 8005da2:	817b      	strh	r3, [r7, #10]
 8005da4:	460b      	mov	r3, r1
 8005da6:	813b      	strh	r3, [r7, #8]
 8005da8:	4613      	mov	r3, r2
 8005daa:	80fb      	strh	r3, [r7, #6]
	// Multishot42 12 kHz PSC 7-1, ARR 1000-1 -> 1000 = 100%, 500 = stop, ?0 = -100%?
	pwmHandle1 -> Instance -> CCR1 = ref_1;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	897a      	ldrh	r2, [r7, #10]
 8005db2:	635a      	str	r2, [r3, #52]	; 0x34
	pwmHandle1 -> Instance -> CCR2 = ref_2;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	893a      	ldrh	r2, [r7, #8]
 8005dba:	639a      	str	r2, [r3, #56]	; 0x38
	pwmHandle1 -> Instance -> CCR3 = ref_3;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	88fa      	ldrh	r2, [r7, #6]
 8005dc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pwmHandle1 -> Instance -> CCR4 = ref_4;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	8b3a      	ldrh	r2, [r7, #24]
 8005dca:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005dcc:	bf00      	nop
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <CRSFtoDuty>:

float CRSFtoDuty(uint16_t CRSF_val){
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	4603      	mov	r3, r0
 8005de0:	80fb      	strh	r3, [r7, #6]
	float Duty;
//	Duty = 550+((float)(CRSF_val-172))/4.1; // minimum duty 55% max duty 95%
	Duty = 550+((float)(CRSF_val-172))/4.1*0.6; //for safety reasons minimum duty 55% max duty 79%
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	3bac      	subs	r3, #172	; 0xac
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dee:	ee17 0a90 	vmov	r0, s15
 8005df2:	f7fa fba9 	bl	8000548 <__aeabi_f2d>
 8005df6:	a315      	add	r3, pc, #84	; (adr r3, 8005e4c <CRSFtoDuty+0x74>)
 8005df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfc:	f7fa fd26 	bl	800084c <__aeabi_ddiv>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4610      	mov	r0, r2
 8005e06:	4619      	mov	r1, r3
 8005e08:	a312      	add	r3, pc, #72	; (adr r3, 8005e54 <CRSFtoDuty+0x7c>)
 8005e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0e:	f7fa fbf3 	bl	80005f8 <__aeabi_dmul>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4610      	mov	r0, r2
 8005e18:	4619      	mov	r1, r3
 8005e1a:	f04f 0200 	mov.w	r2, #0
 8005e1e:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <CRSFtoDuty+0x70>)
 8005e20:	f7fa fa34 	bl	800028c <__adddf3>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4610      	mov	r0, r2
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	f7fa fedc 	bl	8000be8 <__aeabi_d2f>
 8005e30:	4603      	mov	r3, r0
 8005e32:	60fb      	str	r3, [r7, #12]
	return Duty;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	ee07 3a90 	vmov	s15, r3
}
 8005e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	f3af 8000 	nop.w
 8005e48:	40813000 	.word	0x40813000
 8005e4c:	66666666 	.word	0x66666666
 8005e50:	40106666 	.word	0x40106666
 8005e54:	33333333 	.word	0x33333333
 8005e58:	3fe33333 	.word	0x3fe33333

08005e5c <CRSFtoPitch>:

float CRSFtoPitch(uint16_t CRSF_val){
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	4603      	mov	r3, r0
 8005e64:	80fb      	strh	r3, [r7, #6]
	float pitch;
	pitch = ((float)(CRSF_val-992))/820.0;
 8005e66:	88fb      	ldrh	r3, [r7, #6]
 8005e68:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005e6c:	ee07 3a90 	vmov	s15, r3
 8005e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e74:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005e94 <CRSFtoPitch+0x38>
 8005e78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e7c:	edc7 7a03 	vstr	s15, [r7, #12]
	return pitch;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	ee07 3a90 	vmov	s15, r3
}
 8005e86:	eeb0 0a67 	vmov.f32	s0, s15
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	444d0000 	.word	0x444d0000

08005e98 <CRSFtoRoll>:

float CRSFtoRoll(uint16_t CRSF_val){
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	80fb      	strh	r3, [r7, #6]
	float roll;
	roll = ((float)(CRSF_val-992))/820.0;
 8005ea2:	88fb      	ldrh	r3, [r7, #6]
 8005ea4:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005ea8:	ee07 3a90 	vmov	s15, r3
 8005eac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005eb0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005ed0 <CRSFtoRoll+0x38>
 8005eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005eb8:	edc7 7a03 	vstr	s15, [r7, #12]
	return roll;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	ee07 3a90 	vmov	s15, r3
}
 8005ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	444d0000 	.word	0x444d0000

08005ed4 <CRSFtoYaw>:

float CRSFtoYaw(uint16_t CRSF_val){
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	80fb      	strh	r3, [r7, #6]
	float yaw;
	yaw = ((float)(CRSF_val-992))/820.0;
 8005ede:	88fb      	ldrh	r3, [r7, #6]
 8005ee0:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005ee4:	ee07 3a90 	vmov	s15, r3
 8005ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005eec:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005f0c <CRSFtoYaw+0x38>
 8005ef0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ef4:	edc7 7a03 	vstr	s15, [r7, #12]
	return yaw;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	ee07 3a90 	vmov	s15, r3
}
 8005efe:	eeb0 0a67 	vmov.f32	s0, s15
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	444d0000 	.word	0x444d0000

08005f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f14:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <HAL_Init+0x40>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a0d      	ldr	r2, [pc, #52]	; (8005f50 <HAL_Init+0x40>)
 8005f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f20:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <HAL_Init+0x40>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a0a      	ldr	r2, [pc, #40]	; (8005f50 <HAL_Init+0x40>)
 8005f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f2c:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <HAL_Init+0x40>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a07      	ldr	r2, [pc, #28]	; (8005f50 <HAL_Init+0x40>)
 8005f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f38:	2003      	movs	r0, #3
 8005f3a:	f000 fbb1 	bl	80066a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f3e:	200f      	movs	r0, #15
 8005f40:	f000 f808 	bl	8005f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f44:	f7fd fd26 	bl	8003994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40023c00 	.word	0x40023c00

08005f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f5c:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <HAL_InitTick+0x54>)
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4b12      	ldr	r3, [pc, #72]	; (8005fac <HAL_InitTick+0x58>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	4619      	mov	r1, r3
 8005f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fbc9 	bl	800670a <HAL_SYSTICK_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e00e      	b.n	8005fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b0f      	cmp	r3, #15
 8005f86:	d80a      	bhi.n	8005f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f88:	2200      	movs	r2, #0
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f90:	f000 fb91 	bl	80066b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f94:	4a06      	ldr	r2, [pc, #24]	; (8005fb0 <HAL_InitTick+0x5c>)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e000      	b.n	8005fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	2000000c 	.word	0x2000000c
 8005fac:	20000070 	.word	0x20000070
 8005fb0:	2000006c 	.word	0x2000006c

08005fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fb8:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <HAL_IncTick+0x20>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <HAL_IncTick+0x24>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	4a04      	ldr	r2, [pc, #16]	; (8005fd8 <HAL_IncTick+0x24>)
 8005fc6:	6013      	str	r3, [r2, #0]
}
 8005fc8:	bf00      	nop
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20000070 	.word	0x20000070
 8005fd8:	20000ca4 	.word	0x20000ca4

08005fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  return uwTick;
 8005fe0:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <HAL_GetTick+0x14>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000ca4 	.word	0x20000ca4

08005ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ffc:	f7ff ffee 	bl	8005fdc <HAL_GetTick>
 8006000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d005      	beq.n	800601a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800600e:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <HAL_Delay+0x44>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4413      	add	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800601a:	bf00      	nop
 800601c:	f7ff ffde 	bl	8005fdc <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	429a      	cmp	r2, r3
 800602a:	d8f7      	bhi.n	800601c <HAL_Delay+0x28>
  {
  }
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000070 	.word	0x20000070

0800603c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e033      	b.n	80060ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fd fcc6 	bl	80039ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	f003 0310 	and.w	r3, r3, #16
 8006076:	2b00      	cmp	r3, #0
 8006078:	d118      	bne.n	80060ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006082:	f023 0302 	bic.w	r3, r3, #2
 8006086:	f043 0202 	orr.w	r2, r3, #2
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f93a 	bl	8006308 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	f043 0201 	orr.w	r2, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	641a      	str	r2, [r3, #64]	; 0x40
 80060aa:	e001      	b.n	80060b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d101      	bne.n	80060e0 <HAL_ADC_ConfigChannel+0x1c>
 80060dc:	2302      	movs	r3, #2
 80060de:	e105      	b.n	80062ec <HAL_ADC_ConfigChannel+0x228>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b09      	cmp	r3, #9
 80060ee:	d925      	bls.n	800613c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68d9      	ldr	r1, [r3, #12]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	461a      	mov	r2, r3
 80060fe:	4613      	mov	r3, r2
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	4413      	add	r3, r2
 8006104:	3b1e      	subs	r3, #30
 8006106:	2207      	movs	r2, #7
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	43da      	mvns	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	400a      	ands	r2, r1
 8006114:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68d9      	ldr	r1, [r3, #12]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	4618      	mov	r0, r3
 8006128:	4603      	mov	r3, r0
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	4403      	add	r3, r0
 800612e:	3b1e      	subs	r3, #30
 8006130:	409a      	lsls	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	60da      	str	r2, [r3, #12]
 800613a:	e022      	b.n	8006182 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6919      	ldr	r1, [r3, #16]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	461a      	mov	r2, r3
 800614a:	4613      	mov	r3, r2
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	4413      	add	r3, r2
 8006150:	2207      	movs	r2, #7
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	43da      	mvns	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	400a      	ands	r2, r1
 800615e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6919      	ldr	r1, [r3, #16]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	4618      	mov	r0, r3
 8006172:	4603      	mov	r3, r0
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	4403      	add	r3, r0
 8006178:	409a      	lsls	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2b06      	cmp	r3, #6
 8006188:	d824      	bhi.n	80061d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	3b05      	subs	r3, #5
 800619c:	221f      	movs	r2, #31
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	43da      	mvns	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	400a      	ands	r2, r1
 80061aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	4618      	mov	r0, r3
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	3b05      	subs	r3, #5
 80061c6:	fa00 f203 	lsl.w	r2, r0, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	635a      	str	r2, [r3, #52]	; 0x34
 80061d2:	e04c      	b.n	800626e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	2b0c      	cmp	r3, #12
 80061da:	d824      	bhi.n	8006226 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	3b23      	subs	r3, #35	; 0x23
 80061ee:	221f      	movs	r2, #31
 80061f0:	fa02 f303 	lsl.w	r3, r2, r3
 80061f4:	43da      	mvns	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	400a      	ands	r2, r1
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	4618      	mov	r0, r3
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	3b23      	subs	r3, #35	; 0x23
 8006218:	fa00 f203 	lsl.w	r2, r0, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	631a      	str	r2, [r3, #48]	; 0x30
 8006224:	e023      	b.n	800626e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	3b41      	subs	r3, #65	; 0x41
 8006238:	221f      	movs	r2, #31
 800623a:	fa02 f303 	lsl.w	r3, r2, r3
 800623e:	43da      	mvns	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	400a      	ands	r2, r1
 8006246:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	4618      	mov	r0, r3
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	3b41      	subs	r3, #65	; 0x41
 8006262:	fa00 f203 	lsl.w	r2, r0, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800626e:	4b22      	ldr	r3, [pc, #136]	; (80062f8 <HAL_ADC_ConfigChannel+0x234>)
 8006270:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a21      	ldr	r2, [pc, #132]	; (80062fc <HAL_ADC_ConfigChannel+0x238>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d109      	bne.n	8006290 <HAL_ADC_ConfigChannel+0x1cc>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b12      	cmp	r3, #18
 8006282:	d105      	bne.n	8006290 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a19      	ldr	r2, [pc, #100]	; (80062fc <HAL_ADC_ConfigChannel+0x238>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d123      	bne.n	80062e2 <HAL_ADC_ConfigChannel+0x21e>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b10      	cmp	r3, #16
 80062a0:	d003      	beq.n	80062aa <HAL_ADC_ConfigChannel+0x1e6>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b11      	cmp	r3, #17
 80062a8:	d11b      	bne.n	80062e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b10      	cmp	r3, #16
 80062bc:	d111      	bne.n	80062e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80062be:	4b10      	ldr	r3, [pc, #64]	; (8006300 <HAL_ADC_ConfigChannel+0x23c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a10      	ldr	r2, [pc, #64]	; (8006304 <HAL_ADC_ConfigChannel+0x240>)
 80062c4:	fba2 2303 	umull	r2, r3, r2, r3
 80062c8:	0c9a      	lsrs	r2, r3, #18
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80062d4:	e002      	b.n	80062dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	3b01      	subs	r3, #1
 80062da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f9      	bne.n	80062d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	40012300 	.word	0x40012300
 80062fc:	40012000 	.word	0x40012000
 8006300:	2000000c 	.word	0x2000000c
 8006304:	431bde83 	.word	0x431bde83

08006308 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006310:	4b79      	ldr	r3, [pc, #484]	; (80064f8 <ADC_Init+0x1f0>)
 8006312:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	431a      	orrs	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800633c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6859      	ldr	r1, [r3, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	021a      	lsls	r2, r3, #8
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006360:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6859      	ldr	r1, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6899      	ldr	r1, [r3, #8]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	4a58      	ldr	r2, [pc, #352]	; (80064fc <ADC_Init+0x1f4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d022      	beq.n	80063e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6899      	ldr	r1, [r3, #8]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80063d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6899      	ldr	r1, [r3, #8]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	609a      	str	r2, [r3, #8]
 80063e4:	e00f      	b.n	8006406 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006404:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0202 	bic.w	r2, r2, #2
 8006414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6899      	ldr	r1, [r3, #8]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	7e1b      	ldrb	r3, [r3, #24]
 8006420:	005a      	lsls	r2, r3, #1
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d01b      	beq.n	800646c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006442:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006452:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6859      	ldr	r1, [r3, #4]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	3b01      	subs	r3, #1
 8006460:	035a      	lsls	r2, r3, #13
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	605a      	str	r2, [r3, #4]
 800646a:	e007      	b.n	800647c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800647a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800648a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	3b01      	subs	r3, #1
 8006498:	051a      	lsls	r2, r3, #20
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80064b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6899      	ldr	r1, [r3, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064be:	025a      	lsls	r2, r3, #9
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689a      	ldr	r2, [r3, #8]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6899      	ldr	r1, [r3, #8]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	029a      	lsls	r2, r3, #10
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	609a      	str	r2, [r3, #8]
}
 80064ec:	bf00      	nop
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	40012300 	.word	0x40012300
 80064fc:	0f000001 	.word	0x0f000001

08006500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f003 0307 	and.w	r3, r3, #7
 800650e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006510:	4b0c      	ldr	r3, [pc, #48]	; (8006544 <__NVIC_SetPriorityGrouping+0x44>)
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800651c:	4013      	ands	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800652c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006532:	4a04      	ldr	r2, [pc, #16]	; (8006544 <__NVIC_SetPriorityGrouping+0x44>)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	60d3      	str	r3, [r2, #12]
}
 8006538:	bf00      	nop
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	e000ed00 	.word	0xe000ed00

08006548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800654c:	4b04      	ldr	r3, [pc, #16]	; (8006560 <__NVIC_GetPriorityGrouping+0x18>)
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	0a1b      	lsrs	r3, r3, #8
 8006552:	f003 0307 	and.w	r3, r3, #7
}
 8006556:	4618      	mov	r0, r3
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	e000ed00 	.word	0xe000ed00

08006564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	4603      	mov	r3, r0
 800656c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800656e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006572:	2b00      	cmp	r3, #0
 8006574:	db0b      	blt.n	800658e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006576:	79fb      	ldrb	r3, [r7, #7]
 8006578:	f003 021f 	and.w	r2, r3, #31
 800657c:	4907      	ldr	r1, [pc, #28]	; (800659c <__NVIC_EnableIRQ+0x38>)
 800657e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	2001      	movs	r0, #1
 8006586:	fa00 f202 	lsl.w	r2, r0, r2
 800658a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	e000e100 	.word	0xe000e100

080065a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	4603      	mov	r3, r0
 80065a8:	6039      	str	r1, [r7, #0]
 80065aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	db0a      	blt.n	80065ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	490c      	ldr	r1, [pc, #48]	; (80065ec <__NVIC_SetPriority+0x4c>)
 80065ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065be:	0112      	lsls	r2, r2, #4
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	440b      	add	r3, r1
 80065c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065c8:	e00a      	b.n	80065e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	4908      	ldr	r1, [pc, #32]	; (80065f0 <__NVIC_SetPriority+0x50>)
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	3b04      	subs	r3, #4
 80065d8:	0112      	lsls	r2, r2, #4
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	440b      	add	r3, r1
 80065de:	761a      	strb	r2, [r3, #24]
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	e000e100 	.word	0xe000e100
 80065f0:	e000ed00 	.word	0xe000ed00

080065f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b089      	sub	sp, #36	; 0x24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f1c3 0307 	rsb	r3, r3, #7
 800660e:	2b04      	cmp	r3, #4
 8006610:	bf28      	it	cs
 8006612:	2304      	movcs	r3, #4
 8006614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	3304      	adds	r3, #4
 800661a:	2b06      	cmp	r3, #6
 800661c:	d902      	bls.n	8006624 <NVIC_EncodePriority+0x30>
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	3b03      	subs	r3, #3
 8006622:	e000      	b.n	8006626 <NVIC_EncodePriority+0x32>
 8006624:	2300      	movs	r3, #0
 8006626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006628:	f04f 32ff 	mov.w	r2, #4294967295
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	43da      	mvns	r2, r3
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	401a      	ands	r2, r3
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800663c:	f04f 31ff 	mov.w	r1, #4294967295
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	fa01 f303 	lsl.w	r3, r1, r3
 8006646:	43d9      	mvns	r1, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800664c:	4313      	orrs	r3, r2
         );
}
 800664e:	4618      	mov	r0, r3
 8006650:	3724      	adds	r7, #36	; 0x24
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3b01      	subs	r3, #1
 8006668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800666c:	d301      	bcc.n	8006672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800666e:	2301      	movs	r3, #1
 8006670:	e00f      	b.n	8006692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006672:	4a0a      	ldr	r2, [pc, #40]	; (800669c <SysTick_Config+0x40>)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3b01      	subs	r3, #1
 8006678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800667a:	210f      	movs	r1, #15
 800667c:	f04f 30ff 	mov.w	r0, #4294967295
 8006680:	f7ff ff8e 	bl	80065a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <SysTick_Config+0x40>)
 8006686:	2200      	movs	r2, #0
 8006688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800668a:	4b04      	ldr	r3, [pc, #16]	; (800669c <SysTick_Config+0x40>)
 800668c:	2207      	movs	r2, #7
 800668e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	e000e010 	.word	0xe000e010

080066a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff ff29 	bl	8006500 <__NVIC_SetPriorityGrouping>
}
 80066ae:	bf00      	nop
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b086      	sub	sp, #24
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	4603      	mov	r3, r0
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80066c8:	f7ff ff3e 	bl	8006548 <__NVIC_GetPriorityGrouping>
 80066cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	6978      	ldr	r0, [r7, #20]
 80066d4:	f7ff ff8e 	bl	80065f4 <NVIC_EncodePriority>
 80066d8:	4602      	mov	r2, r0
 80066da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066de:	4611      	mov	r1, r2
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff ff5d 	bl	80065a0 <__NVIC_SetPriority>
}
 80066e6:	bf00      	nop
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b082      	sub	sp, #8
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	4603      	mov	r3, r0
 80066f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff ff31 	bl	8006564 <__NVIC_EnableIRQ>
}
 8006702:	bf00      	nop
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b082      	sub	sp, #8
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff ffa2 	bl	800665c <SysTick_Config>
 8006718:	4603      	mov	r3, r0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006730:	f7ff fc54 	bl	8005fdc <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e099      	b.n	8006874 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0201 	bic.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006760:	e00f      	b.n	8006782 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006762:	f7ff fc3b 	bl	8005fdc <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b05      	cmp	r3, #5
 800676e:	d908      	bls.n	8006782 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2203      	movs	r2, #3
 800677a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e078      	b.n	8006874 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e8      	bne.n	8006762 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4b38      	ldr	r3, [pc, #224]	; (800687c <HAL_DMA_Init+0x158>)
 800679c:	4013      	ands	r3, r2
 800679e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d107      	bne.n	80067ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e4:	4313      	orrs	r3, r2
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f023 0307 	bic.w	r3, r3, #7
 8006802:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	2b04      	cmp	r3, #4
 8006814:	d117      	bne.n	8006846 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	4313      	orrs	r3, r2
 800681e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00e      	beq.n	8006846 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fb01 	bl	8006e30 <DMA_CheckFifoParam>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d008      	beq.n	8006846 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2240      	movs	r2, #64	; 0x40
 8006838:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006842:	2301      	movs	r3, #1
 8006844:	e016      	b.n	8006874 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fab8 	bl	8006dc4 <DMA_CalcBaseAndBitshift>
 8006854:	4603      	mov	r3, r0
 8006856:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685c:	223f      	movs	r2, #63	; 0x3f
 800685e:	409a      	lsls	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	f010803f 	.word	0xf010803f

08006880 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
 800688c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006896:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d101      	bne.n	80068a6 <HAL_DMA_Start_IT+0x26>
 80068a2:	2302      	movs	r3, #2
 80068a4:	e040      	b.n	8006928 <HAL_DMA_Start_IT+0xa8>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d12f      	bne.n	800691a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2202      	movs	r2, #2
 80068be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 fa4a 	bl	8006d68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d8:	223f      	movs	r2, #63	; 0x3f
 80068da:	409a      	lsls	r2, r3
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0216 	orr.w	r2, r2, #22
 80068ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d007      	beq.n	8006908 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0208 	orr.w	r2, r2, #8
 8006906:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	e005      	b.n	8006926 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006922:	2302      	movs	r3, #2
 8006924:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006926:	7dfb      	ldrb	r3, [r7, #23]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800693e:	f7ff fb4d 	bl	8005fdc <HAL_GetTick>
 8006942:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d008      	beq.n	8006962 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2280      	movs	r2, #128	; 0x80
 8006954:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e052      	b.n	8006a08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0216 	bic.w	r2, r2, #22
 8006970:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	695a      	ldr	r2, [r3, #20]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006980:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d103      	bne.n	8006992 <HAL_DMA_Abort+0x62>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800698e:	2b00      	cmp	r3, #0
 8006990:	d007      	beq.n	80069a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0208 	bic.w	r2, r2, #8
 80069a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f022 0201 	bic.w	r2, r2, #1
 80069b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069b2:	e013      	b.n	80069dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80069b4:	f7ff fb12 	bl	8005fdc <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	2b05      	cmp	r3, #5
 80069c0:	d90c      	bls.n	80069dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2203      	movs	r2, #3
 80069cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e015      	b.n	8006a08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e4      	bne.n	80069b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ee:	223f      	movs	r2, #63	; 0x3f
 80069f0:	409a      	lsls	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d004      	beq.n	8006a2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2280      	movs	r2, #128	; 0x80
 8006a28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e00c      	b.n	8006a48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2205      	movs	r2, #5
 8006a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0201 	bic.w	r2, r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006a60:	4b8e      	ldr	r3, [pc, #568]	; (8006c9c <HAL_DMA_IRQHandler+0x248>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a8e      	ldr	r2, [pc, #568]	; (8006ca0 <HAL_DMA_IRQHandler+0x24c>)
 8006a66:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6a:	0a9b      	lsrs	r3, r3, #10
 8006a6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7e:	2208      	movs	r2, #8
 8006a80:	409a      	lsls	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4013      	ands	r3, r2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01a      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d013      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0204 	bic.w	r2, r2, #4
 8006aa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aac:	2208      	movs	r2, #8
 8006aae:	409a      	lsls	r2, r3
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab8:	f043 0201 	orr.w	r2, r3, #1
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	409a      	lsls	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4013      	ands	r3, r2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d012      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	409a      	lsls	r2, r3
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aee:	f043 0202 	orr.w	r2, r3, #2
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006afa:	2204      	movs	r2, #4
 8006afc:	409a      	lsls	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4013      	ands	r3, r2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d012      	beq.n	8006b2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00b      	beq.n	8006b2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b18:	2204      	movs	r2, #4
 8006b1a:	409a      	lsls	r2, r3
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b24:	f043 0204 	orr.w	r2, r3, #4
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b30:	2210      	movs	r2, #16
 8006b32:	409a      	lsls	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4013      	ands	r3, r2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d043      	beq.n	8006bc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0308 	and.w	r3, r3, #8
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d03c      	beq.n	8006bc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b4e:	2210      	movs	r2, #16
 8006b50:	409a      	lsls	r2, r3
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d018      	beq.n	8006b96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d108      	bne.n	8006b84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d024      	beq.n	8006bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
 8006b82:	e01f      	b.n	8006bc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01b      	beq.n	8006bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	4798      	blx	r3
 8006b94:	e016      	b.n	8006bc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d107      	bne.n	8006bb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0208 	bic.w	r2, r2, #8
 8006bb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc8:	2220      	movs	r2, #32
 8006bca:	409a      	lsls	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 808f 	beq.w	8006cf4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0310 	and.w	r3, r3, #16
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 8087 	beq.w	8006cf4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bea:	2220      	movs	r2, #32
 8006bec:	409a      	lsls	r2, r3
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b05      	cmp	r3, #5
 8006bfc:	d136      	bne.n	8006c6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 0216 	bic.w	r2, r2, #22
 8006c0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695a      	ldr	r2, [r3, #20]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d103      	bne.n	8006c2e <HAL_DMA_IRQHandler+0x1da>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d007      	beq.n	8006c3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0208 	bic.w	r2, r2, #8
 8006c3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c42:	223f      	movs	r2, #63	; 0x3f
 8006c44:	409a      	lsls	r2, r3
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d07e      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	4798      	blx	r3
        }
        return;
 8006c6a:	e079      	b.n	8006d60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d01d      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10d      	bne.n	8006ca4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d031      	beq.n	8006cf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	4798      	blx	r3
 8006c98:	e02c      	b.n	8006cf4 <HAL_DMA_IRQHandler+0x2a0>
 8006c9a:	bf00      	nop
 8006c9c:	2000000c 	.word	0x2000000c
 8006ca0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d023      	beq.n	8006cf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	4798      	blx	r3
 8006cb4:	e01e      	b.n	8006cf4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10f      	bne.n	8006ce4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0210 	bic.w	r2, r2, #16
 8006cd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d032      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d022      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2205      	movs	r2, #5
 8006d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0201 	bic.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	3301      	adds	r3, #1
 8006d24:	60bb      	str	r3, [r7, #8]
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d307      	bcc.n	8006d3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1f2      	bne.n	8006d20 <HAL_DMA_IRQHandler+0x2cc>
 8006d3a:	e000      	b.n	8006d3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006d3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d005      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
 8006d5e:	e000      	b.n	8006d62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006d60:	bf00      	nop
    }
  }
}
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	2b40      	cmp	r3, #64	; 0x40
 8006d94:	d108      	bne.n	8006da8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006da6:	e007      	b.n	8006db8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	60da      	str	r2, [r3, #12]
}
 8006db8:	bf00      	nop
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	3b10      	subs	r3, #16
 8006dd4:	4a14      	ldr	r2, [pc, #80]	; (8006e28 <DMA_CalcBaseAndBitshift+0x64>)
 8006dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dda:	091b      	lsrs	r3, r3, #4
 8006ddc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006dde:	4a13      	ldr	r2, [pc, #76]	; (8006e2c <DMA_CalcBaseAndBitshift+0x68>)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4413      	add	r3, r2
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d909      	bls.n	8006e06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006dfa:	f023 0303 	bic.w	r3, r3, #3
 8006dfe:	1d1a      	adds	r2, r3, #4
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	659a      	str	r2, [r3, #88]	; 0x58
 8006e04:	e007      	b.n	8006e16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006e0e:	f023 0303 	bic.w	r3, r3, #3
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	aaaaaaab 	.word	0xaaaaaaab
 8006e2c:	08015fc4 	.word	0x08015fc4

08006e30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d11f      	bne.n	8006e8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b03      	cmp	r3, #3
 8006e4e:	d856      	bhi.n	8006efe <DMA_CheckFifoParam+0xce>
 8006e50:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <DMA_CheckFifoParam+0x28>)
 8006e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e56:	bf00      	nop
 8006e58:	08006e69 	.word	0x08006e69
 8006e5c:	08006e7b 	.word	0x08006e7b
 8006e60:	08006e69 	.word	0x08006e69
 8006e64:	08006eff 	.word	0x08006eff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d046      	beq.n	8006f02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e78:	e043      	b.n	8006f02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e82:	d140      	bne.n	8006f06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e88:	e03d      	b.n	8006f06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e92:	d121      	bne.n	8006ed8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d837      	bhi.n	8006f0a <DMA_CheckFifoParam+0xda>
 8006e9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ea0 <DMA_CheckFifoParam+0x70>)
 8006e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea0:	08006eb1 	.word	0x08006eb1
 8006ea4:	08006eb7 	.word	0x08006eb7
 8006ea8:	08006eb1 	.word	0x08006eb1
 8006eac:	08006ec9 	.word	0x08006ec9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006eb4:	e030      	b.n	8006f18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d025      	beq.n	8006f0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ec6:	e022      	b.n	8006f0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ed0:	d11f      	bne.n	8006f12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006ed6:	e01c      	b.n	8006f12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d903      	bls.n	8006ee6 <DMA_CheckFifoParam+0xb6>
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d003      	beq.n	8006eec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006ee4:	e018      	b.n	8006f18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8006eea:	e015      	b.n	8006f18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00e      	beq.n	8006f16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	73fb      	strb	r3, [r7, #15]
      break;
 8006efc:	e00b      	b.n	8006f16 <DMA_CheckFifoParam+0xe6>
      break;
 8006efe:	bf00      	nop
 8006f00:	e00a      	b.n	8006f18 <DMA_CheckFifoParam+0xe8>
      break;
 8006f02:	bf00      	nop
 8006f04:	e008      	b.n	8006f18 <DMA_CheckFifoParam+0xe8>
      break;
 8006f06:	bf00      	nop
 8006f08:	e006      	b.n	8006f18 <DMA_CheckFifoParam+0xe8>
      break;
 8006f0a:	bf00      	nop
 8006f0c:	e004      	b.n	8006f18 <DMA_CheckFifoParam+0xe8>
      break;
 8006f0e:	bf00      	nop
 8006f10:	e002      	b.n	8006f18 <DMA_CheckFifoParam+0xe8>
      break;   
 8006f12:	bf00      	nop
 8006f14:	e000      	b.n	8006f18 <DMA_CheckFifoParam+0xe8>
      break;
 8006f16:	bf00      	nop
    }
  } 
  
  return status; 
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop

08006f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b089      	sub	sp, #36	; 0x24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f3e:	2300      	movs	r3, #0
 8006f40:	61fb      	str	r3, [r7, #28]
 8006f42:	e16b      	b.n	800721c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006f44:	2201      	movs	r2, #1
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4013      	ands	r3, r2
 8006f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	f040 815a 	bne.w	8007216 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f003 0303 	and.w	r3, r3, #3
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d005      	beq.n	8006f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d130      	bne.n	8006fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	005b      	lsls	r3, r3, #1
 8006f84:	2203      	movs	r2, #3
 8006f86:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8a:	43db      	mvns	r3, r3
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb8:	43db      	mvns	r3, r3
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	091b      	lsrs	r3, r3, #4
 8006fc6:	f003 0201 	and.w	r2, r3, #1
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f003 0303 	and.w	r3, r3, #3
 8006fe4:	2b03      	cmp	r3, #3
 8006fe6:	d017      	beq.n	8007018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	2203      	movs	r2, #3
 8006ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff8:	43db      	mvns	r3, r3
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	005b      	lsls	r3, r3, #1
 8007008:	fa02 f303 	lsl.w	r3, r2, r3
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	4313      	orrs	r3, r2
 8007010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f003 0303 	and.w	r3, r3, #3
 8007020:	2b02      	cmp	r3, #2
 8007022:	d123      	bne.n	800706c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	08da      	lsrs	r2, r3, #3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	3208      	adds	r2, #8
 800702c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f003 0307 	and.w	r3, r3, #7
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	220f      	movs	r2, #15
 800703c:	fa02 f303 	lsl.w	r3, r2, r3
 8007040:	43db      	mvns	r3, r3
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	4013      	ands	r3, r2
 8007046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	691a      	ldr	r2, [r3, #16]
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	fa02 f303 	lsl.w	r3, r2, r3
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	4313      	orrs	r3, r2
 800705c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	08da      	lsrs	r2, r3, #3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3208      	adds	r2, #8
 8007066:	69b9      	ldr	r1, [r7, #24]
 8007068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	2203      	movs	r2, #3
 8007078:	fa02 f303 	lsl.w	r3, r2, r3
 800707c:	43db      	mvns	r3, r3
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	4013      	ands	r3, r2
 8007082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f003 0203 	and.w	r2, r3, #3
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	fa02 f303 	lsl.w	r3, r2, r3
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	4313      	orrs	r3, r2
 8007098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 80b4 	beq.w	8007216 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	4b60      	ldr	r3, [pc, #384]	; (8007234 <HAL_GPIO_Init+0x30c>)
 80070b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b6:	4a5f      	ldr	r2, [pc, #380]	; (8007234 <HAL_GPIO_Init+0x30c>)
 80070b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070bc:	6453      	str	r3, [r2, #68]	; 0x44
 80070be:	4b5d      	ldr	r3, [pc, #372]	; (8007234 <HAL_GPIO_Init+0x30c>)
 80070c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80070ca:	4a5b      	ldr	r2, [pc, #364]	; (8007238 <HAL_GPIO_Init+0x310>)
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	089b      	lsrs	r3, r3, #2
 80070d0:	3302      	adds	r3, #2
 80070d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	220f      	movs	r2, #15
 80070e2:	fa02 f303 	lsl.w	r3, r2, r3
 80070e6:	43db      	mvns	r3, r3
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	4013      	ands	r3, r2
 80070ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a52      	ldr	r2, [pc, #328]	; (800723c <HAL_GPIO_Init+0x314>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d02b      	beq.n	800714e <HAL_GPIO_Init+0x226>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a51      	ldr	r2, [pc, #324]	; (8007240 <HAL_GPIO_Init+0x318>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d025      	beq.n	800714a <HAL_GPIO_Init+0x222>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a50      	ldr	r2, [pc, #320]	; (8007244 <HAL_GPIO_Init+0x31c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d01f      	beq.n	8007146 <HAL_GPIO_Init+0x21e>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a4f      	ldr	r2, [pc, #316]	; (8007248 <HAL_GPIO_Init+0x320>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d019      	beq.n	8007142 <HAL_GPIO_Init+0x21a>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a4e      	ldr	r2, [pc, #312]	; (800724c <HAL_GPIO_Init+0x324>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d013      	beq.n	800713e <HAL_GPIO_Init+0x216>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a4d      	ldr	r2, [pc, #308]	; (8007250 <HAL_GPIO_Init+0x328>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00d      	beq.n	800713a <HAL_GPIO_Init+0x212>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a4c      	ldr	r2, [pc, #304]	; (8007254 <HAL_GPIO_Init+0x32c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d007      	beq.n	8007136 <HAL_GPIO_Init+0x20e>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a4b      	ldr	r2, [pc, #300]	; (8007258 <HAL_GPIO_Init+0x330>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d101      	bne.n	8007132 <HAL_GPIO_Init+0x20a>
 800712e:	2307      	movs	r3, #7
 8007130:	e00e      	b.n	8007150 <HAL_GPIO_Init+0x228>
 8007132:	2308      	movs	r3, #8
 8007134:	e00c      	b.n	8007150 <HAL_GPIO_Init+0x228>
 8007136:	2306      	movs	r3, #6
 8007138:	e00a      	b.n	8007150 <HAL_GPIO_Init+0x228>
 800713a:	2305      	movs	r3, #5
 800713c:	e008      	b.n	8007150 <HAL_GPIO_Init+0x228>
 800713e:	2304      	movs	r3, #4
 8007140:	e006      	b.n	8007150 <HAL_GPIO_Init+0x228>
 8007142:	2303      	movs	r3, #3
 8007144:	e004      	b.n	8007150 <HAL_GPIO_Init+0x228>
 8007146:	2302      	movs	r3, #2
 8007148:	e002      	b.n	8007150 <HAL_GPIO_Init+0x228>
 800714a:	2301      	movs	r3, #1
 800714c:	e000      	b.n	8007150 <HAL_GPIO_Init+0x228>
 800714e:	2300      	movs	r3, #0
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	f002 0203 	and.w	r2, r2, #3
 8007156:	0092      	lsls	r2, r2, #2
 8007158:	4093      	lsls	r3, r2
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	4313      	orrs	r3, r2
 800715e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007160:	4935      	ldr	r1, [pc, #212]	; (8007238 <HAL_GPIO_Init+0x310>)
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	089b      	lsrs	r3, r3, #2
 8007166:	3302      	adds	r3, #2
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800716e:	4b3b      	ldr	r3, [pc, #236]	; (800725c <HAL_GPIO_Init+0x334>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	43db      	mvns	r3, r3
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	4013      	ands	r3, r2
 800717c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	4313      	orrs	r3, r2
 8007190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007192:	4a32      	ldr	r2, [pc, #200]	; (800725c <HAL_GPIO_Init+0x334>)
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007198:	4b30      	ldr	r3, [pc, #192]	; (800725c <HAL_GPIO_Init+0x334>)
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	43db      	mvns	r3, r3
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	4013      	ands	r3, r2
 80071a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80071bc:	4a27      	ldr	r2, [pc, #156]	; (800725c <HAL_GPIO_Init+0x334>)
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80071c2:	4b26      	ldr	r3, [pc, #152]	; (800725c <HAL_GPIO_Init+0x334>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	43db      	mvns	r3, r3
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	4013      	ands	r3, r2
 80071d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80071e6:	4a1d      	ldr	r2, [pc, #116]	; (800725c <HAL_GPIO_Init+0x334>)
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80071ec:	4b1b      	ldr	r3, [pc, #108]	; (800725c <HAL_GPIO_Init+0x334>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	43db      	mvns	r3, r3
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	4013      	ands	r3, r2
 80071fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007210:	4a12      	ldr	r2, [pc, #72]	; (800725c <HAL_GPIO_Init+0x334>)
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	3301      	adds	r3, #1
 800721a:	61fb      	str	r3, [r7, #28]
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	2b0f      	cmp	r3, #15
 8007220:	f67f ae90 	bls.w	8006f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop
 8007228:	3724      	adds	r7, #36	; 0x24
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40023800 	.word	0x40023800
 8007238:	40013800 	.word	0x40013800
 800723c:	40020000 	.word	0x40020000
 8007240:	40020400 	.word	0x40020400
 8007244:	40020800 	.word	0x40020800
 8007248:	40020c00 	.word	0x40020c00
 800724c:	40021000 	.word	0x40021000
 8007250:	40021400 	.word	0x40021400
 8007254:	40021800 	.word	0x40021800
 8007258:	40021c00 	.word	0x40021c00
 800725c:	40013c00 	.word	0x40013c00

08007260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	807b      	strh	r3, [r7, #2]
 800726c:	4613      	mov	r3, r2
 800726e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007270:	787b      	ldrb	r3, [r7, #1]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007276:	887a      	ldrh	r2, [r7, #2]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800727c:	e003      	b.n	8007286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800727e:	887b      	ldrh	r3, [r7, #2]
 8007280:	041a      	lsls	r2, r3, #16
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	619a      	str	r2, [r3, #24]
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007292:	b480      	push	{r7}
 8007294:	b085      	sub	sp, #20
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	460b      	mov	r3, r1
 800729c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80072a4:	887a      	ldrh	r2, [r7, #2]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4013      	ands	r3, r2
 80072aa:	041a      	lsls	r2, r3, #16
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	43d9      	mvns	r1, r3
 80072b0:	887b      	ldrh	r3, [r7, #2]
 80072b2:	400b      	ands	r3, r1
 80072b4:	431a      	orrs	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	619a      	str	r2, [r3, #24]
}
 80072ba:	bf00      	nop
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
	...

080072c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	4603      	mov	r3, r0
 80072d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80072d2:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80072d4:	695a      	ldr	r2, [r3, #20]
 80072d6:	88fb      	ldrh	r3, [r7, #6]
 80072d8:	4013      	ands	r3, r2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d006      	beq.n	80072ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80072de:	4a05      	ldr	r2, [pc, #20]	; (80072f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80072e0:	88fb      	ldrh	r3, [r7, #6]
 80072e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80072e4:	88fb      	ldrh	r3, [r7, #6]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fb f806 	bl	80022f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80072ec:	bf00      	nop
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	40013c00 	.word	0x40013c00

080072f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e12b      	b.n	8007562 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7fc fc0a 	bl	8003b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2224      	movs	r2, #36	; 0x24
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0201 	bic.w	r2, r2, #1
 800733a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800734a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800735a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800735c:	f001 fd2a 	bl	8008db4 <HAL_RCC_GetPCLK1Freq>
 8007360:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	4a81      	ldr	r2, [pc, #516]	; (800756c <HAL_I2C_Init+0x274>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d807      	bhi.n	800737c <HAL_I2C_Init+0x84>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4a80      	ldr	r2, [pc, #512]	; (8007570 <HAL_I2C_Init+0x278>)
 8007370:	4293      	cmp	r3, r2
 8007372:	bf94      	ite	ls
 8007374:	2301      	movls	r3, #1
 8007376:	2300      	movhi	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	e006      	b.n	800738a <HAL_I2C_Init+0x92>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4a7d      	ldr	r2, [pc, #500]	; (8007574 <HAL_I2C_Init+0x27c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	bf94      	ite	ls
 8007384:	2301      	movls	r3, #1
 8007386:	2300      	movhi	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e0e7      	b.n	8007562 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4a78      	ldr	r2, [pc, #480]	; (8007578 <HAL_I2C_Init+0x280>)
 8007396:	fba2 2303 	umull	r2, r3, r2, r3
 800739a:	0c9b      	lsrs	r3, r3, #18
 800739c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	4a6a      	ldr	r2, [pc, #424]	; (800756c <HAL_I2C_Init+0x274>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d802      	bhi.n	80073cc <HAL_I2C_Init+0xd4>
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	3301      	adds	r3, #1
 80073ca:	e009      	b.n	80073e0 <HAL_I2C_Init+0xe8>
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80073d2:	fb02 f303 	mul.w	r3, r2, r3
 80073d6:	4a69      	ldr	r2, [pc, #420]	; (800757c <HAL_I2C_Init+0x284>)
 80073d8:	fba2 2303 	umull	r2, r3, r2, r3
 80073dc:	099b      	lsrs	r3, r3, #6
 80073de:	3301      	adds	r3, #1
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	430b      	orrs	r3, r1
 80073e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80073f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	495c      	ldr	r1, [pc, #368]	; (800756c <HAL_I2C_Init+0x274>)
 80073fc:	428b      	cmp	r3, r1
 80073fe:	d819      	bhi.n	8007434 <HAL_I2C_Init+0x13c>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	1e59      	subs	r1, r3, #1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	005b      	lsls	r3, r3, #1
 800740a:	fbb1 f3f3 	udiv	r3, r1, r3
 800740e:	1c59      	adds	r1, r3, #1
 8007410:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007414:	400b      	ands	r3, r1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <HAL_I2C_Init+0x138>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	1e59      	subs	r1, r3, #1
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	fbb1 f3f3 	udiv	r3, r1, r3
 8007428:	3301      	adds	r3, #1
 800742a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800742e:	e051      	b.n	80074d4 <HAL_I2C_Init+0x1dc>
 8007430:	2304      	movs	r3, #4
 8007432:	e04f      	b.n	80074d4 <HAL_I2C_Init+0x1dc>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d111      	bne.n	8007460 <HAL_I2C_Init+0x168>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	1e58      	subs	r0, r3, #1
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6859      	ldr	r1, [r3, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	440b      	add	r3, r1
 800744a:	fbb0 f3f3 	udiv	r3, r0, r3
 800744e:	3301      	adds	r3, #1
 8007450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007454:	2b00      	cmp	r3, #0
 8007456:	bf0c      	ite	eq
 8007458:	2301      	moveq	r3, #1
 800745a:	2300      	movne	r3, #0
 800745c:	b2db      	uxtb	r3, r3
 800745e:	e012      	b.n	8007486 <HAL_I2C_Init+0x18e>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	1e58      	subs	r0, r3, #1
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6859      	ldr	r1, [r3, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	440b      	add	r3, r1
 800746e:	0099      	lsls	r1, r3, #2
 8007470:	440b      	add	r3, r1
 8007472:	fbb0 f3f3 	udiv	r3, r0, r3
 8007476:	3301      	adds	r3, #1
 8007478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800747c:	2b00      	cmp	r3, #0
 800747e:	bf0c      	ite	eq
 8007480:	2301      	moveq	r3, #1
 8007482:	2300      	movne	r3, #0
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <HAL_I2C_Init+0x196>
 800748a:	2301      	movs	r3, #1
 800748c:	e022      	b.n	80074d4 <HAL_I2C_Init+0x1dc>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10e      	bne.n	80074b4 <HAL_I2C_Init+0x1bc>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	1e58      	subs	r0, r3, #1
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6859      	ldr	r1, [r3, #4]
 800749e:	460b      	mov	r3, r1
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	440b      	add	r3, r1
 80074a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80074a8:	3301      	adds	r3, #1
 80074aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074b2:	e00f      	b.n	80074d4 <HAL_I2C_Init+0x1dc>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	1e58      	subs	r0, r3, #1
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6859      	ldr	r1, [r3, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	440b      	add	r3, r1
 80074c2:	0099      	lsls	r1, r3, #2
 80074c4:	440b      	add	r3, r1
 80074c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80074ca:	3301      	adds	r3, #1
 80074cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074d4:	6879      	ldr	r1, [r7, #4]
 80074d6:	6809      	ldr	r1, [r1, #0]
 80074d8:	4313      	orrs	r3, r2
 80074da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	69da      	ldr	r2, [r3, #28]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	431a      	orrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	6911      	ldr	r1, [r2, #16]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	68d2      	ldr	r2, [r2, #12]
 800750e:	4311      	orrs	r1, r2
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	6812      	ldr	r2, [r2, #0]
 8007514:	430b      	orrs	r3, r1
 8007516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	695a      	ldr	r2, [r3, #20]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	431a      	orrs	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f042 0201 	orr.w	r2, r2, #1
 8007542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2220      	movs	r2, #32
 800754e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	000186a0 	.word	0x000186a0
 8007570:	001e847f 	.word	0x001e847f
 8007574:	003d08ff 	.word	0x003d08ff
 8007578:	431bde83 	.word	0x431bde83
 800757c:	10624dd3 	.word	0x10624dd3

08007580 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af02      	add	r7, sp, #8
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	4608      	mov	r0, r1
 800758a:	4611      	mov	r1, r2
 800758c:	461a      	mov	r2, r3
 800758e:	4603      	mov	r3, r0
 8007590:	817b      	strh	r3, [r7, #10]
 8007592:	460b      	mov	r3, r1
 8007594:	813b      	strh	r3, [r7, #8]
 8007596:	4613      	mov	r3, r2
 8007598:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800759a:	f7fe fd1f 	bl	8005fdc <HAL_GetTick>
 800759e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b20      	cmp	r3, #32
 80075aa:	f040 80d9 	bne.w	8007760 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	2319      	movs	r3, #25
 80075b4:	2201      	movs	r2, #1
 80075b6:	496d      	ldr	r1, [pc, #436]	; (800776c <HAL_I2C_Mem_Write+0x1ec>)
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 fdad 	bl	8008118 <I2C_WaitOnFlagUntilTimeout>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80075c4:	2302      	movs	r3, #2
 80075c6:	e0cc      	b.n	8007762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d101      	bne.n	80075d6 <HAL_I2C_Mem_Write+0x56>
 80075d2:	2302      	movs	r3, #2
 80075d4:	e0c5      	b.n	8007762 <HAL_I2C_Mem_Write+0x1e2>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d007      	beq.n	80075fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0201 	orr.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800760a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2221      	movs	r2, #33	; 0x21
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2240      	movs	r2, #64	; 0x40
 8007618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6a3a      	ldr	r2, [r7, #32]
 8007626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800762c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007632:	b29a      	uxth	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4a4d      	ldr	r2, [pc, #308]	; (8007770 <HAL_I2C_Mem_Write+0x1f0>)
 800763c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800763e:	88f8      	ldrh	r0, [r7, #6]
 8007640:	893a      	ldrh	r2, [r7, #8]
 8007642:	8979      	ldrh	r1, [r7, #10]
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	9301      	str	r3, [sp, #4]
 8007648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	4603      	mov	r3, r0
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 fbe4 	bl	8007e1c <I2C_RequestMemoryWrite>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d052      	beq.n	8007700 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e081      	b.n	8007762 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 fe2e 	bl	80082c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00d      	beq.n	800768a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	2b04      	cmp	r3, #4
 8007674:	d107      	bne.n	8007686 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007684:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e06b      	b.n	8007762 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	781a      	ldrb	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	f003 0304 	and.w	r3, r3, #4
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	d11b      	bne.n	8007700 <HAL_I2C_Mem_Write+0x180>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d017      	beq.n	8007700 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	781a      	ldrb	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ea:	3b01      	subs	r3, #1
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1aa      	bne.n	800765e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 fe1a 	bl	8008346 <I2C_WaitOnBTFFlagUntilTimeout>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00d      	beq.n	8007734 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771c:	2b04      	cmp	r3, #4
 800771e:	d107      	bne.n	8007730 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800772e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e016      	b.n	8007762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2220      	movs	r2, #32
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	e000      	b.n	8007762 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007760:	2302      	movs	r3, #2
  }
}
 8007762:	4618      	mov	r0, r3
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	00100002 	.word	0x00100002
 8007770:	ffff0000 	.word	0xffff0000

08007774 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08c      	sub	sp, #48	; 0x30
 8007778:	af02      	add	r7, sp, #8
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	4608      	mov	r0, r1
 800777e:	4611      	mov	r1, r2
 8007780:	461a      	mov	r2, r3
 8007782:	4603      	mov	r3, r0
 8007784:	817b      	strh	r3, [r7, #10]
 8007786:	460b      	mov	r3, r1
 8007788:	813b      	strh	r3, [r7, #8]
 800778a:	4613      	mov	r3, r2
 800778c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800778e:	f7fe fc25 	bl	8005fdc <HAL_GetTick>
 8007792:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b20      	cmp	r3, #32
 800779e:	f040 8208 	bne.w	8007bb2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	2319      	movs	r3, #25
 80077a8:	2201      	movs	r2, #1
 80077aa:	497b      	ldr	r1, [pc, #492]	; (8007998 <HAL_I2C_Mem_Read+0x224>)
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 fcb3 	bl	8008118 <I2C_WaitOnFlagUntilTimeout>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80077b8:	2302      	movs	r3, #2
 80077ba:	e1fb      	b.n	8007bb4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d101      	bne.n	80077ca <HAL_I2C_Mem_Read+0x56>
 80077c6:	2302      	movs	r3, #2
 80077c8:	e1f4      	b.n	8007bb4 <HAL_I2C_Mem_Read+0x440>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d007      	beq.n	80077f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0201 	orr.w	r2, r2, #1
 80077ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2222      	movs	r2, #34	; 0x22
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2240      	movs	r2, #64	; 0x40
 800780c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007820:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007826:	b29a      	uxth	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4a5b      	ldr	r2, [pc, #364]	; (800799c <HAL_I2C_Mem_Read+0x228>)
 8007830:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007832:	88f8      	ldrh	r0, [r7, #6]
 8007834:	893a      	ldrh	r2, [r7, #8]
 8007836:	8979      	ldrh	r1, [r7, #10]
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	9301      	str	r3, [sp, #4]
 800783c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	4603      	mov	r3, r0
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 fb80 	bl	8007f48 <I2C_RequestMemoryRead>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e1b0      	b.n	8007bb4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007856:	2b00      	cmp	r3, #0
 8007858:	d113      	bne.n	8007882 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800785a:	2300      	movs	r3, #0
 800785c:	623b      	str	r3, [r7, #32]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	623b      	str	r3, [r7, #32]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	623b      	str	r3, [r7, #32]
 800786e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	e184      	b.n	8007b8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007886:	2b01      	cmp	r3, #1
 8007888:	d11b      	bne.n	80078c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007898:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	61fb      	str	r3, [r7, #28]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	61fb      	str	r3, [r7, #28]
 80078ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	e164      	b.n	8007b8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d11b      	bne.n	8007902 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ea:	2300      	movs	r3, #0
 80078ec:	61bb      	str	r3, [r7, #24]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	61bb      	str	r3, [r7, #24]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	61bb      	str	r3, [r7, #24]
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	e144      	b.n	8007b8c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007902:	2300      	movs	r3, #0
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	617b      	str	r3, [r7, #20]
 8007916:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007918:	e138      	b.n	8007b8c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800791e:	2b03      	cmp	r3, #3
 8007920:	f200 80f1 	bhi.w	8007b06 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007928:	2b01      	cmp	r3, #1
 800792a:	d123      	bne.n	8007974 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800792c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800792e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 fd49 	bl	80083c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e139      	b.n	8007bb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	691a      	ldr	r2, [r3, #16]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	b2d2      	uxtb	r2, r2
 800794c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007952:	1c5a      	adds	r2, r3, #1
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007968:	b29b      	uxth	r3, r3
 800796a:	3b01      	subs	r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007972:	e10b      	b.n	8007b8c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007978:	2b02      	cmp	r3, #2
 800797a:	d14e      	bne.n	8007a1a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007982:	2200      	movs	r2, #0
 8007984:	4906      	ldr	r1, [pc, #24]	; (80079a0 <HAL_I2C_Mem_Read+0x22c>)
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 fbc6 	bl	8008118 <I2C_WaitOnFlagUntilTimeout>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d008      	beq.n	80079a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e10e      	b.n	8007bb4 <HAL_I2C_Mem_Read+0x440>
 8007996:	bf00      	nop
 8007998:	00100002 	.word	0x00100002
 800799c:	ffff0000 	.word	0xffff0000
 80079a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	691a      	ldr	r2, [r3, #16]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d0:	3b01      	subs	r3, #1
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079dc:	b29b      	uxth	r3, r3
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	b2d2      	uxtb	r2, r2
 80079f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a18:	e0b8      	b.n	8007b8c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a20:	2200      	movs	r2, #0
 8007a22:	4966      	ldr	r1, [pc, #408]	; (8007bbc <HAL_I2C_Mem_Read+0x448>)
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 fb77 	bl	8008118 <I2C_WaitOnFlagUntilTimeout>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d001      	beq.n	8007a34 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e0bf      	b.n	8007bb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	691a      	ldr	r2, [r3, #16]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	b2d2      	uxtb	r2, r2
 8007a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a60:	3b01      	subs	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	494f      	ldr	r1, [pc, #316]	; (8007bbc <HAL_I2C_Mem_Read+0x448>)
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 fb49 	bl	8008118 <I2C_WaitOnFlagUntilTimeout>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d001      	beq.n	8007a90 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e091      	b.n	8007bb4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	691a      	ldr	r2, [r3, #16]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aaa:	b2d2      	uxtb	r2, r2
 8007aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007abc:	3b01      	subs	r3, #1
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	3b01      	subs	r3, #1
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	691a      	ldr	r2, [r3, #16]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	b2d2      	uxtb	r2, r2
 8007ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aee:	3b01      	subs	r3, #1
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	3b01      	subs	r3, #1
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b04:	e042      	b.n	8007b8c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 fc5c 	bl	80083c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e04c      	b.n	8007bb4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	691a      	ldr	r2, [r3, #16]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	b2d2      	uxtb	r2, r2
 8007b26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b36:	3b01      	subs	r3, #1
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b04      	cmp	r3, #4
 8007b58:	d118      	bne.n	8007b8c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691a      	ldr	r2, [r3, #16]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	b2d2      	uxtb	r2, r2
 8007b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	3b01      	subs	r3, #1
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f47f aec2 	bne.w	800791a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2220      	movs	r2, #32
 8007b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	e000      	b.n	8007bb4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007bb2:	2302      	movs	r3, #2
  }
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3728      	adds	r7, #40	; 0x28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	00010004 	.word	0x00010004

08007bc0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08a      	sub	sp, #40	; 0x28
 8007bc4:	af02      	add	r7, sp, #8
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	607a      	str	r2, [r7, #4]
 8007bca:	603b      	str	r3, [r7, #0]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007bd0:	f7fe fa04 	bl	8005fdc <HAL_GetTick>
 8007bd4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b20      	cmp	r3, #32
 8007be4:	f040 8111 	bne.w	8007e0a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	2319      	movs	r3, #25
 8007bee:	2201      	movs	r2, #1
 8007bf0:	4988      	ldr	r1, [pc, #544]	; (8007e14 <HAL_I2C_IsDeviceReady+0x254>)
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 fa90 	bl	8008118 <I2C_WaitOnFlagUntilTimeout>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007bfe:	2302      	movs	r3, #2
 8007c00:	e104      	b.n	8007e0c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d101      	bne.n	8007c10 <HAL_I2C_IsDeviceReady+0x50>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	e0fd      	b.n	8007e0c <HAL_I2C_IsDeviceReady+0x24c>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d007      	beq.n	8007c36 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f042 0201 	orr.w	r2, r2, #1
 8007c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2224      	movs	r2, #36	; 0x24
 8007c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4a70      	ldr	r2, [pc, #448]	; (8007e18 <HAL_I2C_IsDeviceReady+0x258>)
 8007c58:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c68:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 fa4e 	bl	8008118 <I2C_WaitOnFlagUntilTimeout>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00d      	beq.n	8007c9e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c90:	d103      	bne.n	8007c9a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c98:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e0b6      	b.n	8007e0c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c9e:	897b      	ldrh	r3, [r7, #10]
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007cac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007cae:	f7fe f995 	bl	8005fdc <HAL_GetTick>
 8007cb2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	bf0c      	ite	eq
 8007cc2:	2301      	moveq	r3, #1
 8007cc4:	2300      	movne	r3, #0
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd8:	bf0c      	ite	eq
 8007cda:	2301      	moveq	r3, #1
 8007cdc:	2300      	movne	r3, #0
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007ce2:	e025      	b.n	8007d30 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007ce4:	f7fe f97a 	bl	8005fdc <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d302      	bcc.n	8007cfa <HAL_I2C_IsDeviceReady+0x13a>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d103      	bne.n	8007d02 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	22a0      	movs	r2, #160	; 0xa0
 8007cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	bf0c      	ite	eq
 8007d10:	2301      	moveq	r3, #1
 8007d12:	2300      	movne	r3, #0
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d26:	bf0c      	ite	eq
 8007d28:	2301      	moveq	r3, #1
 8007d2a:	2300      	movne	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2ba0      	cmp	r3, #160	; 0xa0
 8007d3a:	d005      	beq.n	8007d48 <HAL_I2C_IsDeviceReady+0x188>
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d102      	bne.n	8007d48 <HAL_I2C_IsDeviceReady+0x188>
 8007d42:	7dbb      	ldrb	r3, [r7, #22]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d0cd      	beq.n	8007ce4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d129      	bne.n	8007db2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d6c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d6e:	2300      	movs	r3, #0
 8007d70:	613b      	str	r3, [r7, #16]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	613b      	str	r3, [r7, #16]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	613b      	str	r3, [r7, #16]
 8007d82:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	2319      	movs	r3, #25
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	4921      	ldr	r1, [pc, #132]	; (8007e14 <HAL_I2C_IsDeviceReady+0x254>)
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 f9c2 	bl	8008118 <I2C_WaitOnFlagUntilTimeout>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e036      	b.n	8007e0c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2220      	movs	r2, #32
 8007da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	e02c      	b.n	8007e0c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dc0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007dca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	2319      	movs	r3, #25
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	490f      	ldr	r1, [pc, #60]	; (8007e14 <HAL_I2C_IsDeviceReady+0x254>)
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 f99e 	bl	8008118 <I2C_WaitOnFlagUntilTimeout>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e012      	b.n	8007e0c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	3301      	adds	r3, #1
 8007dea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	f4ff af32 	bcc.w	8007c5a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e000      	b.n	8007e0c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007e0a:	2302      	movs	r3, #2
  }
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3720      	adds	r7, #32
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	00100002 	.word	0x00100002
 8007e18:	ffff0000 	.word	0xffff0000

08007e1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	4608      	mov	r0, r1
 8007e26:	4611      	mov	r1, r2
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	817b      	strh	r3, [r7, #10]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	813b      	strh	r3, [r7, #8]
 8007e32:	4613      	mov	r3, r2
 8007e34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f000 f960 	bl	8008118 <I2C_WaitOnFlagUntilTimeout>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00d      	beq.n	8007e7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e6c:	d103      	bne.n	8007e76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e05f      	b.n	8007f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e7a:	897b      	ldrh	r3, [r7, #10]
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	461a      	mov	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	6a3a      	ldr	r2, [r7, #32]
 8007e8e:	492d      	ldr	r1, [pc, #180]	; (8007f44 <I2C_RequestMemoryWrite+0x128>)
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 f998 	bl	80081c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d001      	beq.n	8007ea0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e04c      	b.n	8007f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	617b      	str	r3, [r7, #20]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb8:	6a39      	ldr	r1, [r7, #32]
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 fa02 	bl	80082c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00d      	beq.n	8007ee2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	d107      	bne.n	8007ede <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007edc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e02b      	b.n	8007f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ee2:	88fb      	ldrh	r3, [r7, #6]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d105      	bne.n	8007ef4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ee8:	893b      	ldrh	r3, [r7, #8]
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	611a      	str	r2, [r3, #16]
 8007ef2:	e021      	b.n	8007f38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ef4:	893b      	ldrh	r3, [r7, #8]
 8007ef6:	0a1b      	lsrs	r3, r3, #8
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f04:	6a39      	ldr	r1, [r7, #32]
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 f9dc 	bl	80082c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00d      	beq.n	8007f2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	d107      	bne.n	8007f2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e005      	b.n	8007f3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f2e:	893b      	ldrh	r3, [r7, #8]
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	00010002 	.word	0x00010002

08007f48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af02      	add	r7, sp, #8
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	4608      	mov	r0, r1
 8007f52:	4611      	mov	r1, r2
 8007f54:	461a      	mov	r2, r3
 8007f56:	4603      	mov	r3, r0
 8007f58:	817b      	strh	r3, [r7, #10]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	813b      	strh	r3, [r7, #8]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 f8c2 	bl	8008118 <I2C_WaitOnFlagUntilTimeout>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00d      	beq.n	8007fb6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa8:	d103      	bne.n	8007fb2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e0aa      	b.n	800810c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007fb6:	897b      	ldrh	r3, [r7, #10]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	461a      	mov	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007fc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	6a3a      	ldr	r2, [r7, #32]
 8007fca:	4952      	ldr	r1, [pc, #328]	; (8008114 <I2C_RequestMemoryRead+0x1cc>)
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 f8fa 	bl	80081c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e097      	b.n	800810c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fdc:	2300      	movs	r3, #0
 8007fde:	617b      	str	r3, [r7, #20]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	617b      	str	r3, [r7, #20]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	617b      	str	r3, [r7, #20]
 8007ff0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff4:	6a39      	ldr	r1, [r7, #32]
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f000 f964 	bl	80082c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00d      	beq.n	800801e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	2b04      	cmp	r3, #4
 8008008:	d107      	bne.n	800801a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008018:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e076      	b.n	800810c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800801e:	88fb      	ldrh	r3, [r7, #6]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d105      	bne.n	8008030 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008024:	893b      	ldrh	r3, [r7, #8]
 8008026:	b2da      	uxtb	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	611a      	str	r2, [r3, #16]
 800802e:	e021      	b.n	8008074 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008030:	893b      	ldrh	r3, [r7, #8]
 8008032:	0a1b      	lsrs	r3, r3, #8
 8008034:	b29b      	uxth	r3, r3
 8008036:	b2da      	uxtb	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800803e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008040:	6a39      	ldr	r1, [r7, #32]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f93e 	bl	80082c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00d      	beq.n	800806a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008052:	2b04      	cmp	r3, #4
 8008054:	d107      	bne.n	8008066 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008064:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e050      	b.n	800810c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800806a:	893b      	ldrh	r3, [r7, #8]
 800806c:	b2da      	uxtb	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008076:	6a39      	ldr	r1, [r7, #32]
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 f923 	bl	80082c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00d      	beq.n	80080a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008088:	2b04      	cmp	r3, #4
 800808a:	d107      	bne.n	800809c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800809a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e035      	b.n	800810c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 f82b 	bl	8008118 <I2C_WaitOnFlagUntilTimeout>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00d      	beq.n	80080e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d6:	d103      	bne.n	80080e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e013      	b.n	800810c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80080e4:	897b      	ldrh	r3, [r7, #10]
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	f043 0301 	orr.w	r3, r3, #1
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f6:	6a3a      	ldr	r2, [r7, #32]
 80080f8:	4906      	ldr	r1, [pc, #24]	; (8008114 <I2C_RequestMemoryRead+0x1cc>)
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f000 f863 	bl	80081c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e000      	b.n	800810c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3718      	adds	r7, #24
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	00010002 	.word	0x00010002

08008118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	603b      	str	r3, [r7, #0]
 8008124:	4613      	mov	r3, r2
 8008126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008128:	e025      	b.n	8008176 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008130:	d021      	beq.n	8008176 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008132:	f7fd ff53 	bl	8005fdc <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	429a      	cmp	r2, r3
 8008140:	d302      	bcc.n	8008148 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d116      	bne.n	8008176 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2220      	movs	r2, #32
 8008152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008162:	f043 0220 	orr.w	r2, r3, #32
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e023      	b.n	80081be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	0c1b      	lsrs	r3, r3, #16
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b01      	cmp	r3, #1
 800817e:	d10d      	bne.n	800819c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	43da      	mvns	r2, r3
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	4013      	ands	r3, r2
 800818c:	b29b      	uxth	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	bf0c      	ite	eq
 8008192:	2301      	moveq	r3, #1
 8008194:	2300      	movne	r3, #0
 8008196:	b2db      	uxtb	r3, r3
 8008198:	461a      	mov	r2, r3
 800819a:	e00c      	b.n	80081b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	43da      	mvns	r2, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	4013      	ands	r3, r2
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	bf0c      	ite	eq
 80081ae:	2301      	moveq	r3, #1
 80081b0:	2300      	movne	r3, #0
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	461a      	mov	r2, r3
 80081b6:	79fb      	ldrb	r3, [r7, #7]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d0b6      	beq.n	800812a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b084      	sub	sp, #16
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	60f8      	str	r0, [r7, #12]
 80081ce:	60b9      	str	r1, [r7, #8]
 80081d0:	607a      	str	r2, [r7, #4]
 80081d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80081d4:	e051      	b.n	800827a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081e4:	d123      	bne.n	800822e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2220      	movs	r2, #32
 800820a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	f043 0204 	orr.w	r2, r3, #4
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e046      	b.n	80082bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008234:	d021      	beq.n	800827a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008236:	f7fd fed1 	bl	8005fdc <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	429a      	cmp	r2, r3
 8008244:	d302      	bcc.n	800824c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d116      	bne.n	800827a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2220      	movs	r2, #32
 8008256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	f043 0220 	orr.w	r2, r3, #32
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e020      	b.n	80082bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	0c1b      	lsrs	r3, r3, #16
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b01      	cmp	r3, #1
 8008282:	d10c      	bne.n	800829e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	43da      	mvns	r2, r3
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	4013      	ands	r3, r2
 8008290:	b29b      	uxth	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	bf14      	ite	ne
 8008296:	2301      	movne	r3, #1
 8008298:	2300      	moveq	r3, #0
 800829a:	b2db      	uxtb	r3, r3
 800829c:	e00b      	b.n	80082b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	43da      	mvns	r2, r3
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	4013      	ands	r3, r2
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	bf14      	ite	ne
 80082b0:	2301      	movne	r3, #1
 80082b2:	2300      	moveq	r3, #0
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d18d      	bne.n	80081d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082d0:	e02d      	b.n	800832e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 f8ce 	bl	8008474 <I2C_IsAcknowledgeFailed>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e02d      	b.n	800833e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e8:	d021      	beq.n	800832e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ea:	f7fd fe77 	bl	8005fdc <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d302      	bcc.n	8008300 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d116      	bne.n	800832e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2220      	movs	r2, #32
 800830a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	f043 0220 	orr.w	r2, r3, #32
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e007      	b.n	800833e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008338:	2b80      	cmp	r3, #128	; 0x80
 800833a:	d1ca      	bne.n	80082d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b084      	sub	sp, #16
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008352:	e02d      	b.n	80083b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 f88d 	bl	8008474 <I2C_IsAcknowledgeFailed>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e02d      	b.n	80083c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836a:	d021      	beq.n	80083b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800836c:	f7fd fe36 	bl	8005fdc <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	429a      	cmp	r2, r3
 800837a:	d302      	bcc.n	8008382 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d116      	bne.n	80083b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2220      	movs	r2, #32
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839c:	f043 0220 	orr.w	r2, r3, #32
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e007      	b.n	80083c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d1ca      	bne.n	8008354 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80083d4:	e042      	b.n	800845c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	f003 0310 	and.w	r3, r3, #16
 80083e0:	2b10      	cmp	r3, #16
 80083e2:	d119      	bne.n	8008418 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f06f 0210 	mvn.w	r2, #16
 80083ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2220      	movs	r2, #32
 80083f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e029      	b.n	800846c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008418:	f7fd fde0 	bl	8005fdc <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	429a      	cmp	r2, r3
 8008426:	d302      	bcc.n	800842e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d116      	bne.n	800845c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2220      	movs	r2, #32
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008448:	f043 0220 	orr.w	r2, r3, #32
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e007      	b.n	800846c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008466:	2b40      	cmp	r3, #64	; 0x40
 8008468:	d1b5      	bne.n	80083d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800848a:	d11b      	bne.n	80084c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008494:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2220      	movs	r2, #32
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b0:	f043 0204 	orr.w	r2, r3, #4
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e000      	b.n	80084c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
	...

080084d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e267      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d075      	beq.n	80085de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084f2:	4b88      	ldr	r3, [pc, #544]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f003 030c 	and.w	r3, r3, #12
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d00c      	beq.n	8008518 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084fe:	4b85      	ldr	r3, [pc, #532]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008506:	2b08      	cmp	r3, #8
 8008508:	d112      	bne.n	8008530 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800850a:	4b82      	ldr	r3, [pc, #520]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008516:	d10b      	bne.n	8008530 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008518:	4b7e      	ldr	r3, [pc, #504]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d05b      	beq.n	80085dc <HAL_RCC_OscConfig+0x108>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d157      	bne.n	80085dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e242      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008538:	d106      	bne.n	8008548 <HAL_RCC_OscConfig+0x74>
 800853a:	4b76      	ldr	r3, [pc, #472]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a75      	ldr	r2, [pc, #468]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 8008540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	e01d      	b.n	8008584 <HAL_RCC_OscConfig+0xb0>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008550:	d10c      	bne.n	800856c <HAL_RCC_OscConfig+0x98>
 8008552:	4b70      	ldr	r3, [pc, #448]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a6f      	ldr	r2, [pc, #444]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 8008558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	4b6d      	ldr	r3, [pc, #436]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a6c      	ldr	r2, [pc, #432]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 8008564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	e00b      	b.n	8008584 <HAL_RCC_OscConfig+0xb0>
 800856c:	4b69      	ldr	r3, [pc, #420]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a68      	ldr	r2, [pc, #416]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 8008572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	4b66      	ldr	r3, [pc, #408]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a65      	ldr	r2, [pc, #404]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 800857e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d013      	beq.n	80085b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800858c:	f7fd fd26 	bl	8005fdc <HAL_GetTick>
 8008590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008592:	e008      	b.n	80085a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008594:	f7fd fd22 	bl	8005fdc <HAL_GetTick>
 8008598:	4602      	mov	r2, r0
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	2b64      	cmp	r3, #100	; 0x64
 80085a0:	d901      	bls.n	80085a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e207      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085a6:	4b5b      	ldr	r3, [pc, #364]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0f0      	beq.n	8008594 <HAL_RCC_OscConfig+0xc0>
 80085b2:	e014      	b.n	80085de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085b4:	f7fd fd12 	bl	8005fdc <HAL_GetTick>
 80085b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085ba:	e008      	b.n	80085ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085bc:	f7fd fd0e 	bl	8005fdc <HAL_GetTick>
 80085c0:	4602      	mov	r2, r0
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	2b64      	cmp	r3, #100	; 0x64
 80085c8:	d901      	bls.n	80085ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e1f3      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085ce:	4b51      	ldr	r3, [pc, #324]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1f0      	bne.n	80085bc <HAL_RCC_OscConfig+0xe8>
 80085da:	e000      	b.n	80085de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d063      	beq.n	80086b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085ea:	4b4a      	ldr	r3, [pc, #296]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f003 030c 	and.w	r3, r3, #12
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00b      	beq.n	800860e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085f6:	4b47      	ldr	r3, [pc, #284]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085fe:	2b08      	cmp	r3, #8
 8008600:	d11c      	bne.n	800863c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008602:	4b44      	ldr	r3, [pc, #272]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d116      	bne.n	800863c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800860e:	4b41      	ldr	r3, [pc, #260]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d005      	beq.n	8008626 <HAL_RCC_OscConfig+0x152>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d001      	beq.n	8008626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e1c7      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008626:	4b3b      	ldr	r3, [pc, #236]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	00db      	lsls	r3, r3, #3
 8008634:	4937      	ldr	r1, [pc, #220]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 8008636:	4313      	orrs	r3, r2
 8008638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800863a:	e03a      	b.n	80086b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d020      	beq.n	8008686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008644:	4b34      	ldr	r3, [pc, #208]	; (8008718 <HAL_RCC_OscConfig+0x244>)
 8008646:	2201      	movs	r2, #1
 8008648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864a:	f7fd fcc7 	bl	8005fdc <HAL_GetTick>
 800864e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008650:	e008      	b.n	8008664 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008652:	f7fd fcc3 	bl	8005fdc <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	2b02      	cmp	r3, #2
 800865e:	d901      	bls.n	8008664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008660:	2303      	movs	r3, #3
 8008662:	e1a8      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008664:	4b2b      	ldr	r3, [pc, #172]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d0f0      	beq.n	8008652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008670:	4b28      	ldr	r3, [pc, #160]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	4925      	ldr	r1, [pc, #148]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 8008680:	4313      	orrs	r3, r2
 8008682:	600b      	str	r3, [r1, #0]
 8008684:	e015      	b.n	80086b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008686:	4b24      	ldr	r3, [pc, #144]	; (8008718 <HAL_RCC_OscConfig+0x244>)
 8008688:	2200      	movs	r2, #0
 800868a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800868c:	f7fd fca6 	bl	8005fdc <HAL_GetTick>
 8008690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008692:	e008      	b.n	80086a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008694:	f7fd fca2 	bl	8005fdc <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d901      	bls.n	80086a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e187      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086a6:	4b1b      	ldr	r3, [pc, #108]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1f0      	bne.n	8008694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0308 	and.w	r3, r3, #8
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d036      	beq.n	800872c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d016      	beq.n	80086f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086c6:	4b15      	ldr	r3, [pc, #84]	; (800871c <HAL_RCC_OscConfig+0x248>)
 80086c8:	2201      	movs	r2, #1
 80086ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086cc:	f7fd fc86 	bl	8005fdc <HAL_GetTick>
 80086d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086d2:	e008      	b.n	80086e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086d4:	f7fd fc82 	bl	8005fdc <HAL_GetTick>
 80086d8:	4602      	mov	r2, r0
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d901      	bls.n	80086e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e167      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086e6:	4b0b      	ldr	r3, [pc, #44]	; (8008714 <HAL_RCC_OscConfig+0x240>)
 80086e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0f0      	beq.n	80086d4 <HAL_RCC_OscConfig+0x200>
 80086f2:	e01b      	b.n	800872c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086f4:	4b09      	ldr	r3, [pc, #36]	; (800871c <HAL_RCC_OscConfig+0x248>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086fa:	f7fd fc6f 	bl	8005fdc <HAL_GetTick>
 80086fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008700:	e00e      	b.n	8008720 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008702:	f7fd fc6b 	bl	8005fdc <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b02      	cmp	r3, #2
 800870e:	d907      	bls.n	8008720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e150      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
 8008714:	40023800 	.word	0x40023800
 8008718:	42470000 	.word	0x42470000
 800871c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008720:	4b88      	ldr	r3, [pc, #544]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 8008722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1ea      	bne.n	8008702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 8097 	beq.w	8008868 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800873a:	2300      	movs	r3, #0
 800873c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800873e:	4b81      	ldr	r3, [pc, #516]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10f      	bne.n	800876a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800874a:	2300      	movs	r3, #0
 800874c:	60bb      	str	r3, [r7, #8]
 800874e:	4b7d      	ldr	r3, [pc, #500]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 8008750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008752:	4a7c      	ldr	r2, [pc, #496]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 8008754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008758:	6413      	str	r3, [r2, #64]	; 0x40
 800875a:	4b7a      	ldr	r3, [pc, #488]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 800875c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008762:	60bb      	str	r3, [r7, #8]
 8008764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008766:	2301      	movs	r3, #1
 8008768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800876a:	4b77      	ldr	r3, [pc, #476]	; (8008948 <HAL_RCC_OscConfig+0x474>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008772:	2b00      	cmp	r3, #0
 8008774:	d118      	bne.n	80087a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008776:	4b74      	ldr	r3, [pc, #464]	; (8008948 <HAL_RCC_OscConfig+0x474>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a73      	ldr	r2, [pc, #460]	; (8008948 <HAL_RCC_OscConfig+0x474>)
 800877c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008782:	f7fd fc2b 	bl	8005fdc <HAL_GetTick>
 8008786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008788:	e008      	b.n	800879c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800878a:	f7fd fc27 	bl	8005fdc <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b02      	cmp	r3, #2
 8008796:	d901      	bls.n	800879c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e10c      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800879c:	4b6a      	ldr	r3, [pc, #424]	; (8008948 <HAL_RCC_OscConfig+0x474>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d0f0      	beq.n	800878a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d106      	bne.n	80087be <HAL_RCC_OscConfig+0x2ea>
 80087b0:	4b64      	ldr	r3, [pc, #400]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 80087b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b4:	4a63      	ldr	r2, [pc, #396]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 80087b6:	f043 0301 	orr.w	r3, r3, #1
 80087ba:	6713      	str	r3, [r2, #112]	; 0x70
 80087bc:	e01c      	b.n	80087f8 <HAL_RCC_OscConfig+0x324>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	2b05      	cmp	r3, #5
 80087c4:	d10c      	bne.n	80087e0 <HAL_RCC_OscConfig+0x30c>
 80087c6:	4b5f      	ldr	r3, [pc, #380]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 80087c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ca:	4a5e      	ldr	r2, [pc, #376]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 80087cc:	f043 0304 	orr.w	r3, r3, #4
 80087d0:	6713      	str	r3, [r2, #112]	; 0x70
 80087d2:	4b5c      	ldr	r3, [pc, #368]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 80087d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d6:	4a5b      	ldr	r2, [pc, #364]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 80087d8:	f043 0301 	orr.w	r3, r3, #1
 80087dc:	6713      	str	r3, [r2, #112]	; 0x70
 80087de:	e00b      	b.n	80087f8 <HAL_RCC_OscConfig+0x324>
 80087e0:	4b58      	ldr	r3, [pc, #352]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 80087e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e4:	4a57      	ldr	r2, [pc, #348]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 80087e6:	f023 0301 	bic.w	r3, r3, #1
 80087ea:	6713      	str	r3, [r2, #112]	; 0x70
 80087ec:	4b55      	ldr	r3, [pc, #340]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 80087ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f0:	4a54      	ldr	r2, [pc, #336]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 80087f2:	f023 0304 	bic.w	r3, r3, #4
 80087f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d015      	beq.n	800882c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008800:	f7fd fbec 	bl	8005fdc <HAL_GetTick>
 8008804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008806:	e00a      	b.n	800881e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008808:	f7fd fbe8 	bl	8005fdc <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	f241 3288 	movw	r2, #5000	; 0x1388
 8008816:	4293      	cmp	r3, r2
 8008818:	d901      	bls.n	800881e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e0cb      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800881e:	4b49      	ldr	r3, [pc, #292]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 8008820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0ee      	beq.n	8008808 <HAL_RCC_OscConfig+0x334>
 800882a:	e014      	b.n	8008856 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800882c:	f7fd fbd6 	bl	8005fdc <HAL_GetTick>
 8008830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008832:	e00a      	b.n	800884a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008834:	f7fd fbd2 	bl	8005fdc <HAL_GetTick>
 8008838:	4602      	mov	r2, r0
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008842:	4293      	cmp	r3, r2
 8008844:	d901      	bls.n	800884a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e0b5      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800884a:	4b3e      	ldr	r3, [pc, #248]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 800884c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1ee      	bne.n	8008834 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008856:	7dfb      	ldrb	r3, [r7, #23]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d105      	bne.n	8008868 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800885c:	4b39      	ldr	r3, [pc, #228]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 800885e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008860:	4a38      	ldr	r2, [pc, #224]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 8008862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008866:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 80a1 	beq.w	80089b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008872:	4b34      	ldr	r3, [pc, #208]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f003 030c 	and.w	r3, r3, #12
 800887a:	2b08      	cmp	r3, #8
 800887c:	d05c      	beq.n	8008938 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	2b02      	cmp	r3, #2
 8008884:	d141      	bne.n	800890a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008886:	4b31      	ldr	r3, [pc, #196]	; (800894c <HAL_RCC_OscConfig+0x478>)
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800888c:	f7fd fba6 	bl	8005fdc <HAL_GetTick>
 8008890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008892:	e008      	b.n	80088a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008894:	f7fd fba2 	bl	8005fdc <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e087      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088a6:	4b27      	ldr	r3, [pc, #156]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1f0      	bne.n	8008894 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	69da      	ldr	r2, [r3, #28]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	431a      	orrs	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c0:	019b      	lsls	r3, r3, #6
 80088c2:	431a      	orrs	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c8:	085b      	lsrs	r3, r3, #1
 80088ca:	3b01      	subs	r3, #1
 80088cc:	041b      	lsls	r3, r3, #16
 80088ce:	431a      	orrs	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d4:	061b      	lsls	r3, r3, #24
 80088d6:	491b      	ldr	r1, [pc, #108]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088dc:	4b1b      	ldr	r3, [pc, #108]	; (800894c <HAL_RCC_OscConfig+0x478>)
 80088de:	2201      	movs	r2, #1
 80088e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088e2:	f7fd fb7b 	bl	8005fdc <HAL_GetTick>
 80088e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088e8:	e008      	b.n	80088fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088ea:	f7fd fb77 	bl	8005fdc <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d901      	bls.n	80088fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e05c      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088fc:	4b11      	ldr	r3, [pc, #68]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d0f0      	beq.n	80088ea <HAL_RCC_OscConfig+0x416>
 8008908:	e054      	b.n	80089b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800890a:	4b10      	ldr	r3, [pc, #64]	; (800894c <HAL_RCC_OscConfig+0x478>)
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008910:	f7fd fb64 	bl	8005fdc <HAL_GetTick>
 8008914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008916:	e008      	b.n	800892a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008918:	f7fd fb60 	bl	8005fdc <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	2b02      	cmp	r3, #2
 8008924:	d901      	bls.n	800892a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e045      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800892a:	4b06      	ldr	r3, [pc, #24]	; (8008944 <HAL_RCC_OscConfig+0x470>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1f0      	bne.n	8008918 <HAL_RCC_OscConfig+0x444>
 8008936:	e03d      	b.n	80089b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d107      	bne.n	8008950 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e038      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
 8008944:	40023800 	.word	0x40023800
 8008948:	40007000 	.word	0x40007000
 800894c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008950:	4b1b      	ldr	r3, [pc, #108]	; (80089c0 <HAL_RCC_OscConfig+0x4ec>)
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d028      	beq.n	80089b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008968:	429a      	cmp	r2, r3
 800896a:	d121      	bne.n	80089b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008976:	429a      	cmp	r2, r3
 8008978:	d11a      	bne.n	80089b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008980:	4013      	ands	r3, r2
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008988:	4293      	cmp	r3, r2
 800898a:	d111      	bne.n	80089b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008996:	085b      	lsrs	r3, r3, #1
 8008998:	3b01      	subs	r3, #1
 800899a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800899c:	429a      	cmp	r2, r3
 800899e:	d107      	bne.n	80089b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d001      	beq.n	80089b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e000      	b.n	80089b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	40023800 	.word	0x40023800

080089c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e0cc      	b.n	8008b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089d8:	4b68      	ldr	r3, [pc, #416]	; (8008b7c <HAL_RCC_ClockConfig+0x1b8>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0307 	and.w	r3, r3, #7
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d90c      	bls.n	8008a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089e6:	4b65      	ldr	r3, [pc, #404]	; (8008b7c <HAL_RCC_ClockConfig+0x1b8>)
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	b2d2      	uxtb	r2, r2
 80089ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ee:	4b63      	ldr	r3, [pc, #396]	; (8008b7c <HAL_RCC_ClockConfig+0x1b8>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d001      	beq.n	8008a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e0b8      	b.n	8008b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d020      	beq.n	8008a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0304 	and.w	r3, r3, #4
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d005      	beq.n	8008a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a18:	4b59      	ldr	r3, [pc, #356]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	4a58      	ldr	r2, [pc, #352]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0308 	and.w	r3, r3, #8
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a30:	4b53      	ldr	r3, [pc, #332]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	4a52      	ldr	r2, [pc, #328]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a3c:	4b50      	ldr	r3, [pc, #320]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	494d      	ldr	r1, [pc, #308]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d044      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d107      	bne.n	8008a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a62:	4b47      	ldr	r3, [pc, #284]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d119      	bne.n	8008aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e07f      	b.n	8008b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d003      	beq.n	8008a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d107      	bne.n	8008a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a82:	4b3f      	ldr	r3, [pc, #252]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d109      	bne.n	8008aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e06f      	b.n	8008b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a92:	4b3b      	ldr	r3, [pc, #236]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e067      	b.n	8008b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008aa2:	4b37      	ldr	r3, [pc, #220]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f023 0203 	bic.w	r2, r3, #3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	4934      	ldr	r1, [pc, #208]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ab4:	f7fd fa92 	bl	8005fdc <HAL_GetTick>
 8008ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aba:	e00a      	b.n	8008ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008abc:	f7fd fa8e 	bl	8005fdc <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e04f      	b.n	8008b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ad2:	4b2b      	ldr	r3, [pc, #172]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f003 020c 	and.w	r2, r3, #12
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d1eb      	bne.n	8008abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ae4:	4b25      	ldr	r3, [pc, #148]	; (8008b7c <HAL_RCC_ClockConfig+0x1b8>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0307 	and.w	r3, r3, #7
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d20c      	bcs.n	8008b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008af2:	4b22      	ldr	r3, [pc, #136]	; (8008b7c <HAL_RCC_ClockConfig+0x1b8>)
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	b2d2      	uxtb	r2, r2
 8008af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008afa:	4b20      	ldr	r3, [pc, #128]	; (8008b7c <HAL_RCC_ClockConfig+0x1b8>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0307 	and.w	r3, r3, #7
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d001      	beq.n	8008b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e032      	b.n	8008b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0304 	and.w	r3, r3, #4
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d008      	beq.n	8008b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b18:	4b19      	ldr	r3, [pc, #100]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	4916      	ldr	r1, [pc, #88]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0308 	and.w	r3, r3, #8
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d009      	beq.n	8008b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b36:	4b12      	ldr	r3, [pc, #72]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	00db      	lsls	r3, r3, #3
 8008b44:	490e      	ldr	r1, [pc, #56]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b4a:	f000 f821 	bl	8008b90 <HAL_RCC_GetSysClockFreq>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	4b0b      	ldr	r3, [pc, #44]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	091b      	lsrs	r3, r3, #4
 8008b56:	f003 030f 	and.w	r3, r3, #15
 8008b5a:	490a      	ldr	r1, [pc, #40]	; (8008b84 <HAL_RCC_ClockConfig+0x1c0>)
 8008b5c:	5ccb      	ldrb	r3, [r1, r3]
 8008b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b62:	4a09      	ldr	r2, [pc, #36]	; (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b66:	4b09      	ldr	r3, [pc, #36]	; (8008b8c <HAL_RCC_ClockConfig+0x1c8>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fd f9f2 	bl	8005f54 <HAL_InitTick>

  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	40023c00 	.word	0x40023c00
 8008b80:	40023800 	.word	0x40023800
 8008b84:	08015fac 	.word	0x08015fac
 8008b88:	2000000c 	.word	0x2000000c
 8008b8c:	2000006c 	.word	0x2000006c

08008b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b94:	b094      	sub	sp, #80	; 0x50
 8008b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ba8:	4b79      	ldr	r3, [pc, #484]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f003 030c 	and.w	r3, r3, #12
 8008bb0:	2b08      	cmp	r3, #8
 8008bb2:	d00d      	beq.n	8008bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8008bb4:	2b08      	cmp	r3, #8
 8008bb6:	f200 80e1 	bhi.w	8008d7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d002      	beq.n	8008bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	d003      	beq.n	8008bca <HAL_RCC_GetSysClockFreq+0x3a>
 8008bc2:	e0db      	b.n	8008d7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008bc4:	4b73      	ldr	r3, [pc, #460]	; (8008d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8008bc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008bc8:	e0db      	b.n	8008d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008bca:	4b73      	ldr	r3, [pc, #460]	; (8008d98 <HAL_RCC_GetSysClockFreq+0x208>)
 8008bcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008bce:	e0d8      	b.n	8008d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bd0:	4b6f      	ldr	r3, [pc, #444]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bda:	4b6d      	ldr	r3, [pc, #436]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d063      	beq.n	8008cae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008be6:	4b6a      	ldr	r3, [pc, #424]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	099b      	lsrs	r3, r3, #6
 8008bec:	2200      	movs	r2, #0
 8008bee:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bf0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8008bfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008c02:	4622      	mov	r2, r4
 8008c04:	462b      	mov	r3, r5
 8008c06:	f04f 0000 	mov.w	r0, #0
 8008c0a:	f04f 0100 	mov.w	r1, #0
 8008c0e:	0159      	lsls	r1, r3, #5
 8008c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c14:	0150      	lsls	r0, r2, #5
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	1a51      	subs	r1, r2, r1
 8008c1e:	6139      	str	r1, [r7, #16]
 8008c20:	4629      	mov	r1, r5
 8008c22:	eb63 0301 	sbc.w	r3, r3, r1
 8008c26:	617b      	str	r3, [r7, #20]
 8008c28:	f04f 0200 	mov.w	r2, #0
 8008c2c:	f04f 0300 	mov.w	r3, #0
 8008c30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c34:	4659      	mov	r1, fp
 8008c36:	018b      	lsls	r3, r1, #6
 8008c38:	4651      	mov	r1, sl
 8008c3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c3e:	4651      	mov	r1, sl
 8008c40:	018a      	lsls	r2, r1, #6
 8008c42:	4651      	mov	r1, sl
 8008c44:	ebb2 0801 	subs.w	r8, r2, r1
 8008c48:	4659      	mov	r1, fp
 8008c4a:	eb63 0901 	sbc.w	r9, r3, r1
 8008c4e:	f04f 0200 	mov.w	r2, #0
 8008c52:	f04f 0300 	mov.w	r3, #0
 8008c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c62:	4690      	mov	r8, r2
 8008c64:	4699      	mov	r9, r3
 8008c66:	4623      	mov	r3, r4
 8008c68:	eb18 0303 	adds.w	r3, r8, r3
 8008c6c:	60bb      	str	r3, [r7, #8]
 8008c6e:	462b      	mov	r3, r5
 8008c70:	eb49 0303 	adc.w	r3, r9, r3
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	f04f 0200 	mov.w	r2, #0
 8008c7a:	f04f 0300 	mov.w	r3, #0
 8008c7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008c82:	4629      	mov	r1, r5
 8008c84:	024b      	lsls	r3, r1, #9
 8008c86:	4621      	mov	r1, r4
 8008c88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	024a      	lsls	r2, r1, #9
 8008c90:	4610      	mov	r0, r2
 8008c92:	4619      	mov	r1, r3
 8008c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c96:	2200      	movs	r2, #0
 8008c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ca0:	f7f7 fff2 	bl	8000c88 <__aeabi_uldivmod>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	4613      	mov	r3, r2
 8008caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cac:	e058      	b.n	8008d60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cae:	4b38      	ldr	r3, [pc, #224]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	099b      	lsrs	r3, r3, #6
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	4611      	mov	r1, r2
 8008cba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008cbe:	623b      	str	r3, [r7, #32]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8008cc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008cc8:	4642      	mov	r2, r8
 8008cca:	464b      	mov	r3, r9
 8008ccc:	f04f 0000 	mov.w	r0, #0
 8008cd0:	f04f 0100 	mov.w	r1, #0
 8008cd4:	0159      	lsls	r1, r3, #5
 8008cd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cda:	0150      	lsls	r0, r2, #5
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4641      	mov	r1, r8
 8008ce2:	ebb2 0a01 	subs.w	sl, r2, r1
 8008ce6:	4649      	mov	r1, r9
 8008ce8:	eb63 0b01 	sbc.w	fp, r3, r1
 8008cec:	f04f 0200 	mov.w	r2, #0
 8008cf0:	f04f 0300 	mov.w	r3, #0
 8008cf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008cf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008cfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008d00:	ebb2 040a 	subs.w	r4, r2, sl
 8008d04:	eb63 050b 	sbc.w	r5, r3, fp
 8008d08:	f04f 0200 	mov.w	r2, #0
 8008d0c:	f04f 0300 	mov.w	r3, #0
 8008d10:	00eb      	lsls	r3, r5, #3
 8008d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d16:	00e2      	lsls	r2, r4, #3
 8008d18:	4614      	mov	r4, r2
 8008d1a:	461d      	mov	r5, r3
 8008d1c:	4643      	mov	r3, r8
 8008d1e:	18e3      	adds	r3, r4, r3
 8008d20:	603b      	str	r3, [r7, #0]
 8008d22:	464b      	mov	r3, r9
 8008d24:	eb45 0303 	adc.w	r3, r5, r3
 8008d28:	607b      	str	r3, [r7, #4]
 8008d2a:	f04f 0200 	mov.w	r2, #0
 8008d2e:	f04f 0300 	mov.w	r3, #0
 8008d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d36:	4629      	mov	r1, r5
 8008d38:	028b      	lsls	r3, r1, #10
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d40:	4621      	mov	r1, r4
 8008d42:	028a      	lsls	r2, r1, #10
 8008d44:	4610      	mov	r0, r2
 8008d46:	4619      	mov	r1, r3
 8008d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	61bb      	str	r3, [r7, #24]
 8008d4e:	61fa      	str	r2, [r7, #28]
 8008d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d54:	f7f7 ff98 	bl	8000c88 <__aeabi_uldivmod>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d60:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	0c1b      	lsrs	r3, r3, #16
 8008d66:	f003 0303 	and.w	r3, r3, #3
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008d70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d7a:	e002      	b.n	8008d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d7c:	4b05      	ldr	r3, [pc, #20]	; (8008d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3750      	adds	r7, #80	; 0x50
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d8e:	bf00      	nop
 8008d90:	40023800 	.word	0x40023800
 8008d94:	00f42400 	.word	0x00f42400
 8008d98:	007a1200 	.word	0x007a1200

08008d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008da0:	4b03      	ldr	r3, [pc, #12]	; (8008db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008da2:	681b      	ldr	r3, [r3, #0]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	2000000c 	.word	0x2000000c

08008db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008db8:	f7ff fff0 	bl	8008d9c <HAL_RCC_GetHCLKFreq>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	0a9b      	lsrs	r3, r3, #10
 8008dc4:	f003 0307 	and.w	r3, r3, #7
 8008dc8:	4903      	ldr	r1, [pc, #12]	; (8008dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008dca:	5ccb      	ldrb	r3, [r1, r3]
 8008dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	40023800 	.word	0x40023800
 8008dd8:	08015fbc 	.word	0x08015fbc

08008ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008de0:	f7ff ffdc 	bl	8008d9c <HAL_RCC_GetHCLKFreq>
 8008de4:	4602      	mov	r2, r0
 8008de6:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	0b5b      	lsrs	r3, r3, #13
 8008dec:	f003 0307 	and.w	r3, r3, #7
 8008df0:	4903      	ldr	r1, [pc, #12]	; (8008e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008df2:	5ccb      	ldrb	r3, [r1, r3]
 8008df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	40023800 	.word	0x40023800
 8008e00:	08015fbc 	.word	0x08015fbc

08008e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e07b      	b.n	8008f0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d108      	bne.n	8008e30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e26:	d009      	beq.n	8008e3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	61da      	str	r2, [r3, #28]
 8008e2e:	e005      	b.n	8008e3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d106      	bne.n	8008e5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7fa ff44 	bl	8003ce4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	f003 0302 	and.w	r3, r3, #2
 8008e98:	431a      	orrs	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008eac:	431a      	orrs	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a1b      	ldr	r3, [r3, #32]
 8008ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec0:	ea42 0103 	orr.w	r1, r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	0c1b      	lsrs	r3, r3, #16
 8008eda:	f003 0104 	and.w	r1, r3, #4
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	f003 0210 	and.w	r2, r3, #16
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	69da      	ldr	r2, [r3, #28]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008efc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b088      	sub	sp, #32
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	60f8      	str	r0, [r7, #12]
 8008f1e:	60b9      	str	r1, [r7, #8]
 8008f20:	603b      	str	r3, [r7, #0]
 8008f22:	4613      	mov	r3, r2
 8008f24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d101      	bne.n	8008f38 <HAL_SPI_Transmit+0x22>
 8008f34:	2302      	movs	r3, #2
 8008f36:	e126      	b.n	8009186 <HAL_SPI_Transmit+0x270>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f40:	f7fd f84c 	bl	8005fdc <HAL_GetTick>
 8008f44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008f46:	88fb      	ldrh	r3, [r7, #6]
 8008f48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d002      	beq.n	8008f5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008f56:	2302      	movs	r3, #2
 8008f58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f5a:	e10b      	b.n	8009174 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <HAL_SPI_Transmit+0x52>
 8008f62:	88fb      	ldrh	r3, [r7, #6]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d102      	bne.n	8008f6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f6c:	e102      	b.n	8009174 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2203      	movs	r2, #3
 8008f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	88fa      	ldrh	r2, [r7, #6]
 8008f86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	88fa      	ldrh	r2, [r7, #6]
 8008f8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fb4:	d10f      	bne.n	8008fd6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008fd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe0:	2b40      	cmp	r3, #64	; 0x40
 8008fe2:	d007      	beq.n	8008ff4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ff2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ffc:	d14b      	bne.n	8009096 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <HAL_SPI_Transmit+0xf6>
 8009006:	8afb      	ldrh	r3, [r7, #22]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d13e      	bne.n	800908a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009010:	881a      	ldrh	r2, [r3, #0]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901c:	1c9a      	adds	r2, r3, #2
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009026:	b29b      	uxth	r3, r3
 8009028:	3b01      	subs	r3, #1
 800902a:	b29a      	uxth	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009030:	e02b      	b.n	800908a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f003 0302 	and.w	r3, r3, #2
 800903c:	2b02      	cmp	r3, #2
 800903e:	d112      	bne.n	8009066 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009044:	881a      	ldrh	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009050:	1c9a      	adds	r2, r3, #2
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800905a:	b29b      	uxth	r3, r3
 800905c:	3b01      	subs	r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	86da      	strh	r2, [r3, #54]	; 0x36
 8009064:	e011      	b.n	800908a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009066:	f7fc ffb9 	bl	8005fdc <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	d803      	bhi.n	800907e <HAL_SPI_Transmit+0x168>
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907c:	d102      	bne.n	8009084 <HAL_SPI_Transmit+0x16e>
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d102      	bne.n	800908a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009088:	e074      	b.n	8009174 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800908e:	b29b      	uxth	r3, r3
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1ce      	bne.n	8009032 <HAL_SPI_Transmit+0x11c>
 8009094:	e04c      	b.n	8009130 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <HAL_SPI_Transmit+0x18e>
 800909e:	8afb      	ldrh	r3, [r7, #22]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d140      	bne.n	8009126 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	330c      	adds	r3, #12
 80090ae:	7812      	ldrb	r2, [r2, #0]
 80090b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b6:	1c5a      	adds	r2, r3, #1
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	3b01      	subs	r3, #1
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80090ca:	e02c      	b.n	8009126 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f003 0302 	and.w	r3, r3, #2
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d113      	bne.n	8009102 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	330c      	adds	r3, #12
 80090e4:	7812      	ldrb	r2, [r2, #0]
 80090e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ec:	1c5a      	adds	r2, r3, #1
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	3b01      	subs	r3, #1
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8009100:	e011      	b.n	8009126 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009102:	f7fc ff6b 	bl	8005fdc <HAL_GetTick>
 8009106:	4602      	mov	r2, r0
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	d803      	bhi.n	800911a <HAL_SPI_Transmit+0x204>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009118:	d102      	bne.n	8009120 <HAL_SPI_Transmit+0x20a>
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d102      	bne.n	8009126 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009120:	2303      	movs	r3, #3
 8009122:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009124:	e026      	b.n	8009174 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800912a:	b29b      	uxth	r3, r3
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1cd      	bne.n	80090cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009130:	69ba      	ldr	r2, [r7, #24]
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 fa63 	bl	8009600 <SPI_EndRxTxTransaction>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2220      	movs	r2, #32
 8009144:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10a      	bne.n	8009164 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800914e:	2300      	movs	r3, #0
 8009150:	613b      	str	r3, [r7, #16]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	613b      	str	r3, [r7, #16]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	613b      	str	r3, [r7, #16]
 8009162:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	77fb      	strb	r3, [r7, #31]
 8009170:	e000      	b.n	8009174 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009172:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009184:	7ffb      	ldrb	r3, [r7, #31]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3720      	adds	r7, #32
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b08c      	sub	sp, #48	; 0x30
 8009192:	af00      	add	r7, sp, #0
 8009194:	60f8      	str	r0, [r7, #12]
 8009196:	60b9      	str	r1, [r7, #8]
 8009198:	607a      	str	r2, [r7, #4]
 800919a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800919c:	2301      	movs	r3, #1
 800919e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d101      	bne.n	80091b4 <HAL_SPI_TransmitReceive+0x26>
 80091b0:	2302      	movs	r3, #2
 80091b2:	e18a      	b.n	80094ca <HAL_SPI_TransmitReceive+0x33c>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091bc:	f7fc ff0e 	bl	8005fdc <HAL_GetTick>
 80091c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80091d2:	887b      	ldrh	r3, [r7, #2]
 80091d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80091d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d00f      	beq.n	80091fe <HAL_SPI_TransmitReceive+0x70>
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091e4:	d107      	bne.n	80091f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d103      	bne.n	80091f6 <HAL_SPI_TransmitReceive+0x68>
 80091ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	d003      	beq.n	80091fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80091f6:	2302      	movs	r3, #2
 80091f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80091fc:	e15b      	b.n	80094b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <HAL_SPI_TransmitReceive+0x82>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <HAL_SPI_TransmitReceive+0x82>
 800920a:	887b      	ldrh	r3, [r7, #2]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d103      	bne.n	8009218 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009216:	e14e      	b.n	80094b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b04      	cmp	r3, #4
 8009222:	d003      	beq.n	800922c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2205      	movs	r2, #5
 8009228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	887a      	ldrh	r2, [r7, #2]
 800923c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	887a      	ldrh	r2, [r7, #2]
 8009242:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	887a      	ldrh	r2, [r7, #2]
 800924e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	887a      	ldrh	r2, [r7, #2]
 8009254:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800926c:	2b40      	cmp	r3, #64	; 0x40
 800926e:	d007      	beq.n	8009280 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800927e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009288:	d178      	bne.n	800937c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d002      	beq.n	8009298 <HAL_SPI_TransmitReceive+0x10a>
 8009292:	8b7b      	ldrh	r3, [r7, #26]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d166      	bne.n	8009366 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929c:	881a      	ldrh	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a8:	1c9a      	adds	r2, r3, #2
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	3b01      	subs	r3, #1
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092bc:	e053      	b.n	8009366 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f003 0302 	and.w	r3, r3, #2
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d11b      	bne.n	8009304 <HAL_SPI_TransmitReceive+0x176>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d016      	beq.n	8009304 <HAL_SPI_TransmitReceive+0x176>
 80092d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d113      	bne.n	8009304 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e0:	881a      	ldrh	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ec:	1c9a      	adds	r2, r3, #2
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	3b01      	subs	r3, #1
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	2b01      	cmp	r3, #1
 8009310:	d119      	bne.n	8009346 <HAL_SPI_TransmitReceive+0x1b8>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009316:	b29b      	uxth	r3, r3
 8009318:	2b00      	cmp	r3, #0
 800931a:	d014      	beq.n	8009346 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68da      	ldr	r2, [r3, #12]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009326:	b292      	uxth	r2, r2
 8009328:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932e:	1c9a      	adds	r2, r3, #2
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009338:	b29b      	uxth	r3, r3
 800933a:	3b01      	subs	r3, #1
 800933c:	b29a      	uxth	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009342:	2301      	movs	r3, #1
 8009344:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009346:	f7fc fe49 	bl	8005fdc <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009352:	429a      	cmp	r2, r3
 8009354:	d807      	bhi.n	8009366 <HAL_SPI_TransmitReceive+0x1d8>
 8009356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935c:	d003      	beq.n	8009366 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009364:	e0a7      	b.n	80094b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800936a:	b29b      	uxth	r3, r3
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1a6      	bne.n	80092be <HAL_SPI_TransmitReceive+0x130>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009374:	b29b      	uxth	r3, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1a1      	bne.n	80092be <HAL_SPI_TransmitReceive+0x130>
 800937a:	e07c      	b.n	8009476 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <HAL_SPI_TransmitReceive+0x1fc>
 8009384:	8b7b      	ldrh	r3, [r7, #26]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d16b      	bne.n	8009462 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	330c      	adds	r3, #12
 8009394:	7812      	ldrb	r2, [r2, #0]
 8009396:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939c:	1c5a      	adds	r2, r3, #1
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	3b01      	subs	r3, #1
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093b0:	e057      	b.n	8009462 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f003 0302 	and.w	r3, r3, #2
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d11c      	bne.n	80093fa <HAL_SPI_TransmitReceive+0x26c>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d017      	beq.n	80093fa <HAL_SPI_TransmitReceive+0x26c>
 80093ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d114      	bne.n	80093fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	330c      	adds	r3, #12
 80093da:	7812      	ldrb	r2, [r2, #0]
 80093dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e2:	1c5a      	adds	r2, r3, #1
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093f6:	2300      	movs	r3, #0
 80093f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f003 0301 	and.w	r3, r3, #1
 8009404:	2b01      	cmp	r3, #1
 8009406:	d119      	bne.n	800943c <HAL_SPI_TransmitReceive+0x2ae>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800940c:	b29b      	uxth	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d014      	beq.n	800943c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941c:	b2d2      	uxtb	r2, r2
 800941e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800942e:	b29b      	uxth	r3, r3
 8009430:	3b01      	subs	r3, #1
 8009432:	b29a      	uxth	r2, r3
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009438:	2301      	movs	r3, #1
 800943a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800943c:	f7fc fdce 	bl	8005fdc <HAL_GetTick>
 8009440:	4602      	mov	r2, r0
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009448:	429a      	cmp	r2, r3
 800944a:	d803      	bhi.n	8009454 <HAL_SPI_TransmitReceive+0x2c6>
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009452:	d102      	bne.n	800945a <HAL_SPI_TransmitReceive+0x2cc>
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	2b00      	cmp	r3, #0
 8009458:	d103      	bne.n	8009462 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800945a:	2303      	movs	r3, #3
 800945c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009460:	e029      	b.n	80094b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009466:	b29b      	uxth	r3, r3
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1a2      	bne.n	80093b2 <HAL_SPI_TransmitReceive+0x224>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009470:	b29b      	uxth	r3, r3
 8009472:	2b00      	cmp	r3, #0
 8009474:	d19d      	bne.n	80093b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009478:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f000 f8c0 	bl	8009600 <SPI_EndRxTxTransaction>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d006      	beq.n	8009494 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2220      	movs	r2, #32
 8009490:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009492:	e010      	b.n	80094b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10b      	bne.n	80094b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800949c:	2300      	movs	r3, #0
 800949e:	617b      	str	r3, [r7, #20]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	617b      	str	r3, [r7, #20]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	617b      	str	r3, [r7, #20]
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	e000      	b.n	80094b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80094b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80094c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3730      	adds	r7, #48	; 0x30
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b083      	sub	sp, #12
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094e0:	b2db      	uxtb	r3, r3
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
	...

080094f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b088      	sub	sp, #32
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	603b      	str	r3, [r7, #0]
 80094fc:	4613      	mov	r3, r2
 80094fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009500:	f7fc fd6c 	bl	8005fdc <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009508:	1a9b      	subs	r3, r3, r2
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	4413      	add	r3, r2
 800950e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009510:	f7fc fd64 	bl	8005fdc <HAL_GetTick>
 8009514:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009516:	4b39      	ldr	r3, [pc, #228]	; (80095fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	015b      	lsls	r3, r3, #5
 800951c:	0d1b      	lsrs	r3, r3, #20
 800951e:	69fa      	ldr	r2, [r7, #28]
 8009520:	fb02 f303 	mul.w	r3, r2, r3
 8009524:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009526:	e054      	b.n	80095d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952e:	d050      	beq.n	80095d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009530:	f7fc fd54 	bl	8005fdc <HAL_GetTick>
 8009534:	4602      	mov	r2, r0
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	69fa      	ldr	r2, [r7, #28]
 800953c:	429a      	cmp	r2, r3
 800953e:	d902      	bls.n	8009546 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d13d      	bne.n	80095c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009554:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800955e:	d111      	bne.n	8009584 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009568:	d004      	beq.n	8009574 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009572:	d107      	bne.n	8009584 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009582:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800958c:	d10f      	bne.n	80095ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e017      	b.n	80095f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	3b01      	subs	r3, #1
 80095d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	689a      	ldr	r2, [r3, #8]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	4013      	ands	r3, r2
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	429a      	cmp	r2, r3
 80095e0:	bf0c      	ite	eq
 80095e2:	2301      	moveq	r3, #1
 80095e4:	2300      	movne	r3, #0
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	461a      	mov	r2, r3
 80095ea:	79fb      	ldrb	r3, [r7, #7]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d19b      	bne.n	8009528 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3720      	adds	r7, #32
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	2000000c 	.word	0x2000000c

08009600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af02      	add	r7, sp, #8
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800960c:	4b1b      	ldr	r3, [pc, #108]	; (800967c <SPI_EndRxTxTransaction+0x7c>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a1b      	ldr	r2, [pc, #108]	; (8009680 <SPI_EndRxTxTransaction+0x80>)
 8009612:	fba2 2303 	umull	r2, r3, r2, r3
 8009616:	0d5b      	lsrs	r3, r3, #21
 8009618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800961c:	fb02 f303 	mul.w	r3, r2, r3
 8009620:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800962a:	d112      	bne.n	8009652 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	2200      	movs	r2, #0
 8009634:	2180      	movs	r1, #128	; 0x80
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f7ff ff5a 	bl	80094f0 <SPI_WaitFlagStateUntilTimeout>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d016      	beq.n	8009670 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009646:	f043 0220 	orr.w	r2, r3, #32
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	e00f      	b.n	8009672 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00a      	beq.n	800966e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	3b01      	subs	r3, #1
 800965c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009668:	2b80      	cmp	r3, #128	; 0x80
 800966a:	d0f2      	beq.n	8009652 <SPI_EndRxTxTransaction+0x52>
 800966c:	e000      	b.n	8009670 <SPI_EndRxTxTransaction+0x70>
        break;
 800966e:	bf00      	nop
  }

  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	2000000c 	.word	0x2000000c
 8009680:	165e9f81 	.word	0x165e9f81

08009684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e041      	b.n	800971a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d106      	bne.n	80096b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7fa fb62 	bl	8003d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2202      	movs	r2, #2
 80096b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3304      	adds	r3, #4
 80096c0:	4619      	mov	r1, r3
 80096c2:	4610      	mov	r0, r2
 80096c4:	f000 fe54 	bl	800a370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b01      	cmp	r3, #1
 8009736:	d001      	beq.n	800973c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e046      	b.n	80097ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2202      	movs	r2, #2
 8009740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a23      	ldr	r2, [pc, #140]	; (80097d8 <HAL_TIM_Base_Start+0xb4>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d022      	beq.n	8009794 <HAL_TIM_Base_Start+0x70>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009756:	d01d      	beq.n	8009794 <HAL_TIM_Base_Start+0x70>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a1f      	ldr	r2, [pc, #124]	; (80097dc <HAL_TIM_Base_Start+0xb8>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d018      	beq.n	8009794 <HAL_TIM_Base_Start+0x70>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a1e      	ldr	r2, [pc, #120]	; (80097e0 <HAL_TIM_Base_Start+0xbc>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d013      	beq.n	8009794 <HAL_TIM_Base_Start+0x70>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a1c      	ldr	r2, [pc, #112]	; (80097e4 <HAL_TIM_Base_Start+0xc0>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00e      	beq.n	8009794 <HAL_TIM_Base_Start+0x70>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a1b      	ldr	r2, [pc, #108]	; (80097e8 <HAL_TIM_Base_Start+0xc4>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d009      	beq.n	8009794 <HAL_TIM_Base_Start+0x70>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a19      	ldr	r2, [pc, #100]	; (80097ec <HAL_TIM_Base_Start+0xc8>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d004      	beq.n	8009794 <HAL_TIM_Base_Start+0x70>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a18      	ldr	r2, [pc, #96]	; (80097f0 <HAL_TIM_Base_Start+0xcc>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d111      	bne.n	80097b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f003 0307 	and.w	r3, r3, #7
 800979e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2b06      	cmp	r3, #6
 80097a4:	d010      	beq.n	80097c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f042 0201 	orr.w	r2, r2, #1
 80097b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097b6:	e007      	b.n	80097c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f042 0201 	orr.w	r2, r2, #1
 80097c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	40010000 	.word	0x40010000
 80097dc:	40000400 	.word	0x40000400
 80097e0:	40000800 	.word	0x40000800
 80097e4:	40000c00 	.word	0x40000c00
 80097e8:	40010400 	.word	0x40010400
 80097ec:	40014000 	.word	0x40014000
 80097f0:	40001800 	.word	0x40001800

080097f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b01      	cmp	r3, #1
 8009806:	d001      	beq.n	800980c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e04e      	b.n	80098aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2202      	movs	r2, #2
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68da      	ldr	r2, [r3, #12]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f042 0201 	orr.w	r2, r2, #1
 8009822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a23      	ldr	r2, [pc, #140]	; (80098b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d022      	beq.n	8009874 <HAL_TIM_Base_Start_IT+0x80>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009836:	d01d      	beq.n	8009874 <HAL_TIM_Base_Start_IT+0x80>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a1f      	ldr	r2, [pc, #124]	; (80098bc <HAL_TIM_Base_Start_IT+0xc8>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d018      	beq.n	8009874 <HAL_TIM_Base_Start_IT+0x80>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a1e      	ldr	r2, [pc, #120]	; (80098c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d013      	beq.n	8009874 <HAL_TIM_Base_Start_IT+0x80>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a1c      	ldr	r2, [pc, #112]	; (80098c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d00e      	beq.n	8009874 <HAL_TIM_Base_Start_IT+0x80>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a1b      	ldr	r2, [pc, #108]	; (80098c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d009      	beq.n	8009874 <HAL_TIM_Base_Start_IT+0x80>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a19      	ldr	r2, [pc, #100]	; (80098cc <HAL_TIM_Base_Start_IT+0xd8>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d004      	beq.n	8009874 <HAL_TIM_Base_Start_IT+0x80>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a18      	ldr	r2, [pc, #96]	; (80098d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d111      	bne.n	8009898 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f003 0307 	and.w	r3, r3, #7
 800987e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b06      	cmp	r3, #6
 8009884:	d010      	beq.n	80098a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f042 0201 	orr.w	r2, r2, #1
 8009894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009896:	e007      	b.n	80098a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f042 0201 	orr.w	r2, r2, #1
 80098a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	40010000 	.word	0x40010000
 80098bc:	40000400 	.word	0x40000400
 80098c0:	40000800 	.word	0x40000800
 80098c4:	40000c00 	.word	0x40000c00
 80098c8:	40010400 	.word	0x40010400
 80098cc:	40014000 	.word	0x40014000
 80098d0:	40001800 	.word	0x40001800

080098d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d101      	bne.n	80098e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e041      	b.n	800996a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d106      	bne.n	8009900 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f839 	bl	8009972 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2202      	movs	r2, #2
 8009904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	3304      	adds	r3, #4
 8009910:	4619      	mov	r1, r3
 8009912:	4610      	mov	r0, r2
 8009914:	f000 fd2c 	bl	800a370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009972:	b480      	push	{r7}
 8009974:	b083      	sub	sp, #12
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800997a:	bf00      	nop
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
	...

08009988 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d109      	bne.n	80099ac <HAL_TIM_PWM_Start+0x24>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	bf14      	ite	ne
 80099a4:	2301      	movne	r3, #1
 80099a6:	2300      	moveq	r3, #0
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	e022      	b.n	80099f2 <HAL_TIM_PWM_Start+0x6a>
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	d109      	bne.n	80099c6 <HAL_TIM_PWM_Start+0x3e>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	bf14      	ite	ne
 80099be:	2301      	movne	r3, #1
 80099c0:	2300      	moveq	r3, #0
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	e015      	b.n	80099f2 <HAL_TIM_PWM_Start+0x6a>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	2b08      	cmp	r3, #8
 80099ca:	d109      	bne.n	80099e0 <HAL_TIM_PWM_Start+0x58>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	bf14      	ite	ne
 80099d8:	2301      	movne	r3, #1
 80099da:	2300      	moveq	r3, #0
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	e008      	b.n	80099f2 <HAL_TIM_PWM_Start+0x6a>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	bf14      	ite	ne
 80099ec:	2301      	movne	r3, #1
 80099ee:	2300      	moveq	r3, #0
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d001      	beq.n	80099fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e07c      	b.n	8009af4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d104      	bne.n	8009a0a <HAL_TIM_PWM_Start+0x82>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2202      	movs	r2, #2
 8009a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a08:	e013      	b.n	8009a32 <HAL_TIM_PWM_Start+0xaa>
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d104      	bne.n	8009a1a <HAL_TIM_PWM_Start+0x92>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2202      	movs	r2, #2
 8009a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a18:	e00b      	b.n	8009a32 <HAL_TIM_PWM_Start+0xaa>
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b08      	cmp	r3, #8
 8009a1e:	d104      	bne.n	8009a2a <HAL_TIM_PWM_Start+0xa2>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2202      	movs	r2, #2
 8009a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a28:	e003      	b.n	8009a32 <HAL_TIM_PWM_Start+0xaa>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2202      	movs	r2, #2
 8009a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2201      	movs	r2, #1
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f001 f93e 	bl	800acbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a2d      	ldr	r2, [pc, #180]	; (8009afc <HAL_TIM_PWM_Start+0x174>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d004      	beq.n	8009a54 <HAL_TIM_PWM_Start+0xcc>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a2c      	ldr	r2, [pc, #176]	; (8009b00 <HAL_TIM_PWM_Start+0x178>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d101      	bne.n	8009a58 <HAL_TIM_PWM_Start+0xd0>
 8009a54:	2301      	movs	r3, #1
 8009a56:	e000      	b.n	8009a5a <HAL_TIM_PWM_Start+0xd2>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d007      	beq.n	8009a6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a22      	ldr	r2, [pc, #136]	; (8009afc <HAL_TIM_PWM_Start+0x174>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d022      	beq.n	8009abe <HAL_TIM_PWM_Start+0x136>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a80:	d01d      	beq.n	8009abe <HAL_TIM_PWM_Start+0x136>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a1f      	ldr	r2, [pc, #124]	; (8009b04 <HAL_TIM_PWM_Start+0x17c>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d018      	beq.n	8009abe <HAL_TIM_PWM_Start+0x136>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a1d      	ldr	r2, [pc, #116]	; (8009b08 <HAL_TIM_PWM_Start+0x180>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d013      	beq.n	8009abe <HAL_TIM_PWM_Start+0x136>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a1c      	ldr	r2, [pc, #112]	; (8009b0c <HAL_TIM_PWM_Start+0x184>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d00e      	beq.n	8009abe <HAL_TIM_PWM_Start+0x136>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a16      	ldr	r2, [pc, #88]	; (8009b00 <HAL_TIM_PWM_Start+0x178>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d009      	beq.n	8009abe <HAL_TIM_PWM_Start+0x136>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a18      	ldr	r2, [pc, #96]	; (8009b10 <HAL_TIM_PWM_Start+0x188>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d004      	beq.n	8009abe <HAL_TIM_PWM_Start+0x136>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a16      	ldr	r2, [pc, #88]	; (8009b14 <HAL_TIM_PWM_Start+0x18c>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d111      	bne.n	8009ae2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	f003 0307 	and.w	r3, r3, #7
 8009ac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2b06      	cmp	r3, #6
 8009ace:	d010      	beq.n	8009af2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f042 0201 	orr.w	r2, r2, #1
 8009ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ae0:	e007      	b.n	8009af2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f042 0201 	orr.w	r2, r2, #1
 8009af0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	40010000 	.word	0x40010000
 8009b00:	40010400 	.word	0x40010400
 8009b04:	40000400 	.word	0x40000400
 8009b08:	40000800 	.word	0x40000800
 8009b0c:	40000c00 	.word	0x40000c00
 8009b10:	40014000 	.word	0x40014000
 8009b14:	40001800 	.word	0x40001800

08009b18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e041      	b.n	8009bae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d106      	bne.n	8009b44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f839 	bl	8009bb6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2202      	movs	r2, #2
 8009b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4619      	mov	r1, r3
 8009b56:	4610      	mov	r0, r2
 8009b58:	f000 fc0a 	bl	800a370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b083      	sub	sp, #12
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009bbe:	bf00      	nop
 8009bc0:	370c      	adds	r7, #12
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr

08009bca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b082      	sub	sp, #8
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	f003 0302 	and.w	r3, r3, #2
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d122      	bne.n	8009c26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	f003 0302 	and.w	r3, r3, #2
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d11b      	bne.n	8009c26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f06f 0202 	mvn.w	r2, #2
 8009bf6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	f003 0303 	and.w	r3, r3, #3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d003      	beq.n	8009c14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f7f8 fbb7 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8009c12:	e005      	b.n	8009c20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fb8d 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fb94 	bl	800a348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	f003 0304 	and.w	r3, r3, #4
 8009c30:	2b04      	cmp	r3, #4
 8009c32:	d122      	bne.n	8009c7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	f003 0304 	and.w	r3, r3, #4
 8009c3e:	2b04      	cmp	r3, #4
 8009c40:	d11b      	bne.n	8009c7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f06f 0204 	mvn.w	r2, #4
 8009c4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d003      	beq.n	8009c68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7f8 fb8d 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8009c66:	e005      	b.n	8009c74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fb63 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fb6a 	bl	800a348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	f003 0308 	and.w	r3, r3, #8
 8009c84:	2b08      	cmp	r3, #8
 8009c86:	d122      	bne.n	8009cce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	f003 0308 	and.w	r3, r3, #8
 8009c92:	2b08      	cmp	r3, #8
 8009c94:	d11b      	bne.n	8009cce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f06f 0208 	mvn.w	r2, #8
 8009c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2204      	movs	r2, #4
 8009ca4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	69db      	ldr	r3, [r3, #28]
 8009cac:	f003 0303 	and.w	r3, r3, #3
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f7f8 fb63 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8009cba:	e005      	b.n	8009cc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fb39 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fb40 	bl	800a348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	f003 0310 	and.w	r3, r3, #16
 8009cd8:	2b10      	cmp	r3, #16
 8009cda:	d122      	bne.n	8009d22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	f003 0310 	and.w	r3, r3, #16
 8009ce6:	2b10      	cmp	r3, #16
 8009ce8:	d11b      	bne.n	8009d22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f06f 0210 	mvn.w	r2, #16
 8009cf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2208      	movs	r2, #8
 8009cf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d003      	beq.n	8009d10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7f8 fb39 	bl	8002380 <HAL_TIM_IC_CaptureCallback>
 8009d0e:	e005      	b.n	8009d1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fb0f 	bl	800a334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fb16 	bl	800a348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	f003 0301 	and.w	r3, r3, #1
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d10e      	bne.n	8009d4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d107      	bne.n	8009d4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f06f 0201 	mvn.w	r2, #1
 8009d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7f8 fbbb 	bl	80024c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d58:	2b80      	cmp	r3, #128	; 0x80
 8009d5a:	d10e      	bne.n	8009d7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d66:	2b80      	cmp	r3, #128	; 0x80
 8009d68:	d107      	bne.n	8009d7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f001 f84d 	bl	800ae14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d84:	2b40      	cmp	r3, #64	; 0x40
 8009d86:	d10e      	bne.n	8009da6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d92:	2b40      	cmp	r3, #64	; 0x40
 8009d94:	d107      	bne.n	8009da6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fadb 	bl	800a35c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	691b      	ldr	r3, [r3, #16]
 8009dac:	f003 0320 	and.w	r3, r3, #32
 8009db0:	2b20      	cmp	r3, #32
 8009db2:	d10e      	bne.n	8009dd2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	f003 0320 	and.w	r3, r3, #32
 8009dbe:	2b20      	cmp	r3, #32
 8009dc0:	d107      	bne.n	8009dd2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f06f 0220 	mvn.w	r2, #32
 8009dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f001 f817 	bl	800ae00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009dd2:	bf00      	nop
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b086      	sub	sp, #24
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	60f8      	str	r0, [r7, #12]
 8009de2:	60b9      	str	r1, [r7, #8]
 8009de4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d101      	bne.n	8009df8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009df4:	2302      	movs	r3, #2
 8009df6:	e088      	b.n	8009f0a <HAL_TIM_IC_ConfigChannel+0x130>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d11b      	bne.n	8009e3e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	6819      	ldr	r1, [r3, #0]
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	f000 fd8d 	bl	800a934 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	699a      	ldr	r2, [r3, #24]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f022 020c 	bic.w	r2, r2, #12
 8009e28:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6999      	ldr	r1, [r3, #24]
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	689a      	ldr	r2, [r3, #8]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	619a      	str	r2, [r3, #24]
 8009e3c:	e060      	b.n	8009f00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2b04      	cmp	r3, #4
 8009e42:	d11c      	bne.n	8009e7e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6818      	ldr	r0, [r3, #0]
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	6819      	ldr	r1, [r3, #0]
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	f000 fe11 	bl	800aa7a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	699a      	ldr	r2, [r3, #24]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009e66:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6999      	ldr	r1, [r3, #24]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	021a      	lsls	r2, r3, #8
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	619a      	str	r2, [r3, #24]
 8009e7c:	e040      	b.n	8009f00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b08      	cmp	r3, #8
 8009e82:	d11b      	bne.n	8009ebc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6818      	ldr	r0, [r3, #0]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	6819      	ldr	r1, [r3, #0]
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f000 fe5e 	bl	800ab54 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	69da      	ldr	r2, [r3, #28]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f022 020c 	bic.w	r2, r2, #12
 8009ea6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	69d9      	ldr	r1, [r3, #28]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	689a      	ldr	r2, [r3, #8]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	61da      	str	r2, [r3, #28]
 8009eba:	e021      	b.n	8009f00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b0c      	cmp	r3, #12
 8009ec0:	d11c      	bne.n	8009efc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6818      	ldr	r0, [r3, #0]
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	6819      	ldr	r1, [r3, #0]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	f000 fe7b 	bl	800abcc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	69da      	ldr	r2, [r3, #28]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009ee4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	69d9      	ldr	r1, [r3, #28]
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	021a      	lsls	r2, r3, #8
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	61da      	str	r2, [r3, #28]
 8009efa:	e001      	b.n	8009f00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3718      	adds	r7, #24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
	...

08009f14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d101      	bne.n	8009f32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f2e:	2302      	movs	r3, #2
 8009f30:	e0ae      	b.n	800a090 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b0c      	cmp	r3, #12
 8009f3e:	f200 809f 	bhi.w	800a080 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009f42:	a201      	add	r2, pc, #4	; (adr r2, 8009f48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f48:	08009f7d 	.word	0x08009f7d
 8009f4c:	0800a081 	.word	0x0800a081
 8009f50:	0800a081 	.word	0x0800a081
 8009f54:	0800a081 	.word	0x0800a081
 8009f58:	08009fbd 	.word	0x08009fbd
 8009f5c:	0800a081 	.word	0x0800a081
 8009f60:	0800a081 	.word	0x0800a081
 8009f64:	0800a081 	.word	0x0800a081
 8009f68:	08009fff 	.word	0x08009fff
 8009f6c:	0800a081 	.word	0x0800a081
 8009f70:	0800a081 	.word	0x0800a081
 8009f74:	0800a081 	.word	0x0800a081
 8009f78:	0800a03f 	.word	0x0800a03f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68b9      	ldr	r1, [r7, #8]
 8009f82:	4618      	mov	r0, r3
 8009f84:	f000 fa94 	bl	800a4b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	699a      	ldr	r2, [r3, #24]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f042 0208 	orr.w	r2, r2, #8
 8009f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	699a      	ldr	r2, [r3, #24]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f022 0204 	bic.w	r2, r2, #4
 8009fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6999      	ldr	r1, [r3, #24]
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	691a      	ldr	r2, [r3, #16]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	430a      	orrs	r2, r1
 8009fb8:	619a      	str	r2, [r3, #24]
      break;
 8009fba:	e064      	b.n	800a086 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68b9      	ldr	r1, [r7, #8]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 fae4 	bl	800a590 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	699a      	ldr	r2, [r3, #24]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	699a      	ldr	r2, [r3, #24]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6999      	ldr	r1, [r3, #24]
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	021a      	lsls	r2, r3, #8
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	430a      	orrs	r2, r1
 8009ffa:	619a      	str	r2, [r3, #24]
      break;
 8009ffc:	e043      	b.n	800a086 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68b9      	ldr	r1, [r7, #8]
 800a004:	4618      	mov	r0, r3
 800a006:	f000 fb39 	bl	800a67c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	69da      	ldr	r2, [r3, #28]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f042 0208 	orr.w	r2, r2, #8
 800a018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	69da      	ldr	r2, [r3, #28]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f022 0204 	bic.w	r2, r2, #4
 800a028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	69d9      	ldr	r1, [r3, #28]
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	691a      	ldr	r2, [r3, #16]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	430a      	orrs	r2, r1
 800a03a:	61da      	str	r2, [r3, #28]
      break;
 800a03c:	e023      	b.n	800a086 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68b9      	ldr	r1, [r7, #8]
 800a044:	4618      	mov	r0, r3
 800a046:	f000 fb8d 	bl	800a764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	69da      	ldr	r2, [r3, #28]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	69da      	ldr	r2, [r3, #28]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	69d9      	ldr	r1, [r3, #28]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	021a      	lsls	r2, r3, #8
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	430a      	orrs	r2, r1
 800a07c:	61da      	str	r2, [r3, #28]
      break;
 800a07e:	e002      	b.n	800a086 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	75fb      	strb	r3, [r7, #23]
      break;
 800a084:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a08e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3718      	adds	r7, #24
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d101      	bne.n	800a0b4 <HAL_TIM_ConfigClockSource+0x1c>
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	e0b4      	b.n	800a21e <HAL_TIM_ConfigClockSource+0x186>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2202      	movs	r2, #2
 800a0c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a0d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ec:	d03e      	beq.n	800a16c <HAL_TIM_ConfigClockSource+0xd4>
 800a0ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0f2:	f200 8087 	bhi.w	800a204 <HAL_TIM_ConfigClockSource+0x16c>
 800a0f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0fa:	f000 8086 	beq.w	800a20a <HAL_TIM_ConfigClockSource+0x172>
 800a0fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a102:	d87f      	bhi.n	800a204 <HAL_TIM_ConfigClockSource+0x16c>
 800a104:	2b70      	cmp	r3, #112	; 0x70
 800a106:	d01a      	beq.n	800a13e <HAL_TIM_ConfigClockSource+0xa6>
 800a108:	2b70      	cmp	r3, #112	; 0x70
 800a10a:	d87b      	bhi.n	800a204 <HAL_TIM_ConfigClockSource+0x16c>
 800a10c:	2b60      	cmp	r3, #96	; 0x60
 800a10e:	d050      	beq.n	800a1b2 <HAL_TIM_ConfigClockSource+0x11a>
 800a110:	2b60      	cmp	r3, #96	; 0x60
 800a112:	d877      	bhi.n	800a204 <HAL_TIM_ConfigClockSource+0x16c>
 800a114:	2b50      	cmp	r3, #80	; 0x50
 800a116:	d03c      	beq.n	800a192 <HAL_TIM_ConfigClockSource+0xfa>
 800a118:	2b50      	cmp	r3, #80	; 0x50
 800a11a:	d873      	bhi.n	800a204 <HAL_TIM_ConfigClockSource+0x16c>
 800a11c:	2b40      	cmp	r3, #64	; 0x40
 800a11e:	d058      	beq.n	800a1d2 <HAL_TIM_ConfigClockSource+0x13a>
 800a120:	2b40      	cmp	r3, #64	; 0x40
 800a122:	d86f      	bhi.n	800a204 <HAL_TIM_ConfigClockSource+0x16c>
 800a124:	2b30      	cmp	r3, #48	; 0x30
 800a126:	d064      	beq.n	800a1f2 <HAL_TIM_ConfigClockSource+0x15a>
 800a128:	2b30      	cmp	r3, #48	; 0x30
 800a12a:	d86b      	bhi.n	800a204 <HAL_TIM_ConfigClockSource+0x16c>
 800a12c:	2b20      	cmp	r3, #32
 800a12e:	d060      	beq.n	800a1f2 <HAL_TIM_ConfigClockSource+0x15a>
 800a130:	2b20      	cmp	r3, #32
 800a132:	d867      	bhi.n	800a204 <HAL_TIM_ConfigClockSource+0x16c>
 800a134:	2b00      	cmp	r3, #0
 800a136:	d05c      	beq.n	800a1f2 <HAL_TIM_ConfigClockSource+0x15a>
 800a138:	2b10      	cmp	r3, #16
 800a13a:	d05a      	beq.n	800a1f2 <HAL_TIM_ConfigClockSource+0x15a>
 800a13c:	e062      	b.n	800a204 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6818      	ldr	r0, [r3, #0]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	6899      	ldr	r1, [r3, #8]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	685a      	ldr	r2, [r3, #4]
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	f000 fd95 	bl	800ac7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a160:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68ba      	ldr	r2, [r7, #8]
 800a168:	609a      	str	r2, [r3, #8]
      break;
 800a16a:	e04f      	b.n	800a20c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6818      	ldr	r0, [r3, #0]
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	6899      	ldr	r1, [r3, #8]
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	685a      	ldr	r2, [r3, #4]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	f000 fd7e 	bl	800ac7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	689a      	ldr	r2, [r3, #8]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a18e:	609a      	str	r2, [r3, #8]
      break;
 800a190:	e03c      	b.n	800a20c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6818      	ldr	r0, [r3, #0]
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	6859      	ldr	r1, [r3, #4]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	f000 fc3c 	bl	800aa1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2150      	movs	r1, #80	; 0x50
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 fd4b 	bl	800ac46 <TIM_ITRx_SetConfig>
      break;
 800a1b0:	e02c      	b.n	800a20c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6818      	ldr	r0, [r3, #0]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	6859      	ldr	r1, [r3, #4]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	f000 fc98 	bl	800aaf4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2160      	movs	r1, #96	; 0x60
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 fd3b 	bl	800ac46 <TIM_ITRx_SetConfig>
      break;
 800a1d0:	e01c      	b.n	800a20c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6818      	ldr	r0, [r3, #0]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	6859      	ldr	r1, [r3, #4]
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	f000 fc1c 	bl	800aa1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2140      	movs	r1, #64	; 0x40
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 fd2b 	bl	800ac46 <TIM_ITRx_SetConfig>
      break;
 800a1f0:	e00c      	b.n	800a20c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	f000 fd22 	bl	800ac46 <TIM_ITRx_SetConfig>
      break;
 800a202:	e003      	b.n	800a20c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	73fb      	strb	r3, [r7, #15]
      break;
 800a208:	e000      	b.n	800a20c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a20a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a236:	2b01      	cmp	r3, #1
 800a238:	d101      	bne.n	800a23e <HAL_TIM_SlaveConfigSynchro+0x18>
 800a23a:	2302      	movs	r3, #2
 800a23c:	e031      	b.n	800a2a2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2202      	movs	r2, #2
 800a24a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fadd 	bl	800a810 <TIM_SlaveTimer_SetConfig>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d009      	beq.n	800a270 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	e018      	b.n	800a2a2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68da      	ldr	r2, [r3, #12]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a27e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68da      	ldr	r2, [r3, #12]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a28e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
	...

0800a2ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	2b0c      	cmp	r3, #12
 800a2be:	d831      	bhi.n	800a324 <HAL_TIM_ReadCapturedValue+0x78>
 800a2c0:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c6:	bf00      	nop
 800a2c8:	0800a2fd 	.word	0x0800a2fd
 800a2cc:	0800a325 	.word	0x0800a325
 800a2d0:	0800a325 	.word	0x0800a325
 800a2d4:	0800a325 	.word	0x0800a325
 800a2d8:	0800a307 	.word	0x0800a307
 800a2dc:	0800a325 	.word	0x0800a325
 800a2e0:	0800a325 	.word	0x0800a325
 800a2e4:	0800a325 	.word	0x0800a325
 800a2e8:	0800a311 	.word	0x0800a311
 800a2ec:	0800a325 	.word	0x0800a325
 800a2f0:	0800a325 	.word	0x0800a325
 800a2f4:	0800a325 	.word	0x0800a325
 800a2f8:	0800a31b 	.word	0x0800a31b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a302:	60fb      	str	r3, [r7, #12]

      break;
 800a304:	e00f      	b.n	800a326 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30c:	60fb      	str	r3, [r7, #12]

      break;
 800a30e:	e00a      	b.n	800a326 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a316:	60fb      	str	r3, [r7, #12]

      break;
 800a318:	e005      	b.n	800a326 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a320:	60fb      	str	r3, [r7, #12]

      break;
 800a322:	e000      	b.n	800a326 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a324:	bf00      	nop
  }

  return tmpreg;
 800a326:	68fb      	ldr	r3, [r7, #12]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a40      	ldr	r2, [pc, #256]	; (800a484 <TIM_Base_SetConfig+0x114>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d013      	beq.n	800a3b0 <TIM_Base_SetConfig+0x40>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a38e:	d00f      	beq.n	800a3b0 <TIM_Base_SetConfig+0x40>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a3d      	ldr	r2, [pc, #244]	; (800a488 <TIM_Base_SetConfig+0x118>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d00b      	beq.n	800a3b0 <TIM_Base_SetConfig+0x40>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a3c      	ldr	r2, [pc, #240]	; (800a48c <TIM_Base_SetConfig+0x11c>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d007      	beq.n	800a3b0 <TIM_Base_SetConfig+0x40>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a3b      	ldr	r2, [pc, #236]	; (800a490 <TIM_Base_SetConfig+0x120>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d003      	beq.n	800a3b0 <TIM_Base_SetConfig+0x40>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a3a      	ldr	r2, [pc, #232]	; (800a494 <TIM_Base_SetConfig+0x124>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d108      	bne.n	800a3c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4a2f      	ldr	r2, [pc, #188]	; (800a484 <TIM_Base_SetConfig+0x114>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d02b      	beq.n	800a422 <TIM_Base_SetConfig+0xb2>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3d0:	d027      	beq.n	800a422 <TIM_Base_SetConfig+0xb2>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a2c      	ldr	r2, [pc, #176]	; (800a488 <TIM_Base_SetConfig+0x118>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d023      	beq.n	800a422 <TIM_Base_SetConfig+0xb2>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4a2b      	ldr	r2, [pc, #172]	; (800a48c <TIM_Base_SetConfig+0x11c>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d01f      	beq.n	800a422 <TIM_Base_SetConfig+0xb2>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4a2a      	ldr	r2, [pc, #168]	; (800a490 <TIM_Base_SetConfig+0x120>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d01b      	beq.n	800a422 <TIM_Base_SetConfig+0xb2>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a29      	ldr	r2, [pc, #164]	; (800a494 <TIM_Base_SetConfig+0x124>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d017      	beq.n	800a422 <TIM_Base_SetConfig+0xb2>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a28      	ldr	r2, [pc, #160]	; (800a498 <TIM_Base_SetConfig+0x128>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d013      	beq.n	800a422 <TIM_Base_SetConfig+0xb2>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a27      	ldr	r2, [pc, #156]	; (800a49c <TIM_Base_SetConfig+0x12c>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d00f      	beq.n	800a422 <TIM_Base_SetConfig+0xb2>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4a26      	ldr	r2, [pc, #152]	; (800a4a0 <TIM_Base_SetConfig+0x130>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d00b      	beq.n	800a422 <TIM_Base_SetConfig+0xb2>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a25      	ldr	r2, [pc, #148]	; (800a4a4 <TIM_Base_SetConfig+0x134>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d007      	beq.n	800a422 <TIM_Base_SetConfig+0xb2>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a24      	ldr	r2, [pc, #144]	; (800a4a8 <TIM_Base_SetConfig+0x138>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d003      	beq.n	800a422 <TIM_Base_SetConfig+0xb2>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a23      	ldr	r2, [pc, #140]	; (800a4ac <TIM_Base_SetConfig+0x13c>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d108      	bne.n	800a434 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	4313      	orrs	r3, r2
 800a432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	4313      	orrs	r3, r2
 800a440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	689a      	ldr	r2, [r3, #8]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	4a0a      	ldr	r2, [pc, #40]	; (800a484 <TIM_Base_SetConfig+0x114>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d003      	beq.n	800a468 <TIM_Base_SetConfig+0xf8>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a0c      	ldr	r2, [pc, #48]	; (800a494 <TIM_Base_SetConfig+0x124>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d103      	bne.n	800a470 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	691a      	ldr	r2, [r3, #16]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	615a      	str	r2, [r3, #20]
}
 800a476:	bf00      	nop
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	40010000 	.word	0x40010000
 800a488:	40000400 	.word	0x40000400
 800a48c:	40000800 	.word	0x40000800
 800a490:	40000c00 	.word	0x40000c00
 800a494:	40010400 	.word	0x40010400
 800a498:	40014000 	.word	0x40014000
 800a49c:	40014400 	.word	0x40014400
 800a4a0:	40014800 	.word	0x40014800
 800a4a4:	40001800 	.word	0x40001800
 800a4a8:	40001c00 	.word	0x40001c00
 800a4ac:	40002000 	.word	0x40002000

0800a4b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b087      	sub	sp, #28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	f023 0201 	bic.w	r2, r3, #1
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f023 0303 	bic.w	r3, r3, #3
 800a4e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f023 0302 	bic.w	r3, r3, #2
 800a4f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	4313      	orrs	r3, r2
 800a502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a20      	ldr	r2, [pc, #128]	; (800a588 <TIM_OC1_SetConfig+0xd8>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d003      	beq.n	800a514 <TIM_OC1_SetConfig+0x64>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a1f      	ldr	r2, [pc, #124]	; (800a58c <TIM_OC1_SetConfig+0xdc>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d10c      	bne.n	800a52e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	f023 0308 	bic.w	r3, r3, #8
 800a51a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	4313      	orrs	r3, r2
 800a524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f023 0304 	bic.w	r3, r3, #4
 800a52c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a15      	ldr	r2, [pc, #84]	; (800a588 <TIM_OC1_SetConfig+0xd8>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d003      	beq.n	800a53e <TIM_OC1_SetConfig+0x8e>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a14      	ldr	r2, [pc, #80]	; (800a58c <TIM_OC1_SetConfig+0xdc>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d111      	bne.n	800a562 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a54c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	4313      	orrs	r3, r2
 800a556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	4313      	orrs	r3, r2
 800a560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	621a      	str	r2, [r3, #32]
}
 800a57c:	bf00      	nop
 800a57e:	371c      	adds	r7, #28
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	40010000 	.word	0x40010000
 800a58c:	40010400 	.word	0x40010400

0800a590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a590:	b480      	push	{r7}
 800a592:	b087      	sub	sp, #28
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	f023 0210 	bic.w	r2, r3, #16
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	021b      	lsls	r3, r3, #8
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f023 0320 	bic.w	r3, r3, #32
 800a5da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	011b      	lsls	r3, r3, #4
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4a22      	ldr	r2, [pc, #136]	; (800a674 <TIM_OC2_SetConfig+0xe4>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d003      	beq.n	800a5f8 <TIM_OC2_SetConfig+0x68>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4a21      	ldr	r2, [pc, #132]	; (800a678 <TIM_OC2_SetConfig+0xe8>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d10d      	bne.n	800a614 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	011b      	lsls	r3, r3, #4
 800a606:	697a      	ldr	r2, [r7, #20]
 800a608:	4313      	orrs	r3, r2
 800a60a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a612:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a17      	ldr	r2, [pc, #92]	; (800a674 <TIM_OC2_SetConfig+0xe4>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d003      	beq.n	800a624 <TIM_OC2_SetConfig+0x94>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a16      	ldr	r2, [pc, #88]	; (800a678 <TIM_OC2_SetConfig+0xe8>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d113      	bne.n	800a64c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a62a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a632:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	695b      	ldr	r3, [r3, #20]
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	693a      	ldr	r2, [r7, #16]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	4313      	orrs	r3, r2
 800a64a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	621a      	str	r2, [r3, #32]
}
 800a666:	bf00      	nop
 800a668:	371c      	adds	r7, #28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	40010000 	.word	0x40010000
 800a678:	40010400 	.word	0x40010400

0800a67c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b087      	sub	sp, #28
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a1b      	ldr	r3, [r3, #32]
 800a696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	69db      	ldr	r3, [r3, #28]
 800a6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f023 0303 	bic.w	r3, r3, #3
 800a6b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	021b      	lsls	r3, r3, #8
 800a6cc:	697a      	ldr	r2, [r7, #20]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a21      	ldr	r2, [pc, #132]	; (800a75c <TIM_OC3_SetConfig+0xe0>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d003      	beq.n	800a6e2 <TIM_OC3_SetConfig+0x66>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a20      	ldr	r2, [pc, #128]	; (800a760 <TIM_OC3_SetConfig+0xe4>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d10d      	bne.n	800a6fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	021b      	lsls	r3, r3, #8
 800a6f0:	697a      	ldr	r2, [r7, #20]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a16      	ldr	r2, [pc, #88]	; (800a75c <TIM_OC3_SetConfig+0xe0>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d003      	beq.n	800a70e <TIM_OC3_SetConfig+0x92>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a15      	ldr	r2, [pc, #84]	; (800a760 <TIM_OC3_SetConfig+0xe4>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d113      	bne.n	800a736 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a71c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	695b      	ldr	r3, [r3, #20]
 800a722:	011b      	lsls	r3, r3, #4
 800a724:	693a      	ldr	r2, [r7, #16]
 800a726:	4313      	orrs	r3, r2
 800a728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	011b      	lsls	r3, r3, #4
 800a730:	693a      	ldr	r2, [r7, #16]
 800a732:	4313      	orrs	r3, r2
 800a734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	693a      	ldr	r2, [r7, #16]
 800a73a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	621a      	str	r2, [r3, #32]
}
 800a750:	bf00      	nop
 800a752:	371c      	adds	r7, #28
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr
 800a75c:	40010000 	.word	0x40010000
 800a760:	40010400 	.word	0x40010400

0800a764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a764:	b480      	push	{r7}
 800a766:	b087      	sub	sp, #28
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a1b      	ldr	r3, [r3, #32]
 800a772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a1b      	ldr	r3, [r3, #32]
 800a77e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	69db      	ldr	r3, [r3, #28]
 800a78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a79a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	021b      	lsls	r3, r3, #8
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	031b      	lsls	r3, r3, #12
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a12      	ldr	r2, [pc, #72]	; (800a808 <TIM_OC4_SetConfig+0xa4>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d003      	beq.n	800a7cc <TIM_OC4_SetConfig+0x68>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a11      	ldr	r2, [pc, #68]	; (800a80c <TIM_OC4_SetConfig+0xa8>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d109      	bne.n	800a7e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	695b      	ldr	r3, [r3, #20]
 800a7d8:	019b      	lsls	r3, r3, #6
 800a7da:	697a      	ldr	r2, [r7, #20]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	685a      	ldr	r2, [r3, #4]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	693a      	ldr	r2, [r7, #16]
 800a7f8:	621a      	str	r2, [r3, #32]
}
 800a7fa:	bf00      	nop
 800a7fc:	371c      	adds	r7, #28
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	40010000 	.word	0x40010000
 800a80c:	40010400 	.word	0x40010400

0800a810 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a82c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	693a      	ldr	r2, [r7, #16]
 800a834:	4313      	orrs	r3, r2
 800a836:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	f023 0307 	bic.w	r3, r3, #7
 800a83e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	693a      	ldr	r2, [r7, #16]
 800a846:	4313      	orrs	r3, r2
 800a848:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	2b70      	cmp	r3, #112	; 0x70
 800a858:	d01a      	beq.n	800a890 <TIM_SlaveTimer_SetConfig+0x80>
 800a85a:	2b70      	cmp	r3, #112	; 0x70
 800a85c:	d860      	bhi.n	800a920 <TIM_SlaveTimer_SetConfig+0x110>
 800a85e:	2b60      	cmp	r3, #96	; 0x60
 800a860:	d054      	beq.n	800a90c <TIM_SlaveTimer_SetConfig+0xfc>
 800a862:	2b60      	cmp	r3, #96	; 0x60
 800a864:	d85c      	bhi.n	800a920 <TIM_SlaveTimer_SetConfig+0x110>
 800a866:	2b50      	cmp	r3, #80	; 0x50
 800a868:	d046      	beq.n	800a8f8 <TIM_SlaveTimer_SetConfig+0xe8>
 800a86a:	2b50      	cmp	r3, #80	; 0x50
 800a86c:	d858      	bhi.n	800a920 <TIM_SlaveTimer_SetConfig+0x110>
 800a86e:	2b40      	cmp	r3, #64	; 0x40
 800a870:	d019      	beq.n	800a8a6 <TIM_SlaveTimer_SetConfig+0x96>
 800a872:	2b40      	cmp	r3, #64	; 0x40
 800a874:	d854      	bhi.n	800a920 <TIM_SlaveTimer_SetConfig+0x110>
 800a876:	2b30      	cmp	r3, #48	; 0x30
 800a878:	d055      	beq.n	800a926 <TIM_SlaveTimer_SetConfig+0x116>
 800a87a:	2b30      	cmp	r3, #48	; 0x30
 800a87c:	d850      	bhi.n	800a920 <TIM_SlaveTimer_SetConfig+0x110>
 800a87e:	2b20      	cmp	r3, #32
 800a880:	d051      	beq.n	800a926 <TIM_SlaveTimer_SetConfig+0x116>
 800a882:	2b20      	cmp	r3, #32
 800a884:	d84c      	bhi.n	800a920 <TIM_SlaveTimer_SetConfig+0x110>
 800a886:	2b00      	cmp	r3, #0
 800a888:	d04d      	beq.n	800a926 <TIM_SlaveTimer_SetConfig+0x116>
 800a88a:	2b10      	cmp	r3, #16
 800a88c:	d04b      	beq.n	800a926 <TIM_SlaveTimer_SetConfig+0x116>
 800a88e:	e047      	b.n	800a920 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6818      	ldr	r0, [r3, #0]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	68d9      	ldr	r1, [r3, #12]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	689a      	ldr	r2, [r3, #8]
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	f000 f9ec 	bl	800ac7c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800a8a4:	e040      	b.n	800a928 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b05      	cmp	r3, #5
 800a8ac:	d101      	bne.n	800a8b2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e03b      	b.n	800a92a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	6a1a      	ldr	r2, [r3, #32]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f022 0201 	bic.w	r2, r2, #1
 800a8c8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	699b      	ldr	r3, [r3, #24]
 800a8d0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8d8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	011b      	lsls	r3, r3, #4
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68ba      	ldr	r2, [r7, #8]
 800a8ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	621a      	str	r2, [r3, #32]
      break;
 800a8f6:	e017      	b.n	800a928 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6818      	ldr	r0, [r3, #0]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	6899      	ldr	r1, [r3, #8]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	461a      	mov	r2, r3
 800a906:	f000 f889 	bl	800aa1c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a90a:	e00d      	b.n	800a928 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6818      	ldr	r0, [r3, #0]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	6899      	ldr	r1, [r3, #8]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	691b      	ldr	r3, [r3, #16]
 800a918:	461a      	mov	r2, r3
 800a91a:	f000 f8eb 	bl	800aaf4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a91e:	e003      	b.n	800a928 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	75fb      	strb	r3, [r7, #23]
      break;
 800a924:	e000      	b.n	800a928 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800a926:	bf00      	nop
  }

  return status;
 800a928:	7dfb      	ldrb	r3, [r7, #23]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3718      	adds	r7, #24
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
	...

0800a934 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a934:	b480      	push	{r7}
 800a936:	b087      	sub	sp, #28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
 800a940:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6a1b      	ldr	r3, [r3, #32]
 800a946:	f023 0201 	bic.w	r2, r3, #1
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6a1b      	ldr	r3, [r3, #32]
 800a958:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	4a28      	ldr	r2, [pc, #160]	; (800aa00 <TIM_TI1_SetConfig+0xcc>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d01b      	beq.n	800a99a <TIM_TI1_SetConfig+0x66>
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a968:	d017      	beq.n	800a99a <TIM_TI1_SetConfig+0x66>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	4a25      	ldr	r2, [pc, #148]	; (800aa04 <TIM_TI1_SetConfig+0xd0>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d013      	beq.n	800a99a <TIM_TI1_SetConfig+0x66>
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4a24      	ldr	r2, [pc, #144]	; (800aa08 <TIM_TI1_SetConfig+0xd4>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d00f      	beq.n	800a99a <TIM_TI1_SetConfig+0x66>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	4a23      	ldr	r2, [pc, #140]	; (800aa0c <TIM_TI1_SetConfig+0xd8>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d00b      	beq.n	800a99a <TIM_TI1_SetConfig+0x66>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	4a22      	ldr	r2, [pc, #136]	; (800aa10 <TIM_TI1_SetConfig+0xdc>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d007      	beq.n	800a99a <TIM_TI1_SetConfig+0x66>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	4a21      	ldr	r2, [pc, #132]	; (800aa14 <TIM_TI1_SetConfig+0xe0>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d003      	beq.n	800a99a <TIM_TI1_SetConfig+0x66>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	4a20      	ldr	r2, [pc, #128]	; (800aa18 <TIM_TI1_SetConfig+0xe4>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d101      	bne.n	800a99e <TIM_TI1_SetConfig+0x6a>
 800a99a:	2301      	movs	r3, #1
 800a99c:	e000      	b.n	800a9a0 <TIM_TI1_SetConfig+0x6c>
 800a99e:	2300      	movs	r3, #0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d008      	beq.n	800a9b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	f023 0303 	bic.w	r3, r3, #3
 800a9aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a9ac:	697a      	ldr	r2, [r7, #20]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	617b      	str	r3, [r7, #20]
 800a9b4:	e003      	b.n	800a9be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	f043 0301 	orr.w	r3, r3, #1
 800a9bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	011b      	lsls	r3, r3, #4
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	697a      	ldr	r2, [r7, #20]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	f023 030a 	bic.w	r3, r3, #10
 800a9d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	f003 030a 	and.w	r3, r3, #10
 800a9e0:	693a      	ldr	r2, [r7, #16]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	693a      	ldr	r2, [r7, #16]
 800a9f0:	621a      	str	r2, [r3, #32]
}
 800a9f2:	bf00      	nop
 800a9f4:	371c      	adds	r7, #28
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	40010000 	.word	0x40010000
 800aa04:	40000400 	.word	0x40000400
 800aa08:	40000800 	.word	0x40000800
 800aa0c:	40000c00 	.word	0x40000c00
 800aa10:	40010400 	.word	0x40010400
 800aa14:	40014000 	.word	0x40014000
 800aa18:	40001800 	.word	0x40001800

0800aa1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b087      	sub	sp, #28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6a1b      	ldr	r3, [r3, #32]
 800aa2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6a1b      	ldr	r3, [r3, #32]
 800aa32:	f023 0201 	bic.w	r2, r3, #1
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	011b      	lsls	r3, r3, #4
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f023 030a 	bic.w	r3, r3, #10
 800aa58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	621a      	str	r2, [r3, #32]
}
 800aa6e:	bf00      	nop
 800aa70:	371c      	adds	r7, #28
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	b087      	sub	sp, #28
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	60f8      	str	r0, [r7, #12]
 800aa82:	60b9      	str	r1, [r7, #8]
 800aa84:	607a      	str	r2, [r7, #4]
 800aa86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6a1b      	ldr	r3, [r3, #32]
 800aa8c:	f023 0210 	bic.w	r2, r3, #16
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6a1b      	ldr	r3, [r3, #32]
 800aa9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaa6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	021b      	lsls	r3, r3, #8
 800aaac:	697a      	ldr	r2, [r7, #20]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aab8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	031b      	lsls	r3, r3, #12
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aacc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	011b      	lsls	r3, r3, #4
 800aad2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aad6:	693a      	ldr	r2, [r7, #16]
 800aad8:	4313      	orrs	r3, r2
 800aada:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	697a      	ldr	r2, [r7, #20]
 800aae0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	621a      	str	r2, [r3, #32]
}
 800aae8:	bf00      	nop
 800aaea:	371c      	adds	r7, #28
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b087      	sub	sp, #28
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6a1b      	ldr	r3, [r3, #32]
 800ab04:	f023 0210 	bic.w	r2, r3, #16
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	031b      	lsls	r3, r3, #12
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	011b      	lsls	r3, r3, #4
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	621a      	str	r2, [r3, #32]
}
 800ab48:	bf00      	nop
 800ab4a:	371c      	adds	r7, #28
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
 800ab60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	69db      	ldr	r3, [r3, #28]
 800ab72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f023 0303 	bic.w	r3, r3, #3
 800ab80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ab82:	697a      	ldr	r2, [r7, #20]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	011b      	lsls	r3, r3, #4
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	697a      	ldr	r2, [r7, #20]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800aba4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	021b      	lsls	r3, r3, #8
 800abaa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	693a      	ldr	r2, [r7, #16]
 800abbe:	621a      	str	r2, [r3, #32]
}
 800abc0:	bf00      	nop
 800abc2:	371c      	adds	r7, #28
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800abcc:	b480      	push	{r7}
 800abce:	b087      	sub	sp, #28
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
 800abd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	69db      	ldr	r3, [r3, #28]
 800abea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6a1b      	ldr	r3, [r3, #32]
 800abf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abf8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	021b      	lsls	r3, r3, #8
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	4313      	orrs	r3, r2
 800ac02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	031b      	lsls	r3, r3, #12
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	697a      	ldr	r2, [r7, #20]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ac1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	031b      	lsls	r3, r3, #12
 800ac24:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ac28:	693a      	ldr	r2, [r7, #16]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	621a      	str	r2, [r3, #32]
}
 800ac3a:	bf00      	nop
 800ac3c:	371c      	adds	r7, #28
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac46:	b480      	push	{r7}
 800ac48:	b085      	sub	sp, #20
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	f043 0307 	orr.w	r3, r3, #7
 800ac68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	609a      	str	r2, [r3, #8]
}
 800ac70:	bf00      	nop
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b087      	sub	sp, #28
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	021a      	lsls	r2, r3, #8
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	431a      	orrs	r2, r3
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	697a      	ldr	r2, [r7, #20]
 800acae:	609a      	str	r2, [r3, #8]
}
 800acb0:	bf00      	nop
 800acb2:	371c      	adds	r7, #28
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b087      	sub	sp, #28
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	f003 031f 	and.w	r3, r3, #31
 800acce:	2201      	movs	r2, #1
 800acd0:	fa02 f303 	lsl.w	r3, r2, r3
 800acd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6a1a      	ldr	r2, [r3, #32]
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	43db      	mvns	r3, r3
 800acde:	401a      	ands	r2, r3
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6a1a      	ldr	r2, [r3, #32]
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	f003 031f 	and.w	r3, r3, #31
 800acee:	6879      	ldr	r1, [r7, #4]
 800acf0:	fa01 f303 	lsl.w	r3, r1, r3
 800acf4:	431a      	orrs	r2, r3
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	621a      	str	r2, [r3, #32]
}
 800acfa:	bf00      	nop
 800acfc:	371c      	adds	r7, #28
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
	...

0800ad08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d101      	bne.n	800ad20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad1c:	2302      	movs	r3, #2
 800ad1e:	e05a      	b.n	800add6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2202      	movs	r2, #2
 800ad2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a21      	ldr	r2, [pc, #132]	; (800ade4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d022      	beq.n	800adaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad6c:	d01d      	beq.n	800adaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a1d      	ldr	r2, [pc, #116]	; (800ade8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d018      	beq.n	800adaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a1b      	ldr	r2, [pc, #108]	; (800adec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d013      	beq.n	800adaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a1a      	ldr	r2, [pc, #104]	; (800adf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d00e      	beq.n	800adaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a18      	ldr	r2, [pc, #96]	; (800adf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d009      	beq.n	800adaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a17      	ldr	r2, [pc, #92]	; (800adf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d004      	beq.n	800adaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a15      	ldr	r2, [pc, #84]	; (800adfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d10c      	bne.n	800adc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	68ba      	ldr	r2, [r7, #8]
 800adb8:	4313      	orrs	r3, r2
 800adba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	40010000 	.word	0x40010000
 800ade8:	40000400 	.word	0x40000400
 800adec:	40000800 	.word	0x40000800
 800adf0:	40000c00 	.word	0x40000c00
 800adf4:	40010400 	.word	0x40010400
 800adf8:	40014000 	.word	0x40014000
 800adfc:	40001800 	.word	0x40001800

0800ae00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae1c:	bf00      	nop
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d101      	bne.n	800ae3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	e03f      	b.n	800aeba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d106      	bne.n	800ae54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7f9 f8b6 	bl	8003fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2224      	movs	r2, #36	; 0x24
 800ae58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68da      	ldr	r2, [r3, #12]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 ff11 	bl	800bc94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	691a      	ldr	r2, [r3, #16]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	695a      	ldr	r2, [r3, #20]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	68da      	ldr	r2, [r3, #12]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2200      	movs	r2, #0
 800aea6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2220      	movs	r2, #32
 800aeac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2220      	movs	r2, #32
 800aeb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aec2:	b480      	push	{r7}
 800aec4:	b085      	sub	sp, #20
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	60f8      	str	r0, [r7, #12]
 800aeca:	60b9      	str	r1, [r7, #8]
 800aecc:	4613      	mov	r3, r2
 800aece:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	2b20      	cmp	r3, #32
 800aeda:	d130      	bne.n	800af3e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d002      	beq.n	800aee8 <HAL_UART_Transmit_IT+0x26>
 800aee2:	88fb      	ldrh	r3, [r7, #6]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d101      	bne.n	800aeec <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	e029      	b.n	800af40 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d101      	bne.n	800aefa <HAL_UART_Transmit_IT+0x38>
 800aef6:	2302      	movs	r3, #2
 800aef8:	e022      	b.n	800af40 <HAL_UART_Transmit_IT+0x7e>
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2201      	movs	r2, #1
 800aefe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	88fa      	ldrh	r2, [r7, #6]
 800af0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	88fa      	ldrh	r2, [r7, #6]
 800af12:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2200      	movs	r2, #0
 800af18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2221      	movs	r2, #33	; 0x21
 800af1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	68da      	ldr	r2, [r3, #12]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af38:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	e000      	b.n	800af40 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800af3e:	2302      	movs	r3, #2
  }
}
 800af40:	4618      	mov	r0, r3
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	4613      	mov	r3, r2
 800af58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b20      	cmp	r3, #32
 800af64:	d11d      	bne.n	800afa2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d002      	beq.n	800af72 <HAL_UART_Receive_IT+0x26>
 800af6c:	88fb      	ldrh	r3, [r7, #6]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e016      	b.n	800afa4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d101      	bne.n	800af84 <HAL_UART_Receive_IT+0x38>
 800af80:	2302      	movs	r3, #2
 800af82:	e00f      	b.n	800afa4 <HAL_UART_Receive_IT+0x58>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2201      	movs	r2, #1
 800af88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2200      	movs	r2, #0
 800af90:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800af92:	88fb      	ldrh	r3, [r7, #6]
 800af94:	461a      	mov	r2, r3
 800af96:	68b9      	ldr	r1, [r7, #8]
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f000 fbdd 	bl	800b758 <UART_Start_Receive_IT>
 800af9e:	4603      	mov	r3, r0
 800afa0:	e000      	b.n	800afa4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800afa2:	2302      	movs	r3, #2
  }
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	4613      	mov	r3, r2
 800afb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b20      	cmp	r3, #32
 800afc4:	d11d      	bne.n	800b002 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <HAL_UART_Receive_DMA+0x26>
 800afcc:	88fb      	ldrh	r3, [r7, #6]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d101      	bne.n	800afd6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	e016      	b.n	800b004 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d101      	bne.n	800afe4 <HAL_UART_Receive_DMA+0x38>
 800afe0:	2302      	movs	r3, #2
 800afe2:	e00f      	b.n	800b004 <HAL_UART_Receive_DMA+0x58>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2200      	movs	r2, #0
 800aff0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aff2:	88fb      	ldrh	r3, [r7, #6]
 800aff4:	461a      	mov	r2, r3
 800aff6:	68b9      	ldr	r1, [r7, #8]
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f000 fbeb 	bl	800b7d4 <UART_Start_Receive_DMA>
 800affe:	4603      	mov	r3, r0
 800b000:	e000      	b.n	800b004 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b002:	2302      	movs	r3, #2
  }
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b0ba      	sub	sp, #232	; 0xe8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	695b      	ldr	r3, [r3, #20]
 800b02e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b032:	2300      	movs	r3, #0
 800b034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b038:	2300      	movs	r3, #0
 800b03a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b03e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b042:	f003 030f 	and.w	r3, r3, #15
 800b046:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b04a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d10f      	bne.n	800b072 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b056:	f003 0320 	and.w	r3, r3, #32
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d009      	beq.n	800b072 <HAL_UART_IRQHandler+0x66>
 800b05e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b062:	f003 0320 	and.w	r3, r3, #32
 800b066:	2b00      	cmp	r3, #0
 800b068:	d003      	beq.n	800b072 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fd57 	bl	800bb1e <UART_Receive_IT>
      return;
 800b070:	e256      	b.n	800b520 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b076:	2b00      	cmp	r3, #0
 800b078:	f000 80de 	beq.w	800b238 <HAL_UART_IRQHandler+0x22c>
 800b07c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	2b00      	cmp	r3, #0
 800b086:	d106      	bne.n	800b096 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b08c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b090:	2b00      	cmp	r3, #0
 800b092:	f000 80d1 	beq.w	800b238 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b09a:	f003 0301 	and.w	r3, r3, #1
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00b      	beq.n	800b0ba <HAL_UART_IRQHandler+0xae>
 800b0a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d005      	beq.n	800b0ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b2:	f043 0201 	orr.w	r2, r3, #1
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0be:	f003 0304 	and.w	r3, r3, #4
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00b      	beq.n	800b0de <HAL_UART_IRQHandler+0xd2>
 800b0c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0ca:	f003 0301 	and.w	r3, r3, #1
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d005      	beq.n	800b0de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d6:	f043 0202 	orr.w	r2, r3, #2
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b0de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0e2:	f003 0302 	and.w	r3, r3, #2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d00b      	beq.n	800b102 <HAL_UART_IRQHandler+0xf6>
 800b0ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d005      	beq.n	800b102 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fa:	f043 0204 	orr.w	r2, r3, #4
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b106:	f003 0308 	and.w	r3, r3, #8
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d011      	beq.n	800b132 <HAL_UART_IRQHandler+0x126>
 800b10e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b112:	f003 0320 	and.w	r3, r3, #32
 800b116:	2b00      	cmp	r3, #0
 800b118:	d105      	bne.n	800b126 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b11a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b11e:	f003 0301 	and.w	r3, r3, #1
 800b122:	2b00      	cmp	r3, #0
 800b124:	d005      	beq.n	800b132 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12a:	f043 0208 	orr.w	r2, r3, #8
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b136:	2b00      	cmp	r3, #0
 800b138:	f000 81ed 	beq.w	800b516 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b140:	f003 0320 	and.w	r3, r3, #32
 800b144:	2b00      	cmp	r3, #0
 800b146:	d008      	beq.n	800b15a <HAL_UART_IRQHandler+0x14e>
 800b148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b14c:	f003 0320 	and.w	r3, r3, #32
 800b150:	2b00      	cmp	r3, #0
 800b152:	d002      	beq.n	800b15a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 fce2 	bl	800bb1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	695b      	ldr	r3, [r3, #20]
 800b160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b164:	2b40      	cmp	r3, #64	; 0x40
 800b166:	bf0c      	ite	eq
 800b168:	2301      	moveq	r3, #1
 800b16a:	2300      	movne	r3, #0
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b176:	f003 0308 	and.w	r3, r3, #8
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d103      	bne.n	800b186 <HAL_UART_IRQHandler+0x17a>
 800b17e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b182:	2b00      	cmp	r3, #0
 800b184:	d04f      	beq.n	800b226 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fbea 	bl	800b960 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	695b      	ldr	r3, [r3, #20]
 800b192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b196:	2b40      	cmp	r3, #64	; 0x40
 800b198:	d141      	bne.n	800b21e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	3314      	adds	r3, #20
 800b1a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1a8:	e853 3f00 	ldrex	r3, [r3]
 800b1ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b1b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b1b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3314      	adds	r3, #20
 800b1c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b1c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b1ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b1d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b1d6:	e841 2300 	strex	r3, r2, [r1]
 800b1da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b1de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d1d9      	bne.n	800b19a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d013      	beq.n	800b216 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f2:	4a7d      	ldr	r2, [pc, #500]	; (800b3e8 <HAL_UART_IRQHandler+0x3dc>)
 800b1f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fb fc08 	bl	8006a10 <HAL_DMA_Abort_IT>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d016      	beq.n	800b234 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b210:	4610      	mov	r0, r2
 800b212:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b214:	e00e      	b.n	800b234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 f990 	bl	800b53c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b21c:	e00a      	b.n	800b234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f98c 	bl	800b53c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b224:	e006      	b.n	800b234 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f988 	bl	800b53c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b232:	e170      	b.n	800b516 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b234:	bf00      	nop
    return;
 800b236:	e16e      	b.n	800b516 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	f040 814a 	bne.w	800b4d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b246:	f003 0310 	and.w	r3, r3, #16
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 8143 	beq.w	800b4d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b254:	f003 0310 	and.w	r3, r3, #16
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f000 813c 	beq.w	800b4d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b25e:	2300      	movs	r3, #0
 800b260:	60bb      	str	r3, [r7, #8]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	60bb      	str	r3, [r7, #8]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	60bb      	str	r3, [r7, #8]
 800b272:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27e:	2b40      	cmp	r3, #64	; 0x40
 800b280:	f040 80b4 	bne.w	800b3ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b290:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b294:	2b00      	cmp	r3, #0
 800b296:	f000 8140 	beq.w	800b51a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b29e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	f080 8139 	bcs.w	800b51a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b4:	69db      	ldr	r3, [r3, #28]
 800b2b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ba:	f000 8088 	beq.w	800b3ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	330c      	adds	r3, #12
 800b2c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b2cc:	e853 3f00 	ldrex	r3, [r3]
 800b2d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b2d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b2d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	330c      	adds	r3, #12
 800b2e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b2ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b2ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b2f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b2fa:	e841 2300 	strex	r3, r2, [r1]
 800b2fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b302:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1d9      	bne.n	800b2be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	3314      	adds	r3, #20
 800b310:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b314:	e853 3f00 	ldrex	r3, [r3]
 800b318:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b31a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b31c:	f023 0301 	bic.w	r3, r3, #1
 800b320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3314      	adds	r3, #20
 800b32a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b32e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b332:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b334:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b336:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b33a:	e841 2300 	strex	r3, r2, [r1]
 800b33e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1e1      	bne.n	800b30a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3314      	adds	r3, #20
 800b34c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b350:	e853 3f00 	ldrex	r3, [r3]
 800b354:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b35c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3314      	adds	r3, #20
 800b366:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b36a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b36c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b370:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b372:	e841 2300 	strex	r3, r2, [r1]
 800b376:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1e3      	bne.n	800b346 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2220      	movs	r2, #32
 800b382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	330c      	adds	r3, #12
 800b392:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b396:	e853 3f00 	ldrex	r3, [r3]
 800b39a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b39c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b39e:	f023 0310 	bic.w	r3, r3, #16
 800b3a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	330c      	adds	r3, #12
 800b3ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b3b0:	65ba      	str	r2, [r7, #88]	; 0x58
 800b3b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b3b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3b8:	e841 2300 	strex	r3, r2, [r1]
 800b3bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b3be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d1e3      	bne.n	800b38c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fb fab1 	bl	8006930 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	1ad3      	subs	r3, r2, r3
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f8b6 	bl	800b550 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b3e4:	e099      	b.n	800b51a <HAL_UART_IRQHandler+0x50e>
 800b3e6:	bf00      	nop
 800b3e8:	0800ba27 	.word	0x0800ba27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b400:	b29b      	uxth	r3, r3
 800b402:	2b00      	cmp	r3, #0
 800b404:	f000 808b 	beq.w	800b51e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f000 8086 	beq.w	800b51e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	330c      	adds	r3, #12
 800b418:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41c:	e853 3f00 	ldrex	r3, [r3]
 800b420:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b428:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	330c      	adds	r3, #12
 800b432:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b436:	647a      	str	r2, [r7, #68]	; 0x44
 800b438:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b43c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b43e:	e841 2300 	strex	r3, r2, [r1]
 800b442:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b446:	2b00      	cmp	r3, #0
 800b448:	d1e3      	bne.n	800b412 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3314      	adds	r3, #20
 800b450:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b454:	e853 3f00 	ldrex	r3, [r3]
 800b458:	623b      	str	r3, [r7, #32]
   return(result);
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	f023 0301 	bic.w	r3, r3, #1
 800b460:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	3314      	adds	r3, #20
 800b46a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b46e:	633a      	str	r2, [r7, #48]	; 0x30
 800b470:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b476:	e841 2300 	strex	r3, r2, [r1]
 800b47a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1e3      	bne.n	800b44a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2220      	movs	r2, #32
 800b486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	330c      	adds	r3, #12
 800b496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	e853 3f00 	ldrex	r3, [r3]
 800b49e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f023 0310 	bic.w	r3, r3, #16
 800b4a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	330c      	adds	r3, #12
 800b4b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b4b4:	61fa      	str	r2, [r7, #28]
 800b4b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b8:	69b9      	ldr	r1, [r7, #24]
 800b4ba:	69fa      	ldr	r2, [r7, #28]
 800b4bc:	e841 2300 	strex	r3, r2, [r1]
 800b4c0:	617b      	str	r3, [r7, #20]
   return(result);
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1e3      	bne.n	800b490 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b4c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f83e 	bl	800b550 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b4d4:	e023      	b.n	800b51e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d009      	beq.n	800b4f6 <HAL_UART_IRQHandler+0x4ea>
 800b4e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d003      	beq.n	800b4f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 faad 	bl	800ba4e <UART_Transmit_IT>
    return;
 800b4f4:	e014      	b.n	800b520 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b4f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00e      	beq.n	800b520 <HAL_UART_IRQHandler+0x514>
 800b502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d008      	beq.n	800b520 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 faed 	bl	800baee <UART_EndTransmit_IT>
    return;
 800b514:	e004      	b.n	800b520 <HAL_UART_IRQHandler+0x514>
    return;
 800b516:	bf00      	nop
 800b518:	e002      	b.n	800b520 <HAL_UART_IRQHandler+0x514>
      return;
 800b51a:	bf00      	nop
 800b51c:	e000      	b.n	800b520 <HAL_UART_IRQHandler+0x514>
      return;
 800b51e:	bf00      	nop
  }
}
 800b520:	37e8      	adds	r7, #232	; 0xe8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop

0800b528 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b530:	bf00      	nop
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b544:	bf00      	nop
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	460b      	mov	r3, r1
 800b55a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b55c:	bf00      	nop
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b09c      	sub	sp, #112	; 0x70
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b574:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b580:	2b00      	cmp	r3, #0
 800b582:	d172      	bne.n	800b66a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b586:	2200      	movs	r2, #0
 800b588:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b58a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	330c      	adds	r3, #12
 800b590:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b594:	e853 3f00 	ldrex	r3, [r3]
 800b598:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b59a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b59c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	330c      	adds	r3, #12
 800b5a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5aa:	65ba      	str	r2, [r7, #88]	; 0x58
 800b5ac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5b2:	e841 2300 	strex	r3, r2, [r1]
 800b5b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b5b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1e5      	bne.n	800b58a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	3314      	adds	r3, #20
 800b5c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c8:	e853 3f00 	ldrex	r3, [r3]
 800b5cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d0:	f023 0301 	bic.w	r3, r3, #1
 800b5d4:	667b      	str	r3, [r7, #100]	; 0x64
 800b5d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	3314      	adds	r3, #20
 800b5dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b5de:	647a      	str	r2, [r7, #68]	; 0x44
 800b5e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b5e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5e6:	e841 2300 	strex	r3, r2, [r1]
 800b5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1e5      	bne.n	800b5be <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	3314      	adds	r3, #20
 800b5f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	e853 3f00 	ldrex	r3, [r3]
 800b600:	623b      	str	r3, [r7, #32]
   return(result);
 800b602:	6a3b      	ldr	r3, [r7, #32]
 800b604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b608:	663b      	str	r3, [r7, #96]	; 0x60
 800b60a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	3314      	adds	r3, #20
 800b610:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b612:	633a      	str	r2, [r7, #48]	; 0x30
 800b614:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b61a:	e841 2300 	strex	r3, r2, [r1]
 800b61e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1e5      	bne.n	800b5f2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b628:	2220      	movs	r2, #32
 800b62a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b62e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b632:	2b01      	cmp	r3, #1
 800b634:	d119      	bne.n	800b66a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	330c      	adds	r3, #12
 800b63c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	e853 3f00 	ldrex	r3, [r3]
 800b644:	60fb      	str	r3, [r7, #12]
   return(result);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f023 0310 	bic.w	r3, r3, #16
 800b64c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b64e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	330c      	adds	r3, #12
 800b654:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b656:	61fa      	str	r2, [r7, #28]
 800b658:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b65a:	69b9      	ldr	r1, [r7, #24]
 800b65c:	69fa      	ldr	r2, [r7, #28]
 800b65e:	e841 2300 	strex	r3, r2, [r1]
 800b662:	617b      	str	r3, [r7, #20]
   return(result);
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1e5      	bne.n	800b636 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b66a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d106      	bne.n	800b680 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b674:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b676:	4619      	mov	r1, r3
 800b678:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b67a:	f7ff ff69 	bl	800b550 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b67e:	e002      	b.n	800b686 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b680:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b682:	f7f6 ff55 	bl	8002530 <HAL_UART_RxCpltCallback>
}
 800b686:	bf00      	nop
 800b688:	3770      	adds	r7, #112	; 0x70
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b69a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d108      	bne.n	800b6b6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b6a8:	085b      	lsrs	r3, r3, #1
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f7ff ff4e 	bl	800b550 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6b4:	e002      	b.n	800b6bc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f7ff ff36 	bl	800b528 <HAL_UART_RxHalfCpltCallback>
}
 800b6bc:	bf00      	nop
 800b6be:	3710      	adds	r7, #16
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	695b      	ldr	r3, [r3, #20]
 800b6dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e0:	2b80      	cmp	r3, #128	; 0x80
 800b6e2:	bf0c      	ite	eq
 800b6e4:	2301      	moveq	r3, #1
 800b6e6:	2300      	movne	r3, #0
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	2b21      	cmp	r3, #33	; 0x21
 800b6f6:	d108      	bne.n	800b70a <UART_DMAError+0x46>
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d005      	beq.n	800b70a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	2200      	movs	r2, #0
 800b702:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b704:	68b8      	ldr	r0, [r7, #8]
 800b706:	f000 f903 	bl	800b910 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	695b      	ldr	r3, [r3, #20]
 800b710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b714:	2b40      	cmp	r3, #64	; 0x40
 800b716:	bf0c      	ite	eq
 800b718:	2301      	moveq	r3, #1
 800b71a:	2300      	movne	r3, #0
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b726:	b2db      	uxtb	r3, r3
 800b728:	2b22      	cmp	r3, #34	; 0x22
 800b72a:	d108      	bne.n	800b73e <UART_DMAError+0x7a>
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d005      	beq.n	800b73e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2200      	movs	r2, #0
 800b736:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b738:	68b8      	ldr	r0, [r7, #8]
 800b73a:	f000 f911 	bl	800b960 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b742:	f043 0210 	orr.w	r2, r3, #16
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b74a:	68b8      	ldr	r0, [r7, #8]
 800b74c:	f7ff fef6 	bl	800b53c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b750:	bf00      	nop
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	4613      	mov	r3, r2
 800b764:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	88fa      	ldrh	r2, [r7, #6]
 800b770:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	88fa      	ldrh	r2, [r7, #6]
 800b776:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2222      	movs	r2, #34	; 0x22
 800b782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d007      	beq.n	800b7a6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	68da      	ldr	r2, [r3, #12]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	695a      	ldr	r2, [r3, #20]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f042 0201 	orr.w	r2, r2, #1
 800b7b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	68da      	ldr	r2, [r3, #12]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f042 0220 	orr.w	r2, r2, #32
 800b7c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3714      	adds	r7, #20
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b098      	sub	sp, #96	; 0x60
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	4613      	mov	r3, r2
 800b7e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	88fa      	ldrh	r2, [r7, #6]
 800b7ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2222      	movs	r2, #34	; 0x22
 800b7f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b800:	4a40      	ldr	r2, [pc, #256]	; (800b904 <UART_Start_Receive_DMA+0x130>)
 800b802:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b808:	4a3f      	ldr	r2, [pc, #252]	; (800b908 <UART_Start_Receive_DMA+0x134>)
 800b80a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b810:	4a3e      	ldr	r2, [pc, #248]	; (800b90c <UART_Start_Receive_DMA+0x138>)
 800b812:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b818:	2200      	movs	r2, #0
 800b81a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b81c:	f107 0308 	add.w	r3, r7, #8
 800b820:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3304      	adds	r3, #4
 800b82c:	4619      	mov	r1, r3
 800b82e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	88fb      	ldrh	r3, [r7, #6]
 800b834:	f7fb f824 	bl	8006880 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b838:	2300      	movs	r3, #0
 800b83a:	613b      	str	r3, [r7, #16]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	613b      	str	r3, [r7, #16]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	613b      	str	r3, [r7, #16]
 800b84c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d019      	beq.n	800b892 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	330c      	adds	r3, #12
 800b864:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b868:	e853 3f00 	ldrex	r3, [r3]
 800b86c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b874:	65bb      	str	r3, [r7, #88]	; 0x58
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	330c      	adds	r3, #12
 800b87c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b87e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b880:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b882:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b884:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b886:	e841 2300 	strex	r3, r2, [r1]
 800b88a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b88c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1e5      	bne.n	800b85e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3314      	adds	r3, #20
 800b898:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89c:	e853 3f00 	ldrex	r3, [r3]
 800b8a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a4:	f043 0301 	orr.w	r3, r3, #1
 800b8a8:	657b      	str	r3, [r7, #84]	; 0x54
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3314      	adds	r3, #20
 800b8b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b8b2:	63ba      	str	r2, [r7, #56]	; 0x38
 800b8b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8ba:	e841 2300 	strex	r3, r2, [r1]
 800b8be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1e5      	bne.n	800b892 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	3314      	adds	r3, #20
 800b8cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	e853 3f00 	ldrex	r3, [r3]
 800b8d4:	617b      	str	r3, [r7, #20]
   return(result);
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8dc:	653b      	str	r3, [r7, #80]	; 0x50
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	3314      	adds	r3, #20
 800b8e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8e6:	627a      	str	r2, [r7, #36]	; 0x24
 800b8e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ea:	6a39      	ldr	r1, [r7, #32]
 800b8ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ee:	e841 2300 	strex	r3, r2, [r1]
 800b8f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1e5      	bne.n	800b8c6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3760      	adds	r7, #96	; 0x60
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	0800b569 	.word	0x0800b569
 800b908:	0800b68f 	.word	0x0800b68f
 800b90c:	0800b6c5 	.word	0x0800b6c5

0800b910 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b910:	b480      	push	{r7}
 800b912:	b089      	sub	sp, #36	; 0x24
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	330c      	adds	r3, #12
 800b91e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	e853 3f00 	ldrex	r3, [r3]
 800b926:	60bb      	str	r3, [r7, #8]
   return(result);
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b92e:	61fb      	str	r3, [r7, #28]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	330c      	adds	r3, #12
 800b936:	69fa      	ldr	r2, [r7, #28]
 800b938:	61ba      	str	r2, [r7, #24]
 800b93a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93c:	6979      	ldr	r1, [r7, #20]
 800b93e:	69ba      	ldr	r2, [r7, #24]
 800b940:	e841 2300 	strex	r3, r2, [r1]
 800b944:	613b      	str	r3, [r7, #16]
   return(result);
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1e5      	bne.n	800b918 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2220      	movs	r2, #32
 800b950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b954:	bf00      	nop
 800b956:	3724      	adds	r7, #36	; 0x24
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b960:	b480      	push	{r7}
 800b962:	b095      	sub	sp, #84	; 0x54
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	330c      	adds	r3, #12
 800b96e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b972:	e853 3f00 	ldrex	r3, [r3]
 800b976:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b97e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	330c      	adds	r3, #12
 800b986:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b988:	643a      	str	r2, [r7, #64]	; 0x40
 800b98a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b98e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b990:	e841 2300 	strex	r3, r2, [r1]
 800b994:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d1e5      	bne.n	800b968 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	3314      	adds	r3, #20
 800b9a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	e853 3f00 	ldrex	r3, [r3]
 800b9aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	f023 0301 	bic.w	r3, r3, #1
 800b9b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	3314      	adds	r3, #20
 800b9ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9c4:	e841 2300 	strex	r3, r2, [r1]
 800b9c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d1e5      	bne.n	800b99c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d119      	bne.n	800ba0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	330c      	adds	r3, #12
 800b9de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	e853 3f00 	ldrex	r3, [r3]
 800b9e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	f023 0310 	bic.w	r3, r3, #16
 800b9ee:	647b      	str	r3, [r7, #68]	; 0x44
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	330c      	adds	r3, #12
 800b9f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9f8:	61ba      	str	r2, [r7, #24]
 800b9fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9fc:	6979      	ldr	r1, [r7, #20]
 800b9fe:	69ba      	ldr	r2, [r7, #24]
 800ba00:	e841 2300 	strex	r3, r2, [r1]
 800ba04:	613b      	str	r3, [r7, #16]
   return(result);
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d1e5      	bne.n	800b9d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2220      	movs	r2, #32
 800ba10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ba1a:	bf00      	nop
 800ba1c:	3754      	adds	r7, #84	; 0x54
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr

0800ba26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b084      	sub	sp, #16
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2200      	movs	r2, #0
 800ba38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f7ff fd7b 	bl	800b53c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba46:	bf00      	nop
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b085      	sub	sp, #20
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	2b21      	cmp	r3, #33	; 0x21
 800ba60:	d13e      	bne.n	800bae0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba6a:	d114      	bne.n	800ba96 <UART_Transmit_IT+0x48>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	691b      	ldr	r3, [r3, #16]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d110      	bne.n	800ba96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a1b      	ldr	r3, [r3, #32]
 800ba78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	881b      	ldrh	r3, [r3, #0]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6a1b      	ldr	r3, [r3, #32]
 800ba8e:	1c9a      	adds	r2, r3, #2
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	621a      	str	r2, [r3, #32]
 800ba94:	e008      	b.n	800baa8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a1b      	ldr	r3, [r3, #32]
 800ba9a:	1c59      	adds	r1, r3, #1
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	6211      	str	r1, [r2, #32]
 800baa0:	781a      	ldrb	r2, [r3, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800baac:	b29b      	uxth	r3, r3
 800baae:	3b01      	subs	r3, #1
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	4619      	mov	r1, r3
 800bab6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10f      	bne.n	800badc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	68da      	ldr	r2, [r3, #12]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800baca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	68da      	ldr	r2, [r3, #12]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bada:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800badc:	2300      	movs	r3, #0
 800bade:	e000      	b.n	800bae2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bae0:	2302      	movs	r3, #2
  }
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3714      	adds	r7, #20
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b082      	sub	sp, #8
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68da      	ldr	r2, [r3, #12]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2220      	movs	r2, #32
 800bb0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7f6 fcf8 	bl	8002504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3708      	adds	r7, #8
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b08c      	sub	sp, #48	; 0x30
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b22      	cmp	r3, #34	; 0x22
 800bb30:	f040 80ab 	bne.w	800bc8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb3c:	d117      	bne.n	800bb6e <UART_Receive_IT+0x50>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d113      	bne.n	800bb6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bb46:	2300      	movs	r3, #0
 800bb48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb66:	1c9a      	adds	r2, r3, #2
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	629a      	str	r2, [r3, #40]	; 0x28
 800bb6c:	e026      	b.n	800bbbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bb74:	2300      	movs	r3, #0
 800bb76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	689b      	ldr	r3, [r3, #8]
 800bb7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb80:	d007      	beq.n	800bb92 <UART_Receive_IT+0x74>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d10a      	bne.n	800bba0 <UART_Receive_IT+0x82>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d106      	bne.n	800bba0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9c:	701a      	strb	r2, [r3, #0]
 800bb9e:	e008      	b.n	800bbb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb6:	1c5a      	adds	r2, r3, #1
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	3b01      	subs	r3, #1
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	4619      	mov	r1, r3
 800bbca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d15a      	bne.n	800bc86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	68da      	ldr	r2, [r3, #12]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f022 0220 	bic.w	r2, r2, #32
 800bbde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68da      	ldr	r2, [r3, #12]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bbee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	695a      	ldr	r2, [r3, #20]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f022 0201 	bic.w	r2, r2, #1
 800bbfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2220      	movs	r2, #32
 800bc04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d135      	bne.n	800bc7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	330c      	adds	r3, #12
 800bc1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	e853 3f00 	ldrex	r3, [r3]
 800bc24:	613b      	str	r3, [r7, #16]
   return(result);
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	f023 0310 	bic.w	r3, r3, #16
 800bc2c:	627b      	str	r3, [r7, #36]	; 0x24
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	330c      	adds	r3, #12
 800bc34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc36:	623a      	str	r2, [r7, #32]
 800bc38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3a:	69f9      	ldr	r1, [r7, #28]
 800bc3c:	6a3a      	ldr	r2, [r7, #32]
 800bc3e:	e841 2300 	strex	r3, r2, [r1]
 800bc42:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d1e5      	bne.n	800bc16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 0310 	and.w	r3, r3, #16
 800bc54:	2b10      	cmp	r3, #16
 800bc56:	d10a      	bne.n	800bc6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc58:	2300      	movs	r3, #0
 800bc5a:	60fb      	str	r3, [r7, #12]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	60fb      	str	r3, [r7, #12]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc72:	4619      	mov	r1, r3
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f7ff fc6b 	bl	800b550 <HAL_UARTEx_RxEventCallback>
 800bc7a:	e002      	b.n	800bc82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7f6 fc57 	bl	8002530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	e002      	b.n	800bc8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	e000      	b.n	800bc8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bc8a:	2302      	movs	r3, #2
  }
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3730      	adds	r7, #48	; 0x30
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc98:	b0c0      	sub	sp, #256	; 0x100
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bcac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcb0:	68d9      	ldr	r1, [r3, #12]
 800bcb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	ea40 0301 	orr.w	r3, r0, r1
 800bcbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bcbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcc2:	689a      	ldr	r2, [r3, #8]
 800bcc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	431a      	orrs	r2, r3
 800bccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd0:	695b      	ldr	r3, [r3, #20]
 800bcd2:	431a      	orrs	r2, r3
 800bcd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd8:	69db      	ldr	r3, [r3, #28]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bcec:	f021 010c 	bic.w	r1, r1, #12
 800bcf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bcfa:	430b      	orrs	r3, r1
 800bcfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bcfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	695b      	ldr	r3, [r3, #20]
 800bd06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bd0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd0e:	6999      	ldr	r1, [r3, #24]
 800bd10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	ea40 0301 	orr.w	r3, r0, r1
 800bd1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	4b8f      	ldr	r3, [pc, #572]	; (800bf60 <UART_SetConfig+0x2cc>)
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d005      	beq.n	800bd34 <UART_SetConfig+0xa0>
 800bd28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	4b8d      	ldr	r3, [pc, #564]	; (800bf64 <UART_SetConfig+0x2d0>)
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d104      	bne.n	800bd3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd34:	f7fd f852 	bl	8008ddc <HAL_RCC_GetPCLK2Freq>
 800bd38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bd3c:	e003      	b.n	800bd46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd3e:	f7fd f839 	bl	8008db4 <HAL_RCC_GetPCLK1Freq>
 800bd42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd4a:	69db      	ldr	r3, [r3, #28]
 800bd4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd50:	f040 810c 	bne.w	800bf6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bd54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bd62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bd66:	4622      	mov	r2, r4
 800bd68:	462b      	mov	r3, r5
 800bd6a:	1891      	adds	r1, r2, r2
 800bd6c:	65b9      	str	r1, [r7, #88]	; 0x58
 800bd6e:	415b      	adcs	r3, r3
 800bd70:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bd76:	4621      	mov	r1, r4
 800bd78:	eb12 0801 	adds.w	r8, r2, r1
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	eb43 0901 	adc.w	r9, r3, r1
 800bd82:	f04f 0200 	mov.w	r2, #0
 800bd86:	f04f 0300 	mov.w	r3, #0
 800bd8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bd8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bd92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bd96:	4690      	mov	r8, r2
 800bd98:	4699      	mov	r9, r3
 800bd9a:	4623      	mov	r3, r4
 800bd9c:	eb18 0303 	adds.w	r3, r8, r3
 800bda0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bda4:	462b      	mov	r3, r5
 800bda6:	eb49 0303 	adc.w	r3, r9, r3
 800bdaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bdae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bdba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bdbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	18db      	adds	r3, r3, r3
 800bdc6:	653b      	str	r3, [r7, #80]	; 0x50
 800bdc8:	4613      	mov	r3, r2
 800bdca:	eb42 0303 	adc.w	r3, r2, r3
 800bdce:	657b      	str	r3, [r7, #84]	; 0x54
 800bdd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bdd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bdd8:	f7f4 ff56 	bl	8000c88 <__aeabi_uldivmod>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	4b61      	ldr	r3, [pc, #388]	; (800bf68 <UART_SetConfig+0x2d4>)
 800bde2:	fba3 2302 	umull	r2, r3, r3, r2
 800bde6:	095b      	lsrs	r3, r3, #5
 800bde8:	011c      	lsls	r4, r3, #4
 800bdea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bdf4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bdf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bdfc:	4642      	mov	r2, r8
 800bdfe:	464b      	mov	r3, r9
 800be00:	1891      	adds	r1, r2, r2
 800be02:	64b9      	str	r1, [r7, #72]	; 0x48
 800be04:	415b      	adcs	r3, r3
 800be06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800be0c:	4641      	mov	r1, r8
 800be0e:	eb12 0a01 	adds.w	sl, r2, r1
 800be12:	4649      	mov	r1, r9
 800be14:	eb43 0b01 	adc.w	fp, r3, r1
 800be18:	f04f 0200 	mov.w	r2, #0
 800be1c:	f04f 0300 	mov.w	r3, #0
 800be20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800be24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800be28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be2c:	4692      	mov	sl, r2
 800be2e:	469b      	mov	fp, r3
 800be30:	4643      	mov	r3, r8
 800be32:	eb1a 0303 	adds.w	r3, sl, r3
 800be36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be3a:	464b      	mov	r3, r9
 800be3c:	eb4b 0303 	adc.w	r3, fp, r3
 800be40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800be44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800be54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800be58:	460b      	mov	r3, r1
 800be5a:	18db      	adds	r3, r3, r3
 800be5c:	643b      	str	r3, [r7, #64]	; 0x40
 800be5e:	4613      	mov	r3, r2
 800be60:	eb42 0303 	adc.w	r3, r2, r3
 800be64:	647b      	str	r3, [r7, #68]	; 0x44
 800be66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800be6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800be6e:	f7f4 ff0b 	bl	8000c88 <__aeabi_uldivmod>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	4611      	mov	r1, r2
 800be78:	4b3b      	ldr	r3, [pc, #236]	; (800bf68 <UART_SetConfig+0x2d4>)
 800be7a:	fba3 2301 	umull	r2, r3, r3, r1
 800be7e:	095b      	lsrs	r3, r3, #5
 800be80:	2264      	movs	r2, #100	; 0x64
 800be82:	fb02 f303 	mul.w	r3, r2, r3
 800be86:	1acb      	subs	r3, r1, r3
 800be88:	00db      	lsls	r3, r3, #3
 800be8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800be8e:	4b36      	ldr	r3, [pc, #216]	; (800bf68 <UART_SetConfig+0x2d4>)
 800be90:	fba3 2302 	umull	r2, r3, r3, r2
 800be94:	095b      	lsrs	r3, r3, #5
 800be96:	005b      	lsls	r3, r3, #1
 800be98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800be9c:	441c      	add	r4, r3
 800be9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bea2:	2200      	movs	r2, #0
 800bea4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bea8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800beac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800beb0:	4642      	mov	r2, r8
 800beb2:	464b      	mov	r3, r9
 800beb4:	1891      	adds	r1, r2, r2
 800beb6:	63b9      	str	r1, [r7, #56]	; 0x38
 800beb8:	415b      	adcs	r3, r3
 800beba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bebc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bec0:	4641      	mov	r1, r8
 800bec2:	1851      	adds	r1, r2, r1
 800bec4:	6339      	str	r1, [r7, #48]	; 0x30
 800bec6:	4649      	mov	r1, r9
 800bec8:	414b      	adcs	r3, r1
 800beca:	637b      	str	r3, [r7, #52]	; 0x34
 800becc:	f04f 0200 	mov.w	r2, #0
 800bed0:	f04f 0300 	mov.w	r3, #0
 800bed4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bed8:	4659      	mov	r1, fp
 800beda:	00cb      	lsls	r3, r1, #3
 800bedc:	4651      	mov	r1, sl
 800bede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bee2:	4651      	mov	r1, sl
 800bee4:	00ca      	lsls	r2, r1, #3
 800bee6:	4610      	mov	r0, r2
 800bee8:	4619      	mov	r1, r3
 800beea:	4603      	mov	r3, r0
 800beec:	4642      	mov	r2, r8
 800beee:	189b      	adds	r3, r3, r2
 800bef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bef4:	464b      	mov	r3, r9
 800bef6:	460a      	mov	r2, r1
 800bef8:	eb42 0303 	adc.w	r3, r2, r3
 800befc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bf10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bf14:	460b      	mov	r3, r1
 800bf16:	18db      	adds	r3, r3, r3
 800bf18:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	eb42 0303 	adc.w	r3, r2, r3
 800bf20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bf26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bf2a:	f7f4 fead 	bl	8000c88 <__aeabi_uldivmod>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	460b      	mov	r3, r1
 800bf32:	4b0d      	ldr	r3, [pc, #52]	; (800bf68 <UART_SetConfig+0x2d4>)
 800bf34:	fba3 1302 	umull	r1, r3, r3, r2
 800bf38:	095b      	lsrs	r3, r3, #5
 800bf3a:	2164      	movs	r1, #100	; 0x64
 800bf3c:	fb01 f303 	mul.w	r3, r1, r3
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	00db      	lsls	r3, r3, #3
 800bf44:	3332      	adds	r3, #50	; 0x32
 800bf46:	4a08      	ldr	r2, [pc, #32]	; (800bf68 <UART_SetConfig+0x2d4>)
 800bf48:	fba2 2303 	umull	r2, r3, r2, r3
 800bf4c:	095b      	lsrs	r3, r3, #5
 800bf4e:	f003 0207 	and.w	r2, r3, #7
 800bf52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4422      	add	r2, r4
 800bf5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bf5c:	e105      	b.n	800c16a <UART_SetConfig+0x4d6>
 800bf5e:	bf00      	nop
 800bf60:	40011000 	.word	0x40011000
 800bf64:	40011400 	.word	0x40011400
 800bf68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf70:	2200      	movs	r2, #0
 800bf72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bf76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bf7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bf7e:	4642      	mov	r2, r8
 800bf80:	464b      	mov	r3, r9
 800bf82:	1891      	adds	r1, r2, r2
 800bf84:	6239      	str	r1, [r7, #32]
 800bf86:	415b      	adcs	r3, r3
 800bf88:	627b      	str	r3, [r7, #36]	; 0x24
 800bf8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bf8e:	4641      	mov	r1, r8
 800bf90:	1854      	adds	r4, r2, r1
 800bf92:	4649      	mov	r1, r9
 800bf94:	eb43 0501 	adc.w	r5, r3, r1
 800bf98:	f04f 0200 	mov.w	r2, #0
 800bf9c:	f04f 0300 	mov.w	r3, #0
 800bfa0:	00eb      	lsls	r3, r5, #3
 800bfa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bfa6:	00e2      	lsls	r2, r4, #3
 800bfa8:	4614      	mov	r4, r2
 800bfaa:	461d      	mov	r5, r3
 800bfac:	4643      	mov	r3, r8
 800bfae:	18e3      	adds	r3, r4, r3
 800bfb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bfb4:	464b      	mov	r3, r9
 800bfb6:	eb45 0303 	adc.w	r3, r5, r3
 800bfba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bfbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bfca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bfce:	f04f 0200 	mov.w	r2, #0
 800bfd2:	f04f 0300 	mov.w	r3, #0
 800bfd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bfda:	4629      	mov	r1, r5
 800bfdc:	008b      	lsls	r3, r1, #2
 800bfde:	4621      	mov	r1, r4
 800bfe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfe4:	4621      	mov	r1, r4
 800bfe6:	008a      	lsls	r2, r1, #2
 800bfe8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bfec:	f7f4 fe4c 	bl	8000c88 <__aeabi_uldivmod>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4b60      	ldr	r3, [pc, #384]	; (800c178 <UART_SetConfig+0x4e4>)
 800bff6:	fba3 2302 	umull	r2, r3, r3, r2
 800bffa:	095b      	lsrs	r3, r3, #5
 800bffc:	011c      	lsls	r4, r3, #4
 800bffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c002:	2200      	movs	r2, #0
 800c004:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c008:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c00c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c010:	4642      	mov	r2, r8
 800c012:	464b      	mov	r3, r9
 800c014:	1891      	adds	r1, r2, r2
 800c016:	61b9      	str	r1, [r7, #24]
 800c018:	415b      	adcs	r3, r3
 800c01a:	61fb      	str	r3, [r7, #28]
 800c01c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c020:	4641      	mov	r1, r8
 800c022:	1851      	adds	r1, r2, r1
 800c024:	6139      	str	r1, [r7, #16]
 800c026:	4649      	mov	r1, r9
 800c028:	414b      	adcs	r3, r1
 800c02a:	617b      	str	r3, [r7, #20]
 800c02c:	f04f 0200 	mov.w	r2, #0
 800c030:	f04f 0300 	mov.w	r3, #0
 800c034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c038:	4659      	mov	r1, fp
 800c03a:	00cb      	lsls	r3, r1, #3
 800c03c:	4651      	mov	r1, sl
 800c03e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c042:	4651      	mov	r1, sl
 800c044:	00ca      	lsls	r2, r1, #3
 800c046:	4610      	mov	r0, r2
 800c048:	4619      	mov	r1, r3
 800c04a:	4603      	mov	r3, r0
 800c04c:	4642      	mov	r2, r8
 800c04e:	189b      	adds	r3, r3, r2
 800c050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c054:	464b      	mov	r3, r9
 800c056:	460a      	mov	r2, r1
 800c058:	eb42 0303 	adc.w	r3, r2, r3
 800c05c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	67bb      	str	r3, [r7, #120]	; 0x78
 800c06a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c06c:	f04f 0200 	mov.w	r2, #0
 800c070:	f04f 0300 	mov.w	r3, #0
 800c074:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c078:	4649      	mov	r1, r9
 800c07a:	008b      	lsls	r3, r1, #2
 800c07c:	4641      	mov	r1, r8
 800c07e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c082:	4641      	mov	r1, r8
 800c084:	008a      	lsls	r2, r1, #2
 800c086:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c08a:	f7f4 fdfd 	bl	8000c88 <__aeabi_uldivmod>
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	4b39      	ldr	r3, [pc, #228]	; (800c178 <UART_SetConfig+0x4e4>)
 800c094:	fba3 1302 	umull	r1, r3, r3, r2
 800c098:	095b      	lsrs	r3, r3, #5
 800c09a:	2164      	movs	r1, #100	; 0x64
 800c09c:	fb01 f303 	mul.w	r3, r1, r3
 800c0a0:	1ad3      	subs	r3, r2, r3
 800c0a2:	011b      	lsls	r3, r3, #4
 800c0a4:	3332      	adds	r3, #50	; 0x32
 800c0a6:	4a34      	ldr	r2, [pc, #208]	; (800c178 <UART_SetConfig+0x4e4>)
 800c0a8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0ac:	095b      	lsrs	r3, r3, #5
 800c0ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0b2:	441c      	add	r4, r3
 800c0b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	673b      	str	r3, [r7, #112]	; 0x70
 800c0bc:	677a      	str	r2, [r7, #116]	; 0x74
 800c0be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c0c2:	4642      	mov	r2, r8
 800c0c4:	464b      	mov	r3, r9
 800c0c6:	1891      	adds	r1, r2, r2
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	415b      	adcs	r3, r3
 800c0cc:	60fb      	str	r3, [r7, #12]
 800c0ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c0d2:	4641      	mov	r1, r8
 800c0d4:	1851      	adds	r1, r2, r1
 800c0d6:	6039      	str	r1, [r7, #0]
 800c0d8:	4649      	mov	r1, r9
 800c0da:	414b      	adcs	r3, r1
 800c0dc:	607b      	str	r3, [r7, #4]
 800c0de:	f04f 0200 	mov.w	r2, #0
 800c0e2:	f04f 0300 	mov.w	r3, #0
 800c0e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c0ea:	4659      	mov	r1, fp
 800c0ec:	00cb      	lsls	r3, r1, #3
 800c0ee:	4651      	mov	r1, sl
 800c0f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c0f4:	4651      	mov	r1, sl
 800c0f6:	00ca      	lsls	r2, r1, #3
 800c0f8:	4610      	mov	r0, r2
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	4642      	mov	r2, r8
 800c100:	189b      	adds	r3, r3, r2
 800c102:	66bb      	str	r3, [r7, #104]	; 0x68
 800c104:	464b      	mov	r3, r9
 800c106:	460a      	mov	r2, r1
 800c108:	eb42 0303 	adc.w	r3, r2, r3
 800c10c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c10e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	663b      	str	r3, [r7, #96]	; 0x60
 800c118:	667a      	str	r2, [r7, #100]	; 0x64
 800c11a:	f04f 0200 	mov.w	r2, #0
 800c11e:	f04f 0300 	mov.w	r3, #0
 800c122:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c126:	4649      	mov	r1, r9
 800c128:	008b      	lsls	r3, r1, #2
 800c12a:	4641      	mov	r1, r8
 800c12c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c130:	4641      	mov	r1, r8
 800c132:	008a      	lsls	r2, r1, #2
 800c134:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c138:	f7f4 fda6 	bl	8000c88 <__aeabi_uldivmod>
 800c13c:	4602      	mov	r2, r0
 800c13e:	460b      	mov	r3, r1
 800c140:	4b0d      	ldr	r3, [pc, #52]	; (800c178 <UART_SetConfig+0x4e4>)
 800c142:	fba3 1302 	umull	r1, r3, r3, r2
 800c146:	095b      	lsrs	r3, r3, #5
 800c148:	2164      	movs	r1, #100	; 0x64
 800c14a:	fb01 f303 	mul.w	r3, r1, r3
 800c14e:	1ad3      	subs	r3, r2, r3
 800c150:	011b      	lsls	r3, r3, #4
 800c152:	3332      	adds	r3, #50	; 0x32
 800c154:	4a08      	ldr	r2, [pc, #32]	; (800c178 <UART_SetConfig+0x4e4>)
 800c156:	fba2 2303 	umull	r2, r3, r2, r3
 800c15a:	095b      	lsrs	r3, r3, #5
 800c15c:	f003 020f 	and.w	r2, r3, #15
 800c160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4422      	add	r2, r4
 800c168:	609a      	str	r2, [r3, #8]
}
 800c16a:	bf00      	nop
 800c16c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c170:	46bd      	mov	sp, r7
 800c172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c176:	bf00      	nop
 800c178:	51eb851f 	.word	0x51eb851f

0800c17c <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800c186:	edd7 7a01 	vldr	s15, [r7, #4]
 800c18a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800c1a0 <FusionDegreesToRadians+0x24>
 800c18e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800c192:	eeb0 0a67 	vmov.f32	s0, s15
 800c196:	370c      	adds	r7, #12
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr
 800c1a0:	3c8efa35 	.word	0x3c8efa35

0800c1a4 <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	105a      	asrs	r2, r3, #1
 800c1b6:	4b10      	ldr	r3, [pc, #64]	; (800c1f8 <FusionFastInverseSqrt+0x54>)
 800c1b8:	1a9b      	subs	r3, r3, r2
 800c1ba:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 800c1bc:	ed97 7a03 	vldr	s14, [r7, #12]
 800c1c0:	edd7 7a01 	vldr	s15, [r7, #4]
 800c1c4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800c1fc <FusionFastInverseSqrt+0x58>
 800c1c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c1cc:	edd7 7a03 	vldr	s15, [r7, #12]
 800c1d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c1d4:	edd7 7a03 	vldr	s15, [r7, #12]
 800c1d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1dc:	eddf 6a08 	vldr	s13, [pc, #32]	; 800c200 <FusionFastInverseSqrt+0x5c>
 800c1e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c1e4:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800c1e8:	eeb0 0a67 	vmov.f32	s0, s15
 800c1ec:	3714      	adds	r7, #20
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	5f1f1412 	.word	0x5f1f1412
 800c1fc:	3f36d312 	.word	0x3f36d312
 800c200:	3fd851ff 	.word	0x3fd851ff

0800c204 <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	eef0 6a40 	vmov.f32	s13, s0
 800c20e:	eeb0 7a60 	vmov.f32	s14, s1
 800c212:	eef0 7a41 	vmov.f32	s15, s2
 800c216:	edc7 6a01 	vstr	s13, [r7, #4]
 800c21a:	ed87 7a02 	vstr	s14, [r7, #8]
 800c21e:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800c222:	edd7 7a01 	vldr	s15, [r7, #4]
 800c226:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c22e:	d10f      	bne.n	800c250 <FusionVectorIsZero+0x4c>
 800c230:	edd7 7a02 	vldr	s15, [r7, #8]
 800c234:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c23c:	d108      	bne.n	800c250 <FusionVectorIsZero+0x4c>
 800c23e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c242:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c24a:	d101      	bne.n	800c250 <FusionVectorIsZero+0x4c>
 800c24c:	2301      	movs	r3, #1
 800c24e:	e000      	b.n	800c252 <FusionVectorIsZero+0x4e>
 800c250:	2300      	movs	r3, #0
 800c252:	f003 0301 	and.w	r3, r3, #1
 800c256:	b2db      	uxtb	r3, r3
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3714      	adds	r7, #20
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800c264:	b480      	push	{r7}
 800c266:	b091      	sub	sp, #68	; 0x44
 800c268:	af00      	add	r7, sp, #0
 800c26a:	eeb0 5a40 	vmov.f32	s10, s0
 800c26e:	eef0 5a60 	vmov.f32	s11, s1
 800c272:	eeb0 6a41 	vmov.f32	s12, s2
 800c276:	eef0 6a61 	vmov.f32	s13, s3
 800c27a:	eeb0 7a42 	vmov.f32	s14, s4
 800c27e:	eef0 7a62 	vmov.f32	s15, s5
 800c282:	ed87 5a07 	vstr	s10, [r7, #28]
 800c286:	edc7 5a08 	vstr	s11, [r7, #32]
 800c28a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800c28e:	edc7 6a04 	vstr	s13, [r7, #16]
 800c292:	ed87 7a05 	vstr	s14, [r7, #20]
 800c296:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 800c29a:	ed97 7a07 	vldr	s14, [r7, #28]
 800c29e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c2a2:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c2a6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800c2aa:	ed97 7a08 	vldr	s14, [r7, #32]
 800c2ae:	edd7 7a05 	vldr	s15, [r7, #20]
 800c2b2:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c2b6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800c2ba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c2be:	edd7 7a06 	vldr	s15, [r7, #24]
 800c2c2:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c2c6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800c2ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c2ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c2d2:	ca07      	ldmia	r2, {r0, r1, r2}
 800c2d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c2d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c2da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2de:	ee06 1a90 	vmov	s13, r1
 800c2e2:	ee07 2a10 	vmov	s14, r2
 800c2e6:	ee07 3a90 	vmov	s15, r3
}
 800c2ea:	eeb0 0a66 	vmov.f32	s0, s13
 800c2ee:	eef0 0a47 	vmov.f32	s1, s14
 800c2f2:	eeb0 1a67 	vmov.f32	s2, s15
 800c2f6:	3744      	adds	r7, #68	; 0x44
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	eef0 6a40 	vmov.f32	s13, s0
 800c30a:	eeb0 7a60 	vmov.f32	s14, s1
 800c30e:	eef0 7a41 	vmov.f32	s15, s2
 800c312:	edc7 6a01 	vstr	s13, [r7, #4]
 800c316:	ed87 7a02 	vstr	s14, [r7, #8]
 800c31a:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800c31e:	ed97 7a01 	vldr	s14, [r7, #4]
 800c322:	edd7 7a02 	vldr	s15, [r7, #8]
 800c326:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c32a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c32e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800c332:	eeb0 0a67 	vmov.f32	s0, s15
 800c336:	3714      	adds	r7, #20
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800c340:	b480      	push	{r7}
 800c342:	b08f      	sub	sp, #60	; 0x3c
 800c344:	af00      	add	r7, sp, #0
 800c346:	eef0 6a40 	vmov.f32	s13, s0
 800c34a:	eeb0 7a60 	vmov.f32	s14, s1
 800c34e:	eef0 7a41 	vmov.f32	s15, s2
 800c352:	edc7 1a04 	vstr	s3, [r7, #16]
 800c356:	edc7 6a05 	vstr	s13, [r7, #20]
 800c35a:	ed87 7a06 	vstr	s14, [r7, #24]
 800c35e:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 800c362:	ed97 7a05 	vldr	s14, [r7, #20]
 800c366:	edd7 7a04 	vldr	s15, [r7, #16]
 800c36a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c36e:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800c372:	ed97 7a06 	vldr	s14, [r7, #24]
 800c376:	edd7 7a04 	vldr	s15, [r7, #16]
 800c37a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c37e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800c382:	ed97 7a07 	vldr	s14, [r7, #28]
 800c386:	edd7 7a04 	vldr	s15, [r7, #16]
 800c38a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c38e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800c392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c396:	f107 0220 	add.w	r2, r7, #32
 800c39a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c39c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c3a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a6:	ee06 1a90 	vmov	s13, r1
 800c3aa:	ee07 2a10 	vmov	s14, r2
 800c3ae:	ee07 3a90 	vmov	s15, r3
}
 800c3b2:	eeb0 0a66 	vmov.f32	s0, s13
 800c3b6:	eef0 0a47 	vmov.f32	s1, s14
 800c3ba:	eeb0 1a67 	vmov.f32	s2, s15
 800c3be:	373c      	adds	r7, #60	; 0x3c
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800c3c8:	b480      	push	{r7}
 800c3ca:	b091      	sub	sp, #68	; 0x44
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	eeb0 5a40 	vmov.f32	s10, s0
 800c3d2:	eef0 5a60 	vmov.f32	s11, s1
 800c3d6:	eeb0 6a41 	vmov.f32	s12, s2
 800c3da:	eef0 6a61 	vmov.f32	s13, s3
 800c3de:	eeb0 7a42 	vmov.f32	s14, s4
 800c3e2:	eef0 7a62 	vmov.f32	s15, s5
 800c3e6:	ed87 5a07 	vstr	s10, [r7, #28]
 800c3ea:	edc7 5a08 	vstr	s11, [r7, #32]
 800c3ee:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800c3f2:	edc7 6a04 	vstr	s13, [r7, #16]
 800c3f6:	ed87 7a05 	vstr	s14, [r7, #20]
 800c3fa:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800c3fe:	ed97 7a07 	vldr	s14, [r7, #28]
 800c402:	edd7 7a04 	vldr	s15, [r7, #16]
 800c406:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c40a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800c40e:	ed97 7a08 	vldr	s14, [r7, #32]
 800c412:	edd7 7a05 	vldr	s15, [r7, #20]
 800c416:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c41a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800c41e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c422:	edd7 7a06 	vldr	s15, [r7, #24]
 800c426:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c42a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800c42e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c432:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c436:	ca07      	ldmia	r2, {r0, r1, r2}
 800c438:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c43c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c43e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c442:	ee06 1a90 	vmov	s13, r1
 800c446:	ee07 2a10 	vmov	s14, r2
 800c44a:	ee07 3a90 	vmov	s15, r3
}
 800c44e:	eeb0 0a66 	vmov.f32	s0, s13
 800c452:	eef0 0a47 	vmov.f32	s1, s14
 800c456:	eeb0 1a67 	vmov.f32	s2, s15
 800c45a:	3744      	adds	r7, #68	; 0x44
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800c464:	b480      	push	{r7}
 800c466:	b091      	sub	sp, #68	; 0x44
 800c468:	af00      	add	r7, sp, #0
 800c46a:	eeb0 5a40 	vmov.f32	s10, s0
 800c46e:	eef0 5a60 	vmov.f32	s11, s1
 800c472:	eeb0 6a41 	vmov.f32	s12, s2
 800c476:	eef0 6a61 	vmov.f32	s13, s3
 800c47a:	eeb0 7a42 	vmov.f32	s14, s4
 800c47e:	eef0 7a62 	vmov.f32	s15, s5
 800c482:	ed87 5a07 	vstr	s10, [r7, #28]
 800c486:	edc7 5a08 	vstr	s11, [r7, #32]
 800c48a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800c48e:	edc7 6a04 	vstr	s13, [r7, #16]
 800c492:	ed87 7a05 	vstr	s14, [r7, #20]
 800c496:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 800c49a:	ed97 7a08 	vldr	s14, [r7, #32]
 800c49e:	edd7 7a06 	vldr	s15, [r7, #24]
 800c4a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4a6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c4aa:	edd7 7a05 	vldr	s15, [r7, #20]
 800c4ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4b2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c4b6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800c4ba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c4be:	edd7 7a04 	vldr	s15, [r7, #16]
 800c4c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4ca:	edd7 7a06 	vldr	s15, [r7, #24]
 800c4ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4d2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c4d6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800c4da:	ed97 7a07 	vldr	s14, [r7, #28]
 800c4de:	edd7 7a05 	vldr	s15, [r7, #20]
 800c4e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4e6:	edd7 6a08 	vldr	s13, [r7, #32]
 800c4ea:	edd7 7a04 	vldr	s15, [r7, #16]
 800c4ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4f2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c4f6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800c4fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c4fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c502:	ca07      	ldmia	r2, {r0, r1, r2}
 800c504:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c508:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c50a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c50e:	ee06 1a90 	vmov	s13, r1
 800c512:	ee07 2a10 	vmov	s14, r2
 800c516:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800c51a:	eeb0 0a66 	vmov.f32	s0, s13
 800c51e:	eef0 0a47 	vmov.f32	s1, s14
 800c522:	eeb0 1a67 	vmov.f32	s2, s15
 800c526:	3744      	adds	r7, #68	; 0x44
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <FusionVectorDotProduct>:
 * @brief Returns the dot product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Dot product.
 */
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800c530:	b580      	push	{r7, lr}
 800c532:	b08a      	sub	sp, #40	; 0x28
 800c534:	af00      	add	r7, sp, #0
 800c536:	eeb0 5a40 	vmov.f32	s10, s0
 800c53a:	eef0 5a60 	vmov.f32	s11, s1
 800c53e:	eeb0 6a41 	vmov.f32	s12, s2
 800c542:	eef0 6a61 	vmov.f32	s13, s3
 800c546:	eeb0 7a42 	vmov.f32	s14, s4
 800c54a:	eef0 7a62 	vmov.f32	s15, s5
 800c54e:	ed87 5a03 	vstr	s10, [r7, #12]
 800c552:	edc7 5a04 	vstr	s11, [r7, #16]
 800c556:	ed87 6a05 	vstr	s12, [r7, #20]
 800c55a:	edc7 6a00 	vstr	s13, [r7]
 800c55e:	ed87 7a01 	vstr	s14, [r7, #4]
 800c562:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 800c566:	ed97 5a00 	vldr	s10, [r7]
 800c56a:	edd7 5a01 	vldr	s11, [r7, #4]
 800c56e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c572:	edd7 6a03 	vldr	s13, [r7, #12]
 800c576:	ed97 7a04 	vldr	s14, [r7, #16]
 800c57a:	edd7 7a05 	vldr	s15, [r7, #20]
 800c57e:	eef0 1a45 	vmov.f32	s3, s10
 800c582:	eeb0 2a65 	vmov.f32	s4, s11
 800c586:	eef0 2a46 	vmov.f32	s5, s12
 800c58a:	eeb0 0a66 	vmov.f32	s0, s13
 800c58e:	eef0 0a47 	vmov.f32	s1, s14
 800c592:	eeb0 1a67 	vmov.f32	s2, s15
 800c596:	f7ff ff17 	bl	800c3c8 <FusionVectorHadamardProduct>
 800c59a:	eef0 6a40 	vmov.f32	s13, s0
 800c59e:	eeb0 7a60 	vmov.f32	s14, s1
 800c5a2:	eef0 7a41 	vmov.f32	s15, s2
 800c5a6:	edc7 6a07 	vstr	s13, [r7, #28]
 800c5aa:	ed87 7a08 	vstr	s14, [r7, #32]
 800c5ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800c5b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5b6:	ed97 7a08 	vldr	s14, [r7, #32]
 800c5ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c5be:	eeb0 0a66 	vmov.f32	s0, s13
 800c5c2:	eef0 0a47 	vmov.f32	s1, s14
 800c5c6:	eeb0 1a67 	vmov.f32	s2, s15
 800c5ca:	f7ff fe99 	bl	800c300 <FusionVectorSum>
 800c5ce:	eef0 7a40 	vmov.f32	s15, s0
}
 800c5d2:	eeb0 0a67 	vmov.f32	s0, s15
 800c5d6:	3728      	adds	r7, #40	; 0x28
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b088      	sub	sp, #32
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	eef0 6a40 	vmov.f32	s13, s0
 800c5e6:	eeb0 7a60 	vmov.f32	s14, s1
 800c5ea:	eef0 7a41 	vmov.f32	s15, s2
 800c5ee:	edc7 6a01 	vstr	s13, [r7, #4]
 800c5f2:	ed87 7a02 	vstr	s14, [r7, #8]
 800c5f6:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800c5fa:	ed97 5a01 	vldr	s10, [r7, #4]
 800c5fe:	edd7 5a02 	vldr	s11, [r7, #8]
 800c602:	ed97 6a03 	vldr	s12, [r7, #12]
 800c606:	edd7 6a01 	vldr	s13, [r7, #4]
 800c60a:	ed97 7a02 	vldr	s14, [r7, #8]
 800c60e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c612:	eef0 1a45 	vmov.f32	s3, s10
 800c616:	eeb0 2a65 	vmov.f32	s4, s11
 800c61a:	eef0 2a46 	vmov.f32	s5, s12
 800c61e:	eeb0 0a66 	vmov.f32	s0, s13
 800c622:	eef0 0a47 	vmov.f32	s1, s14
 800c626:	eeb0 1a67 	vmov.f32	s2, s15
 800c62a:	f7ff fecd 	bl	800c3c8 <FusionVectorHadamardProduct>
 800c62e:	eef0 6a40 	vmov.f32	s13, s0
 800c632:	eeb0 7a60 	vmov.f32	s14, s1
 800c636:	eef0 7a41 	vmov.f32	s15, s2
 800c63a:	edc7 6a05 	vstr	s13, [r7, #20]
 800c63e:	ed87 7a06 	vstr	s14, [r7, #24]
 800c642:	edc7 7a07 	vstr	s15, [r7, #28]
 800c646:	edd7 6a05 	vldr	s13, [r7, #20]
 800c64a:	ed97 7a06 	vldr	s14, [r7, #24]
 800c64e:	edd7 7a07 	vldr	s15, [r7, #28]
 800c652:	eeb0 0a66 	vmov.f32	s0, s13
 800c656:	eef0 0a47 	vmov.f32	s1, s14
 800c65a:	eeb0 1a67 	vmov.f32	s2, s15
 800c65e:	f7ff fe4f 	bl	800c300 <FusionVectorSum>
 800c662:	eef0 7a40 	vmov.f32	s15, s0
}
 800c666:	eeb0 0a67 	vmov.f32	s0, s15
 800c66a:	3720      	adds	r7, #32
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 800c670:	b580      	push	{r7, lr}
 800c672:	b08c      	sub	sp, #48	; 0x30
 800c674:	af00      	add	r7, sp, #0
 800c676:	eef0 6a40 	vmov.f32	s13, s0
 800c67a:	eeb0 7a60 	vmov.f32	s14, s1
 800c67e:	eef0 7a41 	vmov.f32	s15, s2
 800c682:	edc7 6a05 	vstr	s13, [r7, #20]
 800c686:	ed87 7a06 	vstr	s14, [r7, #24]
 800c68a:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800c68e:	edd7 6a05 	vldr	s13, [r7, #20]
 800c692:	ed97 7a06 	vldr	s14, [r7, #24]
 800c696:	edd7 7a07 	vldr	s15, [r7, #28]
 800c69a:	eeb0 0a66 	vmov.f32	s0, s13
 800c69e:	eef0 0a47 	vmov.f32	s1, s14
 800c6a2:	eeb0 1a67 	vmov.f32	s2, s15
 800c6a6:	f7ff ff99 	bl	800c5dc <FusionVectorMagnitudeSquared>
 800c6aa:	eef0 7a40 	vmov.f32	s15, s0
 800c6ae:	eeb0 0a67 	vmov.f32	s0, s15
 800c6b2:	f7ff fd77 	bl	800c1a4 <FusionFastInverseSqrt>
 800c6b6:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800c6ba:	edd7 6a05 	vldr	s13, [r7, #20]
 800c6be:	ed97 7a06 	vldr	s14, [r7, #24]
 800c6c2:	edd7 7a07 	vldr	s15, [r7, #28]
 800c6c6:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800c6ca:	eeb0 0a66 	vmov.f32	s0, s13
 800c6ce:	eef0 0a47 	vmov.f32	s1, s14
 800c6d2:	eeb0 1a67 	vmov.f32	s2, s15
 800c6d6:	f7ff fe33 	bl	800c340 <FusionVectorMultiplyScalar>
 800c6da:	eef0 6a40 	vmov.f32	s13, s0
 800c6de:	eeb0 7a60 	vmov.f32	s14, s1
 800c6e2:	eef0 7a41 	vmov.f32	s15, s2
 800c6e6:	edc7 6a08 	vstr	s13, [r7, #32]
 800c6ea:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800c6ee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800c6f2:	6a39      	ldr	r1, [r7, #32]
 800c6f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f8:	ee06 1a90 	vmov	s13, r1
 800c6fc:	ee07 2a10 	vmov	s14, r2
 800c700:	ee07 3a90 	vmov	s15, r3
}
 800c704:	eeb0 0a66 	vmov.f32	s0, s13
 800c708:	eef0 0a47 	vmov.f32	s1, s14
 800c70c:	eeb0 1a67 	vmov.f32	s2, s15
 800c710:	3730      	adds	r7, #48	; 0x30
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800c716:	b490      	push	{r4, r7}
 800c718:	b094      	sub	sp, #80	; 0x50
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	eeb0 4a40 	vmov.f32	s8, s0
 800c720:	eef0 4a60 	vmov.f32	s9, s1
 800c724:	eeb0 5a41 	vmov.f32	s10, s2
 800c728:	eef0 5a61 	vmov.f32	s11, s3
 800c72c:	eeb0 6a42 	vmov.f32	s12, s4
 800c730:	eef0 6a62 	vmov.f32	s13, s5
 800c734:	eeb0 7a43 	vmov.f32	s14, s6
 800c738:	eef0 7a63 	vmov.f32	s15, s7
 800c73c:	ed87 4a08 	vstr	s8, [r7, #32]
 800c740:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800c744:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800c748:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800c74c:	ed87 6a04 	vstr	s12, [r7, #16]
 800c750:	edc7 6a05 	vstr	s13, [r7, #20]
 800c754:	ed87 7a06 	vstr	s14, [r7, #24]
 800c758:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 800c75c:	ed97 7a08 	vldr	s14, [r7, #32]
 800c760:	edd7 7a04 	vldr	s15, [r7, #16]
 800c764:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c768:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 800c76c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c770:	edd7 7a05 	vldr	s15, [r7, #20]
 800c774:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c778:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 800c77c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c780:	edd7 7a06 	vldr	s15, [r7, #24]
 800c784:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c788:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 800c78c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c790:	edd7 7a07 	vldr	s15, [r7, #28]
 800c794:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c798:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800c79c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800c7a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c7a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c7a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c7aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c7ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c7ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7b2:	ee06 0a10 	vmov	s12, r0
 800c7b6:	ee06 1a90 	vmov	s13, r1
 800c7ba:	ee07 2a10 	vmov	s14, r2
 800c7be:	ee07 3a90 	vmov	s15, r3
}
 800c7c2:	eeb0 0a46 	vmov.f32	s0, s12
 800c7c6:	eef0 0a66 	vmov.f32	s1, s13
 800c7ca:	eeb0 1a47 	vmov.f32	s2, s14
 800c7ce:	eef0 1a67 	vmov.f32	s3, s15
 800c7d2:	3750      	adds	r7, #80	; 0x50
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bc90      	pop	{r4, r7}
 800c7d8:	4770      	bx	lr

0800c7da <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 800c7da:	b490      	push	{r4, r7}
 800c7dc:	b094      	sub	sp, #80	; 0x50
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	eef0 4a40 	vmov.f32	s9, s0
 800c7e4:	eeb0 5a60 	vmov.f32	s10, s1
 800c7e8:	eef0 5a41 	vmov.f32	s11, s2
 800c7ec:	eeb0 6a61 	vmov.f32	s12, s3
 800c7f0:	eef0 6a42 	vmov.f32	s13, s4
 800c7f4:	eeb0 7a62 	vmov.f32	s14, s5
 800c7f8:	eef0 7a43 	vmov.f32	s15, s6
 800c7fc:	edc7 4a08 	vstr	s9, [r7, #32]
 800c800:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 800c804:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 800c808:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 800c80c:	edc7 6a05 	vstr	s13, [r7, #20]
 800c810:	ed87 7a06 	vstr	s14, [r7, #24]
 800c814:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 800c818:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c81c:	eeb1 7a67 	vneg.f32	s14, s15
 800c820:	edd7 7a05 	vldr	s15, [r7, #20]
 800c824:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c828:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c82c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c834:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c838:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c83c:	edd7 7a07 	vldr	s15, [r7, #28]
 800c840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c844:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c848:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 800c84c:	ed97 7a08 	vldr	s14, [r7, #32]
 800c850:	edd7 7a05 	vldr	s15, [r7, #20]
 800c854:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c858:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c85c:	edd7 7a07 	vldr	s15, [r7, #28]
 800c860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c864:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c868:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c86c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c874:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c878:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800c87c:	ed97 7a08 	vldr	s14, [r7, #32]
 800c880:	edd7 7a06 	vldr	s15, [r7, #24]
 800c884:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c888:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c88c:	edd7 7a07 	vldr	s15, [r7, #28]
 800c890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c894:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c898:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c89c:	edd7 7a05 	vldr	s15, [r7, #20]
 800c8a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8a4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c8a8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 800c8ac:	ed97 7a08 	vldr	s14, [r7, #32]
 800c8b0:	edd7 7a07 	vldr	s15, [r7, #28]
 800c8b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8b8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c8bc:	edd7 7a06 	vldr	s15, [r7, #24]
 800c8c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c8c8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c8cc:	edd7 7a05 	vldr	s15, [r7, #20]
 800c8d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8d4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c8d8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800c8dc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800c8e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c8e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c8e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c8ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c8ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c8ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f2:	ee06 0a10 	vmov	s12, r0
 800c8f6:	ee06 1a90 	vmov	s13, r1
 800c8fa:	ee07 2a10 	vmov	s14, r2
 800c8fe:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 800c902:	eeb0 0a46 	vmov.f32	s0, s12
 800c906:	eef0 0a66 	vmov.f32	s1, s13
 800c90a:	eeb0 1a47 	vmov.f32	s2, s14
 800c90e:	eef0 1a67 	vmov.f32	s3, s15
 800c912:	3750      	adds	r7, #80	; 0x50
 800c914:	46bd      	mov	sp, r7
 800c916:	bc90      	pop	{r4, r7}
 800c918:	4770      	bx	lr

0800c91a <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800c91a:	b590      	push	{r4, r7, lr}
 800c91c:	b093      	sub	sp, #76	; 0x4c
 800c91e:	af00      	add	r7, sp, #0
 800c920:	eeb0 6a40 	vmov.f32	s12, s0
 800c924:	eef0 6a60 	vmov.f32	s13, s1
 800c928:	eeb0 7a41 	vmov.f32	s14, s2
 800c92c:	eef0 7a61 	vmov.f32	s15, s3
 800c930:	ed87 6a04 	vstr	s12, [r7, #16]
 800c934:	edc7 6a05 	vstr	s13, [r7, #20]
 800c938:	ed87 7a06 	vstr	s14, [r7, #24]
 800c93c:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800c940:	ed97 7a04 	vldr	s14, [r7, #16]
 800c944:	edd7 7a04 	vldr	s15, [r7, #16]
 800c948:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c94c:	edd7 6a05 	vldr	s13, [r7, #20]
 800c950:	edd7 7a05 	vldr	s15, [r7, #20]
 800c954:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c958:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c95c:	edd7 6a06 	vldr	s13, [r7, #24]
 800c960:	edd7 7a06 	vldr	s15, [r7, #24]
 800c964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c96c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c970:	edd7 7a07 	vldr	s15, [r7, #28]
 800c974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c97c:	eeb0 0a67 	vmov.f32	s0, s15
 800c980:	f7ff fc10 	bl	800c1a4 <FusionFastInverseSqrt>
 800c984:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 800c988:	ed97 7a04 	vldr	s14, [r7, #16]
 800c98c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c990:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c994:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 800c998:	ed97 7a05 	vldr	s14, [r7, #20]
 800c99c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c9a0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c9a4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 800c9a8:	ed97 7a06 	vldr	s14, [r7, #24]
 800c9ac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c9b0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c9b4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 800c9b8:	ed97 7a07 	vldr	s14, [r7, #28]
 800c9bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c9c0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c9c4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800c9c8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800c9cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c9d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c9d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c9d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c9da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9de:	ee06 0a10 	vmov	s12, r0
 800c9e2:	ee06 1a90 	vmov	s13, r1
 800c9e6:	ee07 2a10 	vmov	s14, r2
 800c9ea:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 800c9ee:	eeb0 0a46 	vmov.f32	s0, s12
 800c9f2:	eef0 0a66 	vmov.f32	s1, s13
 800c9f6:	eeb0 1a47 	vmov.f32	s2, s14
 800c9fa:	eef0 1a67 	vmov.f32	s3, s15
 800c9fe:	374c      	adds	r7, #76	; 0x4c
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd90      	pop	{r4, r7, pc}

0800ca04 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 800ca04:	b5b0      	push	{r4, r5, r7, lr}
 800ca06:	b088      	sub	sp, #32
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800ca0c:	4b0b      	ldr	r3, [pc, #44]	; (800ca3c <FusionAhrsInitialise+0x38>)
 800ca0e:	f107 0408 	add.w	r4, r7, #8
 800ca12:	461d      	mov	r5, r3
 800ca14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca18:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ca1c:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800ca20:	f107 0308 	add.w	r3, r7, #8
 800ca24:	4619      	mov	r1, r3
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 f86e 	bl	800cb08 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 f807 	bl	800ca40 <FusionAhrsReset>
}
 800ca32:	bf00      	nop
 800ca34:	3720      	adds	r7, #32
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bdb0      	pop	{r4, r5, r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	08015f8c 	.word	0x08015f8c

0800ca40 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800ca40:	b480      	push	{r7}
 800ca42:	b091      	sub	sp, #68	; 0x44
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ca4e:	619a      	str	r2, [r3, #24]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f04f 0200 	mov.w	r2, #0
 800ca56:	61da      	str	r2, [r3, #28]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f04f 0200 	mov.w	r2, #0
 800ca5e:	621a      	str	r2, [r3, #32]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f04f 0200 	mov.w	r2, #0
 800ca66:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f04f 0200 	mov.w	r2, #0
 800ca6e:	629a      	str	r2, [r3, #40]	; 0x28
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f04f 0200 	mov.w	r2, #0
 800ca76:	62da      	str	r2, [r3, #44]	; 0x2c
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f04f 0200 	mov.w	r2, #0
 800ca7e:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4a1e      	ldr	r2, [pc, #120]	; (800cb04 <FusionAhrsReset+0xc4>)
 800ca8c:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f04f 0200 	mov.w	r2, #0
 800ca9c:	645a      	str	r2, [r3, #68]	; 0x44
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f04f 0200 	mov.w	r2, #0
 800caa4:	649a      	str	r2, [r3, #72]	; 0x48
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f04f 0200 	mov.w	r2, #0
 800caac:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f04f 0200 	mov.w	r2, #0
 800cab4:	651a      	str	r2, [r3, #80]	; 0x50
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f04f 0200 	mov.w	r2, #0
 800cabc:	655a      	str	r2, [r3, #84]	; 0x54
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f04f 0200 	mov.w	r2, #0
 800cac4:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2200      	movs	r2, #0
 800caca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	695b      	ldr	r3, [r3, #20]
 800cad8:	461a      	mov	r2, r3
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2200      	movs	r2, #0
 800caea:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	695b      	ldr	r3, [r3, #20]
 800caf0:	461a      	mov	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	671a      	str	r2, [r3, #112]	; 0x70
}
 800caf6:	bf00      	nop
 800caf8:	3744      	adds	r7, #68	; 0x44
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop
 800cb04:	41200000 	.word	0x41200000

0800cb08 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	781a      	ldrb	r2, [r3, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	685a      	ldr	r2, [r3, #4]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	edd3 7a02 	vldr	s15, [r3, #8]
 800cb28:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb30:	d007      	beq.n	800cb42 <FusionAhrsSetSettings+0x3a>
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	edd3 7a02 	vldr	s15, [r3, #8]
 800cb38:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800cc6c <FusionAhrsSetSettings+0x164>
 800cb3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb40:	e001      	b.n	800cb46 <FusionAhrsSetSettings+0x3e>
 800cb42:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800cc70 <FusionAhrsSetSettings+0x168>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	edd3 7a03 	vldr	s15, [r3, #12]
 800cb52:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb5a:	d01b      	beq.n	800cb94 <FusionAhrsSetSettings+0x8c>
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	edd3 7a03 	vldr	s15, [r3, #12]
 800cb62:	eeb0 0a67 	vmov.f32	s0, s15
 800cb66:	f7ff fb09 	bl	800c17c <FusionDegreesToRadians>
 800cb6a:	eef0 7a40 	vmov.f32	s15, s0
 800cb6e:	eeb0 0a67 	vmov.f32	s0, s15
 800cb72:	f006 feff 	bl	8013974 <sinf>
 800cb76:	eef0 7a40 	vmov.f32	s15, s0
 800cb7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cb7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb82:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800cb86:	eeb0 0a67 	vmov.f32	s0, s15
 800cb8a:	f006 ffd7 	bl	8013b3c <powf>
 800cb8e:	eef0 7a40 	vmov.f32	s15, s0
 800cb92:	e001      	b.n	800cb98 <FusionAhrsSetSettings+0x90>
 800cb94:	eddf 7a36 	vldr	s15, [pc, #216]	; 800cc70 <FusionAhrsSetSettings+0x168>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	edd3 7a04 	vldr	s15, [r3, #16]
 800cba4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbac:	d01b      	beq.n	800cbe6 <FusionAhrsSetSettings+0xde>
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	edd3 7a04 	vldr	s15, [r3, #16]
 800cbb4:	eeb0 0a67 	vmov.f32	s0, s15
 800cbb8:	f7ff fae0 	bl	800c17c <FusionDegreesToRadians>
 800cbbc:	eef0 7a40 	vmov.f32	s15, s0
 800cbc0:	eeb0 0a67 	vmov.f32	s0, s15
 800cbc4:	f006 fed6 	bl	8013974 <sinf>
 800cbc8:	eef0 7a40 	vmov.f32	s15, s0
 800cbcc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cbd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbd4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800cbd8:	eeb0 0a67 	vmov.f32	s0, s15
 800cbdc:	f006 ffae 	bl	8013b3c <powf>
 800cbe0:	eef0 7a40 	vmov.f32	s15, s0
 800cbe4:	e001      	b.n	800cbea <FusionAhrsSetSettings+0xe2>
 800cbe6:	eddf 7a22 	vldr	s15, [pc, #136]	; 800cc70 <FusionAhrsSetSettings+0x168>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	695a      	ldr	r2, [r3, #20]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	695b      	ldr	r3, [r3, #20]
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	695b      	ldr	r3, [r3, #20]
 800cc06:	461a      	mov	r2, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	edd3 7a01 	vldr	s15, [r3, #4]
 800cc12:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc1a:	d003      	beq.n	800cc24 <FusionAhrsSetSettings+0x11c>
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	695b      	ldr	r3, [r3, #20]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d105      	bne.n	800cc30 <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	4a13      	ldr	r2, [pc, #76]	; (800cc74 <FusionAhrsSetSettings+0x16c>)
 800cc28:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4a11      	ldr	r2, [pc, #68]	; (800cc74 <FusionAhrsSetSettings+0x16c>)
 800cc2e:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc36:	f083 0301 	eor.w	r3, r3, #1
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d003      	beq.n	800cc48 <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	685a      	ldr	r2, [r3, #4]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	edd3 7a01 	vldr	s15, [r3, #4]
 800cc4e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800cc52:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cc56:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800cc5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 800cc64:	bf00      	nop
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	3f7ae148 	.word	0x3f7ae148
 800cc70:	7f7fffff 	.word	0x7f7fffff
 800cc74:	7f7fffff 	.word	0x7f7fffff

0800cc78 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 800cc78:	b590      	push	{r4, r7, lr}
 800cc7a:	b0bf      	sub	sp, #252	; 0xfc
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cc80:	eeb0 5a61 	vmov.f32	s10, s3
 800cc84:	eef0 5a42 	vmov.f32	s11, s4
 800cc88:	eeb0 6a62 	vmov.f32	s12, s5
 800cc8c:	eef0 6a43 	vmov.f32	s13, s6
 800cc90:	eeb0 7a63 	vmov.f32	s14, s7
 800cc94:	eef0 7a44 	vmov.f32	s15, s8
 800cc98:	edc7 4a01 	vstr	s9, [r7, #4]
 800cc9c:	ed87 0a08 	vstr	s0, [r7, #32]
 800cca0:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 800cca4:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 800cca8:	ed87 5a05 	vstr	s10, [r7, #20]
 800ccac:	edc7 5a06 	vstr	s11, [r7, #24]
 800ccb0:	ed87 6a07 	vstr	s12, [r7, #28]
 800ccb4:	edc7 6a02 	vstr	s13, [r7, #8]
 800ccb8:	ed87 7a03 	vstr	s14, [r7, #12]
 800ccbc:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800ccc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc2:	3328      	adds	r3, #40	; 0x28
 800ccc4:	f107 0214 	add.w	r2, r7, #20
 800ccc8:	ca07      	ldmia	r2, {r0, r1, r2}
 800ccca:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 800ccce:	edd7 7a08 	vldr	s15, [r7, #32]
 800ccd2:	eeb0 7ae7 	vabs.f32	s14, s15
 800ccd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd8:	edd3 7a02 	vldr	s15, [r3, #8]
 800ccdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cce4:	dc17      	bgt.n	800cd16 <FusionAhrsUpdate+0x9e>
 800cce6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ccea:	eeb0 7ae7 	vabs.f32	s14, s15
 800ccee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf0:	edd3 7a02 	vldr	s15, [r3, #8]
 800ccf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ccf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccfc:	dc0b      	bgt.n	800cd16 <FusionAhrsUpdate+0x9e>
 800ccfe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd02:	eeb0 7ae7 	vabs.f32	s14, s15
 800cd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd08:	edd3 7a02 	vldr	s15, [r3, #8]
 800cd0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd14:	dd15      	ble.n	800cd42 <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 800cd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd18:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800cd1c:	3318      	adds	r3, #24
 800cd1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 800cd24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd26:	f7ff fe8b 	bl	800ca40 <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 800cd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2c:	f103 0418 	add.w	r4, r3, #24
 800cd30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cd34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 800cd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800cd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d02d      	beq.n	800cda8 <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 800cd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800cd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd54:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800cd58:	edd7 7a01 	vldr	s15, [r7, #4]
 800cd5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd66:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 800cd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800cd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd72:	edd3 7a01 	vldr	s15, [r3, #4]
 800cd76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd7e:	d407      	bmi.n	800cd90 <FusionAhrsUpdate+0x118>
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	edd3 7a01 	vldr	s15, [r3, #4]
 800cd86:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd8e:	d10b      	bne.n	800cda8 <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 800cd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd92:	685a      	ldr	r2, [r3, #4]
 800cd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd96:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 800cd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 800cda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda2:	2200      	movs	r2, #0
 800cda4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 800cda8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdaa:	f000 faf4 	bl	800d396 <HalfGravity>
 800cdae:	eef0 6a40 	vmov.f32	s13, s0
 800cdb2:	eeb0 7a60 	vmov.f32	s14, s1
 800cdb6:	eef0 7a41 	vmov.f32	s15, s2
 800cdba:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 800cdbe:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 800cdc2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800cdc6:	f04f 0300 	mov.w	r3, #0
 800cdca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cdce:	f04f 0300 	mov.w	r3, #0
 800cdd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cdd6:	f04f 0300 	mov.w	r3, #0
 800cdda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 800cdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde0:	2201      	movs	r2, #1
 800cde2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 800cde6:	edd7 6a05 	vldr	s13, [r7, #20]
 800cdea:	ed97 7a06 	vldr	s14, [r7, #24]
 800cdee:	edd7 7a07 	vldr	s15, [r7, #28]
 800cdf2:	eeb0 0a66 	vmov.f32	s0, s13
 800cdf6:	eef0 0a47 	vmov.f32	s1, s14
 800cdfa:	eeb0 1a67 	vmov.f32	s2, s15
 800cdfe:	f7ff fa01 	bl	800c204 <FusionVectorIsZero>
 800ce02:	4603      	mov	r3, r0
 800ce04:	f083 0301 	eor.w	r3, r3, #1
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	f000 809c 	beq.w	800cf48 <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 800ce10:	edd7 6a05 	vldr	s13, [r7, #20]
 800ce14:	ed97 7a06 	vldr	s14, [r7, #24]
 800ce18:	edd7 7a07 	vldr	s15, [r7, #28]
 800ce1c:	eeb0 0a66 	vmov.f32	s0, s13
 800ce20:	eef0 0a47 	vmov.f32	s1, s14
 800ce24:	eeb0 1a67 	vmov.f32	s2, s15
 800ce28:	f7ff fc22 	bl	800c670 <FusionVectorNormalise>
 800ce2c:	eef0 6a40 	vmov.f32	s13, s0
 800ce30:	eeb0 7a60 	vmov.f32	s14, s1
 800ce34:	eef0 7a41 	vmov.f32	s15, s2
 800ce38:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 800ce3c:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 800ce40:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800ce44:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800ce46:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 800ce4a:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800ce4e:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 800ce52:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800ce56:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800ce5a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800ce5e:	eef0 1a45 	vmov.f32	s3, s10
 800ce62:	eeb0 2a65 	vmov.f32	s4, s11
 800ce66:	eef0 2a46 	vmov.f32	s5, s12
 800ce6a:	eeb0 0a66 	vmov.f32	s0, s13
 800ce6e:	eef0 0a47 	vmov.f32	s1, s14
 800ce72:	eeb0 1a67 	vmov.f32	s2, s15
 800ce76:	f000 fc55 	bl	800d724 <Feedback>
 800ce7a:	eef0 6a40 	vmov.f32	s13, s0
 800ce7e:	eeb0 7a60 	vmov.f32	s14, s1
 800ce82:	eef0 7a41 	vmov.f32	s15, s2
 800ce86:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 800ce8a:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 800ce8e:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 800ce92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d118      	bne.n	800cece <FusionAhrsUpdate+0x256>
 800ce9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9e:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800cea2:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800cea6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800ceaa:	eeb0 0a66 	vmov.f32	s0, s13
 800ceae:	eef0 0a47 	vmov.f32	s1, s14
 800ceb2:	eeb0 1a67 	vmov.f32	s2, s15
 800ceb6:	f7ff fb91 	bl	800c5dc <FusionVectorMagnitudeSquared>
 800ceba:	eeb0 7a40 	vmov.f32	s14, s0
 800cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec0:	edd3 7a03 	vldr	s15, [r3, #12]
 800cec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cecc:	d80a      	bhi.n	800cee4 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 800cece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced0:	2200      	movs	r2, #0
 800ced2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 800ced6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceda:	f1a3 0209 	sub.w	r2, r3, #9
 800cede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee0:	661a      	str	r2, [r3, #96]	; 0x60
 800cee2:	e004      	b.n	800ceee <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 800cee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cee8:	1c5a      	adds	r2, r3, #1
 800ceea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceec:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 800ceee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cef6:	429a      	cmp	r2, r3
 800cef8:	dd07      	ble.n	800cf0a <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 800cefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefc:	2200      	movs	r2, #0
 800cefe:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 800cf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf02:	2200      	movs	r2, #0
 800cf04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800cf08:	e004      	b.n	800cf14 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800cf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0c:	695b      	ldr	r3, [r3, #20]
 800cf0e:	461a      	mov	r2, r3
 800cf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf12:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800cf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf16:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800cf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1a:	695b      	ldr	r3, [r3, #20]
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	2100      	movs	r1, #0
 800cf20:	f000 fcb5 	bl	800d88e <Clamp>
 800cf24:	4602      	mov	r2, r0
 800cf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf28:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 800cf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cf30:	f083 0301 	eor.w	r3, r3, #1
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d006      	beq.n	800cf48 <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 800cf3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf3c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800cf40:	3244      	adds	r2, #68	; 0x44
 800cf42:	ca07      	ldmia	r2, {r0, r1, r2}
 800cf44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800cf48:	f04f 0300 	mov.w	r3, #0
 800cf4c:	673b      	str	r3, [r7, #112]	; 0x70
 800cf4e:	f04f 0300 	mov.w	r3, #0
 800cf52:	677b      	str	r3, [r7, #116]	; 0x74
 800cf54:	f04f 0300 	mov.w	r3, #0
 800cf58:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = false;
 800cf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 800cf62:	edd7 6a02 	vldr	s13, [r7, #8]
 800cf66:	ed97 7a03 	vldr	s14, [r7, #12]
 800cf6a:	edd7 7a04 	vldr	s15, [r7, #16]
 800cf6e:	eeb0 0a66 	vmov.f32	s0, s13
 800cf72:	eef0 0a47 	vmov.f32	s1, s14
 800cf76:	eeb0 1a67 	vmov.f32	s2, s15
 800cf7a:	f7ff f943 	bl	800c204 <FusionVectorIsZero>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	f083 0301 	eor.w	r3, r3, #1
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f000 80d1 	beq.w	800d12e <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800cf8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf8e:	f000 fabf 	bl	800d510 <HalfMagnetic>
 800cf92:	eef0 6a40 	vmov.f32	s13, s0
 800cf96:	eeb0 7a60 	vmov.f32	s14, s1
 800cf9a:	eef0 7a41 	vmov.f32	s15, s2
 800cf9e:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 800cfa2:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 800cfa6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800cfaa:	ed97 5a02 	vldr	s10, [r7, #8]
 800cfae:	edd7 5a03 	vldr	s11, [r7, #12]
 800cfb2:	ed97 6a04 	vldr	s12, [r7, #16]
 800cfb6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800cfba:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800cfbe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800cfc2:	eef0 1a45 	vmov.f32	s3, s10
 800cfc6:	eeb0 2a65 	vmov.f32	s4, s11
 800cfca:	eef0 2a46 	vmov.f32	s5, s12
 800cfce:	eeb0 0a66 	vmov.f32	s0, s13
 800cfd2:	eef0 0a47 	vmov.f32	s1, s14
 800cfd6:	eeb0 1a67 	vmov.f32	s2, s15
 800cfda:	f7ff fa43 	bl	800c464 <FusionVectorCrossProduct>
 800cfde:	eef0 6a40 	vmov.f32	s13, s0
 800cfe2:	eeb0 7a60 	vmov.f32	s14, s1
 800cfe6:	eef0 7a41 	vmov.f32	s15, s2
 800cfea:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800cfee:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 800cff2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 800cff6:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800cffa:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800cffe:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800d002:	eeb0 0a66 	vmov.f32	s0, s13
 800d006:	eef0 0a47 	vmov.f32	s1, s14
 800d00a:	eeb0 1a67 	vmov.f32	s2, s15
 800d00e:	f7ff fb2f 	bl	800c670 <FusionVectorNormalise>
 800d012:	eef0 6a40 	vmov.f32	s13, s0
 800d016:	eeb0 7a60 	vmov.f32	s14, s1
 800d01a:	eef0 7a41 	vmov.f32	s15, s2
 800d01e:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 800d022:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 800d026:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800d02a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d02c:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 800d030:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 800d034:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800d038:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800d03c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800d040:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800d044:	eef0 1a45 	vmov.f32	s3, s10
 800d048:	eeb0 2a65 	vmov.f32	s4, s11
 800d04c:	eef0 2a46 	vmov.f32	s5, s12
 800d050:	eeb0 0a66 	vmov.f32	s0, s13
 800d054:	eef0 0a47 	vmov.f32	s1, s14
 800d058:	eeb0 1a67 	vmov.f32	s2, s15
 800d05c:	f000 fb62 	bl	800d724 <Feedback>
 800d060:	eef0 6a40 	vmov.f32	s13, s0
 800d064:	eeb0 7a60 	vmov.f32	s14, s1
 800d068:	eef0 7a41 	vmov.f32	s15, s2
 800d06c:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 800d070:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 800d074:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 800d078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d118      	bne.n	800d0b4 <FusionAhrsUpdate+0x43c>
 800d082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d084:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800d088:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800d08c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800d090:	eeb0 0a66 	vmov.f32	s0, s13
 800d094:	eef0 0a47 	vmov.f32	s1, s14
 800d098:	eeb0 1a67 	vmov.f32	s2, s15
 800d09c:	f7ff fa9e 	bl	800c5dc <FusionVectorMagnitudeSquared>
 800d0a0:	eeb0 7a40 	vmov.f32	s14, s0
 800d0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a6:	edd3 7a04 	vldr	s15, [r3, #16]
 800d0aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0b2:	d80a      	bhi.n	800d0ca <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 800d0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 800d0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0c0:	f1a3 0209 	sub.w	r2, r3, #9
 800d0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c6:	66da      	str	r2, [r3, #108]	; 0x6c
 800d0c8:	e004      	b.n	800d0d4 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 800d0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0ce:	1c5a      	adds	r2, r3, #1
 800d0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d2:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 800d0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	dd07      	ble.n	800d0f0 <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 800d0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 800d0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800d0ee:	e004      	b.n	800d0fa <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800d0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f2:	695b      	ldr	r3, [r3, #20]
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800d0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d100:	695b      	ldr	r3, [r3, #20]
 800d102:	461a      	mov	r2, r3
 800d104:	2100      	movs	r1, #0
 800d106:	f000 fbc2 	bl	800d88e <Clamp>
 800d10a:	4602      	mov	r2, r0
 800d10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10e:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 800d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d112:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d116:	f083 0301 	eor.w	r3, r3, #1
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d006      	beq.n	800d12e <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 800d120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d122:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d126:	3250      	adds	r2, #80	; 0x50
 800d128:	ca07      	ldmia	r2, {r0, r1, r2}
 800d12a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800d12e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800d132:	f7ff f823 	bl	800c17c <FusionDegreesToRadians>
 800d136:	eeb0 6a40 	vmov.f32	s12, s0
 800d13a:	edd7 6a08 	vldr	s13, [r7, #32]
 800d13e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d142:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d146:	eef0 1a46 	vmov.f32	s3, s12
 800d14a:	eeb0 0a66 	vmov.f32	s0, s13
 800d14e:	eef0 0a47 	vmov.f32	s1, s14
 800d152:	eeb0 1a67 	vmov.f32	s2, s15
 800d156:	f7ff f8f3 	bl	800c340 <FusionVectorMultiplyScalar>
 800d15a:	eef0 6a40 	vmov.f32	s13, s0
 800d15e:	eeb0 7a60 	vmov.f32	s14, s1
 800d162:	eef0 7a41 	vmov.f32	s15, s2
 800d166:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 800d16a:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 800d16e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 800d172:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 800d176:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800d17a:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800d17e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800d182:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800d186:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800d18a:	eef0 1a45 	vmov.f32	s3, s10
 800d18e:	eeb0 2a65 	vmov.f32	s4, s11
 800d192:	eef0 2a46 	vmov.f32	s5, s12
 800d196:	eeb0 0a66 	vmov.f32	s0, s13
 800d19a:	eef0 0a47 	vmov.f32	s1, s14
 800d19e:	eeb0 1a67 	vmov.f32	s2, s15
 800d1a2:	f7ff f85f 	bl	800c264 <FusionVectorAdd>
 800d1a6:	eef0 6a40 	vmov.f32	s13, s0
 800d1aa:	eeb0 7a60 	vmov.f32	s14, s1
 800d1ae:	eef0 7a41 	vmov.f32	s15, s2
 800d1b2:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 800d1b6:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800d1ba:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800d1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c0:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800d1c4:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800d1c8:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800d1cc:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800d1d0:	eef0 1a46 	vmov.f32	s3, s12
 800d1d4:	eeb0 0a66 	vmov.f32	s0, s13
 800d1d8:	eef0 0a47 	vmov.f32	s1, s14
 800d1dc:	eeb0 1a67 	vmov.f32	s2, s15
 800d1e0:	f7ff f8ae 	bl	800c340 <FusionVectorMultiplyScalar>
 800d1e4:	eef0 6a40 	vmov.f32	s13, s0
 800d1e8:	eeb0 7a60 	vmov.f32	s14, s1
 800d1ec:	eef0 7a41 	vmov.f32	s15, s2
 800d1f0:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 800d1f4:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 800d1f8:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800d1fc:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 800d200:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 800d204:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 800d208:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800d20c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d210:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d214:	eef0 1a45 	vmov.f32	s3, s10
 800d218:	eeb0 2a65 	vmov.f32	s4, s11
 800d21c:	eef0 2a46 	vmov.f32	s5, s12
 800d220:	eeb0 0a66 	vmov.f32	s0, s13
 800d224:	eef0 0a47 	vmov.f32	s1, s14
 800d228:	eeb0 1a67 	vmov.f32	s2, s15
 800d22c:	f7ff f81a 	bl	800c264 <FusionVectorAdd>
 800d230:	eef0 6a40 	vmov.f32	s13, s0
 800d234:	eeb0 7a60 	vmov.f32	s14, s1
 800d238:	eef0 7a41 	vmov.f32	s15, s2
 800d23c:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800d240:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800d244:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 800d248:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800d24c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800d250:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d254:	edd7 1a01 	vldr	s3, [r7, #4]
 800d258:	eeb0 0a66 	vmov.f32	s0, s13
 800d25c:	eef0 0a47 	vmov.f32	s1, s14
 800d260:	eeb0 1a67 	vmov.f32	s2, s15
 800d264:	f7ff f86c 	bl	800c340 <FusionVectorMultiplyScalar>
 800d268:	eef0 6a40 	vmov.f32	s13, s0
 800d26c:	eeb0 7a60 	vmov.f32	s14, s1
 800d270:	eef0 7a41 	vmov.f32	s15, s2
 800d274:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 800d278:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 800d27c:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 800d280:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 800d284:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 800d288:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 800d28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28e:	ed93 6a06 	vldr	s12, [r3, #24]
 800d292:	edd3 6a07 	vldr	s13, [r3, #28]
 800d296:	ed93 7a08 	vldr	s14, [r3, #32]
 800d29a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d29e:	eeb0 2a64 	vmov.f32	s4, s9
 800d2a2:	eef0 2a45 	vmov.f32	s5, s10
 800d2a6:	eeb0 3a65 	vmov.f32	s6, s11
 800d2aa:	eeb0 0a46 	vmov.f32	s0, s12
 800d2ae:	eef0 0a66 	vmov.f32	s1, s13
 800d2b2:	eeb0 1a47 	vmov.f32	s2, s14
 800d2b6:	eef0 1a67 	vmov.f32	s3, s15
 800d2ba:	f7ff fa8e 	bl	800c7da <FusionQuaternionMultiplyVector>
 800d2be:	eeb0 6a40 	vmov.f32	s12, s0
 800d2c2:	eef0 6a60 	vmov.f32	s13, s1
 800d2c6:	eeb0 7a41 	vmov.f32	s14, s2
 800d2ca:	eef0 7a61 	vmov.f32	s15, s3
 800d2ce:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 800d2d2:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 800d2d6:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 800d2da:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 800d2de:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d2e0:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 800d2e4:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 800d2e8:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 800d2ec:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800d2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f2:	ed93 6a06 	vldr	s12, [r3, #24]
 800d2f6:	edd3 6a07 	vldr	s13, [r3, #28]
 800d2fa:	ed93 7a08 	vldr	s14, [r3, #32]
 800d2fe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d302:	eeb0 2a44 	vmov.f32	s4, s8
 800d306:	eef0 2a64 	vmov.f32	s5, s9
 800d30a:	eeb0 3a45 	vmov.f32	s6, s10
 800d30e:	eef0 3a65 	vmov.f32	s7, s11
 800d312:	eeb0 0a46 	vmov.f32	s0, s12
 800d316:	eef0 0a66 	vmov.f32	s1, s13
 800d31a:	eeb0 1a47 	vmov.f32	s2, s14
 800d31e:	eef0 1a67 	vmov.f32	s3, s15
 800d322:	f7ff f9f8 	bl	800c716 <FusionQuaternionAdd>
 800d326:	eeb0 6a40 	vmov.f32	s12, s0
 800d32a:	eef0 6a60 	vmov.f32	s13, s1
 800d32e:	eeb0 7a41 	vmov.f32	s14, s2
 800d332:	eef0 7a61 	vmov.f32	s15, s3
 800d336:	ed84 6a06 	vstr	s12, [r4, #24]
 800d33a:	edc4 6a07 	vstr	s13, [r4, #28]
 800d33e:	ed84 7a08 	vstr	s14, [r4, #32]
 800d342:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 800d346:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34a:	ed93 6a06 	vldr	s12, [r3, #24]
 800d34e:	edd3 6a07 	vldr	s13, [r3, #28]
 800d352:	ed93 7a08 	vldr	s14, [r3, #32]
 800d356:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d35a:	eeb0 0a46 	vmov.f32	s0, s12
 800d35e:	eef0 0a66 	vmov.f32	s1, s13
 800d362:	eeb0 1a47 	vmov.f32	s2, s14
 800d366:	eef0 1a67 	vmov.f32	s3, s15
 800d36a:	f7ff fad6 	bl	800c91a <FusionQuaternionNormalise>
 800d36e:	eeb0 6a40 	vmov.f32	s12, s0
 800d372:	eef0 6a60 	vmov.f32	s13, s1
 800d376:	eeb0 7a41 	vmov.f32	s14, s2
 800d37a:	eef0 7a61 	vmov.f32	s15, s3
 800d37e:	ed84 6a06 	vstr	s12, [r4, #24]
 800d382:	edc4 6a07 	vstr	s13, [r4, #28]
 800d386:	ed84 7a08 	vstr	s14, [r4, #32]
 800d38a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800d38e:	bf00      	nop
 800d390:	37fc      	adds	r7, #252	; 0xfc
 800d392:	46bd      	mov	sp, r7
 800d394:	bd90      	pop	{r4, r7, pc}

0800d396 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 800d396:	b480      	push	{r7}
 800d398:	b093      	sub	sp, #76	; 0x4c
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	dc02      	bgt.n	800d3ac <HalfGravity+0x16>
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	da03      	bge.n	800d3b2 <HalfGravity+0x1c>
 800d3aa:	e094      	b.n	800d4d6 <HalfGravity+0x140>
 800d3ac:	2b02      	cmp	r3, #2
 800d3ae:	d048      	beq.n	800d442 <HalfGravity+0xac>
 800d3b0:	e091      	b.n	800d4d6 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	ed93 7a07 	vldr	s14, [r3, #28]
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d3be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	edd3 6a06 	vldr	s13, [r3, #24]
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	edd3 7a08 	vldr	s15, [r3, #32]
 800d3ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3d2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d3d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	ed93 7a08 	vldr	s14, [r3, #32]
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d3e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	edd3 6a06 	vldr	s13, [r3, #24]
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	edd3 7a07 	vldr	s15, [r3, #28]
 800d3f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3fa:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d3fe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	ed93 7a06 	vldr	s14, [r3, #24]
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	edd3 7a06 	vldr	s15, [r3, #24]
 800d40e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d412:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d416:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d42a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d42e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 800d432:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d436:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d43a:	ca07      	ldmia	r2, {r0, r1, r2}
 800d43c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d440:	e052      	b.n	800d4e8 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	ed93 7a06 	vldr	s14, [r3, #24]
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	edd3 7a08 	vldr	s15, [r3, #32]
 800d44e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	edd3 6a07 	vldr	s13, [r3, #28]
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d45e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d462:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d466:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	ed93 7a08 	vldr	s14, [r3, #32]
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d476:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	edd3 6a06 	vldr	s13, [r3, #24]
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	edd3 7a07 	vldr	s15, [r3, #28]
 800d486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d48a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d48e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 800d492:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	ed93 7a06 	vldr	s14, [r3, #24]
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	edd3 7a06 	vldr	s15, [r3, #24]
 800d4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d4aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d4ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4be:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d4c2:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 800d4c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d4ca:	f107 0218 	add.w	r2, r7, #24
 800d4ce:	ca07      	ldmia	r2, {r0, r1, r2}
 800d4d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d4d4:	e008      	b.n	800d4e8 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800d4d6:	f04f 0300 	mov.w	r3, #0
 800d4da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4dc:	f04f 0300 	mov.w	r3, #0
 800d4e0:	643b      	str	r3, [r7, #64]	; 0x40
 800d4e2:	f04f 0300 	mov.w	r3, #0
 800d4e6:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 800d4e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d4ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4ee:	ee06 1a90 	vmov	s13, r1
 800d4f2:	ee07 2a10 	vmov	s14, r2
 800d4f6:	ee07 3a90 	vmov	s15, r3
 800d4fa:	eeb0 0a66 	vmov.f32	s0, s13
 800d4fe:	eef0 0a47 	vmov.f32	s1, s14
 800d502:	eeb0 1a67 	vmov.f32	s2, s15
 800d506:	374c      	adds	r7, #76	; 0x4c
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 800d510:	b480      	push	{r7}
 800d512:	b097      	sub	sp, #92	; 0x5c
 800d514:	af00      	add	r7, sp, #0
 800d516:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	2b02      	cmp	r3, #2
 800d51e:	f000 809a 	beq.w	800d656 <HalfMagnetic+0x146>
 800d522:	2b02      	cmp	r3, #2
 800d524:	f300 80e1 	bgt.w	800d6ea <HalfMagnetic+0x1da>
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d002      	beq.n	800d532 <HalfMagnetic+0x22>
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d048      	beq.n	800d5c2 <HalfMagnetic+0xb2>
 800d530:	e0db      	b.n	800d6ea <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	ed93 7a07 	vldr	s14, [r3, #28]
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	edd3 7a08 	vldr	s15, [r3, #32]
 800d53e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	edd3 6a06 	vldr	s13, [r3, #24]
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d54e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d552:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d556:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	ed93 7a06 	vldr	s14, [r3, #24]
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	edd3 7a06 	vldr	s15, [r3, #24]
 800d566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d56a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d56e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	edd3 6a08 	vldr	s13, [r3, #32]
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	edd3 7a08 	vldr	s15, [r3, #32]
 800d57e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d582:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d586:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	ed93 7a08 	vldr	s14, [r3, #32]
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	edd3 6a06 	vldr	s13, [r3, #24]
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	edd3 7a07 	vldr	s15, [r3, #28]
 800d5a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5aa:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d5ae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 800d5b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d5b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d5ba:	ca07      	ldmia	r2, {r0, r1, r2}
 800d5bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d5c0:	e09c      	b.n	800d6fc <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	ed93 7a06 	vldr	s14, [r3, #24]
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	edd3 7a06 	vldr	s15, [r3, #24]
 800d5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d5d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	edd3 6a07 	vldr	s13, [r3, #28]
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	edd3 7a07 	vldr	s15, [r3, #28]
 800d5e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5ea:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d5ee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	ed93 7a06 	vldr	s14, [r3, #24]
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d5fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	edd3 6a07 	vldr	s13, [r3, #28]
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	edd3 7a08 	vldr	s15, [r3, #32]
 800d60e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d612:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d616:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	ed93 7a07 	vldr	s14, [r3, #28]
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d626:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	edd3 6a06 	vldr	s13, [r3, #24]
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	edd3 7a08 	vldr	s15, [r3, #32]
 800d636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d63a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d63e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800d642:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800d646:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d64a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d64e:	ca07      	ldmia	r2, {r0, r1, r2}
 800d650:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d654:	e052      	b.n	800d6fc <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	ed93 7a07 	vldr	s14, [r3, #28]
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	edd3 7a08 	vldr	s15, [r3, #32]
 800d662:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	edd3 6a06 	vldr	s13, [r3, #24]
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d67a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800d67e:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	ed93 7a06 	vldr	s14, [r3, #24]
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	edd3 7a06 	vldr	s15, [r3, #24]
 800d68e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d692:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d696:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	edd3 6a08 	vldr	s13, [r3, #32]
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	edd3 7a08 	vldr	s15, [r3, #32]
 800d6a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6aa:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d6ae:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	ed93 7a06 	vldr	s14, [r3, #24]
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	edd3 7a07 	vldr	s15, [r3, #28]
 800d6be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	edd3 6a08 	vldr	s13, [r3, #32]
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d6ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6d2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d6d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800d6da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d6de:	f107 021c 	add.w	r2, r7, #28
 800d6e2:	ca07      	ldmia	r2, {r0, r1, r2}
 800d6e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d6e8:	e008      	b.n	800d6fc <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800d6ea:	f04f 0300 	mov.w	r3, #0
 800d6ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d6f0:	f04f 0300 	mov.w	r3, #0
 800d6f4:	653b      	str	r3, [r7, #80]	; 0x50
 800d6f6:	f04f 0300 	mov.w	r3, #0
 800d6fa:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 800d6fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d6fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d702:	ee06 1a90 	vmov	s13, r1
 800d706:	ee07 2a10 	vmov	s14, r2
 800d70a:	ee07 3a90 	vmov	s15, r3
 800d70e:	eeb0 0a66 	vmov.f32	s0, s13
 800d712:	eef0 0a47 	vmov.f32	s1, s14
 800d716:	eeb0 1a67 	vmov.f32	s2, s15
 800d71a:	375c      	adds	r7, #92	; 0x5c
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr

0800d724 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 800d724:	b580      	push	{r7, lr}
 800d726:	b090      	sub	sp, #64	; 0x40
 800d728:	af00      	add	r7, sp, #0
 800d72a:	eeb0 5a40 	vmov.f32	s10, s0
 800d72e:	eef0 5a60 	vmov.f32	s11, s1
 800d732:	eeb0 6a41 	vmov.f32	s12, s2
 800d736:	eef0 6a61 	vmov.f32	s13, s3
 800d73a:	eeb0 7a42 	vmov.f32	s14, s4
 800d73e:	eef0 7a62 	vmov.f32	s15, s5
 800d742:	ed87 5a07 	vstr	s10, [r7, #28]
 800d746:	edc7 5a08 	vstr	s11, [r7, #32]
 800d74a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800d74e:	edc7 6a04 	vstr	s13, [r7, #16]
 800d752:	ed87 7a05 	vstr	s14, [r7, #20]
 800d756:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 800d75a:	ed97 5a04 	vldr	s10, [r7, #16]
 800d75e:	edd7 5a05 	vldr	s11, [r7, #20]
 800d762:	ed97 6a06 	vldr	s12, [r7, #24]
 800d766:	edd7 6a07 	vldr	s13, [r7, #28]
 800d76a:	ed97 7a08 	vldr	s14, [r7, #32]
 800d76e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d772:	eef0 1a45 	vmov.f32	s3, s10
 800d776:	eeb0 2a65 	vmov.f32	s4, s11
 800d77a:	eef0 2a46 	vmov.f32	s5, s12
 800d77e:	eeb0 0a66 	vmov.f32	s0, s13
 800d782:	eef0 0a47 	vmov.f32	s1, s14
 800d786:	eeb0 1a67 	vmov.f32	s2, s15
 800d78a:	f7fe fed1 	bl	800c530 <FusionVectorDotProduct>
 800d78e:	eef0 7a40 	vmov.f32	s15, s0
 800d792:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79a:	d540      	bpl.n	800d81e <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 800d79c:	ed97 5a04 	vldr	s10, [r7, #16]
 800d7a0:	edd7 5a05 	vldr	s11, [r7, #20]
 800d7a4:	ed97 6a06 	vldr	s12, [r7, #24]
 800d7a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7ac:	ed97 7a08 	vldr	s14, [r7, #32]
 800d7b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d7b4:	eef0 1a45 	vmov.f32	s3, s10
 800d7b8:	eeb0 2a65 	vmov.f32	s4, s11
 800d7bc:	eef0 2a46 	vmov.f32	s5, s12
 800d7c0:	eeb0 0a66 	vmov.f32	s0, s13
 800d7c4:	eef0 0a47 	vmov.f32	s1, s14
 800d7c8:	eeb0 1a67 	vmov.f32	s2, s15
 800d7cc:	f7fe fe4a 	bl	800c464 <FusionVectorCrossProduct>
 800d7d0:	eef0 6a40 	vmov.f32	s13, s0
 800d7d4:	eeb0 7a60 	vmov.f32	s14, s1
 800d7d8:	eef0 7a41 	vmov.f32	s15, s2
 800d7dc:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800d7e0:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800d7e4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800d7e8:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800d7ec:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d7f0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d7f4:	eeb0 0a66 	vmov.f32	s0, s13
 800d7f8:	eef0 0a47 	vmov.f32	s1, s14
 800d7fc:	eeb0 1a67 	vmov.f32	s2, s15
 800d800:	f7fe ff36 	bl	800c670 <FusionVectorNormalise>
 800d804:	eef0 6a40 	vmov.f32	s13, s0
 800d808:	eeb0 7a60 	vmov.f32	s14, s1
 800d80c:	eef0 7a41 	vmov.f32	s15, s2
 800d810:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800d814:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800d818:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800d81c:	e025      	b.n	800d86a <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 800d81e:	ed97 5a04 	vldr	s10, [r7, #16]
 800d822:	edd7 5a05 	vldr	s11, [r7, #20]
 800d826:	ed97 6a06 	vldr	s12, [r7, #24]
 800d82a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d82e:	ed97 7a08 	vldr	s14, [r7, #32]
 800d832:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d836:	eef0 1a45 	vmov.f32	s3, s10
 800d83a:	eeb0 2a65 	vmov.f32	s4, s11
 800d83e:	eef0 2a46 	vmov.f32	s5, s12
 800d842:	eeb0 0a66 	vmov.f32	s0, s13
 800d846:	eef0 0a47 	vmov.f32	s1, s14
 800d84a:	eeb0 1a67 	vmov.f32	s2, s15
 800d84e:	f7fe fe09 	bl	800c464 <FusionVectorCrossProduct>
 800d852:	eef0 6a40 	vmov.f32	s13, s0
 800d856:	eeb0 7a60 	vmov.f32	s14, s1
 800d85a:	eef0 7a41 	vmov.f32	s15, s2
 800d85e:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800d862:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800d866:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 800d86a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d86c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d870:	ee06 1a90 	vmov	s13, r1
 800d874:	ee07 2a10 	vmov	s14, r2
 800d878:	ee07 3a90 	vmov	s15, r3
 800d87c:	eeb0 0a66 	vmov.f32	s0, s13
 800d880:	eef0 0a47 	vmov.f32	s1, s14
 800d884:	eeb0 1a67 	vmov.f32	s2, s15
 800d888:	3740      	adds	r7, #64	; 0x40
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 800d88e:	b480      	push	{r7}
 800d890:	b085      	sub	sp, #20
 800d892:	af00      	add	r7, sp, #0
 800d894:	60f8      	str	r0, [r7, #12]
 800d896:	60b9      	str	r1, [r7, #8]
 800d898:	607a      	str	r2, [r7, #4]
    if (value < min) {
 800d89a:	68fa      	ldr	r2, [r7, #12]
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	da01      	bge.n	800d8a6 <Clamp+0x18>
        return min;
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	e006      	b.n	800d8b4 <Clamp+0x26>
    }
    if (value > max) {
 800d8a6:	68fa      	ldr	r2, [r7, #12]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	dd01      	ble.n	800d8b2 <Clamp+0x24>
        return max;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	e000      	b.n	800d8b4 <Clamp+0x26>
    }
    return value;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3714      	adds	r7, #20
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 800d8c0:	b490      	push	{r4, r7}
 800d8c2:	b08a      	sub	sp, #40	; 0x28
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	f107 0418 	add.w	r4, r7, #24
 800d8ce:	3318      	adds	r3, #24
 800d8d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d8d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d8d6:	69b8      	ldr	r0, [r7, #24]
 800d8d8:	69f9      	ldr	r1, [r7, #28]
 800d8da:	6a3a      	ldr	r2, [r7, #32]
 800d8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8de:	ee06 0a10 	vmov	s12, r0
 800d8e2:	ee06 1a90 	vmov	s13, r1
 800d8e6:	ee07 2a10 	vmov	s14, r2
 800d8ea:	ee07 3a90 	vmov	s15, r3
}
 800d8ee:	eeb0 0a46 	vmov.f32	s0, s12
 800d8f2:	eef0 0a66 	vmov.f32	s1, s13
 800d8f6:	eeb0 1a47 	vmov.f32	s2, s14
 800d8fa:	eef0 1a67 	vmov.f32	s3, s15
 800d8fe:	3728      	adds	r7, #40	; 0x28
 800d900:	46bd      	mov	sp, r7
 800d902:	bc90      	pop	{r4, r7}
 800d904:	4770      	bx	lr

0800d906 <bmm150_init>:
 *  @brief This API is the entry point, Call this API before using other APIs.
 *  This API reads the chip-id of the sensor which is the first step to
 *  verify the sensor and updates the trim parameters of the sensor.
 */
int8_t bmm150_init(struct bmm150_dev *dev)
{
 800d906:	b580      	push	{r7, lr}
 800d908:	b084      	sub	sp, #16
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 800d90e:	2300      	movs	r3, #0
 800d910:	73bb      	strb	r3, [r7, #14]

    /* Power up the sensor from suspend to sleep mode */
    rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 800d912:	6879      	ldr	r1, [r7, #4]
 800d914:	2001      	movs	r0, #1
 800d916:	f000 fa77 	bl	800de08 <set_power_control_bit>
 800d91a:	4603      	mov	r3, r0
 800d91c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800d91e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d11f      	bne.n	800d966 <bmm150_init+0x60>
    {
        /* Start-up time delay of 3ms */
        dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	695b      	ldr	r3, [r3, #20]
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	6852      	ldr	r2, [r2, #4]
 800d92e:	4611      	mov	r1, r2
 800d930:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d934:	4798      	blx	r3

        /* Chip ID of the sensor is read */
        rslt = bmm150_get_regs(BMM150_REG_CHIP_ID, &chip_id, 1, dev);
 800d936:	f107 010e 	add.w	r1, r7, #14
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2201      	movs	r2, #1
 800d93e:	2040      	movs	r0, #64	; 0x40
 800d940:	f000 f843 	bl	800d9ca <bmm150_get_regs>
 800d944:	4603      	mov	r3, r0
 800d946:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMM150_OK)
 800d948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d10a      	bne.n	800d966 <bmm150_init+0x60>
        {
            /* Check for chip id validity */
            if (chip_id == BMM150_CHIP_ID)
 800d950:	7bbb      	ldrb	r3, [r7, #14]
 800d952:	2b32      	cmp	r3, #50	; 0x32
 800d954:	d107      	bne.n	800d966 <bmm150_init+0x60>
            {
                dev->chip_id = chip_id;
 800d956:	7bba      	ldrb	r2, [r7, #14]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	701a      	strb	r2, [r3, #0]

                /* Function to update trim values */
                rslt = read_trim_registers(dev);
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 fa8d 	bl	800de7c <read_trim_registers>
 800d962:	4603      	mov	r3, r0
 800d964:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800d966:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <bmm150_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmm150_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 800d972:	b590      	push	{r4, r7, lr}
 800d974:	b087      	sub	sp, #28
 800d976:	af00      	add	r7, sp, #0
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	607a      	str	r2, [r7, #4]
 800d97c:	603b      	str	r3, [r7, #0]
 800d97e:	4603      	mov	r3, r0
 800d980:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800d982:	6838      	ldr	r0, [r7, #0]
 800d984:	f000 fa1c 	bl	800ddc0 <null_ptr_check>
 800d988:	4603      	mov	r3, r0
 800d98a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL) && (len != 0))
 800d98c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d112      	bne.n	800d9ba <bmm150_set_regs+0x48>
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d00f      	beq.n	800d9ba <bmm150_set_regs+0x48>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d00c      	beq.n	800d9ba <bmm150_set_regs+0x48>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	691c      	ldr	r4, [r3, #16]
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	7bf8      	ldrb	r0, [r7, #15]
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	68b9      	ldr	r1, [r7, #8]
 800d9ae:	47a0      	blx	r4
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	721a      	strb	r2, [r3, #8]
 800d9b8:	e001      	b.n	800d9be <bmm150_set_regs+0x4c>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 800d9ba:	23ff      	movs	r3, #255	; 0xff
 800d9bc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800d9be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	371c      	adds	r7, #28
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd90      	pop	{r4, r7, pc}

0800d9ca <bmm150_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmm150_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 800d9ca:	b590      	push	{r4, r7, lr}
 800d9cc:	b087      	sub	sp, #28
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	607a      	str	r2, [r7, #4]
 800d9d4:	603b      	str	r3, [r7, #0]
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800d9da:	6838      	ldr	r0, [r7, #0]
 800d9dc:	f000 f9f0 	bl	800ddc0 <null_ptr_check>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL))
 800d9e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d117      	bne.n	800da1c <bmm150_get_regs+0x52>
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d014      	beq.n	800da1c <bmm150_get_regs+0x52>
    {
        if (dev->intf != BMM150_I2C_INTF)
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	785b      	ldrb	r3, [r3, #1]
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d003      	beq.n	800da02 <bmm150_get_regs+0x38>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | 0x80;
 800d9fa:	7bfb      	ldrb	r3, [r7, #15]
 800d9fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da00:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	68dc      	ldr	r4, [r3, #12]
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	7bf8      	ldrb	r0, [r7, #15]
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	68b9      	ldr	r1, [r7, #8]
 800da10:	47a0      	blx	r4
 800da12:	4603      	mov	r3, r0
 800da14:	461a      	mov	r2, r3
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	721a      	strb	r2, [r3, #8]
 800da1a:	e001      	b.n	800da20 <bmm150_get_regs+0x56>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 800da1c:	23ff      	movs	r3, #255	; 0xff
 800da1e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800da20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da24:	4618      	mov	r0, r3
 800da26:	371c      	adds	r7, #28
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd90      	pop	{r4, r7, pc}

0800da2c <bmm150_set_op_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bmm150_set_op_mode(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t pwr_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800da36:	6838      	ldr	r0, [r7, #0]
 800da38:	f000 f9c2 	bl	800ddc0 <null_ptr_check>
 800da3c:	4603      	mov	r3, r0
 800da3e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800da40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d150      	bne.n	800daea <bmm150_set_op_mode+0xbe>
    {
        pwr_mode = settings->pwr_mode;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	785b      	ldrb	r3, [r3, #1]
 800da4c:	73bb      	strb	r3, [r7, #14]

        /* Select the power mode to set */
        switch (pwr_mode)
 800da4e:	7bbb      	ldrb	r3, [r7, #14]
 800da50:	2b04      	cmp	r3, #4
 800da52:	d847      	bhi.n	800dae4 <bmm150_set_op_mode+0xb8>
 800da54:	a201      	add	r2, pc, #4	; (adr r2, 800da5c <bmm150_set_op_mode+0x30>)
 800da56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da5a:	bf00      	nop
 800da5c:	0800da71 	.word	0x0800da71
 800da60:	0800da93 	.word	0x0800da93
 800da64:	0800dae5 	.word	0x0800dae5
 800da68:	0800dab5 	.word	0x0800dab5
 800da6c:	0800dad7 	.word	0x0800dad7
            case BMM150_POWERMODE_NORMAL:

                /* If the sensor is in suspend mode
                 * put the device to sleep mode
                 */
                rslt = suspend_to_sleep_mode(dev);
 800da70:	6838      	ldr	r0, [r7, #0]
 800da72:	f000 fac7 	bl	800e004 <suspend_to_sleep_mode>
 800da76:	4603      	mov	r3, r0
 800da78:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMM150_OK)
 800da7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d135      	bne.n	800daee <bmm150_set_op_mode+0xc2>
                {
                    /* write the op mode */
                    rslt = write_op_mode(pwr_mode, dev);
 800da82:	7bbb      	ldrb	r3, [r7, #14]
 800da84:	6839      	ldr	r1, [r7, #0]
 800da86:	4618      	mov	r0, r3
 800da88:	f000 fa8b 	bl	800dfa2 <write_op_mode>
 800da8c:	4603      	mov	r3, r0
 800da8e:	73fb      	strb	r3, [r7, #15]
                }

                break;
 800da90:	e02d      	b.n	800daee <bmm150_set_op_mode+0xc2>
            case BMM150_POWERMODE_FORCED:

                /* If the sensor is in suspend mode
                 * put the device to sleep mode
                 */
                rslt = suspend_to_sleep_mode(dev);
 800da92:	6838      	ldr	r0, [r7, #0]
 800da94:	f000 fab6 	bl	800e004 <suspend_to_sleep_mode>
 800da98:	4603      	mov	r3, r0
 800da9a:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMM150_OK)
 800da9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d126      	bne.n	800daf2 <bmm150_set_op_mode+0xc6>
                {
                    /* write the op mode */
                    rslt = write_op_mode(pwr_mode, dev);
 800daa4:	7bbb      	ldrb	r3, [r7, #14]
 800daa6:	6839      	ldr	r1, [r7, #0]
 800daa8:	4618      	mov	r0, r3
 800daaa:	f000 fa7a 	bl	800dfa2 <write_op_mode>
 800daae:	4603      	mov	r3, r0
 800dab0:	73fb      	strb	r3, [r7, #15]
                }

                break;
 800dab2:	e01e      	b.n	800daf2 <bmm150_set_op_mode+0xc6>
            case BMM150_POWERMODE_SLEEP:

                /* If the sensor is in suspend mode
                 * put the device to sleep mode
                 */
                rslt = suspend_to_sleep_mode(dev);
 800dab4:	6838      	ldr	r0, [r7, #0]
 800dab6:	f000 faa5 	bl	800e004 <suspend_to_sleep_mode>
 800daba:	4603      	mov	r3, r0
 800dabc:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMM150_OK)
 800dabe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d117      	bne.n	800daf6 <bmm150_set_op_mode+0xca>
                {
                    /* write the op mode */
                    rslt = write_op_mode(pwr_mode, dev);
 800dac6:	7bbb      	ldrb	r3, [r7, #14]
 800dac8:	6839      	ldr	r1, [r7, #0]
 800daca:	4618      	mov	r0, r3
 800dacc:	f000 fa69 	bl	800dfa2 <write_op_mode>
 800dad0:	4603      	mov	r3, r0
 800dad2:	73fb      	strb	r3, [r7, #15]
                }

                break;
 800dad4:	e00f      	b.n	800daf6 <bmm150_set_op_mode+0xca>
            case BMM150_POWERMODE_SUSPEND:

                /* Set the power control bit to zero */
                rslt = set_power_control_bit(BMM150_POWER_CNTRL_DISABLE, dev);
 800dad6:	6839      	ldr	r1, [r7, #0]
 800dad8:	2000      	movs	r0, #0
 800dada:	f000 f995 	bl	800de08 <set_power_control_bit>
 800dade:	4603      	mov	r3, r0
 800dae0:	73fb      	strb	r3, [r7, #15]
                break;
 800dae2:	e009      	b.n	800daf8 <bmm150_set_op_mode+0xcc>
            default:
                rslt = BMM150_E_INVALID_CONFIG;
 800dae4:	23fd      	movs	r3, #253	; 0xfd
 800dae6:	73fb      	strb	r3, [r7, #15]
                break;
 800dae8:	e006      	b.n	800daf8 <bmm150_set_op_mode+0xcc>
        }
    }
 800daea:	bf00      	nop
 800daec:	e004      	b.n	800daf8 <bmm150_set_op_mode+0xcc>
                break;
 800daee:	bf00      	nop
 800daf0:	e002      	b.n	800daf8 <bmm150_set_op_mode+0xcc>
                break;
 800daf2:	bf00      	nop
 800daf4:	e000      	b.n	800daf8 <bmm150_set_op_mode+0xcc>
                break;
 800daf6:	bf00      	nop

    return rslt;
 800daf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3710      	adds	r7, #16
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <bmm150_set_presetmode>:

/*!
 * @brief This API is used to set the preset mode of the sensor.
 */
int8_t bmm150_set_presetmode(struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t preset_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800db0e:	6838      	ldr	r0, [r7, #0]
 800db10:	f000 f956 	bl	800ddc0 <null_ptr_check>
 800db14:	4603      	mov	r3, r0
 800db16:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800db18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d166      	bne.n	800dbee <bmm150_set_presetmode+0xea>
    {
        preset_mode = settings->preset_mode;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	795b      	ldrb	r3, [r3, #5]
 800db24:	73bb      	strb	r3, [r7, #14]

        switch (preset_mode)
 800db26:	7bbb      	ldrb	r3, [r7, #14]
 800db28:	3b01      	subs	r3, #1
 800db2a:	2b04      	cmp	r3, #4
 800db2c:	d85c      	bhi.n	800dbe8 <bmm150_set_presetmode+0xe4>
 800db2e:	a201      	add	r2, pc, #4	; (adr r2, 800db34 <bmm150_set_presetmode+0x30>)
 800db30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db34:	0800db49 	.word	0x0800db49
 800db38:	0800db69 	.word	0x0800db69
 800db3c:	0800db89 	.word	0x0800db89
 800db40:	0800dba9 	.word	0x0800dba9
 800db44:	0800dbc9 	.word	0x0800dbc9
            case BMM150_PRESETMODE_LOWPOWER:

                /* Set the data rate x,y,z repetition
                 * for Low Power mode
                 */
                settings->data_rate = BMM150_DATA_RATE_10HZ;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_LOWPOWER;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2201      	movs	r2, #1
 800db52:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_LOWPOWER;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2201      	movs	r2, #1
 800db58:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800db5a:	6839      	ldr	r1, [r7, #0]
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 fad6 	bl	800e10e <set_odr_xyz_rep>
 800db62:	4603      	mov	r3, r0
 800db64:	73fb      	strb	r3, [r7, #15]
                break;
 800db66:	e043      	b.n	800dbf0 <bmm150_set_presetmode+0xec>
            case BMM150_PRESETMODE_REGULAR:

                /* Set the data rate x,y,z repetition
                 * for Regular mode
                 */
                settings->data_rate = BMM150_DATA_RATE_10HZ;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_REGULAR;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2204      	movs	r2, #4
 800db72:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_REGULAR;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2207      	movs	r2, #7
 800db78:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800db7a:	6839      	ldr	r1, [r7, #0]
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f000 fac6 	bl	800e10e <set_odr_xyz_rep>
 800db82:	4603      	mov	r3, r0
 800db84:	73fb      	strb	r3, [r7, #15]
                break;
 800db86:	e033      	b.n	800dbf0 <bmm150_set_presetmode+0xec>
            case BMM150_PRESETMODE_HIGHACCURACY:

                /* Set the data rate x,y,z repetition
                 * for High Accuracy mode *
                 */
                settings->data_rate = BMM150_DATA_RATE_20HZ;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2205      	movs	r2, #5
 800db8c:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_HIGHACCURACY;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2217      	movs	r2, #23
 800db92:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_HIGHACCURACY;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2229      	movs	r2, #41	; 0x29
 800db98:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800db9a:	6839      	ldr	r1, [r7, #0]
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 fab6 	bl	800e10e <set_odr_xyz_rep>
 800dba2:	4603      	mov	r3, r0
 800dba4:	73fb      	strb	r3, [r7, #15]
                break;
 800dba6:	e023      	b.n	800dbf0 <bmm150_set_presetmode+0xec>
            case BMM150_PRESETMODE_ENHANCED:

                /* Set the data rate x,y,z repetition
                 * for Enhanced Accuracy mode
                 */
                settings->data_rate = BMM150_DATA_RATE_10HZ;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_ENHANCED;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2207      	movs	r2, #7
 800dbb2:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_ENHANCED;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	220d      	movs	r2, #13
 800dbb8:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800dbba:	6839      	ldr	r1, [r7, #0]
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 faa6 	bl	800e10e <set_odr_xyz_rep>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	73fb      	strb	r3, [r7, #15]
                break;
 800dbc6:	e013      	b.n	800dbf0 <bmm150_set_presetmode+0xec>
            case BMM150_PRESETMODE_FORCED200:

				/* Set the data rate x,y,z repetition
				 * for Enhanced Accuracy mode
				 */
				settings->data_rate = BMM150_DATA_RATE_30HZ;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2207      	movs	r2, #7
 800dbcc:	709a      	strb	r2, [r3, #2]
				settings->xy_rep = BMM150_REPXY_FORCED200;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2202      	movs	r2, #2
 800dbd2:	70da      	strb	r2, [r3, #3]
				settings->z_rep = BMM150_REPZ_FORCED200;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2202      	movs	r2, #2
 800dbd8:	711a      	strb	r2, [r3, #4]
				rslt = set_odr_xyz_rep(settings, dev);
 800dbda:	6839      	ldr	r1, [r7, #0]
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 fa96 	bl	800e10e <set_odr_xyz_rep>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	73fb      	strb	r3, [r7, #15]
				break;
 800dbe6:	e003      	b.n	800dbf0 <bmm150_set_presetmode+0xec>
            default:
                rslt = BMM150_E_INVALID_CONFIG;
 800dbe8:	23fd      	movs	r3, #253	; 0xfd
 800dbea:	73fb      	strb	r3, [r7, #15]
                break;
 800dbec:	e000      	b.n	800dbf0 <bmm150_set_presetmode+0xec>
        }
    }
 800dbee:	bf00      	nop

    return rslt;
 800dbf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3710      	adds	r7, #16
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <bmm150_set_sensor_settings>:
 * and the dev structure configuration
 */
int8_t bmm150_set_sensor_settings(uint16_t desired_settings,
                                  const struct bmm150_settings *settings,
                                  struct bmm150_dev *dev)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b086      	sub	sp, #24
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	4603      	mov	r3, r0
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	607a      	str	r2, [r7, #4]
 800dc08:	81fb      	strh	r3, [r7, #14]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 f8d8 	bl	800ddc0 <null_ptr_check>
 800dc10:	4603      	mov	r3, r0
 800dc12:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800dc14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d14e      	bne.n	800dcba <bmm150_set_sensor_settings+0xbe>
    {
        if (are_settings_changed(MODE_SETTING_SEL, desired_settings))
 800dc1c:	89fb      	ldrh	r3, [r7, #14]
 800dc1e:	4619      	mov	r1, r3
 800dc20:	200f      	movs	r0, #15
 800dc22:	f000 faca 	bl	800e1ba <are_settings_changed>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d007      	beq.n	800dc3c <bmm150_set_sensor_settings+0x40>
        {
            /* ODR, Control measurement, XY,Z repetition values */
            rslt = mode_settings(desired_settings, settings, dev);
 800dc2c:	89fb      	ldrh	r3, [r7, #14]
 800dc2e:	687a      	ldr	r2, [r7, #4]
 800dc30:	68b9      	ldr	r1, [r7, #8]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 fadb 	bl	800e1ee <mode_settings>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	75fb      	strb	r3, [r7, #23]
        }

        if ((!rslt) && are_settings_changed(INTERRUPT_PIN_SETTING_SEL, desired_settings))
 800dc3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d110      	bne.n	800dc66 <bmm150_set_sensor_settings+0x6a>
 800dc44:	89fb      	ldrh	r3, [r7, #14]
 800dc46:	4619      	mov	r1, r3
 800dc48:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 800dc4c:	f000 fab5 	bl	800e1ba <are_settings_changed>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d007      	beq.n	800dc66 <bmm150_set_sensor_settings+0x6a>
        {
            /* Interrupt pin settings */
            rslt = interrupt_pin_settings(desired_settings, settings, dev);
 800dc56:	89fb      	ldrh	r3, [r7, #14]
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	68b9      	ldr	r1, [r7, #8]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f000 fb01 	bl	800e264 <interrupt_pin_settings>
 800dc62:	4603      	mov	r3, r0
 800dc64:	75fb      	strb	r3, [r7, #23]
        }

        if ((!rslt) && are_settings_changed(INTERRUPT_CONFIG_SEL, desired_settings))
 800dc66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d110      	bne.n	800dc90 <bmm150_set_sensor_settings+0x94>
 800dc6e:	89fb      	ldrh	r3, [r7, #14]
 800dc70:	4619      	mov	r1, r3
 800dc72:	f44f 50f0 	mov.w	r0, #7680	; 0x1e00
 800dc76:	f000 faa0 	bl	800e1ba <are_settings_changed>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d007      	beq.n	800dc90 <bmm150_set_sensor_settings+0x94>
        {
            /* Interrupt configuration settings */
            rslt = interrupt_config(desired_settings, settings, dev);
 800dc80:	89fb      	ldrh	r3, [r7, #14]
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	68b9      	ldr	r1, [r7, #8]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f000 fb7a 	bl	800e380 <interrupt_config>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	75fb      	strb	r3, [r7, #23]
        }

        if ((!rslt) && are_settings_changed(INTERRUPT_THRESHOLD_CONFIG_SEL, desired_settings))
 800dc90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d110      	bne.n	800dcba <bmm150_set_sensor_settings+0xbe>
 800dc98:	89fb      	ldrh	r3, [r7, #14]
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 800dca0:	f000 fa8b 	bl	800e1ba <are_settings_changed>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d007      	beq.n	800dcba <bmm150_set_sensor_settings+0xbe>
        {
            /* Interrupt threshold settings */
            rslt = interrupt_threshold_settings(desired_settings, settings, dev);
 800dcaa:	89fb      	ldrh	r3, [r7, #14]
 800dcac:	687a      	ldr	r2, [r7, #4]
 800dcae:	68b9      	ldr	r1, [r7, #8]
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f000 fbdf 	bl	800e474 <interrupt_threshold_settings>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800dcba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3718      	adds	r7, #24
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <bmm150_read_mag_data>:
 * @brief This API is used to read the magnetometer data from registers
 * 0x42 to 0x49 and update the dev structure with the
 * compensated mag data in micro-tesla.
 */
int8_t bmm150_read_mag_data(struct bmm150_mag_data *mag_data, struct bmm150_dev *dev)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b088      	sub	sp, #32
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    int16_t msb_data;
    uint8_t reg_data[BMM150_LEN_XYZR_DATA] = { 0 };
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	617b      	str	r3, [r7, #20]
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	61bb      	str	r3, [r7, #24]
    struct bmm150_raw_mag_data raw_mag_data;

    /* Read the mag data registers */
    rslt = bmm150_get_regs(BMM150_REG_DATA_X_LSB, reg_data, BMM150_LEN_XYZR_DATA, dev);
 800dcd8:	f107 0114 	add.w	r1, r7, #20
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	2208      	movs	r2, #8
 800dce0:	2042      	movs	r0, #66	; 0x42
 800dce2:	f7ff fe72 	bl	800d9ca <bmm150_get_regs>
 800dce6:	4603      	mov	r3, r0
 800dce8:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800dcea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d160      	bne.n	800ddb4 <bmm150_read_mag_data+0xee>
    {
        /* Mag X axis data */
        reg_data[0] = BMM150_GET_BITS(reg_data[0], BMM150_DATA_X);
 800dcf2:	7d3b      	ldrb	r3, [r7, #20]
 800dcf4:	08db      	lsrs	r3, r3, #3
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	753b      	strb	r3, [r7, #20]

        /* Shift the MSB data to left by 5 bits */
        /* Multiply by 32 to get the shift left by 5 value */
        msb_data = ((int16_t)((int8_t)reg_data[1])) * 32;
 800dcfa:	7d7b      	ldrb	r3, [r7, #21]
 800dcfc:	b25b      	sxtb	r3, r3
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	015b      	lsls	r3, r3, #5
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	83bb      	strh	r3, [r7, #28]

        /* Raw mag X axis data */
        raw_mag_data.raw_datax = (int16_t)(msb_data | reg_data[0]);
 800dd06:	7d3b      	ldrb	r3, [r7, #20]
 800dd08:	b21a      	sxth	r2, r3
 800dd0a:	8bbb      	ldrh	r3, [r7, #28]
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	b21b      	sxth	r3, r3
 800dd10:	81bb      	strh	r3, [r7, #12]

        /* Mag Y axis data */
        reg_data[2] = BMM150_GET_BITS(reg_data[2], BMM150_DATA_Y);
 800dd12:	7dbb      	ldrb	r3, [r7, #22]
 800dd14:	08db      	lsrs	r3, r3, #3
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	75bb      	strb	r3, [r7, #22]

        /* Shift the MSB data to left by 5 bits */
        /* Multiply by 32 to get the shift left by 5 value */
        msb_data = ((int16_t)((int8_t)reg_data[3])) * 32;
 800dd1a:	7dfb      	ldrb	r3, [r7, #23]
 800dd1c:	b25b      	sxtb	r3, r3
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	015b      	lsls	r3, r3, #5
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	83bb      	strh	r3, [r7, #28]

        /* Raw mag Y axis data */
        raw_mag_data.raw_datay = (int16_t)(msb_data | reg_data[2]);
 800dd26:	7dbb      	ldrb	r3, [r7, #22]
 800dd28:	b21a      	sxth	r2, r3
 800dd2a:	8bbb      	ldrh	r3, [r7, #28]
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	b21b      	sxth	r3, r3
 800dd30:	81fb      	strh	r3, [r7, #14]

        /* Mag Z axis data */
        reg_data[4] = BMM150_GET_BITS(reg_data[4], BMM150_DATA_Z);
 800dd32:	7e3b      	ldrb	r3, [r7, #24]
 800dd34:	085b      	lsrs	r3, r3, #1
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	763b      	strb	r3, [r7, #24]

        /* Shift the MSB data to left by 7 bits */
        /* Multiply by 128 to get the shift left by 7 value */
        msb_data = ((int16_t)((int8_t)reg_data[5])) * 128;
 800dd3a:	7e7b      	ldrb	r3, [r7, #25]
 800dd3c:	b25b      	sxtb	r3, r3
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	01db      	lsls	r3, r3, #7
 800dd42:	b29b      	uxth	r3, r3
 800dd44:	83bb      	strh	r3, [r7, #28]

        /* Raw mag Z axis data */
        raw_mag_data.raw_dataz = (int16_t)(msb_data | reg_data[4]);
 800dd46:	7e3b      	ldrb	r3, [r7, #24]
 800dd48:	b21a      	sxth	r2, r3
 800dd4a:	8bbb      	ldrh	r3, [r7, #28]
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	b21b      	sxth	r3, r3
 800dd50:	823b      	strh	r3, [r7, #16]

        /* Mag R-HALL data */
        reg_data[6] = BMM150_GET_BITS(reg_data[6], BMM150_DATA_RHALL);
 800dd52:	7ebb      	ldrb	r3, [r7, #26]
 800dd54:	089b      	lsrs	r3, r3, #2
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	76bb      	strb	r3, [r7, #26]
        raw_mag_data.raw_data_r = (uint16_t)(((uint16_t)reg_data[7] << 6) | reg_data[6]);
 800dd5a:	7efb      	ldrb	r3, [r7, #27]
 800dd5c:	019b      	lsls	r3, r3, #6
 800dd5e:	b21a      	sxth	r2, r3
 800dd60:	7ebb      	ldrb	r3, [r7, #26]
 800dd62:	b21b      	sxth	r3, r3
 800dd64:	4313      	orrs	r3, r2
 800dd66:	b21b      	sxth	r3, r3
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	827b      	strh	r3, [r7, #18]

        /* Compensated Mag X data in int16_t format */
        mag_data->x = compensate_x(raw_mag_data.raw_datax, raw_mag_data.raw_data_r, dev);
 800dd6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dd70:	8a79      	ldrh	r1, [r7, #18]
 800dd72:	683a      	ldr	r2, [r7, #0]
 800dd74:	4618      	mov	r0, r3
 800dd76:	f000 fbaf 	bl	800e4d8 <compensate_x>
 800dd7a:	eef0 7a40 	vmov.f32	s15, s0
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	edc3 7a00 	vstr	s15, [r3]

        /* Compensated Mag Y data in int16_t format */
        mag_data->y = compensate_y(raw_mag_data.raw_datay, raw_mag_data.raw_data_r, dev);
 800dd84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dd88:	8a79      	ldrh	r1, [r7, #18]
 800dd8a:	683a      	ldr	r2, [r7, #0]
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f000 fc51 	bl	800e634 <compensate_y>
 800dd92:	eef0 7a40 	vmov.f32	s15, s0
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	edc3 7a01 	vstr	s15, [r3, #4]

        /* Compensated Mag Z data in int16_t format */
        mag_data->z = compensate_z(raw_mag_data.raw_dataz, raw_mag_data.raw_data_r, dev);
 800dd9c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dda0:	8a79      	ldrh	r1, [r7, #18]
 800dda2:	683a      	ldr	r2, [r7, #0]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f000 fcf3 	bl	800e790 <compensate_z>
 800ddaa:	eef0 7a40 	vmov.f32	s15, s0
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    return rslt;
 800ddb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3720      	adds	r7, #32
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmm150_dev *dev)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b085      	sub	sp, #20
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00f      	beq.n	800ddee <null_ptr_check+0x2e>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d00b      	beq.n	800ddee <null_ptr_check+0x2e>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	691b      	ldr	r3, [r3, #16]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d007      	beq.n	800ddee <null_ptr_check+0x2e>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	695b      	ldr	r3, [r3, #20]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d003      	beq.n	800ddee <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d102      	bne.n	800ddf4 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMM150_E_NULL_PTR;
 800ddee:	23ff      	movs	r3, #255	; 0xff
 800ddf0:	73fb      	strb	r3, [r7, #15]
 800ddf2:	e001      	b.n	800ddf8 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMM150_OK;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800ddf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3714      	adds	r7, #20
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <set_power_control_bit>:

/*!
 * @brief This internal API sets/resets the power control bit of 0x4B register.
 */
static int8_t set_power_control_bit(uint8_t pwrcntrl_bit, struct bmm150_dev *dev)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	4603      	mov	r3, r0
 800de10:	6039      	str	r1, [r7, #0]
 800de12:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data = 0;
 800de14:	2300      	movs	r3, #0
 800de16:	73bb      	strb	r3, [r7, #14]

    /* Power control register 0x4B is read */
    rslt = bmm150_get_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 800de18:	f107 010e 	add.w	r1, r7, #14
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	2201      	movs	r2, #1
 800de20:	204b      	movs	r0, #75	; 0x4b
 800de22:	f7ff fdd2 	bl	800d9ca <bmm150_get_regs>
 800de26:	4603      	mov	r3, r0
 800de28:	73fb      	strb	r3, [r7, #15]

    /* Proceed if everything is fine until now */
    if (rslt == BMM150_OK)
 800de2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d11e      	bne.n	800de70 <set_power_control_bit+0x68>
    {
        /* Sets the value of power control bit */
        reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_PWR_CNTRL, pwrcntrl_bit);
 800de32:	7bbb      	ldrb	r3, [r7, #14]
 800de34:	b25b      	sxtb	r3, r3
 800de36:	f023 0301 	bic.w	r3, r3, #1
 800de3a:	b25a      	sxtb	r2, r3
 800de3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de40:	f003 0301 	and.w	r3, r3, #1
 800de44:	b25b      	sxtb	r3, r3
 800de46:	4313      	orrs	r3, r2
 800de48:	b25b      	sxtb	r3, r3
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 800de4e:	f107 010e 	add.w	r1, r7, #14
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	2201      	movs	r2, #1
 800de56:	204b      	movs	r0, #75	; 0x4b
 800de58:	f7ff fd8b 	bl	800d972 <bmm150_set_regs>
 800de5c:	4603      	mov	r3, r0
 800de5e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 800de60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d103      	bne.n	800de70 <set_power_control_bit+0x68>
        {
            /* Store the power control bit
             * value in dev structure
             */
            dev->pwr_cntrl_bit = pwrcntrl_bit;
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	79fa      	ldrb	r2, [r7, #7]
 800de6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        }
    }

    return rslt;
 800de70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de74:	4618      	mov	r0, r3
 800de76:	3710      	adds	r7, #16
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <read_trim_registers>:
/*!
 * @brief This internal API reads the trim registers of the sensor and stores
 * the trim values in the "trim_data" of device structure.
 */
static int8_t read_trim_registers(struct bmm150_dev *dev)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b088      	sub	sp, #32
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t trim_x1y1[2] = { 0 };
 800de84:	2300      	movs	r3, #0
 800de86:	833b      	strh	r3, [r7, #24]
    uint8_t trim_xyz_data[4] = { 0 };
 800de88:	2300      	movs	r3, #0
 800de8a:	617b      	str	r3, [r7, #20]
    uint8_t trim_xy1xy2[10] = { 0 };
 800de8c:	2300      	movs	r3, #0
 800de8e:	60bb      	str	r3, [r7, #8]
 800de90:	f107 030c 	add.w	r3, r7, #12
 800de94:	2200      	movs	r2, #0
 800de96:	601a      	str	r2, [r3, #0]
 800de98:	809a      	strh	r2, [r3, #4]
    uint16_t temp_msb = 0;
 800de9a:	2300      	movs	r3, #0
 800de9c:	83bb      	strh	r3, [r7, #28]

    /* Trim register value is read */
    rslt = bmm150_get_regs(BMM150_DIG_X1, trim_x1y1, 2, dev);
 800de9e:	f107 0118 	add.w	r1, r7, #24
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2202      	movs	r2, #2
 800dea6:	205d      	movs	r0, #93	; 0x5d
 800dea8:	f7ff fd8f 	bl	800d9ca <bmm150_get_regs>
 800deac:	4603      	mov	r3, r0
 800deae:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800deb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d16e      	bne.n	800df96 <read_trim_registers+0x11a>
    {
        rslt = bmm150_get_regs(BMM150_DIG_Z4_LSB, trim_xyz_data, 4, dev);
 800deb8:	f107 0114 	add.w	r1, r7, #20
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2204      	movs	r2, #4
 800dec0:	2062      	movs	r0, #98	; 0x62
 800dec2:	f7ff fd82 	bl	800d9ca <bmm150_get_regs>
 800dec6:	4603      	mov	r3, r0
 800dec8:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMM150_OK)
 800deca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d161      	bne.n	800df96 <read_trim_registers+0x11a>
        {
            rslt = bmm150_get_regs(BMM150_DIG_Z2_LSB, trim_xy1xy2, 10, dev);
 800ded2:	f107 0108 	add.w	r1, r7, #8
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	220a      	movs	r2, #10
 800deda:	2068      	movs	r0, #104	; 0x68
 800dedc:	f7ff fd75 	bl	800d9ca <bmm150_get_regs>
 800dee0:	4603      	mov	r3, r0
 800dee2:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMM150_OK)
 800dee4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d154      	bne.n	800df96 <read_trim_registers+0x11a>
            {
                /* Trim data which is read is updated
                 * in the device structure
                 */
                dev->trim_data.dig_x1 = (int8_t)trim_x1y1[0];//
 800deec:	7e3b      	ldrb	r3, [r7, #24]
 800deee:	b25a      	sxtb	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	761a      	strb	r2, [r3, #24]
                dev->trim_data.dig_y1 = (int8_t)trim_x1y1[1];//
 800def4:	7e7b      	ldrb	r3, [r7, #25]
 800def6:	b25a      	sxtb	r2, r3
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	765a      	strb	r2, [r3, #25]
                dev->trim_data.dig_x2 = (int8_t)trim_xyz_data[2];//
 800defc:	7dbb      	ldrb	r3, [r7, #22]
 800defe:	b25a      	sxtb	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	769a      	strb	r2, [r3, #26]
                dev->trim_data.dig_y2 = (int8_t)trim_xyz_data[3];//
 800df04:	7dfb      	ldrb	r3, [r7, #23]
 800df06:	b25a      	sxtb	r2, r3
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	76da      	strb	r2, [r3, #27]
                temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
 800df0c:	7afb      	ldrb	r3, [r7, #11]
 800df0e:	b29b      	uxth	r3, r3
 800df10:	021b      	lsls	r3, r3, #8
 800df12:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);//
 800df14:	7abb      	ldrb	r3, [r7, #10]
 800df16:	b29a      	uxth	r2, r3
 800df18:	8bbb      	ldrh	r3, [r7, #28]
 800df1a:	4313      	orrs	r3, r2
 800df1c:	b29a      	uxth	r2, r3
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	839a      	strh	r2, [r3, #28]
                temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
 800df22:	7a7b      	ldrb	r3, [r7, #9]
 800df24:	b29b      	uxth	r3, r3
 800df26:	021b      	lsls	r3, r3, #8
 800df28:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);//
 800df2a:	7a3b      	ldrb	r3, [r7, #8]
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	8bbb      	ldrh	r3, [r7, #28]
 800df30:	4313      	orrs	r3, r2
 800df32:	b29b      	uxth	r3, r3
 800df34:	b21a      	sxth	r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	83da      	strh	r2, [r3, #30]
                temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
 800df3a:	7bfb      	ldrb	r3, [r7, #15]
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	021b      	lsls	r3, r3, #8
 800df40:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);//
 800df42:	7bbb      	ldrb	r3, [r7, #14]
 800df44:	b29a      	uxth	r2, r3
 800df46:	8bbb      	ldrh	r3, [r7, #28]
 800df48:	4313      	orrs	r3, r2
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	b21a      	sxth	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	841a      	strh	r2, [r3, #32]
                temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
 800df52:	7d7b      	ldrb	r3, [r7, #21]
 800df54:	b29b      	uxth	r3, r3
 800df56:	021b      	lsls	r3, r3, #8
 800df58:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);//
 800df5a:	7d3b      	ldrb	r3, [r7, #20]
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	8bbb      	ldrh	r3, [r7, #28]
 800df60:	4313      	orrs	r3, r2
 800df62:	b29b      	uxth	r3, r3
 800df64:	b21a      	sxth	r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	845a      	strh	r2, [r3, #34]	; 0x22
                dev->trim_data.dig_xy1 = trim_xy1xy2[9];//
 800df6a:	7c7a      	ldrb	r2, [r7, #17]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                dev->trim_data.dig_xy2 = (int8_t)trim_xy1xy2[8];//
 800df72:	7c3b      	ldrb	r3, [r7, #16]
 800df74:	b25a      	sxtb	r2, r3
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
 800df7c:	7b7b      	ldrb	r3, [r7, #13]
 800df7e:	021b      	lsls	r3, r3, #8
 800df80:	b29b      	uxth	r3, r3
 800df82:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800df86:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);//
 800df88:	7b3b      	ldrb	r3, [r7, #12]
 800df8a:	b29a      	uxth	r2, r3
 800df8c:	8bbb      	ldrh	r3, [r7, #28]
 800df8e:	4313      	orrs	r3, r2
 800df90:	b29a      	uxth	r2, r3
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	84da      	strh	r2, [r3, #38]	; 0x26
            }
        }
    }

    return rslt;
 800df96:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3720      	adds	r7, #32
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <write_op_mode>:
/*!
 * @brief This internal API writes the op_mode value in the Opmode bits
 * (bits 1 and 2) of 0x4C register.
 */
static int8_t write_op_mode(uint8_t op_mode, struct bmm150_dev *dev)
{
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b084      	sub	sp, #16
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	6039      	str	r1, [r7, #0]
 800dfac:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data;

    /* Read the 0x4C register */
    rslt = bmm150_get_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800dfae:	f107 010e 	add.w	r1, r7, #14
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	204c      	movs	r0, #76	; 0x4c
 800dfb8:	f7ff fd07 	bl	800d9ca <bmm150_get_regs>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800dfc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d117      	bne.n	800dff8 <write_op_mode+0x56>
    {
        /* Set the op_mode value in Opmode bits of 0x4C */
        reg_data = BMM150_SET_BITS(reg_data, BMM150_OP_MODE, op_mode);
 800dfc8:	7bbb      	ldrb	r3, [r7, #14]
 800dfca:	b25b      	sxtb	r3, r3
 800dfcc:	f023 0306 	bic.w	r3, r3, #6
 800dfd0:	b25a      	sxtb	r2, r3
 800dfd2:	79fb      	ldrb	r3, [r7, #7]
 800dfd4:	005b      	lsls	r3, r3, #1
 800dfd6:	b25b      	sxtb	r3, r3
 800dfd8:	f003 0306 	and.w	r3, r3, #6
 800dfdc:	b25b      	sxtb	r3, r3
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	b25b      	sxtb	r3, r3
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800dfe6:	f107 010e 	add.w	r1, r7, #14
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	2201      	movs	r2, #1
 800dfee:	204c      	movs	r0, #76	; 0x4c
 800dff0:	f7ff fcbf 	bl	800d972 <bmm150_set_regs>
 800dff4:	4603      	mov	r3, r0
 800dff6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800dff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3710      	adds	r7, #16
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <suspend_to_sleep_mode>:
/*!
 * @brief This internal API sets the device from suspend to sleep mode
 * by setting the power control bit to '1' of 0x4B register
 */
static int8_t suspend_to_sleep_mode(struct bmm150_dev *dev)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f7ff fed7 	bl	800ddc0 <null_ptr_check>
 800e012:	4603      	mov	r3, r0
 800e014:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800e016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d112      	bne.n	800e044 <suspend_to_sleep_mode+0x40>
    {
        if (dev->pwr_cntrl_bit == BMM150_POWER_CNTRL_DISABLE)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800e024:	2b00      	cmp	r3, #0
 800e026:	d10d      	bne.n	800e044 <suspend_to_sleep_mode+0x40>
        {
            rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 800e028:	6879      	ldr	r1, [r7, #4]
 800e02a:	2001      	movs	r0, #1
 800e02c:	f7ff feec 	bl	800de08 <set_power_control_bit>
 800e030:	4603      	mov	r3, r0
 800e032:	73fb      	strb	r3, [r7, #15]

            /* Start-up time delay of 3ms */
            dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	695b      	ldr	r3, [r3, #20]
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	6852      	ldr	r2, [r2, #4]
 800e03c:	4611      	mov	r1, r2
 800e03e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800e042:	4798      	blx	r3
        }
    }

    return rslt;
 800e044:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3710      	adds	r7, #16
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <set_xy_rep>:

/*!
 * @brief This internal API sets the xy repetition value in the 0x51 register.
 */
static int8_t set_xy_rep(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t rep_xy;

    /* Set the xy repetition */
    rep_xy = settings->xy_rep;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	78db      	ldrb	r3, [r3, #3]
 800e05e:	73bb      	strb	r3, [r7, #14]
    rslt = bmm150_set_regs(BMM150_REG_REP_XY, &rep_xy, 1, dev);
 800e060:	f107 010e 	add.w	r1, r7, #14
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	2201      	movs	r2, #1
 800e068:	2051      	movs	r0, #81	; 0x51
 800e06a:	f7ff fc82 	bl	800d972 <bmm150_set_regs>
 800e06e:	4603      	mov	r3, r0
 800e070:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800e072:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <set_z_rep>:

/*!
 * @brief This internal API sets the z repetition value in the 0x52 register.
 */
static int8_t set_z_rep(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800e07e:	b580      	push	{r7, lr}
 800e080:	b084      	sub	sp, #16
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
 800e086:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t rep_z;

    /* Set the z repetition */
    rep_z = settings->z_rep;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	791b      	ldrb	r3, [r3, #4]
 800e08c:	73bb      	strb	r3, [r7, #14]
    rslt = bmm150_set_regs(BMM150_REG_REP_Z, &rep_z, 1, dev);
 800e08e:	f107 010e 	add.w	r1, r7, #14
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	2201      	movs	r2, #1
 800e096:	2052      	movs	r0, #82	; 0x52
 800e098:	f7ff fc6b 	bl	800d972 <bmm150_set_regs>
 800e09c:	4603      	mov	r3, r0
 800e09e:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800e0a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3710      	adds	r7, #16
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <set_odr>:

/*!
 * @brief This internal API is used to set the output data rate of the sensor.
 */
static int8_t set_odr(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Read the 0x4C register */
    rslt = bmm150_get_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800e0b6:	f107 010e 	add.w	r1, r7, #14
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	2201      	movs	r2, #1
 800e0be:	204c      	movs	r0, #76	; 0x4c
 800e0c0:	f7ff fc83 	bl	800d9ca <bmm150_get_regs>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800e0c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d118      	bne.n	800e102 <set_odr+0x56>
    {
        /* Set the ODR value */
        reg_data = BMM150_SET_BITS(reg_data, BMM150_ODR, settings->data_rate);
 800e0d0:	7bbb      	ldrb	r3, [r7, #14]
 800e0d2:	b25b      	sxtb	r3, r3
 800e0d4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800e0d8:	b25a      	sxtb	r2, r3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	789b      	ldrb	r3, [r3, #2]
 800e0de:	00db      	lsls	r3, r3, #3
 800e0e0:	b25b      	sxtb	r3, r3
 800e0e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0e6:	b25b      	sxtb	r3, r3
 800e0e8:	4313      	orrs	r3, r2
 800e0ea:	b25b      	sxtb	r3, r3
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800e0f0:	f107 010e 	add.w	r1, r7, #14
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	204c      	movs	r0, #76	; 0x4c
 800e0fa:	f7ff fc3a 	bl	800d972 <bmm150_set_regs>
 800e0fe:	4603      	mov	r3, r0
 800e100:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800e102:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e106:	4618      	mov	r0, r3
 800e108:	3710      	adds	r7, #16
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <set_odr_xyz_rep>:

/*!
 * @brief This internal API sets the preset mode ODR and repetition settings.
 */
static int8_t set_odr_xyz_rep(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b084      	sub	sp, #16
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Set the ODR */
    rslt = set_odr(settings, dev);
 800e118:	6839      	ldr	r1, [r7, #0]
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f7ff ffc6 	bl	800e0ac <set_odr>
 800e120:	4603      	mov	r3, r0
 800e122:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800e124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d10f      	bne.n	800e14c <set_odr_xyz_rep+0x3e>
    {
        /* Set the XY-repetitions number */
        rslt = set_xy_rep(settings, dev);
 800e12c:	6839      	ldr	r1, [r7, #0]
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f7ff ff8e 	bl	800e050 <set_xy_rep>
 800e134:	4603      	mov	r3, r0
 800e136:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 800e138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d105      	bne.n	800e14c <set_odr_xyz_rep+0x3e>
        {
            /* Set the Z-repetitions number */
            rslt = set_z_rep(settings, dev);
 800e140:	6839      	ldr	r1, [r7, #0]
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f7ff ff9b 	bl	800e07e <set_z_rep>
 800e148:	4603      	mov	r3, r0
 800e14a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800e14c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e150:	4618      	mov	r0, r3
 800e152:	3710      	adds	r7, #16
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <set_control_measurement_xyz>:
/*!
 * @brief This internal API is used to enable or disable the magnetic
 * measurement of x,y,z axes based on the value of xyz_axes_control.
 */
static int8_t set_control_measurement_xyz(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmm150_get_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800e162:	f107 010e 	add.w	r1, r7, #14
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	2201      	movs	r2, #1
 800e16a:	204e      	movs	r0, #78	; 0x4e
 800e16c:	f7ff fc2d 	bl	800d9ca <bmm150_get_regs>
 800e170:	4603      	mov	r3, r0
 800e172:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800e174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d118      	bne.n	800e1ae <set_control_measurement_xyz+0x56>
    {
        /* Set the axes to be enabled/disabled */
        reg_data = BMM150_SET_BITS(reg_data, BMM150_CONTROL_MEASURE, settings->xyz_axes_control);
 800e17c:	7bbb      	ldrb	r3, [r7, #14]
 800e17e:	b25b      	sxtb	r3, r3
 800e180:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800e184:	b25a      	sxtb	r2, r3
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	00db      	lsls	r3, r3, #3
 800e18c:	b25b      	sxtb	r3, r3
 800e18e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e192:	b25b      	sxtb	r3, r3
 800e194:	4313      	orrs	r3, r2
 800e196:	b25b      	sxtb	r3, r3
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800e19c:	f107 010e 	add.w	r1, r7, #14
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	204e      	movs	r0, #78	; 0x4e
 800e1a6:	f7ff fbe4 	bl	800d972 <bmm150_set_regs>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800e1ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3710      	adds	r7, #16
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}

0800e1ba <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint16_t sub_settings, uint16_t desired_settings)
{
 800e1ba:	b480      	push	{r7}
 800e1bc:	b085      	sub	sp, #20
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	460a      	mov	r2, r1
 800e1c4:	80fb      	strh	r3, [r7, #6]
 800e1c6:	4613      	mov	r3, r2
 800e1c8:	80bb      	strh	r3, [r7, #4]
    uint8_t settings_changed;

    if (sub_settings & desired_settings)
 800e1ca:	88fa      	ldrh	r2, [r7, #6]
 800e1cc:	88bb      	ldrh	r3, [r7, #4]
 800e1ce:	4013      	ands	r3, r2
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d002      	beq.n	800e1dc <are_settings_changed+0x22>
    {
        /* User wants to modify this particular settings */
        settings_changed = BMM150_TRUE;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	73fb      	strb	r3, [r7, #15]
 800e1da:	e001      	b.n	800e1e0 <are_settings_changed+0x26>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = BMM150_FALSE;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800e1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3714      	adds	r7, #20
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ec:	4770      	bx	lr

0800e1ee <mode_settings>:
/*!
 * @brief This API sets the ODR , measurement axes control ,
 * repetition values of xy,z.
 */
static int8_t mode_settings(uint16_t desired_settings, const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800e1ee:	b580      	push	{r7, lr}
 800e1f0:	b086      	sub	sp, #24
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	60b9      	str	r1, [r7, #8]
 800e1f8:	607a      	str	r2, [r7, #4]
 800e1fa:	81fb      	strh	r3, [r7, #14]
    int8_t rslt = BMM150_E_INVALID_CONFIG;
 800e1fc:	23fd      	movs	r3, #253	; 0xfd
 800e1fe:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BMM150_SEL_DATA_RATE)
 800e200:	89fb      	ldrh	r3, [r7, #14]
 800e202:	f003 0301 	and.w	r3, r3, #1
 800e206:	2b00      	cmp	r3, #0
 800e208:	d005      	beq.n	800e216 <mode_settings+0x28>
    {
        /* Sets the ODR */
        rslt = set_odr(settings, dev);
 800e20a:	6879      	ldr	r1, [r7, #4]
 800e20c:	68b8      	ldr	r0, [r7, #8]
 800e20e:	f7ff ff4d 	bl	800e0ac <set_odr>
 800e212:	4603      	mov	r3, r0
 800e214:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_CONTROL_MEASURE)
 800e216:	89fb      	ldrh	r3, [r7, #14]
 800e218:	f003 0302 	and.w	r3, r3, #2
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d005      	beq.n	800e22c <mode_settings+0x3e>
    {
        /* Enables/Disables the control measurement axes */
        rslt = set_control_measurement_xyz(settings, dev);
 800e220:	6879      	ldr	r1, [r7, #4]
 800e222:	68b8      	ldr	r0, [r7, #8]
 800e224:	f7ff ff98 	bl	800e158 <set_control_measurement_xyz>
 800e228:	4603      	mov	r3, r0
 800e22a:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_XY_REP)
 800e22c:	89fb      	ldrh	r3, [r7, #14]
 800e22e:	f003 0304 	and.w	r3, r3, #4
 800e232:	2b00      	cmp	r3, #0
 800e234:	d005      	beq.n	800e242 <mode_settings+0x54>
    {
        /* Sets the XY repetition */
        rslt = set_xy_rep(settings, dev);
 800e236:	6879      	ldr	r1, [r7, #4]
 800e238:	68b8      	ldr	r0, [r7, #8]
 800e23a:	f7ff ff09 	bl	800e050 <set_xy_rep>
 800e23e:	4603      	mov	r3, r0
 800e240:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_Z_REP)
 800e242:	89fb      	ldrh	r3, [r7, #14]
 800e244:	f003 0308 	and.w	r3, r3, #8
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d005      	beq.n	800e258 <mode_settings+0x6a>
    {
        /* Sets the Z repetition */
        rslt = set_z_rep(settings, dev);
 800e24c:	6879      	ldr	r1, [r7, #4]
 800e24e:	68b8      	ldr	r0, [r7, #8]
 800e250:	f7ff ff15 	bl	800e07e <set_z_rep>
 800e254:	4603      	mov	r3, r0
 800e256:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800e258:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3718      	adds	r7, #24
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <interrupt_pin_settings>:
 * polarity , latch settings for the interrupt pins.
 */
static int8_t interrupt_pin_settings(uint16_t desired_settings,
                                     const struct bmm150_settings *settings,
                                     struct bmm150_dev *dev)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b088      	sub	sp, #32
 800e268:	af00      	add	r7, sp, #0
 800e26a:	4603      	mov	r3, r0
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]
 800e270:	81fb      	strh	r3, [r7, #14]
    int8_t rslt;
    uint8_t reg_data;
    struct bmm150_int_ctrl_settings int_settings;

    rslt = bmm150_get_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800e272:	f107 011e 	add.w	r1, r7, #30
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2201      	movs	r2, #1
 800e27a:	204e      	movs	r0, #78	; 0x4e
 800e27c:	f7ff fba5 	bl	800d9ca <bmm150_get_regs>
 800e280:	4603      	mov	r3, r0
 800e282:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800e284:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d173      	bne.n	800e374 <interrupt_pin_settings+0x110>
    {
        int_settings = settings->int_settings;
 800e28c:	68ba      	ldr	r2, [r7, #8]
 800e28e:	f107 0310 	add.w	r3, r7, #16
 800e292:	3206      	adds	r2, #6
 800e294:	6810      	ldr	r0, [r2, #0]
 800e296:	6851      	ldr	r1, [r2, #4]
 800e298:	c303      	stmia	r3!, {r0, r1}
 800e29a:	8911      	ldrh	r1, [r2, #8]
 800e29c:	7a92      	ldrb	r2, [r2, #10]
 800e29e:	8019      	strh	r1, [r3, #0]
 800e2a0:	709a      	strb	r2, [r3, #2]
        if (desired_settings & BMM150_SEL_DRDY_PIN_EN)
 800e2a2:	89fb      	ldrh	r3, [r7, #14]
 800e2a4:	f003 0310 	and.w	r3, r3, #16
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00b      	beq.n	800e2c4 <interrupt_pin_settings+0x60>
        {
            /* Enables the Data ready interrupt and
             * maps it to the DRDY pin of the sensor
             */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_DRDY_EN, int_settings.drdy_pin_en);
 800e2ac:	7fbb      	ldrb	r3, [r7, #30]
 800e2ae:	b25b      	sxtb	r3, r3
 800e2b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2b4:	b25a      	sxtb	r2, r3
 800e2b6:	7c3b      	ldrb	r3, [r7, #16]
 800e2b8:	01db      	lsls	r3, r3, #7
 800e2ba:	b25b      	sxtb	r3, r3
 800e2bc:	4313      	orrs	r3, r2
 800e2be:	b25b      	sxtb	r3, r3
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_INT_PIN_EN)
 800e2c4:	89fb      	ldrh	r3, [r7, #14]
 800e2c6:	f003 0320 	and.w	r3, r3, #32
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00e      	beq.n	800e2ec <interrupt_pin_settings+0x88>
        {
            /* Sets interrupt pin enable */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_INT_PIN_EN, int_settings.int_pin_en);
 800e2ce:	7fbb      	ldrb	r3, [r7, #30]
 800e2d0:	b25b      	sxtb	r3, r3
 800e2d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2d6:	b25a      	sxtb	r2, r3
 800e2d8:	7c7b      	ldrb	r3, [r7, #17]
 800e2da:	019b      	lsls	r3, r3, #6
 800e2dc:	b25b      	sxtb	r3, r3
 800e2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2e2:	b25b      	sxtb	r3, r3
 800e2e4:	4313      	orrs	r3, r2
 800e2e6:	b25b      	sxtb	r3, r3
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_DRDY_POLARITY)
 800e2ec:	89fb      	ldrh	r3, [r7, #14]
 800e2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d00e      	beq.n	800e314 <interrupt_pin_settings+0xb0>
        {
            /* Sets Data ready pin's polarity */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_DRDY_POLARITY, int_settings.drdy_polarity);
 800e2f6:	7fbb      	ldrb	r3, [r7, #30]
 800e2f8:	b25b      	sxtb	r3, r3
 800e2fa:	f023 0304 	bic.w	r3, r3, #4
 800e2fe:	b25a      	sxtb	r2, r3
 800e300:	7cbb      	ldrb	r3, [r7, #18]
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	b25b      	sxtb	r3, r3
 800e306:	f003 0304 	and.w	r3, r3, #4
 800e30a:	b25b      	sxtb	r3, r3
 800e30c:	4313      	orrs	r3, r2
 800e30e:	b25b      	sxtb	r3, r3
 800e310:	b2db      	uxtb	r3, r3
 800e312:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_INT_LATCH)
 800e314:	89fb      	ldrh	r3, [r7, #14]
 800e316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00e      	beq.n	800e33c <interrupt_pin_settings+0xd8>
        {
            /* Sets Interrupt in latched or non-latched mode */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_INT_LATCH, int_settings.int_latch);
 800e31e:	7fbb      	ldrb	r3, [r7, #30]
 800e320:	b25b      	sxtb	r3, r3
 800e322:	f023 0302 	bic.w	r3, r3, #2
 800e326:	b25a      	sxtb	r2, r3
 800e328:	7cfb      	ldrb	r3, [r7, #19]
 800e32a:	005b      	lsls	r3, r3, #1
 800e32c:	b25b      	sxtb	r3, r3
 800e32e:	f003 0302 	and.w	r3, r3, #2
 800e332:	b25b      	sxtb	r3, r3
 800e334:	4313      	orrs	r3, r2
 800e336:	b25b      	sxtb	r3, r3
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_INT_POLARITY)
 800e33c:	89fb      	ldrh	r3, [r7, #14]
 800e33e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00d      	beq.n	800e362 <interrupt_pin_settings+0xfe>
        {
            /* Sets Interrupt pin's polarity */
            reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_INT_POLARITY, int_settings.int_polarity);
 800e346:	7fbb      	ldrb	r3, [r7, #30]
 800e348:	b25b      	sxtb	r3, r3
 800e34a:	f023 0301 	bic.w	r3, r3, #1
 800e34e:	b25a      	sxtb	r2, r3
 800e350:	7d3b      	ldrb	r3, [r7, #20]
 800e352:	b25b      	sxtb	r3, r3
 800e354:	f003 0301 	and.w	r3, r3, #1
 800e358:	b25b      	sxtb	r3, r3
 800e35a:	4313      	orrs	r3, r2
 800e35c:	b25b      	sxtb	r3, r3
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	77bb      	strb	r3, [r7, #30]
        }

        /* Set the interrupt configurations in the 0x4E register */
        rslt = bmm150_set_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800e362:	f107 011e 	add.w	r1, r7, #30
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2201      	movs	r2, #1
 800e36a:	204e      	movs	r0, #78	; 0x4e
 800e36c:	f7ff fb01 	bl	800d972 <bmm150_set_regs>
 800e370:	4603      	mov	r3, r0
 800e372:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800e374:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3720      	adds	r7, #32
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <interrupt_config>:
 * threshold values set by the user in the High threshold (0x50) and
 * Low threshold (0x4F) registers.
 */
static int8_t interrupt_config(uint16_t desired_settings, const struct bmm150_settings *settings,
                               struct bmm150_dev *dev)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b088      	sub	sp, #32
 800e384:	af00      	add	r7, sp, #0
 800e386:	4603      	mov	r3, r0
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
 800e38c:	81fb      	strh	r3, [r7, #14]
    int8_t rslt;
    uint8_t reg_data;
    struct bmm150_int_ctrl_settings int_settings;

    rslt = bmm150_get_regs(BMM150_REG_INT_CONFIG, &reg_data, 1, dev);
 800e38e:	f107 011e 	add.w	r1, r7, #30
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2201      	movs	r2, #1
 800e396:	204d      	movs	r0, #77	; 0x4d
 800e398:	f7ff fb17 	bl	800d9ca <bmm150_get_regs>
 800e39c:	4603      	mov	r3, r0
 800e39e:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800e3a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d15f      	bne.n	800e468 <interrupt_config+0xe8>
    {
        int_settings = settings->int_settings;
 800e3a8:	68ba      	ldr	r2, [r7, #8]
 800e3aa:	f107 0310 	add.w	r3, r7, #16
 800e3ae:	3206      	adds	r2, #6
 800e3b0:	6810      	ldr	r0, [r2, #0]
 800e3b2:	6851      	ldr	r1, [r2, #4]
 800e3b4:	c303      	stmia	r3!, {r0, r1}
 800e3b6:	8911      	ldrh	r1, [r2, #8]
 800e3b8:	7a92      	ldrb	r2, [r2, #10]
 800e3ba:	8019      	strh	r1, [r3, #0]
 800e3bc:	709a      	strb	r2, [r3, #2]
        if (desired_settings & BMM150_SEL_DATA_OVERRUN_INT)
 800e3be:	89fb      	ldrh	r3, [r7, #14]
 800e3c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d00b      	beq.n	800e3e0 <interrupt_config+0x60>
        {
            /* Sets Data overrun interrupt */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_DATA_OVERRUN_INT, int_settings.data_overrun_en);
 800e3c8:	7fbb      	ldrb	r3, [r7, #30]
 800e3ca:	b25b      	sxtb	r3, r3
 800e3cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3d0:	b25a      	sxtb	r2, r3
 800e3d2:	7d7b      	ldrb	r3, [r7, #21]
 800e3d4:	01db      	lsls	r3, r3, #7
 800e3d6:	b25b      	sxtb	r3, r3
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	b25b      	sxtb	r3, r3
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_OVERFLOW_INT)
 800e3e0:	89fb      	ldrh	r3, [r7, #14]
 800e3e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00e      	beq.n	800e408 <interrupt_config+0x88>
        {
            /* Sets Data overflow interrupt */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_OVERFLOW_INT, int_settings.overflow_int_en);
 800e3ea:	7fbb      	ldrb	r3, [r7, #30]
 800e3ec:	b25b      	sxtb	r3, r3
 800e3ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3f2:	b25a      	sxtb	r2, r3
 800e3f4:	7dbb      	ldrb	r3, [r7, #22]
 800e3f6:	019b      	lsls	r3, r3, #6
 800e3f8:	b25b      	sxtb	r3, r3
 800e3fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3fe:	b25b      	sxtb	r3, r3
 800e400:	4313      	orrs	r3, r2
 800e402:	b25b      	sxtb	r3, r3
 800e404:	b2db      	uxtb	r3, r3
 800e406:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_HIGH_THRESHOLD_INT)
 800e408:	89fb      	ldrh	r3, [r7, #14]
 800e40a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d00e      	beq.n	800e430 <interrupt_config+0xb0>
        {
            /* Sets high threshold interrupt */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_HIGH_THRESHOLD_INT, int_settings.high_int_en);
 800e412:	7fbb      	ldrb	r3, [r7, #30]
 800e414:	b25b      	sxtb	r3, r3
 800e416:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800e41a:	b25a      	sxtb	r2, r3
 800e41c:	7dfb      	ldrb	r3, [r7, #23]
 800e41e:	00db      	lsls	r3, r3, #3
 800e420:	b25b      	sxtb	r3, r3
 800e422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e426:	b25b      	sxtb	r3, r3
 800e428:	4313      	orrs	r3, r2
 800e42a:	b25b      	sxtb	r3, r3
 800e42c:	b2db      	uxtb	r3, r3
 800e42e:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_LOW_THRESHOLD_INT)
 800e430:	89fb      	ldrh	r3, [r7, #14]
 800e432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e436:	2b00      	cmp	r3, #0
 800e438:	d00d      	beq.n	800e456 <interrupt_config+0xd6>
        {
            /* Sets low threshold interrupt */
            reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_LOW_THRESHOLD_INT, int_settings.low_int_en);
 800e43a:	7fbb      	ldrb	r3, [r7, #30]
 800e43c:	b25b      	sxtb	r3, r3
 800e43e:	f023 0307 	bic.w	r3, r3, #7
 800e442:	b25a      	sxtb	r2, r3
 800e444:	7e3b      	ldrb	r3, [r7, #24]
 800e446:	b25b      	sxtb	r3, r3
 800e448:	f003 0307 	and.w	r3, r3, #7
 800e44c:	b25b      	sxtb	r3, r3
 800e44e:	4313      	orrs	r3, r2
 800e450:	b25b      	sxtb	r3, r3
 800e452:	b2db      	uxtb	r3, r3
 800e454:	77bb      	strb	r3, [r7, #30]
        }

        /* Set the interrupt configurations in the 0x4D register */
        rslt = bmm150_set_regs(BMM150_REG_INT_CONFIG, &reg_data, 1, dev);
 800e456:	f107 011e 	add.w	r1, r7, #30
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2201      	movs	r2, #1
 800e45e:	204d      	movs	r0, #77	; 0x4d
 800e460:	f7ff fa87 	bl	800d972 <bmm150_set_regs>
 800e464:	4603      	mov	r3, r0
 800e466:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800e468:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3720      	adds	r7, #32
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <interrupt_threshold_settings>:
 * as a reference to generate the high/low threshold interrupt.
 */
static int8_t interrupt_threshold_settings(uint16_t desired_settings,
                                           const struct bmm150_settings *settings,
                                           struct bmm150_dev *dev)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	4603      	mov	r3, r0
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	607a      	str	r2, [r7, #4]
 800e480:	81fb      	strh	r3, [r7, #14]
    int8_t rslt = BMM150_E_INVALID_CONFIG;
 800e482:	23fd      	movs	r3, #253	; 0xfd
 800e484:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_data;

    if (desired_settings & BMM150_SEL_LOW_THRESHOLD_SETTING)
 800e486:	89fb      	ldrh	r3, [r7, #14]
 800e488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d00b      	beq.n	800e4a8 <interrupt_threshold_settings+0x34>
    {
        /* Sets the Low threshold value to trigger interrupt */
        reg_data = settings->int_settings.low_threshold;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	7bdb      	ldrb	r3, [r3, #15]
 800e494:	75bb      	strb	r3, [r7, #22]
        rslt = bmm150_set_regs(BMM150_REG_LOW_THRESHOLD, &reg_data, 1, dev);
 800e496:	f107 0116 	add.w	r1, r7, #22
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2201      	movs	r2, #1
 800e49e:	204f      	movs	r0, #79	; 0x4f
 800e4a0:	f7ff fa67 	bl	800d972 <bmm150_set_regs>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_HIGH_THRESHOLD_SETTING)
 800e4a8:	89fb      	ldrh	r3, [r7, #14]
 800e4aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d00b      	beq.n	800e4ca <interrupt_threshold_settings+0x56>
    {
        /* Sets the High threshold value to trigger interrupt */
        reg_data = settings->int_settings.high_threshold;
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	7c1b      	ldrb	r3, [r3, #16]
 800e4b6:	75bb      	strb	r3, [r7, #22]
        rslt = bmm150_set_regs(BMM150_REG_HIGH_THRESHOLD, &reg_data, 1, dev);
 800e4b8:	f107 0116 	add.w	r1, r7, #22
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	2050      	movs	r0, #80	; 0x50
 800e4c2:	f7ff fa56 	bl	800d972 <bmm150_set_regs>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800e4ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3718      	adds	r7, #24
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
	...

0800e4d8 <compensate_x>:
/*!
 * @brief This internal API is used to obtain the compensated
 * magnetometer x axis data(micro-tesla) in float.
 */
static float compensate_x(int16_t mag_data_x, uint16_t data_rhall, const struct bmm150_dev *dev)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b089      	sub	sp, #36	; 0x24
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	4603      	mov	r3, r0
 800e4e0:	603a      	str	r2, [r7, #0]
 800e4e2:	80fb      	strh	r3, [r7, #6]
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	80bb      	strh	r3, [r7, #4]
    float retval = 0;
 800e4e8:	f04f 0300 	mov.w	r3, #0
 800e4ec:	61fb      	str	r3, [r7, #28]
    float process_comp_x2;
    float process_comp_x3;
    float process_comp_x4;

    /* Overflow condition check */
    if ((mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP) && (data_rhall != 0) && (dev->trim_data.dig_xyz1 != 0))
 800e4ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e4f2:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800e4f6:	f000 8086 	beq.w	800e606 <compensate_x+0x12e>
 800e4fa:	88bb      	ldrh	r3, [r7, #4]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	f000 8082 	beq.w	800e606 <compensate_x+0x12e>
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e506:	2b00      	cmp	r3, #0
 800e508:	d07d      	beq.n	800e606 <compensate_x+0x12e>
    {
        /* Processing compensation equations */
        process_comp_x0 = (((float)dev->trim_data.dig_xyz1) * 16384.0f / data_rhall);
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e50e:	ee07 3a90 	vmov	s15, r3
 800e512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e516:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800e620 <compensate_x+0x148>
 800e51a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800e51e:	88bb      	ldrh	r3, [r7, #4]
 800e520:	ee07 3a90 	vmov	s15, r3
 800e524:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e52c:	edc7 7a06 	vstr	s15, [r7, #24]
        retval = (process_comp_x0 - 16384.0f);
 800e530:	edd7 7a06 	vldr	s15, [r7, #24]
 800e534:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800e620 <compensate_x+0x148>
 800e538:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e53c:	edc7 7a07 	vstr	s15, [r7, #28]
        process_comp_x1 = ((float)dev->trim_data.dig_xy2) * (retval * retval / 268435456.0f);
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 800e546:	ee07 3a90 	vmov	s15, r3
 800e54a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e54e:	edd7 7a07 	vldr	s15, [r7, #28]
 800e552:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800e556:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800e624 <compensate_x+0x14c>
 800e55a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800e55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e562:	edc7 7a05 	vstr	s15, [r7, #20]
        process_comp_x2 = process_comp_x1 + retval * ((float)dev->trim_data.dig_xy1) / 16384.0f;
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e56c:	ee07 3a90 	vmov	s15, r3
 800e570:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e574:	edd7 7a07 	vldr	s15, [r7, #28]
 800e578:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e57c:	eddf 6a28 	vldr	s13, [pc, #160]	; 800e620 <compensate_x+0x148>
 800e580:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e584:	ed97 7a05 	vldr	s14, [r7, #20]
 800e588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e58c:	edc7 7a04 	vstr	s15, [r7, #16]
        process_comp_x3 = ((float)dev->trim_data.dig_x2) + 160.0f;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	f993 301a 	ldrsb.w	r3, [r3, #26]
 800e596:	ee07 3a90 	vmov	s15, r3
 800e59a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e59e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800e628 <compensate_x+0x150>
 800e5a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e5a6:	edc7 7a03 	vstr	s15, [r7, #12]
        process_comp_x4 = mag_data_x * ((process_comp_x2 + 256.0f) * process_comp_x3);
 800e5aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e5ae:	ee07 3a90 	vmov	s15, r3
 800e5b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e5b6:	edd7 7a04 	vldr	s15, [r7, #16]
 800e5ba:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800e62c <compensate_x+0x154>
 800e5be:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800e5c2:	edd7 7a03 	vldr	s15, [r7, #12]
 800e5c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e5ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5ce:	edc7 7a02 	vstr	s15, [r7, #8]
        retval = ((process_comp_x4 / 8192.0f) + (((float)dev->trim_data.dig_x1) * 8.0f)) / 16.0f;
 800e5d2:	edd7 7a02 	vldr	s15, [r7, #8]
 800e5d6:	eddf 6a16 	vldr	s13, [pc, #88]	; 800e630 <compensate_x+0x158>
 800e5da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800e5e4:	ee07 3a90 	vmov	s15, r3
 800e5e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5ec:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800e5f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e5f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e5f8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800e5fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e600:	edc7 7a07 	vstr	s15, [r7, #28]
 800e604:	e002      	b.n	800e60c <compensate_x+0x134>
    }
    else
    {
        /* Overflow, set output to 0.0f */
        retval = BMM150_OVERFLOW_OUTPUT_FLOAT;
 800e606:	f04f 0300 	mov.w	r3, #0
 800e60a:	61fb      	str	r3, [r7, #28]
    }

    return retval;
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	ee07 3a90 	vmov	s15, r3
}
 800e612:	eeb0 0a67 	vmov.f32	s0, s15
 800e616:	3724      	adds	r7, #36	; 0x24
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr
 800e620:	46800000 	.word	0x46800000
 800e624:	4d800000 	.word	0x4d800000
 800e628:	43200000 	.word	0x43200000
 800e62c:	43800000 	.word	0x43800000
 800e630:	46000000 	.word	0x46000000

0800e634 <compensate_y>:
/*!
 * @brief This internal API is used to obtain the compensated
 * magnetometer y axis data(micro-tesla) in float.
 */
static float compensate_y(int16_t mag_data_y, uint16_t data_rhall, const struct bmm150_dev *dev)
{
 800e634:	b480      	push	{r7}
 800e636:	b089      	sub	sp, #36	; 0x24
 800e638:	af00      	add	r7, sp, #0
 800e63a:	4603      	mov	r3, r0
 800e63c:	603a      	str	r2, [r7, #0]
 800e63e:	80fb      	strh	r3, [r7, #6]
 800e640:	460b      	mov	r3, r1
 800e642:	80bb      	strh	r3, [r7, #4]
    float retval = 0;
 800e644:	f04f 0300 	mov.w	r3, #0
 800e648:	61fb      	str	r3, [r7, #28]
    float process_comp_y2;
    float process_comp_y3;
    float process_comp_y4;

    /* Overflow condition check */
    if ((mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP) && (data_rhall != 0) && (dev->trim_data.dig_xyz1 != 0))
 800e64a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e64e:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800e652:	f000 8086 	beq.w	800e762 <compensate_y+0x12e>
 800e656:	88bb      	ldrh	r3, [r7, #4]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	f000 8082 	beq.w	800e762 <compensate_y+0x12e>
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e662:	2b00      	cmp	r3, #0
 800e664:	d07d      	beq.n	800e762 <compensate_y+0x12e>
    {
        /* Processing compensation equations */
        process_comp_y0 = ((float)dev->trim_data.dig_xyz1) * 16384.0f / data_rhall;
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e66a:	ee07 3a90 	vmov	s15, r3
 800e66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e672:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800e77c <compensate_y+0x148>
 800e676:	ee67 6a87 	vmul.f32	s13, s15, s14
 800e67a:	88bb      	ldrh	r3, [r7, #4]
 800e67c:	ee07 3a90 	vmov	s15, r3
 800e680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e688:	edc7 7a06 	vstr	s15, [r7, #24]
        retval = process_comp_y0 - 16384.0f;
 800e68c:	edd7 7a06 	vldr	s15, [r7, #24]
 800e690:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800e77c <compensate_y+0x148>
 800e694:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e698:	edc7 7a07 	vstr	s15, [r7, #28]
        process_comp_y1 = ((float)dev->trim_data.dig_xy2) * (retval * retval / 268435456.0f);
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 800e6a2:	ee07 3a90 	vmov	s15, r3
 800e6a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e6aa:	edd7 7a07 	vldr	s15, [r7, #28]
 800e6ae:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800e6b2:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800e780 <compensate_y+0x14c>
 800e6b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800e6ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6be:	edc7 7a05 	vstr	s15, [r7, #20]
        process_comp_y2 = process_comp_y1 + retval * ((float)dev->trim_data.dig_xy1) / 16384.0f;
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e6c8:	ee07 3a90 	vmov	s15, r3
 800e6cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e6d0:	edd7 7a07 	vldr	s15, [r7, #28]
 800e6d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e6d8:	eddf 6a28 	vldr	s13, [pc, #160]	; 800e77c <compensate_y+0x148>
 800e6dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e6e0:	ed97 7a05 	vldr	s14, [r7, #20]
 800e6e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6e8:	edc7 7a04 	vstr	s15, [r7, #16]
        process_comp_y3 = ((float)dev->trim_data.dig_y2) + 160.0f;
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	f993 301b 	ldrsb.w	r3, [r3, #27]
 800e6f2:	ee07 3a90 	vmov	s15, r3
 800e6f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e6fa:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800e784 <compensate_y+0x150>
 800e6fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e702:	edc7 7a03 	vstr	s15, [r7, #12]
        process_comp_y4 = mag_data_y * (((process_comp_y2) + 256.0f) * process_comp_y3);
 800e706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e70a:	ee07 3a90 	vmov	s15, r3
 800e70e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e712:	edd7 7a04 	vldr	s15, [r7, #16]
 800e716:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800e788 <compensate_y+0x154>
 800e71a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800e71e:	edd7 7a03 	vldr	s15, [r7, #12]
 800e722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e72a:	edc7 7a02 	vstr	s15, [r7, #8]
        retval = ((process_comp_y4 / 8192.0f) + (((float)dev->trim_data.dig_y1) * 8.0f)) / 16.0f;
 800e72e:	edd7 7a02 	vldr	s15, [r7, #8]
 800e732:	eddf 6a16 	vldr	s13, [pc, #88]	; 800e78c <compensate_y+0x158>
 800e736:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	f993 3019 	ldrsb.w	r3, [r3, #25]
 800e740:	ee07 3a90 	vmov	s15, r3
 800e744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e748:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800e74c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e750:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e754:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800e758:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e75c:	edc7 7a07 	vstr	s15, [r7, #28]
 800e760:	e002      	b.n	800e768 <compensate_y+0x134>
    }
    else
    {
        /* Overflow, set output to 0.0f */
        retval = BMM150_OVERFLOW_OUTPUT_FLOAT;
 800e762:	f04f 0300 	mov.w	r3, #0
 800e766:	61fb      	str	r3, [r7, #28]
    }

    return retval;
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	ee07 3a90 	vmov	s15, r3
}
 800e76e:	eeb0 0a67 	vmov.f32	s0, s15
 800e772:	3724      	adds	r7, #36	; 0x24
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr
 800e77c:	46800000 	.word	0x46800000
 800e780:	4d800000 	.word	0x4d800000
 800e784:	43200000 	.word	0x43200000
 800e788:	43800000 	.word	0x43800000
 800e78c:	46000000 	.word	0x46000000

0800e790 <compensate_z>:
/*!
 * @brief This internal API is used to obtain the compensated
 * magnetometer z axis data(micro-tesla) in float.
 */
static float compensate_z(int16_t mag_data_z, uint16_t data_rhall, const struct bmm150_dev *dev)
{
 800e790:	b480      	push	{r7}
 800e792:	b08b      	sub	sp, #44	; 0x2c
 800e794:	af00      	add	r7, sp, #0
 800e796:	4603      	mov	r3, r0
 800e798:	603a      	str	r2, [r7, #0]
 800e79a:	80fb      	strh	r3, [r7, #6]
 800e79c:	460b      	mov	r3, r1
 800e79e:	80bb      	strh	r3, [r7, #4]
    float retval = 0;
 800e7a0:	f04f 0300 	mov.w	r3, #0
 800e7a4:	627b      	str	r3, [r7, #36]	; 0x24
    float process_comp_z3;
    float process_comp_z4;
    float process_comp_z5;

    /* Overflow condition check */
    if ((mag_data_z != BMM150_OVERFLOW_ADCVAL_ZAXIS_HALL) && (dev->trim_data.dig_z2 != 0) &&
 800e7a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e7aa:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 800e7ae:	d079      	beq.n	800e8a4 <compensate_z+0x114>
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d074      	beq.n	800e8a4 <compensate_z+0x114>
        (dev->trim_data.dig_z1 != 0) && (dev->trim_data.dig_xyz1 != 0) && (data_rhall != 0))
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	8b9b      	ldrh	r3, [r3, #28]
    if ((mag_data_z != BMM150_OVERFLOW_ADCVAL_ZAXIS_HALL) && (dev->trim_data.dig_z2 != 0) &&
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d070      	beq.n	800e8a4 <compensate_z+0x114>
        (dev->trim_data.dig_z1 != 0) && (dev->trim_data.dig_xyz1 != 0) && (data_rhall != 0))
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d06c      	beq.n	800e8a4 <compensate_z+0x114>
 800e7ca:	88bb      	ldrh	r3, [r7, #4]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d069      	beq.n	800e8a4 <compensate_z+0x114>
    {
        /* Processing compensation equations */
        process_comp_z0 = ((float)mag_data_z) - ((float)dev->trim_data.dig_z4);
 800e7d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e7d4:	ee07 3a90 	vmov	s15, r3
 800e7d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800e7e2:	ee07 3a90 	vmov	s15, r3
 800e7e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e7ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e7ee:	edc7 7a08 	vstr	s15, [r7, #32]
        process_comp_z1 = ((float)data_rhall) - ((float)dev->trim_data.dig_xyz1);
 800e7f2:	88bb      	ldrh	r3, [r7, #4]
 800e7f4:	ee07 3a90 	vmov	s15, r3
 800e7f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e800:	ee07 3a90 	vmov	s15, r3
 800e804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e80c:	edc7 7a07 	vstr	s15, [r7, #28]
        process_comp_z2 = (((float)dev->trim_data.dig_z3) * process_comp_z1);
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800e816:	ee07 3a90 	vmov	s15, r3
 800e81a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e81e:	ed97 7a07 	vldr	s14, [r7, #28]
 800e822:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e826:	edc7 7a06 	vstr	s15, [r7, #24]
        process_comp_z3 = ((float)dev->trim_data.dig_z1) * ((float)data_rhall) / 32768.0f;
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	8b9b      	ldrh	r3, [r3, #28]
 800e82e:	ee07 3a90 	vmov	s15, r3
 800e832:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e836:	88bb      	ldrh	r3, [r7, #4]
 800e838:	ee07 3a90 	vmov	s15, r3
 800e83c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e840:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e844:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800e8c0 <compensate_z+0x130>
 800e848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e84c:	edc7 7a05 	vstr	s15, [r7, #20]
        process_comp_z4 = ((float)dev->trim_data.dig_z2) + process_comp_z3;
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800e856:	ee07 3a90 	vmov	s15, r3
 800e85a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e85e:	ed97 7a05 	vldr	s14, [r7, #20]
 800e862:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e866:	edc7 7a04 	vstr	s15, [r7, #16]
        process_comp_z5 = (process_comp_z0 * 131072.0f) - process_comp_z2;
 800e86a:	edd7 7a08 	vldr	s15, [r7, #32]
 800e86e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e8c4 <compensate_z+0x134>
 800e872:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e876:	edd7 7a06 	vldr	s15, [r7, #24]
 800e87a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e87e:	edc7 7a03 	vstr	s15, [r7, #12]
        retval = (process_comp_z5 / ((process_comp_z4) * 4.0f)) / 16.0f;
 800e882:	edd7 7a04 	vldr	s15, [r7, #16]
 800e886:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800e88a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e88e:	edd7 6a03 	vldr	s13, [r7, #12]
 800e892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e896:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800e89a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e89e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800e8a2:	e002      	b.n	800e8aa <compensate_z+0x11a>
    }
    else
    {
        /* Overflow, set output to 0.0f */
        retval = BMM150_OVERFLOW_OUTPUT_FLOAT;
 800e8a4:	f04f 0300 	mov.w	r3, #0
 800e8a8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return retval;
 800e8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ac:	ee07 3a90 	vmov	s15, r3
}
 800e8b0:	eeb0 0a67 	vmov.f32	s0, s15
 800e8b4:	372c      	adds	r7, #44	; 0x2c
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	47000000 	.word	0x47000000
 800e8c4:	48000000 	.word	0x48000000

0800e8c8 <bmm150_user_i2c_init>:
/*!                User interface functions                                   */

/*!
 * @brief Function for initialization of I2C bus.
 */
int8_t bmm150_user_i2c_init(void) {
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	af00      	add	r7, sp, #0
    /* Implement I2C bus initialization according to the target machine. */

    if (HAL_I2C_IsDeviceReady(&hi2c1, BMM150_DEFAULT_I2C_ADDRESS << 1, 2, 2000) == HAL_OK) {
 800e8cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e8d0:	2202      	movs	r2, #2
 800e8d2:	2120      	movs	r1, #32
 800e8d4:	4805      	ldr	r0, [pc, #20]	; (800e8ec <bmm150_user_i2c_init+0x24>)
 800e8d6:	f7f9 f973 	bl	8007bc0 <HAL_I2C_IsDeviceReady>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d101      	bne.n	800e8e4 <bmm150_user_i2c_init+0x1c>
//        printf("BMM150 is ready\n");
        return 0;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	e000      	b.n	800e8e6 <bmm150_user_i2c_init+0x1e>
    }
    return 1;
 800e8e4:	2301      	movs	r3, #1
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	20000590 	.word	0x20000590

0800e8f0 <bmm150_user_spi_init>:

/*!
 * @brief Function for initialization of SPI bus.
 */
int8_t bmm150_user_spi_init(void) {
 800e8f0:	b480      	push	{r7}
 800e8f2:	af00      	add	r7, sp, #0

    /* Implement SPI bus initialization according to the target machine. */
    return 0;
 800e8f4:	2300      	movs	r3, #0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <bmm150_user_delay_us>:

/*!
 * @brief This function provides the delay for required time (Microseconds) as per the input provided in some of the
 * APIs.
 */
void bmm150_user_delay_us(uint32_t period_us, void *intf_ptr) {
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	6039      	str	r1, [r7, #0]
	htim10.Instance->CNT = 0;  // set the counter value a 0
 800e90a:	4b09      	ldr	r3, [pc, #36]	; (800e930 <bmm150_user_delay_us+0x30>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2200      	movs	r2, #0
 800e910:	625a      	str	r2, [r3, #36]	; 0x24
    while (htim10.Instance->CNT < period_us);  // wait for the counter to reach the us input in the parameter
 800e912:	bf00      	nop
 800e914:	4b06      	ldr	r3, [pc, #24]	; (800e930 <bmm150_user_delay_us+0x30>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e91a:	687a      	ldr	r2, [r7, #4]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d8f9      	bhi.n	800e914 <bmm150_user_delay_us+0x14>
    /* Wait for a period amount of microseconds. */
}
 800e920:	bf00      	nop
 800e922:	bf00      	nop
 800e924:	370c      	adds	r7, #12
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr
 800e92e:	bf00      	nop
 800e930:	2000084c 	.word	0x2000084c

0800e934 <bmm150_user_i2c_reg_write>:

/*!
 * @brief This function is for writing the sensor's registers through I2C bus.
 */
int8_t bmm150_user_i2c_reg_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800e934:	b580      	push	{r7, lr}
 800e936:	b088      	sub	sp, #32
 800e938:	af04      	add	r7, sp, #16
 800e93a:	60b9      	str	r1, [r7, #8]
 800e93c:	607a      	str	r2, [r7, #4]
 800e93e:	603b      	str	r3, [r7, #0]
 800e940:	4603      	mov	r3, r0
 800e942:	73fb      	strb	r3, [r7, #15]

    /* Write to registers using I2C. Return 0 for a successful execution. */
    if (HAL_I2C_Mem_Write(&hi2c1, BMM150_DEFAULT_I2C_ADDRESS << 1, reg_addr, 1, reg_data, length, 1000) == HAL_OK) {
 800e944:	7bfb      	ldrb	r3, [r7, #15]
 800e946:	b29a      	uxth	r2, r3
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e950:	9102      	str	r1, [sp, #8]
 800e952:	9301      	str	r3, [sp, #4]
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	9300      	str	r3, [sp, #0]
 800e958:	2301      	movs	r3, #1
 800e95a:	2120      	movs	r1, #32
 800e95c:	4806      	ldr	r0, [pc, #24]	; (800e978 <bmm150_user_i2c_reg_write+0x44>)
 800e95e:	f7f8 fe0f 	bl	8007580 <HAL_I2C_Mem_Write>
 800e962:	4603      	mov	r3, r0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d101      	bne.n	800e96c <bmm150_user_i2c_reg_write+0x38>
        return BMM150_OK;
 800e968:	2300      	movs	r3, #0
 800e96a:	e000      	b.n	800e96e <bmm150_user_i2c_reg_write+0x3a>
    };
    return 1;
 800e96c:	2301      	movs	r3, #1
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	20000590 	.word	0x20000590

0800e97c <bmm150_user_i2c_reg_read>:

/*!
 * @brief This function is for reading the sensor's registers through I2C bus.
 */
int8_t bmm150_user_i2c_reg_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b088      	sub	sp, #32
 800e980:	af04      	add	r7, sp, #16
 800e982:	60b9      	str	r1, [r7, #8]
 800e984:	607a      	str	r2, [r7, #4]
 800e986:	603b      	str	r3, [r7, #0]
 800e988:	4603      	mov	r3, r0
 800e98a:	73fb      	strb	r3, [r7, #15]

    /* Read from registers using I2C. Return 0 for a successful execution. */
    if (HAL_I2C_Mem_Read(&hi2c1, BMM150_DEFAULT_I2C_ADDRESS << 1, reg_addr, 1, reg_data, length, 1000) == HAL_OK) {
 800e98c:	7bfb      	ldrb	r3, [r7, #15]
 800e98e:	b29a      	uxth	r2, r3
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	b29b      	uxth	r3, r3
 800e994:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e998:	9102      	str	r1, [sp, #8]
 800e99a:	9301      	str	r3, [sp, #4]
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	2120      	movs	r1, #32
 800e9a4:	4806      	ldr	r0, [pc, #24]	; (800e9c0 <bmm150_user_i2c_reg_read+0x44>)
 800e9a6:	f7f8 fee5 	bl	8007774 <HAL_I2C_Mem_Read>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d101      	bne.n	800e9b4 <bmm150_user_i2c_reg_read+0x38>
        return BMM150_OK;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	e000      	b.n	800e9b6 <bmm150_user_i2c_reg_read+0x3a>
    };
    return 1;
 800e9b4:	2301      	movs	r3, #1
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	20000590 	.word	0x20000590

0800e9c4 <bmm150_user_spi_reg_write>:

/*!
 * @brief This function is for writing the sensor's registers through SPI bus.
 */
int8_t bmm150_user_spi_reg_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800e9c4:	b480      	push	{r7}
 800e9c6:	b085      	sub	sp, #20
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60b9      	str	r1, [r7, #8]
 800e9cc:	607a      	str	r2, [r7, #4]
 800e9ce:	603b      	str	r3, [r7, #0]
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	73fb      	strb	r3, [r7, #15]

    /* Write to registers using SPI. Return 0 for a successful execution. */
    return 0;
 800e9d4:	2300      	movs	r3, #0
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3714      	adds	r7, #20
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr

0800e9e2 <bmm150_user_spi_reg_read>:

/*!
 * @brief This function is for reading the sensor's registers through SPI bus.
 */
int8_t bmm150_user_spi_reg_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800e9e2:	b480      	push	{r7}
 800e9e4:	b085      	sub	sp, #20
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	60b9      	str	r1, [r7, #8]
 800e9ea:	607a      	str	r2, [r7, #4]
 800e9ec:	603b      	str	r3, [r7, #0]
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	73fb      	strb	r3, [r7, #15]

    /* Read from registers using SPI. Return 0 for a successful execution. */
    return 0;
 800e9f2:	2300      	movs	r3, #0
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3714      	adds	r7, #20
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <bmm150_interface_selection>:

/*!
 *  @brief This function is to select the interface between SPI and I2C.
 */
int8_t bmm150_interface_selection(struct bmm150_dev *dev) {
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMM150_OK;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL) {
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d028      	beq.n	800ea64 <bmm150_interface_selection+0x64>
        /* Select the interface for execution
         * For I2C : BMM150_I2C_INTF
         * For SPI : BMM150_SPI_INTF
         */
        dev->intf = BMM150_I2C_INTF;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2201      	movs	r2, #1
 800ea16:	705a      	strb	r2, [r3, #1]

        /* Bus configuration : I2C */
        if (dev->intf == BMM150_I2C_INTF) {
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	785b      	ldrb	r3, [r3, #1]
 800ea1c:	2b01      	cmp	r3, #1
 800ea1e:	d10b      	bne.n	800ea38 <bmm150_interface_selection+0x38>
//            printf("I2C Interface \n");

            /* To initialize the user I2C function */
            bmm150_user_i2c_init();
 800ea20:	f7ff ff52 	bl	800e8c8 <bmm150_user_i2c_init>

            dev_addr = BMM150_DEFAULT_I2C_ADDRESS;
 800ea24:	4b13      	ldr	r3, [pc, #76]	; (800ea74 <bmm150_interface_selection+0x74>)
 800ea26:	2210      	movs	r2, #16
 800ea28:	701a      	strb	r2, [r3, #0]
            dev->read = bmm150_user_i2c_reg_read;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	4a12      	ldr	r2, [pc, #72]	; (800ea78 <bmm150_interface_selection+0x78>)
 800ea2e:	60da      	str	r2, [r3, #12]
            dev->write = bmm150_user_i2c_reg_write;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	4a12      	ldr	r2, [pc, #72]	; (800ea7c <bmm150_interface_selection+0x7c>)
 800ea34:	611a      	str	r2, [r3, #16]
 800ea36:	e00e      	b.n	800ea56 <bmm150_interface_selection+0x56>
        }
            /* Bus configuration : SPI */
        else if (dev->intf == BMM150_SPI_INTF) {
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	785b      	ldrb	r3, [r3, #1]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d10a      	bne.n	800ea56 <bmm150_interface_selection+0x56>
//            printf("SPI Interface \n");

            /* To initialize the user SPI function */
            bmm150_user_spi_init();
 800ea40:	f7ff ff56 	bl	800e8f0 <bmm150_user_spi_init>

            dev_addr = 0;
 800ea44:	4b0b      	ldr	r3, [pc, #44]	; (800ea74 <bmm150_interface_selection+0x74>)
 800ea46:	2200      	movs	r2, #0
 800ea48:	701a      	strb	r2, [r3, #0]
            dev->read = bmm150_user_spi_reg_read;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	4a0c      	ldr	r2, [pc, #48]	; (800ea80 <bmm150_interface_selection+0x80>)
 800ea4e:	60da      	str	r2, [r3, #12]
            dev->write = bmm150_user_spi_reg_write;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	4a0c      	ldr	r2, [pc, #48]	; (800ea84 <bmm150_interface_selection+0x84>)
 800ea54:	611a      	str	r2, [r3, #16]
        }

        /* Assign device address to interface pointer */
        dev->intf_ptr = &dev_addr;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4a06      	ldr	r2, [pc, #24]	; (800ea74 <bmm150_interface_selection+0x74>)
 800ea5a:	605a      	str	r2, [r3, #4]

        /* Configure delay in microseconds */
        dev->delay_us = bmm150_user_delay_us;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4a0a      	ldr	r2, [pc, #40]	; (800ea88 <bmm150_interface_selection+0x88>)
 800ea60:	615a      	str	r2, [r3, #20]
 800ea62:	e001      	b.n	800ea68 <bmm150_interface_selection+0x68>
    } else {
        rslt = BMM150_E_NULL_PTR;
 800ea64:	23ff      	movs	r3, #255	; 0xff
 800ea66:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800ea68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3710      	adds	r7, #16
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}
 800ea74:	20000ca8 	.word	0x20000ca8
 800ea78:	0800e97d 	.word	0x0800e97d
 800ea7c:	0800e935 	.word	0x0800e935
 800ea80:	0800e9e3 	.word	0x0800e9e3
 800ea84:	0800e9c5 	.word	0x0800e9c5
 800ea88:	0800e901 	.word	0x0800e901

0800ea8c <bmm150_error_codes_print_result>:

/*!
 * @brief This internal API prints the execution status
 */
void bmm150_error_codes_print_result(const char api_name[], int8_t rslt) {
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	460b      	mov	r3, r1
 800ea96:	70fb      	strb	r3, [r7, #3]
    if (rslt != BMM150_OK) {
 800ea98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d00f      	beq.n	800eac0 <bmm150_error_codes_print_result+0x34>
//        printf("%s\t", api_name);

        switch (rslt) {
 800eaa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eaa4:	3304      	adds	r3, #4
 800eaa6:	2b03      	cmp	r3, #3
 800eaa8:	d80c      	bhi.n	800eac4 <bmm150_error_codes_print_result+0x38>
 800eaaa:	a201      	add	r2, pc, #4	; (adr r2, 800eab0 <bmm150_error_codes_print_result+0x24>)
 800eaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab0:	0800eac5 	.word	0x0800eac5
 800eab4:	0800eac5 	.word	0x0800eac5
 800eab8:	0800eac5 	.word	0x0800eac5
 800eabc:	0800eac5 	.word	0x0800eac5

            default:
//                printf("Error [%d] : Unknown error code\r\n", rslt);
                break;
        }
    }
 800eac0:	bf00      	nop
 800eac2:	e000      	b.n	800eac6 <bmm150_error_codes_print_result+0x3a>
                break;
 800eac4:	bf00      	nop
}
 800eac6:	bf00      	nop
 800eac8:	370c      	adds	r7, #12
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr
 800ead2:	bf00      	nop

0800ead4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b085      	sub	sp, #20
 800ead8:	af00      	add	r7, sp, #0
 800eada:	4603      	mov	r3, r0
 800eadc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800eade:	2300      	movs	r3, #0
 800eae0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800eae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800eae6:	2b84      	cmp	r3, #132	; 0x84
 800eae8:	d005      	beq.n	800eaf6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800eaea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	3303      	adds	r3, #3
 800eaf4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3714      	adds	r7, #20
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr

0800eb04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800eb08:	f000 ff20 	bl	800f94c <vTaskStartScheduler>
  
  return osOK;
 800eb0c:	2300      	movs	r3, #0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800eb12:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb14:	b089      	sub	sp, #36	; 0x24
 800eb16:	af04      	add	r7, sp, #16
 800eb18:	6078      	str	r0, [r7, #4]
 800eb1a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	695b      	ldr	r3, [r3, #20]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d020      	beq.n	800eb66 <osThreadCreate+0x54>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	699b      	ldr	r3, [r3, #24]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d01c      	beq.n	800eb66 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	685c      	ldr	r4, [r3, #4]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681d      	ldr	r5, [r3, #0]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	691e      	ldr	r6, [r3, #16]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7ff ffc8 	bl	800ead4 <makeFreeRtosPriority>
 800eb44:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	695b      	ldr	r3, [r3, #20]
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb4e:	9202      	str	r2, [sp, #8]
 800eb50:	9301      	str	r3, [sp, #4]
 800eb52:	9100      	str	r1, [sp, #0]
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	4632      	mov	r2, r6
 800eb58:	4629      	mov	r1, r5
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	f000 fc9e 	bl	800f49c <xTaskCreateStatic>
 800eb60:	4603      	mov	r3, r0
 800eb62:	60fb      	str	r3, [r7, #12]
 800eb64:	e01c      	b.n	800eba0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	685c      	ldr	r4, [r3, #4]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb72:	b29e      	uxth	r6, r3
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7ff ffaa 	bl	800ead4 <makeFreeRtosPriority>
 800eb80:	4602      	mov	r2, r0
 800eb82:	f107 030c 	add.w	r3, r7, #12
 800eb86:	9301      	str	r3, [sp, #4]
 800eb88:	9200      	str	r2, [sp, #0]
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	4632      	mov	r2, r6
 800eb8e:	4629      	mov	r1, r5
 800eb90:	4620      	mov	r0, r4
 800eb92:	f000 fce0 	bl	800f556 <xTaskCreate>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b01      	cmp	r3, #1
 800eb9a:	d001      	beq.n	800eba0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	e000      	b.n	800eba2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800eba0:	68fb      	ldr	r3, [r7, #12]
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3714      	adds	r7, #20
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ebaa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b084      	sub	sp, #16
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d001      	beq.n	800ebc0 <osDelay+0x16>
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	e000      	b.n	800ebc2 <osDelay+0x18>
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f000 fdfe 	bl	800f7c4 <vTaskDelay>
  
  return osOK;
 800ebc8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3710      	adds	r7, #16
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ebd2:	b480      	push	{r7}
 800ebd4:	b083      	sub	sp, #12
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f103 0208 	add.w	r2, r3, #8
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f103 0208 	add.w	r2, r3, #8
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f103 0208 	add.w	r2, r3, #8
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2200      	movs	r2, #0
 800ec04:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ec06:	bf00      	nop
 800ec08:	370c      	adds	r7, #12
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr

0800ec12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ec12:	b480      	push	{r7}
 800ec14:	b083      	sub	sp, #12
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ec20:	bf00      	nop
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b085      	sub	sp, #20
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	68fa      	ldr	r2, [r7, #12]
 800ec40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	689a      	ldr	r2, [r3, #8]
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	689b      	ldr	r3, [r3, #8]
 800ec4e:	683a      	ldr	r2, [r7, #0]
 800ec50:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	683a      	ldr	r2, [r7, #0]
 800ec56:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	1c5a      	adds	r2, r3, #1
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	601a      	str	r2, [r3, #0]
}
 800ec68:	bf00      	nop
 800ec6a:	3714      	adds	r7, #20
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec74:	b480      	push	{r7}
 800ec76:	b085      	sub	sp, #20
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec8a:	d103      	bne.n	800ec94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	691b      	ldr	r3, [r3, #16]
 800ec90:	60fb      	str	r3, [r7, #12]
 800ec92:	e00c      	b.n	800ecae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	3308      	adds	r3, #8
 800ec98:	60fb      	str	r3, [r7, #12]
 800ec9a:	e002      	b.n	800eca2 <vListInsert+0x2e>
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	60fb      	str	r3, [r7, #12]
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	68ba      	ldr	r2, [r7, #8]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d2f6      	bcs.n	800ec9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	685a      	ldr	r2, [r3, #4]
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	683a      	ldr	r2, [r7, #0]
 800ecbc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	683a      	ldr	r2, [r7, #0]
 800ecc8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	687a      	ldr	r2, [r7, #4]
 800ecce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	1c5a      	adds	r2, r3, #1
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	601a      	str	r2, [r3, #0]
}
 800ecda:	bf00      	nop
 800ecdc:	3714      	adds	r7, #20
 800ecde:	46bd      	mov	sp, r7
 800ece0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece4:	4770      	bx	lr

0800ece6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ece6:	b480      	push	{r7}
 800ece8:	b085      	sub	sp, #20
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	691b      	ldr	r3, [r3, #16]
 800ecf2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	685b      	ldr	r3, [r3, #4]
 800ecf8:	687a      	ldr	r2, [r7, #4]
 800ecfa:	6892      	ldr	r2, [r2, #8]
 800ecfc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	689b      	ldr	r3, [r3, #8]
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	6852      	ldr	r2, [r2, #4]
 800ed06:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d103      	bne.n	800ed1a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	689a      	ldr	r2, [r3, #8]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	1e5a      	subs	r2, r3, #1
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3714      	adds	r7, #20
 800ed32:	46bd      	mov	sp, r7
 800ed34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed38:	4770      	bx	lr
	...

0800ed3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b084      	sub	sp, #16
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d10a      	bne.n	800ed66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ed50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed54:	f383 8811 	msr	BASEPRI, r3
 800ed58:	f3bf 8f6f 	isb	sy
 800ed5c:	f3bf 8f4f 	dsb	sy
 800ed60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ed62:	bf00      	nop
 800ed64:	e7fe      	b.n	800ed64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ed66:	f001 fc25 	bl	80105b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed72:	68f9      	ldr	r1, [r7, #12]
 800ed74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed76:	fb01 f303 	mul.w	r3, r1, r3
 800ed7a:	441a      	add	r2, r3
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2200      	movs	r2, #0
 800ed84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed96:	3b01      	subs	r3, #1
 800ed98:	68f9      	ldr	r1, [r7, #12]
 800ed9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed9c:	fb01 f303 	mul.w	r3, r1, r3
 800eda0:	441a      	add	r2, r3
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	22ff      	movs	r2, #255	; 0xff
 800edaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	22ff      	movs	r2, #255	; 0xff
 800edb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d114      	bne.n	800ede6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	691b      	ldr	r3, [r3, #16]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d01a      	beq.n	800edfa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	3310      	adds	r3, #16
 800edc8:	4618      	mov	r0, r3
 800edca:	f001 f801 	bl	800fdd0 <xTaskRemoveFromEventList>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d012      	beq.n	800edfa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800edd4:	4b0c      	ldr	r3, [pc, #48]	; (800ee08 <xQueueGenericReset+0xcc>)
 800edd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edda:	601a      	str	r2, [r3, #0]
 800eddc:	f3bf 8f4f 	dsb	sy
 800ede0:	f3bf 8f6f 	isb	sy
 800ede4:	e009      	b.n	800edfa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	3310      	adds	r3, #16
 800edea:	4618      	mov	r0, r3
 800edec:	f7ff fef1 	bl	800ebd2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	3324      	adds	r3, #36	; 0x24
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7ff feec 	bl	800ebd2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800edfa:	f001 fc0b 	bl	8010614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800edfe:	2301      	movs	r3, #1
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3710      	adds	r7, #16
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	e000ed04 	.word	0xe000ed04

0800ee0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b08a      	sub	sp, #40	; 0x28
 800ee10:	af02      	add	r7, sp, #8
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	4613      	mov	r3, r2
 800ee18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d10a      	bne.n	800ee36 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ee20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee24:	f383 8811 	msr	BASEPRI, r3
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	f3bf 8f4f 	dsb	sy
 800ee30:	613b      	str	r3, [r7, #16]
}
 800ee32:	bf00      	nop
 800ee34:	e7fe      	b.n	800ee34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	68ba      	ldr	r2, [r7, #8]
 800ee3a:	fb02 f303 	mul.w	r3, r2, r3
 800ee3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ee40:	69fb      	ldr	r3, [r7, #28]
 800ee42:	3348      	adds	r3, #72	; 0x48
 800ee44:	4618      	mov	r0, r3
 800ee46:	f001 fc97 	bl	8010778 <pvPortMalloc>
 800ee4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d011      	beq.n	800ee76 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	3348      	adds	r3, #72	; 0x48
 800ee5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ee64:	79fa      	ldrb	r2, [r7, #7]
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	9300      	str	r3, [sp, #0]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	697a      	ldr	r2, [r7, #20]
 800ee6e:	68b9      	ldr	r1, [r7, #8]
 800ee70:	68f8      	ldr	r0, [r7, #12]
 800ee72:	f000 f805 	bl	800ee80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ee76:	69bb      	ldr	r3, [r7, #24]
	}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3720      	adds	r7, #32
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
 800ee8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d103      	bne.n	800ee9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	69ba      	ldr	r2, [r7, #24]
 800ee98:	601a      	str	r2, [r3, #0]
 800ee9a:	e002      	b.n	800eea2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	68fa      	ldr	r2, [r7, #12]
 800eea6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	68ba      	ldr	r2, [r7, #8]
 800eeac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eeae:	2101      	movs	r1, #1
 800eeb0:	69b8      	ldr	r0, [r7, #24]
 800eeb2:	f7ff ff43 	bl	800ed3c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eeb6:	bf00      	nop
 800eeb8:	3710      	adds	r7, #16
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
	...

0800eec0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b08e      	sub	sp, #56	; 0x38
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	60f8      	str	r0, [r7, #12]
 800eec8:	60b9      	str	r1, [r7, #8]
 800eeca:	607a      	str	r2, [r7, #4]
 800eecc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eece:	2300      	movs	r3, #0
 800eed0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d10a      	bne.n	800eef2 <xQueueGenericSend+0x32>
	__asm volatile
 800eedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee0:	f383 8811 	msr	BASEPRI, r3
 800eee4:	f3bf 8f6f 	isb	sy
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eeee:	bf00      	nop
 800eef0:	e7fe      	b.n	800eef0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d103      	bne.n	800ef00 <xQueueGenericSend+0x40>
 800eef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d101      	bne.n	800ef04 <xQueueGenericSend+0x44>
 800ef00:	2301      	movs	r3, #1
 800ef02:	e000      	b.n	800ef06 <xQueueGenericSend+0x46>
 800ef04:	2300      	movs	r3, #0
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d10a      	bne.n	800ef20 <xQueueGenericSend+0x60>
	__asm volatile
 800ef0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0e:	f383 8811 	msr	BASEPRI, r3
 800ef12:	f3bf 8f6f 	isb	sy
 800ef16:	f3bf 8f4f 	dsb	sy
 800ef1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ef1c:	bf00      	nop
 800ef1e:	e7fe      	b.n	800ef1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	2b02      	cmp	r3, #2
 800ef24:	d103      	bne.n	800ef2e <xQueueGenericSend+0x6e>
 800ef26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	d101      	bne.n	800ef32 <xQueueGenericSend+0x72>
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e000      	b.n	800ef34 <xQueueGenericSend+0x74>
 800ef32:	2300      	movs	r3, #0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d10a      	bne.n	800ef4e <xQueueGenericSend+0x8e>
	__asm volatile
 800ef38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef3c:	f383 8811 	msr	BASEPRI, r3
 800ef40:	f3bf 8f6f 	isb	sy
 800ef44:	f3bf 8f4f 	dsb	sy
 800ef48:	623b      	str	r3, [r7, #32]
}
 800ef4a:	bf00      	nop
 800ef4c:	e7fe      	b.n	800ef4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef4e:	f001 f8fb 	bl	8010148 <xTaskGetSchedulerState>
 800ef52:	4603      	mov	r3, r0
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d102      	bne.n	800ef5e <xQueueGenericSend+0x9e>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d101      	bne.n	800ef62 <xQueueGenericSend+0xa2>
 800ef5e:	2301      	movs	r3, #1
 800ef60:	e000      	b.n	800ef64 <xQueueGenericSend+0xa4>
 800ef62:	2300      	movs	r3, #0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d10a      	bne.n	800ef7e <xQueueGenericSend+0xbe>
	__asm volatile
 800ef68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6c:	f383 8811 	msr	BASEPRI, r3
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	61fb      	str	r3, [r7, #28]
}
 800ef7a:	bf00      	nop
 800ef7c:	e7fe      	b.n	800ef7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef7e:	f001 fb19 	bl	80105b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d302      	bcc.n	800ef94 <xQueueGenericSend+0xd4>
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	2b02      	cmp	r3, #2
 800ef92:	d129      	bne.n	800efe8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef94:	683a      	ldr	r2, [r7, #0]
 800ef96:	68b9      	ldr	r1, [r7, #8]
 800ef98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef9a:	f000 f96f 	bl	800f27c <prvCopyDataToQueue>
 800ef9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d010      	beq.n	800efca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efaa:	3324      	adds	r3, #36	; 0x24
 800efac:	4618      	mov	r0, r3
 800efae:	f000 ff0f 	bl	800fdd0 <xTaskRemoveFromEventList>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d013      	beq.n	800efe0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800efb8:	4b3f      	ldr	r3, [pc, #252]	; (800f0b8 <xQueueGenericSend+0x1f8>)
 800efba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efbe:	601a      	str	r2, [r3, #0]
 800efc0:	f3bf 8f4f 	dsb	sy
 800efc4:	f3bf 8f6f 	isb	sy
 800efc8:	e00a      	b.n	800efe0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800efca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d007      	beq.n	800efe0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800efd0:	4b39      	ldr	r3, [pc, #228]	; (800f0b8 <xQueueGenericSend+0x1f8>)
 800efd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efd6:	601a      	str	r2, [r3, #0]
 800efd8:	f3bf 8f4f 	dsb	sy
 800efdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800efe0:	f001 fb18 	bl	8010614 <vPortExitCritical>
				return pdPASS;
 800efe4:	2301      	movs	r3, #1
 800efe6:	e063      	b.n	800f0b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d103      	bne.n	800eff6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800efee:	f001 fb11 	bl	8010614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800eff2:	2300      	movs	r3, #0
 800eff4:	e05c      	b.n	800f0b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d106      	bne.n	800f00a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800effc:	f107 0314 	add.w	r3, r7, #20
 800f000:	4618      	mov	r0, r3
 800f002:	f000 ff47 	bl	800fe94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f006:	2301      	movs	r3, #1
 800f008:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f00a:	f001 fb03 	bl	8010614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f00e:	f000 fcfd 	bl	800fa0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f012:	f001 facf 	bl	80105b4 <vPortEnterCritical>
 800f016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f01c:	b25b      	sxtb	r3, r3
 800f01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f022:	d103      	bne.n	800f02c <xQueueGenericSend+0x16c>
 800f024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f026:	2200      	movs	r2, #0
 800f028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f032:	b25b      	sxtb	r3, r3
 800f034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f038:	d103      	bne.n	800f042 <xQueueGenericSend+0x182>
 800f03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03c:	2200      	movs	r2, #0
 800f03e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f042:	f001 fae7 	bl	8010614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f046:	1d3a      	adds	r2, r7, #4
 800f048:	f107 0314 	add.w	r3, r7, #20
 800f04c:	4611      	mov	r1, r2
 800f04e:	4618      	mov	r0, r3
 800f050:	f000 ff36 	bl	800fec0 <xTaskCheckForTimeOut>
 800f054:	4603      	mov	r3, r0
 800f056:	2b00      	cmp	r3, #0
 800f058:	d124      	bne.n	800f0a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f05a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f05c:	f000 fa06 	bl	800f46c <prvIsQueueFull>
 800f060:	4603      	mov	r3, r0
 800f062:	2b00      	cmp	r3, #0
 800f064:	d018      	beq.n	800f098 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f068:	3310      	adds	r3, #16
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	4611      	mov	r1, r2
 800f06e:	4618      	mov	r0, r3
 800f070:	f000 fe8a 	bl	800fd88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f076:	f000 f991 	bl	800f39c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f07a:	f000 fcd5 	bl	800fa28 <xTaskResumeAll>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b00      	cmp	r3, #0
 800f082:	f47f af7c 	bne.w	800ef7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f086:	4b0c      	ldr	r3, [pc, #48]	; (800f0b8 <xQueueGenericSend+0x1f8>)
 800f088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f08c:	601a      	str	r2, [r3, #0]
 800f08e:	f3bf 8f4f 	dsb	sy
 800f092:	f3bf 8f6f 	isb	sy
 800f096:	e772      	b.n	800ef7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f09a:	f000 f97f 	bl	800f39c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f09e:	f000 fcc3 	bl	800fa28 <xTaskResumeAll>
 800f0a2:	e76c      	b.n	800ef7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f0a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0a6:	f000 f979 	bl	800f39c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f0aa:	f000 fcbd 	bl	800fa28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f0ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3738      	adds	r7, #56	; 0x38
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}
 800f0b8:	e000ed04 	.word	0xe000ed04

0800f0bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b08c      	sub	sp, #48	; 0x30
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d10a      	bne.n	800f0ec <xQueueReceive+0x30>
	__asm volatile
 800f0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0da:	f383 8811 	msr	BASEPRI, r3
 800f0de:	f3bf 8f6f 	isb	sy
 800f0e2:	f3bf 8f4f 	dsb	sy
 800f0e6:	623b      	str	r3, [r7, #32]
}
 800f0e8:	bf00      	nop
 800f0ea:	e7fe      	b.n	800f0ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d103      	bne.n	800f0fa <xQueueReceive+0x3e>
 800f0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d101      	bne.n	800f0fe <xQueueReceive+0x42>
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	e000      	b.n	800f100 <xQueueReceive+0x44>
 800f0fe:	2300      	movs	r3, #0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d10a      	bne.n	800f11a <xQueueReceive+0x5e>
	__asm volatile
 800f104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f108:	f383 8811 	msr	BASEPRI, r3
 800f10c:	f3bf 8f6f 	isb	sy
 800f110:	f3bf 8f4f 	dsb	sy
 800f114:	61fb      	str	r3, [r7, #28]
}
 800f116:	bf00      	nop
 800f118:	e7fe      	b.n	800f118 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f11a:	f001 f815 	bl	8010148 <xTaskGetSchedulerState>
 800f11e:	4603      	mov	r3, r0
 800f120:	2b00      	cmp	r3, #0
 800f122:	d102      	bne.n	800f12a <xQueueReceive+0x6e>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d101      	bne.n	800f12e <xQueueReceive+0x72>
 800f12a:	2301      	movs	r3, #1
 800f12c:	e000      	b.n	800f130 <xQueueReceive+0x74>
 800f12e:	2300      	movs	r3, #0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d10a      	bne.n	800f14a <xQueueReceive+0x8e>
	__asm volatile
 800f134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f138:	f383 8811 	msr	BASEPRI, r3
 800f13c:	f3bf 8f6f 	isb	sy
 800f140:	f3bf 8f4f 	dsb	sy
 800f144:	61bb      	str	r3, [r7, #24]
}
 800f146:	bf00      	nop
 800f148:	e7fe      	b.n	800f148 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f14a:	f001 fa33 	bl	80105b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f152:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f156:	2b00      	cmp	r3, #0
 800f158:	d01f      	beq.n	800f19a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f15a:	68b9      	ldr	r1, [r7, #8]
 800f15c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f15e:	f000 f8f7 	bl	800f350 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f164:	1e5a      	subs	r2, r3, #1
 800f166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f168:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16c:	691b      	ldr	r3, [r3, #16]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d00f      	beq.n	800f192 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f174:	3310      	adds	r3, #16
 800f176:	4618      	mov	r0, r3
 800f178:	f000 fe2a 	bl	800fdd0 <xTaskRemoveFromEventList>
 800f17c:	4603      	mov	r3, r0
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d007      	beq.n	800f192 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f182:	4b3d      	ldr	r3, [pc, #244]	; (800f278 <xQueueReceive+0x1bc>)
 800f184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f188:	601a      	str	r2, [r3, #0]
 800f18a:	f3bf 8f4f 	dsb	sy
 800f18e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f192:	f001 fa3f 	bl	8010614 <vPortExitCritical>
				return pdPASS;
 800f196:	2301      	movs	r3, #1
 800f198:	e069      	b.n	800f26e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d103      	bne.n	800f1a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f1a0:	f001 fa38 	bl	8010614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	e062      	b.n	800f26e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d106      	bne.n	800f1bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f1ae:	f107 0310 	add.w	r3, r7, #16
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f000 fe6e 	bl	800fe94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f1bc:	f001 fa2a 	bl	8010614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f1c0:	f000 fc24 	bl	800fa0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f1c4:	f001 f9f6 	bl	80105b4 <vPortEnterCritical>
 800f1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1ce:	b25b      	sxtb	r3, r3
 800f1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d4:	d103      	bne.n	800f1de <xQueueReceive+0x122>
 800f1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d8:	2200      	movs	r2, #0
 800f1da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1e4:	b25b      	sxtb	r3, r3
 800f1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ea:	d103      	bne.n	800f1f4 <xQueueReceive+0x138>
 800f1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1f4:	f001 fa0e 	bl	8010614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1f8:	1d3a      	adds	r2, r7, #4
 800f1fa:	f107 0310 	add.w	r3, r7, #16
 800f1fe:	4611      	mov	r1, r2
 800f200:	4618      	mov	r0, r3
 800f202:	f000 fe5d 	bl	800fec0 <xTaskCheckForTimeOut>
 800f206:	4603      	mov	r3, r0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d123      	bne.n	800f254 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f20c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f20e:	f000 f917 	bl	800f440 <prvIsQueueEmpty>
 800f212:	4603      	mov	r3, r0
 800f214:	2b00      	cmp	r3, #0
 800f216:	d017      	beq.n	800f248 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f21a:	3324      	adds	r3, #36	; 0x24
 800f21c:	687a      	ldr	r2, [r7, #4]
 800f21e:	4611      	mov	r1, r2
 800f220:	4618      	mov	r0, r3
 800f222:	f000 fdb1 	bl	800fd88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f228:	f000 f8b8 	bl	800f39c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f22c:	f000 fbfc 	bl	800fa28 <xTaskResumeAll>
 800f230:	4603      	mov	r3, r0
 800f232:	2b00      	cmp	r3, #0
 800f234:	d189      	bne.n	800f14a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f236:	4b10      	ldr	r3, [pc, #64]	; (800f278 <xQueueReceive+0x1bc>)
 800f238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f23c:	601a      	str	r2, [r3, #0]
 800f23e:	f3bf 8f4f 	dsb	sy
 800f242:	f3bf 8f6f 	isb	sy
 800f246:	e780      	b.n	800f14a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f24a:	f000 f8a7 	bl	800f39c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f24e:	f000 fbeb 	bl	800fa28 <xTaskResumeAll>
 800f252:	e77a      	b.n	800f14a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f256:	f000 f8a1 	bl	800f39c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f25a:	f000 fbe5 	bl	800fa28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f25e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f260:	f000 f8ee 	bl	800f440 <prvIsQueueEmpty>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	f43f af6f 	beq.w	800f14a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f26c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3730      	adds	r7, #48	; 0x30
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	e000ed04 	.word	0xe000ed04

0800f27c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b086      	sub	sp, #24
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f288:	2300      	movs	r3, #0
 800f28a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f290:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f296:	2b00      	cmp	r3, #0
 800f298:	d10d      	bne.n	800f2b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d14d      	bne.n	800f33e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	689b      	ldr	r3, [r3, #8]
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f000 ff6c 	bl	8010184 <xTaskPriorityDisinherit>
 800f2ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	609a      	str	r2, [r3, #8]
 800f2b4:	e043      	b.n	800f33e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d119      	bne.n	800f2f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	6858      	ldr	r0, [r3, #4]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	68b9      	ldr	r1, [r7, #8]
 800f2c8:	f001 fc6a 	bl	8010ba0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	685a      	ldr	r2, [r3, #4]
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2d4:	441a      	add	r2, r3
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	685a      	ldr	r2, [r3, #4]
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	689b      	ldr	r3, [r3, #8]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d32b      	bcc.n	800f33e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	605a      	str	r2, [r3, #4]
 800f2ee:	e026      	b.n	800f33e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	68d8      	ldr	r0, [r3, #12]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	68b9      	ldr	r1, [r7, #8]
 800f2fc:	f001 fc50 	bl	8010ba0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	68da      	ldr	r2, [r3, #12]
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f308:	425b      	negs	r3, r3
 800f30a:	441a      	add	r2, r3
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	68da      	ldr	r2, [r3, #12]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d207      	bcs.n	800f32c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	689a      	ldr	r2, [r3, #8]
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f324:	425b      	negs	r3, r3
 800f326:	441a      	add	r2, r3
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2b02      	cmp	r3, #2
 800f330:	d105      	bne.n	800f33e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d002      	beq.n	800f33e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	3b01      	subs	r3, #1
 800f33c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	1c5a      	adds	r2, r3, #1
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f346:	697b      	ldr	r3, [r7, #20]
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3718      	adds	r7, #24
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d018      	beq.n	800f394 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	68da      	ldr	r2, [r3, #12]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f36a:	441a      	add	r2, r3
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	68da      	ldr	r2, [r3, #12]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	689b      	ldr	r3, [r3, #8]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d303      	bcc.n	800f384 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681a      	ldr	r2, [r3, #0]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	68d9      	ldr	r1, [r3, #12]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f38c:	461a      	mov	r2, r3
 800f38e:	6838      	ldr	r0, [r7, #0]
 800f390:	f001 fc06 	bl	8010ba0 <memcpy>
	}
}
 800f394:	bf00      	nop
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f3a4:	f001 f906 	bl	80105b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f3ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f3b0:	e011      	b.n	800f3d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d012      	beq.n	800f3e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	3324      	adds	r3, #36	; 0x24
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 fd06 	bl	800fdd0 <xTaskRemoveFromEventList>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d001      	beq.n	800f3ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f3ca:	f000 fddb 	bl	800ff84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f3ce:	7bfb      	ldrb	r3, [r7, #15]
 800f3d0:	3b01      	subs	r3, #1
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f3d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	dce9      	bgt.n	800f3b2 <prvUnlockQueue+0x16>
 800f3de:	e000      	b.n	800f3e2 <prvUnlockQueue+0x46>
					break;
 800f3e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	22ff      	movs	r2, #255	; 0xff
 800f3e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f3ea:	f001 f913 	bl	8010614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f3ee:	f001 f8e1 	bl	80105b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f3f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f3fa:	e011      	b.n	800f420 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	691b      	ldr	r3, [r3, #16]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d012      	beq.n	800f42a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	3310      	adds	r3, #16
 800f408:	4618      	mov	r0, r3
 800f40a:	f000 fce1 	bl	800fdd0 <xTaskRemoveFromEventList>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	d001      	beq.n	800f418 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f414:	f000 fdb6 	bl	800ff84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f418:	7bbb      	ldrb	r3, [r7, #14]
 800f41a:	3b01      	subs	r3, #1
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f424:	2b00      	cmp	r3, #0
 800f426:	dce9      	bgt.n	800f3fc <prvUnlockQueue+0x60>
 800f428:	e000      	b.n	800f42c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f42a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	22ff      	movs	r2, #255	; 0xff
 800f430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f434:	f001 f8ee 	bl	8010614 <vPortExitCritical>
}
 800f438:	bf00      	nop
 800f43a:	3710      	adds	r7, #16
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f448:	f001 f8b4 	bl	80105b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f450:	2b00      	cmp	r3, #0
 800f452:	d102      	bne.n	800f45a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f454:	2301      	movs	r3, #1
 800f456:	60fb      	str	r3, [r7, #12]
 800f458:	e001      	b.n	800f45e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f45a:	2300      	movs	r3, #0
 800f45c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f45e:	f001 f8d9 	bl	8010614 <vPortExitCritical>

	return xReturn;
 800f462:	68fb      	ldr	r3, [r7, #12]
}
 800f464:	4618      	mov	r0, r3
 800f466:	3710      	adds	r7, #16
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b084      	sub	sp, #16
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f474:	f001 f89e 	bl	80105b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f480:	429a      	cmp	r2, r3
 800f482:	d102      	bne.n	800f48a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f484:	2301      	movs	r3, #1
 800f486:	60fb      	str	r3, [r7, #12]
 800f488:	e001      	b.n	800f48e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f48a:	2300      	movs	r3, #0
 800f48c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f48e:	f001 f8c1 	bl	8010614 <vPortExitCritical>

	return xReturn;
 800f492:	68fb      	ldr	r3, [r7, #12]
}
 800f494:	4618      	mov	r0, r3
 800f496:	3710      	adds	r7, #16
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b08e      	sub	sp, #56	; 0x38
 800f4a0:	af04      	add	r7, sp, #16
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	607a      	str	r2, [r7, #4]
 800f4a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d10a      	bne.n	800f4c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b4:	f383 8811 	msr	BASEPRI, r3
 800f4b8:	f3bf 8f6f 	isb	sy
 800f4bc:	f3bf 8f4f 	dsb	sy
 800f4c0:	623b      	str	r3, [r7, #32]
}
 800f4c2:	bf00      	nop
 800f4c4:	e7fe      	b.n	800f4c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d10a      	bne.n	800f4e2 <xTaskCreateStatic+0x46>
	__asm volatile
 800f4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d0:	f383 8811 	msr	BASEPRI, r3
 800f4d4:	f3bf 8f6f 	isb	sy
 800f4d8:	f3bf 8f4f 	dsb	sy
 800f4dc:	61fb      	str	r3, [r7, #28]
}
 800f4de:	bf00      	nop
 800f4e0:	e7fe      	b.n	800f4e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f4e2:	2354      	movs	r3, #84	; 0x54
 800f4e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	2b54      	cmp	r3, #84	; 0x54
 800f4ea:	d00a      	beq.n	800f502 <xTaskCreateStatic+0x66>
	__asm volatile
 800f4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f0:	f383 8811 	msr	BASEPRI, r3
 800f4f4:	f3bf 8f6f 	isb	sy
 800f4f8:	f3bf 8f4f 	dsb	sy
 800f4fc:	61bb      	str	r3, [r7, #24]
}
 800f4fe:	bf00      	nop
 800f500:	e7fe      	b.n	800f500 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f502:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f506:	2b00      	cmp	r3, #0
 800f508:	d01e      	beq.n	800f548 <xTaskCreateStatic+0xac>
 800f50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d01b      	beq.n	800f548 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f512:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f518:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51c:	2202      	movs	r2, #2
 800f51e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f522:	2300      	movs	r3, #0
 800f524:	9303      	str	r3, [sp, #12]
 800f526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f528:	9302      	str	r3, [sp, #8]
 800f52a:	f107 0314 	add.w	r3, r7, #20
 800f52e:	9301      	str	r3, [sp, #4]
 800f530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f532:	9300      	str	r3, [sp, #0]
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	68b9      	ldr	r1, [r7, #8]
 800f53a:	68f8      	ldr	r0, [r7, #12]
 800f53c:	f000 f850 	bl	800f5e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f542:	f000 f8d5 	bl	800f6f0 <prvAddNewTaskToReadyList>
 800f546:	e001      	b.n	800f54c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f548:	2300      	movs	r3, #0
 800f54a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f54c:	697b      	ldr	r3, [r7, #20]
	}
 800f54e:	4618      	mov	r0, r3
 800f550:	3728      	adds	r7, #40	; 0x28
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}

0800f556 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f556:	b580      	push	{r7, lr}
 800f558:	b08c      	sub	sp, #48	; 0x30
 800f55a:	af04      	add	r7, sp, #16
 800f55c:	60f8      	str	r0, [r7, #12]
 800f55e:	60b9      	str	r1, [r7, #8]
 800f560:	603b      	str	r3, [r7, #0]
 800f562:	4613      	mov	r3, r2
 800f564:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f566:	88fb      	ldrh	r3, [r7, #6]
 800f568:	009b      	lsls	r3, r3, #2
 800f56a:	4618      	mov	r0, r3
 800f56c:	f001 f904 	bl	8010778 <pvPortMalloc>
 800f570:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d00e      	beq.n	800f596 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f578:	2054      	movs	r0, #84	; 0x54
 800f57a:	f001 f8fd 	bl	8010778 <pvPortMalloc>
 800f57e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d003      	beq.n	800f58e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f586:	69fb      	ldr	r3, [r7, #28]
 800f588:	697a      	ldr	r2, [r7, #20]
 800f58a:	631a      	str	r2, [r3, #48]	; 0x30
 800f58c:	e005      	b.n	800f59a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f58e:	6978      	ldr	r0, [r7, #20]
 800f590:	f001 f9be 	bl	8010910 <vPortFree>
 800f594:	e001      	b.n	800f59a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f596:	2300      	movs	r3, #0
 800f598:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f59a:	69fb      	ldr	r3, [r7, #28]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d017      	beq.n	800f5d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f5a8:	88fa      	ldrh	r2, [r7, #6]
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	9303      	str	r3, [sp, #12]
 800f5ae:	69fb      	ldr	r3, [r7, #28]
 800f5b0:	9302      	str	r3, [sp, #8]
 800f5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b4:	9301      	str	r3, [sp, #4]
 800f5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b8:	9300      	str	r3, [sp, #0]
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	68b9      	ldr	r1, [r7, #8]
 800f5be:	68f8      	ldr	r0, [r7, #12]
 800f5c0:	f000 f80e 	bl	800f5e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f5c4:	69f8      	ldr	r0, [r7, #28]
 800f5c6:	f000 f893 	bl	800f6f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	61bb      	str	r3, [r7, #24]
 800f5ce:	e002      	b.n	800f5d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f5d6:	69bb      	ldr	r3, [r7, #24]
	}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3720      	adds	r7, #32
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b088      	sub	sp, #32
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	60b9      	str	r1, [r7, #8]
 800f5ea:	607a      	str	r2, [r7, #4]
 800f5ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f5f8:	3b01      	subs	r3, #1
 800f5fa:	009b      	lsls	r3, r3, #2
 800f5fc:	4413      	add	r3, r2
 800f5fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f600:	69bb      	ldr	r3, [r7, #24]
 800f602:	f023 0307 	bic.w	r3, r3, #7
 800f606:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f608:	69bb      	ldr	r3, [r7, #24]
 800f60a:	f003 0307 	and.w	r3, r3, #7
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d00a      	beq.n	800f628 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f616:	f383 8811 	msr	BASEPRI, r3
 800f61a:	f3bf 8f6f 	isb	sy
 800f61e:	f3bf 8f4f 	dsb	sy
 800f622:	617b      	str	r3, [r7, #20]
}
 800f624:	bf00      	nop
 800f626:	e7fe      	b.n	800f626 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d01f      	beq.n	800f66e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f62e:	2300      	movs	r3, #0
 800f630:	61fb      	str	r3, [r7, #28]
 800f632:	e012      	b.n	800f65a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f634:	68ba      	ldr	r2, [r7, #8]
 800f636:	69fb      	ldr	r3, [r7, #28]
 800f638:	4413      	add	r3, r2
 800f63a:	7819      	ldrb	r1, [r3, #0]
 800f63c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f63e:	69fb      	ldr	r3, [r7, #28]
 800f640:	4413      	add	r3, r2
 800f642:	3334      	adds	r3, #52	; 0x34
 800f644:	460a      	mov	r2, r1
 800f646:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f648:	68ba      	ldr	r2, [r7, #8]
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	4413      	add	r3, r2
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d006      	beq.n	800f662 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	3301      	adds	r3, #1
 800f658:	61fb      	str	r3, [r7, #28]
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	2b0f      	cmp	r3, #15
 800f65e:	d9e9      	bls.n	800f634 <prvInitialiseNewTask+0x54>
 800f660:	e000      	b.n	800f664 <prvInitialiseNewTask+0x84>
			{
				break;
 800f662:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f666:	2200      	movs	r2, #0
 800f668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f66c:	e003      	b.n	800f676 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f670:	2200      	movs	r2, #0
 800f672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f678:	2b06      	cmp	r3, #6
 800f67a:	d901      	bls.n	800f680 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f67c:	2306      	movs	r3, #6
 800f67e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f684:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f68a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68e:	2200      	movs	r2, #0
 800f690:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f694:	3304      	adds	r3, #4
 800f696:	4618      	mov	r0, r3
 800f698:	f7ff fabb 	bl	800ec12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69e:	3318      	adds	r3, #24
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7ff fab6 	bl	800ec12 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ae:	f1c3 0207 	rsb	r2, r3, #7
 800f6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6be:	2200      	movs	r2, #0
 800f6c0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f6ca:	683a      	ldr	r2, [r7, #0]
 800f6cc:	68f9      	ldr	r1, [r7, #12]
 800f6ce:	69b8      	ldr	r0, [r7, #24]
 800f6d0:	f000 fe44 	bl	801035c <pxPortInitialiseStack>
 800f6d4:	4602      	mov	r2, r0
 800f6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d002      	beq.n	800f6e6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6e6:	bf00      	nop
 800f6e8:	3720      	adds	r7, #32
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
	...

0800f6f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f6f8:	f000 ff5c 	bl	80105b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f6fc:	4b2a      	ldr	r3, [pc, #168]	; (800f7a8 <prvAddNewTaskToReadyList+0xb8>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	3301      	adds	r3, #1
 800f702:	4a29      	ldr	r2, [pc, #164]	; (800f7a8 <prvAddNewTaskToReadyList+0xb8>)
 800f704:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f706:	4b29      	ldr	r3, [pc, #164]	; (800f7ac <prvAddNewTaskToReadyList+0xbc>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d109      	bne.n	800f722 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f70e:	4a27      	ldr	r2, [pc, #156]	; (800f7ac <prvAddNewTaskToReadyList+0xbc>)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f714:	4b24      	ldr	r3, [pc, #144]	; (800f7a8 <prvAddNewTaskToReadyList+0xb8>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2b01      	cmp	r3, #1
 800f71a:	d110      	bne.n	800f73e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f71c:	f000 fc56 	bl	800ffcc <prvInitialiseTaskLists>
 800f720:	e00d      	b.n	800f73e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f722:	4b23      	ldr	r3, [pc, #140]	; (800f7b0 <prvAddNewTaskToReadyList+0xc0>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d109      	bne.n	800f73e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f72a:	4b20      	ldr	r3, [pc, #128]	; (800f7ac <prvAddNewTaskToReadyList+0xbc>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f734:	429a      	cmp	r2, r3
 800f736:	d802      	bhi.n	800f73e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f738:	4a1c      	ldr	r2, [pc, #112]	; (800f7ac <prvAddNewTaskToReadyList+0xbc>)
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f73e:	4b1d      	ldr	r3, [pc, #116]	; (800f7b4 <prvAddNewTaskToReadyList+0xc4>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	3301      	adds	r3, #1
 800f744:	4a1b      	ldr	r2, [pc, #108]	; (800f7b4 <prvAddNewTaskToReadyList+0xc4>)
 800f746:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f74c:	2201      	movs	r2, #1
 800f74e:	409a      	lsls	r2, r3
 800f750:	4b19      	ldr	r3, [pc, #100]	; (800f7b8 <prvAddNewTaskToReadyList+0xc8>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	4313      	orrs	r3, r2
 800f756:	4a18      	ldr	r2, [pc, #96]	; (800f7b8 <prvAddNewTaskToReadyList+0xc8>)
 800f758:	6013      	str	r3, [r2, #0]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f75e:	4613      	mov	r3, r2
 800f760:	009b      	lsls	r3, r3, #2
 800f762:	4413      	add	r3, r2
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	4a15      	ldr	r2, [pc, #84]	; (800f7bc <prvAddNewTaskToReadyList+0xcc>)
 800f768:	441a      	add	r2, r3
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	3304      	adds	r3, #4
 800f76e:	4619      	mov	r1, r3
 800f770:	4610      	mov	r0, r2
 800f772:	f7ff fa5b 	bl	800ec2c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f776:	f000 ff4d 	bl	8010614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f77a:	4b0d      	ldr	r3, [pc, #52]	; (800f7b0 <prvAddNewTaskToReadyList+0xc0>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d00e      	beq.n	800f7a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f782:	4b0a      	ldr	r3, [pc, #40]	; (800f7ac <prvAddNewTaskToReadyList+0xbc>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d207      	bcs.n	800f7a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f790:	4b0b      	ldr	r3, [pc, #44]	; (800f7c0 <prvAddNewTaskToReadyList+0xd0>)
 800f792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f796:	601a      	str	r2, [r3, #0]
 800f798:	f3bf 8f4f 	dsb	sy
 800f79c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7a0:	bf00      	nop
 800f7a2:	3708      	adds	r7, #8
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}
 800f7a8:	20000dac 	.word	0x20000dac
 800f7ac:	20000cac 	.word	0x20000cac
 800f7b0:	20000db8 	.word	0x20000db8
 800f7b4:	20000dc8 	.word	0x20000dc8
 800f7b8:	20000db4 	.word	0x20000db4
 800f7bc:	20000cb0 	.word	0x20000cb0
 800f7c0:	e000ed04 	.word	0xe000ed04

0800f7c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d017      	beq.n	800f806 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f7d6:	4b13      	ldr	r3, [pc, #76]	; (800f824 <vTaskDelay+0x60>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d00a      	beq.n	800f7f4 <vTaskDelay+0x30>
	__asm volatile
 800f7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e2:	f383 8811 	msr	BASEPRI, r3
 800f7e6:	f3bf 8f6f 	isb	sy
 800f7ea:	f3bf 8f4f 	dsb	sy
 800f7ee:	60bb      	str	r3, [r7, #8]
}
 800f7f0:	bf00      	nop
 800f7f2:	e7fe      	b.n	800f7f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f7f4:	f000 f90a 	bl	800fa0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f7f8:	2100      	movs	r1, #0
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f000 fd48 	bl	8010290 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f800:	f000 f912 	bl	800fa28 <xTaskResumeAll>
 800f804:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d107      	bne.n	800f81c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f80c:	4b06      	ldr	r3, [pc, #24]	; (800f828 <vTaskDelay+0x64>)
 800f80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f812:	601a      	str	r2, [r3, #0]
 800f814:	f3bf 8f4f 	dsb	sy
 800f818:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f81c:	bf00      	nop
 800f81e:	3710      	adds	r7, #16
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	20000dd4 	.word	0x20000dd4
 800f828:	e000ed04 	.word	0xe000ed04

0800f82c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800f82c:	b480      	push	{r7}
 800f82e:	b087      	sub	sp, #28
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800f834:	2300      	movs	r3, #0
 800f836:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d10a      	bne.n	800f858 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800f842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f846:	f383 8811 	msr	BASEPRI, r3
 800f84a:	f3bf 8f6f 	isb	sy
 800f84e:	f3bf 8f4f 	dsb	sy
 800f852:	60fb      	str	r3, [r7, #12]
}
 800f854:	bf00      	nop
 800f856:	e7fe      	b.n	800f856 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	695b      	ldr	r3, [r3, #20]
 800f85c:	4a0a      	ldr	r2, [pc, #40]	; (800f888 <prvTaskIsTaskSuspended+0x5c>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d10a      	bne.n	800f878 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f866:	4a09      	ldr	r2, [pc, #36]	; (800f88c <prvTaskIsTaskSuspended+0x60>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d005      	beq.n	800f878 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800f86c:	693b      	ldr	r3, [r7, #16]
 800f86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f870:	2b00      	cmp	r3, #0
 800f872:	d101      	bne.n	800f878 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800f874:	2301      	movs	r3, #1
 800f876:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f878:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800f87a:	4618      	mov	r0, r3
 800f87c:	371c      	adds	r7, #28
 800f87e:	46bd      	mov	sp, r7
 800f880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f884:	4770      	bx	lr
 800f886:	bf00      	nop
 800f888:	20000d98 	.word	0x20000d98
 800f88c:	20000d6c 	.word	0x20000d6c

0800f890 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800f890:	b580      	push	{r7, lr}
 800f892:	b084      	sub	sp, #16
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d10a      	bne.n	800f8b8 <vTaskResume+0x28>
	__asm volatile
 800f8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a6:	f383 8811 	msr	BASEPRI, r3
 800f8aa:	f3bf 8f6f 	isb	sy
 800f8ae:	f3bf 8f4f 	dsb	sy
 800f8b2:	60bb      	str	r3, [r7, #8]
}
 800f8b4:	bf00      	nop
 800f8b6:	e7fe      	b.n	800f8b6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800f8b8:	4b20      	ldr	r3, [pc, #128]	; (800f93c <vTaskResume+0xac>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	68fa      	ldr	r2, [r7, #12]
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d037      	beq.n	800f932 <vTaskResume+0xa2>
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d034      	beq.n	800f932 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800f8c8:	f000 fe74 	bl	80105b4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800f8cc:	68f8      	ldr	r0, [r7, #12]
 800f8ce:	f7ff ffad 	bl	800f82c <prvTaskIsTaskSuspended>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d02a      	beq.n	800f92e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	3304      	adds	r3, #4
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7ff fa02 	bl	800ece6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8e6:	2201      	movs	r2, #1
 800f8e8:	409a      	lsls	r2, r3
 800f8ea:	4b15      	ldr	r3, [pc, #84]	; (800f940 <vTaskResume+0xb0>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4313      	orrs	r3, r2
 800f8f0:	4a13      	ldr	r2, [pc, #76]	; (800f940 <vTaskResume+0xb0>)
 800f8f2:	6013      	str	r3, [r2, #0]
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8f8:	4613      	mov	r3, r2
 800f8fa:	009b      	lsls	r3, r3, #2
 800f8fc:	4413      	add	r3, r2
 800f8fe:	009b      	lsls	r3, r3, #2
 800f900:	4a10      	ldr	r2, [pc, #64]	; (800f944 <vTaskResume+0xb4>)
 800f902:	441a      	add	r2, r3
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	3304      	adds	r3, #4
 800f908:	4619      	mov	r1, r3
 800f90a:	4610      	mov	r0, r2
 800f90c:	f7ff f98e 	bl	800ec2c <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f914:	4b09      	ldr	r3, [pc, #36]	; (800f93c <vTaskResume+0xac>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d307      	bcc.n	800f92e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800f91e:	4b0a      	ldr	r3, [pc, #40]	; (800f948 <vTaskResume+0xb8>)
 800f920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f924:	601a      	str	r2, [r3, #0]
 800f926:	f3bf 8f4f 	dsb	sy
 800f92a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800f92e:	f000 fe71 	bl	8010614 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f932:	bf00      	nop
 800f934:	3710      	adds	r7, #16
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	20000cac 	.word	0x20000cac
 800f940:	20000db4 	.word	0x20000db4
 800f944:	20000cb0 	.word	0x20000cb0
 800f948:	e000ed04 	.word	0xe000ed04

0800f94c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b08a      	sub	sp, #40	; 0x28
 800f950:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f952:	2300      	movs	r3, #0
 800f954:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f956:	2300      	movs	r3, #0
 800f958:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f95a:	463a      	mov	r2, r7
 800f95c:	1d39      	adds	r1, r7, #4
 800f95e:	f107 0308 	add.w	r3, r7, #8
 800f962:	4618      	mov	r0, r3
 800f964:	f7f1 fb12 	bl	8000f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f968:	6839      	ldr	r1, [r7, #0]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	68ba      	ldr	r2, [r7, #8]
 800f96e:	9202      	str	r2, [sp, #8]
 800f970:	9301      	str	r3, [sp, #4]
 800f972:	2300      	movs	r3, #0
 800f974:	9300      	str	r3, [sp, #0]
 800f976:	2300      	movs	r3, #0
 800f978:	460a      	mov	r2, r1
 800f97a:	491e      	ldr	r1, [pc, #120]	; (800f9f4 <vTaskStartScheduler+0xa8>)
 800f97c:	481e      	ldr	r0, [pc, #120]	; (800f9f8 <vTaskStartScheduler+0xac>)
 800f97e:	f7ff fd8d 	bl	800f49c <xTaskCreateStatic>
 800f982:	4603      	mov	r3, r0
 800f984:	4a1d      	ldr	r2, [pc, #116]	; (800f9fc <vTaskStartScheduler+0xb0>)
 800f986:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f988:	4b1c      	ldr	r3, [pc, #112]	; (800f9fc <vTaskStartScheduler+0xb0>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d002      	beq.n	800f996 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f990:	2301      	movs	r3, #1
 800f992:	617b      	str	r3, [r7, #20]
 800f994:	e001      	b.n	800f99a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f996:	2300      	movs	r3, #0
 800f998:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d116      	bne.n	800f9ce <vTaskStartScheduler+0x82>
	__asm volatile
 800f9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a4:	f383 8811 	msr	BASEPRI, r3
 800f9a8:	f3bf 8f6f 	isb	sy
 800f9ac:	f3bf 8f4f 	dsb	sy
 800f9b0:	613b      	str	r3, [r7, #16]
}
 800f9b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f9b4:	4b12      	ldr	r3, [pc, #72]	; (800fa00 <vTaskStartScheduler+0xb4>)
 800f9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f9ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f9bc:	4b11      	ldr	r3, [pc, #68]	; (800fa04 <vTaskStartScheduler+0xb8>)
 800f9be:	2201      	movs	r2, #1
 800f9c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f9c2:	4b11      	ldr	r3, [pc, #68]	; (800fa08 <vTaskStartScheduler+0xbc>)
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f9c8:	f000 fd52 	bl	8010470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f9cc:	e00e      	b.n	800f9ec <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9d4:	d10a      	bne.n	800f9ec <vTaskStartScheduler+0xa0>
	__asm volatile
 800f9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9da:	f383 8811 	msr	BASEPRI, r3
 800f9de:	f3bf 8f6f 	isb	sy
 800f9e2:	f3bf 8f4f 	dsb	sy
 800f9e6:	60fb      	str	r3, [r7, #12]
}
 800f9e8:	bf00      	nop
 800f9ea:	e7fe      	b.n	800f9ea <vTaskStartScheduler+0x9e>
}
 800f9ec:	bf00      	nop
 800f9ee:	3718      	adds	r7, #24
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}
 800f9f4:	08015fa4 	.word	0x08015fa4
 800f9f8:	0800ff9d 	.word	0x0800ff9d
 800f9fc:	20000dd0 	.word	0x20000dd0
 800fa00:	20000dcc 	.word	0x20000dcc
 800fa04:	20000db8 	.word	0x20000db8
 800fa08:	20000db0 	.word	0x20000db0

0800fa0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fa0c:	b480      	push	{r7}
 800fa0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fa10:	4b04      	ldr	r3, [pc, #16]	; (800fa24 <vTaskSuspendAll+0x18>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	3301      	adds	r3, #1
 800fa16:	4a03      	ldr	r2, [pc, #12]	; (800fa24 <vTaskSuspendAll+0x18>)
 800fa18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fa1a:	bf00      	nop
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr
 800fa24:	20000dd4 	.word	0x20000dd4

0800fa28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b084      	sub	sp, #16
 800fa2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fa32:	2300      	movs	r3, #0
 800fa34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fa36:	4b41      	ldr	r3, [pc, #260]	; (800fb3c <xTaskResumeAll+0x114>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d10a      	bne.n	800fa54 <xTaskResumeAll+0x2c>
	__asm volatile
 800fa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa42:	f383 8811 	msr	BASEPRI, r3
 800fa46:	f3bf 8f6f 	isb	sy
 800fa4a:	f3bf 8f4f 	dsb	sy
 800fa4e:	603b      	str	r3, [r7, #0]
}
 800fa50:	bf00      	nop
 800fa52:	e7fe      	b.n	800fa52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fa54:	f000 fdae 	bl	80105b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fa58:	4b38      	ldr	r3, [pc, #224]	; (800fb3c <xTaskResumeAll+0x114>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	3b01      	subs	r3, #1
 800fa5e:	4a37      	ldr	r2, [pc, #220]	; (800fb3c <xTaskResumeAll+0x114>)
 800fa60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa62:	4b36      	ldr	r3, [pc, #216]	; (800fb3c <xTaskResumeAll+0x114>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d161      	bne.n	800fb2e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fa6a:	4b35      	ldr	r3, [pc, #212]	; (800fb40 <xTaskResumeAll+0x118>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d05d      	beq.n	800fb2e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa72:	e02e      	b.n	800fad2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa74:	4b33      	ldr	r3, [pc, #204]	; (800fb44 <xTaskResumeAll+0x11c>)
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	3318      	adds	r3, #24
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7ff f930 	bl	800ece6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	3304      	adds	r3, #4
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7ff f92b 	bl	800ece6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa94:	2201      	movs	r2, #1
 800fa96:	409a      	lsls	r2, r3
 800fa98:	4b2b      	ldr	r3, [pc, #172]	; (800fb48 <xTaskResumeAll+0x120>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	4313      	orrs	r3, r2
 800fa9e:	4a2a      	ldr	r2, [pc, #168]	; (800fb48 <xTaskResumeAll+0x120>)
 800faa0:	6013      	str	r3, [r2, #0]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faa6:	4613      	mov	r3, r2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	4413      	add	r3, r2
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	4a27      	ldr	r2, [pc, #156]	; (800fb4c <xTaskResumeAll+0x124>)
 800fab0:	441a      	add	r2, r3
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	3304      	adds	r3, #4
 800fab6:	4619      	mov	r1, r3
 800fab8:	4610      	mov	r0, r2
 800faba:	f7ff f8b7 	bl	800ec2c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fac2:	4b23      	ldr	r3, [pc, #140]	; (800fb50 <xTaskResumeAll+0x128>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fac8:	429a      	cmp	r2, r3
 800faca:	d302      	bcc.n	800fad2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800facc:	4b21      	ldr	r3, [pc, #132]	; (800fb54 <xTaskResumeAll+0x12c>)
 800face:	2201      	movs	r2, #1
 800fad0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fad2:	4b1c      	ldr	r3, [pc, #112]	; (800fb44 <xTaskResumeAll+0x11c>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d1cc      	bne.n	800fa74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d001      	beq.n	800fae4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fae0:	f000 fb12 	bl	8010108 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fae4:	4b1c      	ldr	r3, [pc, #112]	; (800fb58 <xTaskResumeAll+0x130>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d010      	beq.n	800fb12 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800faf0:	f000 f836 	bl	800fb60 <xTaskIncrementTick>
 800faf4:	4603      	mov	r3, r0
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d002      	beq.n	800fb00 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fafa:	4b16      	ldr	r3, [pc, #88]	; (800fb54 <xTaskResumeAll+0x12c>)
 800fafc:	2201      	movs	r2, #1
 800fafe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	3b01      	subs	r3, #1
 800fb04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d1f1      	bne.n	800faf0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800fb0c:	4b12      	ldr	r3, [pc, #72]	; (800fb58 <xTaskResumeAll+0x130>)
 800fb0e:	2200      	movs	r2, #0
 800fb10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fb12:	4b10      	ldr	r3, [pc, #64]	; (800fb54 <xTaskResumeAll+0x12c>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d009      	beq.n	800fb2e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fb1e:	4b0f      	ldr	r3, [pc, #60]	; (800fb5c <xTaskResumeAll+0x134>)
 800fb20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb24:	601a      	str	r2, [r3, #0]
 800fb26:	f3bf 8f4f 	dsb	sy
 800fb2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fb2e:	f000 fd71 	bl	8010614 <vPortExitCritical>

	return xAlreadyYielded;
 800fb32:	68bb      	ldr	r3, [r7, #8]
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3710      	adds	r7, #16
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}
 800fb3c:	20000dd4 	.word	0x20000dd4
 800fb40:	20000dac 	.word	0x20000dac
 800fb44:	20000d6c 	.word	0x20000d6c
 800fb48:	20000db4 	.word	0x20000db4
 800fb4c:	20000cb0 	.word	0x20000cb0
 800fb50:	20000cac 	.word	0x20000cac
 800fb54:	20000dc0 	.word	0x20000dc0
 800fb58:	20000dbc 	.word	0x20000dbc
 800fb5c:	e000ed04 	.word	0xe000ed04

0800fb60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b086      	sub	sp, #24
 800fb64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fb66:	2300      	movs	r3, #0
 800fb68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb6a:	4b4e      	ldr	r3, [pc, #312]	; (800fca4 <xTaskIncrementTick+0x144>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f040 808e 	bne.w	800fc90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fb74:	4b4c      	ldr	r3, [pc, #304]	; (800fca8 <xTaskIncrementTick+0x148>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	3301      	adds	r3, #1
 800fb7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fb7c:	4a4a      	ldr	r2, [pc, #296]	; (800fca8 <xTaskIncrementTick+0x148>)
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d120      	bne.n	800fbca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fb88:	4b48      	ldr	r3, [pc, #288]	; (800fcac <xTaskIncrementTick+0x14c>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d00a      	beq.n	800fba8 <xTaskIncrementTick+0x48>
	__asm volatile
 800fb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb96:	f383 8811 	msr	BASEPRI, r3
 800fb9a:	f3bf 8f6f 	isb	sy
 800fb9e:	f3bf 8f4f 	dsb	sy
 800fba2:	603b      	str	r3, [r7, #0]
}
 800fba4:	bf00      	nop
 800fba6:	e7fe      	b.n	800fba6 <xTaskIncrementTick+0x46>
 800fba8:	4b40      	ldr	r3, [pc, #256]	; (800fcac <xTaskIncrementTick+0x14c>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	60fb      	str	r3, [r7, #12]
 800fbae:	4b40      	ldr	r3, [pc, #256]	; (800fcb0 <xTaskIncrementTick+0x150>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	4a3e      	ldr	r2, [pc, #248]	; (800fcac <xTaskIncrementTick+0x14c>)
 800fbb4:	6013      	str	r3, [r2, #0]
 800fbb6:	4a3e      	ldr	r2, [pc, #248]	; (800fcb0 <xTaskIncrementTick+0x150>)
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	6013      	str	r3, [r2, #0]
 800fbbc:	4b3d      	ldr	r3, [pc, #244]	; (800fcb4 <xTaskIncrementTick+0x154>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	4a3c      	ldr	r2, [pc, #240]	; (800fcb4 <xTaskIncrementTick+0x154>)
 800fbc4:	6013      	str	r3, [r2, #0]
 800fbc6:	f000 fa9f 	bl	8010108 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fbca:	4b3b      	ldr	r3, [pc, #236]	; (800fcb8 <xTaskIncrementTick+0x158>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	693a      	ldr	r2, [r7, #16]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d348      	bcc.n	800fc66 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbd4:	4b35      	ldr	r3, [pc, #212]	; (800fcac <xTaskIncrementTick+0x14c>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d104      	bne.n	800fbe8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbde:	4b36      	ldr	r3, [pc, #216]	; (800fcb8 <xTaskIncrementTick+0x158>)
 800fbe0:	f04f 32ff 	mov.w	r2, #4294967295
 800fbe4:	601a      	str	r2, [r3, #0]
					break;
 800fbe6:	e03e      	b.n	800fc66 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbe8:	4b30      	ldr	r3, [pc, #192]	; (800fcac <xTaskIncrementTick+0x14c>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	68db      	ldr	r3, [r3, #12]
 800fbee:	68db      	ldr	r3, [r3, #12]
 800fbf0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fbf8:	693a      	ldr	r2, [r7, #16]
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d203      	bcs.n	800fc08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fc00:	4a2d      	ldr	r2, [pc, #180]	; (800fcb8 <xTaskIncrementTick+0x158>)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fc06:	e02e      	b.n	800fc66 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	3304      	adds	r3, #4
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7ff f86a 	bl	800ece6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d004      	beq.n	800fc24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	3318      	adds	r3, #24
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7ff f861 	bl	800ece6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc28:	2201      	movs	r2, #1
 800fc2a:	409a      	lsls	r2, r3
 800fc2c:	4b23      	ldr	r3, [pc, #140]	; (800fcbc <xTaskIncrementTick+0x15c>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4313      	orrs	r3, r2
 800fc32:	4a22      	ldr	r2, [pc, #136]	; (800fcbc <xTaskIncrementTick+0x15c>)
 800fc34:	6013      	str	r3, [r2, #0]
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc3a:	4613      	mov	r3, r2
 800fc3c:	009b      	lsls	r3, r3, #2
 800fc3e:	4413      	add	r3, r2
 800fc40:	009b      	lsls	r3, r3, #2
 800fc42:	4a1f      	ldr	r2, [pc, #124]	; (800fcc0 <xTaskIncrementTick+0x160>)
 800fc44:	441a      	add	r2, r3
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	3304      	adds	r3, #4
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	4610      	mov	r0, r2
 800fc4e:	f7fe ffed 	bl	800ec2c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc56:	4b1b      	ldr	r3, [pc, #108]	; (800fcc4 <xTaskIncrementTick+0x164>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d3b9      	bcc.n	800fbd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fc60:	2301      	movs	r3, #1
 800fc62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc64:	e7b6      	b.n	800fbd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fc66:	4b17      	ldr	r3, [pc, #92]	; (800fcc4 <xTaskIncrementTick+0x164>)
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc6c:	4914      	ldr	r1, [pc, #80]	; (800fcc0 <xTaskIncrementTick+0x160>)
 800fc6e:	4613      	mov	r3, r2
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	4413      	add	r3, r2
 800fc74:	009b      	lsls	r3, r3, #2
 800fc76:	440b      	add	r3, r1
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	d901      	bls.n	800fc82 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800fc7e:	2301      	movs	r3, #1
 800fc80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fc82:	4b11      	ldr	r3, [pc, #68]	; (800fcc8 <xTaskIncrementTick+0x168>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d007      	beq.n	800fc9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	617b      	str	r3, [r7, #20]
 800fc8e:	e004      	b.n	800fc9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fc90:	4b0e      	ldr	r3, [pc, #56]	; (800fccc <xTaskIncrementTick+0x16c>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	3301      	adds	r3, #1
 800fc96:	4a0d      	ldr	r2, [pc, #52]	; (800fccc <xTaskIncrementTick+0x16c>)
 800fc98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fc9a:	697b      	ldr	r3, [r7, #20]
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3718      	adds	r7, #24
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}
 800fca4:	20000dd4 	.word	0x20000dd4
 800fca8:	20000db0 	.word	0x20000db0
 800fcac:	20000d64 	.word	0x20000d64
 800fcb0:	20000d68 	.word	0x20000d68
 800fcb4:	20000dc4 	.word	0x20000dc4
 800fcb8:	20000dcc 	.word	0x20000dcc
 800fcbc:	20000db4 	.word	0x20000db4
 800fcc0:	20000cb0 	.word	0x20000cb0
 800fcc4:	20000cac 	.word	0x20000cac
 800fcc8:	20000dc0 	.word	0x20000dc0
 800fccc:	20000dbc 	.word	0x20000dbc

0800fcd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b087      	sub	sp, #28
 800fcd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fcd6:	4b27      	ldr	r3, [pc, #156]	; (800fd74 <vTaskSwitchContext+0xa4>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d003      	beq.n	800fce6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fcde:	4b26      	ldr	r3, [pc, #152]	; (800fd78 <vTaskSwitchContext+0xa8>)
 800fce0:	2201      	movs	r2, #1
 800fce2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fce4:	e03f      	b.n	800fd66 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800fce6:	4b24      	ldr	r3, [pc, #144]	; (800fd78 <vTaskSwitchContext+0xa8>)
 800fce8:	2200      	movs	r2, #0
 800fcea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcec:	4b23      	ldr	r3, [pc, #140]	; (800fd7c <vTaskSwitchContext+0xac>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	fab3 f383 	clz	r3, r3
 800fcf8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fcfa:	7afb      	ldrb	r3, [r7, #11]
 800fcfc:	f1c3 031f 	rsb	r3, r3, #31
 800fd00:	617b      	str	r3, [r7, #20]
 800fd02:	491f      	ldr	r1, [pc, #124]	; (800fd80 <vTaskSwitchContext+0xb0>)
 800fd04:	697a      	ldr	r2, [r7, #20]
 800fd06:	4613      	mov	r3, r2
 800fd08:	009b      	lsls	r3, r3, #2
 800fd0a:	4413      	add	r3, r2
 800fd0c:	009b      	lsls	r3, r3, #2
 800fd0e:	440b      	add	r3, r1
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d10a      	bne.n	800fd2c <vTaskSwitchContext+0x5c>
	__asm volatile
 800fd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd1a:	f383 8811 	msr	BASEPRI, r3
 800fd1e:	f3bf 8f6f 	isb	sy
 800fd22:	f3bf 8f4f 	dsb	sy
 800fd26:	607b      	str	r3, [r7, #4]
}
 800fd28:	bf00      	nop
 800fd2a:	e7fe      	b.n	800fd2a <vTaskSwitchContext+0x5a>
 800fd2c:	697a      	ldr	r2, [r7, #20]
 800fd2e:	4613      	mov	r3, r2
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	4413      	add	r3, r2
 800fd34:	009b      	lsls	r3, r3, #2
 800fd36:	4a12      	ldr	r2, [pc, #72]	; (800fd80 <vTaskSwitchContext+0xb0>)
 800fd38:	4413      	add	r3, r2
 800fd3a:	613b      	str	r3, [r7, #16]
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	685a      	ldr	r2, [r3, #4]
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	605a      	str	r2, [r3, #4]
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	685a      	ldr	r2, [r3, #4]
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	3308      	adds	r3, #8
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d104      	bne.n	800fd5c <vTaskSwitchContext+0x8c>
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	685b      	ldr	r3, [r3, #4]
 800fd56:	685a      	ldr	r2, [r3, #4]
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	605a      	str	r2, [r3, #4]
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	68db      	ldr	r3, [r3, #12]
 800fd62:	4a08      	ldr	r2, [pc, #32]	; (800fd84 <vTaskSwitchContext+0xb4>)
 800fd64:	6013      	str	r3, [r2, #0]
}
 800fd66:	bf00      	nop
 800fd68:	371c      	adds	r7, #28
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr
 800fd72:	bf00      	nop
 800fd74:	20000dd4 	.word	0x20000dd4
 800fd78:	20000dc0 	.word	0x20000dc0
 800fd7c:	20000db4 	.word	0x20000db4
 800fd80:	20000cb0 	.word	0x20000cb0
 800fd84:	20000cac 	.word	0x20000cac

0800fd88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d10a      	bne.n	800fdae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd9c:	f383 8811 	msr	BASEPRI, r3
 800fda0:	f3bf 8f6f 	isb	sy
 800fda4:	f3bf 8f4f 	dsb	sy
 800fda8:	60fb      	str	r3, [r7, #12]
}
 800fdaa:	bf00      	nop
 800fdac:	e7fe      	b.n	800fdac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fdae:	4b07      	ldr	r3, [pc, #28]	; (800fdcc <vTaskPlaceOnEventList+0x44>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	3318      	adds	r3, #24
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f7fe ff5c 	bl	800ec74 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fdbc:	2101      	movs	r1, #1
 800fdbe:	6838      	ldr	r0, [r7, #0]
 800fdc0:	f000 fa66 	bl	8010290 <prvAddCurrentTaskToDelayedList>
}
 800fdc4:	bf00      	nop
 800fdc6:	3710      	adds	r7, #16
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	20000cac 	.word	0x20000cac

0800fdd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b086      	sub	sp, #24
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	68db      	ldr	r3, [r3, #12]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d10a      	bne.n	800fdfc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdea:	f383 8811 	msr	BASEPRI, r3
 800fdee:	f3bf 8f6f 	isb	sy
 800fdf2:	f3bf 8f4f 	dsb	sy
 800fdf6:	60fb      	str	r3, [r7, #12]
}
 800fdf8:	bf00      	nop
 800fdfa:	e7fe      	b.n	800fdfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	3318      	adds	r3, #24
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7fe ff70 	bl	800ece6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe06:	4b1d      	ldr	r3, [pc, #116]	; (800fe7c <xTaskRemoveFromEventList+0xac>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d11c      	bne.n	800fe48 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	3304      	adds	r3, #4
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7fe ff67 	bl	800ece6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe1c:	2201      	movs	r2, #1
 800fe1e:	409a      	lsls	r2, r3
 800fe20:	4b17      	ldr	r3, [pc, #92]	; (800fe80 <xTaskRemoveFromEventList+0xb0>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4313      	orrs	r3, r2
 800fe26:	4a16      	ldr	r2, [pc, #88]	; (800fe80 <xTaskRemoveFromEventList+0xb0>)
 800fe28:	6013      	str	r3, [r2, #0]
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe2e:	4613      	mov	r3, r2
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	4413      	add	r3, r2
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	4a13      	ldr	r2, [pc, #76]	; (800fe84 <xTaskRemoveFromEventList+0xb4>)
 800fe38:	441a      	add	r2, r3
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	3304      	adds	r3, #4
 800fe3e:	4619      	mov	r1, r3
 800fe40:	4610      	mov	r0, r2
 800fe42:	f7fe fef3 	bl	800ec2c <vListInsertEnd>
 800fe46:	e005      	b.n	800fe54 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	3318      	adds	r3, #24
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	480e      	ldr	r0, [pc, #56]	; (800fe88 <xTaskRemoveFromEventList+0xb8>)
 800fe50:	f7fe feec 	bl	800ec2c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe58:	4b0c      	ldr	r3, [pc, #48]	; (800fe8c <xTaskRemoveFromEventList+0xbc>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe5e:	429a      	cmp	r2, r3
 800fe60:	d905      	bls.n	800fe6e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fe62:	2301      	movs	r3, #1
 800fe64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fe66:	4b0a      	ldr	r3, [pc, #40]	; (800fe90 <xTaskRemoveFromEventList+0xc0>)
 800fe68:	2201      	movs	r2, #1
 800fe6a:	601a      	str	r2, [r3, #0]
 800fe6c:	e001      	b.n	800fe72 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fe72:	697b      	ldr	r3, [r7, #20]
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3718      	adds	r7, #24
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	20000dd4 	.word	0x20000dd4
 800fe80:	20000db4 	.word	0x20000db4
 800fe84:	20000cb0 	.word	0x20000cb0
 800fe88:	20000d6c 	.word	0x20000d6c
 800fe8c:	20000cac 	.word	0x20000cac
 800fe90:	20000dc0 	.word	0x20000dc0

0800fe94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fe9c:	4b06      	ldr	r3, [pc, #24]	; (800feb8 <vTaskInternalSetTimeOutState+0x24>)
 800fe9e:	681a      	ldr	r2, [r3, #0]
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fea4:	4b05      	ldr	r3, [pc, #20]	; (800febc <vTaskInternalSetTimeOutState+0x28>)
 800fea6:	681a      	ldr	r2, [r3, #0]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	605a      	str	r2, [r3, #4]
}
 800feac:	bf00      	nop
 800feae:	370c      	adds	r7, #12
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr
 800feb8:	20000dc4 	.word	0x20000dc4
 800febc:	20000db0 	.word	0x20000db0

0800fec0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b088      	sub	sp, #32
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d10a      	bne.n	800fee6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed4:	f383 8811 	msr	BASEPRI, r3
 800fed8:	f3bf 8f6f 	isb	sy
 800fedc:	f3bf 8f4f 	dsb	sy
 800fee0:	613b      	str	r3, [r7, #16]
}
 800fee2:	bf00      	nop
 800fee4:	e7fe      	b.n	800fee4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d10a      	bne.n	800ff02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800feec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef0:	f383 8811 	msr	BASEPRI, r3
 800fef4:	f3bf 8f6f 	isb	sy
 800fef8:	f3bf 8f4f 	dsb	sy
 800fefc:	60fb      	str	r3, [r7, #12]
}
 800fefe:	bf00      	nop
 800ff00:	e7fe      	b.n	800ff00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ff02:	f000 fb57 	bl	80105b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ff06:	4b1d      	ldr	r3, [pc, #116]	; (800ff7c <xTaskCheckForTimeOut+0xbc>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	69ba      	ldr	r2, [r7, #24]
 800ff12:	1ad3      	subs	r3, r2, r3
 800ff14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff1e:	d102      	bne.n	800ff26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ff20:	2300      	movs	r3, #0
 800ff22:	61fb      	str	r3, [r7, #28]
 800ff24:	e023      	b.n	800ff6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681a      	ldr	r2, [r3, #0]
 800ff2a:	4b15      	ldr	r3, [pc, #84]	; (800ff80 <xTaskCheckForTimeOut+0xc0>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d007      	beq.n	800ff42 <xTaskCheckForTimeOut+0x82>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	69ba      	ldr	r2, [r7, #24]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d302      	bcc.n	800ff42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	61fb      	str	r3, [r7, #28]
 800ff40:	e015      	b.n	800ff6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	697a      	ldr	r2, [r7, #20]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d20b      	bcs.n	800ff64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	1ad2      	subs	r2, r2, r3
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f7ff ff9b 	bl	800fe94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	61fb      	str	r3, [r7, #28]
 800ff62:	e004      	b.n	800ff6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	2200      	movs	r2, #0
 800ff68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ff6e:	f000 fb51 	bl	8010614 <vPortExitCritical>

	return xReturn;
 800ff72:	69fb      	ldr	r3, [r7, #28]
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3720      	adds	r7, #32
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}
 800ff7c:	20000db0 	.word	0x20000db0
 800ff80:	20000dc4 	.word	0x20000dc4

0800ff84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ff84:	b480      	push	{r7}
 800ff86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ff88:	4b03      	ldr	r3, [pc, #12]	; (800ff98 <vTaskMissedYield+0x14>)
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	601a      	str	r2, [r3, #0]
}
 800ff8e:	bf00      	nop
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr
 800ff98:	20000dc0 	.word	0x20000dc0

0800ff9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b082      	sub	sp, #8
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ffa4:	f000 f852 	bl	801004c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ffa8:	4b06      	ldr	r3, [pc, #24]	; (800ffc4 <prvIdleTask+0x28>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	d9f9      	bls.n	800ffa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ffb0:	4b05      	ldr	r3, [pc, #20]	; (800ffc8 <prvIdleTask+0x2c>)
 800ffb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffb6:	601a      	str	r2, [r3, #0]
 800ffb8:	f3bf 8f4f 	dsb	sy
 800ffbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ffc0:	e7f0      	b.n	800ffa4 <prvIdleTask+0x8>
 800ffc2:	bf00      	nop
 800ffc4:	20000cb0 	.word	0x20000cb0
 800ffc8:	e000ed04 	.word	0xe000ed04

0800ffcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b082      	sub	sp, #8
 800ffd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	607b      	str	r3, [r7, #4]
 800ffd6:	e00c      	b.n	800fff2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ffd8:	687a      	ldr	r2, [r7, #4]
 800ffda:	4613      	mov	r3, r2
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	4413      	add	r3, r2
 800ffe0:	009b      	lsls	r3, r3, #2
 800ffe2:	4a12      	ldr	r2, [pc, #72]	; (801002c <prvInitialiseTaskLists+0x60>)
 800ffe4:	4413      	add	r3, r2
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7fe fdf3 	bl	800ebd2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	3301      	adds	r3, #1
 800fff0:	607b      	str	r3, [r7, #4]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2b06      	cmp	r3, #6
 800fff6:	d9ef      	bls.n	800ffd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fff8:	480d      	ldr	r0, [pc, #52]	; (8010030 <prvInitialiseTaskLists+0x64>)
 800fffa:	f7fe fdea 	bl	800ebd2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fffe:	480d      	ldr	r0, [pc, #52]	; (8010034 <prvInitialiseTaskLists+0x68>)
 8010000:	f7fe fde7 	bl	800ebd2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010004:	480c      	ldr	r0, [pc, #48]	; (8010038 <prvInitialiseTaskLists+0x6c>)
 8010006:	f7fe fde4 	bl	800ebd2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801000a:	480c      	ldr	r0, [pc, #48]	; (801003c <prvInitialiseTaskLists+0x70>)
 801000c:	f7fe fde1 	bl	800ebd2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010010:	480b      	ldr	r0, [pc, #44]	; (8010040 <prvInitialiseTaskLists+0x74>)
 8010012:	f7fe fdde 	bl	800ebd2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010016:	4b0b      	ldr	r3, [pc, #44]	; (8010044 <prvInitialiseTaskLists+0x78>)
 8010018:	4a05      	ldr	r2, [pc, #20]	; (8010030 <prvInitialiseTaskLists+0x64>)
 801001a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801001c:	4b0a      	ldr	r3, [pc, #40]	; (8010048 <prvInitialiseTaskLists+0x7c>)
 801001e:	4a05      	ldr	r2, [pc, #20]	; (8010034 <prvInitialiseTaskLists+0x68>)
 8010020:	601a      	str	r2, [r3, #0]
}
 8010022:	bf00      	nop
 8010024:	3708      	adds	r7, #8
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	20000cb0 	.word	0x20000cb0
 8010030:	20000d3c 	.word	0x20000d3c
 8010034:	20000d50 	.word	0x20000d50
 8010038:	20000d6c 	.word	0x20000d6c
 801003c:	20000d80 	.word	0x20000d80
 8010040:	20000d98 	.word	0x20000d98
 8010044:	20000d64 	.word	0x20000d64
 8010048:	20000d68 	.word	0x20000d68

0801004c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010052:	e019      	b.n	8010088 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010054:	f000 faae 	bl	80105b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010058:	4b10      	ldr	r3, [pc, #64]	; (801009c <prvCheckTasksWaitingTermination+0x50>)
 801005a:	68db      	ldr	r3, [r3, #12]
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	3304      	adds	r3, #4
 8010064:	4618      	mov	r0, r3
 8010066:	f7fe fe3e 	bl	800ece6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801006a:	4b0d      	ldr	r3, [pc, #52]	; (80100a0 <prvCheckTasksWaitingTermination+0x54>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	3b01      	subs	r3, #1
 8010070:	4a0b      	ldr	r2, [pc, #44]	; (80100a0 <prvCheckTasksWaitingTermination+0x54>)
 8010072:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010074:	4b0b      	ldr	r3, [pc, #44]	; (80100a4 <prvCheckTasksWaitingTermination+0x58>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	3b01      	subs	r3, #1
 801007a:	4a0a      	ldr	r2, [pc, #40]	; (80100a4 <prvCheckTasksWaitingTermination+0x58>)
 801007c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801007e:	f000 fac9 	bl	8010614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f000 f810 	bl	80100a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010088:	4b06      	ldr	r3, [pc, #24]	; (80100a4 <prvCheckTasksWaitingTermination+0x58>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d1e1      	bne.n	8010054 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010090:	bf00      	nop
 8010092:	bf00      	nop
 8010094:	3708      	adds	r7, #8
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}
 801009a:	bf00      	nop
 801009c:	20000d80 	.word	0x20000d80
 80100a0:	20000dac 	.word	0x20000dac
 80100a4:	20000d94 	.word	0x20000d94

080100a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d108      	bne.n	80100cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100be:	4618      	mov	r0, r3
 80100c0:	f000 fc26 	bl	8010910 <vPortFree>
				vPortFree( pxTCB );
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f000 fc23 	bl	8010910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80100ca:	e018      	b.n	80100fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80100d2:	2b01      	cmp	r3, #1
 80100d4:	d103      	bne.n	80100de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f000 fc1a 	bl	8010910 <vPortFree>
	}
 80100dc:	e00f      	b.n	80100fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80100e4:	2b02      	cmp	r3, #2
 80100e6:	d00a      	beq.n	80100fe <prvDeleteTCB+0x56>
	__asm volatile
 80100e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ec:	f383 8811 	msr	BASEPRI, r3
 80100f0:	f3bf 8f6f 	isb	sy
 80100f4:	f3bf 8f4f 	dsb	sy
 80100f8:	60fb      	str	r3, [r7, #12]
}
 80100fa:	bf00      	nop
 80100fc:	e7fe      	b.n	80100fc <prvDeleteTCB+0x54>
	}
 80100fe:	bf00      	nop
 8010100:	3710      	adds	r7, #16
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
	...

08010108 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010108:	b480      	push	{r7}
 801010a:	b083      	sub	sp, #12
 801010c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801010e:	4b0c      	ldr	r3, [pc, #48]	; (8010140 <prvResetNextTaskUnblockTime+0x38>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d104      	bne.n	8010122 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010118:	4b0a      	ldr	r3, [pc, #40]	; (8010144 <prvResetNextTaskUnblockTime+0x3c>)
 801011a:	f04f 32ff 	mov.w	r2, #4294967295
 801011e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010120:	e008      	b.n	8010134 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010122:	4b07      	ldr	r3, [pc, #28]	; (8010140 <prvResetNextTaskUnblockTime+0x38>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	68db      	ldr	r3, [r3, #12]
 8010128:	68db      	ldr	r3, [r3, #12]
 801012a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	4a04      	ldr	r2, [pc, #16]	; (8010144 <prvResetNextTaskUnblockTime+0x3c>)
 8010132:	6013      	str	r3, [r2, #0]
}
 8010134:	bf00      	nop
 8010136:	370c      	adds	r7, #12
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr
 8010140:	20000d64 	.word	0x20000d64
 8010144:	20000dcc 	.word	0x20000dcc

08010148 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801014e:	4b0b      	ldr	r3, [pc, #44]	; (801017c <xTaskGetSchedulerState+0x34>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d102      	bne.n	801015c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010156:	2301      	movs	r3, #1
 8010158:	607b      	str	r3, [r7, #4]
 801015a:	e008      	b.n	801016e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801015c:	4b08      	ldr	r3, [pc, #32]	; (8010180 <xTaskGetSchedulerState+0x38>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d102      	bne.n	801016a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010164:	2302      	movs	r3, #2
 8010166:	607b      	str	r3, [r7, #4]
 8010168:	e001      	b.n	801016e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801016a:	2300      	movs	r3, #0
 801016c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801016e:	687b      	ldr	r3, [r7, #4]
	}
 8010170:	4618      	mov	r0, r3
 8010172:	370c      	adds	r7, #12
 8010174:	46bd      	mov	sp, r7
 8010176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017a:	4770      	bx	lr
 801017c:	20000db8 	.word	0x20000db8
 8010180:	20000dd4 	.word	0x20000dd4

08010184 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010184:	b580      	push	{r7, lr}
 8010186:	b086      	sub	sp, #24
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010190:	2300      	movs	r3, #0
 8010192:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d06e      	beq.n	8010278 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801019a:	4b3a      	ldr	r3, [pc, #232]	; (8010284 <xTaskPriorityDisinherit+0x100>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	693a      	ldr	r2, [r7, #16]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d00a      	beq.n	80101ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80101a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a8:	f383 8811 	msr	BASEPRI, r3
 80101ac:	f3bf 8f6f 	isb	sy
 80101b0:	f3bf 8f4f 	dsb	sy
 80101b4:	60fb      	str	r3, [r7, #12]
}
 80101b6:	bf00      	nop
 80101b8:	e7fe      	b.n	80101b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d10a      	bne.n	80101d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80101c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c6:	f383 8811 	msr	BASEPRI, r3
 80101ca:	f3bf 8f6f 	isb	sy
 80101ce:	f3bf 8f4f 	dsb	sy
 80101d2:	60bb      	str	r3, [r7, #8]
}
 80101d4:	bf00      	nop
 80101d6:	e7fe      	b.n	80101d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101dc:	1e5a      	subs	r2, r3, #1
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101e6:	693b      	ldr	r3, [r7, #16]
 80101e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d044      	beq.n	8010278 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d140      	bne.n	8010278 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	3304      	adds	r3, #4
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fe fd73 	bl	800ece6 <uxListRemove>
 8010200:	4603      	mov	r3, r0
 8010202:	2b00      	cmp	r3, #0
 8010204:	d115      	bne.n	8010232 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010206:	693b      	ldr	r3, [r7, #16]
 8010208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801020a:	491f      	ldr	r1, [pc, #124]	; (8010288 <xTaskPriorityDisinherit+0x104>)
 801020c:	4613      	mov	r3, r2
 801020e:	009b      	lsls	r3, r3, #2
 8010210:	4413      	add	r3, r2
 8010212:	009b      	lsls	r3, r3, #2
 8010214:	440b      	add	r3, r1
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d10a      	bne.n	8010232 <xTaskPriorityDisinherit+0xae>
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010220:	2201      	movs	r2, #1
 8010222:	fa02 f303 	lsl.w	r3, r2, r3
 8010226:	43da      	mvns	r2, r3
 8010228:	4b18      	ldr	r3, [pc, #96]	; (801028c <xTaskPriorityDisinherit+0x108>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4013      	ands	r3, r2
 801022e:	4a17      	ldr	r2, [pc, #92]	; (801028c <xTaskPriorityDisinherit+0x108>)
 8010230:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801023e:	f1c3 0207 	rsb	r2, r3, #7
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801024a:	2201      	movs	r2, #1
 801024c:	409a      	lsls	r2, r3
 801024e:	4b0f      	ldr	r3, [pc, #60]	; (801028c <xTaskPriorityDisinherit+0x108>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	4313      	orrs	r3, r2
 8010254:	4a0d      	ldr	r2, [pc, #52]	; (801028c <xTaskPriorityDisinherit+0x108>)
 8010256:	6013      	str	r3, [r2, #0]
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801025c:	4613      	mov	r3, r2
 801025e:	009b      	lsls	r3, r3, #2
 8010260:	4413      	add	r3, r2
 8010262:	009b      	lsls	r3, r3, #2
 8010264:	4a08      	ldr	r2, [pc, #32]	; (8010288 <xTaskPriorityDisinherit+0x104>)
 8010266:	441a      	add	r2, r3
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	3304      	adds	r3, #4
 801026c:	4619      	mov	r1, r3
 801026e:	4610      	mov	r0, r2
 8010270:	f7fe fcdc 	bl	800ec2c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010274:	2301      	movs	r3, #1
 8010276:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010278:	697b      	ldr	r3, [r7, #20]
	}
 801027a:	4618      	mov	r0, r3
 801027c:	3718      	adds	r7, #24
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	20000cac 	.word	0x20000cac
 8010288:	20000cb0 	.word	0x20000cb0
 801028c:	20000db4 	.word	0x20000db4

08010290 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b084      	sub	sp, #16
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801029a:	4b29      	ldr	r3, [pc, #164]	; (8010340 <prvAddCurrentTaskToDelayedList+0xb0>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102a0:	4b28      	ldr	r3, [pc, #160]	; (8010344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	3304      	adds	r3, #4
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7fe fd1d 	bl	800ece6 <uxListRemove>
 80102ac:	4603      	mov	r3, r0
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d10b      	bne.n	80102ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80102b2:	4b24      	ldr	r3, [pc, #144]	; (8010344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102b8:	2201      	movs	r2, #1
 80102ba:	fa02 f303 	lsl.w	r3, r2, r3
 80102be:	43da      	mvns	r2, r3
 80102c0:	4b21      	ldr	r3, [pc, #132]	; (8010348 <prvAddCurrentTaskToDelayedList+0xb8>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	4013      	ands	r3, r2
 80102c6:	4a20      	ldr	r2, [pc, #128]	; (8010348 <prvAddCurrentTaskToDelayedList+0xb8>)
 80102c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102d0:	d10a      	bne.n	80102e8 <prvAddCurrentTaskToDelayedList+0x58>
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d007      	beq.n	80102e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102d8:	4b1a      	ldr	r3, [pc, #104]	; (8010344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	3304      	adds	r3, #4
 80102de:	4619      	mov	r1, r3
 80102e0:	481a      	ldr	r0, [pc, #104]	; (801034c <prvAddCurrentTaskToDelayedList+0xbc>)
 80102e2:	f7fe fca3 	bl	800ec2c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80102e6:	e026      	b.n	8010336 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80102e8:	68fa      	ldr	r2, [r7, #12]
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4413      	add	r3, r2
 80102ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80102f0:	4b14      	ldr	r3, [pc, #80]	; (8010344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	68ba      	ldr	r2, [r7, #8]
 80102f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80102f8:	68ba      	ldr	r2, [r7, #8]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d209      	bcs.n	8010314 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010300:	4b13      	ldr	r3, [pc, #76]	; (8010350 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010302:	681a      	ldr	r2, [r3, #0]
 8010304:	4b0f      	ldr	r3, [pc, #60]	; (8010344 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	3304      	adds	r3, #4
 801030a:	4619      	mov	r1, r3
 801030c:	4610      	mov	r0, r2
 801030e:	f7fe fcb1 	bl	800ec74 <vListInsert>
}
 8010312:	e010      	b.n	8010336 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010314:	4b0f      	ldr	r3, [pc, #60]	; (8010354 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	4b0a      	ldr	r3, [pc, #40]	; (8010344 <prvAddCurrentTaskToDelayedList+0xb4>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	3304      	adds	r3, #4
 801031e:	4619      	mov	r1, r3
 8010320:	4610      	mov	r0, r2
 8010322:	f7fe fca7 	bl	800ec74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010326:	4b0c      	ldr	r3, [pc, #48]	; (8010358 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	68ba      	ldr	r2, [r7, #8]
 801032c:	429a      	cmp	r2, r3
 801032e:	d202      	bcs.n	8010336 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010330:	4a09      	ldr	r2, [pc, #36]	; (8010358 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	6013      	str	r3, [r2, #0]
}
 8010336:	bf00      	nop
 8010338:	3710      	adds	r7, #16
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	20000db0 	.word	0x20000db0
 8010344:	20000cac 	.word	0x20000cac
 8010348:	20000db4 	.word	0x20000db4
 801034c:	20000d98 	.word	0x20000d98
 8010350:	20000d68 	.word	0x20000d68
 8010354:	20000d64 	.word	0x20000d64
 8010358:	20000dcc 	.word	0x20000dcc

0801035c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801035c:	b480      	push	{r7}
 801035e:	b085      	sub	sp, #20
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	3b04      	subs	r3, #4
 801036c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	3b04      	subs	r3, #4
 801037a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	f023 0201 	bic.w	r2, r3, #1
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	3b04      	subs	r3, #4
 801038a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801038c:	4a0c      	ldr	r2, [pc, #48]	; (80103c0 <pxPortInitialiseStack+0x64>)
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	3b14      	subs	r3, #20
 8010396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010398:	687a      	ldr	r2, [r7, #4]
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	3b04      	subs	r3, #4
 80103a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	f06f 0202 	mvn.w	r2, #2
 80103aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	3b20      	subs	r3, #32
 80103b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80103b2:	68fb      	ldr	r3, [r7, #12]
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3714      	adds	r7, #20
 80103b8:	46bd      	mov	sp, r7
 80103ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103be:	4770      	bx	lr
 80103c0:	080103c5 	.word	0x080103c5

080103c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80103c4:	b480      	push	{r7}
 80103c6:	b085      	sub	sp, #20
 80103c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80103ca:	2300      	movs	r3, #0
 80103cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80103ce:	4b12      	ldr	r3, [pc, #72]	; (8010418 <prvTaskExitError+0x54>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103d6:	d00a      	beq.n	80103ee <prvTaskExitError+0x2a>
	__asm volatile
 80103d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103dc:	f383 8811 	msr	BASEPRI, r3
 80103e0:	f3bf 8f6f 	isb	sy
 80103e4:	f3bf 8f4f 	dsb	sy
 80103e8:	60fb      	str	r3, [r7, #12]
}
 80103ea:	bf00      	nop
 80103ec:	e7fe      	b.n	80103ec <prvTaskExitError+0x28>
	__asm volatile
 80103ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f2:	f383 8811 	msr	BASEPRI, r3
 80103f6:	f3bf 8f6f 	isb	sy
 80103fa:	f3bf 8f4f 	dsb	sy
 80103fe:	60bb      	str	r3, [r7, #8]
}
 8010400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010402:	bf00      	nop
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d0fc      	beq.n	8010404 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801040a:	bf00      	nop
 801040c:	bf00      	nop
 801040e:	3714      	adds	r7, #20
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr
 8010418:	20000074 	.word	0x20000074
 801041c:	00000000 	.word	0x00000000

08010420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010420:	4b07      	ldr	r3, [pc, #28]	; (8010440 <pxCurrentTCBConst2>)
 8010422:	6819      	ldr	r1, [r3, #0]
 8010424:	6808      	ldr	r0, [r1, #0]
 8010426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801042a:	f380 8809 	msr	PSP, r0
 801042e:	f3bf 8f6f 	isb	sy
 8010432:	f04f 0000 	mov.w	r0, #0
 8010436:	f380 8811 	msr	BASEPRI, r0
 801043a:	4770      	bx	lr
 801043c:	f3af 8000 	nop.w

08010440 <pxCurrentTCBConst2>:
 8010440:	20000cac 	.word	0x20000cac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010444:	bf00      	nop
 8010446:	bf00      	nop

08010448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010448:	4808      	ldr	r0, [pc, #32]	; (801046c <prvPortStartFirstTask+0x24>)
 801044a:	6800      	ldr	r0, [r0, #0]
 801044c:	6800      	ldr	r0, [r0, #0]
 801044e:	f380 8808 	msr	MSP, r0
 8010452:	f04f 0000 	mov.w	r0, #0
 8010456:	f380 8814 	msr	CONTROL, r0
 801045a:	b662      	cpsie	i
 801045c:	b661      	cpsie	f
 801045e:	f3bf 8f4f 	dsb	sy
 8010462:	f3bf 8f6f 	isb	sy
 8010466:	df00      	svc	0
 8010468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801046a:	bf00      	nop
 801046c:	e000ed08 	.word	0xe000ed08

08010470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b086      	sub	sp, #24
 8010474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010476:	4b46      	ldr	r3, [pc, #280]	; (8010590 <xPortStartScheduler+0x120>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	4a46      	ldr	r2, [pc, #280]	; (8010594 <xPortStartScheduler+0x124>)
 801047c:	4293      	cmp	r3, r2
 801047e:	d10a      	bne.n	8010496 <xPortStartScheduler+0x26>
	__asm volatile
 8010480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010484:	f383 8811 	msr	BASEPRI, r3
 8010488:	f3bf 8f6f 	isb	sy
 801048c:	f3bf 8f4f 	dsb	sy
 8010490:	613b      	str	r3, [r7, #16]
}
 8010492:	bf00      	nop
 8010494:	e7fe      	b.n	8010494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010496:	4b3e      	ldr	r3, [pc, #248]	; (8010590 <xPortStartScheduler+0x120>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	4a3f      	ldr	r2, [pc, #252]	; (8010598 <xPortStartScheduler+0x128>)
 801049c:	4293      	cmp	r3, r2
 801049e:	d10a      	bne.n	80104b6 <xPortStartScheduler+0x46>
	__asm volatile
 80104a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a4:	f383 8811 	msr	BASEPRI, r3
 80104a8:	f3bf 8f6f 	isb	sy
 80104ac:	f3bf 8f4f 	dsb	sy
 80104b0:	60fb      	str	r3, [r7, #12]
}
 80104b2:	bf00      	nop
 80104b4:	e7fe      	b.n	80104b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80104b6:	4b39      	ldr	r3, [pc, #228]	; (801059c <xPortStartScheduler+0x12c>)
 80104b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80104ba:	697b      	ldr	r3, [r7, #20]
 80104bc:	781b      	ldrb	r3, [r3, #0]
 80104be:	b2db      	uxtb	r3, r3
 80104c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	22ff      	movs	r2, #255	; 0xff
 80104c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	b2db      	uxtb	r3, r3
 80104ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80104d0:	78fb      	ldrb	r3, [r7, #3]
 80104d2:	b2db      	uxtb	r3, r3
 80104d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80104d8:	b2da      	uxtb	r2, r3
 80104da:	4b31      	ldr	r3, [pc, #196]	; (80105a0 <xPortStartScheduler+0x130>)
 80104dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80104de:	4b31      	ldr	r3, [pc, #196]	; (80105a4 <xPortStartScheduler+0x134>)
 80104e0:	2207      	movs	r2, #7
 80104e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80104e4:	e009      	b.n	80104fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80104e6:	4b2f      	ldr	r3, [pc, #188]	; (80105a4 <xPortStartScheduler+0x134>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	3b01      	subs	r3, #1
 80104ec:	4a2d      	ldr	r2, [pc, #180]	; (80105a4 <xPortStartScheduler+0x134>)
 80104ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80104f0:	78fb      	ldrb	r3, [r7, #3]
 80104f2:	b2db      	uxtb	r3, r3
 80104f4:	005b      	lsls	r3, r3, #1
 80104f6:	b2db      	uxtb	r3, r3
 80104f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80104fa:	78fb      	ldrb	r3, [r7, #3]
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010502:	2b80      	cmp	r3, #128	; 0x80
 8010504:	d0ef      	beq.n	80104e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010506:	4b27      	ldr	r3, [pc, #156]	; (80105a4 <xPortStartScheduler+0x134>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	f1c3 0307 	rsb	r3, r3, #7
 801050e:	2b04      	cmp	r3, #4
 8010510:	d00a      	beq.n	8010528 <xPortStartScheduler+0xb8>
	__asm volatile
 8010512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010516:	f383 8811 	msr	BASEPRI, r3
 801051a:	f3bf 8f6f 	isb	sy
 801051e:	f3bf 8f4f 	dsb	sy
 8010522:	60bb      	str	r3, [r7, #8]
}
 8010524:	bf00      	nop
 8010526:	e7fe      	b.n	8010526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010528:	4b1e      	ldr	r3, [pc, #120]	; (80105a4 <xPortStartScheduler+0x134>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	021b      	lsls	r3, r3, #8
 801052e:	4a1d      	ldr	r2, [pc, #116]	; (80105a4 <xPortStartScheduler+0x134>)
 8010530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010532:	4b1c      	ldr	r3, [pc, #112]	; (80105a4 <xPortStartScheduler+0x134>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801053a:	4a1a      	ldr	r2, [pc, #104]	; (80105a4 <xPortStartScheduler+0x134>)
 801053c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	b2da      	uxtb	r2, r3
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010546:	4b18      	ldr	r3, [pc, #96]	; (80105a8 <xPortStartScheduler+0x138>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	4a17      	ldr	r2, [pc, #92]	; (80105a8 <xPortStartScheduler+0x138>)
 801054c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010552:	4b15      	ldr	r3, [pc, #84]	; (80105a8 <xPortStartScheduler+0x138>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	4a14      	ldr	r2, [pc, #80]	; (80105a8 <xPortStartScheduler+0x138>)
 8010558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801055c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801055e:	f000 f8dd 	bl	801071c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010562:	4b12      	ldr	r3, [pc, #72]	; (80105ac <xPortStartScheduler+0x13c>)
 8010564:	2200      	movs	r2, #0
 8010566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010568:	f000 f8fc 	bl	8010764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801056c:	4b10      	ldr	r3, [pc, #64]	; (80105b0 <xPortStartScheduler+0x140>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	4a0f      	ldr	r2, [pc, #60]	; (80105b0 <xPortStartScheduler+0x140>)
 8010572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010578:	f7ff ff66 	bl	8010448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801057c:	f7ff fba8 	bl	800fcd0 <vTaskSwitchContext>
	prvTaskExitError();
 8010580:	f7ff ff20 	bl	80103c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010584:	2300      	movs	r3, #0
}
 8010586:	4618      	mov	r0, r3
 8010588:	3718      	adds	r7, #24
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}
 801058e:	bf00      	nop
 8010590:	e000ed00 	.word	0xe000ed00
 8010594:	410fc271 	.word	0x410fc271
 8010598:	410fc270 	.word	0x410fc270
 801059c:	e000e400 	.word	0xe000e400
 80105a0:	20000dd8 	.word	0x20000dd8
 80105a4:	20000ddc 	.word	0x20000ddc
 80105a8:	e000ed20 	.word	0xe000ed20
 80105ac:	20000074 	.word	0x20000074
 80105b0:	e000ef34 	.word	0xe000ef34

080105b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80105b4:	b480      	push	{r7}
 80105b6:	b083      	sub	sp, #12
 80105b8:	af00      	add	r7, sp, #0
	__asm volatile
 80105ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105be:	f383 8811 	msr	BASEPRI, r3
 80105c2:	f3bf 8f6f 	isb	sy
 80105c6:	f3bf 8f4f 	dsb	sy
 80105ca:	607b      	str	r3, [r7, #4]
}
 80105cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80105ce:	4b0f      	ldr	r3, [pc, #60]	; (801060c <vPortEnterCritical+0x58>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	3301      	adds	r3, #1
 80105d4:	4a0d      	ldr	r2, [pc, #52]	; (801060c <vPortEnterCritical+0x58>)
 80105d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80105d8:	4b0c      	ldr	r3, [pc, #48]	; (801060c <vPortEnterCritical+0x58>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2b01      	cmp	r3, #1
 80105de:	d10f      	bne.n	8010600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80105e0:	4b0b      	ldr	r3, [pc, #44]	; (8010610 <vPortEnterCritical+0x5c>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	b2db      	uxtb	r3, r3
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d00a      	beq.n	8010600 <vPortEnterCritical+0x4c>
	__asm volatile
 80105ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ee:	f383 8811 	msr	BASEPRI, r3
 80105f2:	f3bf 8f6f 	isb	sy
 80105f6:	f3bf 8f4f 	dsb	sy
 80105fa:	603b      	str	r3, [r7, #0]
}
 80105fc:	bf00      	nop
 80105fe:	e7fe      	b.n	80105fe <vPortEnterCritical+0x4a>
	}
}
 8010600:	bf00      	nop
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr
 801060c:	20000074 	.word	0x20000074
 8010610:	e000ed04 	.word	0xe000ed04

08010614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801061a:	4b12      	ldr	r3, [pc, #72]	; (8010664 <vPortExitCritical+0x50>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d10a      	bne.n	8010638 <vPortExitCritical+0x24>
	__asm volatile
 8010622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010626:	f383 8811 	msr	BASEPRI, r3
 801062a:	f3bf 8f6f 	isb	sy
 801062e:	f3bf 8f4f 	dsb	sy
 8010632:	607b      	str	r3, [r7, #4]
}
 8010634:	bf00      	nop
 8010636:	e7fe      	b.n	8010636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010638:	4b0a      	ldr	r3, [pc, #40]	; (8010664 <vPortExitCritical+0x50>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	3b01      	subs	r3, #1
 801063e:	4a09      	ldr	r2, [pc, #36]	; (8010664 <vPortExitCritical+0x50>)
 8010640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010642:	4b08      	ldr	r3, [pc, #32]	; (8010664 <vPortExitCritical+0x50>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d105      	bne.n	8010656 <vPortExitCritical+0x42>
 801064a:	2300      	movs	r3, #0
 801064c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010656:	bf00      	nop
 8010658:	370c      	adds	r7, #12
 801065a:	46bd      	mov	sp, r7
 801065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010660:	4770      	bx	lr
 8010662:	bf00      	nop
 8010664:	20000074 	.word	0x20000074
	...

08010670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010670:	f3ef 8009 	mrs	r0, PSP
 8010674:	f3bf 8f6f 	isb	sy
 8010678:	4b15      	ldr	r3, [pc, #84]	; (80106d0 <pxCurrentTCBConst>)
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	f01e 0f10 	tst.w	lr, #16
 8010680:	bf08      	it	eq
 8010682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801068a:	6010      	str	r0, [r2, #0]
 801068c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010694:	f380 8811 	msr	BASEPRI, r0
 8010698:	f3bf 8f4f 	dsb	sy
 801069c:	f3bf 8f6f 	isb	sy
 80106a0:	f7ff fb16 	bl	800fcd0 <vTaskSwitchContext>
 80106a4:	f04f 0000 	mov.w	r0, #0
 80106a8:	f380 8811 	msr	BASEPRI, r0
 80106ac:	bc09      	pop	{r0, r3}
 80106ae:	6819      	ldr	r1, [r3, #0]
 80106b0:	6808      	ldr	r0, [r1, #0]
 80106b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b6:	f01e 0f10 	tst.w	lr, #16
 80106ba:	bf08      	it	eq
 80106bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80106c0:	f380 8809 	msr	PSP, r0
 80106c4:	f3bf 8f6f 	isb	sy
 80106c8:	4770      	bx	lr
 80106ca:	bf00      	nop
 80106cc:	f3af 8000 	nop.w

080106d0 <pxCurrentTCBConst>:
 80106d0:	20000cac 	.word	0x20000cac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80106d4:	bf00      	nop
 80106d6:	bf00      	nop

080106d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
	__asm volatile
 80106de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e2:	f383 8811 	msr	BASEPRI, r3
 80106e6:	f3bf 8f6f 	isb	sy
 80106ea:	f3bf 8f4f 	dsb	sy
 80106ee:	607b      	str	r3, [r7, #4]
}
 80106f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80106f2:	f7ff fa35 	bl	800fb60 <xTaskIncrementTick>
 80106f6:	4603      	mov	r3, r0
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d003      	beq.n	8010704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80106fc:	4b06      	ldr	r3, [pc, #24]	; (8010718 <xPortSysTickHandler+0x40>)
 80106fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010702:	601a      	str	r2, [r3, #0]
 8010704:	2300      	movs	r3, #0
 8010706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	f383 8811 	msr	BASEPRI, r3
}
 801070e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010710:	bf00      	nop
 8010712:	3708      	adds	r7, #8
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}
 8010718:	e000ed04 	.word	0xe000ed04

0801071c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801071c:	b480      	push	{r7}
 801071e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010720:	4b0b      	ldr	r3, [pc, #44]	; (8010750 <vPortSetupTimerInterrupt+0x34>)
 8010722:	2200      	movs	r2, #0
 8010724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010726:	4b0b      	ldr	r3, [pc, #44]	; (8010754 <vPortSetupTimerInterrupt+0x38>)
 8010728:	2200      	movs	r2, #0
 801072a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801072c:	4b0a      	ldr	r3, [pc, #40]	; (8010758 <vPortSetupTimerInterrupt+0x3c>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4a0a      	ldr	r2, [pc, #40]	; (801075c <vPortSetupTimerInterrupt+0x40>)
 8010732:	fba2 2303 	umull	r2, r3, r2, r3
 8010736:	099b      	lsrs	r3, r3, #6
 8010738:	4a09      	ldr	r2, [pc, #36]	; (8010760 <vPortSetupTimerInterrupt+0x44>)
 801073a:	3b01      	subs	r3, #1
 801073c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801073e:	4b04      	ldr	r3, [pc, #16]	; (8010750 <vPortSetupTimerInterrupt+0x34>)
 8010740:	2207      	movs	r2, #7
 8010742:	601a      	str	r2, [r3, #0]
}
 8010744:	bf00      	nop
 8010746:	46bd      	mov	sp, r7
 8010748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074c:	4770      	bx	lr
 801074e:	bf00      	nop
 8010750:	e000e010 	.word	0xe000e010
 8010754:	e000e018 	.word	0xe000e018
 8010758:	2000000c 	.word	0x2000000c
 801075c:	10624dd3 	.word	0x10624dd3
 8010760:	e000e014 	.word	0xe000e014

08010764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010774 <vPortEnableVFP+0x10>
 8010768:	6801      	ldr	r1, [r0, #0]
 801076a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801076e:	6001      	str	r1, [r0, #0]
 8010770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010772:	bf00      	nop
 8010774:	e000ed88 	.word	0xe000ed88

08010778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b08a      	sub	sp, #40	; 0x28
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010780:	2300      	movs	r3, #0
 8010782:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010784:	f7ff f942 	bl	800fa0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010788:	4b5b      	ldr	r3, [pc, #364]	; (80108f8 <pvPortMalloc+0x180>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d101      	bne.n	8010794 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010790:	f000 f920 	bl	80109d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010794:	4b59      	ldr	r3, [pc, #356]	; (80108fc <pvPortMalloc+0x184>)
 8010796:	681a      	ldr	r2, [r3, #0]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	4013      	ands	r3, r2
 801079c:	2b00      	cmp	r3, #0
 801079e:	f040 8093 	bne.w	80108c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d01d      	beq.n	80107e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80107a8:	2208      	movs	r2, #8
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	4413      	add	r3, r2
 80107ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f003 0307 	and.w	r3, r3, #7
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d014      	beq.n	80107e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f023 0307 	bic.w	r3, r3, #7
 80107c0:	3308      	adds	r3, #8
 80107c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f003 0307 	and.w	r3, r3, #7
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d00a      	beq.n	80107e4 <pvPortMalloc+0x6c>
	__asm volatile
 80107ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d2:	f383 8811 	msr	BASEPRI, r3
 80107d6:	f3bf 8f6f 	isb	sy
 80107da:	f3bf 8f4f 	dsb	sy
 80107de:	617b      	str	r3, [r7, #20]
}
 80107e0:	bf00      	nop
 80107e2:	e7fe      	b.n	80107e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d06e      	beq.n	80108c8 <pvPortMalloc+0x150>
 80107ea:	4b45      	ldr	r3, [pc, #276]	; (8010900 <pvPortMalloc+0x188>)
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	687a      	ldr	r2, [r7, #4]
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d869      	bhi.n	80108c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80107f4:	4b43      	ldr	r3, [pc, #268]	; (8010904 <pvPortMalloc+0x18c>)
 80107f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80107f8:	4b42      	ldr	r3, [pc, #264]	; (8010904 <pvPortMalloc+0x18c>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80107fe:	e004      	b.n	801080a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801080a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	429a      	cmp	r2, r3
 8010812:	d903      	bls.n	801081c <pvPortMalloc+0xa4>
 8010814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d1f1      	bne.n	8010800 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801081c:	4b36      	ldr	r3, [pc, #216]	; (80108f8 <pvPortMalloc+0x180>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010822:	429a      	cmp	r2, r3
 8010824:	d050      	beq.n	80108c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010826:	6a3b      	ldr	r3, [r7, #32]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	2208      	movs	r2, #8
 801082c:	4413      	add	r3, r2
 801082e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	6a3b      	ldr	r3, [r7, #32]
 8010836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083a:	685a      	ldr	r2, [r3, #4]
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	1ad2      	subs	r2, r2, r3
 8010840:	2308      	movs	r3, #8
 8010842:	005b      	lsls	r3, r3, #1
 8010844:	429a      	cmp	r2, r3
 8010846:	d91f      	bls.n	8010888 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	4413      	add	r3, r2
 801084e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010850:	69bb      	ldr	r3, [r7, #24]
 8010852:	f003 0307 	and.w	r3, r3, #7
 8010856:	2b00      	cmp	r3, #0
 8010858:	d00a      	beq.n	8010870 <pvPortMalloc+0xf8>
	__asm volatile
 801085a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801085e:	f383 8811 	msr	BASEPRI, r3
 8010862:	f3bf 8f6f 	isb	sy
 8010866:	f3bf 8f4f 	dsb	sy
 801086a:	613b      	str	r3, [r7, #16]
}
 801086c:	bf00      	nop
 801086e:	e7fe      	b.n	801086e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010872:	685a      	ldr	r2, [r3, #4]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	1ad2      	subs	r2, r2, r3
 8010878:	69bb      	ldr	r3, [r7, #24]
 801087a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010882:	69b8      	ldr	r0, [r7, #24]
 8010884:	f000 f908 	bl	8010a98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010888:	4b1d      	ldr	r3, [pc, #116]	; (8010900 <pvPortMalloc+0x188>)
 801088a:	681a      	ldr	r2, [r3, #0]
 801088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088e:	685b      	ldr	r3, [r3, #4]
 8010890:	1ad3      	subs	r3, r2, r3
 8010892:	4a1b      	ldr	r2, [pc, #108]	; (8010900 <pvPortMalloc+0x188>)
 8010894:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010896:	4b1a      	ldr	r3, [pc, #104]	; (8010900 <pvPortMalloc+0x188>)
 8010898:	681a      	ldr	r2, [r3, #0]
 801089a:	4b1b      	ldr	r3, [pc, #108]	; (8010908 <pvPortMalloc+0x190>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d203      	bcs.n	80108aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80108a2:	4b17      	ldr	r3, [pc, #92]	; (8010900 <pvPortMalloc+0x188>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	4a18      	ldr	r2, [pc, #96]	; (8010908 <pvPortMalloc+0x190>)
 80108a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80108aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ac:	685a      	ldr	r2, [r3, #4]
 80108ae:	4b13      	ldr	r3, [pc, #76]	; (80108fc <pvPortMalloc+0x184>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	431a      	orrs	r2, r3
 80108b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80108b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ba:	2200      	movs	r2, #0
 80108bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80108be:	4b13      	ldr	r3, [pc, #76]	; (801090c <pvPortMalloc+0x194>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	3301      	adds	r3, #1
 80108c4:	4a11      	ldr	r2, [pc, #68]	; (801090c <pvPortMalloc+0x194>)
 80108c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80108c8:	f7ff f8ae 	bl	800fa28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80108cc:	69fb      	ldr	r3, [r7, #28]
 80108ce:	f003 0307 	and.w	r3, r3, #7
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d00a      	beq.n	80108ec <pvPortMalloc+0x174>
	__asm volatile
 80108d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108da:	f383 8811 	msr	BASEPRI, r3
 80108de:	f3bf 8f6f 	isb	sy
 80108e2:	f3bf 8f4f 	dsb	sy
 80108e6:	60fb      	str	r3, [r7, #12]
}
 80108e8:	bf00      	nop
 80108ea:	e7fe      	b.n	80108ea <pvPortMalloc+0x172>
	return pvReturn;
 80108ec:	69fb      	ldr	r3, [r7, #28]
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3728      	adds	r7, #40	; 0x28
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop
 80108f8:	200049e8 	.word	0x200049e8
 80108fc:	200049fc 	.word	0x200049fc
 8010900:	200049ec 	.word	0x200049ec
 8010904:	200049e0 	.word	0x200049e0
 8010908:	200049f0 	.word	0x200049f0
 801090c:	200049f4 	.word	0x200049f4

08010910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b086      	sub	sp, #24
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d04d      	beq.n	80109be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010922:	2308      	movs	r3, #8
 8010924:	425b      	negs	r3, r3
 8010926:	697a      	ldr	r2, [r7, #20]
 8010928:	4413      	add	r3, r2
 801092a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	685a      	ldr	r2, [r3, #4]
 8010934:	4b24      	ldr	r3, [pc, #144]	; (80109c8 <vPortFree+0xb8>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	4013      	ands	r3, r2
 801093a:	2b00      	cmp	r3, #0
 801093c:	d10a      	bne.n	8010954 <vPortFree+0x44>
	__asm volatile
 801093e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010942:	f383 8811 	msr	BASEPRI, r3
 8010946:	f3bf 8f6f 	isb	sy
 801094a:	f3bf 8f4f 	dsb	sy
 801094e:	60fb      	str	r3, [r7, #12]
}
 8010950:	bf00      	nop
 8010952:	e7fe      	b.n	8010952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d00a      	beq.n	8010972 <vPortFree+0x62>
	__asm volatile
 801095c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010960:	f383 8811 	msr	BASEPRI, r3
 8010964:	f3bf 8f6f 	isb	sy
 8010968:	f3bf 8f4f 	dsb	sy
 801096c:	60bb      	str	r3, [r7, #8]
}
 801096e:	bf00      	nop
 8010970:	e7fe      	b.n	8010970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010972:	693b      	ldr	r3, [r7, #16]
 8010974:	685a      	ldr	r2, [r3, #4]
 8010976:	4b14      	ldr	r3, [pc, #80]	; (80109c8 <vPortFree+0xb8>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	4013      	ands	r3, r2
 801097c:	2b00      	cmp	r3, #0
 801097e:	d01e      	beq.n	80109be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d11a      	bne.n	80109be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	685a      	ldr	r2, [r3, #4]
 801098c:	4b0e      	ldr	r3, [pc, #56]	; (80109c8 <vPortFree+0xb8>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	43db      	mvns	r3, r3
 8010992:	401a      	ands	r2, r3
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010998:	f7ff f838 	bl	800fa0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801099c:	693b      	ldr	r3, [r7, #16]
 801099e:	685a      	ldr	r2, [r3, #4]
 80109a0:	4b0a      	ldr	r3, [pc, #40]	; (80109cc <vPortFree+0xbc>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	4413      	add	r3, r2
 80109a6:	4a09      	ldr	r2, [pc, #36]	; (80109cc <vPortFree+0xbc>)
 80109a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80109aa:	6938      	ldr	r0, [r7, #16]
 80109ac:	f000 f874 	bl	8010a98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80109b0:	4b07      	ldr	r3, [pc, #28]	; (80109d0 <vPortFree+0xc0>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	3301      	adds	r3, #1
 80109b6:	4a06      	ldr	r2, [pc, #24]	; (80109d0 <vPortFree+0xc0>)
 80109b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80109ba:	f7ff f835 	bl	800fa28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80109be:	bf00      	nop
 80109c0:	3718      	adds	r7, #24
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	200049fc 	.word	0x200049fc
 80109cc:	200049ec 	.word	0x200049ec
 80109d0:	200049f8 	.word	0x200049f8

080109d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80109d4:	b480      	push	{r7}
 80109d6:	b085      	sub	sp, #20
 80109d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80109da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80109de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80109e0:	4b27      	ldr	r3, [pc, #156]	; (8010a80 <prvHeapInit+0xac>)
 80109e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f003 0307 	and.w	r3, r3, #7
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d00c      	beq.n	8010a08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	3307      	adds	r3, #7
 80109f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f023 0307 	bic.w	r3, r3, #7
 80109fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80109fc:	68ba      	ldr	r2, [r7, #8]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	1ad3      	subs	r3, r2, r3
 8010a02:	4a1f      	ldr	r2, [pc, #124]	; (8010a80 <prvHeapInit+0xac>)
 8010a04:	4413      	add	r3, r2
 8010a06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010a0c:	4a1d      	ldr	r2, [pc, #116]	; (8010a84 <prvHeapInit+0xb0>)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010a12:	4b1c      	ldr	r3, [pc, #112]	; (8010a84 <prvHeapInit+0xb0>)
 8010a14:	2200      	movs	r2, #0
 8010a16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	68ba      	ldr	r2, [r7, #8]
 8010a1c:	4413      	add	r3, r2
 8010a1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010a20:	2208      	movs	r2, #8
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	1a9b      	subs	r3, r3, r2
 8010a26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f023 0307 	bic.w	r3, r3, #7
 8010a2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	4a15      	ldr	r2, [pc, #84]	; (8010a88 <prvHeapInit+0xb4>)
 8010a34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010a36:	4b14      	ldr	r3, [pc, #80]	; (8010a88 <prvHeapInit+0xb4>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010a3e:	4b12      	ldr	r3, [pc, #72]	; (8010a88 <prvHeapInit+0xb4>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	2200      	movs	r2, #0
 8010a44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	68fa      	ldr	r2, [r7, #12]
 8010a4e:	1ad2      	subs	r2, r2, r3
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010a54:	4b0c      	ldr	r3, [pc, #48]	; (8010a88 <prvHeapInit+0xb4>)
 8010a56:	681a      	ldr	r2, [r3, #0]
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	685b      	ldr	r3, [r3, #4]
 8010a60:	4a0a      	ldr	r2, [pc, #40]	; (8010a8c <prvHeapInit+0xb8>)
 8010a62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	685b      	ldr	r3, [r3, #4]
 8010a68:	4a09      	ldr	r2, [pc, #36]	; (8010a90 <prvHeapInit+0xbc>)
 8010a6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010a6c:	4b09      	ldr	r3, [pc, #36]	; (8010a94 <prvHeapInit+0xc0>)
 8010a6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010a72:	601a      	str	r2, [r3, #0]
}
 8010a74:	bf00      	nop
 8010a76:	3714      	adds	r7, #20
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr
 8010a80:	20000de0 	.word	0x20000de0
 8010a84:	200049e0 	.word	0x200049e0
 8010a88:	200049e8 	.word	0x200049e8
 8010a8c:	200049f0 	.word	0x200049f0
 8010a90:	200049ec 	.word	0x200049ec
 8010a94:	200049fc 	.word	0x200049fc

08010a98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b085      	sub	sp, #20
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010aa0:	4b28      	ldr	r3, [pc, #160]	; (8010b44 <prvInsertBlockIntoFreeList+0xac>)
 8010aa2:	60fb      	str	r3, [r7, #12]
 8010aa4:	e002      	b.n	8010aac <prvInsertBlockIntoFreeList+0x14>
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	60fb      	str	r3, [r7, #12]
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	687a      	ldr	r2, [r7, #4]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d8f7      	bhi.n	8010aa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	685b      	ldr	r3, [r3, #4]
 8010abe:	68ba      	ldr	r2, [r7, #8]
 8010ac0:	4413      	add	r3, r2
 8010ac2:	687a      	ldr	r2, [r7, #4]
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d108      	bne.n	8010ada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	685a      	ldr	r2, [r3, #4]
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	685b      	ldr	r3, [r3, #4]
 8010ad0:	441a      	add	r2, r3
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	685b      	ldr	r3, [r3, #4]
 8010ae2:	68ba      	ldr	r2, [r7, #8]
 8010ae4:	441a      	add	r2, r3
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d118      	bne.n	8010b20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	681a      	ldr	r2, [r3, #0]
 8010af2:	4b15      	ldr	r3, [pc, #84]	; (8010b48 <prvInsertBlockIntoFreeList+0xb0>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d00d      	beq.n	8010b16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	685a      	ldr	r2, [r3, #4]
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	441a      	add	r2, r3
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	681a      	ldr	r2, [r3, #0]
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	601a      	str	r2, [r3, #0]
 8010b14:	e008      	b.n	8010b28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010b16:	4b0c      	ldr	r3, [pc, #48]	; (8010b48 <prvInsertBlockIntoFreeList+0xb0>)
 8010b18:	681a      	ldr	r2, [r3, #0]
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	601a      	str	r2, [r3, #0]
 8010b1e:	e003      	b.n	8010b28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	681a      	ldr	r2, [r3, #0]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010b28:	68fa      	ldr	r2, [r7, #12]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d002      	beq.n	8010b36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	687a      	ldr	r2, [r7, #4]
 8010b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b36:	bf00      	nop
 8010b38:	3714      	adds	r7, #20
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b40:	4770      	bx	lr
 8010b42:	bf00      	nop
 8010b44:	200049e0 	.word	0x200049e0
 8010b48:	200049e8 	.word	0x200049e8

08010b4c <__errno>:
 8010b4c:	4b01      	ldr	r3, [pc, #4]	; (8010b54 <__errno+0x8>)
 8010b4e:	6818      	ldr	r0, [r3, #0]
 8010b50:	4770      	bx	lr
 8010b52:	bf00      	nop
 8010b54:	20000078 	.word	0x20000078

08010b58 <__libc_init_array>:
 8010b58:	b570      	push	{r4, r5, r6, lr}
 8010b5a:	4d0d      	ldr	r5, [pc, #52]	; (8010b90 <__libc_init_array+0x38>)
 8010b5c:	4c0d      	ldr	r4, [pc, #52]	; (8010b94 <__libc_init_array+0x3c>)
 8010b5e:	1b64      	subs	r4, r4, r5
 8010b60:	10a4      	asrs	r4, r4, #2
 8010b62:	2600      	movs	r6, #0
 8010b64:	42a6      	cmp	r6, r4
 8010b66:	d109      	bne.n	8010b7c <__libc_init_array+0x24>
 8010b68:	4d0b      	ldr	r5, [pc, #44]	; (8010b98 <__libc_init_array+0x40>)
 8010b6a:	4c0c      	ldr	r4, [pc, #48]	; (8010b9c <__libc_init_array+0x44>)
 8010b6c:	f005 f960 	bl	8015e30 <_init>
 8010b70:	1b64      	subs	r4, r4, r5
 8010b72:	10a4      	asrs	r4, r4, #2
 8010b74:	2600      	movs	r6, #0
 8010b76:	42a6      	cmp	r6, r4
 8010b78:	d105      	bne.n	8010b86 <__libc_init_array+0x2e>
 8010b7a:	bd70      	pop	{r4, r5, r6, pc}
 8010b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b80:	4798      	blx	r3
 8010b82:	3601      	adds	r6, #1
 8010b84:	e7ee      	b.n	8010b64 <__libc_init_array+0xc>
 8010b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b8a:	4798      	blx	r3
 8010b8c:	3601      	adds	r6, #1
 8010b8e:	e7f2      	b.n	8010b76 <__libc_init_array+0x1e>
 8010b90:	08016800 	.word	0x08016800
 8010b94:	08016800 	.word	0x08016800
 8010b98:	08016800 	.word	0x08016800
 8010b9c:	08016804 	.word	0x08016804

08010ba0 <memcpy>:
 8010ba0:	440a      	add	r2, r1
 8010ba2:	4291      	cmp	r1, r2
 8010ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ba8:	d100      	bne.n	8010bac <memcpy+0xc>
 8010baa:	4770      	bx	lr
 8010bac:	b510      	push	{r4, lr}
 8010bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010bb6:	4291      	cmp	r1, r2
 8010bb8:	d1f9      	bne.n	8010bae <memcpy+0xe>
 8010bba:	bd10      	pop	{r4, pc}

08010bbc <memset>:
 8010bbc:	4402      	add	r2, r0
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d100      	bne.n	8010bc6 <memset+0xa>
 8010bc4:	4770      	bx	lr
 8010bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8010bca:	e7f9      	b.n	8010bc0 <memset+0x4>

08010bcc <__cvt>:
 8010bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010bd0:	ec55 4b10 	vmov	r4, r5, d0
 8010bd4:	2d00      	cmp	r5, #0
 8010bd6:	460e      	mov	r6, r1
 8010bd8:	4619      	mov	r1, r3
 8010bda:	462b      	mov	r3, r5
 8010bdc:	bfbb      	ittet	lt
 8010bde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010be2:	461d      	movlt	r5, r3
 8010be4:	2300      	movge	r3, #0
 8010be6:	232d      	movlt	r3, #45	; 0x2d
 8010be8:	700b      	strb	r3, [r1, #0]
 8010bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010bf0:	4691      	mov	r9, r2
 8010bf2:	f023 0820 	bic.w	r8, r3, #32
 8010bf6:	bfbc      	itt	lt
 8010bf8:	4622      	movlt	r2, r4
 8010bfa:	4614      	movlt	r4, r2
 8010bfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010c00:	d005      	beq.n	8010c0e <__cvt+0x42>
 8010c02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010c06:	d100      	bne.n	8010c0a <__cvt+0x3e>
 8010c08:	3601      	adds	r6, #1
 8010c0a:	2102      	movs	r1, #2
 8010c0c:	e000      	b.n	8010c10 <__cvt+0x44>
 8010c0e:	2103      	movs	r1, #3
 8010c10:	ab03      	add	r3, sp, #12
 8010c12:	9301      	str	r3, [sp, #4]
 8010c14:	ab02      	add	r3, sp, #8
 8010c16:	9300      	str	r3, [sp, #0]
 8010c18:	ec45 4b10 	vmov	d0, r4, r5
 8010c1c:	4653      	mov	r3, sl
 8010c1e:	4632      	mov	r2, r6
 8010c20:	f000 fcea 	bl	80115f8 <_dtoa_r>
 8010c24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010c28:	4607      	mov	r7, r0
 8010c2a:	d102      	bne.n	8010c32 <__cvt+0x66>
 8010c2c:	f019 0f01 	tst.w	r9, #1
 8010c30:	d022      	beq.n	8010c78 <__cvt+0xac>
 8010c32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010c36:	eb07 0906 	add.w	r9, r7, r6
 8010c3a:	d110      	bne.n	8010c5e <__cvt+0x92>
 8010c3c:	783b      	ldrb	r3, [r7, #0]
 8010c3e:	2b30      	cmp	r3, #48	; 0x30
 8010c40:	d10a      	bne.n	8010c58 <__cvt+0x8c>
 8010c42:	2200      	movs	r2, #0
 8010c44:	2300      	movs	r3, #0
 8010c46:	4620      	mov	r0, r4
 8010c48:	4629      	mov	r1, r5
 8010c4a:	f7ef ff3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c4e:	b918      	cbnz	r0, 8010c58 <__cvt+0x8c>
 8010c50:	f1c6 0601 	rsb	r6, r6, #1
 8010c54:	f8ca 6000 	str.w	r6, [sl]
 8010c58:	f8da 3000 	ldr.w	r3, [sl]
 8010c5c:	4499      	add	r9, r3
 8010c5e:	2200      	movs	r2, #0
 8010c60:	2300      	movs	r3, #0
 8010c62:	4620      	mov	r0, r4
 8010c64:	4629      	mov	r1, r5
 8010c66:	f7ef ff2f 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c6a:	b108      	cbz	r0, 8010c70 <__cvt+0xa4>
 8010c6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010c70:	2230      	movs	r2, #48	; 0x30
 8010c72:	9b03      	ldr	r3, [sp, #12]
 8010c74:	454b      	cmp	r3, r9
 8010c76:	d307      	bcc.n	8010c88 <__cvt+0xbc>
 8010c78:	9b03      	ldr	r3, [sp, #12]
 8010c7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010c7c:	1bdb      	subs	r3, r3, r7
 8010c7e:	4638      	mov	r0, r7
 8010c80:	6013      	str	r3, [r2, #0]
 8010c82:	b004      	add	sp, #16
 8010c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c88:	1c59      	adds	r1, r3, #1
 8010c8a:	9103      	str	r1, [sp, #12]
 8010c8c:	701a      	strb	r2, [r3, #0]
 8010c8e:	e7f0      	b.n	8010c72 <__cvt+0xa6>

08010c90 <__exponent>:
 8010c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c92:	4603      	mov	r3, r0
 8010c94:	2900      	cmp	r1, #0
 8010c96:	bfb8      	it	lt
 8010c98:	4249      	neglt	r1, r1
 8010c9a:	f803 2b02 	strb.w	r2, [r3], #2
 8010c9e:	bfb4      	ite	lt
 8010ca0:	222d      	movlt	r2, #45	; 0x2d
 8010ca2:	222b      	movge	r2, #43	; 0x2b
 8010ca4:	2909      	cmp	r1, #9
 8010ca6:	7042      	strb	r2, [r0, #1]
 8010ca8:	dd2a      	ble.n	8010d00 <__exponent+0x70>
 8010caa:	f10d 0407 	add.w	r4, sp, #7
 8010cae:	46a4      	mov	ip, r4
 8010cb0:	270a      	movs	r7, #10
 8010cb2:	46a6      	mov	lr, r4
 8010cb4:	460a      	mov	r2, r1
 8010cb6:	fb91 f6f7 	sdiv	r6, r1, r7
 8010cba:	fb07 1516 	mls	r5, r7, r6, r1
 8010cbe:	3530      	adds	r5, #48	; 0x30
 8010cc0:	2a63      	cmp	r2, #99	; 0x63
 8010cc2:	f104 34ff 	add.w	r4, r4, #4294967295
 8010cc6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010cca:	4631      	mov	r1, r6
 8010ccc:	dcf1      	bgt.n	8010cb2 <__exponent+0x22>
 8010cce:	3130      	adds	r1, #48	; 0x30
 8010cd0:	f1ae 0502 	sub.w	r5, lr, #2
 8010cd4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010cd8:	1c44      	adds	r4, r0, #1
 8010cda:	4629      	mov	r1, r5
 8010cdc:	4561      	cmp	r1, ip
 8010cde:	d30a      	bcc.n	8010cf6 <__exponent+0x66>
 8010ce0:	f10d 0209 	add.w	r2, sp, #9
 8010ce4:	eba2 020e 	sub.w	r2, r2, lr
 8010ce8:	4565      	cmp	r5, ip
 8010cea:	bf88      	it	hi
 8010cec:	2200      	movhi	r2, #0
 8010cee:	4413      	add	r3, r2
 8010cf0:	1a18      	subs	r0, r3, r0
 8010cf2:	b003      	add	sp, #12
 8010cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010cfa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010cfe:	e7ed      	b.n	8010cdc <__exponent+0x4c>
 8010d00:	2330      	movs	r3, #48	; 0x30
 8010d02:	3130      	adds	r1, #48	; 0x30
 8010d04:	7083      	strb	r3, [r0, #2]
 8010d06:	70c1      	strb	r1, [r0, #3]
 8010d08:	1d03      	adds	r3, r0, #4
 8010d0a:	e7f1      	b.n	8010cf0 <__exponent+0x60>

08010d0c <_printf_float>:
 8010d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d10:	ed2d 8b02 	vpush	{d8}
 8010d14:	b08d      	sub	sp, #52	; 0x34
 8010d16:	460c      	mov	r4, r1
 8010d18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010d1c:	4616      	mov	r6, r2
 8010d1e:	461f      	mov	r7, r3
 8010d20:	4605      	mov	r5, r0
 8010d22:	f001 fa57 	bl	80121d4 <_localeconv_r>
 8010d26:	f8d0 a000 	ldr.w	sl, [r0]
 8010d2a:	4650      	mov	r0, sl
 8010d2c:	f7ef fa50 	bl	80001d0 <strlen>
 8010d30:	2300      	movs	r3, #0
 8010d32:	930a      	str	r3, [sp, #40]	; 0x28
 8010d34:	6823      	ldr	r3, [r4, #0]
 8010d36:	9305      	str	r3, [sp, #20]
 8010d38:	f8d8 3000 	ldr.w	r3, [r8]
 8010d3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010d40:	3307      	adds	r3, #7
 8010d42:	f023 0307 	bic.w	r3, r3, #7
 8010d46:	f103 0208 	add.w	r2, r3, #8
 8010d4a:	f8c8 2000 	str.w	r2, [r8]
 8010d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010d56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010d5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010d5e:	9307      	str	r3, [sp, #28]
 8010d60:	f8cd 8018 	str.w	r8, [sp, #24]
 8010d64:	ee08 0a10 	vmov	s16, r0
 8010d68:	4b9f      	ldr	r3, [pc, #636]	; (8010fe8 <_printf_float+0x2dc>)
 8010d6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8010d72:	f7ef fedb 	bl	8000b2c <__aeabi_dcmpun>
 8010d76:	bb88      	cbnz	r0, 8010ddc <_printf_float+0xd0>
 8010d78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d7c:	4b9a      	ldr	r3, [pc, #616]	; (8010fe8 <_printf_float+0x2dc>)
 8010d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8010d82:	f7ef feb5 	bl	8000af0 <__aeabi_dcmple>
 8010d86:	bb48      	cbnz	r0, 8010ddc <_printf_float+0xd0>
 8010d88:	2200      	movs	r2, #0
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	4640      	mov	r0, r8
 8010d8e:	4649      	mov	r1, r9
 8010d90:	f7ef fea4 	bl	8000adc <__aeabi_dcmplt>
 8010d94:	b110      	cbz	r0, 8010d9c <_printf_float+0x90>
 8010d96:	232d      	movs	r3, #45	; 0x2d
 8010d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d9c:	4b93      	ldr	r3, [pc, #588]	; (8010fec <_printf_float+0x2e0>)
 8010d9e:	4894      	ldr	r0, [pc, #592]	; (8010ff0 <_printf_float+0x2e4>)
 8010da0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010da4:	bf94      	ite	ls
 8010da6:	4698      	movls	r8, r3
 8010da8:	4680      	movhi	r8, r0
 8010daa:	2303      	movs	r3, #3
 8010dac:	6123      	str	r3, [r4, #16]
 8010dae:	9b05      	ldr	r3, [sp, #20]
 8010db0:	f023 0204 	bic.w	r2, r3, #4
 8010db4:	6022      	str	r2, [r4, #0]
 8010db6:	f04f 0900 	mov.w	r9, #0
 8010dba:	9700      	str	r7, [sp, #0]
 8010dbc:	4633      	mov	r3, r6
 8010dbe:	aa0b      	add	r2, sp, #44	; 0x2c
 8010dc0:	4621      	mov	r1, r4
 8010dc2:	4628      	mov	r0, r5
 8010dc4:	f000 f9d8 	bl	8011178 <_printf_common>
 8010dc8:	3001      	adds	r0, #1
 8010dca:	f040 8090 	bne.w	8010eee <_printf_float+0x1e2>
 8010dce:	f04f 30ff 	mov.w	r0, #4294967295
 8010dd2:	b00d      	add	sp, #52	; 0x34
 8010dd4:	ecbd 8b02 	vpop	{d8}
 8010dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ddc:	4642      	mov	r2, r8
 8010dde:	464b      	mov	r3, r9
 8010de0:	4640      	mov	r0, r8
 8010de2:	4649      	mov	r1, r9
 8010de4:	f7ef fea2 	bl	8000b2c <__aeabi_dcmpun>
 8010de8:	b140      	cbz	r0, 8010dfc <_printf_float+0xf0>
 8010dea:	464b      	mov	r3, r9
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	bfbc      	itt	lt
 8010df0:	232d      	movlt	r3, #45	; 0x2d
 8010df2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010df6:	487f      	ldr	r0, [pc, #508]	; (8010ff4 <_printf_float+0x2e8>)
 8010df8:	4b7f      	ldr	r3, [pc, #508]	; (8010ff8 <_printf_float+0x2ec>)
 8010dfa:	e7d1      	b.n	8010da0 <_printf_float+0x94>
 8010dfc:	6863      	ldr	r3, [r4, #4]
 8010dfe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010e02:	9206      	str	r2, [sp, #24]
 8010e04:	1c5a      	adds	r2, r3, #1
 8010e06:	d13f      	bne.n	8010e88 <_printf_float+0x17c>
 8010e08:	2306      	movs	r3, #6
 8010e0a:	6063      	str	r3, [r4, #4]
 8010e0c:	9b05      	ldr	r3, [sp, #20]
 8010e0e:	6861      	ldr	r1, [r4, #4]
 8010e10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010e14:	2300      	movs	r3, #0
 8010e16:	9303      	str	r3, [sp, #12]
 8010e18:	ab0a      	add	r3, sp, #40	; 0x28
 8010e1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010e1e:	ab09      	add	r3, sp, #36	; 0x24
 8010e20:	ec49 8b10 	vmov	d0, r8, r9
 8010e24:	9300      	str	r3, [sp, #0]
 8010e26:	6022      	str	r2, [r4, #0]
 8010e28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010e2c:	4628      	mov	r0, r5
 8010e2e:	f7ff fecd 	bl	8010bcc <__cvt>
 8010e32:	9b06      	ldr	r3, [sp, #24]
 8010e34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010e36:	2b47      	cmp	r3, #71	; 0x47
 8010e38:	4680      	mov	r8, r0
 8010e3a:	d108      	bne.n	8010e4e <_printf_float+0x142>
 8010e3c:	1cc8      	adds	r0, r1, #3
 8010e3e:	db02      	blt.n	8010e46 <_printf_float+0x13a>
 8010e40:	6863      	ldr	r3, [r4, #4]
 8010e42:	4299      	cmp	r1, r3
 8010e44:	dd41      	ble.n	8010eca <_printf_float+0x1be>
 8010e46:	f1ab 0b02 	sub.w	fp, fp, #2
 8010e4a:	fa5f fb8b 	uxtb.w	fp, fp
 8010e4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010e52:	d820      	bhi.n	8010e96 <_printf_float+0x18a>
 8010e54:	3901      	subs	r1, #1
 8010e56:	465a      	mov	r2, fp
 8010e58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010e5c:	9109      	str	r1, [sp, #36]	; 0x24
 8010e5e:	f7ff ff17 	bl	8010c90 <__exponent>
 8010e62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e64:	1813      	adds	r3, r2, r0
 8010e66:	2a01      	cmp	r2, #1
 8010e68:	4681      	mov	r9, r0
 8010e6a:	6123      	str	r3, [r4, #16]
 8010e6c:	dc02      	bgt.n	8010e74 <_printf_float+0x168>
 8010e6e:	6822      	ldr	r2, [r4, #0]
 8010e70:	07d2      	lsls	r2, r2, #31
 8010e72:	d501      	bpl.n	8010e78 <_printf_float+0x16c>
 8010e74:	3301      	adds	r3, #1
 8010e76:	6123      	str	r3, [r4, #16]
 8010e78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d09c      	beq.n	8010dba <_printf_float+0xae>
 8010e80:	232d      	movs	r3, #45	; 0x2d
 8010e82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e86:	e798      	b.n	8010dba <_printf_float+0xae>
 8010e88:	9a06      	ldr	r2, [sp, #24]
 8010e8a:	2a47      	cmp	r2, #71	; 0x47
 8010e8c:	d1be      	bne.n	8010e0c <_printf_float+0x100>
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d1bc      	bne.n	8010e0c <_printf_float+0x100>
 8010e92:	2301      	movs	r3, #1
 8010e94:	e7b9      	b.n	8010e0a <_printf_float+0xfe>
 8010e96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010e9a:	d118      	bne.n	8010ece <_printf_float+0x1c2>
 8010e9c:	2900      	cmp	r1, #0
 8010e9e:	6863      	ldr	r3, [r4, #4]
 8010ea0:	dd0b      	ble.n	8010eba <_printf_float+0x1ae>
 8010ea2:	6121      	str	r1, [r4, #16]
 8010ea4:	b913      	cbnz	r3, 8010eac <_printf_float+0x1a0>
 8010ea6:	6822      	ldr	r2, [r4, #0]
 8010ea8:	07d0      	lsls	r0, r2, #31
 8010eaa:	d502      	bpl.n	8010eb2 <_printf_float+0x1a6>
 8010eac:	3301      	adds	r3, #1
 8010eae:	440b      	add	r3, r1
 8010eb0:	6123      	str	r3, [r4, #16]
 8010eb2:	65a1      	str	r1, [r4, #88]	; 0x58
 8010eb4:	f04f 0900 	mov.w	r9, #0
 8010eb8:	e7de      	b.n	8010e78 <_printf_float+0x16c>
 8010eba:	b913      	cbnz	r3, 8010ec2 <_printf_float+0x1b6>
 8010ebc:	6822      	ldr	r2, [r4, #0]
 8010ebe:	07d2      	lsls	r2, r2, #31
 8010ec0:	d501      	bpl.n	8010ec6 <_printf_float+0x1ba>
 8010ec2:	3302      	adds	r3, #2
 8010ec4:	e7f4      	b.n	8010eb0 <_printf_float+0x1a4>
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	e7f2      	b.n	8010eb0 <_printf_float+0x1a4>
 8010eca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ed0:	4299      	cmp	r1, r3
 8010ed2:	db05      	blt.n	8010ee0 <_printf_float+0x1d4>
 8010ed4:	6823      	ldr	r3, [r4, #0]
 8010ed6:	6121      	str	r1, [r4, #16]
 8010ed8:	07d8      	lsls	r0, r3, #31
 8010eda:	d5ea      	bpl.n	8010eb2 <_printf_float+0x1a6>
 8010edc:	1c4b      	adds	r3, r1, #1
 8010ede:	e7e7      	b.n	8010eb0 <_printf_float+0x1a4>
 8010ee0:	2900      	cmp	r1, #0
 8010ee2:	bfd4      	ite	le
 8010ee4:	f1c1 0202 	rsble	r2, r1, #2
 8010ee8:	2201      	movgt	r2, #1
 8010eea:	4413      	add	r3, r2
 8010eec:	e7e0      	b.n	8010eb0 <_printf_float+0x1a4>
 8010eee:	6823      	ldr	r3, [r4, #0]
 8010ef0:	055a      	lsls	r2, r3, #21
 8010ef2:	d407      	bmi.n	8010f04 <_printf_float+0x1f8>
 8010ef4:	6923      	ldr	r3, [r4, #16]
 8010ef6:	4642      	mov	r2, r8
 8010ef8:	4631      	mov	r1, r6
 8010efa:	4628      	mov	r0, r5
 8010efc:	47b8      	blx	r7
 8010efe:	3001      	adds	r0, #1
 8010f00:	d12c      	bne.n	8010f5c <_printf_float+0x250>
 8010f02:	e764      	b.n	8010dce <_printf_float+0xc2>
 8010f04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010f08:	f240 80e0 	bls.w	80110cc <_printf_float+0x3c0>
 8010f0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010f10:	2200      	movs	r2, #0
 8010f12:	2300      	movs	r3, #0
 8010f14:	f7ef fdd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	d034      	beq.n	8010f86 <_printf_float+0x27a>
 8010f1c:	4a37      	ldr	r2, [pc, #220]	; (8010ffc <_printf_float+0x2f0>)
 8010f1e:	2301      	movs	r3, #1
 8010f20:	4631      	mov	r1, r6
 8010f22:	4628      	mov	r0, r5
 8010f24:	47b8      	blx	r7
 8010f26:	3001      	adds	r0, #1
 8010f28:	f43f af51 	beq.w	8010dce <_printf_float+0xc2>
 8010f2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f30:	429a      	cmp	r2, r3
 8010f32:	db02      	blt.n	8010f3a <_printf_float+0x22e>
 8010f34:	6823      	ldr	r3, [r4, #0]
 8010f36:	07d8      	lsls	r0, r3, #31
 8010f38:	d510      	bpl.n	8010f5c <_printf_float+0x250>
 8010f3a:	ee18 3a10 	vmov	r3, s16
 8010f3e:	4652      	mov	r2, sl
 8010f40:	4631      	mov	r1, r6
 8010f42:	4628      	mov	r0, r5
 8010f44:	47b8      	blx	r7
 8010f46:	3001      	adds	r0, #1
 8010f48:	f43f af41 	beq.w	8010dce <_printf_float+0xc2>
 8010f4c:	f04f 0800 	mov.w	r8, #0
 8010f50:	f104 091a 	add.w	r9, r4, #26
 8010f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f56:	3b01      	subs	r3, #1
 8010f58:	4543      	cmp	r3, r8
 8010f5a:	dc09      	bgt.n	8010f70 <_printf_float+0x264>
 8010f5c:	6823      	ldr	r3, [r4, #0]
 8010f5e:	079b      	lsls	r3, r3, #30
 8010f60:	f100 8105 	bmi.w	801116e <_printf_float+0x462>
 8010f64:	68e0      	ldr	r0, [r4, #12]
 8010f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f68:	4298      	cmp	r0, r3
 8010f6a:	bfb8      	it	lt
 8010f6c:	4618      	movlt	r0, r3
 8010f6e:	e730      	b.n	8010dd2 <_printf_float+0xc6>
 8010f70:	2301      	movs	r3, #1
 8010f72:	464a      	mov	r2, r9
 8010f74:	4631      	mov	r1, r6
 8010f76:	4628      	mov	r0, r5
 8010f78:	47b8      	blx	r7
 8010f7a:	3001      	adds	r0, #1
 8010f7c:	f43f af27 	beq.w	8010dce <_printf_float+0xc2>
 8010f80:	f108 0801 	add.w	r8, r8, #1
 8010f84:	e7e6      	b.n	8010f54 <_printf_float+0x248>
 8010f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	dc39      	bgt.n	8011000 <_printf_float+0x2f4>
 8010f8c:	4a1b      	ldr	r2, [pc, #108]	; (8010ffc <_printf_float+0x2f0>)
 8010f8e:	2301      	movs	r3, #1
 8010f90:	4631      	mov	r1, r6
 8010f92:	4628      	mov	r0, r5
 8010f94:	47b8      	blx	r7
 8010f96:	3001      	adds	r0, #1
 8010f98:	f43f af19 	beq.w	8010dce <_printf_float+0xc2>
 8010f9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010fa0:	4313      	orrs	r3, r2
 8010fa2:	d102      	bne.n	8010faa <_printf_float+0x29e>
 8010fa4:	6823      	ldr	r3, [r4, #0]
 8010fa6:	07d9      	lsls	r1, r3, #31
 8010fa8:	d5d8      	bpl.n	8010f5c <_printf_float+0x250>
 8010faa:	ee18 3a10 	vmov	r3, s16
 8010fae:	4652      	mov	r2, sl
 8010fb0:	4631      	mov	r1, r6
 8010fb2:	4628      	mov	r0, r5
 8010fb4:	47b8      	blx	r7
 8010fb6:	3001      	adds	r0, #1
 8010fb8:	f43f af09 	beq.w	8010dce <_printf_float+0xc2>
 8010fbc:	f04f 0900 	mov.w	r9, #0
 8010fc0:	f104 0a1a 	add.w	sl, r4, #26
 8010fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fc6:	425b      	negs	r3, r3
 8010fc8:	454b      	cmp	r3, r9
 8010fca:	dc01      	bgt.n	8010fd0 <_printf_float+0x2c4>
 8010fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fce:	e792      	b.n	8010ef6 <_printf_float+0x1ea>
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	4652      	mov	r2, sl
 8010fd4:	4631      	mov	r1, r6
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	47b8      	blx	r7
 8010fda:	3001      	adds	r0, #1
 8010fdc:	f43f aef7 	beq.w	8010dce <_printf_float+0xc2>
 8010fe0:	f109 0901 	add.w	r9, r9, #1
 8010fe4:	e7ee      	b.n	8010fc4 <_printf_float+0x2b8>
 8010fe6:	bf00      	nop
 8010fe8:	7fefffff 	.word	0x7fefffff
 8010fec:	08015fd0 	.word	0x08015fd0
 8010ff0:	08015fd4 	.word	0x08015fd4
 8010ff4:	08015fdc 	.word	0x08015fdc
 8010ff8:	08015fd8 	.word	0x08015fd8
 8010ffc:	08015fe0 	.word	0x08015fe0
 8011000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011002:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011004:	429a      	cmp	r2, r3
 8011006:	bfa8      	it	ge
 8011008:	461a      	movge	r2, r3
 801100a:	2a00      	cmp	r2, #0
 801100c:	4691      	mov	r9, r2
 801100e:	dc37      	bgt.n	8011080 <_printf_float+0x374>
 8011010:	f04f 0b00 	mov.w	fp, #0
 8011014:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011018:	f104 021a 	add.w	r2, r4, #26
 801101c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801101e:	9305      	str	r3, [sp, #20]
 8011020:	eba3 0309 	sub.w	r3, r3, r9
 8011024:	455b      	cmp	r3, fp
 8011026:	dc33      	bgt.n	8011090 <_printf_float+0x384>
 8011028:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801102c:	429a      	cmp	r2, r3
 801102e:	db3b      	blt.n	80110a8 <_printf_float+0x39c>
 8011030:	6823      	ldr	r3, [r4, #0]
 8011032:	07da      	lsls	r2, r3, #31
 8011034:	d438      	bmi.n	80110a8 <_printf_float+0x39c>
 8011036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011038:	9a05      	ldr	r2, [sp, #20]
 801103a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801103c:	1a9a      	subs	r2, r3, r2
 801103e:	eba3 0901 	sub.w	r9, r3, r1
 8011042:	4591      	cmp	r9, r2
 8011044:	bfa8      	it	ge
 8011046:	4691      	movge	r9, r2
 8011048:	f1b9 0f00 	cmp.w	r9, #0
 801104c:	dc35      	bgt.n	80110ba <_printf_float+0x3ae>
 801104e:	f04f 0800 	mov.w	r8, #0
 8011052:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011056:	f104 0a1a 	add.w	sl, r4, #26
 801105a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801105e:	1a9b      	subs	r3, r3, r2
 8011060:	eba3 0309 	sub.w	r3, r3, r9
 8011064:	4543      	cmp	r3, r8
 8011066:	f77f af79 	ble.w	8010f5c <_printf_float+0x250>
 801106a:	2301      	movs	r3, #1
 801106c:	4652      	mov	r2, sl
 801106e:	4631      	mov	r1, r6
 8011070:	4628      	mov	r0, r5
 8011072:	47b8      	blx	r7
 8011074:	3001      	adds	r0, #1
 8011076:	f43f aeaa 	beq.w	8010dce <_printf_float+0xc2>
 801107a:	f108 0801 	add.w	r8, r8, #1
 801107e:	e7ec      	b.n	801105a <_printf_float+0x34e>
 8011080:	4613      	mov	r3, r2
 8011082:	4631      	mov	r1, r6
 8011084:	4642      	mov	r2, r8
 8011086:	4628      	mov	r0, r5
 8011088:	47b8      	blx	r7
 801108a:	3001      	adds	r0, #1
 801108c:	d1c0      	bne.n	8011010 <_printf_float+0x304>
 801108e:	e69e      	b.n	8010dce <_printf_float+0xc2>
 8011090:	2301      	movs	r3, #1
 8011092:	4631      	mov	r1, r6
 8011094:	4628      	mov	r0, r5
 8011096:	9205      	str	r2, [sp, #20]
 8011098:	47b8      	blx	r7
 801109a:	3001      	adds	r0, #1
 801109c:	f43f ae97 	beq.w	8010dce <_printf_float+0xc2>
 80110a0:	9a05      	ldr	r2, [sp, #20]
 80110a2:	f10b 0b01 	add.w	fp, fp, #1
 80110a6:	e7b9      	b.n	801101c <_printf_float+0x310>
 80110a8:	ee18 3a10 	vmov	r3, s16
 80110ac:	4652      	mov	r2, sl
 80110ae:	4631      	mov	r1, r6
 80110b0:	4628      	mov	r0, r5
 80110b2:	47b8      	blx	r7
 80110b4:	3001      	adds	r0, #1
 80110b6:	d1be      	bne.n	8011036 <_printf_float+0x32a>
 80110b8:	e689      	b.n	8010dce <_printf_float+0xc2>
 80110ba:	9a05      	ldr	r2, [sp, #20]
 80110bc:	464b      	mov	r3, r9
 80110be:	4442      	add	r2, r8
 80110c0:	4631      	mov	r1, r6
 80110c2:	4628      	mov	r0, r5
 80110c4:	47b8      	blx	r7
 80110c6:	3001      	adds	r0, #1
 80110c8:	d1c1      	bne.n	801104e <_printf_float+0x342>
 80110ca:	e680      	b.n	8010dce <_printf_float+0xc2>
 80110cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110ce:	2a01      	cmp	r2, #1
 80110d0:	dc01      	bgt.n	80110d6 <_printf_float+0x3ca>
 80110d2:	07db      	lsls	r3, r3, #31
 80110d4:	d538      	bpl.n	8011148 <_printf_float+0x43c>
 80110d6:	2301      	movs	r3, #1
 80110d8:	4642      	mov	r2, r8
 80110da:	4631      	mov	r1, r6
 80110dc:	4628      	mov	r0, r5
 80110de:	47b8      	blx	r7
 80110e0:	3001      	adds	r0, #1
 80110e2:	f43f ae74 	beq.w	8010dce <_printf_float+0xc2>
 80110e6:	ee18 3a10 	vmov	r3, s16
 80110ea:	4652      	mov	r2, sl
 80110ec:	4631      	mov	r1, r6
 80110ee:	4628      	mov	r0, r5
 80110f0:	47b8      	blx	r7
 80110f2:	3001      	adds	r0, #1
 80110f4:	f43f ae6b 	beq.w	8010dce <_printf_float+0xc2>
 80110f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80110fc:	2200      	movs	r2, #0
 80110fe:	2300      	movs	r3, #0
 8011100:	f7ef fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 8011104:	b9d8      	cbnz	r0, 801113e <_printf_float+0x432>
 8011106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011108:	f108 0201 	add.w	r2, r8, #1
 801110c:	3b01      	subs	r3, #1
 801110e:	4631      	mov	r1, r6
 8011110:	4628      	mov	r0, r5
 8011112:	47b8      	blx	r7
 8011114:	3001      	adds	r0, #1
 8011116:	d10e      	bne.n	8011136 <_printf_float+0x42a>
 8011118:	e659      	b.n	8010dce <_printf_float+0xc2>
 801111a:	2301      	movs	r3, #1
 801111c:	4652      	mov	r2, sl
 801111e:	4631      	mov	r1, r6
 8011120:	4628      	mov	r0, r5
 8011122:	47b8      	blx	r7
 8011124:	3001      	adds	r0, #1
 8011126:	f43f ae52 	beq.w	8010dce <_printf_float+0xc2>
 801112a:	f108 0801 	add.w	r8, r8, #1
 801112e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011130:	3b01      	subs	r3, #1
 8011132:	4543      	cmp	r3, r8
 8011134:	dcf1      	bgt.n	801111a <_printf_float+0x40e>
 8011136:	464b      	mov	r3, r9
 8011138:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801113c:	e6dc      	b.n	8010ef8 <_printf_float+0x1ec>
 801113e:	f04f 0800 	mov.w	r8, #0
 8011142:	f104 0a1a 	add.w	sl, r4, #26
 8011146:	e7f2      	b.n	801112e <_printf_float+0x422>
 8011148:	2301      	movs	r3, #1
 801114a:	4642      	mov	r2, r8
 801114c:	e7df      	b.n	801110e <_printf_float+0x402>
 801114e:	2301      	movs	r3, #1
 8011150:	464a      	mov	r2, r9
 8011152:	4631      	mov	r1, r6
 8011154:	4628      	mov	r0, r5
 8011156:	47b8      	blx	r7
 8011158:	3001      	adds	r0, #1
 801115a:	f43f ae38 	beq.w	8010dce <_printf_float+0xc2>
 801115e:	f108 0801 	add.w	r8, r8, #1
 8011162:	68e3      	ldr	r3, [r4, #12]
 8011164:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011166:	1a5b      	subs	r3, r3, r1
 8011168:	4543      	cmp	r3, r8
 801116a:	dcf0      	bgt.n	801114e <_printf_float+0x442>
 801116c:	e6fa      	b.n	8010f64 <_printf_float+0x258>
 801116e:	f04f 0800 	mov.w	r8, #0
 8011172:	f104 0919 	add.w	r9, r4, #25
 8011176:	e7f4      	b.n	8011162 <_printf_float+0x456>

08011178 <_printf_common>:
 8011178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801117c:	4616      	mov	r6, r2
 801117e:	4699      	mov	r9, r3
 8011180:	688a      	ldr	r2, [r1, #8]
 8011182:	690b      	ldr	r3, [r1, #16]
 8011184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011188:	4293      	cmp	r3, r2
 801118a:	bfb8      	it	lt
 801118c:	4613      	movlt	r3, r2
 801118e:	6033      	str	r3, [r6, #0]
 8011190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011194:	4607      	mov	r7, r0
 8011196:	460c      	mov	r4, r1
 8011198:	b10a      	cbz	r2, 801119e <_printf_common+0x26>
 801119a:	3301      	adds	r3, #1
 801119c:	6033      	str	r3, [r6, #0]
 801119e:	6823      	ldr	r3, [r4, #0]
 80111a0:	0699      	lsls	r1, r3, #26
 80111a2:	bf42      	ittt	mi
 80111a4:	6833      	ldrmi	r3, [r6, #0]
 80111a6:	3302      	addmi	r3, #2
 80111a8:	6033      	strmi	r3, [r6, #0]
 80111aa:	6825      	ldr	r5, [r4, #0]
 80111ac:	f015 0506 	ands.w	r5, r5, #6
 80111b0:	d106      	bne.n	80111c0 <_printf_common+0x48>
 80111b2:	f104 0a19 	add.w	sl, r4, #25
 80111b6:	68e3      	ldr	r3, [r4, #12]
 80111b8:	6832      	ldr	r2, [r6, #0]
 80111ba:	1a9b      	subs	r3, r3, r2
 80111bc:	42ab      	cmp	r3, r5
 80111be:	dc26      	bgt.n	801120e <_printf_common+0x96>
 80111c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80111c4:	1e13      	subs	r3, r2, #0
 80111c6:	6822      	ldr	r2, [r4, #0]
 80111c8:	bf18      	it	ne
 80111ca:	2301      	movne	r3, #1
 80111cc:	0692      	lsls	r2, r2, #26
 80111ce:	d42b      	bmi.n	8011228 <_printf_common+0xb0>
 80111d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80111d4:	4649      	mov	r1, r9
 80111d6:	4638      	mov	r0, r7
 80111d8:	47c0      	blx	r8
 80111da:	3001      	adds	r0, #1
 80111dc:	d01e      	beq.n	801121c <_printf_common+0xa4>
 80111de:	6823      	ldr	r3, [r4, #0]
 80111e0:	68e5      	ldr	r5, [r4, #12]
 80111e2:	6832      	ldr	r2, [r6, #0]
 80111e4:	f003 0306 	and.w	r3, r3, #6
 80111e8:	2b04      	cmp	r3, #4
 80111ea:	bf08      	it	eq
 80111ec:	1aad      	subeq	r5, r5, r2
 80111ee:	68a3      	ldr	r3, [r4, #8]
 80111f0:	6922      	ldr	r2, [r4, #16]
 80111f2:	bf0c      	ite	eq
 80111f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80111f8:	2500      	movne	r5, #0
 80111fa:	4293      	cmp	r3, r2
 80111fc:	bfc4      	itt	gt
 80111fe:	1a9b      	subgt	r3, r3, r2
 8011200:	18ed      	addgt	r5, r5, r3
 8011202:	2600      	movs	r6, #0
 8011204:	341a      	adds	r4, #26
 8011206:	42b5      	cmp	r5, r6
 8011208:	d11a      	bne.n	8011240 <_printf_common+0xc8>
 801120a:	2000      	movs	r0, #0
 801120c:	e008      	b.n	8011220 <_printf_common+0xa8>
 801120e:	2301      	movs	r3, #1
 8011210:	4652      	mov	r2, sl
 8011212:	4649      	mov	r1, r9
 8011214:	4638      	mov	r0, r7
 8011216:	47c0      	blx	r8
 8011218:	3001      	adds	r0, #1
 801121a:	d103      	bne.n	8011224 <_printf_common+0xac>
 801121c:	f04f 30ff 	mov.w	r0, #4294967295
 8011220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011224:	3501      	adds	r5, #1
 8011226:	e7c6      	b.n	80111b6 <_printf_common+0x3e>
 8011228:	18e1      	adds	r1, r4, r3
 801122a:	1c5a      	adds	r2, r3, #1
 801122c:	2030      	movs	r0, #48	; 0x30
 801122e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011232:	4422      	add	r2, r4
 8011234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801123c:	3302      	adds	r3, #2
 801123e:	e7c7      	b.n	80111d0 <_printf_common+0x58>
 8011240:	2301      	movs	r3, #1
 8011242:	4622      	mov	r2, r4
 8011244:	4649      	mov	r1, r9
 8011246:	4638      	mov	r0, r7
 8011248:	47c0      	blx	r8
 801124a:	3001      	adds	r0, #1
 801124c:	d0e6      	beq.n	801121c <_printf_common+0xa4>
 801124e:	3601      	adds	r6, #1
 8011250:	e7d9      	b.n	8011206 <_printf_common+0x8e>
	...

08011254 <_printf_i>:
 8011254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011258:	7e0f      	ldrb	r7, [r1, #24]
 801125a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801125c:	2f78      	cmp	r7, #120	; 0x78
 801125e:	4691      	mov	r9, r2
 8011260:	4680      	mov	r8, r0
 8011262:	460c      	mov	r4, r1
 8011264:	469a      	mov	sl, r3
 8011266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801126a:	d807      	bhi.n	801127c <_printf_i+0x28>
 801126c:	2f62      	cmp	r7, #98	; 0x62
 801126e:	d80a      	bhi.n	8011286 <_printf_i+0x32>
 8011270:	2f00      	cmp	r7, #0
 8011272:	f000 80d8 	beq.w	8011426 <_printf_i+0x1d2>
 8011276:	2f58      	cmp	r7, #88	; 0x58
 8011278:	f000 80a3 	beq.w	80113c2 <_printf_i+0x16e>
 801127c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011284:	e03a      	b.n	80112fc <_printf_i+0xa8>
 8011286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801128a:	2b15      	cmp	r3, #21
 801128c:	d8f6      	bhi.n	801127c <_printf_i+0x28>
 801128e:	a101      	add	r1, pc, #4	; (adr r1, 8011294 <_printf_i+0x40>)
 8011290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011294:	080112ed 	.word	0x080112ed
 8011298:	08011301 	.word	0x08011301
 801129c:	0801127d 	.word	0x0801127d
 80112a0:	0801127d 	.word	0x0801127d
 80112a4:	0801127d 	.word	0x0801127d
 80112a8:	0801127d 	.word	0x0801127d
 80112ac:	08011301 	.word	0x08011301
 80112b0:	0801127d 	.word	0x0801127d
 80112b4:	0801127d 	.word	0x0801127d
 80112b8:	0801127d 	.word	0x0801127d
 80112bc:	0801127d 	.word	0x0801127d
 80112c0:	0801140d 	.word	0x0801140d
 80112c4:	08011331 	.word	0x08011331
 80112c8:	080113ef 	.word	0x080113ef
 80112cc:	0801127d 	.word	0x0801127d
 80112d0:	0801127d 	.word	0x0801127d
 80112d4:	0801142f 	.word	0x0801142f
 80112d8:	0801127d 	.word	0x0801127d
 80112dc:	08011331 	.word	0x08011331
 80112e0:	0801127d 	.word	0x0801127d
 80112e4:	0801127d 	.word	0x0801127d
 80112e8:	080113f7 	.word	0x080113f7
 80112ec:	682b      	ldr	r3, [r5, #0]
 80112ee:	1d1a      	adds	r2, r3, #4
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	602a      	str	r2, [r5, #0]
 80112f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80112f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80112fc:	2301      	movs	r3, #1
 80112fe:	e0a3      	b.n	8011448 <_printf_i+0x1f4>
 8011300:	6820      	ldr	r0, [r4, #0]
 8011302:	6829      	ldr	r1, [r5, #0]
 8011304:	0606      	lsls	r6, r0, #24
 8011306:	f101 0304 	add.w	r3, r1, #4
 801130a:	d50a      	bpl.n	8011322 <_printf_i+0xce>
 801130c:	680e      	ldr	r6, [r1, #0]
 801130e:	602b      	str	r3, [r5, #0]
 8011310:	2e00      	cmp	r6, #0
 8011312:	da03      	bge.n	801131c <_printf_i+0xc8>
 8011314:	232d      	movs	r3, #45	; 0x2d
 8011316:	4276      	negs	r6, r6
 8011318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801131c:	485e      	ldr	r0, [pc, #376]	; (8011498 <_printf_i+0x244>)
 801131e:	230a      	movs	r3, #10
 8011320:	e019      	b.n	8011356 <_printf_i+0x102>
 8011322:	680e      	ldr	r6, [r1, #0]
 8011324:	602b      	str	r3, [r5, #0]
 8011326:	f010 0f40 	tst.w	r0, #64	; 0x40
 801132a:	bf18      	it	ne
 801132c:	b236      	sxthne	r6, r6
 801132e:	e7ef      	b.n	8011310 <_printf_i+0xbc>
 8011330:	682b      	ldr	r3, [r5, #0]
 8011332:	6820      	ldr	r0, [r4, #0]
 8011334:	1d19      	adds	r1, r3, #4
 8011336:	6029      	str	r1, [r5, #0]
 8011338:	0601      	lsls	r1, r0, #24
 801133a:	d501      	bpl.n	8011340 <_printf_i+0xec>
 801133c:	681e      	ldr	r6, [r3, #0]
 801133e:	e002      	b.n	8011346 <_printf_i+0xf2>
 8011340:	0646      	lsls	r6, r0, #25
 8011342:	d5fb      	bpl.n	801133c <_printf_i+0xe8>
 8011344:	881e      	ldrh	r6, [r3, #0]
 8011346:	4854      	ldr	r0, [pc, #336]	; (8011498 <_printf_i+0x244>)
 8011348:	2f6f      	cmp	r7, #111	; 0x6f
 801134a:	bf0c      	ite	eq
 801134c:	2308      	moveq	r3, #8
 801134e:	230a      	movne	r3, #10
 8011350:	2100      	movs	r1, #0
 8011352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011356:	6865      	ldr	r5, [r4, #4]
 8011358:	60a5      	str	r5, [r4, #8]
 801135a:	2d00      	cmp	r5, #0
 801135c:	bfa2      	ittt	ge
 801135e:	6821      	ldrge	r1, [r4, #0]
 8011360:	f021 0104 	bicge.w	r1, r1, #4
 8011364:	6021      	strge	r1, [r4, #0]
 8011366:	b90e      	cbnz	r6, 801136c <_printf_i+0x118>
 8011368:	2d00      	cmp	r5, #0
 801136a:	d04d      	beq.n	8011408 <_printf_i+0x1b4>
 801136c:	4615      	mov	r5, r2
 801136e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011372:	fb03 6711 	mls	r7, r3, r1, r6
 8011376:	5dc7      	ldrb	r7, [r0, r7]
 8011378:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801137c:	4637      	mov	r7, r6
 801137e:	42bb      	cmp	r3, r7
 8011380:	460e      	mov	r6, r1
 8011382:	d9f4      	bls.n	801136e <_printf_i+0x11a>
 8011384:	2b08      	cmp	r3, #8
 8011386:	d10b      	bne.n	80113a0 <_printf_i+0x14c>
 8011388:	6823      	ldr	r3, [r4, #0]
 801138a:	07de      	lsls	r6, r3, #31
 801138c:	d508      	bpl.n	80113a0 <_printf_i+0x14c>
 801138e:	6923      	ldr	r3, [r4, #16]
 8011390:	6861      	ldr	r1, [r4, #4]
 8011392:	4299      	cmp	r1, r3
 8011394:	bfde      	ittt	le
 8011396:	2330      	movle	r3, #48	; 0x30
 8011398:	f805 3c01 	strble.w	r3, [r5, #-1]
 801139c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80113a0:	1b52      	subs	r2, r2, r5
 80113a2:	6122      	str	r2, [r4, #16]
 80113a4:	f8cd a000 	str.w	sl, [sp]
 80113a8:	464b      	mov	r3, r9
 80113aa:	aa03      	add	r2, sp, #12
 80113ac:	4621      	mov	r1, r4
 80113ae:	4640      	mov	r0, r8
 80113b0:	f7ff fee2 	bl	8011178 <_printf_common>
 80113b4:	3001      	adds	r0, #1
 80113b6:	d14c      	bne.n	8011452 <_printf_i+0x1fe>
 80113b8:	f04f 30ff 	mov.w	r0, #4294967295
 80113bc:	b004      	add	sp, #16
 80113be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113c2:	4835      	ldr	r0, [pc, #212]	; (8011498 <_printf_i+0x244>)
 80113c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80113c8:	6829      	ldr	r1, [r5, #0]
 80113ca:	6823      	ldr	r3, [r4, #0]
 80113cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80113d0:	6029      	str	r1, [r5, #0]
 80113d2:	061d      	lsls	r5, r3, #24
 80113d4:	d514      	bpl.n	8011400 <_printf_i+0x1ac>
 80113d6:	07df      	lsls	r7, r3, #31
 80113d8:	bf44      	itt	mi
 80113da:	f043 0320 	orrmi.w	r3, r3, #32
 80113de:	6023      	strmi	r3, [r4, #0]
 80113e0:	b91e      	cbnz	r6, 80113ea <_printf_i+0x196>
 80113e2:	6823      	ldr	r3, [r4, #0]
 80113e4:	f023 0320 	bic.w	r3, r3, #32
 80113e8:	6023      	str	r3, [r4, #0]
 80113ea:	2310      	movs	r3, #16
 80113ec:	e7b0      	b.n	8011350 <_printf_i+0xfc>
 80113ee:	6823      	ldr	r3, [r4, #0]
 80113f0:	f043 0320 	orr.w	r3, r3, #32
 80113f4:	6023      	str	r3, [r4, #0]
 80113f6:	2378      	movs	r3, #120	; 0x78
 80113f8:	4828      	ldr	r0, [pc, #160]	; (801149c <_printf_i+0x248>)
 80113fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80113fe:	e7e3      	b.n	80113c8 <_printf_i+0x174>
 8011400:	0659      	lsls	r1, r3, #25
 8011402:	bf48      	it	mi
 8011404:	b2b6      	uxthmi	r6, r6
 8011406:	e7e6      	b.n	80113d6 <_printf_i+0x182>
 8011408:	4615      	mov	r5, r2
 801140a:	e7bb      	b.n	8011384 <_printf_i+0x130>
 801140c:	682b      	ldr	r3, [r5, #0]
 801140e:	6826      	ldr	r6, [r4, #0]
 8011410:	6961      	ldr	r1, [r4, #20]
 8011412:	1d18      	adds	r0, r3, #4
 8011414:	6028      	str	r0, [r5, #0]
 8011416:	0635      	lsls	r5, r6, #24
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	d501      	bpl.n	8011420 <_printf_i+0x1cc>
 801141c:	6019      	str	r1, [r3, #0]
 801141e:	e002      	b.n	8011426 <_printf_i+0x1d2>
 8011420:	0670      	lsls	r0, r6, #25
 8011422:	d5fb      	bpl.n	801141c <_printf_i+0x1c8>
 8011424:	8019      	strh	r1, [r3, #0]
 8011426:	2300      	movs	r3, #0
 8011428:	6123      	str	r3, [r4, #16]
 801142a:	4615      	mov	r5, r2
 801142c:	e7ba      	b.n	80113a4 <_printf_i+0x150>
 801142e:	682b      	ldr	r3, [r5, #0]
 8011430:	1d1a      	adds	r2, r3, #4
 8011432:	602a      	str	r2, [r5, #0]
 8011434:	681d      	ldr	r5, [r3, #0]
 8011436:	6862      	ldr	r2, [r4, #4]
 8011438:	2100      	movs	r1, #0
 801143a:	4628      	mov	r0, r5
 801143c:	f7ee fed0 	bl	80001e0 <memchr>
 8011440:	b108      	cbz	r0, 8011446 <_printf_i+0x1f2>
 8011442:	1b40      	subs	r0, r0, r5
 8011444:	6060      	str	r0, [r4, #4]
 8011446:	6863      	ldr	r3, [r4, #4]
 8011448:	6123      	str	r3, [r4, #16]
 801144a:	2300      	movs	r3, #0
 801144c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011450:	e7a8      	b.n	80113a4 <_printf_i+0x150>
 8011452:	6923      	ldr	r3, [r4, #16]
 8011454:	462a      	mov	r2, r5
 8011456:	4649      	mov	r1, r9
 8011458:	4640      	mov	r0, r8
 801145a:	47d0      	blx	sl
 801145c:	3001      	adds	r0, #1
 801145e:	d0ab      	beq.n	80113b8 <_printf_i+0x164>
 8011460:	6823      	ldr	r3, [r4, #0]
 8011462:	079b      	lsls	r3, r3, #30
 8011464:	d413      	bmi.n	801148e <_printf_i+0x23a>
 8011466:	68e0      	ldr	r0, [r4, #12]
 8011468:	9b03      	ldr	r3, [sp, #12]
 801146a:	4298      	cmp	r0, r3
 801146c:	bfb8      	it	lt
 801146e:	4618      	movlt	r0, r3
 8011470:	e7a4      	b.n	80113bc <_printf_i+0x168>
 8011472:	2301      	movs	r3, #1
 8011474:	4632      	mov	r2, r6
 8011476:	4649      	mov	r1, r9
 8011478:	4640      	mov	r0, r8
 801147a:	47d0      	blx	sl
 801147c:	3001      	adds	r0, #1
 801147e:	d09b      	beq.n	80113b8 <_printf_i+0x164>
 8011480:	3501      	adds	r5, #1
 8011482:	68e3      	ldr	r3, [r4, #12]
 8011484:	9903      	ldr	r1, [sp, #12]
 8011486:	1a5b      	subs	r3, r3, r1
 8011488:	42ab      	cmp	r3, r5
 801148a:	dcf2      	bgt.n	8011472 <_printf_i+0x21e>
 801148c:	e7eb      	b.n	8011466 <_printf_i+0x212>
 801148e:	2500      	movs	r5, #0
 8011490:	f104 0619 	add.w	r6, r4, #25
 8011494:	e7f5      	b.n	8011482 <_printf_i+0x22e>
 8011496:	bf00      	nop
 8011498:	08015fe2 	.word	0x08015fe2
 801149c:	08015ff3 	.word	0x08015ff3

080114a0 <siprintf>:
 80114a0:	b40e      	push	{r1, r2, r3}
 80114a2:	b500      	push	{lr}
 80114a4:	b09c      	sub	sp, #112	; 0x70
 80114a6:	ab1d      	add	r3, sp, #116	; 0x74
 80114a8:	9002      	str	r0, [sp, #8]
 80114aa:	9006      	str	r0, [sp, #24]
 80114ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80114b0:	4809      	ldr	r0, [pc, #36]	; (80114d8 <siprintf+0x38>)
 80114b2:	9107      	str	r1, [sp, #28]
 80114b4:	9104      	str	r1, [sp, #16]
 80114b6:	4909      	ldr	r1, [pc, #36]	; (80114dc <siprintf+0x3c>)
 80114b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80114bc:	9105      	str	r1, [sp, #20]
 80114be:	6800      	ldr	r0, [r0, #0]
 80114c0:	9301      	str	r3, [sp, #4]
 80114c2:	a902      	add	r1, sp, #8
 80114c4:	f001 fb68 	bl	8012b98 <_svfiprintf_r>
 80114c8:	9b02      	ldr	r3, [sp, #8]
 80114ca:	2200      	movs	r2, #0
 80114cc:	701a      	strb	r2, [r3, #0]
 80114ce:	b01c      	add	sp, #112	; 0x70
 80114d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80114d4:	b003      	add	sp, #12
 80114d6:	4770      	bx	lr
 80114d8:	20000078 	.word	0x20000078
 80114dc:	ffff0208 	.word	0xffff0208

080114e0 <quorem>:
 80114e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114e4:	6903      	ldr	r3, [r0, #16]
 80114e6:	690c      	ldr	r4, [r1, #16]
 80114e8:	42a3      	cmp	r3, r4
 80114ea:	4607      	mov	r7, r0
 80114ec:	f2c0 8081 	blt.w	80115f2 <quorem+0x112>
 80114f0:	3c01      	subs	r4, #1
 80114f2:	f101 0814 	add.w	r8, r1, #20
 80114f6:	f100 0514 	add.w	r5, r0, #20
 80114fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80114fe:	9301      	str	r3, [sp, #4]
 8011500:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011504:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011508:	3301      	adds	r3, #1
 801150a:	429a      	cmp	r2, r3
 801150c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011510:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011514:	fbb2 f6f3 	udiv	r6, r2, r3
 8011518:	d331      	bcc.n	801157e <quorem+0x9e>
 801151a:	f04f 0e00 	mov.w	lr, #0
 801151e:	4640      	mov	r0, r8
 8011520:	46ac      	mov	ip, r5
 8011522:	46f2      	mov	sl, lr
 8011524:	f850 2b04 	ldr.w	r2, [r0], #4
 8011528:	b293      	uxth	r3, r2
 801152a:	fb06 e303 	mla	r3, r6, r3, lr
 801152e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011532:	b29b      	uxth	r3, r3
 8011534:	ebaa 0303 	sub.w	r3, sl, r3
 8011538:	f8dc a000 	ldr.w	sl, [ip]
 801153c:	0c12      	lsrs	r2, r2, #16
 801153e:	fa13 f38a 	uxtah	r3, r3, sl
 8011542:	fb06 e202 	mla	r2, r6, r2, lr
 8011546:	9300      	str	r3, [sp, #0]
 8011548:	9b00      	ldr	r3, [sp, #0]
 801154a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801154e:	b292      	uxth	r2, r2
 8011550:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011558:	f8bd 3000 	ldrh.w	r3, [sp]
 801155c:	4581      	cmp	r9, r0
 801155e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011562:	f84c 3b04 	str.w	r3, [ip], #4
 8011566:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801156a:	d2db      	bcs.n	8011524 <quorem+0x44>
 801156c:	f855 300b 	ldr.w	r3, [r5, fp]
 8011570:	b92b      	cbnz	r3, 801157e <quorem+0x9e>
 8011572:	9b01      	ldr	r3, [sp, #4]
 8011574:	3b04      	subs	r3, #4
 8011576:	429d      	cmp	r5, r3
 8011578:	461a      	mov	r2, r3
 801157a:	d32e      	bcc.n	80115da <quorem+0xfa>
 801157c:	613c      	str	r4, [r7, #16]
 801157e:	4638      	mov	r0, r7
 8011580:	f001 f8b6 	bl	80126f0 <__mcmp>
 8011584:	2800      	cmp	r0, #0
 8011586:	db24      	blt.n	80115d2 <quorem+0xf2>
 8011588:	3601      	adds	r6, #1
 801158a:	4628      	mov	r0, r5
 801158c:	f04f 0c00 	mov.w	ip, #0
 8011590:	f858 2b04 	ldr.w	r2, [r8], #4
 8011594:	f8d0 e000 	ldr.w	lr, [r0]
 8011598:	b293      	uxth	r3, r2
 801159a:	ebac 0303 	sub.w	r3, ip, r3
 801159e:	0c12      	lsrs	r2, r2, #16
 80115a0:	fa13 f38e 	uxtah	r3, r3, lr
 80115a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80115a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80115ac:	b29b      	uxth	r3, r3
 80115ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80115b2:	45c1      	cmp	r9, r8
 80115b4:	f840 3b04 	str.w	r3, [r0], #4
 80115b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80115bc:	d2e8      	bcs.n	8011590 <quorem+0xb0>
 80115be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80115c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80115c6:	b922      	cbnz	r2, 80115d2 <quorem+0xf2>
 80115c8:	3b04      	subs	r3, #4
 80115ca:	429d      	cmp	r5, r3
 80115cc:	461a      	mov	r2, r3
 80115ce:	d30a      	bcc.n	80115e6 <quorem+0x106>
 80115d0:	613c      	str	r4, [r7, #16]
 80115d2:	4630      	mov	r0, r6
 80115d4:	b003      	add	sp, #12
 80115d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115da:	6812      	ldr	r2, [r2, #0]
 80115dc:	3b04      	subs	r3, #4
 80115de:	2a00      	cmp	r2, #0
 80115e0:	d1cc      	bne.n	801157c <quorem+0x9c>
 80115e2:	3c01      	subs	r4, #1
 80115e4:	e7c7      	b.n	8011576 <quorem+0x96>
 80115e6:	6812      	ldr	r2, [r2, #0]
 80115e8:	3b04      	subs	r3, #4
 80115ea:	2a00      	cmp	r2, #0
 80115ec:	d1f0      	bne.n	80115d0 <quorem+0xf0>
 80115ee:	3c01      	subs	r4, #1
 80115f0:	e7eb      	b.n	80115ca <quorem+0xea>
 80115f2:	2000      	movs	r0, #0
 80115f4:	e7ee      	b.n	80115d4 <quorem+0xf4>
	...

080115f8 <_dtoa_r>:
 80115f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115fc:	ed2d 8b04 	vpush	{d8-d9}
 8011600:	ec57 6b10 	vmov	r6, r7, d0
 8011604:	b093      	sub	sp, #76	; 0x4c
 8011606:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011608:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801160c:	9106      	str	r1, [sp, #24]
 801160e:	ee10 aa10 	vmov	sl, s0
 8011612:	4604      	mov	r4, r0
 8011614:	9209      	str	r2, [sp, #36]	; 0x24
 8011616:	930c      	str	r3, [sp, #48]	; 0x30
 8011618:	46bb      	mov	fp, r7
 801161a:	b975      	cbnz	r5, 801163a <_dtoa_r+0x42>
 801161c:	2010      	movs	r0, #16
 801161e:	f000 fddd 	bl	80121dc <malloc>
 8011622:	4602      	mov	r2, r0
 8011624:	6260      	str	r0, [r4, #36]	; 0x24
 8011626:	b920      	cbnz	r0, 8011632 <_dtoa_r+0x3a>
 8011628:	4ba7      	ldr	r3, [pc, #668]	; (80118c8 <_dtoa_r+0x2d0>)
 801162a:	21ea      	movs	r1, #234	; 0xea
 801162c:	48a7      	ldr	r0, [pc, #668]	; (80118cc <_dtoa_r+0x2d4>)
 801162e:	f001 fbc3 	bl	8012db8 <__assert_func>
 8011632:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011636:	6005      	str	r5, [r0, #0]
 8011638:	60c5      	str	r5, [r0, #12]
 801163a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801163c:	6819      	ldr	r1, [r3, #0]
 801163e:	b151      	cbz	r1, 8011656 <_dtoa_r+0x5e>
 8011640:	685a      	ldr	r2, [r3, #4]
 8011642:	604a      	str	r2, [r1, #4]
 8011644:	2301      	movs	r3, #1
 8011646:	4093      	lsls	r3, r2
 8011648:	608b      	str	r3, [r1, #8]
 801164a:	4620      	mov	r0, r4
 801164c:	f000 fe0e 	bl	801226c <_Bfree>
 8011650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011652:	2200      	movs	r2, #0
 8011654:	601a      	str	r2, [r3, #0]
 8011656:	1e3b      	subs	r3, r7, #0
 8011658:	bfaa      	itet	ge
 801165a:	2300      	movge	r3, #0
 801165c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011660:	f8c8 3000 	strge.w	r3, [r8]
 8011664:	4b9a      	ldr	r3, [pc, #616]	; (80118d0 <_dtoa_r+0x2d8>)
 8011666:	bfbc      	itt	lt
 8011668:	2201      	movlt	r2, #1
 801166a:	f8c8 2000 	strlt.w	r2, [r8]
 801166e:	ea33 030b 	bics.w	r3, r3, fp
 8011672:	d11b      	bne.n	80116ac <_dtoa_r+0xb4>
 8011674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011676:	f242 730f 	movw	r3, #9999	; 0x270f
 801167a:	6013      	str	r3, [r2, #0]
 801167c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011680:	4333      	orrs	r3, r6
 8011682:	f000 8592 	beq.w	80121aa <_dtoa_r+0xbb2>
 8011686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011688:	b963      	cbnz	r3, 80116a4 <_dtoa_r+0xac>
 801168a:	4b92      	ldr	r3, [pc, #584]	; (80118d4 <_dtoa_r+0x2dc>)
 801168c:	e022      	b.n	80116d4 <_dtoa_r+0xdc>
 801168e:	4b92      	ldr	r3, [pc, #584]	; (80118d8 <_dtoa_r+0x2e0>)
 8011690:	9301      	str	r3, [sp, #4]
 8011692:	3308      	adds	r3, #8
 8011694:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011696:	6013      	str	r3, [r2, #0]
 8011698:	9801      	ldr	r0, [sp, #4]
 801169a:	b013      	add	sp, #76	; 0x4c
 801169c:	ecbd 8b04 	vpop	{d8-d9}
 80116a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116a4:	4b8b      	ldr	r3, [pc, #556]	; (80118d4 <_dtoa_r+0x2dc>)
 80116a6:	9301      	str	r3, [sp, #4]
 80116a8:	3303      	adds	r3, #3
 80116aa:	e7f3      	b.n	8011694 <_dtoa_r+0x9c>
 80116ac:	2200      	movs	r2, #0
 80116ae:	2300      	movs	r3, #0
 80116b0:	4650      	mov	r0, sl
 80116b2:	4659      	mov	r1, fp
 80116b4:	f7ef fa08 	bl	8000ac8 <__aeabi_dcmpeq>
 80116b8:	ec4b ab19 	vmov	d9, sl, fp
 80116bc:	4680      	mov	r8, r0
 80116be:	b158      	cbz	r0, 80116d8 <_dtoa_r+0xe0>
 80116c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80116c2:	2301      	movs	r3, #1
 80116c4:	6013      	str	r3, [r2, #0]
 80116c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	f000 856b 	beq.w	80121a4 <_dtoa_r+0xbac>
 80116ce:	4883      	ldr	r0, [pc, #524]	; (80118dc <_dtoa_r+0x2e4>)
 80116d0:	6018      	str	r0, [r3, #0]
 80116d2:	1e43      	subs	r3, r0, #1
 80116d4:	9301      	str	r3, [sp, #4]
 80116d6:	e7df      	b.n	8011698 <_dtoa_r+0xa0>
 80116d8:	ec4b ab10 	vmov	d0, sl, fp
 80116dc:	aa10      	add	r2, sp, #64	; 0x40
 80116de:	a911      	add	r1, sp, #68	; 0x44
 80116e0:	4620      	mov	r0, r4
 80116e2:	f001 f8ab 	bl	801283c <__d2b>
 80116e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80116ea:	ee08 0a10 	vmov	s16, r0
 80116ee:	2d00      	cmp	r5, #0
 80116f0:	f000 8084 	beq.w	80117fc <_dtoa_r+0x204>
 80116f4:	ee19 3a90 	vmov	r3, s19
 80116f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80116fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011700:	4656      	mov	r6, sl
 8011702:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011706:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801170a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801170e:	4b74      	ldr	r3, [pc, #464]	; (80118e0 <_dtoa_r+0x2e8>)
 8011710:	2200      	movs	r2, #0
 8011712:	4630      	mov	r0, r6
 8011714:	4639      	mov	r1, r7
 8011716:	f7ee fdb7 	bl	8000288 <__aeabi_dsub>
 801171a:	a365      	add	r3, pc, #404	; (adr r3, 80118b0 <_dtoa_r+0x2b8>)
 801171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011720:	f7ee ff6a 	bl	80005f8 <__aeabi_dmul>
 8011724:	a364      	add	r3, pc, #400	; (adr r3, 80118b8 <_dtoa_r+0x2c0>)
 8011726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172a:	f7ee fdaf 	bl	800028c <__adddf3>
 801172e:	4606      	mov	r6, r0
 8011730:	4628      	mov	r0, r5
 8011732:	460f      	mov	r7, r1
 8011734:	f7ee fef6 	bl	8000524 <__aeabi_i2d>
 8011738:	a361      	add	r3, pc, #388	; (adr r3, 80118c0 <_dtoa_r+0x2c8>)
 801173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173e:	f7ee ff5b 	bl	80005f8 <__aeabi_dmul>
 8011742:	4602      	mov	r2, r0
 8011744:	460b      	mov	r3, r1
 8011746:	4630      	mov	r0, r6
 8011748:	4639      	mov	r1, r7
 801174a:	f7ee fd9f 	bl	800028c <__adddf3>
 801174e:	4606      	mov	r6, r0
 8011750:	460f      	mov	r7, r1
 8011752:	f7ef fa01 	bl	8000b58 <__aeabi_d2iz>
 8011756:	2200      	movs	r2, #0
 8011758:	9000      	str	r0, [sp, #0]
 801175a:	2300      	movs	r3, #0
 801175c:	4630      	mov	r0, r6
 801175e:	4639      	mov	r1, r7
 8011760:	f7ef f9bc 	bl	8000adc <__aeabi_dcmplt>
 8011764:	b150      	cbz	r0, 801177c <_dtoa_r+0x184>
 8011766:	9800      	ldr	r0, [sp, #0]
 8011768:	f7ee fedc 	bl	8000524 <__aeabi_i2d>
 801176c:	4632      	mov	r2, r6
 801176e:	463b      	mov	r3, r7
 8011770:	f7ef f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8011774:	b910      	cbnz	r0, 801177c <_dtoa_r+0x184>
 8011776:	9b00      	ldr	r3, [sp, #0]
 8011778:	3b01      	subs	r3, #1
 801177a:	9300      	str	r3, [sp, #0]
 801177c:	9b00      	ldr	r3, [sp, #0]
 801177e:	2b16      	cmp	r3, #22
 8011780:	d85a      	bhi.n	8011838 <_dtoa_r+0x240>
 8011782:	9a00      	ldr	r2, [sp, #0]
 8011784:	4b57      	ldr	r3, [pc, #348]	; (80118e4 <_dtoa_r+0x2ec>)
 8011786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178e:	ec51 0b19 	vmov	r0, r1, d9
 8011792:	f7ef f9a3 	bl	8000adc <__aeabi_dcmplt>
 8011796:	2800      	cmp	r0, #0
 8011798:	d050      	beq.n	801183c <_dtoa_r+0x244>
 801179a:	9b00      	ldr	r3, [sp, #0]
 801179c:	3b01      	subs	r3, #1
 801179e:	9300      	str	r3, [sp, #0]
 80117a0:	2300      	movs	r3, #0
 80117a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80117a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80117a6:	1b5d      	subs	r5, r3, r5
 80117a8:	1e6b      	subs	r3, r5, #1
 80117aa:	9305      	str	r3, [sp, #20]
 80117ac:	bf45      	ittet	mi
 80117ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80117b2:	9304      	strmi	r3, [sp, #16]
 80117b4:	2300      	movpl	r3, #0
 80117b6:	2300      	movmi	r3, #0
 80117b8:	bf4c      	ite	mi
 80117ba:	9305      	strmi	r3, [sp, #20]
 80117bc:	9304      	strpl	r3, [sp, #16]
 80117be:	9b00      	ldr	r3, [sp, #0]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	db3d      	blt.n	8011840 <_dtoa_r+0x248>
 80117c4:	9b05      	ldr	r3, [sp, #20]
 80117c6:	9a00      	ldr	r2, [sp, #0]
 80117c8:	920a      	str	r2, [sp, #40]	; 0x28
 80117ca:	4413      	add	r3, r2
 80117cc:	9305      	str	r3, [sp, #20]
 80117ce:	2300      	movs	r3, #0
 80117d0:	9307      	str	r3, [sp, #28]
 80117d2:	9b06      	ldr	r3, [sp, #24]
 80117d4:	2b09      	cmp	r3, #9
 80117d6:	f200 8089 	bhi.w	80118ec <_dtoa_r+0x2f4>
 80117da:	2b05      	cmp	r3, #5
 80117dc:	bfc4      	itt	gt
 80117de:	3b04      	subgt	r3, #4
 80117e0:	9306      	strgt	r3, [sp, #24]
 80117e2:	9b06      	ldr	r3, [sp, #24]
 80117e4:	f1a3 0302 	sub.w	r3, r3, #2
 80117e8:	bfcc      	ite	gt
 80117ea:	2500      	movgt	r5, #0
 80117ec:	2501      	movle	r5, #1
 80117ee:	2b03      	cmp	r3, #3
 80117f0:	f200 8087 	bhi.w	8011902 <_dtoa_r+0x30a>
 80117f4:	e8df f003 	tbb	[pc, r3]
 80117f8:	59383a2d 	.word	0x59383a2d
 80117fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011800:	441d      	add	r5, r3
 8011802:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011806:	2b20      	cmp	r3, #32
 8011808:	bfc1      	itttt	gt
 801180a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801180e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011812:	fa0b f303 	lslgt.w	r3, fp, r3
 8011816:	fa26 f000 	lsrgt.w	r0, r6, r0
 801181a:	bfda      	itte	le
 801181c:	f1c3 0320 	rsble	r3, r3, #32
 8011820:	fa06 f003 	lslle.w	r0, r6, r3
 8011824:	4318      	orrgt	r0, r3
 8011826:	f7ee fe6d 	bl	8000504 <__aeabi_ui2d>
 801182a:	2301      	movs	r3, #1
 801182c:	4606      	mov	r6, r0
 801182e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011832:	3d01      	subs	r5, #1
 8011834:	930e      	str	r3, [sp, #56]	; 0x38
 8011836:	e76a      	b.n	801170e <_dtoa_r+0x116>
 8011838:	2301      	movs	r3, #1
 801183a:	e7b2      	b.n	80117a2 <_dtoa_r+0x1aa>
 801183c:	900b      	str	r0, [sp, #44]	; 0x2c
 801183e:	e7b1      	b.n	80117a4 <_dtoa_r+0x1ac>
 8011840:	9b04      	ldr	r3, [sp, #16]
 8011842:	9a00      	ldr	r2, [sp, #0]
 8011844:	1a9b      	subs	r3, r3, r2
 8011846:	9304      	str	r3, [sp, #16]
 8011848:	4253      	negs	r3, r2
 801184a:	9307      	str	r3, [sp, #28]
 801184c:	2300      	movs	r3, #0
 801184e:	930a      	str	r3, [sp, #40]	; 0x28
 8011850:	e7bf      	b.n	80117d2 <_dtoa_r+0x1da>
 8011852:	2300      	movs	r3, #0
 8011854:	9308      	str	r3, [sp, #32]
 8011856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011858:	2b00      	cmp	r3, #0
 801185a:	dc55      	bgt.n	8011908 <_dtoa_r+0x310>
 801185c:	2301      	movs	r3, #1
 801185e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011862:	461a      	mov	r2, r3
 8011864:	9209      	str	r2, [sp, #36]	; 0x24
 8011866:	e00c      	b.n	8011882 <_dtoa_r+0x28a>
 8011868:	2301      	movs	r3, #1
 801186a:	e7f3      	b.n	8011854 <_dtoa_r+0x25c>
 801186c:	2300      	movs	r3, #0
 801186e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011870:	9308      	str	r3, [sp, #32]
 8011872:	9b00      	ldr	r3, [sp, #0]
 8011874:	4413      	add	r3, r2
 8011876:	9302      	str	r3, [sp, #8]
 8011878:	3301      	adds	r3, #1
 801187a:	2b01      	cmp	r3, #1
 801187c:	9303      	str	r3, [sp, #12]
 801187e:	bfb8      	it	lt
 8011880:	2301      	movlt	r3, #1
 8011882:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011884:	2200      	movs	r2, #0
 8011886:	6042      	str	r2, [r0, #4]
 8011888:	2204      	movs	r2, #4
 801188a:	f102 0614 	add.w	r6, r2, #20
 801188e:	429e      	cmp	r6, r3
 8011890:	6841      	ldr	r1, [r0, #4]
 8011892:	d93d      	bls.n	8011910 <_dtoa_r+0x318>
 8011894:	4620      	mov	r0, r4
 8011896:	f000 fca9 	bl	80121ec <_Balloc>
 801189a:	9001      	str	r0, [sp, #4]
 801189c:	2800      	cmp	r0, #0
 801189e:	d13b      	bne.n	8011918 <_dtoa_r+0x320>
 80118a0:	4b11      	ldr	r3, [pc, #68]	; (80118e8 <_dtoa_r+0x2f0>)
 80118a2:	4602      	mov	r2, r0
 80118a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80118a8:	e6c0      	b.n	801162c <_dtoa_r+0x34>
 80118aa:	2301      	movs	r3, #1
 80118ac:	e7df      	b.n	801186e <_dtoa_r+0x276>
 80118ae:	bf00      	nop
 80118b0:	636f4361 	.word	0x636f4361
 80118b4:	3fd287a7 	.word	0x3fd287a7
 80118b8:	8b60c8b3 	.word	0x8b60c8b3
 80118bc:	3fc68a28 	.word	0x3fc68a28
 80118c0:	509f79fb 	.word	0x509f79fb
 80118c4:	3fd34413 	.word	0x3fd34413
 80118c8:	08016011 	.word	0x08016011
 80118cc:	08016028 	.word	0x08016028
 80118d0:	7ff00000 	.word	0x7ff00000
 80118d4:	0801600d 	.word	0x0801600d
 80118d8:	08016004 	.word	0x08016004
 80118dc:	08015fe1 	.word	0x08015fe1
 80118e0:	3ff80000 	.word	0x3ff80000
 80118e4:	08016118 	.word	0x08016118
 80118e8:	08016083 	.word	0x08016083
 80118ec:	2501      	movs	r5, #1
 80118ee:	2300      	movs	r3, #0
 80118f0:	9306      	str	r3, [sp, #24]
 80118f2:	9508      	str	r5, [sp, #32]
 80118f4:	f04f 33ff 	mov.w	r3, #4294967295
 80118f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80118fc:	2200      	movs	r2, #0
 80118fe:	2312      	movs	r3, #18
 8011900:	e7b0      	b.n	8011864 <_dtoa_r+0x26c>
 8011902:	2301      	movs	r3, #1
 8011904:	9308      	str	r3, [sp, #32]
 8011906:	e7f5      	b.n	80118f4 <_dtoa_r+0x2fc>
 8011908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801190a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801190e:	e7b8      	b.n	8011882 <_dtoa_r+0x28a>
 8011910:	3101      	adds	r1, #1
 8011912:	6041      	str	r1, [r0, #4]
 8011914:	0052      	lsls	r2, r2, #1
 8011916:	e7b8      	b.n	801188a <_dtoa_r+0x292>
 8011918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801191a:	9a01      	ldr	r2, [sp, #4]
 801191c:	601a      	str	r2, [r3, #0]
 801191e:	9b03      	ldr	r3, [sp, #12]
 8011920:	2b0e      	cmp	r3, #14
 8011922:	f200 809d 	bhi.w	8011a60 <_dtoa_r+0x468>
 8011926:	2d00      	cmp	r5, #0
 8011928:	f000 809a 	beq.w	8011a60 <_dtoa_r+0x468>
 801192c:	9b00      	ldr	r3, [sp, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	dd32      	ble.n	8011998 <_dtoa_r+0x3a0>
 8011932:	4ab7      	ldr	r2, [pc, #732]	; (8011c10 <_dtoa_r+0x618>)
 8011934:	f003 030f 	and.w	r3, r3, #15
 8011938:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801193c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011940:	9b00      	ldr	r3, [sp, #0]
 8011942:	05d8      	lsls	r0, r3, #23
 8011944:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011948:	d516      	bpl.n	8011978 <_dtoa_r+0x380>
 801194a:	4bb2      	ldr	r3, [pc, #712]	; (8011c14 <_dtoa_r+0x61c>)
 801194c:	ec51 0b19 	vmov	r0, r1, d9
 8011950:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011954:	f7ee ff7a 	bl	800084c <__aeabi_ddiv>
 8011958:	f007 070f 	and.w	r7, r7, #15
 801195c:	4682      	mov	sl, r0
 801195e:	468b      	mov	fp, r1
 8011960:	2503      	movs	r5, #3
 8011962:	4eac      	ldr	r6, [pc, #688]	; (8011c14 <_dtoa_r+0x61c>)
 8011964:	b957      	cbnz	r7, 801197c <_dtoa_r+0x384>
 8011966:	4642      	mov	r2, r8
 8011968:	464b      	mov	r3, r9
 801196a:	4650      	mov	r0, sl
 801196c:	4659      	mov	r1, fp
 801196e:	f7ee ff6d 	bl	800084c <__aeabi_ddiv>
 8011972:	4682      	mov	sl, r0
 8011974:	468b      	mov	fp, r1
 8011976:	e028      	b.n	80119ca <_dtoa_r+0x3d2>
 8011978:	2502      	movs	r5, #2
 801197a:	e7f2      	b.n	8011962 <_dtoa_r+0x36a>
 801197c:	07f9      	lsls	r1, r7, #31
 801197e:	d508      	bpl.n	8011992 <_dtoa_r+0x39a>
 8011980:	4640      	mov	r0, r8
 8011982:	4649      	mov	r1, r9
 8011984:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011988:	f7ee fe36 	bl	80005f8 <__aeabi_dmul>
 801198c:	3501      	adds	r5, #1
 801198e:	4680      	mov	r8, r0
 8011990:	4689      	mov	r9, r1
 8011992:	107f      	asrs	r7, r7, #1
 8011994:	3608      	adds	r6, #8
 8011996:	e7e5      	b.n	8011964 <_dtoa_r+0x36c>
 8011998:	f000 809b 	beq.w	8011ad2 <_dtoa_r+0x4da>
 801199c:	9b00      	ldr	r3, [sp, #0]
 801199e:	4f9d      	ldr	r7, [pc, #628]	; (8011c14 <_dtoa_r+0x61c>)
 80119a0:	425e      	negs	r6, r3
 80119a2:	4b9b      	ldr	r3, [pc, #620]	; (8011c10 <_dtoa_r+0x618>)
 80119a4:	f006 020f 	and.w	r2, r6, #15
 80119a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80119ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b0:	ec51 0b19 	vmov	r0, r1, d9
 80119b4:	f7ee fe20 	bl	80005f8 <__aeabi_dmul>
 80119b8:	1136      	asrs	r6, r6, #4
 80119ba:	4682      	mov	sl, r0
 80119bc:	468b      	mov	fp, r1
 80119be:	2300      	movs	r3, #0
 80119c0:	2502      	movs	r5, #2
 80119c2:	2e00      	cmp	r6, #0
 80119c4:	d17a      	bne.n	8011abc <_dtoa_r+0x4c4>
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d1d3      	bne.n	8011972 <_dtoa_r+0x37a>
 80119ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	f000 8082 	beq.w	8011ad6 <_dtoa_r+0x4de>
 80119d2:	4b91      	ldr	r3, [pc, #580]	; (8011c18 <_dtoa_r+0x620>)
 80119d4:	2200      	movs	r2, #0
 80119d6:	4650      	mov	r0, sl
 80119d8:	4659      	mov	r1, fp
 80119da:	f7ef f87f 	bl	8000adc <__aeabi_dcmplt>
 80119de:	2800      	cmp	r0, #0
 80119e0:	d079      	beq.n	8011ad6 <_dtoa_r+0x4de>
 80119e2:	9b03      	ldr	r3, [sp, #12]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d076      	beq.n	8011ad6 <_dtoa_r+0x4de>
 80119e8:	9b02      	ldr	r3, [sp, #8]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	dd36      	ble.n	8011a5c <_dtoa_r+0x464>
 80119ee:	9b00      	ldr	r3, [sp, #0]
 80119f0:	4650      	mov	r0, sl
 80119f2:	4659      	mov	r1, fp
 80119f4:	1e5f      	subs	r7, r3, #1
 80119f6:	2200      	movs	r2, #0
 80119f8:	4b88      	ldr	r3, [pc, #544]	; (8011c1c <_dtoa_r+0x624>)
 80119fa:	f7ee fdfd 	bl	80005f8 <__aeabi_dmul>
 80119fe:	9e02      	ldr	r6, [sp, #8]
 8011a00:	4682      	mov	sl, r0
 8011a02:	468b      	mov	fp, r1
 8011a04:	3501      	adds	r5, #1
 8011a06:	4628      	mov	r0, r5
 8011a08:	f7ee fd8c 	bl	8000524 <__aeabi_i2d>
 8011a0c:	4652      	mov	r2, sl
 8011a0e:	465b      	mov	r3, fp
 8011a10:	f7ee fdf2 	bl	80005f8 <__aeabi_dmul>
 8011a14:	4b82      	ldr	r3, [pc, #520]	; (8011c20 <_dtoa_r+0x628>)
 8011a16:	2200      	movs	r2, #0
 8011a18:	f7ee fc38 	bl	800028c <__adddf3>
 8011a1c:	46d0      	mov	r8, sl
 8011a1e:	46d9      	mov	r9, fp
 8011a20:	4682      	mov	sl, r0
 8011a22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011a26:	2e00      	cmp	r6, #0
 8011a28:	d158      	bne.n	8011adc <_dtoa_r+0x4e4>
 8011a2a:	4b7e      	ldr	r3, [pc, #504]	; (8011c24 <_dtoa_r+0x62c>)
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	4640      	mov	r0, r8
 8011a30:	4649      	mov	r1, r9
 8011a32:	f7ee fc29 	bl	8000288 <__aeabi_dsub>
 8011a36:	4652      	mov	r2, sl
 8011a38:	465b      	mov	r3, fp
 8011a3a:	4680      	mov	r8, r0
 8011a3c:	4689      	mov	r9, r1
 8011a3e:	f7ef f86b 	bl	8000b18 <__aeabi_dcmpgt>
 8011a42:	2800      	cmp	r0, #0
 8011a44:	f040 8295 	bne.w	8011f72 <_dtoa_r+0x97a>
 8011a48:	4652      	mov	r2, sl
 8011a4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011a4e:	4640      	mov	r0, r8
 8011a50:	4649      	mov	r1, r9
 8011a52:	f7ef f843 	bl	8000adc <__aeabi_dcmplt>
 8011a56:	2800      	cmp	r0, #0
 8011a58:	f040 8289 	bne.w	8011f6e <_dtoa_r+0x976>
 8011a5c:	ec5b ab19 	vmov	sl, fp, d9
 8011a60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	f2c0 8148 	blt.w	8011cf8 <_dtoa_r+0x700>
 8011a68:	9a00      	ldr	r2, [sp, #0]
 8011a6a:	2a0e      	cmp	r2, #14
 8011a6c:	f300 8144 	bgt.w	8011cf8 <_dtoa_r+0x700>
 8011a70:	4b67      	ldr	r3, [pc, #412]	; (8011c10 <_dtoa_r+0x618>)
 8011a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	f280 80d5 	bge.w	8011c2c <_dtoa_r+0x634>
 8011a82:	9b03      	ldr	r3, [sp, #12]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	f300 80d1 	bgt.w	8011c2c <_dtoa_r+0x634>
 8011a8a:	f040 826f 	bne.w	8011f6c <_dtoa_r+0x974>
 8011a8e:	4b65      	ldr	r3, [pc, #404]	; (8011c24 <_dtoa_r+0x62c>)
 8011a90:	2200      	movs	r2, #0
 8011a92:	4640      	mov	r0, r8
 8011a94:	4649      	mov	r1, r9
 8011a96:	f7ee fdaf 	bl	80005f8 <__aeabi_dmul>
 8011a9a:	4652      	mov	r2, sl
 8011a9c:	465b      	mov	r3, fp
 8011a9e:	f7ef f831 	bl	8000b04 <__aeabi_dcmpge>
 8011aa2:	9e03      	ldr	r6, [sp, #12]
 8011aa4:	4637      	mov	r7, r6
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	f040 8245 	bne.w	8011f36 <_dtoa_r+0x93e>
 8011aac:	9d01      	ldr	r5, [sp, #4]
 8011aae:	2331      	movs	r3, #49	; 0x31
 8011ab0:	f805 3b01 	strb.w	r3, [r5], #1
 8011ab4:	9b00      	ldr	r3, [sp, #0]
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	9300      	str	r3, [sp, #0]
 8011aba:	e240      	b.n	8011f3e <_dtoa_r+0x946>
 8011abc:	07f2      	lsls	r2, r6, #31
 8011abe:	d505      	bpl.n	8011acc <_dtoa_r+0x4d4>
 8011ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ac4:	f7ee fd98 	bl	80005f8 <__aeabi_dmul>
 8011ac8:	3501      	adds	r5, #1
 8011aca:	2301      	movs	r3, #1
 8011acc:	1076      	asrs	r6, r6, #1
 8011ace:	3708      	adds	r7, #8
 8011ad0:	e777      	b.n	80119c2 <_dtoa_r+0x3ca>
 8011ad2:	2502      	movs	r5, #2
 8011ad4:	e779      	b.n	80119ca <_dtoa_r+0x3d2>
 8011ad6:	9f00      	ldr	r7, [sp, #0]
 8011ad8:	9e03      	ldr	r6, [sp, #12]
 8011ada:	e794      	b.n	8011a06 <_dtoa_r+0x40e>
 8011adc:	9901      	ldr	r1, [sp, #4]
 8011ade:	4b4c      	ldr	r3, [pc, #304]	; (8011c10 <_dtoa_r+0x618>)
 8011ae0:	4431      	add	r1, r6
 8011ae2:	910d      	str	r1, [sp, #52]	; 0x34
 8011ae4:	9908      	ldr	r1, [sp, #32]
 8011ae6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011aea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011aee:	2900      	cmp	r1, #0
 8011af0:	d043      	beq.n	8011b7a <_dtoa_r+0x582>
 8011af2:	494d      	ldr	r1, [pc, #308]	; (8011c28 <_dtoa_r+0x630>)
 8011af4:	2000      	movs	r0, #0
 8011af6:	f7ee fea9 	bl	800084c <__aeabi_ddiv>
 8011afa:	4652      	mov	r2, sl
 8011afc:	465b      	mov	r3, fp
 8011afe:	f7ee fbc3 	bl	8000288 <__aeabi_dsub>
 8011b02:	9d01      	ldr	r5, [sp, #4]
 8011b04:	4682      	mov	sl, r0
 8011b06:	468b      	mov	fp, r1
 8011b08:	4649      	mov	r1, r9
 8011b0a:	4640      	mov	r0, r8
 8011b0c:	f7ef f824 	bl	8000b58 <__aeabi_d2iz>
 8011b10:	4606      	mov	r6, r0
 8011b12:	f7ee fd07 	bl	8000524 <__aeabi_i2d>
 8011b16:	4602      	mov	r2, r0
 8011b18:	460b      	mov	r3, r1
 8011b1a:	4640      	mov	r0, r8
 8011b1c:	4649      	mov	r1, r9
 8011b1e:	f7ee fbb3 	bl	8000288 <__aeabi_dsub>
 8011b22:	3630      	adds	r6, #48	; 0x30
 8011b24:	f805 6b01 	strb.w	r6, [r5], #1
 8011b28:	4652      	mov	r2, sl
 8011b2a:	465b      	mov	r3, fp
 8011b2c:	4680      	mov	r8, r0
 8011b2e:	4689      	mov	r9, r1
 8011b30:	f7ee ffd4 	bl	8000adc <__aeabi_dcmplt>
 8011b34:	2800      	cmp	r0, #0
 8011b36:	d163      	bne.n	8011c00 <_dtoa_r+0x608>
 8011b38:	4642      	mov	r2, r8
 8011b3a:	464b      	mov	r3, r9
 8011b3c:	4936      	ldr	r1, [pc, #216]	; (8011c18 <_dtoa_r+0x620>)
 8011b3e:	2000      	movs	r0, #0
 8011b40:	f7ee fba2 	bl	8000288 <__aeabi_dsub>
 8011b44:	4652      	mov	r2, sl
 8011b46:	465b      	mov	r3, fp
 8011b48:	f7ee ffc8 	bl	8000adc <__aeabi_dcmplt>
 8011b4c:	2800      	cmp	r0, #0
 8011b4e:	f040 80b5 	bne.w	8011cbc <_dtoa_r+0x6c4>
 8011b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b54:	429d      	cmp	r5, r3
 8011b56:	d081      	beq.n	8011a5c <_dtoa_r+0x464>
 8011b58:	4b30      	ldr	r3, [pc, #192]	; (8011c1c <_dtoa_r+0x624>)
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	4650      	mov	r0, sl
 8011b5e:	4659      	mov	r1, fp
 8011b60:	f7ee fd4a 	bl	80005f8 <__aeabi_dmul>
 8011b64:	4b2d      	ldr	r3, [pc, #180]	; (8011c1c <_dtoa_r+0x624>)
 8011b66:	4682      	mov	sl, r0
 8011b68:	468b      	mov	fp, r1
 8011b6a:	4640      	mov	r0, r8
 8011b6c:	4649      	mov	r1, r9
 8011b6e:	2200      	movs	r2, #0
 8011b70:	f7ee fd42 	bl	80005f8 <__aeabi_dmul>
 8011b74:	4680      	mov	r8, r0
 8011b76:	4689      	mov	r9, r1
 8011b78:	e7c6      	b.n	8011b08 <_dtoa_r+0x510>
 8011b7a:	4650      	mov	r0, sl
 8011b7c:	4659      	mov	r1, fp
 8011b7e:	f7ee fd3b 	bl	80005f8 <__aeabi_dmul>
 8011b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b84:	9d01      	ldr	r5, [sp, #4]
 8011b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b88:	4682      	mov	sl, r0
 8011b8a:	468b      	mov	fp, r1
 8011b8c:	4649      	mov	r1, r9
 8011b8e:	4640      	mov	r0, r8
 8011b90:	f7ee ffe2 	bl	8000b58 <__aeabi_d2iz>
 8011b94:	4606      	mov	r6, r0
 8011b96:	f7ee fcc5 	bl	8000524 <__aeabi_i2d>
 8011b9a:	3630      	adds	r6, #48	; 0x30
 8011b9c:	4602      	mov	r2, r0
 8011b9e:	460b      	mov	r3, r1
 8011ba0:	4640      	mov	r0, r8
 8011ba2:	4649      	mov	r1, r9
 8011ba4:	f7ee fb70 	bl	8000288 <__aeabi_dsub>
 8011ba8:	f805 6b01 	strb.w	r6, [r5], #1
 8011bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bae:	429d      	cmp	r5, r3
 8011bb0:	4680      	mov	r8, r0
 8011bb2:	4689      	mov	r9, r1
 8011bb4:	f04f 0200 	mov.w	r2, #0
 8011bb8:	d124      	bne.n	8011c04 <_dtoa_r+0x60c>
 8011bba:	4b1b      	ldr	r3, [pc, #108]	; (8011c28 <_dtoa_r+0x630>)
 8011bbc:	4650      	mov	r0, sl
 8011bbe:	4659      	mov	r1, fp
 8011bc0:	f7ee fb64 	bl	800028c <__adddf3>
 8011bc4:	4602      	mov	r2, r0
 8011bc6:	460b      	mov	r3, r1
 8011bc8:	4640      	mov	r0, r8
 8011bca:	4649      	mov	r1, r9
 8011bcc:	f7ee ffa4 	bl	8000b18 <__aeabi_dcmpgt>
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	d173      	bne.n	8011cbc <_dtoa_r+0x6c4>
 8011bd4:	4652      	mov	r2, sl
 8011bd6:	465b      	mov	r3, fp
 8011bd8:	4913      	ldr	r1, [pc, #76]	; (8011c28 <_dtoa_r+0x630>)
 8011bda:	2000      	movs	r0, #0
 8011bdc:	f7ee fb54 	bl	8000288 <__aeabi_dsub>
 8011be0:	4602      	mov	r2, r0
 8011be2:	460b      	mov	r3, r1
 8011be4:	4640      	mov	r0, r8
 8011be6:	4649      	mov	r1, r9
 8011be8:	f7ee ff78 	bl	8000adc <__aeabi_dcmplt>
 8011bec:	2800      	cmp	r0, #0
 8011bee:	f43f af35 	beq.w	8011a5c <_dtoa_r+0x464>
 8011bf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011bf4:	1e6b      	subs	r3, r5, #1
 8011bf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8011bf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011bfc:	2b30      	cmp	r3, #48	; 0x30
 8011bfe:	d0f8      	beq.n	8011bf2 <_dtoa_r+0x5fa>
 8011c00:	9700      	str	r7, [sp, #0]
 8011c02:	e049      	b.n	8011c98 <_dtoa_r+0x6a0>
 8011c04:	4b05      	ldr	r3, [pc, #20]	; (8011c1c <_dtoa_r+0x624>)
 8011c06:	f7ee fcf7 	bl	80005f8 <__aeabi_dmul>
 8011c0a:	4680      	mov	r8, r0
 8011c0c:	4689      	mov	r9, r1
 8011c0e:	e7bd      	b.n	8011b8c <_dtoa_r+0x594>
 8011c10:	08016118 	.word	0x08016118
 8011c14:	080160f0 	.word	0x080160f0
 8011c18:	3ff00000 	.word	0x3ff00000
 8011c1c:	40240000 	.word	0x40240000
 8011c20:	401c0000 	.word	0x401c0000
 8011c24:	40140000 	.word	0x40140000
 8011c28:	3fe00000 	.word	0x3fe00000
 8011c2c:	9d01      	ldr	r5, [sp, #4]
 8011c2e:	4656      	mov	r6, sl
 8011c30:	465f      	mov	r7, fp
 8011c32:	4642      	mov	r2, r8
 8011c34:	464b      	mov	r3, r9
 8011c36:	4630      	mov	r0, r6
 8011c38:	4639      	mov	r1, r7
 8011c3a:	f7ee fe07 	bl	800084c <__aeabi_ddiv>
 8011c3e:	f7ee ff8b 	bl	8000b58 <__aeabi_d2iz>
 8011c42:	4682      	mov	sl, r0
 8011c44:	f7ee fc6e 	bl	8000524 <__aeabi_i2d>
 8011c48:	4642      	mov	r2, r8
 8011c4a:	464b      	mov	r3, r9
 8011c4c:	f7ee fcd4 	bl	80005f8 <__aeabi_dmul>
 8011c50:	4602      	mov	r2, r0
 8011c52:	460b      	mov	r3, r1
 8011c54:	4630      	mov	r0, r6
 8011c56:	4639      	mov	r1, r7
 8011c58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011c5c:	f7ee fb14 	bl	8000288 <__aeabi_dsub>
 8011c60:	f805 6b01 	strb.w	r6, [r5], #1
 8011c64:	9e01      	ldr	r6, [sp, #4]
 8011c66:	9f03      	ldr	r7, [sp, #12]
 8011c68:	1bae      	subs	r6, r5, r6
 8011c6a:	42b7      	cmp	r7, r6
 8011c6c:	4602      	mov	r2, r0
 8011c6e:	460b      	mov	r3, r1
 8011c70:	d135      	bne.n	8011cde <_dtoa_r+0x6e6>
 8011c72:	f7ee fb0b 	bl	800028c <__adddf3>
 8011c76:	4642      	mov	r2, r8
 8011c78:	464b      	mov	r3, r9
 8011c7a:	4606      	mov	r6, r0
 8011c7c:	460f      	mov	r7, r1
 8011c7e:	f7ee ff4b 	bl	8000b18 <__aeabi_dcmpgt>
 8011c82:	b9d0      	cbnz	r0, 8011cba <_dtoa_r+0x6c2>
 8011c84:	4642      	mov	r2, r8
 8011c86:	464b      	mov	r3, r9
 8011c88:	4630      	mov	r0, r6
 8011c8a:	4639      	mov	r1, r7
 8011c8c:	f7ee ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c90:	b110      	cbz	r0, 8011c98 <_dtoa_r+0x6a0>
 8011c92:	f01a 0f01 	tst.w	sl, #1
 8011c96:	d110      	bne.n	8011cba <_dtoa_r+0x6c2>
 8011c98:	4620      	mov	r0, r4
 8011c9a:	ee18 1a10 	vmov	r1, s16
 8011c9e:	f000 fae5 	bl	801226c <_Bfree>
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	9800      	ldr	r0, [sp, #0]
 8011ca6:	702b      	strb	r3, [r5, #0]
 8011ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011caa:	3001      	adds	r0, #1
 8011cac:	6018      	str	r0, [r3, #0]
 8011cae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	f43f acf1 	beq.w	8011698 <_dtoa_r+0xa0>
 8011cb6:	601d      	str	r5, [r3, #0]
 8011cb8:	e4ee      	b.n	8011698 <_dtoa_r+0xa0>
 8011cba:	9f00      	ldr	r7, [sp, #0]
 8011cbc:	462b      	mov	r3, r5
 8011cbe:	461d      	mov	r5, r3
 8011cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011cc4:	2a39      	cmp	r2, #57	; 0x39
 8011cc6:	d106      	bne.n	8011cd6 <_dtoa_r+0x6de>
 8011cc8:	9a01      	ldr	r2, [sp, #4]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d1f7      	bne.n	8011cbe <_dtoa_r+0x6c6>
 8011cce:	9901      	ldr	r1, [sp, #4]
 8011cd0:	2230      	movs	r2, #48	; 0x30
 8011cd2:	3701      	adds	r7, #1
 8011cd4:	700a      	strb	r2, [r1, #0]
 8011cd6:	781a      	ldrb	r2, [r3, #0]
 8011cd8:	3201      	adds	r2, #1
 8011cda:	701a      	strb	r2, [r3, #0]
 8011cdc:	e790      	b.n	8011c00 <_dtoa_r+0x608>
 8011cde:	4ba6      	ldr	r3, [pc, #664]	; (8011f78 <_dtoa_r+0x980>)
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	f7ee fc89 	bl	80005f8 <__aeabi_dmul>
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	2300      	movs	r3, #0
 8011cea:	4606      	mov	r6, r0
 8011cec:	460f      	mov	r7, r1
 8011cee:	f7ee feeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8011cf2:	2800      	cmp	r0, #0
 8011cf4:	d09d      	beq.n	8011c32 <_dtoa_r+0x63a>
 8011cf6:	e7cf      	b.n	8011c98 <_dtoa_r+0x6a0>
 8011cf8:	9a08      	ldr	r2, [sp, #32]
 8011cfa:	2a00      	cmp	r2, #0
 8011cfc:	f000 80d7 	beq.w	8011eae <_dtoa_r+0x8b6>
 8011d00:	9a06      	ldr	r2, [sp, #24]
 8011d02:	2a01      	cmp	r2, #1
 8011d04:	f300 80ba 	bgt.w	8011e7c <_dtoa_r+0x884>
 8011d08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011d0a:	2a00      	cmp	r2, #0
 8011d0c:	f000 80b2 	beq.w	8011e74 <_dtoa_r+0x87c>
 8011d10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011d14:	9e07      	ldr	r6, [sp, #28]
 8011d16:	9d04      	ldr	r5, [sp, #16]
 8011d18:	9a04      	ldr	r2, [sp, #16]
 8011d1a:	441a      	add	r2, r3
 8011d1c:	9204      	str	r2, [sp, #16]
 8011d1e:	9a05      	ldr	r2, [sp, #20]
 8011d20:	2101      	movs	r1, #1
 8011d22:	441a      	add	r2, r3
 8011d24:	4620      	mov	r0, r4
 8011d26:	9205      	str	r2, [sp, #20]
 8011d28:	f000 fb58 	bl	80123dc <__i2b>
 8011d2c:	4607      	mov	r7, r0
 8011d2e:	2d00      	cmp	r5, #0
 8011d30:	dd0c      	ble.n	8011d4c <_dtoa_r+0x754>
 8011d32:	9b05      	ldr	r3, [sp, #20]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	dd09      	ble.n	8011d4c <_dtoa_r+0x754>
 8011d38:	42ab      	cmp	r3, r5
 8011d3a:	9a04      	ldr	r2, [sp, #16]
 8011d3c:	bfa8      	it	ge
 8011d3e:	462b      	movge	r3, r5
 8011d40:	1ad2      	subs	r2, r2, r3
 8011d42:	9204      	str	r2, [sp, #16]
 8011d44:	9a05      	ldr	r2, [sp, #20]
 8011d46:	1aed      	subs	r5, r5, r3
 8011d48:	1ad3      	subs	r3, r2, r3
 8011d4a:	9305      	str	r3, [sp, #20]
 8011d4c:	9b07      	ldr	r3, [sp, #28]
 8011d4e:	b31b      	cbz	r3, 8011d98 <_dtoa_r+0x7a0>
 8011d50:	9b08      	ldr	r3, [sp, #32]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	f000 80af 	beq.w	8011eb6 <_dtoa_r+0x8be>
 8011d58:	2e00      	cmp	r6, #0
 8011d5a:	dd13      	ble.n	8011d84 <_dtoa_r+0x78c>
 8011d5c:	4639      	mov	r1, r7
 8011d5e:	4632      	mov	r2, r6
 8011d60:	4620      	mov	r0, r4
 8011d62:	f000 fbfb 	bl	801255c <__pow5mult>
 8011d66:	ee18 2a10 	vmov	r2, s16
 8011d6a:	4601      	mov	r1, r0
 8011d6c:	4607      	mov	r7, r0
 8011d6e:	4620      	mov	r0, r4
 8011d70:	f000 fb4a 	bl	8012408 <__multiply>
 8011d74:	ee18 1a10 	vmov	r1, s16
 8011d78:	4680      	mov	r8, r0
 8011d7a:	4620      	mov	r0, r4
 8011d7c:	f000 fa76 	bl	801226c <_Bfree>
 8011d80:	ee08 8a10 	vmov	s16, r8
 8011d84:	9b07      	ldr	r3, [sp, #28]
 8011d86:	1b9a      	subs	r2, r3, r6
 8011d88:	d006      	beq.n	8011d98 <_dtoa_r+0x7a0>
 8011d8a:	ee18 1a10 	vmov	r1, s16
 8011d8e:	4620      	mov	r0, r4
 8011d90:	f000 fbe4 	bl	801255c <__pow5mult>
 8011d94:	ee08 0a10 	vmov	s16, r0
 8011d98:	2101      	movs	r1, #1
 8011d9a:	4620      	mov	r0, r4
 8011d9c:	f000 fb1e 	bl	80123dc <__i2b>
 8011da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	4606      	mov	r6, r0
 8011da6:	f340 8088 	ble.w	8011eba <_dtoa_r+0x8c2>
 8011daa:	461a      	mov	r2, r3
 8011dac:	4601      	mov	r1, r0
 8011dae:	4620      	mov	r0, r4
 8011db0:	f000 fbd4 	bl	801255c <__pow5mult>
 8011db4:	9b06      	ldr	r3, [sp, #24]
 8011db6:	2b01      	cmp	r3, #1
 8011db8:	4606      	mov	r6, r0
 8011dba:	f340 8081 	ble.w	8011ec0 <_dtoa_r+0x8c8>
 8011dbe:	f04f 0800 	mov.w	r8, #0
 8011dc2:	6933      	ldr	r3, [r6, #16]
 8011dc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011dc8:	6918      	ldr	r0, [r3, #16]
 8011dca:	f000 fab7 	bl	801233c <__hi0bits>
 8011dce:	f1c0 0020 	rsb	r0, r0, #32
 8011dd2:	9b05      	ldr	r3, [sp, #20]
 8011dd4:	4418      	add	r0, r3
 8011dd6:	f010 001f 	ands.w	r0, r0, #31
 8011dda:	f000 8092 	beq.w	8011f02 <_dtoa_r+0x90a>
 8011dde:	f1c0 0320 	rsb	r3, r0, #32
 8011de2:	2b04      	cmp	r3, #4
 8011de4:	f340 808a 	ble.w	8011efc <_dtoa_r+0x904>
 8011de8:	f1c0 001c 	rsb	r0, r0, #28
 8011dec:	9b04      	ldr	r3, [sp, #16]
 8011dee:	4403      	add	r3, r0
 8011df0:	9304      	str	r3, [sp, #16]
 8011df2:	9b05      	ldr	r3, [sp, #20]
 8011df4:	4403      	add	r3, r0
 8011df6:	4405      	add	r5, r0
 8011df8:	9305      	str	r3, [sp, #20]
 8011dfa:	9b04      	ldr	r3, [sp, #16]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	dd07      	ble.n	8011e10 <_dtoa_r+0x818>
 8011e00:	ee18 1a10 	vmov	r1, s16
 8011e04:	461a      	mov	r2, r3
 8011e06:	4620      	mov	r0, r4
 8011e08:	f000 fc02 	bl	8012610 <__lshift>
 8011e0c:	ee08 0a10 	vmov	s16, r0
 8011e10:	9b05      	ldr	r3, [sp, #20]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	dd05      	ble.n	8011e22 <_dtoa_r+0x82a>
 8011e16:	4631      	mov	r1, r6
 8011e18:	461a      	mov	r2, r3
 8011e1a:	4620      	mov	r0, r4
 8011e1c:	f000 fbf8 	bl	8012610 <__lshift>
 8011e20:	4606      	mov	r6, r0
 8011e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d06e      	beq.n	8011f06 <_dtoa_r+0x90e>
 8011e28:	ee18 0a10 	vmov	r0, s16
 8011e2c:	4631      	mov	r1, r6
 8011e2e:	f000 fc5f 	bl	80126f0 <__mcmp>
 8011e32:	2800      	cmp	r0, #0
 8011e34:	da67      	bge.n	8011f06 <_dtoa_r+0x90e>
 8011e36:	9b00      	ldr	r3, [sp, #0]
 8011e38:	3b01      	subs	r3, #1
 8011e3a:	ee18 1a10 	vmov	r1, s16
 8011e3e:	9300      	str	r3, [sp, #0]
 8011e40:	220a      	movs	r2, #10
 8011e42:	2300      	movs	r3, #0
 8011e44:	4620      	mov	r0, r4
 8011e46:	f000 fa33 	bl	80122b0 <__multadd>
 8011e4a:	9b08      	ldr	r3, [sp, #32]
 8011e4c:	ee08 0a10 	vmov	s16, r0
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	f000 81b1 	beq.w	80121b8 <_dtoa_r+0xbc0>
 8011e56:	2300      	movs	r3, #0
 8011e58:	4639      	mov	r1, r7
 8011e5a:	220a      	movs	r2, #10
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	f000 fa27 	bl	80122b0 <__multadd>
 8011e62:	9b02      	ldr	r3, [sp, #8]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	4607      	mov	r7, r0
 8011e68:	f300 808e 	bgt.w	8011f88 <_dtoa_r+0x990>
 8011e6c:	9b06      	ldr	r3, [sp, #24]
 8011e6e:	2b02      	cmp	r3, #2
 8011e70:	dc51      	bgt.n	8011f16 <_dtoa_r+0x91e>
 8011e72:	e089      	b.n	8011f88 <_dtoa_r+0x990>
 8011e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011e76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011e7a:	e74b      	b.n	8011d14 <_dtoa_r+0x71c>
 8011e7c:	9b03      	ldr	r3, [sp, #12]
 8011e7e:	1e5e      	subs	r6, r3, #1
 8011e80:	9b07      	ldr	r3, [sp, #28]
 8011e82:	42b3      	cmp	r3, r6
 8011e84:	bfbf      	itttt	lt
 8011e86:	9b07      	ldrlt	r3, [sp, #28]
 8011e88:	9607      	strlt	r6, [sp, #28]
 8011e8a:	1af2      	sublt	r2, r6, r3
 8011e8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011e8e:	bfb6      	itet	lt
 8011e90:	189b      	addlt	r3, r3, r2
 8011e92:	1b9e      	subge	r6, r3, r6
 8011e94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011e96:	9b03      	ldr	r3, [sp, #12]
 8011e98:	bfb8      	it	lt
 8011e9a:	2600      	movlt	r6, #0
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	bfb7      	itett	lt
 8011ea0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011ea4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011ea8:	1a9d      	sublt	r5, r3, r2
 8011eaa:	2300      	movlt	r3, #0
 8011eac:	e734      	b.n	8011d18 <_dtoa_r+0x720>
 8011eae:	9e07      	ldr	r6, [sp, #28]
 8011eb0:	9d04      	ldr	r5, [sp, #16]
 8011eb2:	9f08      	ldr	r7, [sp, #32]
 8011eb4:	e73b      	b.n	8011d2e <_dtoa_r+0x736>
 8011eb6:	9a07      	ldr	r2, [sp, #28]
 8011eb8:	e767      	b.n	8011d8a <_dtoa_r+0x792>
 8011eba:	9b06      	ldr	r3, [sp, #24]
 8011ebc:	2b01      	cmp	r3, #1
 8011ebe:	dc18      	bgt.n	8011ef2 <_dtoa_r+0x8fa>
 8011ec0:	f1ba 0f00 	cmp.w	sl, #0
 8011ec4:	d115      	bne.n	8011ef2 <_dtoa_r+0x8fa>
 8011ec6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011eca:	b993      	cbnz	r3, 8011ef2 <_dtoa_r+0x8fa>
 8011ecc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011ed0:	0d1b      	lsrs	r3, r3, #20
 8011ed2:	051b      	lsls	r3, r3, #20
 8011ed4:	b183      	cbz	r3, 8011ef8 <_dtoa_r+0x900>
 8011ed6:	9b04      	ldr	r3, [sp, #16]
 8011ed8:	3301      	adds	r3, #1
 8011eda:	9304      	str	r3, [sp, #16]
 8011edc:	9b05      	ldr	r3, [sp, #20]
 8011ede:	3301      	adds	r3, #1
 8011ee0:	9305      	str	r3, [sp, #20]
 8011ee2:	f04f 0801 	mov.w	r8, #1
 8011ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	f47f af6a 	bne.w	8011dc2 <_dtoa_r+0x7ca>
 8011eee:	2001      	movs	r0, #1
 8011ef0:	e76f      	b.n	8011dd2 <_dtoa_r+0x7da>
 8011ef2:	f04f 0800 	mov.w	r8, #0
 8011ef6:	e7f6      	b.n	8011ee6 <_dtoa_r+0x8ee>
 8011ef8:	4698      	mov	r8, r3
 8011efa:	e7f4      	b.n	8011ee6 <_dtoa_r+0x8ee>
 8011efc:	f43f af7d 	beq.w	8011dfa <_dtoa_r+0x802>
 8011f00:	4618      	mov	r0, r3
 8011f02:	301c      	adds	r0, #28
 8011f04:	e772      	b.n	8011dec <_dtoa_r+0x7f4>
 8011f06:	9b03      	ldr	r3, [sp, #12]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	dc37      	bgt.n	8011f7c <_dtoa_r+0x984>
 8011f0c:	9b06      	ldr	r3, [sp, #24]
 8011f0e:	2b02      	cmp	r3, #2
 8011f10:	dd34      	ble.n	8011f7c <_dtoa_r+0x984>
 8011f12:	9b03      	ldr	r3, [sp, #12]
 8011f14:	9302      	str	r3, [sp, #8]
 8011f16:	9b02      	ldr	r3, [sp, #8]
 8011f18:	b96b      	cbnz	r3, 8011f36 <_dtoa_r+0x93e>
 8011f1a:	4631      	mov	r1, r6
 8011f1c:	2205      	movs	r2, #5
 8011f1e:	4620      	mov	r0, r4
 8011f20:	f000 f9c6 	bl	80122b0 <__multadd>
 8011f24:	4601      	mov	r1, r0
 8011f26:	4606      	mov	r6, r0
 8011f28:	ee18 0a10 	vmov	r0, s16
 8011f2c:	f000 fbe0 	bl	80126f0 <__mcmp>
 8011f30:	2800      	cmp	r0, #0
 8011f32:	f73f adbb 	bgt.w	8011aac <_dtoa_r+0x4b4>
 8011f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f38:	9d01      	ldr	r5, [sp, #4]
 8011f3a:	43db      	mvns	r3, r3
 8011f3c:	9300      	str	r3, [sp, #0]
 8011f3e:	f04f 0800 	mov.w	r8, #0
 8011f42:	4631      	mov	r1, r6
 8011f44:	4620      	mov	r0, r4
 8011f46:	f000 f991 	bl	801226c <_Bfree>
 8011f4a:	2f00      	cmp	r7, #0
 8011f4c:	f43f aea4 	beq.w	8011c98 <_dtoa_r+0x6a0>
 8011f50:	f1b8 0f00 	cmp.w	r8, #0
 8011f54:	d005      	beq.n	8011f62 <_dtoa_r+0x96a>
 8011f56:	45b8      	cmp	r8, r7
 8011f58:	d003      	beq.n	8011f62 <_dtoa_r+0x96a>
 8011f5a:	4641      	mov	r1, r8
 8011f5c:	4620      	mov	r0, r4
 8011f5e:	f000 f985 	bl	801226c <_Bfree>
 8011f62:	4639      	mov	r1, r7
 8011f64:	4620      	mov	r0, r4
 8011f66:	f000 f981 	bl	801226c <_Bfree>
 8011f6a:	e695      	b.n	8011c98 <_dtoa_r+0x6a0>
 8011f6c:	2600      	movs	r6, #0
 8011f6e:	4637      	mov	r7, r6
 8011f70:	e7e1      	b.n	8011f36 <_dtoa_r+0x93e>
 8011f72:	9700      	str	r7, [sp, #0]
 8011f74:	4637      	mov	r7, r6
 8011f76:	e599      	b.n	8011aac <_dtoa_r+0x4b4>
 8011f78:	40240000 	.word	0x40240000
 8011f7c:	9b08      	ldr	r3, [sp, #32]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	f000 80ca 	beq.w	8012118 <_dtoa_r+0xb20>
 8011f84:	9b03      	ldr	r3, [sp, #12]
 8011f86:	9302      	str	r3, [sp, #8]
 8011f88:	2d00      	cmp	r5, #0
 8011f8a:	dd05      	ble.n	8011f98 <_dtoa_r+0x9a0>
 8011f8c:	4639      	mov	r1, r7
 8011f8e:	462a      	mov	r2, r5
 8011f90:	4620      	mov	r0, r4
 8011f92:	f000 fb3d 	bl	8012610 <__lshift>
 8011f96:	4607      	mov	r7, r0
 8011f98:	f1b8 0f00 	cmp.w	r8, #0
 8011f9c:	d05b      	beq.n	8012056 <_dtoa_r+0xa5e>
 8011f9e:	6879      	ldr	r1, [r7, #4]
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	f000 f923 	bl	80121ec <_Balloc>
 8011fa6:	4605      	mov	r5, r0
 8011fa8:	b928      	cbnz	r0, 8011fb6 <_dtoa_r+0x9be>
 8011faa:	4b87      	ldr	r3, [pc, #540]	; (80121c8 <_dtoa_r+0xbd0>)
 8011fac:	4602      	mov	r2, r0
 8011fae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011fb2:	f7ff bb3b 	b.w	801162c <_dtoa_r+0x34>
 8011fb6:	693a      	ldr	r2, [r7, #16]
 8011fb8:	3202      	adds	r2, #2
 8011fba:	0092      	lsls	r2, r2, #2
 8011fbc:	f107 010c 	add.w	r1, r7, #12
 8011fc0:	300c      	adds	r0, #12
 8011fc2:	f7fe fded 	bl	8010ba0 <memcpy>
 8011fc6:	2201      	movs	r2, #1
 8011fc8:	4629      	mov	r1, r5
 8011fca:	4620      	mov	r0, r4
 8011fcc:	f000 fb20 	bl	8012610 <__lshift>
 8011fd0:	9b01      	ldr	r3, [sp, #4]
 8011fd2:	f103 0901 	add.w	r9, r3, #1
 8011fd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011fda:	4413      	add	r3, r2
 8011fdc:	9305      	str	r3, [sp, #20]
 8011fde:	f00a 0301 	and.w	r3, sl, #1
 8011fe2:	46b8      	mov	r8, r7
 8011fe4:	9304      	str	r3, [sp, #16]
 8011fe6:	4607      	mov	r7, r0
 8011fe8:	4631      	mov	r1, r6
 8011fea:	ee18 0a10 	vmov	r0, s16
 8011fee:	f7ff fa77 	bl	80114e0 <quorem>
 8011ff2:	4641      	mov	r1, r8
 8011ff4:	9002      	str	r0, [sp, #8]
 8011ff6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011ffa:	ee18 0a10 	vmov	r0, s16
 8011ffe:	f000 fb77 	bl	80126f0 <__mcmp>
 8012002:	463a      	mov	r2, r7
 8012004:	9003      	str	r0, [sp, #12]
 8012006:	4631      	mov	r1, r6
 8012008:	4620      	mov	r0, r4
 801200a:	f000 fb8d 	bl	8012728 <__mdiff>
 801200e:	68c2      	ldr	r2, [r0, #12]
 8012010:	f109 3bff 	add.w	fp, r9, #4294967295
 8012014:	4605      	mov	r5, r0
 8012016:	bb02      	cbnz	r2, 801205a <_dtoa_r+0xa62>
 8012018:	4601      	mov	r1, r0
 801201a:	ee18 0a10 	vmov	r0, s16
 801201e:	f000 fb67 	bl	80126f0 <__mcmp>
 8012022:	4602      	mov	r2, r0
 8012024:	4629      	mov	r1, r5
 8012026:	4620      	mov	r0, r4
 8012028:	9207      	str	r2, [sp, #28]
 801202a:	f000 f91f 	bl	801226c <_Bfree>
 801202e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012032:	ea43 0102 	orr.w	r1, r3, r2
 8012036:	9b04      	ldr	r3, [sp, #16]
 8012038:	430b      	orrs	r3, r1
 801203a:	464d      	mov	r5, r9
 801203c:	d10f      	bne.n	801205e <_dtoa_r+0xa66>
 801203e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012042:	d02a      	beq.n	801209a <_dtoa_r+0xaa2>
 8012044:	9b03      	ldr	r3, [sp, #12]
 8012046:	2b00      	cmp	r3, #0
 8012048:	dd02      	ble.n	8012050 <_dtoa_r+0xa58>
 801204a:	9b02      	ldr	r3, [sp, #8]
 801204c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012050:	f88b a000 	strb.w	sl, [fp]
 8012054:	e775      	b.n	8011f42 <_dtoa_r+0x94a>
 8012056:	4638      	mov	r0, r7
 8012058:	e7ba      	b.n	8011fd0 <_dtoa_r+0x9d8>
 801205a:	2201      	movs	r2, #1
 801205c:	e7e2      	b.n	8012024 <_dtoa_r+0xa2c>
 801205e:	9b03      	ldr	r3, [sp, #12]
 8012060:	2b00      	cmp	r3, #0
 8012062:	db04      	blt.n	801206e <_dtoa_r+0xa76>
 8012064:	9906      	ldr	r1, [sp, #24]
 8012066:	430b      	orrs	r3, r1
 8012068:	9904      	ldr	r1, [sp, #16]
 801206a:	430b      	orrs	r3, r1
 801206c:	d122      	bne.n	80120b4 <_dtoa_r+0xabc>
 801206e:	2a00      	cmp	r2, #0
 8012070:	ddee      	ble.n	8012050 <_dtoa_r+0xa58>
 8012072:	ee18 1a10 	vmov	r1, s16
 8012076:	2201      	movs	r2, #1
 8012078:	4620      	mov	r0, r4
 801207a:	f000 fac9 	bl	8012610 <__lshift>
 801207e:	4631      	mov	r1, r6
 8012080:	ee08 0a10 	vmov	s16, r0
 8012084:	f000 fb34 	bl	80126f0 <__mcmp>
 8012088:	2800      	cmp	r0, #0
 801208a:	dc03      	bgt.n	8012094 <_dtoa_r+0xa9c>
 801208c:	d1e0      	bne.n	8012050 <_dtoa_r+0xa58>
 801208e:	f01a 0f01 	tst.w	sl, #1
 8012092:	d0dd      	beq.n	8012050 <_dtoa_r+0xa58>
 8012094:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012098:	d1d7      	bne.n	801204a <_dtoa_r+0xa52>
 801209a:	2339      	movs	r3, #57	; 0x39
 801209c:	f88b 3000 	strb.w	r3, [fp]
 80120a0:	462b      	mov	r3, r5
 80120a2:	461d      	mov	r5, r3
 80120a4:	3b01      	subs	r3, #1
 80120a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80120aa:	2a39      	cmp	r2, #57	; 0x39
 80120ac:	d071      	beq.n	8012192 <_dtoa_r+0xb9a>
 80120ae:	3201      	adds	r2, #1
 80120b0:	701a      	strb	r2, [r3, #0]
 80120b2:	e746      	b.n	8011f42 <_dtoa_r+0x94a>
 80120b4:	2a00      	cmp	r2, #0
 80120b6:	dd07      	ble.n	80120c8 <_dtoa_r+0xad0>
 80120b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80120bc:	d0ed      	beq.n	801209a <_dtoa_r+0xaa2>
 80120be:	f10a 0301 	add.w	r3, sl, #1
 80120c2:	f88b 3000 	strb.w	r3, [fp]
 80120c6:	e73c      	b.n	8011f42 <_dtoa_r+0x94a>
 80120c8:	9b05      	ldr	r3, [sp, #20]
 80120ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80120ce:	4599      	cmp	r9, r3
 80120d0:	d047      	beq.n	8012162 <_dtoa_r+0xb6a>
 80120d2:	ee18 1a10 	vmov	r1, s16
 80120d6:	2300      	movs	r3, #0
 80120d8:	220a      	movs	r2, #10
 80120da:	4620      	mov	r0, r4
 80120dc:	f000 f8e8 	bl	80122b0 <__multadd>
 80120e0:	45b8      	cmp	r8, r7
 80120e2:	ee08 0a10 	vmov	s16, r0
 80120e6:	f04f 0300 	mov.w	r3, #0
 80120ea:	f04f 020a 	mov.w	r2, #10
 80120ee:	4641      	mov	r1, r8
 80120f0:	4620      	mov	r0, r4
 80120f2:	d106      	bne.n	8012102 <_dtoa_r+0xb0a>
 80120f4:	f000 f8dc 	bl	80122b0 <__multadd>
 80120f8:	4680      	mov	r8, r0
 80120fa:	4607      	mov	r7, r0
 80120fc:	f109 0901 	add.w	r9, r9, #1
 8012100:	e772      	b.n	8011fe8 <_dtoa_r+0x9f0>
 8012102:	f000 f8d5 	bl	80122b0 <__multadd>
 8012106:	4639      	mov	r1, r7
 8012108:	4680      	mov	r8, r0
 801210a:	2300      	movs	r3, #0
 801210c:	220a      	movs	r2, #10
 801210e:	4620      	mov	r0, r4
 8012110:	f000 f8ce 	bl	80122b0 <__multadd>
 8012114:	4607      	mov	r7, r0
 8012116:	e7f1      	b.n	80120fc <_dtoa_r+0xb04>
 8012118:	9b03      	ldr	r3, [sp, #12]
 801211a:	9302      	str	r3, [sp, #8]
 801211c:	9d01      	ldr	r5, [sp, #4]
 801211e:	ee18 0a10 	vmov	r0, s16
 8012122:	4631      	mov	r1, r6
 8012124:	f7ff f9dc 	bl	80114e0 <quorem>
 8012128:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801212c:	9b01      	ldr	r3, [sp, #4]
 801212e:	f805 ab01 	strb.w	sl, [r5], #1
 8012132:	1aea      	subs	r2, r5, r3
 8012134:	9b02      	ldr	r3, [sp, #8]
 8012136:	4293      	cmp	r3, r2
 8012138:	dd09      	ble.n	801214e <_dtoa_r+0xb56>
 801213a:	ee18 1a10 	vmov	r1, s16
 801213e:	2300      	movs	r3, #0
 8012140:	220a      	movs	r2, #10
 8012142:	4620      	mov	r0, r4
 8012144:	f000 f8b4 	bl	80122b0 <__multadd>
 8012148:	ee08 0a10 	vmov	s16, r0
 801214c:	e7e7      	b.n	801211e <_dtoa_r+0xb26>
 801214e:	9b02      	ldr	r3, [sp, #8]
 8012150:	2b00      	cmp	r3, #0
 8012152:	bfc8      	it	gt
 8012154:	461d      	movgt	r5, r3
 8012156:	9b01      	ldr	r3, [sp, #4]
 8012158:	bfd8      	it	le
 801215a:	2501      	movle	r5, #1
 801215c:	441d      	add	r5, r3
 801215e:	f04f 0800 	mov.w	r8, #0
 8012162:	ee18 1a10 	vmov	r1, s16
 8012166:	2201      	movs	r2, #1
 8012168:	4620      	mov	r0, r4
 801216a:	f000 fa51 	bl	8012610 <__lshift>
 801216e:	4631      	mov	r1, r6
 8012170:	ee08 0a10 	vmov	s16, r0
 8012174:	f000 fabc 	bl	80126f0 <__mcmp>
 8012178:	2800      	cmp	r0, #0
 801217a:	dc91      	bgt.n	80120a0 <_dtoa_r+0xaa8>
 801217c:	d102      	bne.n	8012184 <_dtoa_r+0xb8c>
 801217e:	f01a 0f01 	tst.w	sl, #1
 8012182:	d18d      	bne.n	80120a0 <_dtoa_r+0xaa8>
 8012184:	462b      	mov	r3, r5
 8012186:	461d      	mov	r5, r3
 8012188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801218c:	2a30      	cmp	r2, #48	; 0x30
 801218e:	d0fa      	beq.n	8012186 <_dtoa_r+0xb8e>
 8012190:	e6d7      	b.n	8011f42 <_dtoa_r+0x94a>
 8012192:	9a01      	ldr	r2, [sp, #4]
 8012194:	429a      	cmp	r2, r3
 8012196:	d184      	bne.n	80120a2 <_dtoa_r+0xaaa>
 8012198:	9b00      	ldr	r3, [sp, #0]
 801219a:	3301      	adds	r3, #1
 801219c:	9300      	str	r3, [sp, #0]
 801219e:	2331      	movs	r3, #49	; 0x31
 80121a0:	7013      	strb	r3, [r2, #0]
 80121a2:	e6ce      	b.n	8011f42 <_dtoa_r+0x94a>
 80121a4:	4b09      	ldr	r3, [pc, #36]	; (80121cc <_dtoa_r+0xbd4>)
 80121a6:	f7ff ba95 	b.w	80116d4 <_dtoa_r+0xdc>
 80121aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	f47f aa6e 	bne.w	801168e <_dtoa_r+0x96>
 80121b2:	4b07      	ldr	r3, [pc, #28]	; (80121d0 <_dtoa_r+0xbd8>)
 80121b4:	f7ff ba8e 	b.w	80116d4 <_dtoa_r+0xdc>
 80121b8:	9b02      	ldr	r3, [sp, #8]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	dcae      	bgt.n	801211c <_dtoa_r+0xb24>
 80121be:	9b06      	ldr	r3, [sp, #24]
 80121c0:	2b02      	cmp	r3, #2
 80121c2:	f73f aea8 	bgt.w	8011f16 <_dtoa_r+0x91e>
 80121c6:	e7a9      	b.n	801211c <_dtoa_r+0xb24>
 80121c8:	08016083 	.word	0x08016083
 80121cc:	08015fe0 	.word	0x08015fe0
 80121d0:	08016004 	.word	0x08016004

080121d4 <_localeconv_r>:
 80121d4:	4800      	ldr	r0, [pc, #0]	; (80121d8 <_localeconv_r+0x4>)
 80121d6:	4770      	bx	lr
 80121d8:	200001cc 	.word	0x200001cc

080121dc <malloc>:
 80121dc:	4b02      	ldr	r3, [pc, #8]	; (80121e8 <malloc+0xc>)
 80121de:	4601      	mov	r1, r0
 80121e0:	6818      	ldr	r0, [r3, #0]
 80121e2:	f000 bc09 	b.w	80129f8 <_malloc_r>
 80121e6:	bf00      	nop
 80121e8:	20000078 	.word	0x20000078

080121ec <_Balloc>:
 80121ec:	b570      	push	{r4, r5, r6, lr}
 80121ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80121f0:	4604      	mov	r4, r0
 80121f2:	460d      	mov	r5, r1
 80121f4:	b976      	cbnz	r6, 8012214 <_Balloc+0x28>
 80121f6:	2010      	movs	r0, #16
 80121f8:	f7ff fff0 	bl	80121dc <malloc>
 80121fc:	4602      	mov	r2, r0
 80121fe:	6260      	str	r0, [r4, #36]	; 0x24
 8012200:	b920      	cbnz	r0, 801220c <_Balloc+0x20>
 8012202:	4b18      	ldr	r3, [pc, #96]	; (8012264 <_Balloc+0x78>)
 8012204:	4818      	ldr	r0, [pc, #96]	; (8012268 <_Balloc+0x7c>)
 8012206:	2166      	movs	r1, #102	; 0x66
 8012208:	f000 fdd6 	bl	8012db8 <__assert_func>
 801220c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012210:	6006      	str	r6, [r0, #0]
 8012212:	60c6      	str	r6, [r0, #12]
 8012214:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012216:	68f3      	ldr	r3, [r6, #12]
 8012218:	b183      	cbz	r3, 801223c <_Balloc+0x50>
 801221a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801221c:	68db      	ldr	r3, [r3, #12]
 801221e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012222:	b9b8      	cbnz	r0, 8012254 <_Balloc+0x68>
 8012224:	2101      	movs	r1, #1
 8012226:	fa01 f605 	lsl.w	r6, r1, r5
 801222a:	1d72      	adds	r2, r6, #5
 801222c:	0092      	lsls	r2, r2, #2
 801222e:	4620      	mov	r0, r4
 8012230:	f000 fb60 	bl	80128f4 <_calloc_r>
 8012234:	b160      	cbz	r0, 8012250 <_Balloc+0x64>
 8012236:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801223a:	e00e      	b.n	801225a <_Balloc+0x6e>
 801223c:	2221      	movs	r2, #33	; 0x21
 801223e:	2104      	movs	r1, #4
 8012240:	4620      	mov	r0, r4
 8012242:	f000 fb57 	bl	80128f4 <_calloc_r>
 8012246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012248:	60f0      	str	r0, [r6, #12]
 801224a:	68db      	ldr	r3, [r3, #12]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d1e4      	bne.n	801221a <_Balloc+0x2e>
 8012250:	2000      	movs	r0, #0
 8012252:	bd70      	pop	{r4, r5, r6, pc}
 8012254:	6802      	ldr	r2, [r0, #0]
 8012256:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801225a:	2300      	movs	r3, #0
 801225c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012260:	e7f7      	b.n	8012252 <_Balloc+0x66>
 8012262:	bf00      	nop
 8012264:	08016011 	.word	0x08016011
 8012268:	08016094 	.word	0x08016094

0801226c <_Bfree>:
 801226c:	b570      	push	{r4, r5, r6, lr}
 801226e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012270:	4605      	mov	r5, r0
 8012272:	460c      	mov	r4, r1
 8012274:	b976      	cbnz	r6, 8012294 <_Bfree+0x28>
 8012276:	2010      	movs	r0, #16
 8012278:	f7ff ffb0 	bl	80121dc <malloc>
 801227c:	4602      	mov	r2, r0
 801227e:	6268      	str	r0, [r5, #36]	; 0x24
 8012280:	b920      	cbnz	r0, 801228c <_Bfree+0x20>
 8012282:	4b09      	ldr	r3, [pc, #36]	; (80122a8 <_Bfree+0x3c>)
 8012284:	4809      	ldr	r0, [pc, #36]	; (80122ac <_Bfree+0x40>)
 8012286:	218a      	movs	r1, #138	; 0x8a
 8012288:	f000 fd96 	bl	8012db8 <__assert_func>
 801228c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012290:	6006      	str	r6, [r0, #0]
 8012292:	60c6      	str	r6, [r0, #12]
 8012294:	b13c      	cbz	r4, 80122a6 <_Bfree+0x3a>
 8012296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012298:	6862      	ldr	r2, [r4, #4]
 801229a:	68db      	ldr	r3, [r3, #12]
 801229c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122a0:	6021      	str	r1, [r4, #0]
 80122a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80122a6:	bd70      	pop	{r4, r5, r6, pc}
 80122a8:	08016011 	.word	0x08016011
 80122ac:	08016094 	.word	0x08016094

080122b0 <__multadd>:
 80122b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122b4:	690d      	ldr	r5, [r1, #16]
 80122b6:	4607      	mov	r7, r0
 80122b8:	460c      	mov	r4, r1
 80122ba:	461e      	mov	r6, r3
 80122bc:	f101 0c14 	add.w	ip, r1, #20
 80122c0:	2000      	movs	r0, #0
 80122c2:	f8dc 3000 	ldr.w	r3, [ip]
 80122c6:	b299      	uxth	r1, r3
 80122c8:	fb02 6101 	mla	r1, r2, r1, r6
 80122cc:	0c1e      	lsrs	r6, r3, #16
 80122ce:	0c0b      	lsrs	r3, r1, #16
 80122d0:	fb02 3306 	mla	r3, r2, r6, r3
 80122d4:	b289      	uxth	r1, r1
 80122d6:	3001      	adds	r0, #1
 80122d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80122dc:	4285      	cmp	r5, r0
 80122de:	f84c 1b04 	str.w	r1, [ip], #4
 80122e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80122e6:	dcec      	bgt.n	80122c2 <__multadd+0x12>
 80122e8:	b30e      	cbz	r6, 801232e <__multadd+0x7e>
 80122ea:	68a3      	ldr	r3, [r4, #8]
 80122ec:	42ab      	cmp	r3, r5
 80122ee:	dc19      	bgt.n	8012324 <__multadd+0x74>
 80122f0:	6861      	ldr	r1, [r4, #4]
 80122f2:	4638      	mov	r0, r7
 80122f4:	3101      	adds	r1, #1
 80122f6:	f7ff ff79 	bl	80121ec <_Balloc>
 80122fa:	4680      	mov	r8, r0
 80122fc:	b928      	cbnz	r0, 801230a <__multadd+0x5a>
 80122fe:	4602      	mov	r2, r0
 8012300:	4b0c      	ldr	r3, [pc, #48]	; (8012334 <__multadd+0x84>)
 8012302:	480d      	ldr	r0, [pc, #52]	; (8012338 <__multadd+0x88>)
 8012304:	21b5      	movs	r1, #181	; 0xb5
 8012306:	f000 fd57 	bl	8012db8 <__assert_func>
 801230a:	6922      	ldr	r2, [r4, #16]
 801230c:	3202      	adds	r2, #2
 801230e:	f104 010c 	add.w	r1, r4, #12
 8012312:	0092      	lsls	r2, r2, #2
 8012314:	300c      	adds	r0, #12
 8012316:	f7fe fc43 	bl	8010ba0 <memcpy>
 801231a:	4621      	mov	r1, r4
 801231c:	4638      	mov	r0, r7
 801231e:	f7ff ffa5 	bl	801226c <_Bfree>
 8012322:	4644      	mov	r4, r8
 8012324:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012328:	3501      	adds	r5, #1
 801232a:	615e      	str	r6, [r3, #20]
 801232c:	6125      	str	r5, [r4, #16]
 801232e:	4620      	mov	r0, r4
 8012330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012334:	08016083 	.word	0x08016083
 8012338:	08016094 	.word	0x08016094

0801233c <__hi0bits>:
 801233c:	0c03      	lsrs	r3, r0, #16
 801233e:	041b      	lsls	r3, r3, #16
 8012340:	b9d3      	cbnz	r3, 8012378 <__hi0bits+0x3c>
 8012342:	0400      	lsls	r0, r0, #16
 8012344:	2310      	movs	r3, #16
 8012346:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801234a:	bf04      	itt	eq
 801234c:	0200      	lsleq	r0, r0, #8
 801234e:	3308      	addeq	r3, #8
 8012350:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012354:	bf04      	itt	eq
 8012356:	0100      	lsleq	r0, r0, #4
 8012358:	3304      	addeq	r3, #4
 801235a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801235e:	bf04      	itt	eq
 8012360:	0080      	lsleq	r0, r0, #2
 8012362:	3302      	addeq	r3, #2
 8012364:	2800      	cmp	r0, #0
 8012366:	db05      	blt.n	8012374 <__hi0bits+0x38>
 8012368:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801236c:	f103 0301 	add.w	r3, r3, #1
 8012370:	bf08      	it	eq
 8012372:	2320      	moveq	r3, #32
 8012374:	4618      	mov	r0, r3
 8012376:	4770      	bx	lr
 8012378:	2300      	movs	r3, #0
 801237a:	e7e4      	b.n	8012346 <__hi0bits+0xa>

0801237c <__lo0bits>:
 801237c:	6803      	ldr	r3, [r0, #0]
 801237e:	f013 0207 	ands.w	r2, r3, #7
 8012382:	4601      	mov	r1, r0
 8012384:	d00b      	beq.n	801239e <__lo0bits+0x22>
 8012386:	07da      	lsls	r2, r3, #31
 8012388:	d423      	bmi.n	80123d2 <__lo0bits+0x56>
 801238a:	0798      	lsls	r0, r3, #30
 801238c:	bf49      	itett	mi
 801238e:	085b      	lsrmi	r3, r3, #1
 8012390:	089b      	lsrpl	r3, r3, #2
 8012392:	2001      	movmi	r0, #1
 8012394:	600b      	strmi	r3, [r1, #0]
 8012396:	bf5c      	itt	pl
 8012398:	600b      	strpl	r3, [r1, #0]
 801239a:	2002      	movpl	r0, #2
 801239c:	4770      	bx	lr
 801239e:	b298      	uxth	r0, r3
 80123a0:	b9a8      	cbnz	r0, 80123ce <__lo0bits+0x52>
 80123a2:	0c1b      	lsrs	r3, r3, #16
 80123a4:	2010      	movs	r0, #16
 80123a6:	b2da      	uxtb	r2, r3
 80123a8:	b90a      	cbnz	r2, 80123ae <__lo0bits+0x32>
 80123aa:	3008      	adds	r0, #8
 80123ac:	0a1b      	lsrs	r3, r3, #8
 80123ae:	071a      	lsls	r2, r3, #28
 80123b0:	bf04      	itt	eq
 80123b2:	091b      	lsreq	r3, r3, #4
 80123b4:	3004      	addeq	r0, #4
 80123b6:	079a      	lsls	r2, r3, #30
 80123b8:	bf04      	itt	eq
 80123ba:	089b      	lsreq	r3, r3, #2
 80123bc:	3002      	addeq	r0, #2
 80123be:	07da      	lsls	r2, r3, #31
 80123c0:	d403      	bmi.n	80123ca <__lo0bits+0x4e>
 80123c2:	085b      	lsrs	r3, r3, #1
 80123c4:	f100 0001 	add.w	r0, r0, #1
 80123c8:	d005      	beq.n	80123d6 <__lo0bits+0x5a>
 80123ca:	600b      	str	r3, [r1, #0]
 80123cc:	4770      	bx	lr
 80123ce:	4610      	mov	r0, r2
 80123d0:	e7e9      	b.n	80123a6 <__lo0bits+0x2a>
 80123d2:	2000      	movs	r0, #0
 80123d4:	4770      	bx	lr
 80123d6:	2020      	movs	r0, #32
 80123d8:	4770      	bx	lr
	...

080123dc <__i2b>:
 80123dc:	b510      	push	{r4, lr}
 80123de:	460c      	mov	r4, r1
 80123e0:	2101      	movs	r1, #1
 80123e2:	f7ff ff03 	bl	80121ec <_Balloc>
 80123e6:	4602      	mov	r2, r0
 80123e8:	b928      	cbnz	r0, 80123f6 <__i2b+0x1a>
 80123ea:	4b05      	ldr	r3, [pc, #20]	; (8012400 <__i2b+0x24>)
 80123ec:	4805      	ldr	r0, [pc, #20]	; (8012404 <__i2b+0x28>)
 80123ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80123f2:	f000 fce1 	bl	8012db8 <__assert_func>
 80123f6:	2301      	movs	r3, #1
 80123f8:	6144      	str	r4, [r0, #20]
 80123fa:	6103      	str	r3, [r0, #16]
 80123fc:	bd10      	pop	{r4, pc}
 80123fe:	bf00      	nop
 8012400:	08016083 	.word	0x08016083
 8012404:	08016094 	.word	0x08016094

08012408 <__multiply>:
 8012408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801240c:	4691      	mov	r9, r2
 801240e:	690a      	ldr	r2, [r1, #16]
 8012410:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012414:	429a      	cmp	r2, r3
 8012416:	bfb8      	it	lt
 8012418:	460b      	movlt	r3, r1
 801241a:	460c      	mov	r4, r1
 801241c:	bfbc      	itt	lt
 801241e:	464c      	movlt	r4, r9
 8012420:	4699      	movlt	r9, r3
 8012422:	6927      	ldr	r7, [r4, #16]
 8012424:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012428:	68a3      	ldr	r3, [r4, #8]
 801242a:	6861      	ldr	r1, [r4, #4]
 801242c:	eb07 060a 	add.w	r6, r7, sl
 8012430:	42b3      	cmp	r3, r6
 8012432:	b085      	sub	sp, #20
 8012434:	bfb8      	it	lt
 8012436:	3101      	addlt	r1, #1
 8012438:	f7ff fed8 	bl	80121ec <_Balloc>
 801243c:	b930      	cbnz	r0, 801244c <__multiply+0x44>
 801243e:	4602      	mov	r2, r0
 8012440:	4b44      	ldr	r3, [pc, #272]	; (8012554 <__multiply+0x14c>)
 8012442:	4845      	ldr	r0, [pc, #276]	; (8012558 <__multiply+0x150>)
 8012444:	f240 115d 	movw	r1, #349	; 0x15d
 8012448:	f000 fcb6 	bl	8012db8 <__assert_func>
 801244c:	f100 0514 	add.w	r5, r0, #20
 8012450:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012454:	462b      	mov	r3, r5
 8012456:	2200      	movs	r2, #0
 8012458:	4543      	cmp	r3, r8
 801245a:	d321      	bcc.n	80124a0 <__multiply+0x98>
 801245c:	f104 0314 	add.w	r3, r4, #20
 8012460:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012464:	f109 0314 	add.w	r3, r9, #20
 8012468:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801246c:	9202      	str	r2, [sp, #8]
 801246e:	1b3a      	subs	r2, r7, r4
 8012470:	3a15      	subs	r2, #21
 8012472:	f022 0203 	bic.w	r2, r2, #3
 8012476:	3204      	adds	r2, #4
 8012478:	f104 0115 	add.w	r1, r4, #21
 801247c:	428f      	cmp	r7, r1
 801247e:	bf38      	it	cc
 8012480:	2204      	movcc	r2, #4
 8012482:	9201      	str	r2, [sp, #4]
 8012484:	9a02      	ldr	r2, [sp, #8]
 8012486:	9303      	str	r3, [sp, #12]
 8012488:	429a      	cmp	r2, r3
 801248a:	d80c      	bhi.n	80124a6 <__multiply+0x9e>
 801248c:	2e00      	cmp	r6, #0
 801248e:	dd03      	ble.n	8012498 <__multiply+0x90>
 8012490:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012494:	2b00      	cmp	r3, #0
 8012496:	d05a      	beq.n	801254e <__multiply+0x146>
 8012498:	6106      	str	r6, [r0, #16]
 801249a:	b005      	add	sp, #20
 801249c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124a0:	f843 2b04 	str.w	r2, [r3], #4
 80124a4:	e7d8      	b.n	8012458 <__multiply+0x50>
 80124a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80124aa:	f1ba 0f00 	cmp.w	sl, #0
 80124ae:	d024      	beq.n	80124fa <__multiply+0xf2>
 80124b0:	f104 0e14 	add.w	lr, r4, #20
 80124b4:	46a9      	mov	r9, r5
 80124b6:	f04f 0c00 	mov.w	ip, #0
 80124ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80124be:	f8d9 1000 	ldr.w	r1, [r9]
 80124c2:	fa1f fb82 	uxth.w	fp, r2
 80124c6:	b289      	uxth	r1, r1
 80124c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80124cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80124d0:	f8d9 2000 	ldr.w	r2, [r9]
 80124d4:	4461      	add	r1, ip
 80124d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80124da:	fb0a c20b 	mla	r2, sl, fp, ip
 80124de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80124e2:	b289      	uxth	r1, r1
 80124e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80124e8:	4577      	cmp	r7, lr
 80124ea:	f849 1b04 	str.w	r1, [r9], #4
 80124ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80124f2:	d8e2      	bhi.n	80124ba <__multiply+0xb2>
 80124f4:	9a01      	ldr	r2, [sp, #4]
 80124f6:	f845 c002 	str.w	ip, [r5, r2]
 80124fa:	9a03      	ldr	r2, [sp, #12]
 80124fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012500:	3304      	adds	r3, #4
 8012502:	f1b9 0f00 	cmp.w	r9, #0
 8012506:	d020      	beq.n	801254a <__multiply+0x142>
 8012508:	6829      	ldr	r1, [r5, #0]
 801250a:	f104 0c14 	add.w	ip, r4, #20
 801250e:	46ae      	mov	lr, r5
 8012510:	f04f 0a00 	mov.w	sl, #0
 8012514:	f8bc b000 	ldrh.w	fp, [ip]
 8012518:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801251c:	fb09 220b 	mla	r2, r9, fp, r2
 8012520:	4492      	add	sl, r2
 8012522:	b289      	uxth	r1, r1
 8012524:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012528:	f84e 1b04 	str.w	r1, [lr], #4
 801252c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012530:	f8be 1000 	ldrh.w	r1, [lr]
 8012534:	0c12      	lsrs	r2, r2, #16
 8012536:	fb09 1102 	mla	r1, r9, r2, r1
 801253a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801253e:	4567      	cmp	r7, ip
 8012540:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012544:	d8e6      	bhi.n	8012514 <__multiply+0x10c>
 8012546:	9a01      	ldr	r2, [sp, #4]
 8012548:	50a9      	str	r1, [r5, r2]
 801254a:	3504      	adds	r5, #4
 801254c:	e79a      	b.n	8012484 <__multiply+0x7c>
 801254e:	3e01      	subs	r6, #1
 8012550:	e79c      	b.n	801248c <__multiply+0x84>
 8012552:	bf00      	nop
 8012554:	08016083 	.word	0x08016083
 8012558:	08016094 	.word	0x08016094

0801255c <__pow5mult>:
 801255c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012560:	4615      	mov	r5, r2
 8012562:	f012 0203 	ands.w	r2, r2, #3
 8012566:	4606      	mov	r6, r0
 8012568:	460f      	mov	r7, r1
 801256a:	d007      	beq.n	801257c <__pow5mult+0x20>
 801256c:	4c25      	ldr	r4, [pc, #148]	; (8012604 <__pow5mult+0xa8>)
 801256e:	3a01      	subs	r2, #1
 8012570:	2300      	movs	r3, #0
 8012572:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012576:	f7ff fe9b 	bl	80122b0 <__multadd>
 801257a:	4607      	mov	r7, r0
 801257c:	10ad      	asrs	r5, r5, #2
 801257e:	d03d      	beq.n	80125fc <__pow5mult+0xa0>
 8012580:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012582:	b97c      	cbnz	r4, 80125a4 <__pow5mult+0x48>
 8012584:	2010      	movs	r0, #16
 8012586:	f7ff fe29 	bl	80121dc <malloc>
 801258a:	4602      	mov	r2, r0
 801258c:	6270      	str	r0, [r6, #36]	; 0x24
 801258e:	b928      	cbnz	r0, 801259c <__pow5mult+0x40>
 8012590:	4b1d      	ldr	r3, [pc, #116]	; (8012608 <__pow5mult+0xac>)
 8012592:	481e      	ldr	r0, [pc, #120]	; (801260c <__pow5mult+0xb0>)
 8012594:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012598:	f000 fc0e 	bl	8012db8 <__assert_func>
 801259c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80125a0:	6004      	str	r4, [r0, #0]
 80125a2:	60c4      	str	r4, [r0, #12]
 80125a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80125a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80125ac:	b94c      	cbnz	r4, 80125c2 <__pow5mult+0x66>
 80125ae:	f240 2171 	movw	r1, #625	; 0x271
 80125b2:	4630      	mov	r0, r6
 80125b4:	f7ff ff12 	bl	80123dc <__i2b>
 80125b8:	2300      	movs	r3, #0
 80125ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80125be:	4604      	mov	r4, r0
 80125c0:	6003      	str	r3, [r0, #0]
 80125c2:	f04f 0900 	mov.w	r9, #0
 80125c6:	07eb      	lsls	r3, r5, #31
 80125c8:	d50a      	bpl.n	80125e0 <__pow5mult+0x84>
 80125ca:	4639      	mov	r1, r7
 80125cc:	4622      	mov	r2, r4
 80125ce:	4630      	mov	r0, r6
 80125d0:	f7ff ff1a 	bl	8012408 <__multiply>
 80125d4:	4639      	mov	r1, r7
 80125d6:	4680      	mov	r8, r0
 80125d8:	4630      	mov	r0, r6
 80125da:	f7ff fe47 	bl	801226c <_Bfree>
 80125de:	4647      	mov	r7, r8
 80125e0:	106d      	asrs	r5, r5, #1
 80125e2:	d00b      	beq.n	80125fc <__pow5mult+0xa0>
 80125e4:	6820      	ldr	r0, [r4, #0]
 80125e6:	b938      	cbnz	r0, 80125f8 <__pow5mult+0x9c>
 80125e8:	4622      	mov	r2, r4
 80125ea:	4621      	mov	r1, r4
 80125ec:	4630      	mov	r0, r6
 80125ee:	f7ff ff0b 	bl	8012408 <__multiply>
 80125f2:	6020      	str	r0, [r4, #0]
 80125f4:	f8c0 9000 	str.w	r9, [r0]
 80125f8:	4604      	mov	r4, r0
 80125fa:	e7e4      	b.n	80125c6 <__pow5mult+0x6a>
 80125fc:	4638      	mov	r0, r7
 80125fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012602:	bf00      	nop
 8012604:	080161e0 	.word	0x080161e0
 8012608:	08016011 	.word	0x08016011
 801260c:	08016094 	.word	0x08016094

08012610 <__lshift>:
 8012610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012614:	460c      	mov	r4, r1
 8012616:	6849      	ldr	r1, [r1, #4]
 8012618:	6923      	ldr	r3, [r4, #16]
 801261a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801261e:	68a3      	ldr	r3, [r4, #8]
 8012620:	4607      	mov	r7, r0
 8012622:	4691      	mov	r9, r2
 8012624:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012628:	f108 0601 	add.w	r6, r8, #1
 801262c:	42b3      	cmp	r3, r6
 801262e:	db0b      	blt.n	8012648 <__lshift+0x38>
 8012630:	4638      	mov	r0, r7
 8012632:	f7ff fddb 	bl	80121ec <_Balloc>
 8012636:	4605      	mov	r5, r0
 8012638:	b948      	cbnz	r0, 801264e <__lshift+0x3e>
 801263a:	4602      	mov	r2, r0
 801263c:	4b2a      	ldr	r3, [pc, #168]	; (80126e8 <__lshift+0xd8>)
 801263e:	482b      	ldr	r0, [pc, #172]	; (80126ec <__lshift+0xdc>)
 8012640:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012644:	f000 fbb8 	bl	8012db8 <__assert_func>
 8012648:	3101      	adds	r1, #1
 801264a:	005b      	lsls	r3, r3, #1
 801264c:	e7ee      	b.n	801262c <__lshift+0x1c>
 801264e:	2300      	movs	r3, #0
 8012650:	f100 0114 	add.w	r1, r0, #20
 8012654:	f100 0210 	add.w	r2, r0, #16
 8012658:	4618      	mov	r0, r3
 801265a:	4553      	cmp	r3, sl
 801265c:	db37      	blt.n	80126ce <__lshift+0xbe>
 801265e:	6920      	ldr	r0, [r4, #16]
 8012660:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012664:	f104 0314 	add.w	r3, r4, #20
 8012668:	f019 091f 	ands.w	r9, r9, #31
 801266c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012670:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012674:	d02f      	beq.n	80126d6 <__lshift+0xc6>
 8012676:	f1c9 0e20 	rsb	lr, r9, #32
 801267a:	468a      	mov	sl, r1
 801267c:	f04f 0c00 	mov.w	ip, #0
 8012680:	681a      	ldr	r2, [r3, #0]
 8012682:	fa02 f209 	lsl.w	r2, r2, r9
 8012686:	ea42 020c 	orr.w	r2, r2, ip
 801268a:	f84a 2b04 	str.w	r2, [sl], #4
 801268e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012692:	4298      	cmp	r0, r3
 8012694:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012698:	d8f2      	bhi.n	8012680 <__lshift+0x70>
 801269a:	1b03      	subs	r3, r0, r4
 801269c:	3b15      	subs	r3, #21
 801269e:	f023 0303 	bic.w	r3, r3, #3
 80126a2:	3304      	adds	r3, #4
 80126a4:	f104 0215 	add.w	r2, r4, #21
 80126a8:	4290      	cmp	r0, r2
 80126aa:	bf38      	it	cc
 80126ac:	2304      	movcc	r3, #4
 80126ae:	f841 c003 	str.w	ip, [r1, r3]
 80126b2:	f1bc 0f00 	cmp.w	ip, #0
 80126b6:	d001      	beq.n	80126bc <__lshift+0xac>
 80126b8:	f108 0602 	add.w	r6, r8, #2
 80126bc:	3e01      	subs	r6, #1
 80126be:	4638      	mov	r0, r7
 80126c0:	612e      	str	r6, [r5, #16]
 80126c2:	4621      	mov	r1, r4
 80126c4:	f7ff fdd2 	bl	801226c <_Bfree>
 80126c8:	4628      	mov	r0, r5
 80126ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80126d2:	3301      	adds	r3, #1
 80126d4:	e7c1      	b.n	801265a <__lshift+0x4a>
 80126d6:	3904      	subs	r1, #4
 80126d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80126dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80126e0:	4298      	cmp	r0, r3
 80126e2:	d8f9      	bhi.n	80126d8 <__lshift+0xc8>
 80126e4:	e7ea      	b.n	80126bc <__lshift+0xac>
 80126e6:	bf00      	nop
 80126e8:	08016083 	.word	0x08016083
 80126ec:	08016094 	.word	0x08016094

080126f0 <__mcmp>:
 80126f0:	b530      	push	{r4, r5, lr}
 80126f2:	6902      	ldr	r2, [r0, #16]
 80126f4:	690c      	ldr	r4, [r1, #16]
 80126f6:	1b12      	subs	r2, r2, r4
 80126f8:	d10e      	bne.n	8012718 <__mcmp+0x28>
 80126fa:	f100 0314 	add.w	r3, r0, #20
 80126fe:	3114      	adds	r1, #20
 8012700:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012704:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012708:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801270c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012710:	42a5      	cmp	r5, r4
 8012712:	d003      	beq.n	801271c <__mcmp+0x2c>
 8012714:	d305      	bcc.n	8012722 <__mcmp+0x32>
 8012716:	2201      	movs	r2, #1
 8012718:	4610      	mov	r0, r2
 801271a:	bd30      	pop	{r4, r5, pc}
 801271c:	4283      	cmp	r3, r0
 801271e:	d3f3      	bcc.n	8012708 <__mcmp+0x18>
 8012720:	e7fa      	b.n	8012718 <__mcmp+0x28>
 8012722:	f04f 32ff 	mov.w	r2, #4294967295
 8012726:	e7f7      	b.n	8012718 <__mcmp+0x28>

08012728 <__mdiff>:
 8012728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801272c:	460c      	mov	r4, r1
 801272e:	4606      	mov	r6, r0
 8012730:	4611      	mov	r1, r2
 8012732:	4620      	mov	r0, r4
 8012734:	4690      	mov	r8, r2
 8012736:	f7ff ffdb 	bl	80126f0 <__mcmp>
 801273a:	1e05      	subs	r5, r0, #0
 801273c:	d110      	bne.n	8012760 <__mdiff+0x38>
 801273e:	4629      	mov	r1, r5
 8012740:	4630      	mov	r0, r6
 8012742:	f7ff fd53 	bl	80121ec <_Balloc>
 8012746:	b930      	cbnz	r0, 8012756 <__mdiff+0x2e>
 8012748:	4b3a      	ldr	r3, [pc, #232]	; (8012834 <__mdiff+0x10c>)
 801274a:	4602      	mov	r2, r0
 801274c:	f240 2132 	movw	r1, #562	; 0x232
 8012750:	4839      	ldr	r0, [pc, #228]	; (8012838 <__mdiff+0x110>)
 8012752:	f000 fb31 	bl	8012db8 <__assert_func>
 8012756:	2301      	movs	r3, #1
 8012758:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801275c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012760:	bfa4      	itt	ge
 8012762:	4643      	movge	r3, r8
 8012764:	46a0      	movge	r8, r4
 8012766:	4630      	mov	r0, r6
 8012768:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801276c:	bfa6      	itte	ge
 801276e:	461c      	movge	r4, r3
 8012770:	2500      	movge	r5, #0
 8012772:	2501      	movlt	r5, #1
 8012774:	f7ff fd3a 	bl	80121ec <_Balloc>
 8012778:	b920      	cbnz	r0, 8012784 <__mdiff+0x5c>
 801277a:	4b2e      	ldr	r3, [pc, #184]	; (8012834 <__mdiff+0x10c>)
 801277c:	4602      	mov	r2, r0
 801277e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012782:	e7e5      	b.n	8012750 <__mdiff+0x28>
 8012784:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012788:	6926      	ldr	r6, [r4, #16]
 801278a:	60c5      	str	r5, [r0, #12]
 801278c:	f104 0914 	add.w	r9, r4, #20
 8012790:	f108 0514 	add.w	r5, r8, #20
 8012794:	f100 0e14 	add.w	lr, r0, #20
 8012798:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801279c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80127a0:	f108 0210 	add.w	r2, r8, #16
 80127a4:	46f2      	mov	sl, lr
 80127a6:	2100      	movs	r1, #0
 80127a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80127ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80127b0:	fa1f f883 	uxth.w	r8, r3
 80127b4:	fa11 f18b 	uxtah	r1, r1, fp
 80127b8:	0c1b      	lsrs	r3, r3, #16
 80127ba:	eba1 0808 	sub.w	r8, r1, r8
 80127be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80127c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80127c6:	fa1f f888 	uxth.w	r8, r8
 80127ca:	1419      	asrs	r1, r3, #16
 80127cc:	454e      	cmp	r6, r9
 80127ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80127d2:	f84a 3b04 	str.w	r3, [sl], #4
 80127d6:	d8e7      	bhi.n	80127a8 <__mdiff+0x80>
 80127d8:	1b33      	subs	r3, r6, r4
 80127da:	3b15      	subs	r3, #21
 80127dc:	f023 0303 	bic.w	r3, r3, #3
 80127e0:	3304      	adds	r3, #4
 80127e2:	3415      	adds	r4, #21
 80127e4:	42a6      	cmp	r6, r4
 80127e6:	bf38      	it	cc
 80127e8:	2304      	movcc	r3, #4
 80127ea:	441d      	add	r5, r3
 80127ec:	4473      	add	r3, lr
 80127ee:	469e      	mov	lr, r3
 80127f0:	462e      	mov	r6, r5
 80127f2:	4566      	cmp	r6, ip
 80127f4:	d30e      	bcc.n	8012814 <__mdiff+0xec>
 80127f6:	f10c 0203 	add.w	r2, ip, #3
 80127fa:	1b52      	subs	r2, r2, r5
 80127fc:	f022 0203 	bic.w	r2, r2, #3
 8012800:	3d03      	subs	r5, #3
 8012802:	45ac      	cmp	ip, r5
 8012804:	bf38      	it	cc
 8012806:	2200      	movcc	r2, #0
 8012808:	441a      	add	r2, r3
 801280a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801280e:	b17b      	cbz	r3, 8012830 <__mdiff+0x108>
 8012810:	6107      	str	r7, [r0, #16]
 8012812:	e7a3      	b.n	801275c <__mdiff+0x34>
 8012814:	f856 8b04 	ldr.w	r8, [r6], #4
 8012818:	fa11 f288 	uxtah	r2, r1, r8
 801281c:	1414      	asrs	r4, r2, #16
 801281e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012822:	b292      	uxth	r2, r2
 8012824:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012828:	f84e 2b04 	str.w	r2, [lr], #4
 801282c:	1421      	asrs	r1, r4, #16
 801282e:	e7e0      	b.n	80127f2 <__mdiff+0xca>
 8012830:	3f01      	subs	r7, #1
 8012832:	e7ea      	b.n	801280a <__mdiff+0xe2>
 8012834:	08016083 	.word	0x08016083
 8012838:	08016094 	.word	0x08016094

0801283c <__d2b>:
 801283c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012840:	4689      	mov	r9, r1
 8012842:	2101      	movs	r1, #1
 8012844:	ec57 6b10 	vmov	r6, r7, d0
 8012848:	4690      	mov	r8, r2
 801284a:	f7ff fccf 	bl	80121ec <_Balloc>
 801284e:	4604      	mov	r4, r0
 8012850:	b930      	cbnz	r0, 8012860 <__d2b+0x24>
 8012852:	4602      	mov	r2, r0
 8012854:	4b25      	ldr	r3, [pc, #148]	; (80128ec <__d2b+0xb0>)
 8012856:	4826      	ldr	r0, [pc, #152]	; (80128f0 <__d2b+0xb4>)
 8012858:	f240 310a 	movw	r1, #778	; 0x30a
 801285c:	f000 faac 	bl	8012db8 <__assert_func>
 8012860:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012864:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012868:	bb35      	cbnz	r5, 80128b8 <__d2b+0x7c>
 801286a:	2e00      	cmp	r6, #0
 801286c:	9301      	str	r3, [sp, #4]
 801286e:	d028      	beq.n	80128c2 <__d2b+0x86>
 8012870:	4668      	mov	r0, sp
 8012872:	9600      	str	r6, [sp, #0]
 8012874:	f7ff fd82 	bl	801237c <__lo0bits>
 8012878:	9900      	ldr	r1, [sp, #0]
 801287a:	b300      	cbz	r0, 80128be <__d2b+0x82>
 801287c:	9a01      	ldr	r2, [sp, #4]
 801287e:	f1c0 0320 	rsb	r3, r0, #32
 8012882:	fa02 f303 	lsl.w	r3, r2, r3
 8012886:	430b      	orrs	r3, r1
 8012888:	40c2      	lsrs	r2, r0
 801288a:	6163      	str	r3, [r4, #20]
 801288c:	9201      	str	r2, [sp, #4]
 801288e:	9b01      	ldr	r3, [sp, #4]
 8012890:	61a3      	str	r3, [r4, #24]
 8012892:	2b00      	cmp	r3, #0
 8012894:	bf14      	ite	ne
 8012896:	2202      	movne	r2, #2
 8012898:	2201      	moveq	r2, #1
 801289a:	6122      	str	r2, [r4, #16]
 801289c:	b1d5      	cbz	r5, 80128d4 <__d2b+0x98>
 801289e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80128a2:	4405      	add	r5, r0
 80128a4:	f8c9 5000 	str.w	r5, [r9]
 80128a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80128ac:	f8c8 0000 	str.w	r0, [r8]
 80128b0:	4620      	mov	r0, r4
 80128b2:	b003      	add	sp, #12
 80128b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80128bc:	e7d5      	b.n	801286a <__d2b+0x2e>
 80128be:	6161      	str	r1, [r4, #20]
 80128c0:	e7e5      	b.n	801288e <__d2b+0x52>
 80128c2:	a801      	add	r0, sp, #4
 80128c4:	f7ff fd5a 	bl	801237c <__lo0bits>
 80128c8:	9b01      	ldr	r3, [sp, #4]
 80128ca:	6163      	str	r3, [r4, #20]
 80128cc:	2201      	movs	r2, #1
 80128ce:	6122      	str	r2, [r4, #16]
 80128d0:	3020      	adds	r0, #32
 80128d2:	e7e3      	b.n	801289c <__d2b+0x60>
 80128d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80128dc:	f8c9 0000 	str.w	r0, [r9]
 80128e0:	6918      	ldr	r0, [r3, #16]
 80128e2:	f7ff fd2b 	bl	801233c <__hi0bits>
 80128e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128ea:	e7df      	b.n	80128ac <__d2b+0x70>
 80128ec:	08016083 	.word	0x08016083
 80128f0:	08016094 	.word	0x08016094

080128f4 <_calloc_r>:
 80128f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80128f6:	fba1 2402 	umull	r2, r4, r1, r2
 80128fa:	b94c      	cbnz	r4, 8012910 <_calloc_r+0x1c>
 80128fc:	4611      	mov	r1, r2
 80128fe:	9201      	str	r2, [sp, #4]
 8012900:	f000 f87a 	bl	80129f8 <_malloc_r>
 8012904:	9a01      	ldr	r2, [sp, #4]
 8012906:	4605      	mov	r5, r0
 8012908:	b930      	cbnz	r0, 8012918 <_calloc_r+0x24>
 801290a:	4628      	mov	r0, r5
 801290c:	b003      	add	sp, #12
 801290e:	bd30      	pop	{r4, r5, pc}
 8012910:	220c      	movs	r2, #12
 8012912:	6002      	str	r2, [r0, #0]
 8012914:	2500      	movs	r5, #0
 8012916:	e7f8      	b.n	801290a <_calloc_r+0x16>
 8012918:	4621      	mov	r1, r4
 801291a:	f7fe f94f 	bl	8010bbc <memset>
 801291e:	e7f4      	b.n	801290a <_calloc_r+0x16>

08012920 <_free_r>:
 8012920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012922:	2900      	cmp	r1, #0
 8012924:	d044      	beq.n	80129b0 <_free_r+0x90>
 8012926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801292a:	9001      	str	r0, [sp, #4]
 801292c:	2b00      	cmp	r3, #0
 801292e:	f1a1 0404 	sub.w	r4, r1, #4
 8012932:	bfb8      	it	lt
 8012934:	18e4      	addlt	r4, r4, r3
 8012936:	f000 fa9b 	bl	8012e70 <__malloc_lock>
 801293a:	4a1e      	ldr	r2, [pc, #120]	; (80129b4 <_free_r+0x94>)
 801293c:	9801      	ldr	r0, [sp, #4]
 801293e:	6813      	ldr	r3, [r2, #0]
 8012940:	b933      	cbnz	r3, 8012950 <_free_r+0x30>
 8012942:	6063      	str	r3, [r4, #4]
 8012944:	6014      	str	r4, [r2, #0]
 8012946:	b003      	add	sp, #12
 8012948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801294c:	f000 ba96 	b.w	8012e7c <__malloc_unlock>
 8012950:	42a3      	cmp	r3, r4
 8012952:	d908      	bls.n	8012966 <_free_r+0x46>
 8012954:	6825      	ldr	r5, [r4, #0]
 8012956:	1961      	adds	r1, r4, r5
 8012958:	428b      	cmp	r3, r1
 801295a:	bf01      	itttt	eq
 801295c:	6819      	ldreq	r1, [r3, #0]
 801295e:	685b      	ldreq	r3, [r3, #4]
 8012960:	1949      	addeq	r1, r1, r5
 8012962:	6021      	streq	r1, [r4, #0]
 8012964:	e7ed      	b.n	8012942 <_free_r+0x22>
 8012966:	461a      	mov	r2, r3
 8012968:	685b      	ldr	r3, [r3, #4]
 801296a:	b10b      	cbz	r3, 8012970 <_free_r+0x50>
 801296c:	42a3      	cmp	r3, r4
 801296e:	d9fa      	bls.n	8012966 <_free_r+0x46>
 8012970:	6811      	ldr	r1, [r2, #0]
 8012972:	1855      	adds	r5, r2, r1
 8012974:	42a5      	cmp	r5, r4
 8012976:	d10b      	bne.n	8012990 <_free_r+0x70>
 8012978:	6824      	ldr	r4, [r4, #0]
 801297a:	4421      	add	r1, r4
 801297c:	1854      	adds	r4, r2, r1
 801297e:	42a3      	cmp	r3, r4
 8012980:	6011      	str	r1, [r2, #0]
 8012982:	d1e0      	bne.n	8012946 <_free_r+0x26>
 8012984:	681c      	ldr	r4, [r3, #0]
 8012986:	685b      	ldr	r3, [r3, #4]
 8012988:	6053      	str	r3, [r2, #4]
 801298a:	4421      	add	r1, r4
 801298c:	6011      	str	r1, [r2, #0]
 801298e:	e7da      	b.n	8012946 <_free_r+0x26>
 8012990:	d902      	bls.n	8012998 <_free_r+0x78>
 8012992:	230c      	movs	r3, #12
 8012994:	6003      	str	r3, [r0, #0]
 8012996:	e7d6      	b.n	8012946 <_free_r+0x26>
 8012998:	6825      	ldr	r5, [r4, #0]
 801299a:	1961      	adds	r1, r4, r5
 801299c:	428b      	cmp	r3, r1
 801299e:	bf04      	itt	eq
 80129a0:	6819      	ldreq	r1, [r3, #0]
 80129a2:	685b      	ldreq	r3, [r3, #4]
 80129a4:	6063      	str	r3, [r4, #4]
 80129a6:	bf04      	itt	eq
 80129a8:	1949      	addeq	r1, r1, r5
 80129aa:	6021      	streq	r1, [r4, #0]
 80129ac:	6054      	str	r4, [r2, #4]
 80129ae:	e7ca      	b.n	8012946 <_free_r+0x26>
 80129b0:	b003      	add	sp, #12
 80129b2:	bd30      	pop	{r4, r5, pc}
 80129b4:	20004a00 	.word	0x20004a00

080129b8 <sbrk_aligned>:
 80129b8:	b570      	push	{r4, r5, r6, lr}
 80129ba:	4e0e      	ldr	r6, [pc, #56]	; (80129f4 <sbrk_aligned+0x3c>)
 80129bc:	460c      	mov	r4, r1
 80129be:	6831      	ldr	r1, [r6, #0]
 80129c0:	4605      	mov	r5, r0
 80129c2:	b911      	cbnz	r1, 80129ca <sbrk_aligned+0x12>
 80129c4:	f000 f9e8 	bl	8012d98 <_sbrk_r>
 80129c8:	6030      	str	r0, [r6, #0]
 80129ca:	4621      	mov	r1, r4
 80129cc:	4628      	mov	r0, r5
 80129ce:	f000 f9e3 	bl	8012d98 <_sbrk_r>
 80129d2:	1c43      	adds	r3, r0, #1
 80129d4:	d00a      	beq.n	80129ec <sbrk_aligned+0x34>
 80129d6:	1cc4      	adds	r4, r0, #3
 80129d8:	f024 0403 	bic.w	r4, r4, #3
 80129dc:	42a0      	cmp	r0, r4
 80129de:	d007      	beq.n	80129f0 <sbrk_aligned+0x38>
 80129e0:	1a21      	subs	r1, r4, r0
 80129e2:	4628      	mov	r0, r5
 80129e4:	f000 f9d8 	bl	8012d98 <_sbrk_r>
 80129e8:	3001      	adds	r0, #1
 80129ea:	d101      	bne.n	80129f0 <sbrk_aligned+0x38>
 80129ec:	f04f 34ff 	mov.w	r4, #4294967295
 80129f0:	4620      	mov	r0, r4
 80129f2:	bd70      	pop	{r4, r5, r6, pc}
 80129f4:	20004a04 	.word	0x20004a04

080129f8 <_malloc_r>:
 80129f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129fc:	1ccd      	adds	r5, r1, #3
 80129fe:	f025 0503 	bic.w	r5, r5, #3
 8012a02:	3508      	adds	r5, #8
 8012a04:	2d0c      	cmp	r5, #12
 8012a06:	bf38      	it	cc
 8012a08:	250c      	movcc	r5, #12
 8012a0a:	2d00      	cmp	r5, #0
 8012a0c:	4607      	mov	r7, r0
 8012a0e:	db01      	blt.n	8012a14 <_malloc_r+0x1c>
 8012a10:	42a9      	cmp	r1, r5
 8012a12:	d905      	bls.n	8012a20 <_malloc_r+0x28>
 8012a14:	230c      	movs	r3, #12
 8012a16:	603b      	str	r3, [r7, #0]
 8012a18:	2600      	movs	r6, #0
 8012a1a:	4630      	mov	r0, r6
 8012a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a20:	4e2e      	ldr	r6, [pc, #184]	; (8012adc <_malloc_r+0xe4>)
 8012a22:	f000 fa25 	bl	8012e70 <__malloc_lock>
 8012a26:	6833      	ldr	r3, [r6, #0]
 8012a28:	461c      	mov	r4, r3
 8012a2a:	bb34      	cbnz	r4, 8012a7a <_malloc_r+0x82>
 8012a2c:	4629      	mov	r1, r5
 8012a2e:	4638      	mov	r0, r7
 8012a30:	f7ff ffc2 	bl	80129b8 <sbrk_aligned>
 8012a34:	1c43      	adds	r3, r0, #1
 8012a36:	4604      	mov	r4, r0
 8012a38:	d14d      	bne.n	8012ad6 <_malloc_r+0xde>
 8012a3a:	6834      	ldr	r4, [r6, #0]
 8012a3c:	4626      	mov	r6, r4
 8012a3e:	2e00      	cmp	r6, #0
 8012a40:	d140      	bne.n	8012ac4 <_malloc_r+0xcc>
 8012a42:	6823      	ldr	r3, [r4, #0]
 8012a44:	4631      	mov	r1, r6
 8012a46:	4638      	mov	r0, r7
 8012a48:	eb04 0803 	add.w	r8, r4, r3
 8012a4c:	f000 f9a4 	bl	8012d98 <_sbrk_r>
 8012a50:	4580      	cmp	r8, r0
 8012a52:	d13a      	bne.n	8012aca <_malloc_r+0xd2>
 8012a54:	6821      	ldr	r1, [r4, #0]
 8012a56:	3503      	adds	r5, #3
 8012a58:	1a6d      	subs	r5, r5, r1
 8012a5a:	f025 0503 	bic.w	r5, r5, #3
 8012a5e:	3508      	adds	r5, #8
 8012a60:	2d0c      	cmp	r5, #12
 8012a62:	bf38      	it	cc
 8012a64:	250c      	movcc	r5, #12
 8012a66:	4629      	mov	r1, r5
 8012a68:	4638      	mov	r0, r7
 8012a6a:	f7ff ffa5 	bl	80129b8 <sbrk_aligned>
 8012a6e:	3001      	adds	r0, #1
 8012a70:	d02b      	beq.n	8012aca <_malloc_r+0xd2>
 8012a72:	6823      	ldr	r3, [r4, #0]
 8012a74:	442b      	add	r3, r5
 8012a76:	6023      	str	r3, [r4, #0]
 8012a78:	e00e      	b.n	8012a98 <_malloc_r+0xa0>
 8012a7a:	6822      	ldr	r2, [r4, #0]
 8012a7c:	1b52      	subs	r2, r2, r5
 8012a7e:	d41e      	bmi.n	8012abe <_malloc_r+0xc6>
 8012a80:	2a0b      	cmp	r2, #11
 8012a82:	d916      	bls.n	8012ab2 <_malloc_r+0xba>
 8012a84:	1961      	adds	r1, r4, r5
 8012a86:	42a3      	cmp	r3, r4
 8012a88:	6025      	str	r5, [r4, #0]
 8012a8a:	bf18      	it	ne
 8012a8c:	6059      	strne	r1, [r3, #4]
 8012a8e:	6863      	ldr	r3, [r4, #4]
 8012a90:	bf08      	it	eq
 8012a92:	6031      	streq	r1, [r6, #0]
 8012a94:	5162      	str	r2, [r4, r5]
 8012a96:	604b      	str	r3, [r1, #4]
 8012a98:	4638      	mov	r0, r7
 8012a9a:	f104 060b 	add.w	r6, r4, #11
 8012a9e:	f000 f9ed 	bl	8012e7c <__malloc_unlock>
 8012aa2:	f026 0607 	bic.w	r6, r6, #7
 8012aa6:	1d23      	adds	r3, r4, #4
 8012aa8:	1af2      	subs	r2, r6, r3
 8012aaa:	d0b6      	beq.n	8012a1a <_malloc_r+0x22>
 8012aac:	1b9b      	subs	r3, r3, r6
 8012aae:	50a3      	str	r3, [r4, r2]
 8012ab0:	e7b3      	b.n	8012a1a <_malloc_r+0x22>
 8012ab2:	6862      	ldr	r2, [r4, #4]
 8012ab4:	42a3      	cmp	r3, r4
 8012ab6:	bf0c      	ite	eq
 8012ab8:	6032      	streq	r2, [r6, #0]
 8012aba:	605a      	strne	r2, [r3, #4]
 8012abc:	e7ec      	b.n	8012a98 <_malloc_r+0xa0>
 8012abe:	4623      	mov	r3, r4
 8012ac0:	6864      	ldr	r4, [r4, #4]
 8012ac2:	e7b2      	b.n	8012a2a <_malloc_r+0x32>
 8012ac4:	4634      	mov	r4, r6
 8012ac6:	6876      	ldr	r6, [r6, #4]
 8012ac8:	e7b9      	b.n	8012a3e <_malloc_r+0x46>
 8012aca:	230c      	movs	r3, #12
 8012acc:	603b      	str	r3, [r7, #0]
 8012ace:	4638      	mov	r0, r7
 8012ad0:	f000 f9d4 	bl	8012e7c <__malloc_unlock>
 8012ad4:	e7a1      	b.n	8012a1a <_malloc_r+0x22>
 8012ad6:	6025      	str	r5, [r4, #0]
 8012ad8:	e7de      	b.n	8012a98 <_malloc_r+0xa0>
 8012ada:	bf00      	nop
 8012adc:	20004a00 	.word	0x20004a00

08012ae0 <__ssputs_r>:
 8012ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ae4:	688e      	ldr	r6, [r1, #8]
 8012ae6:	429e      	cmp	r6, r3
 8012ae8:	4682      	mov	sl, r0
 8012aea:	460c      	mov	r4, r1
 8012aec:	4690      	mov	r8, r2
 8012aee:	461f      	mov	r7, r3
 8012af0:	d838      	bhi.n	8012b64 <__ssputs_r+0x84>
 8012af2:	898a      	ldrh	r2, [r1, #12]
 8012af4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012af8:	d032      	beq.n	8012b60 <__ssputs_r+0x80>
 8012afa:	6825      	ldr	r5, [r4, #0]
 8012afc:	6909      	ldr	r1, [r1, #16]
 8012afe:	eba5 0901 	sub.w	r9, r5, r1
 8012b02:	6965      	ldr	r5, [r4, #20]
 8012b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	444b      	add	r3, r9
 8012b10:	106d      	asrs	r5, r5, #1
 8012b12:	429d      	cmp	r5, r3
 8012b14:	bf38      	it	cc
 8012b16:	461d      	movcc	r5, r3
 8012b18:	0553      	lsls	r3, r2, #21
 8012b1a:	d531      	bpl.n	8012b80 <__ssputs_r+0xa0>
 8012b1c:	4629      	mov	r1, r5
 8012b1e:	f7ff ff6b 	bl	80129f8 <_malloc_r>
 8012b22:	4606      	mov	r6, r0
 8012b24:	b950      	cbnz	r0, 8012b3c <__ssputs_r+0x5c>
 8012b26:	230c      	movs	r3, #12
 8012b28:	f8ca 3000 	str.w	r3, [sl]
 8012b2c:	89a3      	ldrh	r3, [r4, #12]
 8012b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b32:	81a3      	strh	r3, [r4, #12]
 8012b34:	f04f 30ff 	mov.w	r0, #4294967295
 8012b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b3c:	6921      	ldr	r1, [r4, #16]
 8012b3e:	464a      	mov	r2, r9
 8012b40:	f7fe f82e 	bl	8010ba0 <memcpy>
 8012b44:	89a3      	ldrh	r3, [r4, #12]
 8012b46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b4e:	81a3      	strh	r3, [r4, #12]
 8012b50:	6126      	str	r6, [r4, #16]
 8012b52:	6165      	str	r5, [r4, #20]
 8012b54:	444e      	add	r6, r9
 8012b56:	eba5 0509 	sub.w	r5, r5, r9
 8012b5a:	6026      	str	r6, [r4, #0]
 8012b5c:	60a5      	str	r5, [r4, #8]
 8012b5e:	463e      	mov	r6, r7
 8012b60:	42be      	cmp	r6, r7
 8012b62:	d900      	bls.n	8012b66 <__ssputs_r+0x86>
 8012b64:	463e      	mov	r6, r7
 8012b66:	6820      	ldr	r0, [r4, #0]
 8012b68:	4632      	mov	r2, r6
 8012b6a:	4641      	mov	r1, r8
 8012b6c:	f000 f966 	bl	8012e3c <memmove>
 8012b70:	68a3      	ldr	r3, [r4, #8]
 8012b72:	1b9b      	subs	r3, r3, r6
 8012b74:	60a3      	str	r3, [r4, #8]
 8012b76:	6823      	ldr	r3, [r4, #0]
 8012b78:	4433      	add	r3, r6
 8012b7a:	6023      	str	r3, [r4, #0]
 8012b7c:	2000      	movs	r0, #0
 8012b7e:	e7db      	b.n	8012b38 <__ssputs_r+0x58>
 8012b80:	462a      	mov	r2, r5
 8012b82:	f000 f981 	bl	8012e88 <_realloc_r>
 8012b86:	4606      	mov	r6, r0
 8012b88:	2800      	cmp	r0, #0
 8012b8a:	d1e1      	bne.n	8012b50 <__ssputs_r+0x70>
 8012b8c:	6921      	ldr	r1, [r4, #16]
 8012b8e:	4650      	mov	r0, sl
 8012b90:	f7ff fec6 	bl	8012920 <_free_r>
 8012b94:	e7c7      	b.n	8012b26 <__ssputs_r+0x46>
	...

08012b98 <_svfiprintf_r>:
 8012b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b9c:	4698      	mov	r8, r3
 8012b9e:	898b      	ldrh	r3, [r1, #12]
 8012ba0:	061b      	lsls	r3, r3, #24
 8012ba2:	b09d      	sub	sp, #116	; 0x74
 8012ba4:	4607      	mov	r7, r0
 8012ba6:	460d      	mov	r5, r1
 8012ba8:	4614      	mov	r4, r2
 8012baa:	d50e      	bpl.n	8012bca <_svfiprintf_r+0x32>
 8012bac:	690b      	ldr	r3, [r1, #16]
 8012bae:	b963      	cbnz	r3, 8012bca <_svfiprintf_r+0x32>
 8012bb0:	2140      	movs	r1, #64	; 0x40
 8012bb2:	f7ff ff21 	bl	80129f8 <_malloc_r>
 8012bb6:	6028      	str	r0, [r5, #0]
 8012bb8:	6128      	str	r0, [r5, #16]
 8012bba:	b920      	cbnz	r0, 8012bc6 <_svfiprintf_r+0x2e>
 8012bbc:	230c      	movs	r3, #12
 8012bbe:	603b      	str	r3, [r7, #0]
 8012bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc4:	e0d1      	b.n	8012d6a <_svfiprintf_r+0x1d2>
 8012bc6:	2340      	movs	r3, #64	; 0x40
 8012bc8:	616b      	str	r3, [r5, #20]
 8012bca:	2300      	movs	r3, #0
 8012bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8012bce:	2320      	movs	r3, #32
 8012bd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012bd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8012bd8:	2330      	movs	r3, #48	; 0x30
 8012bda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012d84 <_svfiprintf_r+0x1ec>
 8012bde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012be2:	f04f 0901 	mov.w	r9, #1
 8012be6:	4623      	mov	r3, r4
 8012be8:	469a      	mov	sl, r3
 8012bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012bee:	b10a      	cbz	r2, 8012bf4 <_svfiprintf_r+0x5c>
 8012bf0:	2a25      	cmp	r2, #37	; 0x25
 8012bf2:	d1f9      	bne.n	8012be8 <_svfiprintf_r+0x50>
 8012bf4:	ebba 0b04 	subs.w	fp, sl, r4
 8012bf8:	d00b      	beq.n	8012c12 <_svfiprintf_r+0x7a>
 8012bfa:	465b      	mov	r3, fp
 8012bfc:	4622      	mov	r2, r4
 8012bfe:	4629      	mov	r1, r5
 8012c00:	4638      	mov	r0, r7
 8012c02:	f7ff ff6d 	bl	8012ae0 <__ssputs_r>
 8012c06:	3001      	adds	r0, #1
 8012c08:	f000 80aa 	beq.w	8012d60 <_svfiprintf_r+0x1c8>
 8012c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c0e:	445a      	add	r2, fp
 8012c10:	9209      	str	r2, [sp, #36]	; 0x24
 8012c12:	f89a 3000 	ldrb.w	r3, [sl]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	f000 80a2 	beq.w	8012d60 <_svfiprintf_r+0x1c8>
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c26:	f10a 0a01 	add.w	sl, sl, #1
 8012c2a:	9304      	str	r3, [sp, #16]
 8012c2c:	9307      	str	r3, [sp, #28]
 8012c2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c32:	931a      	str	r3, [sp, #104]	; 0x68
 8012c34:	4654      	mov	r4, sl
 8012c36:	2205      	movs	r2, #5
 8012c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c3c:	4851      	ldr	r0, [pc, #324]	; (8012d84 <_svfiprintf_r+0x1ec>)
 8012c3e:	f7ed facf 	bl	80001e0 <memchr>
 8012c42:	9a04      	ldr	r2, [sp, #16]
 8012c44:	b9d8      	cbnz	r0, 8012c7e <_svfiprintf_r+0xe6>
 8012c46:	06d0      	lsls	r0, r2, #27
 8012c48:	bf44      	itt	mi
 8012c4a:	2320      	movmi	r3, #32
 8012c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c50:	0711      	lsls	r1, r2, #28
 8012c52:	bf44      	itt	mi
 8012c54:	232b      	movmi	r3, #43	; 0x2b
 8012c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8012c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8012c60:	d015      	beq.n	8012c8e <_svfiprintf_r+0xf6>
 8012c62:	9a07      	ldr	r2, [sp, #28]
 8012c64:	4654      	mov	r4, sl
 8012c66:	2000      	movs	r0, #0
 8012c68:	f04f 0c0a 	mov.w	ip, #10
 8012c6c:	4621      	mov	r1, r4
 8012c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c72:	3b30      	subs	r3, #48	; 0x30
 8012c74:	2b09      	cmp	r3, #9
 8012c76:	d94e      	bls.n	8012d16 <_svfiprintf_r+0x17e>
 8012c78:	b1b0      	cbz	r0, 8012ca8 <_svfiprintf_r+0x110>
 8012c7a:	9207      	str	r2, [sp, #28]
 8012c7c:	e014      	b.n	8012ca8 <_svfiprintf_r+0x110>
 8012c7e:	eba0 0308 	sub.w	r3, r0, r8
 8012c82:	fa09 f303 	lsl.w	r3, r9, r3
 8012c86:	4313      	orrs	r3, r2
 8012c88:	9304      	str	r3, [sp, #16]
 8012c8a:	46a2      	mov	sl, r4
 8012c8c:	e7d2      	b.n	8012c34 <_svfiprintf_r+0x9c>
 8012c8e:	9b03      	ldr	r3, [sp, #12]
 8012c90:	1d19      	adds	r1, r3, #4
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	9103      	str	r1, [sp, #12]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	bfbb      	ittet	lt
 8012c9a:	425b      	neglt	r3, r3
 8012c9c:	f042 0202 	orrlt.w	r2, r2, #2
 8012ca0:	9307      	strge	r3, [sp, #28]
 8012ca2:	9307      	strlt	r3, [sp, #28]
 8012ca4:	bfb8      	it	lt
 8012ca6:	9204      	strlt	r2, [sp, #16]
 8012ca8:	7823      	ldrb	r3, [r4, #0]
 8012caa:	2b2e      	cmp	r3, #46	; 0x2e
 8012cac:	d10c      	bne.n	8012cc8 <_svfiprintf_r+0x130>
 8012cae:	7863      	ldrb	r3, [r4, #1]
 8012cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8012cb2:	d135      	bne.n	8012d20 <_svfiprintf_r+0x188>
 8012cb4:	9b03      	ldr	r3, [sp, #12]
 8012cb6:	1d1a      	adds	r2, r3, #4
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	9203      	str	r2, [sp, #12]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	bfb8      	it	lt
 8012cc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8012cc4:	3402      	adds	r4, #2
 8012cc6:	9305      	str	r3, [sp, #20]
 8012cc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012d94 <_svfiprintf_r+0x1fc>
 8012ccc:	7821      	ldrb	r1, [r4, #0]
 8012cce:	2203      	movs	r2, #3
 8012cd0:	4650      	mov	r0, sl
 8012cd2:	f7ed fa85 	bl	80001e0 <memchr>
 8012cd6:	b140      	cbz	r0, 8012cea <_svfiprintf_r+0x152>
 8012cd8:	2340      	movs	r3, #64	; 0x40
 8012cda:	eba0 000a 	sub.w	r0, r0, sl
 8012cde:	fa03 f000 	lsl.w	r0, r3, r0
 8012ce2:	9b04      	ldr	r3, [sp, #16]
 8012ce4:	4303      	orrs	r3, r0
 8012ce6:	3401      	adds	r4, #1
 8012ce8:	9304      	str	r3, [sp, #16]
 8012cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cee:	4826      	ldr	r0, [pc, #152]	; (8012d88 <_svfiprintf_r+0x1f0>)
 8012cf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012cf4:	2206      	movs	r2, #6
 8012cf6:	f7ed fa73 	bl	80001e0 <memchr>
 8012cfa:	2800      	cmp	r0, #0
 8012cfc:	d038      	beq.n	8012d70 <_svfiprintf_r+0x1d8>
 8012cfe:	4b23      	ldr	r3, [pc, #140]	; (8012d8c <_svfiprintf_r+0x1f4>)
 8012d00:	bb1b      	cbnz	r3, 8012d4a <_svfiprintf_r+0x1b2>
 8012d02:	9b03      	ldr	r3, [sp, #12]
 8012d04:	3307      	adds	r3, #7
 8012d06:	f023 0307 	bic.w	r3, r3, #7
 8012d0a:	3308      	adds	r3, #8
 8012d0c:	9303      	str	r3, [sp, #12]
 8012d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d10:	4433      	add	r3, r6
 8012d12:	9309      	str	r3, [sp, #36]	; 0x24
 8012d14:	e767      	b.n	8012be6 <_svfiprintf_r+0x4e>
 8012d16:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d1a:	460c      	mov	r4, r1
 8012d1c:	2001      	movs	r0, #1
 8012d1e:	e7a5      	b.n	8012c6c <_svfiprintf_r+0xd4>
 8012d20:	2300      	movs	r3, #0
 8012d22:	3401      	adds	r4, #1
 8012d24:	9305      	str	r3, [sp, #20]
 8012d26:	4619      	mov	r1, r3
 8012d28:	f04f 0c0a 	mov.w	ip, #10
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d32:	3a30      	subs	r2, #48	; 0x30
 8012d34:	2a09      	cmp	r2, #9
 8012d36:	d903      	bls.n	8012d40 <_svfiprintf_r+0x1a8>
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d0c5      	beq.n	8012cc8 <_svfiprintf_r+0x130>
 8012d3c:	9105      	str	r1, [sp, #20]
 8012d3e:	e7c3      	b.n	8012cc8 <_svfiprintf_r+0x130>
 8012d40:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d44:	4604      	mov	r4, r0
 8012d46:	2301      	movs	r3, #1
 8012d48:	e7f0      	b.n	8012d2c <_svfiprintf_r+0x194>
 8012d4a:	ab03      	add	r3, sp, #12
 8012d4c:	9300      	str	r3, [sp, #0]
 8012d4e:	462a      	mov	r2, r5
 8012d50:	4b0f      	ldr	r3, [pc, #60]	; (8012d90 <_svfiprintf_r+0x1f8>)
 8012d52:	a904      	add	r1, sp, #16
 8012d54:	4638      	mov	r0, r7
 8012d56:	f7fd ffd9 	bl	8010d0c <_printf_float>
 8012d5a:	1c42      	adds	r2, r0, #1
 8012d5c:	4606      	mov	r6, r0
 8012d5e:	d1d6      	bne.n	8012d0e <_svfiprintf_r+0x176>
 8012d60:	89ab      	ldrh	r3, [r5, #12]
 8012d62:	065b      	lsls	r3, r3, #25
 8012d64:	f53f af2c 	bmi.w	8012bc0 <_svfiprintf_r+0x28>
 8012d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d6a:	b01d      	add	sp, #116	; 0x74
 8012d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d70:	ab03      	add	r3, sp, #12
 8012d72:	9300      	str	r3, [sp, #0]
 8012d74:	462a      	mov	r2, r5
 8012d76:	4b06      	ldr	r3, [pc, #24]	; (8012d90 <_svfiprintf_r+0x1f8>)
 8012d78:	a904      	add	r1, sp, #16
 8012d7a:	4638      	mov	r0, r7
 8012d7c:	f7fe fa6a 	bl	8011254 <_printf_i>
 8012d80:	e7eb      	b.n	8012d5a <_svfiprintf_r+0x1c2>
 8012d82:	bf00      	nop
 8012d84:	080161ec 	.word	0x080161ec
 8012d88:	080161f6 	.word	0x080161f6
 8012d8c:	08010d0d 	.word	0x08010d0d
 8012d90:	08012ae1 	.word	0x08012ae1
 8012d94:	080161f2 	.word	0x080161f2

08012d98 <_sbrk_r>:
 8012d98:	b538      	push	{r3, r4, r5, lr}
 8012d9a:	4d06      	ldr	r5, [pc, #24]	; (8012db4 <_sbrk_r+0x1c>)
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	4604      	mov	r4, r0
 8012da0:	4608      	mov	r0, r1
 8012da2:	602b      	str	r3, [r5, #0]
 8012da4:	f7f1 fb34 	bl	8004410 <_sbrk>
 8012da8:	1c43      	adds	r3, r0, #1
 8012daa:	d102      	bne.n	8012db2 <_sbrk_r+0x1a>
 8012dac:	682b      	ldr	r3, [r5, #0]
 8012dae:	b103      	cbz	r3, 8012db2 <_sbrk_r+0x1a>
 8012db0:	6023      	str	r3, [r4, #0]
 8012db2:	bd38      	pop	{r3, r4, r5, pc}
 8012db4:	20004a08 	.word	0x20004a08

08012db8 <__assert_func>:
 8012db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012dba:	4614      	mov	r4, r2
 8012dbc:	461a      	mov	r2, r3
 8012dbe:	4b09      	ldr	r3, [pc, #36]	; (8012de4 <__assert_func+0x2c>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	4605      	mov	r5, r0
 8012dc4:	68d8      	ldr	r0, [r3, #12]
 8012dc6:	b14c      	cbz	r4, 8012ddc <__assert_func+0x24>
 8012dc8:	4b07      	ldr	r3, [pc, #28]	; (8012de8 <__assert_func+0x30>)
 8012dca:	9100      	str	r1, [sp, #0]
 8012dcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012dd0:	4906      	ldr	r1, [pc, #24]	; (8012dec <__assert_func+0x34>)
 8012dd2:	462b      	mov	r3, r5
 8012dd4:	f000 f80e 	bl	8012df4 <fiprintf>
 8012dd8:	f000 faac 	bl	8013334 <abort>
 8012ddc:	4b04      	ldr	r3, [pc, #16]	; (8012df0 <__assert_func+0x38>)
 8012dde:	461c      	mov	r4, r3
 8012de0:	e7f3      	b.n	8012dca <__assert_func+0x12>
 8012de2:	bf00      	nop
 8012de4:	20000078 	.word	0x20000078
 8012de8:	080161fd 	.word	0x080161fd
 8012dec:	0801620a 	.word	0x0801620a
 8012df0:	08016238 	.word	0x08016238

08012df4 <fiprintf>:
 8012df4:	b40e      	push	{r1, r2, r3}
 8012df6:	b503      	push	{r0, r1, lr}
 8012df8:	4601      	mov	r1, r0
 8012dfa:	ab03      	add	r3, sp, #12
 8012dfc:	4805      	ldr	r0, [pc, #20]	; (8012e14 <fiprintf+0x20>)
 8012dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e02:	6800      	ldr	r0, [r0, #0]
 8012e04:	9301      	str	r3, [sp, #4]
 8012e06:	f000 f897 	bl	8012f38 <_vfiprintf_r>
 8012e0a:	b002      	add	sp, #8
 8012e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e10:	b003      	add	sp, #12
 8012e12:	4770      	bx	lr
 8012e14:	20000078 	.word	0x20000078

08012e18 <__ascii_mbtowc>:
 8012e18:	b082      	sub	sp, #8
 8012e1a:	b901      	cbnz	r1, 8012e1e <__ascii_mbtowc+0x6>
 8012e1c:	a901      	add	r1, sp, #4
 8012e1e:	b142      	cbz	r2, 8012e32 <__ascii_mbtowc+0x1a>
 8012e20:	b14b      	cbz	r3, 8012e36 <__ascii_mbtowc+0x1e>
 8012e22:	7813      	ldrb	r3, [r2, #0]
 8012e24:	600b      	str	r3, [r1, #0]
 8012e26:	7812      	ldrb	r2, [r2, #0]
 8012e28:	1e10      	subs	r0, r2, #0
 8012e2a:	bf18      	it	ne
 8012e2c:	2001      	movne	r0, #1
 8012e2e:	b002      	add	sp, #8
 8012e30:	4770      	bx	lr
 8012e32:	4610      	mov	r0, r2
 8012e34:	e7fb      	b.n	8012e2e <__ascii_mbtowc+0x16>
 8012e36:	f06f 0001 	mvn.w	r0, #1
 8012e3a:	e7f8      	b.n	8012e2e <__ascii_mbtowc+0x16>

08012e3c <memmove>:
 8012e3c:	4288      	cmp	r0, r1
 8012e3e:	b510      	push	{r4, lr}
 8012e40:	eb01 0402 	add.w	r4, r1, r2
 8012e44:	d902      	bls.n	8012e4c <memmove+0x10>
 8012e46:	4284      	cmp	r4, r0
 8012e48:	4623      	mov	r3, r4
 8012e4a:	d807      	bhi.n	8012e5c <memmove+0x20>
 8012e4c:	1e43      	subs	r3, r0, #1
 8012e4e:	42a1      	cmp	r1, r4
 8012e50:	d008      	beq.n	8012e64 <memmove+0x28>
 8012e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012e5a:	e7f8      	b.n	8012e4e <memmove+0x12>
 8012e5c:	4402      	add	r2, r0
 8012e5e:	4601      	mov	r1, r0
 8012e60:	428a      	cmp	r2, r1
 8012e62:	d100      	bne.n	8012e66 <memmove+0x2a>
 8012e64:	bd10      	pop	{r4, pc}
 8012e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012e6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012e6e:	e7f7      	b.n	8012e60 <memmove+0x24>

08012e70 <__malloc_lock>:
 8012e70:	4801      	ldr	r0, [pc, #4]	; (8012e78 <__malloc_lock+0x8>)
 8012e72:	f000 bc1f 	b.w	80136b4 <__retarget_lock_acquire_recursive>
 8012e76:	bf00      	nop
 8012e78:	20004a0c 	.word	0x20004a0c

08012e7c <__malloc_unlock>:
 8012e7c:	4801      	ldr	r0, [pc, #4]	; (8012e84 <__malloc_unlock+0x8>)
 8012e7e:	f000 bc1a 	b.w	80136b6 <__retarget_lock_release_recursive>
 8012e82:	bf00      	nop
 8012e84:	20004a0c 	.word	0x20004a0c

08012e88 <_realloc_r>:
 8012e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e8c:	4680      	mov	r8, r0
 8012e8e:	4614      	mov	r4, r2
 8012e90:	460e      	mov	r6, r1
 8012e92:	b921      	cbnz	r1, 8012e9e <_realloc_r+0x16>
 8012e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e98:	4611      	mov	r1, r2
 8012e9a:	f7ff bdad 	b.w	80129f8 <_malloc_r>
 8012e9e:	b92a      	cbnz	r2, 8012eac <_realloc_r+0x24>
 8012ea0:	f7ff fd3e 	bl	8012920 <_free_r>
 8012ea4:	4625      	mov	r5, r4
 8012ea6:	4628      	mov	r0, r5
 8012ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eac:	f000 fc6a 	bl	8013784 <_malloc_usable_size_r>
 8012eb0:	4284      	cmp	r4, r0
 8012eb2:	4607      	mov	r7, r0
 8012eb4:	d802      	bhi.n	8012ebc <_realloc_r+0x34>
 8012eb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012eba:	d812      	bhi.n	8012ee2 <_realloc_r+0x5a>
 8012ebc:	4621      	mov	r1, r4
 8012ebe:	4640      	mov	r0, r8
 8012ec0:	f7ff fd9a 	bl	80129f8 <_malloc_r>
 8012ec4:	4605      	mov	r5, r0
 8012ec6:	2800      	cmp	r0, #0
 8012ec8:	d0ed      	beq.n	8012ea6 <_realloc_r+0x1e>
 8012eca:	42bc      	cmp	r4, r7
 8012ecc:	4622      	mov	r2, r4
 8012ece:	4631      	mov	r1, r6
 8012ed0:	bf28      	it	cs
 8012ed2:	463a      	movcs	r2, r7
 8012ed4:	f7fd fe64 	bl	8010ba0 <memcpy>
 8012ed8:	4631      	mov	r1, r6
 8012eda:	4640      	mov	r0, r8
 8012edc:	f7ff fd20 	bl	8012920 <_free_r>
 8012ee0:	e7e1      	b.n	8012ea6 <_realloc_r+0x1e>
 8012ee2:	4635      	mov	r5, r6
 8012ee4:	e7df      	b.n	8012ea6 <_realloc_r+0x1e>

08012ee6 <__sfputc_r>:
 8012ee6:	6893      	ldr	r3, [r2, #8]
 8012ee8:	3b01      	subs	r3, #1
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	b410      	push	{r4}
 8012eee:	6093      	str	r3, [r2, #8]
 8012ef0:	da08      	bge.n	8012f04 <__sfputc_r+0x1e>
 8012ef2:	6994      	ldr	r4, [r2, #24]
 8012ef4:	42a3      	cmp	r3, r4
 8012ef6:	db01      	blt.n	8012efc <__sfputc_r+0x16>
 8012ef8:	290a      	cmp	r1, #10
 8012efa:	d103      	bne.n	8012f04 <__sfputc_r+0x1e>
 8012efc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f00:	f000 b94a 	b.w	8013198 <__swbuf_r>
 8012f04:	6813      	ldr	r3, [r2, #0]
 8012f06:	1c58      	adds	r0, r3, #1
 8012f08:	6010      	str	r0, [r2, #0]
 8012f0a:	7019      	strb	r1, [r3, #0]
 8012f0c:	4608      	mov	r0, r1
 8012f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f12:	4770      	bx	lr

08012f14 <__sfputs_r>:
 8012f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f16:	4606      	mov	r6, r0
 8012f18:	460f      	mov	r7, r1
 8012f1a:	4614      	mov	r4, r2
 8012f1c:	18d5      	adds	r5, r2, r3
 8012f1e:	42ac      	cmp	r4, r5
 8012f20:	d101      	bne.n	8012f26 <__sfputs_r+0x12>
 8012f22:	2000      	movs	r0, #0
 8012f24:	e007      	b.n	8012f36 <__sfputs_r+0x22>
 8012f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f2a:	463a      	mov	r2, r7
 8012f2c:	4630      	mov	r0, r6
 8012f2e:	f7ff ffda 	bl	8012ee6 <__sfputc_r>
 8012f32:	1c43      	adds	r3, r0, #1
 8012f34:	d1f3      	bne.n	8012f1e <__sfputs_r+0xa>
 8012f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012f38 <_vfiprintf_r>:
 8012f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f3c:	460d      	mov	r5, r1
 8012f3e:	b09d      	sub	sp, #116	; 0x74
 8012f40:	4614      	mov	r4, r2
 8012f42:	4698      	mov	r8, r3
 8012f44:	4606      	mov	r6, r0
 8012f46:	b118      	cbz	r0, 8012f50 <_vfiprintf_r+0x18>
 8012f48:	6983      	ldr	r3, [r0, #24]
 8012f4a:	b90b      	cbnz	r3, 8012f50 <_vfiprintf_r+0x18>
 8012f4c:	f000 fb14 	bl	8013578 <__sinit>
 8012f50:	4b89      	ldr	r3, [pc, #548]	; (8013178 <_vfiprintf_r+0x240>)
 8012f52:	429d      	cmp	r5, r3
 8012f54:	d11b      	bne.n	8012f8e <_vfiprintf_r+0x56>
 8012f56:	6875      	ldr	r5, [r6, #4]
 8012f58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f5a:	07d9      	lsls	r1, r3, #31
 8012f5c:	d405      	bmi.n	8012f6a <_vfiprintf_r+0x32>
 8012f5e:	89ab      	ldrh	r3, [r5, #12]
 8012f60:	059a      	lsls	r2, r3, #22
 8012f62:	d402      	bmi.n	8012f6a <_vfiprintf_r+0x32>
 8012f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f66:	f000 fba5 	bl	80136b4 <__retarget_lock_acquire_recursive>
 8012f6a:	89ab      	ldrh	r3, [r5, #12]
 8012f6c:	071b      	lsls	r3, r3, #28
 8012f6e:	d501      	bpl.n	8012f74 <_vfiprintf_r+0x3c>
 8012f70:	692b      	ldr	r3, [r5, #16]
 8012f72:	b9eb      	cbnz	r3, 8012fb0 <_vfiprintf_r+0x78>
 8012f74:	4629      	mov	r1, r5
 8012f76:	4630      	mov	r0, r6
 8012f78:	f000 f96e 	bl	8013258 <__swsetup_r>
 8012f7c:	b1c0      	cbz	r0, 8012fb0 <_vfiprintf_r+0x78>
 8012f7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f80:	07dc      	lsls	r4, r3, #31
 8012f82:	d50e      	bpl.n	8012fa2 <_vfiprintf_r+0x6a>
 8012f84:	f04f 30ff 	mov.w	r0, #4294967295
 8012f88:	b01d      	add	sp, #116	; 0x74
 8012f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f8e:	4b7b      	ldr	r3, [pc, #492]	; (801317c <_vfiprintf_r+0x244>)
 8012f90:	429d      	cmp	r5, r3
 8012f92:	d101      	bne.n	8012f98 <_vfiprintf_r+0x60>
 8012f94:	68b5      	ldr	r5, [r6, #8]
 8012f96:	e7df      	b.n	8012f58 <_vfiprintf_r+0x20>
 8012f98:	4b79      	ldr	r3, [pc, #484]	; (8013180 <_vfiprintf_r+0x248>)
 8012f9a:	429d      	cmp	r5, r3
 8012f9c:	bf08      	it	eq
 8012f9e:	68f5      	ldreq	r5, [r6, #12]
 8012fa0:	e7da      	b.n	8012f58 <_vfiprintf_r+0x20>
 8012fa2:	89ab      	ldrh	r3, [r5, #12]
 8012fa4:	0598      	lsls	r0, r3, #22
 8012fa6:	d4ed      	bmi.n	8012f84 <_vfiprintf_r+0x4c>
 8012fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012faa:	f000 fb84 	bl	80136b6 <__retarget_lock_release_recursive>
 8012fae:	e7e9      	b.n	8012f84 <_vfiprintf_r+0x4c>
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8012fb4:	2320      	movs	r3, #32
 8012fb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012fba:	f8cd 800c 	str.w	r8, [sp, #12]
 8012fbe:	2330      	movs	r3, #48	; 0x30
 8012fc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013184 <_vfiprintf_r+0x24c>
 8012fc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012fc8:	f04f 0901 	mov.w	r9, #1
 8012fcc:	4623      	mov	r3, r4
 8012fce:	469a      	mov	sl, r3
 8012fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012fd4:	b10a      	cbz	r2, 8012fda <_vfiprintf_r+0xa2>
 8012fd6:	2a25      	cmp	r2, #37	; 0x25
 8012fd8:	d1f9      	bne.n	8012fce <_vfiprintf_r+0x96>
 8012fda:	ebba 0b04 	subs.w	fp, sl, r4
 8012fde:	d00b      	beq.n	8012ff8 <_vfiprintf_r+0xc0>
 8012fe0:	465b      	mov	r3, fp
 8012fe2:	4622      	mov	r2, r4
 8012fe4:	4629      	mov	r1, r5
 8012fe6:	4630      	mov	r0, r6
 8012fe8:	f7ff ff94 	bl	8012f14 <__sfputs_r>
 8012fec:	3001      	adds	r0, #1
 8012fee:	f000 80aa 	beq.w	8013146 <_vfiprintf_r+0x20e>
 8012ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ff4:	445a      	add	r2, fp
 8012ff6:	9209      	str	r2, [sp, #36]	; 0x24
 8012ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	f000 80a2 	beq.w	8013146 <_vfiprintf_r+0x20e>
 8013002:	2300      	movs	r3, #0
 8013004:	f04f 32ff 	mov.w	r2, #4294967295
 8013008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801300c:	f10a 0a01 	add.w	sl, sl, #1
 8013010:	9304      	str	r3, [sp, #16]
 8013012:	9307      	str	r3, [sp, #28]
 8013014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013018:	931a      	str	r3, [sp, #104]	; 0x68
 801301a:	4654      	mov	r4, sl
 801301c:	2205      	movs	r2, #5
 801301e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013022:	4858      	ldr	r0, [pc, #352]	; (8013184 <_vfiprintf_r+0x24c>)
 8013024:	f7ed f8dc 	bl	80001e0 <memchr>
 8013028:	9a04      	ldr	r2, [sp, #16]
 801302a:	b9d8      	cbnz	r0, 8013064 <_vfiprintf_r+0x12c>
 801302c:	06d1      	lsls	r1, r2, #27
 801302e:	bf44      	itt	mi
 8013030:	2320      	movmi	r3, #32
 8013032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013036:	0713      	lsls	r3, r2, #28
 8013038:	bf44      	itt	mi
 801303a:	232b      	movmi	r3, #43	; 0x2b
 801303c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013040:	f89a 3000 	ldrb.w	r3, [sl]
 8013044:	2b2a      	cmp	r3, #42	; 0x2a
 8013046:	d015      	beq.n	8013074 <_vfiprintf_r+0x13c>
 8013048:	9a07      	ldr	r2, [sp, #28]
 801304a:	4654      	mov	r4, sl
 801304c:	2000      	movs	r0, #0
 801304e:	f04f 0c0a 	mov.w	ip, #10
 8013052:	4621      	mov	r1, r4
 8013054:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013058:	3b30      	subs	r3, #48	; 0x30
 801305a:	2b09      	cmp	r3, #9
 801305c:	d94e      	bls.n	80130fc <_vfiprintf_r+0x1c4>
 801305e:	b1b0      	cbz	r0, 801308e <_vfiprintf_r+0x156>
 8013060:	9207      	str	r2, [sp, #28]
 8013062:	e014      	b.n	801308e <_vfiprintf_r+0x156>
 8013064:	eba0 0308 	sub.w	r3, r0, r8
 8013068:	fa09 f303 	lsl.w	r3, r9, r3
 801306c:	4313      	orrs	r3, r2
 801306e:	9304      	str	r3, [sp, #16]
 8013070:	46a2      	mov	sl, r4
 8013072:	e7d2      	b.n	801301a <_vfiprintf_r+0xe2>
 8013074:	9b03      	ldr	r3, [sp, #12]
 8013076:	1d19      	adds	r1, r3, #4
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	9103      	str	r1, [sp, #12]
 801307c:	2b00      	cmp	r3, #0
 801307e:	bfbb      	ittet	lt
 8013080:	425b      	neglt	r3, r3
 8013082:	f042 0202 	orrlt.w	r2, r2, #2
 8013086:	9307      	strge	r3, [sp, #28]
 8013088:	9307      	strlt	r3, [sp, #28]
 801308a:	bfb8      	it	lt
 801308c:	9204      	strlt	r2, [sp, #16]
 801308e:	7823      	ldrb	r3, [r4, #0]
 8013090:	2b2e      	cmp	r3, #46	; 0x2e
 8013092:	d10c      	bne.n	80130ae <_vfiprintf_r+0x176>
 8013094:	7863      	ldrb	r3, [r4, #1]
 8013096:	2b2a      	cmp	r3, #42	; 0x2a
 8013098:	d135      	bne.n	8013106 <_vfiprintf_r+0x1ce>
 801309a:	9b03      	ldr	r3, [sp, #12]
 801309c:	1d1a      	adds	r2, r3, #4
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	9203      	str	r2, [sp, #12]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	bfb8      	it	lt
 80130a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80130aa:	3402      	adds	r4, #2
 80130ac:	9305      	str	r3, [sp, #20]
 80130ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013194 <_vfiprintf_r+0x25c>
 80130b2:	7821      	ldrb	r1, [r4, #0]
 80130b4:	2203      	movs	r2, #3
 80130b6:	4650      	mov	r0, sl
 80130b8:	f7ed f892 	bl	80001e0 <memchr>
 80130bc:	b140      	cbz	r0, 80130d0 <_vfiprintf_r+0x198>
 80130be:	2340      	movs	r3, #64	; 0x40
 80130c0:	eba0 000a 	sub.w	r0, r0, sl
 80130c4:	fa03 f000 	lsl.w	r0, r3, r0
 80130c8:	9b04      	ldr	r3, [sp, #16]
 80130ca:	4303      	orrs	r3, r0
 80130cc:	3401      	adds	r4, #1
 80130ce:	9304      	str	r3, [sp, #16]
 80130d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130d4:	482c      	ldr	r0, [pc, #176]	; (8013188 <_vfiprintf_r+0x250>)
 80130d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80130da:	2206      	movs	r2, #6
 80130dc:	f7ed f880 	bl	80001e0 <memchr>
 80130e0:	2800      	cmp	r0, #0
 80130e2:	d03f      	beq.n	8013164 <_vfiprintf_r+0x22c>
 80130e4:	4b29      	ldr	r3, [pc, #164]	; (801318c <_vfiprintf_r+0x254>)
 80130e6:	bb1b      	cbnz	r3, 8013130 <_vfiprintf_r+0x1f8>
 80130e8:	9b03      	ldr	r3, [sp, #12]
 80130ea:	3307      	adds	r3, #7
 80130ec:	f023 0307 	bic.w	r3, r3, #7
 80130f0:	3308      	adds	r3, #8
 80130f2:	9303      	str	r3, [sp, #12]
 80130f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130f6:	443b      	add	r3, r7
 80130f8:	9309      	str	r3, [sp, #36]	; 0x24
 80130fa:	e767      	b.n	8012fcc <_vfiprintf_r+0x94>
 80130fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8013100:	460c      	mov	r4, r1
 8013102:	2001      	movs	r0, #1
 8013104:	e7a5      	b.n	8013052 <_vfiprintf_r+0x11a>
 8013106:	2300      	movs	r3, #0
 8013108:	3401      	adds	r4, #1
 801310a:	9305      	str	r3, [sp, #20]
 801310c:	4619      	mov	r1, r3
 801310e:	f04f 0c0a 	mov.w	ip, #10
 8013112:	4620      	mov	r0, r4
 8013114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013118:	3a30      	subs	r2, #48	; 0x30
 801311a:	2a09      	cmp	r2, #9
 801311c:	d903      	bls.n	8013126 <_vfiprintf_r+0x1ee>
 801311e:	2b00      	cmp	r3, #0
 8013120:	d0c5      	beq.n	80130ae <_vfiprintf_r+0x176>
 8013122:	9105      	str	r1, [sp, #20]
 8013124:	e7c3      	b.n	80130ae <_vfiprintf_r+0x176>
 8013126:	fb0c 2101 	mla	r1, ip, r1, r2
 801312a:	4604      	mov	r4, r0
 801312c:	2301      	movs	r3, #1
 801312e:	e7f0      	b.n	8013112 <_vfiprintf_r+0x1da>
 8013130:	ab03      	add	r3, sp, #12
 8013132:	9300      	str	r3, [sp, #0]
 8013134:	462a      	mov	r2, r5
 8013136:	4b16      	ldr	r3, [pc, #88]	; (8013190 <_vfiprintf_r+0x258>)
 8013138:	a904      	add	r1, sp, #16
 801313a:	4630      	mov	r0, r6
 801313c:	f7fd fde6 	bl	8010d0c <_printf_float>
 8013140:	4607      	mov	r7, r0
 8013142:	1c78      	adds	r0, r7, #1
 8013144:	d1d6      	bne.n	80130f4 <_vfiprintf_r+0x1bc>
 8013146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013148:	07d9      	lsls	r1, r3, #31
 801314a:	d405      	bmi.n	8013158 <_vfiprintf_r+0x220>
 801314c:	89ab      	ldrh	r3, [r5, #12]
 801314e:	059a      	lsls	r2, r3, #22
 8013150:	d402      	bmi.n	8013158 <_vfiprintf_r+0x220>
 8013152:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013154:	f000 faaf 	bl	80136b6 <__retarget_lock_release_recursive>
 8013158:	89ab      	ldrh	r3, [r5, #12]
 801315a:	065b      	lsls	r3, r3, #25
 801315c:	f53f af12 	bmi.w	8012f84 <_vfiprintf_r+0x4c>
 8013160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013162:	e711      	b.n	8012f88 <_vfiprintf_r+0x50>
 8013164:	ab03      	add	r3, sp, #12
 8013166:	9300      	str	r3, [sp, #0]
 8013168:	462a      	mov	r2, r5
 801316a:	4b09      	ldr	r3, [pc, #36]	; (8013190 <_vfiprintf_r+0x258>)
 801316c:	a904      	add	r1, sp, #16
 801316e:	4630      	mov	r0, r6
 8013170:	f7fe f870 	bl	8011254 <_printf_i>
 8013174:	e7e4      	b.n	8013140 <_vfiprintf_r+0x208>
 8013176:	bf00      	nop
 8013178:	08016364 	.word	0x08016364
 801317c:	08016384 	.word	0x08016384
 8013180:	08016344 	.word	0x08016344
 8013184:	080161ec 	.word	0x080161ec
 8013188:	080161f6 	.word	0x080161f6
 801318c:	08010d0d 	.word	0x08010d0d
 8013190:	08012f15 	.word	0x08012f15
 8013194:	080161f2 	.word	0x080161f2

08013198 <__swbuf_r>:
 8013198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801319a:	460e      	mov	r6, r1
 801319c:	4614      	mov	r4, r2
 801319e:	4605      	mov	r5, r0
 80131a0:	b118      	cbz	r0, 80131aa <__swbuf_r+0x12>
 80131a2:	6983      	ldr	r3, [r0, #24]
 80131a4:	b90b      	cbnz	r3, 80131aa <__swbuf_r+0x12>
 80131a6:	f000 f9e7 	bl	8013578 <__sinit>
 80131aa:	4b21      	ldr	r3, [pc, #132]	; (8013230 <__swbuf_r+0x98>)
 80131ac:	429c      	cmp	r4, r3
 80131ae:	d12b      	bne.n	8013208 <__swbuf_r+0x70>
 80131b0:	686c      	ldr	r4, [r5, #4]
 80131b2:	69a3      	ldr	r3, [r4, #24]
 80131b4:	60a3      	str	r3, [r4, #8]
 80131b6:	89a3      	ldrh	r3, [r4, #12]
 80131b8:	071a      	lsls	r2, r3, #28
 80131ba:	d52f      	bpl.n	801321c <__swbuf_r+0x84>
 80131bc:	6923      	ldr	r3, [r4, #16]
 80131be:	b36b      	cbz	r3, 801321c <__swbuf_r+0x84>
 80131c0:	6923      	ldr	r3, [r4, #16]
 80131c2:	6820      	ldr	r0, [r4, #0]
 80131c4:	1ac0      	subs	r0, r0, r3
 80131c6:	6963      	ldr	r3, [r4, #20]
 80131c8:	b2f6      	uxtb	r6, r6
 80131ca:	4283      	cmp	r3, r0
 80131cc:	4637      	mov	r7, r6
 80131ce:	dc04      	bgt.n	80131da <__swbuf_r+0x42>
 80131d0:	4621      	mov	r1, r4
 80131d2:	4628      	mov	r0, r5
 80131d4:	f000 f93c 	bl	8013450 <_fflush_r>
 80131d8:	bb30      	cbnz	r0, 8013228 <__swbuf_r+0x90>
 80131da:	68a3      	ldr	r3, [r4, #8]
 80131dc:	3b01      	subs	r3, #1
 80131de:	60a3      	str	r3, [r4, #8]
 80131e0:	6823      	ldr	r3, [r4, #0]
 80131e2:	1c5a      	adds	r2, r3, #1
 80131e4:	6022      	str	r2, [r4, #0]
 80131e6:	701e      	strb	r6, [r3, #0]
 80131e8:	6963      	ldr	r3, [r4, #20]
 80131ea:	3001      	adds	r0, #1
 80131ec:	4283      	cmp	r3, r0
 80131ee:	d004      	beq.n	80131fa <__swbuf_r+0x62>
 80131f0:	89a3      	ldrh	r3, [r4, #12]
 80131f2:	07db      	lsls	r3, r3, #31
 80131f4:	d506      	bpl.n	8013204 <__swbuf_r+0x6c>
 80131f6:	2e0a      	cmp	r6, #10
 80131f8:	d104      	bne.n	8013204 <__swbuf_r+0x6c>
 80131fa:	4621      	mov	r1, r4
 80131fc:	4628      	mov	r0, r5
 80131fe:	f000 f927 	bl	8013450 <_fflush_r>
 8013202:	b988      	cbnz	r0, 8013228 <__swbuf_r+0x90>
 8013204:	4638      	mov	r0, r7
 8013206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013208:	4b0a      	ldr	r3, [pc, #40]	; (8013234 <__swbuf_r+0x9c>)
 801320a:	429c      	cmp	r4, r3
 801320c:	d101      	bne.n	8013212 <__swbuf_r+0x7a>
 801320e:	68ac      	ldr	r4, [r5, #8]
 8013210:	e7cf      	b.n	80131b2 <__swbuf_r+0x1a>
 8013212:	4b09      	ldr	r3, [pc, #36]	; (8013238 <__swbuf_r+0xa0>)
 8013214:	429c      	cmp	r4, r3
 8013216:	bf08      	it	eq
 8013218:	68ec      	ldreq	r4, [r5, #12]
 801321a:	e7ca      	b.n	80131b2 <__swbuf_r+0x1a>
 801321c:	4621      	mov	r1, r4
 801321e:	4628      	mov	r0, r5
 8013220:	f000 f81a 	bl	8013258 <__swsetup_r>
 8013224:	2800      	cmp	r0, #0
 8013226:	d0cb      	beq.n	80131c0 <__swbuf_r+0x28>
 8013228:	f04f 37ff 	mov.w	r7, #4294967295
 801322c:	e7ea      	b.n	8013204 <__swbuf_r+0x6c>
 801322e:	bf00      	nop
 8013230:	08016364 	.word	0x08016364
 8013234:	08016384 	.word	0x08016384
 8013238:	08016344 	.word	0x08016344

0801323c <__ascii_wctomb>:
 801323c:	b149      	cbz	r1, 8013252 <__ascii_wctomb+0x16>
 801323e:	2aff      	cmp	r2, #255	; 0xff
 8013240:	bf85      	ittet	hi
 8013242:	238a      	movhi	r3, #138	; 0x8a
 8013244:	6003      	strhi	r3, [r0, #0]
 8013246:	700a      	strbls	r2, [r1, #0]
 8013248:	f04f 30ff 	movhi.w	r0, #4294967295
 801324c:	bf98      	it	ls
 801324e:	2001      	movls	r0, #1
 8013250:	4770      	bx	lr
 8013252:	4608      	mov	r0, r1
 8013254:	4770      	bx	lr
	...

08013258 <__swsetup_r>:
 8013258:	4b32      	ldr	r3, [pc, #200]	; (8013324 <__swsetup_r+0xcc>)
 801325a:	b570      	push	{r4, r5, r6, lr}
 801325c:	681d      	ldr	r5, [r3, #0]
 801325e:	4606      	mov	r6, r0
 8013260:	460c      	mov	r4, r1
 8013262:	b125      	cbz	r5, 801326e <__swsetup_r+0x16>
 8013264:	69ab      	ldr	r3, [r5, #24]
 8013266:	b913      	cbnz	r3, 801326e <__swsetup_r+0x16>
 8013268:	4628      	mov	r0, r5
 801326a:	f000 f985 	bl	8013578 <__sinit>
 801326e:	4b2e      	ldr	r3, [pc, #184]	; (8013328 <__swsetup_r+0xd0>)
 8013270:	429c      	cmp	r4, r3
 8013272:	d10f      	bne.n	8013294 <__swsetup_r+0x3c>
 8013274:	686c      	ldr	r4, [r5, #4]
 8013276:	89a3      	ldrh	r3, [r4, #12]
 8013278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801327c:	0719      	lsls	r1, r3, #28
 801327e:	d42c      	bmi.n	80132da <__swsetup_r+0x82>
 8013280:	06dd      	lsls	r5, r3, #27
 8013282:	d411      	bmi.n	80132a8 <__swsetup_r+0x50>
 8013284:	2309      	movs	r3, #9
 8013286:	6033      	str	r3, [r6, #0]
 8013288:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801328c:	81a3      	strh	r3, [r4, #12]
 801328e:	f04f 30ff 	mov.w	r0, #4294967295
 8013292:	e03e      	b.n	8013312 <__swsetup_r+0xba>
 8013294:	4b25      	ldr	r3, [pc, #148]	; (801332c <__swsetup_r+0xd4>)
 8013296:	429c      	cmp	r4, r3
 8013298:	d101      	bne.n	801329e <__swsetup_r+0x46>
 801329a:	68ac      	ldr	r4, [r5, #8]
 801329c:	e7eb      	b.n	8013276 <__swsetup_r+0x1e>
 801329e:	4b24      	ldr	r3, [pc, #144]	; (8013330 <__swsetup_r+0xd8>)
 80132a0:	429c      	cmp	r4, r3
 80132a2:	bf08      	it	eq
 80132a4:	68ec      	ldreq	r4, [r5, #12]
 80132a6:	e7e6      	b.n	8013276 <__swsetup_r+0x1e>
 80132a8:	0758      	lsls	r0, r3, #29
 80132aa:	d512      	bpl.n	80132d2 <__swsetup_r+0x7a>
 80132ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132ae:	b141      	cbz	r1, 80132c2 <__swsetup_r+0x6a>
 80132b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132b4:	4299      	cmp	r1, r3
 80132b6:	d002      	beq.n	80132be <__swsetup_r+0x66>
 80132b8:	4630      	mov	r0, r6
 80132ba:	f7ff fb31 	bl	8012920 <_free_r>
 80132be:	2300      	movs	r3, #0
 80132c0:	6363      	str	r3, [r4, #52]	; 0x34
 80132c2:	89a3      	ldrh	r3, [r4, #12]
 80132c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80132c8:	81a3      	strh	r3, [r4, #12]
 80132ca:	2300      	movs	r3, #0
 80132cc:	6063      	str	r3, [r4, #4]
 80132ce:	6923      	ldr	r3, [r4, #16]
 80132d0:	6023      	str	r3, [r4, #0]
 80132d2:	89a3      	ldrh	r3, [r4, #12]
 80132d4:	f043 0308 	orr.w	r3, r3, #8
 80132d8:	81a3      	strh	r3, [r4, #12]
 80132da:	6923      	ldr	r3, [r4, #16]
 80132dc:	b94b      	cbnz	r3, 80132f2 <__swsetup_r+0x9a>
 80132de:	89a3      	ldrh	r3, [r4, #12]
 80132e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80132e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80132e8:	d003      	beq.n	80132f2 <__swsetup_r+0x9a>
 80132ea:	4621      	mov	r1, r4
 80132ec:	4630      	mov	r0, r6
 80132ee:	f000 fa09 	bl	8013704 <__smakebuf_r>
 80132f2:	89a0      	ldrh	r0, [r4, #12]
 80132f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80132f8:	f010 0301 	ands.w	r3, r0, #1
 80132fc:	d00a      	beq.n	8013314 <__swsetup_r+0xbc>
 80132fe:	2300      	movs	r3, #0
 8013300:	60a3      	str	r3, [r4, #8]
 8013302:	6963      	ldr	r3, [r4, #20]
 8013304:	425b      	negs	r3, r3
 8013306:	61a3      	str	r3, [r4, #24]
 8013308:	6923      	ldr	r3, [r4, #16]
 801330a:	b943      	cbnz	r3, 801331e <__swsetup_r+0xc6>
 801330c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013310:	d1ba      	bne.n	8013288 <__swsetup_r+0x30>
 8013312:	bd70      	pop	{r4, r5, r6, pc}
 8013314:	0781      	lsls	r1, r0, #30
 8013316:	bf58      	it	pl
 8013318:	6963      	ldrpl	r3, [r4, #20]
 801331a:	60a3      	str	r3, [r4, #8]
 801331c:	e7f4      	b.n	8013308 <__swsetup_r+0xb0>
 801331e:	2000      	movs	r0, #0
 8013320:	e7f7      	b.n	8013312 <__swsetup_r+0xba>
 8013322:	bf00      	nop
 8013324:	20000078 	.word	0x20000078
 8013328:	08016364 	.word	0x08016364
 801332c:	08016384 	.word	0x08016384
 8013330:	08016344 	.word	0x08016344

08013334 <abort>:
 8013334:	b508      	push	{r3, lr}
 8013336:	2006      	movs	r0, #6
 8013338:	f000 fa54 	bl	80137e4 <raise>
 801333c:	2001      	movs	r0, #1
 801333e:	f7f0 ffef 	bl	8004320 <_exit>
	...

08013344 <__sflush_r>:
 8013344:	898a      	ldrh	r2, [r1, #12]
 8013346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801334a:	4605      	mov	r5, r0
 801334c:	0710      	lsls	r0, r2, #28
 801334e:	460c      	mov	r4, r1
 8013350:	d458      	bmi.n	8013404 <__sflush_r+0xc0>
 8013352:	684b      	ldr	r3, [r1, #4]
 8013354:	2b00      	cmp	r3, #0
 8013356:	dc05      	bgt.n	8013364 <__sflush_r+0x20>
 8013358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801335a:	2b00      	cmp	r3, #0
 801335c:	dc02      	bgt.n	8013364 <__sflush_r+0x20>
 801335e:	2000      	movs	r0, #0
 8013360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013366:	2e00      	cmp	r6, #0
 8013368:	d0f9      	beq.n	801335e <__sflush_r+0x1a>
 801336a:	2300      	movs	r3, #0
 801336c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013370:	682f      	ldr	r7, [r5, #0]
 8013372:	602b      	str	r3, [r5, #0]
 8013374:	d032      	beq.n	80133dc <__sflush_r+0x98>
 8013376:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013378:	89a3      	ldrh	r3, [r4, #12]
 801337a:	075a      	lsls	r2, r3, #29
 801337c:	d505      	bpl.n	801338a <__sflush_r+0x46>
 801337e:	6863      	ldr	r3, [r4, #4]
 8013380:	1ac0      	subs	r0, r0, r3
 8013382:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013384:	b10b      	cbz	r3, 801338a <__sflush_r+0x46>
 8013386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013388:	1ac0      	subs	r0, r0, r3
 801338a:	2300      	movs	r3, #0
 801338c:	4602      	mov	r2, r0
 801338e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013390:	6a21      	ldr	r1, [r4, #32]
 8013392:	4628      	mov	r0, r5
 8013394:	47b0      	blx	r6
 8013396:	1c43      	adds	r3, r0, #1
 8013398:	89a3      	ldrh	r3, [r4, #12]
 801339a:	d106      	bne.n	80133aa <__sflush_r+0x66>
 801339c:	6829      	ldr	r1, [r5, #0]
 801339e:	291d      	cmp	r1, #29
 80133a0:	d82c      	bhi.n	80133fc <__sflush_r+0xb8>
 80133a2:	4a2a      	ldr	r2, [pc, #168]	; (801344c <__sflush_r+0x108>)
 80133a4:	40ca      	lsrs	r2, r1
 80133a6:	07d6      	lsls	r6, r2, #31
 80133a8:	d528      	bpl.n	80133fc <__sflush_r+0xb8>
 80133aa:	2200      	movs	r2, #0
 80133ac:	6062      	str	r2, [r4, #4]
 80133ae:	04d9      	lsls	r1, r3, #19
 80133b0:	6922      	ldr	r2, [r4, #16]
 80133b2:	6022      	str	r2, [r4, #0]
 80133b4:	d504      	bpl.n	80133c0 <__sflush_r+0x7c>
 80133b6:	1c42      	adds	r2, r0, #1
 80133b8:	d101      	bne.n	80133be <__sflush_r+0x7a>
 80133ba:	682b      	ldr	r3, [r5, #0]
 80133bc:	b903      	cbnz	r3, 80133c0 <__sflush_r+0x7c>
 80133be:	6560      	str	r0, [r4, #84]	; 0x54
 80133c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80133c2:	602f      	str	r7, [r5, #0]
 80133c4:	2900      	cmp	r1, #0
 80133c6:	d0ca      	beq.n	801335e <__sflush_r+0x1a>
 80133c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80133cc:	4299      	cmp	r1, r3
 80133ce:	d002      	beq.n	80133d6 <__sflush_r+0x92>
 80133d0:	4628      	mov	r0, r5
 80133d2:	f7ff faa5 	bl	8012920 <_free_r>
 80133d6:	2000      	movs	r0, #0
 80133d8:	6360      	str	r0, [r4, #52]	; 0x34
 80133da:	e7c1      	b.n	8013360 <__sflush_r+0x1c>
 80133dc:	6a21      	ldr	r1, [r4, #32]
 80133de:	2301      	movs	r3, #1
 80133e0:	4628      	mov	r0, r5
 80133e2:	47b0      	blx	r6
 80133e4:	1c41      	adds	r1, r0, #1
 80133e6:	d1c7      	bne.n	8013378 <__sflush_r+0x34>
 80133e8:	682b      	ldr	r3, [r5, #0]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d0c4      	beq.n	8013378 <__sflush_r+0x34>
 80133ee:	2b1d      	cmp	r3, #29
 80133f0:	d001      	beq.n	80133f6 <__sflush_r+0xb2>
 80133f2:	2b16      	cmp	r3, #22
 80133f4:	d101      	bne.n	80133fa <__sflush_r+0xb6>
 80133f6:	602f      	str	r7, [r5, #0]
 80133f8:	e7b1      	b.n	801335e <__sflush_r+0x1a>
 80133fa:	89a3      	ldrh	r3, [r4, #12]
 80133fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013400:	81a3      	strh	r3, [r4, #12]
 8013402:	e7ad      	b.n	8013360 <__sflush_r+0x1c>
 8013404:	690f      	ldr	r7, [r1, #16]
 8013406:	2f00      	cmp	r7, #0
 8013408:	d0a9      	beq.n	801335e <__sflush_r+0x1a>
 801340a:	0793      	lsls	r3, r2, #30
 801340c:	680e      	ldr	r6, [r1, #0]
 801340e:	bf08      	it	eq
 8013410:	694b      	ldreq	r3, [r1, #20]
 8013412:	600f      	str	r7, [r1, #0]
 8013414:	bf18      	it	ne
 8013416:	2300      	movne	r3, #0
 8013418:	eba6 0807 	sub.w	r8, r6, r7
 801341c:	608b      	str	r3, [r1, #8]
 801341e:	f1b8 0f00 	cmp.w	r8, #0
 8013422:	dd9c      	ble.n	801335e <__sflush_r+0x1a>
 8013424:	6a21      	ldr	r1, [r4, #32]
 8013426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013428:	4643      	mov	r3, r8
 801342a:	463a      	mov	r2, r7
 801342c:	4628      	mov	r0, r5
 801342e:	47b0      	blx	r6
 8013430:	2800      	cmp	r0, #0
 8013432:	dc06      	bgt.n	8013442 <__sflush_r+0xfe>
 8013434:	89a3      	ldrh	r3, [r4, #12]
 8013436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801343a:	81a3      	strh	r3, [r4, #12]
 801343c:	f04f 30ff 	mov.w	r0, #4294967295
 8013440:	e78e      	b.n	8013360 <__sflush_r+0x1c>
 8013442:	4407      	add	r7, r0
 8013444:	eba8 0800 	sub.w	r8, r8, r0
 8013448:	e7e9      	b.n	801341e <__sflush_r+0xda>
 801344a:	bf00      	nop
 801344c:	20400001 	.word	0x20400001

08013450 <_fflush_r>:
 8013450:	b538      	push	{r3, r4, r5, lr}
 8013452:	690b      	ldr	r3, [r1, #16]
 8013454:	4605      	mov	r5, r0
 8013456:	460c      	mov	r4, r1
 8013458:	b913      	cbnz	r3, 8013460 <_fflush_r+0x10>
 801345a:	2500      	movs	r5, #0
 801345c:	4628      	mov	r0, r5
 801345e:	bd38      	pop	{r3, r4, r5, pc}
 8013460:	b118      	cbz	r0, 801346a <_fflush_r+0x1a>
 8013462:	6983      	ldr	r3, [r0, #24]
 8013464:	b90b      	cbnz	r3, 801346a <_fflush_r+0x1a>
 8013466:	f000 f887 	bl	8013578 <__sinit>
 801346a:	4b14      	ldr	r3, [pc, #80]	; (80134bc <_fflush_r+0x6c>)
 801346c:	429c      	cmp	r4, r3
 801346e:	d11b      	bne.n	80134a8 <_fflush_r+0x58>
 8013470:	686c      	ldr	r4, [r5, #4]
 8013472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d0ef      	beq.n	801345a <_fflush_r+0xa>
 801347a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801347c:	07d0      	lsls	r0, r2, #31
 801347e:	d404      	bmi.n	801348a <_fflush_r+0x3a>
 8013480:	0599      	lsls	r1, r3, #22
 8013482:	d402      	bmi.n	801348a <_fflush_r+0x3a>
 8013484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013486:	f000 f915 	bl	80136b4 <__retarget_lock_acquire_recursive>
 801348a:	4628      	mov	r0, r5
 801348c:	4621      	mov	r1, r4
 801348e:	f7ff ff59 	bl	8013344 <__sflush_r>
 8013492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013494:	07da      	lsls	r2, r3, #31
 8013496:	4605      	mov	r5, r0
 8013498:	d4e0      	bmi.n	801345c <_fflush_r+0xc>
 801349a:	89a3      	ldrh	r3, [r4, #12]
 801349c:	059b      	lsls	r3, r3, #22
 801349e:	d4dd      	bmi.n	801345c <_fflush_r+0xc>
 80134a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80134a2:	f000 f908 	bl	80136b6 <__retarget_lock_release_recursive>
 80134a6:	e7d9      	b.n	801345c <_fflush_r+0xc>
 80134a8:	4b05      	ldr	r3, [pc, #20]	; (80134c0 <_fflush_r+0x70>)
 80134aa:	429c      	cmp	r4, r3
 80134ac:	d101      	bne.n	80134b2 <_fflush_r+0x62>
 80134ae:	68ac      	ldr	r4, [r5, #8]
 80134b0:	e7df      	b.n	8013472 <_fflush_r+0x22>
 80134b2:	4b04      	ldr	r3, [pc, #16]	; (80134c4 <_fflush_r+0x74>)
 80134b4:	429c      	cmp	r4, r3
 80134b6:	bf08      	it	eq
 80134b8:	68ec      	ldreq	r4, [r5, #12]
 80134ba:	e7da      	b.n	8013472 <_fflush_r+0x22>
 80134bc:	08016364 	.word	0x08016364
 80134c0:	08016384 	.word	0x08016384
 80134c4:	08016344 	.word	0x08016344

080134c8 <std>:
 80134c8:	2300      	movs	r3, #0
 80134ca:	b510      	push	{r4, lr}
 80134cc:	4604      	mov	r4, r0
 80134ce:	e9c0 3300 	strd	r3, r3, [r0]
 80134d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80134d6:	6083      	str	r3, [r0, #8]
 80134d8:	8181      	strh	r1, [r0, #12]
 80134da:	6643      	str	r3, [r0, #100]	; 0x64
 80134dc:	81c2      	strh	r2, [r0, #14]
 80134de:	6183      	str	r3, [r0, #24]
 80134e0:	4619      	mov	r1, r3
 80134e2:	2208      	movs	r2, #8
 80134e4:	305c      	adds	r0, #92	; 0x5c
 80134e6:	f7fd fb69 	bl	8010bbc <memset>
 80134ea:	4b05      	ldr	r3, [pc, #20]	; (8013500 <std+0x38>)
 80134ec:	6263      	str	r3, [r4, #36]	; 0x24
 80134ee:	4b05      	ldr	r3, [pc, #20]	; (8013504 <std+0x3c>)
 80134f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80134f2:	4b05      	ldr	r3, [pc, #20]	; (8013508 <std+0x40>)
 80134f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80134f6:	4b05      	ldr	r3, [pc, #20]	; (801350c <std+0x44>)
 80134f8:	6224      	str	r4, [r4, #32]
 80134fa:	6323      	str	r3, [r4, #48]	; 0x30
 80134fc:	bd10      	pop	{r4, pc}
 80134fe:	bf00      	nop
 8013500:	0801381d 	.word	0x0801381d
 8013504:	0801383f 	.word	0x0801383f
 8013508:	08013877 	.word	0x08013877
 801350c:	0801389b 	.word	0x0801389b

08013510 <_cleanup_r>:
 8013510:	4901      	ldr	r1, [pc, #4]	; (8013518 <_cleanup_r+0x8>)
 8013512:	f000 b8af 	b.w	8013674 <_fwalk_reent>
 8013516:	bf00      	nop
 8013518:	08013451 	.word	0x08013451

0801351c <__sfmoreglue>:
 801351c:	b570      	push	{r4, r5, r6, lr}
 801351e:	2268      	movs	r2, #104	; 0x68
 8013520:	1e4d      	subs	r5, r1, #1
 8013522:	4355      	muls	r5, r2
 8013524:	460e      	mov	r6, r1
 8013526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801352a:	f7ff fa65 	bl	80129f8 <_malloc_r>
 801352e:	4604      	mov	r4, r0
 8013530:	b140      	cbz	r0, 8013544 <__sfmoreglue+0x28>
 8013532:	2100      	movs	r1, #0
 8013534:	e9c0 1600 	strd	r1, r6, [r0]
 8013538:	300c      	adds	r0, #12
 801353a:	60a0      	str	r0, [r4, #8]
 801353c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013540:	f7fd fb3c 	bl	8010bbc <memset>
 8013544:	4620      	mov	r0, r4
 8013546:	bd70      	pop	{r4, r5, r6, pc}

08013548 <__sfp_lock_acquire>:
 8013548:	4801      	ldr	r0, [pc, #4]	; (8013550 <__sfp_lock_acquire+0x8>)
 801354a:	f000 b8b3 	b.w	80136b4 <__retarget_lock_acquire_recursive>
 801354e:	bf00      	nop
 8013550:	20004a0d 	.word	0x20004a0d

08013554 <__sfp_lock_release>:
 8013554:	4801      	ldr	r0, [pc, #4]	; (801355c <__sfp_lock_release+0x8>)
 8013556:	f000 b8ae 	b.w	80136b6 <__retarget_lock_release_recursive>
 801355a:	bf00      	nop
 801355c:	20004a0d 	.word	0x20004a0d

08013560 <__sinit_lock_acquire>:
 8013560:	4801      	ldr	r0, [pc, #4]	; (8013568 <__sinit_lock_acquire+0x8>)
 8013562:	f000 b8a7 	b.w	80136b4 <__retarget_lock_acquire_recursive>
 8013566:	bf00      	nop
 8013568:	20004a0e 	.word	0x20004a0e

0801356c <__sinit_lock_release>:
 801356c:	4801      	ldr	r0, [pc, #4]	; (8013574 <__sinit_lock_release+0x8>)
 801356e:	f000 b8a2 	b.w	80136b6 <__retarget_lock_release_recursive>
 8013572:	bf00      	nop
 8013574:	20004a0e 	.word	0x20004a0e

08013578 <__sinit>:
 8013578:	b510      	push	{r4, lr}
 801357a:	4604      	mov	r4, r0
 801357c:	f7ff fff0 	bl	8013560 <__sinit_lock_acquire>
 8013580:	69a3      	ldr	r3, [r4, #24]
 8013582:	b11b      	cbz	r3, 801358c <__sinit+0x14>
 8013584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013588:	f7ff bff0 	b.w	801356c <__sinit_lock_release>
 801358c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013590:	6523      	str	r3, [r4, #80]	; 0x50
 8013592:	4b13      	ldr	r3, [pc, #76]	; (80135e0 <__sinit+0x68>)
 8013594:	4a13      	ldr	r2, [pc, #76]	; (80135e4 <__sinit+0x6c>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	62a2      	str	r2, [r4, #40]	; 0x28
 801359a:	42a3      	cmp	r3, r4
 801359c:	bf04      	itt	eq
 801359e:	2301      	moveq	r3, #1
 80135a0:	61a3      	streq	r3, [r4, #24]
 80135a2:	4620      	mov	r0, r4
 80135a4:	f000 f820 	bl	80135e8 <__sfp>
 80135a8:	6060      	str	r0, [r4, #4]
 80135aa:	4620      	mov	r0, r4
 80135ac:	f000 f81c 	bl	80135e8 <__sfp>
 80135b0:	60a0      	str	r0, [r4, #8]
 80135b2:	4620      	mov	r0, r4
 80135b4:	f000 f818 	bl	80135e8 <__sfp>
 80135b8:	2200      	movs	r2, #0
 80135ba:	60e0      	str	r0, [r4, #12]
 80135bc:	2104      	movs	r1, #4
 80135be:	6860      	ldr	r0, [r4, #4]
 80135c0:	f7ff ff82 	bl	80134c8 <std>
 80135c4:	68a0      	ldr	r0, [r4, #8]
 80135c6:	2201      	movs	r2, #1
 80135c8:	2109      	movs	r1, #9
 80135ca:	f7ff ff7d 	bl	80134c8 <std>
 80135ce:	68e0      	ldr	r0, [r4, #12]
 80135d0:	2202      	movs	r2, #2
 80135d2:	2112      	movs	r1, #18
 80135d4:	f7ff ff78 	bl	80134c8 <std>
 80135d8:	2301      	movs	r3, #1
 80135da:	61a3      	str	r3, [r4, #24]
 80135dc:	e7d2      	b.n	8013584 <__sinit+0xc>
 80135de:	bf00      	nop
 80135e0:	08015fcc 	.word	0x08015fcc
 80135e4:	08013511 	.word	0x08013511

080135e8 <__sfp>:
 80135e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135ea:	4607      	mov	r7, r0
 80135ec:	f7ff ffac 	bl	8013548 <__sfp_lock_acquire>
 80135f0:	4b1e      	ldr	r3, [pc, #120]	; (801366c <__sfp+0x84>)
 80135f2:	681e      	ldr	r6, [r3, #0]
 80135f4:	69b3      	ldr	r3, [r6, #24]
 80135f6:	b913      	cbnz	r3, 80135fe <__sfp+0x16>
 80135f8:	4630      	mov	r0, r6
 80135fa:	f7ff ffbd 	bl	8013578 <__sinit>
 80135fe:	3648      	adds	r6, #72	; 0x48
 8013600:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013604:	3b01      	subs	r3, #1
 8013606:	d503      	bpl.n	8013610 <__sfp+0x28>
 8013608:	6833      	ldr	r3, [r6, #0]
 801360a:	b30b      	cbz	r3, 8013650 <__sfp+0x68>
 801360c:	6836      	ldr	r6, [r6, #0]
 801360e:	e7f7      	b.n	8013600 <__sfp+0x18>
 8013610:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013614:	b9d5      	cbnz	r5, 801364c <__sfp+0x64>
 8013616:	4b16      	ldr	r3, [pc, #88]	; (8013670 <__sfp+0x88>)
 8013618:	60e3      	str	r3, [r4, #12]
 801361a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801361e:	6665      	str	r5, [r4, #100]	; 0x64
 8013620:	f000 f847 	bl	80136b2 <__retarget_lock_init_recursive>
 8013624:	f7ff ff96 	bl	8013554 <__sfp_lock_release>
 8013628:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801362c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013630:	6025      	str	r5, [r4, #0]
 8013632:	61a5      	str	r5, [r4, #24]
 8013634:	2208      	movs	r2, #8
 8013636:	4629      	mov	r1, r5
 8013638:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801363c:	f7fd fabe 	bl	8010bbc <memset>
 8013640:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013644:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013648:	4620      	mov	r0, r4
 801364a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801364c:	3468      	adds	r4, #104	; 0x68
 801364e:	e7d9      	b.n	8013604 <__sfp+0x1c>
 8013650:	2104      	movs	r1, #4
 8013652:	4638      	mov	r0, r7
 8013654:	f7ff ff62 	bl	801351c <__sfmoreglue>
 8013658:	4604      	mov	r4, r0
 801365a:	6030      	str	r0, [r6, #0]
 801365c:	2800      	cmp	r0, #0
 801365e:	d1d5      	bne.n	801360c <__sfp+0x24>
 8013660:	f7ff ff78 	bl	8013554 <__sfp_lock_release>
 8013664:	230c      	movs	r3, #12
 8013666:	603b      	str	r3, [r7, #0]
 8013668:	e7ee      	b.n	8013648 <__sfp+0x60>
 801366a:	bf00      	nop
 801366c:	08015fcc 	.word	0x08015fcc
 8013670:	ffff0001 	.word	0xffff0001

08013674 <_fwalk_reent>:
 8013674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013678:	4606      	mov	r6, r0
 801367a:	4688      	mov	r8, r1
 801367c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013680:	2700      	movs	r7, #0
 8013682:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013686:	f1b9 0901 	subs.w	r9, r9, #1
 801368a:	d505      	bpl.n	8013698 <_fwalk_reent+0x24>
 801368c:	6824      	ldr	r4, [r4, #0]
 801368e:	2c00      	cmp	r4, #0
 8013690:	d1f7      	bne.n	8013682 <_fwalk_reent+0xe>
 8013692:	4638      	mov	r0, r7
 8013694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013698:	89ab      	ldrh	r3, [r5, #12]
 801369a:	2b01      	cmp	r3, #1
 801369c:	d907      	bls.n	80136ae <_fwalk_reent+0x3a>
 801369e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80136a2:	3301      	adds	r3, #1
 80136a4:	d003      	beq.n	80136ae <_fwalk_reent+0x3a>
 80136a6:	4629      	mov	r1, r5
 80136a8:	4630      	mov	r0, r6
 80136aa:	47c0      	blx	r8
 80136ac:	4307      	orrs	r7, r0
 80136ae:	3568      	adds	r5, #104	; 0x68
 80136b0:	e7e9      	b.n	8013686 <_fwalk_reent+0x12>

080136b2 <__retarget_lock_init_recursive>:
 80136b2:	4770      	bx	lr

080136b4 <__retarget_lock_acquire_recursive>:
 80136b4:	4770      	bx	lr

080136b6 <__retarget_lock_release_recursive>:
 80136b6:	4770      	bx	lr

080136b8 <__swhatbuf_r>:
 80136b8:	b570      	push	{r4, r5, r6, lr}
 80136ba:	460e      	mov	r6, r1
 80136bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136c0:	2900      	cmp	r1, #0
 80136c2:	b096      	sub	sp, #88	; 0x58
 80136c4:	4614      	mov	r4, r2
 80136c6:	461d      	mov	r5, r3
 80136c8:	da08      	bge.n	80136dc <__swhatbuf_r+0x24>
 80136ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80136ce:	2200      	movs	r2, #0
 80136d0:	602a      	str	r2, [r5, #0]
 80136d2:	061a      	lsls	r2, r3, #24
 80136d4:	d410      	bmi.n	80136f8 <__swhatbuf_r+0x40>
 80136d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80136da:	e00e      	b.n	80136fa <__swhatbuf_r+0x42>
 80136dc:	466a      	mov	r2, sp
 80136de:	f000 f903 	bl	80138e8 <_fstat_r>
 80136e2:	2800      	cmp	r0, #0
 80136e4:	dbf1      	blt.n	80136ca <__swhatbuf_r+0x12>
 80136e6:	9a01      	ldr	r2, [sp, #4]
 80136e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80136ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80136f0:	425a      	negs	r2, r3
 80136f2:	415a      	adcs	r2, r3
 80136f4:	602a      	str	r2, [r5, #0]
 80136f6:	e7ee      	b.n	80136d6 <__swhatbuf_r+0x1e>
 80136f8:	2340      	movs	r3, #64	; 0x40
 80136fa:	2000      	movs	r0, #0
 80136fc:	6023      	str	r3, [r4, #0]
 80136fe:	b016      	add	sp, #88	; 0x58
 8013700:	bd70      	pop	{r4, r5, r6, pc}
	...

08013704 <__smakebuf_r>:
 8013704:	898b      	ldrh	r3, [r1, #12]
 8013706:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013708:	079d      	lsls	r5, r3, #30
 801370a:	4606      	mov	r6, r0
 801370c:	460c      	mov	r4, r1
 801370e:	d507      	bpl.n	8013720 <__smakebuf_r+0x1c>
 8013710:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013714:	6023      	str	r3, [r4, #0]
 8013716:	6123      	str	r3, [r4, #16]
 8013718:	2301      	movs	r3, #1
 801371a:	6163      	str	r3, [r4, #20]
 801371c:	b002      	add	sp, #8
 801371e:	bd70      	pop	{r4, r5, r6, pc}
 8013720:	ab01      	add	r3, sp, #4
 8013722:	466a      	mov	r2, sp
 8013724:	f7ff ffc8 	bl	80136b8 <__swhatbuf_r>
 8013728:	9900      	ldr	r1, [sp, #0]
 801372a:	4605      	mov	r5, r0
 801372c:	4630      	mov	r0, r6
 801372e:	f7ff f963 	bl	80129f8 <_malloc_r>
 8013732:	b948      	cbnz	r0, 8013748 <__smakebuf_r+0x44>
 8013734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013738:	059a      	lsls	r2, r3, #22
 801373a:	d4ef      	bmi.n	801371c <__smakebuf_r+0x18>
 801373c:	f023 0303 	bic.w	r3, r3, #3
 8013740:	f043 0302 	orr.w	r3, r3, #2
 8013744:	81a3      	strh	r3, [r4, #12]
 8013746:	e7e3      	b.n	8013710 <__smakebuf_r+0xc>
 8013748:	4b0d      	ldr	r3, [pc, #52]	; (8013780 <__smakebuf_r+0x7c>)
 801374a:	62b3      	str	r3, [r6, #40]	; 0x28
 801374c:	89a3      	ldrh	r3, [r4, #12]
 801374e:	6020      	str	r0, [r4, #0]
 8013750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013754:	81a3      	strh	r3, [r4, #12]
 8013756:	9b00      	ldr	r3, [sp, #0]
 8013758:	6163      	str	r3, [r4, #20]
 801375a:	9b01      	ldr	r3, [sp, #4]
 801375c:	6120      	str	r0, [r4, #16]
 801375e:	b15b      	cbz	r3, 8013778 <__smakebuf_r+0x74>
 8013760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013764:	4630      	mov	r0, r6
 8013766:	f000 f8d1 	bl	801390c <_isatty_r>
 801376a:	b128      	cbz	r0, 8013778 <__smakebuf_r+0x74>
 801376c:	89a3      	ldrh	r3, [r4, #12]
 801376e:	f023 0303 	bic.w	r3, r3, #3
 8013772:	f043 0301 	orr.w	r3, r3, #1
 8013776:	81a3      	strh	r3, [r4, #12]
 8013778:	89a0      	ldrh	r0, [r4, #12]
 801377a:	4305      	orrs	r5, r0
 801377c:	81a5      	strh	r5, [r4, #12]
 801377e:	e7cd      	b.n	801371c <__smakebuf_r+0x18>
 8013780:	08013511 	.word	0x08013511

08013784 <_malloc_usable_size_r>:
 8013784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013788:	1f18      	subs	r0, r3, #4
 801378a:	2b00      	cmp	r3, #0
 801378c:	bfbc      	itt	lt
 801378e:	580b      	ldrlt	r3, [r1, r0]
 8013790:	18c0      	addlt	r0, r0, r3
 8013792:	4770      	bx	lr

08013794 <_raise_r>:
 8013794:	291f      	cmp	r1, #31
 8013796:	b538      	push	{r3, r4, r5, lr}
 8013798:	4604      	mov	r4, r0
 801379a:	460d      	mov	r5, r1
 801379c:	d904      	bls.n	80137a8 <_raise_r+0x14>
 801379e:	2316      	movs	r3, #22
 80137a0:	6003      	str	r3, [r0, #0]
 80137a2:	f04f 30ff 	mov.w	r0, #4294967295
 80137a6:	bd38      	pop	{r3, r4, r5, pc}
 80137a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80137aa:	b112      	cbz	r2, 80137b2 <_raise_r+0x1e>
 80137ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80137b0:	b94b      	cbnz	r3, 80137c6 <_raise_r+0x32>
 80137b2:	4620      	mov	r0, r4
 80137b4:	f000 f830 	bl	8013818 <_getpid_r>
 80137b8:	462a      	mov	r2, r5
 80137ba:	4601      	mov	r1, r0
 80137bc:	4620      	mov	r0, r4
 80137be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80137c2:	f000 b817 	b.w	80137f4 <_kill_r>
 80137c6:	2b01      	cmp	r3, #1
 80137c8:	d00a      	beq.n	80137e0 <_raise_r+0x4c>
 80137ca:	1c59      	adds	r1, r3, #1
 80137cc:	d103      	bne.n	80137d6 <_raise_r+0x42>
 80137ce:	2316      	movs	r3, #22
 80137d0:	6003      	str	r3, [r0, #0]
 80137d2:	2001      	movs	r0, #1
 80137d4:	e7e7      	b.n	80137a6 <_raise_r+0x12>
 80137d6:	2400      	movs	r4, #0
 80137d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80137dc:	4628      	mov	r0, r5
 80137de:	4798      	blx	r3
 80137e0:	2000      	movs	r0, #0
 80137e2:	e7e0      	b.n	80137a6 <_raise_r+0x12>

080137e4 <raise>:
 80137e4:	4b02      	ldr	r3, [pc, #8]	; (80137f0 <raise+0xc>)
 80137e6:	4601      	mov	r1, r0
 80137e8:	6818      	ldr	r0, [r3, #0]
 80137ea:	f7ff bfd3 	b.w	8013794 <_raise_r>
 80137ee:	bf00      	nop
 80137f0:	20000078 	.word	0x20000078

080137f4 <_kill_r>:
 80137f4:	b538      	push	{r3, r4, r5, lr}
 80137f6:	4d07      	ldr	r5, [pc, #28]	; (8013814 <_kill_r+0x20>)
 80137f8:	2300      	movs	r3, #0
 80137fa:	4604      	mov	r4, r0
 80137fc:	4608      	mov	r0, r1
 80137fe:	4611      	mov	r1, r2
 8013800:	602b      	str	r3, [r5, #0]
 8013802:	f7f0 fd7d 	bl	8004300 <_kill>
 8013806:	1c43      	adds	r3, r0, #1
 8013808:	d102      	bne.n	8013810 <_kill_r+0x1c>
 801380a:	682b      	ldr	r3, [r5, #0]
 801380c:	b103      	cbz	r3, 8013810 <_kill_r+0x1c>
 801380e:	6023      	str	r3, [r4, #0]
 8013810:	bd38      	pop	{r3, r4, r5, pc}
 8013812:	bf00      	nop
 8013814:	20004a08 	.word	0x20004a08

08013818 <_getpid_r>:
 8013818:	f7f0 bd6a 	b.w	80042f0 <_getpid>

0801381c <__sread>:
 801381c:	b510      	push	{r4, lr}
 801381e:	460c      	mov	r4, r1
 8013820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013824:	f000 f894 	bl	8013950 <_read_r>
 8013828:	2800      	cmp	r0, #0
 801382a:	bfab      	itete	ge
 801382c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801382e:	89a3      	ldrhlt	r3, [r4, #12]
 8013830:	181b      	addge	r3, r3, r0
 8013832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013836:	bfac      	ite	ge
 8013838:	6563      	strge	r3, [r4, #84]	; 0x54
 801383a:	81a3      	strhlt	r3, [r4, #12]
 801383c:	bd10      	pop	{r4, pc}

0801383e <__swrite>:
 801383e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013842:	461f      	mov	r7, r3
 8013844:	898b      	ldrh	r3, [r1, #12]
 8013846:	05db      	lsls	r3, r3, #23
 8013848:	4605      	mov	r5, r0
 801384a:	460c      	mov	r4, r1
 801384c:	4616      	mov	r6, r2
 801384e:	d505      	bpl.n	801385c <__swrite+0x1e>
 8013850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013854:	2302      	movs	r3, #2
 8013856:	2200      	movs	r2, #0
 8013858:	f000 f868 	bl	801392c <_lseek_r>
 801385c:	89a3      	ldrh	r3, [r4, #12]
 801385e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013866:	81a3      	strh	r3, [r4, #12]
 8013868:	4632      	mov	r2, r6
 801386a:	463b      	mov	r3, r7
 801386c:	4628      	mov	r0, r5
 801386e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013872:	f000 b817 	b.w	80138a4 <_write_r>

08013876 <__sseek>:
 8013876:	b510      	push	{r4, lr}
 8013878:	460c      	mov	r4, r1
 801387a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801387e:	f000 f855 	bl	801392c <_lseek_r>
 8013882:	1c43      	adds	r3, r0, #1
 8013884:	89a3      	ldrh	r3, [r4, #12]
 8013886:	bf15      	itete	ne
 8013888:	6560      	strne	r0, [r4, #84]	; 0x54
 801388a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801388e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013892:	81a3      	strheq	r3, [r4, #12]
 8013894:	bf18      	it	ne
 8013896:	81a3      	strhne	r3, [r4, #12]
 8013898:	bd10      	pop	{r4, pc}

0801389a <__sclose>:
 801389a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801389e:	f000 b813 	b.w	80138c8 <_close_r>
	...

080138a4 <_write_r>:
 80138a4:	b538      	push	{r3, r4, r5, lr}
 80138a6:	4d07      	ldr	r5, [pc, #28]	; (80138c4 <_write_r+0x20>)
 80138a8:	4604      	mov	r4, r0
 80138aa:	4608      	mov	r0, r1
 80138ac:	4611      	mov	r1, r2
 80138ae:	2200      	movs	r2, #0
 80138b0:	602a      	str	r2, [r5, #0]
 80138b2:	461a      	mov	r2, r3
 80138b4:	f7f0 fd5b 	bl	800436e <_write>
 80138b8:	1c43      	adds	r3, r0, #1
 80138ba:	d102      	bne.n	80138c2 <_write_r+0x1e>
 80138bc:	682b      	ldr	r3, [r5, #0]
 80138be:	b103      	cbz	r3, 80138c2 <_write_r+0x1e>
 80138c0:	6023      	str	r3, [r4, #0]
 80138c2:	bd38      	pop	{r3, r4, r5, pc}
 80138c4:	20004a08 	.word	0x20004a08

080138c8 <_close_r>:
 80138c8:	b538      	push	{r3, r4, r5, lr}
 80138ca:	4d06      	ldr	r5, [pc, #24]	; (80138e4 <_close_r+0x1c>)
 80138cc:	2300      	movs	r3, #0
 80138ce:	4604      	mov	r4, r0
 80138d0:	4608      	mov	r0, r1
 80138d2:	602b      	str	r3, [r5, #0]
 80138d4:	f7f0 fd67 	bl	80043a6 <_close>
 80138d8:	1c43      	adds	r3, r0, #1
 80138da:	d102      	bne.n	80138e2 <_close_r+0x1a>
 80138dc:	682b      	ldr	r3, [r5, #0]
 80138de:	b103      	cbz	r3, 80138e2 <_close_r+0x1a>
 80138e0:	6023      	str	r3, [r4, #0]
 80138e2:	bd38      	pop	{r3, r4, r5, pc}
 80138e4:	20004a08 	.word	0x20004a08

080138e8 <_fstat_r>:
 80138e8:	b538      	push	{r3, r4, r5, lr}
 80138ea:	4d07      	ldr	r5, [pc, #28]	; (8013908 <_fstat_r+0x20>)
 80138ec:	2300      	movs	r3, #0
 80138ee:	4604      	mov	r4, r0
 80138f0:	4608      	mov	r0, r1
 80138f2:	4611      	mov	r1, r2
 80138f4:	602b      	str	r3, [r5, #0]
 80138f6:	f7f0 fd62 	bl	80043be <_fstat>
 80138fa:	1c43      	adds	r3, r0, #1
 80138fc:	d102      	bne.n	8013904 <_fstat_r+0x1c>
 80138fe:	682b      	ldr	r3, [r5, #0]
 8013900:	b103      	cbz	r3, 8013904 <_fstat_r+0x1c>
 8013902:	6023      	str	r3, [r4, #0]
 8013904:	bd38      	pop	{r3, r4, r5, pc}
 8013906:	bf00      	nop
 8013908:	20004a08 	.word	0x20004a08

0801390c <_isatty_r>:
 801390c:	b538      	push	{r3, r4, r5, lr}
 801390e:	4d06      	ldr	r5, [pc, #24]	; (8013928 <_isatty_r+0x1c>)
 8013910:	2300      	movs	r3, #0
 8013912:	4604      	mov	r4, r0
 8013914:	4608      	mov	r0, r1
 8013916:	602b      	str	r3, [r5, #0]
 8013918:	f7f0 fd61 	bl	80043de <_isatty>
 801391c:	1c43      	adds	r3, r0, #1
 801391e:	d102      	bne.n	8013926 <_isatty_r+0x1a>
 8013920:	682b      	ldr	r3, [r5, #0]
 8013922:	b103      	cbz	r3, 8013926 <_isatty_r+0x1a>
 8013924:	6023      	str	r3, [r4, #0]
 8013926:	bd38      	pop	{r3, r4, r5, pc}
 8013928:	20004a08 	.word	0x20004a08

0801392c <_lseek_r>:
 801392c:	b538      	push	{r3, r4, r5, lr}
 801392e:	4d07      	ldr	r5, [pc, #28]	; (801394c <_lseek_r+0x20>)
 8013930:	4604      	mov	r4, r0
 8013932:	4608      	mov	r0, r1
 8013934:	4611      	mov	r1, r2
 8013936:	2200      	movs	r2, #0
 8013938:	602a      	str	r2, [r5, #0]
 801393a:	461a      	mov	r2, r3
 801393c:	f7f0 fd5a 	bl	80043f4 <_lseek>
 8013940:	1c43      	adds	r3, r0, #1
 8013942:	d102      	bne.n	801394a <_lseek_r+0x1e>
 8013944:	682b      	ldr	r3, [r5, #0]
 8013946:	b103      	cbz	r3, 801394a <_lseek_r+0x1e>
 8013948:	6023      	str	r3, [r4, #0]
 801394a:	bd38      	pop	{r3, r4, r5, pc}
 801394c:	20004a08 	.word	0x20004a08

08013950 <_read_r>:
 8013950:	b538      	push	{r3, r4, r5, lr}
 8013952:	4d07      	ldr	r5, [pc, #28]	; (8013970 <_read_r+0x20>)
 8013954:	4604      	mov	r4, r0
 8013956:	4608      	mov	r0, r1
 8013958:	4611      	mov	r1, r2
 801395a:	2200      	movs	r2, #0
 801395c:	602a      	str	r2, [r5, #0]
 801395e:	461a      	mov	r2, r3
 8013960:	f7f0 fce8 	bl	8004334 <_read>
 8013964:	1c43      	adds	r3, r0, #1
 8013966:	d102      	bne.n	801396e <_read_r+0x1e>
 8013968:	682b      	ldr	r3, [r5, #0]
 801396a:	b103      	cbz	r3, 801396e <_read_r+0x1e>
 801396c:	6023      	str	r3, [r4, #0]
 801396e:	bd38      	pop	{r3, r4, r5, pc}
 8013970:	20004a08 	.word	0x20004a08

08013974 <sinf>:
 8013974:	ee10 3a10 	vmov	r3, s0
 8013978:	b507      	push	{r0, r1, r2, lr}
 801397a:	4a1f      	ldr	r2, [pc, #124]	; (80139f8 <sinf+0x84>)
 801397c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013980:	4293      	cmp	r3, r2
 8013982:	dc07      	bgt.n	8013994 <sinf+0x20>
 8013984:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80139fc <sinf+0x88>
 8013988:	2000      	movs	r0, #0
 801398a:	b003      	add	sp, #12
 801398c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013990:	f001 bf78 	b.w	8015884 <__kernel_sinf>
 8013994:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013998:	db04      	blt.n	80139a4 <sinf+0x30>
 801399a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801399e:	b003      	add	sp, #12
 80139a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80139a4:	4668      	mov	r0, sp
 80139a6:	f001 fb57 	bl	8015058 <__ieee754_rem_pio2f>
 80139aa:	f000 0003 	and.w	r0, r0, #3
 80139ae:	2801      	cmp	r0, #1
 80139b0:	d00a      	beq.n	80139c8 <sinf+0x54>
 80139b2:	2802      	cmp	r0, #2
 80139b4:	d00f      	beq.n	80139d6 <sinf+0x62>
 80139b6:	b9c0      	cbnz	r0, 80139ea <sinf+0x76>
 80139b8:	eddd 0a01 	vldr	s1, [sp, #4]
 80139bc:	ed9d 0a00 	vldr	s0, [sp]
 80139c0:	2001      	movs	r0, #1
 80139c2:	f001 ff5f 	bl	8015884 <__kernel_sinf>
 80139c6:	e7ea      	b.n	801399e <sinf+0x2a>
 80139c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80139cc:	ed9d 0a00 	vldr	s0, [sp]
 80139d0:	f001 fc82 	bl	80152d8 <__kernel_cosf>
 80139d4:	e7e3      	b.n	801399e <sinf+0x2a>
 80139d6:	eddd 0a01 	vldr	s1, [sp, #4]
 80139da:	ed9d 0a00 	vldr	s0, [sp]
 80139de:	2001      	movs	r0, #1
 80139e0:	f001 ff50 	bl	8015884 <__kernel_sinf>
 80139e4:	eeb1 0a40 	vneg.f32	s0, s0
 80139e8:	e7d9      	b.n	801399e <sinf+0x2a>
 80139ea:	eddd 0a01 	vldr	s1, [sp, #4]
 80139ee:	ed9d 0a00 	vldr	s0, [sp]
 80139f2:	f001 fc71 	bl	80152d8 <__kernel_cosf>
 80139f6:	e7f5      	b.n	80139e4 <sinf+0x70>
 80139f8:	3f490fd8 	.word	0x3f490fd8
 80139fc:	00000000 	.word	0x00000000

08013a00 <pow>:
 8013a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a02:	ed2d 8b02 	vpush	{d8}
 8013a06:	eeb0 8a40 	vmov.f32	s16, s0
 8013a0a:	eef0 8a60 	vmov.f32	s17, s1
 8013a0e:	ec55 4b11 	vmov	r4, r5, d1
 8013a12:	f000 f8ed 	bl	8013bf0 <__ieee754_pow>
 8013a16:	4622      	mov	r2, r4
 8013a18:	462b      	mov	r3, r5
 8013a1a:	4620      	mov	r0, r4
 8013a1c:	4629      	mov	r1, r5
 8013a1e:	ec57 6b10 	vmov	r6, r7, d0
 8013a22:	f7ed f883 	bl	8000b2c <__aeabi_dcmpun>
 8013a26:	2800      	cmp	r0, #0
 8013a28:	d13b      	bne.n	8013aa2 <pow+0xa2>
 8013a2a:	ec51 0b18 	vmov	r0, r1, d8
 8013a2e:	2200      	movs	r2, #0
 8013a30:	2300      	movs	r3, #0
 8013a32:	f7ed f849 	bl	8000ac8 <__aeabi_dcmpeq>
 8013a36:	b1b8      	cbz	r0, 8013a68 <pow+0x68>
 8013a38:	2200      	movs	r2, #0
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	4629      	mov	r1, r5
 8013a40:	f7ed f842 	bl	8000ac8 <__aeabi_dcmpeq>
 8013a44:	2800      	cmp	r0, #0
 8013a46:	d146      	bne.n	8013ad6 <pow+0xd6>
 8013a48:	ec45 4b10 	vmov	d0, r4, r5
 8013a4c:	f001 ffbd 	bl	80159ca <finite>
 8013a50:	b338      	cbz	r0, 8013aa2 <pow+0xa2>
 8013a52:	2200      	movs	r2, #0
 8013a54:	2300      	movs	r3, #0
 8013a56:	4620      	mov	r0, r4
 8013a58:	4629      	mov	r1, r5
 8013a5a:	f7ed f83f 	bl	8000adc <__aeabi_dcmplt>
 8013a5e:	b300      	cbz	r0, 8013aa2 <pow+0xa2>
 8013a60:	f7fd f874 	bl	8010b4c <__errno>
 8013a64:	2322      	movs	r3, #34	; 0x22
 8013a66:	e01b      	b.n	8013aa0 <pow+0xa0>
 8013a68:	ec47 6b10 	vmov	d0, r6, r7
 8013a6c:	f001 ffad 	bl	80159ca <finite>
 8013a70:	b9e0      	cbnz	r0, 8013aac <pow+0xac>
 8013a72:	eeb0 0a48 	vmov.f32	s0, s16
 8013a76:	eef0 0a68 	vmov.f32	s1, s17
 8013a7a:	f001 ffa6 	bl	80159ca <finite>
 8013a7e:	b1a8      	cbz	r0, 8013aac <pow+0xac>
 8013a80:	ec45 4b10 	vmov	d0, r4, r5
 8013a84:	f001 ffa1 	bl	80159ca <finite>
 8013a88:	b180      	cbz	r0, 8013aac <pow+0xac>
 8013a8a:	4632      	mov	r2, r6
 8013a8c:	463b      	mov	r3, r7
 8013a8e:	4630      	mov	r0, r6
 8013a90:	4639      	mov	r1, r7
 8013a92:	f7ed f84b 	bl	8000b2c <__aeabi_dcmpun>
 8013a96:	2800      	cmp	r0, #0
 8013a98:	d0e2      	beq.n	8013a60 <pow+0x60>
 8013a9a:	f7fd f857 	bl	8010b4c <__errno>
 8013a9e:	2321      	movs	r3, #33	; 0x21
 8013aa0:	6003      	str	r3, [r0, #0]
 8013aa2:	ecbd 8b02 	vpop	{d8}
 8013aa6:	ec47 6b10 	vmov	d0, r6, r7
 8013aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013aac:	2200      	movs	r2, #0
 8013aae:	2300      	movs	r3, #0
 8013ab0:	4630      	mov	r0, r6
 8013ab2:	4639      	mov	r1, r7
 8013ab4:	f7ed f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8013ab8:	2800      	cmp	r0, #0
 8013aba:	d0f2      	beq.n	8013aa2 <pow+0xa2>
 8013abc:	eeb0 0a48 	vmov.f32	s0, s16
 8013ac0:	eef0 0a68 	vmov.f32	s1, s17
 8013ac4:	f001 ff81 	bl	80159ca <finite>
 8013ac8:	2800      	cmp	r0, #0
 8013aca:	d0ea      	beq.n	8013aa2 <pow+0xa2>
 8013acc:	ec45 4b10 	vmov	d0, r4, r5
 8013ad0:	f001 ff7b 	bl	80159ca <finite>
 8013ad4:	e7c3      	b.n	8013a5e <pow+0x5e>
 8013ad6:	4f01      	ldr	r7, [pc, #4]	; (8013adc <pow+0xdc>)
 8013ad8:	2600      	movs	r6, #0
 8013ada:	e7e2      	b.n	8013aa2 <pow+0xa2>
 8013adc:	3ff00000 	.word	0x3ff00000

08013ae0 <asinf>:
 8013ae0:	b508      	push	{r3, lr}
 8013ae2:	ed2d 8b02 	vpush	{d8}
 8013ae6:	eeb0 8a40 	vmov.f32	s16, s0
 8013aea:	f000 fe61 	bl	80147b0 <__ieee754_asinf>
 8013aee:	eeb4 8a48 	vcmp.f32	s16, s16
 8013af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013af6:	eef0 8a40 	vmov.f32	s17, s0
 8013afa:	d615      	bvs.n	8013b28 <asinf+0x48>
 8013afc:	eeb0 0a48 	vmov.f32	s0, s16
 8013b00:	f002 f8c8 	bl	8015c94 <fabsf>
 8013b04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013b08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b10:	dd0a      	ble.n	8013b28 <asinf+0x48>
 8013b12:	f7fd f81b 	bl	8010b4c <__errno>
 8013b16:	ecbd 8b02 	vpop	{d8}
 8013b1a:	2321      	movs	r3, #33	; 0x21
 8013b1c:	6003      	str	r3, [r0, #0]
 8013b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013b22:	4804      	ldr	r0, [pc, #16]	; (8013b34 <asinf+0x54>)
 8013b24:	f002 b90c 	b.w	8015d40 <nanf>
 8013b28:	eeb0 0a68 	vmov.f32	s0, s17
 8013b2c:	ecbd 8b02 	vpop	{d8}
 8013b30:	bd08      	pop	{r3, pc}
 8013b32:	bf00      	nop
 8013b34:	08016238 	.word	0x08016238

08013b38 <atan2f>:
 8013b38:	f000 bf20 	b.w	801497c <__ieee754_atan2f>

08013b3c <powf>:
 8013b3c:	b508      	push	{r3, lr}
 8013b3e:	ed2d 8b04 	vpush	{d8-d9}
 8013b42:	eeb0 8a60 	vmov.f32	s16, s1
 8013b46:	eeb0 9a40 	vmov.f32	s18, s0
 8013b4a:	f000 ffb7 	bl	8014abc <__ieee754_powf>
 8013b4e:	eeb4 8a48 	vcmp.f32	s16, s16
 8013b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b56:	eef0 8a40 	vmov.f32	s17, s0
 8013b5a:	d63e      	bvs.n	8013bda <powf+0x9e>
 8013b5c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8013b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b64:	d112      	bne.n	8013b8c <powf+0x50>
 8013b66:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b6e:	d039      	beq.n	8013be4 <powf+0xa8>
 8013b70:	eeb0 0a48 	vmov.f32	s0, s16
 8013b74:	f002 f895 	bl	8015ca2 <finitef>
 8013b78:	b378      	cbz	r0, 8013bda <powf+0x9e>
 8013b7a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b82:	d52a      	bpl.n	8013bda <powf+0x9e>
 8013b84:	f7fc ffe2 	bl	8010b4c <__errno>
 8013b88:	2322      	movs	r3, #34	; 0x22
 8013b8a:	e014      	b.n	8013bb6 <powf+0x7a>
 8013b8c:	f002 f889 	bl	8015ca2 <finitef>
 8013b90:	b998      	cbnz	r0, 8013bba <powf+0x7e>
 8013b92:	eeb0 0a49 	vmov.f32	s0, s18
 8013b96:	f002 f884 	bl	8015ca2 <finitef>
 8013b9a:	b170      	cbz	r0, 8013bba <powf+0x7e>
 8013b9c:	eeb0 0a48 	vmov.f32	s0, s16
 8013ba0:	f002 f87f 	bl	8015ca2 <finitef>
 8013ba4:	b148      	cbz	r0, 8013bba <powf+0x7e>
 8013ba6:	eef4 8a68 	vcmp.f32	s17, s17
 8013baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bae:	d7e9      	bvc.n	8013b84 <powf+0x48>
 8013bb0:	f7fc ffcc 	bl	8010b4c <__errno>
 8013bb4:	2321      	movs	r3, #33	; 0x21
 8013bb6:	6003      	str	r3, [r0, #0]
 8013bb8:	e00f      	b.n	8013bda <powf+0x9e>
 8013bba:	eef5 8a40 	vcmp.f32	s17, #0.0
 8013bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bc2:	d10a      	bne.n	8013bda <powf+0x9e>
 8013bc4:	eeb0 0a49 	vmov.f32	s0, s18
 8013bc8:	f002 f86b 	bl	8015ca2 <finitef>
 8013bcc:	b128      	cbz	r0, 8013bda <powf+0x9e>
 8013bce:	eeb0 0a48 	vmov.f32	s0, s16
 8013bd2:	f002 f866 	bl	8015ca2 <finitef>
 8013bd6:	2800      	cmp	r0, #0
 8013bd8:	d1d4      	bne.n	8013b84 <powf+0x48>
 8013bda:	eeb0 0a68 	vmov.f32	s0, s17
 8013bde:	ecbd 8b04 	vpop	{d8-d9}
 8013be2:	bd08      	pop	{r3, pc}
 8013be4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013be8:	e7f7      	b.n	8013bda <powf+0x9e>
 8013bea:	0000      	movs	r0, r0
 8013bec:	0000      	movs	r0, r0
	...

08013bf0 <__ieee754_pow>:
 8013bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bf4:	ed2d 8b06 	vpush	{d8-d10}
 8013bf8:	b089      	sub	sp, #36	; 0x24
 8013bfa:	ed8d 1b00 	vstr	d1, [sp]
 8013bfe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013c02:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013c06:	ea58 0102 	orrs.w	r1, r8, r2
 8013c0a:	ec57 6b10 	vmov	r6, r7, d0
 8013c0e:	d115      	bne.n	8013c3c <__ieee754_pow+0x4c>
 8013c10:	19b3      	adds	r3, r6, r6
 8013c12:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8013c16:	4152      	adcs	r2, r2
 8013c18:	4299      	cmp	r1, r3
 8013c1a:	4b89      	ldr	r3, [pc, #548]	; (8013e40 <__ieee754_pow+0x250>)
 8013c1c:	4193      	sbcs	r3, r2
 8013c1e:	f080 84d2 	bcs.w	80145c6 <__ieee754_pow+0x9d6>
 8013c22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c26:	4630      	mov	r0, r6
 8013c28:	4639      	mov	r1, r7
 8013c2a:	f7ec fb2f 	bl	800028c <__adddf3>
 8013c2e:	ec41 0b10 	vmov	d0, r0, r1
 8013c32:	b009      	add	sp, #36	; 0x24
 8013c34:	ecbd 8b06 	vpop	{d8-d10}
 8013c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c3c:	4b81      	ldr	r3, [pc, #516]	; (8013e44 <__ieee754_pow+0x254>)
 8013c3e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013c42:	429c      	cmp	r4, r3
 8013c44:	ee10 aa10 	vmov	sl, s0
 8013c48:	463d      	mov	r5, r7
 8013c4a:	dc06      	bgt.n	8013c5a <__ieee754_pow+0x6a>
 8013c4c:	d101      	bne.n	8013c52 <__ieee754_pow+0x62>
 8013c4e:	2e00      	cmp	r6, #0
 8013c50:	d1e7      	bne.n	8013c22 <__ieee754_pow+0x32>
 8013c52:	4598      	cmp	r8, r3
 8013c54:	dc01      	bgt.n	8013c5a <__ieee754_pow+0x6a>
 8013c56:	d10f      	bne.n	8013c78 <__ieee754_pow+0x88>
 8013c58:	b172      	cbz	r2, 8013c78 <__ieee754_pow+0x88>
 8013c5a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8013c5e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8013c62:	ea55 050a 	orrs.w	r5, r5, sl
 8013c66:	d1dc      	bne.n	8013c22 <__ieee754_pow+0x32>
 8013c68:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013c6c:	18db      	adds	r3, r3, r3
 8013c6e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8013c72:	4152      	adcs	r2, r2
 8013c74:	429d      	cmp	r5, r3
 8013c76:	e7d0      	b.n	8013c1a <__ieee754_pow+0x2a>
 8013c78:	2d00      	cmp	r5, #0
 8013c7a:	da3b      	bge.n	8013cf4 <__ieee754_pow+0x104>
 8013c7c:	4b72      	ldr	r3, [pc, #456]	; (8013e48 <__ieee754_pow+0x258>)
 8013c7e:	4598      	cmp	r8, r3
 8013c80:	dc51      	bgt.n	8013d26 <__ieee754_pow+0x136>
 8013c82:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013c86:	4598      	cmp	r8, r3
 8013c88:	f340 84ac 	ble.w	80145e4 <__ieee754_pow+0x9f4>
 8013c8c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013c90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013c94:	2b14      	cmp	r3, #20
 8013c96:	dd0f      	ble.n	8013cb8 <__ieee754_pow+0xc8>
 8013c98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013c9c:	fa22 f103 	lsr.w	r1, r2, r3
 8013ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8013ca4:	4293      	cmp	r3, r2
 8013ca6:	f040 849d 	bne.w	80145e4 <__ieee754_pow+0x9f4>
 8013caa:	f001 0101 	and.w	r1, r1, #1
 8013cae:	f1c1 0302 	rsb	r3, r1, #2
 8013cb2:	9304      	str	r3, [sp, #16]
 8013cb4:	b182      	cbz	r2, 8013cd8 <__ieee754_pow+0xe8>
 8013cb6:	e05f      	b.n	8013d78 <__ieee754_pow+0x188>
 8013cb8:	2a00      	cmp	r2, #0
 8013cba:	d15b      	bne.n	8013d74 <__ieee754_pow+0x184>
 8013cbc:	f1c3 0314 	rsb	r3, r3, #20
 8013cc0:	fa48 f103 	asr.w	r1, r8, r3
 8013cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8013cc8:	4543      	cmp	r3, r8
 8013cca:	f040 8488 	bne.w	80145de <__ieee754_pow+0x9ee>
 8013cce:	f001 0101 	and.w	r1, r1, #1
 8013cd2:	f1c1 0302 	rsb	r3, r1, #2
 8013cd6:	9304      	str	r3, [sp, #16]
 8013cd8:	4b5c      	ldr	r3, [pc, #368]	; (8013e4c <__ieee754_pow+0x25c>)
 8013cda:	4598      	cmp	r8, r3
 8013cdc:	d132      	bne.n	8013d44 <__ieee754_pow+0x154>
 8013cde:	f1b9 0f00 	cmp.w	r9, #0
 8013ce2:	f280 8478 	bge.w	80145d6 <__ieee754_pow+0x9e6>
 8013ce6:	4959      	ldr	r1, [pc, #356]	; (8013e4c <__ieee754_pow+0x25c>)
 8013ce8:	4632      	mov	r2, r6
 8013cea:	463b      	mov	r3, r7
 8013cec:	2000      	movs	r0, #0
 8013cee:	f7ec fdad 	bl	800084c <__aeabi_ddiv>
 8013cf2:	e79c      	b.n	8013c2e <__ieee754_pow+0x3e>
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	9304      	str	r3, [sp, #16]
 8013cf8:	2a00      	cmp	r2, #0
 8013cfa:	d13d      	bne.n	8013d78 <__ieee754_pow+0x188>
 8013cfc:	4b51      	ldr	r3, [pc, #324]	; (8013e44 <__ieee754_pow+0x254>)
 8013cfe:	4598      	cmp	r8, r3
 8013d00:	d1ea      	bne.n	8013cd8 <__ieee754_pow+0xe8>
 8013d02:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013d06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013d0a:	ea53 030a 	orrs.w	r3, r3, sl
 8013d0e:	f000 845a 	beq.w	80145c6 <__ieee754_pow+0x9d6>
 8013d12:	4b4f      	ldr	r3, [pc, #316]	; (8013e50 <__ieee754_pow+0x260>)
 8013d14:	429c      	cmp	r4, r3
 8013d16:	dd08      	ble.n	8013d2a <__ieee754_pow+0x13a>
 8013d18:	f1b9 0f00 	cmp.w	r9, #0
 8013d1c:	f2c0 8457 	blt.w	80145ce <__ieee754_pow+0x9de>
 8013d20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d24:	e783      	b.n	8013c2e <__ieee754_pow+0x3e>
 8013d26:	2302      	movs	r3, #2
 8013d28:	e7e5      	b.n	8013cf6 <__ieee754_pow+0x106>
 8013d2a:	f1b9 0f00 	cmp.w	r9, #0
 8013d2e:	f04f 0000 	mov.w	r0, #0
 8013d32:	f04f 0100 	mov.w	r1, #0
 8013d36:	f6bf af7a 	bge.w	8013c2e <__ieee754_pow+0x3e>
 8013d3a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013d3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013d42:	e774      	b.n	8013c2e <__ieee754_pow+0x3e>
 8013d44:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013d48:	d106      	bne.n	8013d58 <__ieee754_pow+0x168>
 8013d4a:	4632      	mov	r2, r6
 8013d4c:	463b      	mov	r3, r7
 8013d4e:	4630      	mov	r0, r6
 8013d50:	4639      	mov	r1, r7
 8013d52:	f7ec fc51 	bl	80005f8 <__aeabi_dmul>
 8013d56:	e76a      	b.n	8013c2e <__ieee754_pow+0x3e>
 8013d58:	4b3e      	ldr	r3, [pc, #248]	; (8013e54 <__ieee754_pow+0x264>)
 8013d5a:	4599      	cmp	r9, r3
 8013d5c:	d10c      	bne.n	8013d78 <__ieee754_pow+0x188>
 8013d5e:	2d00      	cmp	r5, #0
 8013d60:	db0a      	blt.n	8013d78 <__ieee754_pow+0x188>
 8013d62:	ec47 6b10 	vmov	d0, r6, r7
 8013d66:	b009      	add	sp, #36	; 0x24
 8013d68:	ecbd 8b06 	vpop	{d8-d10}
 8013d6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d70:	f000 bc6c 	b.w	801464c <__ieee754_sqrt>
 8013d74:	2300      	movs	r3, #0
 8013d76:	9304      	str	r3, [sp, #16]
 8013d78:	ec47 6b10 	vmov	d0, r6, r7
 8013d7c:	f001 fe1c 	bl	80159b8 <fabs>
 8013d80:	ec51 0b10 	vmov	r0, r1, d0
 8013d84:	f1ba 0f00 	cmp.w	sl, #0
 8013d88:	d129      	bne.n	8013dde <__ieee754_pow+0x1ee>
 8013d8a:	b124      	cbz	r4, 8013d96 <__ieee754_pow+0x1a6>
 8013d8c:	4b2f      	ldr	r3, [pc, #188]	; (8013e4c <__ieee754_pow+0x25c>)
 8013d8e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013d92:	429a      	cmp	r2, r3
 8013d94:	d123      	bne.n	8013dde <__ieee754_pow+0x1ee>
 8013d96:	f1b9 0f00 	cmp.w	r9, #0
 8013d9a:	da05      	bge.n	8013da8 <__ieee754_pow+0x1b8>
 8013d9c:	4602      	mov	r2, r0
 8013d9e:	460b      	mov	r3, r1
 8013da0:	2000      	movs	r0, #0
 8013da2:	492a      	ldr	r1, [pc, #168]	; (8013e4c <__ieee754_pow+0x25c>)
 8013da4:	f7ec fd52 	bl	800084c <__aeabi_ddiv>
 8013da8:	2d00      	cmp	r5, #0
 8013daa:	f6bf af40 	bge.w	8013c2e <__ieee754_pow+0x3e>
 8013dae:	9b04      	ldr	r3, [sp, #16]
 8013db0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013db4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013db8:	4323      	orrs	r3, r4
 8013dba:	d108      	bne.n	8013dce <__ieee754_pow+0x1de>
 8013dbc:	4602      	mov	r2, r0
 8013dbe:	460b      	mov	r3, r1
 8013dc0:	4610      	mov	r0, r2
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	f7ec fa60 	bl	8000288 <__aeabi_dsub>
 8013dc8:	4602      	mov	r2, r0
 8013dca:	460b      	mov	r3, r1
 8013dcc:	e78f      	b.n	8013cee <__ieee754_pow+0xfe>
 8013dce:	9b04      	ldr	r3, [sp, #16]
 8013dd0:	2b01      	cmp	r3, #1
 8013dd2:	f47f af2c 	bne.w	8013c2e <__ieee754_pow+0x3e>
 8013dd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013dda:	4619      	mov	r1, r3
 8013ddc:	e727      	b.n	8013c2e <__ieee754_pow+0x3e>
 8013dde:	0feb      	lsrs	r3, r5, #31
 8013de0:	3b01      	subs	r3, #1
 8013de2:	9306      	str	r3, [sp, #24]
 8013de4:	9a06      	ldr	r2, [sp, #24]
 8013de6:	9b04      	ldr	r3, [sp, #16]
 8013de8:	4313      	orrs	r3, r2
 8013dea:	d102      	bne.n	8013df2 <__ieee754_pow+0x202>
 8013dec:	4632      	mov	r2, r6
 8013dee:	463b      	mov	r3, r7
 8013df0:	e7e6      	b.n	8013dc0 <__ieee754_pow+0x1d0>
 8013df2:	4b19      	ldr	r3, [pc, #100]	; (8013e58 <__ieee754_pow+0x268>)
 8013df4:	4598      	cmp	r8, r3
 8013df6:	f340 80fb 	ble.w	8013ff0 <__ieee754_pow+0x400>
 8013dfa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013dfe:	4598      	cmp	r8, r3
 8013e00:	4b13      	ldr	r3, [pc, #76]	; (8013e50 <__ieee754_pow+0x260>)
 8013e02:	dd0c      	ble.n	8013e1e <__ieee754_pow+0x22e>
 8013e04:	429c      	cmp	r4, r3
 8013e06:	dc0f      	bgt.n	8013e28 <__ieee754_pow+0x238>
 8013e08:	f1b9 0f00 	cmp.w	r9, #0
 8013e0c:	da0f      	bge.n	8013e2e <__ieee754_pow+0x23e>
 8013e0e:	2000      	movs	r0, #0
 8013e10:	b009      	add	sp, #36	; 0x24
 8013e12:	ecbd 8b06 	vpop	{d8-d10}
 8013e16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e1a:	f001 bda2 	b.w	8015962 <__math_oflow>
 8013e1e:	429c      	cmp	r4, r3
 8013e20:	dbf2      	blt.n	8013e08 <__ieee754_pow+0x218>
 8013e22:	4b0a      	ldr	r3, [pc, #40]	; (8013e4c <__ieee754_pow+0x25c>)
 8013e24:	429c      	cmp	r4, r3
 8013e26:	dd19      	ble.n	8013e5c <__ieee754_pow+0x26c>
 8013e28:	f1b9 0f00 	cmp.w	r9, #0
 8013e2c:	dcef      	bgt.n	8013e0e <__ieee754_pow+0x21e>
 8013e2e:	2000      	movs	r0, #0
 8013e30:	b009      	add	sp, #36	; 0x24
 8013e32:	ecbd 8b06 	vpop	{d8-d10}
 8013e36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e3a:	f001 bd89 	b.w	8015950 <__math_uflow>
 8013e3e:	bf00      	nop
 8013e40:	fff00000 	.word	0xfff00000
 8013e44:	7ff00000 	.word	0x7ff00000
 8013e48:	433fffff 	.word	0x433fffff
 8013e4c:	3ff00000 	.word	0x3ff00000
 8013e50:	3fefffff 	.word	0x3fefffff
 8013e54:	3fe00000 	.word	0x3fe00000
 8013e58:	41e00000 	.word	0x41e00000
 8013e5c:	4b60      	ldr	r3, [pc, #384]	; (8013fe0 <__ieee754_pow+0x3f0>)
 8013e5e:	2200      	movs	r2, #0
 8013e60:	f7ec fa12 	bl	8000288 <__aeabi_dsub>
 8013e64:	a354      	add	r3, pc, #336	; (adr r3, 8013fb8 <__ieee754_pow+0x3c8>)
 8013e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e6a:	4604      	mov	r4, r0
 8013e6c:	460d      	mov	r5, r1
 8013e6e:	f7ec fbc3 	bl	80005f8 <__aeabi_dmul>
 8013e72:	a353      	add	r3, pc, #332	; (adr r3, 8013fc0 <__ieee754_pow+0x3d0>)
 8013e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e78:	4606      	mov	r6, r0
 8013e7a:	460f      	mov	r7, r1
 8013e7c:	4620      	mov	r0, r4
 8013e7e:	4629      	mov	r1, r5
 8013e80:	f7ec fbba 	bl	80005f8 <__aeabi_dmul>
 8013e84:	4b57      	ldr	r3, [pc, #348]	; (8013fe4 <__ieee754_pow+0x3f4>)
 8013e86:	4682      	mov	sl, r0
 8013e88:	468b      	mov	fp, r1
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	4620      	mov	r0, r4
 8013e8e:	4629      	mov	r1, r5
 8013e90:	f7ec fbb2 	bl	80005f8 <__aeabi_dmul>
 8013e94:	4602      	mov	r2, r0
 8013e96:	460b      	mov	r3, r1
 8013e98:	a14b      	add	r1, pc, #300	; (adr r1, 8013fc8 <__ieee754_pow+0x3d8>)
 8013e9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e9e:	f7ec f9f3 	bl	8000288 <__aeabi_dsub>
 8013ea2:	4622      	mov	r2, r4
 8013ea4:	462b      	mov	r3, r5
 8013ea6:	f7ec fba7 	bl	80005f8 <__aeabi_dmul>
 8013eaa:	4602      	mov	r2, r0
 8013eac:	460b      	mov	r3, r1
 8013eae:	2000      	movs	r0, #0
 8013eb0:	494d      	ldr	r1, [pc, #308]	; (8013fe8 <__ieee754_pow+0x3f8>)
 8013eb2:	f7ec f9e9 	bl	8000288 <__aeabi_dsub>
 8013eb6:	4622      	mov	r2, r4
 8013eb8:	4680      	mov	r8, r0
 8013eba:	4689      	mov	r9, r1
 8013ebc:	462b      	mov	r3, r5
 8013ebe:	4620      	mov	r0, r4
 8013ec0:	4629      	mov	r1, r5
 8013ec2:	f7ec fb99 	bl	80005f8 <__aeabi_dmul>
 8013ec6:	4602      	mov	r2, r0
 8013ec8:	460b      	mov	r3, r1
 8013eca:	4640      	mov	r0, r8
 8013ecc:	4649      	mov	r1, r9
 8013ece:	f7ec fb93 	bl	80005f8 <__aeabi_dmul>
 8013ed2:	a33f      	add	r3, pc, #252	; (adr r3, 8013fd0 <__ieee754_pow+0x3e0>)
 8013ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed8:	f7ec fb8e 	bl	80005f8 <__aeabi_dmul>
 8013edc:	4602      	mov	r2, r0
 8013ede:	460b      	mov	r3, r1
 8013ee0:	4650      	mov	r0, sl
 8013ee2:	4659      	mov	r1, fp
 8013ee4:	f7ec f9d0 	bl	8000288 <__aeabi_dsub>
 8013ee8:	4602      	mov	r2, r0
 8013eea:	460b      	mov	r3, r1
 8013eec:	4680      	mov	r8, r0
 8013eee:	4689      	mov	r9, r1
 8013ef0:	4630      	mov	r0, r6
 8013ef2:	4639      	mov	r1, r7
 8013ef4:	f7ec f9ca 	bl	800028c <__adddf3>
 8013ef8:	2000      	movs	r0, #0
 8013efa:	4632      	mov	r2, r6
 8013efc:	463b      	mov	r3, r7
 8013efe:	4604      	mov	r4, r0
 8013f00:	460d      	mov	r5, r1
 8013f02:	f7ec f9c1 	bl	8000288 <__aeabi_dsub>
 8013f06:	4602      	mov	r2, r0
 8013f08:	460b      	mov	r3, r1
 8013f0a:	4640      	mov	r0, r8
 8013f0c:	4649      	mov	r1, r9
 8013f0e:	f7ec f9bb 	bl	8000288 <__aeabi_dsub>
 8013f12:	9b04      	ldr	r3, [sp, #16]
 8013f14:	9a06      	ldr	r2, [sp, #24]
 8013f16:	3b01      	subs	r3, #1
 8013f18:	4313      	orrs	r3, r2
 8013f1a:	4682      	mov	sl, r0
 8013f1c:	468b      	mov	fp, r1
 8013f1e:	f040 81e7 	bne.w	80142f0 <__ieee754_pow+0x700>
 8013f22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013fd8 <__ieee754_pow+0x3e8>
 8013f26:	eeb0 8a47 	vmov.f32	s16, s14
 8013f2a:	eef0 8a67 	vmov.f32	s17, s15
 8013f2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013f32:	2600      	movs	r6, #0
 8013f34:	4632      	mov	r2, r6
 8013f36:	463b      	mov	r3, r7
 8013f38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f3c:	f7ec f9a4 	bl	8000288 <__aeabi_dsub>
 8013f40:	4622      	mov	r2, r4
 8013f42:	462b      	mov	r3, r5
 8013f44:	f7ec fb58 	bl	80005f8 <__aeabi_dmul>
 8013f48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f4c:	4680      	mov	r8, r0
 8013f4e:	4689      	mov	r9, r1
 8013f50:	4650      	mov	r0, sl
 8013f52:	4659      	mov	r1, fp
 8013f54:	f7ec fb50 	bl	80005f8 <__aeabi_dmul>
 8013f58:	4602      	mov	r2, r0
 8013f5a:	460b      	mov	r3, r1
 8013f5c:	4640      	mov	r0, r8
 8013f5e:	4649      	mov	r1, r9
 8013f60:	f7ec f994 	bl	800028c <__adddf3>
 8013f64:	4632      	mov	r2, r6
 8013f66:	463b      	mov	r3, r7
 8013f68:	4680      	mov	r8, r0
 8013f6a:	4689      	mov	r9, r1
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	4629      	mov	r1, r5
 8013f70:	f7ec fb42 	bl	80005f8 <__aeabi_dmul>
 8013f74:	460b      	mov	r3, r1
 8013f76:	4604      	mov	r4, r0
 8013f78:	460d      	mov	r5, r1
 8013f7a:	4602      	mov	r2, r0
 8013f7c:	4649      	mov	r1, r9
 8013f7e:	4640      	mov	r0, r8
 8013f80:	f7ec f984 	bl	800028c <__adddf3>
 8013f84:	4b19      	ldr	r3, [pc, #100]	; (8013fec <__ieee754_pow+0x3fc>)
 8013f86:	4299      	cmp	r1, r3
 8013f88:	ec45 4b19 	vmov	d9, r4, r5
 8013f8c:	4606      	mov	r6, r0
 8013f8e:	460f      	mov	r7, r1
 8013f90:	468b      	mov	fp, r1
 8013f92:	f340 82f1 	ble.w	8014578 <__ieee754_pow+0x988>
 8013f96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013f9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013f9e:	4303      	orrs	r3, r0
 8013fa0:	f000 81e4 	beq.w	801436c <__ieee754_pow+0x77c>
 8013fa4:	ec51 0b18 	vmov	r0, r1, d8
 8013fa8:	2200      	movs	r2, #0
 8013faa:	2300      	movs	r3, #0
 8013fac:	f7ec fd96 	bl	8000adc <__aeabi_dcmplt>
 8013fb0:	3800      	subs	r0, #0
 8013fb2:	bf18      	it	ne
 8013fb4:	2001      	movne	r0, #1
 8013fb6:	e72b      	b.n	8013e10 <__ieee754_pow+0x220>
 8013fb8:	60000000 	.word	0x60000000
 8013fbc:	3ff71547 	.word	0x3ff71547
 8013fc0:	f85ddf44 	.word	0xf85ddf44
 8013fc4:	3e54ae0b 	.word	0x3e54ae0b
 8013fc8:	55555555 	.word	0x55555555
 8013fcc:	3fd55555 	.word	0x3fd55555
 8013fd0:	652b82fe 	.word	0x652b82fe
 8013fd4:	3ff71547 	.word	0x3ff71547
 8013fd8:	00000000 	.word	0x00000000
 8013fdc:	bff00000 	.word	0xbff00000
 8013fe0:	3ff00000 	.word	0x3ff00000
 8013fe4:	3fd00000 	.word	0x3fd00000
 8013fe8:	3fe00000 	.word	0x3fe00000
 8013fec:	408fffff 	.word	0x408fffff
 8013ff0:	4bd5      	ldr	r3, [pc, #852]	; (8014348 <__ieee754_pow+0x758>)
 8013ff2:	402b      	ands	r3, r5
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	b92b      	cbnz	r3, 8014004 <__ieee754_pow+0x414>
 8013ff8:	4bd4      	ldr	r3, [pc, #848]	; (801434c <__ieee754_pow+0x75c>)
 8013ffa:	f7ec fafd 	bl	80005f8 <__aeabi_dmul>
 8013ffe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014002:	460c      	mov	r4, r1
 8014004:	1523      	asrs	r3, r4, #20
 8014006:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801400a:	4413      	add	r3, r2
 801400c:	9305      	str	r3, [sp, #20]
 801400e:	4bd0      	ldr	r3, [pc, #832]	; (8014350 <__ieee754_pow+0x760>)
 8014010:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014014:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014018:	429c      	cmp	r4, r3
 801401a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801401e:	dd08      	ble.n	8014032 <__ieee754_pow+0x442>
 8014020:	4bcc      	ldr	r3, [pc, #816]	; (8014354 <__ieee754_pow+0x764>)
 8014022:	429c      	cmp	r4, r3
 8014024:	f340 8162 	ble.w	80142ec <__ieee754_pow+0x6fc>
 8014028:	9b05      	ldr	r3, [sp, #20]
 801402a:	3301      	adds	r3, #1
 801402c:	9305      	str	r3, [sp, #20]
 801402e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014032:	2400      	movs	r4, #0
 8014034:	00e3      	lsls	r3, r4, #3
 8014036:	9307      	str	r3, [sp, #28]
 8014038:	4bc7      	ldr	r3, [pc, #796]	; (8014358 <__ieee754_pow+0x768>)
 801403a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801403e:	ed93 7b00 	vldr	d7, [r3]
 8014042:	4629      	mov	r1, r5
 8014044:	ec53 2b17 	vmov	r2, r3, d7
 8014048:	eeb0 9a47 	vmov.f32	s18, s14
 801404c:	eef0 9a67 	vmov.f32	s19, s15
 8014050:	4682      	mov	sl, r0
 8014052:	f7ec f919 	bl	8000288 <__aeabi_dsub>
 8014056:	4652      	mov	r2, sl
 8014058:	4606      	mov	r6, r0
 801405a:	460f      	mov	r7, r1
 801405c:	462b      	mov	r3, r5
 801405e:	ec51 0b19 	vmov	r0, r1, d9
 8014062:	f7ec f913 	bl	800028c <__adddf3>
 8014066:	4602      	mov	r2, r0
 8014068:	460b      	mov	r3, r1
 801406a:	2000      	movs	r0, #0
 801406c:	49bb      	ldr	r1, [pc, #748]	; (801435c <__ieee754_pow+0x76c>)
 801406e:	f7ec fbed 	bl	800084c <__aeabi_ddiv>
 8014072:	ec41 0b1a 	vmov	d10, r0, r1
 8014076:	4602      	mov	r2, r0
 8014078:	460b      	mov	r3, r1
 801407a:	4630      	mov	r0, r6
 801407c:	4639      	mov	r1, r7
 801407e:	f7ec fabb 	bl	80005f8 <__aeabi_dmul>
 8014082:	2300      	movs	r3, #0
 8014084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014088:	9302      	str	r3, [sp, #8]
 801408a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801408e:	46ab      	mov	fp, r5
 8014090:	106d      	asrs	r5, r5, #1
 8014092:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014096:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801409a:	ec41 0b18 	vmov	d8, r0, r1
 801409e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80140a2:	2200      	movs	r2, #0
 80140a4:	4640      	mov	r0, r8
 80140a6:	4649      	mov	r1, r9
 80140a8:	4614      	mov	r4, r2
 80140aa:	461d      	mov	r5, r3
 80140ac:	f7ec faa4 	bl	80005f8 <__aeabi_dmul>
 80140b0:	4602      	mov	r2, r0
 80140b2:	460b      	mov	r3, r1
 80140b4:	4630      	mov	r0, r6
 80140b6:	4639      	mov	r1, r7
 80140b8:	f7ec f8e6 	bl	8000288 <__aeabi_dsub>
 80140bc:	ec53 2b19 	vmov	r2, r3, d9
 80140c0:	4606      	mov	r6, r0
 80140c2:	460f      	mov	r7, r1
 80140c4:	4620      	mov	r0, r4
 80140c6:	4629      	mov	r1, r5
 80140c8:	f7ec f8de 	bl	8000288 <__aeabi_dsub>
 80140cc:	4602      	mov	r2, r0
 80140ce:	460b      	mov	r3, r1
 80140d0:	4650      	mov	r0, sl
 80140d2:	4659      	mov	r1, fp
 80140d4:	f7ec f8d8 	bl	8000288 <__aeabi_dsub>
 80140d8:	4642      	mov	r2, r8
 80140da:	464b      	mov	r3, r9
 80140dc:	f7ec fa8c 	bl	80005f8 <__aeabi_dmul>
 80140e0:	4602      	mov	r2, r0
 80140e2:	460b      	mov	r3, r1
 80140e4:	4630      	mov	r0, r6
 80140e6:	4639      	mov	r1, r7
 80140e8:	f7ec f8ce 	bl	8000288 <__aeabi_dsub>
 80140ec:	ec53 2b1a 	vmov	r2, r3, d10
 80140f0:	f7ec fa82 	bl	80005f8 <__aeabi_dmul>
 80140f4:	ec53 2b18 	vmov	r2, r3, d8
 80140f8:	ec41 0b19 	vmov	d9, r0, r1
 80140fc:	ec51 0b18 	vmov	r0, r1, d8
 8014100:	f7ec fa7a 	bl	80005f8 <__aeabi_dmul>
 8014104:	a37c      	add	r3, pc, #496	; (adr r3, 80142f8 <__ieee754_pow+0x708>)
 8014106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801410a:	4604      	mov	r4, r0
 801410c:	460d      	mov	r5, r1
 801410e:	f7ec fa73 	bl	80005f8 <__aeabi_dmul>
 8014112:	a37b      	add	r3, pc, #492	; (adr r3, 8014300 <__ieee754_pow+0x710>)
 8014114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014118:	f7ec f8b8 	bl	800028c <__adddf3>
 801411c:	4622      	mov	r2, r4
 801411e:	462b      	mov	r3, r5
 8014120:	f7ec fa6a 	bl	80005f8 <__aeabi_dmul>
 8014124:	a378      	add	r3, pc, #480	; (adr r3, 8014308 <__ieee754_pow+0x718>)
 8014126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801412a:	f7ec f8af 	bl	800028c <__adddf3>
 801412e:	4622      	mov	r2, r4
 8014130:	462b      	mov	r3, r5
 8014132:	f7ec fa61 	bl	80005f8 <__aeabi_dmul>
 8014136:	a376      	add	r3, pc, #472	; (adr r3, 8014310 <__ieee754_pow+0x720>)
 8014138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801413c:	f7ec f8a6 	bl	800028c <__adddf3>
 8014140:	4622      	mov	r2, r4
 8014142:	462b      	mov	r3, r5
 8014144:	f7ec fa58 	bl	80005f8 <__aeabi_dmul>
 8014148:	a373      	add	r3, pc, #460	; (adr r3, 8014318 <__ieee754_pow+0x728>)
 801414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801414e:	f7ec f89d 	bl	800028c <__adddf3>
 8014152:	4622      	mov	r2, r4
 8014154:	462b      	mov	r3, r5
 8014156:	f7ec fa4f 	bl	80005f8 <__aeabi_dmul>
 801415a:	a371      	add	r3, pc, #452	; (adr r3, 8014320 <__ieee754_pow+0x730>)
 801415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014160:	f7ec f894 	bl	800028c <__adddf3>
 8014164:	4622      	mov	r2, r4
 8014166:	4606      	mov	r6, r0
 8014168:	460f      	mov	r7, r1
 801416a:	462b      	mov	r3, r5
 801416c:	4620      	mov	r0, r4
 801416e:	4629      	mov	r1, r5
 8014170:	f7ec fa42 	bl	80005f8 <__aeabi_dmul>
 8014174:	4602      	mov	r2, r0
 8014176:	460b      	mov	r3, r1
 8014178:	4630      	mov	r0, r6
 801417a:	4639      	mov	r1, r7
 801417c:	f7ec fa3c 	bl	80005f8 <__aeabi_dmul>
 8014180:	4642      	mov	r2, r8
 8014182:	4604      	mov	r4, r0
 8014184:	460d      	mov	r5, r1
 8014186:	464b      	mov	r3, r9
 8014188:	ec51 0b18 	vmov	r0, r1, d8
 801418c:	f7ec f87e 	bl	800028c <__adddf3>
 8014190:	ec53 2b19 	vmov	r2, r3, d9
 8014194:	f7ec fa30 	bl	80005f8 <__aeabi_dmul>
 8014198:	4622      	mov	r2, r4
 801419a:	462b      	mov	r3, r5
 801419c:	f7ec f876 	bl	800028c <__adddf3>
 80141a0:	4642      	mov	r2, r8
 80141a2:	4682      	mov	sl, r0
 80141a4:	468b      	mov	fp, r1
 80141a6:	464b      	mov	r3, r9
 80141a8:	4640      	mov	r0, r8
 80141aa:	4649      	mov	r1, r9
 80141ac:	f7ec fa24 	bl	80005f8 <__aeabi_dmul>
 80141b0:	4b6b      	ldr	r3, [pc, #428]	; (8014360 <__ieee754_pow+0x770>)
 80141b2:	2200      	movs	r2, #0
 80141b4:	4606      	mov	r6, r0
 80141b6:	460f      	mov	r7, r1
 80141b8:	f7ec f868 	bl	800028c <__adddf3>
 80141bc:	4652      	mov	r2, sl
 80141be:	465b      	mov	r3, fp
 80141c0:	f7ec f864 	bl	800028c <__adddf3>
 80141c4:	2000      	movs	r0, #0
 80141c6:	4604      	mov	r4, r0
 80141c8:	460d      	mov	r5, r1
 80141ca:	4602      	mov	r2, r0
 80141cc:	460b      	mov	r3, r1
 80141ce:	4640      	mov	r0, r8
 80141d0:	4649      	mov	r1, r9
 80141d2:	f7ec fa11 	bl	80005f8 <__aeabi_dmul>
 80141d6:	4b62      	ldr	r3, [pc, #392]	; (8014360 <__ieee754_pow+0x770>)
 80141d8:	4680      	mov	r8, r0
 80141da:	4689      	mov	r9, r1
 80141dc:	2200      	movs	r2, #0
 80141de:	4620      	mov	r0, r4
 80141e0:	4629      	mov	r1, r5
 80141e2:	f7ec f851 	bl	8000288 <__aeabi_dsub>
 80141e6:	4632      	mov	r2, r6
 80141e8:	463b      	mov	r3, r7
 80141ea:	f7ec f84d 	bl	8000288 <__aeabi_dsub>
 80141ee:	4602      	mov	r2, r0
 80141f0:	460b      	mov	r3, r1
 80141f2:	4650      	mov	r0, sl
 80141f4:	4659      	mov	r1, fp
 80141f6:	f7ec f847 	bl	8000288 <__aeabi_dsub>
 80141fa:	ec53 2b18 	vmov	r2, r3, d8
 80141fe:	f7ec f9fb 	bl	80005f8 <__aeabi_dmul>
 8014202:	4622      	mov	r2, r4
 8014204:	4606      	mov	r6, r0
 8014206:	460f      	mov	r7, r1
 8014208:	462b      	mov	r3, r5
 801420a:	ec51 0b19 	vmov	r0, r1, d9
 801420e:	f7ec f9f3 	bl	80005f8 <__aeabi_dmul>
 8014212:	4602      	mov	r2, r0
 8014214:	460b      	mov	r3, r1
 8014216:	4630      	mov	r0, r6
 8014218:	4639      	mov	r1, r7
 801421a:	f7ec f837 	bl	800028c <__adddf3>
 801421e:	4606      	mov	r6, r0
 8014220:	460f      	mov	r7, r1
 8014222:	4602      	mov	r2, r0
 8014224:	460b      	mov	r3, r1
 8014226:	4640      	mov	r0, r8
 8014228:	4649      	mov	r1, r9
 801422a:	f7ec f82f 	bl	800028c <__adddf3>
 801422e:	a33e      	add	r3, pc, #248	; (adr r3, 8014328 <__ieee754_pow+0x738>)
 8014230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014234:	2000      	movs	r0, #0
 8014236:	4604      	mov	r4, r0
 8014238:	460d      	mov	r5, r1
 801423a:	f7ec f9dd 	bl	80005f8 <__aeabi_dmul>
 801423e:	4642      	mov	r2, r8
 8014240:	ec41 0b18 	vmov	d8, r0, r1
 8014244:	464b      	mov	r3, r9
 8014246:	4620      	mov	r0, r4
 8014248:	4629      	mov	r1, r5
 801424a:	f7ec f81d 	bl	8000288 <__aeabi_dsub>
 801424e:	4602      	mov	r2, r0
 8014250:	460b      	mov	r3, r1
 8014252:	4630      	mov	r0, r6
 8014254:	4639      	mov	r1, r7
 8014256:	f7ec f817 	bl	8000288 <__aeabi_dsub>
 801425a:	a335      	add	r3, pc, #212	; (adr r3, 8014330 <__ieee754_pow+0x740>)
 801425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014260:	f7ec f9ca 	bl	80005f8 <__aeabi_dmul>
 8014264:	a334      	add	r3, pc, #208	; (adr r3, 8014338 <__ieee754_pow+0x748>)
 8014266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801426a:	4606      	mov	r6, r0
 801426c:	460f      	mov	r7, r1
 801426e:	4620      	mov	r0, r4
 8014270:	4629      	mov	r1, r5
 8014272:	f7ec f9c1 	bl	80005f8 <__aeabi_dmul>
 8014276:	4602      	mov	r2, r0
 8014278:	460b      	mov	r3, r1
 801427a:	4630      	mov	r0, r6
 801427c:	4639      	mov	r1, r7
 801427e:	f7ec f805 	bl	800028c <__adddf3>
 8014282:	9a07      	ldr	r2, [sp, #28]
 8014284:	4b37      	ldr	r3, [pc, #220]	; (8014364 <__ieee754_pow+0x774>)
 8014286:	4413      	add	r3, r2
 8014288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801428c:	f7eb fffe 	bl	800028c <__adddf3>
 8014290:	4682      	mov	sl, r0
 8014292:	9805      	ldr	r0, [sp, #20]
 8014294:	468b      	mov	fp, r1
 8014296:	f7ec f945 	bl	8000524 <__aeabi_i2d>
 801429a:	9a07      	ldr	r2, [sp, #28]
 801429c:	4b32      	ldr	r3, [pc, #200]	; (8014368 <__ieee754_pow+0x778>)
 801429e:	4413      	add	r3, r2
 80142a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80142a4:	4606      	mov	r6, r0
 80142a6:	460f      	mov	r7, r1
 80142a8:	4652      	mov	r2, sl
 80142aa:	465b      	mov	r3, fp
 80142ac:	ec51 0b18 	vmov	r0, r1, d8
 80142b0:	f7eb ffec 	bl	800028c <__adddf3>
 80142b4:	4642      	mov	r2, r8
 80142b6:	464b      	mov	r3, r9
 80142b8:	f7eb ffe8 	bl	800028c <__adddf3>
 80142bc:	4632      	mov	r2, r6
 80142be:	463b      	mov	r3, r7
 80142c0:	f7eb ffe4 	bl	800028c <__adddf3>
 80142c4:	2000      	movs	r0, #0
 80142c6:	4632      	mov	r2, r6
 80142c8:	463b      	mov	r3, r7
 80142ca:	4604      	mov	r4, r0
 80142cc:	460d      	mov	r5, r1
 80142ce:	f7eb ffdb 	bl	8000288 <__aeabi_dsub>
 80142d2:	4642      	mov	r2, r8
 80142d4:	464b      	mov	r3, r9
 80142d6:	f7eb ffd7 	bl	8000288 <__aeabi_dsub>
 80142da:	ec53 2b18 	vmov	r2, r3, d8
 80142de:	f7eb ffd3 	bl	8000288 <__aeabi_dsub>
 80142e2:	4602      	mov	r2, r0
 80142e4:	460b      	mov	r3, r1
 80142e6:	4650      	mov	r0, sl
 80142e8:	4659      	mov	r1, fp
 80142ea:	e610      	b.n	8013f0e <__ieee754_pow+0x31e>
 80142ec:	2401      	movs	r4, #1
 80142ee:	e6a1      	b.n	8014034 <__ieee754_pow+0x444>
 80142f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8014340 <__ieee754_pow+0x750>
 80142f4:	e617      	b.n	8013f26 <__ieee754_pow+0x336>
 80142f6:	bf00      	nop
 80142f8:	4a454eef 	.word	0x4a454eef
 80142fc:	3fca7e28 	.word	0x3fca7e28
 8014300:	93c9db65 	.word	0x93c9db65
 8014304:	3fcd864a 	.word	0x3fcd864a
 8014308:	a91d4101 	.word	0xa91d4101
 801430c:	3fd17460 	.word	0x3fd17460
 8014310:	518f264d 	.word	0x518f264d
 8014314:	3fd55555 	.word	0x3fd55555
 8014318:	db6fabff 	.word	0xdb6fabff
 801431c:	3fdb6db6 	.word	0x3fdb6db6
 8014320:	33333303 	.word	0x33333303
 8014324:	3fe33333 	.word	0x3fe33333
 8014328:	e0000000 	.word	0xe0000000
 801432c:	3feec709 	.word	0x3feec709
 8014330:	dc3a03fd 	.word	0xdc3a03fd
 8014334:	3feec709 	.word	0x3feec709
 8014338:	145b01f5 	.word	0x145b01f5
 801433c:	be3e2fe0 	.word	0xbe3e2fe0
 8014340:	00000000 	.word	0x00000000
 8014344:	3ff00000 	.word	0x3ff00000
 8014348:	7ff00000 	.word	0x7ff00000
 801434c:	43400000 	.word	0x43400000
 8014350:	0003988e 	.word	0x0003988e
 8014354:	000bb679 	.word	0x000bb679
 8014358:	080163a8 	.word	0x080163a8
 801435c:	3ff00000 	.word	0x3ff00000
 8014360:	40080000 	.word	0x40080000
 8014364:	080163c8 	.word	0x080163c8
 8014368:	080163b8 	.word	0x080163b8
 801436c:	a3b5      	add	r3, pc, #724	; (adr r3, 8014644 <__ieee754_pow+0xa54>)
 801436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014372:	4640      	mov	r0, r8
 8014374:	4649      	mov	r1, r9
 8014376:	f7eb ff89 	bl	800028c <__adddf3>
 801437a:	4622      	mov	r2, r4
 801437c:	ec41 0b1a 	vmov	d10, r0, r1
 8014380:	462b      	mov	r3, r5
 8014382:	4630      	mov	r0, r6
 8014384:	4639      	mov	r1, r7
 8014386:	f7eb ff7f 	bl	8000288 <__aeabi_dsub>
 801438a:	4602      	mov	r2, r0
 801438c:	460b      	mov	r3, r1
 801438e:	ec51 0b1a 	vmov	r0, r1, d10
 8014392:	f7ec fbc1 	bl	8000b18 <__aeabi_dcmpgt>
 8014396:	2800      	cmp	r0, #0
 8014398:	f47f ae04 	bne.w	8013fa4 <__ieee754_pow+0x3b4>
 801439c:	4aa4      	ldr	r2, [pc, #656]	; (8014630 <__ieee754_pow+0xa40>)
 801439e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80143a2:	4293      	cmp	r3, r2
 80143a4:	f340 8108 	ble.w	80145b8 <__ieee754_pow+0x9c8>
 80143a8:	151b      	asrs	r3, r3, #20
 80143aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80143ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80143b2:	fa4a f303 	asr.w	r3, sl, r3
 80143b6:	445b      	add	r3, fp
 80143b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80143bc:	4e9d      	ldr	r6, [pc, #628]	; (8014634 <__ieee754_pow+0xa44>)
 80143be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80143c2:	4116      	asrs	r6, r2
 80143c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80143c8:	2000      	movs	r0, #0
 80143ca:	ea23 0106 	bic.w	r1, r3, r6
 80143ce:	f1c2 0214 	rsb	r2, r2, #20
 80143d2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80143d6:	fa4a fa02 	asr.w	sl, sl, r2
 80143da:	f1bb 0f00 	cmp.w	fp, #0
 80143de:	4602      	mov	r2, r0
 80143e0:	460b      	mov	r3, r1
 80143e2:	4620      	mov	r0, r4
 80143e4:	4629      	mov	r1, r5
 80143e6:	bfb8      	it	lt
 80143e8:	f1ca 0a00 	rsblt	sl, sl, #0
 80143ec:	f7eb ff4c 	bl	8000288 <__aeabi_dsub>
 80143f0:	ec41 0b19 	vmov	d9, r0, r1
 80143f4:	4642      	mov	r2, r8
 80143f6:	464b      	mov	r3, r9
 80143f8:	ec51 0b19 	vmov	r0, r1, d9
 80143fc:	f7eb ff46 	bl	800028c <__adddf3>
 8014400:	a37b      	add	r3, pc, #492	; (adr r3, 80145f0 <__ieee754_pow+0xa00>)
 8014402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014406:	2000      	movs	r0, #0
 8014408:	4604      	mov	r4, r0
 801440a:	460d      	mov	r5, r1
 801440c:	f7ec f8f4 	bl	80005f8 <__aeabi_dmul>
 8014410:	ec53 2b19 	vmov	r2, r3, d9
 8014414:	4606      	mov	r6, r0
 8014416:	460f      	mov	r7, r1
 8014418:	4620      	mov	r0, r4
 801441a:	4629      	mov	r1, r5
 801441c:	f7eb ff34 	bl	8000288 <__aeabi_dsub>
 8014420:	4602      	mov	r2, r0
 8014422:	460b      	mov	r3, r1
 8014424:	4640      	mov	r0, r8
 8014426:	4649      	mov	r1, r9
 8014428:	f7eb ff2e 	bl	8000288 <__aeabi_dsub>
 801442c:	a372      	add	r3, pc, #456	; (adr r3, 80145f8 <__ieee754_pow+0xa08>)
 801442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014432:	f7ec f8e1 	bl	80005f8 <__aeabi_dmul>
 8014436:	a372      	add	r3, pc, #456	; (adr r3, 8014600 <__ieee754_pow+0xa10>)
 8014438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801443c:	4680      	mov	r8, r0
 801443e:	4689      	mov	r9, r1
 8014440:	4620      	mov	r0, r4
 8014442:	4629      	mov	r1, r5
 8014444:	f7ec f8d8 	bl	80005f8 <__aeabi_dmul>
 8014448:	4602      	mov	r2, r0
 801444a:	460b      	mov	r3, r1
 801444c:	4640      	mov	r0, r8
 801444e:	4649      	mov	r1, r9
 8014450:	f7eb ff1c 	bl	800028c <__adddf3>
 8014454:	4604      	mov	r4, r0
 8014456:	460d      	mov	r5, r1
 8014458:	4602      	mov	r2, r0
 801445a:	460b      	mov	r3, r1
 801445c:	4630      	mov	r0, r6
 801445e:	4639      	mov	r1, r7
 8014460:	f7eb ff14 	bl	800028c <__adddf3>
 8014464:	4632      	mov	r2, r6
 8014466:	463b      	mov	r3, r7
 8014468:	4680      	mov	r8, r0
 801446a:	4689      	mov	r9, r1
 801446c:	f7eb ff0c 	bl	8000288 <__aeabi_dsub>
 8014470:	4602      	mov	r2, r0
 8014472:	460b      	mov	r3, r1
 8014474:	4620      	mov	r0, r4
 8014476:	4629      	mov	r1, r5
 8014478:	f7eb ff06 	bl	8000288 <__aeabi_dsub>
 801447c:	4642      	mov	r2, r8
 801447e:	4606      	mov	r6, r0
 8014480:	460f      	mov	r7, r1
 8014482:	464b      	mov	r3, r9
 8014484:	4640      	mov	r0, r8
 8014486:	4649      	mov	r1, r9
 8014488:	f7ec f8b6 	bl	80005f8 <__aeabi_dmul>
 801448c:	a35e      	add	r3, pc, #376	; (adr r3, 8014608 <__ieee754_pow+0xa18>)
 801448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014492:	4604      	mov	r4, r0
 8014494:	460d      	mov	r5, r1
 8014496:	f7ec f8af 	bl	80005f8 <__aeabi_dmul>
 801449a:	a35d      	add	r3, pc, #372	; (adr r3, 8014610 <__ieee754_pow+0xa20>)
 801449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144a0:	f7eb fef2 	bl	8000288 <__aeabi_dsub>
 80144a4:	4622      	mov	r2, r4
 80144a6:	462b      	mov	r3, r5
 80144a8:	f7ec f8a6 	bl	80005f8 <__aeabi_dmul>
 80144ac:	a35a      	add	r3, pc, #360	; (adr r3, 8014618 <__ieee754_pow+0xa28>)
 80144ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b2:	f7eb feeb 	bl	800028c <__adddf3>
 80144b6:	4622      	mov	r2, r4
 80144b8:	462b      	mov	r3, r5
 80144ba:	f7ec f89d 	bl	80005f8 <__aeabi_dmul>
 80144be:	a358      	add	r3, pc, #352	; (adr r3, 8014620 <__ieee754_pow+0xa30>)
 80144c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144c4:	f7eb fee0 	bl	8000288 <__aeabi_dsub>
 80144c8:	4622      	mov	r2, r4
 80144ca:	462b      	mov	r3, r5
 80144cc:	f7ec f894 	bl	80005f8 <__aeabi_dmul>
 80144d0:	a355      	add	r3, pc, #340	; (adr r3, 8014628 <__ieee754_pow+0xa38>)
 80144d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144d6:	f7eb fed9 	bl	800028c <__adddf3>
 80144da:	4622      	mov	r2, r4
 80144dc:	462b      	mov	r3, r5
 80144de:	f7ec f88b 	bl	80005f8 <__aeabi_dmul>
 80144e2:	4602      	mov	r2, r0
 80144e4:	460b      	mov	r3, r1
 80144e6:	4640      	mov	r0, r8
 80144e8:	4649      	mov	r1, r9
 80144ea:	f7eb fecd 	bl	8000288 <__aeabi_dsub>
 80144ee:	4604      	mov	r4, r0
 80144f0:	460d      	mov	r5, r1
 80144f2:	4602      	mov	r2, r0
 80144f4:	460b      	mov	r3, r1
 80144f6:	4640      	mov	r0, r8
 80144f8:	4649      	mov	r1, r9
 80144fa:	f7ec f87d 	bl	80005f8 <__aeabi_dmul>
 80144fe:	2200      	movs	r2, #0
 8014500:	ec41 0b19 	vmov	d9, r0, r1
 8014504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014508:	4620      	mov	r0, r4
 801450a:	4629      	mov	r1, r5
 801450c:	f7eb febc 	bl	8000288 <__aeabi_dsub>
 8014510:	4602      	mov	r2, r0
 8014512:	460b      	mov	r3, r1
 8014514:	ec51 0b19 	vmov	r0, r1, d9
 8014518:	f7ec f998 	bl	800084c <__aeabi_ddiv>
 801451c:	4632      	mov	r2, r6
 801451e:	4604      	mov	r4, r0
 8014520:	460d      	mov	r5, r1
 8014522:	463b      	mov	r3, r7
 8014524:	4640      	mov	r0, r8
 8014526:	4649      	mov	r1, r9
 8014528:	f7ec f866 	bl	80005f8 <__aeabi_dmul>
 801452c:	4632      	mov	r2, r6
 801452e:	463b      	mov	r3, r7
 8014530:	f7eb feac 	bl	800028c <__adddf3>
 8014534:	4602      	mov	r2, r0
 8014536:	460b      	mov	r3, r1
 8014538:	4620      	mov	r0, r4
 801453a:	4629      	mov	r1, r5
 801453c:	f7eb fea4 	bl	8000288 <__aeabi_dsub>
 8014540:	4642      	mov	r2, r8
 8014542:	464b      	mov	r3, r9
 8014544:	f7eb fea0 	bl	8000288 <__aeabi_dsub>
 8014548:	460b      	mov	r3, r1
 801454a:	4602      	mov	r2, r0
 801454c:	493a      	ldr	r1, [pc, #232]	; (8014638 <__ieee754_pow+0xa48>)
 801454e:	2000      	movs	r0, #0
 8014550:	f7eb fe9a 	bl	8000288 <__aeabi_dsub>
 8014554:	ec41 0b10 	vmov	d0, r0, r1
 8014558:	ee10 3a90 	vmov	r3, s1
 801455c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014564:	da2b      	bge.n	80145be <__ieee754_pow+0x9ce>
 8014566:	4650      	mov	r0, sl
 8014568:	f001 fa3a 	bl	80159e0 <scalbn>
 801456c:	ec51 0b10 	vmov	r0, r1, d0
 8014570:	ec53 2b18 	vmov	r2, r3, d8
 8014574:	f7ff bbed 	b.w	8013d52 <__ieee754_pow+0x162>
 8014578:	4b30      	ldr	r3, [pc, #192]	; (801463c <__ieee754_pow+0xa4c>)
 801457a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801457e:	429e      	cmp	r6, r3
 8014580:	f77f af0c 	ble.w	801439c <__ieee754_pow+0x7ac>
 8014584:	4b2e      	ldr	r3, [pc, #184]	; (8014640 <__ieee754_pow+0xa50>)
 8014586:	440b      	add	r3, r1
 8014588:	4303      	orrs	r3, r0
 801458a:	d009      	beq.n	80145a0 <__ieee754_pow+0x9b0>
 801458c:	ec51 0b18 	vmov	r0, r1, d8
 8014590:	2200      	movs	r2, #0
 8014592:	2300      	movs	r3, #0
 8014594:	f7ec faa2 	bl	8000adc <__aeabi_dcmplt>
 8014598:	3800      	subs	r0, #0
 801459a:	bf18      	it	ne
 801459c:	2001      	movne	r0, #1
 801459e:	e447      	b.n	8013e30 <__ieee754_pow+0x240>
 80145a0:	4622      	mov	r2, r4
 80145a2:	462b      	mov	r3, r5
 80145a4:	f7eb fe70 	bl	8000288 <__aeabi_dsub>
 80145a8:	4642      	mov	r2, r8
 80145aa:	464b      	mov	r3, r9
 80145ac:	f7ec faaa 	bl	8000b04 <__aeabi_dcmpge>
 80145b0:	2800      	cmp	r0, #0
 80145b2:	f43f aef3 	beq.w	801439c <__ieee754_pow+0x7ac>
 80145b6:	e7e9      	b.n	801458c <__ieee754_pow+0x99c>
 80145b8:	f04f 0a00 	mov.w	sl, #0
 80145bc:	e71a      	b.n	80143f4 <__ieee754_pow+0x804>
 80145be:	ec51 0b10 	vmov	r0, r1, d0
 80145c2:	4619      	mov	r1, r3
 80145c4:	e7d4      	b.n	8014570 <__ieee754_pow+0x980>
 80145c6:	491c      	ldr	r1, [pc, #112]	; (8014638 <__ieee754_pow+0xa48>)
 80145c8:	2000      	movs	r0, #0
 80145ca:	f7ff bb30 	b.w	8013c2e <__ieee754_pow+0x3e>
 80145ce:	2000      	movs	r0, #0
 80145d0:	2100      	movs	r1, #0
 80145d2:	f7ff bb2c 	b.w	8013c2e <__ieee754_pow+0x3e>
 80145d6:	4630      	mov	r0, r6
 80145d8:	4639      	mov	r1, r7
 80145da:	f7ff bb28 	b.w	8013c2e <__ieee754_pow+0x3e>
 80145de:	9204      	str	r2, [sp, #16]
 80145e0:	f7ff bb7a 	b.w	8013cd8 <__ieee754_pow+0xe8>
 80145e4:	2300      	movs	r3, #0
 80145e6:	f7ff bb64 	b.w	8013cb2 <__ieee754_pow+0xc2>
 80145ea:	bf00      	nop
 80145ec:	f3af 8000 	nop.w
 80145f0:	00000000 	.word	0x00000000
 80145f4:	3fe62e43 	.word	0x3fe62e43
 80145f8:	fefa39ef 	.word	0xfefa39ef
 80145fc:	3fe62e42 	.word	0x3fe62e42
 8014600:	0ca86c39 	.word	0x0ca86c39
 8014604:	be205c61 	.word	0xbe205c61
 8014608:	72bea4d0 	.word	0x72bea4d0
 801460c:	3e663769 	.word	0x3e663769
 8014610:	c5d26bf1 	.word	0xc5d26bf1
 8014614:	3ebbbd41 	.word	0x3ebbbd41
 8014618:	af25de2c 	.word	0xaf25de2c
 801461c:	3f11566a 	.word	0x3f11566a
 8014620:	16bebd93 	.word	0x16bebd93
 8014624:	3f66c16c 	.word	0x3f66c16c
 8014628:	5555553e 	.word	0x5555553e
 801462c:	3fc55555 	.word	0x3fc55555
 8014630:	3fe00000 	.word	0x3fe00000
 8014634:	000fffff 	.word	0x000fffff
 8014638:	3ff00000 	.word	0x3ff00000
 801463c:	4090cbff 	.word	0x4090cbff
 8014640:	3f6f3400 	.word	0x3f6f3400
 8014644:	652b82fe 	.word	0x652b82fe
 8014648:	3c971547 	.word	0x3c971547

0801464c <__ieee754_sqrt>:
 801464c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014650:	ec55 4b10 	vmov	r4, r5, d0
 8014654:	4e55      	ldr	r6, [pc, #340]	; (80147ac <__ieee754_sqrt+0x160>)
 8014656:	43ae      	bics	r6, r5
 8014658:	ee10 0a10 	vmov	r0, s0
 801465c:	ee10 3a10 	vmov	r3, s0
 8014660:	462a      	mov	r2, r5
 8014662:	4629      	mov	r1, r5
 8014664:	d110      	bne.n	8014688 <__ieee754_sqrt+0x3c>
 8014666:	ee10 2a10 	vmov	r2, s0
 801466a:	462b      	mov	r3, r5
 801466c:	f7eb ffc4 	bl	80005f8 <__aeabi_dmul>
 8014670:	4602      	mov	r2, r0
 8014672:	460b      	mov	r3, r1
 8014674:	4620      	mov	r0, r4
 8014676:	4629      	mov	r1, r5
 8014678:	f7eb fe08 	bl	800028c <__adddf3>
 801467c:	4604      	mov	r4, r0
 801467e:	460d      	mov	r5, r1
 8014680:	ec45 4b10 	vmov	d0, r4, r5
 8014684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014688:	2d00      	cmp	r5, #0
 801468a:	dc10      	bgt.n	80146ae <__ieee754_sqrt+0x62>
 801468c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014690:	4330      	orrs	r0, r6
 8014692:	d0f5      	beq.n	8014680 <__ieee754_sqrt+0x34>
 8014694:	b15d      	cbz	r5, 80146ae <__ieee754_sqrt+0x62>
 8014696:	ee10 2a10 	vmov	r2, s0
 801469a:	462b      	mov	r3, r5
 801469c:	ee10 0a10 	vmov	r0, s0
 80146a0:	f7eb fdf2 	bl	8000288 <__aeabi_dsub>
 80146a4:	4602      	mov	r2, r0
 80146a6:	460b      	mov	r3, r1
 80146a8:	f7ec f8d0 	bl	800084c <__aeabi_ddiv>
 80146ac:	e7e6      	b.n	801467c <__ieee754_sqrt+0x30>
 80146ae:	1512      	asrs	r2, r2, #20
 80146b0:	d074      	beq.n	801479c <__ieee754_sqrt+0x150>
 80146b2:	07d4      	lsls	r4, r2, #31
 80146b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80146b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80146bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80146c0:	bf5e      	ittt	pl
 80146c2:	0fda      	lsrpl	r2, r3, #31
 80146c4:	005b      	lslpl	r3, r3, #1
 80146c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80146ca:	2400      	movs	r4, #0
 80146cc:	0fda      	lsrs	r2, r3, #31
 80146ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80146d2:	107f      	asrs	r7, r7, #1
 80146d4:	005b      	lsls	r3, r3, #1
 80146d6:	2516      	movs	r5, #22
 80146d8:	4620      	mov	r0, r4
 80146da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80146de:	1886      	adds	r6, r0, r2
 80146e0:	428e      	cmp	r6, r1
 80146e2:	bfde      	ittt	le
 80146e4:	1b89      	suble	r1, r1, r6
 80146e6:	18b0      	addle	r0, r6, r2
 80146e8:	18a4      	addle	r4, r4, r2
 80146ea:	0049      	lsls	r1, r1, #1
 80146ec:	3d01      	subs	r5, #1
 80146ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80146f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80146f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80146fa:	d1f0      	bne.n	80146de <__ieee754_sqrt+0x92>
 80146fc:	462a      	mov	r2, r5
 80146fe:	f04f 0e20 	mov.w	lr, #32
 8014702:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014706:	4281      	cmp	r1, r0
 8014708:	eb06 0c05 	add.w	ip, r6, r5
 801470c:	dc02      	bgt.n	8014714 <__ieee754_sqrt+0xc8>
 801470e:	d113      	bne.n	8014738 <__ieee754_sqrt+0xec>
 8014710:	459c      	cmp	ip, r3
 8014712:	d811      	bhi.n	8014738 <__ieee754_sqrt+0xec>
 8014714:	f1bc 0f00 	cmp.w	ip, #0
 8014718:	eb0c 0506 	add.w	r5, ip, r6
 801471c:	da43      	bge.n	80147a6 <__ieee754_sqrt+0x15a>
 801471e:	2d00      	cmp	r5, #0
 8014720:	db41      	blt.n	80147a6 <__ieee754_sqrt+0x15a>
 8014722:	f100 0801 	add.w	r8, r0, #1
 8014726:	1a09      	subs	r1, r1, r0
 8014728:	459c      	cmp	ip, r3
 801472a:	bf88      	it	hi
 801472c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8014730:	eba3 030c 	sub.w	r3, r3, ip
 8014734:	4432      	add	r2, r6
 8014736:	4640      	mov	r0, r8
 8014738:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801473c:	f1be 0e01 	subs.w	lr, lr, #1
 8014740:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8014744:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014748:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801474c:	d1db      	bne.n	8014706 <__ieee754_sqrt+0xba>
 801474e:	430b      	orrs	r3, r1
 8014750:	d006      	beq.n	8014760 <__ieee754_sqrt+0x114>
 8014752:	1c50      	adds	r0, r2, #1
 8014754:	bf13      	iteet	ne
 8014756:	3201      	addne	r2, #1
 8014758:	3401      	addeq	r4, #1
 801475a:	4672      	moveq	r2, lr
 801475c:	f022 0201 	bicne.w	r2, r2, #1
 8014760:	1063      	asrs	r3, r4, #1
 8014762:	0852      	lsrs	r2, r2, #1
 8014764:	07e1      	lsls	r1, r4, #31
 8014766:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801476a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801476e:	bf48      	it	mi
 8014770:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8014774:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8014778:	4614      	mov	r4, r2
 801477a:	e781      	b.n	8014680 <__ieee754_sqrt+0x34>
 801477c:	0ad9      	lsrs	r1, r3, #11
 801477e:	3815      	subs	r0, #21
 8014780:	055b      	lsls	r3, r3, #21
 8014782:	2900      	cmp	r1, #0
 8014784:	d0fa      	beq.n	801477c <__ieee754_sqrt+0x130>
 8014786:	02cd      	lsls	r5, r1, #11
 8014788:	d50a      	bpl.n	80147a0 <__ieee754_sqrt+0x154>
 801478a:	f1c2 0420 	rsb	r4, r2, #32
 801478e:	fa23 f404 	lsr.w	r4, r3, r4
 8014792:	1e55      	subs	r5, r2, #1
 8014794:	4093      	lsls	r3, r2
 8014796:	4321      	orrs	r1, r4
 8014798:	1b42      	subs	r2, r0, r5
 801479a:	e78a      	b.n	80146b2 <__ieee754_sqrt+0x66>
 801479c:	4610      	mov	r0, r2
 801479e:	e7f0      	b.n	8014782 <__ieee754_sqrt+0x136>
 80147a0:	0049      	lsls	r1, r1, #1
 80147a2:	3201      	adds	r2, #1
 80147a4:	e7ef      	b.n	8014786 <__ieee754_sqrt+0x13a>
 80147a6:	4680      	mov	r8, r0
 80147a8:	e7bd      	b.n	8014726 <__ieee754_sqrt+0xda>
 80147aa:	bf00      	nop
 80147ac:	7ff00000 	.word	0x7ff00000

080147b0 <__ieee754_asinf>:
 80147b0:	b538      	push	{r3, r4, r5, lr}
 80147b2:	ee10 5a10 	vmov	r5, s0
 80147b6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80147ba:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80147be:	ed2d 8b04 	vpush	{d8-d9}
 80147c2:	d10c      	bne.n	80147de <__ieee754_asinf+0x2e>
 80147c4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801493c <__ieee754_asinf+0x18c>
 80147c8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8014940 <__ieee754_asinf+0x190>
 80147cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80147d0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80147d4:	eeb0 0a67 	vmov.f32	s0, s15
 80147d8:	ecbd 8b04 	vpop	{d8-d9}
 80147dc:	bd38      	pop	{r3, r4, r5, pc}
 80147de:	dd04      	ble.n	80147ea <__ieee754_asinf+0x3a>
 80147e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80147e4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80147e8:	e7f6      	b.n	80147d8 <__ieee754_asinf+0x28>
 80147ea:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80147ee:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80147f2:	da0b      	bge.n	801480c <__ieee754_asinf+0x5c>
 80147f4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80147f8:	da52      	bge.n	80148a0 <__ieee754_asinf+0xf0>
 80147fa:	eddf 7a52 	vldr	s15, [pc, #328]	; 8014944 <__ieee754_asinf+0x194>
 80147fe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014802:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801480a:	dce5      	bgt.n	80147d8 <__ieee754_asinf+0x28>
 801480c:	f001 fa42 	bl	8015c94 <fabsf>
 8014810:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8014814:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8014818:	ee20 8a08 	vmul.f32	s16, s0, s16
 801481c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8014948 <__ieee754_asinf+0x198>
 8014820:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801494c <__ieee754_asinf+0x19c>
 8014824:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8014950 <__ieee754_asinf+0x1a0>
 8014828:	eea8 7a27 	vfma.f32	s14, s16, s15
 801482c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8014954 <__ieee754_asinf+0x1a4>
 8014830:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014834:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8014958 <__ieee754_asinf+0x1a8>
 8014838:	eea7 7a88 	vfma.f32	s14, s15, s16
 801483c:	eddf 7a47 	vldr	s15, [pc, #284]	; 801495c <__ieee754_asinf+0x1ac>
 8014840:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014844:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8014960 <__ieee754_asinf+0x1b0>
 8014848:	eea7 9a88 	vfma.f32	s18, s15, s16
 801484c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8014964 <__ieee754_asinf+0x1b4>
 8014850:	eee8 7a07 	vfma.f32	s15, s16, s14
 8014854:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8014968 <__ieee754_asinf+0x1b8>
 8014858:	eea7 7a88 	vfma.f32	s14, s15, s16
 801485c:	eddf 7a43 	vldr	s15, [pc, #268]	; 801496c <__ieee754_asinf+0x1bc>
 8014860:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014864:	eeb0 0a48 	vmov.f32	s0, s16
 8014868:	eee7 8a88 	vfma.f32	s17, s15, s16
 801486c:	f000 fd30 	bl	80152d0 <__ieee754_sqrtf>
 8014870:	4b3f      	ldr	r3, [pc, #252]	; (8014970 <__ieee754_asinf+0x1c0>)
 8014872:	ee29 9a08 	vmul.f32	s18, s18, s16
 8014876:	429c      	cmp	r4, r3
 8014878:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801487c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014880:	dd3d      	ble.n	80148fe <__ieee754_asinf+0x14e>
 8014882:	eea0 0a06 	vfma.f32	s0, s0, s12
 8014886:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8014974 <__ieee754_asinf+0x1c4>
 801488a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801488e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8014940 <__ieee754_asinf+0x190>
 8014892:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014896:	2d00      	cmp	r5, #0
 8014898:	bfd8      	it	le
 801489a:	eeb1 0a40 	vnegle.f32	s0, s0
 801489e:	e79b      	b.n	80147d8 <__ieee754_asinf+0x28>
 80148a0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80148a4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8014948 <__ieee754_asinf+0x198>
 80148a8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801494c <__ieee754_asinf+0x19c>
 80148ac:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8014960 <__ieee754_asinf+0x1b0>
 80148b0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80148b4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8014954 <__ieee754_asinf+0x1a4>
 80148b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80148bc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8014958 <__ieee754_asinf+0x1a8>
 80148c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80148c4:	eddf 6a25 	vldr	s13, [pc, #148]	; 801495c <__ieee754_asinf+0x1ac>
 80148c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80148cc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8014950 <__ieee754_asinf+0x1a0>
 80148d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80148d4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8014964 <__ieee754_asinf+0x1b4>
 80148d8:	eee7 6a86 	vfma.f32	s13, s15, s12
 80148dc:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8014968 <__ieee754_asinf+0x1b8>
 80148e0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80148e4:	eddf 6a21 	vldr	s13, [pc, #132]	; 801496c <__ieee754_asinf+0x1bc>
 80148e8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80148ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80148f0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80148f4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80148f8:	eea0 0a27 	vfma.f32	s0, s0, s15
 80148fc:	e76c      	b.n	80147d8 <__ieee754_asinf+0x28>
 80148fe:	ee10 3a10 	vmov	r3, s0
 8014902:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014906:	f023 030f 	bic.w	r3, r3, #15
 801490a:	ee07 3a10 	vmov	s14, r3
 801490e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8014912:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014916:	ee30 0a00 	vadd.f32	s0, s0, s0
 801491a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801491e:	eddf 7a07 	vldr	s15, [pc, #28]	; 801493c <__ieee754_asinf+0x18c>
 8014922:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8014926:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801492a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8014978 <__ieee754_asinf+0x1c8>
 801492e:	eeb0 6a40 	vmov.f32	s12, s0
 8014932:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014936:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801493a:	e7aa      	b.n	8014892 <__ieee754_asinf+0xe2>
 801493c:	b33bbd2e 	.word	0xb33bbd2e
 8014940:	3fc90fdb 	.word	0x3fc90fdb
 8014944:	7149f2ca 	.word	0x7149f2ca
 8014948:	3811ef08 	.word	0x3811ef08
 801494c:	3a4f7f04 	.word	0x3a4f7f04
 8014950:	3e2aaaab 	.word	0x3e2aaaab
 8014954:	bd241146 	.word	0xbd241146
 8014958:	3e4e0aa8 	.word	0x3e4e0aa8
 801495c:	bea6b090 	.word	0xbea6b090
 8014960:	3d9dc62e 	.word	0x3d9dc62e
 8014964:	bf303361 	.word	0xbf303361
 8014968:	4001572d 	.word	0x4001572d
 801496c:	c019d139 	.word	0xc019d139
 8014970:	3f799999 	.word	0x3f799999
 8014974:	333bbd2e 	.word	0x333bbd2e
 8014978:	3f490fdb 	.word	0x3f490fdb

0801497c <__ieee754_atan2f>:
 801497c:	ee10 2a90 	vmov	r2, s1
 8014980:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014984:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014988:	b510      	push	{r4, lr}
 801498a:	eef0 7a40 	vmov.f32	s15, s0
 801498e:	dc06      	bgt.n	801499e <__ieee754_atan2f+0x22>
 8014990:	ee10 0a10 	vmov	r0, s0
 8014994:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8014998:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801499c:	dd04      	ble.n	80149a8 <__ieee754_atan2f+0x2c>
 801499e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80149a2:	eeb0 0a67 	vmov.f32	s0, s15
 80149a6:	bd10      	pop	{r4, pc}
 80149a8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80149ac:	d103      	bne.n	80149b6 <__ieee754_atan2f+0x3a>
 80149ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149b2:	f001 b89b 	b.w	8015aec <atanf>
 80149b6:	1794      	asrs	r4, r2, #30
 80149b8:	f004 0402 	and.w	r4, r4, #2
 80149bc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80149c0:	b943      	cbnz	r3, 80149d4 <__ieee754_atan2f+0x58>
 80149c2:	2c02      	cmp	r4, #2
 80149c4:	d05e      	beq.n	8014a84 <__ieee754_atan2f+0x108>
 80149c6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014a98 <__ieee754_atan2f+0x11c>
 80149ca:	2c03      	cmp	r4, #3
 80149cc:	bf08      	it	eq
 80149ce:	eef0 7a47 	vmoveq.f32	s15, s14
 80149d2:	e7e6      	b.n	80149a2 <__ieee754_atan2f+0x26>
 80149d4:	b941      	cbnz	r1, 80149e8 <__ieee754_atan2f+0x6c>
 80149d6:	eddf 7a31 	vldr	s15, [pc, #196]	; 8014a9c <__ieee754_atan2f+0x120>
 80149da:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8014aa0 <__ieee754_atan2f+0x124>
 80149de:	2800      	cmp	r0, #0
 80149e0:	bfb8      	it	lt
 80149e2:	eef0 7a40 	vmovlt.f32	s15, s0
 80149e6:	e7dc      	b.n	80149a2 <__ieee754_atan2f+0x26>
 80149e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80149ec:	d110      	bne.n	8014a10 <__ieee754_atan2f+0x94>
 80149ee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80149f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80149f6:	d107      	bne.n	8014a08 <__ieee754_atan2f+0x8c>
 80149f8:	2c02      	cmp	r4, #2
 80149fa:	d846      	bhi.n	8014a8a <__ieee754_atan2f+0x10e>
 80149fc:	4b29      	ldr	r3, [pc, #164]	; (8014aa4 <__ieee754_atan2f+0x128>)
 80149fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014a02:	edd4 7a00 	vldr	s15, [r4]
 8014a06:	e7cc      	b.n	80149a2 <__ieee754_atan2f+0x26>
 8014a08:	2c02      	cmp	r4, #2
 8014a0a:	d841      	bhi.n	8014a90 <__ieee754_atan2f+0x114>
 8014a0c:	4b26      	ldr	r3, [pc, #152]	; (8014aa8 <__ieee754_atan2f+0x12c>)
 8014a0e:	e7f6      	b.n	80149fe <__ieee754_atan2f+0x82>
 8014a10:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014a14:	d0df      	beq.n	80149d6 <__ieee754_atan2f+0x5a>
 8014a16:	1a5b      	subs	r3, r3, r1
 8014a18:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8014a1c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8014a20:	da1a      	bge.n	8014a58 <__ieee754_atan2f+0xdc>
 8014a22:	2a00      	cmp	r2, #0
 8014a24:	da01      	bge.n	8014a2a <__ieee754_atan2f+0xae>
 8014a26:	313c      	adds	r1, #60	; 0x3c
 8014a28:	db19      	blt.n	8014a5e <__ieee754_atan2f+0xe2>
 8014a2a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8014a2e:	f001 f931 	bl	8015c94 <fabsf>
 8014a32:	f001 f85b 	bl	8015aec <atanf>
 8014a36:	eef0 7a40 	vmov.f32	s15, s0
 8014a3a:	2c01      	cmp	r4, #1
 8014a3c:	d012      	beq.n	8014a64 <__ieee754_atan2f+0xe8>
 8014a3e:	2c02      	cmp	r4, #2
 8014a40:	d017      	beq.n	8014a72 <__ieee754_atan2f+0xf6>
 8014a42:	2c00      	cmp	r4, #0
 8014a44:	d0ad      	beq.n	80149a2 <__ieee754_atan2f+0x26>
 8014a46:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8014aac <__ieee754_atan2f+0x130>
 8014a4a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014a4e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8014ab0 <__ieee754_atan2f+0x134>
 8014a52:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014a56:	e7a4      	b.n	80149a2 <__ieee754_atan2f+0x26>
 8014a58:	eddf 7a10 	vldr	s15, [pc, #64]	; 8014a9c <__ieee754_atan2f+0x120>
 8014a5c:	e7ed      	b.n	8014a3a <__ieee754_atan2f+0xbe>
 8014a5e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014ab4 <__ieee754_atan2f+0x138>
 8014a62:	e7ea      	b.n	8014a3a <__ieee754_atan2f+0xbe>
 8014a64:	ee17 3a90 	vmov	r3, s15
 8014a68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014a6c:	ee07 3a90 	vmov	s15, r3
 8014a70:	e797      	b.n	80149a2 <__ieee754_atan2f+0x26>
 8014a72:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8014aac <__ieee754_atan2f+0x130>
 8014a76:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014a7a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8014ab0 <__ieee754_atan2f+0x134>
 8014a7e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014a82:	e78e      	b.n	80149a2 <__ieee754_atan2f+0x26>
 8014a84:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014ab0 <__ieee754_atan2f+0x134>
 8014a88:	e78b      	b.n	80149a2 <__ieee754_atan2f+0x26>
 8014a8a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014ab8 <__ieee754_atan2f+0x13c>
 8014a8e:	e788      	b.n	80149a2 <__ieee754_atan2f+0x26>
 8014a90:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014ab4 <__ieee754_atan2f+0x138>
 8014a94:	e785      	b.n	80149a2 <__ieee754_atan2f+0x26>
 8014a96:	bf00      	nop
 8014a98:	c0490fdb 	.word	0xc0490fdb
 8014a9c:	3fc90fdb 	.word	0x3fc90fdb
 8014aa0:	bfc90fdb 	.word	0xbfc90fdb
 8014aa4:	080163d8 	.word	0x080163d8
 8014aa8:	080163e4 	.word	0x080163e4
 8014aac:	33bbbd2e 	.word	0x33bbbd2e
 8014ab0:	40490fdb 	.word	0x40490fdb
 8014ab4:	00000000 	.word	0x00000000
 8014ab8:	3f490fdb 	.word	0x3f490fdb

08014abc <__ieee754_powf>:
 8014abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ac0:	ee10 4a90 	vmov	r4, s1
 8014ac4:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8014ac8:	ed2d 8b02 	vpush	{d8}
 8014acc:	ee10 6a10 	vmov	r6, s0
 8014ad0:	eeb0 8a40 	vmov.f32	s16, s0
 8014ad4:	eef0 8a60 	vmov.f32	s17, s1
 8014ad8:	d10c      	bne.n	8014af4 <__ieee754_powf+0x38>
 8014ada:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8014ade:	0076      	lsls	r6, r6, #1
 8014ae0:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8014ae4:	f240 8296 	bls.w	8015014 <__ieee754_powf+0x558>
 8014ae8:	ee38 0a28 	vadd.f32	s0, s16, s17
 8014aec:	ecbd 8b02 	vpop	{d8}
 8014af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014af4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8014af8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8014afc:	dcf4      	bgt.n	8014ae8 <__ieee754_powf+0x2c>
 8014afe:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8014b02:	dd08      	ble.n	8014b16 <__ieee754_powf+0x5a>
 8014b04:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8014b08:	d1ee      	bne.n	8014ae8 <__ieee754_powf+0x2c>
 8014b0a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8014b0e:	0064      	lsls	r4, r4, #1
 8014b10:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8014b14:	e7e6      	b.n	8014ae4 <__ieee754_powf+0x28>
 8014b16:	2e00      	cmp	r6, #0
 8014b18:	da20      	bge.n	8014b5c <__ieee754_powf+0xa0>
 8014b1a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8014b1e:	da2d      	bge.n	8014b7c <__ieee754_powf+0xc0>
 8014b20:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8014b24:	f2c0 827f 	blt.w	8015026 <__ieee754_powf+0x56a>
 8014b28:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8014b2c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8014b30:	fa48 f703 	asr.w	r7, r8, r3
 8014b34:	fa07 f303 	lsl.w	r3, r7, r3
 8014b38:	4543      	cmp	r3, r8
 8014b3a:	f040 8274 	bne.w	8015026 <__ieee754_powf+0x56a>
 8014b3e:	f007 0701 	and.w	r7, r7, #1
 8014b42:	f1c7 0702 	rsb	r7, r7, #2
 8014b46:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8014b4a:	d11f      	bne.n	8014b8c <__ieee754_powf+0xd0>
 8014b4c:	2c00      	cmp	r4, #0
 8014b4e:	f280 8267 	bge.w	8015020 <__ieee754_powf+0x564>
 8014b52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014b56:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8014b5a:	e7c7      	b.n	8014aec <__ieee754_powf+0x30>
 8014b5c:	2700      	movs	r7, #0
 8014b5e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8014b62:	d1f0      	bne.n	8014b46 <__ieee754_powf+0x8a>
 8014b64:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8014b68:	f000 8254 	beq.w	8015014 <__ieee754_powf+0x558>
 8014b6c:	dd08      	ble.n	8014b80 <__ieee754_powf+0xc4>
 8014b6e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8014e78 <__ieee754_powf+0x3bc>
 8014b72:	2c00      	cmp	r4, #0
 8014b74:	bfa8      	it	ge
 8014b76:	eeb0 0a68 	vmovge.f32	s0, s17
 8014b7a:	e7b7      	b.n	8014aec <__ieee754_powf+0x30>
 8014b7c:	2702      	movs	r7, #2
 8014b7e:	e7ee      	b.n	8014b5e <__ieee754_powf+0xa2>
 8014b80:	2c00      	cmp	r4, #0
 8014b82:	f280 824a 	bge.w	801501a <__ieee754_powf+0x55e>
 8014b86:	eeb1 0a68 	vneg.f32	s0, s17
 8014b8a:	e7af      	b.n	8014aec <__ieee754_powf+0x30>
 8014b8c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8014b90:	d102      	bne.n	8014b98 <__ieee754_powf+0xdc>
 8014b92:	ee28 0a08 	vmul.f32	s0, s16, s16
 8014b96:	e7a9      	b.n	8014aec <__ieee754_powf+0x30>
 8014b98:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8014b9c:	eeb0 0a48 	vmov.f32	s0, s16
 8014ba0:	d107      	bne.n	8014bb2 <__ieee754_powf+0xf6>
 8014ba2:	2e00      	cmp	r6, #0
 8014ba4:	db05      	blt.n	8014bb2 <__ieee754_powf+0xf6>
 8014ba6:	ecbd 8b02 	vpop	{d8}
 8014baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bae:	f000 bb8f 	b.w	80152d0 <__ieee754_sqrtf>
 8014bb2:	f001 f86f 	bl	8015c94 <fabsf>
 8014bb6:	b125      	cbz	r5, 8014bc2 <__ieee754_powf+0x106>
 8014bb8:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8014bbc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014bc0:	d116      	bne.n	8014bf0 <__ieee754_powf+0x134>
 8014bc2:	2c00      	cmp	r4, #0
 8014bc4:	bfbc      	itt	lt
 8014bc6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8014bca:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8014bce:	2e00      	cmp	r6, #0
 8014bd0:	da8c      	bge.n	8014aec <__ieee754_powf+0x30>
 8014bd2:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8014bd6:	ea55 0307 	orrs.w	r3, r5, r7
 8014bda:	d104      	bne.n	8014be6 <__ieee754_powf+0x12a>
 8014bdc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014be0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014be4:	e782      	b.n	8014aec <__ieee754_powf+0x30>
 8014be6:	2f01      	cmp	r7, #1
 8014be8:	d180      	bne.n	8014aec <__ieee754_powf+0x30>
 8014bea:	eeb1 0a40 	vneg.f32	s0, s0
 8014bee:	e77d      	b.n	8014aec <__ieee754_powf+0x30>
 8014bf0:	0ff0      	lsrs	r0, r6, #31
 8014bf2:	3801      	subs	r0, #1
 8014bf4:	ea57 0300 	orrs.w	r3, r7, r0
 8014bf8:	d104      	bne.n	8014c04 <__ieee754_powf+0x148>
 8014bfa:	ee38 8a48 	vsub.f32	s16, s16, s16
 8014bfe:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8014c02:	e773      	b.n	8014aec <__ieee754_powf+0x30>
 8014c04:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8014c08:	dd74      	ble.n	8014cf4 <__ieee754_powf+0x238>
 8014c0a:	4b9c      	ldr	r3, [pc, #624]	; (8014e7c <__ieee754_powf+0x3c0>)
 8014c0c:	429d      	cmp	r5, r3
 8014c0e:	dc08      	bgt.n	8014c22 <__ieee754_powf+0x166>
 8014c10:	2c00      	cmp	r4, #0
 8014c12:	da0b      	bge.n	8014c2c <__ieee754_powf+0x170>
 8014c14:	2000      	movs	r0, #0
 8014c16:	ecbd 8b02 	vpop	{d8}
 8014c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c1e:	f000 bec5 	b.w	80159ac <__math_oflowf>
 8014c22:	4b97      	ldr	r3, [pc, #604]	; (8014e80 <__ieee754_powf+0x3c4>)
 8014c24:	429d      	cmp	r5, r3
 8014c26:	dd08      	ble.n	8014c3a <__ieee754_powf+0x17e>
 8014c28:	2c00      	cmp	r4, #0
 8014c2a:	dcf3      	bgt.n	8014c14 <__ieee754_powf+0x158>
 8014c2c:	2000      	movs	r0, #0
 8014c2e:	ecbd 8b02 	vpop	{d8}
 8014c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c36:	f000 beb3 	b.w	80159a0 <__math_uflowf>
 8014c3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014c3e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014c42:	eddf 6a90 	vldr	s13, [pc, #576]	; 8014e84 <__ieee754_powf+0x3c8>
 8014c46:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8014c4a:	eee0 6a67 	vfms.f32	s13, s0, s15
 8014c4e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014c52:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8014c56:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c5e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8014e88 <__ieee754_powf+0x3cc>
 8014c62:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8014c66:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8014e8c <__ieee754_powf+0x3d0>
 8014c6a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014c6e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8014e90 <__ieee754_powf+0x3d4>
 8014c72:	eef0 6a67 	vmov.f32	s13, s15
 8014c76:	eee0 6a07 	vfma.f32	s13, s0, s14
 8014c7a:	ee16 3a90 	vmov	r3, s13
 8014c7e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014c82:	f023 030f 	bic.w	r3, r3, #15
 8014c86:	ee00 3a90 	vmov	s1, r3
 8014c8a:	eee0 0a47 	vfms.f32	s1, s0, s14
 8014c8e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8014c92:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8014c96:	f024 040f 	bic.w	r4, r4, #15
 8014c9a:	ee07 4a10 	vmov	s14, r4
 8014c9e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8014ca2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8014ca6:	ee07 3a90 	vmov	s15, r3
 8014caa:	eee7 0a27 	vfma.f32	s1, s14, s15
 8014cae:	3f01      	subs	r7, #1
 8014cb0:	ea57 0200 	orrs.w	r2, r7, r0
 8014cb4:	ee07 4a10 	vmov	s14, r4
 8014cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014cbc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014cc0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8014cc4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014cc8:	ee17 4a10 	vmov	r4, s14
 8014ccc:	bf08      	it	eq
 8014cce:	eeb0 8a40 	vmoveq.f32	s16, s0
 8014cd2:	2c00      	cmp	r4, #0
 8014cd4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014cd8:	f340 817e 	ble.w	8014fd8 <__ieee754_powf+0x51c>
 8014cdc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8014ce0:	f340 80f8 	ble.w	8014ed4 <__ieee754_powf+0x418>
 8014ce4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cec:	bf4c      	ite	mi
 8014cee:	2001      	movmi	r0, #1
 8014cf0:	2000      	movpl	r0, #0
 8014cf2:	e790      	b.n	8014c16 <__ieee754_powf+0x15a>
 8014cf4:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8014cf8:	bf01      	itttt	eq
 8014cfa:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8014e94 <__ieee754_powf+0x3d8>
 8014cfe:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8014d02:	f06f 0217 	mvneq.w	r2, #23
 8014d06:	ee17 5a90 	vmoveq	r5, s15
 8014d0a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8014d0e:	bf18      	it	ne
 8014d10:	2200      	movne	r2, #0
 8014d12:	3b7f      	subs	r3, #127	; 0x7f
 8014d14:	4413      	add	r3, r2
 8014d16:	4a60      	ldr	r2, [pc, #384]	; (8014e98 <__ieee754_powf+0x3dc>)
 8014d18:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8014d1c:	4295      	cmp	r5, r2
 8014d1e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8014d22:	dd06      	ble.n	8014d32 <__ieee754_powf+0x276>
 8014d24:	4a5d      	ldr	r2, [pc, #372]	; (8014e9c <__ieee754_powf+0x3e0>)
 8014d26:	4295      	cmp	r5, r2
 8014d28:	f340 80a4 	ble.w	8014e74 <__ieee754_powf+0x3b8>
 8014d2c:	3301      	adds	r3, #1
 8014d2e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8014d32:	2500      	movs	r5, #0
 8014d34:	4a5a      	ldr	r2, [pc, #360]	; (8014ea0 <__ieee754_powf+0x3e4>)
 8014d36:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8014d3a:	ee07 1a90 	vmov	s15, r1
 8014d3e:	ed92 7a00 	vldr	s14, [r2]
 8014d42:	4a58      	ldr	r2, [pc, #352]	; (8014ea4 <__ieee754_powf+0x3e8>)
 8014d44:	ee37 6a27 	vadd.f32	s12, s14, s15
 8014d48:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014d4c:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8014d50:	1049      	asrs	r1, r1, #1
 8014d52:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8014d56:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8014d5a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8014d5e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8014d62:	ee06 1a10 	vmov	s12, r1
 8014d66:	ee65 4a26 	vmul.f32	s9, s10, s13
 8014d6a:	ee36 7a47 	vsub.f32	s14, s12, s14
 8014d6e:	ee14 6a90 	vmov	r6, s9
 8014d72:	4016      	ands	r6, r2
 8014d74:	ee05 6a90 	vmov	s11, r6
 8014d78:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8014d7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d80:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014ea8 <__ieee754_powf+0x3ec>
 8014d84:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8014d88:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8014d8c:	ee25 6a26 	vmul.f32	s12, s10, s13
 8014d90:	eddf 6a46 	vldr	s13, [pc, #280]	; 8014eac <__ieee754_powf+0x3f0>
 8014d94:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014d98:	eddf 6a45 	vldr	s13, [pc, #276]	; 8014eb0 <__ieee754_powf+0x3f4>
 8014d9c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014da0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014e84 <__ieee754_powf+0x3c8>
 8014da4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014da8:	eddf 6a42 	vldr	s13, [pc, #264]	; 8014eb4 <__ieee754_powf+0x3f8>
 8014dac:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014db0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8014eb8 <__ieee754_powf+0x3fc>
 8014db4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014db8:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8014dbc:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8014dc0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014dc4:	eee5 6a07 	vfma.f32	s13, s10, s14
 8014dc8:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8014dcc:	eef0 7a45 	vmov.f32	s15, s10
 8014dd0:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8014dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014dd8:	ee17 1a90 	vmov	r1, s15
 8014ddc:	4011      	ands	r1, r2
 8014dde:	ee07 1a90 	vmov	s15, r1
 8014de2:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8014de6:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8014dea:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014dee:	ee27 7a24 	vmul.f32	s14, s14, s9
 8014df2:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014df6:	eeb0 6a47 	vmov.f32	s12, s14
 8014dfa:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8014dfe:	ee16 1a10 	vmov	r1, s12
 8014e02:	4011      	ands	r1, r2
 8014e04:	ee06 1a90 	vmov	s13, r1
 8014e08:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8014e0c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014ebc <__ieee754_powf+0x400>
 8014e10:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8014ec0 <__ieee754_powf+0x404>
 8014e14:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014e18:	ee06 1a10 	vmov	s12, r1
 8014e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014e20:	eddf 7a28 	vldr	s15, [pc, #160]	; 8014ec4 <__ieee754_powf+0x408>
 8014e24:	4928      	ldr	r1, [pc, #160]	; (8014ec8 <__ieee754_powf+0x40c>)
 8014e26:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014e2a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8014e2e:	edd1 7a00 	vldr	s15, [r1]
 8014e32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014e36:	ee07 3a90 	vmov	s15, r3
 8014e3a:	4b24      	ldr	r3, [pc, #144]	; (8014ecc <__ieee754_powf+0x410>)
 8014e3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014e40:	eef0 7a47 	vmov.f32	s15, s14
 8014e44:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014e48:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8014e4c:	edd5 0a00 	vldr	s1, [r5]
 8014e50:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014e58:	ee17 3a90 	vmov	r3, s15
 8014e5c:	4013      	ands	r3, r2
 8014e5e:	ee07 3a90 	vmov	s15, r3
 8014e62:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8014e66:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8014e6a:	eee6 6a65 	vfms.f32	s13, s12, s11
 8014e6e:	ee77 7a66 	vsub.f32	s15, s14, s13
 8014e72:	e70e      	b.n	8014c92 <__ieee754_powf+0x1d6>
 8014e74:	2501      	movs	r5, #1
 8014e76:	e75d      	b.n	8014d34 <__ieee754_powf+0x278>
 8014e78:	00000000 	.word	0x00000000
 8014e7c:	3f7ffff3 	.word	0x3f7ffff3
 8014e80:	3f800007 	.word	0x3f800007
 8014e84:	3eaaaaab 	.word	0x3eaaaaab
 8014e88:	3fb8aa3b 	.word	0x3fb8aa3b
 8014e8c:	36eca570 	.word	0x36eca570
 8014e90:	3fb8aa00 	.word	0x3fb8aa00
 8014e94:	4b800000 	.word	0x4b800000
 8014e98:	001cc471 	.word	0x001cc471
 8014e9c:	005db3d6 	.word	0x005db3d6
 8014ea0:	080163f0 	.word	0x080163f0
 8014ea4:	fffff000 	.word	0xfffff000
 8014ea8:	3e6c3255 	.word	0x3e6c3255
 8014eac:	3e53f142 	.word	0x3e53f142
 8014eb0:	3e8ba305 	.word	0x3e8ba305
 8014eb4:	3edb6db7 	.word	0x3edb6db7
 8014eb8:	3f19999a 	.word	0x3f19999a
 8014ebc:	3f76384f 	.word	0x3f76384f
 8014ec0:	3f763800 	.word	0x3f763800
 8014ec4:	369dc3a0 	.word	0x369dc3a0
 8014ec8:	08016400 	.word	0x08016400
 8014ecc:	080163f8 	.word	0x080163f8
 8014ed0:	3338aa3c 	.word	0x3338aa3c
 8014ed4:	f040 8095 	bne.w	8015002 <__ieee754_powf+0x546>
 8014ed8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8014ed0 <__ieee754_powf+0x414>
 8014edc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014ee0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8014ee4:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eec:	f73f aefa 	bgt.w	8014ce4 <__ieee754_powf+0x228>
 8014ef0:	15db      	asrs	r3, r3, #23
 8014ef2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8014ef6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014efa:	4103      	asrs	r3, r0
 8014efc:	4423      	add	r3, r4
 8014efe:	494b      	ldr	r1, [pc, #300]	; (801502c <__ieee754_powf+0x570>)
 8014f00:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014f04:	3a7f      	subs	r2, #127	; 0x7f
 8014f06:	4111      	asrs	r1, r2
 8014f08:	ea23 0101 	bic.w	r1, r3, r1
 8014f0c:	ee07 1a10 	vmov	s14, r1
 8014f10:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8014f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8014f18:	f1c2 0217 	rsb	r2, r2, #23
 8014f1c:	4110      	asrs	r0, r2
 8014f1e:	2c00      	cmp	r4, #0
 8014f20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014f24:	bfb8      	it	lt
 8014f26:	4240      	neglt	r0, r0
 8014f28:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8014f2c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8015030 <__ieee754_powf+0x574>
 8014f30:	eddf 6a40 	vldr	s13, [pc, #256]	; 8015034 <__ieee754_powf+0x578>
 8014f34:	ee17 3a10 	vmov	r3, s14
 8014f38:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014f3c:	f023 030f 	bic.w	r3, r3, #15
 8014f40:	ee07 3a10 	vmov	s14, r3
 8014f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f48:	ee27 0a00 	vmul.f32	s0, s14, s0
 8014f4c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014f50:	eddf 7a39 	vldr	s15, [pc, #228]	; 8015038 <__ieee754_powf+0x57c>
 8014f54:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8014f58:	eef0 7a40 	vmov.f32	s15, s0
 8014f5c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014f60:	eeb0 6a67 	vmov.f32	s12, s15
 8014f64:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014f68:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8014f6c:	ee30 0a46 	vsub.f32	s0, s0, s12
 8014f70:	eddf 6a32 	vldr	s13, [pc, #200]	; 801503c <__ieee754_powf+0x580>
 8014f74:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8015040 <__ieee754_powf+0x584>
 8014f78:	eee7 6a06 	vfma.f32	s13, s14, s12
 8014f7c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8015044 <__ieee754_powf+0x588>
 8014f80:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014f84:	eddf 6a30 	vldr	s13, [pc, #192]	; 8015048 <__ieee754_powf+0x58c>
 8014f88:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014f8c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801504c <__ieee754_powf+0x590>
 8014f90:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014f94:	eef0 6a67 	vmov.f32	s13, s15
 8014f98:	eee6 6a47 	vfms.f32	s13, s12, s14
 8014f9c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014fa0:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8014fa4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8014fa8:	eea7 0a80 	vfma.f32	s0, s15, s0
 8014fac:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8014fb0:	ee37 0a40 	vsub.f32	s0, s14, s0
 8014fb4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014fb8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014fbc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014fc0:	ee10 3a10 	vmov	r3, s0
 8014fc4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8014fc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014fcc:	da1f      	bge.n	801500e <__ieee754_powf+0x552>
 8014fce:	f000 febd 	bl	8015d4c <scalbnf>
 8014fd2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014fd6:	e589      	b.n	8014aec <__ieee754_powf+0x30>
 8014fd8:	4a1d      	ldr	r2, [pc, #116]	; (8015050 <__ieee754_powf+0x594>)
 8014fda:	4293      	cmp	r3, r2
 8014fdc:	dd07      	ble.n	8014fee <__ieee754_powf+0x532>
 8014fde:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fe6:	bf4c      	ite	mi
 8014fe8:	2001      	movmi	r0, #1
 8014fea:	2000      	movpl	r0, #0
 8014fec:	e61f      	b.n	8014c2e <__ieee754_powf+0x172>
 8014fee:	d108      	bne.n	8015002 <__ieee754_powf+0x546>
 8014ff0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014ff4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8014ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ffc:	f6ff af78 	blt.w	8014ef0 <__ieee754_powf+0x434>
 8015000:	e7ed      	b.n	8014fde <__ieee754_powf+0x522>
 8015002:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8015006:	f73f af73 	bgt.w	8014ef0 <__ieee754_powf+0x434>
 801500a:	2000      	movs	r0, #0
 801500c:	e78c      	b.n	8014f28 <__ieee754_powf+0x46c>
 801500e:	ee00 3a10 	vmov	s0, r3
 8015012:	e7de      	b.n	8014fd2 <__ieee754_powf+0x516>
 8015014:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015018:	e568      	b.n	8014aec <__ieee754_powf+0x30>
 801501a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8015054 <__ieee754_powf+0x598>
 801501e:	e565      	b.n	8014aec <__ieee754_powf+0x30>
 8015020:	eeb0 0a48 	vmov.f32	s0, s16
 8015024:	e562      	b.n	8014aec <__ieee754_powf+0x30>
 8015026:	2700      	movs	r7, #0
 8015028:	e58d      	b.n	8014b46 <__ieee754_powf+0x8a>
 801502a:	bf00      	nop
 801502c:	007fffff 	.word	0x007fffff
 8015030:	35bfbe8c 	.word	0x35bfbe8c
 8015034:	3f317200 	.word	0x3f317200
 8015038:	3f317218 	.word	0x3f317218
 801503c:	b5ddea0e 	.word	0xb5ddea0e
 8015040:	3331bb4c 	.word	0x3331bb4c
 8015044:	388ab355 	.word	0x388ab355
 8015048:	bb360b61 	.word	0xbb360b61
 801504c:	3e2aaaab 	.word	0x3e2aaaab
 8015050:	43160000 	.word	0x43160000
 8015054:	00000000 	.word	0x00000000

08015058 <__ieee754_rem_pio2f>:
 8015058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801505a:	ee10 6a10 	vmov	r6, s0
 801505e:	4b8e      	ldr	r3, [pc, #568]	; (8015298 <__ieee754_rem_pio2f+0x240>)
 8015060:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8015064:	429d      	cmp	r5, r3
 8015066:	b087      	sub	sp, #28
 8015068:	eef0 7a40 	vmov.f32	s15, s0
 801506c:	4604      	mov	r4, r0
 801506e:	dc05      	bgt.n	801507c <__ieee754_rem_pio2f+0x24>
 8015070:	2300      	movs	r3, #0
 8015072:	ed80 0a00 	vstr	s0, [r0]
 8015076:	6043      	str	r3, [r0, #4]
 8015078:	2000      	movs	r0, #0
 801507a:	e01a      	b.n	80150b2 <__ieee754_rem_pio2f+0x5a>
 801507c:	4b87      	ldr	r3, [pc, #540]	; (801529c <__ieee754_rem_pio2f+0x244>)
 801507e:	429d      	cmp	r5, r3
 8015080:	dc46      	bgt.n	8015110 <__ieee754_rem_pio2f+0xb8>
 8015082:	2e00      	cmp	r6, #0
 8015084:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80152a0 <__ieee754_rem_pio2f+0x248>
 8015088:	4b86      	ldr	r3, [pc, #536]	; (80152a4 <__ieee754_rem_pio2f+0x24c>)
 801508a:	f025 050f 	bic.w	r5, r5, #15
 801508e:	dd1f      	ble.n	80150d0 <__ieee754_rem_pio2f+0x78>
 8015090:	429d      	cmp	r5, r3
 8015092:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015096:	d00e      	beq.n	80150b6 <__ieee754_rem_pio2f+0x5e>
 8015098:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80152a8 <__ieee754_rem_pio2f+0x250>
 801509c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80150a0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80150a4:	ed80 0a00 	vstr	s0, [r0]
 80150a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80150ac:	2001      	movs	r0, #1
 80150ae:	edc4 7a01 	vstr	s15, [r4, #4]
 80150b2:	b007      	add	sp, #28
 80150b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150b6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80152ac <__ieee754_rem_pio2f+0x254>
 80150ba:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80152b0 <__ieee754_rem_pio2f+0x258>
 80150be:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80150c2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80150c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80150ca:	edc0 6a00 	vstr	s13, [r0]
 80150ce:	e7eb      	b.n	80150a8 <__ieee754_rem_pio2f+0x50>
 80150d0:	429d      	cmp	r5, r3
 80150d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80150d6:	d00e      	beq.n	80150f6 <__ieee754_rem_pio2f+0x9e>
 80150d8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80152a8 <__ieee754_rem_pio2f+0x250>
 80150dc:	ee37 0a87 	vadd.f32	s0, s15, s14
 80150e0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80150e4:	ed80 0a00 	vstr	s0, [r0]
 80150e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80150ec:	f04f 30ff 	mov.w	r0, #4294967295
 80150f0:	edc4 7a01 	vstr	s15, [r4, #4]
 80150f4:	e7dd      	b.n	80150b2 <__ieee754_rem_pio2f+0x5a>
 80150f6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80152ac <__ieee754_rem_pio2f+0x254>
 80150fa:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80152b0 <__ieee754_rem_pio2f+0x258>
 80150fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015102:	ee77 6a87 	vadd.f32	s13, s15, s14
 8015106:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801510a:	edc0 6a00 	vstr	s13, [r0]
 801510e:	e7eb      	b.n	80150e8 <__ieee754_rem_pio2f+0x90>
 8015110:	4b68      	ldr	r3, [pc, #416]	; (80152b4 <__ieee754_rem_pio2f+0x25c>)
 8015112:	429d      	cmp	r5, r3
 8015114:	dc72      	bgt.n	80151fc <__ieee754_rem_pio2f+0x1a4>
 8015116:	f000 fdbd 	bl	8015c94 <fabsf>
 801511a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80152b8 <__ieee754_rem_pio2f+0x260>
 801511e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015122:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801512a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801512e:	ee17 0a90 	vmov	r0, s15
 8015132:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80152a0 <__ieee754_rem_pio2f+0x248>
 8015136:	eea7 0a67 	vfms.f32	s0, s14, s15
 801513a:	281f      	cmp	r0, #31
 801513c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80152a8 <__ieee754_rem_pio2f+0x250>
 8015140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015144:	eeb1 6a47 	vneg.f32	s12, s14
 8015148:	ee70 6a67 	vsub.f32	s13, s0, s15
 801514c:	ee16 2a90 	vmov	r2, s13
 8015150:	dc1c      	bgt.n	801518c <__ieee754_rem_pio2f+0x134>
 8015152:	495a      	ldr	r1, [pc, #360]	; (80152bc <__ieee754_rem_pio2f+0x264>)
 8015154:	1e47      	subs	r7, r0, #1
 8015156:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801515a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801515e:	428b      	cmp	r3, r1
 8015160:	d014      	beq.n	801518c <__ieee754_rem_pio2f+0x134>
 8015162:	6022      	str	r2, [r4, #0]
 8015164:	ed94 7a00 	vldr	s14, [r4]
 8015168:	ee30 0a47 	vsub.f32	s0, s0, s14
 801516c:	2e00      	cmp	r6, #0
 801516e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015172:	ed84 0a01 	vstr	s0, [r4, #4]
 8015176:	da9c      	bge.n	80150b2 <__ieee754_rem_pio2f+0x5a>
 8015178:	eeb1 7a47 	vneg.f32	s14, s14
 801517c:	eeb1 0a40 	vneg.f32	s0, s0
 8015180:	ed84 7a00 	vstr	s14, [r4]
 8015184:	ed84 0a01 	vstr	s0, [r4, #4]
 8015188:	4240      	negs	r0, r0
 801518a:	e792      	b.n	80150b2 <__ieee754_rem_pio2f+0x5a>
 801518c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8015190:	15eb      	asrs	r3, r5, #23
 8015192:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8015196:	2d08      	cmp	r5, #8
 8015198:	dde3      	ble.n	8015162 <__ieee754_rem_pio2f+0x10a>
 801519a:	eddf 7a44 	vldr	s15, [pc, #272]	; 80152ac <__ieee754_rem_pio2f+0x254>
 801519e:	eddf 5a44 	vldr	s11, [pc, #272]	; 80152b0 <__ieee754_rem_pio2f+0x258>
 80151a2:	eef0 6a40 	vmov.f32	s13, s0
 80151a6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80151aa:	ee30 0a66 	vsub.f32	s0, s0, s13
 80151ae:	eea6 0a27 	vfma.f32	s0, s12, s15
 80151b2:	eef0 7a40 	vmov.f32	s15, s0
 80151b6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80151ba:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80151be:	ee15 2a90 	vmov	r2, s11
 80151c2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80151c6:	1a5b      	subs	r3, r3, r1
 80151c8:	2b19      	cmp	r3, #25
 80151ca:	dc04      	bgt.n	80151d6 <__ieee754_rem_pio2f+0x17e>
 80151cc:	edc4 5a00 	vstr	s11, [r4]
 80151d0:	eeb0 0a66 	vmov.f32	s0, s13
 80151d4:	e7c6      	b.n	8015164 <__ieee754_rem_pio2f+0x10c>
 80151d6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80152c0 <__ieee754_rem_pio2f+0x268>
 80151da:	eeb0 0a66 	vmov.f32	s0, s13
 80151de:	eea6 0a25 	vfma.f32	s0, s12, s11
 80151e2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80151e6:	eddf 6a37 	vldr	s13, [pc, #220]	; 80152c4 <__ieee754_rem_pio2f+0x26c>
 80151ea:	eee6 7a25 	vfma.f32	s15, s12, s11
 80151ee:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80151f2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80151f6:	ed84 7a00 	vstr	s14, [r4]
 80151fa:	e7b3      	b.n	8015164 <__ieee754_rem_pio2f+0x10c>
 80151fc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8015200:	db06      	blt.n	8015210 <__ieee754_rem_pio2f+0x1b8>
 8015202:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015206:	edc0 7a01 	vstr	s15, [r0, #4]
 801520a:	edc0 7a00 	vstr	s15, [r0]
 801520e:	e733      	b.n	8015078 <__ieee754_rem_pio2f+0x20>
 8015210:	15ea      	asrs	r2, r5, #23
 8015212:	3a86      	subs	r2, #134	; 0x86
 8015214:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8015218:	ee07 3a90 	vmov	s15, r3
 801521c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015220:	eddf 6a29 	vldr	s13, [pc, #164]	; 80152c8 <__ieee754_rem_pio2f+0x270>
 8015224:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801522c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8015230:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015234:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015238:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801523c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015240:	ed8d 7a04 	vstr	s14, [sp, #16]
 8015244:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015248:	eef5 7a40 	vcmp.f32	s15, #0.0
 801524c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015250:	edcd 7a05 	vstr	s15, [sp, #20]
 8015254:	d11e      	bne.n	8015294 <__ieee754_rem_pio2f+0x23c>
 8015256:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801525a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801525e:	bf14      	ite	ne
 8015260:	2302      	movne	r3, #2
 8015262:	2301      	moveq	r3, #1
 8015264:	4919      	ldr	r1, [pc, #100]	; (80152cc <__ieee754_rem_pio2f+0x274>)
 8015266:	9101      	str	r1, [sp, #4]
 8015268:	2102      	movs	r1, #2
 801526a:	9100      	str	r1, [sp, #0]
 801526c:	a803      	add	r0, sp, #12
 801526e:	4621      	mov	r1, r4
 8015270:	f000 f892 	bl	8015398 <__kernel_rem_pio2f>
 8015274:	2e00      	cmp	r6, #0
 8015276:	f6bf af1c 	bge.w	80150b2 <__ieee754_rem_pio2f+0x5a>
 801527a:	edd4 7a00 	vldr	s15, [r4]
 801527e:	eef1 7a67 	vneg.f32	s15, s15
 8015282:	edc4 7a00 	vstr	s15, [r4]
 8015286:	edd4 7a01 	vldr	s15, [r4, #4]
 801528a:	eef1 7a67 	vneg.f32	s15, s15
 801528e:	edc4 7a01 	vstr	s15, [r4, #4]
 8015292:	e779      	b.n	8015188 <__ieee754_rem_pio2f+0x130>
 8015294:	2303      	movs	r3, #3
 8015296:	e7e5      	b.n	8015264 <__ieee754_rem_pio2f+0x20c>
 8015298:	3f490fd8 	.word	0x3f490fd8
 801529c:	4016cbe3 	.word	0x4016cbe3
 80152a0:	3fc90f80 	.word	0x3fc90f80
 80152a4:	3fc90fd0 	.word	0x3fc90fd0
 80152a8:	37354443 	.word	0x37354443
 80152ac:	37354400 	.word	0x37354400
 80152b0:	2e85a308 	.word	0x2e85a308
 80152b4:	43490f80 	.word	0x43490f80
 80152b8:	3f22f984 	.word	0x3f22f984
 80152bc:	08016408 	.word	0x08016408
 80152c0:	2e85a300 	.word	0x2e85a300
 80152c4:	248d3132 	.word	0x248d3132
 80152c8:	43800000 	.word	0x43800000
 80152cc:	08016488 	.word	0x08016488

080152d0 <__ieee754_sqrtf>:
 80152d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80152d4:	4770      	bx	lr
	...

080152d8 <__kernel_cosf>:
 80152d8:	ee10 3a10 	vmov	r3, s0
 80152dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80152e0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80152e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80152e8:	da05      	bge.n	80152f6 <__kernel_cosf+0x1e>
 80152ea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80152ee:	ee17 2a90 	vmov	r2, s15
 80152f2:	2a00      	cmp	r2, #0
 80152f4:	d03d      	beq.n	8015372 <__kernel_cosf+0x9a>
 80152f6:	ee60 5a00 	vmul.f32	s11, s0, s0
 80152fa:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015378 <__kernel_cosf+0xa0>
 80152fe:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801537c <__kernel_cosf+0xa4>
 8015302:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8015380 <__kernel_cosf+0xa8>
 8015306:	4a1f      	ldr	r2, [pc, #124]	; (8015384 <__kernel_cosf+0xac>)
 8015308:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801530c:	4293      	cmp	r3, r2
 801530e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8015388 <__kernel_cosf+0xb0>
 8015312:	eee7 7a25 	vfma.f32	s15, s14, s11
 8015316:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801538c <__kernel_cosf+0xb4>
 801531a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801531e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8015390 <__kernel_cosf+0xb8>
 8015322:	eee7 7a25 	vfma.f32	s15, s14, s11
 8015326:	eeb0 7a66 	vmov.f32	s14, s13
 801532a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801532e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015332:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8015336:	ee67 6a25 	vmul.f32	s13, s14, s11
 801533a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801533e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015342:	dc04      	bgt.n	801534e <__kernel_cosf+0x76>
 8015344:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8015348:	ee36 0a47 	vsub.f32	s0, s12, s14
 801534c:	4770      	bx	lr
 801534e:	4a11      	ldr	r2, [pc, #68]	; (8015394 <__kernel_cosf+0xbc>)
 8015350:	4293      	cmp	r3, r2
 8015352:	bfda      	itte	le
 8015354:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8015358:	ee06 3a90 	vmovle	s13, r3
 801535c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8015360:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015364:	ee36 0a66 	vsub.f32	s0, s12, s13
 8015368:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801536c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015370:	4770      	bx	lr
 8015372:	eeb0 0a46 	vmov.f32	s0, s12
 8015376:	4770      	bx	lr
 8015378:	ad47d74e 	.word	0xad47d74e
 801537c:	310f74f6 	.word	0x310f74f6
 8015380:	3d2aaaab 	.word	0x3d2aaaab
 8015384:	3e999999 	.word	0x3e999999
 8015388:	b493f27c 	.word	0xb493f27c
 801538c:	37d00d01 	.word	0x37d00d01
 8015390:	bab60b61 	.word	0xbab60b61
 8015394:	3f480000 	.word	0x3f480000

08015398 <__kernel_rem_pio2f>:
 8015398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801539c:	ed2d 8b04 	vpush	{d8-d9}
 80153a0:	b0d9      	sub	sp, #356	; 0x164
 80153a2:	4688      	mov	r8, r1
 80153a4:	9002      	str	r0, [sp, #8]
 80153a6:	49bb      	ldr	r1, [pc, #748]	; (8015694 <__kernel_rem_pio2f+0x2fc>)
 80153a8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80153aa:	9301      	str	r3, [sp, #4]
 80153ac:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80153b0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80153b4:	1e59      	subs	r1, r3, #1
 80153b6:	1d13      	adds	r3, r2, #4
 80153b8:	db27      	blt.n	801540a <__kernel_rem_pio2f+0x72>
 80153ba:	f1b2 0b03 	subs.w	fp, r2, #3
 80153be:	bf48      	it	mi
 80153c0:	f102 0b04 	addmi.w	fp, r2, #4
 80153c4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80153c8:	1c45      	adds	r5, r0, #1
 80153ca:	00ec      	lsls	r4, r5, #3
 80153cc:	1a47      	subs	r7, r0, r1
 80153ce:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80156a4 <__kernel_rem_pio2f+0x30c>
 80153d2:	9403      	str	r4, [sp, #12]
 80153d4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80153d8:	eb0a 0c01 	add.w	ip, sl, r1
 80153dc:	ae1c      	add	r6, sp, #112	; 0x70
 80153de:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80153e2:	2400      	movs	r4, #0
 80153e4:	4564      	cmp	r4, ip
 80153e6:	dd12      	ble.n	801540e <__kernel_rem_pio2f+0x76>
 80153e8:	9b01      	ldr	r3, [sp, #4]
 80153ea:	ac1c      	add	r4, sp, #112	; 0x70
 80153ec:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80153f0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80153f4:	f04f 0c00 	mov.w	ip, #0
 80153f8:	45d4      	cmp	ip, sl
 80153fa:	dc27      	bgt.n	801544c <__kernel_rem_pio2f+0xb4>
 80153fc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8015400:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80156a4 <__kernel_rem_pio2f+0x30c>
 8015404:	4627      	mov	r7, r4
 8015406:	2600      	movs	r6, #0
 8015408:	e016      	b.n	8015438 <__kernel_rem_pio2f+0xa0>
 801540a:	2000      	movs	r0, #0
 801540c:	e7dc      	b.n	80153c8 <__kernel_rem_pio2f+0x30>
 801540e:	42e7      	cmn	r7, r4
 8015410:	bf5d      	ittte	pl
 8015412:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8015416:	ee07 3a90 	vmovpl	s15, r3
 801541a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801541e:	eef0 7a47 	vmovmi.f32	s15, s14
 8015422:	ece6 7a01 	vstmia	r6!, {s15}
 8015426:	3401      	adds	r4, #1
 8015428:	e7dc      	b.n	80153e4 <__kernel_rem_pio2f+0x4c>
 801542a:	ecf9 6a01 	vldmia	r9!, {s13}
 801542e:	ed97 7a00 	vldr	s14, [r7]
 8015432:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015436:	3601      	adds	r6, #1
 8015438:	428e      	cmp	r6, r1
 801543a:	f1a7 0704 	sub.w	r7, r7, #4
 801543e:	ddf4      	ble.n	801542a <__kernel_rem_pio2f+0x92>
 8015440:	eceb 7a01 	vstmia	fp!, {s15}
 8015444:	f10c 0c01 	add.w	ip, ip, #1
 8015448:	3404      	adds	r4, #4
 801544a:	e7d5      	b.n	80153f8 <__kernel_rem_pio2f+0x60>
 801544c:	ab08      	add	r3, sp, #32
 801544e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8015452:	eddf 8a93 	vldr	s17, [pc, #588]	; 80156a0 <__kernel_rem_pio2f+0x308>
 8015456:	ed9f 9a91 	vldr	s18, [pc, #580]	; 801569c <__kernel_rem_pio2f+0x304>
 801545a:	9304      	str	r3, [sp, #16]
 801545c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8015460:	4656      	mov	r6, sl
 8015462:	00b3      	lsls	r3, r6, #2
 8015464:	9305      	str	r3, [sp, #20]
 8015466:	ab58      	add	r3, sp, #352	; 0x160
 8015468:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801546c:	ac08      	add	r4, sp, #32
 801546e:	ab44      	add	r3, sp, #272	; 0x110
 8015470:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8015474:	46a4      	mov	ip, r4
 8015476:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801547a:	4637      	mov	r7, r6
 801547c:	2f00      	cmp	r7, #0
 801547e:	f1a0 0004 	sub.w	r0, r0, #4
 8015482:	dc4f      	bgt.n	8015524 <__kernel_rem_pio2f+0x18c>
 8015484:	4628      	mov	r0, r5
 8015486:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801548a:	f000 fc5f 	bl	8015d4c <scalbnf>
 801548e:	eeb0 8a40 	vmov.f32	s16, s0
 8015492:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8015496:	ee28 0a00 	vmul.f32	s0, s16, s0
 801549a:	f000 fc0f 	bl	8015cbc <floorf>
 801549e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80154a2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80154a6:	2d00      	cmp	r5, #0
 80154a8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80154ac:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80154b0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80154b4:	ee17 9a90 	vmov	r9, s15
 80154b8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80154bc:	dd44      	ble.n	8015548 <__kernel_rem_pio2f+0x1b0>
 80154be:	f106 3cff 	add.w	ip, r6, #4294967295
 80154c2:	ab08      	add	r3, sp, #32
 80154c4:	f1c5 0e08 	rsb	lr, r5, #8
 80154c8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80154cc:	fa47 f00e 	asr.w	r0, r7, lr
 80154d0:	4481      	add	r9, r0
 80154d2:	fa00 f00e 	lsl.w	r0, r0, lr
 80154d6:	1a3f      	subs	r7, r7, r0
 80154d8:	f1c5 0007 	rsb	r0, r5, #7
 80154dc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80154e0:	4107      	asrs	r7, r0
 80154e2:	2f00      	cmp	r7, #0
 80154e4:	dd3f      	ble.n	8015566 <__kernel_rem_pio2f+0x1ce>
 80154e6:	f04f 0e00 	mov.w	lr, #0
 80154ea:	f109 0901 	add.w	r9, r9, #1
 80154ee:	4673      	mov	r3, lr
 80154f0:	4576      	cmp	r6, lr
 80154f2:	dc6b      	bgt.n	80155cc <__kernel_rem_pio2f+0x234>
 80154f4:	2d00      	cmp	r5, #0
 80154f6:	dd04      	ble.n	8015502 <__kernel_rem_pio2f+0x16a>
 80154f8:	2d01      	cmp	r5, #1
 80154fa:	d078      	beq.n	80155ee <__kernel_rem_pio2f+0x256>
 80154fc:	2d02      	cmp	r5, #2
 80154fe:	f000 8081 	beq.w	8015604 <__kernel_rem_pio2f+0x26c>
 8015502:	2f02      	cmp	r7, #2
 8015504:	d12f      	bne.n	8015566 <__kernel_rem_pio2f+0x1ce>
 8015506:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801550a:	ee30 8a48 	vsub.f32	s16, s0, s16
 801550e:	b353      	cbz	r3, 8015566 <__kernel_rem_pio2f+0x1ce>
 8015510:	4628      	mov	r0, r5
 8015512:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8015516:	f000 fc19 	bl	8015d4c <scalbnf>
 801551a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801551e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8015522:	e020      	b.n	8015566 <__kernel_rem_pio2f+0x1ce>
 8015524:	ee60 7a28 	vmul.f32	s15, s0, s17
 8015528:	3f01      	subs	r7, #1
 801552a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801552e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015532:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8015536:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801553a:	ecac 0a01 	vstmia	ip!, {s0}
 801553e:	ed90 0a00 	vldr	s0, [r0]
 8015542:	ee37 0a80 	vadd.f32	s0, s15, s0
 8015546:	e799      	b.n	801547c <__kernel_rem_pio2f+0xe4>
 8015548:	d105      	bne.n	8015556 <__kernel_rem_pio2f+0x1be>
 801554a:	1e70      	subs	r0, r6, #1
 801554c:	ab08      	add	r3, sp, #32
 801554e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8015552:	11ff      	asrs	r7, r7, #7
 8015554:	e7c5      	b.n	80154e2 <__kernel_rem_pio2f+0x14a>
 8015556:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801555a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801555e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015562:	da31      	bge.n	80155c8 <__kernel_rem_pio2f+0x230>
 8015564:	2700      	movs	r7, #0
 8015566:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801556a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801556e:	f040 809b 	bne.w	80156a8 <__kernel_rem_pio2f+0x310>
 8015572:	1e74      	subs	r4, r6, #1
 8015574:	46a4      	mov	ip, r4
 8015576:	2000      	movs	r0, #0
 8015578:	45d4      	cmp	ip, sl
 801557a:	da4a      	bge.n	8015612 <__kernel_rem_pio2f+0x27a>
 801557c:	2800      	cmp	r0, #0
 801557e:	d07a      	beq.n	8015676 <__kernel_rem_pio2f+0x2de>
 8015580:	ab08      	add	r3, sp, #32
 8015582:	3d08      	subs	r5, #8
 8015584:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015588:	2b00      	cmp	r3, #0
 801558a:	f000 8081 	beq.w	8015690 <__kernel_rem_pio2f+0x2f8>
 801558e:	4628      	mov	r0, r5
 8015590:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015594:	00a5      	lsls	r5, r4, #2
 8015596:	f000 fbd9 	bl	8015d4c <scalbnf>
 801559a:	aa44      	add	r2, sp, #272	; 0x110
 801559c:	1d2b      	adds	r3, r5, #4
 801559e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80156a0 <__kernel_rem_pio2f+0x308>
 80155a2:	18d1      	adds	r1, r2, r3
 80155a4:	4622      	mov	r2, r4
 80155a6:	2a00      	cmp	r2, #0
 80155a8:	f280 80ae 	bge.w	8015708 <__kernel_rem_pio2f+0x370>
 80155ac:	4622      	mov	r2, r4
 80155ae:	2a00      	cmp	r2, #0
 80155b0:	f2c0 80cc 	blt.w	801574c <__kernel_rem_pio2f+0x3b4>
 80155b4:	a944      	add	r1, sp, #272	; 0x110
 80155b6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80155ba:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8015698 <__kernel_rem_pio2f+0x300>
 80155be:	eddf 7a39 	vldr	s15, [pc, #228]	; 80156a4 <__kernel_rem_pio2f+0x30c>
 80155c2:	2000      	movs	r0, #0
 80155c4:	1aa1      	subs	r1, r4, r2
 80155c6:	e0b6      	b.n	8015736 <__kernel_rem_pio2f+0x39e>
 80155c8:	2702      	movs	r7, #2
 80155ca:	e78c      	b.n	80154e6 <__kernel_rem_pio2f+0x14e>
 80155cc:	6820      	ldr	r0, [r4, #0]
 80155ce:	b94b      	cbnz	r3, 80155e4 <__kernel_rem_pio2f+0x24c>
 80155d0:	b118      	cbz	r0, 80155da <__kernel_rem_pio2f+0x242>
 80155d2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80155d6:	6020      	str	r0, [r4, #0]
 80155d8:	2001      	movs	r0, #1
 80155da:	f10e 0e01 	add.w	lr, lr, #1
 80155de:	3404      	adds	r4, #4
 80155e0:	4603      	mov	r3, r0
 80155e2:	e785      	b.n	80154f0 <__kernel_rem_pio2f+0x158>
 80155e4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80155e8:	6020      	str	r0, [r4, #0]
 80155ea:	4618      	mov	r0, r3
 80155ec:	e7f5      	b.n	80155da <__kernel_rem_pio2f+0x242>
 80155ee:	1e74      	subs	r4, r6, #1
 80155f0:	a808      	add	r0, sp, #32
 80155f2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80155f6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80155fa:	f10d 0c20 	add.w	ip, sp, #32
 80155fe:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8015602:	e77e      	b.n	8015502 <__kernel_rem_pio2f+0x16a>
 8015604:	1e74      	subs	r4, r6, #1
 8015606:	a808      	add	r0, sp, #32
 8015608:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801560c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8015610:	e7f3      	b.n	80155fa <__kernel_rem_pio2f+0x262>
 8015612:	ab08      	add	r3, sp, #32
 8015614:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8015618:	f10c 3cff 	add.w	ip, ip, #4294967295
 801561c:	4318      	orrs	r0, r3
 801561e:	e7ab      	b.n	8015578 <__kernel_rem_pio2f+0x1e0>
 8015620:	f10c 0c01 	add.w	ip, ip, #1
 8015624:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8015628:	2c00      	cmp	r4, #0
 801562a:	d0f9      	beq.n	8015620 <__kernel_rem_pio2f+0x288>
 801562c:	9b05      	ldr	r3, [sp, #20]
 801562e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8015632:	eb0d 0003 	add.w	r0, sp, r3
 8015636:	9b01      	ldr	r3, [sp, #4]
 8015638:	18f4      	adds	r4, r6, r3
 801563a:	ab1c      	add	r3, sp, #112	; 0x70
 801563c:	1c77      	adds	r7, r6, #1
 801563e:	384c      	subs	r0, #76	; 0x4c
 8015640:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015644:	4466      	add	r6, ip
 8015646:	42be      	cmp	r6, r7
 8015648:	f6ff af0b 	blt.w	8015462 <__kernel_rem_pio2f+0xca>
 801564c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8015650:	f8dd e008 	ldr.w	lr, [sp, #8]
 8015654:	ee07 3a90 	vmov	s15, r3
 8015658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801565c:	f04f 0c00 	mov.w	ip, #0
 8015660:	ece4 7a01 	vstmia	r4!, {s15}
 8015664:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80156a4 <__kernel_rem_pio2f+0x30c>
 8015668:	46a1      	mov	r9, r4
 801566a:	458c      	cmp	ip, r1
 801566c:	dd07      	ble.n	801567e <__kernel_rem_pio2f+0x2e6>
 801566e:	ece0 7a01 	vstmia	r0!, {s15}
 8015672:	3701      	adds	r7, #1
 8015674:	e7e7      	b.n	8015646 <__kernel_rem_pio2f+0x2ae>
 8015676:	9804      	ldr	r0, [sp, #16]
 8015678:	f04f 0c01 	mov.w	ip, #1
 801567c:	e7d2      	b.n	8015624 <__kernel_rem_pio2f+0x28c>
 801567e:	ecfe 6a01 	vldmia	lr!, {s13}
 8015682:	ed39 7a01 	vldmdb	r9!, {s14}
 8015686:	f10c 0c01 	add.w	ip, ip, #1
 801568a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801568e:	e7ec      	b.n	801566a <__kernel_rem_pio2f+0x2d2>
 8015690:	3c01      	subs	r4, #1
 8015692:	e775      	b.n	8015580 <__kernel_rem_pio2f+0x1e8>
 8015694:	080167cc 	.word	0x080167cc
 8015698:	080167a0 	.word	0x080167a0
 801569c:	43800000 	.word	0x43800000
 80156a0:	3b800000 	.word	0x3b800000
 80156a4:	00000000 	.word	0x00000000
 80156a8:	9b03      	ldr	r3, [sp, #12]
 80156aa:	eeb0 0a48 	vmov.f32	s0, s16
 80156ae:	1a98      	subs	r0, r3, r2
 80156b0:	f000 fb4c 	bl	8015d4c <scalbnf>
 80156b4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801569c <__kernel_rem_pio2f+0x304>
 80156b8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80156bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156c0:	db19      	blt.n	80156f6 <__kernel_rem_pio2f+0x35e>
 80156c2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80156a0 <__kernel_rem_pio2f+0x308>
 80156c6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80156ca:	aa08      	add	r2, sp, #32
 80156cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80156d0:	1c74      	adds	r4, r6, #1
 80156d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80156d6:	3508      	adds	r5, #8
 80156d8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80156dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80156e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80156e4:	ee10 3a10 	vmov	r3, s0
 80156e8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80156ec:	ee17 3a90 	vmov	r3, s15
 80156f0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80156f4:	e74b      	b.n	801558e <__kernel_rem_pio2f+0x1f6>
 80156f6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80156fa:	aa08      	add	r2, sp, #32
 80156fc:	ee10 3a10 	vmov	r3, s0
 8015700:	4634      	mov	r4, r6
 8015702:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8015706:	e742      	b.n	801558e <__kernel_rem_pio2f+0x1f6>
 8015708:	a808      	add	r0, sp, #32
 801570a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801570e:	9001      	str	r0, [sp, #4]
 8015710:	ee07 0a90 	vmov	s15, r0
 8015714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015718:	3a01      	subs	r2, #1
 801571a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801571e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015722:	ed61 7a01 	vstmdb	r1!, {s15}
 8015726:	e73e      	b.n	80155a6 <__kernel_rem_pio2f+0x20e>
 8015728:	ecfc 6a01 	vldmia	ip!, {s13}
 801572c:	ecb6 7a01 	vldmia	r6!, {s14}
 8015730:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015734:	3001      	adds	r0, #1
 8015736:	4550      	cmp	r0, sl
 8015738:	dc01      	bgt.n	801573e <__kernel_rem_pio2f+0x3a6>
 801573a:	4288      	cmp	r0, r1
 801573c:	ddf4      	ble.n	8015728 <__kernel_rem_pio2f+0x390>
 801573e:	a858      	add	r0, sp, #352	; 0x160
 8015740:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015744:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8015748:	3a01      	subs	r2, #1
 801574a:	e730      	b.n	80155ae <__kernel_rem_pio2f+0x216>
 801574c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801574e:	2a02      	cmp	r2, #2
 8015750:	dc09      	bgt.n	8015766 <__kernel_rem_pio2f+0x3ce>
 8015752:	2a00      	cmp	r2, #0
 8015754:	dc2a      	bgt.n	80157ac <__kernel_rem_pio2f+0x414>
 8015756:	d043      	beq.n	80157e0 <__kernel_rem_pio2f+0x448>
 8015758:	f009 0007 	and.w	r0, r9, #7
 801575c:	b059      	add	sp, #356	; 0x164
 801575e:	ecbd 8b04 	vpop	{d8-d9}
 8015762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015766:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8015768:	2b03      	cmp	r3, #3
 801576a:	d1f5      	bne.n	8015758 <__kernel_rem_pio2f+0x3c0>
 801576c:	ab30      	add	r3, sp, #192	; 0xc0
 801576e:	442b      	add	r3, r5
 8015770:	461a      	mov	r2, r3
 8015772:	4619      	mov	r1, r3
 8015774:	4620      	mov	r0, r4
 8015776:	2800      	cmp	r0, #0
 8015778:	f1a1 0104 	sub.w	r1, r1, #4
 801577c:	dc51      	bgt.n	8015822 <__kernel_rem_pio2f+0x48a>
 801577e:	4621      	mov	r1, r4
 8015780:	2901      	cmp	r1, #1
 8015782:	f1a2 0204 	sub.w	r2, r2, #4
 8015786:	dc5c      	bgt.n	8015842 <__kernel_rem_pio2f+0x4aa>
 8015788:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80156a4 <__kernel_rem_pio2f+0x30c>
 801578c:	3304      	adds	r3, #4
 801578e:	2c01      	cmp	r4, #1
 8015790:	dc67      	bgt.n	8015862 <__kernel_rem_pio2f+0x4ca>
 8015792:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8015796:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801579a:	2f00      	cmp	r7, #0
 801579c:	d167      	bne.n	801586e <__kernel_rem_pio2f+0x4d6>
 801579e:	edc8 6a00 	vstr	s13, [r8]
 80157a2:	ed88 7a01 	vstr	s14, [r8, #4]
 80157a6:	edc8 7a02 	vstr	s15, [r8, #8]
 80157aa:	e7d5      	b.n	8015758 <__kernel_rem_pio2f+0x3c0>
 80157ac:	aa30      	add	r2, sp, #192	; 0xc0
 80157ae:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80156a4 <__kernel_rem_pio2f+0x30c>
 80157b2:	4413      	add	r3, r2
 80157b4:	4622      	mov	r2, r4
 80157b6:	2a00      	cmp	r2, #0
 80157b8:	da24      	bge.n	8015804 <__kernel_rem_pio2f+0x46c>
 80157ba:	b34f      	cbz	r7, 8015810 <__kernel_rem_pio2f+0x478>
 80157bc:	eef1 7a47 	vneg.f32	s15, s14
 80157c0:	edc8 7a00 	vstr	s15, [r8]
 80157c4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80157c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80157cc:	aa31      	add	r2, sp, #196	; 0xc4
 80157ce:	2301      	movs	r3, #1
 80157d0:	429c      	cmp	r4, r3
 80157d2:	da20      	bge.n	8015816 <__kernel_rem_pio2f+0x47e>
 80157d4:	b10f      	cbz	r7, 80157da <__kernel_rem_pio2f+0x442>
 80157d6:	eef1 7a67 	vneg.f32	s15, s15
 80157da:	edc8 7a01 	vstr	s15, [r8, #4]
 80157de:	e7bb      	b.n	8015758 <__kernel_rem_pio2f+0x3c0>
 80157e0:	aa30      	add	r2, sp, #192	; 0xc0
 80157e2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80156a4 <__kernel_rem_pio2f+0x30c>
 80157e6:	4413      	add	r3, r2
 80157e8:	2c00      	cmp	r4, #0
 80157ea:	da05      	bge.n	80157f8 <__kernel_rem_pio2f+0x460>
 80157ec:	b10f      	cbz	r7, 80157f2 <__kernel_rem_pio2f+0x45a>
 80157ee:	eef1 7a67 	vneg.f32	s15, s15
 80157f2:	edc8 7a00 	vstr	s15, [r8]
 80157f6:	e7af      	b.n	8015758 <__kernel_rem_pio2f+0x3c0>
 80157f8:	ed33 7a01 	vldmdb	r3!, {s14}
 80157fc:	3c01      	subs	r4, #1
 80157fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015802:	e7f1      	b.n	80157e8 <__kernel_rem_pio2f+0x450>
 8015804:	ed73 7a01 	vldmdb	r3!, {s15}
 8015808:	3a01      	subs	r2, #1
 801580a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801580e:	e7d2      	b.n	80157b6 <__kernel_rem_pio2f+0x41e>
 8015810:	eef0 7a47 	vmov.f32	s15, s14
 8015814:	e7d4      	b.n	80157c0 <__kernel_rem_pio2f+0x428>
 8015816:	ecb2 7a01 	vldmia	r2!, {s14}
 801581a:	3301      	adds	r3, #1
 801581c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015820:	e7d6      	b.n	80157d0 <__kernel_rem_pio2f+0x438>
 8015822:	edd1 7a00 	vldr	s15, [r1]
 8015826:	edd1 6a01 	vldr	s13, [r1, #4]
 801582a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801582e:	3801      	subs	r0, #1
 8015830:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015834:	ed81 7a00 	vstr	s14, [r1]
 8015838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801583c:	edc1 7a01 	vstr	s15, [r1, #4]
 8015840:	e799      	b.n	8015776 <__kernel_rem_pio2f+0x3de>
 8015842:	edd2 7a00 	vldr	s15, [r2]
 8015846:	edd2 6a01 	vldr	s13, [r2, #4]
 801584a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801584e:	3901      	subs	r1, #1
 8015850:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015854:	ed82 7a00 	vstr	s14, [r2]
 8015858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801585c:	edc2 7a01 	vstr	s15, [r2, #4]
 8015860:	e78e      	b.n	8015780 <__kernel_rem_pio2f+0x3e8>
 8015862:	ed33 7a01 	vldmdb	r3!, {s14}
 8015866:	3c01      	subs	r4, #1
 8015868:	ee77 7a87 	vadd.f32	s15, s15, s14
 801586c:	e78f      	b.n	801578e <__kernel_rem_pio2f+0x3f6>
 801586e:	eef1 6a66 	vneg.f32	s13, s13
 8015872:	eeb1 7a47 	vneg.f32	s14, s14
 8015876:	edc8 6a00 	vstr	s13, [r8]
 801587a:	ed88 7a01 	vstr	s14, [r8, #4]
 801587e:	eef1 7a67 	vneg.f32	s15, s15
 8015882:	e790      	b.n	80157a6 <__kernel_rem_pio2f+0x40e>

08015884 <__kernel_sinf>:
 8015884:	ee10 3a10 	vmov	r3, s0
 8015888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801588c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8015890:	da04      	bge.n	801589c <__kernel_sinf+0x18>
 8015892:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015896:	ee17 3a90 	vmov	r3, s15
 801589a:	b35b      	cbz	r3, 80158f4 <__kernel_sinf+0x70>
 801589c:	ee20 7a00 	vmul.f32	s14, s0, s0
 80158a0:	eddf 7a15 	vldr	s15, [pc, #84]	; 80158f8 <__kernel_sinf+0x74>
 80158a4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80158fc <__kernel_sinf+0x78>
 80158a8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80158ac:	eddf 7a14 	vldr	s15, [pc, #80]	; 8015900 <__kernel_sinf+0x7c>
 80158b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80158b4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8015904 <__kernel_sinf+0x80>
 80158b8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80158bc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8015908 <__kernel_sinf+0x84>
 80158c0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80158c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80158c8:	b930      	cbnz	r0, 80158d8 <__kernel_sinf+0x54>
 80158ca:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801590c <__kernel_sinf+0x88>
 80158ce:	eea7 6a27 	vfma.f32	s12, s14, s15
 80158d2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80158d6:	4770      	bx	lr
 80158d8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80158dc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80158e0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80158e4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80158e8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8015910 <__kernel_sinf+0x8c>
 80158ec:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80158f0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80158f4:	4770      	bx	lr
 80158f6:	bf00      	nop
 80158f8:	2f2ec9d3 	.word	0x2f2ec9d3
 80158fc:	b2d72f34 	.word	0xb2d72f34
 8015900:	3638ef1b 	.word	0x3638ef1b
 8015904:	b9500d01 	.word	0xb9500d01
 8015908:	3c088889 	.word	0x3c088889
 801590c:	be2aaaab 	.word	0xbe2aaaab
 8015910:	3e2aaaab 	.word	0x3e2aaaab

08015914 <with_errno>:
 8015914:	b570      	push	{r4, r5, r6, lr}
 8015916:	4604      	mov	r4, r0
 8015918:	460d      	mov	r5, r1
 801591a:	4616      	mov	r6, r2
 801591c:	f7fb f916 	bl	8010b4c <__errno>
 8015920:	4629      	mov	r1, r5
 8015922:	6006      	str	r6, [r0, #0]
 8015924:	4620      	mov	r0, r4
 8015926:	bd70      	pop	{r4, r5, r6, pc}

08015928 <xflow>:
 8015928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801592a:	4614      	mov	r4, r2
 801592c:	461d      	mov	r5, r3
 801592e:	b108      	cbz	r0, 8015934 <xflow+0xc>
 8015930:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015934:	e9cd 2300 	strd	r2, r3, [sp]
 8015938:	e9dd 2300 	ldrd	r2, r3, [sp]
 801593c:	4620      	mov	r0, r4
 801593e:	4629      	mov	r1, r5
 8015940:	f7ea fe5a 	bl	80005f8 <__aeabi_dmul>
 8015944:	2222      	movs	r2, #34	; 0x22
 8015946:	b003      	add	sp, #12
 8015948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801594c:	f7ff bfe2 	b.w	8015914 <with_errno>

08015950 <__math_uflow>:
 8015950:	b508      	push	{r3, lr}
 8015952:	2200      	movs	r2, #0
 8015954:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015958:	f7ff ffe6 	bl	8015928 <xflow>
 801595c:	ec41 0b10 	vmov	d0, r0, r1
 8015960:	bd08      	pop	{r3, pc}

08015962 <__math_oflow>:
 8015962:	b508      	push	{r3, lr}
 8015964:	2200      	movs	r2, #0
 8015966:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801596a:	f7ff ffdd 	bl	8015928 <xflow>
 801596e:	ec41 0b10 	vmov	d0, r0, r1
 8015972:	bd08      	pop	{r3, pc}

08015974 <with_errnof>:
 8015974:	b513      	push	{r0, r1, r4, lr}
 8015976:	4604      	mov	r4, r0
 8015978:	ed8d 0a01 	vstr	s0, [sp, #4]
 801597c:	f7fb f8e6 	bl	8010b4c <__errno>
 8015980:	ed9d 0a01 	vldr	s0, [sp, #4]
 8015984:	6004      	str	r4, [r0, #0]
 8015986:	b002      	add	sp, #8
 8015988:	bd10      	pop	{r4, pc}

0801598a <xflowf>:
 801598a:	b130      	cbz	r0, 801599a <xflowf+0x10>
 801598c:	eef1 7a40 	vneg.f32	s15, s0
 8015990:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015994:	2022      	movs	r0, #34	; 0x22
 8015996:	f7ff bfed 	b.w	8015974 <with_errnof>
 801599a:	eef0 7a40 	vmov.f32	s15, s0
 801599e:	e7f7      	b.n	8015990 <xflowf+0x6>

080159a0 <__math_uflowf>:
 80159a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80159a8 <__math_uflowf+0x8>
 80159a4:	f7ff bff1 	b.w	801598a <xflowf>
 80159a8:	10000000 	.word	0x10000000

080159ac <__math_oflowf>:
 80159ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80159b4 <__math_oflowf+0x8>
 80159b0:	f7ff bfeb 	b.w	801598a <xflowf>
 80159b4:	70000000 	.word	0x70000000

080159b8 <fabs>:
 80159b8:	ec51 0b10 	vmov	r0, r1, d0
 80159bc:	ee10 2a10 	vmov	r2, s0
 80159c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80159c4:	ec43 2b10 	vmov	d0, r2, r3
 80159c8:	4770      	bx	lr

080159ca <finite>:
 80159ca:	b082      	sub	sp, #8
 80159cc:	ed8d 0b00 	vstr	d0, [sp]
 80159d0:	9801      	ldr	r0, [sp, #4]
 80159d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80159d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80159da:	0fc0      	lsrs	r0, r0, #31
 80159dc:	b002      	add	sp, #8
 80159de:	4770      	bx	lr

080159e0 <scalbn>:
 80159e0:	b570      	push	{r4, r5, r6, lr}
 80159e2:	ec55 4b10 	vmov	r4, r5, d0
 80159e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80159ea:	4606      	mov	r6, r0
 80159ec:	462b      	mov	r3, r5
 80159ee:	b99a      	cbnz	r2, 8015a18 <scalbn+0x38>
 80159f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80159f4:	4323      	orrs	r3, r4
 80159f6:	d036      	beq.n	8015a66 <scalbn+0x86>
 80159f8:	4b39      	ldr	r3, [pc, #228]	; (8015ae0 <scalbn+0x100>)
 80159fa:	4629      	mov	r1, r5
 80159fc:	ee10 0a10 	vmov	r0, s0
 8015a00:	2200      	movs	r2, #0
 8015a02:	f7ea fdf9 	bl	80005f8 <__aeabi_dmul>
 8015a06:	4b37      	ldr	r3, [pc, #220]	; (8015ae4 <scalbn+0x104>)
 8015a08:	429e      	cmp	r6, r3
 8015a0a:	4604      	mov	r4, r0
 8015a0c:	460d      	mov	r5, r1
 8015a0e:	da10      	bge.n	8015a32 <scalbn+0x52>
 8015a10:	a32b      	add	r3, pc, #172	; (adr r3, 8015ac0 <scalbn+0xe0>)
 8015a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a16:	e03a      	b.n	8015a8e <scalbn+0xae>
 8015a18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015a1c:	428a      	cmp	r2, r1
 8015a1e:	d10c      	bne.n	8015a3a <scalbn+0x5a>
 8015a20:	ee10 2a10 	vmov	r2, s0
 8015a24:	4620      	mov	r0, r4
 8015a26:	4629      	mov	r1, r5
 8015a28:	f7ea fc30 	bl	800028c <__adddf3>
 8015a2c:	4604      	mov	r4, r0
 8015a2e:	460d      	mov	r5, r1
 8015a30:	e019      	b.n	8015a66 <scalbn+0x86>
 8015a32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015a36:	460b      	mov	r3, r1
 8015a38:	3a36      	subs	r2, #54	; 0x36
 8015a3a:	4432      	add	r2, r6
 8015a3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015a40:	428a      	cmp	r2, r1
 8015a42:	dd08      	ble.n	8015a56 <scalbn+0x76>
 8015a44:	2d00      	cmp	r5, #0
 8015a46:	a120      	add	r1, pc, #128	; (adr r1, 8015ac8 <scalbn+0xe8>)
 8015a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a4c:	da1c      	bge.n	8015a88 <scalbn+0xa8>
 8015a4e:	a120      	add	r1, pc, #128	; (adr r1, 8015ad0 <scalbn+0xf0>)
 8015a50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a54:	e018      	b.n	8015a88 <scalbn+0xa8>
 8015a56:	2a00      	cmp	r2, #0
 8015a58:	dd08      	ble.n	8015a6c <scalbn+0x8c>
 8015a5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015a5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015a62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015a66:	ec45 4b10 	vmov	d0, r4, r5
 8015a6a:	bd70      	pop	{r4, r5, r6, pc}
 8015a6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015a70:	da19      	bge.n	8015aa6 <scalbn+0xc6>
 8015a72:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015a76:	429e      	cmp	r6, r3
 8015a78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8015a7c:	dd0a      	ble.n	8015a94 <scalbn+0xb4>
 8015a7e:	a112      	add	r1, pc, #72	; (adr r1, 8015ac8 <scalbn+0xe8>)
 8015a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d1e2      	bne.n	8015a4e <scalbn+0x6e>
 8015a88:	a30f      	add	r3, pc, #60	; (adr r3, 8015ac8 <scalbn+0xe8>)
 8015a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a8e:	f7ea fdb3 	bl	80005f8 <__aeabi_dmul>
 8015a92:	e7cb      	b.n	8015a2c <scalbn+0x4c>
 8015a94:	a10a      	add	r1, pc, #40	; (adr r1, 8015ac0 <scalbn+0xe0>)
 8015a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d0b8      	beq.n	8015a10 <scalbn+0x30>
 8015a9e:	a10e      	add	r1, pc, #56	; (adr r1, 8015ad8 <scalbn+0xf8>)
 8015aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015aa4:	e7b4      	b.n	8015a10 <scalbn+0x30>
 8015aa6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015aaa:	3236      	adds	r2, #54	; 0x36
 8015aac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015ab0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015ab4:	4620      	mov	r0, r4
 8015ab6:	4b0c      	ldr	r3, [pc, #48]	; (8015ae8 <scalbn+0x108>)
 8015ab8:	2200      	movs	r2, #0
 8015aba:	e7e8      	b.n	8015a8e <scalbn+0xae>
 8015abc:	f3af 8000 	nop.w
 8015ac0:	c2f8f359 	.word	0xc2f8f359
 8015ac4:	01a56e1f 	.word	0x01a56e1f
 8015ac8:	8800759c 	.word	0x8800759c
 8015acc:	7e37e43c 	.word	0x7e37e43c
 8015ad0:	8800759c 	.word	0x8800759c
 8015ad4:	fe37e43c 	.word	0xfe37e43c
 8015ad8:	c2f8f359 	.word	0xc2f8f359
 8015adc:	81a56e1f 	.word	0x81a56e1f
 8015ae0:	43500000 	.word	0x43500000
 8015ae4:	ffff3cb0 	.word	0xffff3cb0
 8015ae8:	3c900000 	.word	0x3c900000

08015aec <atanf>:
 8015aec:	b538      	push	{r3, r4, r5, lr}
 8015aee:	ee10 5a10 	vmov	r5, s0
 8015af2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8015af6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8015afa:	eef0 7a40 	vmov.f32	s15, s0
 8015afe:	db10      	blt.n	8015b22 <atanf+0x36>
 8015b00:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015b04:	dd04      	ble.n	8015b10 <atanf+0x24>
 8015b06:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8015b0e:	bd38      	pop	{r3, r4, r5, pc}
 8015b10:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8015c48 <atanf+0x15c>
 8015b14:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8015c4c <atanf+0x160>
 8015b18:	2d00      	cmp	r5, #0
 8015b1a:	bfd8      	it	le
 8015b1c:	eef0 7a40 	vmovle.f32	s15, s0
 8015b20:	e7f3      	b.n	8015b0a <atanf+0x1e>
 8015b22:	4b4b      	ldr	r3, [pc, #300]	; (8015c50 <atanf+0x164>)
 8015b24:	429c      	cmp	r4, r3
 8015b26:	dc10      	bgt.n	8015b4a <atanf+0x5e>
 8015b28:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8015b2c:	da0a      	bge.n	8015b44 <atanf+0x58>
 8015b2e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8015c54 <atanf+0x168>
 8015b32:	ee30 7a07 	vadd.f32	s14, s0, s14
 8015b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015b3a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b42:	dce2      	bgt.n	8015b0a <atanf+0x1e>
 8015b44:	f04f 33ff 	mov.w	r3, #4294967295
 8015b48:	e013      	b.n	8015b72 <atanf+0x86>
 8015b4a:	f000 f8a3 	bl	8015c94 <fabsf>
 8015b4e:	4b42      	ldr	r3, [pc, #264]	; (8015c58 <atanf+0x16c>)
 8015b50:	429c      	cmp	r4, r3
 8015b52:	dc4f      	bgt.n	8015bf4 <atanf+0x108>
 8015b54:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8015b58:	429c      	cmp	r4, r3
 8015b5a:	dc41      	bgt.n	8015be0 <atanf+0xf4>
 8015b5c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015b60:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015b64:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015b68:	2300      	movs	r3, #0
 8015b6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015b6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015b72:	1c5a      	adds	r2, r3, #1
 8015b74:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015b78:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8015c5c <atanf+0x170>
 8015b7c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8015c60 <atanf+0x174>
 8015b80:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8015c64 <atanf+0x178>
 8015b84:	ee66 6a06 	vmul.f32	s13, s12, s12
 8015b88:	eee6 5a87 	vfma.f32	s11, s13, s14
 8015b8c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8015c68 <atanf+0x17c>
 8015b90:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015b94:	eddf 5a35 	vldr	s11, [pc, #212]	; 8015c6c <atanf+0x180>
 8015b98:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015b9c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8015c70 <atanf+0x184>
 8015ba0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015ba4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8015c74 <atanf+0x188>
 8015ba8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015bac:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8015c78 <atanf+0x18c>
 8015bb0:	eea6 5a87 	vfma.f32	s10, s13, s14
 8015bb4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8015c7c <atanf+0x190>
 8015bb8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015bbc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8015c80 <atanf+0x194>
 8015bc0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8015bc4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8015c84 <atanf+0x198>
 8015bc8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015bcc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015bd0:	eea5 7a86 	vfma.f32	s14, s11, s12
 8015bd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015bd8:	d121      	bne.n	8015c1e <atanf+0x132>
 8015bda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015bde:	e794      	b.n	8015b0a <atanf+0x1e>
 8015be0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015be4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015be8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015bec:	2301      	movs	r3, #1
 8015bee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015bf2:	e7be      	b.n	8015b72 <atanf+0x86>
 8015bf4:	4b24      	ldr	r3, [pc, #144]	; (8015c88 <atanf+0x19c>)
 8015bf6:	429c      	cmp	r4, r3
 8015bf8:	dc0b      	bgt.n	8015c12 <atanf+0x126>
 8015bfa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8015bfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015c02:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015c06:	2302      	movs	r3, #2
 8015c08:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015c10:	e7af      	b.n	8015b72 <atanf+0x86>
 8015c12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015c16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015c1a:	2303      	movs	r3, #3
 8015c1c:	e7a9      	b.n	8015b72 <atanf+0x86>
 8015c1e:	4a1b      	ldr	r2, [pc, #108]	; (8015c8c <atanf+0x1a0>)
 8015c20:	491b      	ldr	r1, [pc, #108]	; (8015c90 <atanf+0x1a4>)
 8015c22:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015c26:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015c2a:	ed93 0a00 	vldr	s0, [r3]
 8015c2e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8015c32:	ed92 0a00 	vldr	s0, [r2]
 8015c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c3a:	2d00      	cmp	r5, #0
 8015c3c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015c40:	bfb8      	it	lt
 8015c42:	eef1 7a67 	vneglt.f32	s15, s15
 8015c46:	e760      	b.n	8015b0a <atanf+0x1e>
 8015c48:	3fc90fdb 	.word	0x3fc90fdb
 8015c4c:	bfc90fdb 	.word	0xbfc90fdb
 8015c50:	3edfffff 	.word	0x3edfffff
 8015c54:	7149f2ca 	.word	0x7149f2ca
 8015c58:	3f97ffff 	.word	0x3f97ffff
 8015c5c:	3c8569d7 	.word	0x3c8569d7
 8015c60:	3d4bda59 	.word	0x3d4bda59
 8015c64:	bd6ef16b 	.word	0xbd6ef16b
 8015c68:	3d886b35 	.word	0x3d886b35
 8015c6c:	3dba2e6e 	.word	0x3dba2e6e
 8015c70:	3e124925 	.word	0x3e124925
 8015c74:	3eaaaaab 	.word	0x3eaaaaab
 8015c78:	bd15a221 	.word	0xbd15a221
 8015c7c:	bd9d8795 	.word	0xbd9d8795
 8015c80:	bde38e38 	.word	0xbde38e38
 8015c84:	be4ccccd 	.word	0xbe4ccccd
 8015c88:	401bffff 	.word	0x401bffff
 8015c8c:	080167d8 	.word	0x080167d8
 8015c90:	080167e8 	.word	0x080167e8

08015c94 <fabsf>:
 8015c94:	ee10 3a10 	vmov	r3, s0
 8015c98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015c9c:	ee00 3a10 	vmov	s0, r3
 8015ca0:	4770      	bx	lr

08015ca2 <finitef>:
 8015ca2:	b082      	sub	sp, #8
 8015ca4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015ca8:	9801      	ldr	r0, [sp, #4]
 8015caa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015cae:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8015cb2:	bfac      	ite	ge
 8015cb4:	2000      	movge	r0, #0
 8015cb6:	2001      	movlt	r0, #1
 8015cb8:	b002      	add	sp, #8
 8015cba:	4770      	bx	lr

08015cbc <floorf>:
 8015cbc:	ee10 3a10 	vmov	r3, s0
 8015cc0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015cc4:	3a7f      	subs	r2, #127	; 0x7f
 8015cc6:	2a16      	cmp	r2, #22
 8015cc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015ccc:	dc2a      	bgt.n	8015d24 <floorf+0x68>
 8015cce:	2a00      	cmp	r2, #0
 8015cd0:	da11      	bge.n	8015cf6 <floorf+0x3a>
 8015cd2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8015d34 <floorf+0x78>
 8015cd6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015cda:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ce2:	dd05      	ble.n	8015cf0 <floorf+0x34>
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	da23      	bge.n	8015d30 <floorf+0x74>
 8015ce8:	4a13      	ldr	r2, [pc, #76]	; (8015d38 <floorf+0x7c>)
 8015cea:	2900      	cmp	r1, #0
 8015cec:	bf18      	it	ne
 8015cee:	4613      	movne	r3, r2
 8015cf0:	ee00 3a10 	vmov	s0, r3
 8015cf4:	4770      	bx	lr
 8015cf6:	4911      	ldr	r1, [pc, #68]	; (8015d3c <floorf+0x80>)
 8015cf8:	4111      	asrs	r1, r2
 8015cfa:	420b      	tst	r3, r1
 8015cfc:	d0fa      	beq.n	8015cf4 <floorf+0x38>
 8015cfe:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8015d34 <floorf+0x78>
 8015d02:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015d06:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d0e:	ddef      	ble.n	8015cf0 <floorf+0x34>
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	bfbe      	ittt	lt
 8015d14:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8015d18:	fa40 f202 	asrlt.w	r2, r0, r2
 8015d1c:	189b      	addlt	r3, r3, r2
 8015d1e:	ea23 0301 	bic.w	r3, r3, r1
 8015d22:	e7e5      	b.n	8015cf0 <floorf+0x34>
 8015d24:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015d28:	d3e4      	bcc.n	8015cf4 <floorf+0x38>
 8015d2a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015d2e:	4770      	bx	lr
 8015d30:	2300      	movs	r3, #0
 8015d32:	e7dd      	b.n	8015cf0 <floorf+0x34>
 8015d34:	7149f2ca 	.word	0x7149f2ca
 8015d38:	bf800000 	.word	0xbf800000
 8015d3c:	007fffff 	.word	0x007fffff

08015d40 <nanf>:
 8015d40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015d48 <nanf+0x8>
 8015d44:	4770      	bx	lr
 8015d46:	bf00      	nop
 8015d48:	7fc00000 	.word	0x7fc00000

08015d4c <scalbnf>:
 8015d4c:	ee10 3a10 	vmov	r3, s0
 8015d50:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8015d54:	d025      	beq.n	8015da2 <scalbnf+0x56>
 8015d56:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8015d5a:	d302      	bcc.n	8015d62 <scalbnf+0x16>
 8015d5c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015d60:	4770      	bx	lr
 8015d62:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8015d66:	d122      	bne.n	8015dae <scalbnf+0x62>
 8015d68:	4b2a      	ldr	r3, [pc, #168]	; (8015e14 <scalbnf+0xc8>)
 8015d6a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015e18 <scalbnf+0xcc>
 8015d6e:	4298      	cmp	r0, r3
 8015d70:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015d74:	db16      	blt.n	8015da4 <scalbnf+0x58>
 8015d76:	ee10 3a10 	vmov	r3, s0
 8015d7a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015d7e:	3a19      	subs	r2, #25
 8015d80:	4402      	add	r2, r0
 8015d82:	2afe      	cmp	r2, #254	; 0xfe
 8015d84:	dd15      	ble.n	8015db2 <scalbnf+0x66>
 8015d86:	ee10 3a10 	vmov	r3, s0
 8015d8a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8015e1c <scalbnf+0xd0>
 8015d8e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8015e20 <scalbnf+0xd4>
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	eeb0 7a67 	vmov.f32	s14, s15
 8015d98:	bfb8      	it	lt
 8015d9a:	eef0 7a66 	vmovlt.f32	s15, s13
 8015d9e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8015da2:	4770      	bx	lr
 8015da4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015e24 <scalbnf+0xd8>
 8015da8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015dac:	4770      	bx	lr
 8015dae:	0dd2      	lsrs	r2, r2, #23
 8015db0:	e7e6      	b.n	8015d80 <scalbnf+0x34>
 8015db2:	2a00      	cmp	r2, #0
 8015db4:	dd06      	ble.n	8015dc4 <scalbnf+0x78>
 8015db6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015dba:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8015dbe:	ee00 3a10 	vmov	s0, r3
 8015dc2:	4770      	bx	lr
 8015dc4:	f112 0f16 	cmn.w	r2, #22
 8015dc8:	da1a      	bge.n	8015e00 <scalbnf+0xb4>
 8015dca:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015dce:	4298      	cmp	r0, r3
 8015dd0:	ee10 3a10 	vmov	r3, s0
 8015dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015dd8:	dd0a      	ble.n	8015df0 <scalbnf+0xa4>
 8015dda:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8015e1c <scalbnf+0xd0>
 8015dde:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8015e20 <scalbnf+0xd4>
 8015de2:	eef0 7a40 	vmov.f32	s15, s0
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	bf18      	it	ne
 8015dea:	eeb0 0a47 	vmovne.f32	s0, s14
 8015dee:	e7db      	b.n	8015da8 <scalbnf+0x5c>
 8015df0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8015e24 <scalbnf+0xd8>
 8015df4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8015e28 <scalbnf+0xdc>
 8015df8:	eef0 7a40 	vmov.f32	s15, s0
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	e7f3      	b.n	8015de8 <scalbnf+0x9c>
 8015e00:	3219      	adds	r2, #25
 8015e02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015e06:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8015e0a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015e2c <scalbnf+0xe0>
 8015e0e:	ee07 3a10 	vmov	s14, r3
 8015e12:	e7c4      	b.n	8015d9e <scalbnf+0x52>
 8015e14:	ffff3cb0 	.word	0xffff3cb0
 8015e18:	4c000000 	.word	0x4c000000
 8015e1c:	7149f2ca 	.word	0x7149f2ca
 8015e20:	f149f2ca 	.word	0xf149f2ca
 8015e24:	0da24260 	.word	0x0da24260
 8015e28:	8da24260 	.word	0x8da24260
 8015e2c:	33000000 	.word	0x33000000

08015e30 <_init>:
 8015e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e32:	bf00      	nop
 8015e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e36:	bc08      	pop	{r3}
 8015e38:	469e      	mov	lr, r3
 8015e3a:	4770      	bx	lr

08015e3c <_fini>:
 8015e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e3e:	bf00      	nop
 8015e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e42:	bc08      	pop	{r3}
 8015e44:	469e      	mov	lr, r3
 8015e46:	4770      	bx	lr
