
Dipterv_Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000151c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e8  08015358  08015358  00025358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015d40  08015d40  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08015d40  08015d40  00025d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015d48  08015d48  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015d48  08015d48  00025d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015d4c  08015d4c  00025d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08015d50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301ec  2**0
                  CONTENTS
 10 .bss          000066d8  200001f0  200001f0  000301f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200068c8  200068c8  000301f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002220d  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004427  00000000  00000000  00052429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d98  00000000  00000000  00056850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001bf8  00000000  00000000  000585e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c25  00000000  00000000  0005a1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021bb2  00000000  00000000  0007fe05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0dca  00000000  00000000  000a19b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00182781  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000096e4  00000000  00000000  001827d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015340 	.word	0x08015340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08015340 	.word	0x08015340

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <vApplicationGetIdleTaskMemory+0x30>)
 8000fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000020c 	.word	0x2000020c
 8000fbc:	20000260 	.word	0x20000260

08000fc0 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000fe4 <FusionRadiansToDegrees+0x24>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	42652ee0 	.word	0x42652ee0

08000fe8 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	d802      	bhi.n	800100a <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8001004:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001038 <FusionAsin+0x50>
 8001008:	e011      	b.n	800102e <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	db02      	blt.n	8001022 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 800101c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800103c <FusionAsin+0x54>
 8001020:	e005      	b.n	800102e <FusionAsin+0x46>
    }
    return asinf(value);
 8001022:	ed97 0a01 	vldr	s0, [r7, #4]
 8001026:	f011 ffe3 	bl	8012ff0 <asinf>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	bfc90fdb 	.word	0xbfc90fdb
 800103c:	3fc90fdb 	.word	0x3fc90fdb

08001040 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8001040:	b480      	push	{r7}
 8001042:	b091      	sub	sp, #68	; 0x44
 8001044:	af00      	add	r7, sp, #0
 8001046:	eeb0 5a40 	vmov.f32	s10, s0
 800104a:	eef0 5a60 	vmov.f32	s11, s1
 800104e:	eeb0 6a41 	vmov.f32	s12, s2
 8001052:	eef0 6a61 	vmov.f32	s13, s3
 8001056:	eeb0 7a42 	vmov.f32	s14, s4
 800105a:	eef0 7a62 	vmov.f32	s15, s5
 800105e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001062:	edc7 5a08 	vstr	s11, [r7, #32]
 8001066:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800106a:	edc7 6a04 	vstr	s13, [r7, #16]
 800106e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001072:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8001076:	ed97 7a07 	vldr	s14, [r7, #28]
 800107a:	edd7 7a04 	vldr	s15, [r7, #16]
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001082:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8001086:	ed97 7a08 	vldr	s14, [r7, #32]
 800108a:	edd7 7a05 	vldr	s15, [r7, #20]
 800108e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001092:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8001096:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800109a:	edd7 7a06 	vldr	s15, [r7, #24]
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80010a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ba:	ee06 1a90 	vmov	s13, r1
 80010be:	ee07 2a10 	vmov	s14, r2
 80010c2:	ee07 3a90 	vmov	s15, r3
}
 80010c6:	eeb0 0a66 	vmov.f32	s0, s13
 80010ca:	eef0 0a47 	vmov.f32	s1, s14
 80010ce:	eeb0 1a67 	vmov.f32	s2, s15
 80010d2:	3744      	adds	r7, #68	; 0x44
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80010dc:	b480      	push	{r7}
 80010de:	b08f      	sub	sp, #60	; 0x3c
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	eef0 6a40 	vmov.f32	s13, s0
 80010e6:	eeb0 7a60 	vmov.f32	s14, s1
 80010ea:	eef0 7a41 	vmov.f32	s15, s2
 80010ee:	edc7 1a04 	vstr	s3, [r7, #16]
 80010f2:	edc7 6a05 	vstr	s13, [r7, #20]
 80010f6:	ed87 7a06 	vstr	s14, [r7, #24]
 80010fa:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 80010fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001102:	edd7 7a04 	vldr	s15, [r7, #16]
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800110a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800110e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001112:	edd7 7a04 	vldr	s15, [r7, #16]
 8001116:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800111a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800111e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001122:	edd7 7a04 	vldr	s15, [r7, #16]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800112a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800112e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001132:	f107 0220 	add.w	r2, r7, #32
 8001136:	ca07      	ldmia	r2, {r0, r1, r2}
 8001138:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800113c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800113e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001142:	ee06 1a90 	vmov	s13, r1
 8001146:	ee07 2a10 	vmov	s14, r2
 800114a:	ee07 3a90 	vmov	s15, r3
}
 800114e:	eeb0 0a66 	vmov.f32	s0, s13
 8001152:	eef0 0a47 	vmov.f32	s1, s14
 8001156:	eeb0 1a67 	vmov.f32	s2, s15
 800115a:	373c      	adds	r7, #60	; 0x3c
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001164:	b084      	sub	sp, #16
 8001166:	b480      	push	{r7}
 8001168:	b08f      	sub	sp, #60	; 0x3c
 800116a:	af00      	add	r7, sp, #0
 800116c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8001170:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001174:	eef0 6a40 	vmov.f32	s13, s0
 8001178:	eeb0 7a60 	vmov.f32	s14, s1
 800117c:	eef0 7a41 	vmov.f32	s15, s2
 8001180:	edc7 6a05 	vstr	s13, [r7, #20]
 8001184:	ed87 7a06 	vstr	s14, [r7, #24]
 8001188:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 800118c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001190:	edd7 7a05 	vldr	s15, [r7, #20]
 8001194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001198:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800119c:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80011ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011b8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80011bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80011cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80011dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 80011ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001208:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800120c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001218:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	f107 0220 	add.w	r2, r7, #32
 8001224:	ca07      	ldmia	r2, {r0, r1, r2}
 8001226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800122a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800122c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001230:	ee06 1a90 	vmov	s13, r1
 8001234:	ee07 2a10 	vmov	s14, r2
 8001238:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800123c:	eeb0 0a66 	vmov.f32	s0, s13
 8001240:	eef0 0a47 	vmov.f32	s1, s14
 8001244:	eeb0 1a67 	vmov.f32	s2, s15
 8001248:	373c      	adds	r7, #60	; 0x3c
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	b004      	add	sp, #16
 8001252:	4770      	bx	lr

08001254 <FusionQuaternionToMatrix>:
/**
 * @brief Converts a quaternion to a rotation matrix.
 * @param quaternion Quaternion.
 * @return Rotation matrix.
 */
static inline FusionMatrix FusionQuaternionToMatrix(const FusionQuaternion quaternion) {
 8001254:	b4b0      	push	{r4, r5, r7}
 8001256:	b097      	sub	sp, #92	; 0x5c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6178      	str	r0, [r7, #20]
 800125c:	eeb0 6a40 	vmov.f32	s12, s0
 8001260:	eef0 6a60 	vmov.f32	s13, s1
 8001264:	eeb0 7a41 	vmov.f32	s14, s2
 8001268:	eef0 7a61 	vmov.f32	s15, s3
 800126c:	ed87 6a01 	vstr	s12, [r7, #4]
 8001270:	edc7 6a02 	vstr	s13, [r7, #8]
 8001274:	ed87 7a03 	vstr	s14, [r7, #12]
 8001278:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q quaternion.element
    const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 800127c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001280:	edd7 7a01 	vldr	s15, [r7, #4]
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    const float qwqx = Q.w * Q.x;
 800128c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001290:	edd7 7a02 	vldr	s15, [r7, #8]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    const float qwqy = Q.w * Q.y;
 800129c:	ed97 7a01 	vldr	s14, [r7, #4]
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    const float qwqz = Q.w * Q.z;
 80012ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    const float qxqy = Q.x * Q.y;
 80012bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    const float qxqz = Q.x * Q.z;
 80012cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    const float qyqz = Q.y * Q.z;
 80012dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionMatrix matrix = {.element = {
            .xx = 2.0f * (qwqw - 0.5f + Q.x * Q.x),
 80012ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80012f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80012fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800130c:	edc7 7a06 	vstr	s15, [r7, #24]
            .xy = 2.0f * (qxqy - qwqz),
 8001310:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001314:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001320:	edc7 7a07 	vstr	s15, [r7, #28]
            .xz = 2.0f * (qxqz + qwqy),
 8001324:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001328:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001334:	edc7 7a08 	vstr	s15, [r7, #32]
            .yx = 2.0f * (qxqy + qwqz),
 8001338:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800133c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001348:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .yy = 2.0f * (qwqw - 0.5f + Q.y * Q.y),
 800134c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001350:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001354:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001358:	edd7 6a03 	vldr	s13, [r7, #12]
 800135c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001368:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800136c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yz = 2.0f * (qyqz - qwqx),
 8001370:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001374:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001380:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .zx = 2.0f * (qxqz - qwqy),
 8001384:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001388:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001394:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .zy = 2.0f * (qyqz + qwqx),
 8001398:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800139c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .zz = 2.0f * (qwqw - 0.5f + Q.z * Q.z),
 80013ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80013bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013cc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    }};
    return matrix;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	461d      	mov	r5, r3
 80013d4:	f107 0418 	add.w	r4, r7, #24
 80013d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	602b      	str	r3, [r5, #0]
#undef Q
}
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	375c      	adds	r7, #92	; 0x5c
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bcb0      	pop	{r4, r5, r7}
 80013ec:	4770      	bx	lr

080013ee <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b090      	sub	sp, #64	; 0x40
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	eeb0 6a40 	vmov.f32	s12, s0
 80013f8:	eef0 6a60 	vmov.f32	s13, s1
 80013fc:	eeb0 7a41 	vmov.f32	s14, s2
 8001400:	eef0 7a61 	vmov.f32	s15, s3
 8001404:	ed87 6a04 	vstr	s12, [r7, #16]
 8001408:	edc7 6a05 	vstr	s13, [r7, #20]
 800140c:	ed87 7a06 	vstr	s14, [r7, #24]
 8001410:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8001414:	ed97 7a06 	vldr	s14, [r7, #24]
 8001418:	edd7 7a06 	vldr	s15, [r7, #24]
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001428:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 800142c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001430:	edd7 7a05 	vldr	s15, [r7, #20]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001438:	edd7 6a06 	vldr	s13, [r7, #24]
 800143c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001448:	ed97 7a05 	vldr	s14, [r7, #20]
 800144c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001454:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145c:	eef0 0a67 	vmov.f32	s1, s15
 8001460:	eeb0 0a66 	vmov.f32	s0, s13
 8001464:	f011 fdf0 	bl	8013048 <atan2f>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	f7ff fda6 	bl	8000fc0 <FusionRadiansToDegrees>
 8001474:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001478:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 800147c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001480:	edd7 7a06 	vldr	s15, [r7, #24]
 8001484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001488:	edd7 6a07 	vldr	s13, [r7, #28]
 800148c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001498:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	f7ff fda2 	bl	8000fe8 <FusionAsin>
 80014a4:	eef0 7a40 	vmov.f32	s15, s0
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	f7ff fd88 	bl	8000fc0 <FusionRadiansToDegrees>
 80014b0:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80014b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 80014b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80014bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80014d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80014d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e8:	eef0 0a67 	vmov.f32	s1, s15
 80014ec:	eeb0 0a66 	vmov.f32	s0, s13
 80014f0:	f011 fdaa 	bl	8013048 <atan2f>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	f7ff fd60 	bl	8000fc0 <FusionRadiansToDegrees>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001504:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8001508:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800150c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001510:	ca07      	ldmia	r2, {r0, r1, r2}
 8001512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151c:	ee06 1a90 	vmov	s13, r1
 8001520:	ee07 2a10 	vmov	s14, r2
 8001524:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8001528:	eeb0 0a66 	vmov.f32	s0, s13
 800152c:	eef0 0a47 	vmov.f32	s1, s14
 8001530:	eeb0 1a67 	vmov.f32	s2, s15
 8001534:	3740      	adds	r7, #64	; 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b096      	sub	sp, #88	; 0x58
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f003 ff6d 	bl	8005420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f8a1 	bl	800168c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f000 fda9 	bl	80020a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800154e:	f000 fd87 	bl	8002060 <MX_DMA_Init>
  MX_TIM2_Init();
 8001552:	f000 fabb 	bl	8001acc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001556:	f000 fd05 	bl	8001f64 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800155a:	f000 f9f7 	bl	800194c <MX_I2C1_Init>
  MX_I2C2_Init();
 800155e:	f000 fa23 	bl	80019a8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001562:	f000 fa4f 	bl	8001a04 <MX_I2C3_Init>
  MX_TIM3_Init();
 8001566:	f000 fb21 	bl	8001bac <MX_TIM3_Init>
  MX_TIM4_Init();
 800156a:	f000 fbcd 	bl	8001d08 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800156e:	f000 fccf 	bl	8001f10 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001572:	f000 fd21 	bl	8001fb8 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001576:	f000 fa73 	bl	8001a60 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 800157a:	f000 fd47 	bl	800200c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800157e:	f000 f8ef 	bl	8001760 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001582:	f000 f93f 	bl	8001804 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001586:	f000 f98f 	bl	80018a8 <MX_ADC3_Init>
  MX_TIM6_Init();
 800158a:	f000 fc31 	bl	8001df0 <MX_TIM6_Init>
  MX_TIM7_Init();
 800158e:	f000 fc65 	bl	8001e5c <MX_TIM7_Init>
  MX_TIM10_Init();
 8001592:	f000 fc99 	bl	8001ec8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */




  __HAL_SPI_ENABLE(&hspi2);
 8001596:	4b32      	ldr	r3, [pc, #200]	; (8001660 <main+0x124>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <main+0x124>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a4:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_1  );
 80015a6:	2100      	movs	r1, #0
 80015a8:	482e      	ldr	r0, [pc, #184]	; (8001664 <main+0x128>)
 80015aa:	f007 fc75 	bl	8008e98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_2  );
 80015ae:	2104      	movs	r1, #4
 80015b0:	482c      	ldr	r0, [pc, #176]	; (8001664 <main+0x128>)
 80015b2:	f007 fc71 	bl	8008e98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_3  );
 80015b6:	2108      	movs	r1, #8
 80015b8:	482a      	ldr	r0, [pc, #168]	; (8001664 <main+0x128>)
 80015ba:	f007 fc6d 	bl	8008e98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_4  );
 80015be:	210c      	movs	r1, #12
 80015c0:	4828      	ldr	r0, [pc, #160]	; (8001664 <main+0x128>)
 80015c2:	f007 fc69 	bl	8008e98 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start  ( &htim10 );
 80015c6:	4828      	ldr	r0, [pc, #160]	; (8001668 <main+0x12c>)
 80015c8:	f007 fb34 	bl	8008c34 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  telemetria_Queue = xQueueCreate( 3, 3*sizeof( float ) );
 80015cc:	2200      	movs	r2, #0
 80015ce:	210c      	movs	r1, #12
 80015d0:	2003      	movs	r0, #3
 80015d2:	f00c fea3 	bl	800e31c <xQueueGenericCreate>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a24      	ldr	r2, [pc, #144]	; (800166c <main+0x130>)
 80015da:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 500);
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <main+0x134>)
 80015de:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80015e2:	461d      	mov	r5, r3
 80015e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00c fd13 	bl	800e022 <osThreadCreate>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <main+0x138>)
 8001600:	6013      	str	r3, [r2, #0]

  /* definition and creation of Data_Reading */
  osThreadDef(Data_Reading, Start_Data_Reading, osPriorityNormal, 0, 600);
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <main+0x13c>)
 8001604:	f107 0420 	add.w	r4, r7, #32
 8001608:	461d      	mov	r5, r3
 800160a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Data_ReadingHandle = osThreadCreate(osThread(Data_Reading), NULL);
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f00c fd00 	bl	800e022 <osThreadCreate>
 8001622:	4603      	mov	r3, r0
 8001624:	4a15      	ldr	r2, [pc, #84]	; (800167c <main+0x140>)
 8001626:	6013      	str	r3, [r2, #0]

  /* definition and creation of Orientation_cal */
  osThreadDef(Orientation_cal, Start_Orientation, osPriorityBelowNormal, 0, 200);
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <main+0x144>)
 800162a:	1d3c      	adds	r4, r7, #4
 800162c:	461d      	mov	r5, r3
 800162e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Orientation_calHandle = osThreadCreate(osThread(Orientation_cal), NULL);
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f00c fcef 	bl	800e022 <osThreadCreate>
 8001644:	4603      	mov	r3, r0
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <main+0x148>)
 8001648:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800164a:	f00c fce3 	bl	800e014 <osKernelStart>

  while (1)
  {


	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800164e:	2108      	movs	r1, #8
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <main+0x14c>)
 8001652:	f005 f8a6 	bl	80067a2 <HAL_GPIO_TogglePin>

	  HAL_Delay(3);
 8001656:	2003      	movs	r0, #3
 8001658:	f003 ff54 	bl	8005504 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800165c:	e7f7      	b.n	800164e <main+0x112>
 800165e:	bf00      	nop
 8001660:	20000634 	.word	0x20000634
 8001664:	200006d4 	.word	0x200006d4
 8001668:	200007f4 	.word	0x200007f4
 800166c:	20002b54 	.word	0x20002b54
 8001670:	08015384 	.word	0x08015384
 8001674:	200009ac 	.word	0x200009ac
 8001678:	080153a0 	.word	0x080153a0
 800167c:	200009b0 	.word	0x200009b0
 8001680:	080153bc 	.word	0x080153bc
 8001684:	200009b4 	.word	0x200009b4
 8001688:	40020400 	.word	0x40020400

0800168c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b094      	sub	sp, #80	; 0x50
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	f107 0320 	add.w	r3, r7, #32
 8001696:	2230      	movs	r2, #48	; 0x30
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f00e fd16 	bl	80100cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <SystemClock_Config+0xcc>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a27      	ldr	r2, [pc, #156]	; (8001758 <SystemClock_Config+0xcc>)
 80016ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <SystemClock_Config+0xcc>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <SystemClock_Config+0xd0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a21      	ldr	r2, [pc, #132]	; (800175c <SystemClock_Config+0xd0>)
 80016d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <SystemClock_Config+0xd0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e8:	2301      	movs	r3, #1
 80016ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f2:	2302      	movs	r3, #2
 80016f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016fc:	2304      	movs	r3, #4
 80016fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001700:	23a8      	movs	r3, #168	; 0xa8
 8001702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001704:	2302      	movs	r3, #2
 8001706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001708:	2304      	movs	r3, #4
 800170a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	4618      	mov	r0, r3
 8001712:	f006 f967 	bl	80079e4 <HAL_RCC_OscConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800171c:	f002 f8c4 	bl	80038a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001720:	230f      	movs	r3, #15
 8001722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001724:	2302      	movs	r3, #2
 8001726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800172c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	2105      	movs	r1, #5
 800173e:	4618      	mov	r0, r3
 8001740:	f006 fbc8 	bl	8007ed4 <HAL_RCC_ClockConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800174a:	f002 f8ad 	bl	80038a8 <Error_Handler>
  }
}
 800174e:	bf00      	nop
 8001750:	3750      	adds	r7, #80	; 0x50
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40007000 	.word	0x40007000

08001760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001766:	463b      	mov	r3, r7
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <MX_ADC1_Init+0x98>)
 8001774:	4a21      	ldr	r2, [pc, #132]	; (80017fc <MX_ADC1_Init+0x9c>)
 8001776:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <MX_ADC1_Init+0x98>)
 800177a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800177e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <MX_ADC1_Init+0x98>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_ADC1_Init+0x98>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_ADC1_Init+0x98>)
 800178e:	2200      	movs	r2, #0
 8001790:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_ADC1_Init+0x98>)
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_ADC1_Init+0x98>)
 800179c:	2200      	movs	r2, #0
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017a2:	4a17      	ldr	r2, [pc, #92]	; (8001800 <MX_ADC1_Init+0xa0>)
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017bc:	2201      	movs	r2, #1
 80017be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017c2:	f003 fec3 	bl	800554c <HAL_ADC_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017cc:	f002 f86c 	bl	80038a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017d0:	2305      	movs	r3, #5
 80017d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017dc:	463b      	mov	r3, r7
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017e2:	f003 fef7 	bl	80055d4 <HAL_ADC_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017ec:	f002 f85c 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000460 	.word	0x20000460
 80017fc:	40012000 	.word	0x40012000
 8001800:	0f000001 	.word	0x0f000001

08001804 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800180a:	463b      	mov	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <MX_ADC2_Init+0x98>)
 8001818:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <MX_ADC2_Init+0x9c>)
 800181a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_ADC2_Init+0x98>)
 800181e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001822:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <MX_ADC2_Init+0x98>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <MX_ADC2_Init+0x98>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <MX_ADC2_Init+0x98>)
 8001832:	2200      	movs	r2, #0
 8001834:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <MX_ADC2_Init+0x98>)
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <MX_ADC2_Init+0x98>)
 8001840:	2200      	movs	r2, #0
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <MX_ADC2_Init+0x98>)
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <MX_ADC2_Init+0xa0>)
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_ADC2_Init+0x98>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_ADC2_Init+0x98>)
 8001852:	2201      	movs	r2, #1
 8001854:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_ADC2_Init+0x98>)
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_ADC2_Init+0x98>)
 8001860:	2201      	movs	r2, #1
 8001862:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001864:	480d      	ldr	r0, [pc, #52]	; (800189c <MX_ADC2_Init+0x98>)
 8001866:	f003 fe71 	bl	800554c <HAL_ADC_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001870:	f002 f81a 	bl	80038a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001874:	2304      	movs	r3, #4
 8001876:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001878:	2301      	movs	r3, #1
 800187a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_ADC2_Init+0x98>)
 8001886:	f003 fea5 	bl	80055d4 <HAL_ADC_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001890:	f002 f80a 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200004a8 	.word	0x200004a8
 80018a0:	40012100 	.word	0x40012100
 80018a4:	0f000001 	.word	0x0f000001

080018a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ae:	463b      	mov	r3, r7
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <MX_ADC3_Init+0x98>)
 80018bc:	4a21      	ldr	r2, [pc, #132]	; (8001944 <MX_ADC3_Init+0x9c>)
 80018be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <MX_ADC3_Init+0x98>)
 80018c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018c6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <MX_ADC3_Init+0x98>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <MX_ADC3_Init+0x98>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <MX_ADC3_Init+0x98>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <MX_ADC3_Init+0x98>)
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <MX_ADC3_Init+0x98>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <MX_ADC3_Init+0x98>)
 80018ea:	4a17      	ldr	r2, [pc, #92]	; (8001948 <MX_ADC3_Init+0xa0>)
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <MX_ADC3_Init+0x98>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <MX_ADC3_Init+0x98>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <MX_ADC3_Init+0x98>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <MX_ADC3_Init+0x98>)
 8001904:	2201      	movs	r2, #1
 8001906:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <MX_ADC3_Init+0x98>)
 800190a:	f003 fe1f 	bl	800554c <HAL_ADC_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001914:	f001 ffc8 	bl	80038a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001918:	230d      	movs	r3, #13
 800191a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800191c:	2301      	movs	r3, #1
 800191e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001924:	463b      	mov	r3, r7
 8001926:	4619      	mov	r1, r3
 8001928:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_ADC3_Init+0x98>)
 800192a:	f003 fe53 	bl	80055d4 <HAL_ADC_ConfigChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001934:	f001 ffb8 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200004f0 	.word	0x200004f0
 8001944:	40012200 	.word	0x40012200
 8001948:	0f000001 	.word	0x0f000001

0800194c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <MX_I2C1_Init+0x50>)
 8001952:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <MX_I2C1_Init+0x54>)
 8001954:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <MX_I2C1_Init+0x50>)
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <MX_I2C1_Init+0x58>)
 800195a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <MX_I2C1_Init+0x50>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_I2C1_Init+0x50>)
 8001964:	2200      	movs	r2, #0
 8001966:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_I2C1_Init+0x50>)
 800196a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001970:	4b0a      	ldr	r3, [pc, #40]	; (800199c <MX_I2C1_Init+0x50>)
 8001972:	2200      	movs	r2, #0
 8001974:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_I2C1_Init+0x50>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <MX_I2C1_Init+0x50>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_I2C1_Init+0x50>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001988:	4804      	ldr	r0, [pc, #16]	; (800199c <MX_I2C1_Init+0x50>)
 800198a:	f004 ff3d 	bl	8006808 <HAL_I2C_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001994:	f001 ff88 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000538 	.word	0x20000538
 80019a0:	40005400 	.word	0x40005400
 80019a4:	00061a80 	.word	0x00061a80

080019a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019ae:	4a13      	ldr	r2, [pc, #76]	; (80019fc <MX_I2C2_Init+0x54>)
 80019b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019b4:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <MX_I2C2_Init+0x58>)
 80019b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019e6:	f004 ff0f 	bl	8006808 <HAL_I2C_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019f0:	f001 ff5a 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	2000058c 	.word	0x2000058c
 80019fc:	40005800 	.word	0x40005800
 8001a00:	00061a80 	.word	0x00061a80

08001a04 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a0a:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <MX_I2C3_Init+0x54>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a10:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <MX_I2C3_Init+0x58>)
 8001a12:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a26:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a40:	4804      	ldr	r0, [pc, #16]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a42:	f004 fee1 	bl	8006808 <HAL_I2C_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a4c:	f001 ff2c 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200005e0 	.word	0x200005e0
 8001a58:	40005c00 	.word	0x40005c00
 8001a5c:	00061a80 	.word	0x00061a80

08001a60 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a66:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <MX_SPI2_Init+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a70:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a90:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a94:	2220      	movs	r2, #32
 8001a96:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001aac:	220a      	movs	r2, #10
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001ab2:	f006 fc2f 	bl	8008314 <HAL_SPI_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001abc:	f001 fef4 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000634 	.word	0x20000634
 8001ac8:	40003800 	.word	0x40003800

08001acc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad2:	f107 0318 	add.w	r3, r7, #24
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001aea:	463b      	mov	r3, r7
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af6:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001af8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001afc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b00:	2253      	movs	r2, #83	; 0x53
 8001b02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b04:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001b0a:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b12:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b18:	4b23      	ldr	r3, [pc, #140]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b1e:	4822      	ldr	r0, [pc, #136]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b20:	f007 f838 	bl	8008b94 <HAL_TIM_Base_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001b2a:	f001 febd 	bl	80038a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b32:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	4619      	mov	r1, r3
 8001b3a:	481b      	ldr	r0, [pc, #108]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b3c:	f007 fd34 	bl	80095a8 <HAL_TIM_ConfigClockSource>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b46:	f001 feaf 	bl	80038a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b4a:	4817      	ldr	r0, [pc, #92]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b4c:	f007 fa6c 	bl	8009028 <HAL_TIM_IC_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b56:	f001 fea7 	bl	80038a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	4619      	mov	r1, r3
 8001b68:	480f      	ldr	r0, [pc, #60]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b6a:	f008 fb55 	bl	800a218 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001b74:	f001 fe98 	bl	80038a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b90:	f007 fbab 	bl	80092ea <HAL_TIM_IC_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001b9a:	f001 fe85 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	; 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000068c 	.word	0x2000068c

08001bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b092      	sub	sp, #72	; 0x48
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	615a      	str	r2, [r3, #20]
 8001bea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bec:	4b44      	ldr	r3, [pc, #272]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001bee:	4a45      	ldr	r2, [pc, #276]	; (8001d04 <MX_TIM3_Init+0x158>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7-1;
 8001bf2:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001bf4:	2206      	movs	r2, #6
 8001bf6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001bfe:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b3c      	ldr	r3, [pc, #240]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c12:	483b      	ldr	r0, [pc, #236]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c14:	f006 ffbe 	bl	8008b94 <HAL_TIM_Base_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c1e:	f001 fe43 	bl	80038a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4834      	ldr	r0, [pc, #208]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c30:	f007 fcba 	bl	80095a8 <HAL_TIM_ConfigClockSource>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c3a:	f001 fe35 	bl	80038a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c3e:	4830      	ldr	r0, [pc, #192]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c40:	f007 f8d0 	bl	8008de4 <HAL_TIM_PWM_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001c4a:	f001 fe2d 	bl	80038a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001c52:	2330      	movs	r3, #48	; 0x30
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4828      	ldr	r0, [pc, #160]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c5e:	f007 fd6a 	bl	8009736 <HAL_TIM_SlaveConfigSynchro>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001c68:	f001 fe1e 	bl	80038a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4821      	ldr	r0, [pc, #132]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c7c:	f008 facc 	bl	800a218 <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c86:	f001 fe0f 	bl	80038a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8a:	2360      	movs	r3, #96	; 0x60
 8001c8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4817      	ldr	r0, [pc, #92]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001ca2:	f007 fbbf 	bl	8009424 <HAL_TIM_PWM_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001cac:	f001 fdfc 	bl	80038a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4812      	ldr	r0, [pc, #72]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001cb8:	f007 fbb4 	bl	8009424 <HAL_TIM_PWM_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001cc2:	f001 fdf1 	bl	80038a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	2208      	movs	r2, #8
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001cce:	f007 fba9 	bl	8009424 <HAL_TIM_PWM_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8001cd8:	f001 fde6 	bl	80038a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	220c      	movs	r2, #12
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4807      	ldr	r0, [pc, #28]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001ce4:	f007 fb9e 	bl	8009424 <HAL_TIM_PWM_ConfigChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8001cee:	f001 fddb 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cf2:	4803      	ldr	r0, [pc, #12]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001cf4:	f002 f89a 	bl	8003e2c <HAL_TIM_MspPostInit>

}
 8001cf8:	bf00      	nop
 8001cfa:	3748      	adds	r7, #72	; 0x48
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	200006d4 	.word	0x200006d4
 8001d04:	40000400 	.word	0x40000400

08001d08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08e      	sub	sp, #56	; 0x38
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
 8001d34:	615a      	str	r2, [r3, #20]
 8001d36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d38:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d3a:	4a2c      	ldr	r2, [pc, #176]	; (8001dec <MX_TIM4_Init+0xe4>)
 8001d3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d44:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d52:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d58:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d5e:	4822      	ldr	r0, [pc, #136]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d60:	f006 ff18 	bl	8008b94 <HAL_TIM_Base_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d6a:	f001 fd9d 	bl	80038a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	481b      	ldr	r0, [pc, #108]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d7c:	f007 fc14 	bl	80095a8 <HAL_TIM_ConfigClockSource>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d86:	f001 fd8f 	bl	80038a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d8a:	4817      	ldr	r0, [pc, #92]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d8c:	f007 f82a 	bl	8008de4 <HAL_TIM_PWM_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d96:	f001 fd87 	bl	80038a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001da2:	f107 0320 	add.w	r3, r7, #32
 8001da6:	4619      	mov	r1, r3
 8001da8:	480f      	ldr	r0, [pc, #60]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001daa:	f008 fa35 	bl	800a218 <HAL_TIMEx_MasterConfigSynchronization>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001db4:	f001 fd78 	bl	80038a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db8:	2360      	movs	r3, #96	; 0x60
 8001dba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	2200      	movs	r2, #0
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001dd0:	f007 fb28 	bl	8009424 <HAL_TIM_PWM_ConfigChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001dda:	f001 fd65 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	3738      	adds	r7, #56	; 0x38
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000071c 	.word	0x2000071c
 8001dec:	40000800 	.word	0x40000800

08001df0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df6:	463b      	mov	r3, r7
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e00:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <MX_TIM6_Init+0x68>)
 8001e02:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e06:	2253      	movs	r2, #83	; 0x53
 8001e08:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65000;
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e12:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001e16:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e1e:	480d      	ldr	r0, [pc, #52]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e20:	f006 feb8 	bl	8008b94 <HAL_TIM_Base_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e2a:	f001 fd3d 	bl	80038a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e36:	463b      	mov	r3, r7
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4806      	ldr	r0, [pc, #24]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e3c:	f008 f9ec 	bl	800a218 <HAL_TIMEx_MasterConfigSynchronization>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e46:	f001 fd2f 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000764 	.word	0x20000764
 8001e58:	40001000 	.word	0x40001000

08001e5c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e62:	463b      	mov	r3, r7
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e6c:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <MX_TIM7_Init+0x68>)
 8001e6e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 85-1;
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e72:	2254      	movs	r2, #84	; 0x54
 8001e74:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e7e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e82:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e8a:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e8c:	f006 fe82 	bl	8008b94 <HAL_TIM_Base_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001e96:	f001 fd07 	bl	80038a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4806      	ldr	r0, [pc, #24]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001ea8:	f008 f9b6 	bl	800a218 <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001eb2:	f001 fcf9 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200007ac 	.word	0x200007ac
 8001ec4:	40001400 	.word	0x40001400

08001ec8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001ece:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <MX_TIM10_Init+0x44>)
 8001ed0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001ed4:	22a7      	movs	r2, #167	; 0xa7
 8001ed6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001ef4:	f006 fe4e 	bl	8008b94 <HAL_TIM_Base_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001efe:	f001 fcd3 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200007f4 	.word	0x200007f4
 8001f0c:	40014400 	.word	0x40014400

08001f10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 420000;
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f1c:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <MX_USART1_UART_Init+0x50>)
 8001f1e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f34:	220c      	movs	r2, #12
 8001f36:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f46:	f008 f9f7 	bl	800a338 <HAL_UART_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001f50:	f001 fcaa 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	2000083c 	.word	0x2000083c
 8001f5c:	40011000 	.word	0x40011000
 8001f60:	000668a0 	.word	0x000668a0

08001f64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <MX_USART2_UART_Init+0x50>)
 8001f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f9c:	f008 f9cc 	bl	800a338 <HAL_UART_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fa6:	f001 fc7f 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000880 	.word	0x20000880
 8001fb4:	40004400 	.word	0x40004400

08001fb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <MX_USART3_UART_Init+0x50>)
 8001fc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fde:	220c      	movs	r2, #12
 8001fe0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001ff0:	f008 f9a2 	bl	800a338 <HAL_UART_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ffa:	f001 fc55 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200008c4 	.word	0x200008c4
 8002008:	40004800 	.word	0x40004800

0800200c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <MX_USART6_UART_Init+0x50>)
 8002014:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800201c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002032:	220c      	movs	r2, #12
 8002034:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002042:	4805      	ldr	r0, [pc, #20]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002044:	f008 f978 	bl	800a338 <HAL_UART_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800204e:	f001 fc2b 	bl	80038a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000908 	.word	0x20000908
 800205c:	40011400 	.word	0x40011400

08002060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_DMA_Init+0x3c>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a0b      	ldr	r2, [pc, #44]	; (800209c <MX_DMA_Init+0x3c>)
 8002070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_DMA_Init+0x3c>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2105      	movs	r1, #5
 8002086:	203a      	movs	r0, #58	; 0x3a
 8002088:	f003 fd9d 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800208c:	203a      	movs	r0, #58	; 0x3a
 800208e:	f003 fdb6 	bl	8005bfe <HAL_NVIC_EnableIRQ>

}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800

080020a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	4b6d      	ldr	r3, [pc, #436]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a6c      	ldr	r2, [pc, #432]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b6a      	ldr	r3, [pc, #424]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b66      	ldr	r3, [pc, #408]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a65      	ldr	r2, [pc, #404]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b63      	ldr	r3, [pc, #396]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	4b5f      	ldr	r3, [pc, #380]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a5e      	ldr	r2, [pc, #376]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b5c      	ldr	r3, [pc, #368]	; (8002270 <MX_GPIO_Init+0x1d0>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	4b58      	ldr	r3, [pc, #352]	; (8002270 <MX_GPIO_Init+0x1d0>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a57      	ldr	r2, [pc, #348]	; (8002270 <MX_GPIO_Init+0x1d0>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b55      	ldr	r3, [pc, #340]	; (8002270 <MX_GPIO_Init+0x1d0>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	4b51      	ldr	r3, [pc, #324]	; (8002270 <MX_GPIO_Init+0x1d0>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a50      	ldr	r2, [pc, #320]	; (8002270 <MX_GPIO_Init+0x1d0>)
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b4e      	ldr	r3, [pc, #312]	; (8002270 <MX_GPIO_Init+0x1d0>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|GNSS_RST_Pin, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	f248 0102 	movw	r1, #32770	; 0x8002
 8002148:	484a      	ldr	r0, [pc, #296]	; (8002274 <MX_GPIO_Init+0x1d4>)
 800214a:	f004 fb11 	bl	8006770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	f241 0118 	movw	r1, #4120	; 0x1018
 8002154:	4848      	ldr	r0, [pc, #288]	; (8002278 <MX_GPIO_Init+0x1d8>)
 8002156:	f004 fb0b 	bl	8006770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002160:	4846      	ldr	r0, [pc, #280]	; (800227c <MX_GPIO_Init+0x1dc>)
 8002162:	f004 fb05 	bl	8006770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	2104      	movs	r1, #4
 800216a:	4845      	ldr	r0, [pc, #276]	; (8002280 <MX_GPIO_Init+0x1e0>)
 800216c:	f004 fb00 	bl	8006770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IT_MAGN_Pin BUTTON_Pin */
  GPIO_InitStruct.Pin = IT_MAGN_Pin|BUTTON_Pin;
 8002170:	f242 0301 	movw	r3, #8193	; 0x2001
 8002174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002176:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800217a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4619      	mov	r1, r3
 8002186:	483d      	ldr	r0, [pc, #244]	; (800227c <MX_GPIO_Init+0x1dc>)
 8002188:	f004 f956 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin GNSS_RST_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|GNSS_RST_Pin;
 800218c:	f248 0302 	movw	r3, #32770	; 0x8002
 8002190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002192:	2301      	movs	r3, #1
 8002194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	4833      	ldr	r0, [pc, #204]	; (8002274 <MX_GPIO_Init+0x1d4>)
 80021a6:	f004 f947 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pin : IT_PRESS_Pin */
  GPIO_InitStruct.Pin = IT_PRESS_Pin;
 80021aa:	2304      	movs	r3, #4
 80021ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IT_PRESS_GPIO_Port, &GPIO_InitStruct);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	482e      	ldr	r0, [pc, #184]	; (8002278 <MX_GPIO_Init+0x1d8>)
 80021c0:	f004 f93a 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_GYRO_Pin PB3 PB4 */
  GPIO_InitStruct.Pin = CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4;
 80021c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80021c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4826      	ldr	r0, [pc, #152]	; (8002278 <MX_GPIO_Init+0x1d8>)
 80021de:	f004 f92b 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_ACC_Pin */
  GPIO_InitStruct.Pin = CS_ACC_Pin;
 80021e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e8:	2301      	movs	r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_ACC_GPIO_Port, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	4820      	ldr	r0, [pc, #128]	; (800227c <MX_GPIO_Init+0x1dc>)
 80021fc:	f004 f91c 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pins : IT_GYRO_Pin IT_ACC_Pin */
  GPIO_InitStruct.Pin = IT_GYRO_Pin|IT_ACC_Pin;
 8002200:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002206:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800220a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	4817      	ldr	r0, [pc, #92]	; (8002274 <MX_GPIO_Init+0x1d4>)
 8002218:	f004 f90e 	bl	8006438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800221c:	2304      	movs	r3, #4
 800221e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	2301      	movs	r3, #1
 8002222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	4813      	ldr	r0, [pc, #76]	; (8002280 <MX_GPIO_Init+0x1e0>)
 8002234:	f004 f900 	bl	8006438 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2105      	movs	r1, #5
 800223c:	2006      	movs	r0, #6
 800223e:	f003 fcc2 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002242:	2006      	movs	r0, #6
 8002244:	f003 fcdb 	bl	8005bfe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	2105      	movs	r1, #5
 800224c:	2008      	movs	r0, #8
 800224e:	f003 fcba 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002252:	2008      	movs	r0, #8
 8002254:	f003 fcd3 	bl	8005bfe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2105      	movs	r1, #5
 800225c:	2028      	movs	r0, #40	; 0x28
 800225e:	f003 fcb2 	bl	8005bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002262:	2028      	movs	r0, #40	; 0x28
 8002264:	f003 fccb 	bl	8005bfe <HAL_NVIC_EnableIRQ>

}
 8002268:	bf00      	nop
 800226a:	3728      	adds	r7, #40	; 0x28
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40020800 	.word	0x40020800
 8002280:	40020c00 	.word	0x40020c00

08002284 <set_config>:

/* USER CODE BEGIN 4 */
static int8_t set_config(struct bmm150_dev *dev) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    struct bmm150_settings settings;

    /* Set powermode as normal mode */
    settings.pwr_mode = BMM150_POWERMODE_NORMAL;
 800228c:	2300      	movs	r3, #0
 800228e:	737b      	strb	r3, [r7, #13]
    rslt = bmm150_set_op_mode(&settings, dev);
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	f00a fe50 	bl	800cf3c <bmm150_set_op_mode>
 800229c:	4603      	mov	r3, r0
 800229e:	77fb      	strb	r3, [r7, #31]
    bmm150_error_codes_print_result("bmm150_set_op_mode", rslt);
 80022a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022a4:	4619      	mov	r1, r3
 80022a6:	481d      	ldr	r0, [pc, #116]	; (800231c <set_config+0x98>)
 80022a8:	f00b fe78 	bl	800df9c <bmm150_error_codes_print_result>

    if (rslt == BMM150_OK) {
 80022ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d12d      	bne.n	8002310 <set_config+0x8c>
        /* Setting the preset mode as Low power mode
         * i.e. data rate = 10Hz, XY-rep = 1, Z-rep = 2
         */
        settings.preset_mode = BMM150_PRESETMODE_FORCED200;//BMM150_PRESETMODE_HIGHACCURACY;                  // TODO Change it to the desired preset
 80022b4:	2305      	movs	r3, #5
 80022b6:	747b      	strb	r3, [r7, #17]
        rslt = bmm150_set_presetmode(&settings, dev);
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4618      	mov	r0, r3
 80022c0:	f00a fea8 	bl	800d014 <bmm150_set_presetmode>
 80022c4:	4603      	mov	r3, r0
 80022c6:	77fb      	strb	r3, [r7, #31]
        settings.data_rate = BMM150_DATA_RATE_30HZ;                             // TODO Change it to the desired ODR
 80022c8:	2307      	movs	r3, #7
 80022ca:	73bb      	strb	r3, [r7, #14]
        bmm150_set_sensor_settings(BMM150_SEL_DATA_RATE, &settings, dev);
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4619      	mov	r1, r3
 80022d4:	2001      	movs	r0, #1
 80022d6:	f00a ff19 	bl	800d10c <bmm150_set_sensor_settings>
        bmm150_error_codes_print_result("bmm150_set_presetmode", rslt);
 80022da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022de:	4619      	mov	r1, r3
 80022e0:	480f      	ldr	r0, [pc, #60]	; (8002320 <set_config+0x9c>)
 80022e2:	f00b fe5b 	bl	800df9c <bmm150_error_codes_print_result>

        if (rslt == BMM150_OK) {
 80022e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d110      	bne.n	8002310 <set_config+0x8c>
            /* Map the data interrupt pin */
            settings.int_settings.drdy_pin_en = 0x01;
 80022ee:	2301      	movs	r3, #1
 80022f0:	74bb      	strb	r3, [r7, #18]
            rslt = bmm150_set_sensor_settings(BMM150_SEL_DRDY_PIN_EN, &settings, dev);
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4619      	mov	r1, r3
 80022fa:	2010      	movs	r0, #16
 80022fc:	f00a ff06 	bl	800d10c <bmm150_set_sensor_settings>
 8002300:	4603      	mov	r3, r0
 8002302:	77fb      	strb	r3, [r7, #31]
            bmm150_error_codes_print_result("bmm150_set_sensor_settings", rslt);
 8002304:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002308:	4619      	mov	r1, r3
 800230a:	4806      	ldr	r0, [pc, #24]	; (8002324 <set_config+0xa0>)
 800230c:	f00b fe46 	bl	800df9c <bmm150_error_codes_print_result>
        }
    }

    return rslt;
 8002310:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	080153d8 	.word	0x080153d8
 8002320:	080153ec 	.word	0x080153ec
 8002324:	08015404 	.word	0x08015404

08002328 <HAL_GPIO_EXTI_Callback>:

    return reversed;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin) {
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d11c      	bne.n	8002372 <HAL_GPIO_EXTI_Callback+0x4a>
		if(state == 4){state = 5;}
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d102      	bne.n	8002346 <HAL_GPIO_EXTI_Callback+0x1e>
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002342:	2205      	movs	r2, #5
 8002344:	701a      	strb	r2, [r3, #0]
		if(state == 3){state = 4;}
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d102      	bne.n	8002354 <HAL_GPIO_EXTI_Callback+0x2c>
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002350:	2204      	movs	r2, #4
 8002352:	701a      	strb	r2, [r3, #0]
		if(state == 2){state = 3;}
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d102      	bne.n	8002362 <HAL_GPIO_EXTI_Callback+0x3a>
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800235e:	2203      	movs	r2, #3
 8002360:	701a      	strb	r2, [r3, #0]
		if(state == 1){state = 2;}
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d104      	bne.n	8002374 <HAL_GPIO_EXTI_Callback+0x4c>
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800236c:	2202      	movs	r2, #2
 800236e:	701a      	strb	r2, [r3, #0]
 8002370:	e000      	b.n	8002374 <HAL_GPIO_EXTI_Callback+0x4c>
	  } else {
	      __NOP();
 8002372:	bf00      	nop
	  }

	if(GPIO_Pin == IT_ACC_Pin) {
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237a:	d103      	bne.n	8002384 <HAL_GPIO_EXTI_Callback+0x5c>

	 readstart = 1;
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x80>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	e000      	b.n	8002386 <HAL_GPIO_EXTI_Callback+0x5e>
  } else {
      __NOP();
 8002384:	bf00      	nop
  }
  if(GPIO_Pin == IT_MAGN_Pin) {
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800238c:	d103      	bne.n	8002396 <HAL_GPIO_EXTI_Callback+0x6e>
  	 //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

  	 billent = 1;
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <HAL_GPIO_EXTI_Callback+0x84>)
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
    } else {
        __NOP();
    }
}
 8002394:	e000      	b.n	8002398 <HAL_GPIO_EXTI_Callback+0x70>
        __NOP();
 8002396:	bf00      	nop
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	20000009 	.word	0x20000009
 80023a8:	20000008 	.word	0x20000008
 80023ac:	20000a50 	.word	0x20000a50

080023b0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a47      	ldr	r2, [pc, #284]	; (80024d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	f040 8083 	bne.w	80024c8 <HAL_TIM_IC_CaptureCallback+0x118>
	  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80023c2:	2110      	movs	r1, #16
 80023c4:	4845      	ldr	r0, [pc, #276]	; (80024dc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80023c6:	f004 f9ec 	bl	80067a2 <HAL_GPIO_TogglePin>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	7f1b      	ldrb	r3, [r3, #28]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d17a      	bne.n	80024c8 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 80023d2:	4b43      	ldr	r3, [pc, #268]	; (80024e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11a      	bne.n	8002410 <HAL_TIM_IC_CaptureCallback+0x60>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80023da:	2100      	movs	r1, #0
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f007 f9ed 	bl	80097bc <HAL_TIM_ReadCapturedValue>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80023e6:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 80023e8:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a1a      	ldr	r2, [r3, #32]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 020a 	bic.w	r2, r2, #10
 80023fc:	621a      	str	r2, [r3, #32]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0202 	orr.w	r2, r2, #2
 800240c:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				//__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
			}
		}
	  }
}
 800240e:	e05b      	b.n	80024c8 <HAL_TIM_IC_CaptureCallback+0x118>
			else if (Is_First_Captured==1)   // if the first is already captured
 8002410:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d157      	bne.n	80024c8 <HAL_TIM_IC_CaptureCallback+0x118>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8002418:	2100      	movs	r1, #0
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f007 f9ce 	bl	80097bc <HAL_TIM_ReadCapturedValue>
 8002420:	4603      	mov	r3, r0
 8002422:	4a31      	ldr	r2, [pc, #196]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002424:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Val2 > IC_Val1)
 800242e:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d907      	bls.n	800244a <HAL_TIM_IC_CaptureCallback+0x9a>
					Difference = IC_Val2-IC_Val1;
 800243a:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	4a29      	ldr	r2, [pc, #164]	; (80024ec <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e00f      	b.n	800246a <HAL_TIM_IC_CaptureCallback+0xba>
				else if (IC_Val1 > IC_Val2)
 800244a:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d909      	bls.n	800246a <HAL_TIM_IC_CaptureCallback+0xba>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 8002456:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002464:	33ff      	adds	r3, #255	; 0xff
 8002466:	4a21      	ldr	r2, [pc, #132]	; (80024ec <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002468:	6013      	str	r3, [r2, #0]
				Distance = Difference * .34/2;
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_TIM_IC_CaptureCallback+0x13c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe f848 	bl	8000504 <__aeabi_ui2d>
 8002474:	a316      	add	r3, pc, #88	; (adr r3, 80024d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247a:	f7fe f8bd 	bl	80005f8 <__aeabi_dmul>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800248e:	f7fe f9dd 	bl	800084c <__aeabi_ddiv>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f7fe fb85 	bl	8000ba8 <__aeabi_d2uiz>
 800249e:	4603      	mov	r3, r0
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <HAL_TIM_IC_CaptureCallback+0x140>)
 80024a4:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6a1a      	ldr	r2, [r3, #32]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 020a 	bic.w	r2, r2, #10
 80024ba:	621a      	str	r2, [r3, #32]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6a12      	ldr	r2, [r2, #32]
 80024c6:	621a      	str	r2, [r3, #32]
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	5c28f5c3 	.word	0x5c28f5c3
 80024d4:	3fd5c28f 	.word	0x3fd5c28f
 80024d8:	2000068c 	.word	0x2000068c
 80024dc:	40020400 	.word	0x40020400
 80024e0:	20000b54 	.word	0x20000b54
 80024e4:	20000b48 	.word	0x20000b48
 80024e8:	20000b4c 	.word	0x20000b4c
 80024ec:	20000b50 	.word	0x20000b50
 80024f0:	20000b55 	.word	0x20000b55

080024f4 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6 )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a0b      	ldr	r2, [pc, #44]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d10d      	bne.n	8002520 <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
	  if(timerse == 1){timerse =0;}
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d102      	bne.n	8002512 <HAL_TIM_PeriodElapsedCallback+0x1e>
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
	  if(timerse == 0){timerse =1;}
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <HAL_TIM_PeriodElapsedCallback+0x2c>
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
  }
  if(htim == &htim7){

  }
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	20000764 	.word	0x20000764
 8002530:	20000b68 	.word	0x20000b68

08002534 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a06      	ldr	r2, [pc, #24]	; (8002558 <HAL_UART_TxCpltCallback+0x24>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d102      	bne.n	800254a <HAL_UART_TxCpltCallback+0x16>
			telemetria_data_sent = 1;
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_UART_TxCpltCallback+0x28>)
 8002546:	2201      	movs	r2, #1
 8002548:	701a      	strb	r2, [r3, #0]
	}
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000880 	.word	0x20000880
 800255c:	20000b62 	.word	0x20000b62

08002560 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	if(huart ==&huart1){
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a4b      	ldr	r2, [pc, #300]	; (8002698 <HAL_UART_RxCpltCallback+0x138>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d17b      	bne.n	8002668 <HAL_UART_RxCpltCallback+0x108>
		debug_i = __HAL_TIM_GET_COUNTER(&htim6);
 8002570:	4b4a      	ldr	r3, [pc, #296]	; (800269c <HAL_UART_RxCpltCallback+0x13c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	461a      	mov	r2, r3
 8002578:	4b49      	ldr	r3, [pc, #292]	; (80026a0 <HAL_UART_RxCpltCallback+0x140>)
 800257a:	601a      	str	r2, [r3, #0]
		if(debug_i < 100){
 800257c:	4b48      	ldr	r3, [pc, #288]	; (80026a0 <HAL_UART_RxCpltCallback+0x140>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b63      	cmp	r3, #99	; 0x63
 8002582:	dc0d      	bgt.n	80025a0 <HAL_UART_RxCpltCallback+0x40>
			CRSF_debug[CRSF_i] = UART1_rxBuffer[0];
 8002584:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <HAL_UART_RxCpltCallback+0x144>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <HAL_UART_RxCpltCallback+0x148>)
 800258c:	7819      	ldrb	r1, [r3, #0]
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002590:	5499      	strb	r1, [r3, r2]
			CRSF_i++;
 8002592:	4b44      	ldr	r3, [pc, #272]	; (80026a4 <HAL_UART_RxCpltCallback+0x144>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b42      	ldr	r3, [pc, #264]	; (80026a4 <HAL_UART_RxCpltCallback+0x144>)
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	e05f      	b.n	8002660 <HAL_UART_RxCpltCallback+0x100>
		}
		else{
			if(CRSF_debug[2] == 0x16){
 80025a0:	4b42      	ldr	r3, [pc, #264]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025a2:	789b      	ldrb	r3, [r3, #2]
 80025a4:	2b16      	cmp	r3, #22
 80025a6:	d154      	bne.n	8002652 <HAL_UART_RxCpltCallback+0xf2>
				RX_roll = (((uint16_t)(CRSF_debug[4] & 0b00000111)) << 8) + (uint16_t)(CRSF_debug[3]);
 80025a8:	4b40      	ldr	r3, [pc, #256]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025aa:	791b      	ldrb	r3, [r3, #4]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025b8:	78db      	ldrb	r3, [r3, #3]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4413      	add	r3, r2
 80025be:	b29a      	uxth	r2, r3
 80025c0:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <HAL_UART_RxCpltCallback+0x150>)
 80025c2:	801a      	strh	r2, [r3, #0]
				RX_pitch = (((uint16_t)(CRSF_debug[5] & 0b00111111)) << 5) + (((uint16_t)(CRSF_debug[4] & 0b11111000)) >> 3);
 80025c4:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025c6:	795b      	ldrb	r3, [r3, #5]
 80025c8:	015b      	lsls	r3, r3, #5
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	4b36      	ldr	r3, [pc, #216]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025d4:	791b      	ldrb	r3, [r3, #4]
 80025d6:	08db      	lsrs	r3, r3, #3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	b29b      	uxth	r3, r3
 80025dc:	4413      	add	r3, r2
 80025de:	b29a      	uxth	r2, r3
 80025e0:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_UART_RxCpltCallback+0x154>)
 80025e2:	801a      	strh	r2, [r3, #0]
				RX_throttle = (((uint16_t)(CRSF_debug[7] & 0b00000001)) << 10)+ (((uint16_t)(CRSF_debug[6])) << 2) + (((uint16_t)(CRSF_debug[5] & 0b11000000)) >> 6);
 80025e4:	4b31      	ldr	r3, [pc, #196]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025e6:	79db      	ldrb	r3, [r3, #7]
 80025e8:	029b      	lsls	r3, r3, #10
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025f4:	799b      	ldrb	r3, [r3, #6]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002602:	795b      	ldrb	r3, [r3, #5]
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	b2db      	uxtb	r3, r3
 8002608:	b29b      	uxth	r3, r3
 800260a:	4413      	add	r3, r2
 800260c:	b29a      	uxth	r2, r3
 800260e:	4b2a      	ldr	r3, [pc, #168]	; (80026b8 <HAL_UART_RxCpltCallback+0x158>)
 8002610:	801a      	strh	r2, [r3, #0]
				RX_yaw = (((uint16_t)(CRSF_debug[8] & 0b00001111)) << 7) + (((uint16_t)(CRSF_debug[7] & 0b11111110)) >> 1);
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002614:	7a1b      	ldrb	r3, [r3, #8]
 8002616:	01db      	lsls	r3, r3, #7
 8002618:	b29b      	uxth	r3, r3
 800261a:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 800261e:	b29a      	uxth	r2, r3
 8002620:	4b22      	ldr	r3, [pc, #136]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002622:	79db      	ldrb	r3, [r3, #7]
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	b29b      	uxth	r3, r3
 800262a:	4413      	add	r3, r2
 800262c:	b29a      	uxth	r2, r3
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <HAL_UART_RxCpltCallback+0x15c>)
 8002630:	801a      	strh	r2, [r3, #0]
				RX_arm = (((uint16_t)(CRSF_debug[9] & 0b01111111)) << 4) + (((uint16_t)(CRSF_debug[8] & 0b11110000)) >> 4);
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002634:	7a5b      	ldrb	r3, [r3, #9]
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	b29b      	uxth	r3, r3
 800263a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800263e:	b29a      	uxth	r2, r3
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002642:	7a1b      	ldrb	r3, [r3, #8]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	b2db      	uxtb	r3, r3
 8002648:	b29b      	uxth	r3, r3
 800264a:	4413      	add	r3, r2
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <HAL_UART_RxCpltCallback+0x160>)
 8002650:	801a      	strh	r2, [r3, #0]
			}
			CRSF_debug[0] = UART1_rxBuffer[0];
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_UART_RxCpltCallback+0x148>)
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002658:	701a      	strb	r2, [r3, #0]
			CRSF_i = 1;
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_UART_RxCpltCallback+0x144>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
		}
		htim6.Instance->CNT = 0;
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <HAL_UART_RxCpltCallback+0x13c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2200      	movs	r2, #0
 8002666:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(huart == &huart2){
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <HAL_UART_RxCpltCallback+0x164>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d10e      	bne.n	800268e <HAL_UART_RxCpltCallback+0x12e>
		if(uart_telemetria == 1){
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_UART_RxCpltCallback+0x168>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d105      	bne.n	8002684 <HAL_UART_RxCpltCallback+0x124>
			HAL_UART_Receive_IT(&huart2, telem, 11);
 8002678:	220b      	movs	r2, #11
 800267a:	4914      	ldr	r1, [pc, #80]	; (80026cc <HAL_UART_RxCpltCallback+0x16c>)
 800267c:	4811      	ldr	r0, [pc, #68]	; (80026c4 <HAL_UART_RxCpltCallback+0x164>)
 800267e:	f007 feed 	bl	800a45c <HAL_UART_Receive_IT>
		}
		else
			HAL_UART_Receive_IT(&huart2, telem, 11);
	}
}
 8002682:	e004      	b.n	800268e <HAL_UART_RxCpltCallback+0x12e>
			HAL_UART_Receive_IT(&huart2, telem, 11);
 8002684:	220b      	movs	r2, #11
 8002686:	4911      	ldr	r1, [pc, #68]	; (80026cc <HAL_UART_RxCpltCallback+0x16c>)
 8002688:	480e      	ldr	r0, [pc, #56]	; (80026c4 <HAL_UART_RxCpltCallback+0x164>)
 800268a:	f007 fee7 	bl	800a45c <HAL_UART_Receive_IT>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2000083c 	.word	0x2000083c
 800269c:	20000764 	.word	0x20000764
 80026a0:	20000b64 	.word	0x20000b64
 80026a4:	20002b2c 	.word	0x20002b2c
 80026a8:	20002b30 	.word	0x20002b30
 80026ac:	20002aec 	.word	0x20002aec
 80026b0:	20002b32 	.word	0x20002b32
 80026b4:	20002b34 	.word	0x20002b34
 80026b8:	20002b38 	.word	0x20002b38
 80026bc:	20002b36 	.word	0x20002b36
 80026c0:	20002b3a 	.word	0x20002b3a
 80026c4:	20000880 	.word	0x20000880
 80026c8:	20000b56 	.word	0x20000b56
 80026cc:	20000000 	.word	0x20000000

080026d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80026d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026d4:	b094      	sub	sp, #80	; 0x50
 80026d6:	af04      	add	r7, sp, #16
 80026d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
//	uint8_t telemetria[8];
	uint8_t telemetria_data[40] = "HELLO WORLD \r\n";
 80026da:	4b6c      	ldr	r3, [pc, #432]	; (800288c <StartDefaultTask+0x1bc>)
 80026dc:	f107 0418 	add.w	r4, r7, #24
 80026e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026e2:	c407      	stmia	r4!, {r0, r1, r2}
 80026e4:	8023      	strh	r3, [r4, #0]
 80026e6:	3402      	adds	r4, #2
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	7023      	strb	r3, [r4, #0]
 80026ec:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
 80026fc:	615a      	str	r2, [r3, #20]
 80026fe:	761a      	strb	r2, [r3, #24]


  /* Infinite loop */
  for(;;)
  {
	  if(uart_telemetria == 1){
 8002700:	4b63      	ldr	r3, [pc, #396]	; (8002890 <StartDefaultTask+0x1c0>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	f040 8086 	bne.w	8002816 <StartDefaultTask+0x146>
		  if(telem[0] == 'P'){
 800270a:	4b62      	ldr	r3, [pc, #392]	; (8002894 <StartDefaultTask+0x1c4>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b50      	cmp	r3, #80	; 0x50
 8002710:	d13e      	bne.n	8002790 <StartDefaultTask+0xc0>
			  telem_P = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 8002712:	4b60      	ldr	r3, [pc, #384]	; (8002894 <StartDefaultTask+0x1c4>)
 8002714:	785b      	ldrb	r3, [r3, #1]
 8002716:	461a      	mov	r2, r3
 8002718:	4b5f      	ldr	r3, [pc, #380]	; (8002898 <StartDefaultTask+0x1c8>)
 800271a:	fb03 f202 	mul.w	r2, r3, r2
 800271e:	4b5d      	ldr	r3, [pc, #372]	; (8002894 <StartDefaultTask+0x1c4>)
 8002720:	789b      	ldrb	r3, [r3, #2]
 8002722:	4619      	mov	r1, r3
 8002724:	4b5d      	ldr	r3, [pc, #372]	; (800289c <StartDefaultTask+0x1cc>)
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	441a      	add	r2, r3
 800272c:	4b59      	ldr	r3, [pc, #356]	; (8002894 <StartDefaultTask+0x1c4>)
 800272e:	78db      	ldrb	r3, [r3, #3]
 8002730:	4619      	mov	r1, r3
 8002732:	f242 7310 	movw	r3, #10000	; 0x2710
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	441a      	add	r2, r3
 800273c:	4b55      	ldr	r3, [pc, #340]	; (8002894 <StartDefaultTask+0x1c4>)
 800273e:	791b      	ldrb	r3, [r3, #4]
 8002740:	4619      	mov	r1, r3
 8002742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	441a      	add	r2, r3
 800274c:	4b51      	ldr	r3, [pc, #324]	; (8002894 <StartDefaultTask+0x1c4>)
 800274e:	795b      	ldrb	r3, [r3, #5]
 8002750:	4619      	mov	r1, r3
 8002752:	2364      	movs	r3, #100	; 0x64
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	441a      	add	r2, r3
 800275a:	4b4e      	ldr	r3, [pc, #312]	; (8002894 <StartDefaultTask+0x1c4>)
 800275c:	799b      	ldrb	r3, [r3, #6]
 800275e:	4619      	mov	r1, r3
 8002760:	460b      	mov	r3, r1
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	4a4a      	ldr	r2, [pc, #296]	; (8002894 <StartDefaultTask+0x1c4>)
 800276c:	79d2      	ldrb	r2, [r2, #7]
 800276e:	441a      	add	r2, r3
 8002770:	4b4b      	ldr	r3, [pc, #300]	; (80028a0 <StartDefaultTask+0x1d0>)
 8002772:	4413      	add	r3, r2
 8002774:	ee07 3a90 	vmov	s15, r3
 8002778:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800277c:	eddf 6a49 	vldr	s13, [pc, #292]	; 80028a4 <StartDefaultTask+0x1d4>
 8002780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002784:	4b48      	ldr	r3, [pc, #288]	; (80028a8 <StartDefaultTask+0x1d8>)
 8002786:	edc3 7a00 	vstr	s15, [r3]
			  new_P = 1;
 800278a:	4b48      	ldr	r3, [pc, #288]	; (80028ac <StartDefaultTask+0x1dc>)
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
		  }
		  if(telem[0] == 'D'){
 8002790:	4b40      	ldr	r3, [pc, #256]	; (8002894 <StartDefaultTask+0x1c4>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b44      	cmp	r3, #68	; 0x44
 8002796:	d13e      	bne.n	8002816 <StartDefaultTask+0x146>
			  telem_D = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 8002798:	4b3e      	ldr	r3, [pc, #248]	; (8002894 <StartDefaultTask+0x1c4>)
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	461a      	mov	r2, r3
 800279e:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <StartDefaultTask+0x1c8>)
 80027a0:	fb03 f202 	mul.w	r2, r3, r2
 80027a4:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <StartDefaultTask+0x1c4>)
 80027a6:	789b      	ldrb	r3, [r3, #2]
 80027a8:	4619      	mov	r1, r3
 80027aa:	4b3c      	ldr	r3, [pc, #240]	; (800289c <StartDefaultTask+0x1cc>)
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	441a      	add	r2, r3
 80027b2:	4b38      	ldr	r3, [pc, #224]	; (8002894 <StartDefaultTask+0x1c4>)
 80027b4:	78db      	ldrb	r3, [r3, #3]
 80027b6:	4619      	mov	r1, r3
 80027b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	441a      	add	r2, r3
 80027c2:	4b34      	ldr	r3, [pc, #208]	; (8002894 <StartDefaultTask+0x1c4>)
 80027c4:	791b      	ldrb	r3, [r3, #4]
 80027c6:	4619      	mov	r1, r3
 80027c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	441a      	add	r2, r3
 80027d2:	4b30      	ldr	r3, [pc, #192]	; (8002894 <StartDefaultTask+0x1c4>)
 80027d4:	795b      	ldrb	r3, [r3, #5]
 80027d6:	4619      	mov	r1, r3
 80027d8:	2364      	movs	r3, #100	; 0x64
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	441a      	add	r2, r3
 80027e0:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <StartDefaultTask+0x1c4>)
 80027e2:	799b      	ldrb	r3, [r3, #6]
 80027e4:	4619      	mov	r1, r3
 80027e6:	460b      	mov	r3, r1
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	4a28      	ldr	r2, [pc, #160]	; (8002894 <StartDefaultTask+0x1c4>)
 80027f2:	79d2      	ldrb	r2, [r2, #7]
 80027f4:	441a      	add	r2, r3
 80027f6:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <StartDefaultTask+0x1d0>)
 80027f8:	4413      	add	r3, r2
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002802:	eddf 6a28 	vldr	s13, [pc, #160]	; 80028a4 <StartDefaultTask+0x1d4>
 8002806:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800280a:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <StartDefaultTask+0x1e0>)
 800280c:	edc3 7a00 	vstr	s15, [r3]
			  new_D = 1;
 8002810:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <StartDefaultTask+0x1e4>)
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if (xQueueReceive(telemetria_Queue, (void*)&telemetria_send, 0) == pdTRUE){
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <StartDefaultTask+0x1e8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f107 010c 	add.w	r1, r7, #12
 800281e:	2200      	movs	r2, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f00b fed3 	bl	800e5cc <xQueueReceive>
 8002826:	4603      	mov	r3, r0
 8002828:	2b01      	cmp	r3, #1
 800282a:	d12a      	bne.n	8002882 <StartDefaultTask+0x1b2>
//		  sprintf((char*)telemetria_data, "Raw:0,0,0,0,0,0,%d,%d,%d\r\n", (int)((drone_angle[0])*10), (int)((drone_angle[1])*10), (int)(drone_angle[2])*10); //%5.2f
	//	  sprintf((char*)telemetria_data, "Yaw: 115.47\r\n");
		  HAL_UART_Transmit (&huart2, telemetria_data, sizeof (telemetria_data), 200);
*/

		  if(telemetria_data_sent == 1){
 800282c:	4b23      	ldr	r3, [pc, #140]	; (80028bc <StartDefaultTask+0x1ec>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d126      	bne.n	8002882 <StartDefaultTask+0x1b2>
		  			  sprintf((char*)telemetria_data, "%4.3f,%4.3f,%4.3f\r\n", telemetria_send[0], telemetria_send[1], telemetria_send[2]); //%5.2f
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd fe86 	bl	8000548 <__aeabi_f2d>
 800283c:	4680      	mov	r8, r0
 800283e:	4689      	mov	r9, r1
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fe80 	bl	8000548 <__aeabi_f2d>
 8002848:	4604      	mov	r4, r0
 800284a:	460d      	mov	r5, r1
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe7a 	bl	8000548 <__aeabi_f2d>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	f107 0018 	add.w	r0, r7, #24
 800285c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002860:	e9cd 4500 	strd	r4, r5, [sp]
 8002864:	4642      	mov	r2, r8
 8002866:	464b      	mov	r3, r9
 8002868:	4915      	ldr	r1, [pc, #84]	; (80028c0 <StartDefaultTask+0x1f0>)
 800286a:	f00e f8a1 	bl	80109b0 <siprintf>
//		  			  sprintf((char*)telemetria_data, "%2.2f, %2.2f, %2.2f, %3.2f, %3.2f, %3.2f, %4.1f, %4.1f, %4.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f\r\n", telemetria_send[0], telemetria_send[1], telemetria_send[2], telemetria_send[3], telemetria_send[4], telemetria_send[5], telemetria_send[6], telemetria_send[7], telemetria_send[8], telemetria_send[9], telemetria_send[10], telemetria_send[11], telemetria_send[12],telemetria_send[13], telemetria_send[14], telemetria_send[15], telemetria_send[16], telemetria_send[17], telemetria_send[18]); //%5.2f
		  			  HAL_UART_Transmit_IT(&huart2, telemetria_data, sizeof (telemetria_data));
 800286e:	f107 0318 	add.w	r3, r7, #24
 8002872:	2228      	movs	r2, #40	; 0x28
 8002874:	4619      	mov	r1, r3
 8002876:	4813      	ldr	r0, [pc, #76]	; (80028c4 <StartDefaultTask+0x1f4>)
 8002878:	f007 fdab 	bl	800a3d2 <HAL_UART_Transmit_IT>
		  			  telemetria_data_sent = 0;
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <StartDefaultTask+0x1ec>)
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
		  		  }
	  }


	  osDelay(10);
 8002882:	200a      	movs	r0, #10
 8002884:	f00b fc19 	bl	800e0ba <osDelay>
	  if(uart_telemetria == 1){
 8002888:	e73a      	b.n	8002700 <StartDefaultTask+0x30>
 800288a:	bf00      	nop
 800288c:	08015434 	.word	0x08015434
 8002890:	20000b56 	.word	0x20000b56
 8002894:	20000000 	.word	0x20000000
 8002898:	000f4240 	.word	0x000f4240
 800289c:	000186a0 	.word	0x000186a0
 80028a0:	fcd232b0 	.word	0xfcd232b0
 80028a4:	47c35000 	.word	0x47c35000
 80028a8:	20000b58 	.word	0x20000b58
 80028ac:	20000b60 	.word	0x20000b60
 80028b0:	20000b5c 	.word	0x20000b5c
 80028b4:	20000b61 	.word	0x20000b61
 80028b8:	20002b54 	.word	0x20002b54
 80028bc:	20000b62 	.word	0x20000b62
 80028c0:	08015420 	.word	0x08015420
 80028c4:	20000880 	.word	0x20000880

080028c8 <Start_Data_Reading>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Data_Reading */
void Start_Data_Reading(void const * argument)
{
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ca:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 80028ce:	af06      	add	r7, sp, #24
 80028d0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80028d4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80028d8:	6018      	str	r0, [r3, #0]
	//Magneto 1.2 calibration
//	FusionVector magneto_offset = {-10.254290, 1.8038, -4.628919};
//	FusionMatrix magneto_transform = {1.030904, 0.011754, -0.008844, 0.011754, 1.040290, -0.000902, -0.008844, -0.000902, 1.008504};

	//Magneto 1.2 calibration, kinda works
	FusionVector magneto_offset = {-10.254290, 1.8038, -4.628919};
 80028da:	4a6a      	ldr	r2, [pc, #424]	; (8002a84 <Start_Data_Reading+0x1bc>)
 80028dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80028e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionMatrix magneto_transform = {1.030904, 0.011754, -0.008844, 0.011754, 1.040290, -0.000902, -0.008844, -0.000902, 1.008504};
 80028e6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80028ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028ee:	4a66      	ldr	r2, [pc, #408]	; (8002a88 <Start_Data_Reading+0x1c0>)
 80028f0:	461c      	mov	r4, r3
 80028f2:	4615      	mov	r5, r2
 80028f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028fc:	682b      	ldr	r3, [r5, #0]
 80028fe:	6023      	str	r3, [r4, #0]
//	FusionVector magneto_offset = {0, 0, 0};
//	FusionMatrix magneto_transform = {1,0,0,0,1,0,0,0,1};
	FusionVector magneto_data;

	//pitch angle velocity control params
	float err_pitch = 0;
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	float errd_pitch = 0;
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	float prev_err_pitch = 0;
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	float control_pitch = 0;
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	float P_pitch = 20;
 8002920:	4b5a      	ldr	r3, [pc, #360]	; (8002a8c <Start_Data_Reading+0x1c4>)
 8002922:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	float D_pitch = 0.1;
 8002926:	4b5a      	ldr	r3, [pc, #360]	; (8002a90 <Start_Data_Reading+0x1c8>)
 8002928:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

	//pitch angle control params
	float err_angle_pitch = 0;
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	float errd_angle_pitch = 0;
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	float prev_err_angle_pitch = 0;
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	float angle_control_pitch = 0;
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	float P_angle_pitch = 0.04;
 800294c:	4b51      	ldr	r3, [pc, #324]	; (8002a94 <Start_Data_Reading+0x1cc>)
 800294e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	float D_angle_pitch = 0.0001;//0.005;
 8002952:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <Start_Data_Reading+0x1d0>)
 8002954:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	//roll angle velocity control params
	float err_roll = 0;
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	float errd_roll = 0;
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	float prev_err_roll = 0;
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	float control_roll = 0;
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	float P_roll = 5;
 8002978:	4b48      	ldr	r3, [pc, #288]	; (8002a9c <Start_Data_Reading+0x1d4>)
 800297a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	float D_roll = 0.1;//0.4
 800297e:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <Start_Data_Reading+0x1c8>)
 8002980:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

	//roll angle control params
	float P_angle_roll = 0.2;
 8002984:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <Start_Data_Reading+0x1d8>)
 8002986:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	float D_angle_roll = 0.0001;//0.005;
 800298a:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <Start_Data_Reading+0x1d0>)
 800298c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	float err_angle_roll = 0;
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	float errd_angle_roll = 0;
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	float prev_err_angle_roll = 0;
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	float angle_control_roll = 0;
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

	//yaw angle velocity control params
	float err_yaw = 0;
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	float errd_yaw = 0;
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	float prev_err_yaw = 0;
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	float control_yaw = 0;
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	float P_yaw = 20;
 80029d0:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <Start_Data_Reading+0x1c4>)
 80029d2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	float D_yaw = 0.1;
 80029d6:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <Start_Data_Reading+0x1c8>)
 80029d8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

	//yaw angle control params
	float P_angle_yaw = 0.8;//0.04;
 80029dc:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <Start_Data_Reading+0x1dc>)
 80029de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	float D_angle_yaw = 0.000;//0.005;
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	float err_angle_yaw = 0;
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	float errd_angle_yaw = 0;
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	float prev_err_angle_yaw = 0;
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	float angle_control_yaw = 0;
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

	float yaw_angle = 0;
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	float prev_euler_yaw = 0;
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	int n = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8



	//imu init function
	BMI088_Init(&imu, &hspi2, CS_ACC_GPIO_Port, CS_ACC_Pin, CS_GYRO_GPIO_Port, CS_GYRO_Pin);
 8002a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <Start_Data_Reading+0x1e0>)
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a2e:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <Start_Data_Reading+0x1e4>)
 8002a30:	491f      	ldr	r1, [pc, #124]	; (8002ab0 <Start_Data_Reading+0x1e8>)
 8002a32:	4820      	ldr	r0, [pc, #128]	; (8002ab4 <Start_Data_Reading+0x1ec>)
 8002a34:	f001 fcee 	bl	8004414 <BMI088_Init>


	//bmp388 pressure sensor init
	bmp._hi2c = &hi2c2;
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a3a:	4a20      	ldr	r2, [pc, #128]	; (8002abc <Start_Data_Reading+0x1f4>)
 8002a3c:	601a      	str	r2, [r3, #0]


	BMP388_SetTempOS(&bmp, 0);
 8002a3e:	2100      	movs	r1, #0
 8002a40:	481d      	ldr	r0, [pc, #116]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a42:	f002 f858 	bl	8004af6 <BMP388_SetTempOS>
	HAL_Delay(10);
 8002a46:	200a      	movs	r0, #10
 8002a48:	f002 fd5c 	bl	8005504 <HAL_Delay>
	BMP388_SetPressOS(&bmp, 0x03); //0 volt, de adatlap alapján 8x-nek megfelelő 0x03 beírva
 8002a4c:	2103      	movs	r1, #3
 8002a4e:	481a      	ldr	r0, [pc, #104]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a50:	f002 f871 	bl	8004b36 <BMP388_SetPressOS>
	HAL_Delay(10);
 8002a54:	200a      	movs	r0, #10
 8002a56:	f002 fd55 	bl	8005504 <HAL_Delay>
	BMP388_SetIIRFilterCoeff(&bmp, 2);
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	4816      	ldr	r0, [pc, #88]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a5e:	f002 f889 	bl	8004b74 <BMP388_SetIIRFilterCoeff>
	HAL_Delay(10);
 8002a62:	200a      	movs	r0, #10
 8002a64:	f002 fd4e 	bl	8005504 <HAL_Delay>
	BMP388_SetOutputDataRate(&bmp, 0x02);
 8002a68:	2102      	movs	r1, #2
 8002a6a:	4813      	ldr	r0, [pc, #76]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a6c:	f002 f899 	bl	8004ba2 <BMP388_SetOutputDataRate>
	HAL_Delay(10);
 8002a70:	200a      	movs	r0, #10
 8002a72:	f002 fd47 	bl	8005504 <HAL_Delay>
	BMP388_Init(&bmp);
 8002a76:	4810      	ldr	r0, [pc, #64]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a78:	f001 ffc2 	bl	8004a00 <BMP388_Init>

	for(int i_init = 0; i_init<2000; i_init++ ){
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a82:	e078      	b.n	8002b76 <Start_Data_Reading+0x2ae>
 8002a84:	08015490 	.word	0x08015490
 8002a88:	0801549c 	.word	0x0801549c
 8002a8c:	41a00000 	.word	0x41a00000
 8002a90:	3dcccccd 	.word	0x3dcccccd
 8002a94:	3d23d70a 	.word	0x3d23d70a
 8002a98:	38d1b717 	.word	0x38d1b717
 8002a9c:	40a00000 	.word	0x40a00000
 8002aa0:	3e4ccccd 	.word	0x3e4ccccd
 8002aa4:	3f4ccccd 	.word	0x3f4ccccd
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	20000634 	.word	0x20000634
 8002ab4:	200009b8 	.word	0x200009b8
 8002ab8:	20000a08 	.word	0x20000a08
 8002abc:	2000058c 	.word	0x2000058c
	  BMP388_ReadRawPressTempTime(&bmp, &raw_press, &raw_temp, &raw_time);
 8002ac0:	4bc0      	ldr	r3, [pc, #768]	; (8002dc4 <Start_Data_Reading+0x4fc>)
 8002ac2:	4ac1      	ldr	r2, [pc, #772]	; (8002dc8 <Start_Data_Reading+0x500>)
 8002ac4:	49c1      	ldr	r1, [pc, #772]	; (8002dcc <Start_Data_Reading+0x504>)
 8002ac6:	48c2      	ldr	r0, [pc, #776]	; (8002dd0 <Start_Data_Reading+0x508>)
 8002ac8:	f002 f880 	bl	8004bcc <BMP388_ReadRawPressTempTime>
	  BMP388_CompensateRawPressTemp(&bmp, raw_press, raw_temp, &press, &temp);
 8002acc:	4bbf      	ldr	r3, [pc, #764]	; (8002dcc <Start_Data_Reading+0x504>)
 8002ace:	6819      	ldr	r1, [r3, #0]
 8002ad0:	4bbd      	ldr	r3, [pc, #756]	; (8002dc8 <Start_Data_Reading+0x500>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4bbf      	ldr	r3, [pc, #764]	; (8002dd4 <Start_Data_Reading+0x50c>)
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	4bbf      	ldr	r3, [pc, #764]	; (8002dd8 <Start_Data_Reading+0x510>)
 8002ada:	48bd      	ldr	r0, [pc, #756]	; (8002dd0 <Start_Data_Reading+0x508>)
 8002adc:	f002 f8a2 	bl	8004c24 <BMP388_CompensateRawPressTemp>
	  h0 += BMP388_FindAltitude(ground_pressure, press);
 8002ae0:	4bbd      	ldr	r3, [pc, #756]	; (8002dd8 <Start_Data_Reading+0x510>)
 8002ae2:	edd3 7a00 	vldr	s15, [r3]
 8002ae6:	eef0 0a67 	vmov.f32	s1, s15
 8002aea:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8002ddc <Start_Data_Reading+0x514>
 8002aee:	f002 f8bf 	bl	8004c70 <BMP388_FindAltitude>
 8002af2:	eeb0 7a40 	vmov.f32	s14, s0
 8002af6:	4bba      	ldr	r3, [pc, #744]	; (8002de0 <Start_Data_Reading+0x518>)
 8002af8:	edd3 7a00 	vldr	s15, [r3]
 8002afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b00:	4bb7      	ldr	r3, [pc, #732]	; (8002de0 <Start_Data_Reading+0x518>)
 8002b02:	edc3 7a00 	vstr	s15, [r3]
	  BMI088_ReadGyroscope(&imu);
 8002b06:	48b7      	ldr	r0, [pc, #732]	; (8002de4 <Start_Data_Reading+0x51c>)
 8002b08:	f001 ff02 	bl	8004910 <BMI088_ReadGyroscope>
	  gyro_offset_x_calc += imu.gyr_rps[0];
 8002b0c:	4bb5      	ldr	r3, [pc, #724]	; (8002de4 <Start_Data_Reading+0x51c>)
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fd fd19 	bl	8000548 <__aeabi_f2d>
 8002b16:	4bb4      	ldr	r3, [pc, #720]	; (8002de8 <Start_Data_Reading+0x520>)
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	f7fd fbb6 	bl	800028c <__adddf3>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	49b0      	ldr	r1, [pc, #704]	; (8002de8 <Start_Data_Reading+0x520>)
 8002b26:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_y_calc += imu.gyr_rps[1];
 8002b2a:	4bae      	ldr	r3, [pc, #696]	; (8002de4 <Start_Data_Reading+0x51c>)
 8002b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fd0a 	bl	8000548 <__aeabi_f2d>
 8002b34:	4bad      	ldr	r3, [pc, #692]	; (8002dec <Start_Data_Reading+0x524>)
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	f7fd fba7 	bl	800028c <__adddf3>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	49aa      	ldr	r1, [pc, #680]	; (8002dec <Start_Data_Reading+0x524>)
 8002b44:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_z_calc += imu.gyr_rps[2];
 8002b48:	4ba6      	ldr	r3, [pc, #664]	; (8002de4 <Start_Data_Reading+0x51c>)
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fcfb 	bl	8000548 <__aeabi_f2d>
 8002b52:	4ba7      	ldr	r3, [pc, #668]	; (8002df0 <Start_Data_Reading+0x528>)
 8002b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b58:	f7fd fb98 	bl	800028c <__adddf3>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	49a3      	ldr	r1, [pc, #652]	; (8002df0 <Start_Data_Reading+0x528>)
 8002b62:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_Delay(1);
 8002b66:	2001      	movs	r0, #1
 8002b68:	f002 fccc 	bl	8005504 <HAL_Delay>
	for(int i_init = 0; i_init<2000; i_init++ ){
 8002b6c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002b70:	3301      	adds	r3, #1
 8002b72:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b76:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002b7a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002b7e:	db9f      	blt.n	8002ac0 <Start_Data_Reading+0x1f8>
	}
	h0 /= 2000;
 8002b80:	4b97      	ldr	r3, [pc, #604]	; (8002de0 <Start_Data_Reading+0x518>)
 8002b82:	ed93 7a00 	vldr	s14, [r3]
 8002b86:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8002df4 <Start_Data_Reading+0x52c>
 8002b8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b8e:	4b94      	ldr	r3, [pc, #592]	; (8002de0 <Start_Data_Reading+0x518>)
 8002b90:	edc3 7a00 	vstr	s15, [r3]
	gyro_offset_x = gyro_offset_x_calc/2000;
 8002b94:	4b94      	ldr	r3, [pc, #592]	; (8002de8 <Start_Data_Reading+0x520>)
 8002b96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	4b96      	ldr	r3, [pc, #600]	; (8002df8 <Start_Data_Reading+0x530>)
 8002ba0:	f7fd fe54 	bl	800084c <__aeabi_ddiv>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4994      	ldr	r1, [pc, #592]	; (8002dfc <Start_Data_Reading+0x534>)
 8002baa:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_y = gyro_offset_y_calc/2000;
 8002bae:	4b8f      	ldr	r3, [pc, #572]	; (8002dec <Start_Data_Reading+0x524>)
 8002bb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	4b8f      	ldr	r3, [pc, #572]	; (8002df8 <Start_Data_Reading+0x530>)
 8002bba:	f7fd fe47 	bl	800084c <__aeabi_ddiv>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	498f      	ldr	r1, [pc, #572]	; (8002e00 <Start_Data_Reading+0x538>)
 8002bc4:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_z = gyro_offset_z_calc/2000;
 8002bc8:	4b89      	ldr	r3, [pc, #548]	; (8002df0 <Start_Data_Reading+0x528>)
 8002bca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	4b89      	ldr	r3, [pc, #548]	; (8002df8 <Start_Data_Reading+0x530>)
 8002bd4:	f7fd fe3a 	bl	800084c <__aeabi_ddiv>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4989      	ldr	r1, [pc, #548]	; (8002e04 <Start_Data_Reading+0x53c>)
 8002bde:	e9c1 2300 	strd	r2, r3, [r1]
	struct bmm150_settings settings;

	/* Status of api are returned to this variable */
	int8_t rslt;

	rslt = bmm150_interface_selection(&dev);
 8002be2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002be6:	4618      	mov	r0, r3
 8002be8:	f00b f992 	bl	800df10 <bmm150_interface_selection>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	bmm150_error_codes_print_result("bmm150_interface_selection", rslt);
 8002bf2:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4883      	ldr	r0, [pc, #524]	; (8002e08 <Start_Data_Reading+0x540>)
 8002bfa:	f00b f9cf 	bl	800df9c <bmm150_error_codes_print_result>

	if (rslt == BMM150_OK) {
 8002bfe:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d11f      	bne.n	8002c46 <Start_Data_Reading+0x37e>
	        rslt = bmm150_init(&dev);
 8002c06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f00a f903 	bl	800ce16 <bmm150_init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	        bmm150_error_codes_print_result("bmm150_init", rslt);
 8002c16:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	487b      	ldr	r0, [pc, #492]	; (8002e0c <Start_Data_Reading+0x544>)
 8002c1e:	f00b f9bd 	bl	800df9c <bmm150_error_codes_print_result>

	        if (rslt == BMM150_OK) {
 8002c22:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10d      	bne.n	8002c46 <Start_Data_Reading+0x37e>
	            rslt = set_config(&dev);
 8002c2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fb28 	bl	8002284 <set_config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	            bmm150_error_codes_print_result("set_config", rslt);
 8002c3a:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4873      	ldr	r0, [pc, #460]	; (8002e10 <Start_Data_Reading+0x548>)
 8002c42:	f00b f9ab 	bl	800df9c <bmm150_error_codes_print_result>
	uint8_t transmit_data[40];
	float telemetria_float[3];



	q.SEq_1=1;
 8002c46:	4b73      	ldr	r3, [pc, #460]	; (8002e14 <Start_Data_Reading+0x54c>)
 8002c48:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c4c:	601a      	str	r2, [r3, #0]
	q.SEq_2=0;
 8002c4e:	4b71      	ldr	r3, [pc, #452]	; (8002e14 <Start_Data_Reading+0x54c>)
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	605a      	str	r2, [r3, #4]
	q.SEq_3=0;
 8002c56:	4b6f      	ldr	r3, [pc, #444]	; (8002e14 <Start_Data_Reading+0x54c>)
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
	q.SEq_4=0;
 8002c5e:	4b6d      	ldr	r3, [pc, #436]	; (8002e14 <Start_Data_Reading+0x54c>)
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]

	w.w_bx=0;
 8002c66:	4b6c      	ldr	r3, [pc, #432]	; (8002e18 <Start_Data_Reading+0x550>)
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
	w.w_by=0;
 8002c6e:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <Start_Data_Reading+0x550>)
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	605a      	str	r2, [r3, #4]
	w.w_bz=0;
 8002c76:	4b68      	ldr	r3, [pc, #416]	; (8002e18 <Start_Data_Reading+0x550>)
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
//	P_prev.a32 = 0;
//	P_prev.a33 = 0;
//	meas.a11=0;
//	meas.a21=0;

	HAL_TIM_Base_Start_IT(&htim6);
 8002c7e:	4867      	ldr	r0, [pc, #412]	; (8002e1c <Start_Data_Reading+0x554>)
 8002c80:	f006 f840 	bl	8008d04 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002c84:	4866      	ldr	r0, [pc, #408]	; (8002e20 <Start_Data_Reading+0x558>)
 8002c86:	f006 f83d 	bl	8008d04 <HAL_TIM_Base_Start_IT>
	FusionAhrsInitialise(&ahrs);
 8002c8a:	4866      	ldr	r0, [pc, #408]	; (8002e24 <Start_Data_Reading+0x55c>)
 8002c8c:	f009 f942 	bl	800bf14 <FusionAhrsInitialise>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002c90:	2200      	movs	r2, #0
 8002c92:	2108      	movs	r1, #8
 8002c94:	4864      	ldr	r0, [pc, #400]	; (8002e28 <Start_Data_Reading+0x560>)
 8002c96:	f003 fd6b 	bl	8006770 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002c9a:	2064      	movs	r0, #100	; 0x64
 8002c9c:	f002 fc32 	bl	8005504 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	2108      	movs	r1, #8
 8002ca4:	4860      	ldr	r0, [pc, #384]	; (8002e28 <Start_Data_Reading+0x560>)
 8002ca6:	f003 fd63 	bl	8006770 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002caa:	2064      	movs	r0, #100	; 0x64
 8002cac:	f002 fc2a 	bl	8005504 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2108      	movs	r1, #8
 8002cb4:	485c      	ldr	r0, [pc, #368]	; (8002e28 <Start_Data_Reading+0x560>)
 8002cb6:	f003 fd5b 	bl	8006770 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cba:	2064      	movs	r0, #100	; 0x64
 8002cbc:	f002 fc22 	bl	8005504 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	2108      	movs	r1, #8
 8002cc4:	4858      	ldr	r0, [pc, #352]	; (8002e28 <Start_Data_Reading+0x560>)
 8002cc6:	f003 fd53 	bl	8006770 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cca:	2064      	movs	r0, #100	; 0x64
 8002ccc:	f002 fc1a 	bl	8005504 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2108      	movs	r1, #8
 8002cd4:	4854      	ldr	r0, [pc, #336]	; (8002e28 <Start_Data_Reading+0x560>)
 8002cd6:	f003 fd4b 	bl	8006770 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cda:	2064      	movs	r0, #100	; 0x64
 8002cdc:	f002 fc12 	bl	8005504 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	2108      	movs	r1, #8
 8002ce4:	4850      	ldr	r0, [pc, #320]	; (8002e28 <Start_Data_Reading+0x560>)
 8002ce6:	f003 fd43 	bl	8006770 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cea:	2064      	movs	r0, #100	; 0x64
 8002cec:	f002 fc0a 	bl	8005504 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2108      	movs	r1, #8
 8002cf4:	484c      	ldr	r0, [pc, #304]	; (8002e28 <Start_Data_Reading+0x560>)
 8002cf6:	f003 fd3b 	bl	8006770 <HAL_GPIO_WritePin>

	HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, bytetoread);
 8002cfa:	4b4c      	ldr	r3, [pc, #304]	; (8002e2c <Start_Data_Reading+0x564>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	494b      	ldr	r1, [pc, #300]	; (8002e30 <Start_Data_Reading+0x568>)
 8002d04:	484b      	ldr	r0, [pc, #300]	; (8002e34 <Start_Data_Reading+0x56c>)
 8002d06:	f007 fbd9 	bl	800a4bc <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_IT(&huart2, transmit_data, sizeof (transmit_data));
 8002d0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d0e:	2228      	movs	r2, #40	; 0x28
 8002d10:	4619      	mov	r1, r3
 8002d12:	4849      	ldr	r0, [pc, #292]	; (8002e38 <Start_Data_Reading+0x570>)
 8002d14:	f007 fb5d 	bl	800a3d2 <HAL_UART_Transmit_IT>
//	HAL_UART_Receive_IT(&huart2, telem, 11);


	vTaskResume( defaultTaskHandle );
 8002d18:	4b48      	ldr	r3, [pc, #288]	; (8002e3c <Start_Data_Reading+0x574>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f00c f83f 	bl	800eda0 <vTaskResume>

  /* Infinite loop */
  for(;;)
  {

	  	  mytimer = __HAL_TIM_GET_COUNTER(&htim7);
 8002d22:	4b3f      	ldr	r3, [pc, #252]	; (8002e20 <Start_Data_Reading+0x558>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b45      	ldr	r3, [pc, #276]	; (8002e40 <Start_Data_Reading+0x578>)
 8002d2c:	601a      	str	r2, [r3, #0]
	  	  htim7.Instance->CNT = 0;
 8002d2e:	4b3c      	ldr	r3, [pc, #240]	; (8002e20 <Start_Data_Reading+0x558>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2200      	movs	r2, #0
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

	  	  //BOSCH API magneto end

	  	  //BOSCH API FORCED MAGNETO START

	  	  bmm150_read_mag_data(&mag_data, &dev);
 8002d36:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002d3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f00a fa48 	bl	800d1d6 <bmm150_read_mag_data>

	  	  settings.pwr_mode = BMM150_POWERMODE_FORCED;
 8002d46:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002d4a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002d4e:	2201      	movs	r2, #1
 8002d50:	705a      	strb	r2, [r3, #1]
	  	  rslt = bmm150_set_op_mode(&settings, &dev);
 8002d52:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002d56:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f00a f8ed 	bl	800cf3c <bmm150_set_op_mode>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	  	  bmm150_error_codes_print_result("bmm150_set_op_mode", rslt);
 8002d68:	f997 314f 	ldrsb.w	r3, [r7, #335]	; 0x14f
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4835      	ldr	r0, [pc, #212]	; (8002e44 <Start_Data_Reading+0x57c>)
 8002d70:	f00b f914 	bl	800df9c <bmm150_error_codes_print_result>

		  // magnetic field data in uT
//		  mag_data_x = BMM150_Compensate_x(field_x, Rhall,  &trim_data); //magn data compensation 33.4 us
//		  mag_data_y = BMM150_Compensate_y(field_y, Rhall,  &trim_data);
//		  mag_data_z = BMM150_Compensate_z(field_z, Rhall,  &trim_data);
		  magneto_data.axis.x = mag_data.y;
 8002d74:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002d78:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002d82:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d86:	601a      	str	r2, [r3, #0]
		  magneto_data.axis.y = -mag_data.x;
 8002d88:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002d8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d90:	edd3 7a00 	vldr	s15, [r3]
 8002d94:	eef1 7a67 	vneg.f32	s15, s15
 8002d98:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002d9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002da0:	edc3 7a01 	vstr	s15, [r3, #4]
		  magneto_data.axis.z = mag_data.z;
 8002da4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002da8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002db2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002db6:	609a      	str	r2, [r3, #8]

		  if(i_mag < 1000){
 8002db8:	4b23      	ldr	r3, [pc, #140]	; (8002e48 <Start_Data_Reading+0x580>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dc0:	e044      	b.n	8002e4c <Start_Data_Reading+0x584>
 8002dc2:	bf00      	nop
 8002dc4:	20000a5c 	.word	0x20000a5c
 8002dc8:	20000a58 	.word	0x20000a58
 8002dcc:	20000a54 	.word	0x20000a54
 8002dd0:	20000a08 	.word	0x20000a08
 8002dd4:	20000a64 	.word	0x20000a64
 8002dd8:	20000a60 	.word	0x20000a60
 8002ddc:	47c5f400 	.word	0x47c5f400
 8002de0:	20000a68 	.word	0x20000a68
 8002de4:	200009b8 	.word	0x200009b8
 8002de8:	20000b70 	.word	0x20000b70
 8002dec:	20000b78 	.word	0x20000b78
 8002df0:	20000b80 	.word	0x20000b80
 8002df4:	44fa0000 	.word	0x44fa0000
 8002df8:	409f4000 	.word	0x409f4000
 8002dfc:	20000b88 	.word	0x20000b88
 8002e00:	20000b90 	.word	0x20000b90
 8002e04:	20000b98 	.word	0x20000b98
 8002e08:	0801545c 	.word	0x0801545c
 8002e0c:	08015478 	.word	0x08015478
 8002e10:	08015484 	.word	0x08015484
 8002e14:	20000a78 	.word	0x20000a78
 8002e18:	20000a88 	.word	0x20000a88
 8002e1c:	20000764 	.word	0x20000764
 8002e20:	200007ac 	.word	0x200007ac
 8002e24:	20000a98 	.word	0x20000a98
 8002e28:	40020400 	.word	0x40020400
 8002e2c:	2000000a 	.word	0x2000000a
 8002e30:	20002b30 	.word	0x20002b30
 8002e34:	2000083c 	.word	0x2000083c
 8002e38:	20000880 	.word	0x20000880
 8002e3c:	200009ac 	.word	0x200009ac
 8002e40:	20000b6c 	.word	0x20000b6c
 8002e44:	080153d8 	.word	0x080153d8
 8002e48:	20002ae0 	.word	0x20002ae0
 8002e4c:	da14      	bge.n	8002e78 <Start_Data_Reading+0x5b0>
			  mag_debug_x[i_mag] = mag_data_x;
 8002e4e:	4bd2      	ldr	r3, [pc, #840]	; (8003198 <Start_Data_Reading+0x8d0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4ad2      	ldr	r2, [pc, #840]	; (800319c <Start_Data_Reading+0x8d4>)
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	49d2      	ldr	r1, [pc, #840]	; (80031a0 <Start_Data_Reading+0x8d8>)
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	601a      	str	r2, [r3, #0]
			  mag_debug_y[i_mag] = mag_data_y;
 8002e5e:	4bce      	ldr	r3, [pc, #824]	; (8003198 <Start_Data_Reading+0x8d0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4ad0      	ldr	r2, [pc, #832]	; (80031a4 <Start_Data_Reading+0x8dc>)
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	49d0      	ldr	r1, [pc, #832]	; (80031a8 <Start_Data_Reading+0x8e0>)
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	601a      	str	r2, [r3, #0]
			  i_mag++;
 8002e6e:	4bca      	ldr	r3, [pc, #808]	; (8003198 <Start_Data_Reading+0x8d0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	4ac8      	ldr	r2, [pc, #800]	; (8003198 <Start_Data_Reading+0x8d0>)
 8002e76:	6013      	str	r3, [r2, #0]
		  }

		  //read IMU
		  BMI088_ReadGyroscope(&imu);	// imu read 119 us
 8002e78:	48cc      	ldr	r0, [pc, #816]	; (80031ac <Start_Data_Reading+0x8e4>)
 8002e7a:	f001 fd49 	bl	8004910 <BMI088_ReadGyroscope>
		  BMI088_ReadAccelerometer(&imu);
 8002e7e:	48cb      	ldr	r0, [pc, #812]	; (80031ac <Start_Data_Reading+0x8e4>)
 8002e80:	f001 fcd2 	bl	8004828 <BMI088_ReadAccelerometer>
		  //filterUpdate((imu.gyr_rps[0]-gyro_offset_x), (imu.gyr_rps[1]-gyro_offset_y), imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], (imu.gyr_rps[2]-gyro_offset_z), mag_data_y, -mag_data_x, mag_data_z, &q, &f, &w);


		  //eulerAngles(q, &roll, &pitch, &yaw);

		  gyro_x_degree = ((imu.gyr_rps[0]-gyro_offset_x)*57.29);
 8002e84:	4bc9      	ldr	r3, [pc, #804]	; (80031ac <Start_Data_Reading+0x8e4>)
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd fb5d 	bl	8000548 <__aeabi_f2d>
 8002e8e:	4bc8      	ldr	r3, [pc, #800]	; (80031b0 <Start_Data_Reading+0x8e8>)
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd f9f8 	bl	8000288 <__aeabi_dsub>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	a3b9      	add	r3, pc, #740	; (adr r3, 8003188 <Start_Data_Reading+0x8c0>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f7fd fba7 	bl	80005f8 <__aeabi_dmul>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f7fd fe99 	bl	8000be8 <__aeabi_d2f>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4abe      	ldr	r2, [pc, #760]	; (80031b4 <Start_Data_Reading+0x8ec>)
 8002eba:	6013      	str	r3, [r2, #0]
		  gyro_y_degree = ((imu.gyr_rps[1]-gyro_offset_x)*57.29);
 8002ebc:	4bbb      	ldr	r3, [pc, #748]	; (80031ac <Start_Data_Reading+0x8e4>)
 8002ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd fb41 	bl	8000548 <__aeabi_f2d>
 8002ec6:	4bba      	ldr	r3, [pc, #744]	; (80031b0 <Start_Data_Reading+0x8e8>)
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	f7fd f9dc 	bl	8000288 <__aeabi_dsub>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	a3ab      	add	r3, pc, #684	; (adr r3, 8003188 <Start_Data_Reading+0x8c0>)
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	f7fd fb8b 	bl	80005f8 <__aeabi_dmul>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f7fd fe7d 	bl	8000be8 <__aeabi_d2f>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4ab1      	ldr	r2, [pc, #708]	; (80031b8 <Start_Data_Reading+0x8f0>)
 8002ef2:	6013      	str	r3, [r2, #0]
		  gyro_z_degree = ((imu.gyr_rps[2]-gyro_offset_x)*57.29);
 8002ef4:	4bad      	ldr	r3, [pc, #692]	; (80031ac <Start_Data_Reading+0x8e4>)
 8002ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fb25 	bl	8000548 <__aeabi_f2d>
 8002efe:	4bac      	ldr	r3, [pc, #688]	; (80031b0 <Start_Data_Reading+0x8e8>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd f9c0 	bl	8000288 <__aeabi_dsub>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	a39d      	add	r3, pc, #628	; (adr r3, 8003188 <Start_Data_Reading+0x8c0>)
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	f7fd fb6f 	bl	80005f8 <__aeabi_dmul>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	f7fd fe61 	bl	8000be8 <__aeabi_d2f>
 8002f26:	4603      	mov	r3, r0
 8002f28:	4aa4      	ldr	r2, [pc, #656]	; (80031bc <Start_Data_Reading+0x8f4>)
 8002f2a:	6013      	str	r3, [r2, #0]


//		  magneto_data = FusionVectorSubtract(magneto_data, magneto_offset);
		  magneto_data = FusionMatrixMultiplyVector(magneto_transform, FusionVectorSubtract(magneto_data, magneto_offset));
 8002f2c:	ed97 5a42 	vldr	s10, [r7, #264]	; 0x108
 8002f30:	edd7 5a43 	vldr	s11, [r7, #268]	; 0x10c
 8002f34:	ed97 6a44 	vldr	s12, [r7, #272]	; 0x110
 8002f38:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002f3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f40:	edd3 6a00 	vldr	s13, [r3]
 8002f44:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f48:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f4c:	eef0 1a45 	vmov.f32	s3, s10
 8002f50:	eeb0 2a65 	vmov.f32	s4, s11
 8002f54:	eef0 2a46 	vmov.f32	s5, s12
 8002f58:	eeb0 0a66 	vmov.f32	s0, s13
 8002f5c:	eef0 0a47 	vmov.f32	s1, s14
 8002f60:	eeb0 1a67 	vmov.f32	s2, s15
 8002f64:	f7fe f86c 	bl	8001040 <FusionVectorSubtract>
 8002f68:	eef0 6a40 	vmov.f32	s13, s0
 8002f6c:	eeb0 7a60 	vmov.f32	s14, s1
 8002f70:	eef0 7a41 	vmov.f32	s15, s2
 8002f74:	edc7 6a45 	vstr	s13, [r7, #276]	; 0x114
 8002f78:	ed87 7a46 	vstr	s14, [r7, #280]	; 0x118
 8002f7c:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
 8002f80:	edd7 6a45 	vldr	s13, [r7, #276]	; 0x114
 8002f84:	ed97 7a46 	vldr	s14, [r7, #280]	; 0x118
 8002f88:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 8002f8c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002f90:	f5a3 7686 	sub.w	r6, r3, #268	; 0x10c
 8002f94:	466d      	mov	r5, sp
 8002f96:	f106 0410 	add.w	r4, r6, #16
 8002f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	602b      	str	r3, [r5, #0]
 8002fa2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002fa6:	eeb0 0a66 	vmov.f32	s0, s13
 8002faa:	eef0 0a47 	vmov.f32	s1, s14
 8002fae:	eeb0 1a67 	vmov.f32	s2, s15
 8002fb2:	f7fe f8d7 	bl	8001164 <FusionMatrixMultiplyVector>
 8002fb6:	eef0 6a40 	vmov.f32	s13, s0
 8002fba:	eeb0 7a60 	vmov.f32	s14, s1
 8002fbe:	eef0 7a41 	vmov.f32	s15, s2
 8002fc2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002fc6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fca:	edc3 6a00 	vstr	s13, [r3]
 8002fce:	ed83 7a01 	vstr	s14, [r3, #4]
 8002fd2:	edc3 7a02 	vstr	s15, [r3, #8]

		  const FusionVector gyroscope = {gyro_x_degree, gyro_y_degree, gyro_z_degree};
 8002fd6:	4b77      	ldr	r3, [pc, #476]	; (80031b4 <Start_Data_Reading+0x8ec>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002fde:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	4b74      	ldr	r3, [pc, #464]	; (80031b8 <Start_Data_Reading+0x8f0>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002fec:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	4b72      	ldr	r3, [pc, #456]	; (80031bc <Start_Data_Reading+0x8f4>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002ffa:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002ffe:	609a      	str	r2, [r3, #8]
		  const FusionVector accelerometer = {imu.acc_mps2[0]/9.81, imu.acc_mps2[1]/9.81, imu.acc_mps2[2]/9.81};
 8003000:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <Start_Data_Reading+0x8e4>)
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd fa9f 	bl	8000548 <__aeabi_f2d>
 800300a:	a361      	add	r3, pc, #388	; (adr r3, 8003190 <Start_Data_Reading+0x8c8>)
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	f7fd fc1c 	bl	800084c <__aeabi_ddiv>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	f7fd fde4 	bl	8000be8 <__aeabi_d2f>
 8003020:	4602      	mov	r2, r0
 8003022:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003026:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	4b5f      	ldr	r3, [pc, #380]	; (80031ac <Start_Data_Reading+0x8e4>)
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd fa89 	bl	8000548 <__aeabi_f2d>
 8003036:	a356      	add	r3, pc, #344	; (adr r3, 8003190 <Start_Data_Reading+0x8c8>)
 8003038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303c:	f7fd fc06 	bl	800084c <__aeabi_ddiv>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	f7fd fdce 	bl	8000be8 <__aeabi_d2f>
 800304c:	4602      	mov	r2, r0
 800304e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003052:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	4b54      	ldr	r3, [pc, #336]	; (80031ac <Start_Data_Reading+0x8e4>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fa73 	bl	8000548 <__aeabi_f2d>
 8003062:	a34b      	add	r3, pc, #300	; (adr r3, 8003190 <Start_Data_Reading+0x8c8>)
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f7fd fbf0 	bl	800084c <__aeabi_ddiv>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	f7fd fdb8 	bl	8000be8 <__aeabi_d2f>
 8003078:	4602      	mov	r2, r0
 800307a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800307e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003082:	609a      	str	r2, [r3, #8]
		  const FusionVector magnetometer = {magneto_data.axis.x, magneto_data.axis.y, magneto_data.axis.z};
 8003084:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003088:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003092:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800309c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030ba:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80030be:	609a      	str	r2, [r3, #8]

		  //no magnetometer AHRS
//		  FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, SAMPLE_PERIOD);

		  //magnetometer AHRS
		  FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, SAMPLE_PERIOD);
 80030c0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80030c8:	ed93 3a00 	vldr	s6, [r3]
 80030cc:	edd3 3a01 	vldr	s7, [r3, #4]
 80030d0:	ed93 4a02 	vldr	s8, [r3, #8]
 80030d4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030d8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030dc:	ed93 5a00 	vldr	s10, [r3]
 80030e0:	edd3 5a01 	vldr	s11, [r3, #4]
 80030e4:	ed93 6a02 	vldr	s12, [r3, #8]
 80030e8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030ec:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80030f0:	edd3 6a00 	vldr	s13, [r3]
 80030f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80030f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80030fc:	eddf 4a30 	vldr	s9, [pc, #192]	; 80031c0 <Start_Data_Reading+0x8f8>
 8003100:	eef0 1a45 	vmov.f32	s3, s10
 8003104:	eeb0 2a65 	vmov.f32	s4, s11
 8003108:	eef0 2a46 	vmov.f32	s5, s12
 800310c:	eeb0 0a66 	vmov.f32	s0, s13
 8003110:	eef0 0a47 	vmov.f32	s1, s14
 8003114:	eeb0 1a67 	vmov.f32	s2, s15
 8003118:	482a      	ldr	r0, [pc, #168]	; (80031c4 <Start_Data_Reading+0x8fc>)
 800311a:	f009 f835 	bl	800c188 <FusionAhrsUpdate>

		  euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 800311e:	4829      	ldr	r0, [pc, #164]	; (80031c4 <Start_Data_Reading+0x8fc>)
 8003120:	f009 fe56 	bl	800cdd0 <FusionAhrsGetQuaternion>
 8003124:	eeb0 6a40 	vmov.f32	s12, s0
 8003128:	eef0 6a60 	vmov.f32	s13, s1
 800312c:	eeb0 7a41 	vmov.f32	s14, s2
 8003130:	eef0 7a61 	vmov.f32	s15, s3
 8003134:	ed87 6a48 	vstr	s12, [r7, #288]	; 0x120
 8003138:	edc7 6a49 	vstr	s13, [r7, #292]	; 0x124
 800313c:	ed87 7a4a 	vstr	s14, [r7, #296]	; 0x128
 8003140:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
 8003144:	ed97 6a48 	vldr	s12, [r7, #288]	; 0x120
 8003148:	edd7 6a49 	vldr	s13, [r7, #292]	; 0x124
 800314c:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8003150:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8003154:	eeb0 0a46 	vmov.f32	s0, s12
 8003158:	eef0 0a66 	vmov.f32	s1, s13
 800315c:	eeb0 1a47 	vmov.f32	s2, s14
 8003160:	eef0 1a67 	vmov.f32	s3, s15
 8003164:	f7fe f943 	bl	80013ee <FusionQuaternionToEuler>
 8003168:	eef0 6a40 	vmov.f32	s13, s0
 800316c:	eeb0 7a60 	vmov.f32	s14, s1
 8003170:	eef0 7a41 	vmov.f32	s15, s2
 8003174:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <Start_Data_Reading+0x900>)
 8003176:	edc3 6a00 	vstr	s13, [r3]
 800317a:	ed83 7a01 	vstr	s14, [r3, #4]
 800317e:	edc3 7a02 	vstr	s15, [r3, #8]
 8003182:	e023      	b.n	80031cc <Start_Data_Reading+0x904>
 8003184:	f3af 8000 	nop.w
 8003188:	b851eb85 	.word	0xb851eb85
 800318c:	404ca51e 	.word	0x404ca51e
 8003190:	51eb851f 	.word	0x51eb851f
 8003194:	40239eb8 	.word	0x40239eb8
 8003198:	20002ae0 	.word	0x20002ae0
 800319c:	20000a48 	.word	0x20000a48
 80031a0:	20000ba0 	.word	0x20000ba0
 80031a4:	20000a4c 	.word	0x20000a4c
 80031a8:	20001b40 	.word	0x20001b40
 80031ac:	200009b8 	.word	0x200009b8
 80031b0:	20000b88 	.word	0x20000b88
 80031b4:	20000a6c 	.word	0x20000a6c
 80031b8:	20000a70 	.word	0x20000a70
 80031bc:	20000a74 	.word	0x20000a74
 80031c0:	3ba3d70a 	.word	0x3ba3d70a
 80031c4:	20000a98 	.word	0x20000a98
 80031c8:	20000b0c 	.word	0x20000b0c
		  // Rotation matrix from sensor frame to earth(NWU) frame
		  ERS = FusionQuaternionToMatrix(FusionAhrsGetQuaternion(&ahrs));
 80031cc:	48dc      	ldr	r0, [pc, #880]	; (8003540 <Start_Data_Reading+0xc78>)
 80031ce:	f009 fdff 	bl	800cdd0 <FusionAhrsGetQuaternion>
 80031d2:	eeb0 6a40 	vmov.f32	s12, s0
 80031d6:	eef0 6a60 	vmov.f32	s13, s1
 80031da:	eeb0 7a41 	vmov.f32	s14, s2
 80031de:	eef0 7a61 	vmov.f32	s15, s3
 80031e2:	ed87 6a4c 	vstr	s12, [r7, #304]	; 0x130
 80031e6:	edc7 6a4d 	vstr	s13, [r7, #308]	; 0x134
 80031ea:	ed87 7a4e 	vstr	s14, [r7, #312]	; 0x138
 80031ee:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
 80031f2:	4cd4      	ldr	r4, [pc, #848]	; (8003544 <Start_Data_Reading+0xc7c>)
 80031f4:	463b      	mov	r3, r7
 80031f6:	ed97 6a4c 	vldr	s12, [r7, #304]	; 0x130
 80031fa:	edd7 6a4d 	vldr	s13, [r7, #308]	; 0x134
 80031fe:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 8003202:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 8003206:	eeb0 0a46 	vmov.f32	s0, s12
 800320a:	eef0 0a66 	vmov.f32	s1, s13
 800320e:	eeb0 1a47 	vmov.f32	s2, s14
 8003212:	eef0 1a67 	vmov.f32	s3, s15
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe f81c 	bl	8001254 <FusionQuaternionToMatrix>
 800321c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003220:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003224:	461d      	mov	r5, r3
 8003226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800322a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800322c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800322e:	682b      	ldr	r3, [r5, #0]
 8003230:	6023      	str	r3, [r4, #0]
		  aE = FusionMatrixMultiplyVector(ERS, FusionVectorMultiplyScalar(accelerometer, 9.81));
 8003232:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003236:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800323a:	edd3 6a00 	vldr	s13, [r3]
 800323e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003242:	edd3 7a02 	vldr	s15, [r3, #8]
 8003246:	eddf 1ac0 	vldr	s3, [pc, #768]	; 8003548 <Start_Data_Reading+0xc80>
 800324a:	eeb0 0a66 	vmov.f32	s0, s13
 800324e:	eef0 0a47 	vmov.f32	s1, s14
 8003252:	eeb0 1a67 	vmov.f32	s2, s15
 8003256:	f7fd ff41 	bl	80010dc <FusionVectorMultiplyScalar>
 800325a:	eef0 6a40 	vmov.f32	s13, s0
 800325e:	eeb0 7a60 	vmov.f32	s14, s1
 8003262:	eef0 7a41 	vmov.f32	s15, s2
 8003266:	edc7 6a50 	vstr	s13, [r7, #320]	; 0x140
 800326a:	ed87 7a51 	vstr	s14, [r7, #324]	; 0x144
 800326e:	edc7 7a52 	vstr	s15, [r7, #328]	; 0x148
 8003272:	edd7 6a50 	vldr	s13, [r7, #320]	; 0x140
 8003276:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 800327a:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 800327e:	4eb1      	ldr	r6, [pc, #708]	; (8003544 <Start_Data_Reading+0xc7c>)
 8003280:	466d      	mov	r5, sp
 8003282:	f106 0410 	add.w	r4, r6, #16
 8003286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	602b      	str	r3, [r5, #0]
 800328e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003292:	eeb0 0a66 	vmov.f32	s0, s13
 8003296:	eef0 0a47 	vmov.f32	s1, s14
 800329a:	eeb0 1a67 	vmov.f32	s2, s15
 800329e:	f7fd ff61 	bl	8001164 <FusionMatrixMultiplyVector>
 80032a2:	eef0 6a40 	vmov.f32	s13, s0
 80032a6:	eeb0 7a60 	vmov.f32	s14, s1
 80032aa:	eef0 7a41 	vmov.f32	s15, s2
 80032ae:	4ba7      	ldr	r3, [pc, #668]	; (800354c <Start_Data_Reading+0xc84>)
 80032b0:	edc3 6a00 	vstr	s13, [r3]
 80032b4:	ed83 7a01 	vstr	s14, [r3, #4]
 80032b8:	edc3 7a02 	vstr	s15, [r3, #8]
		  aE.axis.z -=9.85173;
 80032bc:	4ba3      	ldr	r3, [pc, #652]	; (800354c <Start_Data_Reading+0xc84>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd f941 	bl	8000548 <__aeabi_f2d>
 80032c6:	a39a      	add	r3, pc, #616	; (adr r3, 8003530 <Start_Data_Reading+0xc68>)
 80032c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032cc:	f7fc ffdc 	bl	8000288 <__aeabi_dsub>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4610      	mov	r0, r2
 80032d6:	4619      	mov	r1, r3
 80032d8:	f7fd fc86 	bl	8000be8 <__aeabi_d2f>
 80032dc:	4603      	mov	r3, r0
 80032de:	4a9b      	ldr	r2, [pc, #620]	; (800354c <Start_Data_Reading+0xc84>)
 80032e0:	6093      	str	r3, [r2, #8]



		  // calculate rotation around yaw axis
		  if(prev_euler_yaw > 170 && euler.angle.yaw < 0){
 80032e2:	edd7 7a73 	vldr	s15, [r7, #460]	; 0x1cc
 80032e6:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8003550 <Start_Data_Reading+0xc88>
 80032ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f2:	dd0c      	ble.n	800330e <Start_Data_Reading+0xa46>
 80032f4:	4b97      	ldr	r3, [pc, #604]	; (8003554 <Start_Data_Reading+0xc8c>)
 80032f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80032fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003302:	d504      	bpl.n	800330e <Start_Data_Reading+0xa46>
			  n++;
 8003304:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003308:	3301      	adds	r3, #1
 800330a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		  }
		  if(prev_euler_yaw < -170 && euler.angle.yaw > 0){
 800330e:	edd7 7a73 	vldr	s15, [r7, #460]	; 0x1cc
 8003312:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8003558 <Start_Data_Reading+0xc90>
 8003316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800331a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331e:	d50c      	bpl.n	800333a <Start_Data_Reading+0xa72>
 8003320:	4b8c      	ldr	r3, [pc, #560]	; (8003554 <Start_Data_Reading+0xc8c>)
 8003322:	edd3 7a02 	vldr	s15, [r3, #8]
 8003326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332e:	dd04      	ble.n	800333a <Start_Data_Reading+0xa72>
			  n--;
 8003330:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003334:	3b01      	subs	r3, #1
 8003336:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		  }
		  yaw_angle = euler.angle.yaw + n * 360.0;
 800333a:	4b86      	ldr	r3, [pc, #536]	; (8003554 <Start_Data_Reading+0xc8c>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd f902 	bl	8000548 <__aeabi_f2d>
 8003344:	4604      	mov	r4, r0
 8003346:	460d      	mov	r5, r1
 8003348:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 800334c:	f7fd f8ea 	bl	8000524 <__aeabi_i2d>
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	4b81      	ldr	r3, [pc, #516]	; (800355c <Start_Data_Reading+0xc94>)
 8003356:	f7fd f94f 	bl	80005f8 <__aeabi_dmul>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4620      	mov	r0, r4
 8003360:	4629      	mov	r1, r5
 8003362:	f7fc ff93 	bl	800028c <__adddf3>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4610      	mov	r0, r2
 800336c:	4619      	mov	r1, r3
 800336e:	f7fd fc3b 	bl	8000be8 <__aeabi_d2f>
 8003372:	4603      	mov	r3, r0
 8003374:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
		  abs_yaw = yaw_angle;
 8003378:	4a79      	ldr	r2, [pc, #484]	; (8003560 <Start_Data_Reading+0xc98>)
 800337a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800337e:	6013      	str	r3, [r2, #0]
		  prev_euler_yaw = euler.angle.yaw;
 8003380:	4b74      	ldr	r3, [pc, #464]	; (8003554 <Start_Data_Reading+0xc8c>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
//		  HAL_UART_Transmit (&huart2, transmit_data, sizeof (transmit_data), 500);



		  //altitudeKF(prev_state, &current_state, P_prev, &P, meas);
		  M_throttle = CRSFtoDuty(RX_throttle);
 8003388:	4b76      	ldr	r3, [pc, #472]	; (8003564 <Start_Data_Reading+0xc9c>)
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f001 ffab 	bl	80052e8 <CRSFtoDuty>
 8003392:	eef0 7a40 	vmov.f32	s15, s0
 8003396:	4b74      	ldr	r3, [pc, #464]	; (8003568 <Start_Data_Reading+0xca0>)
 8003398:	edc3 7a00 	vstr	s15, [r3]
		  M_pitch = CRSFtoPitch(RX_pitch)*25;
 800339c:	4b73      	ldr	r3, [pc, #460]	; (800356c <Start_Data_Reading+0xca4>)
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f001 ffe3 	bl	800536c <CRSFtoPitch>
 80033a6:	eef0 7a40 	vmov.f32	s15, s0
 80033aa:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80033ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033b2:	4b6f      	ldr	r3, [pc, #444]	; (8003570 <Start_Data_Reading+0xca8>)
 80033b4:	edc3 7a00 	vstr	s15, [r3]
		  M_roll = CRSFtoRoll(RX_roll)*15;
 80033b8:	4b6e      	ldr	r3, [pc, #440]	; (8003574 <Start_Data_Reading+0xcac>)
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f001 fff3 	bl	80053a8 <CRSFtoRoll>
 80033c2:	eef0 7a40 	vmov.f32	s15, s0
 80033c6:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80033ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033ce:	4b6a      	ldr	r3, [pc, #424]	; (8003578 <Start_Data_Reading+0xcb0>)
 80033d0:	edc3 7a00 	vstr	s15, [r3]
		  M_yaw += CRSFtoYaw(RX_yaw)*0.3;
 80033d4:	4b69      	ldr	r3, [pc, #420]	; (800357c <Start_Data_Reading+0xcb4>)
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f002 f803 	bl	80053e4 <CRSFtoYaw>
 80033de:	ee10 3a10 	vmov	r3, s0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd f8b0 	bl	8000548 <__aeabi_f2d>
 80033e8:	a353      	add	r3, pc, #332	; (adr r3, 8003538 <Start_Data_Reading+0xc70>)
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	f7fd f903 	bl	80005f8 <__aeabi_dmul>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4614      	mov	r4, r2
 80033f8:	461d      	mov	r5, r3
 80033fa:	4b61      	ldr	r3, [pc, #388]	; (8003580 <Start_Data_Reading+0xcb8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd f8a2 	bl	8000548 <__aeabi_f2d>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4620      	mov	r0, r4
 800340a:	4629      	mov	r1, r5
 800340c:	f7fc ff3e 	bl	800028c <__adddf3>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	f7fd fbe6 	bl	8000be8 <__aeabi_d2f>
 800341c:	4603      	mov	r3, r0
 800341e:	4a58      	ldr	r2, [pc, #352]	; (8003580 <Start_Data_Reading+0xcb8>)
 8003420:	6013      	str	r3, [r2, #0]

		  //pitch angle control
		  err_angle_pitch = M_pitch - euler.angle.pitch;
 8003422:	4b53      	ldr	r3, [pc, #332]	; (8003570 <Start_Data_Reading+0xca8>)
 8003424:	ed93 7a00 	vldr	s14, [r3]
 8003428:	4b4a      	ldr	r3, [pc, #296]	; (8003554 <Start_Data_Reading+0xc8c>)
 800342a:	edd3 7a01 	vldr	s15, [r3, #4]
 800342e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003432:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac
		  errd_angle_pitch = (err_angle_pitch - prev_err_angle_pitch)/SAMPLE_PERIOD;
 8003436:	ed97 7a6b 	vldr	s14, [r7, #428]	; 0x1ac
 800343a:	edd7 7a7a 	vldr	s15, [r7, #488]	; 0x1e8
 800343e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003442:	eddf 6a52 	vldr	s13, [pc, #328]	; 800358c <Start_Data_Reading+0xcc4>
 8003446:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800344a:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
		  angle_control_pitch = P_angle_pitch * err_angle_pitch + D_angle_pitch * errd_angle_pitch;
 800344e:	ed97 7a68 	vldr	s14, [r7, #416]	; 0x1a0
 8003452:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 8003456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800345a:	edd7 6a67 	vldr	s13, [r7, #412]	; 0x19c
 800345e:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 8003462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346a:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
		  prev_err_angle_pitch = err_angle_pitch;
 800346e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003472:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
		  //debug_control1 = err_angle_pitch;

		  //pitch angle velocity control
		  err_pitch = angle_control_pitch - imu.gyr_rps[1];
 8003476:	4b43      	ldr	r3, [pc, #268]	; (8003584 <Start_Data_Reading+0xcbc>)
 8003478:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800347c:	ed97 7a69 	vldr	s14, [r7, #420]	; 0x1a4
 8003480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003484:	edc7 7a70 	vstr	s15, [r7, #448]	; 0x1c0
		  errd_pitch = (err_pitch - prev_err_pitch)/SAMPLE_PERIOD;
 8003488:	ed97 7a70 	vldr	s14, [r7, #448]	; 0x1c0
 800348c:	edd7 7a7b 	vldr	s15, [r7, #492]	; 0x1ec
 8003490:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003494:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800358c <Start_Data_Reading+0xcc4>
 8003498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800349c:	edc7 7a6f 	vstr	s15, [r7, #444]	; 0x1bc
		  prev_err_pitch = err_pitch;
 80034a0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80034a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
		  control_pitch = P_pitch * err_pitch + D_pitch * errd_pitch;
 80034a8:	ed97 7a6d 	vldr	s14, [r7, #436]	; 0x1b4
 80034ac:	edd7 7a70 	vldr	s15, [r7, #448]	; 0x1c0
 80034b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034b4:	edd7 6a6c 	vldr	s13, [r7, #432]	; 0x1b0
 80034b8:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 80034bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c4:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8

		  //roll angle control
		  err_angle_roll = M_roll - euler.angle.roll;
 80034c8:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <Start_Data_Reading+0xcb0>)
 80034ca:	ed93 7a00 	vldr	s14, [r3]
 80034ce:	4b21      	ldr	r3, [pc, #132]	; (8003554 <Start_Data_Reading+0xc8c>)
 80034d0:	edd3 7a00 	vldr	s15, [r3]
 80034d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d8:	edc7 7a5f 	vstr	s15, [r7, #380]	; 0x17c
		  errd_angle_roll = (err_angle_roll - prev_err_angle_roll)/SAMPLE_PERIOD;
 80034dc:	ed97 7a5f 	vldr	s14, [r7, #380]	; 0x17c
 80034e0:	edd7 7a78 	vldr	s15, [r7, #480]	; 0x1e0
 80034e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034e8:	eddf 6a28 	vldr	s13, [pc, #160]	; 800358c <Start_Data_Reading+0xcc4>
 80034ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034f0:	edc7 7a5e 	vstr	s15, [r7, #376]	; 0x178
		  angle_control_roll = P_angle_roll * err_angle_roll + D_angle_roll * errd_angle_roll;
 80034f4:	ed97 7a61 	vldr	s14, [r7, #388]	; 0x184
 80034f8:	edd7 7a5f 	vldr	s15, [r7, #380]	; 0x17c
 80034fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003500:	edd7 6a60 	vldr	s13, [r7, #384]	; 0x180
 8003504:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 8003508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800350c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003510:	edc7 7a5d 	vstr	s15, [r7, #372]	; 0x174
		  prev_err_angle_roll = err_angle_roll;
 8003514:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003518:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
		  debug_control1 = err_angle_roll;
 800351c:	4a1a      	ldr	r2, [pc, #104]	; (8003588 <Start_Data_Reading+0xcc0>)
 800351e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003522:	6013      	str	r3, [r2, #0]


		  //roll angle velocity control
		  err_roll = angle_control_roll - imu.gyr_rps[0]; //M_roll
 8003524:	4b17      	ldr	r3, [pc, #92]	; (8003584 <Start_Data_Reading+0xcbc>)
 8003526:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800352a:	e031      	b.n	8003590 <Start_Data_Reading+0xcc8>
 800352c:	f3af 8000 	nop.w
 8003530:	f45e0b4e 	.word	0xf45e0b4e
 8003534:	4023b415 	.word	0x4023b415
 8003538:	33333333 	.word	0x33333333
 800353c:	3fd33333 	.word	0x3fd33333
 8003540:	20000a98 	.word	0x20000a98
 8003544:	20000b18 	.word	0x20000b18
 8003548:	411cf5c3 	.word	0x411cf5c3
 800354c:	20000b3c 	.word	0x20000b3c
 8003550:	432a0000 	.word	0x432a0000
 8003554:	20000b0c 	.word	0x20000b0c
 8003558:	c32a0000 	.word	0xc32a0000
 800355c:	40768000 	.word	0x40768000
 8003560:	20000a94 	.word	0x20000a94
 8003564:	20002b38 	.word	0x20002b38
 8003568:	20002b3c 	.word	0x20002b3c
 800356c:	20002b34 	.word	0x20002b34
 8003570:	20002b40 	.word	0x20002b40
 8003574:	20002b32 	.word	0x20002b32
 8003578:	20002b44 	.word	0x20002b44
 800357c:	20002b36 	.word	0x20002b36
 8003580:	20002b48 	.word	0x20002b48
 8003584:	200009b8 	.word	0x200009b8
 8003588:	20002b4c 	.word	0x20002b4c
 800358c:	3ba3d70a 	.word	0x3ba3d70a
 8003590:	ed97 7a5d 	vldr	s14, [r7, #372]	; 0x174
 8003594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003598:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
		  errd_roll = (err_roll - prev_err_roll)/SAMPLE_PERIOD;
 800359c:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 80035a0:	edd7 7a79 	vldr	s15, [r7, #484]	; 0x1e4
 80035a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035a8:	ed5f 6a08 	vldr	s13, [pc, #-32]	; 800358c <Start_Data_Reading+0xcc4>
 80035ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035b0:	edc7 7a65 	vstr	s15, [r7, #404]	; 0x194
		  prev_err_roll = err_roll;
 80035b4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80035b8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
		  control_roll = P_roll * err_roll + D_roll * errd_roll;
 80035bc:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 80035c0:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 80035c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035c8:	edd7 6a62 	vldr	s13, [r7, #392]	; 0x188
 80035cc:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 80035d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d8:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
		  debug_control2 = control_roll;
 80035dc:	4a9c      	ldr	r2, [pc, #624]	; (8003850 <Start_Data_Reading+0xf88>)
 80035de:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80035e2:	6013      	str	r3, [r2, #0]


		  //yaw angle control
		  err_angle_yaw = M_yaw - euler.angle.yaw;
 80035e4:	4b9b      	ldr	r3, [pc, #620]	; (8003854 <Start_Data_Reading+0xf8c>)
 80035e6:	ed93 7a00 	vldr	s14, [r3]
 80035ea:	4b9b      	ldr	r3, [pc, #620]	; (8003858 <Start_Data_Reading+0xf90>)
 80035ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80035f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035f4:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
		  errd_angle_yaw = (err_angle_yaw - prev_err_angle_yaw)/SAMPLE_PERIOD;
 80035f8:	ed97 7a57 	vldr	s14, [r7, #348]	; 0x15c
 80035fc:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 8003600:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003604:	eddf 6a95 	vldr	s13, [pc, #596]	; 800385c <Start_Data_Reading+0xf94>
 8003608:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800360c:	edc7 7a56 	vstr	s15, [r7, #344]	; 0x158
		  angle_control_yaw = P_angle_yaw * err_angle_yaw + D_angle_yaw * errd_angle_yaw;
 8003610:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
 8003614:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 8003618:	ee27 7a27 	vmul.f32	s14, s14, s15
 800361c:	edd7 6a58 	vldr	s13, [r7, #352]	; 0x160
 8003620:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 8003624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362c:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
		  prev_err_angle_yaw = err_angle_yaw;
 8003630:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003634:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0



		  //yaw angle velocity control
		  err_yaw = angle_control_yaw - imu.gyr_rps[2]; //angle_control_yaw
 8003638:	4b89      	ldr	r3, [pc, #548]	; (8003860 <Start_Data_Reading+0xf98>)
 800363a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800363e:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 8003642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003646:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170
		  errd_yaw = (err_yaw - prev_err_yaw)/SAMPLE_PERIOD;
 800364a:	ed97 7a5c 	vldr	s14, [r7, #368]	; 0x170
 800364e:	edd7 7a77 	vldr	s15, [r7, #476]	; 0x1dc
 8003652:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003656:	eddf 6a81 	vldr	s13, [pc, #516]	; 800385c <Start_Data_Reading+0xf94>
 800365a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800365e:	edc7 7a5b 	vstr	s15, [r7, #364]	; 0x16c
		  prev_err_yaw = err_yaw;
 8003662:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003666:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
		  control_yaw = P_yaw * err_yaw + D_yaw * errd_yaw;
 800366a:	ed97 7a76 	vldr	s14, [r7, #472]	; 0x1d8
 800366e:	edd7 7a5c 	vldr	s15, [r7, #368]	; 0x170
 8003672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003676:	edd7 6a75 	vldr	s13, [r7, #468]	; 0x1d4
 800367a:	edd7 7a5b 	vldr	s15, [r7, #364]	; 0x16c
 800367e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003686:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168



		  if(RX_arm > 1000){
 800368a:	4b76      	ldr	r3, [pc, #472]	; (8003864 <Start_Data_Reading+0xf9c>)
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003692:	f240 8084 	bls.w	800379e <Start_Data_Reading+0xed6>
			  uart_telemetria = 0;
 8003696:	4b74      	ldr	r3, [pc, #464]	; (8003868 <Start_Data_Reading+0xfa0>)
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
//			  ref2 = (uint16_t)(M_throttle + control_yaw);
//			  ref3 = (uint16_t)(M_throttle - control_yaw);
//			  ref4 = (uint16_t)(M_throttle + control_yaw);

			  //all together
			  ref1 = (uint16_t)(M_throttle - control_yaw - control_pitch + control_roll);
 800369c:	4b73      	ldr	r3, [pc, #460]	; (800386c <Start_Data_Reading+0xfa4>)
 800369e:	ed93 7a00 	vldr	s14, [r3]
 80036a2:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 80036a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036aa:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80036ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036b2:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 80036b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036be:	ee17 3a90 	vmov	r3, s15
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	4b6a      	ldr	r3, [pc, #424]	; (8003870 <Start_Data_Reading+0xfa8>)
 80036c6:	801a      	strh	r2, [r3, #0]
			  ref2 = (uint16_t)(M_throttle + control_yaw - control_pitch - control_roll);
 80036c8:	4b68      	ldr	r3, [pc, #416]	; (800386c <Start_Data_Reading+0xfa4>)
 80036ca:	ed93 7a00 	vldr	s14, [r3]
 80036ce:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 80036d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036d6:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80036da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036de:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 80036e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ea:	ee17 3a90 	vmov	r3, s15
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	4b60      	ldr	r3, [pc, #384]	; (8003874 <Start_Data_Reading+0xfac>)
 80036f2:	801a      	strh	r2, [r3, #0]
			  ref3 = (uint16_t)(M_throttle - control_yaw + control_pitch - control_roll);
 80036f4:	4b5d      	ldr	r3, [pc, #372]	; (800386c <Start_Data_Reading+0xfa4>)
 80036f6:	ed93 7a00 	vldr	s14, [r3]
 80036fa:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 80036fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003702:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 8003706:	ee37 7a27 	vadd.f32	s14, s14, s15
 800370a:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 800370e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003716:	ee17 3a90 	vmov	r3, s15
 800371a:	b29a      	uxth	r2, r3
 800371c:	4b56      	ldr	r3, [pc, #344]	; (8003878 <Start_Data_Reading+0xfb0>)
 800371e:	801a      	strh	r2, [r3, #0]
			  ref4 = (uint16_t)(M_throttle + control_yaw + control_pitch + control_roll);
 8003720:	4b52      	ldr	r3, [pc, #328]	; (800386c <Start_Data_Reading+0xfa4>)
 8003722:	ed93 7a00 	vldr	s14, [r3]
 8003726:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
 800372a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800372e:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 8003732:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003736:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 800373a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800373e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003742:	ee17 3a90 	vmov	r3, s15
 8003746:	b29a      	uxth	r2, r3
 8003748:	4b4c      	ldr	r3, [pc, #304]	; (800387c <Start_Data_Reading+0xfb4>)
 800374a:	801a      	strh	r2, [r3, #0]
//			  ref1 = (uint16_t)(M_throttle);
//			  ref2 = (uint16_t)(M_throttle);
//			  ref3 = (uint16_t)(M_throttle);
//			  ref4 = (uint16_t)(M_throttle);

			  if(ref1<550) ref1 = 550;
 800374c:	4b48      	ldr	r3, [pc, #288]	; (8003870 <Start_Data_Reading+0xfa8>)
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	f240 2225 	movw	r2, #549	; 0x225
 8003754:	4293      	cmp	r3, r2
 8003756:	d803      	bhi.n	8003760 <Start_Data_Reading+0xe98>
 8003758:	4b45      	ldr	r3, [pc, #276]	; (8003870 <Start_Data_Reading+0xfa8>)
 800375a:	f240 2226 	movw	r2, #550	; 0x226
 800375e:	801a      	strh	r2, [r3, #0]
			  if(ref2<550) ref2 = 550;
 8003760:	4b44      	ldr	r3, [pc, #272]	; (8003874 <Start_Data_Reading+0xfac>)
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	f240 2225 	movw	r2, #549	; 0x225
 8003768:	4293      	cmp	r3, r2
 800376a:	d803      	bhi.n	8003774 <Start_Data_Reading+0xeac>
 800376c:	4b41      	ldr	r3, [pc, #260]	; (8003874 <Start_Data_Reading+0xfac>)
 800376e:	f240 2226 	movw	r2, #550	; 0x226
 8003772:	801a      	strh	r2, [r3, #0]
			  if(ref3<550) ref3 = 550;
 8003774:	4b40      	ldr	r3, [pc, #256]	; (8003878 <Start_Data_Reading+0xfb0>)
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	f240 2225 	movw	r2, #549	; 0x225
 800377c:	4293      	cmp	r3, r2
 800377e:	d803      	bhi.n	8003788 <Start_Data_Reading+0xec0>
 8003780:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <Start_Data_Reading+0xfb0>)
 8003782:	f240 2226 	movw	r2, #550	; 0x226
 8003786:	801a      	strh	r2, [r3, #0]
			  if(ref4<550) ref4 = 550;
 8003788:	4b3c      	ldr	r3, [pc, #240]	; (800387c <Start_Data_Reading+0xfb4>)
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	f240 2225 	movw	r2, #549	; 0x225
 8003790:	4293      	cmp	r3, r2
 8003792:	d82d      	bhi.n	80037f0 <Start_Data_Reading+0xf28>
 8003794:	4b39      	ldr	r3, [pc, #228]	; (800387c <Start_Data_Reading+0xfb4>)
 8003796:	f240 2226 	movw	r2, #550	; 0x226
 800379a:	801a      	strh	r2, [r3, #0]
 800379c:	e028      	b.n	80037f0 <Start_Data_Reading+0xf28>

		  }
		  else{
			  uart_telemetria = 1;
 800379e:	4b32      	ldr	r3, [pc, #200]	; (8003868 <Start_Data_Reading+0xfa0>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	701a      	strb	r2, [r3, #0]
			  if(new_P == 1){
 80037a4:	4b36      	ldr	r3, [pc, #216]	; (8003880 <Start_Data_Reading+0xfb8>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d106      	bne.n	80037ba <Start_Data_Reading+0xef2>
				  P_yaw = telem_P;
 80037ac:	4b35      	ldr	r3, [pc, #212]	; (8003884 <Start_Data_Reading+0xfbc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
				  new_P = 0;
 80037b4:	4b32      	ldr	r3, [pc, #200]	; (8003880 <Start_Data_Reading+0xfb8>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	701a      	strb	r2, [r3, #0]
			  }
			  if(new_D == 1){
 80037ba:	4b33      	ldr	r3, [pc, #204]	; (8003888 <Start_Data_Reading+0xfc0>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d106      	bne.n	80037d0 <Start_Data_Reading+0xf08>
				  D_yaw = telem_D;
 80037c2:	4b32      	ldr	r3, [pc, #200]	; (800388c <Start_Data_Reading+0xfc4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
				  new_D = 0;
 80037ca:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <Start_Data_Reading+0xfc0>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
			  }
			  ref1 = 550;
 80037d0:	4b27      	ldr	r3, [pc, #156]	; (8003870 <Start_Data_Reading+0xfa8>)
 80037d2:	f240 2226 	movw	r2, #550	; 0x226
 80037d6:	801a      	strh	r2, [r3, #0]
			  ref2 = 550;
 80037d8:	4b26      	ldr	r3, [pc, #152]	; (8003874 <Start_Data_Reading+0xfac>)
 80037da:	f240 2226 	movw	r2, #550	; 0x226
 80037de:	801a      	strh	r2, [r3, #0]
			  ref3 = 550;
 80037e0:	4b25      	ldr	r3, [pc, #148]	; (8003878 <Start_Data_Reading+0xfb0>)
 80037e2:	f240 2226 	movw	r2, #550	; 0x226
 80037e6:	801a      	strh	r2, [r3, #0]
			  ref4 = 550;
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <Start_Data_Reading+0xfb4>)
 80037ea:	f240 2226 	movw	r2, #550	; 0x226
 80037ee:	801a      	strh	r2, [r3, #0]

//		  telemetria_float[0] = magneto_data.axis.x;
//		  telemetria_float[1] = magneto_data.axis.y;
//		  telemetria_float[2] = magneto_data.axis.z;

		  telemetria_float[0] = euler.angle.roll;
 80037f0:	4b19      	ldr	r3, [pc, #100]	; (8003858 <Start_Data_Reading+0xf90>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80037f8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80037fc:	601a      	str	r2, [r3, #0]
		  telemetria_float[1] = euler.angle.pitch;
 80037fe:	4b16      	ldr	r3, [pc, #88]	; (8003858 <Start_Data_Reading+0xf90>)
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003806:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800380a:	605a      	str	r2, [r3, #4]
		  telemetria_float[2] = euler.angle.yaw;
 800380c:	4b12      	ldr	r3, [pc, #72]	; (8003858 <Start_Data_Reading+0xf90>)
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003814:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003818:	609a      	str	r2, [r3, #8]
		  xQueueSendToFront(telemetria_Queue, (void*)&telemetria_float, 0);
 800381a:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <Start_Data_Reading+0xfc8>)
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003822:	2301      	movs	r3, #1
 8003824:	2200      	movs	r2, #0
 8003826:	f00a fdd3 	bl	800e3d0 <xQueueGenericSend>



//		  set_duty_Oneshot42(&htim3, 550, 550, 550, 550);
		  set_duty_Oneshot42(&htim3, ref1, ref2, ref3, ref4);
 800382a:	4b11      	ldr	r3, [pc, #68]	; (8003870 <Start_Data_Reading+0xfa8>)
 800382c:	8819      	ldrh	r1, [r3, #0]
 800382e:	4b11      	ldr	r3, [pc, #68]	; (8003874 <Start_Data_Reading+0xfac>)
 8003830:	881a      	ldrh	r2, [r3, #0]
 8003832:	4b11      	ldr	r3, [pc, #68]	; (8003878 <Start_Data_Reading+0xfb0>)
 8003834:	8818      	ldrh	r0, [r3, #0]
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <Start_Data_Reading+0xfb4>)
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	4603      	mov	r3, r0
 800383e:	4815      	ldr	r0, [pc, #84]	; (8003894 <Start_Data_Reading+0xfcc>)
 8003840:	f001 fd2f 	bl	80052a2 <set_duty_Oneshot42>
	osDelay(3);
 8003844:	2003      	movs	r0, #3
 8003846:	f00a fc38 	bl	800e0ba <osDelay>
  {
 800384a:	f7ff ba6a 	b.w	8002d22 <Start_Data_Reading+0x45a>
 800384e:	bf00      	nop
 8003850:	20002b50 	.word	0x20002b50
 8003854:	20002b48 	.word	0x20002b48
 8003858:	20000b0c 	.word	0x20000b0c
 800385c:	3ba3d70a 	.word	0x3ba3d70a
 8003860:	200009b8 	.word	0x200009b8
 8003864:	20002b3a 	.word	0x20002b3a
 8003868:	20000b56 	.word	0x20000b56
 800386c:	20002b3c 	.word	0x20002b3c
 8003870:	20002ae4 	.word	0x20002ae4
 8003874:	20002ae6 	.word	0x20002ae6
 8003878:	20002ae8 	.word	0x20002ae8
 800387c:	20002aea 	.word	0x20002aea
 8003880:	20000b60 	.word	0x20000b60
 8003884:	20000b58 	.word	0x20000b58
 8003888:	20000b61 	.word	0x20000b61
 800388c:	20000b5c 	.word	0x20000b5c
 8003890:	20002b54 	.word	0x20002b54
 8003894:	200006d4 	.word	0x200006d4

08003898 <Start_Orientation>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Orientation */
void Start_Orientation(void const * argument)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
//		//filterUpdateIMU(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], &q );
//		filterUpdate(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], mag_data_y, -mag_data_x, mag_data_z, &q, &f);
//		eulerAngles(q, &roll, &pitch, &yaw);
//		oricalc = 0;
//	  }
    osDelay(1);
 80038a0:	2001      	movs	r0, #1
 80038a2:	f00a fc0a 	bl	800e0ba <osDelay>
 80038a6:	e7fb      	b.n	80038a0 <Start_Orientation+0x8>

080038a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038ac:	b672      	cpsid	i
}
 80038ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <Error_Handler+0x8>
	...

080038b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	4b12      	ldr	r3, [pc, #72]	; (8003908 <HAL_MspInit+0x54>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	4a11      	ldr	r2, [pc, #68]	; (8003908 <HAL_MspInit+0x54>)
 80038c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ca:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <HAL_MspInit+0x54>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_MspInit+0x54>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <HAL_MspInit+0x54>)
 80038e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6413      	str	r3, [r2, #64]	; 0x40
 80038e6:	4b08      	ldr	r3, [pc, #32]	; (8003908 <HAL_MspInit+0x54>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80038f2:	2200      	movs	r2, #0
 80038f4:	210f      	movs	r1, #15
 80038f6:	f06f 0001 	mvn.w	r0, #1
 80038fa:	f002 f964 	bl	8005bc6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800

0800390c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08e      	sub	sp, #56	; 0x38
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a45      	ldr	r2, [pc, #276]	; (8003a40 <HAL_ADC_MspInit+0x134>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d128      	bne.n	8003980 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	623b      	str	r3, [r7, #32]
 8003932:	4b44      	ldr	r3, [pc, #272]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	4a43      	ldr	r2, [pc, #268]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 8003938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393c:	6453      	str	r3, [r2, #68]	; 0x44
 800393e:	4b41      	ldr	r3, [pc, #260]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003946:	623b      	str	r3, [r7, #32]
 8003948:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	4b3d      	ldr	r3, [pc, #244]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4a3c      	ldr	r2, [pc, #240]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4b3a      	ldr	r3, [pc, #232]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CRNT_Pin;
 8003966:	2320      	movs	r3, #32
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800396a:	2303      	movs	r3, #3
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396e:	2300      	movs	r3, #0
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CRNT_GPIO_Port, &GPIO_InitStruct);
 8003972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003976:	4619      	mov	r1, r3
 8003978:	4833      	ldr	r0, [pc, #204]	; (8003a48 <HAL_ADC_MspInit+0x13c>)
 800397a:	f002 fd5d 	bl	8006438 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800397e:	e05a      	b.n	8003a36 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a31      	ldr	r2, [pc, #196]	; (8003a4c <HAL_ADC_MspInit+0x140>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d128      	bne.n	80039dc <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	4a2c      	ldr	r2, [pc, #176]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 8003994:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003998:	6453      	str	r3, [r2, #68]	; 0x44
 800399a:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	4b26      	ldr	r3, [pc, #152]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	4a25      	ldr	r2, [pc, #148]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6313      	str	r3, [r2, #48]	; 0x30
 80039b6:	4b23      	ldr	r3, [pc, #140]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80039c2:	2310      	movs	r3, #16
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039c6:	2303      	movs	r3, #3
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d2:	4619      	mov	r1, r3
 80039d4:	481c      	ldr	r0, [pc, #112]	; (8003a48 <HAL_ADC_MspInit+0x13c>)
 80039d6:	f002 fd2f 	bl	8006438 <HAL_GPIO_Init>
}
 80039da:	e02c      	b.n	8003a36 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <HAL_ADC_MspInit+0x144>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d127      	bne.n	8003a36 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 80039f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039f4:	6453      	str	r3, [r2, #68]	; 0x44
 80039f6:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	4a0e      	ldr	r2, [pc, #56]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	6313      	str	r3, [r2, #48]	; 0x30
 8003a12:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_ADC_MspInit+0x138>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a1e:	2308      	movs	r3, #8
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a22:	2303      	movs	r3, #3
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4808      	ldr	r0, [pc, #32]	; (8003a54 <HAL_ADC_MspInit+0x148>)
 8003a32:	f002 fd01 	bl	8006438 <HAL_GPIO_Init>
}
 8003a36:	bf00      	nop
 8003a38:	3738      	adds	r7, #56	; 0x38
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40012000 	.word	0x40012000
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40020000 	.word	0x40020000
 8003a4c:	40012100 	.word	0x40012100
 8003a50:	40012200 	.word	0x40012200
 8003a54:	40020800 	.word	0x40020800

08003a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08e      	sub	sp, #56	; 0x38
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a5c      	ldr	r2, [pc, #368]	; (8003be8 <HAL_I2C_MspInit+0x190>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d12d      	bne.n	8003ad6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	623b      	str	r3, [r7, #32]
 8003a7e:	4b5b      	ldr	r3, [pc, #364]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	4a5a      	ldr	r2, [pc, #360]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003a84:	f043 0302 	orr.w	r3, r3, #2
 8003a88:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8a:	4b58      	ldr	r3, [pc, #352]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	623b      	str	r3, [r7, #32]
 8003a94:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAGN_SCL_Pin|MAGN_SDA_Pin;
 8003a96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a9c:	2312      	movs	r3, #18
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	484f      	ldr	r0, [pc, #316]	; (8003bf0 <HAL_I2C_MspInit+0x198>)
 8003ab4:	f002 fcc0 	bl	8006438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	4a4a      	ldr	r2, [pc, #296]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003ac2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac8:	4b48      	ldr	r3, [pc, #288]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003ad4:	e083      	b.n	8003bde <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a46      	ldr	r2, [pc, #280]	; (8003bf4 <HAL_I2C_MspInit+0x19c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d12d      	bne.n	8003b3c <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	4b41      	ldr	r3, [pc, #260]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	4a40      	ldr	r2, [pc, #256]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003aea:	f043 0302 	orr.w	r3, r3, #2
 8003aee:	6313      	str	r3, [r2, #48]	; 0x30
 8003af0:	4b3e      	ldr	r3, [pc, #248]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PRESS_SCL_Pin|PRESS_SDA_Pin;
 8003afc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b02:	2312      	movs	r3, #18
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003b0e:	2304      	movs	r3, #4
 8003b10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b16:	4619      	mov	r1, r3
 8003b18:	4835      	ldr	r0, [pc, #212]	; (8003bf0 <HAL_I2C_MspInit+0x198>)
 8003b1a:	f002 fc8d 	bl	8006438 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	4b32      	ldr	r3, [pc, #200]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	4a31      	ldr	r2, [pc, #196]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003b28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2e:	4b2f      	ldr	r3, [pc, #188]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697b      	ldr	r3, [r7, #20]
}
 8003b3a:	e050      	b.n	8003bde <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a2d      	ldr	r2, [pc, #180]	; (8003bf8 <HAL_I2C_MspInit+0x1a0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d14b      	bne.n	8003bde <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	4b28      	ldr	r3, [pc, #160]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a27      	ldr	r2, [pc, #156]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b25      	ldr	r3, [pc, #148]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	4b21      	ldr	r3, [pc, #132]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	4a20      	ldr	r2, [pc, #128]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30
 8003b72:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b84:	2312      	movs	r3, #18
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b90:	2304      	movs	r3, #4
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4818      	ldr	r0, [pc, #96]	; (8003bfc <HAL_I2C_MspInit+0x1a4>)
 8003b9c:	f002 fc4c 	bl	8006438 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ba6:	2312      	movs	r3, #18
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003bb2:	2304      	movs	r3, #4
 8003bb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4810      	ldr	r0, [pc, #64]	; (8003c00 <HAL_I2C_MspInit+0x1a8>)
 8003bbe:	f002 fc3b 	bl	8006438 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	4a08      	ldr	r2, [pc, #32]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003bcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_I2C_MspInit+0x194>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
}
 8003bde:	bf00      	nop
 8003be0:	3738      	adds	r7, #56	; 0x38
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40005400 	.word	0x40005400
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40020400 	.word	0x40020400
 8003bf4:	40005800 	.word	0x40005800
 8003bf8:	40005c00 	.word	0x40005c00
 8003bfc:	40020800 	.word	0x40020800
 8003c00:	40020000 	.word	0x40020000

08003c04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <HAL_SPI_MspInit+0x84>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d12c      	bne.n	8003c80 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	4b18      	ldr	r3, [pc, #96]	; (8003c8c <HAL_SPI_MspInit+0x88>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	4a17      	ldr	r2, [pc, #92]	; (8003c8c <HAL_SPI_MspInit+0x88>)
 8003c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c34:	6413      	str	r3, [r2, #64]	; 0x40
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <HAL_SPI_MspInit+0x88>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <HAL_SPI_MspInit+0x88>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	4a10      	ldr	r2, [pc, #64]	; (8003c8c <HAL_SPI_MspInit+0x88>)
 8003c4c:	f043 0302 	orr.w	r3, r3, #2
 8003c50:	6313      	str	r3, [r2, #48]	; 0x30
 8003c52:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <HAL_SPI_MspInit+0x88>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8003c5e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c64:	2302      	movs	r3, #2
 8003c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c70:	2305      	movs	r3, #5
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4805      	ldr	r0, [pc, #20]	; (8003c90 <HAL_SPI_MspInit+0x8c>)
 8003c7c:	f002 fbdc 	bl	8006438 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003c80:	bf00      	nop
 8003c82:	3728      	adds	r7, #40	; 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40003800 	.word	0x40003800
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40020400 	.word	0x40020400

08003c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08e      	sub	sp, #56	; 0x38
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	60da      	str	r2, [r3, #12]
 8003caa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb4:	d134      	bne.n	8003d20 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	623b      	str	r3, [r7, #32]
 8003cba:	4b55      	ldr	r3, [pc, #340]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	4a54      	ldr	r2, [pc, #336]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc6:	4b52      	ldr	r3, [pc, #328]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	623b      	str	r3, [r7, #32]
 8003cd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	4b4e      	ldr	r3, [pc, #312]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	4a4d      	ldr	r2, [pc, #308]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce2:	4b4b      	ldr	r3, [pc, #300]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	61fb      	str	r3, [r7, #28]
 8003cec:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d06:	4619      	mov	r1, r3
 8003d08:	4842      	ldr	r0, [pc, #264]	; (8003e14 <HAL_TIM_Base_MspInit+0x180>)
 8003d0a:	f002 fb95 	bl	8006438 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2105      	movs	r1, #5
 8003d12:	201c      	movs	r0, #28
 8003d14:	f001 ff57 	bl	8005bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d18:	201c      	movs	r0, #28
 8003d1a:	f001 ff70 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003d1e:	e072      	b.n	8003e06 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM3)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a3c      	ldr	r2, [pc, #240]	; (8003e18 <HAL_TIM_Base_MspInit+0x184>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d10e      	bne.n	8003d48 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	4b38      	ldr	r3, [pc, #224]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	4a37      	ldr	r2, [pc, #220]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003d34:	f043 0302 	orr.w	r3, r3, #2
 8003d38:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3a:	4b35      	ldr	r3, [pc, #212]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	69bb      	ldr	r3, [r7, #24]
}
 8003d46:	e05e      	b.n	8003e06 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM4)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a33      	ldr	r2, [pc, #204]	; (8003e1c <HAL_TIM_Base_MspInit+0x188>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d10e      	bne.n	8003d70 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	4a2d      	ldr	r2, [pc, #180]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003d5c:	f043 0304 	orr.w	r3, r3, #4
 8003d60:	6413      	str	r3, [r2, #64]	; 0x40
 8003d62:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	697b      	ldr	r3, [r7, #20]
}
 8003d6e:	e04a      	b.n	8003e06 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM6)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a2a      	ldr	r2, [pc, #168]	; (8003e20 <HAL_TIM_Base_MspInit+0x18c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d116      	bne.n	8003da8 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4a23      	ldr	r2, [pc, #140]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003d84:	f043 0310 	orr.w	r3, r3, #16
 8003d88:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8a:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2105      	movs	r1, #5
 8003d9a:	2036      	movs	r0, #54	; 0x36
 8003d9c:	f001 ff13 	bl	8005bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003da0:	2036      	movs	r0, #54	; 0x36
 8003da2:	f001 ff2c 	bl	8005bfe <HAL_NVIC_EnableIRQ>
}
 8003da6:	e02e      	b.n	8003e06 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM7)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <HAL_TIM_Base_MspInit+0x190>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d116      	bne.n	8003de0 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	4b16      	ldr	r3, [pc, #88]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003dbc:	f043 0320 	orr.w	r3, r3, #32
 8003dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc2:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2105      	movs	r1, #5
 8003dd2:	2037      	movs	r0, #55	; 0x37
 8003dd4:	f001 fef7 	bl	8005bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003dd8:	2037      	movs	r0, #55	; 0x37
 8003dda:	f001 ff10 	bl	8005bfe <HAL_NVIC_EnableIRQ>
}
 8003dde:	e012      	b.n	8003e06 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM10)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a10      	ldr	r2, [pc, #64]	; (8003e28 <HAL_TIM_Base_MspInit+0x194>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10d      	bne.n	8003e06 <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	4a07      	ldr	r2, [pc, #28]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_TIM_Base_MspInit+0x17c>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
}
 8003e06:	bf00      	nop
 8003e08:	3738      	adds	r7, #56	; 0x38
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40020000 	.word	0x40020000
 8003e18:	40000400 	.word	0x40000400
 8003e1c:	40000800 	.word	0x40000800
 8003e20:	40001000 	.word	0x40001000
 8003e24:	40001400 	.word	0x40001400
 8003e28:	40014400 	.word	0x40014400

08003e2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <HAL_TIM_MspPostInit+0xa4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d13b      	bne.n	8003ec6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	4b20      	ldr	r3, [pc, #128]	; (8003ed4 <HAL_TIM_MspPostInit+0xa8>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <HAL_TIM_MspPostInit+0xa8>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <HAL_TIM_MspPostInit+0xa8>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <HAL_TIM_MspPostInit+0xa8>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	4a18      	ldr	r2, [pc, #96]	; (8003ed4 <HAL_TIM_MspPostInit+0xa8>)
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7a:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <HAL_TIM_MspPostInit+0xa8>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8003e86:	23c0      	movs	r3, #192	; 0xc0
 8003e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e92:	2300      	movs	r3, #0
 8003e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e96:	2302      	movs	r3, #2
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e9a:	f107 0314 	add.w	r3, r7, #20
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	480d      	ldr	r0, [pc, #52]	; (8003ed8 <HAL_TIM_MspPostInit+0xac>)
 8003ea2:	f002 fac9 	bl	8006438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eba:	f107 0314 	add.w	r3, r7, #20
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4806      	ldr	r0, [pc, #24]	; (8003edc <HAL_TIM_MspPostInit+0xb0>)
 8003ec2:	f002 fab9 	bl	8006438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ec6:	bf00      	nop
 8003ec8:	3728      	adds	r7, #40	; 0x28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40000400 	.word	0x40000400
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	40020400 	.word	0x40020400

08003ee0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b090      	sub	sp, #64	; 0x40
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	605a      	str	r2, [r3, #4]
 8003ef2:	609a      	str	r2, [r3, #8]
 8003ef4:	60da      	str	r2, [r3, #12]
 8003ef6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a81      	ldr	r2, [pc, #516]	; (8004104 <HAL_UART_MspInit+0x224>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d15d      	bne.n	8003fbe <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f06:	4b80      	ldr	r3, [pc, #512]	; (8004108 <HAL_UART_MspInit+0x228>)
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	4a7f      	ldr	r2, [pc, #508]	; (8004108 <HAL_UART_MspInit+0x228>)
 8003f0c:	f043 0310 	orr.w	r3, r3, #16
 8003f10:	6453      	str	r3, [r2, #68]	; 0x44
 8003f12:	4b7d      	ldr	r3, [pc, #500]	; (8004108 <HAL_UART_MspInit+0x228>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
 8003f22:	4b79      	ldr	r3, [pc, #484]	; (8004108 <HAL_UART_MspInit+0x228>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	4a78      	ldr	r2, [pc, #480]	; (8004108 <HAL_UART_MspInit+0x228>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2e:	4b76      	ldr	r3, [pc, #472]	; (8004108 <HAL_UART_MspInit+0x228>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RECEIVER_TX_Pin|RECEIVER_RX_Pin;
 8003f3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f40:	2302      	movs	r3, #2
 8003f42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f4c:	2307      	movs	r3, #7
 8003f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f54:	4619      	mov	r1, r3
 8003f56:	486d      	ldr	r0, [pc, #436]	; (800410c <HAL_UART_MspInit+0x22c>)
 8003f58:	f002 fa6e 	bl	8006438 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003f5c:	4b6c      	ldr	r3, [pc, #432]	; (8004110 <HAL_UART_MspInit+0x230>)
 8003f5e:	4a6d      	ldr	r2, [pc, #436]	; (8004114 <HAL_UART_MspInit+0x234>)
 8003f60:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003f62:	4b6b      	ldr	r3, [pc, #428]	; (8004110 <HAL_UART_MspInit+0x230>)
 8003f64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f68:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f6a:	4b69      	ldr	r3, [pc, #420]	; (8004110 <HAL_UART_MspInit+0x230>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f70:	4b67      	ldr	r3, [pc, #412]	; (8004110 <HAL_UART_MspInit+0x230>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f76:	4b66      	ldr	r3, [pc, #408]	; (8004110 <HAL_UART_MspInit+0x230>)
 8003f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f7c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f7e:	4b64      	ldr	r3, [pc, #400]	; (8004110 <HAL_UART_MspInit+0x230>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f84:	4b62      	ldr	r3, [pc, #392]	; (8004110 <HAL_UART_MspInit+0x230>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003f8a:	4b61      	ldr	r3, [pc, #388]	; (8004110 <HAL_UART_MspInit+0x230>)
 8003f8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f90:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003f92:	4b5f      	ldr	r3, [pc, #380]	; (8004110 <HAL_UART_MspInit+0x230>)
 8003f94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f98:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f9a:	4b5d      	ldr	r3, [pc, #372]	; (8004110 <HAL_UART_MspInit+0x230>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003fa0:	485b      	ldr	r0, [pc, #364]	; (8004110 <HAL_UART_MspInit+0x230>)
 8003fa2:	f001 fe47 	bl	8005c34 <HAL_DMA_Init>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003fac:	f7ff fc7c 	bl	80038a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a57      	ldr	r2, [pc, #348]	; (8004110 <HAL_UART_MspInit+0x230>)
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38
 8003fb6:	4a56      	ldr	r2, [pc, #344]	; (8004110 <HAL_UART_MspInit+0x230>)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003fbc:	e09d      	b.n	80040fa <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART2)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a55      	ldr	r2, [pc, #340]	; (8004118 <HAL_UART_MspInit+0x238>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d134      	bne.n	8004032 <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fc8:	2300      	movs	r3, #0
 8003fca:	623b      	str	r3, [r7, #32]
 8003fcc:	4b4e      	ldr	r3, [pc, #312]	; (8004108 <HAL_UART_MspInit+0x228>)
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	4a4d      	ldr	r2, [pc, #308]	; (8004108 <HAL_UART_MspInit+0x228>)
 8003fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd8:	4b4b      	ldr	r3, [pc, #300]	; (8004108 <HAL_UART_MspInit+0x228>)
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe0:	623b      	str	r3, [r7, #32]
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61fb      	str	r3, [r7, #28]
 8003fe8:	4b47      	ldr	r3, [pc, #284]	; (8004108 <HAL_UART_MspInit+0x228>)
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	4a46      	ldr	r2, [pc, #280]	; (8004108 <HAL_UART_MspInit+0x228>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff4:	4b44      	ldr	r3, [pc, #272]	; (8004108 <HAL_UART_MspInit+0x228>)
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004000:	230c      	movs	r3, #12
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004004:	2302      	movs	r3, #2
 8004006:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004008:	2300      	movs	r3, #0
 800400a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400c:	2303      	movs	r3, #3
 800400e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004010:	2307      	movs	r3, #7
 8004012:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004018:	4619      	mov	r1, r3
 800401a:	483c      	ldr	r0, [pc, #240]	; (800410c <HAL_UART_MspInit+0x22c>)
 800401c:	f002 fa0c 	bl	8006438 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004020:	2200      	movs	r2, #0
 8004022:	2105      	movs	r1, #5
 8004024:	2026      	movs	r0, #38	; 0x26
 8004026:	f001 fdce 	bl	8005bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800402a:	2026      	movs	r0, #38	; 0x26
 800402c:	f001 fde7 	bl	8005bfe <HAL_NVIC_EnableIRQ>
}
 8004030:	e063      	b.n	80040fa <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART3)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a39      	ldr	r2, [pc, #228]	; (800411c <HAL_UART_MspInit+0x23c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d12d      	bne.n	8004098 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 800403c:	2300      	movs	r3, #0
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	4b31      	ldr	r3, [pc, #196]	; (8004108 <HAL_UART_MspInit+0x228>)
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	4a30      	ldr	r2, [pc, #192]	; (8004108 <HAL_UART_MspInit+0x228>)
 8004046:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800404a:	6413      	str	r3, [r2, #64]	; 0x40
 800404c:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <HAL_UART_MspInit+0x228>)
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	4b2a      	ldr	r3, [pc, #168]	; (8004108 <HAL_UART_MspInit+0x228>)
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	4a29      	ldr	r2, [pc, #164]	; (8004108 <HAL_UART_MspInit+0x228>)
 8004062:	f043 0304 	orr.w	r3, r3, #4
 8004066:	6313      	str	r3, [r2, #48]	; 0x30
 8004068:	4b27      	ldr	r3, [pc, #156]	; (8004108 <HAL_UART_MspInit+0x228>)
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8004074:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004078:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407a:	2302      	movs	r3, #2
 800407c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407e:	2300      	movs	r3, #0
 8004080:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004082:	2303      	movs	r3, #3
 8004084:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004086:	2307      	movs	r3, #7
 8004088:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800408a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800408e:	4619      	mov	r1, r3
 8004090:	4823      	ldr	r0, [pc, #140]	; (8004120 <HAL_UART_MspInit+0x240>)
 8004092:	f002 f9d1 	bl	8006438 <HAL_GPIO_Init>
}
 8004096:	e030      	b.n	80040fa <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART6)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a21      	ldr	r2, [pc, #132]	; (8004124 <HAL_UART_MspInit+0x244>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d12b      	bne.n	80040fa <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART6_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	4b18      	ldr	r3, [pc, #96]	; (8004108 <HAL_UART_MspInit+0x228>)
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	4a17      	ldr	r2, [pc, #92]	; (8004108 <HAL_UART_MspInit+0x228>)
 80040ac:	f043 0320 	orr.w	r3, r3, #32
 80040b0:	6453      	str	r3, [r2, #68]	; 0x44
 80040b2:	4b15      	ldr	r3, [pc, #84]	; (8004108 <HAL_UART_MspInit+0x228>)
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	4b11      	ldr	r3, [pc, #68]	; (8004108 <HAL_UART_MspInit+0x228>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	4a10      	ldr	r2, [pc, #64]	; (8004108 <HAL_UART_MspInit+0x228>)
 80040c8:	f043 0304 	orr.w	r3, r3, #4
 80040cc:	6313      	str	r3, [r2, #48]	; 0x30
 80040ce:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <HAL_UART_MspInit+0x228>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040da:	23c0      	movs	r3, #192	; 0xc0
 80040dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040de:	2302      	movs	r3, #2
 80040e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e6:	2303      	movs	r3, #3
 80040e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80040ea:	2308      	movs	r3, #8
 80040ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040f2:	4619      	mov	r1, r3
 80040f4:	480a      	ldr	r0, [pc, #40]	; (8004120 <HAL_UART_MspInit+0x240>)
 80040f6:	f002 f99f 	bl	8006438 <HAL_GPIO_Init>
}
 80040fa:	bf00      	nop
 80040fc:	3740      	adds	r7, #64	; 0x40
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40011000 	.word	0x40011000
 8004108:	40023800 	.word	0x40023800
 800410c:	40020000 	.word	0x40020000
 8004110:	2000094c 	.word	0x2000094c
 8004114:	40026440 	.word	0x40026440
 8004118:	40004400 	.word	0x40004400
 800411c:	40004800 	.word	0x40004800
 8004120:	40020800 	.word	0x40020800
 8004124:	40011400 	.word	0x40011400

08004128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800412c:	e7fe      	b.n	800412c <NMI_Handler+0x4>

0800412e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800412e:	b480      	push	{r7}
 8004130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004132:	e7fe      	b.n	8004132 <HardFault_Handler+0x4>

08004134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004138:	e7fe      	b.n	8004138 <MemManage_Handler+0x4>

0800413a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800413a:	b480      	push	{r7}
 800413c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800413e:	e7fe      	b.n	800413e <BusFault_Handler+0x4>

08004140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004144:	e7fe      	b.n	8004144 <UsageFault_Handler+0x4>

08004146 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004146:	b480      	push	{r7}
 8004148:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004158:	f001 f9b4 	bl	80054c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800415c:	f00b fa7c 	bl	800f658 <xTaskGetSchedulerState>
 8004160:	4603      	mov	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d001      	beq.n	800416a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004166:	f00b fd3f 	bl	800fbe8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}

0800416e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8004172:	2001      	movs	r0, #1
 8004174:	f002 fb30 	bl	80067d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004178:	bf00      	nop
 800417a:	bd80      	pop	{r7, pc}

0800417c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_PRESS_Pin);
 8004180:	2004      	movs	r0, #4
 8004182:	f002 fb29 	bl	80067d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004186:	bf00      	nop
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004190:	4802      	ldr	r0, [pc, #8]	; (800419c <TIM2_IRQHandler+0x10>)
 8004192:	f004 ffa2 	bl	80090da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004196:	bf00      	nop
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	2000068c 	.word	0x2000068c

080041a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041a4:	4802      	ldr	r0, [pc, #8]	; (80041b0 <USART2_IRQHandler+0x10>)
 80041a6:	f006 f9b9 	bl	800a51c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041aa:	bf00      	nop
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000880 	.word	0x20000880

080041b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_GYRO_Pin);
 80041b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80041bc:	f002 fb0c 	bl	80067d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_ACC_Pin);
 80041c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80041c4:	f002 fb08 	bl	80067d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_MAGN_Pin);
 80041c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041cc:	f002 fb04 	bl	80067d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80041d0:	bf00      	nop
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80041d8:	4802      	ldr	r0, [pc, #8]	; (80041e4 <TIM6_DAC_IRQHandler+0x10>)
 80041da:	f004 ff7e 	bl	80090da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000764 	.word	0x20000764

080041e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80041ec:	4802      	ldr	r0, [pc, #8]	; (80041f8 <TIM7_IRQHandler+0x10>)
 80041ee:	f004 ff74 	bl	80090da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	200007ac 	.word	0x200007ac

080041fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004200:	4802      	ldr	r0, [pc, #8]	; (800420c <DMA2_Stream2_IRQHandler+0x10>)
 8004202:	f001 feaf 	bl	8005f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	2000094c 	.word	0x2000094c

08004210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return 1;
 8004214:	2301      	movs	r3, #1
}
 8004216:	4618      	mov	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <_kill>:

int _kill(int pid, int sig)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800422a:	f00b ff17 	bl	801005c <__errno>
 800422e:	4603      	mov	r3, r0
 8004230:	2216      	movs	r2, #22
 8004232:	601a      	str	r2, [r3, #0]
  return -1;
 8004234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <_exit>:

void _exit (int status)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004248:	f04f 31ff 	mov.w	r1, #4294967295
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ffe7 	bl	8004220 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004252:	e7fe      	b.n	8004252 <_exit+0x12>

08004254 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e00a      	b.n	800427c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004266:	f3af 8000 	nop.w
 800426a:	4601      	mov	r1, r0
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	60ba      	str	r2, [r7, #8]
 8004272:	b2ca      	uxtb	r2, r1
 8004274:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	3301      	adds	r3, #1
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	dbf0      	blt.n	8004266 <_read+0x12>
  }

  return len;
 8004284:	687b      	ldr	r3, [r7, #4]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b086      	sub	sp, #24
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	e009      	b.n	80042b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	60ba      	str	r2, [r7, #8]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	3301      	adds	r3, #1
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	dbf1      	blt.n	80042a0 <_write+0x12>
  }
  return len;
 80042bc:	687b      	ldr	r3, [r7, #4]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <_close>:

int _close(int file)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042ee:	605a      	str	r2, [r3, #4]
  return 0;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <_isatty>:

int _isatty(int file)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004306:	2301      	movs	r3, #1
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004338:	4a14      	ldr	r2, [pc, #80]	; (800438c <_sbrk+0x5c>)
 800433a:	4b15      	ldr	r3, [pc, #84]	; (8004390 <_sbrk+0x60>)
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004344:	4b13      	ldr	r3, [pc, #76]	; (8004394 <_sbrk+0x64>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <_sbrk+0x64>)
 800434e:	4a12      	ldr	r2, [pc, #72]	; (8004398 <_sbrk+0x68>)
 8004350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004352:	4b10      	ldr	r3, [pc, #64]	; (8004394 <_sbrk+0x64>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4413      	add	r3, r2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	429a      	cmp	r2, r3
 800435e:	d207      	bcs.n	8004370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004360:	f00b fe7c 	bl	801005c <__errno>
 8004364:	4603      	mov	r3, r0
 8004366:	220c      	movs	r2, #12
 8004368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800436a:	f04f 33ff 	mov.w	r3, #4294967295
 800436e:	e009      	b.n	8004384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004370:	4b08      	ldr	r3, [pc, #32]	; (8004394 <_sbrk+0x64>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004376:	4b07      	ldr	r3, [pc, #28]	; (8004394 <_sbrk+0x64>)
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4413      	add	r3, r2
 800437e:	4a05      	ldr	r2, [pc, #20]	; (8004394 <_sbrk+0x64>)
 8004380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004382:	68fb      	ldr	r3, [r7, #12]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20020000 	.word	0x20020000
 8004390:	00000400 	.word	0x00000400
 8004394:	20002b58 	.word	0x20002b58
 8004398:	200068c8 	.word	0x200068c8

0800439c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <SystemInit+0x20>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a6:	4a05      	ldr	r2, [pc, #20]	; (80043bc <SystemInit+0x20>)
 80043a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80043c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043c4:	480d      	ldr	r0, [pc, #52]	; (80043fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043c6:	490e      	ldr	r1, [pc, #56]	; (8004400 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043c8:	4a0e      	ldr	r2, [pc, #56]	; (8004404 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043cc:	e002      	b.n	80043d4 <LoopCopyDataInit>

080043ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043d2:	3304      	adds	r3, #4

080043d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043d8:	d3f9      	bcc.n	80043ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043da:	4a0b      	ldr	r2, [pc, #44]	; (8004408 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043dc:	4c0b      	ldr	r4, [pc, #44]	; (800440c <LoopFillZerobss+0x26>)
  movs r3, #0
 80043de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043e0:	e001      	b.n	80043e6 <LoopFillZerobss>

080043e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043e4:	3204      	adds	r2, #4

080043e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043e8:	d3fb      	bcc.n	80043e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043ea:	f7ff ffd7 	bl	800439c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043ee:	f00b fe3b 	bl	8010068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043f2:	f7fd f8a3 	bl	800153c <main>
  bx  lr    
 80043f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004400:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004404:	08015d50 	.word	0x08015d50
  ldr r2, =_sbss
 8004408:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800440c:	200068c8 	.word	0x200068c8

08004410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004410:	e7fe      	b.n	8004410 <ADC_IRQHandler>
	...

08004414 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	887a      	ldrh	r2, [r7, #2]
 8004432:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a3a      	ldr	r2, [r7, #32]
 8004438:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800443e:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	75fb      	strb	r3, [r7, #23]
	/*
	 *
	 * ACCELEROMETER
	 *
	 */
	uint8_t chipID=2;
 8004450:	2302      	movs	r3, #2
 8004452:	75bb      	strb	r3, [r7, #22]
		}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		HAL_Delay(200);
	}*/
	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6858      	ldr	r0, [r3, #4]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	899b      	ldrh	r3, [r3, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	4619      	mov	r1, r3
 8004460:	f002 f986 	bl	8006770 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004464:	2001      	movs	r0, #1
 8004466:	f001 f84d 	bl	8005504 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6858      	ldr	r0, [r3, #4]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	899b      	ldrh	r3, [r3, #12]
 8004472:	2201      	movs	r2, #1
 8004474:	4619      	mov	r1, r3
 8004476:	f002 f97b 	bl	8006770 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800447a:	2032      	movs	r0, #50	; 0x32
 800447c:	f001 f842 	bl	8005504 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8004480:	22b6      	movs	r2, #182	; 0xb6
 8004482:	217e      	movs	r1, #126	; 0x7e
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f95b 	bl	8004740 <BMI088_WriteAccRegister>
 800448a:	4603      	mov	r3, r0
 800448c:	461a      	mov	r2, r3
 800448e:	7dfb      	ldrb	r3, [r7, #23]
 8004490:	4413      	add	r3, r2
 8004492:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8004494:	2032      	movs	r0, #50	; 0x32
 8004496:	f001 f835 	bl	8005504 <HAL_Delay>

	/* Check chip ID */
	chipID=2;
 800449a:	2302      	movs	r3, #2
 800449c:	75bb      	strb	r3, [r7, #22]

	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 800449e:	f107 0316 	add.w	r3, r7, #22
 80044a2:	461a      	mov	r2, r3
 80044a4:	2100      	movs	r1, #0
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f8d0 	bl	800464c <BMI088_ReadAccRegister>
 80044ac:	4603      	mov	r3, r0
 80044ae:	461a      	mov	r2, r3
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	4413      	add	r3, r2
 80044b4:	75fb      	strb	r3, [r7, #23]

	/*HAL_Delay(10);
	//status += BMI088_ReadAccRegister(imu, 0x02, &chipID); //0x02 ACC_ERR_REG return 0xFF ->fatal error
	status += BMI088_ReadAccRegister(imu, 0x02, &chipID);*/

	HAL_Delay(10);
 80044b6:	200a      	movs	r0, #10
 80044b8:	f001 f824 	bl	8005504 <HAL_Delay>

	/* Configure accelerometer  */

	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA9); /* (0xA8 no oversampling, ODR = 100 Hz, BW = 40 Hz), 200 Hz no oversampling 0xA9, 0x99 200Hz OSR2  */
 80044bc:	22a9      	movs	r2, #169	; 0xa9
 80044be:	2140      	movs	r1, #64	; 0x40
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f93d 	bl	8004740 <BMI088_WriteAccRegister>
 80044c6:	4603      	mov	r3, r0
 80044c8:	461a      	mov	r2, r3
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
 80044cc:	4413      	add	r3, r2
 80044ce:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80044d0:	200a      	movs	r0, #10
 80044d2:	f001 f817 	bl	8005504 <HAL_Delay>


	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 80044d6:	2200      	movs	r2, #0
 80044d8:	2141      	movs	r1, #65	; 0x41
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f930 	bl	8004740 <BMI088_WriteAccRegister>
 80044e0:	4603      	mov	r3, r0
 80044e2:	461a      	mov	r2, r3
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
 80044e6:	4413      	add	r3, r2
 80044e8:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80044ea:	200a      	movs	r0, #10
 80044ec:	f001 f80a 	bl	8005504 <HAL_Delay>


	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 80044f0:	220a      	movs	r2, #10
 80044f2:	2153      	movs	r1, #83	; 0x53
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f923 	bl	8004740 <BMI088_WriteAccRegister>
 80044fa:	4603      	mov	r3, r0
 80044fc:	461a      	mov	r2, r3
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
 8004500:	4413      	add	r3, r2
 8004502:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004504:	200a      	movs	r0, #10
 8004506:	f000 fffd 	bl	8005504 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);//ACC INT -> INT1
 800450a:	2204      	movs	r2, #4
 800450c:	2158      	movs	r1, #88	; 0x58
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f916 	bl	8004740 <BMI088_WriteAccRegister>
 8004514:	4603      	mov	r3, r0
 8004516:	461a      	mov	r2, r3
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	4413      	add	r3, r2
 800451c:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(10);
 800451e:	200a      	movs	r0, #10
 8004520:	f000 fff0 	bl	8005504 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8004524:	2200      	movs	r2, #0
 8004526:	217c      	movs	r1, #124	; 0x7c
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f909 	bl	8004740 <BMI088_WriteAccRegister>
 800452e:	4603      	mov	r3, r0
 8004530:	461a      	mov	r2, r3
 8004532:	7dfb      	ldrb	r3, [r7, #23]
 8004534:	4413      	add	r3, r2
 8004536:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004538:	200a      	movs	r0, #10
 800453a:	f000 ffe3 	bl	8005504 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 800453e:	2204      	movs	r2, #4
 8004540:	217d      	movs	r1, #125	; 0x7d
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f8fc 	bl	8004740 <BMI088_WriteAccRegister>
 8004548:	4603      	mov	r3, r0
 800454a:	461a      	mov	r2, r3
 800454c:	7dfb      	ldrb	r3, [r7, #23]
 800454e:	4413      	add	r3, r2
 8004550:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004552:	200a      	movs	r0, #10
 8004554:	f000 ffd6 	bl	8005504 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2), 9.81 g-constant, 32768 normalize raw data, 2^(<0x41>+1)*1.5, <0x41> is the acc range register */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4a3a      	ldr	r2, [pc, #232]	; (8004644 <BMI088_Init+0x230>)
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2292      	movs	r2, #146	; 0x92
 8004562:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6898      	ldr	r0, [r3, #8]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	89db      	ldrh	r3, [r3, #14]
 800456c:	2201      	movs	r2, #1
 800456e:	4619      	mov	r1, r3
 8004570:	f002 f8fe 	bl	8006770 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8004574:	22b6      	movs	r2, #182	; 0xb6
 8004576:	2114      	movs	r1, #20
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f91b 	bl	80047b4 <BMI088_WriteGyrRegister>
 800457e:	4603      	mov	r3, r0
 8004580:	461a      	mov	r2, r3
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	4413      	add	r3, r2
 8004586:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8004588:	20fa      	movs	r0, #250	; 0xfa
 800458a:	f000 ffbb 	bl	8005504 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 800458e:	f107 0316 	add.w	r3, r7, #22
 8004592:	461a      	mov	r2, r3
 8004594:	2100      	movs	r1, #0
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f896 	bl	80046c8 <BMI088_ReadGyrRegister>
 800459c:	4603      	mov	r3, r0
 800459e:	461a      	mov	r2, r3
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
 80045a2:	4413      	add	r3, r2
 80045a4:	75fb      	strb	r3, [r7, #23]

		//return 0;

	}

	HAL_Delay(10);
 80045a6:	200a      	movs	r0, #10
 80045a8:	f000 ffac 	bl	8005504 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 80045ac:	2201      	movs	r2, #1
 80045ae:	210f      	movs	r1, #15
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f8ff 	bl	80047b4 <BMI088_WriteGyrRegister>
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	4413      	add	r3, r2
 80045be:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80045c0:	200a      	movs	r0, #10
 80045c2:	f000 ff9f 	bl	8005504 <HAL_Delay>


	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* 0x07 ODR = 100 Hz, Filter bandwidth = 32 Hz, 0x06 BW = 64Hz ODR = 200 Hz, 0x04 ODR = 200Hz BW = 23Hz */
 80045c6:	2206      	movs	r2, #6
 80045c8:	2110      	movs	r1, #16
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 f8f2 	bl	80047b4 <BMI088_WriteGyrRegister>
 80045d0:	4603      	mov	r3, r0
 80045d2:	461a      	mov	r2, r3
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
 80045d6:	4413      	add	r3, r2
 80045d8:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80045da:	200a      	movs	r0, #10
 80045dc:	f000 ff92 	bl	8005504 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 80045e0:	2280      	movs	r2, #128	; 0x80
 80045e2:	2115      	movs	r1, #21
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f8e5 	bl	80047b4 <BMI088_WriteGyrRegister>
 80045ea:	4603      	mov	r3, r0
 80045ec:	461a      	mov	r2, r3
 80045ee:	7dfb      	ldrb	r3, [r7, #23]
 80045f0:	4413      	add	r3, r2
 80045f2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80045f4:	200a      	movs	r0, #10
 80045f6:	f000 ff85 	bl	8005504 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 80045fa:	2201      	movs	r2, #1
 80045fc:	2116      	movs	r1, #22
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f8d8 	bl	80047b4 <BMI088_WriteGyrRegister>
 8004604:	4603      	mov	r3, r0
 8004606:	461a      	mov	r2, r3
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	4413      	add	r3, r2
 800460c:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800460e:	200a      	movs	r0, #10
 8004610:	f000 ff78 	bl	8005504 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 8004614:	2201      	movs	r2, #1
 8004616:	2118      	movs	r1, #24
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f8cb 	bl	80047b4 <BMI088_WriteGyrRegister>
 800461e:	4603      	mov	r3, r0
 8004620:	461a      	mov	r2, r3
 8004622:	7dfb      	ldrb	r3, [r7, #23]
 8004624:	4413      	add	r3, r2
 8004626:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004628:	200a      	movs	r0, #10
 800462a:	f000 ff6b 	bl	8005504 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) 0.017 °/s -> rad/s, 1000 the range, 32768 normalize the raw data*/
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4a05      	ldr	r2, [pc, #20]	; (8004648 <BMI088_Init+0x234>)
 8004632:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2282      	movs	r2, #130	; 0x82
 8004638:	769a      	strb	r2, [r3, #26]

	return status;
 800463a:	7dfb      	ldrb	r3, [r7, #23]

}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	3a6b70a4 	.word	0x3a6b70a4
 8004648:	3a0ba058 	.word	0x3a0ba058

0800464c <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af02      	add	r7, sp, #8
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	460b      	mov	r3, r1
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 800465a:	7afb      	ldrb	r3, [r7, #11]
 800465c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004660:	b2db      	uxtb	r3, r3
 8004662:	753b      	strb	r3, [r7, #20]
 8004664:	2300      	movs	r3, #0
 8004666:	757b      	strb	r3, [r7, #21]
 8004668:	2300      	movs	r3, #0
 800466a:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6858      	ldr	r0, [r3, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	899b      	ldrh	r3, [r3, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	4619      	mov	r1, r3
 8004678:	f002 f87a 	bl	8006770 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	f107 0210 	add.w	r2, r7, #16
 8004684:	f107 0114 	add.w	r1, r7, #20
 8004688:	f04f 33ff 	mov.w	r3, #4294967295
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	2303      	movs	r3, #3
 8004690:	f004 f805 	bl	800869e <HAL_SPI_TransmitReceive>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	bf0c      	ite	eq
 800469a:	2301      	moveq	r3, #1
 800469c:	2300      	movne	r3, #0
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6858      	ldr	r0, [r3, #4]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	899b      	ldrh	r3, [r3, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	4619      	mov	r1, r3
 80046ae:	f002 f85f 	bl	8006770 <HAL_GPIO_WritePin>

	if (status == 1) {
 80046b2:	7dfb      	ldrb	r3, [r7, #23]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d102      	bne.n	80046be <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 80046b8:	7cba      	ldrb	r2, [r7, #18]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80046be:	7dfb      	ldrb	r3, [r7, #23]

}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	460b      	mov	r3, r1
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00}; //0x80
 80046d6:	7afb      	ldrb	r3, [r7, #11]
 80046d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	753b      	strb	r3, [r7, #20]
 80046e0:	2300      	movs	r3, #0
 80046e2:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6898      	ldr	r0, [r3, #8]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	89db      	ldrh	r3, [r3, #14]
 80046ec:	2200      	movs	r2, #0
 80046ee:	4619      	mov	r1, r3
 80046f0:	f002 f83e 	bl	8006770 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	f107 0210 	add.w	r2, r7, #16
 80046fc:	f107 0114 	add.w	r1, r7, #20
 8004700:	f04f 33ff 	mov.w	r3, #4294967295
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	2302      	movs	r3, #2
 8004708:	f003 ffc9 	bl	800869e <HAL_SPI_TransmitReceive>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6898      	ldr	r0, [r3, #8]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	89db      	ldrh	r3, [r3, #14]
 8004722:	2201      	movs	r2, #1
 8004724:	4619      	mov	r1, r3
 8004726:	f002 f823 	bl	8006770 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);*/

	if (status == 1) {
 800472a:	7dfb      	ldrb	r3, [r7, #23]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d102      	bne.n	8004736 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 8004730:	7c7a      	ldrb	r2, [r7, #17]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	701a      	strb	r2, [r3, #0]

	}

	return status;
 8004736:	7dfb      	ldrb	r3, [r7, #23]

}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	70fb      	strb	r3, [r7, #3]
 800474c:	4613      	mov	r3, r2
 800474e:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	733b      	strb	r3, [r7, #12]
 8004754:	78bb      	ldrb	r3, [r7, #2]
 8004756:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6858      	ldr	r0, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	899b      	ldrh	r3, [r3, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	4619      	mov	r1, r3
 8004764:	f002 f804 	bl	8006770 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6818      	ldr	r0, [r3, #0]
 800476c:	f107 010c 	add.w	r1, r7, #12
 8004770:	f04f 33ff 	mov.w	r3, #4294967295
 8004774:	2202      	movs	r2, #2
 8004776:	f003 fe56 	bl	8008426 <HAL_SPI_Transmit>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	bf0c      	ite	eq
 8004780:	2301      	moveq	r3, #1
 8004782:	2300      	movne	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8004788:	bf00      	nop
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f004 f927 	bl	80089e2 <HAL_SPI_GetState>
 8004794:	4603      	mov	r3, r0
 8004796:	2b01      	cmp	r3, #1
 8004798:	d1f7      	bne.n	800478a <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6858      	ldr	r0, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	899b      	ldrh	r3, [r3, #12]
 80047a2:	2201      	movs	r2, #1
 80047a4:	4619      	mov	r1, r3
 80047a6:	f001 ffe3 	bl	8006770 <HAL_GPIO_WritePin>

	return status;
 80047aa:	7bfb      	ldrb	r3, [r7, #15]

}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	70fb      	strb	r3, [r7, #3]
 80047c0:	4613      	mov	r3, r2
 80047c2:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	733b      	strb	r3, [r7, #12]
 80047c8:	78bb      	ldrb	r3, [r7, #2]
 80047ca:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6898      	ldr	r0, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	89db      	ldrh	r3, [r3, #14]
 80047d4:	2200      	movs	r2, #0
 80047d6:	4619      	mov	r1, r3
 80047d8:	f001 ffca 	bl	8006770 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	f107 010c 	add.w	r1, r7, #12
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295
 80047e8:	2202      	movs	r2, #2
 80047ea:	f003 fe1c 	bl	8008426 <HAL_SPI_Transmit>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	bf0c      	ite	eq
 80047f4:	2301      	moveq	r3, #1
 80047f6:	2300      	movne	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80047fc:	bf00      	nop
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f004 f8ed 	bl	80089e2 <HAL_SPI_GetState>
 8004808:	4603      	mov	r3, r0
 800480a:	2b01      	cmp	r3, #1
 800480c:	d1f7      	bne.n	80047fe <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6898      	ldr	r0, [r3, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	89db      	ldrh	r3, [r3, #14]
 8004816:	2201      	movs	r2, #1
 8004818:	4619      	mov	r1, r3
 800481a:	f001 ffa9 	bl	8006770 <HAL_GPIO_WritePin>

	return status;
 800481e:	7bfb      	ldrb	r3, [r7, #15]

}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	; 0x28
 800482c:	af02      	add	r7, sp, #8
 800482e:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 8004830:	4a36      	ldr	r2, [pc, #216]	; (800490c <BMI088_ReadAccelerometer+0xe4>)
 8004832:	f107 0310 	add.w	r3, r7, #16
 8004836:	e892 0003 	ldmia.w	r2, {r0, r1}
 800483a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6858      	ldr	r0, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	899b      	ldrh	r3, [r3, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	4619      	mov	r1, r3
 800484a:	f001 ff91 	bl	8006770 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	f107 0208 	add.w	r2, r7, #8
 8004856:	f107 0110 	add.w	r1, r7, #16
 800485a:	f04f 33ff 	mov.w	r3, #4294967295
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	2308      	movs	r3, #8
 8004862:	f003 ff1c 	bl	800869e <HAL_SPI_TransmitReceive>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf0c      	ite	eq
 800486c:	2301      	moveq	r3, #1
 800486e:	2300      	movne	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6858      	ldr	r0, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	899b      	ldrh	r3, [r3, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	4619      	mov	r1, r3
 8004880:	f001 ff76 	bl	8006770 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 8004884:	7afb      	ldrb	r3, [r7, #11]
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	b21a      	sxth	r2, r3
 800488a:	7abb      	ldrb	r3, [r7, #10]
 800488c:	b21b      	sxth	r3, r3
 800488e:	4313      	orrs	r3, r2
 8004890:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 8004892:	7b7b      	ldrb	r3, [r7, #13]
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	b21a      	sxth	r2, r3
 8004898:	7b3b      	ldrb	r3, [r7, #12]
 800489a:	b21b      	sxth	r3, r3
 800489c:	4313      	orrs	r3, r2
 800489e:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	b21a      	sxth	r2, r3
 80048a6:	7bbb      	ldrb	r3, [r7, #14]
 80048a8:	b21b      	sxth	r3, r3
 80048aa:	4313      	orrs	r3, r2
 80048ac:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80048b4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80048b8:	ee07 3a90 	vmov	s15, r3
 80048bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80048d0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80048d4:	ee07 3a90 	vmov	s15, r3
 80048d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80048ec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80048f0:	ee07 3a90 	vmov	s15, r3
 80048f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	return status;
 8004902:	7ffb      	ldrb	r3, [r7, #31]

}
 8004904:	4618      	mov	r0, r3
 8004906:	3720      	adds	r7, #32
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	080154c0 	.word	0x080154c0

08004910 <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af02      	add	r7, sp, #8
 8004916:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 8004918:	4a38      	ldr	r2, [pc, #224]	; (80049fc <BMI088_ReadGyroscope+0xec>)
 800491a:	f107 0310 	add.w	r3, r7, #16
 800491e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004922:	6018      	str	r0, [r3, #0]
 8004924:	3304      	adds	r3, #4
 8004926:	8019      	strh	r1, [r3, #0]
 8004928:	3302      	adds	r3, #2
 800492a:	0c0a      	lsrs	r2, r1, #16
 800492c:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6898      	ldr	r0, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	89db      	ldrh	r3, [r3, #14]
 8004936:	2200      	movs	r2, #0
 8004938:	4619      	mov	r1, r3
 800493a:	f001 ff19 	bl	8006770 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	f107 0208 	add.w	r2, r7, #8
 8004946:	f107 0110 	add.w	r1, r7, #16
 800494a:	f04f 33ff 	mov.w	r3, #4294967295
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	2307      	movs	r3, #7
 8004952:	f003 fea4 	bl	800869e <HAL_SPI_TransmitReceive>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6898      	ldr	r0, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	89db      	ldrh	r3, [r3, #14]
 800496c:	2201      	movs	r2, #1
 800496e:	4619      	mov	r1, r3
 8004970:	f001 fefe 	bl	8006770 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 8004974:	7abb      	ldrb	r3, [r7, #10]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	b21a      	sxth	r2, r3
 800497a:	7a7b      	ldrb	r3, [r7, #9]
 800497c:	b21b      	sxth	r3, r3
 800497e:	4313      	orrs	r3, r2
 8004980:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 8004982:	7b3b      	ldrb	r3, [r7, #12]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	b21a      	sxth	r2, r3
 8004988:	7afb      	ldrb	r3, [r7, #11]
 800498a:	b21b      	sxth	r3, r3
 800498c:	4313      	orrs	r3, r2
 800498e:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 8004990:	7bbb      	ldrb	r3, [r7, #14]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	b21a      	sxth	r2, r3
 8004996:	7b7b      	ldrb	r3, [r7, #13]
 8004998:	b21b      	sxth	r3, r3
 800499a:	4313      	orrs	r3, r2
 800499c:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;//-0.0000661263;//-0.000220318;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80049a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80049a8:	ee07 3a90 	vmov	s15, r3
 80049ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;//-0.000491353;//-0.001161367;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80049c0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;//-0.002349043;//-0.002582031;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80049dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	//own code line
	//if(status == 1) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	return status;
 80049f2:	7ffb      	ldrb	r3, [r7, #31]

}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	080154c8 	.word	0x080154c8

08004a00 <BMP388_Init>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_Init(BMP388_HandleTypeDef *bmp){
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t chip_id;

	// Read CHIP_ID byte
	rslt = BMP388_ReadBytes(bmp, CHIP_ID, &chip_id, 1);
 8004a08:	f107 020e 	add.w	r2, r7, #14
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	2100      	movs	r1, #0
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fc0a 	bl	800522a <BMP388_ReadBytes>
 8004a16:	4603      	mov	r3, r0
 8004a18:	73fb      	strb	r3, [r7, #15]
	if(rslt == HAL_OK && chip_id == BMP388_CHIP_ID){
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d12a      	bne.n	8004a76 <BMP388_Init+0x76>
 8004a20:	7bbb      	ldrb	r3, [r7, #14]
 8004a22:	2b50      	cmp	r3, #80	; 0x50
 8004a24:	d127      	bne.n	8004a76 <BMP388_Init+0x76>
		// using softreset command
		rslt = BMP388_SoftReset(bmp);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f964 	bl	8004cf4 <BMP388_SoftReset>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d11d      	bne.n	8004a72 <BMP388_Init+0x72>
			// get calibration data
			rslt = BMP388_GetCalibData(bmp);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f99c 	bl	8004d74 <BMP388_GetCalibData>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004a40:	bf00      	nop
		}
	}
	else{
		return rslt;
	}
	uint8_t pwr_ctrl = BMP388_PWR_CTRL_PRESS_ON | BMP388_PWR_CTRL_TEMP_ON | BMP388_PWR_CTRL_MODE_NORMAL;
 8004a42:	2333      	movs	r3, #51	; 0x33
 8004a44:	737b      	strb	r3, [r7, #13]

	uint8_t oversampling = bmp->_oversampling;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	791b      	ldrb	r3, [r3, #4]
 8004a4a:	733b      	strb	r3, [r7, #12]
	uint8_t odr = bmp->_odr;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	799b      	ldrb	r3, [r3, #6]
 8004a50:	72fb      	strb	r3, [r7, #11]
	uint8_t filtercoeff = bmp->_filtercoeff;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	795b      	ldrb	r3, [r3, #5]
 8004a56:	72bb      	strb	r3, [r7, #10]



	// Set OSR register
	rslt = BMP388_WriteBytes(bmp, OSR, &oversampling, 1);
 8004a58:	f107 020c 	add.w	r2, r7, #12
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	211c      	movs	r1, #28
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fc00 	bl	8005266 <BMP388_WriteBytes>
 8004a66:	4603      	mov	r3, r0
 8004a68:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d006      	beq.n	8004a7e <BMP388_Init+0x7e>
 8004a70:	e003      	b.n	8004a7a <BMP388_Init+0x7a>
			return rslt;
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	e03b      	b.n	8004aee <BMP388_Init+0xee>
		return rslt;
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	e039      	b.n	8004aee <BMP388_Init+0xee>
		return rslt;
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	e037      	b.n	8004aee <BMP388_Init+0xee>
	}
	// Set ODR register
	rslt = BMP388_WriteBytes(bmp, ODR, &odr, 1);
 8004a7e:	f107 020b 	add.w	r2, r7, #11
 8004a82:	2301      	movs	r3, #1
 8004a84:	211d      	movs	r1, #29
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fbed 	bl	8005266 <BMP388_WriteBytes>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <BMP388_Init+0x9a>
		return rslt;
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	e029      	b.n	8004aee <BMP388_Init+0xee>
	}
	// Set CONFIG register
	rslt = BMP388_WriteBytes(bmp, CONFIG, &filtercoeff, 1);
 8004a9a:	f107 020a 	add.w	r2, r7, #10
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	211f      	movs	r1, #31
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fbdf 	bl	8005266 <BMP388_WriteBytes>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <BMP388_Init+0xb6>
		return rslt;
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	e01b      	b.n	8004aee <BMP388_Init+0xee>
	}
	// Set PWR_CTRL register
	rslt = BMP388_WriteBytes(bmp, PWR_CTRL, &pwr_ctrl, 1);
 8004ab6:	f107 020d 	add.w	r2, r7, #13
 8004aba:	2301      	movs	r3, #1
 8004abc:	211b      	movs	r1, #27
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fbd1 	bl	8005266 <BMP388_WriteBytes>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <BMP388_Init+0xd2>
		return rslt;
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	e00d      	b.n	8004aee <BMP388_Init+0xee>
	}

	rslt = BMP388_WriteBytes(bmp, INT_CTRL, 0x40, 1);
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	2240      	movs	r2, #64	; 0x40
 8004ad6:	2119      	movs	r1, #25
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fbc4 	bl	8005266 <BMP388_WriteBytes>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <BMP388_Init+0xec>
		return rslt;
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	e000      	b.n	8004aee <BMP388_Init+0xee>
	}

	return rslt;
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <BMP388_SetTempOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetTempOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	460b      	mov	r3, r1
 8004b00:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	2b05      	cmp	r3, #5
 8004b06:	d901      	bls.n	8004b0c <BMP388_SetTempOS+0x16>
		return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e00e      	b.n	8004b2a <BMP388_SetTempOS+0x34>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11000111) | (oversample << 3); //& clear the temp OS bits and the | set the temp OS reg
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	791b      	ldrb	r3, [r3, #4]
 8004b10:	b25b      	sxtb	r3, r3
 8004b12:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004b16:	b25a      	sxtb	r2, r3
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	b25b      	sxtb	r3, r3
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	b25b      	sxtb	r3, r3
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <BMP388_SetPressOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetPressOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	2b05      	cmp	r3, #5
 8004b46:	d901      	bls.n	8004b4c <BMP388_SetPressOS+0x16>
		return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e00d      	b.n	8004b68 <BMP388_SetPressOS+0x32>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11111000) | oversample; //& clear the press OS bits and the | set the press OS reg
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	791b      	ldrb	r3, [r3, #4]
 8004b50:	b25b      	sxtb	r3, r3
 8004b52:	f023 0307 	bic.w	r3, r3, #7
 8004b56:	b25a      	sxtb	r2, r3
 8004b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	b25b      	sxtb	r3, r3
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <BMP388_SetIIRFilterCoeff>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong filter coefficient
 */
HAL_StatusTypeDef BMP388_SetIIRFilterCoeff(BMP388_HandleTypeDef *bmp, uint8_t filtercoeff){
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
	if(filtercoeff > BMP3_IIR_FILTER_COEFF_127){
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	2b07      	cmp	r3, #7
 8004b84:	d901      	bls.n	8004b8a <BMP388_SetIIRFilterCoeff+0x16>
		return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e005      	b.n	8004b96 <BMP388_SetIIRFilterCoeff+0x22>
	}
	bmp->_filtercoeff = filtercoeff << 1;
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <BMP388_SetOutputDataRate>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetOutputDataRate(BMP388_HandleTypeDef *bmp, uint8_t odr){
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	70fb      	strb	r3, [r7, #3]
	if(odr > BMP3_ODR_0_001_HZ){
 8004bae:	78fb      	ldrb	r3, [r7, #3]
 8004bb0:	2b11      	cmp	r3, #17
 8004bb2:	d901      	bls.n	8004bb8 <BMP388_SetOutputDataRate+0x16>
		return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e003      	b.n	8004bc0 <BMP388_SetOutputDataRate+0x1e>
	}
	bmp->_odr = odr;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	78fa      	ldrb	r2, [r7, #3]
 8004bbc:	719a      	strb	r2, [r3, #6]
	return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <BMP388_ReadRawPressTempTime>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadRawPressTempTime(BMP388_HandleTypeDef *bmp, uint32_t *raw_pressure, uint32_t *raw_temperature, uint32_t *time){
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
	}*/

	uint8_t raw_data[11]; //registers in order 0x04 - 0x06 press data, 0x07 - 0x09 temp data, 0x0A and 0x0B reserved, 0x0C - 0x0E time data -> 11 byte
	// Get raw data for pressure and temperature
	//rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 11);
	rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 6);
 8004bda:	f107 0214 	add.w	r2, r7, #20
 8004bde:	2306      	movs	r3, #6
 8004be0:	2104      	movs	r1, #4
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fb21 	bl	800522a <BMP388_ReadBytes>
 8004be8:	4603      	mov	r3, r0
 8004bea:	77fb      	strb	r3, [r7, #31]
	if(rslt != HAL_OK){
 8004bec:	7ffb      	ldrb	r3, [r7, #31]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <BMP388_ReadRawPressTempTime+0x2a>
		return rslt;
 8004bf2:	7ffb      	ldrb	r3, [r7, #31]
 8004bf4:	e012      	b.n	8004c1c <BMP388_ReadRawPressTempTime+0x50>
//	uint32_t data_xlsb;
//	uint32_t data_lsb;
//	uint32_t data_msb;

	// Parsing pressure data
	*raw_pressure = (uint32_t)raw_data[2] << 16 | (uint32_t)raw_data[1] << 8 | (uint32_t)raw_data[0];
 8004bf6:	7dbb      	ldrb	r3, [r7, #22]
 8004bf8:	041a      	lsls	r2, r3, #16
 8004bfa:	7d7b      	ldrb	r3, [r7, #21]
 8004bfc:	021b      	lsls	r3, r3, #8
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	7d3a      	ldrb	r2, [r7, #20]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	601a      	str	r2, [r3, #0]

	// Parsing temperature data
	*raw_temperature = (uint32_t)raw_data[5] << 16 | (uint32_t)raw_data[4] << 8 | (uint32_t)raw_data[3];
 8004c08:	7e7b      	ldrb	r3, [r7, #25]
 8004c0a:	041a      	lsls	r2, r3, #16
 8004c0c:	7e3b      	ldrb	r3, [r7, #24]
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	4313      	orrs	r3, r2
 8004c12:	7dfa      	ldrb	r2, [r7, #23]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	601a      	str	r2, [r3, #0]

	// Parsing time bytes
	//*time = (uint32_t)raw_data[10] << 16 | (uint32_t)raw_data[9] << 8 | (uint32_t)raw_data[8];


	return rslt;
 8004c1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3720      	adds	r7, #32
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <BMP388_CompensateRawPressTemp>:
 *	@param[out]	temperature		: Pointer to the variable that contain temperature.
 *
 *  @return none
 */
void BMP388_CompensateRawPressTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_pressure, uint32_t raw_temperature,
									  	  	  	  	  	  	  float *pressure, float *temperature){
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
	float temp;
	float press;

	BMP388_CompensateTemp(bmp, raw_temperature, &temp);
 8004c32:	f107 0314 	add.w	r3, r7, #20
 8004c36:	461a      	mov	r2, r3
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f9ee 	bl	800501c <BMP388_CompensateTemp>
	BMP388_CompensatePress(bmp, temp, raw_pressure, &press);
 8004c40:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c44:	f107 0310 	add.w	r3, r7, #16
 8004c48:	461a      	mov	r2, r3
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 fa19 	bl	8005088 <BMP388_CompensatePress>

	*pressure = press;
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	601a      	str	r2, [r3, #0]
	*temperature = temp;
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	601a      	str	r2, [r3, #0]
}
 8004c62:	bf00      	nop
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	0000      	movs	r0, r0
 8004c6c:	0000      	movs	r0, r0
	...

08004c70 <BMP388_FindAltitude>:
 *	@param[in] ground_pressure	: Pressure at ground
 *  @param[in] pressure			: Pressure that measured at flight.
 *
 *  @return Altitude
 */
float BMP388_FindAltitude(float ground_pressure, float pressure){
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	ed87 0a01 	vstr	s0, [r7, #4]
 8004c7a:	edc7 0a00 	vstr	s1, [r7]

	// Note that using the equation from wikipedia can give bad results
	// at high altitude. See this thread for more information:
	//  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

	return 44330.0 * (1.0 - pow(pressure / ground_pressure, 0.1903));
 8004c7e:	ed97 7a00 	vldr	s14, [r7]
 8004c82:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c86:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c8a:	ee16 0a90 	vmov	r0, s13
 8004c8e:	f7fb fc5b 	bl	8000548 <__aeabi_f2d>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8004ce0 <BMP388_FindAltitude+0x70>
 8004c9a:	ec43 2b10 	vmov	d0, r2, r3
 8004c9e:	f00e f937 	bl	8012f10 <pow>
 8004ca2:	ec53 2b10 	vmov	r2, r3, d0
 8004ca6:	f04f 0000 	mov.w	r0, #0
 8004caa:	4911      	ldr	r1, [pc, #68]	; (8004cf0 <BMP388_FindAltitude+0x80>)
 8004cac:	f7fb faec 	bl	8000288 <__aeabi_dsub>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	a30b      	add	r3, pc, #44	; (adr r3, 8004ce8 <BMP388_FindAltitude+0x78>)
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f7fb fc9b 	bl	80005f8 <__aeabi_dmul>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f7fb ff8d 	bl	8000be8 <__aeabi_d2f>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	ee07 3a90 	vmov	s15, r3
}
 8004cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	1a36e2eb 	.word	0x1a36e2eb
 8004ce4:	3fc85bc0 	.word	0x3fc85bc0
 8004ce8:	00000000 	.word	0x00000000
 8004cec:	40e5a540 	.word	0x40e5a540
 8004cf0:	3ff00000 	.word	0x3ff00000

08004cf4 <BMP388_SoftReset>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_SoftReset(BMP388_HandleTypeDef *bmp){
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	uint8_t rst_cmnd = BMP388_SOFTRESET;
 8004cfc:	23b6      	movs	r3, #182	; 0xb6
 8004cfe:	73bb      	strb	r3, [r7, #14]
    uint8_t cmd_err_status;

	HAL_StatusTypeDef rslt;

	// Reading STATUS reg to understand that the BMP388 is ready to receive command
	rslt = BMP388_ReadBytes(bmp, STATUS, &cmd_rdy_status, 1);
 8004d00:	f107 020d 	add.w	r2, r7, #13
 8004d04:	2301      	movs	r3, #1
 8004d06:	2103      	movs	r1, #3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fa8e 	bl	800522a <BMP388_ReadBytes>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	73fb      	strb	r3, [r7, #15]
	if((rslt == HAL_OK) && (cmd_rdy_status & BMP388_CMD_RDY)){
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d128      	bne.n	8004d6a <BMP388_SoftReset+0x76>
 8004d18:	7b7b      	ldrb	r3, [r7, #13]
 8004d1a:	f003 0310 	and.w	r3, r3, #16
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d023      	beq.n	8004d6a <BMP388_SoftReset+0x76>
		// Writing SOFTRESET command to CMD reg
		rslt = BMP388_WriteBytes(bmp, CMD, &rst_cmnd, 1);
 8004d22:	f107 020e 	add.w	r2, r7, #14
 8004d26:	2301      	movs	r3, #1
 8004d28:	217e      	movs	r1, #126	; 0x7e
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fa9b 	bl	8005266 <BMP388_WriteBytes>
 8004d30:	4603      	mov	r3, r0
 8004d32:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d115      	bne.n	8004d66 <BMP388_SoftReset+0x72>
			// 2 ms pause then check ERR reg
			HAL_Delay(2);
 8004d3a:	2002      	movs	r0, #2
 8004d3c:	f000 fbe2 	bl	8005504 <HAL_Delay>
			rslt = BMP388_ReadBytes(bmp, ERR_REG, &cmd_err_status, 1);
 8004d40:	f107 020c 	add.w	r2, r7, #12
 8004d44:	2301      	movs	r3, #1
 8004d46:	2102      	movs	r1, #2
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fa6e 	bl	800522a <BMP388_ReadBytes>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	73fb      	strb	r3, [r7, #15]
			if((cmd_err_status & CMD) || (rslt != HAL_OK)){
 8004d52:	7b3b      	ldrb	r3, [r7, #12]
 8004d54:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <BMP388_SoftReset+0x6e>
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <BMP388_SoftReset+0x76>
				return rslt;
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	e002      	b.n	8004d6c <BMP388_SoftReset+0x78>
			}
		}
		else{
			return rslt;
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	e000      	b.n	8004d6c <BMP388_SoftReset+0x78>
		}
	}

	return rslt;
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <BMP388_GetCalibData>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_GetCalibData(BMP388_HandleTypeDef *bmp){
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b090      	sub	sp, #64	; 0x40
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t calib_buff[BMP388_CALIBDATA_LEN] = {0};
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	f107 0310 	add.w	r3, r7, #16
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	605a      	str	r2, [r3, #4]
 8004d8a:	609a      	str	r2, [r3, #8]
 8004d8c:	60da      	str	r2, [r3, #12]
 8004d8e:	741a      	strb	r2, [r3, #16]
	int8_t		raw_par_p8;
	int16_t		raw_par_p9;
	int8_t		raw_par_p10;
	int8_t		raw_par_p11;

	rslt = BMP388_ReadBytes(bmp, CALIB_DATA, calib_buff, BMP388_CALIBDATA_LEN);
 8004d90:	f107 020c 	add.w	r2, r7, #12
 8004d94:	2315      	movs	r3, #21
 8004d96:	2131      	movs	r1, #49	; 0x31
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fa46 	bl	800522a <BMP388_ReadBytes>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	float temp_var;
	if(rslt == HAL_OK){
 8004da4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f040 812f 	bne.w	800500c <BMP388_GetCalibData+0x298>
		// PAR_T1
		temp_var = 0.00390625f;
 8004dae:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 8004db2:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t1 = ((uint16_t)calib_buff[1] << 8) | (uint16_t)calib_buff[0];
 8004db4:	7b7b      	ldrb	r3, [r7, #13]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	b21a      	sxth	r2, r3
 8004dba:	7b3b      	ldrb	r3, [r7, #12]
 8004dbc:	b21b      	sxth	r3, r3
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	b21b      	sxth	r3, r3
 8004dc2:	86fb      	strh	r3, [r7, #54]	; 0x36
		bmp->_calib_data.par_t1 = (float)raw_par_t1 / temp_var;
 8004dc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dce:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	edc3 7a02 	vstr	s15, [r3, #8]
		// PAR_T2
		temp_var = 1073741824.f;
 8004ddc:	f04f 439d 	mov.w	r3, #1317011456	; 0x4e800000
 8004de0:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t2 = ((uint16_t)calib_buff[3] << 8) | (uint16_t)calib_buff[2];
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	b21a      	sxth	r2, r3
 8004de8:	7bbb      	ldrb	r3, [r7, #14]
 8004dea:	b21b      	sxth	r3, r3
 8004dec:	4313      	orrs	r3, r2
 8004dee:	b21b      	sxth	r3, r3
 8004df0:	86bb      	strh	r3, [r7, #52]	; 0x34
		bmp->_calib_data.par_t2 = (float)raw_par_t2 / temp_var;
 8004df2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004df4:	ee07 3a90 	vmov	s15, r3
 8004df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	edc3 7a03 	vstr	s15, [r3, #12]
		// PAR_T3
		temp_var = 281474976710656.f;
 8004e0a:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004e0e:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t3 = calib_buff[4];
 8004e10:	7c3b      	ldrb	r3, [r7, #16]
 8004e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		bmp->_calib_data.par_t3 = (float)raw_par_t3 / temp_var;
 8004e16:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e22:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	edc3 7a04 	vstr	s15, [r3, #16]
		// PAR_P1
		temp_var = 1048576.f;
 8004e30:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 8004e34:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p1 = ((int16_t)calib_buff[6] << 8) | (int16_t)calib_buff[5];
 8004e36:	7cbb      	ldrb	r3, [r7, #18]
 8004e38:	021b      	lsls	r3, r3, #8
 8004e3a:	b21a      	sxth	r2, r3
 8004e3c:	7c7b      	ldrb	r3, [r7, #17]
 8004e3e:	b21b      	sxth	r3, r3
 8004e40:	4313      	orrs	r3, r2
 8004e42:	863b      	strh	r3, [r7, #48]	; 0x30
		bmp->_calib_data.par_p1 = ((float)raw_par_p1 - 16384) / temp_var;
 8004e44:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8004e48:	ee07 3a90 	vmov	s15, r3
 8004e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e50:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8005018 <BMP388_GetCalibData+0x2a4>
 8004e54:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004e58:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	edc3 7a05 	vstr	s15, [r3, #20]
		// PAR_P2
		temp_var = 536870912.f;
 8004e66:	f04f 439c 	mov.w	r3, #1308622848	; 0x4e000000
 8004e6a:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p2 = ((int16_t)calib_buff[8] << 8) | (int16_t)calib_buff[7];
 8004e6c:	7d3b      	ldrb	r3, [r7, #20]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	b21a      	sxth	r2, r3
 8004e72:	7cfb      	ldrb	r3, [r7, #19]
 8004e74:	b21b      	sxth	r3, r3
 8004e76:	4313      	orrs	r3, r2
 8004e78:	85fb      	strh	r3, [r7, #46]	; 0x2e
		bmp->_calib_data.par_p2 = ((float)raw_par_p2 - 16384) / temp_var;
 8004e7a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e86:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005018 <BMP388_GetCalibData+0x2a4>
 8004e8a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004e8e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	edc3 7a06 	vstr	s15, [r3, #24]
		// PAR_P3
		temp_var = 4294967296.f;
 8004e9c:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
 8004ea0:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p3 = (int8_t)calib_buff[9];
 8004ea2:	7d7b      	ldrb	r3, [r7, #21]
 8004ea4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		bmp->_calib_data.par_p3 = (float)raw_par_p3 / temp_var;
 8004ea8:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8004eac:	ee07 3a90 	vmov	s15, r3
 8004eb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004eb4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	edc3 7a07 	vstr	s15, [r3, #28]
		// PAR_P4
		temp_var = 137438953472.f;
 8004ec2:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8004ec6:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p4 = (int8_t)calib_buff[10];
 8004ec8:	7dbb      	ldrb	r3, [r7, #22]
 8004eca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		bmp->_calib_data.par_p4 = (float)raw_par_p4 / temp_var;
 8004ece:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004eda:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	edc3 7a08 	vstr	s15, [r3, #32]
		// PAR_P5
		temp_var = 0.125f;
 8004ee8:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8004eec:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p5 = ((uint16_t)calib_buff[12] << 8) | (uint16_t)calib_buff[11];
 8004eee:	7e3b      	ldrb	r3, [r7, #24]
 8004ef0:	021b      	lsls	r3, r3, #8
 8004ef2:	b21a      	sxth	r2, r3
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
 8004ef6:	b21b      	sxth	r3, r3
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	b21b      	sxth	r3, r3
 8004efc:	857b      	strh	r3, [r7, #42]	; 0x2a
		bmp->_calib_data.par_p5 = (float)raw_par_p5 / temp_var;
 8004efe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f00:	ee07 3a90 	vmov	s15, r3
 8004f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f08:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		// PAR_P6
		temp_var = 64.f;
 8004f16:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8004f1a:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p6 = ((uint16_t)calib_buff[14] << 8) | (uint16_t)calib_buff[13];
 8004f1c:	7ebb      	ldrb	r3, [r7, #26]
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	b21a      	sxth	r2, r3
 8004f22:	7e7b      	ldrb	r3, [r7, #25]
 8004f24:	b21b      	sxth	r3, r3
 8004f26:	4313      	orrs	r3, r2
 8004f28:	b21b      	sxth	r3, r3
 8004f2a:	853b      	strh	r3, [r7, #40]	; 0x28
		bmp->_calib_data.par_p6 = (float)raw_par_p6 / temp_var;
 8004f2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f36:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		// PAR_P7
		temp_var = 256.f;
 8004f44:	f04f 4387 	mov.w	r3, #1132462080	; 0x43800000
 8004f48:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p7 = (int8_t)calib_buff[15];
 8004f4a:	7efb      	ldrb	r3, [r7, #27]
 8004f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		bmp->_calib_data.par_p7 = (float)raw_par_p7 / temp_var;
 8004f50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f54:	ee07 3a90 	vmov	s15, r3
 8004f58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f5c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		// PAR_P8
		temp_var = 32768.f;
 8004f6a:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 8004f6e:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p8 = (int8_t)calib_buff[16];
 8004f70:	7f3b      	ldrb	r3, [r7, #28]
 8004f72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bmp->_calib_data.par_p8 = (float)raw_par_p8 / temp_var;
 8004f76:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f82:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		// PAR_P9
		temp_var = 281474976710656.f;
 8004f90:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004f94:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p9 = ((int16_t)calib_buff[18] << 8) | (int16_t)calib_buff[17];
 8004f96:	7fbb      	ldrb	r3, [r7, #30]
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	b21a      	sxth	r2, r3
 8004f9c:	7f7b      	ldrb	r3, [r7, #29]
 8004f9e:	b21b      	sxth	r3, r3
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	84bb      	strh	r3, [r7, #36]	; 0x24
		bmp->_calib_data.par_p9 = (float)raw_par_p9 / temp_var;
 8004fa4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004fa8:	ee07 3a90 	vmov	s15, r3
 8004fac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fb0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		// PAR_P10
		temp_var = 281474976710656.f;
 8004fbe:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004fc2:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p10 = (int8_t)calib_buff[19];
 8004fc4:	7ffb      	ldrb	r3, [r7, #31]
 8004fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		bmp->_calib_data.par_p10 = (float)raw_par_p10 / temp_var;
 8004fca:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fd6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// PAR_P11
		temp_var = 36893488147419103232.f;
 8004fe4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8004fe8:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p11 = (int8_t)calib_buff[20];
 8004fea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004fee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		bmp->_calib_data.par_p11 = (float)raw_par_p11 / temp_var;
 8004ff2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ffe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	return rslt;
 800500c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005010:	4618      	mov	r0, r3
 8005012:	3740      	adds	r7, #64	; 0x40
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	46800000 	.word	0x46800000

0800501c <BMP388_CompensateTemp>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
float BMP388_CompensateTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_temp, float *temp){
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
    float partial_data1 = (float)(raw_temp - bmp->_calib_data.par_t1);;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	edd3 7a02 	vldr	s15, [r3, #8]
 8005038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800503c:	edc7 7a05 	vstr	s15, [r7, #20]
    float partial_data2 = (float)(partial_data1 * bmp->_calib_data.par_t2);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	edd3 7a03 	vldr	s15, [r3, #12]
 8005046:	ed97 7a05 	vldr	s14, [r7, #20]
 800504a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504e:	edc7 7a04 	vstr	s15, [r7, #16]

    *temp = partial_data2 + (partial_data1 * partial_data1) * bmp->_calib_data.par_t3;
 8005052:	edd7 7a05 	vldr	s15, [r7, #20]
 8005056:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005060:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005064:	edd7 7a04 	vldr	s15, [r7, #16]
 8005068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	edc3 7a00 	vstr	s15, [r3]

    return *temp;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	ee07 3a90 	vmov	s15, r3
}
 800507a:	eeb0 0a67 	vmov.f32	s0, s15
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <BMP388_CompensatePress>:
 *	@param[out] press		: Measured pressure in Pa
 *
 *  @return Status of execution
 *  @retval = press			: Compensated pressure value
 */
float BMP388_CompensatePress(BMP388_HandleTypeDef *bmp, float temp, uint32_t raw_press, float *press){
 8005088:	b480      	push	{r7}
 800508a:	b08b      	sub	sp, #44	; 0x2c
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	ed87 0a02 	vstr	s0, [r7, #8]
 8005094:	6079      	str	r1, [r7, #4]
 8005096:	603a      	str	r2, [r7, #0]
    float partial_out1;
    float partial_out2;



    partial_data1 = bmp->_calib_data.par_p6 * temp;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800509e:	ed97 7a02 	vldr	s14, [r7, #8]
 80050a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p7 * (temp * temp);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80050b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80050b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80050b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050bc:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p8 * (temp * temp * temp);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80050c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80050ca:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80050ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80050d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050da:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out1 = bmp->_calib_data.par_p5 + partial_data1 + partial_data2 + partial_data3;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80050e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80050e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80050f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80050f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050fc:	edc7 7a06 	vstr	s15, [r7, #24]

    partial_data1 = bmp->_calib_data.par_p2 * temp;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	edd3 7a06 	vldr	s15, [r3, #24]
 8005106:	ed97 7a02 	vldr	s14, [r7, #8]
 800510a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p3 * (temp * temp);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	ed93 7a07 	vldr	s14, [r3, #28]
 8005118:	edd7 7a02 	vldr	s15, [r7, #8]
 800511c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005124:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p4 * (temp * temp * temp);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	ed93 7a08 	vldr	s14, [r3, #32]
 800512e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005132:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005136:	edd7 7a02 	vldr	s15, [r7, #8]
 800513a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800513e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005142:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out2 = (float)raw_press * (bmp->_calib_data.par_p1 + partial_data1 + partial_data2 + partial_data3);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	ee07 3a90 	vmov	s15, r3
 800514c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	edd3 6a05 	vldr	s13, [r3, #20]
 8005156:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800515a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800515e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005162:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005166:	edd7 7a07 	vldr	s15, [r7, #28]
 800516a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005172:	edc7 7a05 	vstr	s15, [r7, #20]

    partial_data1 = (float)raw_press * (float)raw_press;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	ee07 3a90 	vmov	s15, r3
 800517c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p9 + bmp->_calib_data.par_p10 * temp;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800519e:	edd7 7a02 	vldr	s15, [r7, #8]
 80051a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051aa:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = partial_data1 * partial_data2;
 80051ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80051b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80051b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ba:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_data4 = partial_data3 + ((float)raw_press * (float)raw_press * (float)raw_press) * bmp->_calib_data.par_p11;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	ee07 3a90 	vmov	s15, r3
 80051c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80051ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80051f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051f6:	edc7 7a04 	vstr	s15, [r7, #16]

    *press = partial_out1 + partial_out2 + partial_data4;
 80051fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80051fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8005202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005206:	edd7 7a04 	vldr	s15, [r7, #16]
 800520a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	edc3 7a00 	vstr	s15, [r3]

    return *press;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	ee07 3a90 	vmov	s15, r3
}
 800521c:	eeb0 0a67 	vmov.f32	s0, s15
 8005220:	372c      	adds	r7, #44	; 0x2c
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <BMP388_ReadBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 800522a:	b580      	push	{r7, lr}
 800522c:	b088      	sub	sp, #32
 800522e:	af04      	add	r7, sp, #16
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	461a      	mov	r2, r3
 8005236:	460b      	mov	r3, r1
 8005238:	72fb      	strb	r3, [r7, #11]
 800523a:	4613      	mov	r3, r2
 800523c:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	7afb      	ldrb	r3, [r7, #11]
 8005244:	b29a      	uxth	r2, r3
 8005246:	7abb      	ldrb	r3, [r7, #10]
 8005248:	b29b      	uxth	r3, r3
 800524a:	2164      	movs	r1, #100	; 0x64
 800524c:	9102      	str	r1, [sp, #8]
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	2301      	movs	r3, #1
 8005256:	21ec      	movs	r1, #236	; 0xec
 8005258:	f001 fd14 	bl	8006c84 <HAL_I2C_Mem_Read>
 800525c:	4603      	mov	r3, r0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <BMP388_WriteBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_WriteBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 8005266:	b580      	push	{r7, lr}
 8005268:	b088      	sub	sp, #32
 800526a:	af04      	add	r7, sp, #16
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	461a      	mov	r2, r3
 8005272:	460b      	mov	r3, r1
 8005274:	72fb      	strb	r3, [r7, #11]
 8005276:	4613      	mov	r3, r2
 8005278:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	7afb      	ldrb	r3, [r7, #11]
 8005280:	b29a      	uxth	r2, r3
 8005282:	7abb      	ldrb	r3, [r7, #10]
 8005284:	b29b      	uxth	r3, r3
 8005286:	2164      	movs	r1, #100	; 0x64
 8005288:	9102      	str	r1, [sp, #8]
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	2301      	movs	r3, #1
 8005292:	21ec      	movs	r1, #236	; 0xec
 8005294:	f001 fbfc 	bl	8006a90 <HAL_I2C_Mem_Write>
 8005298:	4603      	mov	r3, r0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <set_duty_Oneshot42>:
#define P_yaw 5
#define D_yaw 0



void set_duty_Oneshot42(TIM_HandleTypeDef* const pwmHandle1, uint16_t ref_1, uint16_t ref_2, uint16_t ref_3, uint16_t ref_4){
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	4608      	mov	r0, r1
 80052ac:	4611      	mov	r1, r2
 80052ae:	461a      	mov	r2, r3
 80052b0:	4603      	mov	r3, r0
 80052b2:	817b      	strh	r3, [r7, #10]
 80052b4:	460b      	mov	r3, r1
 80052b6:	813b      	strh	r3, [r7, #8]
 80052b8:	4613      	mov	r3, r2
 80052ba:	80fb      	strh	r3, [r7, #6]
	// Multishot42 12 kHz PSC 7-1, ARR 1000-1 -> 1000 = 100%, 500 = stop, ?0 = -100%?
	pwmHandle1 -> Instance -> CCR1 = ref_1;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	897a      	ldrh	r2, [r7, #10]
 80052c2:	635a      	str	r2, [r3, #52]	; 0x34
	pwmHandle1 -> Instance -> CCR2 = ref_2;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	893a      	ldrh	r2, [r7, #8]
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38
	pwmHandle1 -> Instance -> CCR3 = ref_3;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	88fa      	ldrh	r2, [r7, #6]
 80052d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pwmHandle1 -> Instance -> CCR4 = ref_4;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	8b3a      	ldrh	r2, [r7, #24]
 80052da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <CRSFtoDuty>:

float CRSFtoDuty(uint16_t CRSF_val){
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	80fb      	strh	r3, [r7, #6]
	float Duty;
//	Duty = 550+((float)(CRSF_val-172))/4.1; // minimum duty 55% max duty 95%
	Duty = 550+((float)(CRSF_val-172))/4.1*0.6; //for safety reasons minimum duty 55% max duty 79%
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	3bac      	subs	r3, #172	; 0xac
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052fe:	ee17 0a90 	vmov	r0, s15
 8005302:	f7fb f921 	bl	8000548 <__aeabi_f2d>
 8005306:	a315      	add	r3, pc, #84	; (adr r3, 800535c <CRSFtoDuty+0x74>)
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	f7fb fa9e 	bl	800084c <__aeabi_ddiv>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4610      	mov	r0, r2
 8005316:	4619      	mov	r1, r3
 8005318:	a312      	add	r3, pc, #72	; (adr r3, 8005364 <CRSFtoDuty+0x7c>)
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	f7fb f96b 	bl	80005f8 <__aeabi_dmul>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4610      	mov	r0, r2
 8005328:	4619      	mov	r1, r3
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <CRSFtoDuty+0x70>)
 8005330:	f7fa ffac 	bl	800028c <__adddf3>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4610      	mov	r0, r2
 800533a:	4619      	mov	r1, r3
 800533c:	f7fb fc54 	bl	8000be8 <__aeabi_d2f>
 8005340:	4603      	mov	r3, r0
 8005342:	60fb      	str	r3, [r7, #12]
	return Duty;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	ee07 3a90 	vmov	s15, r3
}
 800534a:	eeb0 0a67 	vmov.f32	s0, s15
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	f3af 8000 	nop.w
 8005358:	40813000 	.word	0x40813000
 800535c:	66666666 	.word	0x66666666
 8005360:	40106666 	.word	0x40106666
 8005364:	33333333 	.word	0x33333333
 8005368:	3fe33333 	.word	0x3fe33333

0800536c <CRSFtoPitch>:

float CRSFtoPitch(uint16_t CRSF_val){
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	80fb      	strh	r3, [r7, #6]
	float pitch;
	pitch = ((float)(CRSF_val-992))/820.0;
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005384:	eddf 6a07 	vldr	s13, [pc, #28]	; 80053a4 <CRSFtoPitch+0x38>
 8005388:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800538c:	edc7 7a03 	vstr	s15, [r7, #12]
	return pitch;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	ee07 3a90 	vmov	s15, r3
}
 8005396:	eeb0 0a67 	vmov.f32	s0, s15
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	444d0000 	.word	0x444d0000

080053a8 <CRSFtoRoll>:

float CRSFtoRoll(uint16_t CRSF_val){
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	80fb      	strh	r3, [r7, #6]
	float roll;
	roll = ((float)(CRSF_val-992))/820.0;
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80053b8:	ee07 3a90 	vmov	s15, r3
 80053bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053c0:	eddf 6a07 	vldr	s13, [pc, #28]	; 80053e0 <CRSFtoRoll+0x38>
 80053c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053c8:	edc7 7a03 	vstr	s15, [r7, #12]
	return roll;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	ee07 3a90 	vmov	s15, r3
}
 80053d2:	eeb0 0a67 	vmov.f32	s0, s15
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	444d0000 	.word	0x444d0000

080053e4 <CRSFtoYaw>:

float CRSFtoYaw(uint16_t CRSF_val){
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	80fb      	strh	r3, [r7, #6]
	float yaw;
	yaw = ((float)(CRSF_val-992))/820.0;
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80053f4:	ee07 3a90 	vmov	s15, r3
 80053f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053fc:	eddf 6a07 	vldr	s13, [pc, #28]	; 800541c <CRSFtoYaw+0x38>
 8005400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005404:	edc7 7a03 	vstr	s15, [r7, #12]
	return yaw;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	ee07 3a90 	vmov	s15, r3
}
 800540e:	eeb0 0a67 	vmov.f32	s0, s15
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	444d0000 	.word	0x444d0000

08005420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005424:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <HAL_Init+0x40>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a0d      	ldr	r2, [pc, #52]	; (8005460 <HAL_Init+0x40>)
 800542a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800542e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <HAL_Init+0x40>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a0a      	ldr	r2, [pc, #40]	; (8005460 <HAL_Init+0x40>)
 8005436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800543a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800543c:	4b08      	ldr	r3, [pc, #32]	; (8005460 <HAL_Init+0x40>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a07      	ldr	r2, [pc, #28]	; (8005460 <HAL_Init+0x40>)
 8005442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005448:	2003      	movs	r0, #3
 800544a:	f000 fbb1 	bl	8005bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800544e:	200f      	movs	r0, #15
 8005450:	f000 f808 	bl	8005464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005454:	f7fe fa2e 	bl	80038b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	40023c00 	.word	0x40023c00

08005464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800546c:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <HAL_InitTick+0x54>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b12      	ldr	r3, [pc, #72]	; (80054bc <HAL_InitTick+0x58>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	4619      	mov	r1, r3
 8005476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800547a:	fbb3 f3f1 	udiv	r3, r3, r1
 800547e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fbc9 	bl	8005c1a <HAL_SYSTICK_Config>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e00e      	b.n	80054b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b0f      	cmp	r3, #15
 8005496:	d80a      	bhi.n	80054ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005498:	2200      	movs	r2, #0
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	f000 fb91 	bl	8005bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054a4:	4a06      	ldr	r2, [pc, #24]	; (80054c0 <HAL_InitTick+0x5c>)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e000      	b.n	80054b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	2000000c 	.word	0x2000000c
 80054bc:	20000014 	.word	0x20000014
 80054c0:	20000010 	.word	0x20000010

080054c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054c8:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <HAL_IncTick+0x20>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <HAL_IncTick+0x24>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4413      	add	r3, r2
 80054d4:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <HAL_IncTick+0x24>)
 80054d6:	6013      	str	r3, [r2, #0]
}
 80054d8:	bf00      	nop
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20000014 	.word	0x20000014
 80054e8:	20002b5c 	.word	0x20002b5c

080054ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  return uwTick;
 80054f0:	4b03      	ldr	r3, [pc, #12]	; (8005500 <HAL_GetTick+0x14>)
 80054f2:	681b      	ldr	r3, [r3, #0]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20002b5c 	.word	0x20002b5c

08005504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800550c:	f7ff ffee 	bl	80054ec <HAL_GetTick>
 8005510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551c:	d005      	beq.n	800552a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800551e:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <HAL_Delay+0x44>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800552a:	bf00      	nop
 800552c:	f7ff ffde 	bl	80054ec <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	429a      	cmp	r2, r3
 800553a:	d8f7      	bhi.n	800552c <HAL_Delay+0x28>
  {
  }
}
 800553c:	bf00      	nop
 800553e:	bf00      	nop
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000014 	.word	0x20000014

0800554c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e033      	b.n	80055ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fe f9ce 	bl	800390c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f003 0310 	and.w	r3, r3, #16
 8005586:	2b00      	cmp	r3, #0
 8005588:	d118      	bne.n	80055bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005592:	f023 0302 	bic.w	r3, r3, #2
 8005596:	f043 0202 	orr.w	r2, r3, #2
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f93a 	bl	8005818 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	f023 0303 	bic.w	r3, r3, #3
 80055b2:	f043 0201 	orr.w	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	641a      	str	r2, [r3, #64]	; 0x40
 80055ba:	e001      	b.n	80055c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x1c>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e105      	b.n	80057fc <HAL_ADC_ConfigChannel+0x228>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b09      	cmp	r3, #9
 80055fe:	d925      	bls.n	800564c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68d9      	ldr	r1, [r3, #12]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	4613      	mov	r3, r2
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4413      	add	r3, r2
 8005614:	3b1e      	subs	r3, #30
 8005616:	2207      	movs	r2, #7
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	43da      	mvns	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	400a      	ands	r2, r1
 8005624:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68d9      	ldr	r1, [r3, #12]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	b29b      	uxth	r3, r3
 8005636:	4618      	mov	r0, r3
 8005638:	4603      	mov	r3, r0
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	4403      	add	r3, r0
 800563e:	3b1e      	subs	r3, #30
 8005640:	409a      	lsls	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	60da      	str	r2, [r3, #12]
 800564a:	e022      	b.n	8005692 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6919      	ldr	r1, [r3, #16]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	4613      	mov	r3, r2
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	4413      	add	r3, r2
 8005660:	2207      	movs	r2, #7
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	43da      	mvns	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	400a      	ands	r2, r1
 800566e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6919      	ldr	r1, [r3, #16]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	4618      	mov	r0, r3
 8005682:	4603      	mov	r3, r0
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	4403      	add	r3, r0
 8005688:	409a      	lsls	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b06      	cmp	r3, #6
 8005698:	d824      	bhi.n	80056e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	3b05      	subs	r3, #5
 80056ac:	221f      	movs	r2, #31
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	43da      	mvns	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	400a      	ands	r2, r1
 80056ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	4618      	mov	r0, r3
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	3b05      	subs	r3, #5
 80056d6:	fa00 f203 	lsl.w	r2, r0, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	635a      	str	r2, [r3, #52]	; 0x34
 80056e2:	e04c      	b.n	800577e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b0c      	cmp	r3, #12
 80056ea:	d824      	bhi.n	8005736 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	3b23      	subs	r3, #35	; 0x23
 80056fe:	221f      	movs	r2, #31
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	43da      	mvns	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	400a      	ands	r2, r1
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	4618      	mov	r0, r3
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	3b23      	subs	r3, #35	; 0x23
 8005728:	fa00 f203 	lsl.w	r2, r0, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
 8005734:	e023      	b.n	800577e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	3b41      	subs	r3, #65	; 0x41
 8005748:	221f      	movs	r2, #31
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	43da      	mvns	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	400a      	ands	r2, r1
 8005756:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	4618      	mov	r0, r3
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	3b41      	subs	r3, #65	; 0x41
 8005772:	fa00 f203 	lsl.w	r2, r0, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800577e:	4b22      	ldr	r3, [pc, #136]	; (8005808 <HAL_ADC_ConfigChannel+0x234>)
 8005780:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a21      	ldr	r2, [pc, #132]	; (800580c <HAL_ADC_ConfigChannel+0x238>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d109      	bne.n	80057a0 <HAL_ADC_ConfigChannel+0x1cc>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b12      	cmp	r3, #18
 8005792:	d105      	bne.n	80057a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a19      	ldr	r2, [pc, #100]	; (800580c <HAL_ADC_ConfigChannel+0x238>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d123      	bne.n	80057f2 <HAL_ADC_ConfigChannel+0x21e>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b10      	cmp	r3, #16
 80057b0:	d003      	beq.n	80057ba <HAL_ADC_ConfigChannel+0x1e6>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b11      	cmp	r3, #17
 80057b8:	d11b      	bne.n	80057f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b10      	cmp	r3, #16
 80057cc:	d111      	bne.n	80057f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80057ce:	4b10      	ldr	r3, [pc, #64]	; (8005810 <HAL_ADC_ConfigChannel+0x23c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a10      	ldr	r2, [pc, #64]	; (8005814 <HAL_ADC_ConfigChannel+0x240>)
 80057d4:	fba2 2303 	umull	r2, r3, r2, r3
 80057d8:	0c9a      	lsrs	r2, r3, #18
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80057e4:	e002      	b.n	80057ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f9      	bne.n	80057e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	40012300 	.word	0x40012300
 800580c:	40012000 	.word	0x40012000
 8005810:	2000000c 	.word	0x2000000c
 8005814:	431bde83 	.word	0x431bde83

08005818 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005820:	4b79      	ldr	r3, [pc, #484]	; (8005a08 <ADC_Init+0x1f0>)
 8005822:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	431a      	orrs	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800584c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6859      	ldr	r1, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	021a      	lsls	r2, r3, #8
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005870:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6859      	ldr	r1, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005892:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6899      	ldr	r1, [r3, #8]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	4a58      	ldr	r2, [pc, #352]	; (8005a0c <ADC_Init+0x1f4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d022      	beq.n	80058f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6899      	ldr	r1, [r3, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80058e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6899      	ldr	r1, [r3, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	609a      	str	r2, [r3, #8]
 80058f4:	e00f      	b.n	8005916 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005904:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005914:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0202 	bic.w	r2, r2, #2
 8005924:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6899      	ldr	r1, [r3, #8]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	7e1b      	ldrb	r3, [r3, #24]
 8005930:	005a      	lsls	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01b      	beq.n	800597c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005952:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005962:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6859      	ldr	r1, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	3b01      	subs	r3, #1
 8005970:	035a      	lsls	r2, r3, #13
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
 800597a:	e007      	b.n	800598c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800598a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800599a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	051a      	lsls	r2, r3, #20
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6899      	ldr	r1, [r3, #8]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059ce:	025a      	lsls	r2, r3, #9
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6899      	ldr	r1, [r3, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	029a      	lsls	r2, r3, #10
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	609a      	str	r2, [r3, #8]
}
 80059fc:	bf00      	nop
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	40012300 	.word	0x40012300
 8005a0c:	0f000001 	.word	0x0f000001

08005a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a20:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <__NVIC_SetPriorityGrouping+0x44>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a42:	4a04      	ldr	r2, [pc, #16]	; (8005a54 <__NVIC_SetPriorityGrouping+0x44>)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	60d3      	str	r3, [r2, #12]
}
 8005a48:	bf00      	nop
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	e000ed00 	.word	0xe000ed00

08005a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a5c:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <__NVIC_GetPriorityGrouping+0x18>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	0a1b      	lsrs	r3, r3, #8
 8005a62:	f003 0307 	and.w	r3, r3, #7
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	e000ed00 	.word	0xe000ed00

08005a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	db0b      	blt.n	8005a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	f003 021f 	and.w	r2, r3, #31
 8005a8c:	4907      	ldr	r1, [pc, #28]	; (8005aac <__NVIC_EnableIRQ+0x38>)
 8005a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a92:	095b      	lsrs	r3, r3, #5
 8005a94:	2001      	movs	r0, #1
 8005a96:	fa00 f202 	lsl.w	r2, r0, r2
 8005a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	e000e100 	.word	0xe000e100

08005ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	6039      	str	r1, [r7, #0]
 8005aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	db0a      	blt.n	8005ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	490c      	ldr	r1, [pc, #48]	; (8005afc <__NVIC_SetPriority+0x4c>)
 8005aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ace:	0112      	lsls	r2, r2, #4
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ad8:	e00a      	b.n	8005af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	4908      	ldr	r1, [pc, #32]	; (8005b00 <__NVIC_SetPriority+0x50>)
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	3b04      	subs	r3, #4
 8005ae8:	0112      	lsls	r2, r2, #4
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	440b      	add	r3, r1
 8005aee:	761a      	strb	r2, [r3, #24]
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	e000e100 	.word	0xe000e100
 8005b00:	e000ed00 	.word	0xe000ed00

08005b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b089      	sub	sp, #36	; 0x24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f1c3 0307 	rsb	r3, r3, #7
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	bf28      	it	cs
 8005b22:	2304      	movcs	r3, #4
 8005b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d902      	bls.n	8005b34 <NVIC_EncodePriority+0x30>
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	3b03      	subs	r3, #3
 8005b32:	e000      	b.n	8005b36 <NVIC_EncodePriority+0x32>
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b38:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43da      	mvns	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	401a      	ands	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	fa01 f303 	lsl.w	r3, r1, r3
 8005b56:	43d9      	mvns	r1, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b5c:	4313      	orrs	r3, r2
         );
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3724      	adds	r7, #36	; 0x24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b7c:	d301      	bcc.n	8005b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e00f      	b.n	8005ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b82:	4a0a      	ldr	r2, [pc, #40]	; (8005bac <SysTick_Config+0x40>)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b8a:	210f      	movs	r1, #15
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b90:	f7ff ff8e 	bl	8005ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b94:	4b05      	ldr	r3, [pc, #20]	; (8005bac <SysTick_Config+0x40>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b9a:	4b04      	ldr	r3, [pc, #16]	; (8005bac <SysTick_Config+0x40>)
 8005b9c:	2207      	movs	r2, #7
 8005b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	e000e010 	.word	0xe000e010

08005bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ff29 	bl	8005a10 <__NVIC_SetPriorityGrouping>
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b086      	sub	sp, #24
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	4603      	mov	r3, r0
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
 8005bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bd8:	f7ff ff3e 	bl	8005a58 <__NVIC_GetPriorityGrouping>
 8005bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	6978      	ldr	r0, [r7, #20]
 8005be4:	f7ff ff8e 	bl	8005b04 <NVIC_EncodePriority>
 8005be8:	4602      	mov	r2, r0
 8005bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff ff5d 	bl	8005ab0 <__NVIC_SetPriority>
}
 8005bf6:	bf00      	nop
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	4603      	mov	r3, r0
 8005c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff ff31 	bl	8005a74 <__NVIC_EnableIRQ>
}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff ffa2 	bl	8005b6c <SysTick_Config>
 8005c28:	4603      	mov	r3, r0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c40:	f7ff fc54 	bl	80054ec <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e099      	b.n	8005d84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c70:	e00f      	b.n	8005c92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c72:	f7ff fc3b 	bl	80054ec <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b05      	cmp	r3, #5
 8005c7e:	d908      	bls.n	8005c92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2203      	movs	r2, #3
 8005c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e078      	b.n	8005d84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e8      	bne.n	8005c72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4b38      	ldr	r3, [pc, #224]	; (8005d8c <HAL_DMA_Init+0x158>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d107      	bne.n	8005cfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f023 0307 	bic.w	r3, r3, #7
 8005d12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d117      	bne.n	8005d56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00e      	beq.n	8005d56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fb01 	bl	8006340 <DMA_CheckFifoParam>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2240      	movs	r2, #64	; 0x40
 8005d48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d52:	2301      	movs	r3, #1
 8005d54:	e016      	b.n	8005d84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fab8 	bl	80062d4 <DMA_CalcBaseAndBitshift>
 8005d64:	4603      	mov	r3, r0
 8005d66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6c:	223f      	movs	r2, #63	; 0x3f
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	f010803f 	.word	0xf010803f

08005d90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_DMA_Start_IT+0x26>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e040      	b.n	8005e38 <HAL_DMA_Start_IT+0xa8>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d12f      	bne.n	8005e2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 fa4a 	bl	8006278 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de8:	223f      	movs	r2, #63	; 0x3f
 8005dea:	409a      	lsls	r2, r3
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0216 	orr.w	r2, r2, #22
 8005dfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0208 	orr.w	r2, r2, #8
 8005e16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e005      	b.n	8005e36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e32:	2302      	movs	r3, #2
 8005e34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e4e:	f7ff fb4d 	bl	80054ec <HAL_GetTick>
 8005e52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d008      	beq.n	8005e72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2280      	movs	r2, #128	; 0x80
 8005e64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e052      	b.n	8005f18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0216 	bic.w	r2, r2, #22
 8005e80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695a      	ldr	r2, [r3, #20]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d103      	bne.n	8005ea2 <HAL_DMA_Abort+0x62>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d007      	beq.n	8005eb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0208 	bic.w	r2, r2, #8
 8005eb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0201 	bic.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ec2:	e013      	b.n	8005eec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ec4:	f7ff fb12 	bl	80054ec <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b05      	cmp	r3, #5
 8005ed0:	d90c      	bls.n	8005eec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2203      	movs	r2, #3
 8005edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e015      	b.n	8005f18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e4      	bne.n	8005ec4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efe:	223f      	movs	r2, #63	; 0x3f
 8005f00:	409a      	lsls	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d004      	beq.n	8005f3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2280      	movs	r2, #128	; 0x80
 8005f38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e00c      	b.n	8005f58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2205      	movs	r2, #5
 8005f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0201 	bic.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f70:	4b8e      	ldr	r3, [pc, #568]	; (80061ac <HAL_DMA_IRQHandler+0x248>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a8e      	ldr	r2, [pc, #568]	; (80061b0 <HAL_DMA_IRQHandler+0x24c>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	0a9b      	lsrs	r3, r3, #10
 8005f7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f8e:	2208      	movs	r2, #8
 8005f90:	409a      	lsls	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4013      	ands	r3, r2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d01a      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d013      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0204 	bic.w	r2, r2, #4
 8005fb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fbc:	2208      	movs	r2, #8
 8005fbe:	409a      	lsls	r2, r3
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc8:	f043 0201 	orr.w	r2, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	409a      	lsls	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d012      	beq.n	8006006 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00b      	beq.n	8006006 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	409a      	lsls	r2, r3
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ffe:	f043 0202 	orr.w	r2, r3, #2
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600a:	2204      	movs	r2, #4
 800600c:	409a      	lsls	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4013      	ands	r3, r2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d012      	beq.n	800603c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00b      	beq.n	800603c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006028:	2204      	movs	r2, #4
 800602a:	409a      	lsls	r2, r3
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006034:	f043 0204 	orr.w	r2, r3, #4
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006040:	2210      	movs	r2, #16
 8006042:	409a      	lsls	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4013      	ands	r3, r2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d043      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d03c      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605e:	2210      	movs	r2, #16
 8006060:	409a      	lsls	r2, r3
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d018      	beq.n	80060a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d108      	bne.n	8006094 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	d024      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
 8006092:	e01f      	b.n	80060d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01b      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	4798      	blx	r3
 80060a4:	e016      	b.n	80060d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d107      	bne.n	80060c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0208 	bic.w	r2, r2, #8
 80060c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d8:	2220      	movs	r2, #32
 80060da:	409a      	lsls	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4013      	ands	r3, r2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 808f 	beq.w	8006204 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8087 	beq.w	8006204 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060fa:	2220      	movs	r2, #32
 80060fc:	409a      	lsls	r2, r3
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b05      	cmp	r3, #5
 800610c:	d136      	bne.n	800617c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0216 	bic.w	r2, r2, #22
 800611c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695a      	ldr	r2, [r3, #20]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800612c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	2b00      	cmp	r3, #0
 8006134:	d103      	bne.n	800613e <HAL_DMA_IRQHandler+0x1da>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800613a:	2b00      	cmp	r3, #0
 800613c:	d007      	beq.n	800614e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0208 	bic.w	r2, r2, #8
 800614c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006152:	223f      	movs	r2, #63	; 0x3f
 8006154:	409a      	lsls	r2, r3
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616e:	2b00      	cmp	r3, #0
 8006170:	d07e      	beq.n	8006270 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	4798      	blx	r3
        }
        return;
 800617a:	e079      	b.n	8006270 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01d      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10d      	bne.n	80061b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619c:	2b00      	cmp	r3, #0
 800619e:	d031      	beq.n	8006204 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	4798      	blx	r3
 80061a8:	e02c      	b.n	8006204 <HAL_DMA_IRQHandler+0x2a0>
 80061aa:	bf00      	nop
 80061ac:	2000000c 	.word	0x2000000c
 80061b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d023      	beq.n	8006204 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	4798      	blx	r3
 80061c4:	e01e      	b.n	8006204 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10f      	bne.n	80061f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0210 	bic.w	r2, r2, #16
 80061e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006208:	2b00      	cmp	r3, #0
 800620a:	d032      	beq.n	8006272 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d022      	beq.n	800625e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2205      	movs	r2, #5
 800621c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0201 	bic.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	3301      	adds	r3, #1
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	429a      	cmp	r2, r3
 800623a:	d307      	bcc.n	800624c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f2      	bne.n	8006230 <HAL_DMA_IRQHandler+0x2cc>
 800624a:	e000      	b.n	800624e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800624c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006262:	2b00      	cmp	r3, #0
 8006264:	d005      	beq.n	8006272 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	4798      	blx	r3
 800626e:	e000      	b.n	8006272 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006270:	bf00      	nop
    }
  }
}
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006294:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	2b40      	cmp	r3, #64	; 0x40
 80062a4:	d108      	bne.n	80062b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80062b6:	e007      	b.n	80062c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	60da      	str	r2, [r3, #12]
}
 80062c8:	bf00      	nop
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	3b10      	subs	r3, #16
 80062e4:	4a14      	ldr	r2, [pc, #80]	; (8006338 <DMA_CalcBaseAndBitshift+0x64>)
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	091b      	lsrs	r3, r3, #4
 80062ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80062ee:	4a13      	ldr	r2, [pc, #76]	; (800633c <DMA_CalcBaseAndBitshift+0x68>)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4413      	add	r3, r2
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d909      	bls.n	8006316 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800630a:	f023 0303 	bic.w	r3, r3, #3
 800630e:	1d1a      	adds	r2, r3, #4
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	659a      	str	r2, [r3, #88]	; 0x58
 8006314:	e007      	b.n	8006326 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800631e:	f023 0303 	bic.w	r3, r3, #3
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	aaaaaaab 	.word	0xaaaaaaab
 800633c:	08015508 	.word	0x08015508

08006340 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006350:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d11f      	bne.n	800639a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b03      	cmp	r3, #3
 800635e:	d856      	bhi.n	800640e <DMA_CheckFifoParam+0xce>
 8006360:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <DMA_CheckFifoParam+0x28>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	08006379 	.word	0x08006379
 800636c:	0800638b 	.word	0x0800638b
 8006370:	08006379 	.word	0x08006379
 8006374:	0800640f 	.word	0x0800640f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d046      	beq.n	8006412 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006388:	e043      	b.n	8006412 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006392:	d140      	bne.n	8006416 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006398:	e03d      	b.n	8006416 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a2:	d121      	bne.n	80063e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d837      	bhi.n	800641a <DMA_CheckFifoParam+0xda>
 80063aa:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <DMA_CheckFifoParam+0x70>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063c1 	.word	0x080063c1
 80063b4:	080063c7 	.word	0x080063c7
 80063b8:	080063c1 	.word	0x080063c1
 80063bc:	080063d9 	.word	0x080063d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	73fb      	strb	r3, [r7, #15]
      break;
 80063c4:	e030      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d025      	beq.n	800641e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063d6:	e022      	b.n	800641e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063e0:	d11f      	bne.n	8006422 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80063e6:	e01c      	b.n	8006422 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d903      	bls.n	80063f6 <DMA_CheckFifoParam+0xb6>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b03      	cmp	r3, #3
 80063f2:	d003      	beq.n	80063fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80063f4:	e018      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
      break;
 80063fa:	e015      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00e      	beq.n	8006426 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	73fb      	strb	r3, [r7, #15]
      break;
 800640c:	e00b      	b.n	8006426 <DMA_CheckFifoParam+0xe6>
      break;
 800640e:	bf00      	nop
 8006410:	e00a      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      break;
 8006412:	bf00      	nop
 8006414:	e008      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      break;
 8006416:	bf00      	nop
 8006418:	e006      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      break;
 800641a:	bf00      	nop
 800641c:	e004      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      break;
 800641e:	bf00      	nop
 8006420:	e002      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      break;   
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <DMA_CheckFifoParam+0xe8>
      break;
 8006426:	bf00      	nop
    }
  } 
  
  return status; 
 8006428:	7bfb      	ldrb	r3, [r7, #15]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop

08006438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006438:	b480      	push	{r7}
 800643a:	b089      	sub	sp, #36	; 0x24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006446:	2300      	movs	r3, #0
 8006448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800644a:	2300      	movs	r3, #0
 800644c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800644e:	2300      	movs	r3, #0
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	e16b      	b.n	800672c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006454:	2201      	movs	r2, #1
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	fa02 f303 	lsl.w	r3, r2, r3
 800645c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4013      	ands	r3, r2
 8006466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	429a      	cmp	r2, r3
 800646e:	f040 815a 	bne.w	8006726 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	2b01      	cmp	r3, #1
 800647c:	d005      	beq.n	800648a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006486:	2b02      	cmp	r3, #2
 8006488:	d130      	bne.n	80064ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	2203      	movs	r2, #3
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	43db      	mvns	r3, r3
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	4013      	ands	r3, r2
 80064a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064c0:	2201      	movs	r2, #1
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	fa02 f303 	lsl.w	r3, r2, r3
 80064c8:	43db      	mvns	r3, r3
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	4013      	ands	r3, r2
 80064ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	091b      	lsrs	r3, r3, #4
 80064d6:	f003 0201 	and.w	r2, r3, #1
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d017      	beq.n	8006528 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	2203      	movs	r2, #3
 8006504:	fa02 f303 	lsl.w	r3, r2, r3
 8006508:	43db      	mvns	r3, r3
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	4013      	ands	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	fa02 f303 	lsl.w	r3, r2, r3
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	4313      	orrs	r3, r2
 8006520:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f003 0303 	and.w	r3, r3, #3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d123      	bne.n	800657c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	08da      	lsrs	r2, r3, #3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3208      	adds	r2, #8
 800653c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006540:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	220f      	movs	r2, #15
 800654c:	fa02 f303 	lsl.w	r3, r2, r3
 8006550:	43db      	mvns	r3, r3
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	4013      	ands	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	fa02 f303 	lsl.w	r3, r2, r3
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	4313      	orrs	r3, r2
 800656c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	08da      	lsrs	r2, r3, #3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3208      	adds	r2, #8
 8006576:	69b9      	ldr	r1, [r7, #24]
 8006578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	2203      	movs	r2, #3
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	43db      	mvns	r3, r3
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	4013      	ands	r3, r2
 8006592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f003 0203 	and.w	r2, r3, #3
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	fa02 f303 	lsl.w	r3, r2, r3
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80b4 	beq.w	8006726 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	4b60      	ldr	r3, [pc, #384]	; (8006744 <HAL_GPIO_Init+0x30c>)
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	4a5f      	ldr	r2, [pc, #380]	; (8006744 <HAL_GPIO_Init+0x30c>)
 80065c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065cc:	6453      	str	r3, [r2, #68]	; 0x44
 80065ce:	4b5d      	ldr	r3, [pc, #372]	; (8006744 <HAL_GPIO_Init+0x30c>)
 80065d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065da:	4a5b      	ldr	r2, [pc, #364]	; (8006748 <HAL_GPIO_Init+0x310>)
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	089b      	lsrs	r3, r3, #2
 80065e0:	3302      	adds	r3, #2
 80065e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	220f      	movs	r2, #15
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	43db      	mvns	r3, r3
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	4013      	ands	r3, r2
 80065fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a52      	ldr	r2, [pc, #328]	; (800674c <HAL_GPIO_Init+0x314>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d02b      	beq.n	800665e <HAL_GPIO_Init+0x226>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a51      	ldr	r2, [pc, #324]	; (8006750 <HAL_GPIO_Init+0x318>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d025      	beq.n	800665a <HAL_GPIO_Init+0x222>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a50      	ldr	r2, [pc, #320]	; (8006754 <HAL_GPIO_Init+0x31c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d01f      	beq.n	8006656 <HAL_GPIO_Init+0x21e>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a4f      	ldr	r2, [pc, #316]	; (8006758 <HAL_GPIO_Init+0x320>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d019      	beq.n	8006652 <HAL_GPIO_Init+0x21a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a4e      	ldr	r2, [pc, #312]	; (800675c <HAL_GPIO_Init+0x324>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d013      	beq.n	800664e <HAL_GPIO_Init+0x216>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a4d      	ldr	r2, [pc, #308]	; (8006760 <HAL_GPIO_Init+0x328>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00d      	beq.n	800664a <HAL_GPIO_Init+0x212>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a4c      	ldr	r2, [pc, #304]	; (8006764 <HAL_GPIO_Init+0x32c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d007      	beq.n	8006646 <HAL_GPIO_Init+0x20e>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a4b      	ldr	r2, [pc, #300]	; (8006768 <HAL_GPIO_Init+0x330>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d101      	bne.n	8006642 <HAL_GPIO_Init+0x20a>
 800663e:	2307      	movs	r3, #7
 8006640:	e00e      	b.n	8006660 <HAL_GPIO_Init+0x228>
 8006642:	2308      	movs	r3, #8
 8006644:	e00c      	b.n	8006660 <HAL_GPIO_Init+0x228>
 8006646:	2306      	movs	r3, #6
 8006648:	e00a      	b.n	8006660 <HAL_GPIO_Init+0x228>
 800664a:	2305      	movs	r3, #5
 800664c:	e008      	b.n	8006660 <HAL_GPIO_Init+0x228>
 800664e:	2304      	movs	r3, #4
 8006650:	e006      	b.n	8006660 <HAL_GPIO_Init+0x228>
 8006652:	2303      	movs	r3, #3
 8006654:	e004      	b.n	8006660 <HAL_GPIO_Init+0x228>
 8006656:	2302      	movs	r3, #2
 8006658:	e002      	b.n	8006660 <HAL_GPIO_Init+0x228>
 800665a:	2301      	movs	r3, #1
 800665c:	e000      	b.n	8006660 <HAL_GPIO_Init+0x228>
 800665e:	2300      	movs	r3, #0
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	f002 0203 	and.w	r2, r2, #3
 8006666:	0092      	lsls	r2, r2, #2
 8006668:	4093      	lsls	r3, r2
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	4313      	orrs	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006670:	4935      	ldr	r1, [pc, #212]	; (8006748 <HAL_GPIO_Init+0x310>)
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	089b      	lsrs	r3, r3, #2
 8006676:	3302      	adds	r3, #2
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800667e:	4b3b      	ldr	r3, [pc, #236]	; (800676c <HAL_GPIO_Init+0x334>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	43db      	mvns	r3, r3
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	4013      	ands	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066a2:	4a32      	ldr	r2, [pc, #200]	; (800676c <HAL_GPIO_Init+0x334>)
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066a8:	4b30      	ldr	r3, [pc, #192]	; (800676c <HAL_GPIO_Init+0x334>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	43db      	mvns	r3, r3
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	4013      	ands	r3, r2
 80066b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066cc:	4a27      	ldr	r2, [pc, #156]	; (800676c <HAL_GPIO_Init+0x334>)
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066d2:	4b26      	ldr	r3, [pc, #152]	; (800676c <HAL_GPIO_Init+0x334>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	43db      	mvns	r3, r3
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	4013      	ands	r3, r2
 80066e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066f6:	4a1d      	ldr	r2, [pc, #116]	; (800676c <HAL_GPIO_Init+0x334>)
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066fc:	4b1b      	ldr	r3, [pc, #108]	; (800676c <HAL_GPIO_Init+0x334>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	43db      	mvns	r3, r3
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	4013      	ands	r3, r2
 800670a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006720:	4a12      	ldr	r2, [pc, #72]	; (800676c <HAL_GPIO_Init+0x334>)
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3301      	adds	r3, #1
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	2b0f      	cmp	r3, #15
 8006730:	f67f ae90 	bls.w	8006454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	3724      	adds	r7, #36	; 0x24
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	40023800 	.word	0x40023800
 8006748:	40013800 	.word	0x40013800
 800674c:	40020000 	.word	0x40020000
 8006750:	40020400 	.word	0x40020400
 8006754:	40020800 	.word	0x40020800
 8006758:	40020c00 	.word	0x40020c00
 800675c:	40021000 	.word	0x40021000
 8006760:	40021400 	.word	0x40021400
 8006764:	40021800 	.word	0x40021800
 8006768:	40021c00 	.word	0x40021c00
 800676c:	40013c00 	.word	0x40013c00

08006770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	807b      	strh	r3, [r7, #2]
 800677c:	4613      	mov	r3, r2
 800677e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006780:	787b      	ldrb	r3, [r7, #1]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006786:	887a      	ldrh	r2, [r7, #2]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800678c:	e003      	b.n	8006796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800678e:	887b      	ldrh	r3, [r7, #2]
 8006790:	041a      	lsls	r2, r3, #16
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	619a      	str	r2, [r3, #24]
}
 8006796:	bf00      	nop
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b085      	sub	sp, #20
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	460b      	mov	r3, r1
 80067ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80067b4:	887a      	ldrh	r2, [r7, #2]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4013      	ands	r3, r2
 80067ba:	041a      	lsls	r2, r3, #16
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	43d9      	mvns	r1, r3
 80067c0:	887b      	ldrh	r3, [r7, #2]
 80067c2:	400b      	ands	r3, r1
 80067c4:	431a      	orrs	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	619a      	str	r2, [r3, #24]
}
 80067ca:	bf00      	nop
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
	...

080067d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067e2:	4b08      	ldr	r3, [pc, #32]	; (8006804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067e4:	695a      	ldr	r2, [r3, #20]
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d006      	beq.n	80067fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067ee:	4a05      	ldr	r2, [pc, #20]	; (8006804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067f4:	88fb      	ldrh	r3, [r7, #6]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fb fd96 	bl	8002328 <HAL_GPIO_EXTI_Callback>
  }
}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	40013c00 	.word	0x40013c00

08006808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e12b      	b.n	8006a72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7fd f912 	bl	8003a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2224      	movs	r2, #36	; 0x24
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0201 	bic.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800685a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800686a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800686c:	f001 fd2a 	bl	80082c4 <HAL_RCC_GetPCLK1Freq>
 8006870:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	4a81      	ldr	r2, [pc, #516]	; (8006a7c <HAL_I2C_Init+0x274>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d807      	bhi.n	800688c <HAL_I2C_Init+0x84>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4a80      	ldr	r2, [pc, #512]	; (8006a80 <HAL_I2C_Init+0x278>)
 8006880:	4293      	cmp	r3, r2
 8006882:	bf94      	ite	ls
 8006884:	2301      	movls	r3, #1
 8006886:	2300      	movhi	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	e006      	b.n	800689a <HAL_I2C_Init+0x92>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a7d      	ldr	r2, [pc, #500]	; (8006a84 <HAL_I2C_Init+0x27c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	bf94      	ite	ls
 8006894:	2301      	movls	r3, #1
 8006896:	2300      	movhi	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e0e7      	b.n	8006a72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4a78      	ldr	r2, [pc, #480]	; (8006a88 <HAL_I2C_Init+0x280>)
 80068a6:	fba2 2303 	umull	r2, r3, r2, r3
 80068aa:	0c9b      	lsrs	r3, r3, #18
 80068ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	430a      	orrs	r2, r1
 80068c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	4a6a      	ldr	r2, [pc, #424]	; (8006a7c <HAL_I2C_Init+0x274>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d802      	bhi.n	80068dc <HAL_I2C_Init+0xd4>
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	3301      	adds	r3, #1
 80068da:	e009      	b.n	80068f0 <HAL_I2C_Init+0xe8>
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068e2:	fb02 f303 	mul.w	r3, r2, r3
 80068e6:	4a69      	ldr	r2, [pc, #420]	; (8006a8c <HAL_I2C_Init+0x284>)
 80068e8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ec:	099b      	lsrs	r3, r3, #6
 80068ee:	3301      	adds	r3, #1
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	430b      	orrs	r3, r1
 80068f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006902:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	495c      	ldr	r1, [pc, #368]	; (8006a7c <HAL_I2C_Init+0x274>)
 800690c:	428b      	cmp	r3, r1
 800690e:	d819      	bhi.n	8006944 <HAL_I2C_Init+0x13c>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	1e59      	subs	r1, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	fbb1 f3f3 	udiv	r3, r1, r3
 800691e:	1c59      	adds	r1, r3, #1
 8006920:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006924:	400b      	ands	r3, r1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <HAL_I2C_Init+0x138>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	1e59      	subs	r1, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	fbb1 f3f3 	udiv	r3, r1, r3
 8006938:	3301      	adds	r3, #1
 800693a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800693e:	e051      	b.n	80069e4 <HAL_I2C_Init+0x1dc>
 8006940:	2304      	movs	r3, #4
 8006942:	e04f      	b.n	80069e4 <HAL_I2C_Init+0x1dc>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d111      	bne.n	8006970 <HAL_I2C_Init+0x168>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	1e58      	subs	r0, r3, #1
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6859      	ldr	r1, [r3, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	005b      	lsls	r3, r3, #1
 8006958:	440b      	add	r3, r1
 800695a:	fbb0 f3f3 	udiv	r3, r0, r3
 800695e:	3301      	adds	r3, #1
 8006960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006964:	2b00      	cmp	r3, #0
 8006966:	bf0c      	ite	eq
 8006968:	2301      	moveq	r3, #1
 800696a:	2300      	movne	r3, #0
 800696c:	b2db      	uxtb	r3, r3
 800696e:	e012      	b.n	8006996 <HAL_I2C_Init+0x18e>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	1e58      	subs	r0, r3, #1
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6859      	ldr	r1, [r3, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	440b      	add	r3, r1
 800697e:	0099      	lsls	r1, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	fbb0 f3f3 	udiv	r3, r0, r3
 8006986:	3301      	adds	r3, #1
 8006988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800698c:	2b00      	cmp	r3, #0
 800698e:	bf0c      	ite	eq
 8006990:	2301      	moveq	r3, #1
 8006992:	2300      	movne	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <HAL_I2C_Init+0x196>
 800699a:	2301      	movs	r3, #1
 800699c:	e022      	b.n	80069e4 <HAL_I2C_Init+0x1dc>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10e      	bne.n	80069c4 <HAL_I2C_Init+0x1bc>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	1e58      	subs	r0, r3, #1
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6859      	ldr	r1, [r3, #4]
 80069ae:	460b      	mov	r3, r1
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	440b      	add	r3, r1
 80069b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80069b8:	3301      	adds	r3, #1
 80069ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c2:	e00f      	b.n	80069e4 <HAL_I2C_Init+0x1dc>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	1e58      	subs	r0, r3, #1
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6859      	ldr	r1, [r3, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	440b      	add	r3, r1
 80069d2:	0099      	lsls	r1, r3, #2
 80069d4:	440b      	add	r3, r1
 80069d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80069da:	3301      	adds	r3, #1
 80069dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	6809      	ldr	r1, [r1, #0]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69da      	ldr	r2, [r3, #28]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6911      	ldr	r1, [r2, #16]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	68d2      	ldr	r2, [r2, #12]
 8006a1e:	4311      	orrs	r1, r2
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6812      	ldr	r2, [r2, #0]
 8006a24:	430b      	orrs	r3, r1
 8006a26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	695a      	ldr	r2, [r3, #20]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0201 	orr.w	r2, r2, #1
 8006a52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	000186a0 	.word	0x000186a0
 8006a80:	001e847f 	.word	0x001e847f
 8006a84:	003d08ff 	.word	0x003d08ff
 8006a88:	431bde83 	.word	0x431bde83
 8006a8c:	10624dd3 	.word	0x10624dd3

08006a90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	4608      	mov	r0, r1
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	817b      	strh	r3, [r7, #10]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	813b      	strh	r3, [r7, #8]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006aaa:	f7fe fd1f 	bl	80054ec <HAL_GetTick>
 8006aae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	f040 80d9 	bne.w	8006c70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	2319      	movs	r3, #25
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	496d      	ldr	r1, [pc, #436]	; (8006c7c <HAL_I2C_Mem_Write+0x1ec>)
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 fdad 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e0cc      	b.n	8006c72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d101      	bne.n	8006ae6 <HAL_I2C_Mem_Write+0x56>
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	e0c5      	b.n	8006c72 <HAL_I2C_Mem_Write+0x1e2>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d007      	beq.n	8006b0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0201 	orr.w	r2, r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2221      	movs	r2, #33	; 0x21
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2240      	movs	r2, #64	; 0x40
 8006b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6a3a      	ldr	r2, [r7, #32]
 8006b36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4a4d      	ldr	r2, [pc, #308]	; (8006c80 <HAL_I2C_Mem_Write+0x1f0>)
 8006b4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b4e:	88f8      	ldrh	r0, [r7, #6]
 8006b50:	893a      	ldrh	r2, [r7, #8]
 8006b52:	8979      	ldrh	r1, [r7, #10]
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	9301      	str	r3, [sp, #4]
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 fbe4 	bl	800732c <I2C_RequestMemoryWrite>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d052      	beq.n	8006c10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e081      	b.n	8006c72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 fe2e 	bl	80077d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00d      	beq.n	8006b9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d107      	bne.n	8006b96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e06b      	b.n	8006c72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	781a      	ldrb	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d11b      	bne.n	8006c10 <HAL_I2C_Mem_Write+0x180>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d017      	beq.n	8006c10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	781a      	ldrb	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1aa      	bne.n	8006b6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 fe1a 	bl	8007856 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00d      	beq.n	8006c44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d107      	bne.n	8006c40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e016      	b.n	8006c72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	e000      	b.n	8006c72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c70:	2302      	movs	r3, #2
  }
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	00100002 	.word	0x00100002
 8006c80:	ffff0000 	.word	0xffff0000

08006c84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08c      	sub	sp, #48	; 0x30
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	4611      	mov	r1, r2
 8006c90:	461a      	mov	r2, r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	817b      	strh	r3, [r7, #10]
 8006c96:	460b      	mov	r3, r1
 8006c98:	813b      	strh	r3, [r7, #8]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c9e:	f7fe fc25 	bl	80054ec <HAL_GetTick>
 8006ca2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	f040 8208 	bne.w	80070c2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	2319      	movs	r3, #25
 8006cb8:	2201      	movs	r2, #1
 8006cba:	497b      	ldr	r1, [pc, #492]	; (8006ea8 <HAL_I2C_Mem_Read+0x224>)
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 fcb3 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e1fb      	b.n	80070c4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <HAL_I2C_Mem_Read+0x56>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	e1f4      	b.n	80070c4 <HAL_I2C_Mem_Read+0x440>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d007      	beq.n	8006d00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2222      	movs	r2, #34	; 0x22
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2240      	movs	r2, #64	; 0x40
 8006d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4a5b      	ldr	r2, [pc, #364]	; (8006eac <HAL_I2C_Mem_Read+0x228>)
 8006d40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d42:	88f8      	ldrh	r0, [r7, #6]
 8006d44:	893a      	ldrh	r2, [r7, #8]
 8006d46:	8979      	ldrh	r1, [r7, #10]
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	4603      	mov	r3, r0
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 fb80 	bl	8007458 <I2C_RequestMemoryRead>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e1b0      	b.n	80070c4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d113      	bne.n	8006d92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	623b      	str	r3, [r7, #32]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	623b      	str	r3, [r7, #32]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	623b      	str	r3, [r7, #32]
 8006d7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	e184      	b.n	800709c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d11b      	bne.n	8006dd2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006da8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006daa:	2300      	movs	r3, #0
 8006dac:	61fb      	str	r3, [r7, #28]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	61fb      	str	r3, [r7, #28]
 8006dbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	e164      	b.n	800709c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d11b      	bne.n	8006e12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006df8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61bb      	str	r3, [r7, #24]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	61bb      	str	r3, [r7, #24]
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	e144      	b.n	800709c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e12:	2300      	movs	r3, #0
 8006e14:	617b      	str	r3, [r7, #20]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	617b      	str	r3, [r7, #20]
 8006e26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e28:	e138      	b.n	800709c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	f200 80f1 	bhi.w	8007016 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d123      	bne.n	8006e84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 fd49 	bl	80078d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e139      	b.n	80070c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691a      	ldr	r2, [r3, #16]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e82:	e10b      	b.n	800709c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d14e      	bne.n	8006f2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	2200      	movs	r2, #0
 8006e94:	4906      	ldr	r1, [pc, #24]	; (8006eb0 <HAL_I2C_Mem_Read+0x22c>)
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 fbc6 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d008      	beq.n	8006eb4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e10e      	b.n	80070c4 <HAL_I2C_Mem_Read+0x440>
 8006ea6:	bf00      	nop
 8006ea8:	00100002 	.word	0x00100002
 8006eac:	ffff0000 	.word	0xffff0000
 8006eb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ec2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	691a      	ldr	r2, [r3, #16]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f28:	e0b8      	b.n	800709c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	2200      	movs	r2, #0
 8006f32:	4966      	ldr	r1, [pc, #408]	; (80070cc <HAL_I2C_Mem_Read+0x448>)
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 fb77 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e0bf      	b.n	80070c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691a      	ldr	r2, [r3, #16]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	b2d2      	uxtb	r2, r2
 8006f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	494f      	ldr	r1, [pc, #316]	; (80070cc <HAL_I2C_Mem_Read+0x448>)
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 fb49 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e091      	b.n	80070c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691a      	ldr	r2, [r3, #16]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691a      	ldr	r2, [r3, #16]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ffe:	3b01      	subs	r3, #1
 8007000:	b29a      	uxth	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007014:	e042      	b.n	800709c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007018:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 fc5c 	bl	80078d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e04c      	b.n	80070c4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691a      	ldr	r2, [r3, #16]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007046:	3b01      	subs	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b04      	cmp	r3, #4
 8007068:	d118      	bne.n	800709c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691a      	ldr	r2, [r3, #16]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	b2d2      	uxtb	r2, r2
 8007076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007086:	3b01      	subs	r3, #1
 8007088:	b29a      	uxth	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f47f aec2 	bne.w	8006e2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	e000      	b.n	80070c4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80070c2:	2302      	movs	r3, #2
  }
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3728      	adds	r7, #40	; 0x28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	00010004 	.word	0x00010004

080070d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08a      	sub	sp, #40	; 0x28
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	607a      	str	r2, [r7, #4]
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	460b      	mov	r3, r1
 80070de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80070e0:	f7fe fa04 	bl	80054ec <HAL_GetTick>
 80070e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b20      	cmp	r3, #32
 80070f4:	f040 8111 	bne.w	800731a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	2319      	movs	r3, #25
 80070fe:	2201      	movs	r2, #1
 8007100:	4988      	ldr	r1, [pc, #544]	; (8007324 <HAL_I2C_IsDeviceReady+0x254>)
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 fa90 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800710e:	2302      	movs	r3, #2
 8007110:	e104      	b.n	800731c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007118:	2b01      	cmp	r3, #1
 800711a:	d101      	bne.n	8007120 <HAL_I2C_IsDeviceReady+0x50>
 800711c:	2302      	movs	r3, #2
 800711e:	e0fd      	b.n	800731c <HAL_I2C_IsDeviceReady+0x24c>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b01      	cmp	r3, #1
 8007134:	d007      	beq.n	8007146 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0201 	orr.w	r2, r2, #1
 8007144:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007154:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2224      	movs	r2, #36	; 0x24
 800715a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4a70      	ldr	r2, [pc, #448]	; (8007328 <HAL_I2C_IsDeviceReady+0x258>)
 8007168:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007178:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2200      	movs	r2, #0
 8007182:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 fa4e 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00d      	beq.n	80071ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a0:	d103      	bne.n	80071aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071a8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e0b6      	b.n	800731c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071ae:	897b      	ldrh	r3, [r7, #10]
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	461a      	mov	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80071be:	f7fe f995 	bl	80054ec <HAL_GetTick>
 80071c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	bf0c      	ite	eq
 80071d2:	2301      	moveq	r3, #1
 80071d4:	2300      	movne	r3, #0
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e8:	bf0c      	ite	eq
 80071ea:	2301      	moveq	r3, #1
 80071ec:	2300      	movne	r3, #0
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80071f2:	e025      	b.n	8007240 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80071f4:	f7fe f97a 	bl	80054ec <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d302      	bcc.n	800720a <HAL_I2C_IsDeviceReady+0x13a>
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d103      	bne.n	8007212 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	22a0      	movs	r2, #160	; 0xa0
 800720e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b02      	cmp	r3, #2
 800721e:	bf0c      	ite	eq
 8007220:	2301      	moveq	r3, #1
 8007222:	2300      	movne	r3, #0
 8007224:	b2db      	uxtb	r3, r3
 8007226:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007236:	bf0c      	ite	eq
 8007238:	2301      	moveq	r3, #1
 800723a:	2300      	movne	r3, #0
 800723c:	b2db      	uxtb	r3, r3
 800723e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2ba0      	cmp	r3, #160	; 0xa0
 800724a:	d005      	beq.n	8007258 <HAL_I2C_IsDeviceReady+0x188>
 800724c:	7dfb      	ldrb	r3, [r7, #23]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d102      	bne.n	8007258 <HAL_I2C_IsDeviceReady+0x188>
 8007252:	7dbb      	ldrb	r3, [r7, #22]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0cd      	beq.n	80071f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b02      	cmp	r3, #2
 800726c:	d129      	bne.n	80072c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800727c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800727e:	2300      	movs	r3, #0
 8007280:	613b      	str	r3, [r7, #16]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	613b      	str	r3, [r7, #16]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	613b      	str	r3, [r7, #16]
 8007292:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	2319      	movs	r3, #25
 800729a:	2201      	movs	r2, #1
 800729c:	4921      	ldr	r1, [pc, #132]	; (8007324 <HAL_I2C_IsDeviceReady+0x254>)
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 f9c2 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e036      	b.n	800731c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2220      	movs	r2, #32
 80072b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	e02c      	b.n	800731c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	2319      	movs	r3, #25
 80072e2:	2201      	movs	r2, #1
 80072e4:	490f      	ldr	r1, [pc, #60]	; (8007324 <HAL_I2C_IsDeviceReady+0x254>)
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 f99e 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e012      	b.n	800731c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	3301      	adds	r3, #1
 80072fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	429a      	cmp	r2, r3
 8007302:	f4ff af32 	bcc.w	800716a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e000      	b.n	800731c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800731a:	2302      	movs	r3, #2
  }
}
 800731c:	4618      	mov	r0, r3
 800731e:	3720      	adds	r7, #32
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	00100002 	.word	0x00100002
 8007328:	ffff0000 	.word	0xffff0000

0800732c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af02      	add	r7, sp, #8
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	4608      	mov	r0, r1
 8007336:	4611      	mov	r1, r2
 8007338:	461a      	mov	r2, r3
 800733a:	4603      	mov	r3, r0
 800733c:	817b      	strh	r3, [r7, #10]
 800733e:	460b      	mov	r3, r1
 8007340:	813b      	strh	r3, [r7, #8]
 8007342:	4613      	mov	r3, r2
 8007344:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007354:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	2200      	movs	r2, #0
 800735e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 f960 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00d      	beq.n	800738a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800737c:	d103      	bne.n	8007386 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007384:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e05f      	b.n	800744a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800738a:	897b      	ldrh	r3, [r7, #10]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	461a      	mov	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007398:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	6a3a      	ldr	r2, [r7, #32]
 800739e:	492d      	ldr	r1, [pc, #180]	; (8007454 <I2C_RequestMemoryWrite+0x128>)
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f998 	bl	80076d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e04c      	b.n	800744a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c8:	6a39      	ldr	r1, [r7, #32]
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 fa02 	bl	80077d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00d      	beq.n	80073f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d107      	bne.n	80073ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e02b      	b.n	800744a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073f2:	88fb      	ldrh	r3, [r7, #6]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d105      	bne.n	8007404 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073f8:	893b      	ldrh	r3, [r7, #8]
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	611a      	str	r2, [r3, #16]
 8007402:	e021      	b.n	8007448 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007404:	893b      	ldrh	r3, [r7, #8]
 8007406:	0a1b      	lsrs	r3, r3, #8
 8007408:	b29b      	uxth	r3, r3
 800740a:	b2da      	uxtb	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007414:	6a39      	ldr	r1, [r7, #32]
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 f9dc 	bl	80077d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00d      	beq.n	800743e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	2b04      	cmp	r3, #4
 8007428:	d107      	bne.n	800743a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007438:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e005      	b.n	800744a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800743e:	893b      	ldrh	r3, [r7, #8]
 8007440:	b2da      	uxtb	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	00010002 	.word	0x00010002

08007458 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b088      	sub	sp, #32
 800745c:	af02      	add	r7, sp, #8
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	4608      	mov	r0, r1
 8007462:	4611      	mov	r1, r2
 8007464:	461a      	mov	r2, r3
 8007466:	4603      	mov	r3, r0
 8007468:	817b      	strh	r3, [r7, #10]
 800746a:	460b      	mov	r3, r1
 800746c:	813b      	strh	r3, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007480:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007490:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	2200      	movs	r2, #0
 800749a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 f8c2 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00d      	beq.n	80074c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b8:	d103      	bne.n	80074c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e0aa      	b.n	800761c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80074c6:	897b      	ldrh	r3, [r7, #10]
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80074d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	6a3a      	ldr	r2, [r7, #32]
 80074da:	4952      	ldr	r1, [pc, #328]	; (8007624 <I2C_RequestMemoryRead+0x1cc>)
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f8fa 	bl	80076d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e097      	b.n	800761c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ec:	2300      	movs	r3, #0
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	617b      	str	r3, [r7, #20]
 8007500:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007504:	6a39      	ldr	r1, [r7, #32]
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f964 	bl	80077d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00d      	beq.n	800752e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	2b04      	cmp	r3, #4
 8007518:	d107      	bne.n	800752a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007528:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e076      	b.n	800761c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800752e:	88fb      	ldrh	r3, [r7, #6]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d105      	bne.n	8007540 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007534:	893b      	ldrh	r3, [r7, #8]
 8007536:	b2da      	uxtb	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	611a      	str	r2, [r3, #16]
 800753e:	e021      	b.n	8007584 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007540:	893b      	ldrh	r3, [r7, #8]
 8007542:	0a1b      	lsrs	r3, r3, #8
 8007544:	b29b      	uxth	r3, r3
 8007546:	b2da      	uxtb	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800754e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007550:	6a39      	ldr	r1, [r7, #32]
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 f93e 	bl	80077d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00d      	beq.n	800757a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	2b04      	cmp	r3, #4
 8007564:	d107      	bne.n	8007576 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007574:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e050      	b.n	800761c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800757a:	893b      	ldrh	r3, [r7, #8]
 800757c:	b2da      	uxtb	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007586:	6a39      	ldr	r1, [r7, #32]
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 f923 	bl	80077d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00d      	beq.n	80075b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	2b04      	cmp	r3, #4
 800759a:	d107      	bne.n	80075ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e035      	b.n	800761c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 f82b 	bl	8007628 <I2C_WaitOnFlagUntilTimeout>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00d      	beq.n	80075f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e6:	d103      	bne.n	80075f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e013      	b.n	800761c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80075f4:	897b      	ldrh	r3, [r7, #10]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	f043 0301 	orr.w	r3, r3, #1
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	6a3a      	ldr	r2, [r7, #32]
 8007608:	4906      	ldr	r1, [pc, #24]	; (8007624 <I2C_RequestMemoryRead+0x1cc>)
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 f863 	bl	80076d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	00010002 	.word	0x00010002

08007628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	603b      	str	r3, [r7, #0]
 8007634:	4613      	mov	r3, r2
 8007636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007638:	e025      	b.n	8007686 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007640:	d021      	beq.n	8007686 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007642:	f7fd ff53 	bl	80054ec <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	429a      	cmp	r2, r3
 8007650:	d302      	bcc.n	8007658 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d116      	bne.n	8007686 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2220      	movs	r2, #32
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	f043 0220 	orr.w	r2, r3, #32
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e023      	b.n	80076ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	0c1b      	lsrs	r3, r3, #16
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b01      	cmp	r3, #1
 800768e:	d10d      	bne.n	80076ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	43da      	mvns	r2, r3
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4013      	ands	r3, r2
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bf0c      	ite	eq
 80076a2:	2301      	moveq	r3, #1
 80076a4:	2300      	movne	r3, #0
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	461a      	mov	r2, r3
 80076aa:	e00c      	b.n	80076c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	43da      	mvns	r2, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4013      	ands	r3, r2
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	bf0c      	ite	eq
 80076be:	2301      	moveq	r3, #1
 80076c0:	2300      	movne	r3, #0
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	461a      	mov	r2, r3
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d0b6      	beq.n	800763a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	60b9      	str	r1, [r7, #8]
 80076e0:	607a      	str	r2, [r7, #4]
 80076e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076e4:	e051      	b.n	800778a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f4:	d123      	bne.n	800773e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007704:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800770e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2220      	movs	r2, #32
 800771a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	f043 0204 	orr.w	r2, r3, #4
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e046      	b.n	80077cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d021      	beq.n	800778a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007746:	f7fd fed1 	bl	80054ec <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	429a      	cmp	r2, r3
 8007754:	d302      	bcc.n	800775c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d116      	bne.n	800778a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2220      	movs	r2, #32
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	f043 0220 	orr.w	r2, r3, #32
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e020      	b.n	80077cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	0c1b      	lsrs	r3, r3, #16
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b01      	cmp	r3, #1
 8007792:	d10c      	bne.n	80077ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	43da      	mvns	r2, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4013      	ands	r3, r2
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bf14      	ite	ne
 80077a6:	2301      	movne	r3, #1
 80077a8:	2300      	moveq	r3, #0
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	e00b      	b.n	80077c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	43da      	mvns	r2, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	4013      	ands	r3, r2
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	bf14      	ite	ne
 80077c0:	2301      	movne	r3, #1
 80077c2:	2300      	moveq	r3, #0
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d18d      	bne.n	80076e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077e0:	e02d      	b.n	800783e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 f8ce 	bl	8007984 <I2C_IsAcknowledgeFailed>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e02d      	b.n	800784e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f8:	d021      	beq.n	800783e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077fa:	f7fd fe77 	bl	80054ec <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	429a      	cmp	r2, r3
 8007808:	d302      	bcc.n	8007810 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d116      	bne.n	800783e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2220      	movs	r2, #32
 800781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	f043 0220 	orr.w	r2, r3, #32
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e007      	b.n	800784e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007848:	2b80      	cmp	r3, #128	; 0x80
 800784a:	d1ca      	bne.n	80077e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	60b9      	str	r1, [r7, #8]
 8007860:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007862:	e02d      	b.n	80078c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 f88d 	bl	8007984 <I2C_IsAcknowledgeFailed>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e02d      	b.n	80078d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787a:	d021      	beq.n	80078c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800787c:	f7fd fe36 	bl	80054ec <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	429a      	cmp	r2, r3
 800788a:	d302      	bcc.n	8007892 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d116      	bne.n	80078c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	f043 0220 	orr.w	r2, r3, #32
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e007      	b.n	80078d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d1ca      	bne.n	8007864 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078e4:	e042      	b.n	800796c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2b10      	cmp	r3, #16
 80078f2:	d119      	bne.n	8007928 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0210 	mvn.w	r2, #16
 80078fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2220      	movs	r2, #32
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e029      	b.n	800797c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007928:	f7fd fde0 	bl	80054ec <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	429a      	cmp	r2, r3
 8007936:	d302      	bcc.n	800793e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d116      	bne.n	800796c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2220      	movs	r2, #32
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	f043 0220 	orr.w	r2, r3, #32
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e007      	b.n	800797c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007976:	2b40      	cmp	r3, #64	; 0x40
 8007978:	d1b5      	bne.n	80078e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800799a:	d11b      	bne.n	80079d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c0:	f043 0204 	orr.w	r2, r3, #4
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
	...

080079e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e267      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d075      	beq.n	8007aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a02:	4b88      	ldr	r3, [pc, #544]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f003 030c 	and.w	r3, r3, #12
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d00c      	beq.n	8007a28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a0e:	4b85      	ldr	r3, [pc, #532]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a16:	2b08      	cmp	r3, #8
 8007a18:	d112      	bne.n	8007a40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a1a:	4b82      	ldr	r3, [pc, #520]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a26:	d10b      	bne.n	8007a40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a28:	4b7e      	ldr	r3, [pc, #504]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d05b      	beq.n	8007aec <HAL_RCC_OscConfig+0x108>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d157      	bne.n	8007aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e242      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a48:	d106      	bne.n	8007a58 <HAL_RCC_OscConfig+0x74>
 8007a4a:	4b76      	ldr	r3, [pc, #472]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a75      	ldr	r2, [pc, #468]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	e01d      	b.n	8007a94 <HAL_RCC_OscConfig+0xb0>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a60:	d10c      	bne.n	8007a7c <HAL_RCC_OscConfig+0x98>
 8007a62:	4b70      	ldr	r3, [pc, #448]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a6f      	ldr	r2, [pc, #444]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	4b6d      	ldr	r3, [pc, #436]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a6c      	ldr	r2, [pc, #432]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	e00b      	b.n	8007a94 <HAL_RCC_OscConfig+0xb0>
 8007a7c:	4b69      	ldr	r3, [pc, #420]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a68      	ldr	r2, [pc, #416]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	4b66      	ldr	r3, [pc, #408]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a65      	ldr	r2, [pc, #404]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d013      	beq.n	8007ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a9c:	f7fd fd26 	bl	80054ec <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007aa4:	f7fd fd22 	bl	80054ec <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b64      	cmp	r3, #100	; 0x64
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e207      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ab6:	4b5b      	ldr	r3, [pc, #364]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0f0      	beq.n	8007aa4 <HAL_RCC_OscConfig+0xc0>
 8007ac2:	e014      	b.n	8007aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ac4:	f7fd fd12 	bl	80054ec <HAL_GetTick>
 8007ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aca:	e008      	b.n	8007ade <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007acc:	f7fd fd0e 	bl	80054ec <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b64      	cmp	r3, #100	; 0x64
 8007ad8:	d901      	bls.n	8007ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e1f3      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ade:	4b51      	ldr	r3, [pc, #324]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1f0      	bne.n	8007acc <HAL_RCC_OscConfig+0xe8>
 8007aea:	e000      	b.n	8007aee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d063      	beq.n	8007bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007afa:	4b4a      	ldr	r3, [pc, #296]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f003 030c 	and.w	r3, r3, #12
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00b      	beq.n	8007b1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b06:	4b47      	ldr	r3, [pc, #284]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b0e:	2b08      	cmp	r3, #8
 8007b10:	d11c      	bne.n	8007b4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b12:	4b44      	ldr	r3, [pc, #272]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d116      	bne.n	8007b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b1e:	4b41      	ldr	r3, [pc, #260]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d005      	beq.n	8007b36 <HAL_RCC_OscConfig+0x152>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d001      	beq.n	8007b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e1c7      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b36:	4b3b      	ldr	r3, [pc, #236]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	4937      	ldr	r1, [pc, #220]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b4a:	e03a      	b.n	8007bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d020      	beq.n	8007b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b54:	4b34      	ldr	r3, [pc, #208]	; (8007c28 <HAL_RCC_OscConfig+0x244>)
 8007b56:	2201      	movs	r2, #1
 8007b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b5a:	f7fd fcc7 	bl	80054ec <HAL_GetTick>
 8007b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b60:	e008      	b.n	8007b74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b62:	f7fd fcc3 	bl	80054ec <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d901      	bls.n	8007b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e1a8      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b74:	4b2b      	ldr	r3, [pc, #172]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0302 	and.w	r3, r3, #2
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d0f0      	beq.n	8007b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b80:	4b28      	ldr	r3, [pc, #160]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	00db      	lsls	r3, r3, #3
 8007b8e:	4925      	ldr	r1, [pc, #148]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007b90:	4313      	orrs	r3, r2
 8007b92:	600b      	str	r3, [r1, #0]
 8007b94:	e015      	b.n	8007bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b96:	4b24      	ldr	r3, [pc, #144]	; (8007c28 <HAL_RCC_OscConfig+0x244>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9c:	f7fd fca6 	bl	80054ec <HAL_GetTick>
 8007ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ba4:	f7fd fca2 	bl	80054ec <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e187      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bb6:	4b1b      	ldr	r3, [pc, #108]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f0      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0308 	and.w	r3, r3, #8
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d036      	beq.n	8007c3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d016      	beq.n	8007c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bd6:	4b15      	ldr	r3, [pc, #84]	; (8007c2c <HAL_RCC_OscConfig+0x248>)
 8007bd8:	2201      	movs	r2, #1
 8007bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bdc:	f7fd fc86 	bl	80054ec <HAL_GetTick>
 8007be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007be2:	e008      	b.n	8007bf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007be4:	f7fd fc82 	bl	80054ec <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e167      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <HAL_RCC_OscConfig+0x240>)
 8007bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0f0      	beq.n	8007be4 <HAL_RCC_OscConfig+0x200>
 8007c02:	e01b      	b.n	8007c3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c04:	4b09      	ldr	r3, [pc, #36]	; (8007c2c <HAL_RCC_OscConfig+0x248>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c0a:	f7fd fc6f 	bl	80054ec <HAL_GetTick>
 8007c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c10:	e00e      	b.n	8007c30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c12:	f7fd fc6b 	bl	80054ec <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d907      	bls.n	8007c30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e150      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
 8007c24:	40023800 	.word	0x40023800
 8007c28:	42470000 	.word	0x42470000
 8007c2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c30:	4b88      	ldr	r3, [pc, #544]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1ea      	bne.n	8007c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 8097 	beq.w	8007d78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c4e:	4b81      	ldr	r3, [pc, #516]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10f      	bne.n	8007c7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60bb      	str	r3, [r7, #8]
 8007c5e:	4b7d      	ldr	r3, [pc, #500]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	4a7c      	ldr	r2, [pc, #496]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c68:	6413      	str	r3, [r2, #64]	; 0x40
 8007c6a:	4b7a      	ldr	r3, [pc, #488]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c72:	60bb      	str	r3, [r7, #8]
 8007c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c76:	2301      	movs	r3, #1
 8007c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c7a:	4b77      	ldr	r3, [pc, #476]	; (8007e58 <HAL_RCC_OscConfig+0x474>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d118      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c86:	4b74      	ldr	r3, [pc, #464]	; (8007e58 <HAL_RCC_OscConfig+0x474>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a73      	ldr	r2, [pc, #460]	; (8007e58 <HAL_RCC_OscConfig+0x474>)
 8007c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c92:	f7fd fc2b 	bl	80054ec <HAL_GetTick>
 8007c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c98:	e008      	b.n	8007cac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c9a:	f7fd fc27 	bl	80054ec <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d901      	bls.n	8007cac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e10c      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cac:	4b6a      	ldr	r3, [pc, #424]	; (8007e58 <HAL_RCC_OscConfig+0x474>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0f0      	beq.n	8007c9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d106      	bne.n	8007cce <HAL_RCC_OscConfig+0x2ea>
 8007cc0:	4b64      	ldr	r3, [pc, #400]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc4:	4a63      	ldr	r2, [pc, #396]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007cc6:	f043 0301 	orr.w	r3, r3, #1
 8007cca:	6713      	str	r3, [r2, #112]	; 0x70
 8007ccc:	e01c      	b.n	8007d08 <HAL_RCC_OscConfig+0x324>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	2b05      	cmp	r3, #5
 8007cd4:	d10c      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x30c>
 8007cd6:	4b5f      	ldr	r3, [pc, #380]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cda:	4a5e      	ldr	r2, [pc, #376]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007cdc:	f043 0304 	orr.w	r3, r3, #4
 8007ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ce2:	4b5c      	ldr	r3, [pc, #368]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce6:	4a5b      	ldr	r2, [pc, #364]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007ce8:	f043 0301 	orr.w	r3, r3, #1
 8007cec:	6713      	str	r3, [r2, #112]	; 0x70
 8007cee:	e00b      	b.n	8007d08 <HAL_RCC_OscConfig+0x324>
 8007cf0:	4b58      	ldr	r3, [pc, #352]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf4:	4a57      	ldr	r2, [pc, #348]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007cf6:	f023 0301 	bic.w	r3, r3, #1
 8007cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8007cfc:	4b55      	ldr	r3, [pc, #340]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d00:	4a54      	ldr	r2, [pc, #336]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007d02:	f023 0304 	bic.w	r3, r3, #4
 8007d06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d015      	beq.n	8007d3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d10:	f7fd fbec 	bl	80054ec <HAL_GetTick>
 8007d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d16:	e00a      	b.n	8007d2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d18:	f7fd fbe8 	bl	80054ec <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e0cb      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d2e:	4b49      	ldr	r3, [pc, #292]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0ee      	beq.n	8007d18 <HAL_RCC_OscConfig+0x334>
 8007d3a:	e014      	b.n	8007d66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d3c:	f7fd fbd6 	bl	80054ec <HAL_GetTick>
 8007d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d42:	e00a      	b.n	8007d5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d44:	f7fd fbd2 	bl	80054ec <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e0b5      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d5a:	4b3e      	ldr	r3, [pc, #248]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1ee      	bne.n	8007d44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d105      	bne.n	8007d78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d6c:	4b39      	ldr	r3, [pc, #228]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d70:	4a38      	ldr	r2, [pc, #224]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 80a1 	beq.w	8007ec4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d82:	4b34      	ldr	r3, [pc, #208]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f003 030c 	and.w	r3, r3, #12
 8007d8a:	2b08      	cmp	r3, #8
 8007d8c:	d05c      	beq.n	8007e48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d141      	bne.n	8007e1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d96:	4b31      	ldr	r3, [pc, #196]	; (8007e5c <HAL_RCC_OscConfig+0x478>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d9c:	f7fd fba6 	bl	80054ec <HAL_GetTick>
 8007da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007da2:	e008      	b.n	8007db6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007da4:	f7fd fba2 	bl	80054ec <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d901      	bls.n	8007db6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e087      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007db6:	4b27      	ldr	r3, [pc, #156]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1f0      	bne.n	8007da4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	69da      	ldr	r2, [r3, #28]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	431a      	orrs	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	019b      	lsls	r3, r3, #6
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd8:	085b      	lsrs	r3, r3, #1
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	041b      	lsls	r3, r3, #16
 8007dde:	431a      	orrs	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	061b      	lsls	r3, r3, #24
 8007de6:	491b      	ldr	r1, [pc, #108]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dec:	4b1b      	ldr	r3, [pc, #108]	; (8007e5c <HAL_RCC_OscConfig+0x478>)
 8007dee:	2201      	movs	r2, #1
 8007df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007df2:	f7fd fb7b 	bl	80054ec <HAL_GetTick>
 8007df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007df8:	e008      	b.n	8007e0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dfa:	f7fd fb77 	bl	80054ec <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d901      	bls.n	8007e0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e05c      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e0c:	4b11      	ldr	r3, [pc, #68]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0f0      	beq.n	8007dfa <HAL_RCC_OscConfig+0x416>
 8007e18:	e054      	b.n	8007ec4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e1a:	4b10      	ldr	r3, [pc, #64]	; (8007e5c <HAL_RCC_OscConfig+0x478>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e20:	f7fd fb64 	bl	80054ec <HAL_GetTick>
 8007e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e26:	e008      	b.n	8007e3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e28:	f7fd fb60 	bl	80054ec <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d901      	bls.n	8007e3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e045      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e3a:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <HAL_RCC_OscConfig+0x470>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1f0      	bne.n	8007e28 <HAL_RCC_OscConfig+0x444>
 8007e46:	e03d      	b.n	8007ec4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d107      	bne.n	8007e60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e038      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
 8007e54:	40023800 	.word	0x40023800
 8007e58:	40007000 	.word	0x40007000
 8007e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e60:	4b1b      	ldr	r3, [pc, #108]	; (8007ed0 <HAL_RCC_OscConfig+0x4ec>)
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d028      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d121      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d11a      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e90:	4013      	ands	r3, r2
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d111      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	085b      	lsrs	r3, r3, #1
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d107      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d001      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e000      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	40023800 	.word	0x40023800

08007ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e0cc      	b.n	8008082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ee8:	4b68      	ldr	r3, [pc, #416]	; (800808c <HAL_RCC_ClockConfig+0x1b8>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d90c      	bls.n	8007f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ef6:	4b65      	ldr	r3, [pc, #404]	; (800808c <HAL_RCC_ClockConfig+0x1b8>)
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	b2d2      	uxtb	r2, r2
 8007efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007efe:	4b63      	ldr	r3, [pc, #396]	; (800808c <HAL_RCC_ClockConfig+0x1b8>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0307 	and.w	r3, r3, #7
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d001      	beq.n	8007f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e0b8      	b.n	8008082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d020      	beq.n	8007f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0304 	and.w	r3, r3, #4
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f28:	4b59      	ldr	r3, [pc, #356]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	4a58      	ldr	r2, [pc, #352]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8007f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0308 	and.w	r3, r3, #8
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d005      	beq.n	8007f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f40:	4b53      	ldr	r3, [pc, #332]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	4a52      	ldr	r2, [pc, #328]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8007f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f4c:	4b50      	ldr	r3, [pc, #320]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	494d      	ldr	r1, [pc, #308]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d044      	beq.n	8007ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d107      	bne.n	8007f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f72:	4b47      	ldr	r3, [pc, #284]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d119      	bne.n	8007fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e07f      	b.n	8008082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d003      	beq.n	8007f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d107      	bne.n	8007fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f92:	4b3f      	ldr	r3, [pc, #252]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d109      	bne.n	8007fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e06f      	b.n	8008082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fa2:	4b3b      	ldr	r3, [pc, #236]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e067      	b.n	8008082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fb2:	4b37      	ldr	r3, [pc, #220]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f023 0203 	bic.w	r2, r3, #3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	4934      	ldr	r1, [pc, #208]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fc4:	f7fd fa92 	bl	80054ec <HAL_GetTick>
 8007fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fca:	e00a      	b.n	8007fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fcc:	f7fd fa8e 	bl	80054ec <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d901      	bls.n	8007fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e04f      	b.n	8008082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fe2:	4b2b      	ldr	r3, [pc, #172]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f003 020c 	and.w	r2, r3, #12
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d1eb      	bne.n	8007fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ff4:	4b25      	ldr	r3, [pc, #148]	; (800808c <HAL_RCC_ClockConfig+0x1b8>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0307 	and.w	r3, r3, #7
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d20c      	bcs.n	800801c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008002:	4b22      	ldr	r3, [pc, #136]	; (800808c <HAL_RCC_ClockConfig+0x1b8>)
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	b2d2      	uxtb	r2, r2
 8008008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800800a:	4b20      	ldr	r3, [pc, #128]	; (800808c <HAL_RCC_ClockConfig+0x1b8>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	429a      	cmp	r2, r3
 8008016:	d001      	beq.n	800801c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e032      	b.n	8008082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0304 	and.w	r3, r3, #4
 8008024:	2b00      	cmp	r3, #0
 8008026:	d008      	beq.n	800803a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008028:	4b19      	ldr	r3, [pc, #100]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	4916      	ldr	r1, [pc, #88]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8008036:	4313      	orrs	r3, r2
 8008038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0308 	and.w	r3, r3, #8
 8008042:	2b00      	cmp	r3, #0
 8008044:	d009      	beq.n	800805a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008046:	4b12      	ldr	r3, [pc, #72]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	00db      	lsls	r3, r3, #3
 8008054:	490e      	ldr	r1, [pc, #56]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8008056:	4313      	orrs	r3, r2
 8008058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800805a:	f000 f821 	bl	80080a0 <HAL_RCC_GetSysClockFreq>
 800805e:	4602      	mov	r2, r0
 8008060:	4b0b      	ldr	r3, [pc, #44]	; (8008090 <HAL_RCC_ClockConfig+0x1bc>)
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	091b      	lsrs	r3, r3, #4
 8008066:	f003 030f 	and.w	r3, r3, #15
 800806a:	490a      	ldr	r1, [pc, #40]	; (8008094 <HAL_RCC_ClockConfig+0x1c0>)
 800806c:	5ccb      	ldrb	r3, [r1, r3]
 800806e:	fa22 f303 	lsr.w	r3, r2, r3
 8008072:	4a09      	ldr	r2, [pc, #36]	; (8008098 <HAL_RCC_ClockConfig+0x1c4>)
 8008074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008076:	4b09      	ldr	r3, [pc, #36]	; (800809c <HAL_RCC_ClockConfig+0x1c8>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4618      	mov	r0, r3
 800807c:	f7fd f9f2 	bl	8005464 <HAL_InitTick>

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	40023c00 	.word	0x40023c00
 8008090:	40023800 	.word	0x40023800
 8008094:	080154f0 	.word	0x080154f0
 8008098:	2000000c 	.word	0x2000000c
 800809c:	20000010 	.word	0x20000010

080080a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080a4:	b094      	sub	sp, #80	; 0x50
 80080a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80080a8:	2300      	movs	r3, #0
 80080aa:	647b      	str	r3, [r7, #68]	; 0x44
 80080ac:	2300      	movs	r3, #0
 80080ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080b0:	2300      	movs	r3, #0
 80080b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080b8:	4b79      	ldr	r3, [pc, #484]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f003 030c 	and.w	r3, r3, #12
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d00d      	beq.n	80080e0 <HAL_RCC_GetSysClockFreq+0x40>
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	f200 80e1 	bhi.w	800828c <HAL_RCC_GetSysClockFreq+0x1ec>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <HAL_RCC_GetSysClockFreq+0x34>
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	d003      	beq.n	80080da <HAL_RCC_GetSysClockFreq+0x3a>
 80080d2:	e0db      	b.n	800828c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080d4:	4b73      	ldr	r3, [pc, #460]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80080d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80080d8:	e0db      	b.n	8008292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080da:	4b73      	ldr	r3, [pc, #460]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80080dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080de:	e0d8      	b.n	8008292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080e0:	4b6f      	ldr	r3, [pc, #444]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080ea:	4b6d      	ldr	r3, [pc, #436]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d063      	beq.n	80081be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080f6:	4b6a      	ldr	r3, [pc, #424]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	099b      	lsrs	r3, r3, #6
 80080fc:	2200      	movs	r2, #0
 80080fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8008100:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008108:	633b      	str	r3, [r7, #48]	; 0x30
 800810a:	2300      	movs	r3, #0
 800810c:	637b      	str	r3, [r7, #52]	; 0x34
 800810e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008112:	4622      	mov	r2, r4
 8008114:	462b      	mov	r3, r5
 8008116:	f04f 0000 	mov.w	r0, #0
 800811a:	f04f 0100 	mov.w	r1, #0
 800811e:	0159      	lsls	r1, r3, #5
 8008120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008124:	0150      	lsls	r0, r2, #5
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	4621      	mov	r1, r4
 800812c:	1a51      	subs	r1, r2, r1
 800812e:	6139      	str	r1, [r7, #16]
 8008130:	4629      	mov	r1, r5
 8008132:	eb63 0301 	sbc.w	r3, r3, r1
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	f04f 0200 	mov.w	r2, #0
 800813c:	f04f 0300 	mov.w	r3, #0
 8008140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008144:	4659      	mov	r1, fp
 8008146:	018b      	lsls	r3, r1, #6
 8008148:	4651      	mov	r1, sl
 800814a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800814e:	4651      	mov	r1, sl
 8008150:	018a      	lsls	r2, r1, #6
 8008152:	4651      	mov	r1, sl
 8008154:	ebb2 0801 	subs.w	r8, r2, r1
 8008158:	4659      	mov	r1, fp
 800815a:	eb63 0901 	sbc.w	r9, r3, r1
 800815e:	f04f 0200 	mov.w	r2, #0
 8008162:	f04f 0300 	mov.w	r3, #0
 8008166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800816a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800816e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008172:	4690      	mov	r8, r2
 8008174:	4699      	mov	r9, r3
 8008176:	4623      	mov	r3, r4
 8008178:	eb18 0303 	adds.w	r3, r8, r3
 800817c:	60bb      	str	r3, [r7, #8]
 800817e:	462b      	mov	r3, r5
 8008180:	eb49 0303 	adc.w	r3, r9, r3
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	f04f 0200 	mov.w	r2, #0
 800818a:	f04f 0300 	mov.w	r3, #0
 800818e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008192:	4629      	mov	r1, r5
 8008194:	024b      	lsls	r3, r1, #9
 8008196:	4621      	mov	r1, r4
 8008198:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800819c:	4621      	mov	r1, r4
 800819e:	024a      	lsls	r2, r1, #9
 80081a0:	4610      	mov	r0, r2
 80081a2:	4619      	mov	r1, r3
 80081a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081a6:	2200      	movs	r2, #0
 80081a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80081aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081b0:	f7f8 fd6a 	bl	8000c88 <__aeabi_uldivmod>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	4613      	mov	r3, r2
 80081ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081bc:	e058      	b.n	8008270 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081be:	4b38      	ldr	r3, [pc, #224]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	099b      	lsrs	r3, r3, #6
 80081c4:	2200      	movs	r2, #0
 80081c6:	4618      	mov	r0, r3
 80081c8:	4611      	mov	r1, r2
 80081ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80081ce:	623b      	str	r3, [r7, #32]
 80081d0:	2300      	movs	r3, #0
 80081d2:	627b      	str	r3, [r7, #36]	; 0x24
 80081d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80081d8:	4642      	mov	r2, r8
 80081da:	464b      	mov	r3, r9
 80081dc:	f04f 0000 	mov.w	r0, #0
 80081e0:	f04f 0100 	mov.w	r1, #0
 80081e4:	0159      	lsls	r1, r3, #5
 80081e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081ea:	0150      	lsls	r0, r2, #5
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	4641      	mov	r1, r8
 80081f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80081f6:	4649      	mov	r1, r9
 80081f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80081fc:	f04f 0200 	mov.w	r2, #0
 8008200:	f04f 0300 	mov.w	r3, #0
 8008204:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008208:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800820c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008210:	ebb2 040a 	subs.w	r4, r2, sl
 8008214:	eb63 050b 	sbc.w	r5, r3, fp
 8008218:	f04f 0200 	mov.w	r2, #0
 800821c:	f04f 0300 	mov.w	r3, #0
 8008220:	00eb      	lsls	r3, r5, #3
 8008222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008226:	00e2      	lsls	r2, r4, #3
 8008228:	4614      	mov	r4, r2
 800822a:	461d      	mov	r5, r3
 800822c:	4643      	mov	r3, r8
 800822e:	18e3      	adds	r3, r4, r3
 8008230:	603b      	str	r3, [r7, #0]
 8008232:	464b      	mov	r3, r9
 8008234:	eb45 0303 	adc.w	r3, r5, r3
 8008238:	607b      	str	r3, [r7, #4]
 800823a:	f04f 0200 	mov.w	r2, #0
 800823e:	f04f 0300 	mov.w	r3, #0
 8008242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008246:	4629      	mov	r1, r5
 8008248:	028b      	lsls	r3, r1, #10
 800824a:	4621      	mov	r1, r4
 800824c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008250:	4621      	mov	r1, r4
 8008252:	028a      	lsls	r2, r1, #10
 8008254:	4610      	mov	r0, r2
 8008256:	4619      	mov	r1, r3
 8008258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800825a:	2200      	movs	r2, #0
 800825c:	61bb      	str	r3, [r7, #24]
 800825e:	61fa      	str	r2, [r7, #28]
 8008260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008264:	f7f8 fd10 	bl	8000c88 <__aeabi_uldivmod>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	4613      	mov	r3, r2
 800826e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008270:	4b0b      	ldr	r3, [pc, #44]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	0c1b      	lsrs	r3, r3, #16
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	3301      	adds	r3, #1
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008280:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008284:	fbb2 f3f3 	udiv	r3, r2, r3
 8008288:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800828a:	e002      	b.n	8008292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800828c:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800828e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008294:	4618      	mov	r0, r3
 8008296:	3750      	adds	r7, #80	; 0x50
 8008298:	46bd      	mov	sp, r7
 800829a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800829e:	bf00      	nop
 80082a0:	40023800 	.word	0x40023800
 80082a4:	00f42400 	.word	0x00f42400
 80082a8:	007a1200 	.word	0x007a1200

080082ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082b0:	4b03      	ldr	r3, [pc, #12]	; (80082c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80082b2:	681b      	ldr	r3, [r3, #0]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	2000000c 	.word	0x2000000c

080082c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80082c8:	f7ff fff0 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 80082cc:	4602      	mov	r2, r0
 80082ce:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	0a9b      	lsrs	r3, r3, #10
 80082d4:	f003 0307 	and.w	r3, r3, #7
 80082d8:	4903      	ldr	r1, [pc, #12]	; (80082e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082da:	5ccb      	ldrb	r3, [r1, r3]
 80082dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	40023800 	.word	0x40023800
 80082e8:	08015500 	.word	0x08015500

080082ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80082f0:	f7ff ffdc 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 80082f4:	4602      	mov	r2, r0
 80082f6:	4b05      	ldr	r3, [pc, #20]	; (800830c <HAL_RCC_GetPCLK2Freq+0x20>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	0b5b      	lsrs	r3, r3, #13
 80082fc:	f003 0307 	and.w	r3, r3, #7
 8008300:	4903      	ldr	r1, [pc, #12]	; (8008310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008302:	5ccb      	ldrb	r3, [r1, r3]
 8008304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008308:	4618      	mov	r0, r3
 800830a:	bd80      	pop	{r7, pc}
 800830c:	40023800 	.word	0x40023800
 8008310:	08015500 	.word	0x08015500

08008314 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e07b      	b.n	800841e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	2b00      	cmp	r3, #0
 800832c:	d108      	bne.n	8008340 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008336:	d009      	beq.n	800834c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	61da      	str	r2, [r3, #28]
 800833e:	e005      	b.n	800834c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d106      	bne.n	800836c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7fb fc4c 	bl	8003c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008382:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008394:	431a      	orrs	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800839e:	431a      	orrs	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	431a      	orrs	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	431a      	orrs	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083bc:	431a      	orrs	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083c6:	431a      	orrs	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d0:	ea42 0103 	orr.w	r1, r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	0c1b      	lsrs	r3, r3, #16
 80083ea:	f003 0104 	and.w	r1, r3, #4
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	f003 0210 	and.w	r2, r3, #16
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	69da      	ldr	r2, [r3, #28]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800840c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b088      	sub	sp, #32
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	603b      	str	r3, [r7, #0]
 8008432:	4613      	mov	r3, r2
 8008434:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008440:	2b01      	cmp	r3, #1
 8008442:	d101      	bne.n	8008448 <HAL_SPI_Transmit+0x22>
 8008444:	2302      	movs	r3, #2
 8008446:	e126      	b.n	8008696 <HAL_SPI_Transmit+0x270>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008450:	f7fd f84c 	bl	80054ec <HAL_GetTick>
 8008454:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008456:	88fb      	ldrh	r3, [r7, #6]
 8008458:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b01      	cmp	r3, #1
 8008464:	d002      	beq.n	800846c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008466:	2302      	movs	r3, #2
 8008468:	77fb      	strb	r3, [r7, #31]
    goto error;
 800846a:	e10b      	b.n	8008684 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d002      	beq.n	8008478 <HAL_SPI_Transmit+0x52>
 8008472:	88fb      	ldrh	r3, [r7, #6]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d102      	bne.n	800847e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800847c:	e102      	b.n	8008684 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2203      	movs	r2, #3
 8008482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	88fa      	ldrh	r2, [r7, #6]
 8008496:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	88fa      	ldrh	r2, [r7, #6]
 800849c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084c4:	d10f      	bne.n	80084e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f0:	2b40      	cmp	r3, #64	; 0x40
 80084f2:	d007      	beq.n	8008504 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008502:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800850c:	d14b      	bne.n	80085a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <HAL_SPI_Transmit+0xf6>
 8008516:	8afb      	ldrh	r3, [r7, #22]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d13e      	bne.n	800859a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008520:	881a      	ldrh	r2, [r3, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852c:	1c9a      	adds	r2, r3, #2
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008536:	b29b      	uxth	r3, r3
 8008538:	3b01      	subs	r3, #1
 800853a:	b29a      	uxth	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008540:	e02b      	b.n	800859a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f003 0302 	and.w	r3, r3, #2
 800854c:	2b02      	cmp	r3, #2
 800854e:	d112      	bne.n	8008576 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008554:	881a      	ldrh	r2, [r3, #0]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008560:	1c9a      	adds	r2, r3, #2
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800856a:	b29b      	uxth	r3, r3
 800856c:	3b01      	subs	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	86da      	strh	r2, [r3, #54]	; 0x36
 8008574:	e011      	b.n	800859a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008576:	f7fc ffb9 	bl	80054ec <HAL_GetTick>
 800857a:	4602      	mov	r2, r0
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	d803      	bhi.n	800858e <HAL_SPI_Transmit+0x168>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858c:	d102      	bne.n	8008594 <HAL_SPI_Transmit+0x16e>
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d102      	bne.n	800859a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008598:	e074      	b.n	8008684 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800859e:	b29b      	uxth	r3, r3
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1ce      	bne.n	8008542 <HAL_SPI_Transmit+0x11c>
 80085a4:	e04c      	b.n	8008640 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <HAL_SPI_Transmit+0x18e>
 80085ae:	8afb      	ldrh	r3, [r7, #22]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d140      	bne.n	8008636 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	330c      	adds	r3, #12
 80085be:	7812      	ldrb	r2, [r2, #0]
 80085c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	3b01      	subs	r3, #1
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80085da:	e02c      	b.n	8008636 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d113      	bne.n	8008612 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	330c      	adds	r3, #12
 80085f4:	7812      	ldrb	r2, [r2, #0]
 80085f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008606:	b29b      	uxth	r3, r3
 8008608:	3b01      	subs	r3, #1
 800860a:	b29a      	uxth	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008610:	e011      	b.n	8008636 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008612:	f7fc ff6b 	bl	80054ec <HAL_GetTick>
 8008616:	4602      	mov	r2, r0
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d803      	bhi.n	800862a <HAL_SPI_Transmit+0x204>
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008628:	d102      	bne.n	8008630 <HAL_SPI_Transmit+0x20a>
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d102      	bne.n	8008636 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008630:	2303      	movs	r3, #3
 8008632:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008634:	e026      	b.n	8008684 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800863a:	b29b      	uxth	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1cd      	bne.n	80085dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 fa63 	bl	8008b10 <SPI_EndRxTxTransaction>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2220      	movs	r2, #32
 8008654:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10a      	bne.n	8008674 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800865e:	2300      	movs	r3, #0
 8008660:	613b      	str	r3, [r7, #16]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	613b      	str	r3, [r7, #16]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	613b      	str	r3, [r7, #16]
 8008672:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	77fb      	strb	r3, [r7, #31]
 8008680:	e000      	b.n	8008684 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008682:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008694:	7ffb      	ldrb	r3, [r7, #31]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3720      	adds	r7, #32
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b08c      	sub	sp, #48	; 0x30
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	607a      	str	r2, [r7, #4]
 80086aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80086ac:	2301      	movs	r3, #1
 80086ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d101      	bne.n	80086c4 <HAL_SPI_TransmitReceive+0x26>
 80086c0:	2302      	movs	r3, #2
 80086c2:	e18a      	b.n	80089da <HAL_SPI_TransmitReceive+0x33c>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086cc:	f7fc ff0e 	bl	80054ec <HAL_GetTick>
 80086d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80086e2:	887b      	ldrh	r3, [r7, #2]
 80086e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80086e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d00f      	beq.n	800870e <HAL_SPI_TransmitReceive+0x70>
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086f4:	d107      	bne.n	8008706 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d103      	bne.n	8008706 <HAL_SPI_TransmitReceive+0x68>
 80086fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008702:	2b04      	cmp	r3, #4
 8008704:	d003      	beq.n	800870e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008706:	2302      	movs	r3, #2
 8008708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800870c:	e15b      	b.n	80089c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d005      	beq.n	8008720 <HAL_SPI_TransmitReceive+0x82>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <HAL_SPI_TransmitReceive+0x82>
 800871a:	887b      	ldrh	r3, [r7, #2]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d103      	bne.n	8008728 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008726:	e14e      	b.n	80089c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b04      	cmp	r3, #4
 8008732:	d003      	beq.n	800873c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2205      	movs	r2, #5
 8008738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	887a      	ldrh	r2, [r7, #2]
 800874c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	887a      	ldrh	r2, [r7, #2]
 8008752:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	887a      	ldrh	r2, [r7, #2]
 800875e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	887a      	ldrh	r2, [r7, #2]
 8008764:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2200      	movs	r2, #0
 8008770:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877c:	2b40      	cmp	r3, #64	; 0x40
 800877e:	d007      	beq.n	8008790 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800878e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008798:	d178      	bne.n	800888c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d002      	beq.n	80087a8 <HAL_SPI_TransmitReceive+0x10a>
 80087a2:	8b7b      	ldrh	r3, [r7, #26]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d166      	bne.n	8008876 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ac:	881a      	ldrh	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b8:	1c9a      	adds	r2, r3, #2
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	3b01      	subs	r3, #1
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087cc:	e053      	b.n	8008876 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f003 0302 	and.w	r3, r3, #2
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d11b      	bne.n	8008814 <HAL_SPI_TransmitReceive+0x176>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d016      	beq.n	8008814 <HAL_SPI_TransmitReceive+0x176>
 80087e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d113      	bne.n	8008814 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f0:	881a      	ldrh	r2, [r3, #0]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fc:	1c9a      	adds	r2, r3, #2
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008806:	b29b      	uxth	r3, r3
 8008808:	3b01      	subs	r3, #1
 800880a:	b29a      	uxth	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b01      	cmp	r3, #1
 8008820:	d119      	bne.n	8008856 <HAL_SPI_TransmitReceive+0x1b8>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008826:	b29b      	uxth	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	d014      	beq.n	8008856 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	b292      	uxth	r2, r2
 8008838:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	1c9a      	adds	r2, r3, #2
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008848:	b29b      	uxth	r3, r3
 800884a:	3b01      	subs	r3, #1
 800884c:	b29a      	uxth	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008852:	2301      	movs	r3, #1
 8008854:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008856:	f7fc fe49 	bl	80054ec <HAL_GetTick>
 800885a:	4602      	mov	r2, r0
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008862:	429a      	cmp	r2, r3
 8008864:	d807      	bhi.n	8008876 <HAL_SPI_TransmitReceive+0x1d8>
 8008866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886c:	d003      	beq.n	8008876 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008874:	e0a7      	b.n	80089c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800887a:	b29b      	uxth	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1a6      	bne.n	80087ce <HAL_SPI_TransmitReceive+0x130>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008884:	b29b      	uxth	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1a1      	bne.n	80087ce <HAL_SPI_TransmitReceive+0x130>
 800888a:	e07c      	b.n	8008986 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <HAL_SPI_TransmitReceive+0x1fc>
 8008894:	8b7b      	ldrh	r3, [r7, #26]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d16b      	bne.n	8008972 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	330c      	adds	r3, #12
 80088a4:	7812      	ldrb	r2, [r2, #0]
 80088a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	3b01      	subs	r3, #1
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088c0:	e057      	b.n	8008972 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f003 0302 	and.w	r3, r3, #2
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d11c      	bne.n	800890a <HAL_SPI_TransmitReceive+0x26c>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d017      	beq.n	800890a <HAL_SPI_TransmitReceive+0x26c>
 80088da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d114      	bne.n	800890a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	330c      	adds	r3, #12
 80088ea:	7812      	ldrb	r2, [r2, #0]
 80088ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f2:	1c5a      	adds	r2, r3, #1
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	3b01      	subs	r3, #1
 8008900:	b29a      	uxth	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b01      	cmp	r3, #1
 8008916:	d119      	bne.n	800894c <HAL_SPI_TransmitReceive+0x2ae>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800891c:	b29b      	uxth	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d014      	beq.n	800894c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68da      	ldr	r2, [r3, #12]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892c:	b2d2      	uxtb	r2, r2
 800892e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800893e:	b29b      	uxth	r3, r3
 8008940:	3b01      	subs	r3, #1
 8008942:	b29a      	uxth	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008948:	2301      	movs	r3, #1
 800894a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800894c:	f7fc fdce 	bl	80054ec <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008958:	429a      	cmp	r2, r3
 800895a:	d803      	bhi.n	8008964 <HAL_SPI_TransmitReceive+0x2c6>
 800895c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008962:	d102      	bne.n	800896a <HAL_SPI_TransmitReceive+0x2cc>
 8008964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008966:	2b00      	cmp	r3, #0
 8008968:	d103      	bne.n	8008972 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008970:	e029      	b.n	80089c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008976:	b29b      	uxth	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1a2      	bne.n	80088c2 <HAL_SPI_TransmitReceive+0x224>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008980:	b29b      	uxth	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d19d      	bne.n	80088c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008988:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f000 f8c0 	bl	8008b10 <SPI_EndRxTxTransaction>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d006      	beq.n	80089a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2220      	movs	r2, #32
 80089a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80089a2:	e010      	b.n	80089c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10b      	bne.n	80089c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089ac:	2300      	movs	r3, #0
 80089ae:	617b      	str	r3, [r7, #20]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	617b      	str	r3, [r7, #20]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	617b      	str	r3, [r7, #20]
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	e000      	b.n	80089c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80089c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3730      	adds	r7, #48	; 0x30
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089f0:	b2db      	uxtb	r3, r3
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
	...

08008a00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b088      	sub	sp, #32
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	603b      	str	r3, [r7, #0]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a10:	f7fc fd6c 	bl	80054ec <HAL_GetTick>
 8008a14:	4602      	mov	r2, r0
 8008a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a18:	1a9b      	subs	r3, r3, r2
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a20:	f7fc fd64 	bl	80054ec <HAL_GetTick>
 8008a24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a26:	4b39      	ldr	r3, [pc, #228]	; (8008b0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	015b      	lsls	r3, r3, #5
 8008a2c:	0d1b      	lsrs	r3, r3, #20
 8008a2e:	69fa      	ldr	r2, [r7, #28]
 8008a30:	fb02 f303 	mul.w	r3, r2, r3
 8008a34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a36:	e054      	b.n	8008ae2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3e:	d050      	beq.n	8008ae2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a40:	f7fc fd54 	bl	80054ec <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	69fa      	ldr	r2, [r7, #28]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d902      	bls.n	8008a56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d13d      	bne.n	8008ad2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a6e:	d111      	bne.n	8008a94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a78:	d004      	beq.n	8008a84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a82:	d107      	bne.n	8008a94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a9c:	d10f      	bne.n	8008abe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008abc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e017      	b.n	8008b02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d101      	bne.n	8008adc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689a      	ldr	r2, [r3, #8]
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	4013      	ands	r3, r2
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	bf0c      	ite	eq
 8008af2:	2301      	moveq	r3, #1
 8008af4:	2300      	movne	r3, #0
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	461a      	mov	r2, r3
 8008afa:	79fb      	ldrb	r3, [r7, #7]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d19b      	bne.n	8008a38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3720      	adds	r7, #32
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	2000000c 	.word	0x2000000c

08008b10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b088      	sub	sp, #32
 8008b14:	af02      	add	r7, sp, #8
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008b1c:	4b1b      	ldr	r3, [pc, #108]	; (8008b8c <SPI_EndRxTxTransaction+0x7c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a1b      	ldr	r2, [pc, #108]	; (8008b90 <SPI_EndRxTxTransaction+0x80>)
 8008b22:	fba2 2303 	umull	r2, r3, r2, r3
 8008b26:	0d5b      	lsrs	r3, r3, #21
 8008b28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b2c:	fb02 f303 	mul.w	r3, r2, r3
 8008b30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b3a:	d112      	bne.n	8008b62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2200      	movs	r2, #0
 8008b44:	2180      	movs	r1, #128	; 0x80
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f7ff ff5a 	bl	8008a00 <SPI_WaitFlagStateUntilTimeout>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d016      	beq.n	8008b80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b56:	f043 0220 	orr.w	r2, r3, #32
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e00f      	b.n	8008b82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00a      	beq.n	8008b7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b78:	2b80      	cmp	r3, #128	; 0x80
 8008b7a:	d0f2      	beq.n	8008b62 <SPI_EndRxTxTransaction+0x52>
 8008b7c:	e000      	b.n	8008b80 <SPI_EndRxTxTransaction+0x70>
        break;
 8008b7e:	bf00      	nop
  }

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3718      	adds	r7, #24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	2000000c 	.word	0x2000000c
 8008b90:	165e9f81 	.word	0x165e9f81

08008b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d101      	bne.n	8008ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e041      	b.n	8008c2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d106      	bne.n	8008bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7fb f86a 	bl	8003c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3304      	adds	r3, #4
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4610      	mov	r0, r2
 8008bd4:	f000 fe54 	bl	8009880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d001      	beq.n	8008c4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e046      	b.n	8008cda <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a23      	ldr	r2, [pc, #140]	; (8008ce8 <HAL_TIM_Base_Start+0xb4>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d022      	beq.n	8008ca4 <HAL_TIM_Base_Start+0x70>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c66:	d01d      	beq.n	8008ca4 <HAL_TIM_Base_Start+0x70>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a1f      	ldr	r2, [pc, #124]	; (8008cec <HAL_TIM_Base_Start+0xb8>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d018      	beq.n	8008ca4 <HAL_TIM_Base_Start+0x70>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a1e      	ldr	r2, [pc, #120]	; (8008cf0 <HAL_TIM_Base_Start+0xbc>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d013      	beq.n	8008ca4 <HAL_TIM_Base_Start+0x70>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a1c      	ldr	r2, [pc, #112]	; (8008cf4 <HAL_TIM_Base_Start+0xc0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d00e      	beq.n	8008ca4 <HAL_TIM_Base_Start+0x70>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a1b      	ldr	r2, [pc, #108]	; (8008cf8 <HAL_TIM_Base_Start+0xc4>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d009      	beq.n	8008ca4 <HAL_TIM_Base_Start+0x70>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a19      	ldr	r2, [pc, #100]	; (8008cfc <HAL_TIM_Base_Start+0xc8>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d004      	beq.n	8008ca4 <HAL_TIM_Base_Start+0x70>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a18      	ldr	r2, [pc, #96]	; (8008d00 <HAL_TIM_Base_Start+0xcc>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d111      	bne.n	8008cc8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f003 0307 	and.w	r3, r3, #7
 8008cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2b06      	cmp	r3, #6
 8008cb4:	d010      	beq.n	8008cd8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f042 0201 	orr.w	r2, r2, #1
 8008cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cc6:	e007      	b.n	8008cd8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f042 0201 	orr.w	r2, r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	40010000 	.word	0x40010000
 8008cec:	40000400 	.word	0x40000400
 8008cf0:	40000800 	.word	0x40000800
 8008cf4:	40000c00 	.word	0x40000c00
 8008cf8:	40010400 	.word	0x40010400
 8008cfc:	40014000 	.word	0x40014000
 8008d00:	40001800 	.word	0x40001800

08008d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d001      	beq.n	8008d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e04e      	b.n	8008dba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68da      	ldr	r2, [r3, #12]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f042 0201 	orr.w	r2, r2, #1
 8008d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a23      	ldr	r2, [pc, #140]	; (8008dc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d022      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x80>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d46:	d01d      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x80>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a1f      	ldr	r2, [pc, #124]	; (8008dcc <HAL_TIM_Base_Start_IT+0xc8>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d018      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x80>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a1e      	ldr	r2, [pc, #120]	; (8008dd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d013      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x80>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a1c      	ldr	r2, [pc, #112]	; (8008dd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d00e      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x80>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a1b      	ldr	r2, [pc, #108]	; (8008dd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d009      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x80>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a19      	ldr	r2, [pc, #100]	; (8008ddc <HAL_TIM_Base_Start_IT+0xd8>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d004      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0x80>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a18      	ldr	r2, [pc, #96]	; (8008de0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d111      	bne.n	8008da8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f003 0307 	and.w	r3, r3, #7
 8008d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b06      	cmp	r3, #6
 8008d94:	d010      	beq.n	8008db8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f042 0201 	orr.w	r2, r2, #1
 8008da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008da6:	e007      	b.n	8008db8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f042 0201 	orr.w	r2, r2, #1
 8008db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	40010000 	.word	0x40010000
 8008dcc:	40000400 	.word	0x40000400
 8008dd0:	40000800 	.word	0x40000800
 8008dd4:	40000c00 	.word	0x40000c00
 8008dd8:	40010400 	.word	0x40010400
 8008ddc:	40014000 	.word	0x40014000
 8008de0:	40001800 	.word	0x40001800

08008de4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e041      	b.n	8008e7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d106      	bne.n	8008e10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f839 	bl	8008e82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2202      	movs	r2, #2
 8008e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	3304      	adds	r3, #4
 8008e20:	4619      	mov	r1, r3
 8008e22:	4610      	mov	r0, r2
 8008e24:	f000 fd2c 	bl	8009880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
	...

08008e98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d109      	bne.n	8008ebc <HAL_TIM_PWM_Start+0x24>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	bf14      	ite	ne
 8008eb4:	2301      	movne	r3, #1
 8008eb6:	2300      	moveq	r3, #0
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	e022      	b.n	8008f02 <HAL_TIM_PWM_Start+0x6a>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2b04      	cmp	r3, #4
 8008ec0:	d109      	bne.n	8008ed6 <HAL_TIM_PWM_Start+0x3e>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	bf14      	ite	ne
 8008ece:	2301      	movne	r3, #1
 8008ed0:	2300      	moveq	r3, #0
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	e015      	b.n	8008f02 <HAL_TIM_PWM_Start+0x6a>
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2b08      	cmp	r3, #8
 8008eda:	d109      	bne.n	8008ef0 <HAL_TIM_PWM_Start+0x58>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	bf14      	ite	ne
 8008ee8:	2301      	movne	r3, #1
 8008eea:	2300      	moveq	r3, #0
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	e008      	b.n	8008f02 <HAL_TIM_PWM_Start+0x6a>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	bf14      	ite	ne
 8008efc:	2301      	movne	r3, #1
 8008efe:	2300      	moveq	r3, #0
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e07c      	b.n	8009004 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d104      	bne.n	8008f1a <HAL_TIM_PWM_Start+0x82>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2202      	movs	r2, #2
 8008f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f18:	e013      	b.n	8008f42 <HAL_TIM_PWM_Start+0xaa>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	d104      	bne.n	8008f2a <HAL_TIM_PWM_Start+0x92>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f28:	e00b      	b.n	8008f42 <HAL_TIM_PWM_Start+0xaa>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b08      	cmp	r3, #8
 8008f2e:	d104      	bne.n	8008f3a <HAL_TIM_PWM_Start+0xa2>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f38:	e003      	b.n	8008f42 <HAL_TIM_PWM_Start+0xaa>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2201      	movs	r2, #1
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f001 f93e 	bl	800a1cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a2d      	ldr	r2, [pc, #180]	; (800900c <HAL_TIM_PWM_Start+0x174>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d004      	beq.n	8008f64 <HAL_TIM_PWM_Start+0xcc>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a2c      	ldr	r2, [pc, #176]	; (8009010 <HAL_TIM_PWM_Start+0x178>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d101      	bne.n	8008f68 <HAL_TIM_PWM_Start+0xd0>
 8008f64:	2301      	movs	r3, #1
 8008f66:	e000      	b.n	8008f6a <HAL_TIM_PWM_Start+0xd2>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d007      	beq.n	8008f7e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a22      	ldr	r2, [pc, #136]	; (800900c <HAL_TIM_PWM_Start+0x174>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d022      	beq.n	8008fce <HAL_TIM_PWM_Start+0x136>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f90:	d01d      	beq.n	8008fce <HAL_TIM_PWM_Start+0x136>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a1f      	ldr	r2, [pc, #124]	; (8009014 <HAL_TIM_PWM_Start+0x17c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d018      	beq.n	8008fce <HAL_TIM_PWM_Start+0x136>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a1d      	ldr	r2, [pc, #116]	; (8009018 <HAL_TIM_PWM_Start+0x180>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d013      	beq.n	8008fce <HAL_TIM_PWM_Start+0x136>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a1c      	ldr	r2, [pc, #112]	; (800901c <HAL_TIM_PWM_Start+0x184>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d00e      	beq.n	8008fce <HAL_TIM_PWM_Start+0x136>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a16      	ldr	r2, [pc, #88]	; (8009010 <HAL_TIM_PWM_Start+0x178>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d009      	beq.n	8008fce <HAL_TIM_PWM_Start+0x136>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a18      	ldr	r2, [pc, #96]	; (8009020 <HAL_TIM_PWM_Start+0x188>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d004      	beq.n	8008fce <HAL_TIM_PWM_Start+0x136>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a16      	ldr	r2, [pc, #88]	; (8009024 <HAL_TIM_PWM_Start+0x18c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d111      	bne.n	8008ff2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f003 0307 	and.w	r3, r3, #7
 8008fd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b06      	cmp	r3, #6
 8008fde:	d010      	beq.n	8009002 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f042 0201 	orr.w	r2, r2, #1
 8008fee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ff0:	e007      	b.n	8009002 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f042 0201 	orr.w	r2, r2, #1
 8009000:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	40010000 	.word	0x40010000
 8009010:	40010400 	.word	0x40010400
 8009014:	40000400 	.word	0x40000400
 8009018:	40000800 	.word	0x40000800
 800901c:	40000c00 	.word	0x40000c00
 8009020:	40014000 	.word	0x40014000
 8009024:	40001800 	.word	0x40001800

08009028 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e041      	b.n	80090be <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b00      	cmp	r3, #0
 8009044:	d106      	bne.n	8009054 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f839 	bl	80090c6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2202      	movs	r2, #2
 8009058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	3304      	adds	r3, #4
 8009064:	4619      	mov	r1, r3
 8009066:	4610      	mov	r0, r2
 8009068:	f000 fc0a 	bl	8009880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b083      	sub	sp, #12
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80090ce:	bf00      	nop
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b082      	sub	sp, #8
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	f003 0302 	and.w	r3, r3, #2
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d122      	bne.n	8009136 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	f003 0302 	and.w	r3, r3, #2
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d11b      	bne.n	8009136 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f06f 0202 	mvn.w	r2, #2
 8009106:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	f003 0303 	and.w	r3, r3, #3
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7f9 f947 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 8009122:	e005      	b.n	8009130 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fb8d 	bl	8009844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fb94 	bl	8009858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	f003 0304 	and.w	r3, r3, #4
 8009140:	2b04      	cmp	r3, #4
 8009142:	d122      	bne.n	800918a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	f003 0304 	and.w	r3, r3, #4
 800914e:	2b04      	cmp	r3, #4
 8009150:	d11b      	bne.n	800918a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f06f 0204 	mvn.w	r2, #4
 800915a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2202      	movs	r2, #2
 8009160:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800916c:	2b00      	cmp	r3, #0
 800916e:	d003      	beq.n	8009178 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7f9 f91d 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 8009176:	e005      	b.n	8009184 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fb63 	bl	8009844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fb6a 	bl	8009858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	f003 0308 	and.w	r3, r3, #8
 8009194:	2b08      	cmp	r3, #8
 8009196:	d122      	bne.n	80091de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	f003 0308 	and.w	r3, r3, #8
 80091a2:	2b08      	cmp	r3, #8
 80091a4:	d11b      	bne.n	80091de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f06f 0208 	mvn.w	r2, #8
 80091ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2204      	movs	r2, #4
 80091b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	69db      	ldr	r3, [r3, #28]
 80091bc:	f003 0303 	and.w	r3, r3, #3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d003      	beq.n	80091cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7f9 f8f3 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 80091ca:	e005      	b.n	80091d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fb39 	bl	8009844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fb40 	bl	8009858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	f003 0310 	and.w	r3, r3, #16
 80091e8:	2b10      	cmp	r3, #16
 80091ea:	d122      	bne.n	8009232 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f003 0310 	and.w	r3, r3, #16
 80091f6:	2b10      	cmp	r3, #16
 80091f8:	d11b      	bne.n	8009232 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f06f 0210 	mvn.w	r2, #16
 8009202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2208      	movs	r2, #8
 8009208:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	69db      	ldr	r3, [r3, #28]
 8009210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009214:	2b00      	cmp	r3, #0
 8009216:	d003      	beq.n	8009220 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7f9 f8c9 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 800921e:	e005      	b.n	800922c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fb0f 	bl	8009844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fb16 	bl	8009858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	f003 0301 	and.w	r3, r3, #1
 800923c:	2b01      	cmp	r3, #1
 800923e:	d10e      	bne.n	800925e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b01      	cmp	r3, #1
 800924c:	d107      	bne.n	800925e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f06f 0201 	mvn.w	r2, #1
 8009256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f7f9 f94b 	bl	80024f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009268:	2b80      	cmp	r3, #128	; 0x80
 800926a:	d10e      	bne.n	800928a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009276:	2b80      	cmp	r3, #128	; 0x80
 8009278:	d107      	bne.n	800928a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f001 f84d 	bl	800a324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009294:	2b40      	cmp	r3, #64	; 0x40
 8009296:	d10e      	bne.n	80092b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a2:	2b40      	cmp	r3, #64	; 0x40
 80092a4:	d107      	bne.n	80092b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fadb 	bl	800986c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	f003 0320 	and.w	r3, r3, #32
 80092c0:	2b20      	cmp	r3, #32
 80092c2:	d10e      	bne.n	80092e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	f003 0320 	and.w	r3, r3, #32
 80092ce:	2b20      	cmp	r3, #32
 80092d0:	d107      	bne.n	80092e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f06f 0220 	mvn.w	r2, #32
 80092da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 f817 	bl	800a310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092e2:	bf00      	nop
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b086      	sub	sp, #24
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	60f8      	str	r0, [r7, #12]
 80092f2:	60b9      	str	r1, [r7, #8]
 80092f4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009300:	2b01      	cmp	r3, #1
 8009302:	d101      	bne.n	8009308 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009304:	2302      	movs	r3, #2
 8009306:	e088      	b.n	800941a <HAL_TIM_IC_ConfigChannel+0x130>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d11b      	bne.n	800934e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6818      	ldr	r0, [r3, #0]
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	6819      	ldr	r1, [r3, #0]
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	f000 fd8d 	bl	8009e44 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	699a      	ldr	r2, [r3, #24]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 020c 	bic.w	r2, r2, #12
 8009338:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	6999      	ldr	r1, [r3, #24]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	689a      	ldr	r2, [r3, #8]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	619a      	str	r2, [r3, #24]
 800934c:	e060      	b.n	8009410 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b04      	cmp	r3, #4
 8009352:	d11c      	bne.n	800938e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6818      	ldr	r0, [r3, #0]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	6819      	ldr	r1, [r3, #0]
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	f000 fe11 	bl	8009f8a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	699a      	ldr	r2, [r3, #24]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009376:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6999      	ldr	r1, [r3, #24]
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	021a      	lsls	r2, r3, #8
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	430a      	orrs	r2, r1
 800938a:	619a      	str	r2, [r3, #24]
 800938c:	e040      	b.n	8009410 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b08      	cmp	r3, #8
 8009392:	d11b      	bne.n	80093cc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6818      	ldr	r0, [r3, #0]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	6819      	ldr	r1, [r3, #0]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f000 fe5e 	bl	800a064 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	69da      	ldr	r2, [r3, #28]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f022 020c 	bic.w	r2, r2, #12
 80093b6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	69d9      	ldr	r1, [r3, #28]
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	689a      	ldr	r2, [r3, #8]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	61da      	str	r2, [r3, #28]
 80093ca:	e021      	b.n	8009410 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b0c      	cmp	r3, #12
 80093d0:	d11c      	bne.n	800940c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6818      	ldr	r0, [r3, #0]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	6819      	ldr	r1, [r3, #0]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	685a      	ldr	r2, [r3, #4]
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	f000 fe7b 	bl	800a0dc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	69da      	ldr	r2, [r3, #28]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80093f4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	69d9      	ldr	r1, [r3, #28]
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	021a      	lsls	r2, r3, #8
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	61da      	str	r2, [r3, #28]
 800940a:	e001      	b.n	8009410 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3718      	adds	r7, #24
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800943a:	2b01      	cmp	r3, #1
 800943c:	d101      	bne.n	8009442 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800943e:	2302      	movs	r3, #2
 8009440:	e0ae      	b.n	80095a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b0c      	cmp	r3, #12
 800944e:	f200 809f 	bhi.w	8009590 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009452:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009458:	0800948d 	.word	0x0800948d
 800945c:	08009591 	.word	0x08009591
 8009460:	08009591 	.word	0x08009591
 8009464:	08009591 	.word	0x08009591
 8009468:	080094cd 	.word	0x080094cd
 800946c:	08009591 	.word	0x08009591
 8009470:	08009591 	.word	0x08009591
 8009474:	08009591 	.word	0x08009591
 8009478:	0800950f 	.word	0x0800950f
 800947c:	08009591 	.word	0x08009591
 8009480:	08009591 	.word	0x08009591
 8009484:	08009591 	.word	0x08009591
 8009488:	0800954f 	.word	0x0800954f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68b9      	ldr	r1, [r7, #8]
 8009492:	4618      	mov	r0, r3
 8009494:	f000 fa94 	bl	80099c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	699a      	ldr	r2, [r3, #24]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f042 0208 	orr.w	r2, r2, #8
 80094a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	699a      	ldr	r2, [r3, #24]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f022 0204 	bic.w	r2, r2, #4
 80094b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6999      	ldr	r1, [r3, #24]
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	691a      	ldr	r2, [r3, #16]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	619a      	str	r2, [r3, #24]
      break;
 80094ca:	e064      	b.n	8009596 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68b9      	ldr	r1, [r7, #8]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 fae4 	bl	8009aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	699a      	ldr	r2, [r3, #24]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	699a      	ldr	r2, [r3, #24]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6999      	ldr	r1, [r3, #24]
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	021a      	lsls	r2, r3, #8
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	619a      	str	r2, [r3, #24]
      break;
 800950c:	e043      	b.n	8009596 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68b9      	ldr	r1, [r7, #8]
 8009514:	4618      	mov	r0, r3
 8009516:	f000 fb39 	bl	8009b8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	69da      	ldr	r2, [r3, #28]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f042 0208 	orr.w	r2, r2, #8
 8009528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	69da      	ldr	r2, [r3, #28]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f022 0204 	bic.w	r2, r2, #4
 8009538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	69d9      	ldr	r1, [r3, #28]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	691a      	ldr	r2, [r3, #16]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	430a      	orrs	r2, r1
 800954a:	61da      	str	r2, [r3, #28]
      break;
 800954c:	e023      	b.n	8009596 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68b9      	ldr	r1, [r7, #8]
 8009554:	4618      	mov	r0, r3
 8009556:	f000 fb8d 	bl	8009c74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	69da      	ldr	r2, [r3, #28]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	69da      	ldr	r2, [r3, #28]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	69d9      	ldr	r1, [r3, #28]
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	021a      	lsls	r2, r3, #8
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	61da      	str	r2, [r3, #28]
      break;
 800958e:	e002      	b.n	8009596 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	75fb      	strb	r3, [r7, #23]
      break;
 8009594:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800959e:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095b2:	2300      	movs	r3, #0
 80095b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d101      	bne.n	80095c4 <HAL_TIM_ConfigClockSource+0x1c>
 80095c0:	2302      	movs	r3, #2
 80095c2:	e0b4      	b.n	800972e <HAL_TIM_ConfigClockSource+0x186>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2202      	movs	r2, #2
 80095d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80095e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095fc:	d03e      	beq.n	800967c <HAL_TIM_ConfigClockSource+0xd4>
 80095fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009602:	f200 8087 	bhi.w	8009714 <HAL_TIM_ConfigClockSource+0x16c>
 8009606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800960a:	f000 8086 	beq.w	800971a <HAL_TIM_ConfigClockSource+0x172>
 800960e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009612:	d87f      	bhi.n	8009714 <HAL_TIM_ConfigClockSource+0x16c>
 8009614:	2b70      	cmp	r3, #112	; 0x70
 8009616:	d01a      	beq.n	800964e <HAL_TIM_ConfigClockSource+0xa6>
 8009618:	2b70      	cmp	r3, #112	; 0x70
 800961a:	d87b      	bhi.n	8009714 <HAL_TIM_ConfigClockSource+0x16c>
 800961c:	2b60      	cmp	r3, #96	; 0x60
 800961e:	d050      	beq.n	80096c2 <HAL_TIM_ConfigClockSource+0x11a>
 8009620:	2b60      	cmp	r3, #96	; 0x60
 8009622:	d877      	bhi.n	8009714 <HAL_TIM_ConfigClockSource+0x16c>
 8009624:	2b50      	cmp	r3, #80	; 0x50
 8009626:	d03c      	beq.n	80096a2 <HAL_TIM_ConfigClockSource+0xfa>
 8009628:	2b50      	cmp	r3, #80	; 0x50
 800962a:	d873      	bhi.n	8009714 <HAL_TIM_ConfigClockSource+0x16c>
 800962c:	2b40      	cmp	r3, #64	; 0x40
 800962e:	d058      	beq.n	80096e2 <HAL_TIM_ConfigClockSource+0x13a>
 8009630:	2b40      	cmp	r3, #64	; 0x40
 8009632:	d86f      	bhi.n	8009714 <HAL_TIM_ConfigClockSource+0x16c>
 8009634:	2b30      	cmp	r3, #48	; 0x30
 8009636:	d064      	beq.n	8009702 <HAL_TIM_ConfigClockSource+0x15a>
 8009638:	2b30      	cmp	r3, #48	; 0x30
 800963a:	d86b      	bhi.n	8009714 <HAL_TIM_ConfigClockSource+0x16c>
 800963c:	2b20      	cmp	r3, #32
 800963e:	d060      	beq.n	8009702 <HAL_TIM_ConfigClockSource+0x15a>
 8009640:	2b20      	cmp	r3, #32
 8009642:	d867      	bhi.n	8009714 <HAL_TIM_ConfigClockSource+0x16c>
 8009644:	2b00      	cmp	r3, #0
 8009646:	d05c      	beq.n	8009702 <HAL_TIM_ConfigClockSource+0x15a>
 8009648:	2b10      	cmp	r3, #16
 800964a:	d05a      	beq.n	8009702 <HAL_TIM_ConfigClockSource+0x15a>
 800964c:	e062      	b.n	8009714 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6818      	ldr	r0, [r3, #0]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	6899      	ldr	r1, [r3, #8]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	685a      	ldr	r2, [r3, #4]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	f000 fd95 	bl	800a18c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	609a      	str	r2, [r3, #8]
      break;
 800967a:	e04f      	b.n	800971c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6818      	ldr	r0, [r3, #0]
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	6899      	ldr	r1, [r3, #8]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	f000 fd7e 	bl	800a18c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689a      	ldr	r2, [r3, #8]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800969e:	609a      	str	r2, [r3, #8]
      break;
 80096a0:	e03c      	b.n	800971c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	6859      	ldr	r1, [r3, #4]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	461a      	mov	r2, r3
 80096b0:	f000 fc3c 	bl	8009f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2150      	movs	r1, #80	; 0x50
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 fd4b 	bl	800a156 <TIM_ITRx_SetConfig>
      break;
 80096c0:	e02c      	b.n	800971c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	6859      	ldr	r1, [r3, #4]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	461a      	mov	r2, r3
 80096d0:	f000 fc98 	bl	800a004 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2160      	movs	r1, #96	; 0x60
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 fd3b 	bl	800a156 <TIM_ITRx_SetConfig>
      break;
 80096e0:	e01c      	b.n	800971c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6818      	ldr	r0, [r3, #0]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	6859      	ldr	r1, [r3, #4]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	461a      	mov	r2, r3
 80096f0:	f000 fc1c 	bl	8009f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2140      	movs	r1, #64	; 0x40
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fd2b 	bl	800a156 <TIM_ITRx_SetConfig>
      break;
 8009700:	e00c      	b.n	800971c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4619      	mov	r1, r3
 800970c:	4610      	mov	r0, r2
 800970e:	f000 fd22 	bl	800a156 <TIM_ITRx_SetConfig>
      break;
 8009712:	e003      	b.n	800971c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	73fb      	strb	r3, [r7, #15]
      break;
 8009718:	e000      	b.n	800971c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800971a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800972c:	7bfb      	ldrb	r3, [r7, #15]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009746:	2b01      	cmp	r3, #1
 8009748:	d101      	bne.n	800974e <HAL_TIM_SlaveConfigSynchro+0x18>
 800974a:	2302      	movs	r3, #2
 800974c:	e031      	b.n	80097b2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2202      	movs	r2, #2
 800975a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fadd 	bl	8009d20 <TIM_SlaveTimer_SetConfig>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d009      	beq.n	8009780 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e018      	b.n	80097b2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68da      	ldr	r2, [r3, #12]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800978e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68da      	ldr	r2, [r3, #12]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800979e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	2b0c      	cmp	r3, #12
 80097ce:	d831      	bhi.n	8009834 <HAL_TIM_ReadCapturedValue+0x78>
 80097d0:	a201      	add	r2, pc, #4	; (adr r2, 80097d8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80097d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d6:	bf00      	nop
 80097d8:	0800980d 	.word	0x0800980d
 80097dc:	08009835 	.word	0x08009835
 80097e0:	08009835 	.word	0x08009835
 80097e4:	08009835 	.word	0x08009835
 80097e8:	08009817 	.word	0x08009817
 80097ec:	08009835 	.word	0x08009835
 80097f0:	08009835 	.word	0x08009835
 80097f4:	08009835 	.word	0x08009835
 80097f8:	08009821 	.word	0x08009821
 80097fc:	08009835 	.word	0x08009835
 8009800:	08009835 	.word	0x08009835
 8009804:	08009835 	.word	0x08009835
 8009808:	0800982b 	.word	0x0800982b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009812:	60fb      	str	r3, [r7, #12]

      break;
 8009814:	e00f      	b.n	8009836 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981c:	60fb      	str	r3, [r7, #12]

      break;
 800981e:	e00a      	b.n	8009836 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009826:	60fb      	str	r3, [r7, #12]

      break;
 8009828:	e005      	b.n	8009836 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009830:	60fb      	str	r3, [r7, #12]

      break;
 8009832:	e000      	b.n	8009836 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009834:	bf00      	nop
  }

  return tmpreg;
 8009836:	68fb      	ldr	r3, [r7, #12]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a40      	ldr	r2, [pc, #256]	; (8009994 <TIM_Base_SetConfig+0x114>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d013      	beq.n	80098c0 <TIM_Base_SetConfig+0x40>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800989e:	d00f      	beq.n	80098c0 <TIM_Base_SetConfig+0x40>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a3d      	ldr	r2, [pc, #244]	; (8009998 <TIM_Base_SetConfig+0x118>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d00b      	beq.n	80098c0 <TIM_Base_SetConfig+0x40>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a3c      	ldr	r2, [pc, #240]	; (800999c <TIM_Base_SetConfig+0x11c>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d007      	beq.n	80098c0 <TIM_Base_SetConfig+0x40>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a3b      	ldr	r2, [pc, #236]	; (80099a0 <TIM_Base_SetConfig+0x120>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d003      	beq.n	80098c0 <TIM_Base_SetConfig+0x40>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a3a      	ldr	r2, [pc, #232]	; (80099a4 <TIM_Base_SetConfig+0x124>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d108      	bne.n	80098d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a2f      	ldr	r2, [pc, #188]	; (8009994 <TIM_Base_SetConfig+0x114>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d02b      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098e0:	d027      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a2c      	ldr	r2, [pc, #176]	; (8009998 <TIM_Base_SetConfig+0x118>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d023      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a2b      	ldr	r2, [pc, #172]	; (800999c <TIM_Base_SetConfig+0x11c>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d01f      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a2a      	ldr	r2, [pc, #168]	; (80099a0 <TIM_Base_SetConfig+0x120>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d01b      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a29      	ldr	r2, [pc, #164]	; (80099a4 <TIM_Base_SetConfig+0x124>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d017      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a28      	ldr	r2, [pc, #160]	; (80099a8 <TIM_Base_SetConfig+0x128>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d013      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a27      	ldr	r2, [pc, #156]	; (80099ac <TIM_Base_SetConfig+0x12c>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d00f      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a26      	ldr	r2, [pc, #152]	; (80099b0 <TIM_Base_SetConfig+0x130>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d00b      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a25      	ldr	r2, [pc, #148]	; (80099b4 <TIM_Base_SetConfig+0x134>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d007      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a24      	ldr	r2, [pc, #144]	; (80099b8 <TIM_Base_SetConfig+0x138>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d003      	beq.n	8009932 <TIM_Base_SetConfig+0xb2>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a23      	ldr	r2, [pc, #140]	; (80099bc <TIM_Base_SetConfig+0x13c>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d108      	bne.n	8009944 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	4313      	orrs	r3, r2
 8009942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	4313      	orrs	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	689a      	ldr	r2, [r3, #8]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a0a      	ldr	r2, [pc, #40]	; (8009994 <TIM_Base_SetConfig+0x114>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d003      	beq.n	8009978 <TIM_Base_SetConfig+0xf8>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a0c      	ldr	r2, [pc, #48]	; (80099a4 <TIM_Base_SetConfig+0x124>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d103      	bne.n	8009980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	691a      	ldr	r2, [r3, #16]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	615a      	str	r2, [r3, #20]
}
 8009986:	bf00      	nop
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	40010000 	.word	0x40010000
 8009998:	40000400 	.word	0x40000400
 800999c:	40000800 	.word	0x40000800
 80099a0:	40000c00 	.word	0x40000c00
 80099a4:	40010400 	.word	0x40010400
 80099a8:	40014000 	.word	0x40014000
 80099ac:	40014400 	.word	0x40014400
 80099b0:	40014800 	.word	0x40014800
 80099b4:	40001800 	.word	0x40001800
 80099b8:	40001c00 	.word	0x40001c00
 80099bc:	40002000 	.word	0x40002000

080099c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b087      	sub	sp, #28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	f023 0201 	bic.w	r2, r3, #1
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f023 0303 	bic.w	r3, r3, #3
 80099f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f023 0302 	bic.w	r3, r3, #2
 8009a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a20      	ldr	r2, [pc, #128]	; (8009a98 <TIM_OC1_SetConfig+0xd8>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d003      	beq.n	8009a24 <TIM_OC1_SetConfig+0x64>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a1f      	ldr	r2, [pc, #124]	; (8009a9c <TIM_OC1_SetConfig+0xdc>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d10c      	bne.n	8009a3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	f023 0308 	bic.w	r3, r3, #8
 8009a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f023 0304 	bic.w	r3, r3, #4
 8009a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a15      	ldr	r2, [pc, #84]	; (8009a98 <TIM_OC1_SetConfig+0xd8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d003      	beq.n	8009a4e <TIM_OC1_SetConfig+0x8e>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a14      	ldr	r2, [pc, #80]	; (8009a9c <TIM_OC1_SetConfig+0xdc>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d111      	bne.n	8009a72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	695b      	ldr	r3, [r3, #20]
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	621a      	str	r2, [r3, #32]
}
 8009a8c:	bf00      	nop
 8009a8e:	371c      	adds	r7, #28
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr
 8009a98:	40010000 	.word	0x40010000
 8009a9c:	40010400 	.word	0x40010400

08009aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	f023 0210 	bic.w	r2, r3, #16
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	021b      	lsls	r3, r3, #8
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	f023 0320 	bic.w	r3, r3, #32
 8009aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	011b      	lsls	r3, r3, #4
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a22      	ldr	r2, [pc, #136]	; (8009b84 <TIM_OC2_SetConfig+0xe4>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d003      	beq.n	8009b08 <TIM_OC2_SetConfig+0x68>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a21      	ldr	r2, [pc, #132]	; (8009b88 <TIM_OC2_SetConfig+0xe8>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d10d      	bne.n	8009b24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	011b      	lsls	r3, r3, #4
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a17      	ldr	r2, [pc, #92]	; (8009b84 <TIM_OC2_SetConfig+0xe4>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d003      	beq.n	8009b34 <TIM_OC2_SetConfig+0x94>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a16      	ldr	r2, [pc, #88]	; (8009b88 <TIM_OC2_SetConfig+0xe8>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d113      	bne.n	8009b5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	621a      	str	r2, [r3, #32]
}
 8009b76:	bf00      	nop
 8009b78:	371c      	adds	r7, #28
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	40010000 	.word	0x40010000
 8009b88:	40010400 	.word	0x40010400

08009b8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b087      	sub	sp, #28
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f023 0303 	bic.w	r3, r3, #3
 8009bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	021b      	lsls	r3, r3, #8
 8009bdc:	697a      	ldr	r2, [r7, #20]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a21      	ldr	r2, [pc, #132]	; (8009c6c <TIM_OC3_SetConfig+0xe0>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d003      	beq.n	8009bf2 <TIM_OC3_SetConfig+0x66>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a20      	ldr	r2, [pc, #128]	; (8009c70 <TIM_OC3_SetConfig+0xe4>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d10d      	bne.n	8009c0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	021b      	lsls	r3, r3, #8
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a16      	ldr	r2, [pc, #88]	; (8009c6c <TIM_OC3_SetConfig+0xe0>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d003      	beq.n	8009c1e <TIM_OC3_SetConfig+0x92>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a15      	ldr	r2, [pc, #84]	; (8009c70 <TIM_OC3_SetConfig+0xe4>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d113      	bne.n	8009c46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	011b      	lsls	r3, r3, #4
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	011b      	lsls	r3, r3, #4
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	621a      	str	r2, [r3, #32]
}
 8009c60:	bf00      	nop
 8009c62:	371c      	adds	r7, #28
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	40010000 	.word	0x40010000
 8009c70:	40010400 	.word	0x40010400

08009c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b087      	sub	sp, #28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	69db      	ldr	r3, [r3, #28]
 8009c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	021b      	lsls	r3, r3, #8
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	031b      	lsls	r3, r3, #12
 8009cc6:	693a      	ldr	r2, [r7, #16]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a12      	ldr	r2, [pc, #72]	; (8009d18 <TIM_OC4_SetConfig+0xa4>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d003      	beq.n	8009cdc <TIM_OC4_SetConfig+0x68>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a11      	ldr	r2, [pc, #68]	; (8009d1c <TIM_OC4_SetConfig+0xa8>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d109      	bne.n	8009cf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	695b      	ldr	r3, [r3, #20]
 8009ce8:	019b      	lsls	r3, r3, #6
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	685a      	ldr	r2, [r3, #4]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	621a      	str	r2, [r3, #32]
}
 8009d0a:	bf00      	nop
 8009d0c:	371c      	adds	r7, #28
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	40010000 	.word	0x40010000
 8009d1c:	40010400 	.word	0x40010400

08009d20 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d3c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	693a      	ldr	r2, [r7, #16]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	f023 0307 	bic.w	r3, r3, #7
 8009d4e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	693a      	ldr	r2, [r7, #16]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	2b70      	cmp	r3, #112	; 0x70
 8009d68:	d01a      	beq.n	8009da0 <TIM_SlaveTimer_SetConfig+0x80>
 8009d6a:	2b70      	cmp	r3, #112	; 0x70
 8009d6c:	d860      	bhi.n	8009e30 <TIM_SlaveTimer_SetConfig+0x110>
 8009d6e:	2b60      	cmp	r3, #96	; 0x60
 8009d70:	d054      	beq.n	8009e1c <TIM_SlaveTimer_SetConfig+0xfc>
 8009d72:	2b60      	cmp	r3, #96	; 0x60
 8009d74:	d85c      	bhi.n	8009e30 <TIM_SlaveTimer_SetConfig+0x110>
 8009d76:	2b50      	cmp	r3, #80	; 0x50
 8009d78:	d046      	beq.n	8009e08 <TIM_SlaveTimer_SetConfig+0xe8>
 8009d7a:	2b50      	cmp	r3, #80	; 0x50
 8009d7c:	d858      	bhi.n	8009e30 <TIM_SlaveTimer_SetConfig+0x110>
 8009d7e:	2b40      	cmp	r3, #64	; 0x40
 8009d80:	d019      	beq.n	8009db6 <TIM_SlaveTimer_SetConfig+0x96>
 8009d82:	2b40      	cmp	r3, #64	; 0x40
 8009d84:	d854      	bhi.n	8009e30 <TIM_SlaveTimer_SetConfig+0x110>
 8009d86:	2b30      	cmp	r3, #48	; 0x30
 8009d88:	d055      	beq.n	8009e36 <TIM_SlaveTimer_SetConfig+0x116>
 8009d8a:	2b30      	cmp	r3, #48	; 0x30
 8009d8c:	d850      	bhi.n	8009e30 <TIM_SlaveTimer_SetConfig+0x110>
 8009d8e:	2b20      	cmp	r3, #32
 8009d90:	d051      	beq.n	8009e36 <TIM_SlaveTimer_SetConfig+0x116>
 8009d92:	2b20      	cmp	r3, #32
 8009d94:	d84c      	bhi.n	8009e30 <TIM_SlaveTimer_SetConfig+0x110>
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d04d      	beq.n	8009e36 <TIM_SlaveTimer_SetConfig+0x116>
 8009d9a:	2b10      	cmp	r3, #16
 8009d9c:	d04b      	beq.n	8009e36 <TIM_SlaveTimer_SetConfig+0x116>
 8009d9e:	e047      	b.n	8009e30 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6818      	ldr	r0, [r3, #0]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	68d9      	ldr	r1, [r3, #12]
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	689a      	ldr	r2, [r3, #8]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	f000 f9ec 	bl	800a18c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8009db4:	e040      	b.n	8009e38 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b05      	cmp	r3, #5
 8009dbc:	d101      	bne.n	8009dc2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e03b      	b.n	8009e3a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6a1b      	ldr	r3, [r3, #32]
 8009dc8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	6a1a      	ldr	r2, [r3, #32]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f022 0201 	bic.w	r2, r2, #1
 8009dd8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009de8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	011b      	lsls	r3, r3, #4
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	621a      	str	r2, [r3, #32]
      break;
 8009e06:	e017      	b.n	8009e38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6818      	ldr	r0, [r3, #0]
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	6899      	ldr	r1, [r3, #8]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	461a      	mov	r2, r3
 8009e16:	f000 f889 	bl	8009f2c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009e1a:	e00d      	b.n	8009e38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6818      	ldr	r0, [r3, #0]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	6899      	ldr	r1, [r3, #8]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	f000 f8eb 	bl	800a004 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009e2e:	e003      	b.n	8009e38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	75fb      	strb	r3, [r7, #23]
      break;
 8009e34:	e000      	b.n	8009e38 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009e36:	bf00      	nop
  }

  return status;
 8009e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3718      	adds	r7, #24
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	f023 0201 	bic.w	r2, r3, #1
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6a1b      	ldr	r3, [r3, #32]
 8009e68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	4a28      	ldr	r2, [pc, #160]	; (8009f10 <TIM_TI1_SetConfig+0xcc>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d01b      	beq.n	8009eaa <TIM_TI1_SetConfig+0x66>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e78:	d017      	beq.n	8009eaa <TIM_TI1_SetConfig+0x66>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	4a25      	ldr	r2, [pc, #148]	; (8009f14 <TIM_TI1_SetConfig+0xd0>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d013      	beq.n	8009eaa <TIM_TI1_SetConfig+0x66>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	4a24      	ldr	r2, [pc, #144]	; (8009f18 <TIM_TI1_SetConfig+0xd4>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d00f      	beq.n	8009eaa <TIM_TI1_SetConfig+0x66>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	4a23      	ldr	r2, [pc, #140]	; (8009f1c <TIM_TI1_SetConfig+0xd8>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d00b      	beq.n	8009eaa <TIM_TI1_SetConfig+0x66>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4a22      	ldr	r2, [pc, #136]	; (8009f20 <TIM_TI1_SetConfig+0xdc>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d007      	beq.n	8009eaa <TIM_TI1_SetConfig+0x66>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	4a21      	ldr	r2, [pc, #132]	; (8009f24 <TIM_TI1_SetConfig+0xe0>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d003      	beq.n	8009eaa <TIM_TI1_SetConfig+0x66>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	4a20      	ldr	r2, [pc, #128]	; (8009f28 <TIM_TI1_SetConfig+0xe4>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d101      	bne.n	8009eae <TIM_TI1_SetConfig+0x6a>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e000      	b.n	8009eb0 <TIM_TI1_SetConfig+0x6c>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d008      	beq.n	8009ec6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f023 0303 	bic.w	r3, r3, #3
 8009eba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	617b      	str	r3, [r7, #20]
 8009ec4:	e003      	b.n	8009ece <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f043 0301 	orr.w	r3, r3, #1
 8009ecc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ed4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	011b      	lsls	r3, r3, #4
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	697a      	ldr	r2, [r7, #20]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f023 030a 	bic.w	r3, r3, #10
 8009ee8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	f003 030a 	and.w	r3, r3, #10
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	697a      	ldr	r2, [r7, #20]
 8009efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	693a      	ldr	r2, [r7, #16]
 8009f00:	621a      	str	r2, [r3, #32]
}
 8009f02:	bf00      	nop
 8009f04:	371c      	adds	r7, #28
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	40010000 	.word	0x40010000
 8009f14:	40000400 	.word	0x40000400
 8009f18:	40000800 	.word	0x40000800
 8009f1c:	40000c00 	.word	0x40000c00
 8009f20:	40010400 	.word	0x40010400
 8009f24:	40014000 	.word	0x40014000
 8009f28:	40001800 	.word	0x40001800

08009f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b087      	sub	sp, #28
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	f023 0201 	bic.w	r2, r3, #1
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	011b      	lsls	r3, r3, #4
 8009f5c:	693a      	ldr	r2, [r7, #16]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f023 030a 	bic.w	r3, r3, #10
 8009f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	693a      	ldr	r2, [r7, #16]
 8009f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	621a      	str	r2, [r3, #32]
}
 8009f7e:	bf00      	nop
 8009f80:	371c      	adds	r7, #28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b087      	sub	sp, #28
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	60b9      	str	r1, [r7, #8]
 8009f94:	607a      	str	r2, [r7, #4]
 8009f96:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6a1b      	ldr	r3, [r3, #32]
 8009f9c:	f023 0210 	bic.w	r2, r3, #16
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	021b      	lsls	r3, r3, #8
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	031b      	lsls	r3, r3, #12
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fdc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	011b      	lsls	r3, r3, #4
 8009fe2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	621a      	str	r2, [r3, #32]
}
 8009ff8:	bf00      	nop
 8009ffa:	371c      	adds	r7, #28
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a004:	b480      	push	{r7}
 800a006:	b087      	sub	sp, #28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6a1b      	ldr	r3, [r3, #32]
 800a014:	f023 0210 	bic.w	r2, r3, #16
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a02e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	031b      	lsls	r3, r3, #12
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	4313      	orrs	r3, r2
 800a038:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a040:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	011b      	lsls	r3, r3, #4
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	4313      	orrs	r3, r2
 800a04a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	621a      	str	r2, [r3, #32]
}
 800a058:	bf00      	nop
 800a05a:	371c      	adds	r7, #28
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a064:	b480      	push	{r7}
 800a066:	b087      	sub	sp, #28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
 800a070:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	69db      	ldr	r3, [r3, #28]
 800a082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6a1b      	ldr	r3, [r3, #32]
 800a088:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f023 0303 	bic.w	r3, r3, #3
 800a090:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4313      	orrs	r3, r2
 800a098:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	011b      	lsls	r3, r3, #4
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a0b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	021b      	lsls	r3, r3, #8
 800a0ba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	621a      	str	r2, [r3, #32]
}
 800a0d0:	bf00      	nop
 800a0d2:	371c      	adds	r7, #28
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b087      	sub	sp, #28
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
 800a0e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6a1b      	ldr	r3, [r3, #32]
 800a100:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a108:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	021b      	lsls	r3, r3, #8
 800a10e:	697a      	ldr	r2, [r7, #20]
 800a110:	4313      	orrs	r3, r2
 800a112:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a11a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	031b      	lsls	r3, r3, #12
 800a120:	b29b      	uxth	r3, r3
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	4313      	orrs	r3, r2
 800a126:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a12e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	031b      	lsls	r3, r3, #12
 800a134:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a138:	693a      	ldr	r2, [r7, #16]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	621a      	str	r2, [r3, #32]
}
 800a14a:	bf00      	nop
 800a14c:	371c      	adds	r7, #28
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a156:	b480      	push	{r7}
 800a158:	b085      	sub	sp, #20
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a16c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	4313      	orrs	r3, r2
 800a174:	f043 0307 	orr.w	r3, r3, #7
 800a178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	609a      	str	r2, [r3, #8]
}
 800a180:	bf00      	nop
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
 800a198:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	021a      	lsls	r2, r3, #8
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	431a      	orrs	r2, r3
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	609a      	str	r2, [r3, #8]
}
 800a1c0:	bf00      	nop
 800a1c2:	371c      	adds	r7, #28
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b087      	sub	sp, #28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	f003 031f 	and.w	r3, r3, #31
 800a1de:	2201      	movs	r2, #1
 800a1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6a1a      	ldr	r2, [r3, #32]
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	43db      	mvns	r3, r3
 800a1ee:	401a      	ands	r2, r3
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6a1a      	ldr	r2, [r3, #32]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	f003 031f 	and.w	r3, r3, #31
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	fa01 f303 	lsl.w	r3, r1, r3
 800a204:	431a      	orrs	r2, r3
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	621a      	str	r2, [r3, #32]
}
 800a20a:	bf00      	nop
 800a20c:	371c      	adds	r7, #28
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
	...

0800a218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d101      	bne.n	800a230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a22c:	2302      	movs	r3, #2
 800a22e:	e05a      	b.n	800a2e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2202      	movs	r2, #2
 800a23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	4313      	orrs	r3, r2
 800a260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a21      	ldr	r2, [pc, #132]	; (800a2f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d022      	beq.n	800a2ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a27c:	d01d      	beq.n	800a2ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a1d      	ldr	r2, [pc, #116]	; (800a2f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d018      	beq.n	800a2ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a1b      	ldr	r2, [pc, #108]	; (800a2fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d013      	beq.n	800a2ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a1a      	ldr	r2, [pc, #104]	; (800a300 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d00e      	beq.n	800a2ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a18      	ldr	r2, [pc, #96]	; (800a304 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d009      	beq.n	800a2ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a17      	ldr	r2, [pc, #92]	; (800a308 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d004      	beq.n	800a2ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a15      	ldr	r2, [pc, #84]	; (800a30c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d10c      	bne.n	800a2d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	40010000 	.word	0x40010000
 800a2f8:	40000400 	.word	0x40000400
 800a2fc:	40000800 	.word	0x40000800
 800a300:	40000c00 	.word	0x40000c00
 800a304:	40010400 	.word	0x40010400
 800a308:	40014000 	.word	0x40014000
 800a30c:	40001800 	.word	0x40001800

0800a310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d101      	bne.n	800a34a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e03f      	b.n	800a3ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a350:	b2db      	uxtb	r3, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	d106      	bne.n	800a364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7f9 fdbe 	bl	8003ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2224      	movs	r2, #36	; 0x24
 800a368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68da      	ldr	r2, [r3, #12]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a37a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 ff11 	bl	800b1a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	691a      	ldr	r2, [r3, #16]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	695a      	ldr	r2, [r3, #20]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68da      	ldr	r2, [r3, #12]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a3b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2220      	movs	r2, #32
 800a3bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b085      	sub	sp, #20
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	60f8      	str	r0, [r7, #12]
 800a3da:	60b9      	str	r1, [r7, #8]
 800a3dc:	4613      	mov	r3, r2
 800a3de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	2b20      	cmp	r3, #32
 800a3ea:	d130      	bne.n	800a44e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <HAL_UART_Transmit_IT+0x26>
 800a3f2:	88fb      	ldrh	r3, [r7, #6]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e029      	b.n	800a450 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a402:	2b01      	cmp	r3, #1
 800a404:	d101      	bne.n	800a40a <HAL_UART_Transmit_IT+0x38>
 800a406:	2302      	movs	r3, #2
 800a408:	e022      	b.n	800a450 <HAL_UART_Transmit_IT+0x7e>
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	88fa      	ldrh	r2, [r7, #6]
 800a41c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	88fa      	ldrh	r2, [r7, #6]
 800a422:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2221      	movs	r2, #33	; 0x21
 800a42e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68da      	ldr	r2, [r3, #12]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a448:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	e000      	b.n	800a450 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a44e:	2302      	movs	r3, #2
  }
}
 800a450:	4618      	mov	r0, r3
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	4613      	mov	r3, r2
 800a468:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b20      	cmp	r3, #32
 800a474:	d11d      	bne.n	800a4b2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d002      	beq.n	800a482 <HAL_UART_Receive_IT+0x26>
 800a47c:	88fb      	ldrh	r3, [r7, #6]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	e016      	b.n	800a4b4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d101      	bne.n	800a494 <HAL_UART_Receive_IT+0x38>
 800a490:	2302      	movs	r3, #2
 800a492:	e00f      	b.n	800a4b4 <HAL_UART_Receive_IT+0x58>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a4a2:	88fb      	ldrh	r3, [r7, #6]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	68b9      	ldr	r1, [r7, #8]
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 fbdd 	bl	800ac68 <UART_Start_Receive_IT>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	e000      	b.n	800a4b4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a4b2:	2302      	movs	r3, #2
  }
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b20      	cmp	r3, #32
 800a4d4:	d11d      	bne.n	800a512 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d002      	beq.n	800a4e2 <HAL_UART_Receive_DMA+0x26>
 800a4dc:	88fb      	ldrh	r3, [r7, #6]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e016      	b.n	800a514 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d101      	bne.n	800a4f4 <HAL_UART_Receive_DMA+0x38>
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	e00f      	b.n	800a514 <HAL_UART_Receive_DMA+0x58>
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a502:	88fb      	ldrh	r3, [r7, #6]
 800a504:	461a      	mov	r2, r3
 800a506:	68b9      	ldr	r1, [r7, #8]
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 fbeb 	bl	800ace4 <UART_Start_Receive_DMA>
 800a50e:	4603      	mov	r3, r0
 800a510:	e000      	b.n	800a514 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a512:	2302      	movs	r3, #2
  }
}
 800a514:	4618      	mov	r0, r3
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b0ba      	sub	sp, #232	; 0xe8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a542:	2300      	movs	r3, #0
 800a544:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a548:	2300      	movs	r3, #0
 800a54a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a54e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a552:	f003 030f 	and.w	r3, r3, #15
 800a556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a55a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10f      	bne.n	800a582 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a566:	f003 0320 	and.w	r3, r3, #32
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d009      	beq.n	800a582 <HAL_UART_IRQHandler+0x66>
 800a56e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a572:	f003 0320 	and.w	r3, r3, #32
 800a576:	2b00      	cmp	r3, #0
 800a578:	d003      	beq.n	800a582 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fd57 	bl	800b02e <UART_Receive_IT>
      return;
 800a580:	e256      	b.n	800aa30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a586:	2b00      	cmp	r3, #0
 800a588:	f000 80de 	beq.w	800a748 <HAL_UART_IRQHandler+0x22c>
 800a58c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a590:	f003 0301 	and.w	r3, r3, #1
 800a594:	2b00      	cmp	r3, #0
 800a596:	d106      	bne.n	800a5a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a59c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 80d1 	beq.w	800a748 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a5a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5aa:	f003 0301 	and.w	r3, r3, #1
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00b      	beq.n	800a5ca <HAL_UART_IRQHandler+0xae>
 800a5b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d005      	beq.n	800a5ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c2:	f043 0201 	orr.w	r2, r3, #1
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5ce:	f003 0304 	and.w	r3, r3, #4
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00b      	beq.n	800a5ee <HAL_UART_IRQHandler+0xd2>
 800a5d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5da:	f003 0301 	and.w	r3, r3, #1
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d005      	beq.n	800a5ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e6:	f043 0202 	orr.w	r2, r3, #2
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5f2:	f003 0302 	and.w	r3, r3, #2
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00b      	beq.n	800a612 <HAL_UART_IRQHandler+0xf6>
 800a5fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	2b00      	cmp	r3, #0
 800a604:	d005      	beq.n	800a612 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60a:	f043 0204 	orr.w	r2, r3, #4
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a616:	f003 0308 	and.w	r3, r3, #8
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d011      	beq.n	800a642 <HAL_UART_IRQHandler+0x126>
 800a61e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a622:	f003 0320 	and.w	r3, r3, #32
 800a626:	2b00      	cmp	r3, #0
 800a628:	d105      	bne.n	800a636 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a62a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	2b00      	cmp	r3, #0
 800a634:	d005      	beq.n	800a642 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63a:	f043 0208 	orr.w	r2, r3, #8
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 81ed 	beq.w	800aa26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a64c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a650:	f003 0320 	and.w	r3, r3, #32
 800a654:	2b00      	cmp	r3, #0
 800a656:	d008      	beq.n	800a66a <HAL_UART_IRQHandler+0x14e>
 800a658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a65c:	f003 0320 	and.w	r3, r3, #32
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fce2 	bl	800b02e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	695b      	ldr	r3, [r3, #20]
 800a670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a674:	2b40      	cmp	r3, #64	; 0x40
 800a676:	bf0c      	ite	eq
 800a678:	2301      	moveq	r3, #1
 800a67a:	2300      	movne	r3, #0
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a686:	f003 0308 	and.w	r3, r3, #8
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d103      	bne.n	800a696 <HAL_UART_IRQHandler+0x17a>
 800a68e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a692:	2b00      	cmp	r3, #0
 800a694:	d04f      	beq.n	800a736 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fbea 	bl	800ae70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6a6:	2b40      	cmp	r3, #64	; 0x40
 800a6a8:	d141      	bne.n	800a72e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	3314      	adds	r3, #20
 800a6b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a6b8:	e853 3f00 	ldrex	r3, [r3]
 800a6bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a6c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a6c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	3314      	adds	r3, #20
 800a6d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a6d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a6da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a6e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a6e6:	e841 2300 	strex	r3, r2, [r1]
 800a6ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a6ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1d9      	bne.n	800a6aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d013      	beq.n	800a726 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a702:	4a7d      	ldr	r2, [pc, #500]	; (800a8f8 <HAL_UART_IRQHandler+0x3dc>)
 800a704:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fb fc08 	bl	8005f20 <HAL_DMA_Abort_IT>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d016      	beq.n	800a744 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a720:	4610      	mov	r0, r2
 800a722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a724:	e00e      	b.n	800a744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f990 	bl	800aa4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a72c:	e00a      	b.n	800a744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f98c 	bl	800aa4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a734:	e006      	b.n	800a744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 f988 	bl	800aa4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a742:	e170      	b.n	800aa26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a744:	bf00      	nop
    return;
 800a746:	e16e      	b.n	800aa26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	f040 814a 	bne.w	800a9e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a756:	f003 0310 	and.w	r3, r3, #16
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 8143 	beq.w	800a9e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a764:	f003 0310 	and.w	r3, r3, #16
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f000 813c 	beq.w	800a9e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a76e:	2300      	movs	r3, #0
 800a770:	60bb      	str	r3, [r7, #8]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	60bb      	str	r3, [r7, #8]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	60bb      	str	r3, [r7, #8]
 800a782:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a78e:	2b40      	cmp	r3, #64	; 0x40
 800a790:	f040 80b4 	bne.w	800a8fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a7a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f000 8140 	beq.w	800aa2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	f080 8139 	bcs.w	800aa2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a7be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7ca:	f000 8088 	beq.w	800a8de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	330c      	adds	r3, #12
 800a7d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a7dc:	e853 3f00 	ldrex	r3, [r3]
 800a7e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a7e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a7e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	330c      	adds	r3, #12
 800a7f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a7fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a7fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a802:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a806:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a80a:	e841 2300 	strex	r3, r2, [r1]
 800a80e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1d9      	bne.n	800a7ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3314      	adds	r3, #20
 800a820:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a824:	e853 3f00 	ldrex	r3, [r3]
 800a828:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a82a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a82c:	f023 0301 	bic.w	r3, r3, #1
 800a830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	3314      	adds	r3, #20
 800a83a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a83e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a842:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a844:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a846:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a84a:	e841 2300 	strex	r3, r2, [r1]
 800a84e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1e1      	bne.n	800a81a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	3314      	adds	r3, #20
 800a85c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a860:	e853 3f00 	ldrex	r3, [r3]
 800a864:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a86c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3314      	adds	r3, #20
 800a876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a87a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a87c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a880:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a882:	e841 2300 	strex	r3, r2, [r1]
 800a886:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d1e3      	bne.n	800a856 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2220      	movs	r2, #32
 800a892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	330c      	adds	r3, #12
 800a8a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8a6:	e853 3f00 	ldrex	r3, [r3]
 800a8aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a8ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8ae:	f023 0310 	bic.w	r3, r3, #16
 800a8b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	330c      	adds	r3, #12
 800a8bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a8c0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a8c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a8c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8c8:	e841 2300 	strex	r3, r2, [r1]
 800a8cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a8ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1e3      	bne.n	800a89c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7fb fab1 	bl	8005e40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f8b6 	bl	800aa60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a8f4:	e099      	b.n	800aa2a <HAL_UART_IRQHandler+0x50e>
 800a8f6:	bf00      	nop
 800a8f8:	0800af37 	.word	0x0800af37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a904:	b29b      	uxth	r3, r3
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a910:	b29b      	uxth	r3, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 808b 	beq.w	800aa2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 8086 	beq.w	800aa2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	330c      	adds	r3, #12
 800a928:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92c:	e853 3f00 	ldrex	r3, [r3]
 800a930:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a938:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	330c      	adds	r3, #12
 800a942:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a946:	647a      	str	r2, [r7, #68]	; 0x44
 800a948:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a94c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a94e:	e841 2300 	strex	r3, r2, [r1]
 800a952:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1e3      	bne.n	800a922 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	3314      	adds	r3, #20
 800a960:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	e853 3f00 	ldrex	r3, [r3]
 800a968:	623b      	str	r3, [r7, #32]
   return(result);
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	f023 0301 	bic.w	r3, r3, #1
 800a970:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	3314      	adds	r3, #20
 800a97a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a97e:	633a      	str	r2, [r7, #48]	; 0x30
 800a980:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a986:	e841 2300 	strex	r3, r2, [r1]
 800a98a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1e3      	bne.n	800a95a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2220      	movs	r2, #32
 800a996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	330c      	adds	r3, #12
 800a9a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	e853 3f00 	ldrex	r3, [r3]
 800a9ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f023 0310 	bic.w	r3, r3, #16
 800a9b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	330c      	adds	r3, #12
 800a9c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a9c4:	61fa      	str	r2, [r7, #28]
 800a9c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c8:	69b9      	ldr	r1, [r7, #24]
 800a9ca:	69fa      	ldr	r2, [r7, #28]
 800a9cc:	e841 2300 	strex	r3, r2, [r1]
 800a9d0:	617b      	str	r3, [r7, #20]
   return(result);
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1e3      	bne.n	800a9a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a9d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a9dc:	4619      	mov	r1, r3
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f83e 	bl	800aa60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a9e4:	e023      	b.n	800aa2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a9e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d009      	beq.n	800aa06 <HAL_UART_IRQHandler+0x4ea>
 800a9f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d003      	beq.n	800aa06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 faad 	bl	800af5e <UART_Transmit_IT>
    return;
 800aa04:	e014      	b.n	800aa30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00e      	beq.n	800aa30 <HAL_UART_IRQHandler+0x514>
 800aa12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d008      	beq.n	800aa30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 faed 	bl	800affe <UART_EndTransmit_IT>
    return;
 800aa24:	e004      	b.n	800aa30 <HAL_UART_IRQHandler+0x514>
    return;
 800aa26:	bf00      	nop
 800aa28:	e002      	b.n	800aa30 <HAL_UART_IRQHandler+0x514>
      return;
 800aa2a:	bf00      	nop
 800aa2c:	e000      	b.n	800aa30 <HAL_UART_IRQHandler+0x514>
      return;
 800aa2e:	bf00      	nop
  }
}
 800aa30:	37e8      	adds	r7, #232	; 0xe8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop

0800aa38 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	460b      	mov	r3, r1
 800aa6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b09c      	sub	sp, #112	; 0x70
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa84:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d172      	bne.n	800ab7a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800aa94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa96:	2200      	movs	r2, #0
 800aa98:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	330c      	adds	r3, #12
 800aaa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaa4:	e853 3f00 	ldrex	r3, [r3]
 800aaa8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aaaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aab0:	66bb      	str	r3, [r7, #104]	; 0x68
 800aab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	330c      	adds	r3, #12
 800aab8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aaba:	65ba      	str	r2, [r7, #88]	; 0x58
 800aabc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aabe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aac0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aac2:	e841 2300 	strex	r3, r2, [r1]
 800aac6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1e5      	bne.n	800aa9a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3314      	adds	r3, #20
 800aad4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad8:	e853 3f00 	ldrex	r3, [r3]
 800aadc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae0:	f023 0301 	bic.w	r3, r3, #1
 800aae4:	667b      	str	r3, [r7, #100]	; 0x64
 800aae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3314      	adds	r3, #20
 800aaec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aaee:	647a      	str	r2, [r7, #68]	; 0x44
 800aaf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aaf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e5      	bne.n	800aace <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	3314      	adds	r3, #20
 800ab08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	e853 3f00 	ldrex	r3, [r3]
 800ab10:	623b      	str	r3, [r7, #32]
   return(result);
 800ab12:	6a3b      	ldr	r3, [r7, #32]
 800ab14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab18:	663b      	str	r3, [r7, #96]	; 0x60
 800ab1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	3314      	adds	r3, #20
 800ab20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab22:	633a      	str	r2, [r7, #48]	; 0x30
 800ab24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab2a:	e841 2300 	strex	r3, r2, [r1]
 800ab2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1e5      	bne.n	800ab02 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab38:	2220      	movs	r2, #32
 800ab3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d119      	bne.n	800ab7a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	330c      	adds	r3, #12
 800ab4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	e853 3f00 	ldrex	r3, [r3]
 800ab54:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f023 0310 	bic.w	r3, r3, #16
 800ab5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	330c      	adds	r3, #12
 800ab64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab66:	61fa      	str	r2, [r7, #28]
 800ab68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6a:	69b9      	ldr	r1, [r7, #24]
 800ab6c:	69fa      	ldr	r2, [r7, #28]
 800ab6e:	e841 2300 	strex	r3, r2, [r1]
 800ab72:	617b      	str	r3, [r7, #20]
   return(result);
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1e5      	bne.n	800ab46 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d106      	bne.n	800ab90 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ab86:	4619      	mov	r1, r3
 800ab88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ab8a:	f7ff ff69 	bl	800aa60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab8e:	e002      	b.n	800ab96 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ab90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ab92:	f7f7 fce5 	bl	8002560 <HAL_UART_RxCpltCallback>
}
 800ab96:	bf00      	nop
 800ab98:	3770      	adds	r7, #112	; 0x70
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b084      	sub	sp, #16
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abaa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d108      	bne.n	800abc6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800abb8:	085b      	lsrs	r3, r3, #1
 800abba:	b29b      	uxth	r3, r3
 800abbc:	4619      	mov	r1, r3
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f7ff ff4e 	bl	800aa60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abc4:	e002      	b.n	800abcc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f7ff ff36 	bl	800aa38 <HAL_UART_RxHalfCpltCallback>
}
 800abcc:	bf00      	nop
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800abdc:	2300      	movs	r3, #0
 800abde:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	695b      	ldr	r3, [r3, #20]
 800abec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abf0:	2b80      	cmp	r3, #128	; 0x80
 800abf2:	bf0c      	ite	eq
 800abf4:	2301      	moveq	r3, #1
 800abf6:	2300      	movne	r3, #0
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	2b21      	cmp	r3, #33	; 0x21
 800ac06:	d108      	bne.n	800ac1a <UART_DMAError+0x46>
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d005      	beq.n	800ac1a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2200      	movs	r2, #0
 800ac12:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ac14:	68b8      	ldr	r0, [r7, #8]
 800ac16:	f000 f903 	bl	800ae20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac24:	2b40      	cmp	r3, #64	; 0x40
 800ac26:	bf0c      	ite	eq
 800ac28:	2301      	moveq	r3, #1
 800ac2a:	2300      	movne	r3, #0
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b22      	cmp	r3, #34	; 0x22
 800ac3a:	d108      	bne.n	800ac4e <UART_DMAError+0x7a>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d005      	beq.n	800ac4e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	2200      	movs	r2, #0
 800ac46:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ac48:	68b8      	ldr	r0, [r7, #8]
 800ac4a:	f000 f911 	bl	800ae70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac52:	f043 0210 	orr.w	r2, r3, #16
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac5a:	68b8      	ldr	r0, [r7, #8]
 800ac5c:	f7ff fef6 	bl	800aa4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac60:	bf00      	nop
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	4613      	mov	r3, r2
 800ac74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	88fa      	ldrh	r2, [r7, #6]
 800ac80:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	88fa      	ldrh	r2, [r7, #6]
 800ac86:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2222      	movs	r2, #34	; 0x22
 800ac92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d007      	beq.n	800acb6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68da      	ldr	r2, [r3, #12]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acb4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	695a      	ldr	r2, [r3, #20]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f042 0201 	orr.w	r2, r2, #1
 800acc4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68da      	ldr	r2, [r3, #12]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f042 0220 	orr.w	r2, r2, #32
 800acd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3714      	adds	r7, #20
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b098      	sub	sp, #96	; 0x60
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	4613      	mov	r3, r2
 800acf0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	88fa      	ldrh	r2, [r7, #6]
 800acfc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2222      	movs	r2, #34	; 0x22
 800ad08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad10:	4a40      	ldr	r2, [pc, #256]	; (800ae14 <UART_Start_Receive_DMA+0x130>)
 800ad12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad18:	4a3f      	ldr	r2, [pc, #252]	; (800ae18 <UART_Start_Receive_DMA+0x134>)
 800ad1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad20:	4a3e      	ldr	r2, [pc, #248]	; (800ae1c <UART_Start_Receive_DMA+0x138>)
 800ad22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad28:	2200      	movs	r2, #0
 800ad2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ad2c:	f107 0308 	add.w	r3, r7, #8
 800ad30:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	88fb      	ldrh	r3, [r7, #6]
 800ad44:	f7fb f824 	bl	8005d90 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ad48:	2300      	movs	r3, #0
 800ad4a:	613b      	str	r3, [r7, #16]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	613b      	str	r3, [r7, #16]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	613b      	str	r3, [r7, #16]
 800ad5c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d019      	beq.n	800ada2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	330c      	adds	r3, #12
 800ad74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad78:	e853 3f00 	ldrex	r3, [r3]
 800ad7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad84:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	330c      	adds	r3, #12
 800ad8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad8e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ad90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ad94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad96:	e841 2300 	strex	r3, r2, [r1]
 800ad9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ad9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1e5      	bne.n	800ad6e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3314      	adds	r3, #20
 800ada8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adac:	e853 3f00 	ldrex	r3, [r3]
 800adb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800adb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb4:	f043 0301 	orr.w	r3, r3, #1
 800adb8:	657b      	str	r3, [r7, #84]	; 0x54
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3314      	adds	r3, #20
 800adc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800adc2:	63ba      	str	r2, [r7, #56]	; 0x38
 800adc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800adc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adca:	e841 2300 	strex	r3, r2, [r1]
 800adce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1e5      	bne.n	800ada2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	3314      	adds	r3, #20
 800addc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	e853 3f00 	ldrex	r3, [r3]
 800ade4:	617b      	str	r3, [r7, #20]
   return(result);
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adec:	653b      	str	r3, [r7, #80]	; 0x50
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	3314      	adds	r3, #20
 800adf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800adf6:	627a      	str	r2, [r7, #36]	; 0x24
 800adf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfa:	6a39      	ldr	r1, [r7, #32]
 800adfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e5      	bne.n	800add6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3760      	adds	r7, #96	; 0x60
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	0800aa79 	.word	0x0800aa79
 800ae18:	0800ab9f 	.word	0x0800ab9f
 800ae1c:	0800abd5 	.word	0x0800abd5

0800ae20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b089      	sub	sp, #36	; 0x24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	330c      	adds	r3, #12
 800ae2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	e853 3f00 	ldrex	r3, [r3]
 800ae36:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ae3e:	61fb      	str	r3, [r7, #28]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	330c      	adds	r3, #12
 800ae46:	69fa      	ldr	r2, [r7, #28]
 800ae48:	61ba      	str	r2, [r7, #24]
 800ae4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4c:	6979      	ldr	r1, [r7, #20]
 800ae4e:	69ba      	ldr	r2, [r7, #24]
 800ae50:	e841 2300 	strex	r3, r2, [r1]
 800ae54:	613b      	str	r3, [r7, #16]
   return(result);
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1e5      	bne.n	800ae28 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2220      	movs	r2, #32
 800ae60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ae64:	bf00      	nop
 800ae66:	3724      	adds	r7, #36	; 0x24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b095      	sub	sp, #84	; 0x54
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	330c      	adds	r3, #12
 800ae7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae82:	e853 3f00 	ldrex	r3, [r3]
 800ae86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	330c      	adds	r3, #12
 800ae96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae98:	643a      	str	r2, [r7, #64]	; 0x40
 800ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aea0:	e841 2300 	strex	r3, r2, [r1]
 800aea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1e5      	bne.n	800ae78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	3314      	adds	r3, #20
 800aeb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	e853 3f00 	ldrex	r3, [r3]
 800aeba:	61fb      	str	r3, [r7, #28]
   return(result);
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	f023 0301 	bic.w	r3, r3, #1
 800aec2:	64bb      	str	r3, [r7, #72]	; 0x48
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	3314      	adds	r3, #20
 800aeca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aecc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aece:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aed4:	e841 2300 	strex	r3, r2, [r1]
 800aed8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1e5      	bne.n	800aeac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d119      	bne.n	800af1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	330c      	adds	r3, #12
 800aeee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	e853 3f00 	ldrex	r3, [r3]
 800aef6:	60bb      	str	r3, [r7, #8]
   return(result);
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	f023 0310 	bic.w	r3, r3, #16
 800aefe:	647b      	str	r3, [r7, #68]	; 0x44
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	330c      	adds	r3, #12
 800af06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af08:	61ba      	str	r2, [r7, #24]
 800af0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0c:	6979      	ldr	r1, [r7, #20]
 800af0e:	69ba      	ldr	r2, [r7, #24]
 800af10:	e841 2300 	strex	r3, r2, [r1]
 800af14:	613b      	str	r3, [r7, #16]
   return(result);
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1e5      	bne.n	800aee8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2220      	movs	r2, #32
 800af20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	631a      	str	r2, [r3, #48]	; 0x30
}
 800af2a:	bf00      	nop
 800af2c:	3754      	adds	r7, #84	; 0x54
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b084      	sub	sp, #16
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f7ff fd7b 	bl	800aa4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af56:	bf00      	nop
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af5e:	b480      	push	{r7}
 800af60:	b085      	sub	sp, #20
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b21      	cmp	r3, #33	; 0x21
 800af70:	d13e      	bne.n	800aff0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af7a:	d114      	bne.n	800afa6 <UART_Transmit_IT+0x48>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d110      	bne.n	800afa6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a1b      	ldr	r3, [r3, #32]
 800af88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	881b      	ldrh	r3, [r3, #0]
 800af8e:	461a      	mov	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	1c9a      	adds	r2, r3, #2
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	621a      	str	r2, [r3, #32]
 800afa4:	e008      	b.n	800afb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	1c59      	adds	r1, r3, #1
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	6211      	str	r1, [r2, #32]
 800afb0:	781a      	ldrb	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	3b01      	subs	r3, #1
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	4619      	mov	r1, r3
 800afc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10f      	bne.n	800afec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68da      	ldr	r2, [r3, #12]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68da      	ldr	r2, [r3, #12]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	e000      	b.n	800aff2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aff0:	2302      	movs	r3, #2
  }
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b082      	sub	sp, #8
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68da      	ldr	r2, [r3, #12]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b014:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2220      	movs	r2, #32
 800b01a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7f7 fa88 	bl	8002534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b08c      	sub	sp, #48	; 0x30
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	2b22      	cmp	r3, #34	; 0x22
 800b040:	f040 80ab 	bne.w	800b19a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b04c:	d117      	bne.n	800b07e <UART_Receive_IT+0x50>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d113      	bne.n	800b07e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b056:	2300      	movs	r3, #0
 800b058:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	b29b      	uxth	r3, r3
 800b068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b070:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b076:	1c9a      	adds	r2, r3, #2
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	629a      	str	r2, [r3, #40]	; 0x28
 800b07c:	e026      	b.n	800b0cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b082:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b084:	2300      	movs	r3, #0
 800b086:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b090:	d007      	beq.n	800b0a2 <UART_Receive_IT+0x74>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d10a      	bne.n	800b0b0 <UART_Receive_IT+0x82>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d106      	bne.n	800b0b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ac:	701a      	strb	r2, [r3, #0]
 800b0ae:	e008      	b.n	800b0c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c6:	1c5a      	adds	r2, r3, #1
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	4619      	mov	r1, r3
 800b0da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d15a      	bne.n	800b196 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68da      	ldr	r2, [r3, #12]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f022 0220 	bic.w	r2, r2, #32
 800b0ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68da      	ldr	r2, [r3, #12]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	695a      	ldr	r2, [r3, #20]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f022 0201 	bic.w	r2, r2, #1
 800b10e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2220      	movs	r2, #32
 800b114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d135      	bne.n	800b18c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	330c      	adds	r3, #12
 800b12c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	e853 3f00 	ldrex	r3, [r3]
 800b134:	613b      	str	r3, [r7, #16]
   return(result);
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	f023 0310 	bic.w	r3, r3, #16
 800b13c:	627b      	str	r3, [r7, #36]	; 0x24
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	330c      	adds	r3, #12
 800b144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b146:	623a      	str	r2, [r7, #32]
 800b148:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14a:	69f9      	ldr	r1, [r7, #28]
 800b14c:	6a3a      	ldr	r2, [r7, #32]
 800b14e:	e841 2300 	strex	r3, r2, [r1]
 800b152:	61bb      	str	r3, [r7, #24]
   return(result);
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1e5      	bne.n	800b126 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f003 0310 	and.w	r3, r3, #16
 800b164:	2b10      	cmp	r3, #16
 800b166:	d10a      	bne.n	800b17e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b168:	2300      	movs	r3, #0
 800b16a:	60fb      	str	r3, [r7, #12]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	60fb      	str	r3, [r7, #12]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	60fb      	str	r3, [r7, #12]
 800b17c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b182:	4619      	mov	r1, r3
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7ff fc6b 	bl	800aa60 <HAL_UARTEx_RxEventCallback>
 800b18a:	e002      	b.n	800b192 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7f7 f9e7 	bl	8002560 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	e002      	b.n	800b19c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	e000      	b.n	800b19c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b19a:	2302      	movs	r3, #2
  }
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3730      	adds	r7, #48	; 0x30
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1a8:	b0c0      	sub	sp, #256	; 0x100
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b1bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c0:	68d9      	ldr	r1, [r3, #12]
 800b1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	ea40 0301 	orr.w	r3, r0, r1
 800b1cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b1ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1d2:	689a      	ldr	r2, [r3, #8]
 800b1d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	431a      	orrs	r2, r3
 800b1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	431a      	orrs	r2, r3
 800b1e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1e8:	69db      	ldr	r3, [r3, #28]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b1f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b1fc:	f021 010c 	bic.w	r1, r1, #12
 800b200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b20a:	430b      	orrs	r3, r1
 800b20c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b20e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b21a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b21e:	6999      	ldr	r1, [r3, #24]
 800b220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	ea40 0301 	orr.w	r3, r0, r1
 800b22a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	4b8f      	ldr	r3, [pc, #572]	; (800b470 <UART_SetConfig+0x2cc>)
 800b234:	429a      	cmp	r2, r3
 800b236:	d005      	beq.n	800b244 <UART_SetConfig+0xa0>
 800b238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	4b8d      	ldr	r3, [pc, #564]	; (800b474 <UART_SetConfig+0x2d0>)
 800b240:	429a      	cmp	r2, r3
 800b242:	d104      	bne.n	800b24e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b244:	f7fd f852 	bl	80082ec <HAL_RCC_GetPCLK2Freq>
 800b248:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b24c:	e003      	b.n	800b256 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b24e:	f7fd f839 	bl	80082c4 <HAL_RCC_GetPCLK1Freq>
 800b252:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b25a:	69db      	ldr	r3, [r3, #28]
 800b25c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b260:	f040 810c 	bne.w	800b47c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b268:	2200      	movs	r2, #0
 800b26a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b26e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b272:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b276:	4622      	mov	r2, r4
 800b278:	462b      	mov	r3, r5
 800b27a:	1891      	adds	r1, r2, r2
 800b27c:	65b9      	str	r1, [r7, #88]	; 0x58
 800b27e:	415b      	adcs	r3, r3
 800b280:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b282:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b286:	4621      	mov	r1, r4
 800b288:	eb12 0801 	adds.w	r8, r2, r1
 800b28c:	4629      	mov	r1, r5
 800b28e:	eb43 0901 	adc.w	r9, r3, r1
 800b292:	f04f 0200 	mov.w	r2, #0
 800b296:	f04f 0300 	mov.w	r3, #0
 800b29a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b29e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b2a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b2a6:	4690      	mov	r8, r2
 800b2a8:	4699      	mov	r9, r3
 800b2aa:	4623      	mov	r3, r4
 800b2ac:	eb18 0303 	adds.w	r3, r8, r3
 800b2b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2b4:	462b      	mov	r3, r5
 800b2b6:	eb49 0303 	adc.w	r3, r9, r3
 800b2ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b2be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b2ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b2ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	18db      	adds	r3, r3, r3
 800b2d6:	653b      	str	r3, [r7, #80]	; 0x50
 800b2d8:	4613      	mov	r3, r2
 800b2da:	eb42 0303 	adc.w	r3, r2, r3
 800b2de:	657b      	str	r3, [r7, #84]	; 0x54
 800b2e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b2e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b2e8:	f7f5 fcce 	bl	8000c88 <__aeabi_uldivmod>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	4b61      	ldr	r3, [pc, #388]	; (800b478 <UART_SetConfig+0x2d4>)
 800b2f2:	fba3 2302 	umull	r2, r3, r3, r2
 800b2f6:	095b      	lsrs	r3, r3, #5
 800b2f8:	011c      	lsls	r4, r3, #4
 800b2fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2fe:	2200      	movs	r2, #0
 800b300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b304:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b308:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b30c:	4642      	mov	r2, r8
 800b30e:	464b      	mov	r3, r9
 800b310:	1891      	adds	r1, r2, r2
 800b312:	64b9      	str	r1, [r7, #72]	; 0x48
 800b314:	415b      	adcs	r3, r3
 800b316:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b318:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b31c:	4641      	mov	r1, r8
 800b31e:	eb12 0a01 	adds.w	sl, r2, r1
 800b322:	4649      	mov	r1, r9
 800b324:	eb43 0b01 	adc.w	fp, r3, r1
 800b328:	f04f 0200 	mov.w	r2, #0
 800b32c:	f04f 0300 	mov.w	r3, #0
 800b330:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b334:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b33c:	4692      	mov	sl, r2
 800b33e:	469b      	mov	fp, r3
 800b340:	4643      	mov	r3, r8
 800b342:	eb1a 0303 	adds.w	r3, sl, r3
 800b346:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b34a:	464b      	mov	r3, r9
 800b34c:	eb4b 0303 	adc.w	r3, fp, r3
 800b350:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b360:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b364:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b368:	460b      	mov	r3, r1
 800b36a:	18db      	adds	r3, r3, r3
 800b36c:	643b      	str	r3, [r7, #64]	; 0x40
 800b36e:	4613      	mov	r3, r2
 800b370:	eb42 0303 	adc.w	r3, r2, r3
 800b374:	647b      	str	r3, [r7, #68]	; 0x44
 800b376:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b37a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b37e:	f7f5 fc83 	bl	8000c88 <__aeabi_uldivmod>
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	4611      	mov	r1, r2
 800b388:	4b3b      	ldr	r3, [pc, #236]	; (800b478 <UART_SetConfig+0x2d4>)
 800b38a:	fba3 2301 	umull	r2, r3, r3, r1
 800b38e:	095b      	lsrs	r3, r3, #5
 800b390:	2264      	movs	r2, #100	; 0x64
 800b392:	fb02 f303 	mul.w	r3, r2, r3
 800b396:	1acb      	subs	r3, r1, r3
 800b398:	00db      	lsls	r3, r3, #3
 800b39a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b39e:	4b36      	ldr	r3, [pc, #216]	; (800b478 <UART_SetConfig+0x2d4>)
 800b3a0:	fba3 2302 	umull	r2, r3, r3, r2
 800b3a4:	095b      	lsrs	r3, r3, #5
 800b3a6:	005b      	lsls	r3, r3, #1
 800b3a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b3ac:	441c      	add	r4, r3
 800b3ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b3b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b3bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b3c0:	4642      	mov	r2, r8
 800b3c2:	464b      	mov	r3, r9
 800b3c4:	1891      	adds	r1, r2, r2
 800b3c6:	63b9      	str	r1, [r7, #56]	; 0x38
 800b3c8:	415b      	adcs	r3, r3
 800b3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b3d0:	4641      	mov	r1, r8
 800b3d2:	1851      	adds	r1, r2, r1
 800b3d4:	6339      	str	r1, [r7, #48]	; 0x30
 800b3d6:	4649      	mov	r1, r9
 800b3d8:	414b      	adcs	r3, r1
 800b3da:	637b      	str	r3, [r7, #52]	; 0x34
 800b3dc:	f04f 0200 	mov.w	r2, #0
 800b3e0:	f04f 0300 	mov.w	r3, #0
 800b3e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b3e8:	4659      	mov	r1, fp
 800b3ea:	00cb      	lsls	r3, r1, #3
 800b3ec:	4651      	mov	r1, sl
 800b3ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3f2:	4651      	mov	r1, sl
 800b3f4:	00ca      	lsls	r2, r1, #3
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	4642      	mov	r2, r8
 800b3fe:	189b      	adds	r3, r3, r2
 800b400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b404:	464b      	mov	r3, r9
 800b406:	460a      	mov	r2, r1
 800b408:	eb42 0303 	adc.w	r3, r2, r3
 800b40c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b41c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b420:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b424:	460b      	mov	r3, r1
 800b426:	18db      	adds	r3, r3, r3
 800b428:	62bb      	str	r3, [r7, #40]	; 0x28
 800b42a:	4613      	mov	r3, r2
 800b42c:	eb42 0303 	adc.w	r3, r2, r3
 800b430:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b432:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b436:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b43a:	f7f5 fc25 	bl	8000c88 <__aeabi_uldivmod>
 800b43e:	4602      	mov	r2, r0
 800b440:	460b      	mov	r3, r1
 800b442:	4b0d      	ldr	r3, [pc, #52]	; (800b478 <UART_SetConfig+0x2d4>)
 800b444:	fba3 1302 	umull	r1, r3, r3, r2
 800b448:	095b      	lsrs	r3, r3, #5
 800b44a:	2164      	movs	r1, #100	; 0x64
 800b44c:	fb01 f303 	mul.w	r3, r1, r3
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	00db      	lsls	r3, r3, #3
 800b454:	3332      	adds	r3, #50	; 0x32
 800b456:	4a08      	ldr	r2, [pc, #32]	; (800b478 <UART_SetConfig+0x2d4>)
 800b458:	fba2 2303 	umull	r2, r3, r2, r3
 800b45c:	095b      	lsrs	r3, r3, #5
 800b45e:	f003 0207 	and.w	r2, r3, #7
 800b462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4422      	add	r2, r4
 800b46a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b46c:	e105      	b.n	800b67a <UART_SetConfig+0x4d6>
 800b46e:	bf00      	nop
 800b470:	40011000 	.word	0x40011000
 800b474:	40011400 	.word	0x40011400
 800b478:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b47c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b480:	2200      	movs	r2, #0
 800b482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b486:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b48a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b48e:	4642      	mov	r2, r8
 800b490:	464b      	mov	r3, r9
 800b492:	1891      	adds	r1, r2, r2
 800b494:	6239      	str	r1, [r7, #32]
 800b496:	415b      	adcs	r3, r3
 800b498:	627b      	str	r3, [r7, #36]	; 0x24
 800b49a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b49e:	4641      	mov	r1, r8
 800b4a0:	1854      	adds	r4, r2, r1
 800b4a2:	4649      	mov	r1, r9
 800b4a4:	eb43 0501 	adc.w	r5, r3, r1
 800b4a8:	f04f 0200 	mov.w	r2, #0
 800b4ac:	f04f 0300 	mov.w	r3, #0
 800b4b0:	00eb      	lsls	r3, r5, #3
 800b4b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b4b6:	00e2      	lsls	r2, r4, #3
 800b4b8:	4614      	mov	r4, r2
 800b4ba:	461d      	mov	r5, r3
 800b4bc:	4643      	mov	r3, r8
 800b4be:	18e3      	adds	r3, r4, r3
 800b4c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b4c4:	464b      	mov	r3, r9
 800b4c6:	eb45 0303 	adc.w	r3, r5, r3
 800b4ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b4ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b4da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b4de:	f04f 0200 	mov.w	r2, #0
 800b4e2:	f04f 0300 	mov.w	r3, #0
 800b4e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	008b      	lsls	r3, r1, #2
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	008a      	lsls	r2, r1, #2
 800b4f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b4fc:	f7f5 fbc4 	bl	8000c88 <__aeabi_uldivmod>
 800b500:	4602      	mov	r2, r0
 800b502:	460b      	mov	r3, r1
 800b504:	4b60      	ldr	r3, [pc, #384]	; (800b688 <UART_SetConfig+0x4e4>)
 800b506:	fba3 2302 	umull	r2, r3, r3, r2
 800b50a:	095b      	lsrs	r3, r3, #5
 800b50c:	011c      	lsls	r4, r3, #4
 800b50e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b512:	2200      	movs	r2, #0
 800b514:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b518:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b51c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b520:	4642      	mov	r2, r8
 800b522:	464b      	mov	r3, r9
 800b524:	1891      	adds	r1, r2, r2
 800b526:	61b9      	str	r1, [r7, #24]
 800b528:	415b      	adcs	r3, r3
 800b52a:	61fb      	str	r3, [r7, #28]
 800b52c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b530:	4641      	mov	r1, r8
 800b532:	1851      	adds	r1, r2, r1
 800b534:	6139      	str	r1, [r7, #16]
 800b536:	4649      	mov	r1, r9
 800b538:	414b      	adcs	r3, r1
 800b53a:	617b      	str	r3, [r7, #20]
 800b53c:	f04f 0200 	mov.w	r2, #0
 800b540:	f04f 0300 	mov.w	r3, #0
 800b544:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b548:	4659      	mov	r1, fp
 800b54a:	00cb      	lsls	r3, r1, #3
 800b54c:	4651      	mov	r1, sl
 800b54e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b552:	4651      	mov	r1, sl
 800b554:	00ca      	lsls	r2, r1, #3
 800b556:	4610      	mov	r0, r2
 800b558:	4619      	mov	r1, r3
 800b55a:	4603      	mov	r3, r0
 800b55c:	4642      	mov	r2, r8
 800b55e:	189b      	adds	r3, r3, r2
 800b560:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b564:	464b      	mov	r3, r9
 800b566:	460a      	mov	r2, r1
 800b568:	eb42 0303 	adc.w	r3, r2, r3
 800b56c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	67bb      	str	r3, [r7, #120]	; 0x78
 800b57a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b57c:	f04f 0200 	mov.w	r2, #0
 800b580:	f04f 0300 	mov.w	r3, #0
 800b584:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b588:	4649      	mov	r1, r9
 800b58a:	008b      	lsls	r3, r1, #2
 800b58c:	4641      	mov	r1, r8
 800b58e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b592:	4641      	mov	r1, r8
 800b594:	008a      	lsls	r2, r1, #2
 800b596:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b59a:	f7f5 fb75 	bl	8000c88 <__aeabi_uldivmod>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4b39      	ldr	r3, [pc, #228]	; (800b688 <UART_SetConfig+0x4e4>)
 800b5a4:	fba3 1302 	umull	r1, r3, r3, r2
 800b5a8:	095b      	lsrs	r3, r3, #5
 800b5aa:	2164      	movs	r1, #100	; 0x64
 800b5ac:	fb01 f303 	mul.w	r3, r1, r3
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	011b      	lsls	r3, r3, #4
 800b5b4:	3332      	adds	r3, #50	; 0x32
 800b5b6:	4a34      	ldr	r2, [pc, #208]	; (800b688 <UART_SetConfig+0x4e4>)
 800b5b8:	fba2 2303 	umull	r2, r3, r2, r3
 800b5bc:	095b      	lsrs	r3, r3, #5
 800b5be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5c2:	441c      	add	r4, r3
 800b5c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	673b      	str	r3, [r7, #112]	; 0x70
 800b5cc:	677a      	str	r2, [r7, #116]	; 0x74
 800b5ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b5d2:	4642      	mov	r2, r8
 800b5d4:	464b      	mov	r3, r9
 800b5d6:	1891      	adds	r1, r2, r2
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	415b      	adcs	r3, r3
 800b5dc:	60fb      	str	r3, [r7, #12]
 800b5de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b5e2:	4641      	mov	r1, r8
 800b5e4:	1851      	adds	r1, r2, r1
 800b5e6:	6039      	str	r1, [r7, #0]
 800b5e8:	4649      	mov	r1, r9
 800b5ea:	414b      	adcs	r3, r1
 800b5ec:	607b      	str	r3, [r7, #4]
 800b5ee:	f04f 0200 	mov.w	r2, #0
 800b5f2:	f04f 0300 	mov.w	r3, #0
 800b5f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b5fa:	4659      	mov	r1, fp
 800b5fc:	00cb      	lsls	r3, r1, #3
 800b5fe:	4651      	mov	r1, sl
 800b600:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b604:	4651      	mov	r1, sl
 800b606:	00ca      	lsls	r2, r1, #3
 800b608:	4610      	mov	r0, r2
 800b60a:	4619      	mov	r1, r3
 800b60c:	4603      	mov	r3, r0
 800b60e:	4642      	mov	r2, r8
 800b610:	189b      	adds	r3, r3, r2
 800b612:	66bb      	str	r3, [r7, #104]	; 0x68
 800b614:	464b      	mov	r3, r9
 800b616:	460a      	mov	r2, r1
 800b618:	eb42 0303 	adc.w	r3, r2, r3
 800b61c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b61e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	663b      	str	r3, [r7, #96]	; 0x60
 800b628:	667a      	str	r2, [r7, #100]	; 0x64
 800b62a:	f04f 0200 	mov.w	r2, #0
 800b62e:	f04f 0300 	mov.w	r3, #0
 800b632:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b636:	4649      	mov	r1, r9
 800b638:	008b      	lsls	r3, r1, #2
 800b63a:	4641      	mov	r1, r8
 800b63c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b640:	4641      	mov	r1, r8
 800b642:	008a      	lsls	r2, r1, #2
 800b644:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b648:	f7f5 fb1e 	bl	8000c88 <__aeabi_uldivmod>
 800b64c:	4602      	mov	r2, r0
 800b64e:	460b      	mov	r3, r1
 800b650:	4b0d      	ldr	r3, [pc, #52]	; (800b688 <UART_SetConfig+0x4e4>)
 800b652:	fba3 1302 	umull	r1, r3, r3, r2
 800b656:	095b      	lsrs	r3, r3, #5
 800b658:	2164      	movs	r1, #100	; 0x64
 800b65a:	fb01 f303 	mul.w	r3, r1, r3
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	011b      	lsls	r3, r3, #4
 800b662:	3332      	adds	r3, #50	; 0x32
 800b664:	4a08      	ldr	r2, [pc, #32]	; (800b688 <UART_SetConfig+0x4e4>)
 800b666:	fba2 2303 	umull	r2, r3, r2, r3
 800b66a:	095b      	lsrs	r3, r3, #5
 800b66c:	f003 020f 	and.w	r2, r3, #15
 800b670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4422      	add	r2, r4
 800b678:	609a      	str	r2, [r3, #8]
}
 800b67a:	bf00      	nop
 800b67c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b680:	46bd      	mov	sp, r7
 800b682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b686:	bf00      	nop
 800b688:	51eb851f 	.word	0x51eb851f

0800b68c <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800b696:	edd7 7a01 	vldr	s15, [r7, #4]
 800b69a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800b6b0 <FusionDegreesToRadians+0x24>
 800b69e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b6a2:	eeb0 0a67 	vmov.f32	s0, s15
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr
 800b6b0:	3c8efa35 	.word	0x3c8efa35

0800b6b4 <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	105a      	asrs	r2, r3, #1
 800b6c6:	4b10      	ldr	r3, [pc, #64]	; (800b708 <FusionFastInverseSqrt+0x54>)
 800b6c8:	1a9b      	subs	r3, r3, r2
 800b6ca:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 800b6cc:	ed97 7a03 	vldr	s14, [r7, #12]
 800b6d0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b6d4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800b70c <FusionFastInverseSqrt+0x58>
 800b6d8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b6dc:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b6e4:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6ec:	eddf 6a08 	vldr	s13, [pc, #32]	; 800b710 <FusionFastInverseSqrt+0x5c>
 800b6f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b6f4:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800b6f8:	eeb0 0a67 	vmov.f32	s0, s15
 800b6fc:	3714      	adds	r7, #20
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	5f1f1412 	.word	0x5f1f1412
 800b70c:	3f36d312 	.word	0x3f36d312
 800b710:	3fd851ff 	.word	0x3fd851ff

0800b714 <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	eef0 6a40 	vmov.f32	s13, s0
 800b71e:	eeb0 7a60 	vmov.f32	s14, s1
 800b722:	eef0 7a41 	vmov.f32	s15, s2
 800b726:	edc7 6a01 	vstr	s13, [r7, #4]
 800b72a:	ed87 7a02 	vstr	s14, [r7, #8]
 800b72e:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800b732:	edd7 7a01 	vldr	s15, [r7, #4]
 800b736:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b73e:	d10f      	bne.n	800b760 <FusionVectorIsZero+0x4c>
 800b740:	edd7 7a02 	vldr	s15, [r7, #8]
 800b744:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b74c:	d108      	bne.n	800b760 <FusionVectorIsZero+0x4c>
 800b74e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b752:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b75a:	d101      	bne.n	800b760 <FusionVectorIsZero+0x4c>
 800b75c:	2301      	movs	r3, #1
 800b75e:	e000      	b.n	800b762 <FusionVectorIsZero+0x4e>
 800b760:	2300      	movs	r3, #0
 800b762:	f003 0301 	and.w	r3, r3, #1
 800b766:	b2db      	uxtb	r3, r3
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3714      	adds	r7, #20
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800b774:	b480      	push	{r7}
 800b776:	b091      	sub	sp, #68	; 0x44
 800b778:	af00      	add	r7, sp, #0
 800b77a:	eeb0 5a40 	vmov.f32	s10, s0
 800b77e:	eef0 5a60 	vmov.f32	s11, s1
 800b782:	eeb0 6a41 	vmov.f32	s12, s2
 800b786:	eef0 6a61 	vmov.f32	s13, s3
 800b78a:	eeb0 7a42 	vmov.f32	s14, s4
 800b78e:	eef0 7a62 	vmov.f32	s15, s5
 800b792:	ed87 5a07 	vstr	s10, [r7, #28]
 800b796:	edc7 5a08 	vstr	s11, [r7, #32]
 800b79a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b79e:	edc7 6a04 	vstr	s13, [r7, #16]
 800b7a2:	ed87 7a05 	vstr	s14, [r7, #20]
 800b7a6:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 800b7aa:	ed97 7a07 	vldr	s14, [r7, #28]
 800b7ae:	edd7 7a04 	vldr	s15, [r7, #16]
 800b7b2:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b7b6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800b7ba:	ed97 7a08 	vldr	s14, [r7, #32]
 800b7be:	edd7 7a05 	vldr	s15, [r7, #20]
 800b7c2:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b7c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800b7ca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b7ce:	edd7 7a06 	vldr	s15, [r7, #24]
 800b7d2:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b7d6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b7da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b7de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b7e2:	ca07      	ldmia	r2, {r0, r1, r2}
 800b7e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b7e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b7ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ee:	ee06 1a90 	vmov	s13, r1
 800b7f2:	ee07 2a10 	vmov	s14, r2
 800b7f6:	ee07 3a90 	vmov	s15, r3
}
 800b7fa:	eeb0 0a66 	vmov.f32	s0, s13
 800b7fe:	eef0 0a47 	vmov.f32	s1, s14
 800b802:	eeb0 1a67 	vmov.f32	s2, s15
 800b806:	3744      	adds	r7, #68	; 0x44
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	eef0 6a40 	vmov.f32	s13, s0
 800b81a:	eeb0 7a60 	vmov.f32	s14, s1
 800b81e:	eef0 7a41 	vmov.f32	s15, s2
 800b822:	edc7 6a01 	vstr	s13, [r7, #4]
 800b826:	ed87 7a02 	vstr	s14, [r7, #8]
 800b82a:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800b82e:	ed97 7a01 	vldr	s14, [r7, #4]
 800b832:	edd7 7a02 	vldr	s15, [r7, #8]
 800b836:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b83a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b83e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800b842:	eeb0 0a67 	vmov.f32	s0, s15
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800b850:	b480      	push	{r7}
 800b852:	b08f      	sub	sp, #60	; 0x3c
 800b854:	af00      	add	r7, sp, #0
 800b856:	eef0 6a40 	vmov.f32	s13, s0
 800b85a:	eeb0 7a60 	vmov.f32	s14, s1
 800b85e:	eef0 7a41 	vmov.f32	s15, s2
 800b862:	edc7 1a04 	vstr	s3, [r7, #16]
 800b866:	edc7 6a05 	vstr	s13, [r7, #20]
 800b86a:	ed87 7a06 	vstr	s14, [r7, #24]
 800b86e:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 800b872:	ed97 7a05 	vldr	s14, [r7, #20]
 800b876:	edd7 7a04 	vldr	s15, [r7, #16]
 800b87a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b87e:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800b882:	ed97 7a06 	vldr	s14, [r7, #24]
 800b886:	edd7 7a04 	vldr	s15, [r7, #16]
 800b88a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b88e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800b892:	ed97 7a07 	vldr	s14, [r7, #28]
 800b896:	edd7 7a04 	vldr	s15, [r7, #16]
 800b89a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b89e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800b8a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8a6:	f107 0220 	add.w	r2, r7, #32
 800b8aa:	ca07      	ldmia	r2, {r0, r1, r2}
 800b8ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b8b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b6:	ee06 1a90 	vmov	s13, r1
 800b8ba:	ee07 2a10 	vmov	s14, r2
 800b8be:	ee07 3a90 	vmov	s15, r3
}
 800b8c2:	eeb0 0a66 	vmov.f32	s0, s13
 800b8c6:	eef0 0a47 	vmov.f32	s1, s14
 800b8ca:	eeb0 1a67 	vmov.f32	s2, s15
 800b8ce:	373c      	adds	r7, #60	; 0x3c
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b8d8:	b480      	push	{r7}
 800b8da:	b091      	sub	sp, #68	; 0x44
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	eeb0 5a40 	vmov.f32	s10, s0
 800b8e2:	eef0 5a60 	vmov.f32	s11, s1
 800b8e6:	eeb0 6a41 	vmov.f32	s12, s2
 800b8ea:	eef0 6a61 	vmov.f32	s13, s3
 800b8ee:	eeb0 7a42 	vmov.f32	s14, s4
 800b8f2:	eef0 7a62 	vmov.f32	s15, s5
 800b8f6:	ed87 5a07 	vstr	s10, [r7, #28]
 800b8fa:	edc7 5a08 	vstr	s11, [r7, #32]
 800b8fe:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b902:	edc7 6a04 	vstr	s13, [r7, #16]
 800b906:	ed87 7a05 	vstr	s14, [r7, #20]
 800b90a:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800b90e:	ed97 7a07 	vldr	s14, [r7, #28]
 800b912:	edd7 7a04 	vldr	s15, [r7, #16]
 800b916:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b91a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800b91e:	ed97 7a08 	vldr	s14, [r7, #32]
 800b922:	edd7 7a05 	vldr	s15, [r7, #20]
 800b926:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b92a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800b92e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b932:	edd7 7a06 	vldr	s15, [r7, #24]
 800b936:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b93a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b93e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b942:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b946:	ca07      	ldmia	r2, {r0, r1, r2}
 800b948:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b94c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b94e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b952:	ee06 1a90 	vmov	s13, r1
 800b956:	ee07 2a10 	vmov	s14, r2
 800b95a:	ee07 3a90 	vmov	s15, r3
}
 800b95e:	eeb0 0a66 	vmov.f32	s0, s13
 800b962:	eef0 0a47 	vmov.f32	s1, s14
 800b966:	eeb0 1a67 	vmov.f32	s2, s15
 800b96a:	3744      	adds	r7, #68	; 0x44
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b974:	b480      	push	{r7}
 800b976:	b091      	sub	sp, #68	; 0x44
 800b978:	af00      	add	r7, sp, #0
 800b97a:	eeb0 5a40 	vmov.f32	s10, s0
 800b97e:	eef0 5a60 	vmov.f32	s11, s1
 800b982:	eeb0 6a41 	vmov.f32	s12, s2
 800b986:	eef0 6a61 	vmov.f32	s13, s3
 800b98a:	eeb0 7a42 	vmov.f32	s14, s4
 800b98e:	eef0 7a62 	vmov.f32	s15, s5
 800b992:	ed87 5a07 	vstr	s10, [r7, #28]
 800b996:	edc7 5a08 	vstr	s11, [r7, #32]
 800b99a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b99e:	edc7 6a04 	vstr	s13, [r7, #16]
 800b9a2:	ed87 7a05 	vstr	s14, [r7, #20]
 800b9a6:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 800b9aa:	ed97 7a08 	vldr	s14, [r7, #32]
 800b9ae:	edd7 7a06 	vldr	s15, [r7, #24]
 800b9b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9b6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b9ba:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9c2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b9c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800b9ca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b9ce:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9da:	edd7 7a06 	vldr	s15, [r7, #24]
 800b9de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9e2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b9e6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800b9ea:	ed97 7a07 	vldr	s14, [r7, #28]
 800b9ee:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9f6:	edd7 6a08 	vldr	s13, [r7, #32]
 800b9fa:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba02:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800ba06:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800ba0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ba0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ba12:	ca07      	ldmia	r2, {r0, r1, r2}
 800ba14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba1e:	ee06 1a90 	vmov	s13, r1
 800ba22:	ee07 2a10 	vmov	s14, r2
 800ba26:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800ba2a:	eeb0 0a66 	vmov.f32	s0, s13
 800ba2e:	eef0 0a47 	vmov.f32	s1, s14
 800ba32:	eeb0 1a67 	vmov.f32	s2, s15
 800ba36:	3744      	adds	r7, #68	; 0x44
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <FusionVectorDotProduct>:
 * @brief Returns the dot product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Dot product.
 */
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b08a      	sub	sp, #40	; 0x28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	eeb0 5a40 	vmov.f32	s10, s0
 800ba4a:	eef0 5a60 	vmov.f32	s11, s1
 800ba4e:	eeb0 6a41 	vmov.f32	s12, s2
 800ba52:	eef0 6a61 	vmov.f32	s13, s3
 800ba56:	eeb0 7a42 	vmov.f32	s14, s4
 800ba5a:	eef0 7a62 	vmov.f32	s15, s5
 800ba5e:	ed87 5a03 	vstr	s10, [r7, #12]
 800ba62:	edc7 5a04 	vstr	s11, [r7, #16]
 800ba66:	ed87 6a05 	vstr	s12, [r7, #20]
 800ba6a:	edc7 6a00 	vstr	s13, [r7]
 800ba6e:	ed87 7a01 	vstr	s14, [r7, #4]
 800ba72:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 800ba76:	ed97 5a00 	vldr	s10, [r7]
 800ba7a:	edd7 5a01 	vldr	s11, [r7, #4]
 800ba7e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba82:	edd7 6a03 	vldr	s13, [r7, #12]
 800ba86:	ed97 7a04 	vldr	s14, [r7, #16]
 800ba8a:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba8e:	eef0 1a45 	vmov.f32	s3, s10
 800ba92:	eeb0 2a65 	vmov.f32	s4, s11
 800ba96:	eef0 2a46 	vmov.f32	s5, s12
 800ba9a:	eeb0 0a66 	vmov.f32	s0, s13
 800ba9e:	eef0 0a47 	vmov.f32	s1, s14
 800baa2:	eeb0 1a67 	vmov.f32	s2, s15
 800baa6:	f7ff ff17 	bl	800b8d8 <FusionVectorHadamardProduct>
 800baaa:	eef0 6a40 	vmov.f32	s13, s0
 800baae:	eeb0 7a60 	vmov.f32	s14, s1
 800bab2:	eef0 7a41 	vmov.f32	s15, s2
 800bab6:	edc7 6a07 	vstr	s13, [r7, #28]
 800baba:	ed87 7a08 	vstr	s14, [r7, #32]
 800babe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800bac2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bac6:	ed97 7a08 	vldr	s14, [r7, #32]
 800baca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bace:	eeb0 0a66 	vmov.f32	s0, s13
 800bad2:	eef0 0a47 	vmov.f32	s1, s14
 800bad6:	eeb0 1a67 	vmov.f32	s2, s15
 800bada:	f7ff fe99 	bl	800b810 <FusionVectorSum>
 800bade:	eef0 7a40 	vmov.f32	s15, s0
}
 800bae2:	eeb0 0a67 	vmov.f32	s0, s15
 800bae6:	3728      	adds	r7, #40	; 0x28
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 800baec:	b580      	push	{r7, lr}
 800baee:	b088      	sub	sp, #32
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	eef0 6a40 	vmov.f32	s13, s0
 800baf6:	eeb0 7a60 	vmov.f32	s14, s1
 800bafa:	eef0 7a41 	vmov.f32	s15, s2
 800bafe:	edc7 6a01 	vstr	s13, [r7, #4]
 800bb02:	ed87 7a02 	vstr	s14, [r7, #8]
 800bb06:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800bb0a:	ed97 5a01 	vldr	s10, [r7, #4]
 800bb0e:	edd7 5a02 	vldr	s11, [r7, #8]
 800bb12:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb16:	edd7 6a01 	vldr	s13, [r7, #4]
 800bb1a:	ed97 7a02 	vldr	s14, [r7, #8]
 800bb1e:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb22:	eef0 1a45 	vmov.f32	s3, s10
 800bb26:	eeb0 2a65 	vmov.f32	s4, s11
 800bb2a:	eef0 2a46 	vmov.f32	s5, s12
 800bb2e:	eeb0 0a66 	vmov.f32	s0, s13
 800bb32:	eef0 0a47 	vmov.f32	s1, s14
 800bb36:	eeb0 1a67 	vmov.f32	s2, s15
 800bb3a:	f7ff fecd 	bl	800b8d8 <FusionVectorHadamardProduct>
 800bb3e:	eef0 6a40 	vmov.f32	s13, s0
 800bb42:	eeb0 7a60 	vmov.f32	s14, s1
 800bb46:	eef0 7a41 	vmov.f32	s15, s2
 800bb4a:	edc7 6a05 	vstr	s13, [r7, #20]
 800bb4e:	ed87 7a06 	vstr	s14, [r7, #24]
 800bb52:	edc7 7a07 	vstr	s15, [r7, #28]
 800bb56:	edd7 6a05 	vldr	s13, [r7, #20]
 800bb5a:	ed97 7a06 	vldr	s14, [r7, #24]
 800bb5e:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb62:	eeb0 0a66 	vmov.f32	s0, s13
 800bb66:	eef0 0a47 	vmov.f32	s1, s14
 800bb6a:	eeb0 1a67 	vmov.f32	s2, s15
 800bb6e:	f7ff fe4f 	bl	800b810 <FusionVectorSum>
 800bb72:	eef0 7a40 	vmov.f32	s15, s0
}
 800bb76:	eeb0 0a67 	vmov.f32	s0, s15
 800bb7a:	3720      	adds	r7, #32
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b08c      	sub	sp, #48	; 0x30
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	eef0 6a40 	vmov.f32	s13, s0
 800bb8a:	eeb0 7a60 	vmov.f32	s14, s1
 800bb8e:	eef0 7a41 	vmov.f32	s15, s2
 800bb92:	edc7 6a05 	vstr	s13, [r7, #20]
 800bb96:	ed87 7a06 	vstr	s14, [r7, #24]
 800bb9a:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800bb9e:	edd7 6a05 	vldr	s13, [r7, #20]
 800bba2:	ed97 7a06 	vldr	s14, [r7, #24]
 800bba6:	edd7 7a07 	vldr	s15, [r7, #28]
 800bbaa:	eeb0 0a66 	vmov.f32	s0, s13
 800bbae:	eef0 0a47 	vmov.f32	s1, s14
 800bbb2:	eeb0 1a67 	vmov.f32	s2, s15
 800bbb6:	f7ff ff99 	bl	800baec <FusionVectorMagnitudeSquared>
 800bbba:	eef0 7a40 	vmov.f32	s15, s0
 800bbbe:	eeb0 0a67 	vmov.f32	s0, s15
 800bbc2:	f7ff fd77 	bl	800b6b4 <FusionFastInverseSqrt>
 800bbc6:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800bbca:	edd7 6a05 	vldr	s13, [r7, #20]
 800bbce:	ed97 7a06 	vldr	s14, [r7, #24]
 800bbd2:	edd7 7a07 	vldr	s15, [r7, #28]
 800bbd6:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800bbda:	eeb0 0a66 	vmov.f32	s0, s13
 800bbde:	eef0 0a47 	vmov.f32	s1, s14
 800bbe2:	eeb0 1a67 	vmov.f32	s2, s15
 800bbe6:	f7ff fe33 	bl	800b850 <FusionVectorMultiplyScalar>
 800bbea:	eef0 6a40 	vmov.f32	s13, s0
 800bbee:	eeb0 7a60 	vmov.f32	s14, s1
 800bbf2:	eef0 7a41 	vmov.f32	s15, s2
 800bbf6:	edc7 6a08 	vstr	s13, [r7, #32]
 800bbfa:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800bbfe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800bc02:	6a39      	ldr	r1, [r7, #32]
 800bc04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc08:	ee06 1a90 	vmov	s13, r1
 800bc0c:	ee07 2a10 	vmov	s14, r2
 800bc10:	ee07 3a90 	vmov	s15, r3
}
 800bc14:	eeb0 0a66 	vmov.f32	s0, s13
 800bc18:	eef0 0a47 	vmov.f32	s1, s14
 800bc1c:	eeb0 1a67 	vmov.f32	s2, s15
 800bc20:	3730      	adds	r7, #48	; 0x30
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800bc26:	b490      	push	{r4, r7}
 800bc28:	b094      	sub	sp, #80	; 0x50
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	eeb0 4a40 	vmov.f32	s8, s0
 800bc30:	eef0 4a60 	vmov.f32	s9, s1
 800bc34:	eeb0 5a41 	vmov.f32	s10, s2
 800bc38:	eef0 5a61 	vmov.f32	s11, s3
 800bc3c:	eeb0 6a42 	vmov.f32	s12, s4
 800bc40:	eef0 6a62 	vmov.f32	s13, s5
 800bc44:	eeb0 7a43 	vmov.f32	s14, s6
 800bc48:	eef0 7a63 	vmov.f32	s15, s7
 800bc4c:	ed87 4a08 	vstr	s8, [r7, #32]
 800bc50:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800bc54:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800bc58:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800bc5c:	ed87 6a04 	vstr	s12, [r7, #16]
 800bc60:	edc7 6a05 	vstr	s13, [r7, #20]
 800bc64:	ed87 7a06 	vstr	s14, [r7, #24]
 800bc68:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 800bc6c:	ed97 7a08 	vldr	s14, [r7, #32]
 800bc70:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc74:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bc78:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 800bc7c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bc80:	edd7 7a05 	vldr	s15, [r7, #20]
 800bc84:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bc88:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 800bc8c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc90:	edd7 7a06 	vldr	s15, [r7, #24]
 800bc94:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bc98:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 800bc9c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800bca0:	edd7 7a07 	vldr	s15, [r7, #28]
 800bca4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bca8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800bcac:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800bcb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bcb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bcb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bcba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bcbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcc2:	ee06 0a10 	vmov	s12, r0
 800bcc6:	ee06 1a90 	vmov	s13, r1
 800bcca:	ee07 2a10 	vmov	s14, r2
 800bcce:	ee07 3a90 	vmov	s15, r3
}
 800bcd2:	eeb0 0a46 	vmov.f32	s0, s12
 800bcd6:	eef0 0a66 	vmov.f32	s1, s13
 800bcda:	eeb0 1a47 	vmov.f32	s2, s14
 800bcde:	eef0 1a67 	vmov.f32	s3, s15
 800bce2:	3750      	adds	r7, #80	; 0x50
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bc90      	pop	{r4, r7}
 800bce8:	4770      	bx	lr

0800bcea <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 800bcea:	b490      	push	{r4, r7}
 800bcec:	b094      	sub	sp, #80	; 0x50
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	eef0 4a40 	vmov.f32	s9, s0
 800bcf4:	eeb0 5a60 	vmov.f32	s10, s1
 800bcf8:	eef0 5a41 	vmov.f32	s11, s2
 800bcfc:	eeb0 6a61 	vmov.f32	s12, s3
 800bd00:	eef0 6a42 	vmov.f32	s13, s4
 800bd04:	eeb0 7a62 	vmov.f32	s14, s5
 800bd08:	eef0 7a43 	vmov.f32	s15, s6
 800bd0c:	edc7 4a08 	vstr	s9, [r7, #32]
 800bd10:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 800bd14:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 800bd18:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 800bd1c:	edc7 6a05 	vstr	s13, [r7, #20]
 800bd20:	ed87 7a06 	vstr	s14, [r7, #24]
 800bd24:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 800bd28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bd2c:	eeb1 7a67 	vneg.f32	s14, s15
 800bd30:	edd7 7a05 	vldr	s15, [r7, #20]
 800bd34:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd38:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bd3c:	edd7 7a06 	vldr	s15, [r7, #24]
 800bd40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd44:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bd48:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bd4c:	edd7 7a07 	vldr	s15, [r7, #28]
 800bd50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd54:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bd58:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 800bd5c:	ed97 7a08 	vldr	s14, [r7, #32]
 800bd60:	edd7 7a05 	vldr	s15, [r7, #20]
 800bd64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd68:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bd6c:	edd7 7a07 	vldr	s15, [r7, #28]
 800bd70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd74:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd78:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bd7c:	edd7 7a06 	vldr	s15, [r7, #24]
 800bd80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd84:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bd88:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800bd8c:	ed97 7a08 	vldr	s14, [r7, #32]
 800bd90:	edd7 7a06 	vldr	s15, [r7, #24]
 800bd94:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd98:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800bd9c:	edd7 7a07 	vldr	s15, [r7, #28]
 800bda0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bda4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bda8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bdac:	edd7 7a05 	vldr	s15, [r7, #20]
 800bdb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bdb4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bdb8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 800bdbc:	ed97 7a08 	vldr	s14, [r7, #32]
 800bdc0:	edd7 7a07 	vldr	s15, [r7, #28]
 800bdc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdc8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800bdcc:	edd7 7a06 	vldr	s15, [r7, #24]
 800bdd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bdd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bdd8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bddc:	edd7 7a05 	vldr	s15, [r7, #20]
 800bde0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bde4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bde8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800bdec:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800bdf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bdf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bdf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bdfa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bdfc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bdfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be02:	ee06 0a10 	vmov	s12, r0
 800be06:	ee06 1a90 	vmov	s13, r1
 800be0a:	ee07 2a10 	vmov	s14, r2
 800be0e:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 800be12:	eeb0 0a46 	vmov.f32	s0, s12
 800be16:	eef0 0a66 	vmov.f32	s1, s13
 800be1a:	eeb0 1a47 	vmov.f32	s2, s14
 800be1e:	eef0 1a67 	vmov.f32	s3, s15
 800be22:	3750      	adds	r7, #80	; 0x50
 800be24:	46bd      	mov	sp, r7
 800be26:	bc90      	pop	{r4, r7}
 800be28:	4770      	bx	lr

0800be2a <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800be2a:	b590      	push	{r4, r7, lr}
 800be2c:	b093      	sub	sp, #76	; 0x4c
 800be2e:	af00      	add	r7, sp, #0
 800be30:	eeb0 6a40 	vmov.f32	s12, s0
 800be34:	eef0 6a60 	vmov.f32	s13, s1
 800be38:	eeb0 7a41 	vmov.f32	s14, s2
 800be3c:	eef0 7a61 	vmov.f32	s15, s3
 800be40:	ed87 6a04 	vstr	s12, [r7, #16]
 800be44:	edc7 6a05 	vstr	s13, [r7, #20]
 800be48:	ed87 7a06 	vstr	s14, [r7, #24]
 800be4c:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800be50:	ed97 7a04 	vldr	s14, [r7, #16]
 800be54:	edd7 7a04 	vldr	s15, [r7, #16]
 800be58:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be5c:	edd7 6a05 	vldr	s13, [r7, #20]
 800be60:	edd7 7a05 	vldr	s15, [r7, #20]
 800be64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be68:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be6c:	edd7 6a06 	vldr	s13, [r7, #24]
 800be70:	edd7 7a06 	vldr	s15, [r7, #24]
 800be74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be78:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be7c:	edd7 6a07 	vldr	s13, [r7, #28]
 800be80:	edd7 7a07 	vldr	s15, [r7, #28]
 800be84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be8c:	eeb0 0a67 	vmov.f32	s0, s15
 800be90:	f7ff fc10 	bl	800b6b4 <FusionFastInverseSqrt>
 800be94:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 800be98:	ed97 7a04 	vldr	s14, [r7, #16]
 800be9c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bea0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bea4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 800bea8:	ed97 7a05 	vldr	s14, [r7, #20]
 800beac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800beb0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800beb4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 800beb8:	ed97 7a06 	vldr	s14, [r7, #24]
 800bebc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bec0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bec4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 800bec8:	ed97 7a07 	vldr	s14, [r7, #28]
 800becc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bed0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bed4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800bed8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800bedc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bee0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bee2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bee6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bee8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800beea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800beec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beee:	ee06 0a10 	vmov	s12, r0
 800bef2:	ee06 1a90 	vmov	s13, r1
 800bef6:	ee07 2a10 	vmov	s14, r2
 800befa:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 800befe:	eeb0 0a46 	vmov.f32	s0, s12
 800bf02:	eef0 0a66 	vmov.f32	s1, s13
 800bf06:	eeb0 1a47 	vmov.f32	s2, s14
 800bf0a:	eef0 1a67 	vmov.f32	s3, s15
 800bf0e:	374c      	adds	r7, #76	; 0x4c
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd90      	pop	{r4, r7, pc}

0800bf14 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 800bf14:	b5b0      	push	{r4, r5, r7, lr}
 800bf16:	b088      	sub	sp, #32
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800bf1c:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <FusionAhrsInitialise+0x38>)
 800bf1e:	f107 0408 	add.w	r4, r7, #8
 800bf22:	461d      	mov	r5, r3
 800bf24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf28:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bf2c:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800bf30:	f107 0308 	add.w	r3, r7, #8
 800bf34:	4619      	mov	r1, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 f86e 	bl	800c018 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 f807 	bl	800bf50 <FusionAhrsReset>
}
 800bf42:	bf00      	nop
 800bf44:	3720      	adds	r7, #32
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bdb0      	pop	{r4, r5, r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	080154d0 	.word	0x080154d0

0800bf50 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800bf50:	b480      	push	{r7}
 800bf52:	b091      	sub	sp, #68	; 0x44
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bf5e:	619a      	str	r2, [r3, #24]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f04f 0200 	mov.w	r2, #0
 800bf66:	61da      	str	r2, [r3, #28]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f04f 0200 	mov.w	r2, #0
 800bf6e:	621a      	str	r2, [r3, #32]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f04f 0200 	mov.w	r2, #0
 800bf76:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f04f 0200 	mov.w	r2, #0
 800bf7e:	629a      	str	r2, [r3, #40]	; 0x28
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f04f 0200 	mov.w	r2, #0
 800bf86:	62da      	str	r2, [r3, #44]	; 0x2c
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f04f 0200 	mov.w	r2, #0
 800bf8e:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4a1e      	ldr	r2, [pc, #120]	; (800c014 <FusionAhrsReset+0xc4>)
 800bf9c:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f04f 0200 	mov.w	r2, #0
 800bfac:	645a      	str	r2, [r3, #68]	; 0x44
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f04f 0200 	mov.w	r2, #0
 800bfb4:	649a      	str	r2, [r3, #72]	; 0x48
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f04f 0200 	mov.w	r2, #0
 800bfbc:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f04f 0200 	mov.w	r2, #0
 800bfc4:	651a      	str	r2, [r3, #80]	; 0x50
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f04f 0200 	mov.w	r2, #0
 800bfcc:	655a      	str	r2, [r3, #84]	; 0x54
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f04f 0200 	mov.w	r2, #0
 800bfd4:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	695b      	ldr	r3, [r3, #20]
 800bfe8:	461a      	mov	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	695b      	ldr	r3, [r3, #20]
 800c000:	461a      	mov	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c006:	bf00      	nop
 800c008:	3744      	adds	r7, #68	; 0x44
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	41200000 	.word	0x41200000

0800c018 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	781a      	ldrb	r2, [r3, #0]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	edd3 7a02 	vldr	s15, [r3, #8]
 800c038:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c040:	d007      	beq.n	800c052 <FusionAhrsSetSettings+0x3a>
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	edd3 7a02 	vldr	s15, [r3, #8]
 800c048:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c17c <FusionAhrsSetSettings+0x164>
 800c04c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c050:	e001      	b.n	800c056 <FusionAhrsSetSettings+0x3e>
 800c052:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800c180 <FusionAhrsSetSettings+0x168>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	edd3 7a03 	vldr	s15, [r3, #12]
 800c062:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c06a:	d01b      	beq.n	800c0a4 <FusionAhrsSetSettings+0x8c>
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	edd3 7a03 	vldr	s15, [r3, #12]
 800c072:	eeb0 0a67 	vmov.f32	s0, s15
 800c076:	f7ff fb09 	bl	800b68c <FusionDegreesToRadians>
 800c07a:	eef0 7a40 	vmov.f32	s15, s0
 800c07e:	eeb0 0a67 	vmov.f32	s0, s15
 800c082:	f006 feff 	bl	8012e84 <sinf>
 800c086:	eef0 7a40 	vmov.f32	s15, s0
 800c08a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c08e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c092:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800c096:	eeb0 0a67 	vmov.f32	s0, s15
 800c09a:	f006 ffd7 	bl	801304c <powf>
 800c09e:	eef0 7a40 	vmov.f32	s15, s0
 800c0a2:	e001      	b.n	800c0a8 <FusionAhrsSetSettings+0x90>
 800c0a4:	eddf 7a36 	vldr	s15, [pc, #216]	; 800c180 <FusionAhrsSetSettings+0x168>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	edd3 7a04 	vldr	s15, [r3, #16]
 800c0b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0bc:	d01b      	beq.n	800c0f6 <FusionAhrsSetSettings+0xde>
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	edd3 7a04 	vldr	s15, [r3, #16]
 800c0c4:	eeb0 0a67 	vmov.f32	s0, s15
 800c0c8:	f7ff fae0 	bl	800b68c <FusionDegreesToRadians>
 800c0cc:	eef0 7a40 	vmov.f32	s15, s0
 800c0d0:	eeb0 0a67 	vmov.f32	s0, s15
 800c0d4:	f006 fed6 	bl	8012e84 <sinf>
 800c0d8:	eef0 7a40 	vmov.f32	s15, s0
 800c0dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c0e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c0e4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800c0e8:	eeb0 0a67 	vmov.f32	s0, s15
 800c0ec:	f006 ffae 	bl	801304c <powf>
 800c0f0:	eef0 7a40 	vmov.f32	s15, s0
 800c0f4:	e001      	b.n	800c0fa <FusionAhrsSetSettings+0xe2>
 800c0f6:	eddf 7a22 	vldr	s15, [pc, #136]	; 800c180 <FusionAhrsSetSettings+0x168>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	695a      	ldr	r2, [r3, #20]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	695b      	ldr	r3, [r3, #20]
 800c10c:	461a      	mov	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	695b      	ldr	r3, [r3, #20]
 800c116:	461a      	mov	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	edd3 7a01 	vldr	s15, [r3, #4]
 800c122:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c12a:	d003      	beq.n	800c134 <FusionAhrsSetSettings+0x11c>
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	695b      	ldr	r3, [r3, #20]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d105      	bne.n	800c140 <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4a13      	ldr	r2, [pc, #76]	; (800c184 <FusionAhrsSetSettings+0x16c>)
 800c138:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a11      	ldr	r2, [pc, #68]	; (800c184 <FusionAhrsSetSettings+0x16c>)
 800c13e:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c146:	f083 0301 	eor.w	r3, r3, #1
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d003      	beq.n	800c158 <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	685a      	ldr	r2, [r3, #4]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	edd3 7a01 	vldr	s15, [r3, #4]
 800c15e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800c162:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c166:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c16a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 800c174:	bf00      	nop
 800c176:	3708      	adds	r7, #8
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	3f7ae148 	.word	0x3f7ae148
 800c180:	7f7fffff 	.word	0x7f7fffff
 800c184:	7f7fffff 	.word	0x7f7fffff

0800c188 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 800c188:	b590      	push	{r4, r7, lr}
 800c18a:	b0bf      	sub	sp, #252	; 0xfc
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c190:	eeb0 5a61 	vmov.f32	s10, s3
 800c194:	eef0 5a42 	vmov.f32	s11, s4
 800c198:	eeb0 6a62 	vmov.f32	s12, s5
 800c19c:	eef0 6a43 	vmov.f32	s13, s6
 800c1a0:	eeb0 7a63 	vmov.f32	s14, s7
 800c1a4:	eef0 7a44 	vmov.f32	s15, s8
 800c1a8:	edc7 4a01 	vstr	s9, [r7, #4]
 800c1ac:	ed87 0a08 	vstr	s0, [r7, #32]
 800c1b0:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 800c1b4:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 800c1b8:	ed87 5a05 	vstr	s10, [r7, #20]
 800c1bc:	edc7 5a06 	vstr	s11, [r7, #24]
 800c1c0:	ed87 6a07 	vstr	s12, [r7, #28]
 800c1c4:	edc7 6a02 	vstr	s13, [r7, #8]
 800c1c8:	ed87 7a03 	vstr	s14, [r7, #12]
 800c1cc:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800c1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d2:	3328      	adds	r3, #40	; 0x28
 800c1d4:	f107 0214 	add.w	r2, r7, #20
 800c1d8:	ca07      	ldmia	r2, {r0, r1, r2}
 800c1da:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 800c1de:	edd7 7a08 	vldr	s15, [r7, #32]
 800c1e2:	eeb0 7ae7 	vabs.f32	s14, s15
 800c1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e8:	edd3 7a02 	vldr	s15, [r3, #8]
 800c1ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f4:	dc17      	bgt.n	800c226 <FusionAhrsUpdate+0x9e>
 800c1f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c1fa:	eeb0 7ae7 	vabs.f32	s14, s15
 800c1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c200:	edd3 7a02 	vldr	s15, [r3, #8]
 800c204:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c20c:	dc0b      	bgt.n	800c226 <FusionAhrsUpdate+0x9e>
 800c20e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c212:	eeb0 7ae7 	vabs.f32	s14, s15
 800c216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c218:	edd3 7a02 	vldr	s15, [r3, #8]
 800c21c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c224:	dd15      	ble.n	800c252 <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 800c226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c228:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800c22c:	3318      	adds	r3, #24
 800c22e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 800c234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c236:	f7ff fe8b 	bl	800bf50 <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 800c23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23c:	f103 0418 	add.w	r4, r3, #24
 800c240:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 800c24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24c:	2201      	movs	r2, #1
 800c24e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800c252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c254:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d02d      	beq.n	800c2b8 <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 800c25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c264:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800c268:	edd7 7a01 	vldr	s15, [r7, #4]
 800c26c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c270:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c276:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 800c27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c282:	edd3 7a01 	vldr	s15, [r3, #4]
 800c286:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c28e:	d407      	bmi.n	800c2a0 <FusionAhrsUpdate+0x118>
 800c290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c292:	edd3 7a01 	vldr	s15, [r3, #4]
 800c296:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c29e:	d10b      	bne.n	800c2b8 <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 800c2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a2:	685a      	ldr	r2, [r3, #4]
 800c2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a6:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 800c2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 800c2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 800c2b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2ba:	f000 faf4 	bl	800c8a6 <HalfGravity>
 800c2be:	eef0 6a40 	vmov.f32	s13, s0
 800c2c2:	eeb0 7a60 	vmov.f32	s14, s1
 800c2c6:	eef0 7a41 	vmov.f32	s15, s2
 800c2ca:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 800c2ce:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 800c2d2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800c2d6:	f04f 0300 	mov.w	r3, #0
 800c2da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c2de:	f04f 0300 	mov.w	r3, #0
 800c2e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c2e6:	f04f 0300 	mov.w	r3, #0
 800c2ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 800c2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 800c2f6:	edd7 6a05 	vldr	s13, [r7, #20]
 800c2fa:	ed97 7a06 	vldr	s14, [r7, #24]
 800c2fe:	edd7 7a07 	vldr	s15, [r7, #28]
 800c302:	eeb0 0a66 	vmov.f32	s0, s13
 800c306:	eef0 0a47 	vmov.f32	s1, s14
 800c30a:	eeb0 1a67 	vmov.f32	s2, s15
 800c30e:	f7ff fa01 	bl	800b714 <FusionVectorIsZero>
 800c312:	4603      	mov	r3, r0
 800c314:	f083 0301 	eor.w	r3, r3, #1
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	f000 809c 	beq.w	800c458 <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 800c320:	edd7 6a05 	vldr	s13, [r7, #20]
 800c324:	ed97 7a06 	vldr	s14, [r7, #24]
 800c328:	edd7 7a07 	vldr	s15, [r7, #28]
 800c32c:	eeb0 0a66 	vmov.f32	s0, s13
 800c330:	eef0 0a47 	vmov.f32	s1, s14
 800c334:	eeb0 1a67 	vmov.f32	s2, s15
 800c338:	f7ff fc22 	bl	800bb80 <FusionVectorNormalise>
 800c33c:	eef0 6a40 	vmov.f32	s13, s0
 800c340:	eeb0 7a60 	vmov.f32	s14, s1
 800c344:	eef0 7a41 	vmov.f32	s15, s2
 800c348:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 800c34c:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 800c350:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800c354:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c356:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 800c35a:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800c35e:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 800c362:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800c366:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800c36a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800c36e:	eef0 1a45 	vmov.f32	s3, s10
 800c372:	eeb0 2a65 	vmov.f32	s4, s11
 800c376:	eef0 2a46 	vmov.f32	s5, s12
 800c37a:	eeb0 0a66 	vmov.f32	s0, s13
 800c37e:	eef0 0a47 	vmov.f32	s1, s14
 800c382:	eeb0 1a67 	vmov.f32	s2, s15
 800c386:	f000 fc55 	bl	800cc34 <Feedback>
 800c38a:	eef0 6a40 	vmov.f32	s13, s0
 800c38e:	eeb0 7a60 	vmov.f32	s14, s1
 800c392:	eef0 7a41 	vmov.f32	s15, s2
 800c396:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 800c39a:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 800c39e:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d118      	bne.n	800c3de <FusionAhrsUpdate+0x256>
 800c3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ae:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800c3b2:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800c3b6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c3ba:	eeb0 0a66 	vmov.f32	s0, s13
 800c3be:	eef0 0a47 	vmov.f32	s1, s14
 800c3c2:	eeb0 1a67 	vmov.f32	s2, s15
 800c3c6:	f7ff fb91 	bl	800baec <FusionVectorMagnitudeSquared>
 800c3ca:	eeb0 7a40 	vmov.f32	s14, s0
 800c3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d0:	edd3 7a03 	vldr	s15, [r3, #12]
 800c3d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3dc:	d80a      	bhi.n	800c3f4 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 800c3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 800c3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3ea:	f1a3 0209 	sub.w	r2, r3, #9
 800c3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f0:	661a      	str	r2, [r3, #96]	; 0x60
 800c3f2:	e004      	b.n	800c3fe <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 800c3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3f8:	1c5a      	adds	r2, r3, #1
 800c3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 800c3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c400:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c406:	429a      	cmp	r2, r3
 800c408:	dd07      	ble.n	800c41a <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 800c40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40c:	2200      	movs	r2, #0
 800c40e:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 800c410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c412:	2200      	movs	r2, #0
 800c414:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800c418:	e004      	b.n	800c424 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41c:	695b      	ldr	r3, [r3, #20]
 800c41e:	461a      	mov	r2, r3
 800c420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c422:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800c424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c426:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42a:	695b      	ldr	r3, [r3, #20]
 800c42c:	461a      	mov	r2, r3
 800c42e:	2100      	movs	r1, #0
 800c430:	f000 fcb5 	bl	800cd9e <Clamp>
 800c434:	4602      	mov	r2, r0
 800c436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c438:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 800c43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c440:	f083 0301 	eor.w	r3, r3, #1
 800c444:	b2db      	uxtb	r3, r3
 800c446:	2b00      	cmp	r3, #0
 800c448:	d006      	beq.n	800c458 <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 800c44a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c44c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c450:	3244      	adds	r2, #68	; 0x44
 800c452:	ca07      	ldmia	r2, {r0, r1, r2}
 800c454:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800c458:	f04f 0300 	mov.w	r3, #0
 800c45c:	673b      	str	r3, [r7, #112]	; 0x70
 800c45e:	f04f 0300 	mov.w	r3, #0
 800c462:	677b      	str	r3, [r7, #116]	; 0x74
 800c464:	f04f 0300 	mov.w	r3, #0
 800c468:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = false;
 800c46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46c:	2200      	movs	r2, #0
 800c46e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 800c472:	edd7 6a02 	vldr	s13, [r7, #8]
 800c476:	ed97 7a03 	vldr	s14, [r7, #12]
 800c47a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c47e:	eeb0 0a66 	vmov.f32	s0, s13
 800c482:	eef0 0a47 	vmov.f32	s1, s14
 800c486:	eeb0 1a67 	vmov.f32	s2, s15
 800c48a:	f7ff f943 	bl	800b714 <FusionVectorIsZero>
 800c48e:	4603      	mov	r3, r0
 800c490:	f083 0301 	eor.w	r3, r3, #1
 800c494:	b2db      	uxtb	r3, r3
 800c496:	2b00      	cmp	r3, #0
 800c498:	f000 80d1 	beq.w	800c63e <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800c49c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c49e:	f000 fabf 	bl	800ca20 <HalfMagnetic>
 800c4a2:	eef0 6a40 	vmov.f32	s13, s0
 800c4a6:	eeb0 7a60 	vmov.f32	s14, s1
 800c4aa:	eef0 7a41 	vmov.f32	s15, s2
 800c4ae:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 800c4b2:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 800c4b6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800c4ba:	ed97 5a02 	vldr	s10, [r7, #8]
 800c4be:	edd7 5a03 	vldr	s11, [r7, #12]
 800c4c2:	ed97 6a04 	vldr	s12, [r7, #16]
 800c4c6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800c4ca:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800c4ce:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c4d2:	eef0 1a45 	vmov.f32	s3, s10
 800c4d6:	eeb0 2a65 	vmov.f32	s4, s11
 800c4da:	eef0 2a46 	vmov.f32	s5, s12
 800c4de:	eeb0 0a66 	vmov.f32	s0, s13
 800c4e2:	eef0 0a47 	vmov.f32	s1, s14
 800c4e6:	eeb0 1a67 	vmov.f32	s2, s15
 800c4ea:	f7ff fa43 	bl	800b974 <FusionVectorCrossProduct>
 800c4ee:	eef0 6a40 	vmov.f32	s13, s0
 800c4f2:	eeb0 7a60 	vmov.f32	s14, s1
 800c4f6:	eef0 7a41 	vmov.f32	s15, s2
 800c4fa:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800c4fe:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 800c502:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 800c506:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800c50a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800c50e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800c512:	eeb0 0a66 	vmov.f32	s0, s13
 800c516:	eef0 0a47 	vmov.f32	s1, s14
 800c51a:	eeb0 1a67 	vmov.f32	s2, s15
 800c51e:	f7ff fb2f 	bl	800bb80 <FusionVectorNormalise>
 800c522:	eef0 6a40 	vmov.f32	s13, s0
 800c526:	eeb0 7a60 	vmov.f32	s14, s1
 800c52a:	eef0 7a41 	vmov.f32	s15, s2
 800c52e:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 800c532:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 800c536:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800c53a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c53c:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 800c540:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 800c544:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800c548:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800c54c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800c550:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800c554:	eef0 1a45 	vmov.f32	s3, s10
 800c558:	eeb0 2a65 	vmov.f32	s4, s11
 800c55c:	eef0 2a46 	vmov.f32	s5, s12
 800c560:	eeb0 0a66 	vmov.f32	s0, s13
 800c564:	eef0 0a47 	vmov.f32	s1, s14
 800c568:	eeb0 1a67 	vmov.f32	s2, s15
 800c56c:	f000 fb62 	bl	800cc34 <Feedback>
 800c570:	eef0 6a40 	vmov.f32	s13, s0
 800c574:	eeb0 7a60 	vmov.f32	s14, s1
 800c578:	eef0 7a41 	vmov.f32	s15, s2
 800c57c:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 800c580:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 800c584:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 800c588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d118      	bne.n	800c5c4 <FusionAhrsUpdate+0x43c>
 800c592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c594:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800c598:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800c59c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800c5a0:	eeb0 0a66 	vmov.f32	s0, s13
 800c5a4:	eef0 0a47 	vmov.f32	s1, s14
 800c5a8:	eeb0 1a67 	vmov.f32	s2, s15
 800c5ac:	f7ff fa9e 	bl	800baec <FusionVectorMagnitudeSquared>
 800c5b0:	eeb0 7a40 	vmov.f32	s14, s0
 800c5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b6:	edd3 7a04 	vldr	s15, [r3, #16]
 800c5ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c2:	d80a      	bhi.n	800c5da <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 800c5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 800c5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d0:	f1a3 0209 	sub.w	r2, r3, #9
 800c5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d6:	66da      	str	r2, [r3, #108]	; 0x6c
 800c5d8:	e004      	b.n	800c5e4 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 800c5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5de:	1c5a      	adds	r2, r3, #1
 800c5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e2:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 800c5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	dd07      	ble.n	800c600 <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 800c5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 800c5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800c5fe:	e004      	b.n	800c60a <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c602:	695b      	ldr	r3, [r3, #20]
 800c604:	461a      	mov	r2, r3
 800c606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c608:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800c60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c610:	695b      	ldr	r3, [r3, #20]
 800c612:	461a      	mov	r2, r3
 800c614:	2100      	movs	r1, #0
 800c616:	f000 fbc2 	bl	800cd9e <Clamp>
 800c61a:	4602      	mov	r2, r0
 800c61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61e:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 800c620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c622:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c626:	f083 0301 	eor.w	r3, r3, #1
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d006      	beq.n	800c63e <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 800c630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c632:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c636:	3250      	adds	r2, #80	; 0x50
 800c638:	ca07      	ldmia	r2, {r0, r1, r2}
 800c63a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800c63e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800c642:	f7ff f823 	bl	800b68c <FusionDegreesToRadians>
 800c646:	eeb0 6a40 	vmov.f32	s12, s0
 800c64a:	edd7 6a08 	vldr	s13, [r7, #32]
 800c64e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c652:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c656:	eef0 1a46 	vmov.f32	s3, s12
 800c65a:	eeb0 0a66 	vmov.f32	s0, s13
 800c65e:	eef0 0a47 	vmov.f32	s1, s14
 800c662:	eeb0 1a67 	vmov.f32	s2, s15
 800c666:	f7ff f8f3 	bl	800b850 <FusionVectorMultiplyScalar>
 800c66a:	eef0 6a40 	vmov.f32	s13, s0
 800c66e:	eeb0 7a60 	vmov.f32	s14, s1
 800c672:	eef0 7a41 	vmov.f32	s15, s2
 800c676:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 800c67a:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 800c67e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 800c682:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 800c686:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800c68a:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800c68e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800c692:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800c696:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c69a:	eef0 1a45 	vmov.f32	s3, s10
 800c69e:	eeb0 2a65 	vmov.f32	s4, s11
 800c6a2:	eef0 2a46 	vmov.f32	s5, s12
 800c6a6:	eeb0 0a66 	vmov.f32	s0, s13
 800c6aa:	eef0 0a47 	vmov.f32	s1, s14
 800c6ae:	eeb0 1a67 	vmov.f32	s2, s15
 800c6b2:	f7ff f85f 	bl	800b774 <FusionVectorAdd>
 800c6b6:	eef0 6a40 	vmov.f32	s13, s0
 800c6ba:	eeb0 7a60 	vmov.f32	s14, s1
 800c6be:	eef0 7a41 	vmov.f32	s15, s2
 800c6c2:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 800c6c6:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800c6ca:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800c6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d0:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800c6d4:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800c6d8:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800c6dc:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800c6e0:	eef0 1a46 	vmov.f32	s3, s12
 800c6e4:	eeb0 0a66 	vmov.f32	s0, s13
 800c6e8:	eef0 0a47 	vmov.f32	s1, s14
 800c6ec:	eeb0 1a67 	vmov.f32	s2, s15
 800c6f0:	f7ff f8ae 	bl	800b850 <FusionVectorMultiplyScalar>
 800c6f4:	eef0 6a40 	vmov.f32	s13, s0
 800c6f8:	eeb0 7a60 	vmov.f32	s14, s1
 800c6fc:	eef0 7a41 	vmov.f32	s15, s2
 800c700:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 800c704:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 800c708:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800c70c:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 800c710:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 800c714:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 800c718:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800c71c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800c720:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800c724:	eef0 1a45 	vmov.f32	s3, s10
 800c728:	eeb0 2a65 	vmov.f32	s4, s11
 800c72c:	eef0 2a46 	vmov.f32	s5, s12
 800c730:	eeb0 0a66 	vmov.f32	s0, s13
 800c734:	eef0 0a47 	vmov.f32	s1, s14
 800c738:	eeb0 1a67 	vmov.f32	s2, s15
 800c73c:	f7ff f81a 	bl	800b774 <FusionVectorAdd>
 800c740:	eef0 6a40 	vmov.f32	s13, s0
 800c744:	eeb0 7a60 	vmov.f32	s14, s1
 800c748:	eef0 7a41 	vmov.f32	s15, s2
 800c74c:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800c750:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800c754:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 800c758:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800c75c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c760:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c764:	edd7 1a01 	vldr	s3, [r7, #4]
 800c768:	eeb0 0a66 	vmov.f32	s0, s13
 800c76c:	eef0 0a47 	vmov.f32	s1, s14
 800c770:	eeb0 1a67 	vmov.f32	s2, s15
 800c774:	f7ff f86c 	bl	800b850 <FusionVectorMultiplyScalar>
 800c778:	eef0 6a40 	vmov.f32	s13, s0
 800c77c:	eeb0 7a60 	vmov.f32	s14, s1
 800c780:	eef0 7a41 	vmov.f32	s15, s2
 800c784:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 800c788:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 800c78c:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 800c790:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 800c794:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 800c798:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 800c79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79e:	ed93 6a06 	vldr	s12, [r3, #24]
 800c7a2:	edd3 6a07 	vldr	s13, [r3, #28]
 800c7a6:	ed93 7a08 	vldr	s14, [r3, #32]
 800c7aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c7ae:	eeb0 2a64 	vmov.f32	s4, s9
 800c7b2:	eef0 2a45 	vmov.f32	s5, s10
 800c7b6:	eeb0 3a65 	vmov.f32	s6, s11
 800c7ba:	eeb0 0a46 	vmov.f32	s0, s12
 800c7be:	eef0 0a66 	vmov.f32	s1, s13
 800c7c2:	eeb0 1a47 	vmov.f32	s2, s14
 800c7c6:	eef0 1a67 	vmov.f32	s3, s15
 800c7ca:	f7ff fa8e 	bl	800bcea <FusionQuaternionMultiplyVector>
 800c7ce:	eeb0 6a40 	vmov.f32	s12, s0
 800c7d2:	eef0 6a60 	vmov.f32	s13, s1
 800c7d6:	eeb0 7a41 	vmov.f32	s14, s2
 800c7da:	eef0 7a61 	vmov.f32	s15, s3
 800c7de:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 800c7e2:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 800c7e6:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 800c7ea:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 800c7ee:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c7f0:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 800c7f4:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 800c7f8:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 800c7fc:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800c800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c802:	ed93 6a06 	vldr	s12, [r3, #24]
 800c806:	edd3 6a07 	vldr	s13, [r3, #28]
 800c80a:	ed93 7a08 	vldr	s14, [r3, #32]
 800c80e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c812:	eeb0 2a44 	vmov.f32	s4, s8
 800c816:	eef0 2a64 	vmov.f32	s5, s9
 800c81a:	eeb0 3a45 	vmov.f32	s6, s10
 800c81e:	eef0 3a65 	vmov.f32	s7, s11
 800c822:	eeb0 0a46 	vmov.f32	s0, s12
 800c826:	eef0 0a66 	vmov.f32	s1, s13
 800c82a:	eeb0 1a47 	vmov.f32	s2, s14
 800c82e:	eef0 1a67 	vmov.f32	s3, s15
 800c832:	f7ff f9f8 	bl	800bc26 <FusionQuaternionAdd>
 800c836:	eeb0 6a40 	vmov.f32	s12, s0
 800c83a:	eef0 6a60 	vmov.f32	s13, s1
 800c83e:	eeb0 7a41 	vmov.f32	s14, s2
 800c842:	eef0 7a61 	vmov.f32	s15, s3
 800c846:	ed84 6a06 	vstr	s12, [r4, #24]
 800c84a:	edc4 6a07 	vstr	s13, [r4, #28]
 800c84e:	ed84 7a08 	vstr	s14, [r4, #32]
 800c852:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 800c856:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85a:	ed93 6a06 	vldr	s12, [r3, #24]
 800c85e:	edd3 6a07 	vldr	s13, [r3, #28]
 800c862:	ed93 7a08 	vldr	s14, [r3, #32]
 800c866:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c86a:	eeb0 0a46 	vmov.f32	s0, s12
 800c86e:	eef0 0a66 	vmov.f32	s1, s13
 800c872:	eeb0 1a47 	vmov.f32	s2, s14
 800c876:	eef0 1a67 	vmov.f32	s3, s15
 800c87a:	f7ff fad6 	bl	800be2a <FusionQuaternionNormalise>
 800c87e:	eeb0 6a40 	vmov.f32	s12, s0
 800c882:	eef0 6a60 	vmov.f32	s13, s1
 800c886:	eeb0 7a41 	vmov.f32	s14, s2
 800c88a:	eef0 7a61 	vmov.f32	s15, s3
 800c88e:	ed84 6a06 	vstr	s12, [r4, #24]
 800c892:	edc4 6a07 	vstr	s13, [r4, #28]
 800c896:	ed84 7a08 	vstr	s14, [r4, #32]
 800c89a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800c89e:	bf00      	nop
 800c8a0:	37fc      	adds	r7, #252	; 0xfc
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd90      	pop	{r4, r7, pc}

0800c8a6 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 800c8a6:	b480      	push	{r7}
 800c8a8:	b093      	sub	sp, #76	; 0x4c
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	dc02      	bgt.n	800c8bc <HalfGravity+0x16>
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	da03      	bge.n	800c8c2 <HalfGravity+0x1c>
 800c8ba:	e094      	b.n	800c9e6 <HalfGravity+0x140>
 800c8bc:	2b02      	cmp	r3, #2
 800c8be:	d048      	beq.n	800c952 <HalfGravity+0xac>
 800c8c0:	e091      	b.n	800c9e6 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	ed93 7a07 	vldr	s14, [r3, #28]
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c8ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	edd3 6a06 	vldr	s13, [r3, #24]
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	edd3 7a08 	vldr	s15, [r3, #32]
 800c8de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8e2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c8e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	ed93 7a08 	vldr	s14, [r3, #32]
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c8f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	edd3 6a06 	vldr	s13, [r3, #24]
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	edd3 7a07 	vldr	s15, [r3, #28]
 800c906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c90a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c90e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	ed93 7a06 	vldr	s14, [r3, #24]
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	edd3 7a06 	vldr	s15, [r3, #24]
 800c91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c922:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c926:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c93a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c93e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 800c942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c946:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c94a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c94c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c950:	e052      	b.n	800c9f8 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	ed93 7a06 	vldr	s14, [r3, #24]
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	edd3 7a08 	vldr	s15, [r3, #32]
 800c95e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	edd3 6a07 	vldr	s13, [r3, #28]
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c96e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c972:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c976:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	ed93 7a08 	vldr	s14, [r3, #32]
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	edd3 6a06 	vldr	s13, [r3, #24]
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	edd3 7a07 	vldr	s15, [r3, #28]
 800c996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c99a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c99e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 800c9a2:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	ed93 7a06 	vldr	s14, [r3, #24]
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	edd3 7a06 	vldr	s15, [r3, #24]
 800c9b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c9ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c9ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9ce:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c9d2:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 800c9d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c9da:	f107 0218 	add.w	r2, r7, #24
 800c9de:	ca07      	ldmia	r2, {r0, r1, r2}
 800c9e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c9e4:	e008      	b.n	800c9f8 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800c9e6:	f04f 0300 	mov.w	r3, #0
 800c9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9ec:	f04f 0300 	mov.w	r3, #0
 800c9f0:	643b      	str	r3, [r7, #64]	; 0x40
 800c9f2:	f04f 0300 	mov.w	r3, #0
 800c9f6:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 800c9f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c9fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9fe:	ee06 1a90 	vmov	s13, r1
 800ca02:	ee07 2a10 	vmov	s14, r2
 800ca06:	ee07 3a90 	vmov	s15, r3
 800ca0a:	eeb0 0a66 	vmov.f32	s0, s13
 800ca0e:	eef0 0a47 	vmov.f32	s1, s14
 800ca12:	eeb0 1a67 	vmov.f32	s2, s15
 800ca16:	374c      	adds	r7, #76	; 0x4c
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 800ca20:	b480      	push	{r7}
 800ca22:	b097      	sub	sp, #92	; 0x5c
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	f000 809a 	beq.w	800cb66 <HalfMagnetic+0x146>
 800ca32:	2b02      	cmp	r3, #2
 800ca34:	f300 80e1 	bgt.w	800cbfa <HalfMagnetic+0x1da>
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d002      	beq.n	800ca42 <HalfMagnetic+0x22>
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d048      	beq.n	800cad2 <HalfMagnetic+0xb2>
 800ca40:	e0db      	b.n	800cbfa <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	ed93 7a07 	vldr	s14, [r3, #28]
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	edd3 7a08 	vldr	s15, [r3, #32]
 800ca4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	edd3 6a06 	vldr	s13, [r3, #24]
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ca5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca62:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800ca66:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	ed93 7a06 	vldr	s14, [r3, #24]
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	edd3 7a06 	vldr	s15, [r3, #24]
 800ca76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ca7e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	edd3 6a08 	vldr	s13, [r3, #32]
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	edd3 7a08 	vldr	s15, [r3, #32]
 800ca8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca92:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800ca96:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	ed93 7a08 	vldr	s14, [r3, #32]
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800caa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	edd3 6a06 	vldr	s13, [r3, #24]
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	edd3 7a07 	vldr	s15, [r3, #28]
 800cab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800caba:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800cabe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 800cac2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cac6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800caca:	ca07      	ldmia	r2, {r0, r1, r2}
 800cacc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cad0:	e09c      	b.n	800cc0c <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	ed93 7a06 	vldr	s14, [r3, #24]
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	edd3 7a06 	vldr	s15, [r3, #24]
 800cade:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cae2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cae6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	edd3 6a07 	vldr	s13, [r3, #28]
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	edd3 7a07 	vldr	s15, [r3, #28]
 800caf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cafa:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800cafe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	ed93 7a06 	vldr	s14, [r3, #24]
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cb0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	edd3 6a07 	vldr	s13, [r3, #28]
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	edd3 7a08 	vldr	s15, [r3, #32]
 800cb1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cb22:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800cb26:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	ed93 7a07 	vldr	s14, [r3, #28]
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cb36:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	edd3 6a06 	vldr	s13, [r3, #24]
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	edd3 7a08 	vldr	s15, [r3, #32]
 800cb46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cb4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb4e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800cb52:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800cb56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cb5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cb5e:	ca07      	ldmia	r2, {r0, r1, r2}
 800cb60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cb64:	e052      	b.n	800cc0c <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	ed93 7a07 	vldr	s14, [r3, #28]
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	edd3 7a08 	vldr	s15, [r3, #32]
 800cb72:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	edd3 6a06 	vldr	s13, [r3, #24]
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cb82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cb86:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb8a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800cb8e:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	ed93 7a06 	vldr	s14, [r3, #24]
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	edd3 7a06 	vldr	s15, [r3, #24]
 800cb9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cba2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cba6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	edd3 6a08 	vldr	s13, [r3, #32]
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	edd3 7a08 	vldr	s15, [r3, #32]
 800cbb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cbba:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800cbbe:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	ed93 7a06 	vldr	s14, [r3, #24]
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	edd3 7a07 	vldr	s15, [r3, #28]
 800cbce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	edd3 6a08 	vldr	s13, [r3, #32]
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cbde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cbe2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800cbe6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800cbea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cbee:	f107 021c 	add.w	r2, r7, #28
 800cbf2:	ca07      	ldmia	r2, {r0, r1, r2}
 800cbf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cbf8:	e008      	b.n	800cc0c <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800cbfa:	f04f 0300 	mov.w	r3, #0
 800cbfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc00:	f04f 0300 	mov.w	r3, #0
 800cc04:	653b      	str	r3, [r7, #80]	; 0x50
 800cc06:	f04f 0300 	mov.w	r3, #0
 800cc0a:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 800cc0c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cc0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc12:	ee06 1a90 	vmov	s13, r1
 800cc16:	ee07 2a10 	vmov	s14, r2
 800cc1a:	ee07 3a90 	vmov	s15, r3
 800cc1e:	eeb0 0a66 	vmov.f32	s0, s13
 800cc22:	eef0 0a47 	vmov.f32	s1, s14
 800cc26:	eeb0 1a67 	vmov.f32	s2, s15
 800cc2a:	375c      	adds	r7, #92	; 0x5c
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b090      	sub	sp, #64	; 0x40
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	eeb0 5a40 	vmov.f32	s10, s0
 800cc3e:	eef0 5a60 	vmov.f32	s11, s1
 800cc42:	eeb0 6a41 	vmov.f32	s12, s2
 800cc46:	eef0 6a61 	vmov.f32	s13, s3
 800cc4a:	eeb0 7a42 	vmov.f32	s14, s4
 800cc4e:	eef0 7a62 	vmov.f32	s15, s5
 800cc52:	ed87 5a07 	vstr	s10, [r7, #28]
 800cc56:	edc7 5a08 	vstr	s11, [r7, #32]
 800cc5a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800cc5e:	edc7 6a04 	vstr	s13, [r7, #16]
 800cc62:	ed87 7a05 	vstr	s14, [r7, #20]
 800cc66:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 800cc6a:	ed97 5a04 	vldr	s10, [r7, #16]
 800cc6e:	edd7 5a05 	vldr	s11, [r7, #20]
 800cc72:	ed97 6a06 	vldr	s12, [r7, #24]
 800cc76:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc7a:	ed97 7a08 	vldr	s14, [r7, #32]
 800cc7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cc82:	eef0 1a45 	vmov.f32	s3, s10
 800cc86:	eeb0 2a65 	vmov.f32	s4, s11
 800cc8a:	eef0 2a46 	vmov.f32	s5, s12
 800cc8e:	eeb0 0a66 	vmov.f32	s0, s13
 800cc92:	eef0 0a47 	vmov.f32	s1, s14
 800cc96:	eeb0 1a67 	vmov.f32	s2, s15
 800cc9a:	f7fe fed1 	bl	800ba40 <FusionVectorDotProduct>
 800cc9e:	eef0 7a40 	vmov.f32	s15, s0
 800cca2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccaa:	d540      	bpl.n	800cd2e <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 800ccac:	ed97 5a04 	vldr	s10, [r7, #16]
 800ccb0:	edd7 5a05 	vldr	s11, [r7, #20]
 800ccb4:	ed97 6a06 	vldr	s12, [r7, #24]
 800ccb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccbc:	ed97 7a08 	vldr	s14, [r7, #32]
 800ccc0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ccc4:	eef0 1a45 	vmov.f32	s3, s10
 800ccc8:	eeb0 2a65 	vmov.f32	s4, s11
 800cccc:	eef0 2a46 	vmov.f32	s5, s12
 800ccd0:	eeb0 0a66 	vmov.f32	s0, s13
 800ccd4:	eef0 0a47 	vmov.f32	s1, s14
 800ccd8:	eeb0 1a67 	vmov.f32	s2, s15
 800ccdc:	f7fe fe4a 	bl	800b974 <FusionVectorCrossProduct>
 800cce0:	eef0 6a40 	vmov.f32	s13, s0
 800cce4:	eeb0 7a60 	vmov.f32	s14, s1
 800cce8:	eef0 7a41 	vmov.f32	s15, s2
 800ccec:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800ccf0:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800ccf4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800ccf8:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800ccfc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800cd00:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cd04:	eeb0 0a66 	vmov.f32	s0, s13
 800cd08:	eef0 0a47 	vmov.f32	s1, s14
 800cd0c:	eeb0 1a67 	vmov.f32	s2, s15
 800cd10:	f7fe ff36 	bl	800bb80 <FusionVectorNormalise>
 800cd14:	eef0 6a40 	vmov.f32	s13, s0
 800cd18:	eeb0 7a60 	vmov.f32	s14, s1
 800cd1c:	eef0 7a41 	vmov.f32	s15, s2
 800cd20:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800cd24:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800cd28:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800cd2c:	e025      	b.n	800cd7a <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 800cd2e:	ed97 5a04 	vldr	s10, [r7, #16]
 800cd32:	edd7 5a05 	vldr	s11, [r7, #20]
 800cd36:	ed97 6a06 	vldr	s12, [r7, #24]
 800cd3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd3e:	ed97 7a08 	vldr	s14, [r7, #32]
 800cd42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cd46:	eef0 1a45 	vmov.f32	s3, s10
 800cd4a:	eeb0 2a65 	vmov.f32	s4, s11
 800cd4e:	eef0 2a46 	vmov.f32	s5, s12
 800cd52:	eeb0 0a66 	vmov.f32	s0, s13
 800cd56:	eef0 0a47 	vmov.f32	s1, s14
 800cd5a:	eeb0 1a67 	vmov.f32	s2, s15
 800cd5e:	f7fe fe09 	bl	800b974 <FusionVectorCrossProduct>
 800cd62:	eef0 6a40 	vmov.f32	s13, s0
 800cd66:	eeb0 7a60 	vmov.f32	s14, s1
 800cd6a:	eef0 7a41 	vmov.f32	s15, s2
 800cd6e:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800cd72:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800cd76:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 800cd7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd80:	ee06 1a90 	vmov	s13, r1
 800cd84:	ee07 2a10 	vmov	s14, r2
 800cd88:	ee07 3a90 	vmov	s15, r3
 800cd8c:	eeb0 0a66 	vmov.f32	s0, s13
 800cd90:	eef0 0a47 	vmov.f32	s1, s14
 800cd94:	eeb0 1a67 	vmov.f32	s2, s15
 800cd98:	3740      	adds	r7, #64	; 0x40
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 800cd9e:	b480      	push	{r7}
 800cda0:	b085      	sub	sp, #20
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	60f8      	str	r0, [r7, #12]
 800cda6:	60b9      	str	r1, [r7, #8]
 800cda8:	607a      	str	r2, [r7, #4]
    if (value < min) {
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	da01      	bge.n	800cdb6 <Clamp+0x18>
        return min;
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	e006      	b.n	800cdc4 <Clamp+0x26>
    }
    if (value > max) {
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	dd01      	ble.n	800cdc2 <Clamp+0x24>
        return max;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	e000      	b.n	800cdc4 <Clamp+0x26>
    }
    return value;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3714      	adds	r7, #20
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 800cdd0:	b490      	push	{r4, r7}
 800cdd2:	b08a      	sub	sp, #40	; 0x28
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	f107 0418 	add.w	r4, r7, #24
 800cdde:	3318      	adds	r3, #24
 800cde0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cde2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cde6:	69b8      	ldr	r0, [r7, #24]
 800cde8:	69f9      	ldr	r1, [r7, #28]
 800cdea:	6a3a      	ldr	r2, [r7, #32]
 800cdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdee:	ee06 0a10 	vmov	s12, r0
 800cdf2:	ee06 1a90 	vmov	s13, r1
 800cdf6:	ee07 2a10 	vmov	s14, r2
 800cdfa:	ee07 3a90 	vmov	s15, r3
}
 800cdfe:	eeb0 0a46 	vmov.f32	s0, s12
 800ce02:	eef0 0a66 	vmov.f32	s1, s13
 800ce06:	eeb0 1a47 	vmov.f32	s2, s14
 800ce0a:	eef0 1a67 	vmov.f32	s3, s15
 800ce0e:	3728      	adds	r7, #40	; 0x28
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bc90      	pop	{r4, r7}
 800ce14:	4770      	bx	lr

0800ce16 <bmm150_init>:
 *  @brief This API is the entry point, Call this API before using other APIs.
 *  This API reads the chip-id of the sensor which is the first step to
 *  verify the sensor and updates the trim parameters of the sensor.
 */
int8_t bmm150_init(struct bmm150_dev *dev)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b084      	sub	sp, #16
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	73bb      	strb	r3, [r7, #14]

    /* Power up the sensor from suspend to sleep mode */
    rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 800ce22:	6879      	ldr	r1, [r7, #4]
 800ce24:	2001      	movs	r0, #1
 800ce26:	f000 fa77 	bl	800d318 <set_power_control_bit>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800ce2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d11f      	bne.n	800ce76 <bmm150_init+0x60>
    {
        /* Start-up time delay of 3ms */
        dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	695b      	ldr	r3, [r3, #20]
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	6852      	ldr	r2, [r2, #4]
 800ce3e:	4611      	mov	r1, r2
 800ce40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ce44:	4798      	blx	r3

        /* Chip ID of the sensor is read */
        rslt = bmm150_get_regs(BMM150_REG_CHIP_ID, &chip_id, 1, dev);
 800ce46:	f107 010e 	add.w	r1, r7, #14
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	2040      	movs	r0, #64	; 0x40
 800ce50:	f000 f843 	bl	800ceda <bmm150_get_regs>
 800ce54:	4603      	mov	r3, r0
 800ce56:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMM150_OK)
 800ce58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d10a      	bne.n	800ce76 <bmm150_init+0x60>
        {
            /* Check for chip id validity */
            if (chip_id == BMM150_CHIP_ID)
 800ce60:	7bbb      	ldrb	r3, [r7, #14]
 800ce62:	2b32      	cmp	r3, #50	; 0x32
 800ce64:	d107      	bne.n	800ce76 <bmm150_init+0x60>
            {
                dev->chip_id = chip_id;
 800ce66:	7bba      	ldrb	r2, [r7, #14]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	701a      	strb	r2, [r3, #0]

                /* Function to update trim values */
                rslt = read_trim_registers(dev);
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 fa8d 	bl	800d38c <read_trim_registers>
 800ce72:	4603      	mov	r3, r0
 800ce74:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800ce76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <bmm150_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmm150_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 800ce82:	b590      	push	{r4, r7, lr}
 800ce84:	b087      	sub	sp, #28
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
 800ce8c:	603b      	str	r3, [r7, #0]
 800ce8e:	4603      	mov	r3, r0
 800ce90:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800ce92:	6838      	ldr	r0, [r7, #0]
 800ce94:	f000 fa1c 	bl	800d2d0 <null_ptr_check>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL) && (len != 0))
 800ce9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d112      	bne.n	800ceca <bmm150_set_regs+0x48>
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00f      	beq.n	800ceca <bmm150_set_regs+0x48>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00c      	beq.n	800ceca <bmm150_set_regs+0x48>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	691c      	ldr	r4, [r3, #16]
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	7bf8      	ldrb	r0, [r7, #15]
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	68b9      	ldr	r1, [r7, #8]
 800cebe:	47a0      	blx	r4
 800cec0:	4603      	mov	r3, r0
 800cec2:	461a      	mov	r2, r3
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	721a      	strb	r2, [r3, #8]
 800cec8:	e001      	b.n	800cece <bmm150_set_regs+0x4c>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 800ceca:	23ff      	movs	r3, #255	; 0xff
 800cecc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800cece:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	371c      	adds	r7, #28
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd90      	pop	{r4, r7, pc}

0800ceda <bmm150_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmm150_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 800ceda:	b590      	push	{r4, r7, lr}
 800cedc:	b087      	sub	sp, #28
 800cede:	af00      	add	r7, sp, #0
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
 800cee4:	603b      	str	r3, [r7, #0]
 800cee6:	4603      	mov	r3, r0
 800cee8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800ceea:	6838      	ldr	r0, [r7, #0]
 800ceec:	f000 f9f0 	bl	800d2d0 <null_ptr_check>
 800cef0:	4603      	mov	r3, r0
 800cef2:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL))
 800cef4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d117      	bne.n	800cf2c <bmm150_get_regs+0x52>
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d014      	beq.n	800cf2c <bmm150_get_regs+0x52>
    {
        if (dev->intf != BMM150_I2C_INTF)
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	785b      	ldrb	r3, [r3, #1]
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d003      	beq.n	800cf12 <bmm150_get_regs+0x38>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | 0x80;
 800cf0a:	7bfb      	ldrb	r3, [r7, #15]
 800cf0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf10:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	68dc      	ldr	r4, [r3, #12]
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	7bf8      	ldrb	r0, [r7, #15]
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	68b9      	ldr	r1, [r7, #8]
 800cf20:	47a0      	blx	r4
 800cf22:	4603      	mov	r3, r0
 800cf24:	461a      	mov	r2, r3
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	721a      	strb	r2, [r3, #8]
 800cf2a:	e001      	b.n	800cf30 <bmm150_get_regs+0x56>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 800cf2c:	23ff      	movs	r3, #255	; 0xff
 800cf2e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800cf30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	371c      	adds	r7, #28
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd90      	pop	{r4, r7, pc}

0800cf3c <bmm150_set_op_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bmm150_set_op_mode(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b084      	sub	sp, #16
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t pwr_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800cf46:	6838      	ldr	r0, [r7, #0]
 800cf48:	f000 f9c2 	bl	800d2d0 <null_ptr_check>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800cf50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d150      	bne.n	800cffa <bmm150_set_op_mode+0xbe>
    {
        pwr_mode = settings->pwr_mode;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	785b      	ldrb	r3, [r3, #1]
 800cf5c:	73bb      	strb	r3, [r7, #14]

        /* Select the power mode to set */
        switch (pwr_mode)
 800cf5e:	7bbb      	ldrb	r3, [r7, #14]
 800cf60:	2b04      	cmp	r3, #4
 800cf62:	d847      	bhi.n	800cff4 <bmm150_set_op_mode+0xb8>
 800cf64:	a201      	add	r2, pc, #4	; (adr r2, 800cf6c <bmm150_set_op_mode+0x30>)
 800cf66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf6a:	bf00      	nop
 800cf6c:	0800cf81 	.word	0x0800cf81
 800cf70:	0800cfa3 	.word	0x0800cfa3
 800cf74:	0800cff5 	.word	0x0800cff5
 800cf78:	0800cfc5 	.word	0x0800cfc5
 800cf7c:	0800cfe7 	.word	0x0800cfe7
            case BMM150_POWERMODE_NORMAL:

                /* If the sensor is in suspend mode
                 * put the device to sleep mode
                 */
                rslt = suspend_to_sleep_mode(dev);
 800cf80:	6838      	ldr	r0, [r7, #0]
 800cf82:	f000 fac7 	bl	800d514 <suspend_to_sleep_mode>
 800cf86:	4603      	mov	r3, r0
 800cf88:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMM150_OK)
 800cf8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d135      	bne.n	800cffe <bmm150_set_op_mode+0xc2>
                {
                    /* write the op mode */
                    rslt = write_op_mode(pwr_mode, dev);
 800cf92:	7bbb      	ldrb	r3, [r7, #14]
 800cf94:	6839      	ldr	r1, [r7, #0]
 800cf96:	4618      	mov	r0, r3
 800cf98:	f000 fa8b 	bl	800d4b2 <write_op_mode>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	73fb      	strb	r3, [r7, #15]
                }

                break;
 800cfa0:	e02d      	b.n	800cffe <bmm150_set_op_mode+0xc2>
            case BMM150_POWERMODE_FORCED:

                /* If the sensor is in suspend mode
                 * put the device to sleep mode
                 */
                rslt = suspend_to_sleep_mode(dev);
 800cfa2:	6838      	ldr	r0, [r7, #0]
 800cfa4:	f000 fab6 	bl	800d514 <suspend_to_sleep_mode>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMM150_OK)
 800cfac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d126      	bne.n	800d002 <bmm150_set_op_mode+0xc6>
                {
                    /* write the op mode */
                    rslt = write_op_mode(pwr_mode, dev);
 800cfb4:	7bbb      	ldrb	r3, [r7, #14]
 800cfb6:	6839      	ldr	r1, [r7, #0]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f000 fa7a 	bl	800d4b2 <write_op_mode>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	73fb      	strb	r3, [r7, #15]
                }

                break;
 800cfc2:	e01e      	b.n	800d002 <bmm150_set_op_mode+0xc6>
            case BMM150_POWERMODE_SLEEP:

                /* If the sensor is in suspend mode
                 * put the device to sleep mode
                 */
                rslt = suspend_to_sleep_mode(dev);
 800cfc4:	6838      	ldr	r0, [r7, #0]
 800cfc6:	f000 faa5 	bl	800d514 <suspend_to_sleep_mode>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMM150_OK)
 800cfce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d117      	bne.n	800d006 <bmm150_set_op_mode+0xca>
                {
                    /* write the op mode */
                    rslt = write_op_mode(pwr_mode, dev);
 800cfd6:	7bbb      	ldrb	r3, [r7, #14]
 800cfd8:	6839      	ldr	r1, [r7, #0]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 fa69 	bl	800d4b2 <write_op_mode>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	73fb      	strb	r3, [r7, #15]
                }

                break;
 800cfe4:	e00f      	b.n	800d006 <bmm150_set_op_mode+0xca>
            case BMM150_POWERMODE_SUSPEND:

                /* Set the power control bit to zero */
                rslt = set_power_control_bit(BMM150_POWER_CNTRL_DISABLE, dev);
 800cfe6:	6839      	ldr	r1, [r7, #0]
 800cfe8:	2000      	movs	r0, #0
 800cfea:	f000 f995 	bl	800d318 <set_power_control_bit>
 800cfee:	4603      	mov	r3, r0
 800cff0:	73fb      	strb	r3, [r7, #15]
                break;
 800cff2:	e009      	b.n	800d008 <bmm150_set_op_mode+0xcc>
            default:
                rslt = BMM150_E_INVALID_CONFIG;
 800cff4:	23fd      	movs	r3, #253	; 0xfd
 800cff6:	73fb      	strb	r3, [r7, #15]
                break;
 800cff8:	e006      	b.n	800d008 <bmm150_set_op_mode+0xcc>
        }
    }
 800cffa:	bf00      	nop
 800cffc:	e004      	b.n	800d008 <bmm150_set_op_mode+0xcc>
                break;
 800cffe:	bf00      	nop
 800d000:	e002      	b.n	800d008 <bmm150_set_op_mode+0xcc>
                break;
 800d002:	bf00      	nop
 800d004:	e000      	b.n	800d008 <bmm150_set_op_mode+0xcc>
                break;
 800d006:	bf00      	nop

    return rslt;
 800d008:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <bmm150_set_presetmode>:

/*!
 * @brief This API is used to set the preset mode of the sensor.
 */
int8_t bmm150_set_presetmode(struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t preset_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800d01e:	6838      	ldr	r0, [r7, #0]
 800d020:	f000 f956 	bl	800d2d0 <null_ptr_check>
 800d024:	4603      	mov	r3, r0
 800d026:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800d028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d166      	bne.n	800d0fe <bmm150_set_presetmode+0xea>
    {
        preset_mode = settings->preset_mode;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	795b      	ldrb	r3, [r3, #5]
 800d034:	73bb      	strb	r3, [r7, #14]

        switch (preset_mode)
 800d036:	7bbb      	ldrb	r3, [r7, #14]
 800d038:	3b01      	subs	r3, #1
 800d03a:	2b04      	cmp	r3, #4
 800d03c:	d85c      	bhi.n	800d0f8 <bmm150_set_presetmode+0xe4>
 800d03e:	a201      	add	r2, pc, #4	; (adr r2, 800d044 <bmm150_set_presetmode+0x30>)
 800d040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d044:	0800d059 	.word	0x0800d059
 800d048:	0800d079 	.word	0x0800d079
 800d04c:	0800d099 	.word	0x0800d099
 800d050:	0800d0b9 	.word	0x0800d0b9
 800d054:	0800d0d9 	.word	0x0800d0d9
            case BMM150_PRESETMODE_LOWPOWER:

                /* Set the data rate x,y,z repetition
                 * for Low Power mode
                 */
                settings->data_rate = BMM150_DATA_RATE_10HZ;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_LOWPOWER;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2201      	movs	r2, #1
 800d062:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_LOWPOWER;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800d06a:	6839      	ldr	r1, [r7, #0]
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 fad6 	bl	800d61e <set_odr_xyz_rep>
 800d072:	4603      	mov	r3, r0
 800d074:	73fb      	strb	r3, [r7, #15]
                break;
 800d076:	e043      	b.n	800d100 <bmm150_set_presetmode+0xec>
            case BMM150_PRESETMODE_REGULAR:

                /* Set the data rate x,y,z repetition
                 * for Regular mode
                 */
                settings->data_rate = BMM150_DATA_RATE_10HZ;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_REGULAR;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2204      	movs	r2, #4
 800d082:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_REGULAR;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2207      	movs	r2, #7
 800d088:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800d08a:	6839      	ldr	r1, [r7, #0]
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 fac6 	bl	800d61e <set_odr_xyz_rep>
 800d092:	4603      	mov	r3, r0
 800d094:	73fb      	strb	r3, [r7, #15]
                break;
 800d096:	e033      	b.n	800d100 <bmm150_set_presetmode+0xec>
            case BMM150_PRESETMODE_HIGHACCURACY:

                /* Set the data rate x,y,z repetition
                 * for High Accuracy mode *
                 */
                settings->data_rate = BMM150_DATA_RATE_20HZ;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2205      	movs	r2, #5
 800d09c:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_HIGHACCURACY;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2217      	movs	r2, #23
 800d0a2:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_HIGHACCURACY;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2229      	movs	r2, #41	; 0x29
 800d0a8:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800d0aa:	6839      	ldr	r1, [r7, #0]
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f000 fab6 	bl	800d61e <set_odr_xyz_rep>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	73fb      	strb	r3, [r7, #15]
                break;
 800d0b6:	e023      	b.n	800d100 <bmm150_set_presetmode+0xec>
            case BMM150_PRESETMODE_ENHANCED:

                /* Set the data rate x,y,z repetition
                 * for Enhanced Accuracy mode
                 */
                settings->data_rate = BMM150_DATA_RATE_10HZ;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_ENHANCED;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2207      	movs	r2, #7
 800d0c2:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_ENHANCED;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	220d      	movs	r2, #13
 800d0c8:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800d0ca:	6839      	ldr	r1, [r7, #0]
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 faa6 	bl	800d61e <set_odr_xyz_rep>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	73fb      	strb	r3, [r7, #15]
                break;
 800d0d6:	e013      	b.n	800d100 <bmm150_set_presetmode+0xec>
            case BMM150_PRESETMODE_FORCED200:

				/* Set the data rate x,y,z repetition
				 * for Enhanced Accuracy mode
				 */
				settings->data_rate = BMM150_DATA_RATE_30HZ;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2207      	movs	r2, #7
 800d0dc:	709a      	strb	r2, [r3, #2]
				settings->xy_rep = BMM150_REPXY_FORCED200;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2202      	movs	r2, #2
 800d0e2:	70da      	strb	r2, [r3, #3]
				settings->z_rep = BMM150_REPZ_FORCED200;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	711a      	strb	r2, [r3, #4]
				rslt = set_odr_xyz_rep(settings, dev);
 800d0ea:	6839      	ldr	r1, [r7, #0]
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 fa96 	bl	800d61e <set_odr_xyz_rep>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	73fb      	strb	r3, [r7, #15]
				break;
 800d0f6:	e003      	b.n	800d100 <bmm150_set_presetmode+0xec>
            default:
                rslt = BMM150_E_INVALID_CONFIG;
 800d0f8:	23fd      	movs	r3, #253	; 0xfd
 800d0fa:	73fb      	strb	r3, [r7, #15]
                break;
 800d0fc:	e000      	b.n	800d100 <bmm150_set_presetmode+0xec>
        }
    }
 800d0fe:	bf00      	nop

    return rslt;
 800d100:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d104:	4618      	mov	r0, r3
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <bmm150_set_sensor_settings>:
 * and the dev structure configuration
 */
int8_t bmm150_set_sensor_settings(uint16_t desired_settings,
                                  const struct bmm150_settings *settings,
                                  struct bmm150_dev *dev)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b086      	sub	sp, #24
 800d110:	af00      	add	r7, sp, #0
 800d112:	4603      	mov	r3, r0
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	607a      	str	r2, [r7, #4]
 800d118:	81fb      	strh	r3, [r7, #14]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f8d8 	bl	800d2d0 <null_ptr_check>
 800d120:	4603      	mov	r3, r0
 800d122:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800d124:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d14e      	bne.n	800d1ca <bmm150_set_sensor_settings+0xbe>
    {
        if (are_settings_changed(MODE_SETTING_SEL, desired_settings))
 800d12c:	89fb      	ldrh	r3, [r7, #14]
 800d12e:	4619      	mov	r1, r3
 800d130:	200f      	movs	r0, #15
 800d132:	f000 faca 	bl	800d6ca <are_settings_changed>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d007      	beq.n	800d14c <bmm150_set_sensor_settings+0x40>
        {
            /* ODR, Control measurement, XY,Z repetition values */
            rslt = mode_settings(desired_settings, settings, dev);
 800d13c:	89fb      	ldrh	r3, [r7, #14]
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	68b9      	ldr	r1, [r7, #8]
 800d142:	4618      	mov	r0, r3
 800d144:	f000 fadb 	bl	800d6fe <mode_settings>
 800d148:	4603      	mov	r3, r0
 800d14a:	75fb      	strb	r3, [r7, #23]
        }

        if ((!rslt) && are_settings_changed(INTERRUPT_PIN_SETTING_SEL, desired_settings))
 800d14c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d110      	bne.n	800d176 <bmm150_set_sensor_settings+0x6a>
 800d154:	89fb      	ldrh	r3, [r7, #14]
 800d156:	4619      	mov	r1, r3
 800d158:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 800d15c:	f000 fab5 	bl	800d6ca <are_settings_changed>
 800d160:	4603      	mov	r3, r0
 800d162:	2b00      	cmp	r3, #0
 800d164:	d007      	beq.n	800d176 <bmm150_set_sensor_settings+0x6a>
        {
            /* Interrupt pin settings */
            rslt = interrupt_pin_settings(desired_settings, settings, dev);
 800d166:	89fb      	ldrh	r3, [r7, #14]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	68b9      	ldr	r1, [r7, #8]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f000 fb01 	bl	800d774 <interrupt_pin_settings>
 800d172:	4603      	mov	r3, r0
 800d174:	75fb      	strb	r3, [r7, #23]
        }

        if ((!rslt) && are_settings_changed(INTERRUPT_CONFIG_SEL, desired_settings))
 800d176:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d110      	bne.n	800d1a0 <bmm150_set_sensor_settings+0x94>
 800d17e:	89fb      	ldrh	r3, [r7, #14]
 800d180:	4619      	mov	r1, r3
 800d182:	f44f 50f0 	mov.w	r0, #7680	; 0x1e00
 800d186:	f000 faa0 	bl	800d6ca <are_settings_changed>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d007      	beq.n	800d1a0 <bmm150_set_sensor_settings+0x94>
        {
            /* Interrupt configuration settings */
            rslt = interrupt_config(desired_settings, settings, dev);
 800d190:	89fb      	ldrh	r3, [r7, #14]
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	68b9      	ldr	r1, [r7, #8]
 800d196:	4618      	mov	r0, r3
 800d198:	f000 fb7a 	bl	800d890 <interrupt_config>
 800d19c:	4603      	mov	r3, r0
 800d19e:	75fb      	strb	r3, [r7, #23]
        }

        if ((!rslt) && are_settings_changed(INTERRUPT_THRESHOLD_CONFIG_SEL, desired_settings))
 800d1a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d110      	bne.n	800d1ca <bmm150_set_sensor_settings+0xbe>
 800d1a8:	89fb      	ldrh	r3, [r7, #14]
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 800d1b0:	f000 fa8b 	bl	800d6ca <are_settings_changed>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d007      	beq.n	800d1ca <bmm150_set_sensor_settings+0xbe>
        {
            /* Interrupt threshold settings */
            rslt = interrupt_threshold_settings(desired_settings, settings, dev);
 800d1ba:	89fb      	ldrh	r3, [r7, #14]
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	68b9      	ldr	r1, [r7, #8]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f000 fbdf 	bl	800d984 <interrupt_threshold_settings>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800d1ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <bmm150_read_mag_data>:
 * @brief This API is used to read the magnetometer data from registers
 * 0x42 to 0x49 and update the dev structure with the
 * compensated mag data in micro-tesla.
 */
int8_t bmm150_read_mag_data(struct bmm150_mag_data *mag_data, struct bmm150_dev *dev)
{
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b088      	sub	sp, #32
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    int16_t msb_data;
    uint8_t reg_data[BMM150_LEN_XYZR_DATA] = { 0 };
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	617b      	str	r3, [r7, #20]
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	61bb      	str	r3, [r7, #24]
    struct bmm150_raw_mag_data raw_mag_data;

    /* Read the mag data registers */
    rslt = bmm150_get_regs(BMM150_REG_DATA_X_LSB, reg_data, BMM150_LEN_XYZR_DATA, dev);
 800d1e8:	f107 0114 	add.w	r1, r7, #20
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	2208      	movs	r2, #8
 800d1f0:	2042      	movs	r0, #66	; 0x42
 800d1f2:	f7ff fe72 	bl	800ceda <bmm150_get_regs>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800d1fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d160      	bne.n	800d2c4 <bmm150_read_mag_data+0xee>
    {
        /* Mag X axis data */
        reg_data[0] = BMM150_GET_BITS(reg_data[0], BMM150_DATA_X);
 800d202:	7d3b      	ldrb	r3, [r7, #20]
 800d204:	08db      	lsrs	r3, r3, #3
 800d206:	b2db      	uxtb	r3, r3
 800d208:	753b      	strb	r3, [r7, #20]

        /* Shift the MSB data to left by 5 bits */
        /* Multiply by 32 to get the shift left by 5 value */
        msb_data = ((int16_t)((int8_t)reg_data[1])) * 32;
 800d20a:	7d7b      	ldrb	r3, [r7, #21]
 800d20c:	b25b      	sxtb	r3, r3
 800d20e:	b29b      	uxth	r3, r3
 800d210:	015b      	lsls	r3, r3, #5
 800d212:	b29b      	uxth	r3, r3
 800d214:	83bb      	strh	r3, [r7, #28]

        /* Raw mag X axis data */
        raw_mag_data.raw_datax = (int16_t)(msb_data | reg_data[0]);
 800d216:	7d3b      	ldrb	r3, [r7, #20]
 800d218:	b21a      	sxth	r2, r3
 800d21a:	8bbb      	ldrh	r3, [r7, #28]
 800d21c:	4313      	orrs	r3, r2
 800d21e:	b21b      	sxth	r3, r3
 800d220:	81bb      	strh	r3, [r7, #12]

        /* Mag Y axis data */
        reg_data[2] = BMM150_GET_BITS(reg_data[2], BMM150_DATA_Y);
 800d222:	7dbb      	ldrb	r3, [r7, #22]
 800d224:	08db      	lsrs	r3, r3, #3
 800d226:	b2db      	uxtb	r3, r3
 800d228:	75bb      	strb	r3, [r7, #22]

        /* Shift the MSB data to left by 5 bits */
        /* Multiply by 32 to get the shift left by 5 value */
        msb_data = ((int16_t)((int8_t)reg_data[3])) * 32;
 800d22a:	7dfb      	ldrb	r3, [r7, #23]
 800d22c:	b25b      	sxtb	r3, r3
 800d22e:	b29b      	uxth	r3, r3
 800d230:	015b      	lsls	r3, r3, #5
 800d232:	b29b      	uxth	r3, r3
 800d234:	83bb      	strh	r3, [r7, #28]

        /* Raw mag Y axis data */
        raw_mag_data.raw_datay = (int16_t)(msb_data | reg_data[2]);
 800d236:	7dbb      	ldrb	r3, [r7, #22]
 800d238:	b21a      	sxth	r2, r3
 800d23a:	8bbb      	ldrh	r3, [r7, #28]
 800d23c:	4313      	orrs	r3, r2
 800d23e:	b21b      	sxth	r3, r3
 800d240:	81fb      	strh	r3, [r7, #14]

        /* Mag Z axis data */
        reg_data[4] = BMM150_GET_BITS(reg_data[4], BMM150_DATA_Z);
 800d242:	7e3b      	ldrb	r3, [r7, #24]
 800d244:	085b      	lsrs	r3, r3, #1
 800d246:	b2db      	uxtb	r3, r3
 800d248:	763b      	strb	r3, [r7, #24]

        /* Shift the MSB data to left by 7 bits */
        /* Multiply by 128 to get the shift left by 7 value */
        msb_data = ((int16_t)((int8_t)reg_data[5])) * 128;
 800d24a:	7e7b      	ldrb	r3, [r7, #25]
 800d24c:	b25b      	sxtb	r3, r3
 800d24e:	b29b      	uxth	r3, r3
 800d250:	01db      	lsls	r3, r3, #7
 800d252:	b29b      	uxth	r3, r3
 800d254:	83bb      	strh	r3, [r7, #28]

        /* Raw mag Z axis data */
        raw_mag_data.raw_dataz = (int16_t)(msb_data | reg_data[4]);
 800d256:	7e3b      	ldrb	r3, [r7, #24]
 800d258:	b21a      	sxth	r2, r3
 800d25a:	8bbb      	ldrh	r3, [r7, #28]
 800d25c:	4313      	orrs	r3, r2
 800d25e:	b21b      	sxth	r3, r3
 800d260:	823b      	strh	r3, [r7, #16]

        /* Mag R-HALL data */
        reg_data[6] = BMM150_GET_BITS(reg_data[6], BMM150_DATA_RHALL);
 800d262:	7ebb      	ldrb	r3, [r7, #26]
 800d264:	089b      	lsrs	r3, r3, #2
 800d266:	b2db      	uxtb	r3, r3
 800d268:	76bb      	strb	r3, [r7, #26]
        raw_mag_data.raw_data_r = (uint16_t)(((uint16_t)reg_data[7] << 6) | reg_data[6]);
 800d26a:	7efb      	ldrb	r3, [r7, #27]
 800d26c:	019b      	lsls	r3, r3, #6
 800d26e:	b21a      	sxth	r2, r3
 800d270:	7ebb      	ldrb	r3, [r7, #26]
 800d272:	b21b      	sxth	r3, r3
 800d274:	4313      	orrs	r3, r2
 800d276:	b21b      	sxth	r3, r3
 800d278:	b29b      	uxth	r3, r3
 800d27a:	827b      	strh	r3, [r7, #18]

        /* Compensated Mag X data in int16_t format */
        mag_data->x = compensate_x(raw_mag_data.raw_datax, raw_mag_data.raw_data_r, dev);
 800d27c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d280:	8a79      	ldrh	r1, [r7, #18]
 800d282:	683a      	ldr	r2, [r7, #0]
 800d284:	4618      	mov	r0, r3
 800d286:	f000 fbaf 	bl	800d9e8 <compensate_x>
 800d28a:	eef0 7a40 	vmov.f32	s15, s0
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	edc3 7a00 	vstr	s15, [r3]

        /* Compensated Mag Y data in int16_t format */
        mag_data->y = compensate_y(raw_mag_data.raw_datay, raw_mag_data.raw_data_r, dev);
 800d294:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d298:	8a79      	ldrh	r1, [r7, #18]
 800d29a:	683a      	ldr	r2, [r7, #0]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 fc51 	bl	800db44 <compensate_y>
 800d2a2:	eef0 7a40 	vmov.f32	s15, s0
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	edc3 7a01 	vstr	s15, [r3, #4]

        /* Compensated Mag Z data in int16_t format */
        mag_data->z = compensate_z(raw_mag_data.raw_dataz, raw_mag_data.raw_data_r, dev);
 800d2ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d2b0:	8a79      	ldrh	r1, [r7, #18]
 800d2b2:	683a      	ldr	r2, [r7, #0]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f000 fcf3 	bl	800dca0 <compensate_z>
 800d2ba:	eef0 7a40 	vmov.f32	s15, s0
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    return rslt;
 800d2c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3720      	adds	r7, #32
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmm150_dev *dev)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b085      	sub	sp, #20
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d00f      	beq.n	800d2fe <null_ptr_check+0x2e>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d00b      	beq.n	800d2fe <null_ptr_check+0x2e>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d007      	beq.n	800d2fe <null_ptr_check+0x2e>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	695b      	ldr	r3, [r3, #20]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d003      	beq.n	800d2fe <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d102      	bne.n	800d304 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMM150_E_NULL_PTR;
 800d2fe:	23ff      	movs	r3, #255	; 0xff
 800d300:	73fb      	strb	r3, [r7, #15]
 800d302:	e001      	b.n	800d308 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMM150_OK;
 800d304:	2300      	movs	r3, #0
 800d306:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800d308:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3714      	adds	r7, #20
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr

0800d318 <set_power_control_bit>:

/*!
 * @brief This internal API sets/resets the power control bit of 0x4B register.
 */
static int8_t set_power_control_bit(uint8_t pwrcntrl_bit, struct bmm150_dev *dev)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	4603      	mov	r3, r0
 800d320:	6039      	str	r1, [r7, #0]
 800d322:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data = 0;
 800d324:	2300      	movs	r3, #0
 800d326:	73bb      	strb	r3, [r7, #14]

    /* Power control register 0x4B is read */
    rslt = bmm150_get_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 800d328:	f107 010e 	add.w	r1, r7, #14
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	2201      	movs	r2, #1
 800d330:	204b      	movs	r0, #75	; 0x4b
 800d332:	f7ff fdd2 	bl	800ceda <bmm150_get_regs>
 800d336:	4603      	mov	r3, r0
 800d338:	73fb      	strb	r3, [r7, #15]

    /* Proceed if everything is fine until now */
    if (rslt == BMM150_OK)
 800d33a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d11e      	bne.n	800d380 <set_power_control_bit+0x68>
    {
        /* Sets the value of power control bit */
        reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_PWR_CNTRL, pwrcntrl_bit);
 800d342:	7bbb      	ldrb	r3, [r7, #14]
 800d344:	b25b      	sxtb	r3, r3
 800d346:	f023 0301 	bic.w	r3, r3, #1
 800d34a:	b25a      	sxtb	r2, r3
 800d34c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d350:	f003 0301 	and.w	r3, r3, #1
 800d354:	b25b      	sxtb	r3, r3
 800d356:	4313      	orrs	r3, r2
 800d358:	b25b      	sxtb	r3, r3
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 800d35e:	f107 010e 	add.w	r1, r7, #14
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	2201      	movs	r2, #1
 800d366:	204b      	movs	r0, #75	; 0x4b
 800d368:	f7ff fd8b 	bl	800ce82 <bmm150_set_regs>
 800d36c:	4603      	mov	r3, r0
 800d36e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 800d370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d103      	bne.n	800d380 <set_power_control_bit+0x68>
        {
            /* Store the power control bit
             * value in dev structure
             */
            dev->pwr_cntrl_bit = pwrcntrl_bit;
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	79fa      	ldrb	r2, [r7, #7]
 800d37c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        }
    }

    return rslt;
 800d380:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d384:	4618      	mov	r0, r3
 800d386:	3710      	adds	r7, #16
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <read_trim_registers>:
/*!
 * @brief This internal API reads the trim registers of the sensor and stores
 * the trim values in the "trim_data" of device structure.
 */
static int8_t read_trim_registers(struct bmm150_dev *dev)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b088      	sub	sp, #32
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t trim_x1y1[2] = { 0 };
 800d394:	2300      	movs	r3, #0
 800d396:	833b      	strh	r3, [r7, #24]
    uint8_t trim_xyz_data[4] = { 0 };
 800d398:	2300      	movs	r3, #0
 800d39a:	617b      	str	r3, [r7, #20]
    uint8_t trim_xy1xy2[10] = { 0 };
 800d39c:	2300      	movs	r3, #0
 800d39e:	60bb      	str	r3, [r7, #8]
 800d3a0:	f107 030c 	add.w	r3, r7, #12
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	601a      	str	r2, [r3, #0]
 800d3a8:	809a      	strh	r2, [r3, #4]
    uint16_t temp_msb = 0;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	83bb      	strh	r3, [r7, #28]

    /* Trim register value is read */
    rslt = bmm150_get_regs(BMM150_DIG_X1, trim_x1y1, 2, dev);
 800d3ae:	f107 0118 	add.w	r1, r7, #24
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	205d      	movs	r0, #93	; 0x5d
 800d3b8:	f7ff fd8f 	bl	800ceda <bmm150_get_regs>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800d3c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d16e      	bne.n	800d4a6 <read_trim_registers+0x11a>
    {
        rslt = bmm150_get_regs(BMM150_DIG_Z4_LSB, trim_xyz_data, 4, dev);
 800d3c8:	f107 0114 	add.w	r1, r7, #20
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2204      	movs	r2, #4
 800d3d0:	2062      	movs	r0, #98	; 0x62
 800d3d2:	f7ff fd82 	bl	800ceda <bmm150_get_regs>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMM150_OK)
 800d3da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d161      	bne.n	800d4a6 <read_trim_registers+0x11a>
        {
            rslt = bmm150_get_regs(BMM150_DIG_Z2_LSB, trim_xy1xy2, 10, dev);
 800d3e2:	f107 0108 	add.w	r1, r7, #8
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	220a      	movs	r2, #10
 800d3ea:	2068      	movs	r0, #104	; 0x68
 800d3ec:	f7ff fd75 	bl	800ceda <bmm150_get_regs>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMM150_OK)
 800d3f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d154      	bne.n	800d4a6 <read_trim_registers+0x11a>
            {
                /* Trim data which is read is updated
                 * in the device structure
                 */
                dev->trim_data.dig_x1 = (int8_t)trim_x1y1[0];//
 800d3fc:	7e3b      	ldrb	r3, [r7, #24]
 800d3fe:	b25a      	sxtb	r2, r3
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	761a      	strb	r2, [r3, #24]
                dev->trim_data.dig_y1 = (int8_t)trim_x1y1[1];//
 800d404:	7e7b      	ldrb	r3, [r7, #25]
 800d406:	b25a      	sxtb	r2, r3
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	765a      	strb	r2, [r3, #25]
                dev->trim_data.dig_x2 = (int8_t)trim_xyz_data[2];//
 800d40c:	7dbb      	ldrb	r3, [r7, #22]
 800d40e:	b25a      	sxtb	r2, r3
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	769a      	strb	r2, [r3, #26]
                dev->trim_data.dig_y2 = (int8_t)trim_xyz_data[3];//
 800d414:	7dfb      	ldrb	r3, [r7, #23]
 800d416:	b25a      	sxtb	r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	76da      	strb	r2, [r3, #27]
                temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
 800d41c:	7afb      	ldrb	r3, [r7, #11]
 800d41e:	b29b      	uxth	r3, r3
 800d420:	021b      	lsls	r3, r3, #8
 800d422:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);//
 800d424:	7abb      	ldrb	r3, [r7, #10]
 800d426:	b29a      	uxth	r2, r3
 800d428:	8bbb      	ldrh	r3, [r7, #28]
 800d42a:	4313      	orrs	r3, r2
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	839a      	strh	r2, [r3, #28]
                temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
 800d432:	7a7b      	ldrb	r3, [r7, #9]
 800d434:	b29b      	uxth	r3, r3
 800d436:	021b      	lsls	r3, r3, #8
 800d438:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);//
 800d43a:	7a3b      	ldrb	r3, [r7, #8]
 800d43c:	b29a      	uxth	r2, r3
 800d43e:	8bbb      	ldrh	r3, [r7, #28]
 800d440:	4313      	orrs	r3, r2
 800d442:	b29b      	uxth	r3, r3
 800d444:	b21a      	sxth	r2, r3
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	83da      	strh	r2, [r3, #30]
                temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
 800d44a:	7bfb      	ldrb	r3, [r7, #15]
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	021b      	lsls	r3, r3, #8
 800d450:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);//
 800d452:	7bbb      	ldrb	r3, [r7, #14]
 800d454:	b29a      	uxth	r2, r3
 800d456:	8bbb      	ldrh	r3, [r7, #28]
 800d458:	4313      	orrs	r3, r2
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	b21a      	sxth	r2, r3
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	841a      	strh	r2, [r3, #32]
                temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
 800d462:	7d7b      	ldrb	r3, [r7, #21]
 800d464:	b29b      	uxth	r3, r3
 800d466:	021b      	lsls	r3, r3, #8
 800d468:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);//
 800d46a:	7d3b      	ldrb	r3, [r7, #20]
 800d46c:	b29a      	uxth	r2, r3
 800d46e:	8bbb      	ldrh	r3, [r7, #28]
 800d470:	4313      	orrs	r3, r2
 800d472:	b29b      	uxth	r3, r3
 800d474:	b21a      	sxth	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	845a      	strh	r2, [r3, #34]	; 0x22
                dev->trim_data.dig_xy1 = trim_xy1xy2[9];//
 800d47a:	7c7a      	ldrb	r2, [r7, #17]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                dev->trim_data.dig_xy2 = (int8_t)trim_xy1xy2[8];//
 800d482:	7c3b      	ldrb	r3, [r7, #16]
 800d484:	b25a      	sxtb	r2, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
 800d48c:	7b7b      	ldrb	r3, [r7, #13]
 800d48e:	021b      	lsls	r3, r3, #8
 800d490:	b29b      	uxth	r3, r3
 800d492:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800d496:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);//
 800d498:	7b3b      	ldrb	r3, [r7, #12]
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	8bbb      	ldrh	r3, [r7, #28]
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	84da      	strh	r2, [r3, #38]	; 0x26
            }
        }
    }

    return rslt;
 800d4a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3720      	adds	r7, #32
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <write_op_mode>:
/*!
 * @brief This internal API writes the op_mode value in the Opmode bits
 * (bits 1 and 2) of 0x4C register.
 */
static int8_t write_op_mode(uint8_t op_mode, struct bmm150_dev *dev)
{
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b084      	sub	sp, #16
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	6039      	str	r1, [r7, #0]
 800d4bc:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data;

    /* Read the 0x4C register */
    rslt = bmm150_get_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800d4be:	f107 010e 	add.w	r1, r7, #14
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	204c      	movs	r0, #76	; 0x4c
 800d4c8:	f7ff fd07 	bl	800ceda <bmm150_get_regs>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800d4d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d117      	bne.n	800d508 <write_op_mode+0x56>
    {
        /* Set the op_mode value in Opmode bits of 0x4C */
        reg_data = BMM150_SET_BITS(reg_data, BMM150_OP_MODE, op_mode);
 800d4d8:	7bbb      	ldrb	r3, [r7, #14]
 800d4da:	b25b      	sxtb	r3, r3
 800d4dc:	f023 0306 	bic.w	r3, r3, #6
 800d4e0:	b25a      	sxtb	r2, r3
 800d4e2:	79fb      	ldrb	r3, [r7, #7]
 800d4e4:	005b      	lsls	r3, r3, #1
 800d4e6:	b25b      	sxtb	r3, r3
 800d4e8:	f003 0306 	and.w	r3, r3, #6
 800d4ec:	b25b      	sxtb	r3, r3
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	b25b      	sxtb	r3, r3
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800d4f6:	f107 010e 	add.w	r1, r7, #14
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	204c      	movs	r0, #76	; 0x4c
 800d500:	f7ff fcbf 	bl	800ce82 <bmm150_set_regs>
 800d504:	4603      	mov	r3, r0
 800d506:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800d508:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3710      	adds	r7, #16
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <suspend_to_sleep_mode>:
/*!
 * @brief This internal API sets the device from suspend to sleep mode
 * by setting the power control bit to '1' of 0x4B register
 */
static int8_t suspend_to_sleep_mode(struct bmm150_dev *dev)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f7ff fed7 	bl	800d2d0 <null_ptr_check>
 800d522:	4603      	mov	r3, r0
 800d524:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800d526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d112      	bne.n	800d554 <suspend_to_sleep_mode+0x40>
    {
        if (dev->pwr_cntrl_bit == BMM150_POWER_CNTRL_DISABLE)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10d      	bne.n	800d554 <suspend_to_sleep_mode+0x40>
        {
            rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 800d538:	6879      	ldr	r1, [r7, #4]
 800d53a:	2001      	movs	r0, #1
 800d53c:	f7ff feec 	bl	800d318 <set_power_control_bit>
 800d540:	4603      	mov	r3, r0
 800d542:	73fb      	strb	r3, [r7, #15]

            /* Start-up time delay of 3ms */
            dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	695b      	ldr	r3, [r3, #20]
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	6852      	ldr	r2, [r2, #4]
 800d54c:	4611      	mov	r1, r2
 800d54e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d552:	4798      	blx	r3
        }
    }

    return rslt;
 800d554:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3710      	adds	r7, #16
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <set_xy_rep>:

/*!
 * @brief This internal API sets the xy repetition value in the 0x51 register.
 */
static int8_t set_xy_rep(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t rep_xy;

    /* Set the xy repetition */
    rep_xy = settings->xy_rep;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	78db      	ldrb	r3, [r3, #3]
 800d56e:	73bb      	strb	r3, [r7, #14]
    rslt = bmm150_set_regs(BMM150_REG_REP_XY, &rep_xy, 1, dev);
 800d570:	f107 010e 	add.w	r1, r7, #14
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	2201      	movs	r2, #1
 800d578:	2051      	movs	r0, #81	; 0x51
 800d57a:	f7ff fc82 	bl	800ce82 <bmm150_set_regs>
 800d57e:	4603      	mov	r3, r0
 800d580:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800d582:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d586:	4618      	mov	r0, r3
 800d588:	3710      	adds	r7, #16
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}

0800d58e <set_z_rep>:

/*!
 * @brief This internal API sets the z repetition value in the 0x52 register.
 */
static int8_t set_z_rep(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800d58e:	b580      	push	{r7, lr}
 800d590:	b084      	sub	sp, #16
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
 800d596:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t rep_z;

    /* Set the z repetition */
    rep_z = settings->z_rep;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	791b      	ldrb	r3, [r3, #4]
 800d59c:	73bb      	strb	r3, [r7, #14]
    rslt = bmm150_set_regs(BMM150_REG_REP_Z, &rep_z, 1, dev);
 800d59e:	f107 010e 	add.w	r1, r7, #14
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	2052      	movs	r0, #82	; 0x52
 800d5a8:	f7ff fc6b 	bl	800ce82 <bmm150_set_regs>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800d5b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3710      	adds	r7, #16
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <set_odr>:

/*!
 * @brief This internal API is used to set the output data rate of the sensor.
 */
static int8_t set_odr(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Read the 0x4C register */
    rslt = bmm150_get_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800d5c6:	f107 010e 	add.w	r1, r7, #14
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	204c      	movs	r0, #76	; 0x4c
 800d5d0:	f7ff fc83 	bl	800ceda <bmm150_get_regs>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800d5d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d118      	bne.n	800d612 <set_odr+0x56>
    {
        /* Set the ODR value */
        reg_data = BMM150_SET_BITS(reg_data, BMM150_ODR, settings->data_rate);
 800d5e0:	7bbb      	ldrb	r3, [r7, #14]
 800d5e2:	b25b      	sxtb	r3, r3
 800d5e4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800d5e8:	b25a      	sxtb	r2, r3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	789b      	ldrb	r3, [r3, #2]
 800d5ee:	00db      	lsls	r3, r3, #3
 800d5f0:	b25b      	sxtb	r3, r3
 800d5f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d5f6:	b25b      	sxtb	r3, r3
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	b25b      	sxtb	r3, r3
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800d600:	f107 010e 	add.w	r1, r7, #14
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	2201      	movs	r2, #1
 800d608:	204c      	movs	r0, #76	; 0x4c
 800d60a:	f7ff fc3a 	bl	800ce82 <bmm150_set_regs>
 800d60e:	4603      	mov	r3, r0
 800d610:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800d612:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d616:	4618      	mov	r0, r3
 800d618:	3710      	adds	r7, #16
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}

0800d61e <set_odr_xyz_rep>:

/*!
 * @brief This internal API sets the preset mode ODR and repetition settings.
 */
static int8_t set_odr_xyz_rep(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800d61e:	b580      	push	{r7, lr}
 800d620:	b084      	sub	sp, #16
 800d622:	af00      	add	r7, sp, #0
 800d624:	6078      	str	r0, [r7, #4]
 800d626:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Set the ODR */
    rslt = set_odr(settings, dev);
 800d628:	6839      	ldr	r1, [r7, #0]
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7ff ffc6 	bl	800d5bc <set_odr>
 800d630:	4603      	mov	r3, r0
 800d632:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800d634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d10f      	bne.n	800d65c <set_odr_xyz_rep+0x3e>
    {
        /* Set the XY-repetitions number */
        rslt = set_xy_rep(settings, dev);
 800d63c:	6839      	ldr	r1, [r7, #0]
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7ff ff8e 	bl	800d560 <set_xy_rep>
 800d644:	4603      	mov	r3, r0
 800d646:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 800d648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d105      	bne.n	800d65c <set_odr_xyz_rep+0x3e>
        {
            /* Set the Z-repetitions number */
            rslt = set_z_rep(settings, dev);
 800d650:	6839      	ldr	r1, [r7, #0]
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f7ff ff9b 	bl	800d58e <set_z_rep>
 800d658:	4603      	mov	r3, r0
 800d65a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800d65c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3710      	adds	r7, #16
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <set_control_measurement_xyz>:
/*!
 * @brief This internal API is used to enable or disable the magnetic
 * measurement of x,y,z axes based on the value of xyz_axes_control.
 */
static int8_t set_control_measurement_xyz(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmm150_get_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800d672:	f107 010e 	add.w	r1, r7, #14
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	2201      	movs	r2, #1
 800d67a:	204e      	movs	r0, #78	; 0x4e
 800d67c:	f7ff fc2d 	bl	800ceda <bmm150_get_regs>
 800d680:	4603      	mov	r3, r0
 800d682:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800d684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d118      	bne.n	800d6be <set_control_measurement_xyz+0x56>
    {
        /* Set the axes to be enabled/disabled */
        reg_data = BMM150_SET_BITS(reg_data, BMM150_CONTROL_MEASURE, settings->xyz_axes_control);
 800d68c:	7bbb      	ldrb	r3, [r7, #14]
 800d68e:	b25b      	sxtb	r3, r3
 800d690:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800d694:	b25a      	sxtb	r2, r3
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	00db      	lsls	r3, r3, #3
 800d69c:	b25b      	sxtb	r3, r3
 800d69e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d6a2:	b25b      	sxtb	r3, r3
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	b25b      	sxtb	r3, r3
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800d6ac:	f107 010e 	add.w	r1, r7, #14
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	204e      	movs	r0, #78	; 0x4e
 800d6b6:	f7ff fbe4 	bl	800ce82 <bmm150_set_regs>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800d6be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}

0800d6ca <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint16_t sub_settings, uint16_t desired_settings)
{
 800d6ca:	b480      	push	{r7}
 800d6cc:	b085      	sub	sp, #20
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	460a      	mov	r2, r1
 800d6d4:	80fb      	strh	r3, [r7, #6]
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	80bb      	strh	r3, [r7, #4]
    uint8_t settings_changed;

    if (sub_settings & desired_settings)
 800d6da:	88fa      	ldrh	r2, [r7, #6]
 800d6dc:	88bb      	ldrh	r3, [r7, #4]
 800d6de:	4013      	ands	r3, r2
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d002      	beq.n	800d6ec <are_settings_changed+0x22>
    {
        /* User wants to modify this particular settings */
        settings_changed = BMM150_TRUE;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	73fb      	strb	r3, [r7, #15]
 800d6ea:	e001      	b.n	800d6f0 <are_settings_changed+0x26>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = BMM150_FALSE;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3714      	adds	r7, #20
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr

0800d6fe <mode_settings>:
/*!
 * @brief This API sets the ODR , measurement axes control ,
 * repetition values of xy,z.
 */
static int8_t mode_settings(uint16_t desired_settings, const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b086      	sub	sp, #24
 800d702:	af00      	add	r7, sp, #0
 800d704:	4603      	mov	r3, r0
 800d706:	60b9      	str	r1, [r7, #8]
 800d708:	607a      	str	r2, [r7, #4]
 800d70a:	81fb      	strh	r3, [r7, #14]
    int8_t rslt = BMM150_E_INVALID_CONFIG;
 800d70c:	23fd      	movs	r3, #253	; 0xfd
 800d70e:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BMM150_SEL_DATA_RATE)
 800d710:	89fb      	ldrh	r3, [r7, #14]
 800d712:	f003 0301 	and.w	r3, r3, #1
 800d716:	2b00      	cmp	r3, #0
 800d718:	d005      	beq.n	800d726 <mode_settings+0x28>
    {
        /* Sets the ODR */
        rslt = set_odr(settings, dev);
 800d71a:	6879      	ldr	r1, [r7, #4]
 800d71c:	68b8      	ldr	r0, [r7, #8]
 800d71e:	f7ff ff4d 	bl	800d5bc <set_odr>
 800d722:	4603      	mov	r3, r0
 800d724:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_CONTROL_MEASURE)
 800d726:	89fb      	ldrh	r3, [r7, #14]
 800d728:	f003 0302 	and.w	r3, r3, #2
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d005      	beq.n	800d73c <mode_settings+0x3e>
    {
        /* Enables/Disables the control measurement axes */
        rslt = set_control_measurement_xyz(settings, dev);
 800d730:	6879      	ldr	r1, [r7, #4]
 800d732:	68b8      	ldr	r0, [r7, #8]
 800d734:	f7ff ff98 	bl	800d668 <set_control_measurement_xyz>
 800d738:	4603      	mov	r3, r0
 800d73a:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_XY_REP)
 800d73c:	89fb      	ldrh	r3, [r7, #14]
 800d73e:	f003 0304 	and.w	r3, r3, #4
 800d742:	2b00      	cmp	r3, #0
 800d744:	d005      	beq.n	800d752 <mode_settings+0x54>
    {
        /* Sets the XY repetition */
        rslt = set_xy_rep(settings, dev);
 800d746:	6879      	ldr	r1, [r7, #4]
 800d748:	68b8      	ldr	r0, [r7, #8]
 800d74a:	f7ff ff09 	bl	800d560 <set_xy_rep>
 800d74e:	4603      	mov	r3, r0
 800d750:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_Z_REP)
 800d752:	89fb      	ldrh	r3, [r7, #14]
 800d754:	f003 0308 	and.w	r3, r3, #8
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d005      	beq.n	800d768 <mode_settings+0x6a>
    {
        /* Sets the Z repetition */
        rslt = set_z_rep(settings, dev);
 800d75c:	6879      	ldr	r1, [r7, #4]
 800d75e:	68b8      	ldr	r0, [r7, #8]
 800d760:	f7ff ff15 	bl	800d58e <set_z_rep>
 800d764:	4603      	mov	r3, r0
 800d766:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800d768:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3718      	adds	r7, #24
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <interrupt_pin_settings>:
 * polarity , latch settings for the interrupt pins.
 */
static int8_t interrupt_pin_settings(uint16_t desired_settings,
                                     const struct bmm150_settings *settings,
                                     struct bmm150_dev *dev)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b088      	sub	sp, #32
 800d778:	af00      	add	r7, sp, #0
 800d77a:	4603      	mov	r3, r0
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	607a      	str	r2, [r7, #4]
 800d780:	81fb      	strh	r3, [r7, #14]
    int8_t rslt;
    uint8_t reg_data;
    struct bmm150_int_ctrl_settings int_settings;

    rslt = bmm150_get_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800d782:	f107 011e 	add.w	r1, r7, #30
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2201      	movs	r2, #1
 800d78a:	204e      	movs	r0, #78	; 0x4e
 800d78c:	f7ff fba5 	bl	800ceda <bmm150_get_regs>
 800d790:	4603      	mov	r3, r0
 800d792:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800d794:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d173      	bne.n	800d884 <interrupt_pin_settings+0x110>
    {
        int_settings = settings->int_settings;
 800d79c:	68ba      	ldr	r2, [r7, #8]
 800d79e:	f107 0310 	add.w	r3, r7, #16
 800d7a2:	3206      	adds	r2, #6
 800d7a4:	6810      	ldr	r0, [r2, #0]
 800d7a6:	6851      	ldr	r1, [r2, #4]
 800d7a8:	c303      	stmia	r3!, {r0, r1}
 800d7aa:	8911      	ldrh	r1, [r2, #8]
 800d7ac:	7a92      	ldrb	r2, [r2, #10]
 800d7ae:	8019      	strh	r1, [r3, #0]
 800d7b0:	709a      	strb	r2, [r3, #2]
        if (desired_settings & BMM150_SEL_DRDY_PIN_EN)
 800d7b2:	89fb      	ldrh	r3, [r7, #14]
 800d7b4:	f003 0310 	and.w	r3, r3, #16
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00b      	beq.n	800d7d4 <interrupt_pin_settings+0x60>
        {
            /* Enables the Data ready interrupt and
             * maps it to the DRDY pin of the sensor
             */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_DRDY_EN, int_settings.drdy_pin_en);
 800d7bc:	7fbb      	ldrb	r3, [r7, #30]
 800d7be:	b25b      	sxtb	r3, r3
 800d7c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7c4:	b25a      	sxtb	r2, r3
 800d7c6:	7c3b      	ldrb	r3, [r7, #16]
 800d7c8:	01db      	lsls	r3, r3, #7
 800d7ca:	b25b      	sxtb	r3, r3
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	b25b      	sxtb	r3, r3
 800d7d0:	b2db      	uxtb	r3, r3
 800d7d2:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_INT_PIN_EN)
 800d7d4:	89fb      	ldrh	r3, [r7, #14]
 800d7d6:	f003 0320 	and.w	r3, r3, #32
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d00e      	beq.n	800d7fc <interrupt_pin_settings+0x88>
        {
            /* Sets interrupt pin enable */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_INT_PIN_EN, int_settings.int_pin_en);
 800d7de:	7fbb      	ldrb	r3, [r7, #30]
 800d7e0:	b25b      	sxtb	r3, r3
 800d7e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7e6:	b25a      	sxtb	r2, r3
 800d7e8:	7c7b      	ldrb	r3, [r7, #17]
 800d7ea:	019b      	lsls	r3, r3, #6
 800d7ec:	b25b      	sxtb	r3, r3
 800d7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7f2:	b25b      	sxtb	r3, r3
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	b25b      	sxtb	r3, r3
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_DRDY_POLARITY)
 800d7fc:	89fb      	ldrh	r3, [r7, #14]
 800d7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d802:	2b00      	cmp	r3, #0
 800d804:	d00e      	beq.n	800d824 <interrupt_pin_settings+0xb0>
        {
            /* Sets Data ready pin's polarity */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_DRDY_POLARITY, int_settings.drdy_polarity);
 800d806:	7fbb      	ldrb	r3, [r7, #30]
 800d808:	b25b      	sxtb	r3, r3
 800d80a:	f023 0304 	bic.w	r3, r3, #4
 800d80e:	b25a      	sxtb	r2, r3
 800d810:	7cbb      	ldrb	r3, [r7, #18]
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	b25b      	sxtb	r3, r3
 800d816:	f003 0304 	and.w	r3, r3, #4
 800d81a:	b25b      	sxtb	r3, r3
 800d81c:	4313      	orrs	r3, r2
 800d81e:	b25b      	sxtb	r3, r3
 800d820:	b2db      	uxtb	r3, r3
 800d822:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_INT_LATCH)
 800d824:	89fb      	ldrh	r3, [r7, #14]
 800d826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00e      	beq.n	800d84c <interrupt_pin_settings+0xd8>
        {
            /* Sets Interrupt in latched or non-latched mode */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_INT_LATCH, int_settings.int_latch);
 800d82e:	7fbb      	ldrb	r3, [r7, #30]
 800d830:	b25b      	sxtb	r3, r3
 800d832:	f023 0302 	bic.w	r3, r3, #2
 800d836:	b25a      	sxtb	r2, r3
 800d838:	7cfb      	ldrb	r3, [r7, #19]
 800d83a:	005b      	lsls	r3, r3, #1
 800d83c:	b25b      	sxtb	r3, r3
 800d83e:	f003 0302 	and.w	r3, r3, #2
 800d842:	b25b      	sxtb	r3, r3
 800d844:	4313      	orrs	r3, r2
 800d846:	b25b      	sxtb	r3, r3
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_INT_POLARITY)
 800d84c:	89fb      	ldrh	r3, [r7, #14]
 800d84e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00d      	beq.n	800d872 <interrupt_pin_settings+0xfe>
        {
            /* Sets Interrupt pin's polarity */
            reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_INT_POLARITY, int_settings.int_polarity);
 800d856:	7fbb      	ldrb	r3, [r7, #30]
 800d858:	b25b      	sxtb	r3, r3
 800d85a:	f023 0301 	bic.w	r3, r3, #1
 800d85e:	b25a      	sxtb	r2, r3
 800d860:	7d3b      	ldrb	r3, [r7, #20]
 800d862:	b25b      	sxtb	r3, r3
 800d864:	f003 0301 	and.w	r3, r3, #1
 800d868:	b25b      	sxtb	r3, r3
 800d86a:	4313      	orrs	r3, r2
 800d86c:	b25b      	sxtb	r3, r3
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	77bb      	strb	r3, [r7, #30]
        }

        /* Set the interrupt configurations in the 0x4E register */
        rslt = bmm150_set_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800d872:	f107 011e 	add.w	r1, r7, #30
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2201      	movs	r2, #1
 800d87a:	204e      	movs	r0, #78	; 0x4e
 800d87c:	f7ff fb01 	bl	800ce82 <bmm150_set_regs>
 800d880:	4603      	mov	r3, r0
 800d882:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800d884:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3720      	adds	r7, #32
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <interrupt_config>:
 * threshold values set by the user in the High threshold (0x50) and
 * Low threshold (0x4F) registers.
 */
static int8_t interrupt_config(uint16_t desired_settings, const struct bmm150_settings *settings,
                               struct bmm150_dev *dev)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b088      	sub	sp, #32
 800d894:	af00      	add	r7, sp, #0
 800d896:	4603      	mov	r3, r0
 800d898:	60b9      	str	r1, [r7, #8]
 800d89a:	607a      	str	r2, [r7, #4]
 800d89c:	81fb      	strh	r3, [r7, #14]
    int8_t rslt;
    uint8_t reg_data;
    struct bmm150_int_ctrl_settings int_settings;

    rslt = bmm150_get_regs(BMM150_REG_INT_CONFIG, &reg_data, 1, dev);
 800d89e:	f107 011e 	add.w	r1, r7, #30
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	204d      	movs	r0, #77	; 0x4d
 800d8a8:	f7ff fb17 	bl	800ceda <bmm150_get_regs>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800d8b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d15f      	bne.n	800d978 <interrupt_config+0xe8>
    {
        int_settings = settings->int_settings;
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	f107 0310 	add.w	r3, r7, #16
 800d8be:	3206      	adds	r2, #6
 800d8c0:	6810      	ldr	r0, [r2, #0]
 800d8c2:	6851      	ldr	r1, [r2, #4]
 800d8c4:	c303      	stmia	r3!, {r0, r1}
 800d8c6:	8911      	ldrh	r1, [r2, #8]
 800d8c8:	7a92      	ldrb	r2, [r2, #10]
 800d8ca:	8019      	strh	r1, [r3, #0]
 800d8cc:	709a      	strb	r2, [r3, #2]
        if (desired_settings & BMM150_SEL_DATA_OVERRUN_INT)
 800d8ce:	89fb      	ldrh	r3, [r7, #14]
 800d8d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00b      	beq.n	800d8f0 <interrupt_config+0x60>
        {
            /* Sets Data overrun interrupt */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_DATA_OVERRUN_INT, int_settings.data_overrun_en);
 800d8d8:	7fbb      	ldrb	r3, [r7, #30]
 800d8da:	b25b      	sxtb	r3, r3
 800d8dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8e0:	b25a      	sxtb	r2, r3
 800d8e2:	7d7b      	ldrb	r3, [r7, #21]
 800d8e4:	01db      	lsls	r3, r3, #7
 800d8e6:	b25b      	sxtb	r3, r3
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	b25b      	sxtb	r3, r3
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_OVERFLOW_INT)
 800d8f0:	89fb      	ldrh	r3, [r7, #14]
 800d8f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d00e      	beq.n	800d918 <interrupt_config+0x88>
        {
            /* Sets Data overflow interrupt */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_OVERFLOW_INT, int_settings.overflow_int_en);
 800d8fa:	7fbb      	ldrb	r3, [r7, #30]
 800d8fc:	b25b      	sxtb	r3, r3
 800d8fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d902:	b25a      	sxtb	r2, r3
 800d904:	7dbb      	ldrb	r3, [r7, #22]
 800d906:	019b      	lsls	r3, r3, #6
 800d908:	b25b      	sxtb	r3, r3
 800d90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d90e:	b25b      	sxtb	r3, r3
 800d910:	4313      	orrs	r3, r2
 800d912:	b25b      	sxtb	r3, r3
 800d914:	b2db      	uxtb	r3, r3
 800d916:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_HIGH_THRESHOLD_INT)
 800d918:	89fb      	ldrh	r3, [r7, #14]
 800d91a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d00e      	beq.n	800d940 <interrupt_config+0xb0>
        {
            /* Sets high threshold interrupt */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_HIGH_THRESHOLD_INT, int_settings.high_int_en);
 800d922:	7fbb      	ldrb	r3, [r7, #30]
 800d924:	b25b      	sxtb	r3, r3
 800d926:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800d92a:	b25a      	sxtb	r2, r3
 800d92c:	7dfb      	ldrb	r3, [r7, #23]
 800d92e:	00db      	lsls	r3, r3, #3
 800d930:	b25b      	sxtb	r3, r3
 800d932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d936:	b25b      	sxtb	r3, r3
 800d938:	4313      	orrs	r3, r2
 800d93a:	b25b      	sxtb	r3, r3
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_LOW_THRESHOLD_INT)
 800d940:	89fb      	ldrh	r3, [r7, #14]
 800d942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00d      	beq.n	800d966 <interrupt_config+0xd6>
        {
            /* Sets low threshold interrupt */
            reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_LOW_THRESHOLD_INT, int_settings.low_int_en);
 800d94a:	7fbb      	ldrb	r3, [r7, #30]
 800d94c:	b25b      	sxtb	r3, r3
 800d94e:	f023 0307 	bic.w	r3, r3, #7
 800d952:	b25a      	sxtb	r2, r3
 800d954:	7e3b      	ldrb	r3, [r7, #24]
 800d956:	b25b      	sxtb	r3, r3
 800d958:	f003 0307 	and.w	r3, r3, #7
 800d95c:	b25b      	sxtb	r3, r3
 800d95e:	4313      	orrs	r3, r2
 800d960:	b25b      	sxtb	r3, r3
 800d962:	b2db      	uxtb	r3, r3
 800d964:	77bb      	strb	r3, [r7, #30]
        }

        /* Set the interrupt configurations in the 0x4D register */
        rslt = bmm150_set_regs(BMM150_REG_INT_CONFIG, &reg_data, 1, dev);
 800d966:	f107 011e 	add.w	r1, r7, #30
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2201      	movs	r2, #1
 800d96e:	204d      	movs	r0, #77	; 0x4d
 800d970:	f7ff fa87 	bl	800ce82 <bmm150_set_regs>
 800d974:	4603      	mov	r3, r0
 800d976:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800d978:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3720      	adds	r7, #32
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}

0800d984 <interrupt_threshold_settings>:
 * as a reference to generate the high/low threshold interrupt.
 */
static int8_t interrupt_threshold_settings(uint16_t desired_settings,
                                           const struct bmm150_settings *settings,
                                           struct bmm150_dev *dev)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b086      	sub	sp, #24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	4603      	mov	r3, r0
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]
 800d990:	81fb      	strh	r3, [r7, #14]
    int8_t rslt = BMM150_E_INVALID_CONFIG;
 800d992:	23fd      	movs	r3, #253	; 0xfd
 800d994:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_data;

    if (desired_settings & BMM150_SEL_LOW_THRESHOLD_SETTING)
 800d996:	89fb      	ldrh	r3, [r7, #14]
 800d998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d00b      	beq.n	800d9b8 <interrupt_threshold_settings+0x34>
    {
        /* Sets the Low threshold value to trigger interrupt */
        reg_data = settings->int_settings.low_threshold;
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	7bdb      	ldrb	r3, [r3, #15]
 800d9a4:	75bb      	strb	r3, [r7, #22]
        rslt = bmm150_set_regs(BMM150_REG_LOW_THRESHOLD, &reg_data, 1, dev);
 800d9a6:	f107 0116 	add.w	r1, r7, #22
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	204f      	movs	r0, #79	; 0x4f
 800d9b0:	f7ff fa67 	bl	800ce82 <bmm150_set_regs>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_HIGH_THRESHOLD_SETTING)
 800d9b8:	89fb      	ldrh	r3, [r7, #14]
 800d9ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00b      	beq.n	800d9da <interrupt_threshold_settings+0x56>
    {
        /* Sets the High threshold value to trigger interrupt */
        reg_data = settings->int_settings.high_threshold;
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	7c1b      	ldrb	r3, [r3, #16]
 800d9c6:	75bb      	strb	r3, [r7, #22]
        rslt = bmm150_set_regs(BMM150_REG_HIGH_THRESHOLD, &reg_data, 1, dev);
 800d9c8:	f107 0116 	add.w	r1, r7, #22
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	2050      	movs	r0, #80	; 0x50
 800d9d2:	f7ff fa56 	bl	800ce82 <bmm150_set_regs>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800d9da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3718      	adds	r7, #24
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
	...

0800d9e8 <compensate_x>:
/*!
 * @brief This internal API is used to obtain the compensated
 * magnetometer x axis data(micro-tesla) in float.
 */
static float compensate_x(int16_t mag_data_x, uint16_t data_rhall, const struct bmm150_dev *dev)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b089      	sub	sp, #36	; 0x24
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	603a      	str	r2, [r7, #0]
 800d9f2:	80fb      	strh	r3, [r7, #6]
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	80bb      	strh	r3, [r7, #4]
    float retval = 0;
 800d9f8:	f04f 0300 	mov.w	r3, #0
 800d9fc:	61fb      	str	r3, [r7, #28]
    float process_comp_x2;
    float process_comp_x3;
    float process_comp_x4;

    /* Overflow condition check */
    if ((mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP) && (data_rhall != 0) && (dev->trim_data.dig_xyz1 != 0))
 800d9fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da02:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800da06:	f000 8086 	beq.w	800db16 <compensate_x+0x12e>
 800da0a:	88bb      	ldrh	r3, [r7, #4]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	f000 8082 	beq.w	800db16 <compensate_x+0x12e>
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800da16:	2b00      	cmp	r3, #0
 800da18:	d07d      	beq.n	800db16 <compensate_x+0x12e>
    {
        /* Processing compensation equations */
        process_comp_x0 = (((float)dev->trim_data.dig_xyz1) * 16384.0f / data_rhall);
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800da1e:	ee07 3a90 	vmov	s15, r3
 800da22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da26:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800db30 <compensate_x+0x148>
 800da2a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800da2e:	88bb      	ldrh	r3, [r7, #4]
 800da30:	ee07 3a90 	vmov	s15, r3
 800da34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800da38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da3c:	edc7 7a06 	vstr	s15, [r7, #24]
        retval = (process_comp_x0 - 16384.0f);
 800da40:	edd7 7a06 	vldr	s15, [r7, #24]
 800da44:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800db30 <compensate_x+0x148>
 800da48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da4c:	edc7 7a07 	vstr	s15, [r7, #28]
        process_comp_x1 = ((float)dev->trim_data.dig_xy2) * (retval * retval / 268435456.0f);
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 800da56:	ee07 3a90 	vmov	s15, r3
 800da5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800da5e:	edd7 7a07 	vldr	s15, [r7, #28]
 800da62:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800da66:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800db34 <compensate_x+0x14c>
 800da6a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800da6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da72:	edc7 7a05 	vstr	s15, [r7, #20]
        process_comp_x2 = process_comp_x1 + retval * ((float)dev->trim_data.dig_xy1) / 16384.0f;
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800da7c:	ee07 3a90 	vmov	s15, r3
 800da80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800da84:	edd7 7a07 	vldr	s15, [r7, #28]
 800da88:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da8c:	eddf 6a28 	vldr	s13, [pc, #160]	; 800db30 <compensate_x+0x148>
 800da90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da94:	ed97 7a05 	vldr	s14, [r7, #20]
 800da98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da9c:	edc7 7a04 	vstr	s15, [r7, #16]
        process_comp_x3 = ((float)dev->trim_data.dig_x2) + 160.0f;
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	f993 301a 	ldrsb.w	r3, [r3, #26]
 800daa6:	ee07 3a90 	vmov	s15, r3
 800daaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800daae:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800db38 <compensate_x+0x150>
 800dab2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dab6:	edc7 7a03 	vstr	s15, [r7, #12]
        process_comp_x4 = mag_data_x * ((process_comp_x2 + 256.0f) * process_comp_x3);
 800daba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dabe:	ee07 3a90 	vmov	s15, r3
 800dac2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dac6:	edd7 7a04 	vldr	s15, [r7, #16]
 800daca:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800db3c <compensate_x+0x154>
 800dace:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800dad2:	edd7 7a03 	vldr	s15, [r7, #12]
 800dad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dada:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dade:	edc7 7a02 	vstr	s15, [r7, #8]
        retval = ((process_comp_x4 / 8192.0f) + (((float)dev->trim_data.dig_x1) * 8.0f)) / 16.0f;
 800dae2:	edd7 7a02 	vldr	s15, [r7, #8]
 800dae6:	eddf 6a16 	vldr	s13, [pc, #88]	; 800db40 <compensate_x+0x158>
 800daea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800daf4:	ee07 3a90 	vmov	s15, r3
 800daf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dafc:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800db00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800db04:	ee37 7a27 	vadd.f32	s14, s14, s15
 800db08:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800db0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800db10:	edc7 7a07 	vstr	s15, [r7, #28]
 800db14:	e002      	b.n	800db1c <compensate_x+0x134>
    }
    else
    {
        /* Overflow, set output to 0.0f */
        retval = BMM150_OVERFLOW_OUTPUT_FLOAT;
 800db16:	f04f 0300 	mov.w	r3, #0
 800db1a:	61fb      	str	r3, [r7, #28]
    }

    return retval;
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	ee07 3a90 	vmov	s15, r3
}
 800db22:	eeb0 0a67 	vmov.f32	s0, s15
 800db26:	3724      	adds	r7, #36	; 0x24
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr
 800db30:	46800000 	.word	0x46800000
 800db34:	4d800000 	.word	0x4d800000
 800db38:	43200000 	.word	0x43200000
 800db3c:	43800000 	.word	0x43800000
 800db40:	46000000 	.word	0x46000000

0800db44 <compensate_y>:
/*!
 * @brief This internal API is used to obtain the compensated
 * magnetometer y axis data(micro-tesla) in float.
 */
static float compensate_y(int16_t mag_data_y, uint16_t data_rhall, const struct bmm150_dev *dev)
{
 800db44:	b480      	push	{r7}
 800db46:	b089      	sub	sp, #36	; 0x24
 800db48:	af00      	add	r7, sp, #0
 800db4a:	4603      	mov	r3, r0
 800db4c:	603a      	str	r2, [r7, #0]
 800db4e:	80fb      	strh	r3, [r7, #6]
 800db50:	460b      	mov	r3, r1
 800db52:	80bb      	strh	r3, [r7, #4]
    float retval = 0;
 800db54:	f04f 0300 	mov.w	r3, #0
 800db58:	61fb      	str	r3, [r7, #28]
    float process_comp_y2;
    float process_comp_y3;
    float process_comp_y4;

    /* Overflow condition check */
    if ((mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP) && (data_rhall != 0) && (dev->trim_data.dig_xyz1 != 0))
 800db5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db5e:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800db62:	f000 8086 	beq.w	800dc72 <compensate_y+0x12e>
 800db66:	88bb      	ldrh	r3, [r7, #4]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f000 8082 	beq.w	800dc72 <compensate_y+0x12e>
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800db72:	2b00      	cmp	r3, #0
 800db74:	d07d      	beq.n	800dc72 <compensate_y+0x12e>
    {
        /* Processing compensation equations */
        process_comp_y0 = ((float)dev->trim_data.dig_xyz1) * 16384.0f / data_rhall;
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800db7a:	ee07 3a90 	vmov	s15, r3
 800db7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db82:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800dc8c <compensate_y+0x148>
 800db86:	ee67 6a87 	vmul.f32	s13, s15, s14
 800db8a:	88bb      	ldrh	r3, [r7, #4]
 800db8c:	ee07 3a90 	vmov	s15, r3
 800db90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800db94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db98:	edc7 7a06 	vstr	s15, [r7, #24]
        retval = process_comp_y0 - 16384.0f;
 800db9c:	edd7 7a06 	vldr	s15, [r7, #24]
 800dba0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800dc8c <compensate_y+0x148>
 800dba4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dba8:	edc7 7a07 	vstr	s15, [r7, #28]
        process_comp_y1 = ((float)dev->trim_data.dig_xy2) * (retval * retval / 268435456.0f);
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 800dbb2:	ee07 3a90 	vmov	s15, r3
 800dbb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dbba:	edd7 7a07 	vldr	s15, [r7, #28]
 800dbbe:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800dbc2:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800dc90 <compensate_y+0x14c>
 800dbc6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800dbca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbce:	edc7 7a05 	vstr	s15, [r7, #20]
        process_comp_y2 = process_comp_y1 + retval * ((float)dev->trim_data.dig_xy1) / 16384.0f;
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dbd8:	ee07 3a90 	vmov	s15, r3
 800dbdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dbe0:	edd7 7a07 	vldr	s15, [r7, #28]
 800dbe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbe8:	eddf 6a28 	vldr	s13, [pc, #160]	; 800dc8c <compensate_y+0x148>
 800dbec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dbf0:	ed97 7a05 	vldr	s14, [r7, #20]
 800dbf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbf8:	edc7 7a04 	vstr	s15, [r7, #16]
        process_comp_y3 = ((float)dev->trim_data.dig_y2) + 160.0f;
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	f993 301b 	ldrsb.w	r3, [r3, #27]
 800dc02:	ee07 3a90 	vmov	s15, r3
 800dc06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc0a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800dc94 <compensate_y+0x150>
 800dc0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc12:	edc7 7a03 	vstr	s15, [r7, #12]
        process_comp_y4 = mag_data_y * (((process_comp_y2) + 256.0f) * process_comp_y3);
 800dc16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc1a:	ee07 3a90 	vmov	s15, r3
 800dc1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dc22:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc26:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800dc98 <compensate_y+0x154>
 800dc2a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800dc2e:	edd7 7a03 	vldr	s15, [r7, #12]
 800dc32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc3a:	edc7 7a02 	vstr	s15, [r7, #8]
        retval = ((process_comp_y4 / 8192.0f) + (((float)dev->trim_data.dig_y1) * 8.0f)) / 16.0f;
 800dc3e:	edd7 7a02 	vldr	s15, [r7, #8]
 800dc42:	eddf 6a16 	vldr	s13, [pc, #88]	; 800dc9c <compensate_y+0x158>
 800dc46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	f993 3019 	ldrsb.w	r3, [r3, #25]
 800dc50:	ee07 3a90 	vmov	s15, r3
 800dc54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc58:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800dc5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dc60:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc64:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800dc68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dc6c:	edc7 7a07 	vstr	s15, [r7, #28]
 800dc70:	e002      	b.n	800dc78 <compensate_y+0x134>
    }
    else
    {
        /* Overflow, set output to 0.0f */
        retval = BMM150_OVERFLOW_OUTPUT_FLOAT;
 800dc72:	f04f 0300 	mov.w	r3, #0
 800dc76:	61fb      	str	r3, [r7, #28]
    }

    return retval;
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	ee07 3a90 	vmov	s15, r3
}
 800dc7e:	eeb0 0a67 	vmov.f32	s0, s15
 800dc82:	3724      	adds	r7, #36	; 0x24
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	46800000 	.word	0x46800000
 800dc90:	4d800000 	.word	0x4d800000
 800dc94:	43200000 	.word	0x43200000
 800dc98:	43800000 	.word	0x43800000
 800dc9c:	46000000 	.word	0x46000000

0800dca0 <compensate_z>:
/*!
 * @brief This internal API is used to obtain the compensated
 * magnetometer z axis data(micro-tesla) in float.
 */
static float compensate_z(int16_t mag_data_z, uint16_t data_rhall, const struct bmm150_dev *dev)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b08b      	sub	sp, #44	; 0x2c
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	4603      	mov	r3, r0
 800dca8:	603a      	str	r2, [r7, #0]
 800dcaa:	80fb      	strh	r3, [r7, #6]
 800dcac:	460b      	mov	r3, r1
 800dcae:	80bb      	strh	r3, [r7, #4]
    float retval = 0;
 800dcb0:	f04f 0300 	mov.w	r3, #0
 800dcb4:	627b      	str	r3, [r7, #36]	; 0x24
    float process_comp_z3;
    float process_comp_z4;
    float process_comp_z5;

    /* Overflow condition check */
    if ((mag_data_z != BMM150_OVERFLOW_ADCVAL_ZAXIS_HALL) && (dev->trim_data.dig_z2 != 0) &&
 800dcb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dcba:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 800dcbe:	d079      	beq.n	800ddb4 <compensate_z+0x114>
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d074      	beq.n	800ddb4 <compensate_z+0x114>
        (dev->trim_data.dig_z1 != 0) && (dev->trim_data.dig_xyz1 != 0) && (data_rhall != 0))
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	8b9b      	ldrh	r3, [r3, #28]
    if ((mag_data_z != BMM150_OVERFLOW_ADCVAL_ZAXIS_HALL) && (dev->trim_data.dig_z2 != 0) &&
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d070      	beq.n	800ddb4 <compensate_z+0x114>
        (dev->trim_data.dig_z1 != 0) && (dev->trim_data.dig_xyz1 != 0) && (data_rhall != 0))
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d06c      	beq.n	800ddb4 <compensate_z+0x114>
 800dcda:	88bb      	ldrh	r3, [r7, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d069      	beq.n	800ddb4 <compensate_z+0x114>
    {
        /* Processing compensation equations */
        process_comp_z0 = ((float)mag_data_z) - ((float)dev->trim_data.dig_z4);
 800dce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dce4:	ee07 3a90 	vmov	s15, r3
 800dce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800dcf2:	ee07 3a90 	vmov	s15, r3
 800dcf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dcfe:	edc7 7a08 	vstr	s15, [r7, #32]
        process_comp_z1 = ((float)data_rhall) - ((float)dev->trim_data.dig_xyz1);
 800dd02:	88bb      	ldrh	r3, [r7, #4]
 800dd04:	ee07 3a90 	vmov	s15, r3
 800dd08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dd10:	ee07 3a90 	vmov	s15, r3
 800dd14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd1c:	edc7 7a07 	vstr	s15, [r7, #28]
        process_comp_z2 = (((float)dev->trim_data.dig_z3) * process_comp_z1);
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800dd26:	ee07 3a90 	vmov	s15, r3
 800dd2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd2e:	ed97 7a07 	vldr	s14, [r7, #28]
 800dd32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd36:	edc7 7a06 	vstr	s15, [r7, #24]
        process_comp_z3 = ((float)dev->trim_data.dig_z1) * ((float)data_rhall) / 32768.0f;
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	8b9b      	ldrh	r3, [r3, #28]
 800dd3e:	ee07 3a90 	vmov	s15, r3
 800dd42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dd46:	88bb      	ldrh	r3, [r7, #4]
 800dd48:	ee07 3a90 	vmov	s15, r3
 800dd4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd50:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd54:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800ddd0 <compensate_z+0x130>
 800dd58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dd5c:	edc7 7a05 	vstr	s15, [r7, #20]
        process_comp_z4 = ((float)dev->trim_data.dig_z2) + process_comp_z3;
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800dd66:	ee07 3a90 	vmov	s15, r3
 800dd6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd6e:	ed97 7a05 	vldr	s14, [r7, #20]
 800dd72:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd76:	edc7 7a04 	vstr	s15, [r7, #16]
        process_comp_z5 = (process_comp_z0 * 131072.0f) - process_comp_z2;
 800dd7a:	edd7 7a08 	vldr	s15, [r7, #32]
 800dd7e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800ddd4 <compensate_z+0x134>
 800dd82:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dd86:	edd7 7a06 	vldr	s15, [r7, #24]
 800dd8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd8e:	edc7 7a03 	vstr	s15, [r7, #12]
        retval = (process_comp_z5 / ((process_comp_z4) * 4.0f)) / 16.0f;
 800dd92:	edd7 7a04 	vldr	s15, [r7, #16]
 800dd96:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800dd9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd9e:	edd7 6a03 	vldr	s13, [r7, #12]
 800dda2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dda6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800ddaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ddae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800ddb2:	e002      	b.n	800ddba <compensate_z+0x11a>
    }
    else
    {
        /* Overflow, set output to 0.0f */
        retval = BMM150_OVERFLOW_OUTPUT_FLOAT;
 800ddb4:	f04f 0300 	mov.w	r3, #0
 800ddb8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return retval;
 800ddba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddbc:	ee07 3a90 	vmov	s15, r3
}
 800ddc0:	eeb0 0a67 	vmov.f32	s0, s15
 800ddc4:	372c      	adds	r7, #44	; 0x2c
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr
 800ddce:	bf00      	nop
 800ddd0:	47000000 	.word	0x47000000
 800ddd4:	48000000 	.word	0x48000000

0800ddd8 <bmm150_user_i2c_init>:
/*!                User interface functions                                   */

/*!
 * @brief Function for initialization of I2C bus.
 */
int8_t bmm150_user_i2c_init(void) {
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	af00      	add	r7, sp, #0
    /* Implement I2C bus initialization according to the target machine. */

    if (HAL_I2C_IsDeviceReady(&hi2c1, BMM150_DEFAULT_I2C_ADDRESS << 1, 2, 2000) == HAL_OK) {
 800dddc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dde0:	2202      	movs	r2, #2
 800dde2:	2120      	movs	r1, #32
 800dde4:	4805      	ldr	r0, [pc, #20]	; (800ddfc <bmm150_user_i2c_init+0x24>)
 800dde6:	f7f9 f973 	bl	80070d0 <HAL_I2C_IsDeviceReady>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <bmm150_user_i2c_init+0x1c>
//        printf("BMM150 is ready\n");
        return 0;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	e000      	b.n	800ddf6 <bmm150_user_i2c_init+0x1e>
    }
    return 1;
 800ddf4:	2301      	movs	r3, #1
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	20000538 	.word	0x20000538

0800de00 <bmm150_user_spi_init>:

/*!
 * @brief Function for initialization of SPI bus.
 */
int8_t bmm150_user_spi_init(void) {
 800de00:	b480      	push	{r7}
 800de02:	af00      	add	r7, sp, #0

    /* Implement SPI bus initialization according to the target machine. */
    return 0;
 800de04:	2300      	movs	r3, #0
}
 800de06:	4618      	mov	r0, r3
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <bmm150_user_delay_us>:

/*!
 * @brief This function provides the delay for required time (Microseconds) as per the input provided in some of the
 * APIs.
 */
void bmm150_user_delay_us(uint32_t period_us, void *intf_ptr) {
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]
	htim10.Instance->CNT = 0;  // set the counter value a 0
 800de1a:	4b09      	ldr	r3, [pc, #36]	; (800de40 <bmm150_user_delay_us+0x30>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2200      	movs	r2, #0
 800de20:	625a      	str	r2, [r3, #36]	; 0x24
    while (htim10.Instance->CNT < period_us);  // wait for the counter to reach the us input in the parameter
 800de22:	bf00      	nop
 800de24:	4b06      	ldr	r3, [pc, #24]	; (800de40 <bmm150_user_delay_us+0x30>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d8f9      	bhi.n	800de24 <bmm150_user_delay_us+0x14>
    /* Wait for a period amount of microseconds. */
}
 800de30:	bf00      	nop
 800de32:	bf00      	nop
 800de34:	370c      	adds	r7, #12
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop
 800de40:	200007f4 	.word	0x200007f4

0800de44 <bmm150_user_i2c_reg_write>:

/*!
 * @brief This function is for writing the sensor's registers through I2C bus.
 */
int8_t bmm150_user_i2c_reg_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800de44:	b580      	push	{r7, lr}
 800de46:	b088      	sub	sp, #32
 800de48:	af04      	add	r7, sp, #16
 800de4a:	60b9      	str	r1, [r7, #8]
 800de4c:	607a      	str	r2, [r7, #4]
 800de4e:	603b      	str	r3, [r7, #0]
 800de50:	4603      	mov	r3, r0
 800de52:	73fb      	strb	r3, [r7, #15]

    /* Write to registers using I2C. Return 0 for a successful execution. */
    if (HAL_I2C_Mem_Write(&hi2c1, BMM150_DEFAULT_I2C_ADDRESS << 1, reg_addr, 1, reg_data, length, 1000) == HAL_OK) {
 800de54:	7bfb      	ldrb	r3, [r7, #15]
 800de56:	b29a      	uxth	r2, r3
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800de60:	9102      	str	r1, [sp, #8]
 800de62:	9301      	str	r3, [sp, #4]
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	9300      	str	r3, [sp, #0]
 800de68:	2301      	movs	r3, #1
 800de6a:	2120      	movs	r1, #32
 800de6c:	4806      	ldr	r0, [pc, #24]	; (800de88 <bmm150_user_i2c_reg_write+0x44>)
 800de6e:	f7f8 fe0f 	bl	8006a90 <HAL_I2C_Mem_Write>
 800de72:	4603      	mov	r3, r0
 800de74:	2b00      	cmp	r3, #0
 800de76:	d101      	bne.n	800de7c <bmm150_user_i2c_reg_write+0x38>
        return BMM150_OK;
 800de78:	2300      	movs	r3, #0
 800de7a:	e000      	b.n	800de7e <bmm150_user_i2c_reg_write+0x3a>
    };
    return 1;
 800de7c:	2301      	movs	r3, #1
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3710      	adds	r7, #16
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	20000538 	.word	0x20000538

0800de8c <bmm150_user_i2c_reg_read>:

/*!
 * @brief This function is for reading the sensor's registers through I2C bus.
 */
int8_t bmm150_user_i2c_reg_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b088      	sub	sp, #32
 800de90:	af04      	add	r7, sp, #16
 800de92:	60b9      	str	r1, [r7, #8]
 800de94:	607a      	str	r2, [r7, #4]
 800de96:	603b      	str	r3, [r7, #0]
 800de98:	4603      	mov	r3, r0
 800de9a:	73fb      	strb	r3, [r7, #15]

    /* Read from registers using I2C. Return 0 for a successful execution. */
    if (HAL_I2C_Mem_Read(&hi2c1, BMM150_DEFAULT_I2C_ADDRESS << 1, reg_addr, 1, reg_data, length, 1000) == HAL_OK) {
 800de9c:	7bfb      	ldrb	r3, [r7, #15]
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dea8:	9102      	str	r1, [sp, #8]
 800deaa:	9301      	str	r3, [sp, #4]
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	9300      	str	r3, [sp, #0]
 800deb0:	2301      	movs	r3, #1
 800deb2:	2120      	movs	r1, #32
 800deb4:	4806      	ldr	r0, [pc, #24]	; (800ded0 <bmm150_user_i2c_reg_read+0x44>)
 800deb6:	f7f8 fee5 	bl	8006c84 <HAL_I2C_Mem_Read>
 800deba:	4603      	mov	r3, r0
 800debc:	2b00      	cmp	r3, #0
 800debe:	d101      	bne.n	800dec4 <bmm150_user_i2c_reg_read+0x38>
        return BMM150_OK;
 800dec0:	2300      	movs	r3, #0
 800dec2:	e000      	b.n	800dec6 <bmm150_user_i2c_reg_read+0x3a>
    };
    return 1;
 800dec4:	2301      	movs	r3, #1
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3710      	adds	r7, #16
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	20000538 	.word	0x20000538

0800ded4 <bmm150_user_spi_reg_write>:

/*!
 * @brief This function is for writing the sensor's registers through SPI bus.
 */
int8_t bmm150_user_spi_reg_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800ded4:	b480      	push	{r7}
 800ded6:	b085      	sub	sp, #20
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60b9      	str	r1, [r7, #8]
 800dedc:	607a      	str	r2, [r7, #4]
 800dede:	603b      	str	r3, [r7, #0]
 800dee0:	4603      	mov	r3, r0
 800dee2:	73fb      	strb	r3, [r7, #15]

    /* Write to registers using SPI. Return 0 for a successful execution. */
    return 0;
 800dee4:	2300      	movs	r3, #0
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3714      	adds	r7, #20
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr

0800def2 <bmm150_user_spi_reg_read>:

/*!
 * @brief This function is for reading the sensor's registers through SPI bus.
 */
int8_t bmm150_user_spi_reg_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800def2:	b480      	push	{r7}
 800def4:	b085      	sub	sp, #20
 800def6:	af00      	add	r7, sp, #0
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	607a      	str	r2, [r7, #4]
 800defc:	603b      	str	r3, [r7, #0]
 800defe:	4603      	mov	r3, r0
 800df00:	73fb      	strb	r3, [r7, #15]

    /* Read from registers using SPI. Return 0 for a successful execution. */
    return 0;
 800df02:	2300      	movs	r3, #0
}
 800df04:	4618      	mov	r0, r3
 800df06:	3714      	adds	r7, #20
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <bmm150_interface_selection>:

/*!
 *  @brief This function is to select the interface between SPI and I2C.
 */
int8_t bmm150_interface_selection(struct bmm150_dev *dev) {
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMM150_OK;
 800df18:	2300      	movs	r3, #0
 800df1a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL) {
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d028      	beq.n	800df74 <bmm150_interface_selection+0x64>
        /* Select the interface for execution
         * For I2C : BMM150_I2C_INTF
         * For SPI : BMM150_SPI_INTF
         */
        dev->intf = BMM150_I2C_INTF;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2201      	movs	r2, #1
 800df26:	705a      	strb	r2, [r3, #1]

        /* Bus configuration : I2C */
        if (dev->intf == BMM150_I2C_INTF) {
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	785b      	ldrb	r3, [r3, #1]
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d10b      	bne.n	800df48 <bmm150_interface_selection+0x38>
//            printf("I2C Interface \n");

            /* To initialize the user I2C function */
            bmm150_user_i2c_init();
 800df30:	f7ff ff52 	bl	800ddd8 <bmm150_user_i2c_init>

            dev_addr = BMM150_DEFAULT_I2C_ADDRESS;
 800df34:	4b13      	ldr	r3, [pc, #76]	; (800df84 <bmm150_interface_selection+0x74>)
 800df36:	2210      	movs	r2, #16
 800df38:	701a      	strb	r2, [r3, #0]
            dev->read = bmm150_user_i2c_reg_read;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	4a12      	ldr	r2, [pc, #72]	; (800df88 <bmm150_interface_selection+0x78>)
 800df3e:	60da      	str	r2, [r3, #12]
            dev->write = bmm150_user_i2c_reg_write;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	4a12      	ldr	r2, [pc, #72]	; (800df8c <bmm150_interface_selection+0x7c>)
 800df44:	611a      	str	r2, [r3, #16]
 800df46:	e00e      	b.n	800df66 <bmm150_interface_selection+0x56>
        }
            /* Bus configuration : SPI */
        else if (dev->intf == BMM150_SPI_INTF) {
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	785b      	ldrb	r3, [r3, #1]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d10a      	bne.n	800df66 <bmm150_interface_selection+0x56>
//            printf("SPI Interface \n");

            /* To initialize the user SPI function */
            bmm150_user_spi_init();
 800df50:	f7ff ff56 	bl	800de00 <bmm150_user_spi_init>

            dev_addr = 0;
 800df54:	4b0b      	ldr	r3, [pc, #44]	; (800df84 <bmm150_interface_selection+0x74>)
 800df56:	2200      	movs	r2, #0
 800df58:	701a      	strb	r2, [r3, #0]
            dev->read = bmm150_user_spi_reg_read;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4a0c      	ldr	r2, [pc, #48]	; (800df90 <bmm150_interface_selection+0x80>)
 800df5e:	60da      	str	r2, [r3, #12]
            dev->write = bmm150_user_spi_reg_write;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	4a0c      	ldr	r2, [pc, #48]	; (800df94 <bmm150_interface_selection+0x84>)
 800df64:	611a      	str	r2, [r3, #16]
        }

        /* Assign device address to interface pointer */
        dev->intf_ptr = &dev_addr;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	4a06      	ldr	r2, [pc, #24]	; (800df84 <bmm150_interface_selection+0x74>)
 800df6a:	605a      	str	r2, [r3, #4]

        /* Configure delay in microseconds */
        dev->delay_us = bmm150_user_delay_us;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4a0a      	ldr	r2, [pc, #40]	; (800df98 <bmm150_interface_selection+0x88>)
 800df70:	615a      	str	r2, [r3, #20]
 800df72:	e001      	b.n	800df78 <bmm150_interface_selection+0x68>
    } else {
        rslt = BMM150_E_NULL_PTR;
 800df74:	23ff      	movs	r3, #255	; 0xff
 800df76:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800df78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3710      	adds	r7, #16
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	20002b60 	.word	0x20002b60
 800df88:	0800de8d 	.word	0x0800de8d
 800df8c:	0800de45 	.word	0x0800de45
 800df90:	0800def3 	.word	0x0800def3
 800df94:	0800ded5 	.word	0x0800ded5
 800df98:	0800de11 	.word	0x0800de11

0800df9c <bmm150_error_codes_print_result>:

/*!
 * @brief This internal API prints the execution status
 */
void bmm150_error_codes_print_result(const char api_name[], int8_t rslt) {
 800df9c:	b480      	push	{r7}
 800df9e:	b083      	sub	sp, #12
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	70fb      	strb	r3, [r7, #3]
    if (rslt != BMM150_OK) {
 800dfa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d00f      	beq.n	800dfd0 <bmm150_error_codes_print_result+0x34>
//        printf("%s\t", api_name);

        switch (rslt) {
 800dfb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dfb4:	3304      	adds	r3, #4
 800dfb6:	2b03      	cmp	r3, #3
 800dfb8:	d80c      	bhi.n	800dfd4 <bmm150_error_codes_print_result+0x38>
 800dfba:	a201      	add	r2, pc, #4	; (adr r2, 800dfc0 <bmm150_error_codes_print_result+0x24>)
 800dfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc0:	0800dfd5 	.word	0x0800dfd5
 800dfc4:	0800dfd5 	.word	0x0800dfd5
 800dfc8:	0800dfd5 	.word	0x0800dfd5
 800dfcc:	0800dfd5 	.word	0x0800dfd5

            default:
//                printf("Error [%d] : Unknown error code\r\n", rslt);
                break;
        }
    }
 800dfd0:	bf00      	nop
 800dfd2:	e000      	b.n	800dfd6 <bmm150_error_codes_print_result+0x3a>
                break;
 800dfd4:	bf00      	nop
}
 800dfd6:	bf00      	nop
 800dfd8:	370c      	adds	r7, #12
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop

0800dfe4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	4603      	mov	r3, r0
 800dfec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800dfee:	2300      	movs	r3, #0
 800dff0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800dff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dff6:	2b84      	cmp	r3, #132	; 0x84
 800dff8:	d005      	beq.n	800e006 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800dffa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	4413      	add	r3, r2
 800e002:	3303      	adds	r3, #3
 800e004:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e006:	68fb      	ldr	r3, [r7, #12]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3714      	adds	r7, #20
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e018:	f000 ff20 	bl	800ee5c <vTaskStartScheduler>
  
  return osOK;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	bd80      	pop	{r7, pc}

0800e022 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e022:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e024:	b089      	sub	sp, #36	; 0x24
 800e026:	af04      	add	r7, sp, #16
 800e028:	6078      	str	r0, [r7, #4]
 800e02a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	695b      	ldr	r3, [r3, #20]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d020      	beq.n	800e076 <osThreadCreate+0x54>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	699b      	ldr	r3, [r3, #24]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d01c      	beq.n	800e076 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	685c      	ldr	r4, [r3, #4]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681d      	ldr	r5, [r3, #0]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	691e      	ldr	r6, [r3, #16]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e04e:	4618      	mov	r0, r3
 800e050:	f7ff ffc8 	bl	800dfe4 <makeFreeRtosPriority>
 800e054:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	695b      	ldr	r3, [r3, #20]
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e05e:	9202      	str	r2, [sp, #8]
 800e060:	9301      	str	r3, [sp, #4]
 800e062:	9100      	str	r1, [sp, #0]
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	4632      	mov	r2, r6
 800e068:	4629      	mov	r1, r5
 800e06a:	4620      	mov	r0, r4
 800e06c:	f000 fc9e 	bl	800e9ac <xTaskCreateStatic>
 800e070:	4603      	mov	r3, r0
 800e072:	60fb      	str	r3, [r7, #12]
 800e074:	e01c      	b.n	800e0b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	685c      	ldr	r4, [r3, #4]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e082:	b29e      	uxth	r6, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7ff ffaa 	bl	800dfe4 <makeFreeRtosPriority>
 800e090:	4602      	mov	r2, r0
 800e092:	f107 030c 	add.w	r3, r7, #12
 800e096:	9301      	str	r3, [sp, #4]
 800e098:	9200      	str	r2, [sp, #0]
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	4632      	mov	r2, r6
 800e09e:	4629      	mov	r1, r5
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f000 fce0 	bl	800ea66 <xTaskCreate>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d001      	beq.n	800e0b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	e000      	b.n	800e0b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3714      	adds	r7, #20
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e0ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b084      	sub	sp, #16
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d001      	beq.n	800e0d0 <osDelay+0x16>
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	e000      	b.n	800e0d2 <osDelay+0x18>
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f000 fdfe 	bl	800ecd4 <vTaskDelay>
  
  return osOK;
 800e0d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3710      	adds	r7, #16
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}

0800e0e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e0e2:	b480      	push	{r7}
 800e0e4:	b083      	sub	sp, #12
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f103 0208 	add.w	r2, r3, #8
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f103 0208 	add.w	r2, r3, #8
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f103 0208 	add.w	r2, r3, #8
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2200      	movs	r2, #0
 800e114:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e116:	bf00      	nop
 800e118:	370c      	adds	r7, #12
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr

0800e122 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e122:	b480      	push	{r7}
 800e124:	b083      	sub	sp, #12
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2200      	movs	r2, #0
 800e12e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e130:	bf00      	nop
 800e132:	370c      	adds	r7, #12
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr

0800e13c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	689a      	ldr	r2, [r3, #8]
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	689b      	ldr	r3, [r3, #8]
 800e15e:	683a      	ldr	r2, [r7, #0]
 800e160:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	683a      	ldr	r2, [r7, #0]
 800e166:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	687a      	ldr	r2, [r7, #4]
 800e16c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	1c5a      	adds	r2, r3, #1
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	601a      	str	r2, [r3, #0]
}
 800e178:	bf00      	nop
 800e17a:	3714      	adds	r7, #20
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr

0800e184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e184:	b480      	push	{r7}
 800e186:	b085      	sub	sp, #20
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e19a:	d103      	bne.n	800e1a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	691b      	ldr	r3, [r3, #16]
 800e1a0:	60fb      	str	r3, [r7, #12]
 800e1a2:	e00c      	b.n	800e1be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	3308      	adds	r3, #8
 800e1a8:	60fb      	str	r3, [r7, #12]
 800e1aa:	e002      	b.n	800e1b2 <vListInsert+0x2e>
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	60fb      	str	r3, [r7, #12]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	68ba      	ldr	r2, [r7, #8]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d2f6      	bcs.n	800e1ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	685a      	ldr	r2, [r3, #4]
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	683a      	ldr	r2, [r7, #0]
 800e1cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	68fa      	ldr	r2, [r7, #12]
 800e1d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	1c5a      	adds	r2, r3, #1
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	601a      	str	r2, [r3, #0]
}
 800e1ea:	bf00      	nop
 800e1ec:	3714      	adds	r7, #20
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr

0800e1f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e1f6:	b480      	push	{r7}
 800e1f8:	b085      	sub	sp, #20
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	691b      	ldr	r3, [r3, #16]
 800e202:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	6892      	ldr	r2, [r2, #8]
 800e20c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	689b      	ldr	r3, [r3, #8]
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	6852      	ldr	r2, [r2, #4]
 800e216:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	685b      	ldr	r3, [r3, #4]
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d103      	bne.n	800e22a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	689a      	ldr	r2, [r3, #8]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2200      	movs	r2, #0
 800e22e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	1e5a      	subs	r2, r3, #1
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3714      	adds	r7, #20
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr
	...

0800e24c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d10a      	bne.n	800e276 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e264:	f383 8811 	msr	BASEPRI, r3
 800e268:	f3bf 8f6f 	isb	sy
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e272:	bf00      	nop
 800e274:	e7fe      	b.n	800e274 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e276:	f001 fc25 	bl	800fac4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e282:	68f9      	ldr	r1, [r7, #12]
 800e284:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e286:	fb01 f303 	mul.w	r3, r1, r3
 800e28a:	441a      	add	r2, r3
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2200      	movs	r2, #0
 800e294:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2a6:	3b01      	subs	r3, #1
 800e2a8:	68f9      	ldr	r1, [r7, #12]
 800e2aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e2ac:	fb01 f303 	mul.w	r3, r1, r3
 800e2b0:	441a      	add	r2, r3
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	22ff      	movs	r2, #255	; 0xff
 800e2ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	22ff      	movs	r2, #255	; 0xff
 800e2c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d114      	bne.n	800e2f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	691b      	ldr	r3, [r3, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d01a      	beq.n	800e30a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	3310      	adds	r3, #16
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f001 f801 	bl	800f2e0 <xTaskRemoveFromEventList>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d012      	beq.n	800e30a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e2e4:	4b0c      	ldr	r3, [pc, #48]	; (800e318 <xQueueGenericReset+0xcc>)
 800e2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2ea:	601a      	str	r2, [r3, #0]
 800e2ec:	f3bf 8f4f 	dsb	sy
 800e2f0:	f3bf 8f6f 	isb	sy
 800e2f4:	e009      	b.n	800e30a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	3310      	adds	r3, #16
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7ff fef1 	bl	800e0e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	3324      	adds	r3, #36	; 0x24
 800e304:	4618      	mov	r0, r3
 800e306:	f7ff feec 	bl	800e0e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e30a:	f001 fc0b 	bl	800fb24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e30e:	2301      	movs	r3, #1
}
 800e310:	4618      	mov	r0, r3
 800e312:	3710      	adds	r7, #16
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	e000ed04 	.word	0xe000ed04

0800e31c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b08a      	sub	sp, #40	; 0x28
 800e320:	af02      	add	r7, sp, #8
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	60b9      	str	r1, [r7, #8]
 800e326:	4613      	mov	r3, r2
 800e328:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d10a      	bne.n	800e346 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e334:	f383 8811 	msr	BASEPRI, r3
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	613b      	str	r3, [r7, #16]
}
 800e342:	bf00      	nop
 800e344:	e7fe      	b.n	800e344 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	68ba      	ldr	r2, [r7, #8]
 800e34a:	fb02 f303 	mul.w	r3, r2, r3
 800e34e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	3348      	adds	r3, #72	; 0x48
 800e354:	4618      	mov	r0, r3
 800e356:	f001 fc97 	bl	800fc88 <pvPortMalloc>
 800e35a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e35c:	69bb      	ldr	r3, [r7, #24]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d011      	beq.n	800e386 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e362:	69bb      	ldr	r3, [r7, #24]
 800e364:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	3348      	adds	r3, #72	; 0x48
 800e36a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e36c:	69bb      	ldr	r3, [r7, #24]
 800e36e:	2200      	movs	r2, #0
 800e370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e374:	79fa      	ldrb	r2, [r7, #7]
 800e376:	69bb      	ldr	r3, [r7, #24]
 800e378:	9300      	str	r3, [sp, #0]
 800e37a:	4613      	mov	r3, r2
 800e37c:	697a      	ldr	r2, [r7, #20]
 800e37e:	68b9      	ldr	r1, [r7, #8]
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f000 f805 	bl	800e390 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e386:	69bb      	ldr	r3, [r7, #24]
	}
 800e388:	4618      	mov	r0, r3
 800e38a:	3720      	adds	r7, #32
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	607a      	str	r2, [r7, #4]
 800e39c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d103      	bne.n	800e3ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e3a4:	69bb      	ldr	r3, [r7, #24]
 800e3a6:	69ba      	ldr	r2, [r7, #24]
 800e3a8:	601a      	str	r2, [r3, #0]
 800e3aa:	e002      	b.n	800e3b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e3b2:	69bb      	ldr	r3, [r7, #24]
 800e3b4:	68fa      	ldr	r2, [r7, #12]
 800e3b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e3b8:	69bb      	ldr	r3, [r7, #24]
 800e3ba:	68ba      	ldr	r2, [r7, #8]
 800e3bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e3be:	2101      	movs	r1, #1
 800e3c0:	69b8      	ldr	r0, [r7, #24]
 800e3c2:	f7ff ff43 	bl	800e24c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e3c6:	bf00      	nop
 800e3c8:	3710      	adds	r7, #16
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
	...

0800e3d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b08e      	sub	sp, #56	; 0x38
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
 800e3dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d10a      	bne.n	800e402 <xQueueGenericSend+0x32>
	__asm volatile
 800e3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f0:	f383 8811 	msr	BASEPRI, r3
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	f3bf 8f4f 	dsb	sy
 800e3fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e3fe:	bf00      	nop
 800e400:	e7fe      	b.n	800e400 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d103      	bne.n	800e410 <xQueueGenericSend+0x40>
 800e408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d101      	bne.n	800e414 <xQueueGenericSend+0x44>
 800e410:	2301      	movs	r3, #1
 800e412:	e000      	b.n	800e416 <xQueueGenericSend+0x46>
 800e414:	2300      	movs	r3, #0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d10a      	bne.n	800e430 <xQueueGenericSend+0x60>
	__asm volatile
 800e41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41e:	f383 8811 	msr	BASEPRI, r3
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e42c:	bf00      	nop
 800e42e:	e7fe      	b.n	800e42e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	2b02      	cmp	r3, #2
 800e434:	d103      	bne.n	800e43e <xQueueGenericSend+0x6e>
 800e436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	d101      	bne.n	800e442 <xQueueGenericSend+0x72>
 800e43e:	2301      	movs	r3, #1
 800e440:	e000      	b.n	800e444 <xQueueGenericSend+0x74>
 800e442:	2300      	movs	r3, #0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d10a      	bne.n	800e45e <xQueueGenericSend+0x8e>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44c:	f383 8811 	msr	BASEPRI, r3
 800e450:	f3bf 8f6f 	isb	sy
 800e454:	f3bf 8f4f 	dsb	sy
 800e458:	623b      	str	r3, [r7, #32]
}
 800e45a:	bf00      	nop
 800e45c:	e7fe      	b.n	800e45c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e45e:	f001 f8fb 	bl	800f658 <xTaskGetSchedulerState>
 800e462:	4603      	mov	r3, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d102      	bne.n	800e46e <xQueueGenericSend+0x9e>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d101      	bne.n	800e472 <xQueueGenericSend+0xa2>
 800e46e:	2301      	movs	r3, #1
 800e470:	e000      	b.n	800e474 <xQueueGenericSend+0xa4>
 800e472:	2300      	movs	r3, #0
 800e474:	2b00      	cmp	r3, #0
 800e476:	d10a      	bne.n	800e48e <xQueueGenericSend+0xbe>
	__asm volatile
 800e478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e47c:	f383 8811 	msr	BASEPRI, r3
 800e480:	f3bf 8f6f 	isb	sy
 800e484:	f3bf 8f4f 	dsb	sy
 800e488:	61fb      	str	r3, [r7, #28]
}
 800e48a:	bf00      	nop
 800e48c:	e7fe      	b.n	800e48c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e48e:	f001 fb19 	bl	800fac4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d302      	bcc.n	800e4a4 <xQueueGenericSend+0xd4>
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	2b02      	cmp	r3, #2
 800e4a2:	d129      	bne.n	800e4f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4a4:	683a      	ldr	r2, [r7, #0]
 800e4a6:	68b9      	ldr	r1, [r7, #8]
 800e4a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4aa:	f000 f96f 	bl	800e78c <prvCopyDataToQueue>
 800e4ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d010      	beq.n	800e4da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ba:	3324      	adds	r3, #36	; 0x24
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f000 ff0f 	bl	800f2e0 <xTaskRemoveFromEventList>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d013      	beq.n	800e4f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e4c8:	4b3f      	ldr	r3, [pc, #252]	; (800e5c8 <xQueueGenericSend+0x1f8>)
 800e4ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4ce:	601a      	str	r2, [r3, #0]
 800e4d0:	f3bf 8f4f 	dsb	sy
 800e4d4:	f3bf 8f6f 	isb	sy
 800e4d8:	e00a      	b.n	800e4f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d007      	beq.n	800e4f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e4e0:	4b39      	ldr	r3, [pc, #228]	; (800e5c8 <xQueueGenericSend+0x1f8>)
 800e4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4e6:	601a      	str	r2, [r3, #0]
 800e4e8:	f3bf 8f4f 	dsb	sy
 800e4ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e4f0:	f001 fb18 	bl	800fb24 <vPortExitCritical>
				return pdPASS;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	e063      	b.n	800e5c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d103      	bne.n	800e506 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e4fe:	f001 fb11 	bl	800fb24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e502:	2300      	movs	r3, #0
 800e504:	e05c      	b.n	800e5c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d106      	bne.n	800e51a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e50c:	f107 0314 	add.w	r3, r7, #20
 800e510:	4618      	mov	r0, r3
 800e512:	f000 ff47 	bl	800f3a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e516:	2301      	movs	r3, #1
 800e518:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e51a:	f001 fb03 	bl	800fb24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e51e:	f000 fcfd 	bl	800ef1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e522:	f001 facf 	bl	800fac4 <vPortEnterCritical>
 800e526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e52c:	b25b      	sxtb	r3, r3
 800e52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e532:	d103      	bne.n	800e53c <xQueueGenericSend+0x16c>
 800e534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e536:	2200      	movs	r2, #0
 800e538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e542:	b25b      	sxtb	r3, r3
 800e544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e548:	d103      	bne.n	800e552 <xQueueGenericSend+0x182>
 800e54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54c:	2200      	movs	r2, #0
 800e54e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e552:	f001 fae7 	bl	800fb24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e556:	1d3a      	adds	r2, r7, #4
 800e558:	f107 0314 	add.w	r3, r7, #20
 800e55c:	4611      	mov	r1, r2
 800e55e:	4618      	mov	r0, r3
 800e560:	f000 ff36 	bl	800f3d0 <xTaskCheckForTimeOut>
 800e564:	4603      	mov	r3, r0
 800e566:	2b00      	cmp	r3, #0
 800e568:	d124      	bne.n	800e5b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e56a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e56c:	f000 fa06 	bl	800e97c <prvIsQueueFull>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d018      	beq.n	800e5a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e578:	3310      	adds	r3, #16
 800e57a:	687a      	ldr	r2, [r7, #4]
 800e57c:	4611      	mov	r1, r2
 800e57e:	4618      	mov	r0, r3
 800e580:	f000 fe8a 	bl	800f298 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e586:	f000 f991 	bl	800e8ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e58a:	f000 fcd5 	bl	800ef38 <xTaskResumeAll>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	f47f af7c 	bne.w	800e48e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e596:	4b0c      	ldr	r3, [pc, #48]	; (800e5c8 <xQueueGenericSend+0x1f8>)
 800e598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e59c:	601a      	str	r2, [r3, #0]
 800e59e:	f3bf 8f4f 	dsb	sy
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	e772      	b.n	800e48e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e5a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5aa:	f000 f97f 	bl	800e8ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5ae:	f000 fcc3 	bl	800ef38 <xTaskResumeAll>
 800e5b2:	e76c      	b.n	800e48e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e5b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5b6:	f000 f979 	bl	800e8ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5ba:	f000 fcbd 	bl	800ef38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e5be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3738      	adds	r7, #56	; 0x38
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	e000ed04 	.word	0xe000ed04

0800e5cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b08c      	sub	sp, #48	; 0x30
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d10a      	bne.n	800e5fc <xQueueReceive+0x30>
	__asm volatile
 800e5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ea:	f383 8811 	msr	BASEPRI, r3
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	f3bf 8f4f 	dsb	sy
 800e5f6:	623b      	str	r3, [r7, #32]
}
 800e5f8:	bf00      	nop
 800e5fa:	e7fe      	b.n	800e5fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d103      	bne.n	800e60a <xQueueReceive+0x3e>
 800e602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e606:	2b00      	cmp	r3, #0
 800e608:	d101      	bne.n	800e60e <xQueueReceive+0x42>
 800e60a:	2301      	movs	r3, #1
 800e60c:	e000      	b.n	800e610 <xQueueReceive+0x44>
 800e60e:	2300      	movs	r3, #0
 800e610:	2b00      	cmp	r3, #0
 800e612:	d10a      	bne.n	800e62a <xQueueReceive+0x5e>
	__asm volatile
 800e614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e618:	f383 8811 	msr	BASEPRI, r3
 800e61c:	f3bf 8f6f 	isb	sy
 800e620:	f3bf 8f4f 	dsb	sy
 800e624:	61fb      	str	r3, [r7, #28]
}
 800e626:	bf00      	nop
 800e628:	e7fe      	b.n	800e628 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e62a:	f001 f815 	bl	800f658 <xTaskGetSchedulerState>
 800e62e:	4603      	mov	r3, r0
 800e630:	2b00      	cmp	r3, #0
 800e632:	d102      	bne.n	800e63a <xQueueReceive+0x6e>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d101      	bne.n	800e63e <xQueueReceive+0x72>
 800e63a:	2301      	movs	r3, #1
 800e63c:	e000      	b.n	800e640 <xQueueReceive+0x74>
 800e63e:	2300      	movs	r3, #0
 800e640:	2b00      	cmp	r3, #0
 800e642:	d10a      	bne.n	800e65a <xQueueReceive+0x8e>
	__asm volatile
 800e644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e648:	f383 8811 	msr	BASEPRI, r3
 800e64c:	f3bf 8f6f 	isb	sy
 800e650:	f3bf 8f4f 	dsb	sy
 800e654:	61bb      	str	r3, [r7, #24]
}
 800e656:	bf00      	nop
 800e658:	e7fe      	b.n	800e658 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e65a:	f001 fa33 	bl	800fac4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e662:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e666:	2b00      	cmp	r3, #0
 800e668:	d01f      	beq.n	800e6aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e66a:	68b9      	ldr	r1, [r7, #8]
 800e66c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e66e:	f000 f8f7 	bl	800e860 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e674:	1e5a      	subs	r2, r3, #1
 800e676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e678:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67c:	691b      	ldr	r3, [r3, #16]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d00f      	beq.n	800e6a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e684:	3310      	adds	r3, #16
 800e686:	4618      	mov	r0, r3
 800e688:	f000 fe2a 	bl	800f2e0 <xTaskRemoveFromEventList>
 800e68c:	4603      	mov	r3, r0
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d007      	beq.n	800e6a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e692:	4b3d      	ldr	r3, [pc, #244]	; (800e788 <xQueueReceive+0x1bc>)
 800e694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e698:	601a      	str	r2, [r3, #0]
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e6a2:	f001 fa3f 	bl	800fb24 <vPortExitCritical>
				return pdPASS;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	e069      	b.n	800e77e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d103      	bne.n	800e6b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e6b0:	f001 fa38 	bl	800fb24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	e062      	b.n	800e77e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d106      	bne.n	800e6cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6be:	f107 0310 	add.w	r3, r7, #16
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f000 fe6e 	bl	800f3a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e6cc:	f001 fa2a 	bl	800fb24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e6d0:	f000 fc24 	bl	800ef1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6d4:	f001 f9f6 	bl	800fac4 <vPortEnterCritical>
 800e6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6de:	b25b      	sxtb	r3, r3
 800e6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6e4:	d103      	bne.n	800e6ee <xQueueReceive+0x122>
 800e6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6f4:	b25b      	sxtb	r3, r3
 800e6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6fa:	d103      	bne.n	800e704 <xQueueReceive+0x138>
 800e6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fe:	2200      	movs	r2, #0
 800e700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e704:	f001 fa0e 	bl	800fb24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e708:	1d3a      	adds	r2, r7, #4
 800e70a:	f107 0310 	add.w	r3, r7, #16
 800e70e:	4611      	mov	r1, r2
 800e710:	4618      	mov	r0, r3
 800e712:	f000 fe5d 	bl	800f3d0 <xTaskCheckForTimeOut>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d123      	bne.n	800e764 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e71c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e71e:	f000 f917 	bl	800e950 <prvIsQueueEmpty>
 800e722:	4603      	mov	r3, r0
 800e724:	2b00      	cmp	r3, #0
 800e726:	d017      	beq.n	800e758 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72a:	3324      	adds	r3, #36	; 0x24
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	4611      	mov	r1, r2
 800e730:	4618      	mov	r0, r3
 800e732:	f000 fdb1 	bl	800f298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e738:	f000 f8b8 	bl	800e8ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e73c:	f000 fbfc 	bl	800ef38 <xTaskResumeAll>
 800e740:	4603      	mov	r3, r0
 800e742:	2b00      	cmp	r3, #0
 800e744:	d189      	bne.n	800e65a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e746:	4b10      	ldr	r3, [pc, #64]	; (800e788 <xQueueReceive+0x1bc>)
 800e748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e74c:	601a      	str	r2, [r3, #0]
 800e74e:	f3bf 8f4f 	dsb	sy
 800e752:	f3bf 8f6f 	isb	sy
 800e756:	e780      	b.n	800e65a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e75a:	f000 f8a7 	bl	800e8ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e75e:	f000 fbeb 	bl	800ef38 <xTaskResumeAll>
 800e762:	e77a      	b.n	800e65a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e766:	f000 f8a1 	bl	800e8ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e76a:	f000 fbe5 	bl	800ef38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e76e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e770:	f000 f8ee 	bl	800e950 <prvIsQueueEmpty>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	f43f af6f 	beq.w	800e65a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e77c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3730      	adds	r7, #48	; 0x30
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
 800e786:	bf00      	nop
 800e788:	e000ed04 	.word	0xe000ed04

0800e78c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b086      	sub	sp, #24
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e798:	2300      	movs	r3, #0
 800e79a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d10d      	bne.n	800e7c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d14d      	bne.n	800e84e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f000 ff6c 	bl	800f694 <xTaskPriorityDisinherit>
 800e7bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	609a      	str	r2, [r3, #8]
 800e7c4:	e043      	b.n	800e84e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d119      	bne.n	800e800 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6858      	ldr	r0, [r3, #4]
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	68b9      	ldr	r1, [r7, #8]
 800e7d8:	f001 fc6a 	bl	80100b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	685a      	ldr	r2, [r3, #4]
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7e4:	441a      	add	r2, r3
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	685a      	ldr	r2, [r3, #4]
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d32b      	bcc.n	800e84e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	605a      	str	r2, [r3, #4]
 800e7fe:	e026      	b.n	800e84e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	68d8      	ldr	r0, [r3, #12]
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e808:	461a      	mov	r2, r3
 800e80a:	68b9      	ldr	r1, [r7, #8]
 800e80c:	f001 fc50 	bl	80100b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	68da      	ldr	r2, [r3, #12]
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e818:	425b      	negs	r3, r3
 800e81a:	441a      	add	r2, r3
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	68da      	ldr	r2, [r3, #12]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d207      	bcs.n	800e83c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	689a      	ldr	r2, [r3, #8]
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e834:	425b      	negs	r3, r3
 800e836:	441a      	add	r2, r3
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2b02      	cmp	r3, #2
 800e840:	d105      	bne.n	800e84e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d002      	beq.n	800e84e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	3b01      	subs	r3, #1
 800e84c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	1c5a      	adds	r2, r3, #1
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e856:	697b      	ldr	r3, [r7, #20]
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3718      	adds	r7, #24
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d018      	beq.n	800e8a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	68da      	ldr	r2, [r3, #12]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e87a:	441a      	add	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	68da      	ldr	r2, [r3, #12]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	689b      	ldr	r3, [r3, #8]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d303      	bcc.n	800e894 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	68d9      	ldr	r1, [r3, #12]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e89c:	461a      	mov	r2, r3
 800e89e:	6838      	ldr	r0, [r7, #0]
 800e8a0:	f001 fc06 	bl	80100b0 <memcpy>
	}
}
 800e8a4:	bf00      	nop
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e8b4:	f001 f906 	bl	800fac4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e8c0:	e011      	b.n	800e8e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d012      	beq.n	800e8f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	3324      	adds	r3, #36	; 0x24
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f000 fd06 	bl	800f2e0 <xTaskRemoveFromEventList>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d001      	beq.n	800e8de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e8da:	f000 fddb 	bl	800f494 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e8de:	7bfb      	ldrb	r3, [r7, #15]
 800e8e0:	3b01      	subs	r3, #1
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e8e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	dce9      	bgt.n	800e8c2 <prvUnlockQueue+0x16>
 800e8ee:	e000      	b.n	800e8f2 <prvUnlockQueue+0x46>
					break;
 800e8f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	22ff      	movs	r2, #255	; 0xff
 800e8f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e8fa:	f001 f913 	bl	800fb24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e8fe:	f001 f8e1 	bl	800fac4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e908:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e90a:	e011      	b.n	800e930 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d012      	beq.n	800e93a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	3310      	adds	r3, #16
 800e918:	4618      	mov	r0, r3
 800e91a:	f000 fce1 	bl	800f2e0 <xTaskRemoveFromEventList>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d001      	beq.n	800e928 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e924:	f000 fdb6 	bl	800f494 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e928:	7bbb      	ldrb	r3, [r7, #14]
 800e92a:	3b01      	subs	r3, #1
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e934:	2b00      	cmp	r3, #0
 800e936:	dce9      	bgt.n	800e90c <prvUnlockQueue+0x60>
 800e938:	e000      	b.n	800e93c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e93a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	22ff      	movs	r2, #255	; 0xff
 800e940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e944:	f001 f8ee 	bl	800fb24 <vPortExitCritical>
}
 800e948:	bf00      	nop
 800e94a:	3710      	adds	r7, #16
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e958:	f001 f8b4 	bl	800fac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e960:	2b00      	cmp	r3, #0
 800e962:	d102      	bne.n	800e96a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e964:	2301      	movs	r3, #1
 800e966:	60fb      	str	r3, [r7, #12]
 800e968:	e001      	b.n	800e96e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e96a:	2300      	movs	r3, #0
 800e96c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e96e:	f001 f8d9 	bl	800fb24 <vPortExitCritical>

	return xReturn;
 800e972:	68fb      	ldr	r3, [r7, #12]
}
 800e974:	4618      	mov	r0, r3
 800e976:	3710      	adds	r7, #16
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e984:	f001 f89e 	bl	800fac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e990:	429a      	cmp	r2, r3
 800e992:	d102      	bne.n	800e99a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e994:	2301      	movs	r3, #1
 800e996:	60fb      	str	r3, [r7, #12]
 800e998:	e001      	b.n	800e99e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e99a:	2300      	movs	r3, #0
 800e99c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e99e:	f001 f8c1 	bl	800fb24 <vPortExitCritical>

	return xReturn;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3710      	adds	r7, #16
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b08e      	sub	sp, #56	; 0x38
 800e9b0:	af04      	add	r7, sp, #16
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	607a      	str	r2, [r7, #4]
 800e9b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d10a      	bne.n	800e9d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c4:	f383 8811 	msr	BASEPRI, r3
 800e9c8:	f3bf 8f6f 	isb	sy
 800e9cc:	f3bf 8f4f 	dsb	sy
 800e9d0:	623b      	str	r3, [r7, #32]
}
 800e9d2:	bf00      	nop
 800e9d4:	e7fe      	b.n	800e9d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d10a      	bne.n	800e9f2 <xTaskCreateStatic+0x46>
	__asm volatile
 800e9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e0:	f383 8811 	msr	BASEPRI, r3
 800e9e4:	f3bf 8f6f 	isb	sy
 800e9e8:	f3bf 8f4f 	dsb	sy
 800e9ec:	61fb      	str	r3, [r7, #28]
}
 800e9ee:	bf00      	nop
 800e9f0:	e7fe      	b.n	800e9f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e9f2:	2354      	movs	r3, #84	; 0x54
 800e9f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	2b54      	cmp	r3, #84	; 0x54
 800e9fa:	d00a      	beq.n	800ea12 <xTaskCreateStatic+0x66>
	__asm volatile
 800e9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea00:	f383 8811 	msr	BASEPRI, r3
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	61bb      	str	r3, [r7, #24]
}
 800ea0e:	bf00      	nop
 800ea10:	e7fe      	b.n	800ea10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ea12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ea14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d01e      	beq.n	800ea58 <xTaskCreateStatic+0xac>
 800ea1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d01b      	beq.n	800ea58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ea2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2c:	2202      	movs	r2, #2
 800ea2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ea32:	2300      	movs	r3, #0
 800ea34:	9303      	str	r3, [sp, #12]
 800ea36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea38:	9302      	str	r3, [sp, #8]
 800ea3a:	f107 0314 	add.w	r3, r7, #20
 800ea3e:	9301      	str	r3, [sp, #4]
 800ea40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea42:	9300      	str	r3, [sp, #0]
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	68b9      	ldr	r1, [r7, #8]
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f000 f850 	bl	800eaf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ea50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea52:	f000 f8d5 	bl	800ec00 <prvAddNewTaskToReadyList>
 800ea56:	e001      	b.n	800ea5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ea5c:	697b      	ldr	r3, [r7, #20]
	}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3728      	adds	r7, #40	; 0x28
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ea66:	b580      	push	{r7, lr}
 800ea68:	b08c      	sub	sp, #48	; 0x30
 800ea6a:	af04      	add	r7, sp, #16
 800ea6c:	60f8      	str	r0, [r7, #12]
 800ea6e:	60b9      	str	r1, [r7, #8]
 800ea70:	603b      	str	r3, [r7, #0]
 800ea72:	4613      	mov	r3, r2
 800ea74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ea76:	88fb      	ldrh	r3, [r7, #6]
 800ea78:	009b      	lsls	r3, r3, #2
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f001 f904 	bl	800fc88 <pvPortMalloc>
 800ea80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d00e      	beq.n	800eaa6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ea88:	2054      	movs	r0, #84	; 0x54
 800ea8a:	f001 f8fd 	bl	800fc88 <pvPortMalloc>
 800ea8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d003      	beq.n	800ea9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ea96:	69fb      	ldr	r3, [r7, #28]
 800ea98:	697a      	ldr	r2, [r7, #20]
 800ea9a:	631a      	str	r2, [r3, #48]	; 0x30
 800ea9c:	e005      	b.n	800eaaa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ea9e:	6978      	ldr	r0, [r7, #20]
 800eaa0:	f001 f9be 	bl	800fe20 <vPortFree>
 800eaa4:	e001      	b.n	800eaaa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eaaa:	69fb      	ldr	r3, [r7, #28]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d017      	beq.n	800eae0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	2200      	movs	r2, #0
 800eab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eab8:	88fa      	ldrh	r2, [r7, #6]
 800eaba:	2300      	movs	r3, #0
 800eabc:	9303      	str	r3, [sp, #12]
 800eabe:	69fb      	ldr	r3, [r7, #28]
 800eac0:	9302      	str	r3, [sp, #8]
 800eac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac4:	9301      	str	r3, [sp, #4]
 800eac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac8:	9300      	str	r3, [sp, #0]
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	68b9      	ldr	r1, [r7, #8]
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f000 f80e 	bl	800eaf0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ead4:	69f8      	ldr	r0, [r7, #28]
 800ead6:	f000 f893 	bl	800ec00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eada:	2301      	movs	r3, #1
 800eadc:	61bb      	str	r3, [r7, #24]
 800eade:	e002      	b.n	800eae6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eae0:	f04f 33ff 	mov.w	r3, #4294967295
 800eae4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eae6:	69bb      	ldr	r3, [r7, #24]
	}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3720      	adds	r7, #32
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b088      	sub	sp, #32
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	607a      	str	r2, [r7, #4]
 800eafc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	009b      	lsls	r3, r3, #2
 800eb0c:	4413      	add	r3, r2
 800eb0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eb10:	69bb      	ldr	r3, [r7, #24]
 800eb12:	f023 0307 	bic.w	r3, r3, #7
 800eb16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eb18:	69bb      	ldr	r3, [r7, #24]
 800eb1a:	f003 0307 	and.w	r3, r3, #7
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d00a      	beq.n	800eb38 <prvInitialiseNewTask+0x48>
	__asm volatile
 800eb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb26:	f383 8811 	msr	BASEPRI, r3
 800eb2a:	f3bf 8f6f 	isb	sy
 800eb2e:	f3bf 8f4f 	dsb	sy
 800eb32:	617b      	str	r3, [r7, #20]
}
 800eb34:	bf00      	nop
 800eb36:	e7fe      	b.n	800eb36 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d01f      	beq.n	800eb7e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eb3e:	2300      	movs	r3, #0
 800eb40:	61fb      	str	r3, [r7, #28]
 800eb42:	e012      	b.n	800eb6a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800eb44:	68ba      	ldr	r2, [r7, #8]
 800eb46:	69fb      	ldr	r3, [r7, #28]
 800eb48:	4413      	add	r3, r2
 800eb4a:	7819      	ldrb	r1, [r3, #0]
 800eb4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb4e:	69fb      	ldr	r3, [r7, #28]
 800eb50:	4413      	add	r3, r2
 800eb52:	3334      	adds	r3, #52	; 0x34
 800eb54:	460a      	mov	r2, r1
 800eb56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eb58:	68ba      	ldr	r2, [r7, #8]
 800eb5a:	69fb      	ldr	r3, [r7, #28]
 800eb5c:	4413      	add	r3, r2
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d006      	beq.n	800eb72 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	3301      	adds	r3, #1
 800eb68:	61fb      	str	r3, [r7, #28]
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	2b0f      	cmp	r3, #15
 800eb6e:	d9e9      	bls.n	800eb44 <prvInitialiseNewTask+0x54>
 800eb70:	e000      	b.n	800eb74 <prvInitialiseNewTask+0x84>
			{
				break;
 800eb72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb76:	2200      	movs	r2, #0
 800eb78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eb7c:	e003      	b.n	800eb86 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb80:	2200      	movs	r2, #0
 800eb82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb88:	2b06      	cmp	r3, #6
 800eb8a:	d901      	bls.n	800eb90 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eb8c:	2306      	movs	r3, #6
 800eb8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb9a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800eb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9e:	2200      	movs	r2, #0
 800eba0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba4:	3304      	adds	r3, #4
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7ff fabb 	bl	800e122 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ebac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebae:	3318      	adds	r3, #24
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7ff fab6 	bl	800e122 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ebb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebbe:	f1c3 0207 	rsb	r2, r3, #7
 800ebc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ebc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ebcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebce:	2200      	movs	r2, #0
 800ebd0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ebda:	683a      	ldr	r2, [r7, #0]
 800ebdc:	68f9      	ldr	r1, [r7, #12]
 800ebde:	69b8      	ldr	r0, [r7, #24]
 800ebe0:	f000 fe44 	bl	800f86c <pxPortInitialiseStack>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ebea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d002      	beq.n	800ebf6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ebf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebf6:	bf00      	nop
 800ebf8:	3720      	adds	r7, #32
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
	...

0800ec00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ec08:	f000 ff5c 	bl	800fac4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ec0c:	4b2a      	ldr	r3, [pc, #168]	; (800ecb8 <prvAddNewTaskToReadyList+0xb8>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	3301      	adds	r3, #1
 800ec12:	4a29      	ldr	r2, [pc, #164]	; (800ecb8 <prvAddNewTaskToReadyList+0xb8>)
 800ec14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ec16:	4b29      	ldr	r3, [pc, #164]	; (800ecbc <prvAddNewTaskToReadyList+0xbc>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d109      	bne.n	800ec32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ec1e:	4a27      	ldr	r2, [pc, #156]	; (800ecbc <prvAddNewTaskToReadyList+0xbc>)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ec24:	4b24      	ldr	r3, [pc, #144]	; (800ecb8 <prvAddNewTaskToReadyList+0xb8>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d110      	bne.n	800ec4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ec2c:	f000 fc56 	bl	800f4dc <prvInitialiseTaskLists>
 800ec30:	e00d      	b.n	800ec4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ec32:	4b23      	ldr	r3, [pc, #140]	; (800ecc0 <prvAddNewTaskToReadyList+0xc0>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d109      	bne.n	800ec4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ec3a:	4b20      	ldr	r3, [pc, #128]	; (800ecbc <prvAddNewTaskToReadyList+0xbc>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d802      	bhi.n	800ec4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ec48:	4a1c      	ldr	r2, [pc, #112]	; (800ecbc <prvAddNewTaskToReadyList+0xbc>)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ec4e:	4b1d      	ldr	r3, [pc, #116]	; (800ecc4 <prvAddNewTaskToReadyList+0xc4>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	3301      	adds	r3, #1
 800ec54:	4a1b      	ldr	r2, [pc, #108]	; (800ecc4 <prvAddNewTaskToReadyList+0xc4>)
 800ec56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5c:	2201      	movs	r2, #1
 800ec5e:	409a      	lsls	r2, r3
 800ec60:	4b19      	ldr	r3, [pc, #100]	; (800ecc8 <prvAddNewTaskToReadyList+0xc8>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	4313      	orrs	r3, r2
 800ec66:	4a18      	ldr	r2, [pc, #96]	; (800ecc8 <prvAddNewTaskToReadyList+0xc8>)
 800ec68:	6013      	str	r3, [r2, #0]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec6e:	4613      	mov	r3, r2
 800ec70:	009b      	lsls	r3, r3, #2
 800ec72:	4413      	add	r3, r2
 800ec74:	009b      	lsls	r3, r3, #2
 800ec76:	4a15      	ldr	r2, [pc, #84]	; (800eccc <prvAddNewTaskToReadyList+0xcc>)
 800ec78:	441a      	add	r2, r3
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	4619      	mov	r1, r3
 800ec80:	4610      	mov	r0, r2
 800ec82:	f7ff fa5b 	bl	800e13c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ec86:	f000 ff4d 	bl	800fb24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ec8a:	4b0d      	ldr	r3, [pc, #52]	; (800ecc0 <prvAddNewTaskToReadyList+0xc0>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00e      	beq.n	800ecb0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ec92:	4b0a      	ldr	r3, [pc, #40]	; (800ecbc <prvAddNewTaskToReadyList+0xbc>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d207      	bcs.n	800ecb0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eca0:	4b0b      	ldr	r3, [pc, #44]	; (800ecd0 <prvAddNewTaskToReadyList+0xd0>)
 800eca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eca6:	601a      	str	r2, [r3, #0]
 800eca8:	f3bf 8f4f 	dsb	sy
 800ecac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecb0:	bf00      	nop
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	20002c64 	.word	0x20002c64
 800ecbc:	20002b64 	.word	0x20002b64
 800ecc0:	20002c70 	.word	0x20002c70
 800ecc4:	20002c80 	.word	0x20002c80
 800ecc8:	20002c6c 	.word	0x20002c6c
 800eccc:	20002b68 	.word	0x20002b68
 800ecd0:	e000ed04 	.word	0xe000ed04

0800ecd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b084      	sub	sp, #16
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d017      	beq.n	800ed16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ece6:	4b13      	ldr	r3, [pc, #76]	; (800ed34 <vTaskDelay+0x60>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00a      	beq.n	800ed04 <vTaskDelay+0x30>
	__asm volatile
 800ecee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf2:	f383 8811 	msr	BASEPRI, r3
 800ecf6:	f3bf 8f6f 	isb	sy
 800ecfa:	f3bf 8f4f 	dsb	sy
 800ecfe:	60bb      	str	r3, [r7, #8]
}
 800ed00:	bf00      	nop
 800ed02:	e7fe      	b.n	800ed02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ed04:	f000 f90a 	bl	800ef1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ed08:	2100      	movs	r1, #0
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f000 fd48 	bl	800f7a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ed10:	f000 f912 	bl	800ef38 <xTaskResumeAll>
 800ed14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d107      	bne.n	800ed2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ed1c:	4b06      	ldr	r3, [pc, #24]	; (800ed38 <vTaskDelay+0x64>)
 800ed1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed22:	601a      	str	r2, [r3, #0]
 800ed24:	f3bf 8f4f 	dsb	sy
 800ed28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed2c:	bf00      	nop
 800ed2e:	3710      	adds	r7, #16
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}
 800ed34:	20002c8c 	.word	0x20002c8c
 800ed38:	e000ed04 	.word	0xe000ed04

0800ed3c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b087      	sub	sp, #28
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ed44:	2300      	movs	r3, #0
 800ed46:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d10a      	bne.n	800ed68 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800ed52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed56:	f383 8811 	msr	BASEPRI, r3
 800ed5a:	f3bf 8f6f 	isb	sy
 800ed5e:	f3bf 8f4f 	dsb	sy
 800ed62:	60fb      	str	r3, [r7, #12]
}
 800ed64:	bf00      	nop
 800ed66:	e7fe      	b.n	800ed66 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	695b      	ldr	r3, [r3, #20]
 800ed6c:	4a0a      	ldr	r2, [pc, #40]	; (800ed98 <prvTaskIsTaskSuspended+0x5c>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d10a      	bne.n	800ed88 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed76:	4a09      	ldr	r2, [pc, #36]	; (800ed9c <prvTaskIsTaskSuspended+0x60>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d005      	beq.n	800ed88 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d101      	bne.n	800ed88 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800ed84:	2301      	movs	r3, #1
 800ed86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed88:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	371c      	adds	r7, #28
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop
 800ed98:	20002c50 	.word	0x20002c50
 800ed9c:	20002c24 	.word	0x20002c24

0800eda0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b084      	sub	sp, #16
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d10a      	bne.n	800edc8 <vTaskResume+0x28>
	__asm volatile
 800edb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	60bb      	str	r3, [r7, #8]
}
 800edc4:	bf00      	nop
 800edc6:	e7fe      	b.n	800edc6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800edc8:	4b20      	ldr	r3, [pc, #128]	; (800ee4c <vTaskResume+0xac>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	68fa      	ldr	r2, [r7, #12]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d037      	beq.n	800ee42 <vTaskResume+0xa2>
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d034      	beq.n	800ee42 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800edd8:	f000 fe74 	bl	800fac4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	f7ff ffad 	bl	800ed3c <prvTaskIsTaskSuspended>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d02a      	beq.n	800ee3e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	3304      	adds	r3, #4
 800edec:	4618      	mov	r0, r3
 800edee:	f7ff fa02 	bl	800e1f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edf6:	2201      	movs	r2, #1
 800edf8:	409a      	lsls	r2, r3
 800edfa:	4b15      	ldr	r3, [pc, #84]	; (800ee50 <vTaskResume+0xb0>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	4313      	orrs	r3, r2
 800ee00:	4a13      	ldr	r2, [pc, #76]	; (800ee50 <vTaskResume+0xb0>)
 800ee02:	6013      	str	r3, [r2, #0]
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee08:	4613      	mov	r3, r2
 800ee0a:	009b      	lsls	r3, r3, #2
 800ee0c:	4413      	add	r3, r2
 800ee0e:	009b      	lsls	r3, r3, #2
 800ee10:	4a10      	ldr	r2, [pc, #64]	; (800ee54 <vTaskResume+0xb4>)
 800ee12:	441a      	add	r2, r3
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	3304      	adds	r3, #4
 800ee18:	4619      	mov	r1, r3
 800ee1a:	4610      	mov	r0, r2
 800ee1c:	f7ff f98e 	bl	800e13c <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee24:	4b09      	ldr	r3, [pc, #36]	; (800ee4c <vTaskResume+0xac>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d307      	bcc.n	800ee3e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800ee2e:	4b0a      	ldr	r3, [pc, #40]	; (800ee58 <vTaskResume+0xb8>)
 800ee30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	f3bf 8f4f 	dsb	sy
 800ee3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800ee3e:	f000 fe71 	bl	800fb24 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee42:	bf00      	nop
 800ee44:	3710      	adds	r7, #16
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	20002b64 	.word	0x20002b64
 800ee50:	20002c6c 	.word	0x20002c6c
 800ee54:	20002b68 	.word	0x20002b68
 800ee58:	e000ed04 	.word	0xe000ed04

0800ee5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b08a      	sub	sp, #40	; 0x28
 800ee60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ee62:	2300      	movs	r3, #0
 800ee64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ee66:	2300      	movs	r3, #0
 800ee68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ee6a:	463a      	mov	r2, r7
 800ee6c:	1d39      	adds	r1, r7, #4
 800ee6e:	f107 0308 	add.w	r3, r7, #8
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7f2 f88a 	bl	8000f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ee78:	6839      	ldr	r1, [r7, #0]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	68ba      	ldr	r2, [r7, #8]
 800ee7e:	9202      	str	r2, [sp, #8]
 800ee80:	9301      	str	r3, [sp, #4]
 800ee82:	2300      	movs	r3, #0
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	2300      	movs	r3, #0
 800ee88:	460a      	mov	r2, r1
 800ee8a:	491e      	ldr	r1, [pc, #120]	; (800ef04 <vTaskStartScheduler+0xa8>)
 800ee8c:	481e      	ldr	r0, [pc, #120]	; (800ef08 <vTaskStartScheduler+0xac>)
 800ee8e:	f7ff fd8d 	bl	800e9ac <xTaskCreateStatic>
 800ee92:	4603      	mov	r3, r0
 800ee94:	4a1d      	ldr	r2, [pc, #116]	; (800ef0c <vTaskStartScheduler+0xb0>)
 800ee96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ee98:	4b1c      	ldr	r3, [pc, #112]	; (800ef0c <vTaskStartScheduler+0xb0>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d002      	beq.n	800eea6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800eea0:	2301      	movs	r3, #1
 800eea2:	617b      	str	r3, [r7, #20]
 800eea4:	e001      	b.n	800eeaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800eea6:	2300      	movs	r3, #0
 800eea8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d116      	bne.n	800eede <vTaskStartScheduler+0x82>
	__asm volatile
 800eeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb4:	f383 8811 	msr	BASEPRI, r3
 800eeb8:	f3bf 8f6f 	isb	sy
 800eebc:	f3bf 8f4f 	dsb	sy
 800eec0:	613b      	str	r3, [r7, #16]
}
 800eec2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800eec4:	4b12      	ldr	r3, [pc, #72]	; (800ef10 <vTaskStartScheduler+0xb4>)
 800eec6:	f04f 32ff 	mov.w	r2, #4294967295
 800eeca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800eecc:	4b11      	ldr	r3, [pc, #68]	; (800ef14 <vTaskStartScheduler+0xb8>)
 800eece:	2201      	movs	r2, #1
 800eed0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800eed2:	4b11      	ldr	r3, [pc, #68]	; (800ef18 <vTaskStartScheduler+0xbc>)
 800eed4:	2200      	movs	r2, #0
 800eed6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800eed8:	f000 fd52 	bl	800f980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800eedc:	e00e      	b.n	800eefc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eee4:	d10a      	bne.n	800eefc <vTaskStartScheduler+0xa0>
	__asm volatile
 800eee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeea:	f383 8811 	msr	BASEPRI, r3
 800eeee:	f3bf 8f6f 	isb	sy
 800eef2:	f3bf 8f4f 	dsb	sy
 800eef6:	60fb      	str	r3, [r7, #12]
}
 800eef8:	bf00      	nop
 800eefa:	e7fe      	b.n	800eefa <vTaskStartScheduler+0x9e>
}
 800eefc:	bf00      	nop
 800eefe:	3718      	adds	r7, #24
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	080154e8 	.word	0x080154e8
 800ef08:	0800f4ad 	.word	0x0800f4ad
 800ef0c:	20002c88 	.word	0x20002c88
 800ef10:	20002c84 	.word	0x20002c84
 800ef14:	20002c70 	.word	0x20002c70
 800ef18:	20002c68 	.word	0x20002c68

0800ef1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ef20:	4b04      	ldr	r3, [pc, #16]	; (800ef34 <vTaskSuspendAll+0x18>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	3301      	adds	r3, #1
 800ef26:	4a03      	ldr	r2, [pc, #12]	; (800ef34 <vTaskSuspendAll+0x18>)
 800ef28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ef2a:	bf00      	nop
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr
 800ef34:	20002c8c 	.word	0x20002c8c

0800ef38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ef42:	2300      	movs	r3, #0
 800ef44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ef46:	4b41      	ldr	r3, [pc, #260]	; (800f04c <xTaskResumeAll+0x114>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d10a      	bne.n	800ef64 <xTaskResumeAll+0x2c>
	__asm volatile
 800ef4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef52:	f383 8811 	msr	BASEPRI, r3
 800ef56:	f3bf 8f6f 	isb	sy
 800ef5a:	f3bf 8f4f 	dsb	sy
 800ef5e:	603b      	str	r3, [r7, #0]
}
 800ef60:	bf00      	nop
 800ef62:	e7fe      	b.n	800ef62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ef64:	f000 fdae 	bl	800fac4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ef68:	4b38      	ldr	r3, [pc, #224]	; (800f04c <xTaskResumeAll+0x114>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	3b01      	subs	r3, #1
 800ef6e:	4a37      	ldr	r2, [pc, #220]	; (800f04c <xTaskResumeAll+0x114>)
 800ef70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef72:	4b36      	ldr	r3, [pc, #216]	; (800f04c <xTaskResumeAll+0x114>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d161      	bne.n	800f03e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ef7a:	4b35      	ldr	r3, [pc, #212]	; (800f050 <xTaskResumeAll+0x118>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d05d      	beq.n	800f03e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef82:	e02e      	b.n	800efe2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef84:	4b33      	ldr	r3, [pc, #204]	; (800f054 <xTaskResumeAll+0x11c>)
 800ef86:	68db      	ldr	r3, [r3, #12]
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	3318      	adds	r3, #24
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7ff f930 	bl	800e1f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	3304      	adds	r3, #4
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7ff f92b 	bl	800e1f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efa4:	2201      	movs	r2, #1
 800efa6:	409a      	lsls	r2, r3
 800efa8:	4b2b      	ldr	r3, [pc, #172]	; (800f058 <xTaskResumeAll+0x120>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4313      	orrs	r3, r2
 800efae:	4a2a      	ldr	r2, [pc, #168]	; (800f058 <xTaskResumeAll+0x120>)
 800efb0:	6013      	str	r3, [r2, #0]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efb6:	4613      	mov	r3, r2
 800efb8:	009b      	lsls	r3, r3, #2
 800efba:	4413      	add	r3, r2
 800efbc:	009b      	lsls	r3, r3, #2
 800efbe:	4a27      	ldr	r2, [pc, #156]	; (800f05c <xTaskResumeAll+0x124>)
 800efc0:	441a      	add	r2, r3
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	3304      	adds	r3, #4
 800efc6:	4619      	mov	r1, r3
 800efc8:	4610      	mov	r0, r2
 800efca:	f7ff f8b7 	bl	800e13c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efd2:	4b23      	ldr	r3, [pc, #140]	; (800f060 <xTaskResumeAll+0x128>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efd8:	429a      	cmp	r2, r3
 800efda:	d302      	bcc.n	800efe2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800efdc:	4b21      	ldr	r3, [pc, #132]	; (800f064 <xTaskResumeAll+0x12c>)
 800efde:	2201      	movs	r2, #1
 800efe0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800efe2:	4b1c      	ldr	r3, [pc, #112]	; (800f054 <xTaskResumeAll+0x11c>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d1cc      	bne.n	800ef84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d001      	beq.n	800eff4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eff0:	f000 fb12 	bl	800f618 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eff4:	4b1c      	ldr	r3, [pc, #112]	; (800f068 <xTaskResumeAll+0x130>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d010      	beq.n	800f022 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f000:	f000 f836 	bl	800f070 <xTaskIncrementTick>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d002      	beq.n	800f010 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f00a:	4b16      	ldr	r3, [pc, #88]	; (800f064 <xTaskResumeAll+0x12c>)
 800f00c:	2201      	movs	r2, #1
 800f00e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	3b01      	subs	r3, #1
 800f014:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d1f1      	bne.n	800f000 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f01c:	4b12      	ldr	r3, [pc, #72]	; (800f068 <xTaskResumeAll+0x130>)
 800f01e:	2200      	movs	r2, #0
 800f020:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f022:	4b10      	ldr	r3, [pc, #64]	; (800f064 <xTaskResumeAll+0x12c>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d009      	beq.n	800f03e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f02a:	2301      	movs	r3, #1
 800f02c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f02e:	4b0f      	ldr	r3, [pc, #60]	; (800f06c <xTaskResumeAll+0x134>)
 800f030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f034:	601a      	str	r2, [r3, #0]
 800f036:	f3bf 8f4f 	dsb	sy
 800f03a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f03e:	f000 fd71 	bl	800fb24 <vPortExitCritical>

	return xAlreadyYielded;
 800f042:	68bb      	ldr	r3, [r7, #8]
}
 800f044:	4618      	mov	r0, r3
 800f046:	3710      	adds	r7, #16
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}
 800f04c:	20002c8c 	.word	0x20002c8c
 800f050:	20002c64 	.word	0x20002c64
 800f054:	20002c24 	.word	0x20002c24
 800f058:	20002c6c 	.word	0x20002c6c
 800f05c:	20002b68 	.word	0x20002b68
 800f060:	20002b64 	.word	0x20002b64
 800f064:	20002c78 	.word	0x20002c78
 800f068:	20002c74 	.word	0x20002c74
 800f06c:	e000ed04 	.word	0xe000ed04

0800f070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b086      	sub	sp, #24
 800f074:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f076:	2300      	movs	r3, #0
 800f078:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f07a:	4b4e      	ldr	r3, [pc, #312]	; (800f1b4 <xTaskIncrementTick+0x144>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	f040 808e 	bne.w	800f1a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f084:	4b4c      	ldr	r3, [pc, #304]	; (800f1b8 <xTaskIncrementTick+0x148>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	3301      	adds	r3, #1
 800f08a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f08c:	4a4a      	ldr	r2, [pc, #296]	; (800f1b8 <xTaskIncrementTick+0x148>)
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d120      	bne.n	800f0da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f098:	4b48      	ldr	r3, [pc, #288]	; (800f1bc <xTaskIncrementTick+0x14c>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d00a      	beq.n	800f0b8 <xTaskIncrementTick+0x48>
	__asm volatile
 800f0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a6:	f383 8811 	msr	BASEPRI, r3
 800f0aa:	f3bf 8f6f 	isb	sy
 800f0ae:	f3bf 8f4f 	dsb	sy
 800f0b2:	603b      	str	r3, [r7, #0]
}
 800f0b4:	bf00      	nop
 800f0b6:	e7fe      	b.n	800f0b6 <xTaskIncrementTick+0x46>
 800f0b8:	4b40      	ldr	r3, [pc, #256]	; (800f1bc <xTaskIncrementTick+0x14c>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	60fb      	str	r3, [r7, #12]
 800f0be:	4b40      	ldr	r3, [pc, #256]	; (800f1c0 <xTaskIncrementTick+0x150>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	4a3e      	ldr	r2, [pc, #248]	; (800f1bc <xTaskIncrementTick+0x14c>)
 800f0c4:	6013      	str	r3, [r2, #0]
 800f0c6:	4a3e      	ldr	r2, [pc, #248]	; (800f1c0 <xTaskIncrementTick+0x150>)
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	6013      	str	r3, [r2, #0]
 800f0cc:	4b3d      	ldr	r3, [pc, #244]	; (800f1c4 <xTaskIncrementTick+0x154>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	4a3c      	ldr	r2, [pc, #240]	; (800f1c4 <xTaskIncrementTick+0x154>)
 800f0d4:	6013      	str	r3, [r2, #0]
 800f0d6:	f000 fa9f 	bl	800f618 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f0da:	4b3b      	ldr	r3, [pc, #236]	; (800f1c8 <xTaskIncrementTick+0x158>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	693a      	ldr	r2, [r7, #16]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d348      	bcc.n	800f176 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f0e4:	4b35      	ldr	r3, [pc, #212]	; (800f1bc <xTaskIncrementTick+0x14c>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d104      	bne.n	800f0f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0ee:	4b36      	ldr	r3, [pc, #216]	; (800f1c8 <xTaskIncrementTick+0x158>)
 800f0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f0f4:	601a      	str	r2, [r3, #0]
					break;
 800f0f6:	e03e      	b.n	800f176 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0f8:	4b30      	ldr	r3, [pc, #192]	; (800f1bc <xTaskIncrementTick+0x14c>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	68db      	ldr	r3, [r3, #12]
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f108:	693a      	ldr	r2, [r7, #16]
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d203      	bcs.n	800f118 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f110:	4a2d      	ldr	r2, [pc, #180]	; (800f1c8 <xTaskIncrementTick+0x158>)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f116:	e02e      	b.n	800f176 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	3304      	adds	r3, #4
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7ff f86a 	bl	800e1f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f126:	2b00      	cmp	r3, #0
 800f128:	d004      	beq.n	800f134 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	3318      	adds	r3, #24
 800f12e:	4618      	mov	r0, r3
 800f130:	f7ff f861 	bl	800e1f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f138:	2201      	movs	r2, #1
 800f13a:	409a      	lsls	r2, r3
 800f13c:	4b23      	ldr	r3, [pc, #140]	; (800f1cc <xTaskIncrementTick+0x15c>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4313      	orrs	r3, r2
 800f142:	4a22      	ldr	r2, [pc, #136]	; (800f1cc <xTaskIncrementTick+0x15c>)
 800f144:	6013      	str	r3, [r2, #0]
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f14a:	4613      	mov	r3, r2
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	4413      	add	r3, r2
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	4a1f      	ldr	r2, [pc, #124]	; (800f1d0 <xTaskIncrementTick+0x160>)
 800f154:	441a      	add	r2, r3
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	3304      	adds	r3, #4
 800f15a:	4619      	mov	r1, r3
 800f15c:	4610      	mov	r0, r2
 800f15e:	f7fe ffed 	bl	800e13c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f166:	4b1b      	ldr	r3, [pc, #108]	; (800f1d4 <xTaskIncrementTick+0x164>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d3b9      	bcc.n	800f0e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f170:	2301      	movs	r3, #1
 800f172:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f174:	e7b6      	b.n	800f0e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f176:	4b17      	ldr	r3, [pc, #92]	; (800f1d4 <xTaskIncrementTick+0x164>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f17c:	4914      	ldr	r1, [pc, #80]	; (800f1d0 <xTaskIncrementTick+0x160>)
 800f17e:	4613      	mov	r3, r2
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	4413      	add	r3, r2
 800f184:	009b      	lsls	r3, r3, #2
 800f186:	440b      	add	r3, r1
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d901      	bls.n	800f192 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800f18e:	2301      	movs	r3, #1
 800f190:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f192:	4b11      	ldr	r3, [pc, #68]	; (800f1d8 <xTaskIncrementTick+0x168>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d007      	beq.n	800f1aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800f19a:	2301      	movs	r3, #1
 800f19c:	617b      	str	r3, [r7, #20]
 800f19e:	e004      	b.n	800f1aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f1a0:	4b0e      	ldr	r3, [pc, #56]	; (800f1dc <xTaskIncrementTick+0x16c>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	4a0d      	ldr	r2, [pc, #52]	; (800f1dc <xTaskIncrementTick+0x16c>)
 800f1a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f1aa:	697b      	ldr	r3, [r7, #20]
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3718      	adds	r7, #24
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	20002c8c 	.word	0x20002c8c
 800f1b8:	20002c68 	.word	0x20002c68
 800f1bc:	20002c1c 	.word	0x20002c1c
 800f1c0:	20002c20 	.word	0x20002c20
 800f1c4:	20002c7c 	.word	0x20002c7c
 800f1c8:	20002c84 	.word	0x20002c84
 800f1cc:	20002c6c 	.word	0x20002c6c
 800f1d0:	20002b68 	.word	0x20002b68
 800f1d4:	20002b64 	.word	0x20002b64
 800f1d8:	20002c78 	.word	0x20002c78
 800f1dc:	20002c74 	.word	0x20002c74

0800f1e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b087      	sub	sp, #28
 800f1e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f1e6:	4b27      	ldr	r3, [pc, #156]	; (800f284 <vTaskSwitchContext+0xa4>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d003      	beq.n	800f1f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f1ee:	4b26      	ldr	r3, [pc, #152]	; (800f288 <vTaskSwitchContext+0xa8>)
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f1f4:	e03f      	b.n	800f276 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800f1f6:	4b24      	ldr	r3, [pc, #144]	; (800f288 <vTaskSwitchContext+0xa8>)
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1fc:	4b23      	ldr	r3, [pc, #140]	; (800f28c <vTaskSwitchContext+0xac>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	fab3 f383 	clz	r3, r3
 800f208:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f20a:	7afb      	ldrb	r3, [r7, #11]
 800f20c:	f1c3 031f 	rsb	r3, r3, #31
 800f210:	617b      	str	r3, [r7, #20]
 800f212:	491f      	ldr	r1, [pc, #124]	; (800f290 <vTaskSwitchContext+0xb0>)
 800f214:	697a      	ldr	r2, [r7, #20]
 800f216:	4613      	mov	r3, r2
 800f218:	009b      	lsls	r3, r3, #2
 800f21a:	4413      	add	r3, r2
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	440b      	add	r3, r1
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d10a      	bne.n	800f23c <vTaskSwitchContext+0x5c>
	__asm volatile
 800f226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f22a:	f383 8811 	msr	BASEPRI, r3
 800f22e:	f3bf 8f6f 	isb	sy
 800f232:	f3bf 8f4f 	dsb	sy
 800f236:	607b      	str	r3, [r7, #4]
}
 800f238:	bf00      	nop
 800f23a:	e7fe      	b.n	800f23a <vTaskSwitchContext+0x5a>
 800f23c:	697a      	ldr	r2, [r7, #20]
 800f23e:	4613      	mov	r3, r2
 800f240:	009b      	lsls	r3, r3, #2
 800f242:	4413      	add	r3, r2
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	4a12      	ldr	r2, [pc, #72]	; (800f290 <vTaskSwitchContext+0xb0>)
 800f248:	4413      	add	r3, r2
 800f24a:	613b      	str	r3, [r7, #16]
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	685a      	ldr	r2, [r3, #4]
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	605a      	str	r2, [r3, #4]
 800f256:	693b      	ldr	r3, [r7, #16]
 800f258:	685a      	ldr	r2, [r3, #4]
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	3308      	adds	r3, #8
 800f25e:	429a      	cmp	r2, r3
 800f260:	d104      	bne.n	800f26c <vTaskSwitchContext+0x8c>
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	685a      	ldr	r2, [r3, #4]
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	605a      	str	r2, [r3, #4]
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	68db      	ldr	r3, [r3, #12]
 800f272:	4a08      	ldr	r2, [pc, #32]	; (800f294 <vTaskSwitchContext+0xb4>)
 800f274:	6013      	str	r3, [r2, #0]
}
 800f276:	bf00      	nop
 800f278:	371c      	adds	r7, #28
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	20002c8c 	.word	0x20002c8c
 800f288:	20002c78 	.word	0x20002c78
 800f28c:	20002c6c 	.word	0x20002c6c
 800f290:	20002b68 	.word	0x20002b68
 800f294:	20002b64 	.word	0x20002b64

0800f298 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b084      	sub	sp, #16
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d10a      	bne.n	800f2be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ac:	f383 8811 	msr	BASEPRI, r3
 800f2b0:	f3bf 8f6f 	isb	sy
 800f2b4:	f3bf 8f4f 	dsb	sy
 800f2b8:	60fb      	str	r3, [r7, #12]
}
 800f2ba:	bf00      	nop
 800f2bc:	e7fe      	b.n	800f2bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f2be:	4b07      	ldr	r3, [pc, #28]	; (800f2dc <vTaskPlaceOnEventList+0x44>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	3318      	adds	r3, #24
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f7fe ff5c 	bl	800e184 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f2cc:	2101      	movs	r1, #1
 800f2ce:	6838      	ldr	r0, [r7, #0]
 800f2d0:	f000 fa66 	bl	800f7a0 <prvAddCurrentTaskToDelayedList>
}
 800f2d4:	bf00      	nop
 800f2d6:	3710      	adds	r7, #16
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	20002b64 	.word	0x20002b64

0800f2e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b086      	sub	sp, #24
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	68db      	ldr	r3, [r3, #12]
 800f2ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d10a      	bne.n	800f30c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fa:	f383 8811 	msr	BASEPRI, r3
 800f2fe:	f3bf 8f6f 	isb	sy
 800f302:	f3bf 8f4f 	dsb	sy
 800f306:	60fb      	str	r3, [r7, #12]
}
 800f308:	bf00      	nop
 800f30a:	e7fe      	b.n	800f30a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	3318      	adds	r3, #24
 800f310:	4618      	mov	r0, r3
 800f312:	f7fe ff70 	bl	800e1f6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f316:	4b1d      	ldr	r3, [pc, #116]	; (800f38c <xTaskRemoveFromEventList+0xac>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d11c      	bne.n	800f358 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	3304      	adds	r3, #4
 800f322:	4618      	mov	r0, r3
 800f324:	f7fe ff67 	bl	800e1f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f32c:	2201      	movs	r2, #1
 800f32e:	409a      	lsls	r2, r3
 800f330:	4b17      	ldr	r3, [pc, #92]	; (800f390 <xTaskRemoveFromEventList+0xb0>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	4313      	orrs	r3, r2
 800f336:	4a16      	ldr	r2, [pc, #88]	; (800f390 <xTaskRemoveFromEventList+0xb0>)
 800f338:	6013      	str	r3, [r2, #0]
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f33e:	4613      	mov	r3, r2
 800f340:	009b      	lsls	r3, r3, #2
 800f342:	4413      	add	r3, r2
 800f344:	009b      	lsls	r3, r3, #2
 800f346:	4a13      	ldr	r2, [pc, #76]	; (800f394 <xTaskRemoveFromEventList+0xb4>)
 800f348:	441a      	add	r2, r3
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	3304      	adds	r3, #4
 800f34e:	4619      	mov	r1, r3
 800f350:	4610      	mov	r0, r2
 800f352:	f7fe fef3 	bl	800e13c <vListInsertEnd>
 800f356:	e005      	b.n	800f364 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	3318      	adds	r3, #24
 800f35c:	4619      	mov	r1, r3
 800f35e:	480e      	ldr	r0, [pc, #56]	; (800f398 <xTaskRemoveFromEventList+0xb8>)
 800f360:	f7fe feec 	bl	800e13c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f368:	4b0c      	ldr	r3, [pc, #48]	; (800f39c <xTaskRemoveFromEventList+0xbc>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f36e:	429a      	cmp	r2, r3
 800f370:	d905      	bls.n	800f37e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f372:	2301      	movs	r3, #1
 800f374:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f376:	4b0a      	ldr	r3, [pc, #40]	; (800f3a0 <xTaskRemoveFromEventList+0xc0>)
 800f378:	2201      	movs	r2, #1
 800f37a:	601a      	str	r2, [r3, #0]
 800f37c:	e001      	b.n	800f382 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f37e:	2300      	movs	r3, #0
 800f380:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f382:	697b      	ldr	r3, [r7, #20]
}
 800f384:	4618      	mov	r0, r3
 800f386:	3718      	adds	r7, #24
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	20002c8c 	.word	0x20002c8c
 800f390:	20002c6c 	.word	0x20002c6c
 800f394:	20002b68 	.word	0x20002b68
 800f398:	20002c24 	.word	0x20002c24
 800f39c:	20002b64 	.word	0x20002b64
 800f3a0:	20002c78 	.word	0x20002c78

0800f3a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b083      	sub	sp, #12
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f3ac:	4b06      	ldr	r3, [pc, #24]	; (800f3c8 <vTaskInternalSetTimeOutState+0x24>)
 800f3ae:	681a      	ldr	r2, [r3, #0]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f3b4:	4b05      	ldr	r3, [pc, #20]	; (800f3cc <vTaskInternalSetTimeOutState+0x28>)
 800f3b6:	681a      	ldr	r2, [r3, #0]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	605a      	str	r2, [r3, #4]
}
 800f3bc:	bf00      	nop
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr
 800f3c8:	20002c7c 	.word	0x20002c7c
 800f3cc:	20002c68 	.word	0x20002c68

0800f3d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b088      	sub	sp, #32
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d10a      	bne.n	800f3f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e4:	f383 8811 	msr	BASEPRI, r3
 800f3e8:	f3bf 8f6f 	isb	sy
 800f3ec:	f3bf 8f4f 	dsb	sy
 800f3f0:	613b      	str	r3, [r7, #16]
}
 800f3f2:	bf00      	nop
 800f3f4:	e7fe      	b.n	800f3f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d10a      	bne.n	800f412 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f400:	f383 8811 	msr	BASEPRI, r3
 800f404:	f3bf 8f6f 	isb	sy
 800f408:	f3bf 8f4f 	dsb	sy
 800f40c:	60fb      	str	r3, [r7, #12]
}
 800f40e:	bf00      	nop
 800f410:	e7fe      	b.n	800f410 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f412:	f000 fb57 	bl	800fac4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f416:	4b1d      	ldr	r3, [pc, #116]	; (800f48c <xTaskCheckForTimeOut+0xbc>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	69ba      	ldr	r2, [r7, #24]
 800f422:	1ad3      	subs	r3, r2, r3
 800f424:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f42e:	d102      	bne.n	800f436 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f430:	2300      	movs	r3, #0
 800f432:	61fb      	str	r3, [r7, #28]
 800f434:	e023      	b.n	800f47e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681a      	ldr	r2, [r3, #0]
 800f43a:	4b15      	ldr	r3, [pc, #84]	; (800f490 <xTaskCheckForTimeOut+0xc0>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	429a      	cmp	r2, r3
 800f440:	d007      	beq.n	800f452 <xTaskCheckForTimeOut+0x82>
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	69ba      	ldr	r2, [r7, #24]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d302      	bcc.n	800f452 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f44c:	2301      	movs	r3, #1
 800f44e:	61fb      	str	r3, [r7, #28]
 800f450:	e015      	b.n	800f47e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	697a      	ldr	r2, [r7, #20]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d20b      	bcs.n	800f474 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	1ad2      	subs	r2, r2, r3
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f7ff ff9b 	bl	800f3a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f46e:	2300      	movs	r3, #0
 800f470:	61fb      	str	r3, [r7, #28]
 800f472:	e004      	b.n	800f47e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	2200      	movs	r2, #0
 800f478:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f47a:	2301      	movs	r3, #1
 800f47c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f47e:	f000 fb51 	bl	800fb24 <vPortExitCritical>

	return xReturn;
 800f482:	69fb      	ldr	r3, [r7, #28]
}
 800f484:	4618      	mov	r0, r3
 800f486:	3720      	adds	r7, #32
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	20002c68 	.word	0x20002c68
 800f490:	20002c7c 	.word	0x20002c7c

0800f494 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f494:	b480      	push	{r7}
 800f496:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f498:	4b03      	ldr	r3, [pc, #12]	; (800f4a8 <vTaskMissedYield+0x14>)
 800f49a:	2201      	movs	r2, #1
 800f49c:	601a      	str	r2, [r3, #0]
}
 800f49e:	bf00      	nop
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a6:	4770      	bx	lr
 800f4a8:	20002c78 	.word	0x20002c78

0800f4ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f4b4:	f000 f852 	bl	800f55c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f4b8:	4b06      	ldr	r3, [pc, #24]	; (800f4d4 <prvIdleTask+0x28>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d9f9      	bls.n	800f4b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f4c0:	4b05      	ldr	r3, [pc, #20]	; (800f4d8 <prvIdleTask+0x2c>)
 800f4c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4c6:	601a      	str	r2, [r3, #0]
 800f4c8:	f3bf 8f4f 	dsb	sy
 800f4cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f4d0:	e7f0      	b.n	800f4b4 <prvIdleTask+0x8>
 800f4d2:	bf00      	nop
 800f4d4:	20002b68 	.word	0x20002b68
 800f4d8:	e000ed04 	.word	0xe000ed04

0800f4dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	607b      	str	r3, [r7, #4]
 800f4e6:	e00c      	b.n	800f502 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f4e8:	687a      	ldr	r2, [r7, #4]
 800f4ea:	4613      	mov	r3, r2
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	4413      	add	r3, r2
 800f4f0:	009b      	lsls	r3, r3, #2
 800f4f2:	4a12      	ldr	r2, [pc, #72]	; (800f53c <prvInitialiseTaskLists+0x60>)
 800f4f4:	4413      	add	r3, r2
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fe fdf3 	bl	800e0e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	3301      	adds	r3, #1
 800f500:	607b      	str	r3, [r7, #4]
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2b06      	cmp	r3, #6
 800f506:	d9ef      	bls.n	800f4e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f508:	480d      	ldr	r0, [pc, #52]	; (800f540 <prvInitialiseTaskLists+0x64>)
 800f50a:	f7fe fdea 	bl	800e0e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f50e:	480d      	ldr	r0, [pc, #52]	; (800f544 <prvInitialiseTaskLists+0x68>)
 800f510:	f7fe fde7 	bl	800e0e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f514:	480c      	ldr	r0, [pc, #48]	; (800f548 <prvInitialiseTaskLists+0x6c>)
 800f516:	f7fe fde4 	bl	800e0e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f51a:	480c      	ldr	r0, [pc, #48]	; (800f54c <prvInitialiseTaskLists+0x70>)
 800f51c:	f7fe fde1 	bl	800e0e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f520:	480b      	ldr	r0, [pc, #44]	; (800f550 <prvInitialiseTaskLists+0x74>)
 800f522:	f7fe fdde 	bl	800e0e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f526:	4b0b      	ldr	r3, [pc, #44]	; (800f554 <prvInitialiseTaskLists+0x78>)
 800f528:	4a05      	ldr	r2, [pc, #20]	; (800f540 <prvInitialiseTaskLists+0x64>)
 800f52a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f52c:	4b0a      	ldr	r3, [pc, #40]	; (800f558 <prvInitialiseTaskLists+0x7c>)
 800f52e:	4a05      	ldr	r2, [pc, #20]	; (800f544 <prvInitialiseTaskLists+0x68>)
 800f530:	601a      	str	r2, [r3, #0]
}
 800f532:	bf00      	nop
 800f534:	3708      	adds	r7, #8
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	20002b68 	.word	0x20002b68
 800f540:	20002bf4 	.word	0x20002bf4
 800f544:	20002c08 	.word	0x20002c08
 800f548:	20002c24 	.word	0x20002c24
 800f54c:	20002c38 	.word	0x20002c38
 800f550:	20002c50 	.word	0x20002c50
 800f554:	20002c1c 	.word	0x20002c1c
 800f558:	20002c20 	.word	0x20002c20

0800f55c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f562:	e019      	b.n	800f598 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f564:	f000 faae 	bl	800fac4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f568:	4b10      	ldr	r3, [pc, #64]	; (800f5ac <prvCheckTasksWaitingTermination+0x50>)
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	68db      	ldr	r3, [r3, #12]
 800f56e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	3304      	adds	r3, #4
 800f574:	4618      	mov	r0, r3
 800f576:	f7fe fe3e 	bl	800e1f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f57a:	4b0d      	ldr	r3, [pc, #52]	; (800f5b0 <prvCheckTasksWaitingTermination+0x54>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	3b01      	subs	r3, #1
 800f580:	4a0b      	ldr	r2, [pc, #44]	; (800f5b0 <prvCheckTasksWaitingTermination+0x54>)
 800f582:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f584:	4b0b      	ldr	r3, [pc, #44]	; (800f5b4 <prvCheckTasksWaitingTermination+0x58>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	3b01      	subs	r3, #1
 800f58a:	4a0a      	ldr	r2, [pc, #40]	; (800f5b4 <prvCheckTasksWaitingTermination+0x58>)
 800f58c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f58e:	f000 fac9 	bl	800fb24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 f810 	bl	800f5b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f598:	4b06      	ldr	r3, [pc, #24]	; (800f5b4 <prvCheckTasksWaitingTermination+0x58>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d1e1      	bne.n	800f564 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f5a0:	bf00      	nop
 800f5a2:	bf00      	nop
 800f5a4:	3708      	adds	r7, #8
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	bf00      	nop
 800f5ac:	20002c38 	.word	0x20002c38
 800f5b0:	20002c64 	.word	0x20002c64
 800f5b4:	20002c4c 	.word	0x20002c4c

0800f5b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d108      	bne.n	800f5dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f000 fc26 	bl	800fe20 <vPortFree>
				vPortFree( pxTCB );
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f000 fc23 	bl	800fe20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f5da:	e018      	b.n	800f60e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f5e2:	2b01      	cmp	r3, #1
 800f5e4:	d103      	bne.n	800f5ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f000 fc1a 	bl	800fe20 <vPortFree>
	}
 800f5ec:	e00f      	b.n	800f60e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f5f4:	2b02      	cmp	r3, #2
 800f5f6:	d00a      	beq.n	800f60e <prvDeleteTCB+0x56>
	__asm volatile
 800f5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5fc:	f383 8811 	msr	BASEPRI, r3
 800f600:	f3bf 8f6f 	isb	sy
 800f604:	f3bf 8f4f 	dsb	sy
 800f608:	60fb      	str	r3, [r7, #12]
}
 800f60a:	bf00      	nop
 800f60c:	e7fe      	b.n	800f60c <prvDeleteTCB+0x54>
	}
 800f60e:	bf00      	nop
 800f610:	3710      	adds	r7, #16
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
	...

0800f618 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f618:	b480      	push	{r7}
 800f61a:	b083      	sub	sp, #12
 800f61c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f61e:	4b0c      	ldr	r3, [pc, #48]	; (800f650 <prvResetNextTaskUnblockTime+0x38>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d104      	bne.n	800f632 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f628:	4b0a      	ldr	r3, [pc, #40]	; (800f654 <prvResetNextTaskUnblockTime+0x3c>)
 800f62a:	f04f 32ff 	mov.w	r2, #4294967295
 800f62e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f630:	e008      	b.n	800f644 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f632:	4b07      	ldr	r3, [pc, #28]	; (800f650 <prvResetNextTaskUnblockTime+0x38>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	4a04      	ldr	r2, [pc, #16]	; (800f654 <prvResetNextTaskUnblockTime+0x3c>)
 800f642:	6013      	str	r3, [r2, #0]
}
 800f644:	bf00      	nop
 800f646:	370c      	adds	r7, #12
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr
 800f650:	20002c1c 	.word	0x20002c1c
 800f654:	20002c84 	.word	0x20002c84

0800f658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f65e:	4b0b      	ldr	r3, [pc, #44]	; (800f68c <xTaskGetSchedulerState+0x34>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d102      	bne.n	800f66c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f666:	2301      	movs	r3, #1
 800f668:	607b      	str	r3, [r7, #4]
 800f66a:	e008      	b.n	800f67e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f66c:	4b08      	ldr	r3, [pc, #32]	; (800f690 <xTaskGetSchedulerState+0x38>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d102      	bne.n	800f67a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f674:	2302      	movs	r3, #2
 800f676:	607b      	str	r3, [r7, #4]
 800f678:	e001      	b.n	800f67e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f67a:	2300      	movs	r3, #0
 800f67c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f67e:	687b      	ldr	r3, [r7, #4]
	}
 800f680:	4618      	mov	r0, r3
 800f682:	370c      	adds	r7, #12
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr
 800f68c:	20002c70 	.word	0x20002c70
 800f690:	20002c8c 	.word	0x20002c8c

0800f694 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f694:	b580      	push	{r7, lr}
 800f696:	b086      	sub	sp, #24
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d06e      	beq.n	800f788 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f6aa:	4b3a      	ldr	r3, [pc, #232]	; (800f794 <xTaskPriorityDisinherit+0x100>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	693a      	ldr	r2, [r7, #16]
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d00a      	beq.n	800f6ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b8:	f383 8811 	msr	BASEPRI, r3
 800f6bc:	f3bf 8f6f 	isb	sy
 800f6c0:	f3bf 8f4f 	dsb	sy
 800f6c4:	60fb      	str	r3, [r7, #12]
}
 800f6c6:	bf00      	nop
 800f6c8:	e7fe      	b.n	800f6c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d10a      	bne.n	800f6e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d6:	f383 8811 	msr	BASEPRI, r3
 800f6da:	f3bf 8f6f 	isb	sy
 800f6de:	f3bf 8f4f 	dsb	sy
 800f6e2:	60bb      	str	r3, [r7, #8]
}
 800f6e4:	bf00      	nop
 800f6e6:	e7fe      	b.n	800f6e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6ec:	1e5a      	subs	r2, r3, #1
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	d044      	beq.n	800f788 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f702:	2b00      	cmp	r3, #0
 800f704:	d140      	bne.n	800f788 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	3304      	adds	r3, #4
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7fe fd73 	bl	800e1f6 <uxListRemove>
 800f710:	4603      	mov	r3, r0
 800f712:	2b00      	cmp	r3, #0
 800f714:	d115      	bne.n	800f742 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f71a:	491f      	ldr	r1, [pc, #124]	; (800f798 <xTaskPriorityDisinherit+0x104>)
 800f71c:	4613      	mov	r3, r2
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	4413      	add	r3, r2
 800f722:	009b      	lsls	r3, r3, #2
 800f724:	440b      	add	r3, r1
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d10a      	bne.n	800f742 <xTaskPriorityDisinherit+0xae>
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f730:	2201      	movs	r2, #1
 800f732:	fa02 f303 	lsl.w	r3, r2, r3
 800f736:	43da      	mvns	r2, r3
 800f738:	4b18      	ldr	r3, [pc, #96]	; (800f79c <xTaskPriorityDisinherit+0x108>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4013      	ands	r3, r2
 800f73e:	4a17      	ldr	r2, [pc, #92]	; (800f79c <xTaskPriorityDisinherit+0x108>)
 800f740:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f74e:	f1c3 0207 	rsb	r2, r3, #7
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f75a:	2201      	movs	r2, #1
 800f75c:	409a      	lsls	r2, r3
 800f75e:	4b0f      	ldr	r3, [pc, #60]	; (800f79c <xTaskPriorityDisinherit+0x108>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	4313      	orrs	r3, r2
 800f764:	4a0d      	ldr	r2, [pc, #52]	; (800f79c <xTaskPriorityDisinherit+0x108>)
 800f766:	6013      	str	r3, [r2, #0]
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f76c:	4613      	mov	r3, r2
 800f76e:	009b      	lsls	r3, r3, #2
 800f770:	4413      	add	r3, r2
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	4a08      	ldr	r2, [pc, #32]	; (800f798 <xTaskPriorityDisinherit+0x104>)
 800f776:	441a      	add	r2, r3
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	3304      	adds	r3, #4
 800f77c:	4619      	mov	r1, r3
 800f77e:	4610      	mov	r0, r2
 800f780:	f7fe fcdc 	bl	800e13c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f784:	2301      	movs	r3, #1
 800f786:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f788:	697b      	ldr	r3, [r7, #20]
	}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3718      	adds	r7, #24
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
 800f792:	bf00      	nop
 800f794:	20002b64 	.word	0x20002b64
 800f798:	20002b68 	.word	0x20002b68
 800f79c:	20002c6c 	.word	0x20002c6c

0800f7a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b084      	sub	sp, #16
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f7aa:	4b29      	ldr	r3, [pc, #164]	; (800f850 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7b0:	4b28      	ldr	r3, [pc, #160]	; (800f854 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	3304      	adds	r3, #4
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7fe fd1d 	bl	800e1f6 <uxListRemove>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d10b      	bne.n	800f7da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f7c2:	4b24      	ldr	r3, [pc, #144]	; (800f854 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7c8:	2201      	movs	r2, #1
 800f7ca:	fa02 f303 	lsl.w	r3, r2, r3
 800f7ce:	43da      	mvns	r2, r3
 800f7d0:	4b21      	ldr	r3, [pc, #132]	; (800f858 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4013      	ands	r3, r2
 800f7d6:	4a20      	ldr	r2, [pc, #128]	; (800f858 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f7d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e0:	d10a      	bne.n	800f7f8 <prvAddCurrentTaskToDelayedList+0x58>
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d007      	beq.n	800f7f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7e8:	4b1a      	ldr	r3, [pc, #104]	; (800f854 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	3304      	adds	r3, #4
 800f7ee:	4619      	mov	r1, r3
 800f7f0:	481a      	ldr	r0, [pc, #104]	; (800f85c <prvAddCurrentTaskToDelayedList+0xbc>)
 800f7f2:	f7fe fca3 	bl	800e13c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f7f6:	e026      	b.n	800f846 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f7f8:	68fa      	ldr	r2, [r7, #12]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f800:	4b14      	ldr	r3, [pc, #80]	; (800f854 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	68ba      	ldr	r2, [r7, #8]
 800f806:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f808:	68ba      	ldr	r2, [r7, #8]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d209      	bcs.n	800f824 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f810:	4b13      	ldr	r3, [pc, #76]	; (800f860 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f812:	681a      	ldr	r2, [r3, #0]
 800f814:	4b0f      	ldr	r3, [pc, #60]	; (800f854 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	3304      	adds	r3, #4
 800f81a:	4619      	mov	r1, r3
 800f81c:	4610      	mov	r0, r2
 800f81e:	f7fe fcb1 	bl	800e184 <vListInsert>
}
 800f822:	e010      	b.n	800f846 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f824:	4b0f      	ldr	r3, [pc, #60]	; (800f864 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f826:	681a      	ldr	r2, [r3, #0]
 800f828:	4b0a      	ldr	r3, [pc, #40]	; (800f854 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	3304      	adds	r3, #4
 800f82e:	4619      	mov	r1, r3
 800f830:	4610      	mov	r0, r2
 800f832:	f7fe fca7 	bl	800e184 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f836:	4b0c      	ldr	r3, [pc, #48]	; (800f868 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	68ba      	ldr	r2, [r7, #8]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d202      	bcs.n	800f846 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f840:	4a09      	ldr	r2, [pc, #36]	; (800f868 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	6013      	str	r3, [r2, #0]
}
 800f846:	bf00      	nop
 800f848:	3710      	adds	r7, #16
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop
 800f850:	20002c68 	.word	0x20002c68
 800f854:	20002b64 	.word	0x20002b64
 800f858:	20002c6c 	.word	0x20002c6c
 800f85c:	20002c50 	.word	0x20002c50
 800f860:	20002c20 	.word	0x20002c20
 800f864:	20002c1c 	.word	0x20002c1c
 800f868:	20002c84 	.word	0x20002c84

0800f86c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f86c:	b480      	push	{r7}
 800f86e:	b085      	sub	sp, #20
 800f870:	af00      	add	r7, sp, #0
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	3b04      	subs	r3, #4
 800f87c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	3b04      	subs	r3, #4
 800f88a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	f023 0201 	bic.w	r2, r3, #1
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	3b04      	subs	r3, #4
 800f89a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f89c:	4a0c      	ldr	r2, [pc, #48]	; (800f8d0 <pxPortInitialiseStack+0x64>)
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	3b14      	subs	r3, #20
 800f8a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f8a8:	687a      	ldr	r2, [r7, #4]
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	3b04      	subs	r3, #4
 800f8b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f06f 0202 	mvn.w	r2, #2
 800f8ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	3b20      	subs	r3, #32
 800f8c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3714      	adds	r7, #20
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ce:	4770      	bx	lr
 800f8d0:	0800f8d5 	.word	0x0800f8d5

0800f8d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b085      	sub	sp, #20
 800f8d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f8de:	4b12      	ldr	r3, [pc, #72]	; (800f928 <prvTaskExitError+0x54>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8e6:	d00a      	beq.n	800f8fe <prvTaskExitError+0x2a>
	__asm volatile
 800f8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ec:	f383 8811 	msr	BASEPRI, r3
 800f8f0:	f3bf 8f6f 	isb	sy
 800f8f4:	f3bf 8f4f 	dsb	sy
 800f8f8:	60fb      	str	r3, [r7, #12]
}
 800f8fa:	bf00      	nop
 800f8fc:	e7fe      	b.n	800f8fc <prvTaskExitError+0x28>
	__asm volatile
 800f8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f902:	f383 8811 	msr	BASEPRI, r3
 800f906:	f3bf 8f6f 	isb	sy
 800f90a:	f3bf 8f4f 	dsb	sy
 800f90e:	60bb      	str	r3, [r7, #8]
}
 800f910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f912:	bf00      	nop
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d0fc      	beq.n	800f914 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f91a:	bf00      	nop
 800f91c:	bf00      	nop
 800f91e:	3714      	adds	r7, #20
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr
 800f928:	20000018 	.word	0x20000018
 800f92c:	00000000 	.word	0x00000000

0800f930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f930:	4b07      	ldr	r3, [pc, #28]	; (800f950 <pxCurrentTCBConst2>)
 800f932:	6819      	ldr	r1, [r3, #0]
 800f934:	6808      	ldr	r0, [r1, #0]
 800f936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f93a:	f380 8809 	msr	PSP, r0
 800f93e:	f3bf 8f6f 	isb	sy
 800f942:	f04f 0000 	mov.w	r0, #0
 800f946:	f380 8811 	msr	BASEPRI, r0
 800f94a:	4770      	bx	lr
 800f94c:	f3af 8000 	nop.w

0800f950 <pxCurrentTCBConst2>:
 800f950:	20002b64 	.word	0x20002b64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f954:	bf00      	nop
 800f956:	bf00      	nop

0800f958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f958:	4808      	ldr	r0, [pc, #32]	; (800f97c <prvPortStartFirstTask+0x24>)
 800f95a:	6800      	ldr	r0, [r0, #0]
 800f95c:	6800      	ldr	r0, [r0, #0]
 800f95e:	f380 8808 	msr	MSP, r0
 800f962:	f04f 0000 	mov.w	r0, #0
 800f966:	f380 8814 	msr	CONTROL, r0
 800f96a:	b662      	cpsie	i
 800f96c:	b661      	cpsie	f
 800f96e:	f3bf 8f4f 	dsb	sy
 800f972:	f3bf 8f6f 	isb	sy
 800f976:	df00      	svc	0
 800f978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f97a:	bf00      	nop
 800f97c:	e000ed08 	.word	0xe000ed08

0800f980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b086      	sub	sp, #24
 800f984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f986:	4b46      	ldr	r3, [pc, #280]	; (800faa0 <xPortStartScheduler+0x120>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	4a46      	ldr	r2, [pc, #280]	; (800faa4 <xPortStartScheduler+0x124>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	d10a      	bne.n	800f9a6 <xPortStartScheduler+0x26>
	__asm volatile
 800f990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f994:	f383 8811 	msr	BASEPRI, r3
 800f998:	f3bf 8f6f 	isb	sy
 800f99c:	f3bf 8f4f 	dsb	sy
 800f9a0:	613b      	str	r3, [r7, #16]
}
 800f9a2:	bf00      	nop
 800f9a4:	e7fe      	b.n	800f9a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f9a6:	4b3e      	ldr	r3, [pc, #248]	; (800faa0 <xPortStartScheduler+0x120>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4a3f      	ldr	r2, [pc, #252]	; (800faa8 <xPortStartScheduler+0x128>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d10a      	bne.n	800f9c6 <xPortStartScheduler+0x46>
	__asm volatile
 800f9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b4:	f383 8811 	msr	BASEPRI, r3
 800f9b8:	f3bf 8f6f 	isb	sy
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	60fb      	str	r3, [r7, #12]
}
 800f9c2:	bf00      	nop
 800f9c4:	e7fe      	b.n	800f9c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f9c6:	4b39      	ldr	r3, [pc, #228]	; (800faac <xPortStartScheduler+0x12c>)
 800f9c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	22ff      	movs	r2, #255	; 0xff
 800f9d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f9e0:	78fb      	ldrb	r3, [r7, #3]
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f9e8:	b2da      	uxtb	r2, r3
 800f9ea:	4b31      	ldr	r3, [pc, #196]	; (800fab0 <xPortStartScheduler+0x130>)
 800f9ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f9ee:	4b31      	ldr	r3, [pc, #196]	; (800fab4 <xPortStartScheduler+0x134>)
 800f9f0:	2207      	movs	r2, #7
 800f9f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f9f4:	e009      	b.n	800fa0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f9f6:	4b2f      	ldr	r3, [pc, #188]	; (800fab4 <xPortStartScheduler+0x134>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	4a2d      	ldr	r2, [pc, #180]	; (800fab4 <xPortStartScheduler+0x134>)
 800f9fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fa00:	78fb      	ldrb	r3, [r7, #3]
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	005b      	lsls	r3, r3, #1
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa0a:	78fb      	ldrb	r3, [r7, #3]
 800fa0c:	b2db      	uxtb	r3, r3
 800fa0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa12:	2b80      	cmp	r3, #128	; 0x80
 800fa14:	d0ef      	beq.n	800f9f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fa16:	4b27      	ldr	r3, [pc, #156]	; (800fab4 <xPortStartScheduler+0x134>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f1c3 0307 	rsb	r3, r3, #7
 800fa1e:	2b04      	cmp	r3, #4
 800fa20:	d00a      	beq.n	800fa38 <xPortStartScheduler+0xb8>
	__asm volatile
 800fa22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa26:	f383 8811 	msr	BASEPRI, r3
 800fa2a:	f3bf 8f6f 	isb	sy
 800fa2e:	f3bf 8f4f 	dsb	sy
 800fa32:	60bb      	str	r3, [r7, #8]
}
 800fa34:	bf00      	nop
 800fa36:	e7fe      	b.n	800fa36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fa38:	4b1e      	ldr	r3, [pc, #120]	; (800fab4 <xPortStartScheduler+0x134>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	021b      	lsls	r3, r3, #8
 800fa3e:	4a1d      	ldr	r2, [pc, #116]	; (800fab4 <xPortStartScheduler+0x134>)
 800fa40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fa42:	4b1c      	ldr	r3, [pc, #112]	; (800fab4 <xPortStartScheduler+0x134>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fa4a:	4a1a      	ldr	r2, [pc, #104]	; (800fab4 <xPortStartScheduler+0x134>)
 800fa4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	b2da      	uxtb	r2, r3
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fa56:	4b18      	ldr	r3, [pc, #96]	; (800fab8 <xPortStartScheduler+0x138>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4a17      	ldr	r2, [pc, #92]	; (800fab8 <xPortStartScheduler+0x138>)
 800fa5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fa60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fa62:	4b15      	ldr	r3, [pc, #84]	; (800fab8 <xPortStartScheduler+0x138>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	4a14      	ldr	r2, [pc, #80]	; (800fab8 <xPortStartScheduler+0x138>)
 800fa68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fa6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fa6e:	f000 f8dd 	bl	800fc2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fa72:	4b12      	ldr	r3, [pc, #72]	; (800fabc <xPortStartScheduler+0x13c>)
 800fa74:	2200      	movs	r2, #0
 800fa76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fa78:	f000 f8fc 	bl	800fc74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fa7c:	4b10      	ldr	r3, [pc, #64]	; (800fac0 <xPortStartScheduler+0x140>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a0f      	ldr	r2, [pc, #60]	; (800fac0 <xPortStartScheduler+0x140>)
 800fa82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fa86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fa88:	f7ff ff66 	bl	800f958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fa8c:	f7ff fba8 	bl	800f1e0 <vTaskSwitchContext>
	prvTaskExitError();
 800fa90:	f7ff ff20 	bl	800f8d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fa94:	2300      	movs	r3, #0
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	3718      	adds	r7, #24
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
 800fa9e:	bf00      	nop
 800faa0:	e000ed00 	.word	0xe000ed00
 800faa4:	410fc271 	.word	0x410fc271
 800faa8:	410fc270 	.word	0x410fc270
 800faac:	e000e400 	.word	0xe000e400
 800fab0:	20002c90 	.word	0x20002c90
 800fab4:	20002c94 	.word	0x20002c94
 800fab8:	e000ed20 	.word	0xe000ed20
 800fabc:	20000018 	.word	0x20000018
 800fac0:	e000ef34 	.word	0xe000ef34

0800fac4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fac4:	b480      	push	{r7}
 800fac6:	b083      	sub	sp, #12
 800fac8:	af00      	add	r7, sp, #0
	__asm volatile
 800faca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800face:	f383 8811 	msr	BASEPRI, r3
 800fad2:	f3bf 8f6f 	isb	sy
 800fad6:	f3bf 8f4f 	dsb	sy
 800fada:	607b      	str	r3, [r7, #4]
}
 800fadc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fade:	4b0f      	ldr	r3, [pc, #60]	; (800fb1c <vPortEnterCritical+0x58>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	3301      	adds	r3, #1
 800fae4:	4a0d      	ldr	r2, [pc, #52]	; (800fb1c <vPortEnterCritical+0x58>)
 800fae6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fae8:	4b0c      	ldr	r3, [pc, #48]	; (800fb1c <vPortEnterCritical+0x58>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	2b01      	cmp	r3, #1
 800faee:	d10f      	bne.n	800fb10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800faf0:	4b0b      	ldr	r3, [pc, #44]	; (800fb20 <vPortEnterCritical+0x5c>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d00a      	beq.n	800fb10 <vPortEnterCritical+0x4c>
	__asm volatile
 800fafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fafe:	f383 8811 	msr	BASEPRI, r3
 800fb02:	f3bf 8f6f 	isb	sy
 800fb06:	f3bf 8f4f 	dsb	sy
 800fb0a:	603b      	str	r3, [r7, #0]
}
 800fb0c:	bf00      	nop
 800fb0e:	e7fe      	b.n	800fb0e <vPortEnterCritical+0x4a>
	}
}
 800fb10:	bf00      	nop
 800fb12:	370c      	adds	r7, #12
 800fb14:	46bd      	mov	sp, r7
 800fb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1a:	4770      	bx	lr
 800fb1c:	20000018 	.word	0x20000018
 800fb20:	e000ed04 	.word	0xe000ed04

0800fb24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fb24:	b480      	push	{r7}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fb2a:	4b12      	ldr	r3, [pc, #72]	; (800fb74 <vPortExitCritical+0x50>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d10a      	bne.n	800fb48 <vPortExitCritical+0x24>
	__asm volatile
 800fb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb36:	f383 8811 	msr	BASEPRI, r3
 800fb3a:	f3bf 8f6f 	isb	sy
 800fb3e:	f3bf 8f4f 	dsb	sy
 800fb42:	607b      	str	r3, [r7, #4]
}
 800fb44:	bf00      	nop
 800fb46:	e7fe      	b.n	800fb46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fb48:	4b0a      	ldr	r3, [pc, #40]	; (800fb74 <vPortExitCritical+0x50>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	3b01      	subs	r3, #1
 800fb4e:	4a09      	ldr	r2, [pc, #36]	; (800fb74 <vPortExitCritical+0x50>)
 800fb50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fb52:	4b08      	ldr	r3, [pc, #32]	; (800fb74 <vPortExitCritical+0x50>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d105      	bne.n	800fb66 <vPortExitCritical+0x42>
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fb64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fb66:	bf00      	nop
 800fb68:	370c      	adds	r7, #12
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr
 800fb72:	bf00      	nop
 800fb74:	20000018 	.word	0x20000018
	...

0800fb80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fb80:	f3ef 8009 	mrs	r0, PSP
 800fb84:	f3bf 8f6f 	isb	sy
 800fb88:	4b15      	ldr	r3, [pc, #84]	; (800fbe0 <pxCurrentTCBConst>)
 800fb8a:	681a      	ldr	r2, [r3, #0]
 800fb8c:	f01e 0f10 	tst.w	lr, #16
 800fb90:	bf08      	it	eq
 800fb92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fb96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb9a:	6010      	str	r0, [r2, #0]
 800fb9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fba4:	f380 8811 	msr	BASEPRI, r0
 800fba8:	f3bf 8f4f 	dsb	sy
 800fbac:	f3bf 8f6f 	isb	sy
 800fbb0:	f7ff fb16 	bl	800f1e0 <vTaskSwitchContext>
 800fbb4:	f04f 0000 	mov.w	r0, #0
 800fbb8:	f380 8811 	msr	BASEPRI, r0
 800fbbc:	bc09      	pop	{r0, r3}
 800fbbe:	6819      	ldr	r1, [r3, #0]
 800fbc0:	6808      	ldr	r0, [r1, #0]
 800fbc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc6:	f01e 0f10 	tst.w	lr, #16
 800fbca:	bf08      	it	eq
 800fbcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fbd0:	f380 8809 	msr	PSP, r0
 800fbd4:	f3bf 8f6f 	isb	sy
 800fbd8:	4770      	bx	lr
 800fbda:	bf00      	nop
 800fbdc:	f3af 8000 	nop.w

0800fbe0 <pxCurrentTCBConst>:
 800fbe0:	20002b64 	.word	0x20002b64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fbe4:	bf00      	nop
 800fbe6:	bf00      	nop

0800fbe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
	__asm volatile
 800fbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf2:	f383 8811 	msr	BASEPRI, r3
 800fbf6:	f3bf 8f6f 	isb	sy
 800fbfa:	f3bf 8f4f 	dsb	sy
 800fbfe:	607b      	str	r3, [r7, #4]
}
 800fc00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fc02:	f7ff fa35 	bl	800f070 <xTaskIncrementTick>
 800fc06:	4603      	mov	r3, r0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d003      	beq.n	800fc14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fc0c:	4b06      	ldr	r3, [pc, #24]	; (800fc28 <xPortSysTickHandler+0x40>)
 800fc0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc12:	601a      	str	r2, [r3, #0]
 800fc14:	2300      	movs	r3, #0
 800fc16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	f383 8811 	msr	BASEPRI, r3
}
 800fc1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fc20:	bf00      	nop
 800fc22:	3708      	adds	r7, #8
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}
 800fc28:	e000ed04 	.word	0xe000ed04

0800fc2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fc30:	4b0b      	ldr	r3, [pc, #44]	; (800fc60 <vPortSetupTimerInterrupt+0x34>)
 800fc32:	2200      	movs	r2, #0
 800fc34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fc36:	4b0b      	ldr	r3, [pc, #44]	; (800fc64 <vPortSetupTimerInterrupt+0x38>)
 800fc38:	2200      	movs	r2, #0
 800fc3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fc3c:	4b0a      	ldr	r3, [pc, #40]	; (800fc68 <vPortSetupTimerInterrupt+0x3c>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	4a0a      	ldr	r2, [pc, #40]	; (800fc6c <vPortSetupTimerInterrupt+0x40>)
 800fc42:	fba2 2303 	umull	r2, r3, r2, r3
 800fc46:	099b      	lsrs	r3, r3, #6
 800fc48:	4a09      	ldr	r2, [pc, #36]	; (800fc70 <vPortSetupTimerInterrupt+0x44>)
 800fc4a:	3b01      	subs	r3, #1
 800fc4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fc4e:	4b04      	ldr	r3, [pc, #16]	; (800fc60 <vPortSetupTimerInterrupt+0x34>)
 800fc50:	2207      	movs	r2, #7
 800fc52:	601a      	str	r2, [r3, #0]
}
 800fc54:	bf00      	nop
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr
 800fc5e:	bf00      	nop
 800fc60:	e000e010 	.word	0xe000e010
 800fc64:	e000e018 	.word	0xe000e018
 800fc68:	2000000c 	.word	0x2000000c
 800fc6c:	10624dd3 	.word	0x10624dd3
 800fc70:	e000e014 	.word	0xe000e014

0800fc74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fc74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fc84 <vPortEnableVFP+0x10>
 800fc78:	6801      	ldr	r1, [r0, #0]
 800fc7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fc7e:	6001      	str	r1, [r0, #0]
 800fc80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fc82:	bf00      	nop
 800fc84:	e000ed88 	.word	0xe000ed88

0800fc88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b08a      	sub	sp, #40	; 0x28
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fc90:	2300      	movs	r3, #0
 800fc92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fc94:	f7ff f942 	bl	800ef1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fc98:	4b5b      	ldr	r3, [pc, #364]	; (800fe08 <pvPortMalloc+0x180>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d101      	bne.n	800fca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fca0:	f000 f920 	bl	800fee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fca4:	4b59      	ldr	r3, [pc, #356]	; (800fe0c <pvPortMalloc+0x184>)
 800fca6:	681a      	ldr	r2, [r3, #0]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	4013      	ands	r3, r2
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f040 8093 	bne.w	800fdd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d01d      	beq.n	800fcf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fcb8:	2208      	movs	r2, #8
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	4413      	add	r3, r2
 800fcbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f003 0307 	and.w	r3, r3, #7
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d014      	beq.n	800fcf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f023 0307 	bic.w	r3, r3, #7
 800fcd0:	3308      	adds	r3, #8
 800fcd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f003 0307 	and.w	r3, r3, #7
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d00a      	beq.n	800fcf4 <pvPortMalloc+0x6c>
	__asm volatile
 800fcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce2:	f383 8811 	msr	BASEPRI, r3
 800fce6:	f3bf 8f6f 	isb	sy
 800fcea:	f3bf 8f4f 	dsb	sy
 800fcee:	617b      	str	r3, [r7, #20]
}
 800fcf0:	bf00      	nop
 800fcf2:	e7fe      	b.n	800fcf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d06e      	beq.n	800fdd8 <pvPortMalloc+0x150>
 800fcfa:	4b45      	ldr	r3, [pc, #276]	; (800fe10 <pvPortMalloc+0x188>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d869      	bhi.n	800fdd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fd04:	4b43      	ldr	r3, [pc, #268]	; (800fe14 <pvPortMalloc+0x18c>)
 800fd06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fd08:	4b42      	ldr	r3, [pc, #264]	; (800fe14 <pvPortMalloc+0x18c>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd0e:	e004      	b.n	800fd1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d903      	bls.n	800fd2c <pvPortMalloc+0xa4>
 800fd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d1f1      	bne.n	800fd10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fd2c:	4b36      	ldr	r3, [pc, #216]	; (800fe08 <pvPortMalloc+0x180>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d050      	beq.n	800fdd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fd36:	6a3b      	ldr	r3, [r7, #32]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	2208      	movs	r2, #8
 800fd3c:	4413      	add	r3, r2
 800fd3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd42:	681a      	ldr	r2, [r3, #0]
 800fd44:	6a3b      	ldr	r3, [r7, #32]
 800fd46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4a:	685a      	ldr	r2, [r3, #4]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	1ad2      	subs	r2, r2, r3
 800fd50:	2308      	movs	r3, #8
 800fd52:	005b      	lsls	r3, r3, #1
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d91f      	bls.n	800fd98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fd58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	4413      	add	r3, r2
 800fd5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd60:	69bb      	ldr	r3, [r7, #24]
 800fd62:	f003 0307 	and.w	r3, r3, #7
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d00a      	beq.n	800fd80 <pvPortMalloc+0xf8>
	__asm volatile
 800fd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6e:	f383 8811 	msr	BASEPRI, r3
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	f3bf 8f4f 	dsb	sy
 800fd7a:	613b      	str	r3, [r7, #16]
}
 800fd7c:	bf00      	nop
 800fd7e:	e7fe      	b.n	800fd7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd82:	685a      	ldr	r2, [r3, #4]
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	1ad2      	subs	r2, r2, r3
 800fd88:	69bb      	ldr	r3, [r7, #24]
 800fd8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fd92:	69b8      	ldr	r0, [r7, #24]
 800fd94:	f000 f908 	bl	800ffa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fd98:	4b1d      	ldr	r3, [pc, #116]	; (800fe10 <pvPortMalloc+0x188>)
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd9e:	685b      	ldr	r3, [r3, #4]
 800fda0:	1ad3      	subs	r3, r2, r3
 800fda2:	4a1b      	ldr	r2, [pc, #108]	; (800fe10 <pvPortMalloc+0x188>)
 800fda4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fda6:	4b1a      	ldr	r3, [pc, #104]	; (800fe10 <pvPortMalloc+0x188>)
 800fda8:	681a      	ldr	r2, [r3, #0]
 800fdaa:	4b1b      	ldr	r3, [pc, #108]	; (800fe18 <pvPortMalloc+0x190>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d203      	bcs.n	800fdba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fdb2:	4b17      	ldr	r3, [pc, #92]	; (800fe10 <pvPortMalloc+0x188>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4a18      	ldr	r2, [pc, #96]	; (800fe18 <pvPortMalloc+0x190>)
 800fdb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbc:	685a      	ldr	r2, [r3, #4]
 800fdbe:	4b13      	ldr	r3, [pc, #76]	; (800fe0c <pvPortMalloc+0x184>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	431a      	orrs	r2, r3
 800fdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdca:	2200      	movs	r2, #0
 800fdcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fdce:	4b13      	ldr	r3, [pc, #76]	; (800fe1c <pvPortMalloc+0x194>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	4a11      	ldr	r2, [pc, #68]	; (800fe1c <pvPortMalloc+0x194>)
 800fdd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fdd8:	f7ff f8ae 	bl	800ef38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fddc:	69fb      	ldr	r3, [r7, #28]
 800fdde:	f003 0307 	and.w	r3, r3, #7
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d00a      	beq.n	800fdfc <pvPortMalloc+0x174>
	__asm volatile
 800fde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdea:	f383 8811 	msr	BASEPRI, r3
 800fdee:	f3bf 8f6f 	isb	sy
 800fdf2:	f3bf 8f4f 	dsb	sy
 800fdf6:	60fb      	str	r3, [r7, #12]
}
 800fdf8:	bf00      	nop
 800fdfa:	e7fe      	b.n	800fdfa <pvPortMalloc+0x172>
	return pvReturn;
 800fdfc:	69fb      	ldr	r3, [r7, #28]
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3728      	adds	r7, #40	; 0x28
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	200068a0 	.word	0x200068a0
 800fe0c:	200068b4 	.word	0x200068b4
 800fe10:	200068a4 	.word	0x200068a4
 800fe14:	20006898 	.word	0x20006898
 800fe18:	200068a8 	.word	0x200068a8
 800fe1c:	200068ac 	.word	0x200068ac

0800fe20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b086      	sub	sp, #24
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d04d      	beq.n	800fece <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fe32:	2308      	movs	r3, #8
 800fe34:	425b      	negs	r3, r3
 800fe36:	697a      	ldr	r2, [r7, #20]
 800fe38:	4413      	add	r3, r2
 800fe3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	685a      	ldr	r2, [r3, #4]
 800fe44:	4b24      	ldr	r3, [pc, #144]	; (800fed8 <vPortFree+0xb8>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	4013      	ands	r3, r2
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d10a      	bne.n	800fe64 <vPortFree+0x44>
	__asm volatile
 800fe4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe52:	f383 8811 	msr	BASEPRI, r3
 800fe56:	f3bf 8f6f 	isb	sy
 800fe5a:	f3bf 8f4f 	dsb	sy
 800fe5e:	60fb      	str	r3, [r7, #12]
}
 800fe60:	bf00      	nop
 800fe62:	e7fe      	b.n	800fe62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d00a      	beq.n	800fe82 <vPortFree+0x62>
	__asm volatile
 800fe6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe70:	f383 8811 	msr	BASEPRI, r3
 800fe74:	f3bf 8f6f 	isb	sy
 800fe78:	f3bf 8f4f 	dsb	sy
 800fe7c:	60bb      	str	r3, [r7, #8]
}
 800fe7e:	bf00      	nop
 800fe80:	e7fe      	b.n	800fe80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	685a      	ldr	r2, [r3, #4]
 800fe86:	4b14      	ldr	r3, [pc, #80]	; (800fed8 <vPortFree+0xb8>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	4013      	ands	r3, r2
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d01e      	beq.n	800fece <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d11a      	bne.n	800fece <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	685a      	ldr	r2, [r3, #4]
 800fe9c:	4b0e      	ldr	r3, [pc, #56]	; (800fed8 <vPortFree+0xb8>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	43db      	mvns	r3, r3
 800fea2:	401a      	ands	r2, r3
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fea8:	f7ff f838 	bl	800ef1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	685a      	ldr	r2, [r3, #4]
 800feb0:	4b0a      	ldr	r3, [pc, #40]	; (800fedc <vPortFree+0xbc>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	4413      	add	r3, r2
 800feb6:	4a09      	ldr	r2, [pc, #36]	; (800fedc <vPortFree+0xbc>)
 800feb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800feba:	6938      	ldr	r0, [r7, #16]
 800febc:	f000 f874 	bl	800ffa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fec0:	4b07      	ldr	r3, [pc, #28]	; (800fee0 <vPortFree+0xc0>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	3301      	adds	r3, #1
 800fec6:	4a06      	ldr	r2, [pc, #24]	; (800fee0 <vPortFree+0xc0>)
 800fec8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800feca:	f7ff f835 	bl	800ef38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fece:	bf00      	nop
 800fed0:	3718      	adds	r7, #24
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
 800fed6:	bf00      	nop
 800fed8:	200068b4 	.word	0x200068b4
 800fedc:	200068a4 	.word	0x200068a4
 800fee0:	200068b0 	.word	0x200068b0

0800fee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fee4:	b480      	push	{r7}
 800fee6:	b085      	sub	sp, #20
 800fee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800feea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800feee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fef0:	4b27      	ldr	r3, [pc, #156]	; (800ff90 <prvHeapInit+0xac>)
 800fef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f003 0307 	and.w	r3, r3, #7
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d00c      	beq.n	800ff18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	3307      	adds	r3, #7
 800ff02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f023 0307 	bic.w	r3, r3, #7
 800ff0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ff0c:	68ba      	ldr	r2, [r7, #8]
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	1ad3      	subs	r3, r2, r3
 800ff12:	4a1f      	ldr	r2, [pc, #124]	; (800ff90 <prvHeapInit+0xac>)
 800ff14:	4413      	add	r3, r2
 800ff16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ff1c:	4a1d      	ldr	r2, [pc, #116]	; (800ff94 <prvHeapInit+0xb0>)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ff22:	4b1c      	ldr	r3, [pc, #112]	; (800ff94 <prvHeapInit+0xb0>)
 800ff24:	2200      	movs	r2, #0
 800ff26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	68ba      	ldr	r2, [r7, #8]
 800ff2c:	4413      	add	r3, r2
 800ff2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ff30:	2208      	movs	r2, #8
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	1a9b      	subs	r3, r3, r2
 800ff36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	f023 0307 	bic.w	r3, r3, #7
 800ff3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	4a15      	ldr	r2, [pc, #84]	; (800ff98 <prvHeapInit+0xb4>)
 800ff44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ff46:	4b14      	ldr	r3, [pc, #80]	; (800ff98 <prvHeapInit+0xb4>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ff4e:	4b12      	ldr	r3, [pc, #72]	; (800ff98 <prvHeapInit+0xb4>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	2200      	movs	r2, #0
 800ff54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	1ad2      	subs	r2, r2, r3
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ff64:	4b0c      	ldr	r3, [pc, #48]	; (800ff98 <prvHeapInit+0xb4>)
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	4a0a      	ldr	r2, [pc, #40]	; (800ff9c <prvHeapInit+0xb8>)
 800ff72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	4a09      	ldr	r2, [pc, #36]	; (800ffa0 <prvHeapInit+0xbc>)
 800ff7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff7c:	4b09      	ldr	r3, [pc, #36]	; (800ffa4 <prvHeapInit+0xc0>)
 800ff7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ff82:	601a      	str	r2, [r3, #0]
}
 800ff84:	bf00      	nop
 800ff86:	3714      	adds	r7, #20
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr
 800ff90:	20002c98 	.word	0x20002c98
 800ff94:	20006898 	.word	0x20006898
 800ff98:	200068a0 	.word	0x200068a0
 800ff9c:	200068a8 	.word	0x200068a8
 800ffa0:	200068a4 	.word	0x200068a4
 800ffa4:	200068b4 	.word	0x200068b4

0800ffa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ffa8:	b480      	push	{r7}
 800ffaa:	b085      	sub	sp, #20
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ffb0:	4b28      	ldr	r3, [pc, #160]	; (8010054 <prvInsertBlockIntoFreeList+0xac>)
 800ffb2:	60fb      	str	r3, [r7, #12]
 800ffb4:	e002      	b.n	800ffbc <prvInsertBlockIntoFreeList+0x14>
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	60fb      	str	r3, [r7, #12]
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	687a      	ldr	r2, [r7, #4]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d8f7      	bhi.n	800ffb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	68ba      	ldr	r2, [r7, #8]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	687a      	ldr	r2, [r7, #4]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d108      	bne.n	800ffea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	685a      	ldr	r2, [r3, #4]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	441a      	add	r2, r3
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	68ba      	ldr	r2, [r7, #8]
 800fff4:	441a      	add	r2, r3
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	429a      	cmp	r2, r3
 800fffc:	d118      	bne.n	8010030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681a      	ldr	r2, [r3, #0]
 8010002:	4b15      	ldr	r3, [pc, #84]	; (8010058 <prvInsertBlockIntoFreeList+0xb0>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	429a      	cmp	r2, r3
 8010008:	d00d      	beq.n	8010026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	685a      	ldr	r2, [r3, #4]
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	685b      	ldr	r3, [r3, #4]
 8010014:	441a      	add	r2, r3
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	681a      	ldr	r2, [r3, #0]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	601a      	str	r2, [r3, #0]
 8010024:	e008      	b.n	8010038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010026:	4b0c      	ldr	r3, [pc, #48]	; (8010058 <prvInsertBlockIntoFreeList+0xb0>)
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	601a      	str	r2, [r3, #0]
 801002e:	e003      	b.n	8010038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010038:	68fa      	ldr	r2, [r7, #12]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	429a      	cmp	r2, r3
 801003e:	d002      	beq.n	8010046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010046:	bf00      	nop
 8010048:	3714      	adds	r7, #20
 801004a:	46bd      	mov	sp, r7
 801004c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010050:	4770      	bx	lr
 8010052:	bf00      	nop
 8010054:	20006898 	.word	0x20006898
 8010058:	200068a0 	.word	0x200068a0

0801005c <__errno>:
 801005c:	4b01      	ldr	r3, [pc, #4]	; (8010064 <__errno+0x8>)
 801005e:	6818      	ldr	r0, [r3, #0]
 8010060:	4770      	bx	lr
 8010062:	bf00      	nop
 8010064:	2000001c 	.word	0x2000001c

08010068 <__libc_init_array>:
 8010068:	b570      	push	{r4, r5, r6, lr}
 801006a:	4d0d      	ldr	r5, [pc, #52]	; (80100a0 <__libc_init_array+0x38>)
 801006c:	4c0d      	ldr	r4, [pc, #52]	; (80100a4 <__libc_init_array+0x3c>)
 801006e:	1b64      	subs	r4, r4, r5
 8010070:	10a4      	asrs	r4, r4, #2
 8010072:	2600      	movs	r6, #0
 8010074:	42a6      	cmp	r6, r4
 8010076:	d109      	bne.n	801008c <__libc_init_array+0x24>
 8010078:	4d0b      	ldr	r5, [pc, #44]	; (80100a8 <__libc_init_array+0x40>)
 801007a:	4c0c      	ldr	r4, [pc, #48]	; (80100ac <__libc_init_array+0x44>)
 801007c:	f005 f960 	bl	8015340 <_init>
 8010080:	1b64      	subs	r4, r4, r5
 8010082:	10a4      	asrs	r4, r4, #2
 8010084:	2600      	movs	r6, #0
 8010086:	42a6      	cmp	r6, r4
 8010088:	d105      	bne.n	8010096 <__libc_init_array+0x2e>
 801008a:	bd70      	pop	{r4, r5, r6, pc}
 801008c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010090:	4798      	blx	r3
 8010092:	3601      	adds	r6, #1
 8010094:	e7ee      	b.n	8010074 <__libc_init_array+0xc>
 8010096:	f855 3b04 	ldr.w	r3, [r5], #4
 801009a:	4798      	blx	r3
 801009c:	3601      	adds	r6, #1
 801009e:	e7f2      	b.n	8010086 <__libc_init_array+0x1e>
 80100a0:	08015d48 	.word	0x08015d48
 80100a4:	08015d48 	.word	0x08015d48
 80100a8:	08015d48 	.word	0x08015d48
 80100ac:	08015d4c 	.word	0x08015d4c

080100b0 <memcpy>:
 80100b0:	440a      	add	r2, r1
 80100b2:	4291      	cmp	r1, r2
 80100b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80100b8:	d100      	bne.n	80100bc <memcpy+0xc>
 80100ba:	4770      	bx	lr
 80100bc:	b510      	push	{r4, lr}
 80100be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100c6:	4291      	cmp	r1, r2
 80100c8:	d1f9      	bne.n	80100be <memcpy+0xe>
 80100ca:	bd10      	pop	{r4, pc}

080100cc <memset>:
 80100cc:	4402      	add	r2, r0
 80100ce:	4603      	mov	r3, r0
 80100d0:	4293      	cmp	r3, r2
 80100d2:	d100      	bne.n	80100d6 <memset+0xa>
 80100d4:	4770      	bx	lr
 80100d6:	f803 1b01 	strb.w	r1, [r3], #1
 80100da:	e7f9      	b.n	80100d0 <memset+0x4>

080100dc <__cvt>:
 80100dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100e0:	ec55 4b10 	vmov	r4, r5, d0
 80100e4:	2d00      	cmp	r5, #0
 80100e6:	460e      	mov	r6, r1
 80100e8:	4619      	mov	r1, r3
 80100ea:	462b      	mov	r3, r5
 80100ec:	bfbb      	ittet	lt
 80100ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80100f2:	461d      	movlt	r5, r3
 80100f4:	2300      	movge	r3, #0
 80100f6:	232d      	movlt	r3, #45	; 0x2d
 80100f8:	700b      	strb	r3, [r1, #0]
 80100fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010100:	4691      	mov	r9, r2
 8010102:	f023 0820 	bic.w	r8, r3, #32
 8010106:	bfbc      	itt	lt
 8010108:	4622      	movlt	r2, r4
 801010a:	4614      	movlt	r4, r2
 801010c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010110:	d005      	beq.n	801011e <__cvt+0x42>
 8010112:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010116:	d100      	bne.n	801011a <__cvt+0x3e>
 8010118:	3601      	adds	r6, #1
 801011a:	2102      	movs	r1, #2
 801011c:	e000      	b.n	8010120 <__cvt+0x44>
 801011e:	2103      	movs	r1, #3
 8010120:	ab03      	add	r3, sp, #12
 8010122:	9301      	str	r3, [sp, #4]
 8010124:	ab02      	add	r3, sp, #8
 8010126:	9300      	str	r3, [sp, #0]
 8010128:	ec45 4b10 	vmov	d0, r4, r5
 801012c:	4653      	mov	r3, sl
 801012e:	4632      	mov	r2, r6
 8010130:	f000 fcea 	bl	8010b08 <_dtoa_r>
 8010134:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010138:	4607      	mov	r7, r0
 801013a:	d102      	bne.n	8010142 <__cvt+0x66>
 801013c:	f019 0f01 	tst.w	r9, #1
 8010140:	d022      	beq.n	8010188 <__cvt+0xac>
 8010142:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010146:	eb07 0906 	add.w	r9, r7, r6
 801014a:	d110      	bne.n	801016e <__cvt+0x92>
 801014c:	783b      	ldrb	r3, [r7, #0]
 801014e:	2b30      	cmp	r3, #48	; 0x30
 8010150:	d10a      	bne.n	8010168 <__cvt+0x8c>
 8010152:	2200      	movs	r2, #0
 8010154:	2300      	movs	r3, #0
 8010156:	4620      	mov	r0, r4
 8010158:	4629      	mov	r1, r5
 801015a:	f7f0 fcb5 	bl	8000ac8 <__aeabi_dcmpeq>
 801015e:	b918      	cbnz	r0, 8010168 <__cvt+0x8c>
 8010160:	f1c6 0601 	rsb	r6, r6, #1
 8010164:	f8ca 6000 	str.w	r6, [sl]
 8010168:	f8da 3000 	ldr.w	r3, [sl]
 801016c:	4499      	add	r9, r3
 801016e:	2200      	movs	r2, #0
 8010170:	2300      	movs	r3, #0
 8010172:	4620      	mov	r0, r4
 8010174:	4629      	mov	r1, r5
 8010176:	f7f0 fca7 	bl	8000ac8 <__aeabi_dcmpeq>
 801017a:	b108      	cbz	r0, 8010180 <__cvt+0xa4>
 801017c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010180:	2230      	movs	r2, #48	; 0x30
 8010182:	9b03      	ldr	r3, [sp, #12]
 8010184:	454b      	cmp	r3, r9
 8010186:	d307      	bcc.n	8010198 <__cvt+0xbc>
 8010188:	9b03      	ldr	r3, [sp, #12]
 801018a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801018c:	1bdb      	subs	r3, r3, r7
 801018e:	4638      	mov	r0, r7
 8010190:	6013      	str	r3, [r2, #0]
 8010192:	b004      	add	sp, #16
 8010194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010198:	1c59      	adds	r1, r3, #1
 801019a:	9103      	str	r1, [sp, #12]
 801019c:	701a      	strb	r2, [r3, #0]
 801019e:	e7f0      	b.n	8010182 <__cvt+0xa6>

080101a0 <__exponent>:
 80101a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101a2:	4603      	mov	r3, r0
 80101a4:	2900      	cmp	r1, #0
 80101a6:	bfb8      	it	lt
 80101a8:	4249      	neglt	r1, r1
 80101aa:	f803 2b02 	strb.w	r2, [r3], #2
 80101ae:	bfb4      	ite	lt
 80101b0:	222d      	movlt	r2, #45	; 0x2d
 80101b2:	222b      	movge	r2, #43	; 0x2b
 80101b4:	2909      	cmp	r1, #9
 80101b6:	7042      	strb	r2, [r0, #1]
 80101b8:	dd2a      	ble.n	8010210 <__exponent+0x70>
 80101ba:	f10d 0407 	add.w	r4, sp, #7
 80101be:	46a4      	mov	ip, r4
 80101c0:	270a      	movs	r7, #10
 80101c2:	46a6      	mov	lr, r4
 80101c4:	460a      	mov	r2, r1
 80101c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80101ca:	fb07 1516 	mls	r5, r7, r6, r1
 80101ce:	3530      	adds	r5, #48	; 0x30
 80101d0:	2a63      	cmp	r2, #99	; 0x63
 80101d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80101d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80101da:	4631      	mov	r1, r6
 80101dc:	dcf1      	bgt.n	80101c2 <__exponent+0x22>
 80101de:	3130      	adds	r1, #48	; 0x30
 80101e0:	f1ae 0502 	sub.w	r5, lr, #2
 80101e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80101e8:	1c44      	adds	r4, r0, #1
 80101ea:	4629      	mov	r1, r5
 80101ec:	4561      	cmp	r1, ip
 80101ee:	d30a      	bcc.n	8010206 <__exponent+0x66>
 80101f0:	f10d 0209 	add.w	r2, sp, #9
 80101f4:	eba2 020e 	sub.w	r2, r2, lr
 80101f8:	4565      	cmp	r5, ip
 80101fa:	bf88      	it	hi
 80101fc:	2200      	movhi	r2, #0
 80101fe:	4413      	add	r3, r2
 8010200:	1a18      	subs	r0, r3, r0
 8010202:	b003      	add	sp, #12
 8010204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010206:	f811 2b01 	ldrb.w	r2, [r1], #1
 801020a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801020e:	e7ed      	b.n	80101ec <__exponent+0x4c>
 8010210:	2330      	movs	r3, #48	; 0x30
 8010212:	3130      	adds	r1, #48	; 0x30
 8010214:	7083      	strb	r3, [r0, #2]
 8010216:	70c1      	strb	r1, [r0, #3]
 8010218:	1d03      	adds	r3, r0, #4
 801021a:	e7f1      	b.n	8010200 <__exponent+0x60>

0801021c <_printf_float>:
 801021c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010220:	ed2d 8b02 	vpush	{d8}
 8010224:	b08d      	sub	sp, #52	; 0x34
 8010226:	460c      	mov	r4, r1
 8010228:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801022c:	4616      	mov	r6, r2
 801022e:	461f      	mov	r7, r3
 8010230:	4605      	mov	r5, r0
 8010232:	f001 fa57 	bl	80116e4 <_localeconv_r>
 8010236:	f8d0 a000 	ldr.w	sl, [r0]
 801023a:	4650      	mov	r0, sl
 801023c:	f7ef ffc8 	bl	80001d0 <strlen>
 8010240:	2300      	movs	r3, #0
 8010242:	930a      	str	r3, [sp, #40]	; 0x28
 8010244:	6823      	ldr	r3, [r4, #0]
 8010246:	9305      	str	r3, [sp, #20]
 8010248:	f8d8 3000 	ldr.w	r3, [r8]
 801024c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010250:	3307      	adds	r3, #7
 8010252:	f023 0307 	bic.w	r3, r3, #7
 8010256:	f103 0208 	add.w	r2, r3, #8
 801025a:	f8c8 2000 	str.w	r2, [r8]
 801025e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010262:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010266:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801026a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801026e:	9307      	str	r3, [sp, #28]
 8010270:	f8cd 8018 	str.w	r8, [sp, #24]
 8010274:	ee08 0a10 	vmov	s16, r0
 8010278:	4b9f      	ldr	r3, [pc, #636]	; (80104f8 <_printf_float+0x2dc>)
 801027a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801027e:	f04f 32ff 	mov.w	r2, #4294967295
 8010282:	f7f0 fc53 	bl	8000b2c <__aeabi_dcmpun>
 8010286:	bb88      	cbnz	r0, 80102ec <_printf_float+0xd0>
 8010288:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801028c:	4b9a      	ldr	r3, [pc, #616]	; (80104f8 <_printf_float+0x2dc>)
 801028e:	f04f 32ff 	mov.w	r2, #4294967295
 8010292:	f7f0 fc2d 	bl	8000af0 <__aeabi_dcmple>
 8010296:	bb48      	cbnz	r0, 80102ec <_printf_float+0xd0>
 8010298:	2200      	movs	r2, #0
 801029a:	2300      	movs	r3, #0
 801029c:	4640      	mov	r0, r8
 801029e:	4649      	mov	r1, r9
 80102a0:	f7f0 fc1c 	bl	8000adc <__aeabi_dcmplt>
 80102a4:	b110      	cbz	r0, 80102ac <_printf_float+0x90>
 80102a6:	232d      	movs	r3, #45	; 0x2d
 80102a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102ac:	4b93      	ldr	r3, [pc, #588]	; (80104fc <_printf_float+0x2e0>)
 80102ae:	4894      	ldr	r0, [pc, #592]	; (8010500 <_printf_float+0x2e4>)
 80102b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80102b4:	bf94      	ite	ls
 80102b6:	4698      	movls	r8, r3
 80102b8:	4680      	movhi	r8, r0
 80102ba:	2303      	movs	r3, #3
 80102bc:	6123      	str	r3, [r4, #16]
 80102be:	9b05      	ldr	r3, [sp, #20]
 80102c0:	f023 0204 	bic.w	r2, r3, #4
 80102c4:	6022      	str	r2, [r4, #0]
 80102c6:	f04f 0900 	mov.w	r9, #0
 80102ca:	9700      	str	r7, [sp, #0]
 80102cc:	4633      	mov	r3, r6
 80102ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80102d0:	4621      	mov	r1, r4
 80102d2:	4628      	mov	r0, r5
 80102d4:	f000 f9d8 	bl	8010688 <_printf_common>
 80102d8:	3001      	adds	r0, #1
 80102da:	f040 8090 	bne.w	80103fe <_printf_float+0x1e2>
 80102de:	f04f 30ff 	mov.w	r0, #4294967295
 80102e2:	b00d      	add	sp, #52	; 0x34
 80102e4:	ecbd 8b02 	vpop	{d8}
 80102e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ec:	4642      	mov	r2, r8
 80102ee:	464b      	mov	r3, r9
 80102f0:	4640      	mov	r0, r8
 80102f2:	4649      	mov	r1, r9
 80102f4:	f7f0 fc1a 	bl	8000b2c <__aeabi_dcmpun>
 80102f8:	b140      	cbz	r0, 801030c <_printf_float+0xf0>
 80102fa:	464b      	mov	r3, r9
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	bfbc      	itt	lt
 8010300:	232d      	movlt	r3, #45	; 0x2d
 8010302:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010306:	487f      	ldr	r0, [pc, #508]	; (8010504 <_printf_float+0x2e8>)
 8010308:	4b7f      	ldr	r3, [pc, #508]	; (8010508 <_printf_float+0x2ec>)
 801030a:	e7d1      	b.n	80102b0 <_printf_float+0x94>
 801030c:	6863      	ldr	r3, [r4, #4]
 801030e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010312:	9206      	str	r2, [sp, #24]
 8010314:	1c5a      	adds	r2, r3, #1
 8010316:	d13f      	bne.n	8010398 <_printf_float+0x17c>
 8010318:	2306      	movs	r3, #6
 801031a:	6063      	str	r3, [r4, #4]
 801031c:	9b05      	ldr	r3, [sp, #20]
 801031e:	6861      	ldr	r1, [r4, #4]
 8010320:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010324:	2300      	movs	r3, #0
 8010326:	9303      	str	r3, [sp, #12]
 8010328:	ab0a      	add	r3, sp, #40	; 0x28
 801032a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801032e:	ab09      	add	r3, sp, #36	; 0x24
 8010330:	ec49 8b10 	vmov	d0, r8, r9
 8010334:	9300      	str	r3, [sp, #0]
 8010336:	6022      	str	r2, [r4, #0]
 8010338:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801033c:	4628      	mov	r0, r5
 801033e:	f7ff fecd 	bl	80100dc <__cvt>
 8010342:	9b06      	ldr	r3, [sp, #24]
 8010344:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010346:	2b47      	cmp	r3, #71	; 0x47
 8010348:	4680      	mov	r8, r0
 801034a:	d108      	bne.n	801035e <_printf_float+0x142>
 801034c:	1cc8      	adds	r0, r1, #3
 801034e:	db02      	blt.n	8010356 <_printf_float+0x13a>
 8010350:	6863      	ldr	r3, [r4, #4]
 8010352:	4299      	cmp	r1, r3
 8010354:	dd41      	ble.n	80103da <_printf_float+0x1be>
 8010356:	f1ab 0b02 	sub.w	fp, fp, #2
 801035a:	fa5f fb8b 	uxtb.w	fp, fp
 801035e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010362:	d820      	bhi.n	80103a6 <_printf_float+0x18a>
 8010364:	3901      	subs	r1, #1
 8010366:	465a      	mov	r2, fp
 8010368:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801036c:	9109      	str	r1, [sp, #36]	; 0x24
 801036e:	f7ff ff17 	bl	80101a0 <__exponent>
 8010372:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010374:	1813      	adds	r3, r2, r0
 8010376:	2a01      	cmp	r2, #1
 8010378:	4681      	mov	r9, r0
 801037a:	6123      	str	r3, [r4, #16]
 801037c:	dc02      	bgt.n	8010384 <_printf_float+0x168>
 801037e:	6822      	ldr	r2, [r4, #0]
 8010380:	07d2      	lsls	r2, r2, #31
 8010382:	d501      	bpl.n	8010388 <_printf_float+0x16c>
 8010384:	3301      	adds	r3, #1
 8010386:	6123      	str	r3, [r4, #16]
 8010388:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801038c:	2b00      	cmp	r3, #0
 801038e:	d09c      	beq.n	80102ca <_printf_float+0xae>
 8010390:	232d      	movs	r3, #45	; 0x2d
 8010392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010396:	e798      	b.n	80102ca <_printf_float+0xae>
 8010398:	9a06      	ldr	r2, [sp, #24]
 801039a:	2a47      	cmp	r2, #71	; 0x47
 801039c:	d1be      	bne.n	801031c <_printf_float+0x100>
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d1bc      	bne.n	801031c <_printf_float+0x100>
 80103a2:	2301      	movs	r3, #1
 80103a4:	e7b9      	b.n	801031a <_printf_float+0xfe>
 80103a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80103aa:	d118      	bne.n	80103de <_printf_float+0x1c2>
 80103ac:	2900      	cmp	r1, #0
 80103ae:	6863      	ldr	r3, [r4, #4]
 80103b0:	dd0b      	ble.n	80103ca <_printf_float+0x1ae>
 80103b2:	6121      	str	r1, [r4, #16]
 80103b4:	b913      	cbnz	r3, 80103bc <_printf_float+0x1a0>
 80103b6:	6822      	ldr	r2, [r4, #0]
 80103b8:	07d0      	lsls	r0, r2, #31
 80103ba:	d502      	bpl.n	80103c2 <_printf_float+0x1a6>
 80103bc:	3301      	adds	r3, #1
 80103be:	440b      	add	r3, r1
 80103c0:	6123      	str	r3, [r4, #16]
 80103c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80103c4:	f04f 0900 	mov.w	r9, #0
 80103c8:	e7de      	b.n	8010388 <_printf_float+0x16c>
 80103ca:	b913      	cbnz	r3, 80103d2 <_printf_float+0x1b6>
 80103cc:	6822      	ldr	r2, [r4, #0]
 80103ce:	07d2      	lsls	r2, r2, #31
 80103d0:	d501      	bpl.n	80103d6 <_printf_float+0x1ba>
 80103d2:	3302      	adds	r3, #2
 80103d4:	e7f4      	b.n	80103c0 <_printf_float+0x1a4>
 80103d6:	2301      	movs	r3, #1
 80103d8:	e7f2      	b.n	80103c0 <_printf_float+0x1a4>
 80103da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80103de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103e0:	4299      	cmp	r1, r3
 80103e2:	db05      	blt.n	80103f0 <_printf_float+0x1d4>
 80103e4:	6823      	ldr	r3, [r4, #0]
 80103e6:	6121      	str	r1, [r4, #16]
 80103e8:	07d8      	lsls	r0, r3, #31
 80103ea:	d5ea      	bpl.n	80103c2 <_printf_float+0x1a6>
 80103ec:	1c4b      	adds	r3, r1, #1
 80103ee:	e7e7      	b.n	80103c0 <_printf_float+0x1a4>
 80103f0:	2900      	cmp	r1, #0
 80103f2:	bfd4      	ite	le
 80103f4:	f1c1 0202 	rsble	r2, r1, #2
 80103f8:	2201      	movgt	r2, #1
 80103fa:	4413      	add	r3, r2
 80103fc:	e7e0      	b.n	80103c0 <_printf_float+0x1a4>
 80103fe:	6823      	ldr	r3, [r4, #0]
 8010400:	055a      	lsls	r2, r3, #21
 8010402:	d407      	bmi.n	8010414 <_printf_float+0x1f8>
 8010404:	6923      	ldr	r3, [r4, #16]
 8010406:	4642      	mov	r2, r8
 8010408:	4631      	mov	r1, r6
 801040a:	4628      	mov	r0, r5
 801040c:	47b8      	blx	r7
 801040e:	3001      	adds	r0, #1
 8010410:	d12c      	bne.n	801046c <_printf_float+0x250>
 8010412:	e764      	b.n	80102de <_printf_float+0xc2>
 8010414:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010418:	f240 80e0 	bls.w	80105dc <_printf_float+0x3c0>
 801041c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010420:	2200      	movs	r2, #0
 8010422:	2300      	movs	r3, #0
 8010424:	f7f0 fb50 	bl	8000ac8 <__aeabi_dcmpeq>
 8010428:	2800      	cmp	r0, #0
 801042a:	d034      	beq.n	8010496 <_printf_float+0x27a>
 801042c:	4a37      	ldr	r2, [pc, #220]	; (801050c <_printf_float+0x2f0>)
 801042e:	2301      	movs	r3, #1
 8010430:	4631      	mov	r1, r6
 8010432:	4628      	mov	r0, r5
 8010434:	47b8      	blx	r7
 8010436:	3001      	adds	r0, #1
 8010438:	f43f af51 	beq.w	80102de <_printf_float+0xc2>
 801043c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010440:	429a      	cmp	r2, r3
 8010442:	db02      	blt.n	801044a <_printf_float+0x22e>
 8010444:	6823      	ldr	r3, [r4, #0]
 8010446:	07d8      	lsls	r0, r3, #31
 8010448:	d510      	bpl.n	801046c <_printf_float+0x250>
 801044a:	ee18 3a10 	vmov	r3, s16
 801044e:	4652      	mov	r2, sl
 8010450:	4631      	mov	r1, r6
 8010452:	4628      	mov	r0, r5
 8010454:	47b8      	blx	r7
 8010456:	3001      	adds	r0, #1
 8010458:	f43f af41 	beq.w	80102de <_printf_float+0xc2>
 801045c:	f04f 0800 	mov.w	r8, #0
 8010460:	f104 091a 	add.w	r9, r4, #26
 8010464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010466:	3b01      	subs	r3, #1
 8010468:	4543      	cmp	r3, r8
 801046a:	dc09      	bgt.n	8010480 <_printf_float+0x264>
 801046c:	6823      	ldr	r3, [r4, #0]
 801046e:	079b      	lsls	r3, r3, #30
 8010470:	f100 8105 	bmi.w	801067e <_printf_float+0x462>
 8010474:	68e0      	ldr	r0, [r4, #12]
 8010476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010478:	4298      	cmp	r0, r3
 801047a:	bfb8      	it	lt
 801047c:	4618      	movlt	r0, r3
 801047e:	e730      	b.n	80102e2 <_printf_float+0xc6>
 8010480:	2301      	movs	r3, #1
 8010482:	464a      	mov	r2, r9
 8010484:	4631      	mov	r1, r6
 8010486:	4628      	mov	r0, r5
 8010488:	47b8      	blx	r7
 801048a:	3001      	adds	r0, #1
 801048c:	f43f af27 	beq.w	80102de <_printf_float+0xc2>
 8010490:	f108 0801 	add.w	r8, r8, #1
 8010494:	e7e6      	b.n	8010464 <_printf_float+0x248>
 8010496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010498:	2b00      	cmp	r3, #0
 801049a:	dc39      	bgt.n	8010510 <_printf_float+0x2f4>
 801049c:	4a1b      	ldr	r2, [pc, #108]	; (801050c <_printf_float+0x2f0>)
 801049e:	2301      	movs	r3, #1
 80104a0:	4631      	mov	r1, r6
 80104a2:	4628      	mov	r0, r5
 80104a4:	47b8      	blx	r7
 80104a6:	3001      	adds	r0, #1
 80104a8:	f43f af19 	beq.w	80102de <_printf_float+0xc2>
 80104ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104b0:	4313      	orrs	r3, r2
 80104b2:	d102      	bne.n	80104ba <_printf_float+0x29e>
 80104b4:	6823      	ldr	r3, [r4, #0]
 80104b6:	07d9      	lsls	r1, r3, #31
 80104b8:	d5d8      	bpl.n	801046c <_printf_float+0x250>
 80104ba:	ee18 3a10 	vmov	r3, s16
 80104be:	4652      	mov	r2, sl
 80104c0:	4631      	mov	r1, r6
 80104c2:	4628      	mov	r0, r5
 80104c4:	47b8      	blx	r7
 80104c6:	3001      	adds	r0, #1
 80104c8:	f43f af09 	beq.w	80102de <_printf_float+0xc2>
 80104cc:	f04f 0900 	mov.w	r9, #0
 80104d0:	f104 0a1a 	add.w	sl, r4, #26
 80104d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104d6:	425b      	negs	r3, r3
 80104d8:	454b      	cmp	r3, r9
 80104da:	dc01      	bgt.n	80104e0 <_printf_float+0x2c4>
 80104dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104de:	e792      	b.n	8010406 <_printf_float+0x1ea>
 80104e0:	2301      	movs	r3, #1
 80104e2:	4652      	mov	r2, sl
 80104e4:	4631      	mov	r1, r6
 80104e6:	4628      	mov	r0, r5
 80104e8:	47b8      	blx	r7
 80104ea:	3001      	adds	r0, #1
 80104ec:	f43f aef7 	beq.w	80102de <_printf_float+0xc2>
 80104f0:	f109 0901 	add.w	r9, r9, #1
 80104f4:	e7ee      	b.n	80104d4 <_printf_float+0x2b8>
 80104f6:	bf00      	nop
 80104f8:	7fefffff 	.word	0x7fefffff
 80104fc:	08015514 	.word	0x08015514
 8010500:	08015518 	.word	0x08015518
 8010504:	08015520 	.word	0x08015520
 8010508:	0801551c 	.word	0x0801551c
 801050c:	08015524 	.word	0x08015524
 8010510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010512:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010514:	429a      	cmp	r2, r3
 8010516:	bfa8      	it	ge
 8010518:	461a      	movge	r2, r3
 801051a:	2a00      	cmp	r2, #0
 801051c:	4691      	mov	r9, r2
 801051e:	dc37      	bgt.n	8010590 <_printf_float+0x374>
 8010520:	f04f 0b00 	mov.w	fp, #0
 8010524:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010528:	f104 021a 	add.w	r2, r4, #26
 801052c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801052e:	9305      	str	r3, [sp, #20]
 8010530:	eba3 0309 	sub.w	r3, r3, r9
 8010534:	455b      	cmp	r3, fp
 8010536:	dc33      	bgt.n	80105a0 <_printf_float+0x384>
 8010538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801053c:	429a      	cmp	r2, r3
 801053e:	db3b      	blt.n	80105b8 <_printf_float+0x39c>
 8010540:	6823      	ldr	r3, [r4, #0]
 8010542:	07da      	lsls	r2, r3, #31
 8010544:	d438      	bmi.n	80105b8 <_printf_float+0x39c>
 8010546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010548:	9a05      	ldr	r2, [sp, #20]
 801054a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801054c:	1a9a      	subs	r2, r3, r2
 801054e:	eba3 0901 	sub.w	r9, r3, r1
 8010552:	4591      	cmp	r9, r2
 8010554:	bfa8      	it	ge
 8010556:	4691      	movge	r9, r2
 8010558:	f1b9 0f00 	cmp.w	r9, #0
 801055c:	dc35      	bgt.n	80105ca <_printf_float+0x3ae>
 801055e:	f04f 0800 	mov.w	r8, #0
 8010562:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010566:	f104 0a1a 	add.w	sl, r4, #26
 801056a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801056e:	1a9b      	subs	r3, r3, r2
 8010570:	eba3 0309 	sub.w	r3, r3, r9
 8010574:	4543      	cmp	r3, r8
 8010576:	f77f af79 	ble.w	801046c <_printf_float+0x250>
 801057a:	2301      	movs	r3, #1
 801057c:	4652      	mov	r2, sl
 801057e:	4631      	mov	r1, r6
 8010580:	4628      	mov	r0, r5
 8010582:	47b8      	blx	r7
 8010584:	3001      	adds	r0, #1
 8010586:	f43f aeaa 	beq.w	80102de <_printf_float+0xc2>
 801058a:	f108 0801 	add.w	r8, r8, #1
 801058e:	e7ec      	b.n	801056a <_printf_float+0x34e>
 8010590:	4613      	mov	r3, r2
 8010592:	4631      	mov	r1, r6
 8010594:	4642      	mov	r2, r8
 8010596:	4628      	mov	r0, r5
 8010598:	47b8      	blx	r7
 801059a:	3001      	adds	r0, #1
 801059c:	d1c0      	bne.n	8010520 <_printf_float+0x304>
 801059e:	e69e      	b.n	80102de <_printf_float+0xc2>
 80105a0:	2301      	movs	r3, #1
 80105a2:	4631      	mov	r1, r6
 80105a4:	4628      	mov	r0, r5
 80105a6:	9205      	str	r2, [sp, #20]
 80105a8:	47b8      	blx	r7
 80105aa:	3001      	adds	r0, #1
 80105ac:	f43f ae97 	beq.w	80102de <_printf_float+0xc2>
 80105b0:	9a05      	ldr	r2, [sp, #20]
 80105b2:	f10b 0b01 	add.w	fp, fp, #1
 80105b6:	e7b9      	b.n	801052c <_printf_float+0x310>
 80105b8:	ee18 3a10 	vmov	r3, s16
 80105bc:	4652      	mov	r2, sl
 80105be:	4631      	mov	r1, r6
 80105c0:	4628      	mov	r0, r5
 80105c2:	47b8      	blx	r7
 80105c4:	3001      	adds	r0, #1
 80105c6:	d1be      	bne.n	8010546 <_printf_float+0x32a>
 80105c8:	e689      	b.n	80102de <_printf_float+0xc2>
 80105ca:	9a05      	ldr	r2, [sp, #20]
 80105cc:	464b      	mov	r3, r9
 80105ce:	4442      	add	r2, r8
 80105d0:	4631      	mov	r1, r6
 80105d2:	4628      	mov	r0, r5
 80105d4:	47b8      	blx	r7
 80105d6:	3001      	adds	r0, #1
 80105d8:	d1c1      	bne.n	801055e <_printf_float+0x342>
 80105da:	e680      	b.n	80102de <_printf_float+0xc2>
 80105dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105de:	2a01      	cmp	r2, #1
 80105e0:	dc01      	bgt.n	80105e6 <_printf_float+0x3ca>
 80105e2:	07db      	lsls	r3, r3, #31
 80105e4:	d538      	bpl.n	8010658 <_printf_float+0x43c>
 80105e6:	2301      	movs	r3, #1
 80105e8:	4642      	mov	r2, r8
 80105ea:	4631      	mov	r1, r6
 80105ec:	4628      	mov	r0, r5
 80105ee:	47b8      	blx	r7
 80105f0:	3001      	adds	r0, #1
 80105f2:	f43f ae74 	beq.w	80102de <_printf_float+0xc2>
 80105f6:	ee18 3a10 	vmov	r3, s16
 80105fa:	4652      	mov	r2, sl
 80105fc:	4631      	mov	r1, r6
 80105fe:	4628      	mov	r0, r5
 8010600:	47b8      	blx	r7
 8010602:	3001      	adds	r0, #1
 8010604:	f43f ae6b 	beq.w	80102de <_printf_float+0xc2>
 8010608:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801060c:	2200      	movs	r2, #0
 801060e:	2300      	movs	r3, #0
 8010610:	f7f0 fa5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010614:	b9d8      	cbnz	r0, 801064e <_printf_float+0x432>
 8010616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010618:	f108 0201 	add.w	r2, r8, #1
 801061c:	3b01      	subs	r3, #1
 801061e:	4631      	mov	r1, r6
 8010620:	4628      	mov	r0, r5
 8010622:	47b8      	blx	r7
 8010624:	3001      	adds	r0, #1
 8010626:	d10e      	bne.n	8010646 <_printf_float+0x42a>
 8010628:	e659      	b.n	80102de <_printf_float+0xc2>
 801062a:	2301      	movs	r3, #1
 801062c:	4652      	mov	r2, sl
 801062e:	4631      	mov	r1, r6
 8010630:	4628      	mov	r0, r5
 8010632:	47b8      	blx	r7
 8010634:	3001      	adds	r0, #1
 8010636:	f43f ae52 	beq.w	80102de <_printf_float+0xc2>
 801063a:	f108 0801 	add.w	r8, r8, #1
 801063e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010640:	3b01      	subs	r3, #1
 8010642:	4543      	cmp	r3, r8
 8010644:	dcf1      	bgt.n	801062a <_printf_float+0x40e>
 8010646:	464b      	mov	r3, r9
 8010648:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801064c:	e6dc      	b.n	8010408 <_printf_float+0x1ec>
 801064e:	f04f 0800 	mov.w	r8, #0
 8010652:	f104 0a1a 	add.w	sl, r4, #26
 8010656:	e7f2      	b.n	801063e <_printf_float+0x422>
 8010658:	2301      	movs	r3, #1
 801065a:	4642      	mov	r2, r8
 801065c:	e7df      	b.n	801061e <_printf_float+0x402>
 801065e:	2301      	movs	r3, #1
 8010660:	464a      	mov	r2, r9
 8010662:	4631      	mov	r1, r6
 8010664:	4628      	mov	r0, r5
 8010666:	47b8      	blx	r7
 8010668:	3001      	adds	r0, #1
 801066a:	f43f ae38 	beq.w	80102de <_printf_float+0xc2>
 801066e:	f108 0801 	add.w	r8, r8, #1
 8010672:	68e3      	ldr	r3, [r4, #12]
 8010674:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010676:	1a5b      	subs	r3, r3, r1
 8010678:	4543      	cmp	r3, r8
 801067a:	dcf0      	bgt.n	801065e <_printf_float+0x442>
 801067c:	e6fa      	b.n	8010474 <_printf_float+0x258>
 801067e:	f04f 0800 	mov.w	r8, #0
 8010682:	f104 0919 	add.w	r9, r4, #25
 8010686:	e7f4      	b.n	8010672 <_printf_float+0x456>

08010688 <_printf_common>:
 8010688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801068c:	4616      	mov	r6, r2
 801068e:	4699      	mov	r9, r3
 8010690:	688a      	ldr	r2, [r1, #8]
 8010692:	690b      	ldr	r3, [r1, #16]
 8010694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010698:	4293      	cmp	r3, r2
 801069a:	bfb8      	it	lt
 801069c:	4613      	movlt	r3, r2
 801069e:	6033      	str	r3, [r6, #0]
 80106a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80106a4:	4607      	mov	r7, r0
 80106a6:	460c      	mov	r4, r1
 80106a8:	b10a      	cbz	r2, 80106ae <_printf_common+0x26>
 80106aa:	3301      	adds	r3, #1
 80106ac:	6033      	str	r3, [r6, #0]
 80106ae:	6823      	ldr	r3, [r4, #0]
 80106b0:	0699      	lsls	r1, r3, #26
 80106b2:	bf42      	ittt	mi
 80106b4:	6833      	ldrmi	r3, [r6, #0]
 80106b6:	3302      	addmi	r3, #2
 80106b8:	6033      	strmi	r3, [r6, #0]
 80106ba:	6825      	ldr	r5, [r4, #0]
 80106bc:	f015 0506 	ands.w	r5, r5, #6
 80106c0:	d106      	bne.n	80106d0 <_printf_common+0x48>
 80106c2:	f104 0a19 	add.w	sl, r4, #25
 80106c6:	68e3      	ldr	r3, [r4, #12]
 80106c8:	6832      	ldr	r2, [r6, #0]
 80106ca:	1a9b      	subs	r3, r3, r2
 80106cc:	42ab      	cmp	r3, r5
 80106ce:	dc26      	bgt.n	801071e <_printf_common+0x96>
 80106d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80106d4:	1e13      	subs	r3, r2, #0
 80106d6:	6822      	ldr	r2, [r4, #0]
 80106d8:	bf18      	it	ne
 80106da:	2301      	movne	r3, #1
 80106dc:	0692      	lsls	r2, r2, #26
 80106de:	d42b      	bmi.n	8010738 <_printf_common+0xb0>
 80106e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80106e4:	4649      	mov	r1, r9
 80106e6:	4638      	mov	r0, r7
 80106e8:	47c0      	blx	r8
 80106ea:	3001      	adds	r0, #1
 80106ec:	d01e      	beq.n	801072c <_printf_common+0xa4>
 80106ee:	6823      	ldr	r3, [r4, #0]
 80106f0:	68e5      	ldr	r5, [r4, #12]
 80106f2:	6832      	ldr	r2, [r6, #0]
 80106f4:	f003 0306 	and.w	r3, r3, #6
 80106f8:	2b04      	cmp	r3, #4
 80106fa:	bf08      	it	eq
 80106fc:	1aad      	subeq	r5, r5, r2
 80106fe:	68a3      	ldr	r3, [r4, #8]
 8010700:	6922      	ldr	r2, [r4, #16]
 8010702:	bf0c      	ite	eq
 8010704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010708:	2500      	movne	r5, #0
 801070a:	4293      	cmp	r3, r2
 801070c:	bfc4      	itt	gt
 801070e:	1a9b      	subgt	r3, r3, r2
 8010710:	18ed      	addgt	r5, r5, r3
 8010712:	2600      	movs	r6, #0
 8010714:	341a      	adds	r4, #26
 8010716:	42b5      	cmp	r5, r6
 8010718:	d11a      	bne.n	8010750 <_printf_common+0xc8>
 801071a:	2000      	movs	r0, #0
 801071c:	e008      	b.n	8010730 <_printf_common+0xa8>
 801071e:	2301      	movs	r3, #1
 8010720:	4652      	mov	r2, sl
 8010722:	4649      	mov	r1, r9
 8010724:	4638      	mov	r0, r7
 8010726:	47c0      	blx	r8
 8010728:	3001      	adds	r0, #1
 801072a:	d103      	bne.n	8010734 <_printf_common+0xac>
 801072c:	f04f 30ff 	mov.w	r0, #4294967295
 8010730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010734:	3501      	adds	r5, #1
 8010736:	e7c6      	b.n	80106c6 <_printf_common+0x3e>
 8010738:	18e1      	adds	r1, r4, r3
 801073a:	1c5a      	adds	r2, r3, #1
 801073c:	2030      	movs	r0, #48	; 0x30
 801073e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010742:	4422      	add	r2, r4
 8010744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010748:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801074c:	3302      	adds	r3, #2
 801074e:	e7c7      	b.n	80106e0 <_printf_common+0x58>
 8010750:	2301      	movs	r3, #1
 8010752:	4622      	mov	r2, r4
 8010754:	4649      	mov	r1, r9
 8010756:	4638      	mov	r0, r7
 8010758:	47c0      	blx	r8
 801075a:	3001      	adds	r0, #1
 801075c:	d0e6      	beq.n	801072c <_printf_common+0xa4>
 801075e:	3601      	adds	r6, #1
 8010760:	e7d9      	b.n	8010716 <_printf_common+0x8e>
	...

08010764 <_printf_i>:
 8010764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010768:	7e0f      	ldrb	r7, [r1, #24]
 801076a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801076c:	2f78      	cmp	r7, #120	; 0x78
 801076e:	4691      	mov	r9, r2
 8010770:	4680      	mov	r8, r0
 8010772:	460c      	mov	r4, r1
 8010774:	469a      	mov	sl, r3
 8010776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801077a:	d807      	bhi.n	801078c <_printf_i+0x28>
 801077c:	2f62      	cmp	r7, #98	; 0x62
 801077e:	d80a      	bhi.n	8010796 <_printf_i+0x32>
 8010780:	2f00      	cmp	r7, #0
 8010782:	f000 80d8 	beq.w	8010936 <_printf_i+0x1d2>
 8010786:	2f58      	cmp	r7, #88	; 0x58
 8010788:	f000 80a3 	beq.w	80108d2 <_printf_i+0x16e>
 801078c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010794:	e03a      	b.n	801080c <_printf_i+0xa8>
 8010796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801079a:	2b15      	cmp	r3, #21
 801079c:	d8f6      	bhi.n	801078c <_printf_i+0x28>
 801079e:	a101      	add	r1, pc, #4	; (adr r1, 80107a4 <_printf_i+0x40>)
 80107a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80107a4:	080107fd 	.word	0x080107fd
 80107a8:	08010811 	.word	0x08010811
 80107ac:	0801078d 	.word	0x0801078d
 80107b0:	0801078d 	.word	0x0801078d
 80107b4:	0801078d 	.word	0x0801078d
 80107b8:	0801078d 	.word	0x0801078d
 80107bc:	08010811 	.word	0x08010811
 80107c0:	0801078d 	.word	0x0801078d
 80107c4:	0801078d 	.word	0x0801078d
 80107c8:	0801078d 	.word	0x0801078d
 80107cc:	0801078d 	.word	0x0801078d
 80107d0:	0801091d 	.word	0x0801091d
 80107d4:	08010841 	.word	0x08010841
 80107d8:	080108ff 	.word	0x080108ff
 80107dc:	0801078d 	.word	0x0801078d
 80107e0:	0801078d 	.word	0x0801078d
 80107e4:	0801093f 	.word	0x0801093f
 80107e8:	0801078d 	.word	0x0801078d
 80107ec:	08010841 	.word	0x08010841
 80107f0:	0801078d 	.word	0x0801078d
 80107f4:	0801078d 	.word	0x0801078d
 80107f8:	08010907 	.word	0x08010907
 80107fc:	682b      	ldr	r3, [r5, #0]
 80107fe:	1d1a      	adds	r2, r3, #4
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	602a      	str	r2, [r5, #0]
 8010804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801080c:	2301      	movs	r3, #1
 801080e:	e0a3      	b.n	8010958 <_printf_i+0x1f4>
 8010810:	6820      	ldr	r0, [r4, #0]
 8010812:	6829      	ldr	r1, [r5, #0]
 8010814:	0606      	lsls	r6, r0, #24
 8010816:	f101 0304 	add.w	r3, r1, #4
 801081a:	d50a      	bpl.n	8010832 <_printf_i+0xce>
 801081c:	680e      	ldr	r6, [r1, #0]
 801081e:	602b      	str	r3, [r5, #0]
 8010820:	2e00      	cmp	r6, #0
 8010822:	da03      	bge.n	801082c <_printf_i+0xc8>
 8010824:	232d      	movs	r3, #45	; 0x2d
 8010826:	4276      	negs	r6, r6
 8010828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801082c:	485e      	ldr	r0, [pc, #376]	; (80109a8 <_printf_i+0x244>)
 801082e:	230a      	movs	r3, #10
 8010830:	e019      	b.n	8010866 <_printf_i+0x102>
 8010832:	680e      	ldr	r6, [r1, #0]
 8010834:	602b      	str	r3, [r5, #0]
 8010836:	f010 0f40 	tst.w	r0, #64	; 0x40
 801083a:	bf18      	it	ne
 801083c:	b236      	sxthne	r6, r6
 801083e:	e7ef      	b.n	8010820 <_printf_i+0xbc>
 8010840:	682b      	ldr	r3, [r5, #0]
 8010842:	6820      	ldr	r0, [r4, #0]
 8010844:	1d19      	adds	r1, r3, #4
 8010846:	6029      	str	r1, [r5, #0]
 8010848:	0601      	lsls	r1, r0, #24
 801084a:	d501      	bpl.n	8010850 <_printf_i+0xec>
 801084c:	681e      	ldr	r6, [r3, #0]
 801084e:	e002      	b.n	8010856 <_printf_i+0xf2>
 8010850:	0646      	lsls	r6, r0, #25
 8010852:	d5fb      	bpl.n	801084c <_printf_i+0xe8>
 8010854:	881e      	ldrh	r6, [r3, #0]
 8010856:	4854      	ldr	r0, [pc, #336]	; (80109a8 <_printf_i+0x244>)
 8010858:	2f6f      	cmp	r7, #111	; 0x6f
 801085a:	bf0c      	ite	eq
 801085c:	2308      	moveq	r3, #8
 801085e:	230a      	movne	r3, #10
 8010860:	2100      	movs	r1, #0
 8010862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010866:	6865      	ldr	r5, [r4, #4]
 8010868:	60a5      	str	r5, [r4, #8]
 801086a:	2d00      	cmp	r5, #0
 801086c:	bfa2      	ittt	ge
 801086e:	6821      	ldrge	r1, [r4, #0]
 8010870:	f021 0104 	bicge.w	r1, r1, #4
 8010874:	6021      	strge	r1, [r4, #0]
 8010876:	b90e      	cbnz	r6, 801087c <_printf_i+0x118>
 8010878:	2d00      	cmp	r5, #0
 801087a:	d04d      	beq.n	8010918 <_printf_i+0x1b4>
 801087c:	4615      	mov	r5, r2
 801087e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010882:	fb03 6711 	mls	r7, r3, r1, r6
 8010886:	5dc7      	ldrb	r7, [r0, r7]
 8010888:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801088c:	4637      	mov	r7, r6
 801088e:	42bb      	cmp	r3, r7
 8010890:	460e      	mov	r6, r1
 8010892:	d9f4      	bls.n	801087e <_printf_i+0x11a>
 8010894:	2b08      	cmp	r3, #8
 8010896:	d10b      	bne.n	80108b0 <_printf_i+0x14c>
 8010898:	6823      	ldr	r3, [r4, #0]
 801089a:	07de      	lsls	r6, r3, #31
 801089c:	d508      	bpl.n	80108b0 <_printf_i+0x14c>
 801089e:	6923      	ldr	r3, [r4, #16]
 80108a0:	6861      	ldr	r1, [r4, #4]
 80108a2:	4299      	cmp	r1, r3
 80108a4:	bfde      	ittt	le
 80108a6:	2330      	movle	r3, #48	; 0x30
 80108a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80108ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80108b0:	1b52      	subs	r2, r2, r5
 80108b2:	6122      	str	r2, [r4, #16]
 80108b4:	f8cd a000 	str.w	sl, [sp]
 80108b8:	464b      	mov	r3, r9
 80108ba:	aa03      	add	r2, sp, #12
 80108bc:	4621      	mov	r1, r4
 80108be:	4640      	mov	r0, r8
 80108c0:	f7ff fee2 	bl	8010688 <_printf_common>
 80108c4:	3001      	adds	r0, #1
 80108c6:	d14c      	bne.n	8010962 <_printf_i+0x1fe>
 80108c8:	f04f 30ff 	mov.w	r0, #4294967295
 80108cc:	b004      	add	sp, #16
 80108ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108d2:	4835      	ldr	r0, [pc, #212]	; (80109a8 <_printf_i+0x244>)
 80108d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80108d8:	6829      	ldr	r1, [r5, #0]
 80108da:	6823      	ldr	r3, [r4, #0]
 80108dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80108e0:	6029      	str	r1, [r5, #0]
 80108e2:	061d      	lsls	r5, r3, #24
 80108e4:	d514      	bpl.n	8010910 <_printf_i+0x1ac>
 80108e6:	07df      	lsls	r7, r3, #31
 80108e8:	bf44      	itt	mi
 80108ea:	f043 0320 	orrmi.w	r3, r3, #32
 80108ee:	6023      	strmi	r3, [r4, #0]
 80108f0:	b91e      	cbnz	r6, 80108fa <_printf_i+0x196>
 80108f2:	6823      	ldr	r3, [r4, #0]
 80108f4:	f023 0320 	bic.w	r3, r3, #32
 80108f8:	6023      	str	r3, [r4, #0]
 80108fa:	2310      	movs	r3, #16
 80108fc:	e7b0      	b.n	8010860 <_printf_i+0xfc>
 80108fe:	6823      	ldr	r3, [r4, #0]
 8010900:	f043 0320 	orr.w	r3, r3, #32
 8010904:	6023      	str	r3, [r4, #0]
 8010906:	2378      	movs	r3, #120	; 0x78
 8010908:	4828      	ldr	r0, [pc, #160]	; (80109ac <_printf_i+0x248>)
 801090a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801090e:	e7e3      	b.n	80108d8 <_printf_i+0x174>
 8010910:	0659      	lsls	r1, r3, #25
 8010912:	bf48      	it	mi
 8010914:	b2b6      	uxthmi	r6, r6
 8010916:	e7e6      	b.n	80108e6 <_printf_i+0x182>
 8010918:	4615      	mov	r5, r2
 801091a:	e7bb      	b.n	8010894 <_printf_i+0x130>
 801091c:	682b      	ldr	r3, [r5, #0]
 801091e:	6826      	ldr	r6, [r4, #0]
 8010920:	6961      	ldr	r1, [r4, #20]
 8010922:	1d18      	adds	r0, r3, #4
 8010924:	6028      	str	r0, [r5, #0]
 8010926:	0635      	lsls	r5, r6, #24
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	d501      	bpl.n	8010930 <_printf_i+0x1cc>
 801092c:	6019      	str	r1, [r3, #0]
 801092e:	e002      	b.n	8010936 <_printf_i+0x1d2>
 8010930:	0670      	lsls	r0, r6, #25
 8010932:	d5fb      	bpl.n	801092c <_printf_i+0x1c8>
 8010934:	8019      	strh	r1, [r3, #0]
 8010936:	2300      	movs	r3, #0
 8010938:	6123      	str	r3, [r4, #16]
 801093a:	4615      	mov	r5, r2
 801093c:	e7ba      	b.n	80108b4 <_printf_i+0x150>
 801093e:	682b      	ldr	r3, [r5, #0]
 8010940:	1d1a      	adds	r2, r3, #4
 8010942:	602a      	str	r2, [r5, #0]
 8010944:	681d      	ldr	r5, [r3, #0]
 8010946:	6862      	ldr	r2, [r4, #4]
 8010948:	2100      	movs	r1, #0
 801094a:	4628      	mov	r0, r5
 801094c:	f7ef fc48 	bl	80001e0 <memchr>
 8010950:	b108      	cbz	r0, 8010956 <_printf_i+0x1f2>
 8010952:	1b40      	subs	r0, r0, r5
 8010954:	6060      	str	r0, [r4, #4]
 8010956:	6863      	ldr	r3, [r4, #4]
 8010958:	6123      	str	r3, [r4, #16]
 801095a:	2300      	movs	r3, #0
 801095c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010960:	e7a8      	b.n	80108b4 <_printf_i+0x150>
 8010962:	6923      	ldr	r3, [r4, #16]
 8010964:	462a      	mov	r2, r5
 8010966:	4649      	mov	r1, r9
 8010968:	4640      	mov	r0, r8
 801096a:	47d0      	blx	sl
 801096c:	3001      	adds	r0, #1
 801096e:	d0ab      	beq.n	80108c8 <_printf_i+0x164>
 8010970:	6823      	ldr	r3, [r4, #0]
 8010972:	079b      	lsls	r3, r3, #30
 8010974:	d413      	bmi.n	801099e <_printf_i+0x23a>
 8010976:	68e0      	ldr	r0, [r4, #12]
 8010978:	9b03      	ldr	r3, [sp, #12]
 801097a:	4298      	cmp	r0, r3
 801097c:	bfb8      	it	lt
 801097e:	4618      	movlt	r0, r3
 8010980:	e7a4      	b.n	80108cc <_printf_i+0x168>
 8010982:	2301      	movs	r3, #1
 8010984:	4632      	mov	r2, r6
 8010986:	4649      	mov	r1, r9
 8010988:	4640      	mov	r0, r8
 801098a:	47d0      	blx	sl
 801098c:	3001      	adds	r0, #1
 801098e:	d09b      	beq.n	80108c8 <_printf_i+0x164>
 8010990:	3501      	adds	r5, #1
 8010992:	68e3      	ldr	r3, [r4, #12]
 8010994:	9903      	ldr	r1, [sp, #12]
 8010996:	1a5b      	subs	r3, r3, r1
 8010998:	42ab      	cmp	r3, r5
 801099a:	dcf2      	bgt.n	8010982 <_printf_i+0x21e>
 801099c:	e7eb      	b.n	8010976 <_printf_i+0x212>
 801099e:	2500      	movs	r5, #0
 80109a0:	f104 0619 	add.w	r6, r4, #25
 80109a4:	e7f5      	b.n	8010992 <_printf_i+0x22e>
 80109a6:	bf00      	nop
 80109a8:	08015526 	.word	0x08015526
 80109ac:	08015537 	.word	0x08015537

080109b0 <siprintf>:
 80109b0:	b40e      	push	{r1, r2, r3}
 80109b2:	b500      	push	{lr}
 80109b4:	b09c      	sub	sp, #112	; 0x70
 80109b6:	ab1d      	add	r3, sp, #116	; 0x74
 80109b8:	9002      	str	r0, [sp, #8]
 80109ba:	9006      	str	r0, [sp, #24]
 80109bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80109c0:	4809      	ldr	r0, [pc, #36]	; (80109e8 <siprintf+0x38>)
 80109c2:	9107      	str	r1, [sp, #28]
 80109c4:	9104      	str	r1, [sp, #16]
 80109c6:	4909      	ldr	r1, [pc, #36]	; (80109ec <siprintf+0x3c>)
 80109c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80109cc:	9105      	str	r1, [sp, #20]
 80109ce:	6800      	ldr	r0, [r0, #0]
 80109d0:	9301      	str	r3, [sp, #4]
 80109d2:	a902      	add	r1, sp, #8
 80109d4:	f001 fb68 	bl	80120a8 <_svfiprintf_r>
 80109d8:	9b02      	ldr	r3, [sp, #8]
 80109da:	2200      	movs	r2, #0
 80109dc:	701a      	strb	r2, [r3, #0]
 80109de:	b01c      	add	sp, #112	; 0x70
 80109e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80109e4:	b003      	add	sp, #12
 80109e6:	4770      	bx	lr
 80109e8:	2000001c 	.word	0x2000001c
 80109ec:	ffff0208 	.word	0xffff0208

080109f0 <quorem>:
 80109f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109f4:	6903      	ldr	r3, [r0, #16]
 80109f6:	690c      	ldr	r4, [r1, #16]
 80109f8:	42a3      	cmp	r3, r4
 80109fa:	4607      	mov	r7, r0
 80109fc:	f2c0 8081 	blt.w	8010b02 <quorem+0x112>
 8010a00:	3c01      	subs	r4, #1
 8010a02:	f101 0814 	add.w	r8, r1, #20
 8010a06:	f100 0514 	add.w	r5, r0, #20
 8010a0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a0e:	9301      	str	r3, [sp, #4]
 8010a10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010a14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a18:	3301      	adds	r3, #1
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010a20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010a24:	fbb2 f6f3 	udiv	r6, r2, r3
 8010a28:	d331      	bcc.n	8010a8e <quorem+0x9e>
 8010a2a:	f04f 0e00 	mov.w	lr, #0
 8010a2e:	4640      	mov	r0, r8
 8010a30:	46ac      	mov	ip, r5
 8010a32:	46f2      	mov	sl, lr
 8010a34:	f850 2b04 	ldr.w	r2, [r0], #4
 8010a38:	b293      	uxth	r3, r2
 8010a3a:	fb06 e303 	mla	r3, r6, r3, lr
 8010a3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	ebaa 0303 	sub.w	r3, sl, r3
 8010a48:	f8dc a000 	ldr.w	sl, [ip]
 8010a4c:	0c12      	lsrs	r2, r2, #16
 8010a4e:	fa13 f38a 	uxtah	r3, r3, sl
 8010a52:	fb06 e202 	mla	r2, r6, r2, lr
 8010a56:	9300      	str	r3, [sp, #0]
 8010a58:	9b00      	ldr	r3, [sp, #0]
 8010a5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010a5e:	b292      	uxth	r2, r2
 8010a60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a68:	f8bd 3000 	ldrh.w	r3, [sp]
 8010a6c:	4581      	cmp	r9, r0
 8010a6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a72:	f84c 3b04 	str.w	r3, [ip], #4
 8010a76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010a7a:	d2db      	bcs.n	8010a34 <quorem+0x44>
 8010a7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010a80:	b92b      	cbnz	r3, 8010a8e <quorem+0x9e>
 8010a82:	9b01      	ldr	r3, [sp, #4]
 8010a84:	3b04      	subs	r3, #4
 8010a86:	429d      	cmp	r5, r3
 8010a88:	461a      	mov	r2, r3
 8010a8a:	d32e      	bcc.n	8010aea <quorem+0xfa>
 8010a8c:	613c      	str	r4, [r7, #16]
 8010a8e:	4638      	mov	r0, r7
 8010a90:	f001 f8b6 	bl	8011c00 <__mcmp>
 8010a94:	2800      	cmp	r0, #0
 8010a96:	db24      	blt.n	8010ae2 <quorem+0xf2>
 8010a98:	3601      	adds	r6, #1
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	f04f 0c00 	mov.w	ip, #0
 8010aa0:	f858 2b04 	ldr.w	r2, [r8], #4
 8010aa4:	f8d0 e000 	ldr.w	lr, [r0]
 8010aa8:	b293      	uxth	r3, r2
 8010aaa:	ebac 0303 	sub.w	r3, ip, r3
 8010aae:	0c12      	lsrs	r2, r2, #16
 8010ab0:	fa13 f38e 	uxtah	r3, r3, lr
 8010ab4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010ab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ac2:	45c1      	cmp	r9, r8
 8010ac4:	f840 3b04 	str.w	r3, [r0], #4
 8010ac8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010acc:	d2e8      	bcs.n	8010aa0 <quorem+0xb0>
 8010ace:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010ad2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010ad6:	b922      	cbnz	r2, 8010ae2 <quorem+0xf2>
 8010ad8:	3b04      	subs	r3, #4
 8010ada:	429d      	cmp	r5, r3
 8010adc:	461a      	mov	r2, r3
 8010ade:	d30a      	bcc.n	8010af6 <quorem+0x106>
 8010ae0:	613c      	str	r4, [r7, #16]
 8010ae2:	4630      	mov	r0, r6
 8010ae4:	b003      	add	sp, #12
 8010ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aea:	6812      	ldr	r2, [r2, #0]
 8010aec:	3b04      	subs	r3, #4
 8010aee:	2a00      	cmp	r2, #0
 8010af0:	d1cc      	bne.n	8010a8c <quorem+0x9c>
 8010af2:	3c01      	subs	r4, #1
 8010af4:	e7c7      	b.n	8010a86 <quorem+0x96>
 8010af6:	6812      	ldr	r2, [r2, #0]
 8010af8:	3b04      	subs	r3, #4
 8010afa:	2a00      	cmp	r2, #0
 8010afc:	d1f0      	bne.n	8010ae0 <quorem+0xf0>
 8010afe:	3c01      	subs	r4, #1
 8010b00:	e7eb      	b.n	8010ada <quorem+0xea>
 8010b02:	2000      	movs	r0, #0
 8010b04:	e7ee      	b.n	8010ae4 <quorem+0xf4>
	...

08010b08 <_dtoa_r>:
 8010b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b0c:	ed2d 8b04 	vpush	{d8-d9}
 8010b10:	ec57 6b10 	vmov	r6, r7, d0
 8010b14:	b093      	sub	sp, #76	; 0x4c
 8010b16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010b18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010b1c:	9106      	str	r1, [sp, #24]
 8010b1e:	ee10 aa10 	vmov	sl, s0
 8010b22:	4604      	mov	r4, r0
 8010b24:	9209      	str	r2, [sp, #36]	; 0x24
 8010b26:	930c      	str	r3, [sp, #48]	; 0x30
 8010b28:	46bb      	mov	fp, r7
 8010b2a:	b975      	cbnz	r5, 8010b4a <_dtoa_r+0x42>
 8010b2c:	2010      	movs	r0, #16
 8010b2e:	f000 fddd 	bl	80116ec <malloc>
 8010b32:	4602      	mov	r2, r0
 8010b34:	6260      	str	r0, [r4, #36]	; 0x24
 8010b36:	b920      	cbnz	r0, 8010b42 <_dtoa_r+0x3a>
 8010b38:	4ba7      	ldr	r3, [pc, #668]	; (8010dd8 <_dtoa_r+0x2d0>)
 8010b3a:	21ea      	movs	r1, #234	; 0xea
 8010b3c:	48a7      	ldr	r0, [pc, #668]	; (8010ddc <_dtoa_r+0x2d4>)
 8010b3e:	f001 fbc3 	bl	80122c8 <__assert_func>
 8010b42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010b46:	6005      	str	r5, [r0, #0]
 8010b48:	60c5      	str	r5, [r0, #12]
 8010b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b4c:	6819      	ldr	r1, [r3, #0]
 8010b4e:	b151      	cbz	r1, 8010b66 <_dtoa_r+0x5e>
 8010b50:	685a      	ldr	r2, [r3, #4]
 8010b52:	604a      	str	r2, [r1, #4]
 8010b54:	2301      	movs	r3, #1
 8010b56:	4093      	lsls	r3, r2
 8010b58:	608b      	str	r3, [r1, #8]
 8010b5a:	4620      	mov	r0, r4
 8010b5c:	f000 fe0e 	bl	801177c <_Bfree>
 8010b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b62:	2200      	movs	r2, #0
 8010b64:	601a      	str	r2, [r3, #0]
 8010b66:	1e3b      	subs	r3, r7, #0
 8010b68:	bfaa      	itet	ge
 8010b6a:	2300      	movge	r3, #0
 8010b6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010b70:	f8c8 3000 	strge.w	r3, [r8]
 8010b74:	4b9a      	ldr	r3, [pc, #616]	; (8010de0 <_dtoa_r+0x2d8>)
 8010b76:	bfbc      	itt	lt
 8010b78:	2201      	movlt	r2, #1
 8010b7a:	f8c8 2000 	strlt.w	r2, [r8]
 8010b7e:	ea33 030b 	bics.w	r3, r3, fp
 8010b82:	d11b      	bne.n	8010bbc <_dtoa_r+0xb4>
 8010b84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b86:	f242 730f 	movw	r3, #9999	; 0x270f
 8010b8a:	6013      	str	r3, [r2, #0]
 8010b8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b90:	4333      	orrs	r3, r6
 8010b92:	f000 8592 	beq.w	80116ba <_dtoa_r+0xbb2>
 8010b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b98:	b963      	cbnz	r3, 8010bb4 <_dtoa_r+0xac>
 8010b9a:	4b92      	ldr	r3, [pc, #584]	; (8010de4 <_dtoa_r+0x2dc>)
 8010b9c:	e022      	b.n	8010be4 <_dtoa_r+0xdc>
 8010b9e:	4b92      	ldr	r3, [pc, #584]	; (8010de8 <_dtoa_r+0x2e0>)
 8010ba0:	9301      	str	r3, [sp, #4]
 8010ba2:	3308      	adds	r3, #8
 8010ba4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010ba6:	6013      	str	r3, [r2, #0]
 8010ba8:	9801      	ldr	r0, [sp, #4]
 8010baa:	b013      	add	sp, #76	; 0x4c
 8010bac:	ecbd 8b04 	vpop	{d8-d9}
 8010bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bb4:	4b8b      	ldr	r3, [pc, #556]	; (8010de4 <_dtoa_r+0x2dc>)
 8010bb6:	9301      	str	r3, [sp, #4]
 8010bb8:	3303      	adds	r3, #3
 8010bba:	e7f3      	b.n	8010ba4 <_dtoa_r+0x9c>
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	4650      	mov	r0, sl
 8010bc2:	4659      	mov	r1, fp
 8010bc4:	f7ef ff80 	bl	8000ac8 <__aeabi_dcmpeq>
 8010bc8:	ec4b ab19 	vmov	d9, sl, fp
 8010bcc:	4680      	mov	r8, r0
 8010bce:	b158      	cbz	r0, 8010be8 <_dtoa_r+0xe0>
 8010bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	6013      	str	r3, [r2, #0]
 8010bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	f000 856b 	beq.w	80116b4 <_dtoa_r+0xbac>
 8010bde:	4883      	ldr	r0, [pc, #524]	; (8010dec <_dtoa_r+0x2e4>)
 8010be0:	6018      	str	r0, [r3, #0]
 8010be2:	1e43      	subs	r3, r0, #1
 8010be4:	9301      	str	r3, [sp, #4]
 8010be6:	e7df      	b.n	8010ba8 <_dtoa_r+0xa0>
 8010be8:	ec4b ab10 	vmov	d0, sl, fp
 8010bec:	aa10      	add	r2, sp, #64	; 0x40
 8010bee:	a911      	add	r1, sp, #68	; 0x44
 8010bf0:	4620      	mov	r0, r4
 8010bf2:	f001 f8ab 	bl	8011d4c <__d2b>
 8010bf6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010bfa:	ee08 0a10 	vmov	s16, r0
 8010bfe:	2d00      	cmp	r5, #0
 8010c00:	f000 8084 	beq.w	8010d0c <_dtoa_r+0x204>
 8010c04:	ee19 3a90 	vmov	r3, s19
 8010c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010c10:	4656      	mov	r6, sl
 8010c12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010c16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010c1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010c1e:	4b74      	ldr	r3, [pc, #464]	; (8010df0 <_dtoa_r+0x2e8>)
 8010c20:	2200      	movs	r2, #0
 8010c22:	4630      	mov	r0, r6
 8010c24:	4639      	mov	r1, r7
 8010c26:	f7ef fb2f 	bl	8000288 <__aeabi_dsub>
 8010c2a:	a365      	add	r3, pc, #404	; (adr r3, 8010dc0 <_dtoa_r+0x2b8>)
 8010c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c30:	f7ef fce2 	bl	80005f8 <__aeabi_dmul>
 8010c34:	a364      	add	r3, pc, #400	; (adr r3, 8010dc8 <_dtoa_r+0x2c0>)
 8010c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3a:	f7ef fb27 	bl	800028c <__adddf3>
 8010c3e:	4606      	mov	r6, r0
 8010c40:	4628      	mov	r0, r5
 8010c42:	460f      	mov	r7, r1
 8010c44:	f7ef fc6e 	bl	8000524 <__aeabi_i2d>
 8010c48:	a361      	add	r3, pc, #388	; (adr r3, 8010dd0 <_dtoa_r+0x2c8>)
 8010c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4e:	f7ef fcd3 	bl	80005f8 <__aeabi_dmul>
 8010c52:	4602      	mov	r2, r0
 8010c54:	460b      	mov	r3, r1
 8010c56:	4630      	mov	r0, r6
 8010c58:	4639      	mov	r1, r7
 8010c5a:	f7ef fb17 	bl	800028c <__adddf3>
 8010c5e:	4606      	mov	r6, r0
 8010c60:	460f      	mov	r7, r1
 8010c62:	f7ef ff79 	bl	8000b58 <__aeabi_d2iz>
 8010c66:	2200      	movs	r2, #0
 8010c68:	9000      	str	r0, [sp, #0]
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	4630      	mov	r0, r6
 8010c6e:	4639      	mov	r1, r7
 8010c70:	f7ef ff34 	bl	8000adc <__aeabi_dcmplt>
 8010c74:	b150      	cbz	r0, 8010c8c <_dtoa_r+0x184>
 8010c76:	9800      	ldr	r0, [sp, #0]
 8010c78:	f7ef fc54 	bl	8000524 <__aeabi_i2d>
 8010c7c:	4632      	mov	r2, r6
 8010c7e:	463b      	mov	r3, r7
 8010c80:	f7ef ff22 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c84:	b910      	cbnz	r0, 8010c8c <_dtoa_r+0x184>
 8010c86:	9b00      	ldr	r3, [sp, #0]
 8010c88:	3b01      	subs	r3, #1
 8010c8a:	9300      	str	r3, [sp, #0]
 8010c8c:	9b00      	ldr	r3, [sp, #0]
 8010c8e:	2b16      	cmp	r3, #22
 8010c90:	d85a      	bhi.n	8010d48 <_dtoa_r+0x240>
 8010c92:	9a00      	ldr	r2, [sp, #0]
 8010c94:	4b57      	ldr	r3, [pc, #348]	; (8010df4 <_dtoa_r+0x2ec>)
 8010c96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c9e:	ec51 0b19 	vmov	r0, r1, d9
 8010ca2:	f7ef ff1b 	bl	8000adc <__aeabi_dcmplt>
 8010ca6:	2800      	cmp	r0, #0
 8010ca8:	d050      	beq.n	8010d4c <_dtoa_r+0x244>
 8010caa:	9b00      	ldr	r3, [sp, #0]
 8010cac:	3b01      	subs	r3, #1
 8010cae:	9300      	str	r3, [sp, #0]
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8010cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010cb6:	1b5d      	subs	r5, r3, r5
 8010cb8:	1e6b      	subs	r3, r5, #1
 8010cba:	9305      	str	r3, [sp, #20]
 8010cbc:	bf45      	ittet	mi
 8010cbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8010cc2:	9304      	strmi	r3, [sp, #16]
 8010cc4:	2300      	movpl	r3, #0
 8010cc6:	2300      	movmi	r3, #0
 8010cc8:	bf4c      	ite	mi
 8010cca:	9305      	strmi	r3, [sp, #20]
 8010ccc:	9304      	strpl	r3, [sp, #16]
 8010cce:	9b00      	ldr	r3, [sp, #0]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	db3d      	blt.n	8010d50 <_dtoa_r+0x248>
 8010cd4:	9b05      	ldr	r3, [sp, #20]
 8010cd6:	9a00      	ldr	r2, [sp, #0]
 8010cd8:	920a      	str	r2, [sp, #40]	; 0x28
 8010cda:	4413      	add	r3, r2
 8010cdc:	9305      	str	r3, [sp, #20]
 8010cde:	2300      	movs	r3, #0
 8010ce0:	9307      	str	r3, [sp, #28]
 8010ce2:	9b06      	ldr	r3, [sp, #24]
 8010ce4:	2b09      	cmp	r3, #9
 8010ce6:	f200 8089 	bhi.w	8010dfc <_dtoa_r+0x2f4>
 8010cea:	2b05      	cmp	r3, #5
 8010cec:	bfc4      	itt	gt
 8010cee:	3b04      	subgt	r3, #4
 8010cf0:	9306      	strgt	r3, [sp, #24]
 8010cf2:	9b06      	ldr	r3, [sp, #24]
 8010cf4:	f1a3 0302 	sub.w	r3, r3, #2
 8010cf8:	bfcc      	ite	gt
 8010cfa:	2500      	movgt	r5, #0
 8010cfc:	2501      	movle	r5, #1
 8010cfe:	2b03      	cmp	r3, #3
 8010d00:	f200 8087 	bhi.w	8010e12 <_dtoa_r+0x30a>
 8010d04:	e8df f003 	tbb	[pc, r3]
 8010d08:	59383a2d 	.word	0x59383a2d
 8010d0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010d10:	441d      	add	r5, r3
 8010d12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010d16:	2b20      	cmp	r3, #32
 8010d18:	bfc1      	itttt	gt
 8010d1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010d1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010d22:	fa0b f303 	lslgt.w	r3, fp, r3
 8010d26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010d2a:	bfda      	itte	le
 8010d2c:	f1c3 0320 	rsble	r3, r3, #32
 8010d30:	fa06 f003 	lslle.w	r0, r6, r3
 8010d34:	4318      	orrgt	r0, r3
 8010d36:	f7ef fbe5 	bl	8000504 <__aeabi_ui2d>
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	4606      	mov	r6, r0
 8010d3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010d42:	3d01      	subs	r5, #1
 8010d44:	930e      	str	r3, [sp, #56]	; 0x38
 8010d46:	e76a      	b.n	8010c1e <_dtoa_r+0x116>
 8010d48:	2301      	movs	r3, #1
 8010d4a:	e7b2      	b.n	8010cb2 <_dtoa_r+0x1aa>
 8010d4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8010d4e:	e7b1      	b.n	8010cb4 <_dtoa_r+0x1ac>
 8010d50:	9b04      	ldr	r3, [sp, #16]
 8010d52:	9a00      	ldr	r2, [sp, #0]
 8010d54:	1a9b      	subs	r3, r3, r2
 8010d56:	9304      	str	r3, [sp, #16]
 8010d58:	4253      	negs	r3, r2
 8010d5a:	9307      	str	r3, [sp, #28]
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8010d60:	e7bf      	b.n	8010ce2 <_dtoa_r+0x1da>
 8010d62:	2300      	movs	r3, #0
 8010d64:	9308      	str	r3, [sp, #32]
 8010d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	dc55      	bgt.n	8010e18 <_dtoa_r+0x310>
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010d72:	461a      	mov	r2, r3
 8010d74:	9209      	str	r2, [sp, #36]	; 0x24
 8010d76:	e00c      	b.n	8010d92 <_dtoa_r+0x28a>
 8010d78:	2301      	movs	r3, #1
 8010d7a:	e7f3      	b.n	8010d64 <_dtoa_r+0x25c>
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d80:	9308      	str	r3, [sp, #32]
 8010d82:	9b00      	ldr	r3, [sp, #0]
 8010d84:	4413      	add	r3, r2
 8010d86:	9302      	str	r3, [sp, #8]
 8010d88:	3301      	adds	r3, #1
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	9303      	str	r3, [sp, #12]
 8010d8e:	bfb8      	it	lt
 8010d90:	2301      	movlt	r3, #1
 8010d92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010d94:	2200      	movs	r2, #0
 8010d96:	6042      	str	r2, [r0, #4]
 8010d98:	2204      	movs	r2, #4
 8010d9a:	f102 0614 	add.w	r6, r2, #20
 8010d9e:	429e      	cmp	r6, r3
 8010da0:	6841      	ldr	r1, [r0, #4]
 8010da2:	d93d      	bls.n	8010e20 <_dtoa_r+0x318>
 8010da4:	4620      	mov	r0, r4
 8010da6:	f000 fca9 	bl	80116fc <_Balloc>
 8010daa:	9001      	str	r0, [sp, #4]
 8010dac:	2800      	cmp	r0, #0
 8010dae:	d13b      	bne.n	8010e28 <_dtoa_r+0x320>
 8010db0:	4b11      	ldr	r3, [pc, #68]	; (8010df8 <_dtoa_r+0x2f0>)
 8010db2:	4602      	mov	r2, r0
 8010db4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010db8:	e6c0      	b.n	8010b3c <_dtoa_r+0x34>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	e7df      	b.n	8010d7e <_dtoa_r+0x276>
 8010dbe:	bf00      	nop
 8010dc0:	636f4361 	.word	0x636f4361
 8010dc4:	3fd287a7 	.word	0x3fd287a7
 8010dc8:	8b60c8b3 	.word	0x8b60c8b3
 8010dcc:	3fc68a28 	.word	0x3fc68a28
 8010dd0:	509f79fb 	.word	0x509f79fb
 8010dd4:	3fd34413 	.word	0x3fd34413
 8010dd8:	08015555 	.word	0x08015555
 8010ddc:	0801556c 	.word	0x0801556c
 8010de0:	7ff00000 	.word	0x7ff00000
 8010de4:	08015551 	.word	0x08015551
 8010de8:	08015548 	.word	0x08015548
 8010dec:	08015525 	.word	0x08015525
 8010df0:	3ff80000 	.word	0x3ff80000
 8010df4:	08015660 	.word	0x08015660
 8010df8:	080155c7 	.word	0x080155c7
 8010dfc:	2501      	movs	r5, #1
 8010dfe:	2300      	movs	r3, #0
 8010e00:	9306      	str	r3, [sp, #24]
 8010e02:	9508      	str	r5, [sp, #32]
 8010e04:	f04f 33ff 	mov.w	r3, #4294967295
 8010e08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	2312      	movs	r3, #18
 8010e10:	e7b0      	b.n	8010d74 <_dtoa_r+0x26c>
 8010e12:	2301      	movs	r3, #1
 8010e14:	9308      	str	r3, [sp, #32]
 8010e16:	e7f5      	b.n	8010e04 <_dtoa_r+0x2fc>
 8010e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010e1e:	e7b8      	b.n	8010d92 <_dtoa_r+0x28a>
 8010e20:	3101      	adds	r1, #1
 8010e22:	6041      	str	r1, [r0, #4]
 8010e24:	0052      	lsls	r2, r2, #1
 8010e26:	e7b8      	b.n	8010d9a <_dtoa_r+0x292>
 8010e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e2a:	9a01      	ldr	r2, [sp, #4]
 8010e2c:	601a      	str	r2, [r3, #0]
 8010e2e:	9b03      	ldr	r3, [sp, #12]
 8010e30:	2b0e      	cmp	r3, #14
 8010e32:	f200 809d 	bhi.w	8010f70 <_dtoa_r+0x468>
 8010e36:	2d00      	cmp	r5, #0
 8010e38:	f000 809a 	beq.w	8010f70 <_dtoa_r+0x468>
 8010e3c:	9b00      	ldr	r3, [sp, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	dd32      	ble.n	8010ea8 <_dtoa_r+0x3a0>
 8010e42:	4ab7      	ldr	r2, [pc, #732]	; (8011120 <_dtoa_r+0x618>)
 8010e44:	f003 030f 	and.w	r3, r3, #15
 8010e48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010e4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e50:	9b00      	ldr	r3, [sp, #0]
 8010e52:	05d8      	lsls	r0, r3, #23
 8010e54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010e58:	d516      	bpl.n	8010e88 <_dtoa_r+0x380>
 8010e5a:	4bb2      	ldr	r3, [pc, #712]	; (8011124 <_dtoa_r+0x61c>)
 8010e5c:	ec51 0b19 	vmov	r0, r1, d9
 8010e60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010e64:	f7ef fcf2 	bl	800084c <__aeabi_ddiv>
 8010e68:	f007 070f 	and.w	r7, r7, #15
 8010e6c:	4682      	mov	sl, r0
 8010e6e:	468b      	mov	fp, r1
 8010e70:	2503      	movs	r5, #3
 8010e72:	4eac      	ldr	r6, [pc, #688]	; (8011124 <_dtoa_r+0x61c>)
 8010e74:	b957      	cbnz	r7, 8010e8c <_dtoa_r+0x384>
 8010e76:	4642      	mov	r2, r8
 8010e78:	464b      	mov	r3, r9
 8010e7a:	4650      	mov	r0, sl
 8010e7c:	4659      	mov	r1, fp
 8010e7e:	f7ef fce5 	bl	800084c <__aeabi_ddiv>
 8010e82:	4682      	mov	sl, r0
 8010e84:	468b      	mov	fp, r1
 8010e86:	e028      	b.n	8010eda <_dtoa_r+0x3d2>
 8010e88:	2502      	movs	r5, #2
 8010e8a:	e7f2      	b.n	8010e72 <_dtoa_r+0x36a>
 8010e8c:	07f9      	lsls	r1, r7, #31
 8010e8e:	d508      	bpl.n	8010ea2 <_dtoa_r+0x39a>
 8010e90:	4640      	mov	r0, r8
 8010e92:	4649      	mov	r1, r9
 8010e94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010e98:	f7ef fbae 	bl	80005f8 <__aeabi_dmul>
 8010e9c:	3501      	adds	r5, #1
 8010e9e:	4680      	mov	r8, r0
 8010ea0:	4689      	mov	r9, r1
 8010ea2:	107f      	asrs	r7, r7, #1
 8010ea4:	3608      	adds	r6, #8
 8010ea6:	e7e5      	b.n	8010e74 <_dtoa_r+0x36c>
 8010ea8:	f000 809b 	beq.w	8010fe2 <_dtoa_r+0x4da>
 8010eac:	9b00      	ldr	r3, [sp, #0]
 8010eae:	4f9d      	ldr	r7, [pc, #628]	; (8011124 <_dtoa_r+0x61c>)
 8010eb0:	425e      	negs	r6, r3
 8010eb2:	4b9b      	ldr	r3, [pc, #620]	; (8011120 <_dtoa_r+0x618>)
 8010eb4:	f006 020f 	and.w	r2, r6, #15
 8010eb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec0:	ec51 0b19 	vmov	r0, r1, d9
 8010ec4:	f7ef fb98 	bl	80005f8 <__aeabi_dmul>
 8010ec8:	1136      	asrs	r6, r6, #4
 8010eca:	4682      	mov	sl, r0
 8010ecc:	468b      	mov	fp, r1
 8010ece:	2300      	movs	r3, #0
 8010ed0:	2502      	movs	r5, #2
 8010ed2:	2e00      	cmp	r6, #0
 8010ed4:	d17a      	bne.n	8010fcc <_dtoa_r+0x4c4>
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d1d3      	bne.n	8010e82 <_dtoa_r+0x37a>
 8010eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	f000 8082 	beq.w	8010fe6 <_dtoa_r+0x4de>
 8010ee2:	4b91      	ldr	r3, [pc, #580]	; (8011128 <_dtoa_r+0x620>)
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	4650      	mov	r0, sl
 8010ee8:	4659      	mov	r1, fp
 8010eea:	f7ef fdf7 	bl	8000adc <__aeabi_dcmplt>
 8010eee:	2800      	cmp	r0, #0
 8010ef0:	d079      	beq.n	8010fe6 <_dtoa_r+0x4de>
 8010ef2:	9b03      	ldr	r3, [sp, #12]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d076      	beq.n	8010fe6 <_dtoa_r+0x4de>
 8010ef8:	9b02      	ldr	r3, [sp, #8]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	dd36      	ble.n	8010f6c <_dtoa_r+0x464>
 8010efe:	9b00      	ldr	r3, [sp, #0]
 8010f00:	4650      	mov	r0, sl
 8010f02:	4659      	mov	r1, fp
 8010f04:	1e5f      	subs	r7, r3, #1
 8010f06:	2200      	movs	r2, #0
 8010f08:	4b88      	ldr	r3, [pc, #544]	; (801112c <_dtoa_r+0x624>)
 8010f0a:	f7ef fb75 	bl	80005f8 <__aeabi_dmul>
 8010f0e:	9e02      	ldr	r6, [sp, #8]
 8010f10:	4682      	mov	sl, r0
 8010f12:	468b      	mov	fp, r1
 8010f14:	3501      	adds	r5, #1
 8010f16:	4628      	mov	r0, r5
 8010f18:	f7ef fb04 	bl	8000524 <__aeabi_i2d>
 8010f1c:	4652      	mov	r2, sl
 8010f1e:	465b      	mov	r3, fp
 8010f20:	f7ef fb6a 	bl	80005f8 <__aeabi_dmul>
 8010f24:	4b82      	ldr	r3, [pc, #520]	; (8011130 <_dtoa_r+0x628>)
 8010f26:	2200      	movs	r2, #0
 8010f28:	f7ef f9b0 	bl	800028c <__adddf3>
 8010f2c:	46d0      	mov	r8, sl
 8010f2e:	46d9      	mov	r9, fp
 8010f30:	4682      	mov	sl, r0
 8010f32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010f36:	2e00      	cmp	r6, #0
 8010f38:	d158      	bne.n	8010fec <_dtoa_r+0x4e4>
 8010f3a:	4b7e      	ldr	r3, [pc, #504]	; (8011134 <_dtoa_r+0x62c>)
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	4640      	mov	r0, r8
 8010f40:	4649      	mov	r1, r9
 8010f42:	f7ef f9a1 	bl	8000288 <__aeabi_dsub>
 8010f46:	4652      	mov	r2, sl
 8010f48:	465b      	mov	r3, fp
 8010f4a:	4680      	mov	r8, r0
 8010f4c:	4689      	mov	r9, r1
 8010f4e:	f7ef fde3 	bl	8000b18 <__aeabi_dcmpgt>
 8010f52:	2800      	cmp	r0, #0
 8010f54:	f040 8295 	bne.w	8011482 <_dtoa_r+0x97a>
 8010f58:	4652      	mov	r2, sl
 8010f5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010f5e:	4640      	mov	r0, r8
 8010f60:	4649      	mov	r1, r9
 8010f62:	f7ef fdbb 	bl	8000adc <__aeabi_dcmplt>
 8010f66:	2800      	cmp	r0, #0
 8010f68:	f040 8289 	bne.w	801147e <_dtoa_r+0x976>
 8010f6c:	ec5b ab19 	vmov	sl, fp, d9
 8010f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	f2c0 8148 	blt.w	8011208 <_dtoa_r+0x700>
 8010f78:	9a00      	ldr	r2, [sp, #0]
 8010f7a:	2a0e      	cmp	r2, #14
 8010f7c:	f300 8144 	bgt.w	8011208 <_dtoa_r+0x700>
 8010f80:	4b67      	ldr	r3, [pc, #412]	; (8011120 <_dtoa_r+0x618>)
 8010f82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010f86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	f280 80d5 	bge.w	801113c <_dtoa_r+0x634>
 8010f92:	9b03      	ldr	r3, [sp, #12]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f300 80d1 	bgt.w	801113c <_dtoa_r+0x634>
 8010f9a:	f040 826f 	bne.w	801147c <_dtoa_r+0x974>
 8010f9e:	4b65      	ldr	r3, [pc, #404]	; (8011134 <_dtoa_r+0x62c>)
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	4640      	mov	r0, r8
 8010fa4:	4649      	mov	r1, r9
 8010fa6:	f7ef fb27 	bl	80005f8 <__aeabi_dmul>
 8010faa:	4652      	mov	r2, sl
 8010fac:	465b      	mov	r3, fp
 8010fae:	f7ef fda9 	bl	8000b04 <__aeabi_dcmpge>
 8010fb2:	9e03      	ldr	r6, [sp, #12]
 8010fb4:	4637      	mov	r7, r6
 8010fb6:	2800      	cmp	r0, #0
 8010fb8:	f040 8245 	bne.w	8011446 <_dtoa_r+0x93e>
 8010fbc:	9d01      	ldr	r5, [sp, #4]
 8010fbe:	2331      	movs	r3, #49	; 0x31
 8010fc0:	f805 3b01 	strb.w	r3, [r5], #1
 8010fc4:	9b00      	ldr	r3, [sp, #0]
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	9300      	str	r3, [sp, #0]
 8010fca:	e240      	b.n	801144e <_dtoa_r+0x946>
 8010fcc:	07f2      	lsls	r2, r6, #31
 8010fce:	d505      	bpl.n	8010fdc <_dtoa_r+0x4d4>
 8010fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fd4:	f7ef fb10 	bl	80005f8 <__aeabi_dmul>
 8010fd8:	3501      	adds	r5, #1
 8010fda:	2301      	movs	r3, #1
 8010fdc:	1076      	asrs	r6, r6, #1
 8010fde:	3708      	adds	r7, #8
 8010fe0:	e777      	b.n	8010ed2 <_dtoa_r+0x3ca>
 8010fe2:	2502      	movs	r5, #2
 8010fe4:	e779      	b.n	8010eda <_dtoa_r+0x3d2>
 8010fe6:	9f00      	ldr	r7, [sp, #0]
 8010fe8:	9e03      	ldr	r6, [sp, #12]
 8010fea:	e794      	b.n	8010f16 <_dtoa_r+0x40e>
 8010fec:	9901      	ldr	r1, [sp, #4]
 8010fee:	4b4c      	ldr	r3, [pc, #304]	; (8011120 <_dtoa_r+0x618>)
 8010ff0:	4431      	add	r1, r6
 8010ff2:	910d      	str	r1, [sp, #52]	; 0x34
 8010ff4:	9908      	ldr	r1, [sp, #32]
 8010ff6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010ffa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010ffe:	2900      	cmp	r1, #0
 8011000:	d043      	beq.n	801108a <_dtoa_r+0x582>
 8011002:	494d      	ldr	r1, [pc, #308]	; (8011138 <_dtoa_r+0x630>)
 8011004:	2000      	movs	r0, #0
 8011006:	f7ef fc21 	bl	800084c <__aeabi_ddiv>
 801100a:	4652      	mov	r2, sl
 801100c:	465b      	mov	r3, fp
 801100e:	f7ef f93b 	bl	8000288 <__aeabi_dsub>
 8011012:	9d01      	ldr	r5, [sp, #4]
 8011014:	4682      	mov	sl, r0
 8011016:	468b      	mov	fp, r1
 8011018:	4649      	mov	r1, r9
 801101a:	4640      	mov	r0, r8
 801101c:	f7ef fd9c 	bl	8000b58 <__aeabi_d2iz>
 8011020:	4606      	mov	r6, r0
 8011022:	f7ef fa7f 	bl	8000524 <__aeabi_i2d>
 8011026:	4602      	mov	r2, r0
 8011028:	460b      	mov	r3, r1
 801102a:	4640      	mov	r0, r8
 801102c:	4649      	mov	r1, r9
 801102e:	f7ef f92b 	bl	8000288 <__aeabi_dsub>
 8011032:	3630      	adds	r6, #48	; 0x30
 8011034:	f805 6b01 	strb.w	r6, [r5], #1
 8011038:	4652      	mov	r2, sl
 801103a:	465b      	mov	r3, fp
 801103c:	4680      	mov	r8, r0
 801103e:	4689      	mov	r9, r1
 8011040:	f7ef fd4c 	bl	8000adc <__aeabi_dcmplt>
 8011044:	2800      	cmp	r0, #0
 8011046:	d163      	bne.n	8011110 <_dtoa_r+0x608>
 8011048:	4642      	mov	r2, r8
 801104a:	464b      	mov	r3, r9
 801104c:	4936      	ldr	r1, [pc, #216]	; (8011128 <_dtoa_r+0x620>)
 801104e:	2000      	movs	r0, #0
 8011050:	f7ef f91a 	bl	8000288 <__aeabi_dsub>
 8011054:	4652      	mov	r2, sl
 8011056:	465b      	mov	r3, fp
 8011058:	f7ef fd40 	bl	8000adc <__aeabi_dcmplt>
 801105c:	2800      	cmp	r0, #0
 801105e:	f040 80b5 	bne.w	80111cc <_dtoa_r+0x6c4>
 8011062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011064:	429d      	cmp	r5, r3
 8011066:	d081      	beq.n	8010f6c <_dtoa_r+0x464>
 8011068:	4b30      	ldr	r3, [pc, #192]	; (801112c <_dtoa_r+0x624>)
 801106a:	2200      	movs	r2, #0
 801106c:	4650      	mov	r0, sl
 801106e:	4659      	mov	r1, fp
 8011070:	f7ef fac2 	bl	80005f8 <__aeabi_dmul>
 8011074:	4b2d      	ldr	r3, [pc, #180]	; (801112c <_dtoa_r+0x624>)
 8011076:	4682      	mov	sl, r0
 8011078:	468b      	mov	fp, r1
 801107a:	4640      	mov	r0, r8
 801107c:	4649      	mov	r1, r9
 801107e:	2200      	movs	r2, #0
 8011080:	f7ef faba 	bl	80005f8 <__aeabi_dmul>
 8011084:	4680      	mov	r8, r0
 8011086:	4689      	mov	r9, r1
 8011088:	e7c6      	b.n	8011018 <_dtoa_r+0x510>
 801108a:	4650      	mov	r0, sl
 801108c:	4659      	mov	r1, fp
 801108e:	f7ef fab3 	bl	80005f8 <__aeabi_dmul>
 8011092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011094:	9d01      	ldr	r5, [sp, #4]
 8011096:	930f      	str	r3, [sp, #60]	; 0x3c
 8011098:	4682      	mov	sl, r0
 801109a:	468b      	mov	fp, r1
 801109c:	4649      	mov	r1, r9
 801109e:	4640      	mov	r0, r8
 80110a0:	f7ef fd5a 	bl	8000b58 <__aeabi_d2iz>
 80110a4:	4606      	mov	r6, r0
 80110a6:	f7ef fa3d 	bl	8000524 <__aeabi_i2d>
 80110aa:	3630      	adds	r6, #48	; 0x30
 80110ac:	4602      	mov	r2, r0
 80110ae:	460b      	mov	r3, r1
 80110b0:	4640      	mov	r0, r8
 80110b2:	4649      	mov	r1, r9
 80110b4:	f7ef f8e8 	bl	8000288 <__aeabi_dsub>
 80110b8:	f805 6b01 	strb.w	r6, [r5], #1
 80110bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110be:	429d      	cmp	r5, r3
 80110c0:	4680      	mov	r8, r0
 80110c2:	4689      	mov	r9, r1
 80110c4:	f04f 0200 	mov.w	r2, #0
 80110c8:	d124      	bne.n	8011114 <_dtoa_r+0x60c>
 80110ca:	4b1b      	ldr	r3, [pc, #108]	; (8011138 <_dtoa_r+0x630>)
 80110cc:	4650      	mov	r0, sl
 80110ce:	4659      	mov	r1, fp
 80110d0:	f7ef f8dc 	bl	800028c <__adddf3>
 80110d4:	4602      	mov	r2, r0
 80110d6:	460b      	mov	r3, r1
 80110d8:	4640      	mov	r0, r8
 80110da:	4649      	mov	r1, r9
 80110dc:	f7ef fd1c 	bl	8000b18 <__aeabi_dcmpgt>
 80110e0:	2800      	cmp	r0, #0
 80110e2:	d173      	bne.n	80111cc <_dtoa_r+0x6c4>
 80110e4:	4652      	mov	r2, sl
 80110e6:	465b      	mov	r3, fp
 80110e8:	4913      	ldr	r1, [pc, #76]	; (8011138 <_dtoa_r+0x630>)
 80110ea:	2000      	movs	r0, #0
 80110ec:	f7ef f8cc 	bl	8000288 <__aeabi_dsub>
 80110f0:	4602      	mov	r2, r0
 80110f2:	460b      	mov	r3, r1
 80110f4:	4640      	mov	r0, r8
 80110f6:	4649      	mov	r1, r9
 80110f8:	f7ef fcf0 	bl	8000adc <__aeabi_dcmplt>
 80110fc:	2800      	cmp	r0, #0
 80110fe:	f43f af35 	beq.w	8010f6c <_dtoa_r+0x464>
 8011102:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011104:	1e6b      	subs	r3, r5, #1
 8011106:	930f      	str	r3, [sp, #60]	; 0x3c
 8011108:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801110c:	2b30      	cmp	r3, #48	; 0x30
 801110e:	d0f8      	beq.n	8011102 <_dtoa_r+0x5fa>
 8011110:	9700      	str	r7, [sp, #0]
 8011112:	e049      	b.n	80111a8 <_dtoa_r+0x6a0>
 8011114:	4b05      	ldr	r3, [pc, #20]	; (801112c <_dtoa_r+0x624>)
 8011116:	f7ef fa6f 	bl	80005f8 <__aeabi_dmul>
 801111a:	4680      	mov	r8, r0
 801111c:	4689      	mov	r9, r1
 801111e:	e7bd      	b.n	801109c <_dtoa_r+0x594>
 8011120:	08015660 	.word	0x08015660
 8011124:	08015638 	.word	0x08015638
 8011128:	3ff00000 	.word	0x3ff00000
 801112c:	40240000 	.word	0x40240000
 8011130:	401c0000 	.word	0x401c0000
 8011134:	40140000 	.word	0x40140000
 8011138:	3fe00000 	.word	0x3fe00000
 801113c:	9d01      	ldr	r5, [sp, #4]
 801113e:	4656      	mov	r6, sl
 8011140:	465f      	mov	r7, fp
 8011142:	4642      	mov	r2, r8
 8011144:	464b      	mov	r3, r9
 8011146:	4630      	mov	r0, r6
 8011148:	4639      	mov	r1, r7
 801114a:	f7ef fb7f 	bl	800084c <__aeabi_ddiv>
 801114e:	f7ef fd03 	bl	8000b58 <__aeabi_d2iz>
 8011152:	4682      	mov	sl, r0
 8011154:	f7ef f9e6 	bl	8000524 <__aeabi_i2d>
 8011158:	4642      	mov	r2, r8
 801115a:	464b      	mov	r3, r9
 801115c:	f7ef fa4c 	bl	80005f8 <__aeabi_dmul>
 8011160:	4602      	mov	r2, r0
 8011162:	460b      	mov	r3, r1
 8011164:	4630      	mov	r0, r6
 8011166:	4639      	mov	r1, r7
 8011168:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801116c:	f7ef f88c 	bl	8000288 <__aeabi_dsub>
 8011170:	f805 6b01 	strb.w	r6, [r5], #1
 8011174:	9e01      	ldr	r6, [sp, #4]
 8011176:	9f03      	ldr	r7, [sp, #12]
 8011178:	1bae      	subs	r6, r5, r6
 801117a:	42b7      	cmp	r7, r6
 801117c:	4602      	mov	r2, r0
 801117e:	460b      	mov	r3, r1
 8011180:	d135      	bne.n	80111ee <_dtoa_r+0x6e6>
 8011182:	f7ef f883 	bl	800028c <__adddf3>
 8011186:	4642      	mov	r2, r8
 8011188:	464b      	mov	r3, r9
 801118a:	4606      	mov	r6, r0
 801118c:	460f      	mov	r7, r1
 801118e:	f7ef fcc3 	bl	8000b18 <__aeabi_dcmpgt>
 8011192:	b9d0      	cbnz	r0, 80111ca <_dtoa_r+0x6c2>
 8011194:	4642      	mov	r2, r8
 8011196:	464b      	mov	r3, r9
 8011198:	4630      	mov	r0, r6
 801119a:	4639      	mov	r1, r7
 801119c:	f7ef fc94 	bl	8000ac8 <__aeabi_dcmpeq>
 80111a0:	b110      	cbz	r0, 80111a8 <_dtoa_r+0x6a0>
 80111a2:	f01a 0f01 	tst.w	sl, #1
 80111a6:	d110      	bne.n	80111ca <_dtoa_r+0x6c2>
 80111a8:	4620      	mov	r0, r4
 80111aa:	ee18 1a10 	vmov	r1, s16
 80111ae:	f000 fae5 	bl	801177c <_Bfree>
 80111b2:	2300      	movs	r3, #0
 80111b4:	9800      	ldr	r0, [sp, #0]
 80111b6:	702b      	strb	r3, [r5, #0]
 80111b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111ba:	3001      	adds	r0, #1
 80111bc:	6018      	str	r0, [r3, #0]
 80111be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	f43f acf1 	beq.w	8010ba8 <_dtoa_r+0xa0>
 80111c6:	601d      	str	r5, [r3, #0]
 80111c8:	e4ee      	b.n	8010ba8 <_dtoa_r+0xa0>
 80111ca:	9f00      	ldr	r7, [sp, #0]
 80111cc:	462b      	mov	r3, r5
 80111ce:	461d      	mov	r5, r3
 80111d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80111d4:	2a39      	cmp	r2, #57	; 0x39
 80111d6:	d106      	bne.n	80111e6 <_dtoa_r+0x6de>
 80111d8:	9a01      	ldr	r2, [sp, #4]
 80111da:	429a      	cmp	r2, r3
 80111dc:	d1f7      	bne.n	80111ce <_dtoa_r+0x6c6>
 80111de:	9901      	ldr	r1, [sp, #4]
 80111e0:	2230      	movs	r2, #48	; 0x30
 80111e2:	3701      	adds	r7, #1
 80111e4:	700a      	strb	r2, [r1, #0]
 80111e6:	781a      	ldrb	r2, [r3, #0]
 80111e8:	3201      	adds	r2, #1
 80111ea:	701a      	strb	r2, [r3, #0]
 80111ec:	e790      	b.n	8011110 <_dtoa_r+0x608>
 80111ee:	4ba6      	ldr	r3, [pc, #664]	; (8011488 <_dtoa_r+0x980>)
 80111f0:	2200      	movs	r2, #0
 80111f2:	f7ef fa01 	bl	80005f8 <__aeabi_dmul>
 80111f6:	2200      	movs	r2, #0
 80111f8:	2300      	movs	r3, #0
 80111fa:	4606      	mov	r6, r0
 80111fc:	460f      	mov	r7, r1
 80111fe:	f7ef fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 8011202:	2800      	cmp	r0, #0
 8011204:	d09d      	beq.n	8011142 <_dtoa_r+0x63a>
 8011206:	e7cf      	b.n	80111a8 <_dtoa_r+0x6a0>
 8011208:	9a08      	ldr	r2, [sp, #32]
 801120a:	2a00      	cmp	r2, #0
 801120c:	f000 80d7 	beq.w	80113be <_dtoa_r+0x8b6>
 8011210:	9a06      	ldr	r2, [sp, #24]
 8011212:	2a01      	cmp	r2, #1
 8011214:	f300 80ba 	bgt.w	801138c <_dtoa_r+0x884>
 8011218:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801121a:	2a00      	cmp	r2, #0
 801121c:	f000 80b2 	beq.w	8011384 <_dtoa_r+0x87c>
 8011220:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011224:	9e07      	ldr	r6, [sp, #28]
 8011226:	9d04      	ldr	r5, [sp, #16]
 8011228:	9a04      	ldr	r2, [sp, #16]
 801122a:	441a      	add	r2, r3
 801122c:	9204      	str	r2, [sp, #16]
 801122e:	9a05      	ldr	r2, [sp, #20]
 8011230:	2101      	movs	r1, #1
 8011232:	441a      	add	r2, r3
 8011234:	4620      	mov	r0, r4
 8011236:	9205      	str	r2, [sp, #20]
 8011238:	f000 fb58 	bl	80118ec <__i2b>
 801123c:	4607      	mov	r7, r0
 801123e:	2d00      	cmp	r5, #0
 8011240:	dd0c      	ble.n	801125c <_dtoa_r+0x754>
 8011242:	9b05      	ldr	r3, [sp, #20]
 8011244:	2b00      	cmp	r3, #0
 8011246:	dd09      	ble.n	801125c <_dtoa_r+0x754>
 8011248:	42ab      	cmp	r3, r5
 801124a:	9a04      	ldr	r2, [sp, #16]
 801124c:	bfa8      	it	ge
 801124e:	462b      	movge	r3, r5
 8011250:	1ad2      	subs	r2, r2, r3
 8011252:	9204      	str	r2, [sp, #16]
 8011254:	9a05      	ldr	r2, [sp, #20]
 8011256:	1aed      	subs	r5, r5, r3
 8011258:	1ad3      	subs	r3, r2, r3
 801125a:	9305      	str	r3, [sp, #20]
 801125c:	9b07      	ldr	r3, [sp, #28]
 801125e:	b31b      	cbz	r3, 80112a8 <_dtoa_r+0x7a0>
 8011260:	9b08      	ldr	r3, [sp, #32]
 8011262:	2b00      	cmp	r3, #0
 8011264:	f000 80af 	beq.w	80113c6 <_dtoa_r+0x8be>
 8011268:	2e00      	cmp	r6, #0
 801126a:	dd13      	ble.n	8011294 <_dtoa_r+0x78c>
 801126c:	4639      	mov	r1, r7
 801126e:	4632      	mov	r2, r6
 8011270:	4620      	mov	r0, r4
 8011272:	f000 fbfb 	bl	8011a6c <__pow5mult>
 8011276:	ee18 2a10 	vmov	r2, s16
 801127a:	4601      	mov	r1, r0
 801127c:	4607      	mov	r7, r0
 801127e:	4620      	mov	r0, r4
 8011280:	f000 fb4a 	bl	8011918 <__multiply>
 8011284:	ee18 1a10 	vmov	r1, s16
 8011288:	4680      	mov	r8, r0
 801128a:	4620      	mov	r0, r4
 801128c:	f000 fa76 	bl	801177c <_Bfree>
 8011290:	ee08 8a10 	vmov	s16, r8
 8011294:	9b07      	ldr	r3, [sp, #28]
 8011296:	1b9a      	subs	r2, r3, r6
 8011298:	d006      	beq.n	80112a8 <_dtoa_r+0x7a0>
 801129a:	ee18 1a10 	vmov	r1, s16
 801129e:	4620      	mov	r0, r4
 80112a0:	f000 fbe4 	bl	8011a6c <__pow5mult>
 80112a4:	ee08 0a10 	vmov	s16, r0
 80112a8:	2101      	movs	r1, #1
 80112aa:	4620      	mov	r0, r4
 80112ac:	f000 fb1e 	bl	80118ec <__i2b>
 80112b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	4606      	mov	r6, r0
 80112b6:	f340 8088 	ble.w	80113ca <_dtoa_r+0x8c2>
 80112ba:	461a      	mov	r2, r3
 80112bc:	4601      	mov	r1, r0
 80112be:	4620      	mov	r0, r4
 80112c0:	f000 fbd4 	bl	8011a6c <__pow5mult>
 80112c4:	9b06      	ldr	r3, [sp, #24]
 80112c6:	2b01      	cmp	r3, #1
 80112c8:	4606      	mov	r6, r0
 80112ca:	f340 8081 	ble.w	80113d0 <_dtoa_r+0x8c8>
 80112ce:	f04f 0800 	mov.w	r8, #0
 80112d2:	6933      	ldr	r3, [r6, #16]
 80112d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80112d8:	6918      	ldr	r0, [r3, #16]
 80112da:	f000 fab7 	bl	801184c <__hi0bits>
 80112de:	f1c0 0020 	rsb	r0, r0, #32
 80112e2:	9b05      	ldr	r3, [sp, #20]
 80112e4:	4418      	add	r0, r3
 80112e6:	f010 001f 	ands.w	r0, r0, #31
 80112ea:	f000 8092 	beq.w	8011412 <_dtoa_r+0x90a>
 80112ee:	f1c0 0320 	rsb	r3, r0, #32
 80112f2:	2b04      	cmp	r3, #4
 80112f4:	f340 808a 	ble.w	801140c <_dtoa_r+0x904>
 80112f8:	f1c0 001c 	rsb	r0, r0, #28
 80112fc:	9b04      	ldr	r3, [sp, #16]
 80112fe:	4403      	add	r3, r0
 8011300:	9304      	str	r3, [sp, #16]
 8011302:	9b05      	ldr	r3, [sp, #20]
 8011304:	4403      	add	r3, r0
 8011306:	4405      	add	r5, r0
 8011308:	9305      	str	r3, [sp, #20]
 801130a:	9b04      	ldr	r3, [sp, #16]
 801130c:	2b00      	cmp	r3, #0
 801130e:	dd07      	ble.n	8011320 <_dtoa_r+0x818>
 8011310:	ee18 1a10 	vmov	r1, s16
 8011314:	461a      	mov	r2, r3
 8011316:	4620      	mov	r0, r4
 8011318:	f000 fc02 	bl	8011b20 <__lshift>
 801131c:	ee08 0a10 	vmov	s16, r0
 8011320:	9b05      	ldr	r3, [sp, #20]
 8011322:	2b00      	cmp	r3, #0
 8011324:	dd05      	ble.n	8011332 <_dtoa_r+0x82a>
 8011326:	4631      	mov	r1, r6
 8011328:	461a      	mov	r2, r3
 801132a:	4620      	mov	r0, r4
 801132c:	f000 fbf8 	bl	8011b20 <__lshift>
 8011330:	4606      	mov	r6, r0
 8011332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011334:	2b00      	cmp	r3, #0
 8011336:	d06e      	beq.n	8011416 <_dtoa_r+0x90e>
 8011338:	ee18 0a10 	vmov	r0, s16
 801133c:	4631      	mov	r1, r6
 801133e:	f000 fc5f 	bl	8011c00 <__mcmp>
 8011342:	2800      	cmp	r0, #0
 8011344:	da67      	bge.n	8011416 <_dtoa_r+0x90e>
 8011346:	9b00      	ldr	r3, [sp, #0]
 8011348:	3b01      	subs	r3, #1
 801134a:	ee18 1a10 	vmov	r1, s16
 801134e:	9300      	str	r3, [sp, #0]
 8011350:	220a      	movs	r2, #10
 8011352:	2300      	movs	r3, #0
 8011354:	4620      	mov	r0, r4
 8011356:	f000 fa33 	bl	80117c0 <__multadd>
 801135a:	9b08      	ldr	r3, [sp, #32]
 801135c:	ee08 0a10 	vmov	s16, r0
 8011360:	2b00      	cmp	r3, #0
 8011362:	f000 81b1 	beq.w	80116c8 <_dtoa_r+0xbc0>
 8011366:	2300      	movs	r3, #0
 8011368:	4639      	mov	r1, r7
 801136a:	220a      	movs	r2, #10
 801136c:	4620      	mov	r0, r4
 801136e:	f000 fa27 	bl	80117c0 <__multadd>
 8011372:	9b02      	ldr	r3, [sp, #8]
 8011374:	2b00      	cmp	r3, #0
 8011376:	4607      	mov	r7, r0
 8011378:	f300 808e 	bgt.w	8011498 <_dtoa_r+0x990>
 801137c:	9b06      	ldr	r3, [sp, #24]
 801137e:	2b02      	cmp	r3, #2
 8011380:	dc51      	bgt.n	8011426 <_dtoa_r+0x91e>
 8011382:	e089      	b.n	8011498 <_dtoa_r+0x990>
 8011384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801138a:	e74b      	b.n	8011224 <_dtoa_r+0x71c>
 801138c:	9b03      	ldr	r3, [sp, #12]
 801138e:	1e5e      	subs	r6, r3, #1
 8011390:	9b07      	ldr	r3, [sp, #28]
 8011392:	42b3      	cmp	r3, r6
 8011394:	bfbf      	itttt	lt
 8011396:	9b07      	ldrlt	r3, [sp, #28]
 8011398:	9607      	strlt	r6, [sp, #28]
 801139a:	1af2      	sublt	r2, r6, r3
 801139c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801139e:	bfb6      	itet	lt
 80113a0:	189b      	addlt	r3, r3, r2
 80113a2:	1b9e      	subge	r6, r3, r6
 80113a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80113a6:	9b03      	ldr	r3, [sp, #12]
 80113a8:	bfb8      	it	lt
 80113aa:	2600      	movlt	r6, #0
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	bfb7      	itett	lt
 80113b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80113b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80113b8:	1a9d      	sublt	r5, r3, r2
 80113ba:	2300      	movlt	r3, #0
 80113bc:	e734      	b.n	8011228 <_dtoa_r+0x720>
 80113be:	9e07      	ldr	r6, [sp, #28]
 80113c0:	9d04      	ldr	r5, [sp, #16]
 80113c2:	9f08      	ldr	r7, [sp, #32]
 80113c4:	e73b      	b.n	801123e <_dtoa_r+0x736>
 80113c6:	9a07      	ldr	r2, [sp, #28]
 80113c8:	e767      	b.n	801129a <_dtoa_r+0x792>
 80113ca:	9b06      	ldr	r3, [sp, #24]
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	dc18      	bgt.n	8011402 <_dtoa_r+0x8fa>
 80113d0:	f1ba 0f00 	cmp.w	sl, #0
 80113d4:	d115      	bne.n	8011402 <_dtoa_r+0x8fa>
 80113d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80113da:	b993      	cbnz	r3, 8011402 <_dtoa_r+0x8fa>
 80113dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80113e0:	0d1b      	lsrs	r3, r3, #20
 80113e2:	051b      	lsls	r3, r3, #20
 80113e4:	b183      	cbz	r3, 8011408 <_dtoa_r+0x900>
 80113e6:	9b04      	ldr	r3, [sp, #16]
 80113e8:	3301      	adds	r3, #1
 80113ea:	9304      	str	r3, [sp, #16]
 80113ec:	9b05      	ldr	r3, [sp, #20]
 80113ee:	3301      	adds	r3, #1
 80113f0:	9305      	str	r3, [sp, #20]
 80113f2:	f04f 0801 	mov.w	r8, #1
 80113f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	f47f af6a 	bne.w	80112d2 <_dtoa_r+0x7ca>
 80113fe:	2001      	movs	r0, #1
 8011400:	e76f      	b.n	80112e2 <_dtoa_r+0x7da>
 8011402:	f04f 0800 	mov.w	r8, #0
 8011406:	e7f6      	b.n	80113f6 <_dtoa_r+0x8ee>
 8011408:	4698      	mov	r8, r3
 801140a:	e7f4      	b.n	80113f6 <_dtoa_r+0x8ee>
 801140c:	f43f af7d 	beq.w	801130a <_dtoa_r+0x802>
 8011410:	4618      	mov	r0, r3
 8011412:	301c      	adds	r0, #28
 8011414:	e772      	b.n	80112fc <_dtoa_r+0x7f4>
 8011416:	9b03      	ldr	r3, [sp, #12]
 8011418:	2b00      	cmp	r3, #0
 801141a:	dc37      	bgt.n	801148c <_dtoa_r+0x984>
 801141c:	9b06      	ldr	r3, [sp, #24]
 801141e:	2b02      	cmp	r3, #2
 8011420:	dd34      	ble.n	801148c <_dtoa_r+0x984>
 8011422:	9b03      	ldr	r3, [sp, #12]
 8011424:	9302      	str	r3, [sp, #8]
 8011426:	9b02      	ldr	r3, [sp, #8]
 8011428:	b96b      	cbnz	r3, 8011446 <_dtoa_r+0x93e>
 801142a:	4631      	mov	r1, r6
 801142c:	2205      	movs	r2, #5
 801142e:	4620      	mov	r0, r4
 8011430:	f000 f9c6 	bl	80117c0 <__multadd>
 8011434:	4601      	mov	r1, r0
 8011436:	4606      	mov	r6, r0
 8011438:	ee18 0a10 	vmov	r0, s16
 801143c:	f000 fbe0 	bl	8011c00 <__mcmp>
 8011440:	2800      	cmp	r0, #0
 8011442:	f73f adbb 	bgt.w	8010fbc <_dtoa_r+0x4b4>
 8011446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011448:	9d01      	ldr	r5, [sp, #4]
 801144a:	43db      	mvns	r3, r3
 801144c:	9300      	str	r3, [sp, #0]
 801144e:	f04f 0800 	mov.w	r8, #0
 8011452:	4631      	mov	r1, r6
 8011454:	4620      	mov	r0, r4
 8011456:	f000 f991 	bl	801177c <_Bfree>
 801145a:	2f00      	cmp	r7, #0
 801145c:	f43f aea4 	beq.w	80111a8 <_dtoa_r+0x6a0>
 8011460:	f1b8 0f00 	cmp.w	r8, #0
 8011464:	d005      	beq.n	8011472 <_dtoa_r+0x96a>
 8011466:	45b8      	cmp	r8, r7
 8011468:	d003      	beq.n	8011472 <_dtoa_r+0x96a>
 801146a:	4641      	mov	r1, r8
 801146c:	4620      	mov	r0, r4
 801146e:	f000 f985 	bl	801177c <_Bfree>
 8011472:	4639      	mov	r1, r7
 8011474:	4620      	mov	r0, r4
 8011476:	f000 f981 	bl	801177c <_Bfree>
 801147a:	e695      	b.n	80111a8 <_dtoa_r+0x6a0>
 801147c:	2600      	movs	r6, #0
 801147e:	4637      	mov	r7, r6
 8011480:	e7e1      	b.n	8011446 <_dtoa_r+0x93e>
 8011482:	9700      	str	r7, [sp, #0]
 8011484:	4637      	mov	r7, r6
 8011486:	e599      	b.n	8010fbc <_dtoa_r+0x4b4>
 8011488:	40240000 	.word	0x40240000
 801148c:	9b08      	ldr	r3, [sp, #32]
 801148e:	2b00      	cmp	r3, #0
 8011490:	f000 80ca 	beq.w	8011628 <_dtoa_r+0xb20>
 8011494:	9b03      	ldr	r3, [sp, #12]
 8011496:	9302      	str	r3, [sp, #8]
 8011498:	2d00      	cmp	r5, #0
 801149a:	dd05      	ble.n	80114a8 <_dtoa_r+0x9a0>
 801149c:	4639      	mov	r1, r7
 801149e:	462a      	mov	r2, r5
 80114a0:	4620      	mov	r0, r4
 80114a2:	f000 fb3d 	bl	8011b20 <__lshift>
 80114a6:	4607      	mov	r7, r0
 80114a8:	f1b8 0f00 	cmp.w	r8, #0
 80114ac:	d05b      	beq.n	8011566 <_dtoa_r+0xa5e>
 80114ae:	6879      	ldr	r1, [r7, #4]
 80114b0:	4620      	mov	r0, r4
 80114b2:	f000 f923 	bl	80116fc <_Balloc>
 80114b6:	4605      	mov	r5, r0
 80114b8:	b928      	cbnz	r0, 80114c6 <_dtoa_r+0x9be>
 80114ba:	4b87      	ldr	r3, [pc, #540]	; (80116d8 <_dtoa_r+0xbd0>)
 80114bc:	4602      	mov	r2, r0
 80114be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80114c2:	f7ff bb3b 	b.w	8010b3c <_dtoa_r+0x34>
 80114c6:	693a      	ldr	r2, [r7, #16]
 80114c8:	3202      	adds	r2, #2
 80114ca:	0092      	lsls	r2, r2, #2
 80114cc:	f107 010c 	add.w	r1, r7, #12
 80114d0:	300c      	adds	r0, #12
 80114d2:	f7fe fded 	bl	80100b0 <memcpy>
 80114d6:	2201      	movs	r2, #1
 80114d8:	4629      	mov	r1, r5
 80114da:	4620      	mov	r0, r4
 80114dc:	f000 fb20 	bl	8011b20 <__lshift>
 80114e0:	9b01      	ldr	r3, [sp, #4]
 80114e2:	f103 0901 	add.w	r9, r3, #1
 80114e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80114ea:	4413      	add	r3, r2
 80114ec:	9305      	str	r3, [sp, #20]
 80114ee:	f00a 0301 	and.w	r3, sl, #1
 80114f2:	46b8      	mov	r8, r7
 80114f4:	9304      	str	r3, [sp, #16]
 80114f6:	4607      	mov	r7, r0
 80114f8:	4631      	mov	r1, r6
 80114fa:	ee18 0a10 	vmov	r0, s16
 80114fe:	f7ff fa77 	bl	80109f0 <quorem>
 8011502:	4641      	mov	r1, r8
 8011504:	9002      	str	r0, [sp, #8]
 8011506:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801150a:	ee18 0a10 	vmov	r0, s16
 801150e:	f000 fb77 	bl	8011c00 <__mcmp>
 8011512:	463a      	mov	r2, r7
 8011514:	9003      	str	r0, [sp, #12]
 8011516:	4631      	mov	r1, r6
 8011518:	4620      	mov	r0, r4
 801151a:	f000 fb8d 	bl	8011c38 <__mdiff>
 801151e:	68c2      	ldr	r2, [r0, #12]
 8011520:	f109 3bff 	add.w	fp, r9, #4294967295
 8011524:	4605      	mov	r5, r0
 8011526:	bb02      	cbnz	r2, 801156a <_dtoa_r+0xa62>
 8011528:	4601      	mov	r1, r0
 801152a:	ee18 0a10 	vmov	r0, s16
 801152e:	f000 fb67 	bl	8011c00 <__mcmp>
 8011532:	4602      	mov	r2, r0
 8011534:	4629      	mov	r1, r5
 8011536:	4620      	mov	r0, r4
 8011538:	9207      	str	r2, [sp, #28]
 801153a:	f000 f91f 	bl	801177c <_Bfree>
 801153e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011542:	ea43 0102 	orr.w	r1, r3, r2
 8011546:	9b04      	ldr	r3, [sp, #16]
 8011548:	430b      	orrs	r3, r1
 801154a:	464d      	mov	r5, r9
 801154c:	d10f      	bne.n	801156e <_dtoa_r+0xa66>
 801154e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011552:	d02a      	beq.n	80115aa <_dtoa_r+0xaa2>
 8011554:	9b03      	ldr	r3, [sp, #12]
 8011556:	2b00      	cmp	r3, #0
 8011558:	dd02      	ble.n	8011560 <_dtoa_r+0xa58>
 801155a:	9b02      	ldr	r3, [sp, #8]
 801155c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011560:	f88b a000 	strb.w	sl, [fp]
 8011564:	e775      	b.n	8011452 <_dtoa_r+0x94a>
 8011566:	4638      	mov	r0, r7
 8011568:	e7ba      	b.n	80114e0 <_dtoa_r+0x9d8>
 801156a:	2201      	movs	r2, #1
 801156c:	e7e2      	b.n	8011534 <_dtoa_r+0xa2c>
 801156e:	9b03      	ldr	r3, [sp, #12]
 8011570:	2b00      	cmp	r3, #0
 8011572:	db04      	blt.n	801157e <_dtoa_r+0xa76>
 8011574:	9906      	ldr	r1, [sp, #24]
 8011576:	430b      	orrs	r3, r1
 8011578:	9904      	ldr	r1, [sp, #16]
 801157a:	430b      	orrs	r3, r1
 801157c:	d122      	bne.n	80115c4 <_dtoa_r+0xabc>
 801157e:	2a00      	cmp	r2, #0
 8011580:	ddee      	ble.n	8011560 <_dtoa_r+0xa58>
 8011582:	ee18 1a10 	vmov	r1, s16
 8011586:	2201      	movs	r2, #1
 8011588:	4620      	mov	r0, r4
 801158a:	f000 fac9 	bl	8011b20 <__lshift>
 801158e:	4631      	mov	r1, r6
 8011590:	ee08 0a10 	vmov	s16, r0
 8011594:	f000 fb34 	bl	8011c00 <__mcmp>
 8011598:	2800      	cmp	r0, #0
 801159a:	dc03      	bgt.n	80115a4 <_dtoa_r+0xa9c>
 801159c:	d1e0      	bne.n	8011560 <_dtoa_r+0xa58>
 801159e:	f01a 0f01 	tst.w	sl, #1
 80115a2:	d0dd      	beq.n	8011560 <_dtoa_r+0xa58>
 80115a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80115a8:	d1d7      	bne.n	801155a <_dtoa_r+0xa52>
 80115aa:	2339      	movs	r3, #57	; 0x39
 80115ac:	f88b 3000 	strb.w	r3, [fp]
 80115b0:	462b      	mov	r3, r5
 80115b2:	461d      	mov	r5, r3
 80115b4:	3b01      	subs	r3, #1
 80115b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80115ba:	2a39      	cmp	r2, #57	; 0x39
 80115bc:	d071      	beq.n	80116a2 <_dtoa_r+0xb9a>
 80115be:	3201      	adds	r2, #1
 80115c0:	701a      	strb	r2, [r3, #0]
 80115c2:	e746      	b.n	8011452 <_dtoa_r+0x94a>
 80115c4:	2a00      	cmp	r2, #0
 80115c6:	dd07      	ble.n	80115d8 <_dtoa_r+0xad0>
 80115c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80115cc:	d0ed      	beq.n	80115aa <_dtoa_r+0xaa2>
 80115ce:	f10a 0301 	add.w	r3, sl, #1
 80115d2:	f88b 3000 	strb.w	r3, [fp]
 80115d6:	e73c      	b.n	8011452 <_dtoa_r+0x94a>
 80115d8:	9b05      	ldr	r3, [sp, #20]
 80115da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80115de:	4599      	cmp	r9, r3
 80115e0:	d047      	beq.n	8011672 <_dtoa_r+0xb6a>
 80115e2:	ee18 1a10 	vmov	r1, s16
 80115e6:	2300      	movs	r3, #0
 80115e8:	220a      	movs	r2, #10
 80115ea:	4620      	mov	r0, r4
 80115ec:	f000 f8e8 	bl	80117c0 <__multadd>
 80115f0:	45b8      	cmp	r8, r7
 80115f2:	ee08 0a10 	vmov	s16, r0
 80115f6:	f04f 0300 	mov.w	r3, #0
 80115fa:	f04f 020a 	mov.w	r2, #10
 80115fe:	4641      	mov	r1, r8
 8011600:	4620      	mov	r0, r4
 8011602:	d106      	bne.n	8011612 <_dtoa_r+0xb0a>
 8011604:	f000 f8dc 	bl	80117c0 <__multadd>
 8011608:	4680      	mov	r8, r0
 801160a:	4607      	mov	r7, r0
 801160c:	f109 0901 	add.w	r9, r9, #1
 8011610:	e772      	b.n	80114f8 <_dtoa_r+0x9f0>
 8011612:	f000 f8d5 	bl	80117c0 <__multadd>
 8011616:	4639      	mov	r1, r7
 8011618:	4680      	mov	r8, r0
 801161a:	2300      	movs	r3, #0
 801161c:	220a      	movs	r2, #10
 801161e:	4620      	mov	r0, r4
 8011620:	f000 f8ce 	bl	80117c0 <__multadd>
 8011624:	4607      	mov	r7, r0
 8011626:	e7f1      	b.n	801160c <_dtoa_r+0xb04>
 8011628:	9b03      	ldr	r3, [sp, #12]
 801162a:	9302      	str	r3, [sp, #8]
 801162c:	9d01      	ldr	r5, [sp, #4]
 801162e:	ee18 0a10 	vmov	r0, s16
 8011632:	4631      	mov	r1, r6
 8011634:	f7ff f9dc 	bl	80109f0 <quorem>
 8011638:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801163c:	9b01      	ldr	r3, [sp, #4]
 801163e:	f805 ab01 	strb.w	sl, [r5], #1
 8011642:	1aea      	subs	r2, r5, r3
 8011644:	9b02      	ldr	r3, [sp, #8]
 8011646:	4293      	cmp	r3, r2
 8011648:	dd09      	ble.n	801165e <_dtoa_r+0xb56>
 801164a:	ee18 1a10 	vmov	r1, s16
 801164e:	2300      	movs	r3, #0
 8011650:	220a      	movs	r2, #10
 8011652:	4620      	mov	r0, r4
 8011654:	f000 f8b4 	bl	80117c0 <__multadd>
 8011658:	ee08 0a10 	vmov	s16, r0
 801165c:	e7e7      	b.n	801162e <_dtoa_r+0xb26>
 801165e:	9b02      	ldr	r3, [sp, #8]
 8011660:	2b00      	cmp	r3, #0
 8011662:	bfc8      	it	gt
 8011664:	461d      	movgt	r5, r3
 8011666:	9b01      	ldr	r3, [sp, #4]
 8011668:	bfd8      	it	le
 801166a:	2501      	movle	r5, #1
 801166c:	441d      	add	r5, r3
 801166e:	f04f 0800 	mov.w	r8, #0
 8011672:	ee18 1a10 	vmov	r1, s16
 8011676:	2201      	movs	r2, #1
 8011678:	4620      	mov	r0, r4
 801167a:	f000 fa51 	bl	8011b20 <__lshift>
 801167e:	4631      	mov	r1, r6
 8011680:	ee08 0a10 	vmov	s16, r0
 8011684:	f000 fabc 	bl	8011c00 <__mcmp>
 8011688:	2800      	cmp	r0, #0
 801168a:	dc91      	bgt.n	80115b0 <_dtoa_r+0xaa8>
 801168c:	d102      	bne.n	8011694 <_dtoa_r+0xb8c>
 801168e:	f01a 0f01 	tst.w	sl, #1
 8011692:	d18d      	bne.n	80115b0 <_dtoa_r+0xaa8>
 8011694:	462b      	mov	r3, r5
 8011696:	461d      	mov	r5, r3
 8011698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801169c:	2a30      	cmp	r2, #48	; 0x30
 801169e:	d0fa      	beq.n	8011696 <_dtoa_r+0xb8e>
 80116a0:	e6d7      	b.n	8011452 <_dtoa_r+0x94a>
 80116a2:	9a01      	ldr	r2, [sp, #4]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d184      	bne.n	80115b2 <_dtoa_r+0xaaa>
 80116a8:	9b00      	ldr	r3, [sp, #0]
 80116aa:	3301      	adds	r3, #1
 80116ac:	9300      	str	r3, [sp, #0]
 80116ae:	2331      	movs	r3, #49	; 0x31
 80116b0:	7013      	strb	r3, [r2, #0]
 80116b2:	e6ce      	b.n	8011452 <_dtoa_r+0x94a>
 80116b4:	4b09      	ldr	r3, [pc, #36]	; (80116dc <_dtoa_r+0xbd4>)
 80116b6:	f7ff ba95 	b.w	8010be4 <_dtoa_r+0xdc>
 80116ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116bc:	2b00      	cmp	r3, #0
 80116be:	f47f aa6e 	bne.w	8010b9e <_dtoa_r+0x96>
 80116c2:	4b07      	ldr	r3, [pc, #28]	; (80116e0 <_dtoa_r+0xbd8>)
 80116c4:	f7ff ba8e 	b.w	8010be4 <_dtoa_r+0xdc>
 80116c8:	9b02      	ldr	r3, [sp, #8]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	dcae      	bgt.n	801162c <_dtoa_r+0xb24>
 80116ce:	9b06      	ldr	r3, [sp, #24]
 80116d0:	2b02      	cmp	r3, #2
 80116d2:	f73f aea8 	bgt.w	8011426 <_dtoa_r+0x91e>
 80116d6:	e7a9      	b.n	801162c <_dtoa_r+0xb24>
 80116d8:	080155c7 	.word	0x080155c7
 80116dc:	08015524 	.word	0x08015524
 80116e0:	08015548 	.word	0x08015548

080116e4 <_localeconv_r>:
 80116e4:	4800      	ldr	r0, [pc, #0]	; (80116e8 <_localeconv_r+0x4>)
 80116e6:	4770      	bx	lr
 80116e8:	20000170 	.word	0x20000170

080116ec <malloc>:
 80116ec:	4b02      	ldr	r3, [pc, #8]	; (80116f8 <malloc+0xc>)
 80116ee:	4601      	mov	r1, r0
 80116f0:	6818      	ldr	r0, [r3, #0]
 80116f2:	f000 bc09 	b.w	8011f08 <_malloc_r>
 80116f6:	bf00      	nop
 80116f8:	2000001c 	.word	0x2000001c

080116fc <_Balloc>:
 80116fc:	b570      	push	{r4, r5, r6, lr}
 80116fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011700:	4604      	mov	r4, r0
 8011702:	460d      	mov	r5, r1
 8011704:	b976      	cbnz	r6, 8011724 <_Balloc+0x28>
 8011706:	2010      	movs	r0, #16
 8011708:	f7ff fff0 	bl	80116ec <malloc>
 801170c:	4602      	mov	r2, r0
 801170e:	6260      	str	r0, [r4, #36]	; 0x24
 8011710:	b920      	cbnz	r0, 801171c <_Balloc+0x20>
 8011712:	4b18      	ldr	r3, [pc, #96]	; (8011774 <_Balloc+0x78>)
 8011714:	4818      	ldr	r0, [pc, #96]	; (8011778 <_Balloc+0x7c>)
 8011716:	2166      	movs	r1, #102	; 0x66
 8011718:	f000 fdd6 	bl	80122c8 <__assert_func>
 801171c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011720:	6006      	str	r6, [r0, #0]
 8011722:	60c6      	str	r6, [r0, #12]
 8011724:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011726:	68f3      	ldr	r3, [r6, #12]
 8011728:	b183      	cbz	r3, 801174c <_Balloc+0x50>
 801172a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801172c:	68db      	ldr	r3, [r3, #12]
 801172e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011732:	b9b8      	cbnz	r0, 8011764 <_Balloc+0x68>
 8011734:	2101      	movs	r1, #1
 8011736:	fa01 f605 	lsl.w	r6, r1, r5
 801173a:	1d72      	adds	r2, r6, #5
 801173c:	0092      	lsls	r2, r2, #2
 801173e:	4620      	mov	r0, r4
 8011740:	f000 fb60 	bl	8011e04 <_calloc_r>
 8011744:	b160      	cbz	r0, 8011760 <_Balloc+0x64>
 8011746:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801174a:	e00e      	b.n	801176a <_Balloc+0x6e>
 801174c:	2221      	movs	r2, #33	; 0x21
 801174e:	2104      	movs	r1, #4
 8011750:	4620      	mov	r0, r4
 8011752:	f000 fb57 	bl	8011e04 <_calloc_r>
 8011756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011758:	60f0      	str	r0, [r6, #12]
 801175a:	68db      	ldr	r3, [r3, #12]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d1e4      	bne.n	801172a <_Balloc+0x2e>
 8011760:	2000      	movs	r0, #0
 8011762:	bd70      	pop	{r4, r5, r6, pc}
 8011764:	6802      	ldr	r2, [r0, #0]
 8011766:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801176a:	2300      	movs	r3, #0
 801176c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011770:	e7f7      	b.n	8011762 <_Balloc+0x66>
 8011772:	bf00      	nop
 8011774:	08015555 	.word	0x08015555
 8011778:	080155d8 	.word	0x080155d8

0801177c <_Bfree>:
 801177c:	b570      	push	{r4, r5, r6, lr}
 801177e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011780:	4605      	mov	r5, r0
 8011782:	460c      	mov	r4, r1
 8011784:	b976      	cbnz	r6, 80117a4 <_Bfree+0x28>
 8011786:	2010      	movs	r0, #16
 8011788:	f7ff ffb0 	bl	80116ec <malloc>
 801178c:	4602      	mov	r2, r0
 801178e:	6268      	str	r0, [r5, #36]	; 0x24
 8011790:	b920      	cbnz	r0, 801179c <_Bfree+0x20>
 8011792:	4b09      	ldr	r3, [pc, #36]	; (80117b8 <_Bfree+0x3c>)
 8011794:	4809      	ldr	r0, [pc, #36]	; (80117bc <_Bfree+0x40>)
 8011796:	218a      	movs	r1, #138	; 0x8a
 8011798:	f000 fd96 	bl	80122c8 <__assert_func>
 801179c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80117a0:	6006      	str	r6, [r0, #0]
 80117a2:	60c6      	str	r6, [r0, #12]
 80117a4:	b13c      	cbz	r4, 80117b6 <_Bfree+0x3a>
 80117a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80117a8:	6862      	ldr	r2, [r4, #4]
 80117aa:	68db      	ldr	r3, [r3, #12]
 80117ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80117b0:	6021      	str	r1, [r4, #0]
 80117b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80117b6:	bd70      	pop	{r4, r5, r6, pc}
 80117b8:	08015555 	.word	0x08015555
 80117bc:	080155d8 	.word	0x080155d8

080117c0 <__multadd>:
 80117c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117c4:	690d      	ldr	r5, [r1, #16]
 80117c6:	4607      	mov	r7, r0
 80117c8:	460c      	mov	r4, r1
 80117ca:	461e      	mov	r6, r3
 80117cc:	f101 0c14 	add.w	ip, r1, #20
 80117d0:	2000      	movs	r0, #0
 80117d2:	f8dc 3000 	ldr.w	r3, [ip]
 80117d6:	b299      	uxth	r1, r3
 80117d8:	fb02 6101 	mla	r1, r2, r1, r6
 80117dc:	0c1e      	lsrs	r6, r3, #16
 80117de:	0c0b      	lsrs	r3, r1, #16
 80117e0:	fb02 3306 	mla	r3, r2, r6, r3
 80117e4:	b289      	uxth	r1, r1
 80117e6:	3001      	adds	r0, #1
 80117e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80117ec:	4285      	cmp	r5, r0
 80117ee:	f84c 1b04 	str.w	r1, [ip], #4
 80117f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80117f6:	dcec      	bgt.n	80117d2 <__multadd+0x12>
 80117f8:	b30e      	cbz	r6, 801183e <__multadd+0x7e>
 80117fa:	68a3      	ldr	r3, [r4, #8]
 80117fc:	42ab      	cmp	r3, r5
 80117fe:	dc19      	bgt.n	8011834 <__multadd+0x74>
 8011800:	6861      	ldr	r1, [r4, #4]
 8011802:	4638      	mov	r0, r7
 8011804:	3101      	adds	r1, #1
 8011806:	f7ff ff79 	bl	80116fc <_Balloc>
 801180a:	4680      	mov	r8, r0
 801180c:	b928      	cbnz	r0, 801181a <__multadd+0x5a>
 801180e:	4602      	mov	r2, r0
 8011810:	4b0c      	ldr	r3, [pc, #48]	; (8011844 <__multadd+0x84>)
 8011812:	480d      	ldr	r0, [pc, #52]	; (8011848 <__multadd+0x88>)
 8011814:	21b5      	movs	r1, #181	; 0xb5
 8011816:	f000 fd57 	bl	80122c8 <__assert_func>
 801181a:	6922      	ldr	r2, [r4, #16]
 801181c:	3202      	adds	r2, #2
 801181e:	f104 010c 	add.w	r1, r4, #12
 8011822:	0092      	lsls	r2, r2, #2
 8011824:	300c      	adds	r0, #12
 8011826:	f7fe fc43 	bl	80100b0 <memcpy>
 801182a:	4621      	mov	r1, r4
 801182c:	4638      	mov	r0, r7
 801182e:	f7ff ffa5 	bl	801177c <_Bfree>
 8011832:	4644      	mov	r4, r8
 8011834:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011838:	3501      	adds	r5, #1
 801183a:	615e      	str	r6, [r3, #20]
 801183c:	6125      	str	r5, [r4, #16]
 801183e:	4620      	mov	r0, r4
 8011840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011844:	080155c7 	.word	0x080155c7
 8011848:	080155d8 	.word	0x080155d8

0801184c <__hi0bits>:
 801184c:	0c03      	lsrs	r3, r0, #16
 801184e:	041b      	lsls	r3, r3, #16
 8011850:	b9d3      	cbnz	r3, 8011888 <__hi0bits+0x3c>
 8011852:	0400      	lsls	r0, r0, #16
 8011854:	2310      	movs	r3, #16
 8011856:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801185a:	bf04      	itt	eq
 801185c:	0200      	lsleq	r0, r0, #8
 801185e:	3308      	addeq	r3, #8
 8011860:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011864:	bf04      	itt	eq
 8011866:	0100      	lsleq	r0, r0, #4
 8011868:	3304      	addeq	r3, #4
 801186a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801186e:	bf04      	itt	eq
 8011870:	0080      	lsleq	r0, r0, #2
 8011872:	3302      	addeq	r3, #2
 8011874:	2800      	cmp	r0, #0
 8011876:	db05      	blt.n	8011884 <__hi0bits+0x38>
 8011878:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801187c:	f103 0301 	add.w	r3, r3, #1
 8011880:	bf08      	it	eq
 8011882:	2320      	moveq	r3, #32
 8011884:	4618      	mov	r0, r3
 8011886:	4770      	bx	lr
 8011888:	2300      	movs	r3, #0
 801188a:	e7e4      	b.n	8011856 <__hi0bits+0xa>

0801188c <__lo0bits>:
 801188c:	6803      	ldr	r3, [r0, #0]
 801188e:	f013 0207 	ands.w	r2, r3, #7
 8011892:	4601      	mov	r1, r0
 8011894:	d00b      	beq.n	80118ae <__lo0bits+0x22>
 8011896:	07da      	lsls	r2, r3, #31
 8011898:	d423      	bmi.n	80118e2 <__lo0bits+0x56>
 801189a:	0798      	lsls	r0, r3, #30
 801189c:	bf49      	itett	mi
 801189e:	085b      	lsrmi	r3, r3, #1
 80118a0:	089b      	lsrpl	r3, r3, #2
 80118a2:	2001      	movmi	r0, #1
 80118a4:	600b      	strmi	r3, [r1, #0]
 80118a6:	bf5c      	itt	pl
 80118a8:	600b      	strpl	r3, [r1, #0]
 80118aa:	2002      	movpl	r0, #2
 80118ac:	4770      	bx	lr
 80118ae:	b298      	uxth	r0, r3
 80118b0:	b9a8      	cbnz	r0, 80118de <__lo0bits+0x52>
 80118b2:	0c1b      	lsrs	r3, r3, #16
 80118b4:	2010      	movs	r0, #16
 80118b6:	b2da      	uxtb	r2, r3
 80118b8:	b90a      	cbnz	r2, 80118be <__lo0bits+0x32>
 80118ba:	3008      	adds	r0, #8
 80118bc:	0a1b      	lsrs	r3, r3, #8
 80118be:	071a      	lsls	r2, r3, #28
 80118c0:	bf04      	itt	eq
 80118c2:	091b      	lsreq	r3, r3, #4
 80118c4:	3004      	addeq	r0, #4
 80118c6:	079a      	lsls	r2, r3, #30
 80118c8:	bf04      	itt	eq
 80118ca:	089b      	lsreq	r3, r3, #2
 80118cc:	3002      	addeq	r0, #2
 80118ce:	07da      	lsls	r2, r3, #31
 80118d0:	d403      	bmi.n	80118da <__lo0bits+0x4e>
 80118d2:	085b      	lsrs	r3, r3, #1
 80118d4:	f100 0001 	add.w	r0, r0, #1
 80118d8:	d005      	beq.n	80118e6 <__lo0bits+0x5a>
 80118da:	600b      	str	r3, [r1, #0]
 80118dc:	4770      	bx	lr
 80118de:	4610      	mov	r0, r2
 80118e0:	e7e9      	b.n	80118b6 <__lo0bits+0x2a>
 80118e2:	2000      	movs	r0, #0
 80118e4:	4770      	bx	lr
 80118e6:	2020      	movs	r0, #32
 80118e8:	4770      	bx	lr
	...

080118ec <__i2b>:
 80118ec:	b510      	push	{r4, lr}
 80118ee:	460c      	mov	r4, r1
 80118f0:	2101      	movs	r1, #1
 80118f2:	f7ff ff03 	bl	80116fc <_Balloc>
 80118f6:	4602      	mov	r2, r0
 80118f8:	b928      	cbnz	r0, 8011906 <__i2b+0x1a>
 80118fa:	4b05      	ldr	r3, [pc, #20]	; (8011910 <__i2b+0x24>)
 80118fc:	4805      	ldr	r0, [pc, #20]	; (8011914 <__i2b+0x28>)
 80118fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011902:	f000 fce1 	bl	80122c8 <__assert_func>
 8011906:	2301      	movs	r3, #1
 8011908:	6144      	str	r4, [r0, #20]
 801190a:	6103      	str	r3, [r0, #16]
 801190c:	bd10      	pop	{r4, pc}
 801190e:	bf00      	nop
 8011910:	080155c7 	.word	0x080155c7
 8011914:	080155d8 	.word	0x080155d8

08011918 <__multiply>:
 8011918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801191c:	4691      	mov	r9, r2
 801191e:	690a      	ldr	r2, [r1, #16]
 8011920:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011924:	429a      	cmp	r2, r3
 8011926:	bfb8      	it	lt
 8011928:	460b      	movlt	r3, r1
 801192a:	460c      	mov	r4, r1
 801192c:	bfbc      	itt	lt
 801192e:	464c      	movlt	r4, r9
 8011930:	4699      	movlt	r9, r3
 8011932:	6927      	ldr	r7, [r4, #16]
 8011934:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011938:	68a3      	ldr	r3, [r4, #8]
 801193a:	6861      	ldr	r1, [r4, #4]
 801193c:	eb07 060a 	add.w	r6, r7, sl
 8011940:	42b3      	cmp	r3, r6
 8011942:	b085      	sub	sp, #20
 8011944:	bfb8      	it	lt
 8011946:	3101      	addlt	r1, #1
 8011948:	f7ff fed8 	bl	80116fc <_Balloc>
 801194c:	b930      	cbnz	r0, 801195c <__multiply+0x44>
 801194e:	4602      	mov	r2, r0
 8011950:	4b44      	ldr	r3, [pc, #272]	; (8011a64 <__multiply+0x14c>)
 8011952:	4845      	ldr	r0, [pc, #276]	; (8011a68 <__multiply+0x150>)
 8011954:	f240 115d 	movw	r1, #349	; 0x15d
 8011958:	f000 fcb6 	bl	80122c8 <__assert_func>
 801195c:	f100 0514 	add.w	r5, r0, #20
 8011960:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011964:	462b      	mov	r3, r5
 8011966:	2200      	movs	r2, #0
 8011968:	4543      	cmp	r3, r8
 801196a:	d321      	bcc.n	80119b0 <__multiply+0x98>
 801196c:	f104 0314 	add.w	r3, r4, #20
 8011970:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011974:	f109 0314 	add.w	r3, r9, #20
 8011978:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801197c:	9202      	str	r2, [sp, #8]
 801197e:	1b3a      	subs	r2, r7, r4
 8011980:	3a15      	subs	r2, #21
 8011982:	f022 0203 	bic.w	r2, r2, #3
 8011986:	3204      	adds	r2, #4
 8011988:	f104 0115 	add.w	r1, r4, #21
 801198c:	428f      	cmp	r7, r1
 801198e:	bf38      	it	cc
 8011990:	2204      	movcc	r2, #4
 8011992:	9201      	str	r2, [sp, #4]
 8011994:	9a02      	ldr	r2, [sp, #8]
 8011996:	9303      	str	r3, [sp, #12]
 8011998:	429a      	cmp	r2, r3
 801199a:	d80c      	bhi.n	80119b6 <__multiply+0x9e>
 801199c:	2e00      	cmp	r6, #0
 801199e:	dd03      	ble.n	80119a8 <__multiply+0x90>
 80119a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d05a      	beq.n	8011a5e <__multiply+0x146>
 80119a8:	6106      	str	r6, [r0, #16]
 80119aa:	b005      	add	sp, #20
 80119ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119b0:	f843 2b04 	str.w	r2, [r3], #4
 80119b4:	e7d8      	b.n	8011968 <__multiply+0x50>
 80119b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80119ba:	f1ba 0f00 	cmp.w	sl, #0
 80119be:	d024      	beq.n	8011a0a <__multiply+0xf2>
 80119c0:	f104 0e14 	add.w	lr, r4, #20
 80119c4:	46a9      	mov	r9, r5
 80119c6:	f04f 0c00 	mov.w	ip, #0
 80119ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80119ce:	f8d9 1000 	ldr.w	r1, [r9]
 80119d2:	fa1f fb82 	uxth.w	fp, r2
 80119d6:	b289      	uxth	r1, r1
 80119d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80119dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80119e0:	f8d9 2000 	ldr.w	r2, [r9]
 80119e4:	4461      	add	r1, ip
 80119e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80119ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80119ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80119f2:	b289      	uxth	r1, r1
 80119f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80119f8:	4577      	cmp	r7, lr
 80119fa:	f849 1b04 	str.w	r1, [r9], #4
 80119fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011a02:	d8e2      	bhi.n	80119ca <__multiply+0xb2>
 8011a04:	9a01      	ldr	r2, [sp, #4]
 8011a06:	f845 c002 	str.w	ip, [r5, r2]
 8011a0a:	9a03      	ldr	r2, [sp, #12]
 8011a0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011a10:	3304      	adds	r3, #4
 8011a12:	f1b9 0f00 	cmp.w	r9, #0
 8011a16:	d020      	beq.n	8011a5a <__multiply+0x142>
 8011a18:	6829      	ldr	r1, [r5, #0]
 8011a1a:	f104 0c14 	add.w	ip, r4, #20
 8011a1e:	46ae      	mov	lr, r5
 8011a20:	f04f 0a00 	mov.w	sl, #0
 8011a24:	f8bc b000 	ldrh.w	fp, [ip]
 8011a28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011a2c:	fb09 220b 	mla	r2, r9, fp, r2
 8011a30:	4492      	add	sl, r2
 8011a32:	b289      	uxth	r1, r1
 8011a34:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011a38:	f84e 1b04 	str.w	r1, [lr], #4
 8011a3c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011a40:	f8be 1000 	ldrh.w	r1, [lr]
 8011a44:	0c12      	lsrs	r2, r2, #16
 8011a46:	fb09 1102 	mla	r1, r9, r2, r1
 8011a4a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011a4e:	4567      	cmp	r7, ip
 8011a50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011a54:	d8e6      	bhi.n	8011a24 <__multiply+0x10c>
 8011a56:	9a01      	ldr	r2, [sp, #4]
 8011a58:	50a9      	str	r1, [r5, r2]
 8011a5a:	3504      	adds	r5, #4
 8011a5c:	e79a      	b.n	8011994 <__multiply+0x7c>
 8011a5e:	3e01      	subs	r6, #1
 8011a60:	e79c      	b.n	801199c <__multiply+0x84>
 8011a62:	bf00      	nop
 8011a64:	080155c7 	.word	0x080155c7
 8011a68:	080155d8 	.word	0x080155d8

08011a6c <__pow5mult>:
 8011a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a70:	4615      	mov	r5, r2
 8011a72:	f012 0203 	ands.w	r2, r2, #3
 8011a76:	4606      	mov	r6, r0
 8011a78:	460f      	mov	r7, r1
 8011a7a:	d007      	beq.n	8011a8c <__pow5mult+0x20>
 8011a7c:	4c25      	ldr	r4, [pc, #148]	; (8011b14 <__pow5mult+0xa8>)
 8011a7e:	3a01      	subs	r2, #1
 8011a80:	2300      	movs	r3, #0
 8011a82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a86:	f7ff fe9b 	bl	80117c0 <__multadd>
 8011a8a:	4607      	mov	r7, r0
 8011a8c:	10ad      	asrs	r5, r5, #2
 8011a8e:	d03d      	beq.n	8011b0c <__pow5mult+0xa0>
 8011a90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011a92:	b97c      	cbnz	r4, 8011ab4 <__pow5mult+0x48>
 8011a94:	2010      	movs	r0, #16
 8011a96:	f7ff fe29 	bl	80116ec <malloc>
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	6270      	str	r0, [r6, #36]	; 0x24
 8011a9e:	b928      	cbnz	r0, 8011aac <__pow5mult+0x40>
 8011aa0:	4b1d      	ldr	r3, [pc, #116]	; (8011b18 <__pow5mult+0xac>)
 8011aa2:	481e      	ldr	r0, [pc, #120]	; (8011b1c <__pow5mult+0xb0>)
 8011aa4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011aa8:	f000 fc0e 	bl	80122c8 <__assert_func>
 8011aac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011ab0:	6004      	str	r4, [r0, #0]
 8011ab2:	60c4      	str	r4, [r0, #12]
 8011ab4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011ab8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011abc:	b94c      	cbnz	r4, 8011ad2 <__pow5mult+0x66>
 8011abe:	f240 2171 	movw	r1, #625	; 0x271
 8011ac2:	4630      	mov	r0, r6
 8011ac4:	f7ff ff12 	bl	80118ec <__i2b>
 8011ac8:	2300      	movs	r3, #0
 8011aca:	f8c8 0008 	str.w	r0, [r8, #8]
 8011ace:	4604      	mov	r4, r0
 8011ad0:	6003      	str	r3, [r0, #0]
 8011ad2:	f04f 0900 	mov.w	r9, #0
 8011ad6:	07eb      	lsls	r3, r5, #31
 8011ad8:	d50a      	bpl.n	8011af0 <__pow5mult+0x84>
 8011ada:	4639      	mov	r1, r7
 8011adc:	4622      	mov	r2, r4
 8011ade:	4630      	mov	r0, r6
 8011ae0:	f7ff ff1a 	bl	8011918 <__multiply>
 8011ae4:	4639      	mov	r1, r7
 8011ae6:	4680      	mov	r8, r0
 8011ae8:	4630      	mov	r0, r6
 8011aea:	f7ff fe47 	bl	801177c <_Bfree>
 8011aee:	4647      	mov	r7, r8
 8011af0:	106d      	asrs	r5, r5, #1
 8011af2:	d00b      	beq.n	8011b0c <__pow5mult+0xa0>
 8011af4:	6820      	ldr	r0, [r4, #0]
 8011af6:	b938      	cbnz	r0, 8011b08 <__pow5mult+0x9c>
 8011af8:	4622      	mov	r2, r4
 8011afa:	4621      	mov	r1, r4
 8011afc:	4630      	mov	r0, r6
 8011afe:	f7ff ff0b 	bl	8011918 <__multiply>
 8011b02:	6020      	str	r0, [r4, #0]
 8011b04:	f8c0 9000 	str.w	r9, [r0]
 8011b08:	4604      	mov	r4, r0
 8011b0a:	e7e4      	b.n	8011ad6 <__pow5mult+0x6a>
 8011b0c:	4638      	mov	r0, r7
 8011b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b12:	bf00      	nop
 8011b14:	08015728 	.word	0x08015728
 8011b18:	08015555 	.word	0x08015555
 8011b1c:	080155d8 	.word	0x080155d8

08011b20 <__lshift>:
 8011b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b24:	460c      	mov	r4, r1
 8011b26:	6849      	ldr	r1, [r1, #4]
 8011b28:	6923      	ldr	r3, [r4, #16]
 8011b2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011b2e:	68a3      	ldr	r3, [r4, #8]
 8011b30:	4607      	mov	r7, r0
 8011b32:	4691      	mov	r9, r2
 8011b34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011b38:	f108 0601 	add.w	r6, r8, #1
 8011b3c:	42b3      	cmp	r3, r6
 8011b3e:	db0b      	blt.n	8011b58 <__lshift+0x38>
 8011b40:	4638      	mov	r0, r7
 8011b42:	f7ff fddb 	bl	80116fc <_Balloc>
 8011b46:	4605      	mov	r5, r0
 8011b48:	b948      	cbnz	r0, 8011b5e <__lshift+0x3e>
 8011b4a:	4602      	mov	r2, r0
 8011b4c:	4b2a      	ldr	r3, [pc, #168]	; (8011bf8 <__lshift+0xd8>)
 8011b4e:	482b      	ldr	r0, [pc, #172]	; (8011bfc <__lshift+0xdc>)
 8011b50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011b54:	f000 fbb8 	bl	80122c8 <__assert_func>
 8011b58:	3101      	adds	r1, #1
 8011b5a:	005b      	lsls	r3, r3, #1
 8011b5c:	e7ee      	b.n	8011b3c <__lshift+0x1c>
 8011b5e:	2300      	movs	r3, #0
 8011b60:	f100 0114 	add.w	r1, r0, #20
 8011b64:	f100 0210 	add.w	r2, r0, #16
 8011b68:	4618      	mov	r0, r3
 8011b6a:	4553      	cmp	r3, sl
 8011b6c:	db37      	blt.n	8011bde <__lshift+0xbe>
 8011b6e:	6920      	ldr	r0, [r4, #16]
 8011b70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b74:	f104 0314 	add.w	r3, r4, #20
 8011b78:	f019 091f 	ands.w	r9, r9, #31
 8011b7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011b84:	d02f      	beq.n	8011be6 <__lshift+0xc6>
 8011b86:	f1c9 0e20 	rsb	lr, r9, #32
 8011b8a:	468a      	mov	sl, r1
 8011b8c:	f04f 0c00 	mov.w	ip, #0
 8011b90:	681a      	ldr	r2, [r3, #0]
 8011b92:	fa02 f209 	lsl.w	r2, r2, r9
 8011b96:	ea42 020c 	orr.w	r2, r2, ip
 8011b9a:	f84a 2b04 	str.w	r2, [sl], #4
 8011b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ba2:	4298      	cmp	r0, r3
 8011ba4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011ba8:	d8f2      	bhi.n	8011b90 <__lshift+0x70>
 8011baa:	1b03      	subs	r3, r0, r4
 8011bac:	3b15      	subs	r3, #21
 8011bae:	f023 0303 	bic.w	r3, r3, #3
 8011bb2:	3304      	adds	r3, #4
 8011bb4:	f104 0215 	add.w	r2, r4, #21
 8011bb8:	4290      	cmp	r0, r2
 8011bba:	bf38      	it	cc
 8011bbc:	2304      	movcc	r3, #4
 8011bbe:	f841 c003 	str.w	ip, [r1, r3]
 8011bc2:	f1bc 0f00 	cmp.w	ip, #0
 8011bc6:	d001      	beq.n	8011bcc <__lshift+0xac>
 8011bc8:	f108 0602 	add.w	r6, r8, #2
 8011bcc:	3e01      	subs	r6, #1
 8011bce:	4638      	mov	r0, r7
 8011bd0:	612e      	str	r6, [r5, #16]
 8011bd2:	4621      	mov	r1, r4
 8011bd4:	f7ff fdd2 	bl	801177c <_Bfree>
 8011bd8:	4628      	mov	r0, r5
 8011bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bde:	f842 0f04 	str.w	r0, [r2, #4]!
 8011be2:	3301      	adds	r3, #1
 8011be4:	e7c1      	b.n	8011b6a <__lshift+0x4a>
 8011be6:	3904      	subs	r1, #4
 8011be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bec:	f841 2f04 	str.w	r2, [r1, #4]!
 8011bf0:	4298      	cmp	r0, r3
 8011bf2:	d8f9      	bhi.n	8011be8 <__lshift+0xc8>
 8011bf4:	e7ea      	b.n	8011bcc <__lshift+0xac>
 8011bf6:	bf00      	nop
 8011bf8:	080155c7 	.word	0x080155c7
 8011bfc:	080155d8 	.word	0x080155d8

08011c00 <__mcmp>:
 8011c00:	b530      	push	{r4, r5, lr}
 8011c02:	6902      	ldr	r2, [r0, #16]
 8011c04:	690c      	ldr	r4, [r1, #16]
 8011c06:	1b12      	subs	r2, r2, r4
 8011c08:	d10e      	bne.n	8011c28 <__mcmp+0x28>
 8011c0a:	f100 0314 	add.w	r3, r0, #20
 8011c0e:	3114      	adds	r1, #20
 8011c10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011c14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011c18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011c1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011c20:	42a5      	cmp	r5, r4
 8011c22:	d003      	beq.n	8011c2c <__mcmp+0x2c>
 8011c24:	d305      	bcc.n	8011c32 <__mcmp+0x32>
 8011c26:	2201      	movs	r2, #1
 8011c28:	4610      	mov	r0, r2
 8011c2a:	bd30      	pop	{r4, r5, pc}
 8011c2c:	4283      	cmp	r3, r0
 8011c2e:	d3f3      	bcc.n	8011c18 <__mcmp+0x18>
 8011c30:	e7fa      	b.n	8011c28 <__mcmp+0x28>
 8011c32:	f04f 32ff 	mov.w	r2, #4294967295
 8011c36:	e7f7      	b.n	8011c28 <__mcmp+0x28>

08011c38 <__mdiff>:
 8011c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c3c:	460c      	mov	r4, r1
 8011c3e:	4606      	mov	r6, r0
 8011c40:	4611      	mov	r1, r2
 8011c42:	4620      	mov	r0, r4
 8011c44:	4690      	mov	r8, r2
 8011c46:	f7ff ffdb 	bl	8011c00 <__mcmp>
 8011c4a:	1e05      	subs	r5, r0, #0
 8011c4c:	d110      	bne.n	8011c70 <__mdiff+0x38>
 8011c4e:	4629      	mov	r1, r5
 8011c50:	4630      	mov	r0, r6
 8011c52:	f7ff fd53 	bl	80116fc <_Balloc>
 8011c56:	b930      	cbnz	r0, 8011c66 <__mdiff+0x2e>
 8011c58:	4b3a      	ldr	r3, [pc, #232]	; (8011d44 <__mdiff+0x10c>)
 8011c5a:	4602      	mov	r2, r0
 8011c5c:	f240 2132 	movw	r1, #562	; 0x232
 8011c60:	4839      	ldr	r0, [pc, #228]	; (8011d48 <__mdiff+0x110>)
 8011c62:	f000 fb31 	bl	80122c8 <__assert_func>
 8011c66:	2301      	movs	r3, #1
 8011c68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011c6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c70:	bfa4      	itt	ge
 8011c72:	4643      	movge	r3, r8
 8011c74:	46a0      	movge	r8, r4
 8011c76:	4630      	mov	r0, r6
 8011c78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011c7c:	bfa6      	itte	ge
 8011c7e:	461c      	movge	r4, r3
 8011c80:	2500      	movge	r5, #0
 8011c82:	2501      	movlt	r5, #1
 8011c84:	f7ff fd3a 	bl	80116fc <_Balloc>
 8011c88:	b920      	cbnz	r0, 8011c94 <__mdiff+0x5c>
 8011c8a:	4b2e      	ldr	r3, [pc, #184]	; (8011d44 <__mdiff+0x10c>)
 8011c8c:	4602      	mov	r2, r0
 8011c8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011c92:	e7e5      	b.n	8011c60 <__mdiff+0x28>
 8011c94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011c98:	6926      	ldr	r6, [r4, #16]
 8011c9a:	60c5      	str	r5, [r0, #12]
 8011c9c:	f104 0914 	add.w	r9, r4, #20
 8011ca0:	f108 0514 	add.w	r5, r8, #20
 8011ca4:	f100 0e14 	add.w	lr, r0, #20
 8011ca8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011cac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011cb0:	f108 0210 	add.w	r2, r8, #16
 8011cb4:	46f2      	mov	sl, lr
 8011cb6:	2100      	movs	r1, #0
 8011cb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8011cbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011cc0:	fa1f f883 	uxth.w	r8, r3
 8011cc4:	fa11 f18b 	uxtah	r1, r1, fp
 8011cc8:	0c1b      	lsrs	r3, r3, #16
 8011cca:	eba1 0808 	sub.w	r8, r1, r8
 8011cce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011cd2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011cd6:	fa1f f888 	uxth.w	r8, r8
 8011cda:	1419      	asrs	r1, r3, #16
 8011cdc:	454e      	cmp	r6, r9
 8011cde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011ce2:	f84a 3b04 	str.w	r3, [sl], #4
 8011ce6:	d8e7      	bhi.n	8011cb8 <__mdiff+0x80>
 8011ce8:	1b33      	subs	r3, r6, r4
 8011cea:	3b15      	subs	r3, #21
 8011cec:	f023 0303 	bic.w	r3, r3, #3
 8011cf0:	3304      	adds	r3, #4
 8011cf2:	3415      	adds	r4, #21
 8011cf4:	42a6      	cmp	r6, r4
 8011cf6:	bf38      	it	cc
 8011cf8:	2304      	movcc	r3, #4
 8011cfa:	441d      	add	r5, r3
 8011cfc:	4473      	add	r3, lr
 8011cfe:	469e      	mov	lr, r3
 8011d00:	462e      	mov	r6, r5
 8011d02:	4566      	cmp	r6, ip
 8011d04:	d30e      	bcc.n	8011d24 <__mdiff+0xec>
 8011d06:	f10c 0203 	add.w	r2, ip, #3
 8011d0a:	1b52      	subs	r2, r2, r5
 8011d0c:	f022 0203 	bic.w	r2, r2, #3
 8011d10:	3d03      	subs	r5, #3
 8011d12:	45ac      	cmp	ip, r5
 8011d14:	bf38      	it	cc
 8011d16:	2200      	movcc	r2, #0
 8011d18:	441a      	add	r2, r3
 8011d1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011d1e:	b17b      	cbz	r3, 8011d40 <__mdiff+0x108>
 8011d20:	6107      	str	r7, [r0, #16]
 8011d22:	e7a3      	b.n	8011c6c <__mdiff+0x34>
 8011d24:	f856 8b04 	ldr.w	r8, [r6], #4
 8011d28:	fa11 f288 	uxtah	r2, r1, r8
 8011d2c:	1414      	asrs	r4, r2, #16
 8011d2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011d32:	b292      	uxth	r2, r2
 8011d34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011d38:	f84e 2b04 	str.w	r2, [lr], #4
 8011d3c:	1421      	asrs	r1, r4, #16
 8011d3e:	e7e0      	b.n	8011d02 <__mdiff+0xca>
 8011d40:	3f01      	subs	r7, #1
 8011d42:	e7ea      	b.n	8011d1a <__mdiff+0xe2>
 8011d44:	080155c7 	.word	0x080155c7
 8011d48:	080155d8 	.word	0x080155d8

08011d4c <__d2b>:
 8011d4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d50:	4689      	mov	r9, r1
 8011d52:	2101      	movs	r1, #1
 8011d54:	ec57 6b10 	vmov	r6, r7, d0
 8011d58:	4690      	mov	r8, r2
 8011d5a:	f7ff fccf 	bl	80116fc <_Balloc>
 8011d5e:	4604      	mov	r4, r0
 8011d60:	b930      	cbnz	r0, 8011d70 <__d2b+0x24>
 8011d62:	4602      	mov	r2, r0
 8011d64:	4b25      	ldr	r3, [pc, #148]	; (8011dfc <__d2b+0xb0>)
 8011d66:	4826      	ldr	r0, [pc, #152]	; (8011e00 <__d2b+0xb4>)
 8011d68:	f240 310a 	movw	r1, #778	; 0x30a
 8011d6c:	f000 faac 	bl	80122c8 <__assert_func>
 8011d70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011d74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011d78:	bb35      	cbnz	r5, 8011dc8 <__d2b+0x7c>
 8011d7a:	2e00      	cmp	r6, #0
 8011d7c:	9301      	str	r3, [sp, #4]
 8011d7e:	d028      	beq.n	8011dd2 <__d2b+0x86>
 8011d80:	4668      	mov	r0, sp
 8011d82:	9600      	str	r6, [sp, #0]
 8011d84:	f7ff fd82 	bl	801188c <__lo0bits>
 8011d88:	9900      	ldr	r1, [sp, #0]
 8011d8a:	b300      	cbz	r0, 8011dce <__d2b+0x82>
 8011d8c:	9a01      	ldr	r2, [sp, #4]
 8011d8e:	f1c0 0320 	rsb	r3, r0, #32
 8011d92:	fa02 f303 	lsl.w	r3, r2, r3
 8011d96:	430b      	orrs	r3, r1
 8011d98:	40c2      	lsrs	r2, r0
 8011d9a:	6163      	str	r3, [r4, #20]
 8011d9c:	9201      	str	r2, [sp, #4]
 8011d9e:	9b01      	ldr	r3, [sp, #4]
 8011da0:	61a3      	str	r3, [r4, #24]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	bf14      	ite	ne
 8011da6:	2202      	movne	r2, #2
 8011da8:	2201      	moveq	r2, #1
 8011daa:	6122      	str	r2, [r4, #16]
 8011dac:	b1d5      	cbz	r5, 8011de4 <__d2b+0x98>
 8011dae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011db2:	4405      	add	r5, r0
 8011db4:	f8c9 5000 	str.w	r5, [r9]
 8011db8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011dbc:	f8c8 0000 	str.w	r0, [r8]
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	b003      	add	sp, #12
 8011dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011dcc:	e7d5      	b.n	8011d7a <__d2b+0x2e>
 8011dce:	6161      	str	r1, [r4, #20]
 8011dd0:	e7e5      	b.n	8011d9e <__d2b+0x52>
 8011dd2:	a801      	add	r0, sp, #4
 8011dd4:	f7ff fd5a 	bl	801188c <__lo0bits>
 8011dd8:	9b01      	ldr	r3, [sp, #4]
 8011dda:	6163      	str	r3, [r4, #20]
 8011ddc:	2201      	movs	r2, #1
 8011dde:	6122      	str	r2, [r4, #16]
 8011de0:	3020      	adds	r0, #32
 8011de2:	e7e3      	b.n	8011dac <__d2b+0x60>
 8011de4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011de8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011dec:	f8c9 0000 	str.w	r0, [r9]
 8011df0:	6918      	ldr	r0, [r3, #16]
 8011df2:	f7ff fd2b 	bl	801184c <__hi0bits>
 8011df6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011dfa:	e7df      	b.n	8011dbc <__d2b+0x70>
 8011dfc:	080155c7 	.word	0x080155c7
 8011e00:	080155d8 	.word	0x080155d8

08011e04 <_calloc_r>:
 8011e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e06:	fba1 2402 	umull	r2, r4, r1, r2
 8011e0a:	b94c      	cbnz	r4, 8011e20 <_calloc_r+0x1c>
 8011e0c:	4611      	mov	r1, r2
 8011e0e:	9201      	str	r2, [sp, #4]
 8011e10:	f000 f87a 	bl	8011f08 <_malloc_r>
 8011e14:	9a01      	ldr	r2, [sp, #4]
 8011e16:	4605      	mov	r5, r0
 8011e18:	b930      	cbnz	r0, 8011e28 <_calloc_r+0x24>
 8011e1a:	4628      	mov	r0, r5
 8011e1c:	b003      	add	sp, #12
 8011e1e:	bd30      	pop	{r4, r5, pc}
 8011e20:	220c      	movs	r2, #12
 8011e22:	6002      	str	r2, [r0, #0]
 8011e24:	2500      	movs	r5, #0
 8011e26:	e7f8      	b.n	8011e1a <_calloc_r+0x16>
 8011e28:	4621      	mov	r1, r4
 8011e2a:	f7fe f94f 	bl	80100cc <memset>
 8011e2e:	e7f4      	b.n	8011e1a <_calloc_r+0x16>

08011e30 <_free_r>:
 8011e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e32:	2900      	cmp	r1, #0
 8011e34:	d044      	beq.n	8011ec0 <_free_r+0x90>
 8011e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e3a:	9001      	str	r0, [sp, #4]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8011e42:	bfb8      	it	lt
 8011e44:	18e4      	addlt	r4, r4, r3
 8011e46:	f000 fa9b 	bl	8012380 <__malloc_lock>
 8011e4a:	4a1e      	ldr	r2, [pc, #120]	; (8011ec4 <_free_r+0x94>)
 8011e4c:	9801      	ldr	r0, [sp, #4]
 8011e4e:	6813      	ldr	r3, [r2, #0]
 8011e50:	b933      	cbnz	r3, 8011e60 <_free_r+0x30>
 8011e52:	6063      	str	r3, [r4, #4]
 8011e54:	6014      	str	r4, [r2, #0]
 8011e56:	b003      	add	sp, #12
 8011e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e5c:	f000 ba96 	b.w	801238c <__malloc_unlock>
 8011e60:	42a3      	cmp	r3, r4
 8011e62:	d908      	bls.n	8011e76 <_free_r+0x46>
 8011e64:	6825      	ldr	r5, [r4, #0]
 8011e66:	1961      	adds	r1, r4, r5
 8011e68:	428b      	cmp	r3, r1
 8011e6a:	bf01      	itttt	eq
 8011e6c:	6819      	ldreq	r1, [r3, #0]
 8011e6e:	685b      	ldreq	r3, [r3, #4]
 8011e70:	1949      	addeq	r1, r1, r5
 8011e72:	6021      	streq	r1, [r4, #0]
 8011e74:	e7ed      	b.n	8011e52 <_free_r+0x22>
 8011e76:	461a      	mov	r2, r3
 8011e78:	685b      	ldr	r3, [r3, #4]
 8011e7a:	b10b      	cbz	r3, 8011e80 <_free_r+0x50>
 8011e7c:	42a3      	cmp	r3, r4
 8011e7e:	d9fa      	bls.n	8011e76 <_free_r+0x46>
 8011e80:	6811      	ldr	r1, [r2, #0]
 8011e82:	1855      	adds	r5, r2, r1
 8011e84:	42a5      	cmp	r5, r4
 8011e86:	d10b      	bne.n	8011ea0 <_free_r+0x70>
 8011e88:	6824      	ldr	r4, [r4, #0]
 8011e8a:	4421      	add	r1, r4
 8011e8c:	1854      	adds	r4, r2, r1
 8011e8e:	42a3      	cmp	r3, r4
 8011e90:	6011      	str	r1, [r2, #0]
 8011e92:	d1e0      	bne.n	8011e56 <_free_r+0x26>
 8011e94:	681c      	ldr	r4, [r3, #0]
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	6053      	str	r3, [r2, #4]
 8011e9a:	4421      	add	r1, r4
 8011e9c:	6011      	str	r1, [r2, #0]
 8011e9e:	e7da      	b.n	8011e56 <_free_r+0x26>
 8011ea0:	d902      	bls.n	8011ea8 <_free_r+0x78>
 8011ea2:	230c      	movs	r3, #12
 8011ea4:	6003      	str	r3, [r0, #0]
 8011ea6:	e7d6      	b.n	8011e56 <_free_r+0x26>
 8011ea8:	6825      	ldr	r5, [r4, #0]
 8011eaa:	1961      	adds	r1, r4, r5
 8011eac:	428b      	cmp	r3, r1
 8011eae:	bf04      	itt	eq
 8011eb0:	6819      	ldreq	r1, [r3, #0]
 8011eb2:	685b      	ldreq	r3, [r3, #4]
 8011eb4:	6063      	str	r3, [r4, #4]
 8011eb6:	bf04      	itt	eq
 8011eb8:	1949      	addeq	r1, r1, r5
 8011eba:	6021      	streq	r1, [r4, #0]
 8011ebc:	6054      	str	r4, [r2, #4]
 8011ebe:	e7ca      	b.n	8011e56 <_free_r+0x26>
 8011ec0:	b003      	add	sp, #12
 8011ec2:	bd30      	pop	{r4, r5, pc}
 8011ec4:	200068b8 	.word	0x200068b8

08011ec8 <sbrk_aligned>:
 8011ec8:	b570      	push	{r4, r5, r6, lr}
 8011eca:	4e0e      	ldr	r6, [pc, #56]	; (8011f04 <sbrk_aligned+0x3c>)
 8011ecc:	460c      	mov	r4, r1
 8011ece:	6831      	ldr	r1, [r6, #0]
 8011ed0:	4605      	mov	r5, r0
 8011ed2:	b911      	cbnz	r1, 8011eda <sbrk_aligned+0x12>
 8011ed4:	f000 f9e8 	bl	80122a8 <_sbrk_r>
 8011ed8:	6030      	str	r0, [r6, #0]
 8011eda:	4621      	mov	r1, r4
 8011edc:	4628      	mov	r0, r5
 8011ede:	f000 f9e3 	bl	80122a8 <_sbrk_r>
 8011ee2:	1c43      	adds	r3, r0, #1
 8011ee4:	d00a      	beq.n	8011efc <sbrk_aligned+0x34>
 8011ee6:	1cc4      	adds	r4, r0, #3
 8011ee8:	f024 0403 	bic.w	r4, r4, #3
 8011eec:	42a0      	cmp	r0, r4
 8011eee:	d007      	beq.n	8011f00 <sbrk_aligned+0x38>
 8011ef0:	1a21      	subs	r1, r4, r0
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	f000 f9d8 	bl	80122a8 <_sbrk_r>
 8011ef8:	3001      	adds	r0, #1
 8011efa:	d101      	bne.n	8011f00 <sbrk_aligned+0x38>
 8011efc:	f04f 34ff 	mov.w	r4, #4294967295
 8011f00:	4620      	mov	r0, r4
 8011f02:	bd70      	pop	{r4, r5, r6, pc}
 8011f04:	200068bc 	.word	0x200068bc

08011f08 <_malloc_r>:
 8011f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f0c:	1ccd      	adds	r5, r1, #3
 8011f0e:	f025 0503 	bic.w	r5, r5, #3
 8011f12:	3508      	adds	r5, #8
 8011f14:	2d0c      	cmp	r5, #12
 8011f16:	bf38      	it	cc
 8011f18:	250c      	movcc	r5, #12
 8011f1a:	2d00      	cmp	r5, #0
 8011f1c:	4607      	mov	r7, r0
 8011f1e:	db01      	blt.n	8011f24 <_malloc_r+0x1c>
 8011f20:	42a9      	cmp	r1, r5
 8011f22:	d905      	bls.n	8011f30 <_malloc_r+0x28>
 8011f24:	230c      	movs	r3, #12
 8011f26:	603b      	str	r3, [r7, #0]
 8011f28:	2600      	movs	r6, #0
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f30:	4e2e      	ldr	r6, [pc, #184]	; (8011fec <_malloc_r+0xe4>)
 8011f32:	f000 fa25 	bl	8012380 <__malloc_lock>
 8011f36:	6833      	ldr	r3, [r6, #0]
 8011f38:	461c      	mov	r4, r3
 8011f3a:	bb34      	cbnz	r4, 8011f8a <_malloc_r+0x82>
 8011f3c:	4629      	mov	r1, r5
 8011f3e:	4638      	mov	r0, r7
 8011f40:	f7ff ffc2 	bl	8011ec8 <sbrk_aligned>
 8011f44:	1c43      	adds	r3, r0, #1
 8011f46:	4604      	mov	r4, r0
 8011f48:	d14d      	bne.n	8011fe6 <_malloc_r+0xde>
 8011f4a:	6834      	ldr	r4, [r6, #0]
 8011f4c:	4626      	mov	r6, r4
 8011f4e:	2e00      	cmp	r6, #0
 8011f50:	d140      	bne.n	8011fd4 <_malloc_r+0xcc>
 8011f52:	6823      	ldr	r3, [r4, #0]
 8011f54:	4631      	mov	r1, r6
 8011f56:	4638      	mov	r0, r7
 8011f58:	eb04 0803 	add.w	r8, r4, r3
 8011f5c:	f000 f9a4 	bl	80122a8 <_sbrk_r>
 8011f60:	4580      	cmp	r8, r0
 8011f62:	d13a      	bne.n	8011fda <_malloc_r+0xd2>
 8011f64:	6821      	ldr	r1, [r4, #0]
 8011f66:	3503      	adds	r5, #3
 8011f68:	1a6d      	subs	r5, r5, r1
 8011f6a:	f025 0503 	bic.w	r5, r5, #3
 8011f6e:	3508      	adds	r5, #8
 8011f70:	2d0c      	cmp	r5, #12
 8011f72:	bf38      	it	cc
 8011f74:	250c      	movcc	r5, #12
 8011f76:	4629      	mov	r1, r5
 8011f78:	4638      	mov	r0, r7
 8011f7a:	f7ff ffa5 	bl	8011ec8 <sbrk_aligned>
 8011f7e:	3001      	adds	r0, #1
 8011f80:	d02b      	beq.n	8011fda <_malloc_r+0xd2>
 8011f82:	6823      	ldr	r3, [r4, #0]
 8011f84:	442b      	add	r3, r5
 8011f86:	6023      	str	r3, [r4, #0]
 8011f88:	e00e      	b.n	8011fa8 <_malloc_r+0xa0>
 8011f8a:	6822      	ldr	r2, [r4, #0]
 8011f8c:	1b52      	subs	r2, r2, r5
 8011f8e:	d41e      	bmi.n	8011fce <_malloc_r+0xc6>
 8011f90:	2a0b      	cmp	r2, #11
 8011f92:	d916      	bls.n	8011fc2 <_malloc_r+0xba>
 8011f94:	1961      	adds	r1, r4, r5
 8011f96:	42a3      	cmp	r3, r4
 8011f98:	6025      	str	r5, [r4, #0]
 8011f9a:	bf18      	it	ne
 8011f9c:	6059      	strne	r1, [r3, #4]
 8011f9e:	6863      	ldr	r3, [r4, #4]
 8011fa0:	bf08      	it	eq
 8011fa2:	6031      	streq	r1, [r6, #0]
 8011fa4:	5162      	str	r2, [r4, r5]
 8011fa6:	604b      	str	r3, [r1, #4]
 8011fa8:	4638      	mov	r0, r7
 8011faa:	f104 060b 	add.w	r6, r4, #11
 8011fae:	f000 f9ed 	bl	801238c <__malloc_unlock>
 8011fb2:	f026 0607 	bic.w	r6, r6, #7
 8011fb6:	1d23      	adds	r3, r4, #4
 8011fb8:	1af2      	subs	r2, r6, r3
 8011fba:	d0b6      	beq.n	8011f2a <_malloc_r+0x22>
 8011fbc:	1b9b      	subs	r3, r3, r6
 8011fbe:	50a3      	str	r3, [r4, r2]
 8011fc0:	e7b3      	b.n	8011f2a <_malloc_r+0x22>
 8011fc2:	6862      	ldr	r2, [r4, #4]
 8011fc4:	42a3      	cmp	r3, r4
 8011fc6:	bf0c      	ite	eq
 8011fc8:	6032      	streq	r2, [r6, #0]
 8011fca:	605a      	strne	r2, [r3, #4]
 8011fcc:	e7ec      	b.n	8011fa8 <_malloc_r+0xa0>
 8011fce:	4623      	mov	r3, r4
 8011fd0:	6864      	ldr	r4, [r4, #4]
 8011fd2:	e7b2      	b.n	8011f3a <_malloc_r+0x32>
 8011fd4:	4634      	mov	r4, r6
 8011fd6:	6876      	ldr	r6, [r6, #4]
 8011fd8:	e7b9      	b.n	8011f4e <_malloc_r+0x46>
 8011fda:	230c      	movs	r3, #12
 8011fdc:	603b      	str	r3, [r7, #0]
 8011fde:	4638      	mov	r0, r7
 8011fe0:	f000 f9d4 	bl	801238c <__malloc_unlock>
 8011fe4:	e7a1      	b.n	8011f2a <_malloc_r+0x22>
 8011fe6:	6025      	str	r5, [r4, #0]
 8011fe8:	e7de      	b.n	8011fa8 <_malloc_r+0xa0>
 8011fea:	bf00      	nop
 8011fec:	200068b8 	.word	0x200068b8

08011ff0 <__ssputs_r>:
 8011ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ff4:	688e      	ldr	r6, [r1, #8]
 8011ff6:	429e      	cmp	r6, r3
 8011ff8:	4682      	mov	sl, r0
 8011ffa:	460c      	mov	r4, r1
 8011ffc:	4690      	mov	r8, r2
 8011ffe:	461f      	mov	r7, r3
 8012000:	d838      	bhi.n	8012074 <__ssputs_r+0x84>
 8012002:	898a      	ldrh	r2, [r1, #12]
 8012004:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012008:	d032      	beq.n	8012070 <__ssputs_r+0x80>
 801200a:	6825      	ldr	r5, [r4, #0]
 801200c:	6909      	ldr	r1, [r1, #16]
 801200e:	eba5 0901 	sub.w	r9, r5, r1
 8012012:	6965      	ldr	r5, [r4, #20]
 8012014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012018:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801201c:	3301      	adds	r3, #1
 801201e:	444b      	add	r3, r9
 8012020:	106d      	asrs	r5, r5, #1
 8012022:	429d      	cmp	r5, r3
 8012024:	bf38      	it	cc
 8012026:	461d      	movcc	r5, r3
 8012028:	0553      	lsls	r3, r2, #21
 801202a:	d531      	bpl.n	8012090 <__ssputs_r+0xa0>
 801202c:	4629      	mov	r1, r5
 801202e:	f7ff ff6b 	bl	8011f08 <_malloc_r>
 8012032:	4606      	mov	r6, r0
 8012034:	b950      	cbnz	r0, 801204c <__ssputs_r+0x5c>
 8012036:	230c      	movs	r3, #12
 8012038:	f8ca 3000 	str.w	r3, [sl]
 801203c:	89a3      	ldrh	r3, [r4, #12]
 801203e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012042:	81a3      	strh	r3, [r4, #12]
 8012044:	f04f 30ff 	mov.w	r0, #4294967295
 8012048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801204c:	6921      	ldr	r1, [r4, #16]
 801204e:	464a      	mov	r2, r9
 8012050:	f7fe f82e 	bl	80100b0 <memcpy>
 8012054:	89a3      	ldrh	r3, [r4, #12]
 8012056:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801205a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801205e:	81a3      	strh	r3, [r4, #12]
 8012060:	6126      	str	r6, [r4, #16]
 8012062:	6165      	str	r5, [r4, #20]
 8012064:	444e      	add	r6, r9
 8012066:	eba5 0509 	sub.w	r5, r5, r9
 801206a:	6026      	str	r6, [r4, #0]
 801206c:	60a5      	str	r5, [r4, #8]
 801206e:	463e      	mov	r6, r7
 8012070:	42be      	cmp	r6, r7
 8012072:	d900      	bls.n	8012076 <__ssputs_r+0x86>
 8012074:	463e      	mov	r6, r7
 8012076:	6820      	ldr	r0, [r4, #0]
 8012078:	4632      	mov	r2, r6
 801207a:	4641      	mov	r1, r8
 801207c:	f000 f966 	bl	801234c <memmove>
 8012080:	68a3      	ldr	r3, [r4, #8]
 8012082:	1b9b      	subs	r3, r3, r6
 8012084:	60a3      	str	r3, [r4, #8]
 8012086:	6823      	ldr	r3, [r4, #0]
 8012088:	4433      	add	r3, r6
 801208a:	6023      	str	r3, [r4, #0]
 801208c:	2000      	movs	r0, #0
 801208e:	e7db      	b.n	8012048 <__ssputs_r+0x58>
 8012090:	462a      	mov	r2, r5
 8012092:	f000 f981 	bl	8012398 <_realloc_r>
 8012096:	4606      	mov	r6, r0
 8012098:	2800      	cmp	r0, #0
 801209a:	d1e1      	bne.n	8012060 <__ssputs_r+0x70>
 801209c:	6921      	ldr	r1, [r4, #16]
 801209e:	4650      	mov	r0, sl
 80120a0:	f7ff fec6 	bl	8011e30 <_free_r>
 80120a4:	e7c7      	b.n	8012036 <__ssputs_r+0x46>
	...

080120a8 <_svfiprintf_r>:
 80120a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ac:	4698      	mov	r8, r3
 80120ae:	898b      	ldrh	r3, [r1, #12]
 80120b0:	061b      	lsls	r3, r3, #24
 80120b2:	b09d      	sub	sp, #116	; 0x74
 80120b4:	4607      	mov	r7, r0
 80120b6:	460d      	mov	r5, r1
 80120b8:	4614      	mov	r4, r2
 80120ba:	d50e      	bpl.n	80120da <_svfiprintf_r+0x32>
 80120bc:	690b      	ldr	r3, [r1, #16]
 80120be:	b963      	cbnz	r3, 80120da <_svfiprintf_r+0x32>
 80120c0:	2140      	movs	r1, #64	; 0x40
 80120c2:	f7ff ff21 	bl	8011f08 <_malloc_r>
 80120c6:	6028      	str	r0, [r5, #0]
 80120c8:	6128      	str	r0, [r5, #16]
 80120ca:	b920      	cbnz	r0, 80120d6 <_svfiprintf_r+0x2e>
 80120cc:	230c      	movs	r3, #12
 80120ce:	603b      	str	r3, [r7, #0]
 80120d0:	f04f 30ff 	mov.w	r0, #4294967295
 80120d4:	e0d1      	b.n	801227a <_svfiprintf_r+0x1d2>
 80120d6:	2340      	movs	r3, #64	; 0x40
 80120d8:	616b      	str	r3, [r5, #20]
 80120da:	2300      	movs	r3, #0
 80120dc:	9309      	str	r3, [sp, #36]	; 0x24
 80120de:	2320      	movs	r3, #32
 80120e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80120e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80120e8:	2330      	movs	r3, #48	; 0x30
 80120ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012294 <_svfiprintf_r+0x1ec>
 80120ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120f2:	f04f 0901 	mov.w	r9, #1
 80120f6:	4623      	mov	r3, r4
 80120f8:	469a      	mov	sl, r3
 80120fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120fe:	b10a      	cbz	r2, 8012104 <_svfiprintf_r+0x5c>
 8012100:	2a25      	cmp	r2, #37	; 0x25
 8012102:	d1f9      	bne.n	80120f8 <_svfiprintf_r+0x50>
 8012104:	ebba 0b04 	subs.w	fp, sl, r4
 8012108:	d00b      	beq.n	8012122 <_svfiprintf_r+0x7a>
 801210a:	465b      	mov	r3, fp
 801210c:	4622      	mov	r2, r4
 801210e:	4629      	mov	r1, r5
 8012110:	4638      	mov	r0, r7
 8012112:	f7ff ff6d 	bl	8011ff0 <__ssputs_r>
 8012116:	3001      	adds	r0, #1
 8012118:	f000 80aa 	beq.w	8012270 <_svfiprintf_r+0x1c8>
 801211c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801211e:	445a      	add	r2, fp
 8012120:	9209      	str	r2, [sp, #36]	; 0x24
 8012122:	f89a 3000 	ldrb.w	r3, [sl]
 8012126:	2b00      	cmp	r3, #0
 8012128:	f000 80a2 	beq.w	8012270 <_svfiprintf_r+0x1c8>
 801212c:	2300      	movs	r3, #0
 801212e:	f04f 32ff 	mov.w	r2, #4294967295
 8012132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012136:	f10a 0a01 	add.w	sl, sl, #1
 801213a:	9304      	str	r3, [sp, #16]
 801213c:	9307      	str	r3, [sp, #28]
 801213e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012142:	931a      	str	r3, [sp, #104]	; 0x68
 8012144:	4654      	mov	r4, sl
 8012146:	2205      	movs	r2, #5
 8012148:	f814 1b01 	ldrb.w	r1, [r4], #1
 801214c:	4851      	ldr	r0, [pc, #324]	; (8012294 <_svfiprintf_r+0x1ec>)
 801214e:	f7ee f847 	bl	80001e0 <memchr>
 8012152:	9a04      	ldr	r2, [sp, #16]
 8012154:	b9d8      	cbnz	r0, 801218e <_svfiprintf_r+0xe6>
 8012156:	06d0      	lsls	r0, r2, #27
 8012158:	bf44      	itt	mi
 801215a:	2320      	movmi	r3, #32
 801215c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012160:	0711      	lsls	r1, r2, #28
 8012162:	bf44      	itt	mi
 8012164:	232b      	movmi	r3, #43	; 0x2b
 8012166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801216a:	f89a 3000 	ldrb.w	r3, [sl]
 801216e:	2b2a      	cmp	r3, #42	; 0x2a
 8012170:	d015      	beq.n	801219e <_svfiprintf_r+0xf6>
 8012172:	9a07      	ldr	r2, [sp, #28]
 8012174:	4654      	mov	r4, sl
 8012176:	2000      	movs	r0, #0
 8012178:	f04f 0c0a 	mov.w	ip, #10
 801217c:	4621      	mov	r1, r4
 801217e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012182:	3b30      	subs	r3, #48	; 0x30
 8012184:	2b09      	cmp	r3, #9
 8012186:	d94e      	bls.n	8012226 <_svfiprintf_r+0x17e>
 8012188:	b1b0      	cbz	r0, 80121b8 <_svfiprintf_r+0x110>
 801218a:	9207      	str	r2, [sp, #28]
 801218c:	e014      	b.n	80121b8 <_svfiprintf_r+0x110>
 801218e:	eba0 0308 	sub.w	r3, r0, r8
 8012192:	fa09 f303 	lsl.w	r3, r9, r3
 8012196:	4313      	orrs	r3, r2
 8012198:	9304      	str	r3, [sp, #16]
 801219a:	46a2      	mov	sl, r4
 801219c:	e7d2      	b.n	8012144 <_svfiprintf_r+0x9c>
 801219e:	9b03      	ldr	r3, [sp, #12]
 80121a0:	1d19      	adds	r1, r3, #4
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	9103      	str	r1, [sp, #12]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	bfbb      	ittet	lt
 80121aa:	425b      	neglt	r3, r3
 80121ac:	f042 0202 	orrlt.w	r2, r2, #2
 80121b0:	9307      	strge	r3, [sp, #28]
 80121b2:	9307      	strlt	r3, [sp, #28]
 80121b4:	bfb8      	it	lt
 80121b6:	9204      	strlt	r2, [sp, #16]
 80121b8:	7823      	ldrb	r3, [r4, #0]
 80121ba:	2b2e      	cmp	r3, #46	; 0x2e
 80121bc:	d10c      	bne.n	80121d8 <_svfiprintf_r+0x130>
 80121be:	7863      	ldrb	r3, [r4, #1]
 80121c0:	2b2a      	cmp	r3, #42	; 0x2a
 80121c2:	d135      	bne.n	8012230 <_svfiprintf_r+0x188>
 80121c4:	9b03      	ldr	r3, [sp, #12]
 80121c6:	1d1a      	adds	r2, r3, #4
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	9203      	str	r2, [sp, #12]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	bfb8      	it	lt
 80121d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80121d4:	3402      	adds	r4, #2
 80121d6:	9305      	str	r3, [sp, #20]
 80121d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80122a4 <_svfiprintf_r+0x1fc>
 80121dc:	7821      	ldrb	r1, [r4, #0]
 80121de:	2203      	movs	r2, #3
 80121e0:	4650      	mov	r0, sl
 80121e2:	f7ed fffd 	bl	80001e0 <memchr>
 80121e6:	b140      	cbz	r0, 80121fa <_svfiprintf_r+0x152>
 80121e8:	2340      	movs	r3, #64	; 0x40
 80121ea:	eba0 000a 	sub.w	r0, r0, sl
 80121ee:	fa03 f000 	lsl.w	r0, r3, r0
 80121f2:	9b04      	ldr	r3, [sp, #16]
 80121f4:	4303      	orrs	r3, r0
 80121f6:	3401      	adds	r4, #1
 80121f8:	9304      	str	r3, [sp, #16]
 80121fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121fe:	4826      	ldr	r0, [pc, #152]	; (8012298 <_svfiprintf_r+0x1f0>)
 8012200:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012204:	2206      	movs	r2, #6
 8012206:	f7ed ffeb 	bl	80001e0 <memchr>
 801220a:	2800      	cmp	r0, #0
 801220c:	d038      	beq.n	8012280 <_svfiprintf_r+0x1d8>
 801220e:	4b23      	ldr	r3, [pc, #140]	; (801229c <_svfiprintf_r+0x1f4>)
 8012210:	bb1b      	cbnz	r3, 801225a <_svfiprintf_r+0x1b2>
 8012212:	9b03      	ldr	r3, [sp, #12]
 8012214:	3307      	adds	r3, #7
 8012216:	f023 0307 	bic.w	r3, r3, #7
 801221a:	3308      	adds	r3, #8
 801221c:	9303      	str	r3, [sp, #12]
 801221e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012220:	4433      	add	r3, r6
 8012222:	9309      	str	r3, [sp, #36]	; 0x24
 8012224:	e767      	b.n	80120f6 <_svfiprintf_r+0x4e>
 8012226:	fb0c 3202 	mla	r2, ip, r2, r3
 801222a:	460c      	mov	r4, r1
 801222c:	2001      	movs	r0, #1
 801222e:	e7a5      	b.n	801217c <_svfiprintf_r+0xd4>
 8012230:	2300      	movs	r3, #0
 8012232:	3401      	adds	r4, #1
 8012234:	9305      	str	r3, [sp, #20]
 8012236:	4619      	mov	r1, r3
 8012238:	f04f 0c0a 	mov.w	ip, #10
 801223c:	4620      	mov	r0, r4
 801223e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012242:	3a30      	subs	r2, #48	; 0x30
 8012244:	2a09      	cmp	r2, #9
 8012246:	d903      	bls.n	8012250 <_svfiprintf_r+0x1a8>
 8012248:	2b00      	cmp	r3, #0
 801224a:	d0c5      	beq.n	80121d8 <_svfiprintf_r+0x130>
 801224c:	9105      	str	r1, [sp, #20]
 801224e:	e7c3      	b.n	80121d8 <_svfiprintf_r+0x130>
 8012250:	fb0c 2101 	mla	r1, ip, r1, r2
 8012254:	4604      	mov	r4, r0
 8012256:	2301      	movs	r3, #1
 8012258:	e7f0      	b.n	801223c <_svfiprintf_r+0x194>
 801225a:	ab03      	add	r3, sp, #12
 801225c:	9300      	str	r3, [sp, #0]
 801225e:	462a      	mov	r2, r5
 8012260:	4b0f      	ldr	r3, [pc, #60]	; (80122a0 <_svfiprintf_r+0x1f8>)
 8012262:	a904      	add	r1, sp, #16
 8012264:	4638      	mov	r0, r7
 8012266:	f7fd ffd9 	bl	801021c <_printf_float>
 801226a:	1c42      	adds	r2, r0, #1
 801226c:	4606      	mov	r6, r0
 801226e:	d1d6      	bne.n	801221e <_svfiprintf_r+0x176>
 8012270:	89ab      	ldrh	r3, [r5, #12]
 8012272:	065b      	lsls	r3, r3, #25
 8012274:	f53f af2c 	bmi.w	80120d0 <_svfiprintf_r+0x28>
 8012278:	9809      	ldr	r0, [sp, #36]	; 0x24
 801227a:	b01d      	add	sp, #116	; 0x74
 801227c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012280:	ab03      	add	r3, sp, #12
 8012282:	9300      	str	r3, [sp, #0]
 8012284:	462a      	mov	r2, r5
 8012286:	4b06      	ldr	r3, [pc, #24]	; (80122a0 <_svfiprintf_r+0x1f8>)
 8012288:	a904      	add	r1, sp, #16
 801228a:	4638      	mov	r0, r7
 801228c:	f7fe fa6a 	bl	8010764 <_printf_i>
 8012290:	e7eb      	b.n	801226a <_svfiprintf_r+0x1c2>
 8012292:	bf00      	nop
 8012294:	08015734 	.word	0x08015734
 8012298:	0801573e 	.word	0x0801573e
 801229c:	0801021d 	.word	0x0801021d
 80122a0:	08011ff1 	.word	0x08011ff1
 80122a4:	0801573a 	.word	0x0801573a

080122a8 <_sbrk_r>:
 80122a8:	b538      	push	{r3, r4, r5, lr}
 80122aa:	4d06      	ldr	r5, [pc, #24]	; (80122c4 <_sbrk_r+0x1c>)
 80122ac:	2300      	movs	r3, #0
 80122ae:	4604      	mov	r4, r0
 80122b0:	4608      	mov	r0, r1
 80122b2:	602b      	str	r3, [r5, #0]
 80122b4:	f7f2 f83c 	bl	8004330 <_sbrk>
 80122b8:	1c43      	adds	r3, r0, #1
 80122ba:	d102      	bne.n	80122c2 <_sbrk_r+0x1a>
 80122bc:	682b      	ldr	r3, [r5, #0]
 80122be:	b103      	cbz	r3, 80122c2 <_sbrk_r+0x1a>
 80122c0:	6023      	str	r3, [r4, #0]
 80122c2:	bd38      	pop	{r3, r4, r5, pc}
 80122c4:	200068c0 	.word	0x200068c0

080122c8 <__assert_func>:
 80122c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80122ca:	4614      	mov	r4, r2
 80122cc:	461a      	mov	r2, r3
 80122ce:	4b09      	ldr	r3, [pc, #36]	; (80122f4 <__assert_func+0x2c>)
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	4605      	mov	r5, r0
 80122d4:	68d8      	ldr	r0, [r3, #12]
 80122d6:	b14c      	cbz	r4, 80122ec <__assert_func+0x24>
 80122d8:	4b07      	ldr	r3, [pc, #28]	; (80122f8 <__assert_func+0x30>)
 80122da:	9100      	str	r1, [sp, #0]
 80122dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80122e0:	4906      	ldr	r1, [pc, #24]	; (80122fc <__assert_func+0x34>)
 80122e2:	462b      	mov	r3, r5
 80122e4:	f000 f80e 	bl	8012304 <fiprintf>
 80122e8:	f000 faac 	bl	8012844 <abort>
 80122ec:	4b04      	ldr	r3, [pc, #16]	; (8012300 <__assert_func+0x38>)
 80122ee:	461c      	mov	r4, r3
 80122f0:	e7f3      	b.n	80122da <__assert_func+0x12>
 80122f2:	bf00      	nop
 80122f4:	2000001c 	.word	0x2000001c
 80122f8:	08015745 	.word	0x08015745
 80122fc:	08015752 	.word	0x08015752
 8012300:	08015780 	.word	0x08015780

08012304 <fiprintf>:
 8012304:	b40e      	push	{r1, r2, r3}
 8012306:	b503      	push	{r0, r1, lr}
 8012308:	4601      	mov	r1, r0
 801230a:	ab03      	add	r3, sp, #12
 801230c:	4805      	ldr	r0, [pc, #20]	; (8012324 <fiprintf+0x20>)
 801230e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012312:	6800      	ldr	r0, [r0, #0]
 8012314:	9301      	str	r3, [sp, #4]
 8012316:	f000 f897 	bl	8012448 <_vfiprintf_r>
 801231a:	b002      	add	sp, #8
 801231c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012320:	b003      	add	sp, #12
 8012322:	4770      	bx	lr
 8012324:	2000001c 	.word	0x2000001c

08012328 <__ascii_mbtowc>:
 8012328:	b082      	sub	sp, #8
 801232a:	b901      	cbnz	r1, 801232e <__ascii_mbtowc+0x6>
 801232c:	a901      	add	r1, sp, #4
 801232e:	b142      	cbz	r2, 8012342 <__ascii_mbtowc+0x1a>
 8012330:	b14b      	cbz	r3, 8012346 <__ascii_mbtowc+0x1e>
 8012332:	7813      	ldrb	r3, [r2, #0]
 8012334:	600b      	str	r3, [r1, #0]
 8012336:	7812      	ldrb	r2, [r2, #0]
 8012338:	1e10      	subs	r0, r2, #0
 801233a:	bf18      	it	ne
 801233c:	2001      	movne	r0, #1
 801233e:	b002      	add	sp, #8
 8012340:	4770      	bx	lr
 8012342:	4610      	mov	r0, r2
 8012344:	e7fb      	b.n	801233e <__ascii_mbtowc+0x16>
 8012346:	f06f 0001 	mvn.w	r0, #1
 801234a:	e7f8      	b.n	801233e <__ascii_mbtowc+0x16>

0801234c <memmove>:
 801234c:	4288      	cmp	r0, r1
 801234e:	b510      	push	{r4, lr}
 8012350:	eb01 0402 	add.w	r4, r1, r2
 8012354:	d902      	bls.n	801235c <memmove+0x10>
 8012356:	4284      	cmp	r4, r0
 8012358:	4623      	mov	r3, r4
 801235a:	d807      	bhi.n	801236c <memmove+0x20>
 801235c:	1e43      	subs	r3, r0, #1
 801235e:	42a1      	cmp	r1, r4
 8012360:	d008      	beq.n	8012374 <memmove+0x28>
 8012362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012366:	f803 2f01 	strb.w	r2, [r3, #1]!
 801236a:	e7f8      	b.n	801235e <memmove+0x12>
 801236c:	4402      	add	r2, r0
 801236e:	4601      	mov	r1, r0
 8012370:	428a      	cmp	r2, r1
 8012372:	d100      	bne.n	8012376 <memmove+0x2a>
 8012374:	bd10      	pop	{r4, pc}
 8012376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801237a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801237e:	e7f7      	b.n	8012370 <memmove+0x24>

08012380 <__malloc_lock>:
 8012380:	4801      	ldr	r0, [pc, #4]	; (8012388 <__malloc_lock+0x8>)
 8012382:	f000 bc1f 	b.w	8012bc4 <__retarget_lock_acquire_recursive>
 8012386:	bf00      	nop
 8012388:	200068c4 	.word	0x200068c4

0801238c <__malloc_unlock>:
 801238c:	4801      	ldr	r0, [pc, #4]	; (8012394 <__malloc_unlock+0x8>)
 801238e:	f000 bc1a 	b.w	8012bc6 <__retarget_lock_release_recursive>
 8012392:	bf00      	nop
 8012394:	200068c4 	.word	0x200068c4

08012398 <_realloc_r>:
 8012398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801239c:	4680      	mov	r8, r0
 801239e:	4614      	mov	r4, r2
 80123a0:	460e      	mov	r6, r1
 80123a2:	b921      	cbnz	r1, 80123ae <_realloc_r+0x16>
 80123a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123a8:	4611      	mov	r1, r2
 80123aa:	f7ff bdad 	b.w	8011f08 <_malloc_r>
 80123ae:	b92a      	cbnz	r2, 80123bc <_realloc_r+0x24>
 80123b0:	f7ff fd3e 	bl	8011e30 <_free_r>
 80123b4:	4625      	mov	r5, r4
 80123b6:	4628      	mov	r0, r5
 80123b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123bc:	f000 fc6a 	bl	8012c94 <_malloc_usable_size_r>
 80123c0:	4284      	cmp	r4, r0
 80123c2:	4607      	mov	r7, r0
 80123c4:	d802      	bhi.n	80123cc <_realloc_r+0x34>
 80123c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80123ca:	d812      	bhi.n	80123f2 <_realloc_r+0x5a>
 80123cc:	4621      	mov	r1, r4
 80123ce:	4640      	mov	r0, r8
 80123d0:	f7ff fd9a 	bl	8011f08 <_malloc_r>
 80123d4:	4605      	mov	r5, r0
 80123d6:	2800      	cmp	r0, #0
 80123d8:	d0ed      	beq.n	80123b6 <_realloc_r+0x1e>
 80123da:	42bc      	cmp	r4, r7
 80123dc:	4622      	mov	r2, r4
 80123de:	4631      	mov	r1, r6
 80123e0:	bf28      	it	cs
 80123e2:	463a      	movcs	r2, r7
 80123e4:	f7fd fe64 	bl	80100b0 <memcpy>
 80123e8:	4631      	mov	r1, r6
 80123ea:	4640      	mov	r0, r8
 80123ec:	f7ff fd20 	bl	8011e30 <_free_r>
 80123f0:	e7e1      	b.n	80123b6 <_realloc_r+0x1e>
 80123f2:	4635      	mov	r5, r6
 80123f4:	e7df      	b.n	80123b6 <_realloc_r+0x1e>

080123f6 <__sfputc_r>:
 80123f6:	6893      	ldr	r3, [r2, #8]
 80123f8:	3b01      	subs	r3, #1
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	b410      	push	{r4}
 80123fe:	6093      	str	r3, [r2, #8]
 8012400:	da08      	bge.n	8012414 <__sfputc_r+0x1e>
 8012402:	6994      	ldr	r4, [r2, #24]
 8012404:	42a3      	cmp	r3, r4
 8012406:	db01      	blt.n	801240c <__sfputc_r+0x16>
 8012408:	290a      	cmp	r1, #10
 801240a:	d103      	bne.n	8012414 <__sfputc_r+0x1e>
 801240c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012410:	f000 b94a 	b.w	80126a8 <__swbuf_r>
 8012414:	6813      	ldr	r3, [r2, #0]
 8012416:	1c58      	adds	r0, r3, #1
 8012418:	6010      	str	r0, [r2, #0]
 801241a:	7019      	strb	r1, [r3, #0]
 801241c:	4608      	mov	r0, r1
 801241e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012422:	4770      	bx	lr

08012424 <__sfputs_r>:
 8012424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012426:	4606      	mov	r6, r0
 8012428:	460f      	mov	r7, r1
 801242a:	4614      	mov	r4, r2
 801242c:	18d5      	adds	r5, r2, r3
 801242e:	42ac      	cmp	r4, r5
 8012430:	d101      	bne.n	8012436 <__sfputs_r+0x12>
 8012432:	2000      	movs	r0, #0
 8012434:	e007      	b.n	8012446 <__sfputs_r+0x22>
 8012436:	f814 1b01 	ldrb.w	r1, [r4], #1
 801243a:	463a      	mov	r2, r7
 801243c:	4630      	mov	r0, r6
 801243e:	f7ff ffda 	bl	80123f6 <__sfputc_r>
 8012442:	1c43      	adds	r3, r0, #1
 8012444:	d1f3      	bne.n	801242e <__sfputs_r+0xa>
 8012446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012448 <_vfiprintf_r>:
 8012448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801244c:	460d      	mov	r5, r1
 801244e:	b09d      	sub	sp, #116	; 0x74
 8012450:	4614      	mov	r4, r2
 8012452:	4698      	mov	r8, r3
 8012454:	4606      	mov	r6, r0
 8012456:	b118      	cbz	r0, 8012460 <_vfiprintf_r+0x18>
 8012458:	6983      	ldr	r3, [r0, #24]
 801245a:	b90b      	cbnz	r3, 8012460 <_vfiprintf_r+0x18>
 801245c:	f000 fb14 	bl	8012a88 <__sinit>
 8012460:	4b89      	ldr	r3, [pc, #548]	; (8012688 <_vfiprintf_r+0x240>)
 8012462:	429d      	cmp	r5, r3
 8012464:	d11b      	bne.n	801249e <_vfiprintf_r+0x56>
 8012466:	6875      	ldr	r5, [r6, #4]
 8012468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801246a:	07d9      	lsls	r1, r3, #31
 801246c:	d405      	bmi.n	801247a <_vfiprintf_r+0x32>
 801246e:	89ab      	ldrh	r3, [r5, #12]
 8012470:	059a      	lsls	r2, r3, #22
 8012472:	d402      	bmi.n	801247a <_vfiprintf_r+0x32>
 8012474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012476:	f000 fba5 	bl	8012bc4 <__retarget_lock_acquire_recursive>
 801247a:	89ab      	ldrh	r3, [r5, #12]
 801247c:	071b      	lsls	r3, r3, #28
 801247e:	d501      	bpl.n	8012484 <_vfiprintf_r+0x3c>
 8012480:	692b      	ldr	r3, [r5, #16]
 8012482:	b9eb      	cbnz	r3, 80124c0 <_vfiprintf_r+0x78>
 8012484:	4629      	mov	r1, r5
 8012486:	4630      	mov	r0, r6
 8012488:	f000 f96e 	bl	8012768 <__swsetup_r>
 801248c:	b1c0      	cbz	r0, 80124c0 <_vfiprintf_r+0x78>
 801248e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012490:	07dc      	lsls	r4, r3, #31
 8012492:	d50e      	bpl.n	80124b2 <_vfiprintf_r+0x6a>
 8012494:	f04f 30ff 	mov.w	r0, #4294967295
 8012498:	b01d      	add	sp, #116	; 0x74
 801249a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801249e:	4b7b      	ldr	r3, [pc, #492]	; (801268c <_vfiprintf_r+0x244>)
 80124a0:	429d      	cmp	r5, r3
 80124a2:	d101      	bne.n	80124a8 <_vfiprintf_r+0x60>
 80124a4:	68b5      	ldr	r5, [r6, #8]
 80124a6:	e7df      	b.n	8012468 <_vfiprintf_r+0x20>
 80124a8:	4b79      	ldr	r3, [pc, #484]	; (8012690 <_vfiprintf_r+0x248>)
 80124aa:	429d      	cmp	r5, r3
 80124ac:	bf08      	it	eq
 80124ae:	68f5      	ldreq	r5, [r6, #12]
 80124b0:	e7da      	b.n	8012468 <_vfiprintf_r+0x20>
 80124b2:	89ab      	ldrh	r3, [r5, #12]
 80124b4:	0598      	lsls	r0, r3, #22
 80124b6:	d4ed      	bmi.n	8012494 <_vfiprintf_r+0x4c>
 80124b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124ba:	f000 fb84 	bl	8012bc6 <__retarget_lock_release_recursive>
 80124be:	e7e9      	b.n	8012494 <_vfiprintf_r+0x4c>
 80124c0:	2300      	movs	r3, #0
 80124c2:	9309      	str	r3, [sp, #36]	; 0x24
 80124c4:	2320      	movs	r3, #32
 80124c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80124ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80124ce:	2330      	movs	r3, #48	; 0x30
 80124d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012694 <_vfiprintf_r+0x24c>
 80124d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80124d8:	f04f 0901 	mov.w	r9, #1
 80124dc:	4623      	mov	r3, r4
 80124de:	469a      	mov	sl, r3
 80124e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124e4:	b10a      	cbz	r2, 80124ea <_vfiprintf_r+0xa2>
 80124e6:	2a25      	cmp	r2, #37	; 0x25
 80124e8:	d1f9      	bne.n	80124de <_vfiprintf_r+0x96>
 80124ea:	ebba 0b04 	subs.w	fp, sl, r4
 80124ee:	d00b      	beq.n	8012508 <_vfiprintf_r+0xc0>
 80124f0:	465b      	mov	r3, fp
 80124f2:	4622      	mov	r2, r4
 80124f4:	4629      	mov	r1, r5
 80124f6:	4630      	mov	r0, r6
 80124f8:	f7ff ff94 	bl	8012424 <__sfputs_r>
 80124fc:	3001      	adds	r0, #1
 80124fe:	f000 80aa 	beq.w	8012656 <_vfiprintf_r+0x20e>
 8012502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012504:	445a      	add	r2, fp
 8012506:	9209      	str	r2, [sp, #36]	; 0x24
 8012508:	f89a 3000 	ldrb.w	r3, [sl]
 801250c:	2b00      	cmp	r3, #0
 801250e:	f000 80a2 	beq.w	8012656 <_vfiprintf_r+0x20e>
 8012512:	2300      	movs	r3, #0
 8012514:	f04f 32ff 	mov.w	r2, #4294967295
 8012518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801251c:	f10a 0a01 	add.w	sl, sl, #1
 8012520:	9304      	str	r3, [sp, #16]
 8012522:	9307      	str	r3, [sp, #28]
 8012524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012528:	931a      	str	r3, [sp, #104]	; 0x68
 801252a:	4654      	mov	r4, sl
 801252c:	2205      	movs	r2, #5
 801252e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012532:	4858      	ldr	r0, [pc, #352]	; (8012694 <_vfiprintf_r+0x24c>)
 8012534:	f7ed fe54 	bl	80001e0 <memchr>
 8012538:	9a04      	ldr	r2, [sp, #16]
 801253a:	b9d8      	cbnz	r0, 8012574 <_vfiprintf_r+0x12c>
 801253c:	06d1      	lsls	r1, r2, #27
 801253e:	bf44      	itt	mi
 8012540:	2320      	movmi	r3, #32
 8012542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012546:	0713      	lsls	r3, r2, #28
 8012548:	bf44      	itt	mi
 801254a:	232b      	movmi	r3, #43	; 0x2b
 801254c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012550:	f89a 3000 	ldrb.w	r3, [sl]
 8012554:	2b2a      	cmp	r3, #42	; 0x2a
 8012556:	d015      	beq.n	8012584 <_vfiprintf_r+0x13c>
 8012558:	9a07      	ldr	r2, [sp, #28]
 801255a:	4654      	mov	r4, sl
 801255c:	2000      	movs	r0, #0
 801255e:	f04f 0c0a 	mov.w	ip, #10
 8012562:	4621      	mov	r1, r4
 8012564:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012568:	3b30      	subs	r3, #48	; 0x30
 801256a:	2b09      	cmp	r3, #9
 801256c:	d94e      	bls.n	801260c <_vfiprintf_r+0x1c4>
 801256e:	b1b0      	cbz	r0, 801259e <_vfiprintf_r+0x156>
 8012570:	9207      	str	r2, [sp, #28]
 8012572:	e014      	b.n	801259e <_vfiprintf_r+0x156>
 8012574:	eba0 0308 	sub.w	r3, r0, r8
 8012578:	fa09 f303 	lsl.w	r3, r9, r3
 801257c:	4313      	orrs	r3, r2
 801257e:	9304      	str	r3, [sp, #16]
 8012580:	46a2      	mov	sl, r4
 8012582:	e7d2      	b.n	801252a <_vfiprintf_r+0xe2>
 8012584:	9b03      	ldr	r3, [sp, #12]
 8012586:	1d19      	adds	r1, r3, #4
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	9103      	str	r1, [sp, #12]
 801258c:	2b00      	cmp	r3, #0
 801258e:	bfbb      	ittet	lt
 8012590:	425b      	neglt	r3, r3
 8012592:	f042 0202 	orrlt.w	r2, r2, #2
 8012596:	9307      	strge	r3, [sp, #28]
 8012598:	9307      	strlt	r3, [sp, #28]
 801259a:	bfb8      	it	lt
 801259c:	9204      	strlt	r2, [sp, #16]
 801259e:	7823      	ldrb	r3, [r4, #0]
 80125a0:	2b2e      	cmp	r3, #46	; 0x2e
 80125a2:	d10c      	bne.n	80125be <_vfiprintf_r+0x176>
 80125a4:	7863      	ldrb	r3, [r4, #1]
 80125a6:	2b2a      	cmp	r3, #42	; 0x2a
 80125a8:	d135      	bne.n	8012616 <_vfiprintf_r+0x1ce>
 80125aa:	9b03      	ldr	r3, [sp, #12]
 80125ac:	1d1a      	adds	r2, r3, #4
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	9203      	str	r2, [sp, #12]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	bfb8      	it	lt
 80125b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80125ba:	3402      	adds	r4, #2
 80125bc:	9305      	str	r3, [sp, #20]
 80125be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80126a4 <_vfiprintf_r+0x25c>
 80125c2:	7821      	ldrb	r1, [r4, #0]
 80125c4:	2203      	movs	r2, #3
 80125c6:	4650      	mov	r0, sl
 80125c8:	f7ed fe0a 	bl	80001e0 <memchr>
 80125cc:	b140      	cbz	r0, 80125e0 <_vfiprintf_r+0x198>
 80125ce:	2340      	movs	r3, #64	; 0x40
 80125d0:	eba0 000a 	sub.w	r0, r0, sl
 80125d4:	fa03 f000 	lsl.w	r0, r3, r0
 80125d8:	9b04      	ldr	r3, [sp, #16]
 80125da:	4303      	orrs	r3, r0
 80125dc:	3401      	adds	r4, #1
 80125de:	9304      	str	r3, [sp, #16]
 80125e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125e4:	482c      	ldr	r0, [pc, #176]	; (8012698 <_vfiprintf_r+0x250>)
 80125e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80125ea:	2206      	movs	r2, #6
 80125ec:	f7ed fdf8 	bl	80001e0 <memchr>
 80125f0:	2800      	cmp	r0, #0
 80125f2:	d03f      	beq.n	8012674 <_vfiprintf_r+0x22c>
 80125f4:	4b29      	ldr	r3, [pc, #164]	; (801269c <_vfiprintf_r+0x254>)
 80125f6:	bb1b      	cbnz	r3, 8012640 <_vfiprintf_r+0x1f8>
 80125f8:	9b03      	ldr	r3, [sp, #12]
 80125fa:	3307      	adds	r3, #7
 80125fc:	f023 0307 	bic.w	r3, r3, #7
 8012600:	3308      	adds	r3, #8
 8012602:	9303      	str	r3, [sp, #12]
 8012604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012606:	443b      	add	r3, r7
 8012608:	9309      	str	r3, [sp, #36]	; 0x24
 801260a:	e767      	b.n	80124dc <_vfiprintf_r+0x94>
 801260c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012610:	460c      	mov	r4, r1
 8012612:	2001      	movs	r0, #1
 8012614:	e7a5      	b.n	8012562 <_vfiprintf_r+0x11a>
 8012616:	2300      	movs	r3, #0
 8012618:	3401      	adds	r4, #1
 801261a:	9305      	str	r3, [sp, #20]
 801261c:	4619      	mov	r1, r3
 801261e:	f04f 0c0a 	mov.w	ip, #10
 8012622:	4620      	mov	r0, r4
 8012624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012628:	3a30      	subs	r2, #48	; 0x30
 801262a:	2a09      	cmp	r2, #9
 801262c:	d903      	bls.n	8012636 <_vfiprintf_r+0x1ee>
 801262e:	2b00      	cmp	r3, #0
 8012630:	d0c5      	beq.n	80125be <_vfiprintf_r+0x176>
 8012632:	9105      	str	r1, [sp, #20]
 8012634:	e7c3      	b.n	80125be <_vfiprintf_r+0x176>
 8012636:	fb0c 2101 	mla	r1, ip, r1, r2
 801263a:	4604      	mov	r4, r0
 801263c:	2301      	movs	r3, #1
 801263e:	e7f0      	b.n	8012622 <_vfiprintf_r+0x1da>
 8012640:	ab03      	add	r3, sp, #12
 8012642:	9300      	str	r3, [sp, #0]
 8012644:	462a      	mov	r2, r5
 8012646:	4b16      	ldr	r3, [pc, #88]	; (80126a0 <_vfiprintf_r+0x258>)
 8012648:	a904      	add	r1, sp, #16
 801264a:	4630      	mov	r0, r6
 801264c:	f7fd fde6 	bl	801021c <_printf_float>
 8012650:	4607      	mov	r7, r0
 8012652:	1c78      	adds	r0, r7, #1
 8012654:	d1d6      	bne.n	8012604 <_vfiprintf_r+0x1bc>
 8012656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012658:	07d9      	lsls	r1, r3, #31
 801265a:	d405      	bmi.n	8012668 <_vfiprintf_r+0x220>
 801265c:	89ab      	ldrh	r3, [r5, #12]
 801265e:	059a      	lsls	r2, r3, #22
 8012660:	d402      	bmi.n	8012668 <_vfiprintf_r+0x220>
 8012662:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012664:	f000 faaf 	bl	8012bc6 <__retarget_lock_release_recursive>
 8012668:	89ab      	ldrh	r3, [r5, #12]
 801266a:	065b      	lsls	r3, r3, #25
 801266c:	f53f af12 	bmi.w	8012494 <_vfiprintf_r+0x4c>
 8012670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012672:	e711      	b.n	8012498 <_vfiprintf_r+0x50>
 8012674:	ab03      	add	r3, sp, #12
 8012676:	9300      	str	r3, [sp, #0]
 8012678:	462a      	mov	r2, r5
 801267a:	4b09      	ldr	r3, [pc, #36]	; (80126a0 <_vfiprintf_r+0x258>)
 801267c:	a904      	add	r1, sp, #16
 801267e:	4630      	mov	r0, r6
 8012680:	f7fe f870 	bl	8010764 <_printf_i>
 8012684:	e7e4      	b.n	8012650 <_vfiprintf_r+0x208>
 8012686:	bf00      	nop
 8012688:	080158ac 	.word	0x080158ac
 801268c:	080158cc 	.word	0x080158cc
 8012690:	0801588c 	.word	0x0801588c
 8012694:	08015734 	.word	0x08015734
 8012698:	0801573e 	.word	0x0801573e
 801269c:	0801021d 	.word	0x0801021d
 80126a0:	08012425 	.word	0x08012425
 80126a4:	0801573a 	.word	0x0801573a

080126a8 <__swbuf_r>:
 80126a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126aa:	460e      	mov	r6, r1
 80126ac:	4614      	mov	r4, r2
 80126ae:	4605      	mov	r5, r0
 80126b0:	b118      	cbz	r0, 80126ba <__swbuf_r+0x12>
 80126b2:	6983      	ldr	r3, [r0, #24]
 80126b4:	b90b      	cbnz	r3, 80126ba <__swbuf_r+0x12>
 80126b6:	f000 f9e7 	bl	8012a88 <__sinit>
 80126ba:	4b21      	ldr	r3, [pc, #132]	; (8012740 <__swbuf_r+0x98>)
 80126bc:	429c      	cmp	r4, r3
 80126be:	d12b      	bne.n	8012718 <__swbuf_r+0x70>
 80126c0:	686c      	ldr	r4, [r5, #4]
 80126c2:	69a3      	ldr	r3, [r4, #24]
 80126c4:	60a3      	str	r3, [r4, #8]
 80126c6:	89a3      	ldrh	r3, [r4, #12]
 80126c8:	071a      	lsls	r2, r3, #28
 80126ca:	d52f      	bpl.n	801272c <__swbuf_r+0x84>
 80126cc:	6923      	ldr	r3, [r4, #16]
 80126ce:	b36b      	cbz	r3, 801272c <__swbuf_r+0x84>
 80126d0:	6923      	ldr	r3, [r4, #16]
 80126d2:	6820      	ldr	r0, [r4, #0]
 80126d4:	1ac0      	subs	r0, r0, r3
 80126d6:	6963      	ldr	r3, [r4, #20]
 80126d8:	b2f6      	uxtb	r6, r6
 80126da:	4283      	cmp	r3, r0
 80126dc:	4637      	mov	r7, r6
 80126de:	dc04      	bgt.n	80126ea <__swbuf_r+0x42>
 80126e0:	4621      	mov	r1, r4
 80126e2:	4628      	mov	r0, r5
 80126e4:	f000 f93c 	bl	8012960 <_fflush_r>
 80126e8:	bb30      	cbnz	r0, 8012738 <__swbuf_r+0x90>
 80126ea:	68a3      	ldr	r3, [r4, #8]
 80126ec:	3b01      	subs	r3, #1
 80126ee:	60a3      	str	r3, [r4, #8]
 80126f0:	6823      	ldr	r3, [r4, #0]
 80126f2:	1c5a      	adds	r2, r3, #1
 80126f4:	6022      	str	r2, [r4, #0]
 80126f6:	701e      	strb	r6, [r3, #0]
 80126f8:	6963      	ldr	r3, [r4, #20]
 80126fa:	3001      	adds	r0, #1
 80126fc:	4283      	cmp	r3, r0
 80126fe:	d004      	beq.n	801270a <__swbuf_r+0x62>
 8012700:	89a3      	ldrh	r3, [r4, #12]
 8012702:	07db      	lsls	r3, r3, #31
 8012704:	d506      	bpl.n	8012714 <__swbuf_r+0x6c>
 8012706:	2e0a      	cmp	r6, #10
 8012708:	d104      	bne.n	8012714 <__swbuf_r+0x6c>
 801270a:	4621      	mov	r1, r4
 801270c:	4628      	mov	r0, r5
 801270e:	f000 f927 	bl	8012960 <_fflush_r>
 8012712:	b988      	cbnz	r0, 8012738 <__swbuf_r+0x90>
 8012714:	4638      	mov	r0, r7
 8012716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012718:	4b0a      	ldr	r3, [pc, #40]	; (8012744 <__swbuf_r+0x9c>)
 801271a:	429c      	cmp	r4, r3
 801271c:	d101      	bne.n	8012722 <__swbuf_r+0x7a>
 801271e:	68ac      	ldr	r4, [r5, #8]
 8012720:	e7cf      	b.n	80126c2 <__swbuf_r+0x1a>
 8012722:	4b09      	ldr	r3, [pc, #36]	; (8012748 <__swbuf_r+0xa0>)
 8012724:	429c      	cmp	r4, r3
 8012726:	bf08      	it	eq
 8012728:	68ec      	ldreq	r4, [r5, #12]
 801272a:	e7ca      	b.n	80126c2 <__swbuf_r+0x1a>
 801272c:	4621      	mov	r1, r4
 801272e:	4628      	mov	r0, r5
 8012730:	f000 f81a 	bl	8012768 <__swsetup_r>
 8012734:	2800      	cmp	r0, #0
 8012736:	d0cb      	beq.n	80126d0 <__swbuf_r+0x28>
 8012738:	f04f 37ff 	mov.w	r7, #4294967295
 801273c:	e7ea      	b.n	8012714 <__swbuf_r+0x6c>
 801273e:	bf00      	nop
 8012740:	080158ac 	.word	0x080158ac
 8012744:	080158cc 	.word	0x080158cc
 8012748:	0801588c 	.word	0x0801588c

0801274c <__ascii_wctomb>:
 801274c:	b149      	cbz	r1, 8012762 <__ascii_wctomb+0x16>
 801274e:	2aff      	cmp	r2, #255	; 0xff
 8012750:	bf85      	ittet	hi
 8012752:	238a      	movhi	r3, #138	; 0x8a
 8012754:	6003      	strhi	r3, [r0, #0]
 8012756:	700a      	strbls	r2, [r1, #0]
 8012758:	f04f 30ff 	movhi.w	r0, #4294967295
 801275c:	bf98      	it	ls
 801275e:	2001      	movls	r0, #1
 8012760:	4770      	bx	lr
 8012762:	4608      	mov	r0, r1
 8012764:	4770      	bx	lr
	...

08012768 <__swsetup_r>:
 8012768:	4b32      	ldr	r3, [pc, #200]	; (8012834 <__swsetup_r+0xcc>)
 801276a:	b570      	push	{r4, r5, r6, lr}
 801276c:	681d      	ldr	r5, [r3, #0]
 801276e:	4606      	mov	r6, r0
 8012770:	460c      	mov	r4, r1
 8012772:	b125      	cbz	r5, 801277e <__swsetup_r+0x16>
 8012774:	69ab      	ldr	r3, [r5, #24]
 8012776:	b913      	cbnz	r3, 801277e <__swsetup_r+0x16>
 8012778:	4628      	mov	r0, r5
 801277a:	f000 f985 	bl	8012a88 <__sinit>
 801277e:	4b2e      	ldr	r3, [pc, #184]	; (8012838 <__swsetup_r+0xd0>)
 8012780:	429c      	cmp	r4, r3
 8012782:	d10f      	bne.n	80127a4 <__swsetup_r+0x3c>
 8012784:	686c      	ldr	r4, [r5, #4]
 8012786:	89a3      	ldrh	r3, [r4, #12]
 8012788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801278c:	0719      	lsls	r1, r3, #28
 801278e:	d42c      	bmi.n	80127ea <__swsetup_r+0x82>
 8012790:	06dd      	lsls	r5, r3, #27
 8012792:	d411      	bmi.n	80127b8 <__swsetup_r+0x50>
 8012794:	2309      	movs	r3, #9
 8012796:	6033      	str	r3, [r6, #0]
 8012798:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801279c:	81a3      	strh	r3, [r4, #12]
 801279e:	f04f 30ff 	mov.w	r0, #4294967295
 80127a2:	e03e      	b.n	8012822 <__swsetup_r+0xba>
 80127a4:	4b25      	ldr	r3, [pc, #148]	; (801283c <__swsetup_r+0xd4>)
 80127a6:	429c      	cmp	r4, r3
 80127a8:	d101      	bne.n	80127ae <__swsetup_r+0x46>
 80127aa:	68ac      	ldr	r4, [r5, #8]
 80127ac:	e7eb      	b.n	8012786 <__swsetup_r+0x1e>
 80127ae:	4b24      	ldr	r3, [pc, #144]	; (8012840 <__swsetup_r+0xd8>)
 80127b0:	429c      	cmp	r4, r3
 80127b2:	bf08      	it	eq
 80127b4:	68ec      	ldreq	r4, [r5, #12]
 80127b6:	e7e6      	b.n	8012786 <__swsetup_r+0x1e>
 80127b8:	0758      	lsls	r0, r3, #29
 80127ba:	d512      	bpl.n	80127e2 <__swsetup_r+0x7a>
 80127bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80127be:	b141      	cbz	r1, 80127d2 <__swsetup_r+0x6a>
 80127c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80127c4:	4299      	cmp	r1, r3
 80127c6:	d002      	beq.n	80127ce <__swsetup_r+0x66>
 80127c8:	4630      	mov	r0, r6
 80127ca:	f7ff fb31 	bl	8011e30 <_free_r>
 80127ce:	2300      	movs	r3, #0
 80127d0:	6363      	str	r3, [r4, #52]	; 0x34
 80127d2:	89a3      	ldrh	r3, [r4, #12]
 80127d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80127d8:	81a3      	strh	r3, [r4, #12]
 80127da:	2300      	movs	r3, #0
 80127dc:	6063      	str	r3, [r4, #4]
 80127de:	6923      	ldr	r3, [r4, #16]
 80127e0:	6023      	str	r3, [r4, #0]
 80127e2:	89a3      	ldrh	r3, [r4, #12]
 80127e4:	f043 0308 	orr.w	r3, r3, #8
 80127e8:	81a3      	strh	r3, [r4, #12]
 80127ea:	6923      	ldr	r3, [r4, #16]
 80127ec:	b94b      	cbnz	r3, 8012802 <__swsetup_r+0x9a>
 80127ee:	89a3      	ldrh	r3, [r4, #12]
 80127f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80127f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127f8:	d003      	beq.n	8012802 <__swsetup_r+0x9a>
 80127fa:	4621      	mov	r1, r4
 80127fc:	4630      	mov	r0, r6
 80127fe:	f000 fa09 	bl	8012c14 <__smakebuf_r>
 8012802:	89a0      	ldrh	r0, [r4, #12]
 8012804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012808:	f010 0301 	ands.w	r3, r0, #1
 801280c:	d00a      	beq.n	8012824 <__swsetup_r+0xbc>
 801280e:	2300      	movs	r3, #0
 8012810:	60a3      	str	r3, [r4, #8]
 8012812:	6963      	ldr	r3, [r4, #20]
 8012814:	425b      	negs	r3, r3
 8012816:	61a3      	str	r3, [r4, #24]
 8012818:	6923      	ldr	r3, [r4, #16]
 801281a:	b943      	cbnz	r3, 801282e <__swsetup_r+0xc6>
 801281c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012820:	d1ba      	bne.n	8012798 <__swsetup_r+0x30>
 8012822:	bd70      	pop	{r4, r5, r6, pc}
 8012824:	0781      	lsls	r1, r0, #30
 8012826:	bf58      	it	pl
 8012828:	6963      	ldrpl	r3, [r4, #20]
 801282a:	60a3      	str	r3, [r4, #8]
 801282c:	e7f4      	b.n	8012818 <__swsetup_r+0xb0>
 801282e:	2000      	movs	r0, #0
 8012830:	e7f7      	b.n	8012822 <__swsetup_r+0xba>
 8012832:	bf00      	nop
 8012834:	2000001c 	.word	0x2000001c
 8012838:	080158ac 	.word	0x080158ac
 801283c:	080158cc 	.word	0x080158cc
 8012840:	0801588c 	.word	0x0801588c

08012844 <abort>:
 8012844:	b508      	push	{r3, lr}
 8012846:	2006      	movs	r0, #6
 8012848:	f000 fa54 	bl	8012cf4 <raise>
 801284c:	2001      	movs	r0, #1
 801284e:	f7f1 fcf7 	bl	8004240 <_exit>
	...

08012854 <__sflush_r>:
 8012854:	898a      	ldrh	r2, [r1, #12]
 8012856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801285a:	4605      	mov	r5, r0
 801285c:	0710      	lsls	r0, r2, #28
 801285e:	460c      	mov	r4, r1
 8012860:	d458      	bmi.n	8012914 <__sflush_r+0xc0>
 8012862:	684b      	ldr	r3, [r1, #4]
 8012864:	2b00      	cmp	r3, #0
 8012866:	dc05      	bgt.n	8012874 <__sflush_r+0x20>
 8012868:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801286a:	2b00      	cmp	r3, #0
 801286c:	dc02      	bgt.n	8012874 <__sflush_r+0x20>
 801286e:	2000      	movs	r0, #0
 8012870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012876:	2e00      	cmp	r6, #0
 8012878:	d0f9      	beq.n	801286e <__sflush_r+0x1a>
 801287a:	2300      	movs	r3, #0
 801287c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012880:	682f      	ldr	r7, [r5, #0]
 8012882:	602b      	str	r3, [r5, #0]
 8012884:	d032      	beq.n	80128ec <__sflush_r+0x98>
 8012886:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012888:	89a3      	ldrh	r3, [r4, #12]
 801288a:	075a      	lsls	r2, r3, #29
 801288c:	d505      	bpl.n	801289a <__sflush_r+0x46>
 801288e:	6863      	ldr	r3, [r4, #4]
 8012890:	1ac0      	subs	r0, r0, r3
 8012892:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012894:	b10b      	cbz	r3, 801289a <__sflush_r+0x46>
 8012896:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012898:	1ac0      	subs	r0, r0, r3
 801289a:	2300      	movs	r3, #0
 801289c:	4602      	mov	r2, r0
 801289e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128a0:	6a21      	ldr	r1, [r4, #32]
 80128a2:	4628      	mov	r0, r5
 80128a4:	47b0      	blx	r6
 80128a6:	1c43      	adds	r3, r0, #1
 80128a8:	89a3      	ldrh	r3, [r4, #12]
 80128aa:	d106      	bne.n	80128ba <__sflush_r+0x66>
 80128ac:	6829      	ldr	r1, [r5, #0]
 80128ae:	291d      	cmp	r1, #29
 80128b0:	d82c      	bhi.n	801290c <__sflush_r+0xb8>
 80128b2:	4a2a      	ldr	r2, [pc, #168]	; (801295c <__sflush_r+0x108>)
 80128b4:	40ca      	lsrs	r2, r1
 80128b6:	07d6      	lsls	r6, r2, #31
 80128b8:	d528      	bpl.n	801290c <__sflush_r+0xb8>
 80128ba:	2200      	movs	r2, #0
 80128bc:	6062      	str	r2, [r4, #4]
 80128be:	04d9      	lsls	r1, r3, #19
 80128c0:	6922      	ldr	r2, [r4, #16]
 80128c2:	6022      	str	r2, [r4, #0]
 80128c4:	d504      	bpl.n	80128d0 <__sflush_r+0x7c>
 80128c6:	1c42      	adds	r2, r0, #1
 80128c8:	d101      	bne.n	80128ce <__sflush_r+0x7a>
 80128ca:	682b      	ldr	r3, [r5, #0]
 80128cc:	b903      	cbnz	r3, 80128d0 <__sflush_r+0x7c>
 80128ce:	6560      	str	r0, [r4, #84]	; 0x54
 80128d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80128d2:	602f      	str	r7, [r5, #0]
 80128d4:	2900      	cmp	r1, #0
 80128d6:	d0ca      	beq.n	801286e <__sflush_r+0x1a>
 80128d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80128dc:	4299      	cmp	r1, r3
 80128de:	d002      	beq.n	80128e6 <__sflush_r+0x92>
 80128e0:	4628      	mov	r0, r5
 80128e2:	f7ff faa5 	bl	8011e30 <_free_r>
 80128e6:	2000      	movs	r0, #0
 80128e8:	6360      	str	r0, [r4, #52]	; 0x34
 80128ea:	e7c1      	b.n	8012870 <__sflush_r+0x1c>
 80128ec:	6a21      	ldr	r1, [r4, #32]
 80128ee:	2301      	movs	r3, #1
 80128f0:	4628      	mov	r0, r5
 80128f2:	47b0      	blx	r6
 80128f4:	1c41      	adds	r1, r0, #1
 80128f6:	d1c7      	bne.n	8012888 <__sflush_r+0x34>
 80128f8:	682b      	ldr	r3, [r5, #0]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d0c4      	beq.n	8012888 <__sflush_r+0x34>
 80128fe:	2b1d      	cmp	r3, #29
 8012900:	d001      	beq.n	8012906 <__sflush_r+0xb2>
 8012902:	2b16      	cmp	r3, #22
 8012904:	d101      	bne.n	801290a <__sflush_r+0xb6>
 8012906:	602f      	str	r7, [r5, #0]
 8012908:	e7b1      	b.n	801286e <__sflush_r+0x1a>
 801290a:	89a3      	ldrh	r3, [r4, #12]
 801290c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012910:	81a3      	strh	r3, [r4, #12]
 8012912:	e7ad      	b.n	8012870 <__sflush_r+0x1c>
 8012914:	690f      	ldr	r7, [r1, #16]
 8012916:	2f00      	cmp	r7, #0
 8012918:	d0a9      	beq.n	801286e <__sflush_r+0x1a>
 801291a:	0793      	lsls	r3, r2, #30
 801291c:	680e      	ldr	r6, [r1, #0]
 801291e:	bf08      	it	eq
 8012920:	694b      	ldreq	r3, [r1, #20]
 8012922:	600f      	str	r7, [r1, #0]
 8012924:	bf18      	it	ne
 8012926:	2300      	movne	r3, #0
 8012928:	eba6 0807 	sub.w	r8, r6, r7
 801292c:	608b      	str	r3, [r1, #8]
 801292e:	f1b8 0f00 	cmp.w	r8, #0
 8012932:	dd9c      	ble.n	801286e <__sflush_r+0x1a>
 8012934:	6a21      	ldr	r1, [r4, #32]
 8012936:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012938:	4643      	mov	r3, r8
 801293a:	463a      	mov	r2, r7
 801293c:	4628      	mov	r0, r5
 801293e:	47b0      	blx	r6
 8012940:	2800      	cmp	r0, #0
 8012942:	dc06      	bgt.n	8012952 <__sflush_r+0xfe>
 8012944:	89a3      	ldrh	r3, [r4, #12]
 8012946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801294a:	81a3      	strh	r3, [r4, #12]
 801294c:	f04f 30ff 	mov.w	r0, #4294967295
 8012950:	e78e      	b.n	8012870 <__sflush_r+0x1c>
 8012952:	4407      	add	r7, r0
 8012954:	eba8 0800 	sub.w	r8, r8, r0
 8012958:	e7e9      	b.n	801292e <__sflush_r+0xda>
 801295a:	bf00      	nop
 801295c:	20400001 	.word	0x20400001

08012960 <_fflush_r>:
 8012960:	b538      	push	{r3, r4, r5, lr}
 8012962:	690b      	ldr	r3, [r1, #16]
 8012964:	4605      	mov	r5, r0
 8012966:	460c      	mov	r4, r1
 8012968:	b913      	cbnz	r3, 8012970 <_fflush_r+0x10>
 801296a:	2500      	movs	r5, #0
 801296c:	4628      	mov	r0, r5
 801296e:	bd38      	pop	{r3, r4, r5, pc}
 8012970:	b118      	cbz	r0, 801297a <_fflush_r+0x1a>
 8012972:	6983      	ldr	r3, [r0, #24]
 8012974:	b90b      	cbnz	r3, 801297a <_fflush_r+0x1a>
 8012976:	f000 f887 	bl	8012a88 <__sinit>
 801297a:	4b14      	ldr	r3, [pc, #80]	; (80129cc <_fflush_r+0x6c>)
 801297c:	429c      	cmp	r4, r3
 801297e:	d11b      	bne.n	80129b8 <_fflush_r+0x58>
 8012980:	686c      	ldr	r4, [r5, #4]
 8012982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d0ef      	beq.n	801296a <_fflush_r+0xa>
 801298a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801298c:	07d0      	lsls	r0, r2, #31
 801298e:	d404      	bmi.n	801299a <_fflush_r+0x3a>
 8012990:	0599      	lsls	r1, r3, #22
 8012992:	d402      	bmi.n	801299a <_fflush_r+0x3a>
 8012994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012996:	f000 f915 	bl	8012bc4 <__retarget_lock_acquire_recursive>
 801299a:	4628      	mov	r0, r5
 801299c:	4621      	mov	r1, r4
 801299e:	f7ff ff59 	bl	8012854 <__sflush_r>
 80129a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129a4:	07da      	lsls	r2, r3, #31
 80129a6:	4605      	mov	r5, r0
 80129a8:	d4e0      	bmi.n	801296c <_fflush_r+0xc>
 80129aa:	89a3      	ldrh	r3, [r4, #12]
 80129ac:	059b      	lsls	r3, r3, #22
 80129ae:	d4dd      	bmi.n	801296c <_fflush_r+0xc>
 80129b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129b2:	f000 f908 	bl	8012bc6 <__retarget_lock_release_recursive>
 80129b6:	e7d9      	b.n	801296c <_fflush_r+0xc>
 80129b8:	4b05      	ldr	r3, [pc, #20]	; (80129d0 <_fflush_r+0x70>)
 80129ba:	429c      	cmp	r4, r3
 80129bc:	d101      	bne.n	80129c2 <_fflush_r+0x62>
 80129be:	68ac      	ldr	r4, [r5, #8]
 80129c0:	e7df      	b.n	8012982 <_fflush_r+0x22>
 80129c2:	4b04      	ldr	r3, [pc, #16]	; (80129d4 <_fflush_r+0x74>)
 80129c4:	429c      	cmp	r4, r3
 80129c6:	bf08      	it	eq
 80129c8:	68ec      	ldreq	r4, [r5, #12]
 80129ca:	e7da      	b.n	8012982 <_fflush_r+0x22>
 80129cc:	080158ac 	.word	0x080158ac
 80129d0:	080158cc 	.word	0x080158cc
 80129d4:	0801588c 	.word	0x0801588c

080129d8 <std>:
 80129d8:	2300      	movs	r3, #0
 80129da:	b510      	push	{r4, lr}
 80129dc:	4604      	mov	r4, r0
 80129de:	e9c0 3300 	strd	r3, r3, [r0]
 80129e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80129e6:	6083      	str	r3, [r0, #8]
 80129e8:	8181      	strh	r1, [r0, #12]
 80129ea:	6643      	str	r3, [r0, #100]	; 0x64
 80129ec:	81c2      	strh	r2, [r0, #14]
 80129ee:	6183      	str	r3, [r0, #24]
 80129f0:	4619      	mov	r1, r3
 80129f2:	2208      	movs	r2, #8
 80129f4:	305c      	adds	r0, #92	; 0x5c
 80129f6:	f7fd fb69 	bl	80100cc <memset>
 80129fa:	4b05      	ldr	r3, [pc, #20]	; (8012a10 <std+0x38>)
 80129fc:	6263      	str	r3, [r4, #36]	; 0x24
 80129fe:	4b05      	ldr	r3, [pc, #20]	; (8012a14 <std+0x3c>)
 8012a00:	62a3      	str	r3, [r4, #40]	; 0x28
 8012a02:	4b05      	ldr	r3, [pc, #20]	; (8012a18 <std+0x40>)
 8012a04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012a06:	4b05      	ldr	r3, [pc, #20]	; (8012a1c <std+0x44>)
 8012a08:	6224      	str	r4, [r4, #32]
 8012a0a:	6323      	str	r3, [r4, #48]	; 0x30
 8012a0c:	bd10      	pop	{r4, pc}
 8012a0e:	bf00      	nop
 8012a10:	08012d2d 	.word	0x08012d2d
 8012a14:	08012d4f 	.word	0x08012d4f
 8012a18:	08012d87 	.word	0x08012d87
 8012a1c:	08012dab 	.word	0x08012dab

08012a20 <_cleanup_r>:
 8012a20:	4901      	ldr	r1, [pc, #4]	; (8012a28 <_cleanup_r+0x8>)
 8012a22:	f000 b8af 	b.w	8012b84 <_fwalk_reent>
 8012a26:	bf00      	nop
 8012a28:	08012961 	.word	0x08012961

08012a2c <__sfmoreglue>:
 8012a2c:	b570      	push	{r4, r5, r6, lr}
 8012a2e:	2268      	movs	r2, #104	; 0x68
 8012a30:	1e4d      	subs	r5, r1, #1
 8012a32:	4355      	muls	r5, r2
 8012a34:	460e      	mov	r6, r1
 8012a36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012a3a:	f7ff fa65 	bl	8011f08 <_malloc_r>
 8012a3e:	4604      	mov	r4, r0
 8012a40:	b140      	cbz	r0, 8012a54 <__sfmoreglue+0x28>
 8012a42:	2100      	movs	r1, #0
 8012a44:	e9c0 1600 	strd	r1, r6, [r0]
 8012a48:	300c      	adds	r0, #12
 8012a4a:	60a0      	str	r0, [r4, #8]
 8012a4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012a50:	f7fd fb3c 	bl	80100cc <memset>
 8012a54:	4620      	mov	r0, r4
 8012a56:	bd70      	pop	{r4, r5, r6, pc}

08012a58 <__sfp_lock_acquire>:
 8012a58:	4801      	ldr	r0, [pc, #4]	; (8012a60 <__sfp_lock_acquire+0x8>)
 8012a5a:	f000 b8b3 	b.w	8012bc4 <__retarget_lock_acquire_recursive>
 8012a5e:	bf00      	nop
 8012a60:	200068c5 	.word	0x200068c5

08012a64 <__sfp_lock_release>:
 8012a64:	4801      	ldr	r0, [pc, #4]	; (8012a6c <__sfp_lock_release+0x8>)
 8012a66:	f000 b8ae 	b.w	8012bc6 <__retarget_lock_release_recursive>
 8012a6a:	bf00      	nop
 8012a6c:	200068c5 	.word	0x200068c5

08012a70 <__sinit_lock_acquire>:
 8012a70:	4801      	ldr	r0, [pc, #4]	; (8012a78 <__sinit_lock_acquire+0x8>)
 8012a72:	f000 b8a7 	b.w	8012bc4 <__retarget_lock_acquire_recursive>
 8012a76:	bf00      	nop
 8012a78:	200068c6 	.word	0x200068c6

08012a7c <__sinit_lock_release>:
 8012a7c:	4801      	ldr	r0, [pc, #4]	; (8012a84 <__sinit_lock_release+0x8>)
 8012a7e:	f000 b8a2 	b.w	8012bc6 <__retarget_lock_release_recursive>
 8012a82:	bf00      	nop
 8012a84:	200068c6 	.word	0x200068c6

08012a88 <__sinit>:
 8012a88:	b510      	push	{r4, lr}
 8012a8a:	4604      	mov	r4, r0
 8012a8c:	f7ff fff0 	bl	8012a70 <__sinit_lock_acquire>
 8012a90:	69a3      	ldr	r3, [r4, #24]
 8012a92:	b11b      	cbz	r3, 8012a9c <__sinit+0x14>
 8012a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a98:	f7ff bff0 	b.w	8012a7c <__sinit_lock_release>
 8012a9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012aa0:	6523      	str	r3, [r4, #80]	; 0x50
 8012aa2:	4b13      	ldr	r3, [pc, #76]	; (8012af0 <__sinit+0x68>)
 8012aa4:	4a13      	ldr	r2, [pc, #76]	; (8012af4 <__sinit+0x6c>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8012aaa:	42a3      	cmp	r3, r4
 8012aac:	bf04      	itt	eq
 8012aae:	2301      	moveq	r3, #1
 8012ab0:	61a3      	streq	r3, [r4, #24]
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	f000 f820 	bl	8012af8 <__sfp>
 8012ab8:	6060      	str	r0, [r4, #4]
 8012aba:	4620      	mov	r0, r4
 8012abc:	f000 f81c 	bl	8012af8 <__sfp>
 8012ac0:	60a0      	str	r0, [r4, #8]
 8012ac2:	4620      	mov	r0, r4
 8012ac4:	f000 f818 	bl	8012af8 <__sfp>
 8012ac8:	2200      	movs	r2, #0
 8012aca:	60e0      	str	r0, [r4, #12]
 8012acc:	2104      	movs	r1, #4
 8012ace:	6860      	ldr	r0, [r4, #4]
 8012ad0:	f7ff ff82 	bl	80129d8 <std>
 8012ad4:	68a0      	ldr	r0, [r4, #8]
 8012ad6:	2201      	movs	r2, #1
 8012ad8:	2109      	movs	r1, #9
 8012ada:	f7ff ff7d 	bl	80129d8 <std>
 8012ade:	68e0      	ldr	r0, [r4, #12]
 8012ae0:	2202      	movs	r2, #2
 8012ae2:	2112      	movs	r1, #18
 8012ae4:	f7ff ff78 	bl	80129d8 <std>
 8012ae8:	2301      	movs	r3, #1
 8012aea:	61a3      	str	r3, [r4, #24]
 8012aec:	e7d2      	b.n	8012a94 <__sinit+0xc>
 8012aee:	bf00      	nop
 8012af0:	08015510 	.word	0x08015510
 8012af4:	08012a21 	.word	0x08012a21

08012af8 <__sfp>:
 8012af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012afa:	4607      	mov	r7, r0
 8012afc:	f7ff ffac 	bl	8012a58 <__sfp_lock_acquire>
 8012b00:	4b1e      	ldr	r3, [pc, #120]	; (8012b7c <__sfp+0x84>)
 8012b02:	681e      	ldr	r6, [r3, #0]
 8012b04:	69b3      	ldr	r3, [r6, #24]
 8012b06:	b913      	cbnz	r3, 8012b0e <__sfp+0x16>
 8012b08:	4630      	mov	r0, r6
 8012b0a:	f7ff ffbd 	bl	8012a88 <__sinit>
 8012b0e:	3648      	adds	r6, #72	; 0x48
 8012b10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012b14:	3b01      	subs	r3, #1
 8012b16:	d503      	bpl.n	8012b20 <__sfp+0x28>
 8012b18:	6833      	ldr	r3, [r6, #0]
 8012b1a:	b30b      	cbz	r3, 8012b60 <__sfp+0x68>
 8012b1c:	6836      	ldr	r6, [r6, #0]
 8012b1e:	e7f7      	b.n	8012b10 <__sfp+0x18>
 8012b20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012b24:	b9d5      	cbnz	r5, 8012b5c <__sfp+0x64>
 8012b26:	4b16      	ldr	r3, [pc, #88]	; (8012b80 <__sfp+0x88>)
 8012b28:	60e3      	str	r3, [r4, #12]
 8012b2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012b2e:	6665      	str	r5, [r4, #100]	; 0x64
 8012b30:	f000 f847 	bl	8012bc2 <__retarget_lock_init_recursive>
 8012b34:	f7ff ff96 	bl	8012a64 <__sfp_lock_release>
 8012b38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012b3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012b40:	6025      	str	r5, [r4, #0]
 8012b42:	61a5      	str	r5, [r4, #24]
 8012b44:	2208      	movs	r2, #8
 8012b46:	4629      	mov	r1, r5
 8012b48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012b4c:	f7fd fabe 	bl	80100cc <memset>
 8012b50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012b54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012b58:	4620      	mov	r0, r4
 8012b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b5c:	3468      	adds	r4, #104	; 0x68
 8012b5e:	e7d9      	b.n	8012b14 <__sfp+0x1c>
 8012b60:	2104      	movs	r1, #4
 8012b62:	4638      	mov	r0, r7
 8012b64:	f7ff ff62 	bl	8012a2c <__sfmoreglue>
 8012b68:	4604      	mov	r4, r0
 8012b6a:	6030      	str	r0, [r6, #0]
 8012b6c:	2800      	cmp	r0, #0
 8012b6e:	d1d5      	bne.n	8012b1c <__sfp+0x24>
 8012b70:	f7ff ff78 	bl	8012a64 <__sfp_lock_release>
 8012b74:	230c      	movs	r3, #12
 8012b76:	603b      	str	r3, [r7, #0]
 8012b78:	e7ee      	b.n	8012b58 <__sfp+0x60>
 8012b7a:	bf00      	nop
 8012b7c:	08015510 	.word	0x08015510
 8012b80:	ffff0001 	.word	0xffff0001

08012b84 <_fwalk_reent>:
 8012b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b88:	4606      	mov	r6, r0
 8012b8a:	4688      	mov	r8, r1
 8012b8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012b90:	2700      	movs	r7, #0
 8012b92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012b96:	f1b9 0901 	subs.w	r9, r9, #1
 8012b9a:	d505      	bpl.n	8012ba8 <_fwalk_reent+0x24>
 8012b9c:	6824      	ldr	r4, [r4, #0]
 8012b9e:	2c00      	cmp	r4, #0
 8012ba0:	d1f7      	bne.n	8012b92 <_fwalk_reent+0xe>
 8012ba2:	4638      	mov	r0, r7
 8012ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ba8:	89ab      	ldrh	r3, [r5, #12]
 8012baa:	2b01      	cmp	r3, #1
 8012bac:	d907      	bls.n	8012bbe <_fwalk_reent+0x3a>
 8012bae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012bb2:	3301      	adds	r3, #1
 8012bb4:	d003      	beq.n	8012bbe <_fwalk_reent+0x3a>
 8012bb6:	4629      	mov	r1, r5
 8012bb8:	4630      	mov	r0, r6
 8012bba:	47c0      	blx	r8
 8012bbc:	4307      	orrs	r7, r0
 8012bbe:	3568      	adds	r5, #104	; 0x68
 8012bc0:	e7e9      	b.n	8012b96 <_fwalk_reent+0x12>

08012bc2 <__retarget_lock_init_recursive>:
 8012bc2:	4770      	bx	lr

08012bc4 <__retarget_lock_acquire_recursive>:
 8012bc4:	4770      	bx	lr

08012bc6 <__retarget_lock_release_recursive>:
 8012bc6:	4770      	bx	lr

08012bc8 <__swhatbuf_r>:
 8012bc8:	b570      	push	{r4, r5, r6, lr}
 8012bca:	460e      	mov	r6, r1
 8012bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bd0:	2900      	cmp	r1, #0
 8012bd2:	b096      	sub	sp, #88	; 0x58
 8012bd4:	4614      	mov	r4, r2
 8012bd6:	461d      	mov	r5, r3
 8012bd8:	da08      	bge.n	8012bec <__swhatbuf_r+0x24>
 8012bda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012bde:	2200      	movs	r2, #0
 8012be0:	602a      	str	r2, [r5, #0]
 8012be2:	061a      	lsls	r2, r3, #24
 8012be4:	d410      	bmi.n	8012c08 <__swhatbuf_r+0x40>
 8012be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012bea:	e00e      	b.n	8012c0a <__swhatbuf_r+0x42>
 8012bec:	466a      	mov	r2, sp
 8012bee:	f000 f903 	bl	8012df8 <_fstat_r>
 8012bf2:	2800      	cmp	r0, #0
 8012bf4:	dbf1      	blt.n	8012bda <__swhatbuf_r+0x12>
 8012bf6:	9a01      	ldr	r2, [sp, #4]
 8012bf8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012bfc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012c00:	425a      	negs	r2, r3
 8012c02:	415a      	adcs	r2, r3
 8012c04:	602a      	str	r2, [r5, #0]
 8012c06:	e7ee      	b.n	8012be6 <__swhatbuf_r+0x1e>
 8012c08:	2340      	movs	r3, #64	; 0x40
 8012c0a:	2000      	movs	r0, #0
 8012c0c:	6023      	str	r3, [r4, #0]
 8012c0e:	b016      	add	sp, #88	; 0x58
 8012c10:	bd70      	pop	{r4, r5, r6, pc}
	...

08012c14 <__smakebuf_r>:
 8012c14:	898b      	ldrh	r3, [r1, #12]
 8012c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012c18:	079d      	lsls	r5, r3, #30
 8012c1a:	4606      	mov	r6, r0
 8012c1c:	460c      	mov	r4, r1
 8012c1e:	d507      	bpl.n	8012c30 <__smakebuf_r+0x1c>
 8012c20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012c24:	6023      	str	r3, [r4, #0]
 8012c26:	6123      	str	r3, [r4, #16]
 8012c28:	2301      	movs	r3, #1
 8012c2a:	6163      	str	r3, [r4, #20]
 8012c2c:	b002      	add	sp, #8
 8012c2e:	bd70      	pop	{r4, r5, r6, pc}
 8012c30:	ab01      	add	r3, sp, #4
 8012c32:	466a      	mov	r2, sp
 8012c34:	f7ff ffc8 	bl	8012bc8 <__swhatbuf_r>
 8012c38:	9900      	ldr	r1, [sp, #0]
 8012c3a:	4605      	mov	r5, r0
 8012c3c:	4630      	mov	r0, r6
 8012c3e:	f7ff f963 	bl	8011f08 <_malloc_r>
 8012c42:	b948      	cbnz	r0, 8012c58 <__smakebuf_r+0x44>
 8012c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c48:	059a      	lsls	r2, r3, #22
 8012c4a:	d4ef      	bmi.n	8012c2c <__smakebuf_r+0x18>
 8012c4c:	f023 0303 	bic.w	r3, r3, #3
 8012c50:	f043 0302 	orr.w	r3, r3, #2
 8012c54:	81a3      	strh	r3, [r4, #12]
 8012c56:	e7e3      	b.n	8012c20 <__smakebuf_r+0xc>
 8012c58:	4b0d      	ldr	r3, [pc, #52]	; (8012c90 <__smakebuf_r+0x7c>)
 8012c5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8012c5c:	89a3      	ldrh	r3, [r4, #12]
 8012c5e:	6020      	str	r0, [r4, #0]
 8012c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c64:	81a3      	strh	r3, [r4, #12]
 8012c66:	9b00      	ldr	r3, [sp, #0]
 8012c68:	6163      	str	r3, [r4, #20]
 8012c6a:	9b01      	ldr	r3, [sp, #4]
 8012c6c:	6120      	str	r0, [r4, #16]
 8012c6e:	b15b      	cbz	r3, 8012c88 <__smakebuf_r+0x74>
 8012c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c74:	4630      	mov	r0, r6
 8012c76:	f000 f8d1 	bl	8012e1c <_isatty_r>
 8012c7a:	b128      	cbz	r0, 8012c88 <__smakebuf_r+0x74>
 8012c7c:	89a3      	ldrh	r3, [r4, #12]
 8012c7e:	f023 0303 	bic.w	r3, r3, #3
 8012c82:	f043 0301 	orr.w	r3, r3, #1
 8012c86:	81a3      	strh	r3, [r4, #12]
 8012c88:	89a0      	ldrh	r0, [r4, #12]
 8012c8a:	4305      	orrs	r5, r0
 8012c8c:	81a5      	strh	r5, [r4, #12]
 8012c8e:	e7cd      	b.n	8012c2c <__smakebuf_r+0x18>
 8012c90:	08012a21 	.word	0x08012a21

08012c94 <_malloc_usable_size_r>:
 8012c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c98:	1f18      	subs	r0, r3, #4
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	bfbc      	itt	lt
 8012c9e:	580b      	ldrlt	r3, [r1, r0]
 8012ca0:	18c0      	addlt	r0, r0, r3
 8012ca2:	4770      	bx	lr

08012ca4 <_raise_r>:
 8012ca4:	291f      	cmp	r1, #31
 8012ca6:	b538      	push	{r3, r4, r5, lr}
 8012ca8:	4604      	mov	r4, r0
 8012caa:	460d      	mov	r5, r1
 8012cac:	d904      	bls.n	8012cb8 <_raise_r+0x14>
 8012cae:	2316      	movs	r3, #22
 8012cb0:	6003      	str	r3, [r0, #0]
 8012cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8012cb6:	bd38      	pop	{r3, r4, r5, pc}
 8012cb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012cba:	b112      	cbz	r2, 8012cc2 <_raise_r+0x1e>
 8012cbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012cc0:	b94b      	cbnz	r3, 8012cd6 <_raise_r+0x32>
 8012cc2:	4620      	mov	r0, r4
 8012cc4:	f000 f830 	bl	8012d28 <_getpid_r>
 8012cc8:	462a      	mov	r2, r5
 8012cca:	4601      	mov	r1, r0
 8012ccc:	4620      	mov	r0, r4
 8012cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cd2:	f000 b817 	b.w	8012d04 <_kill_r>
 8012cd6:	2b01      	cmp	r3, #1
 8012cd8:	d00a      	beq.n	8012cf0 <_raise_r+0x4c>
 8012cda:	1c59      	adds	r1, r3, #1
 8012cdc:	d103      	bne.n	8012ce6 <_raise_r+0x42>
 8012cde:	2316      	movs	r3, #22
 8012ce0:	6003      	str	r3, [r0, #0]
 8012ce2:	2001      	movs	r0, #1
 8012ce4:	e7e7      	b.n	8012cb6 <_raise_r+0x12>
 8012ce6:	2400      	movs	r4, #0
 8012ce8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012cec:	4628      	mov	r0, r5
 8012cee:	4798      	blx	r3
 8012cf0:	2000      	movs	r0, #0
 8012cf2:	e7e0      	b.n	8012cb6 <_raise_r+0x12>

08012cf4 <raise>:
 8012cf4:	4b02      	ldr	r3, [pc, #8]	; (8012d00 <raise+0xc>)
 8012cf6:	4601      	mov	r1, r0
 8012cf8:	6818      	ldr	r0, [r3, #0]
 8012cfa:	f7ff bfd3 	b.w	8012ca4 <_raise_r>
 8012cfe:	bf00      	nop
 8012d00:	2000001c 	.word	0x2000001c

08012d04 <_kill_r>:
 8012d04:	b538      	push	{r3, r4, r5, lr}
 8012d06:	4d07      	ldr	r5, [pc, #28]	; (8012d24 <_kill_r+0x20>)
 8012d08:	2300      	movs	r3, #0
 8012d0a:	4604      	mov	r4, r0
 8012d0c:	4608      	mov	r0, r1
 8012d0e:	4611      	mov	r1, r2
 8012d10:	602b      	str	r3, [r5, #0]
 8012d12:	f7f1 fa85 	bl	8004220 <_kill>
 8012d16:	1c43      	adds	r3, r0, #1
 8012d18:	d102      	bne.n	8012d20 <_kill_r+0x1c>
 8012d1a:	682b      	ldr	r3, [r5, #0]
 8012d1c:	b103      	cbz	r3, 8012d20 <_kill_r+0x1c>
 8012d1e:	6023      	str	r3, [r4, #0]
 8012d20:	bd38      	pop	{r3, r4, r5, pc}
 8012d22:	bf00      	nop
 8012d24:	200068c0 	.word	0x200068c0

08012d28 <_getpid_r>:
 8012d28:	f7f1 ba72 	b.w	8004210 <_getpid>

08012d2c <__sread>:
 8012d2c:	b510      	push	{r4, lr}
 8012d2e:	460c      	mov	r4, r1
 8012d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d34:	f000 f894 	bl	8012e60 <_read_r>
 8012d38:	2800      	cmp	r0, #0
 8012d3a:	bfab      	itete	ge
 8012d3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8012d40:	181b      	addge	r3, r3, r0
 8012d42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012d46:	bfac      	ite	ge
 8012d48:	6563      	strge	r3, [r4, #84]	; 0x54
 8012d4a:	81a3      	strhlt	r3, [r4, #12]
 8012d4c:	bd10      	pop	{r4, pc}

08012d4e <__swrite>:
 8012d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d52:	461f      	mov	r7, r3
 8012d54:	898b      	ldrh	r3, [r1, #12]
 8012d56:	05db      	lsls	r3, r3, #23
 8012d58:	4605      	mov	r5, r0
 8012d5a:	460c      	mov	r4, r1
 8012d5c:	4616      	mov	r6, r2
 8012d5e:	d505      	bpl.n	8012d6c <__swrite+0x1e>
 8012d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d64:	2302      	movs	r3, #2
 8012d66:	2200      	movs	r2, #0
 8012d68:	f000 f868 	bl	8012e3c <_lseek_r>
 8012d6c:	89a3      	ldrh	r3, [r4, #12]
 8012d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012d76:	81a3      	strh	r3, [r4, #12]
 8012d78:	4632      	mov	r2, r6
 8012d7a:	463b      	mov	r3, r7
 8012d7c:	4628      	mov	r0, r5
 8012d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d82:	f000 b817 	b.w	8012db4 <_write_r>

08012d86 <__sseek>:
 8012d86:	b510      	push	{r4, lr}
 8012d88:	460c      	mov	r4, r1
 8012d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d8e:	f000 f855 	bl	8012e3c <_lseek_r>
 8012d92:	1c43      	adds	r3, r0, #1
 8012d94:	89a3      	ldrh	r3, [r4, #12]
 8012d96:	bf15      	itete	ne
 8012d98:	6560      	strne	r0, [r4, #84]	; 0x54
 8012d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012da2:	81a3      	strheq	r3, [r4, #12]
 8012da4:	bf18      	it	ne
 8012da6:	81a3      	strhne	r3, [r4, #12]
 8012da8:	bd10      	pop	{r4, pc}

08012daa <__sclose>:
 8012daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dae:	f000 b813 	b.w	8012dd8 <_close_r>
	...

08012db4 <_write_r>:
 8012db4:	b538      	push	{r3, r4, r5, lr}
 8012db6:	4d07      	ldr	r5, [pc, #28]	; (8012dd4 <_write_r+0x20>)
 8012db8:	4604      	mov	r4, r0
 8012dba:	4608      	mov	r0, r1
 8012dbc:	4611      	mov	r1, r2
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	602a      	str	r2, [r5, #0]
 8012dc2:	461a      	mov	r2, r3
 8012dc4:	f7f1 fa63 	bl	800428e <_write>
 8012dc8:	1c43      	adds	r3, r0, #1
 8012dca:	d102      	bne.n	8012dd2 <_write_r+0x1e>
 8012dcc:	682b      	ldr	r3, [r5, #0]
 8012dce:	b103      	cbz	r3, 8012dd2 <_write_r+0x1e>
 8012dd0:	6023      	str	r3, [r4, #0]
 8012dd2:	bd38      	pop	{r3, r4, r5, pc}
 8012dd4:	200068c0 	.word	0x200068c0

08012dd8 <_close_r>:
 8012dd8:	b538      	push	{r3, r4, r5, lr}
 8012dda:	4d06      	ldr	r5, [pc, #24]	; (8012df4 <_close_r+0x1c>)
 8012ddc:	2300      	movs	r3, #0
 8012dde:	4604      	mov	r4, r0
 8012de0:	4608      	mov	r0, r1
 8012de2:	602b      	str	r3, [r5, #0]
 8012de4:	f7f1 fa6f 	bl	80042c6 <_close>
 8012de8:	1c43      	adds	r3, r0, #1
 8012dea:	d102      	bne.n	8012df2 <_close_r+0x1a>
 8012dec:	682b      	ldr	r3, [r5, #0]
 8012dee:	b103      	cbz	r3, 8012df2 <_close_r+0x1a>
 8012df0:	6023      	str	r3, [r4, #0]
 8012df2:	bd38      	pop	{r3, r4, r5, pc}
 8012df4:	200068c0 	.word	0x200068c0

08012df8 <_fstat_r>:
 8012df8:	b538      	push	{r3, r4, r5, lr}
 8012dfa:	4d07      	ldr	r5, [pc, #28]	; (8012e18 <_fstat_r+0x20>)
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	4604      	mov	r4, r0
 8012e00:	4608      	mov	r0, r1
 8012e02:	4611      	mov	r1, r2
 8012e04:	602b      	str	r3, [r5, #0]
 8012e06:	f7f1 fa6a 	bl	80042de <_fstat>
 8012e0a:	1c43      	adds	r3, r0, #1
 8012e0c:	d102      	bne.n	8012e14 <_fstat_r+0x1c>
 8012e0e:	682b      	ldr	r3, [r5, #0]
 8012e10:	b103      	cbz	r3, 8012e14 <_fstat_r+0x1c>
 8012e12:	6023      	str	r3, [r4, #0]
 8012e14:	bd38      	pop	{r3, r4, r5, pc}
 8012e16:	bf00      	nop
 8012e18:	200068c0 	.word	0x200068c0

08012e1c <_isatty_r>:
 8012e1c:	b538      	push	{r3, r4, r5, lr}
 8012e1e:	4d06      	ldr	r5, [pc, #24]	; (8012e38 <_isatty_r+0x1c>)
 8012e20:	2300      	movs	r3, #0
 8012e22:	4604      	mov	r4, r0
 8012e24:	4608      	mov	r0, r1
 8012e26:	602b      	str	r3, [r5, #0]
 8012e28:	f7f1 fa69 	bl	80042fe <_isatty>
 8012e2c:	1c43      	adds	r3, r0, #1
 8012e2e:	d102      	bne.n	8012e36 <_isatty_r+0x1a>
 8012e30:	682b      	ldr	r3, [r5, #0]
 8012e32:	b103      	cbz	r3, 8012e36 <_isatty_r+0x1a>
 8012e34:	6023      	str	r3, [r4, #0]
 8012e36:	bd38      	pop	{r3, r4, r5, pc}
 8012e38:	200068c0 	.word	0x200068c0

08012e3c <_lseek_r>:
 8012e3c:	b538      	push	{r3, r4, r5, lr}
 8012e3e:	4d07      	ldr	r5, [pc, #28]	; (8012e5c <_lseek_r+0x20>)
 8012e40:	4604      	mov	r4, r0
 8012e42:	4608      	mov	r0, r1
 8012e44:	4611      	mov	r1, r2
 8012e46:	2200      	movs	r2, #0
 8012e48:	602a      	str	r2, [r5, #0]
 8012e4a:	461a      	mov	r2, r3
 8012e4c:	f7f1 fa62 	bl	8004314 <_lseek>
 8012e50:	1c43      	adds	r3, r0, #1
 8012e52:	d102      	bne.n	8012e5a <_lseek_r+0x1e>
 8012e54:	682b      	ldr	r3, [r5, #0]
 8012e56:	b103      	cbz	r3, 8012e5a <_lseek_r+0x1e>
 8012e58:	6023      	str	r3, [r4, #0]
 8012e5a:	bd38      	pop	{r3, r4, r5, pc}
 8012e5c:	200068c0 	.word	0x200068c0

08012e60 <_read_r>:
 8012e60:	b538      	push	{r3, r4, r5, lr}
 8012e62:	4d07      	ldr	r5, [pc, #28]	; (8012e80 <_read_r+0x20>)
 8012e64:	4604      	mov	r4, r0
 8012e66:	4608      	mov	r0, r1
 8012e68:	4611      	mov	r1, r2
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	602a      	str	r2, [r5, #0]
 8012e6e:	461a      	mov	r2, r3
 8012e70:	f7f1 f9f0 	bl	8004254 <_read>
 8012e74:	1c43      	adds	r3, r0, #1
 8012e76:	d102      	bne.n	8012e7e <_read_r+0x1e>
 8012e78:	682b      	ldr	r3, [r5, #0]
 8012e7a:	b103      	cbz	r3, 8012e7e <_read_r+0x1e>
 8012e7c:	6023      	str	r3, [r4, #0]
 8012e7e:	bd38      	pop	{r3, r4, r5, pc}
 8012e80:	200068c0 	.word	0x200068c0

08012e84 <sinf>:
 8012e84:	ee10 3a10 	vmov	r3, s0
 8012e88:	b507      	push	{r0, r1, r2, lr}
 8012e8a:	4a1f      	ldr	r2, [pc, #124]	; (8012f08 <sinf+0x84>)
 8012e8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012e90:	4293      	cmp	r3, r2
 8012e92:	dc07      	bgt.n	8012ea4 <sinf+0x20>
 8012e94:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8012f0c <sinf+0x88>
 8012e98:	2000      	movs	r0, #0
 8012e9a:	b003      	add	sp, #12
 8012e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ea0:	f001 bf78 	b.w	8014d94 <__kernel_sinf>
 8012ea4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012ea8:	db04      	blt.n	8012eb4 <sinf+0x30>
 8012eaa:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012eae:	b003      	add	sp, #12
 8012eb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8012eb4:	4668      	mov	r0, sp
 8012eb6:	f001 fb57 	bl	8014568 <__ieee754_rem_pio2f>
 8012eba:	f000 0003 	and.w	r0, r0, #3
 8012ebe:	2801      	cmp	r0, #1
 8012ec0:	d00a      	beq.n	8012ed8 <sinf+0x54>
 8012ec2:	2802      	cmp	r0, #2
 8012ec4:	d00f      	beq.n	8012ee6 <sinf+0x62>
 8012ec6:	b9c0      	cbnz	r0, 8012efa <sinf+0x76>
 8012ec8:	eddd 0a01 	vldr	s1, [sp, #4]
 8012ecc:	ed9d 0a00 	vldr	s0, [sp]
 8012ed0:	2001      	movs	r0, #1
 8012ed2:	f001 ff5f 	bl	8014d94 <__kernel_sinf>
 8012ed6:	e7ea      	b.n	8012eae <sinf+0x2a>
 8012ed8:	eddd 0a01 	vldr	s1, [sp, #4]
 8012edc:	ed9d 0a00 	vldr	s0, [sp]
 8012ee0:	f001 fc82 	bl	80147e8 <__kernel_cosf>
 8012ee4:	e7e3      	b.n	8012eae <sinf+0x2a>
 8012ee6:	eddd 0a01 	vldr	s1, [sp, #4]
 8012eea:	ed9d 0a00 	vldr	s0, [sp]
 8012eee:	2001      	movs	r0, #1
 8012ef0:	f001 ff50 	bl	8014d94 <__kernel_sinf>
 8012ef4:	eeb1 0a40 	vneg.f32	s0, s0
 8012ef8:	e7d9      	b.n	8012eae <sinf+0x2a>
 8012efa:	eddd 0a01 	vldr	s1, [sp, #4]
 8012efe:	ed9d 0a00 	vldr	s0, [sp]
 8012f02:	f001 fc71 	bl	80147e8 <__kernel_cosf>
 8012f06:	e7f5      	b.n	8012ef4 <sinf+0x70>
 8012f08:	3f490fd8 	.word	0x3f490fd8
 8012f0c:	00000000 	.word	0x00000000

08012f10 <pow>:
 8012f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f12:	ed2d 8b02 	vpush	{d8}
 8012f16:	eeb0 8a40 	vmov.f32	s16, s0
 8012f1a:	eef0 8a60 	vmov.f32	s17, s1
 8012f1e:	ec55 4b11 	vmov	r4, r5, d1
 8012f22:	f000 f8ed 	bl	8013100 <__ieee754_pow>
 8012f26:	4622      	mov	r2, r4
 8012f28:	462b      	mov	r3, r5
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	4629      	mov	r1, r5
 8012f2e:	ec57 6b10 	vmov	r6, r7, d0
 8012f32:	f7ed fdfb 	bl	8000b2c <__aeabi_dcmpun>
 8012f36:	2800      	cmp	r0, #0
 8012f38:	d13b      	bne.n	8012fb2 <pow+0xa2>
 8012f3a:	ec51 0b18 	vmov	r0, r1, d8
 8012f3e:	2200      	movs	r2, #0
 8012f40:	2300      	movs	r3, #0
 8012f42:	f7ed fdc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8012f46:	b1b8      	cbz	r0, 8012f78 <pow+0x68>
 8012f48:	2200      	movs	r2, #0
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	4629      	mov	r1, r5
 8012f50:	f7ed fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 8012f54:	2800      	cmp	r0, #0
 8012f56:	d146      	bne.n	8012fe6 <pow+0xd6>
 8012f58:	ec45 4b10 	vmov	d0, r4, r5
 8012f5c:	f001 ffbd 	bl	8014eda <finite>
 8012f60:	b338      	cbz	r0, 8012fb2 <pow+0xa2>
 8012f62:	2200      	movs	r2, #0
 8012f64:	2300      	movs	r3, #0
 8012f66:	4620      	mov	r0, r4
 8012f68:	4629      	mov	r1, r5
 8012f6a:	f7ed fdb7 	bl	8000adc <__aeabi_dcmplt>
 8012f6e:	b300      	cbz	r0, 8012fb2 <pow+0xa2>
 8012f70:	f7fd f874 	bl	801005c <__errno>
 8012f74:	2322      	movs	r3, #34	; 0x22
 8012f76:	e01b      	b.n	8012fb0 <pow+0xa0>
 8012f78:	ec47 6b10 	vmov	d0, r6, r7
 8012f7c:	f001 ffad 	bl	8014eda <finite>
 8012f80:	b9e0      	cbnz	r0, 8012fbc <pow+0xac>
 8012f82:	eeb0 0a48 	vmov.f32	s0, s16
 8012f86:	eef0 0a68 	vmov.f32	s1, s17
 8012f8a:	f001 ffa6 	bl	8014eda <finite>
 8012f8e:	b1a8      	cbz	r0, 8012fbc <pow+0xac>
 8012f90:	ec45 4b10 	vmov	d0, r4, r5
 8012f94:	f001 ffa1 	bl	8014eda <finite>
 8012f98:	b180      	cbz	r0, 8012fbc <pow+0xac>
 8012f9a:	4632      	mov	r2, r6
 8012f9c:	463b      	mov	r3, r7
 8012f9e:	4630      	mov	r0, r6
 8012fa0:	4639      	mov	r1, r7
 8012fa2:	f7ed fdc3 	bl	8000b2c <__aeabi_dcmpun>
 8012fa6:	2800      	cmp	r0, #0
 8012fa8:	d0e2      	beq.n	8012f70 <pow+0x60>
 8012faa:	f7fd f857 	bl	801005c <__errno>
 8012fae:	2321      	movs	r3, #33	; 0x21
 8012fb0:	6003      	str	r3, [r0, #0]
 8012fb2:	ecbd 8b02 	vpop	{d8}
 8012fb6:	ec47 6b10 	vmov	d0, r6, r7
 8012fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	4630      	mov	r0, r6
 8012fc2:	4639      	mov	r1, r7
 8012fc4:	f7ed fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 8012fc8:	2800      	cmp	r0, #0
 8012fca:	d0f2      	beq.n	8012fb2 <pow+0xa2>
 8012fcc:	eeb0 0a48 	vmov.f32	s0, s16
 8012fd0:	eef0 0a68 	vmov.f32	s1, s17
 8012fd4:	f001 ff81 	bl	8014eda <finite>
 8012fd8:	2800      	cmp	r0, #0
 8012fda:	d0ea      	beq.n	8012fb2 <pow+0xa2>
 8012fdc:	ec45 4b10 	vmov	d0, r4, r5
 8012fe0:	f001 ff7b 	bl	8014eda <finite>
 8012fe4:	e7c3      	b.n	8012f6e <pow+0x5e>
 8012fe6:	4f01      	ldr	r7, [pc, #4]	; (8012fec <pow+0xdc>)
 8012fe8:	2600      	movs	r6, #0
 8012fea:	e7e2      	b.n	8012fb2 <pow+0xa2>
 8012fec:	3ff00000 	.word	0x3ff00000

08012ff0 <asinf>:
 8012ff0:	b508      	push	{r3, lr}
 8012ff2:	ed2d 8b02 	vpush	{d8}
 8012ff6:	eeb0 8a40 	vmov.f32	s16, s0
 8012ffa:	f000 fe61 	bl	8013cc0 <__ieee754_asinf>
 8012ffe:	eeb4 8a48 	vcmp.f32	s16, s16
 8013002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013006:	eef0 8a40 	vmov.f32	s17, s0
 801300a:	d615      	bvs.n	8013038 <asinf+0x48>
 801300c:	eeb0 0a48 	vmov.f32	s0, s16
 8013010:	f002 f8c8 	bl	80151a4 <fabsf>
 8013014:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013018:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801301c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013020:	dd0a      	ble.n	8013038 <asinf+0x48>
 8013022:	f7fd f81b 	bl	801005c <__errno>
 8013026:	ecbd 8b02 	vpop	{d8}
 801302a:	2321      	movs	r3, #33	; 0x21
 801302c:	6003      	str	r3, [r0, #0]
 801302e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013032:	4804      	ldr	r0, [pc, #16]	; (8013044 <asinf+0x54>)
 8013034:	f002 b90c 	b.w	8015250 <nanf>
 8013038:	eeb0 0a68 	vmov.f32	s0, s17
 801303c:	ecbd 8b02 	vpop	{d8}
 8013040:	bd08      	pop	{r3, pc}
 8013042:	bf00      	nop
 8013044:	08015780 	.word	0x08015780

08013048 <atan2f>:
 8013048:	f000 bf20 	b.w	8013e8c <__ieee754_atan2f>

0801304c <powf>:
 801304c:	b508      	push	{r3, lr}
 801304e:	ed2d 8b04 	vpush	{d8-d9}
 8013052:	eeb0 8a60 	vmov.f32	s16, s1
 8013056:	eeb0 9a40 	vmov.f32	s18, s0
 801305a:	f000 ffb7 	bl	8013fcc <__ieee754_powf>
 801305e:	eeb4 8a48 	vcmp.f32	s16, s16
 8013062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013066:	eef0 8a40 	vmov.f32	s17, s0
 801306a:	d63e      	bvs.n	80130ea <powf+0x9e>
 801306c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8013070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013074:	d112      	bne.n	801309c <powf+0x50>
 8013076:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801307a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801307e:	d039      	beq.n	80130f4 <powf+0xa8>
 8013080:	eeb0 0a48 	vmov.f32	s0, s16
 8013084:	f002 f895 	bl	80151b2 <finitef>
 8013088:	b378      	cbz	r0, 80130ea <powf+0x9e>
 801308a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801308e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013092:	d52a      	bpl.n	80130ea <powf+0x9e>
 8013094:	f7fc ffe2 	bl	801005c <__errno>
 8013098:	2322      	movs	r3, #34	; 0x22
 801309a:	e014      	b.n	80130c6 <powf+0x7a>
 801309c:	f002 f889 	bl	80151b2 <finitef>
 80130a0:	b998      	cbnz	r0, 80130ca <powf+0x7e>
 80130a2:	eeb0 0a49 	vmov.f32	s0, s18
 80130a6:	f002 f884 	bl	80151b2 <finitef>
 80130aa:	b170      	cbz	r0, 80130ca <powf+0x7e>
 80130ac:	eeb0 0a48 	vmov.f32	s0, s16
 80130b0:	f002 f87f 	bl	80151b2 <finitef>
 80130b4:	b148      	cbz	r0, 80130ca <powf+0x7e>
 80130b6:	eef4 8a68 	vcmp.f32	s17, s17
 80130ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130be:	d7e9      	bvc.n	8013094 <powf+0x48>
 80130c0:	f7fc ffcc 	bl	801005c <__errno>
 80130c4:	2321      	movs	r3, #33	; 0x21
 80130c6:	6003      	str	r3, [r0, #0]
 80130c8:	e00f      	b.n	80130ea <powf+0x9e>
 80130ca:	eef5 8a40 	vcmp.f32	s17, #0.0
 80130ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130d2:	d10a      	bne.n	80130ea <powf+0x9e>
 80130d4:	eeb0 0a49 	vmov.f32	s0, s18
 80130d8:	f002 f86b 	bl	80151b2 <finitef>
 80130dc:	b128      	cbz	r0, 80130ea <powf+0x9e>
 80130de:	eeb0 0a48 	vmov.f32	s0, s16
 80130e2:	f002 f866 	bl	80151b2 <finitef>
 80130e6:	2800      	cmp	r0, #0
 80130e8:	d1d4      	bne.n	8013094 <powf+0x48>
 80130ea:	eeb0 0a68 	vmov.f32	s0, s17
 80130ee:	ecbd 8b04 	vpop	{d8-d9}
 80130f2:	bd08      	pop	{r3, pc}
 80130f4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80130f8:	e7f7      	b.n	80130ea <powf+0x9e>
 80130fa:	0000      	movs	r0, r0
 80130fc:	0000      	movs	r0, r0
	...

08013100 <__ieee754_pow>:
 8013100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013104:	ed2d 8b06 	vpush	{d8-d10}
 8013108:	b089      	sub	sp, #36	; 0x24
 801310a:	ed8d 1b00 	vstr	d1, [sp]
 801310e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013112:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013116:	ea58 0102 	orrs.w	r1, r8, r2
 801311a:	ec57 6b10 	vmov	r6, r7, d0
 801311e:	d115      	bne.n	801314c <__ieee754_pow+0x4c>
 8013120:	19b3      	adds	r3, r6, r6
 8013122:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8013126:	4152      	adcs	r2, r2
 8013128:	4299      	cmp	r1, r3
 801312a:	4b89      	ldr	r3, [pc, #548]	; (8013350 <__ieee754_pow+0x250>)
 801312c:	4193      	sbcs	r3, r2
 801312e:	f080 84d2 	bcs.w	8013ad6 <__ieee754_pow+0x9d6>
 8013132:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013136:	4630      	mov	r0, r6
 8013138:	4639      	mov	r1, r7
 801313a:	f7ed f8a7 	bl	800028c <__adddf3>
 801313e:	ec41 0b10 	vmov	d0, r0, r1
 8013142:	b009      	add	sp, #36	; 0x24
 8013144:	ecbd 8b06 	vpop	{d8-d10}
 8013148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801314c:	4b81      	ldr	r3, [pc, #516]	; (8013354 <__ieee754_pow+0x254>)
 801314e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013152:	429c      	cmp	r4, r3
 8013154:	ee10 aa10 	vmov	sl, s0
 8013158:	463d      	mov	r5, r7
 801315a:	dc06      	bgt.n	801316a <__ieee754_pow+0x6a>
 801315c:	d101      	bne.n	8013162 <__ieee754_pow+0x62>
 801315e:	2e00      	cmp	r6, #0
 8013160:	d1e7      	bne.n	8013132 <__ieee754_pow+0x32>
 8013162:	4598      	cmp	r8, r3
 8013164:	dc01      	bgt.n	801316a <__ieee754_pow+0x6a>
 8013166:	d10f      	bne.n	8013188 <__ieee754_pow+0x88>
 8013168:	b172      	cbz	r2, 8013188 <__ieee754_pow+0x88>
 801316a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801316e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8013172:	ea55 050a 	orrs.w	r5, r5, sl
 8013176:	d1dc      	bne.n	8013132 <__ieee754_pow+0x32>
 8013178:	e9dd 3200 	ldrd	r3, r2, [sp]
 801317c:	18db      	adds	r3, r3, r3
 801317e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8013182:	4152      	adcs	r2, r2
 8013184:	429d      	cmp	r5, r3
 8013186:	e7d0      	b.n	801312a <__ieee754_pow+0x2a>
 8013188:	2d00      	cmp	r5, #0
 801318a:	da3b      	bge.n	8013204 <__ieee754_pow+0x104>
 801318c:	4b72      	ldr	r3, [pc, #456]	; (8013358 <__ieee754_pow+0x258>)
 801318e:	4598      	cmp	r8, r3
 8013190:	dc51      	bgt.n	8013236 <__ieee754_pow+0x136>
 8013192:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013196:	4598      	cmp	r8, r3
 8013198:	f340 84ac 	ble.w	8013af4 <__ieee754_pow+0x9f4>
 801319c:	ea4f 5328 	mov.w	r3, r8, asr #20
 80131a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80131a4:	2b14      	cmp	r3, #20
 80131a6:	dd0f      	ble.n	80131c8 <__ieee754_pow+0xc8>
 80131a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80131ac:	fa22 f103 	lsr.w	r1, r2, r3
 80131b0:	fa01 f303 	lsl.w	r3, r1, r3
 80131b4:	4293      	cmp	r3, r2
 80131b6:	f040 849d 	bne.w	8013af4 <__ieee754_pow+0x9f4>
 80131ba:	f001 0101 	and.w	r1, r1, #1
 80131be:	f1c1 0302 	rsb	r3, r1, #2
 80131c2:	9304      	str	r3, [sp, #16]
 80131c4:	b182      	cbz	r2, 80131e8 <__ieee754_pow+0xe8>
 80131c6:	e05f      	b.n	8013288 <__ieee754_pow+0x188>
 80131c8:	2a00      	cmp	r2, #0
 80131ca:	d15b      	bne.n	8013284 <__ieee754_pow+0x184>
 80131cc:	f1c3 0314 	rsb	r3, r3, #20
 80131d0:	fa48 f103 	asr.w	r1, r8, r3
 80131d4:	fa01 f303 	lsl.w	r3, r1, r3
 80131d8:	4543      	cmp	r3, r8
 80131da:	f040 8488 	bne.w	8013aee <__ieee754_pow+0x9ee>
 80131de:	f001 0101 	and.w	r1, r1, #1
 80131e2:	f1c1 0302 	rsb	r3, r1, #2
 80131e6:	9304      	str	r3, [sp, #16]
 80131e8:	4b5c      	ldr	r3, [pc, #368]	; (801335c <__ieee754_pow+0x25c>)
 80131ea:	4598      	cmp	r8, r3
 80131ec:	d132      	bne.n	8013254 <__ieee754_pow+0x154>
 80131ee:	f1b9 0f00 	cmp.w	r9, #0
 80131f2:	f280 8478 	bge.w	8013ae6 <__ieee754_pow+0x9e6>
 80131f6:	4959      	ldr	r1, [pc, #356]	; (801335c <__ieee754_pow+0x25c>)
 80131f8:	4632      	mov	r2, r6
 80131fa:	463b      	mov	r3, r7
 80131fc:	2000      	movs	r0, #0
 80131fe:	f7ed fb25 	bl	800084c <__aeabi_ddiv>
 8013202:	e79c      	b.n	801313e <__ieee754_pow+0x3e>
 8013204:	2300      	movs	r3, #0
 8013206:	9304      	str	r3, [sp, #16]
 8013208:	2a00      	cmp	r2, #0
 801320a:	d13d      	bne.n	8013288 <__ieee754_pow+0x188>
 801320c:	4b51      	ldr	r3, [pc, #324]	; (8013354 <__ieee754_pow+0x254>)
 801320e:	4598      	cmp	r8, r3
 8013210:	d1ea      	bne.n	80131e8 <__ieee754_pow+0xe8>
 8013212:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013216:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801321a:	ea53 030a 	orrs.w	r3, r3, sl
 801321e:	f000 845a 	beq.w	8013ad6 <__ieee754_pow+0x9d6>
 8013222:	4b4f      	ldr	r3, [pc, #316]	; (8013360 <__ieee754_pow+0x260>)
 8013224:	429c      	cmp	r4, r3
 8013226:	dd08      	ble.n	801323a <__ieee754_pow+0x13a>
 8013228:	f1b9 0f00 	cmp.w	r9, #0
 801322c:	f2c0 8457 	blt.w	8013ade <__ieee754_pow+0x9de>
 8013230:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013234:	e783      	b.n	801313e <__ieee754_pow+0x3e>
 8013236:	2302      	movs	r3, #2
 8013238:	e7e5      	b.n	8013206 <__ieee754_pow+0x106>
 801323a:	f1b9 0f00 	cmp.w	r9, #0
 801323e:	f04f 0000 	mov.w	r0, #0
 8013242:	f04f 0100 	mov.w	r1, #0
 8013246:	f6bf af7a 	bge.w	801313e <__ieee754_pow+0x3e>
 801324a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801324e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013252:	e774      	b.n	801313e <__ieee754_pow+0x3e>
 8013254:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013258:	d106      	bne.n	8013268 <__ieee754_pow+0x168>
 801325a:	4632      	mov	r2, r6
 801325c:	463b      	mov	r3, r7
 801325e:	4630      	mov	r0, r6
 8013260:	4639      	mov	r1, r7
 8013262:	f7ed f9c9 	bl	80005f8 <__aeabi_dmul>
 8013266:	e76a      	b.n	801313e <__ieee754_pow+0x3e>
 8013268:	4b3e      	ldr	r3, [pc, #248]	; (8013364 <__ieee754_pow+0x264>)
 801326a:	4599      	cmp	r9, r3
 801326c:	d10c      	bne.n	8013288 <__ieee754_pow+0x188>
 801326e:	2d00      	cmp	r5, #0
 8013270:	db0a      	blt.n	8013288 <__ieee754_pow+0x188>
 8013272:	ec47 6b10 	vmov	d0, r6, r7
 8013276:	b009      	add	sp, #36	; 0x24
 8013278:	ecbd 8b06 	vpop	{d8-d10}
 801327c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013280:	f000 bc6c 	b.w	8013b5c <__ieee754_sqrt>
 8013284:	2300      	movs	r3, #0
 8013286:	9304      	str	r3, [sp, #16]
 8013288:	ec47 6b10 	vmov	d0, r6, r7
 801328c:	f001 fe1c 	bl	8014ec8 <fabs>
 8013290:	ec51 0b10 	vmov	r0, r1, d0
 8013294:	f1ba 0f00 	cmp.w	sl, #0
 8013298:	d129      	bne.n	80132ee <__ieee754_pow+0x1ee>
 801329a:	b124      	cbz	r4, 80132a6 <__ieee754_pow+0x1a6>
 801329c:	4b2f      	ldr	r3, [pc, #188]	; (801335c <__ieee754_pow+0x25c>)
 801329e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80132a2:	429a      	cmp	r2, r3
 80132a4:	d123      	bne.n	80132ee <__ieee754_pow+0x1ee>
 80132a6:	f1b9 0f00 	cmp.w	r9, #0
 80132aa:	da05      	bge.n	80132b8 <__ieee754_pow+0x1b8>
 80132ac:	4602      	mov	r2, r0
 80132ae:	460b      	mov	r3, r1
 80132b0:	2000      	movs	r0, #0
 80132b2:	492a      	ldr	r1, [pc, #168]	; (801335c <__ieee754_pow+0x25c>)
 80132b4:	f7ed faca 	bl	800084c <__aeabi_ddiv>
 80132b8:	2d00      	cmp	r5, #0
 80132ba:	f6bf af40 	bge.w	801313e <__ieee754_pow+0x3e>
 80132be:	9b04      	ldr	r3, [sp, #16]
 80132c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80132c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80132c8:	4323      	orrs	r3, r4
 80132ca:	d108      	bne.n	80132de <__ieee754_pow+0x1de>
 80132cc:	4602      	mov	r2, r0
 80132ce:	460b      	mov	r3, r1
 80132d0:	4610      	mov	r0, r2
 80132d2:	4619      	mov	r1, r3
 80132d4:	f7ec ffd8 	bl	8000288 <__aeabi_dsub>
 80132d8:	4602      	mov	r2, r0
 80132da:	460b      	mov	r3, r1
 80132dc:	e78f      	b.n	80131fe <__ieee754_pow+0xfe>
 80132de:	9b04      	ldr	r3, [sp, #16]
 80132e0:	2b01      	cmp	r3, #1
 80132e2:	f47f af2c 	bne.w	801313e <__ieee754_pow+0x3e>
 80132e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80132ea:	4619      	mov	r1, r3
 80132ec:	e727      	b.n	801313e <__ieee754_pow+0x3e>
 80132ee:	0feb      	lsrs	r3, r5, #31
 80132f0:	3b01      	subs	r3, #1
 80132f2:	9306      	str	r3, [sp, #24]
 80132f4:	9a06      	ldr	r2, [sp, #24]
 80132f6:	9b04      	ldr	r3, [sp, #16]
 80132f8:	4313      	orrs	r3, r2
 80132fa:	d102      	bne.n	8013302 <__ieee754_pow+0x202>
 80132fc:	4632      	mov	r2, r6
 80132fe:	463b      	mov	r3, r7
 8013300:	e7e6      	b.n	80132d0 <__ieee754_pow+0x1d0>
 8013302:	4b19      	ldr	r3, [pc, #100]	; (8013368 <__ieee754_pow+0x268>)
 8013304:	4598      	cmp	r8, r3
 8013306:	f340 80fb 	ble.w	8013500 <__ieee754_pow+0x400>
 801330a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801330e:	4598      	cmp	r8, r3
 8013310:	4b13      	ldr	r3, [pc, #76]	; (8013360 <__ieee754_pow+0x260>)
 8013312:	dd0c      	ble.n	801332e <__ieee754_pow+0x22e>
 8013314:	429c      	cmp	r4, r3
 8013316:	dc0f      	bgt.n	8013338 <__ieee754_pow+0x238>
 8013318:	f1b9 0f00 	cmp.w	r9, #0
 801331c:	da0f      	bge.n	801333e <__ieee754_pow+0x23e>
 801331e:	2000      	movs	r0, #0
 8013320:	b009      	add	sp, #36	; 0x24
 8013322:	ecbd 8b06 	vpop	{d8-d10}
 8013326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801332a:	f001 bda2 	b.w	8014e72 <__math_oflow>
 801332e:	429c      	cmp	r4, r3
 8013330:	dbf2      	blt.n	8013318 <__ieee754_pow+0x218>
 8013332:	4b0a      	ldr	r3, [pc, #40]	; (801335c <__ieee754_pow+0x25c>)
 8013334:	429c      	cmp	r4, r3
 8013336:	dd19      	ble.n	801336c <__ieee754_pow+0x26c>
 8013338:	f1b9 0f00 	cmp.w	r9, #0
 801333c:	dcef      	bgt.n	801331e <__ieee754_pow+0x21e>
 801333e:	2000      	movs	r0, #0
 8013340:	b009      	add	sp, #36	; 0x24
 8013342:	ecbd 8b06 	vpop	{d8-d10}
 8013346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801334a:	f001 bd89 	b.w	8014e60 <__math_uflow>
 801334e:	bf00      	nop
 8013350:	fff00000 	.word	0xfff00000
 8013354:	7ff00000 	.word	0x7ff00000
 8013358:	433fffff 	.word	0x433fffff
 801335c:	3ff00000 	.word	0x3ff00000
 8013360:	3fefffff 	.word	0x3fefffff
 8013364:	3fe00000 	.word	0x3fe00000
 8013368:	41e00000 	.word	0x41e00000
 801336c:	4b60      	ldr	r3, [pc, #384]	; (80134f0 <__ieee754_pow+0x3f0>)
 801336e:	2200      	movs	r2, #0
 8013370:	f7ec ff8a 	bl	8000288 <__aeabi_dsub>
 8013374:	a354      	add	r3, pc, #336	; (adr r3, 80134c8 <__ieee754_pow+0x3c8>)
 8013376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801337a:	4604      	mov	r4, r0
 801337c:	460d      	mov	r5, r1
 801337e:	f7ed f93b 	bl	80005f8 <__aeabi_dmul>
 8013382:	a353      	add	r3, pc, #332	; (adr r3, 80134d0 <__ieee754_pow+0x3d0>)
 8013384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013388:	4606      	mov	r6, r0
 801338a:	460f      	mov	r7, r1
 801338c:	4620      	mov	r0, r4
 801338e:	4629      	mov	r1, r5
 8013390:	f7ed f932 	bl	80005f8 <__aeabi_dmul>
 8013394:	4b57      	ldr	r3, [pc, #348]	; (80134f4 <__ieee754_pow+0x3f4>)
 8013396:	4682      	mov	sl, r0
 8013398:	468b      	mov	fp, r1
 801339a:	2200      	movs	r2, #0
 801339c:	4620      	mov	r0, r4
 801339e:	4629      	mov	r1, r5
 80133a0:	f7ed f92a 	bl	80005f8 <__aeabi_dmul>
 80133a4:	4602      	mov	r2, r0
 80133a6:	460b      	mov	r3, r1
 80133a8:	a14b      	add	r1, pc, #300	; (adr r1, 80134d8 <__ieee754_pow+0x3d8>)
 80133aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133ae:	f7ec ff6b 	bl	8000288 <__aeabi_dsub>
 80133b2:	4622      	mov	r2, r4
 80133b4:	462b      	mov	r3, r5
 80133b6:	f7ed f91f 	bl	80005f8 <__aeabi_dmul>
 80133ba:	4602      	mov	r2, r0
 80133bc:	460b      	mov	r3, r1
 80133be:	2000      	movs	r0, #0
 80133c0:	494d      	ldr	r1, [pc, #308]	; (80134f8 <__ieee754_pow+0x3f8>)
 80133c2:	f7ec ff61 	bl	8000288 <__aeabi_dsub>
 80133c6:	4622      	mov	r2, r4
 80133c8:	4680      	mov	r8, r0
 80133ca:	4689      	mov	r9, r1
 80133cc:	462b      	mov	r3, r5
 80133ce:	4620      	mov	r0, r4
 80133d0:	4629      	mov	r1, r5
 80133d2:	f7ed f911 	bl	80005f8 <__aeabi_dmul>
 80133d6:	4602      	mov	r2, r0
 80133d8:	460b      	mov	r3, r1
 80133da:	4640      	mov	r0, r8
 80133dc:	4649      	mov	r1, r9
 80133de:	f7ed f90b 	bl	80005f8 <__aeabi_dmul>
 80133e2:	a33f      	add	r3, pc, #252	; (adr r3, 80134e0 <__ieee754_pow+0x3e0>)
 80133e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e8:	f7ed f906 	bl	80005f8 <__aeabi_dmul>
 80133ec:	4602      	mov	r2, r0
 80133ee:	460b      	mov	r3, r1
 80133f0:	4650      	mov	r0, sl
 80133f2:	4659      	mov	r1, fp
 80133f4:	f7ec ff48 	bl	8000288 <__aeabi_dsub>
 80133f8:	4602      	mov	r2, r0
 80133fa:	460b      	mov	r3, r1
 80133fc:	4680      	mov	r8, r0
 80133fe:	4689      	mov	r9, r1
 8013400:	4630      	mov	r0, r6
 8013402:	4639      	mov	r1, r7
 8013404:	f7ec ff42 	bl	800028c <__adddf3>
 8013408:	2000      	movs	r0, #0
 801340a:	4632      	mov	r2, r6
 801340c:	463b      	mov	r3, r7
 801340e:	4604      	mov	r4, r0
 8013410:	460d      	mov	r5, r1
 8013412:	f7ec ff39 	bl	8000288 <__aeabi_dsub>
 8013416:	4602      	mov	r2, r0
 8013418:	460b      	mov	r3, r1
 801341a:	4640      	mov	r0, r8
 801341c:	4649      	mov	r1, r9
 801341e:	f7ec ff33 	bl	8000288 <__aeabi_dsub>
 8013422:	9b04      	ldr	r3, [sp, #16]
 8013424:	9a06      	ldr	r2, [sp, #24]
 8013426:	3b01      	subs	r3, #1
 8013428:	4313      	orrs	r3, r2
 801342a:	4682      	mov	sl, r0
 801342c:	468b      	mov	fp, r1
 801342e:	f040 81e7 	bne.w	8013800 <__ieee754_pow+0x700>
 8013432:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80134e8 <__ieee754_pow+0x3e8>
 8013436:	eeb0 8a47 	vmov.f32	s16, s14
 801343a:	eef0 8a67 	vmov.f32	s17, s15
 801343e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013442:	2600      	movs	r6, #0
 8013444:	4632      	mov	r2, r6
 8013446:	463b      	mov	r3, r7
 8013448:	e9dd 0100 	ldrd	r0, r1, [sp]
 801344c:	f7ec ff1c 	bl	8000288 <__aeabi_dsub>
 8013450:	4622      	mov	r2, r4
 8013452:	462b      	mov	r3, r5
 8013454:	f7ed f8d0 	bl	80005f8 <__aeabi_dmul>
 8013458:	e9dd 2300 	ldrd	r2, r3, [sp]
 801345c:	4680      	mov	r8, r0
 801345e:	4689      	mov	r9, r1
 8013460:	4650      	mov	r0, sl
 8013462:	4659      	mov	r1, fp
 8013464:	f7ed f8c8 	bl	80005f8 <__aeabi_dmul>
 8013468:	4602      	mov	r2, r0
 801346a:	460b      	mov	r3, r1
 801346c:	4640      	mov	r0, r8
 801346e:	4649      	mov	r1, r9
 8013470:	f7ec ff0c 	bl	800028c <__adddf3>
 8013474:	4632      	mov	r2, r6
 8013476:	463b      	mov	r3, r7
 8013478:	4680      	mov	r8, r0
 801347a:	4689      	mov	r9, r1
 801347c:	4620      	mov	r0, r4
 801347e:	4629      	mov	r1, r5
 8013480:	f7ed f8ba 	bl	80005f8 <__aeabi_dmul>
 8013484:	460b      	mov	r3, r1
 8013486:	4604      	mov	r4, r0
 8013488:	460d      	mov	r5, r1
 801348a:	4602      	mov	r2, r0
 801348c:	4649      	mov	r1, r9
 801348e:	4640      	mov	r0, r8
 8013490:	f7ec fefc 	bl	800028c <__adddf3>
 8013494:	4b19      	ldr	r3, [pc, #100]	; (80134fc <__ieee754_pow+0x3fc>)
 8013496:	4299      	cmp	r1, r3
 8013498:	ec45 4b19 	vmov	d9, r4, r5
 801349c:	4606      	mov	r6, r0
 801349e:	460f      	mov	r7, r1
 80134a0:	468b      	mov	fp, r1
 80134a2:	f340 82f1 	ble.w	8013a88 <__ieee754_pow+0x988>
 80134a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80134aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80134ae:	4303      	orrs	r3, r0
 80134b0:	f000 81e4 	beq.w	801387c <__ieee754_pow+0x77c>
 80134b4:	ec51 0b18 	vmov	r0, r1, d8
 80134b8:	2200      	movs	r2, #0
 80134ba:	2300      	movs	r3, #0
 80134bc:	f7ed fb0e 	bl	8000adc <__aeabi_dcmplt>
 80134c0:	3800      	subs	r0, #0
 80134c2:	bf18      	it	ne
 80134c4:	2001      	movne	r0, #1
 80134c6:	e72b      	b.n	8013320 <__ieee754_pow+0x220>
 80134c8:	60000000 	.word	0x60000000
 80134cc:	3ff71547 	.word	0x3ff71547
 80134d0:	f85ddf44 	.word	0xf85ddf44
 80134d4:	3e54ae0b 	.word	0x3e54ae0b
 80134d8:	55555555 	.word	0x55555555
 80134dc:	3fd55555 	.word	0x3fd55555
 80134e0:	652b82fe 	.word	0x652b82fe
 80134e4:	3ff71547 	.word	0x3ff71547
 80134e8:	00000000 	.word	0x00000000
 80134ec:	bff00000 	.word	0xbff00000
 80134f0:	3ff00000 	.word	0x3ff00000
 80134f4:	3fd00000 	.word	0x3fd00000
 80134f8:	3fe00000 	.word	0x3fe00000
 80134fc:	408fffff 	.word	0x408fffff
 8013500:	4bd5      	ldr	r3, [pc, #852]	; (8013858 <__ieee754_pow+0x758>)
 8013502:	402b      	ands	r3, r5
 8013504:	2200      	movs	r2, #0
 8013506:	b92b      	cbnz	r3, 8013514 <__ieee754_pow+0x414>
 8013508:	4bd4      	ldr	r3, [pc, #848]	; (801385c <__ieee754_pow+0x75c>)
 801350a:	f7ed f875 	bl	80005f8 <__aeabi_dmul>
 801350e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013512:	460c      	mov	r4, r1
 8013514:	1523      	asrs	r3, r4, #20
 8013516:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801351a:	4413      	add	r3, r2
 801351c:	9305      	str	r3, [sp, #20]
 801351e:	4bd0      	ldr	r3, [pc, #832]	; (8013860 <__ieee754_pow+0x760>)
 8013520:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013524:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013528:	429c      	cmp	r4, r3
 801352a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801352e:	dd08      	ble.n	8013542 <__ieee754_pow+0x442>
 8013530:	4bcc      	ldr	r3, [pc, #816]	; (8013864 <__ieee754_pow+0x764>)
 8013532:	429c      	cmp	r4, r3
 8013534:	f340 8162 	ble.w	80137fc <__ieee754_pow+0x6fc>
 8013538:	9b05      	ldr	r3, [sp, #20]
 801353a:	3301      	adds	r3, #1
 801353c:	9305      	str	r3, [sp, #20]
 801353e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013542:	2400      	movs	r4, #0
 8013544:	00e3      	lsls	r3, r4, #3
 8013546:	9307      	str	r3, [sp, #28]
 8013548:	4bc7      	ldr	r3, [pc, #796]	; (8013868 <__ieee754_pow+0x768>)
 801354a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801354e:	ed93 7b00 	vldr	d7, [r3]
 8013552:	4629      	mov	r1, r5
 8013554:	ec53 2b17 	vmov	r2, r3, d7
 8013558:	eeb0 9a47 	vmov.f32	s18, s14
 801355c:	eef0 9a67 	vmov.f32	s19, s15
 8013560:	4682      	mov	sl, r0
 8013562:	f7ec fe91 	bl	8000288 <__aeabi_dsub>
 8013566:	4652      	mov	r2, sl
 8013568:	4606      	mov	r6, r0
 801356a:	460f      	mov	r7, r1
 801356c:	462b      	mov	r3, r5
 801356e:	ec51 0b19 	vmov	r0, r1, d9
 8013572:	f7ec fe8b 	bl	800028c <__adddf3>
 8013576:	4602      	mov	r2, r0
 8013578:	460b      	mov	r3, r1
 801357a:	2000      	movs	r0, #0
 801357c:	49bb      	ldr	r1, [pc, #748]	; (801386c <__ieee754_pow+0x76c>)
 801357e:	f7ed f965 	bl	800084c <__aeabi_ddiv>
 8013582:	ec41 0b1a 	vmov	d10, r0, r1
 8013586:	4602      	mov	r2, r0
 8013588:	460b      	mov	r3, r1
 801358a:	4630      	mov	r0, r6
 801358c:	4639      	mov	r1, r7
 801358e:	f7ed f833 	bl	80005f8 <__aeabi_dmul>
 8013592:	2300      	movs	r3, #0
 8013594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013598:	9302      	str	r3, [sp, #8]
 801359a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801359e:	46ab      	mov	fp, r5
 80135a0:	106d      	asrs	r5, r5, #1
 80135a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80135a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80135aa:	ec41 0b18 	vmov	d8, r0, r1
 80135ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80135b2:	2200      	movs	r2, #0
 80135b4:	4640      	mov	r0, r8
 80135b6:	4649      	mov	r1, r9
 80135b8:	4614      	mov	r4, r2
 80135ba:	461d      	mov	r5, r3
 80135bc:	f7ed f81c 	bl	80005f8 <__aeabi_dmul>
 80135c0:	4602      	mov	r2, r0
 80135c2:	460b      	mov	r3, r1
 80135c4:	4630      	mov	r0, r6
 80135c6:	4639      	mov	r1, r7
 80135c8:	f7ec fe5e 	bl	8000288 <__aeabi_dsub>
 80135cc:	ec53 2b19 	vmov	r2, r3, d9
 80135d0:	4606      	mov	r6, r0
 80135d2:	460f      	mov	r7, r1
 80135d4:	4620      	mov	r0, r4
 80135d6:	4629      	mov	r1, r5
 80135d8:	f7ec fe56 	bl	8000288 <__aeabi_dsub>
 80135dc:	4602      	mov	r2, r0
 80135de:	460b      	mov	r3, r1
 80135e0:	4650      	mov	r0, sl
 80135e2:	4659      	mov	r1, fp
 80135e4:	f7ec fe50 	bl	8000288 <__aeabi_dsub>
 80135e8:	4642      	mov	r2, r8
 80135ea:	464b      	mov	r3, r9
 80135ec:	f7ed f804 	bl	80005f8 <__aeabi_dmul>
 80135f0:	4602      	mov	r2, r0
 80135f2:	460b      	mov	r3, r1
 80135f4:	4630      	mov	r0, r6
 80135f6:	4639      	mov	r1, r7
 80135f8:	f7ec fe46 	bl	8000288 <__aeabi_dsub>
 80135fc:	ec53 2b1a 	vmov	r2, r3, d10
 8013600:	f7ec fffa 	bl	80005f8 <__aeabi_dmul>
 8013604:	ec53 2b18 	vmov	r2, r3, d8
 8013608:	ec41 0b19 	vmov	d9, r0, r1
 801360c:	ec51 0b18 	vmov	r0, r1, d8
 8013610:	f7ec fff2 	bl	80005f8 <__aeabi_dmul>
 8013614:	a37c      	add	r3, pc, #496	; (adr r3, 8013808 <__ieee754_pow+0x708>)
 8013616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801361a:	4604      	mov	r4, r0
 801361c:	460d      	mov	r5, r1
 801361e:	f7ec ffeb 	bl	80005f8 <__aeabi_dmul>
 8013622:	a37b      	add	r3, pc, #492	; (adr r3, 8013810 <__ieee754_pow+0x710>)
 8013624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013628:	f7ec fe30 	bl	800028c <__adddf3>
 801362c:	4622      	mov	r2, r4
 801362e:	462b      	mov	r3, r5
 8013630:	f7ec ffe2 	bl	80005f8 <__aeabi_dmul>
 8013634:	a378      	add	r3, pc, #480	; (adr r3, 8013818 <__ieee754_pow+0x718>)
 8013636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363a:	f7ec fe27 	bl	800028c <__adddf3>
 801363e:	4622      	mov	r2, r4
 8013640:	462b      	mov	r3, r5
 8013642:	f7ec ffd9 	bl	80005f8 <__aeabi_dmul>
 8013646:	a376      	add	r3, pc, #472	; (adr r3, 8013820 <__ieee754_pow+0x720>)
 8013648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364c:	f7ec fe1e 	bl	800028c <__adddf3>
 8013650:	4622      	mov	r2, r4
 8013652:	462b      	mov	r3, r5
 8013654:	f7ec ffd0 	bl	80005f8 <__aeabi_dmul>
 8013658:	a373      	add	r3, pc, #460	; (adr r3, 8013828 <__ieee754_pow+0x728>)
 801365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801365e:	f7ec fe15 	bl	800028c <__adddf3>
 8013662:	4622      	mov	r2, r4
 8013664:	462b      	mov	r3, r5
 8013666:	f7ec ffc7 	bl	80005f8 <__aeabi_dmul>
 801366a:	a371      	add	r3, pc, #452	; (adr r3, 8013830 <__ieee754_pow+0x730>)
 801366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013670:	f7ec fe0c 	bl	800028c <__adddf3>
 8013674:	4622      	mov	r2, r4
 8013676:	4606      	mov	r6, r0
 8013678:	460f      	mov	r7, r1
 801367a:	462b      	mov	r3, r5
 801367c:	4620      	mov	r0, r4
 801367e:	4629      	mov	r1, r5
 8013680:	f7ec ffba 	bl	80005f8 <__aeabi_dmul>
 8013684:	4602      	mov	r2, r0
 8013686:	460b      	mov	r3, r1
 8013688:	4630      	mov	r0, r6
 801368a:	4639      	mov	r1, r7
 801368c:	f7ec ffb4 	bl	80005f8 <__aeabi_dmul>
 8013690:	4642      	mov	r2, r8
 8013692:	4604      	mov	r4, r0
 8013694:	460d      	mov	r5, r1
 8013696:	464b      	mov	r3, r9
 8013698:	ec51 0b18 	vmov	r0, r1, d8
 801369c:	f7ec fdf6 	bl	800028c <__adddf3>
 80136a0:	ec53 2b19 	vmov	r2, r3, d9
 80136a4:	f7ec ffa8 	bl	80005f8 <__aeabi_dmul>
 80136a8:	4622      	mov	r2, r4
 80136aa:	462b      	mov	r3, r5
 80136ac:	f7ec fdee 	bl	800028c <__adddf3>
 80136b0:	4642      	mov	r2, r8
 80136b2:	4682      	mov	sl, r0
 80136b4:	468b      	mov	fp, r1
 80136b6:	464b      	mov	r3, r9
 80136b8:	4640      	mov	r0, r8
 80136ba:	4649      	mov	r1, r9
 80136bc:	f7ec ff9c 	bl	80005f8 <__aeabi_dmul>
 80136c0:	4b6b      	ldr	r3, [pc, #428]	; (8013870 <__ieee754_pow+0x770>)
 80136c2:	2200      	movs	r2, #0
 80136c4:	4606      	mov	r6, r0
 80136c6:	460f      	mov	r7, r1
 80136c8:	f7ec fde0 	bl	800028c <__adddf3>
 80136cc:	4652      	mov	r2, sl
 80136ce:	465b      	mov	r3, fp
 80136d0:	f7ec fddc 	bl	800028c <__adddf3>
 80136d4:	2000      	movs	r0, #0
 80136d6:	4604      	mov	r4, r0
 80136d8:	460d      	mov	r5, r1
 80136da:	4602      	mov	r2, r0
 80136dc:	460b      	mov	r3, r1
 80136de:	4640      	mov	r0, r8
 80136e0:	4649      	mov	r1, r9
 80136e2:	f7ec ff89 	bl	80005f8 <__aeabi_dmul>
 80136e6:	4b62      	ldr	r3, [pc, #392]	; (8013870 <__ieee754_pow+0x770>)
 80136e8:	4680      	mov	r8, r0
 80136ea:	4689      	mov	r9, r1
 80136ec:	2200      	movs	r2, #0
 80136ee:	4620      	mov	r0, r4
 80136f0:	4629      	mov	r1, r5
 80136f2:	f7ec fdc9 	bl	8000288 <__aeabi_dsub>
 80136f6:	4632      	mov	r2, r6
 80136f8:	463b      	mov	r3, r7
 80136fa:	f7ec fdc5 	bl	8000288 <__aeabi_dsub>
 80136fe:	4602      	mov	r2, r0
 8013700:	460b      	mov	r3, r1
 8013702:	4650      	mov	r0, sl
 8013704:	4659      	mov	r1, fp
 8013706:	f7ec fdbf 	bl	8000288 <__aeabi_dsub>
 801370a:	ec53 2b18 	vmov	r2, r3, d8
 801370e:	f7ec ff73 	bl	80005f8 <__aeabi_dmul>
 8013712:	4622      	mov	r2, r4
 8013714:	4606      	mov	r6, r0
 8013716:	460f      	mov	r7, r1
 8013718:	462b      	mov	r3, r5
 801371a:	ec51 0b19 	vmov	r0, r1, d9
 801371e:	f7ec ff6b 	bl	80005f8 <__aeabi_dmul>
 8013722:	4602      	mov	r2, r0
 8013724:	460b      	mov	r3, r1
 8013726:	4630      	mov	r0, r6
 8013728:	4639      	mov	r1, r7
 801372a:	f7ec fdaf 	bl	800028c <__adddf3>
 801372e:	4606      	mov	r6, r0
 8013730:	460f      	mov	r7, r1
 8013732:	4602      	mov	r2, r0
 8013734:	460b      	mov	r3, r1
 8013736:	4640      	mov	r0, r8
 8013738:	4649      	mov	r1, r9
 801373a:	f7ec fda7 	bl	800028c <__adddf3>
 801373e:	a33e      	add	r3, pc, #248	; (adr r3, 8013838 <__ieee754_pow+0x738>)
 8013740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013744:	2000      	movs	r0, #0
 8013746:	4604      	mov	r4, r0
 8013748:	460d      	mov	r5, r1
 801374a:	f7ec ff55 	bl	80005f8 <__aeabi_dmul>
 801374e:	4642      	mov	r2, r8
 8013750:	ec41 0b18 	vmov	d8, r0, r1
 8013754:	464b      	mov	r3, r9
 8013756:	4620      	mov	r0, r4
 8013758:	4629      	mov	r1, r5
 801375a:	f7ec fd95 	bl	8000288 <__aeabi_dsub>
 801375e:	4602      	mov	r2, r0
 8013760:	460b      	mov	r3, r1
 8013762:	4630      	mov	r0, r6
 8013764:	4639      	mov	r1, r7
 8013766:	f7ec fd8f 	bl	8000288 <__aeabi_dsub>
 801376a:	a335      	add	r3, pc, #212	; (adr r3, 8013840 <__ieee754_pow+0x740>)
 801376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013770:	f7ec ff42 	bl	80005f8 <__aeabi_dmul>
 8013774:	a334      	add	r3, pc, #208	; (adr r3, 8013848 <__ieee754_pow+0x748>)
 8013776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801377a:	4606      	mov	r6, r0
 801377c:	460f      	mov	r7, r1
 801377e:	4620      	mov	r0, r4
 8013780:	4629      	mov	r1, r5
 8013782:	f7ec ff39 	bl	80005f8 <__aeabi_dmul>
 8013786:	4602      	mov	r2, r0
 8013788:	460b      	mov	r3, r1
 801378a:	4630      	mov	r0, r6
 801378c:	4639      	mov	r1, r7
 801378e:	f7ec fd7d 	bl	800028c <__adddf3>
 8013792:	9a07      	ldr	r2, [sp, #28]
 8013794:	4b37      	ldr	r3, [pc, #220]	; (8013874 <__ieee754_pow+0x774>)
 8013796:	4413      	add	r3, r2
 8013798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801379c:	f7ec fd76 	bl	800028c <__adddf3>
 80137a0:	4682      	mov	sl, r0
 80137a2:	9805      	ldr	r0, [sp, #20]
 80137a4:	468b      	mov	fp, r1
 80137a6:	f7ec febd 	bl	8000524 <__aeabi_i2d>
 80137aa:	9a07      	ldr	r2, [sp, #28]
 80137ac:	4b32      	ldr	r3, [pc, #200]	; (8013878 <__ieee754_pow+0x778>)
 80137ae:	4413      	add	r3, r2
 80137b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80137b4:	4606      	mov	r6, r0
 80137b6:	460f      	mov	r7, r1
 80137b8:	4652      	mov	r2, sl
 80137ba:	465b      	mov	r3, fp
 80137bc:	ec51 0b18 	vmov	r0, r1, d8
 80137c0:	f7ec fd64 	bl	800028c <__adddf3>
 80137c4:	4642      	mov	r2, r8
 80137c6:	464b      	mov	r3, r9
 80137c8:	f7ec fd60 	bl	800028c <__adddf3>
 80137cc:	4632      	mov	r2, r6
 80137ce:	463b      	mov	r3, r7
 80137d0:	f7ec fd5c 	bl	800028c <__adddf3>
 80137d4:	2000      	movs	r0, #0
 80137d6:	4632      	mov	r2, r6
 80137d8:	463b      	mov	r3, r7
 80137da:	4604      	mov	r4, r0
 80137dc:	460d      	mov	r5, r1
 80137de:	f7ec fd53 	bl	8000288 <__aeabi_dsub>
 80137e2:	4642      	mov	r2, r8
 80137e4:	464b      	mov	r3, r9
 80137e6:	f7ec fd4f 	bl	8000288 <__aeabi_dsub>
 80137ea:	ec53 2b18 	vmov	r2, r3, d8
 80137ee:	f7ec fd4b 	bl	8000288 <__aeabi_dsub>
 80137f2:	4602      	mov	r2, r0
 80137f4:	460b      	mov	r3, r1
 80137f6:	4650      	mov	r0, sl
 80137f8:	4659      	mov	r1, fp
 80137fa:	e610      	b.n	801341e <__ieee754_pow+0x31e>
 80137fc:	2401      	movs	r4, #1
 80137fe:	e6a1      	b.n	8013544 <__ieee754_pow+0x444>
 8013800:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013850 <__ieee754_pow+0x750>
 8013804:	e617      	b.n	8013436 <__ieee754_pow+0x336>
 8013806:	bf00      	nop
 8013808:	4a454eef 	.word	0x4a454eef
 801380c:	3fca7e28 	.word	0x3fca7e28
 8013810:	93c9db65 	.word	0x93c9db65
 8013814:	3fcd864a 	.word	0x3fcd864a
 8013818:	a91d4101 	.word	0xa91d4101
 801381c:	3fd17460 	.word	0x3fd17460
 8013820:	518f264d 	.word	0x518f264d
 8013824:	3fd55555 	.word	0x3fd55555
 8013828:	db6fabff 	.word	0xdb6fabff
 801382c:	3fdb6db6 	.word	0x3fdb6db6
 8013830:	33333303 	.word	0x33333303
 8013834:	3fe33333 	.word	0x3fe33333
 8013838:	e0000000 	.word	0xe0000000
 801383c:	3feec709 	.word	0x3feec709
 8013840:	dc3a03fd 	.word	0xdc3a03fd
 8013844:	3feec709 	.word	0x3feec709
 8013848:	145b01f5 	.word	0x145b01f5
 801384c:	be3e2fe0 	.word	0xbe3e2fe0
 8013850:	00000000 	.word	0x00000000
 8013854:	3ff00000 	.word	0x3ff00000
 8013858:	7ff00000 	.word	0x7ff00000
 801385c:	43400000 	.word	0x43400000
 8013860:	0003988e 	.word	0x0003988e
 8013864:	000bb679 	.word	0x000bb679
 8013868:	080158f0 	.word	0x080158f0
 801386c:	3ff00000 	.word	0x3ff00000
 8013870:	40080000 	.word	0x40080000
 8013874:	08015910 	.word	0x08015910
 8013878:	08015900 	.word	0x08015900
 801387c:	a3b5      	add	r3, pc, #724	; (adr r3, 8013b54 <__ieee754_pow+0xa54>)
 801387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013882:	4640      	mov	r0, r8
 8013884:	4649      	mov	r1, r9
 8013886:	f7ec fd01 	bl	800028c <__adddf3>
 801388a:	4622      	mov	r2, r4
 801388c:	ec41 0b1a 	vmov	d10, r0, r1
 8013890:	462b      	mov	r3, r5
 8013892:	4630      	mov	r0, r6
 8013894:	4639      	mov	r1, r7
 8013896:	f7ec fcf7 	bl	8000288 <__aeabi_dsub>
 801389a:	4602      	mov	r2, r0
 801389c:	460b      	mov	r3, r1
 801389e:	ec51 0b1a 	vmov	r0, r1, d10
 80138a2:	f7ed f939 	bl	8000b18 <__aeabi_dcmpgt>
 80138a6:	2800      	cmp	r0, #0
 80138a8:	f47f ae04 	bne.w	80134b4 <__ieee754_pow+0x3b4>
 80138ac:	4aa4      	ldr	r2, [pc, #656]	; (8013b40 <__ieee754_pow+0xa40>)
 80138ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80138b2:	4293      	cmp	r3, r2
 80138b4:	f340 8108 	ble.w	8013ac8 <__ieee754_pow+0x9c8>
 80138b8:	151b      	asrs	r3, r3, #20
 80138ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80138be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80138c2:	fa4a f303 	asr.w	r3, sl, r3
 80138c6:	445b      	add	r3, fp
 80138c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80138cc:	4e9d      	ldr	r6, [pc, #628]	; (8013b44 <__ieee754_pow+0xa44>)
 80138ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80138d2:	4116      	asrs	r6, r2
 80138d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80138d8:	2000      	movs	r0, #0
 80138da:	ea23 0106 	bic.w	r1, r3, r6
 80138de:	f1c2 0214 	rsb	r2, r2, #20
 80138e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80138e6:	fa4a fa02 	asr.w	sl, sl, r2
 80138ea:	f1bb 0f00 	cmp.w	fp, #0
 80138ee:	4602      	mov	r2, r0
 80138f0:	460b      	mov	r3, r1
 80138f2:	4620      	mov	r0, r4
 80138f4:	4629      	mov	r1, r5
 80138f6:	bfb8      	it	lt
 80138f8:	f1ca 0a00 	rsblt	sl, sl, #0
 80138fc:	f7ec fcc4 	bl	8000288 <__aeabi_dsub>
 8013900:	ec41 0b19 	vmov	d9, r0, r1
 8013904:	4642      	mov	r2, r8
 8013906:	464b      	mov	r3, r9
 8013908:	ec51 0b19 	vmov	r0, r1, d9
 801390c:	f7ec fcbe 	bl	800028c <__adddf3>
 8013910:	a37b      	add	r3, pc, #492	; (adr r3, 8013b00 <__ieee754_pow+0xa00>)
 8013912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013916:	2000      	movs	r0, #0
 8013918:	4604      	mov	r4, r0
 801391a:	460d      	mov	r5, r1
 801391c:	f7ec fe6c 	bl	80005f8 <__aeabi_dmul>
 8013920:	ec53 2b19 	vmov	r2, r3, d9
 8013924:	4606      	mov	r6, r0
 8013926:	460f      	mov	r7, r1
 8013928:	4620      	mov	r0, r4
 801392a:	4629      	mov	r1, r5
 801392c:	f7ec fcac 	bl	8000288 <__aeabi_dsub>
 8013930:	4602      	mov	r2, r0
 8013932:	460b      	mov	r3, r1
 8013934:	4640      	mov	r0, r8
 8013936:	4649      	mov	r1, r9
 8013938:	f7ec fca6 	bl	8000288 <__aeabi_dsub>
 801393c:	a372      	add	r3, pc, #456	; (adr r3, 8013b08 <__ieee754_pow+0xa08>)
 801393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013942:	f7ec fe59 	bl	80005f8 <__aeabi_dmul>
 8013946:	a372      	add	r3, pc, #456	; (adr r3, 8013b10 <__ieee754_pow+0xa10>)
 8013948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801394c:	4680      	mov	r8, r0
 801394e:	4689      	mov	r9, r1
 8013950:	4620      	mov	r0, r4
 8013952:	4629      	mov	r1, r5
 8013954:	f7ec fe50 	bl	80005f8 <__aeabi_dmul>
 8013958:	4602      	mov	r2, r0
 801395a:	460b      	mov	r3, r1
 801395c:	4640      	mov	r0, r8
 801395e:	4649      	mov	r1, r9
 8013960:	f7ec fc94 	bl	800028c <__adddf3>
 8013964:	4604      	mov	r4, r0
 8013966:	460d      	mov	r5, r1
 8013968:	4602      	mov	r2, r0
 801396a:	460b      	mov	r3, r1
 801396c:	4630      	mov	r0, r6
 801396e:	4639      	mov	r1, r7
 8013970:	f7ec fc8c 	bl	800028c <__adddf3>
 8013974:	4632      	mov	r2, r6
 8013976:	463b      	mov	r3, r7
 8013978:	4680      	mov	r8, r0
 801397a:	4689      	mov	r9, r1
 801397c:	f7ec fc84 	bl	8000288 <__aeabi_dsub>
 8013980:	4602      	mov	r2, r0
 8013982:	460b      	mov	r3, r1
 8013984:	4620      	mov	r0, r4
 8013986:	4629      	mov	r1, r5
 8013988:	f7ec fc7e 	bl	8000288 <__aeabi_dsub>
 801398c:	4642      	mov	r2, r8
 801398e:	4606      	mov	r6, r0
 8013990:	460f      	mov	r7, r1
 8013992:	464b      	mov	r3, r9
 8013994:	4640      	mov	r0, r8
 8013996:	4649      	mov	r1, r9
 8013998:	f7ec fe2e 	bl	80005f8 <__aeabi_dmul>
 801399c:	a35e      	add	r3, pc, #376	; (adr r3, 8013b18 <__ieee754_pow+0xa18>)
 801399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a2:	4604      	mov	r4, r0
 80139a4:	460d      	mov	r5, r1
 80139a6:	f7ec fe27 	bl	80005f8 <__aeabi_dmul>
 80139aa:	a35d      	add	r3, pc, #372	; (adr r3, 8013b20 <__ieee754_pow+0xa20>)
 80139ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b0:	f7ec fc6a 	bl	8000288 <__aeabi_dsub>
 80139b4:	4622      	mov	r2, r4
 80139b6:	462b      	mov	r3, r5
 80139b8:	f7ec fe1e 	bl	80005f8 <__aeabi_dmul>
 80139bc:	a35a      	add	r3, pc, #360	; (adr r3, 8013b28 <__ieee754_pow+0xa28>)
 80139be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c2:	f7ec fc63 	bl	800028c <__adddf3>
 80139c6:	4622      	mov	r2, r4
 80139c8:	462b      	mov	r3, r5
 80139ca:	f7ec fe15 	bl	80005f8 <__aeabi_dmul>
 80139ce:	a358      	add	r3, pc, #352	; (adr r3, 8013b30 <__ieee754_pow+0xa30>)
 80139d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d4:	f7ec fc58 	bl	8000288 <__aeabi_dsub>
 80139d8:	4622      	mov	r2, r4
 80139da:	462b      	mov	r3, r5
 80139dc:	f7ec fe0c 	bl	80005f8 <__aeabi_dmul>
 80139e0:	a355      	add	r3, pc, #340	; (adr r3, 8013b38 <__ieee754_pow+0xa38>)
 80139e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e6:	f7ec fc51 	bl	800028c <__adddf3>
 80139ea:	4622      	mov	r2, r4
 80139ec:	462b      	mov	r3, r5
 80139ee:	f7ec fe03 	bl	80005f8 <__aeabi_dmul>
 80139f2:	4602      	mov	r2, r0
 80139f4:	460b      	mov	r3, r1
 80139f6:	4640      	mov	r0, r8
 80139f8:	4649      	mov	r1, r9
 80139fa:	f7ec fc45 	bl	8000288 <__aeabi_dsub>
 80139fe:	4604      	mov	r4, r0
 8013a00:	460d      	mov	r5, r1
 8013a02:	4602      	mov	r2, r0
 8013a04:	460b      	mov	r3, r1
 8013a06:	4640      	mov	r0, r8
 8013a08:	4649      	mov	r1, r9
 8013a0a:	f7ec fdf5 	bl	80005f8 <__aeabi_dmul>
 8013a0e:	2200      	movs	r2, #0
 8013a10:	ec41 0b19 	vmov	d9, r0, r1
 8013a14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013a18:	4620      	mov	r0, r4
 8013a1a:	4629      	mov	r1, r5
 8013a1c:	f7ec fc34 	bl	8000288 <__aeabi_dsub>
 8013a20:	4602      	mov	r2, r0
 8013a22:	460b      	mov	r3, r1
 8013a24:	ec51 0b19 	vmov	r0, r1, d9
 8013a28:	f7ec ff10 	bl	800084c <__aeabi_ddiv>
 8013a2c:	4632      	mov	r2, r6
 8013a2e:	4604      	mov	r4, r0
 8013a30:	460d      	mov	r5, r1
 8013a32:	463b      	mov	r3, r7
 8013a34:	4640      	mov	r0, r8
 8013a36:	4649      	mov	r1, r9
 8013a38:	f7ec fdde 	bl	80005f8 <__aeabi_dmul>
 8013a3c:	4632      	mov	r2, r6
 8013a3e:	463b      	mov	r3, r7
 8013a40:	f7ec fc24 	bl	800028c <__adddf3>
 8013a44:	4602      	mov	r2, r0
 8013a46:	460b      	mov	r3, r1
 8013a48:	4620      	mov	r0, r4
 8013a4a:	4629      	mov	r1, r5
 8013a4c:	f7ec fc1c 	bl	8000288 <__aeabi_dsub>
 8013a50:	4642      	mov	r2, r8
 8013a52:	464b      	mov	r3, r9
 8013a54:	f7ec fc18 	bl	8000288 <__aeabi_dsub>
 8013a58:	460b      	mov	r3, r1
 8013a5a:	4602      	mov	r2, r0
 8013a5c:	493a      	ldr	r1, [pc, #232]	; (8013b48 <__ieee754_pow+0xa48>)
 8013a5e:	2000      	movs	r0, #0
 8013a60:	f7ec fc12 	bl	8000288 <__aeabi_dsub>
 8013a64:	ec41 0b10 	vmov	d0, r0, r1
 8013a68:	ee10 3a90 	vmov	r3, s1
 8013a6c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013a74:	da2b      	bge.n	8013ace <__ieee754_pow+0x9ce>
 8013a76:	4650      	mov	r0, sl
 8013a78:	f001 fa3a 	bl	8014ef0 <scalbn>
 8013a7c:	ec51 0b10 	vmov	r0, r1, d0
 8013a80:	ec53 2b18 	vmov	r2, r3, d8
 8013a84:	f7ff bbed 	b.w	8013262 <__ieee754_pow+0x162>
 8013a88:	4b30      	ldr	r3, [pc, #192]	; (8013b4c <__ieee754_pow+0xa4c>)
 8013a8a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013a8e:	429e      	cmp	r6, r3
 8013a90:	f77f af0c 	ble.w	80138ac <__ieee754_pow+0x7ac>
 8013a94:	4b2e      	ldr	r3, [pc, #184]	; (8013b50 <__ieee754_pow+0xa50>)
 8013a96:	440b      	add	r3, r1
 8013a98:	4303      	orrs	r3, r0
 8013a9a:	d009      	beq.n	8013ab0 <__ieee754_pow+0x9b0>
 8013a9c:	ec51 0b18 	vmov	r0, r1, d8
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	f7ed f81a 	bl	8000adc <__aeabi_dcmplt>
 8013aa8:	3800      	subs	r0, #0
 8013aaa:	bf18      	it	ne
 8013aac:	2001      	movne	r0, #1
 8013aae:	e447      	b.n	8013340 <__ieee754_pow+0x240>
 8013ab0:	4622      	mov	r2, r4
 8013ab2:	462b      	mov	r3, r5
 8013ab4:	f7ec fbe8 	bl	8000288 <__aeabi_dsub>
 8013ab8:	4642      	mov	r2, r8
 8013aba:	464b      	mov	r3, r9
 8013abc:	f7ed f822 	bl	8000b04 <__aeabi_dcmpge>
 8013ac0:	2800      	cmp	r0, #0
 8013ac2:	f43f aef3 	beq.w	80138ac <__ieee754_pow+0x7ac>
 8013ac6:	e7e9      	b.n	8013a9c <__ieee754_pow+0x99c>
 8013ac8:	f04f 0a00 	mov.w	sl, #0
 8013acc:	e71a      	b.n	8013904 <__ieee754_pow+0x804>
 8013ace:	ec51 0b10 	vmov	r0, r1, d0
 8013ad2:	4619      	mov	r1, r3
 8013ad4:	e7d4      	b.n	8013a80 <__ieee754_pow+0x980>
 8013ad6:	491c      	ldr	r1, [pc, #112]	; (8013b48 <__ieee754_pow+0xa48>)
 8013ad8:	2000      	movs	r0, #0
 8013ada:	f7ff bb30 	b.w	801313e <__ieee754_pow+0x3e>
 8013ade:	2000      	movs	r0, #0
 8013ae0:	2100      	movs	r1, #0
 8013ae2:	f7ff bb2c 	b.w	801313e <__ieee754_pow+0x3e>
 8013ae6:	4630      	mov	r0, r6
 8013ae8:	4639      	mov	r1, r7
 8013aea:	f7ff bb28 	b.w	801313e <__ieee754_pow+0x3e>
 8013aee:	9204      	str	r2, [sp, #16]
 8013af0:	f7ff bb7a 	b.w	80131e8 <__ieee754_pow+0xe8>
 8013af4:	2300      	movs	r3, #0
 8013af6:	f7ff bb64 	b.w	80131c2 <__ieee754_pow+0xc2>
 8013afa:	bf00      	nop
 8013afc:	f3af 8000 	nop.w
 8013b00:	00000000 	.word	0x00000000
 8013b04:	3fe62e43 	.word	0x3fe62e43
 8013b08:	fefa39ef 	.word	0xfefa39ef
 8013b0c:	3fe62e42 	.word	0x3fe62e42
 8013b10:	0ca86c39 	.word	0x0ca86c39
 8013b14:	be205c61 	.word	0xbe205c61
 8013b18:	72bea4d0 	.word	0x72bea4d0
 8013b1c:	3e663769 	.word	0x3e663769
 8013b20:	c5d26bf1 	.word	0xc5d26bf1
 8013b24:	3ebbbd41 	.word	0x3ebbbd41
 8013b28:	af25de2c 	.word	0xaf25de2c
 8013b2c:	3f11566a 	.word	0x3f11566a
 8013b30:	16bebd93 	.word	0x16bebd93
 8013b34:	3f66c16c 	.word	0x3f66c16c
 8013b38:	5555553e 	.word	0x5555553e
 8013b3c:	3fc55555 	.word	0x3fc55555
 8013b40:	3fe00000 	.word	0x3fe00000
 8013b44:	000fffff 	.word	0x000fffff
 8013b48:	3ff00000 	.word	0x3ff00000
 8013b4c:	4090cbff 	.word	0x4090cbff
 8013b50:	3f6f3400 	.word	0x3f6f3400
 8013b54:	652b82fe 	.word	0x652b82fe
 8013b58:	3c971547 	.word	0x3c971547

08013b5c <__ieee754_sqrt>:
 8013b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b60:	ec55 4b10 	vmov	r4, r5, d0
 8013b64:	4e55      	ldr	r6, [pc, #340]	; (8013cbc <__ieee754_sqrt+0x160>)
 8013b66:	43ae      	bics	r6, r5
 8013b68:	ee10 0a10 	vmov	r0, s0
 8013b6c:	ee10 3a10 	vmov	r3, s0
 8013b70:	462a      	mov	r2, r5
 8013b72:	4629      	mov	r1, r5
 8013b74:	d110      	bne.n	8013b98 <__ieee754_sqrt+0x3c>
 8013b76:	ee10 2a10 	vmov	r2, s0
 8013b7a:	462b      	mov	r3, r5
 8013b7c:	f7ec fd3c 	bl	80005f8 <__aeabi_dmul>
 8013b80:	4602      	mov	r2, r0
 8013b82:	460b      	mov	r3, r1
 8013b84:	4620      	mov	r0, r4
 8013b86:	4629      	mov	r1, r5
 8013b88:	f7ec fb80 	bl	800028c <__adddf3>
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	460d      	mov	r5, r1
 8013b90:	ec45 4b10 	vmov	d0, r4, r5
 8013b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b98:	2d00      	cmp	r5, #0
 8013b9a:	dc10      	bgt.n	8013bbe <__ieee754_sqrt+0x62>
 8013b9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013ba0:	4330      	orrs	r0, r6
 8013ba2:	d0f5      	beq.n	8013b90 <__ieee754_sqrt+0x34>
 8013ba4:	b15d      	cbz	r5, 8013bbe <__ieee754_sqrt+0x62>
 8013ba6:	ee10 2a10 	vmov	r2, s0
 8013baa:	462b      	mov	r3, r5
 8013bac:	ee10 0a10 	vmov	r0, s0
 8013bb0:	f7ec fb6a 	bl	8000288 <__aeabi_dsub>
 8013bb4:	4602      	mov	r2, r0
 8013bb6:	460b      	mov	r3, r1
 8013bb8:	f7ec fe48 	bl	800084c <__aeabi_ddiv>
 8013bbc:	e7e6      	b.n	8013b8c <__ieee754_sqrt+0x30>
 8013bbe:	1512      	asrs	r2, r2, #20
 8013bc0:	d074      	beq.n	8013cac <__ieee754_sqrt+0x150>
 8013bc2:	07d4      	lsls	r4, r2, #31
 8013bc4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013bc8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8013bcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8013bd0:	bf5e      	ittt	pl
 8013bd2:	0fda      	lsrpl	r2, r3, #31
 8013bd4:	005b      	lslpl	r3, r3, #1
 8013bd6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8013bda:	2400      	movs	r4, #0
 8013bdc:	0fda      	lsrs	r2, r3, #31
 8013bde:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8013be2:	107f      	asrs	r7, r7, #1
 8013be4:	005b      	lsls	r3, r3, #1
 8013be6:	2516      	movs	r5, #22
 8013be8:	4620      	mov	r0, r4
 8013bea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013bee:	1886      	adds	r6, r0, r2
 8013bf0:	428e      	cmp	r6, r1
 8013bf2:	bfde      	ittt	le
 8013bf4:	1b89      	suble	r1, r1, r6
 8013bf6:	18b0      	addle	r0, r6, r2
 8013bf8:	18a4      	addle	r4, r4, r2
 8013bfa:	0049      	lsls	r1, r1, #1
 8013bfc:	3d01      	subs	r5, #1
 8013bfe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8013c02:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8013c06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013c0a:	d1f0      	bne.n	8013bee <__ieee754_sqrt+0x92>
 8013c0c:	462a      	mov	r2, r5
 8013c0e:	f04f 0e20 	mov.w	lr, #32
 8013c12:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013c16:	4281      	cmp	r1, r0
 8013c18:	eb06 0c05 	add.w	ip, r6, r5
 8013c1c:	dc02      	bgt.n	8013c24 <__ieee754_sqrt+0xc8>
 8013c1e:	d113      	bne.n	8013c48 <__ieee754_sqrt+0xec>
 8013c20:	459c      	cmp	ip, r3
 8013c22:	d811      	bhi.n	8013c48 <__ieee754_sqrt+0xec>
 8013c24:	f1bc 0f00 	cmp.w	ip, #0
 8013c28:	eb0c 0506 	add.w	r5, ip, r6
 8013c2c:	da43      	bge.n	8013cb6 <__ieee754_sqrt+0x15a>
 8013c2e:	2d00      	cmp	r5, #0
 8013c30:	db41      	blt.n	8013cb6 <__ieee754_sqrt+0x15a>
 8013c32:	f100 0801 	add.w	r8, r0, #1
 8013c36:	1a09      	subs	r1, r1, r0
 8013c38:	459c      	cmp	ip, r3
 8013c3a:	bf88      	it	hi
 8013c3c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8013c40:	eba3 030c 	sub.w	r3, r3, ip
 8013c44:	4432      	add	r2, r6
 8013c46:	4640      	mov	r0, r8
 8013c48:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8013c4c:	f1be 0e01 	subs.w	lr, lr, #1
 8013c50:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8013c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013c58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013c5c:	d1db      	bne.n	8013c16 <__ieee754_sqrt+0xba>
 8013c5e:	430b      	orrs	r3, r1
 8013c60:	d006      	beq.n	8013c70 <__ieee754_sqrt+0x114>
 8013c62:	1c50      	adds	r0, r2, #1
 8013c64:	bf13      	iteet	ne
 8013c66:	3201      	addne	r2, #1
 8013c68:	3401      	addeq	r4, #1
 8013c6a:	4672      	moveq	r2, lr
 8013c6c:	f022 0201 	bicne.w	r2, r2, #1
 8013c70:	1063      	asrs	r3, r4, #1
 8013c72:	0852      	lsrs	r2, r2, #1
 8013c74:	07e1      	lsls	r1, r4, #31
 8013c76:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013c7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013c7e:	bf48      	it	mi
 8013c80:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8013c84:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8013c88:	4614      	mov	r4, r2
 8013c8a:	e781      	b.n	8013b90 <__ieee754_sqrt+0x34>
 8013c8c:	0ad9      	lsrs	r1, r3, #11
 8013c8e:	3815      	subs	r0, #21
 8013c90:	055b      	lsls	r3, r3, #21
 8013c92:	2900      	cmp	r1, #0
 8013c94:	d0fa      	beq.n	8013c8c <__ieee754_sqrt+0x130>
 8013c96:	02cd      	lsls	r5, r1, #11
 8013c98:	d50a      	bpl.n	8013cb0 <__ieee754_sqrt+0x154>
 8013c9a:	f1c2 0420 	rsb	r4, r2, #32
 8013c9e:	fa23 f404 	lsr.w	r4, r3, r4
 8013ca2:	1e55      	subs	r5, r2, #1
 8013ca4:	4093      	lsls	r3, r2
 8013ca6:	4321      	orrs	r1, r4
 8013ca8:	1b42      	subs	r2, r0, r5
 8013caa:	e78a      	b.n	8013bc2 <__ieee754_sqrt+0x66>
 8013cac:	4610      	mov	r0, r2
 8013cae:	e7f0      	b.n	8013c92 <__ieee754_sqrt+0x136>
 8013cb0:	0049      	lsls	r1, r1, #1
 8013cb2:	3201      	adds	r2, #1
 8013cb4:	e7ef      	b.n	8013c96 <__ieee754_sqrt+0x13a>
 8013cb6:	4680      	mov	r8, r0
 8013cb8:	e7bd      	b.n	8013c36 <__ieee754_sqrt+0xda>
 8013cba:	bf00      	nop
 8013cbc:	7ff00000 	.word	0x7ff00000

08013cc0 <__ieee754_asinf>:
 8013cc0:	b538      	push	{r3, r4, r5, lr}
 8013cc2:	ee10 5a10 	vmov	r5, s0
 8013cc6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013cca:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013cce:	ed2d 8b04 	vpush	{d8-d9}
 8013cd2:	d10c      	bne.n	8013cee <__ieee754_asinf+0x2e>
 8013cd4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8013e4c <__ieee754_asinf+0x18c>
 8013cd8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8013e50 <__ieee754_asinf+0x190>
 8013cdc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013ce0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013ce4:	eeb0 0a67 	vmov.f32	s0, s15
 8013ce8:	ecbd 8b04 	vpop	{d8-d9}
 8013cec:	bd38      	pop	{r3, r4, r5, pc}
 8013cee:	dd04      	ble.n	8013cfa <__ieee754_asinf+0x3a>
 8013cf0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013cf4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013cf8:	e7f6      	b.n	8013ce8 <__ieee754_asinf+0x28>
 8013cfa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013cfe:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013d02:	da0b      	bge.n	8013d1c <__ieee754_asinf+0x5c>
 8013d04:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8013d08:	da52      	bge.n	8013db0 <__ieee754_asinf+0xf0>
 8013d0a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8013e54 <__ieee754_asinf+0x194>
 8013d0e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013d12:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d1a:	dce5      	bgt.n	8013ce8 <__ieee754_asinf+0x28>
 8013d1c:	f001 fa42 	bl	80151a4 <fabsf>
 8013d20:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8013d24:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8013d28:	ee20 8a08 	vmul.f32	s16, s0, s16
 8013d2c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8013e58 <__ieee754_asinf+0x198>
 8013d30:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8013e5c <__ieee754_asinf+0x19c>
 8013d34:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8013e60 <__ieee754_asinf+0x1a0>
 8013d38:	eea8 7a27 	vfma.f32	s14, s16, s15
 8013d3c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8013e64 <__ieee754_asinf+0x1a4>
 8013d40:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013d44:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8013e68 <__ieee754_asinf+0x1a8>
 8013d48:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013d4c:	eddf 7a47 	vldr	s15, [pc, #284]	; 8013e6c <__ieee754_asinf+0x1ac>
 8013d50:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013d54:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8013e70 <__ieee754_asinf+0x1b0>
 8013d58:	eea7 9a88 	vfma.f32	s18, s15, s16
 8013d5c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8013e74 <__ieee754_asinf+0x1b4>
 8013d60:	eee8 7a07 	vfma.f32	s15, s16, s14
 8013d64:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8013e78 <__ieee754_asinf+0x1b8>
 8013d68:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013d6c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8013e7c <__ieee754_asinf+0x1bc>
 8013d70:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013d74:	eeb0 0a48 	vmov.f32	s0, s16
 8013d78:	eee7 8a88 	vfma.f32	s17, s15, s16
 8013d7c:	f000 fd30 	bl	80147e0 <__ieee754_sqrtf>
 8013d80:	4b3f      	ldr	r3, [pc, #252]	; (8013e80 <__ieee754_asinf+0x1c0>)
 8013d82:	ee29 9a08 	vmul.f32	s18, s18, s16
 8013d86:	429c      	cmp	r4, r3
 8013d88:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8013d8c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013d90:	dd3d      	ble.n	8013e0e <__ieee754_asinf+0x14e>
 8013d92:	eea0 0a06 	vfma.f32	s0, s0, s12
 8013d96:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8013e84 <__ieee754_asinf+0x1c4>
 8013d9a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8013d9e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8013e50 <__ieee754_asinf+0x190>
 8013da2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013da6:	2d00      	cmp	r5, #0
 8013da8:	bfd8      	it	le
 8013daa:	eeb1 0a40 	vnegle.f32	s0, s0
 8013dae:	e79b      	b.n	8013ce8 <__ieee754_asinf+0x28>
 8013db0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013db4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8013e58 <__ieee754_asinf+0x198>
 8013db8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8013e5c <__ieee754_asinf+0x19c>
 8013dbc:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8013e70 <__ieee754_asinf+0x1b0>
 8013dc0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013dc4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8013e64 <__ieee754_asinf+0x1a4>
 8013dc8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013dcc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8013e68 <__ieee754_asinf+0x1a8>
 8013dd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013dd4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8013e6c <__ieee754_asinf+0x1ac>
 8013dd8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013ddc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8013e60 <__ieee754_asinf+0x1a0>
 8013de0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013de4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8013e74 <__ieee754_asinf+0x1b4>
 8013de8:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013dec:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8013e78 <__ieee754_asinf+0x1b8>
 8013df0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013df4:	eddf 6a21 	vldr	s13, [pc, #132]	; 8013e7c <__ieee754_asinf+0x1bc>
 8013df8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013dfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013e00:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8013e04:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013e08:	eea0 0a27 	vfma.f32	s0, s0, s15
 8013e0c:	e76c      	b.n	8013ce8 <__ieee754_asinf+0x28>
 8013e0e:	ee10 3a10 	vmov	r3, s0
 8013e12:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013e16:	f023 030f 	bic.w	r3, r3, #15
 8013e1a:	ee07 3a10 	vmov	s14, r3
 8013e1e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8013e22:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013e26:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013e2a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8013e2e:	eddf 7a07 	vldr	s15, [pc, #28]	; 8013e4c <__ieee754_asinf+0x18c>
 8013e32:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8013e36:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8013e3a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8013e88 <__ieee754_asinf+0x1c8>
 8013e3e:	eeb0 6a40 	vmov.f32	s12, s0
 8013e42:	eea7 6a66 	vfms.f32	s12, s14, s13
 8013e46:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013e4a:	e7aa      	b.n	8013da2 <__ieee754_asinf+0xe2>
 8013e4c:	b33bbd2e 	.word	0xb33bbd2e
 8013e50:	3fc90fdb 	.word	0x3fc90fdb
 8013e54:	7149f2ca 	.word	0x7149f2ca
 8013e58:	3811ef08 	.word	0x3811ef08
 8013e5c:	3a4f7f04 	.word	0x3a4f7f04
 8013e60:	3e2aaaab 	.word	0x3e2aaaab
 8013e64:	bd241146 	.word	0xbd241146
 8013e68:	3e4e0aa8 	.word	0x3e4e0aa8
 8013e6c:	bea6b090 	.word	0xbea6b090
 8013e70:	3d9dc62e 	.word	0x3d9dc62e
 8013e74:	bf303361 	.word	0xbf303361
 8013e78:	4001572d 	.word	0x4001572d
 8013e7c:	c019d139 	.word	0xc019d139
 8013e80:	3f799999 	.word	0x3f799999
 8013e84:	333bbd2e 	.word	0x333bbd2e
 8013e88:	3f490fdb 	.word	0x3f490fdb

08013e8c <__ieee754_atan2f>:
 8013e8c:	ee10 2a90 	vmov	r2, s1
 8013e90:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013e94:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013e98:	b510      	push	{r4, lr}
 8013e9a:	eef0 7a40 	vmov.f32	s15, s0
 8013e9e:	dc06      	bgt.n	8013eae <__ieee754_atan2f+0x22>
 8013ea0:	ee10 0a10 	vmov	r0, s0
 8013ea4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8013ea8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013eac:	dd04      	ble.n	8013eb8 <__ieee754_atan2f+0x2c>
 8013eae:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8013eb6:	bd10      	pop	{r4, pc}
 8013eb8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013ebc:	d103      	bne.n	8013ec6 <__ieee754_atan2f+0x3a>
 8013ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ec2:	f001 b89b 	b.w	8014ffc <atanf>
 8013ec6:	1794      	asrs	r4, r2, #30
 8013ec8:	f004 0402 	and.w	r4, r4, #2
 8013ecc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8013ed0:	b943      	cbnz	r3, 8013ee4 <__ieee754_atan2f+0x58>
 8013ed2:	2c02      	cmp	r4, #2
 8013ed4:	d05e      	beq.n	8013f94 <__ieee754_atan2f+0x108>
 8013ed6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013fa8 <__ieee754_atan2f+0x11c>
 8013eda:	2c03      	cmp	r4, #3
 8013edc:	bf08      	it	eq
 8013ede:	eef0 7a47 	vmoveq.f32	s15, s14
 8013ee2:	e7e6      	b.n	8013eb2 <__ieee754_atan2f+0x26>
 8013ee4:	b941      	cbnz	r1, 8013ef8 <__ieee754_atan2f+0x6c>
 8013ee6:	eddf 7a31 	vldr	s15, [pc, #196]	; 8013fac <__ieee754_atan2f+0x120>
 8013eea:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8013fb0 <__ieee754_atan2f+0x124>
 8013eee:	2800      	cmp	r0, #0
 8013ef0:	bfb8      	it	lt
 8013ef2:	eef0 7a40 	vmovlt.f32	s15, s0
 8013ef6:	e7dc      	b.n	8013eb2 <__ieee754_atan2f+0x26>
 8013ef8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013efc:	d110      	bne.n	8013f20 <__ieee754_atan2f+0x94>
 8013efe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013f02:	f104 34ff 	add.w	r4, r4, #4294967295
 8013f06:	d107      	bne.n	8013f18 <__ieee754_atan2f+0x8c>
 8013f08:	2c02      	cmp	r4, #2
 8013f0a:	d846      	bhi.n	8013f9a <__ieee754_atan2f+0x10e>
 8013f0c:	4b29      	ldr	r3, [pc, #164]	; (8013fb4 <__ieee754_atan2f+0x128>)
 8013f0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013f12:	edd4 7a00 	vldr	s15, [r4]
 8013f16:	e7cc      	b.n	8013eb2 <__ieee754_atan2f+0x26>
 8013f18:	2c02      	cmp	r4, #2
 8013f1a:	d841      	bhi.n	8013fa0 <__ieee754_atan2f+0x114>
 8013f1c:	4b26      	ldr	r3, [pc, #152]	; (8013fb8 <__ieee754_atan2f+0x12c>)
 8013f1e:	e7f6      	b.n	8013f0e <__ieee754_atan2f+0x82>
 8013f20:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013f24:	d0df      	beq.n	8013ee6 <__ieee754_atan2f+0x5a>
 8013f26:	1a5b      	subs	r3, r3, r1
 8013f28:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8013f2c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8013f30:	da1a      	bge.n	8013f68 <__ieee754_atan2f+0xdc>
 8013f32:	2a00      	cmp	r2, #0
 8013f34:	da01      	bge.n	8013f3a <__ieee754_atan2f+0xae>
 8013f36:	313c      	adds	r1, #60	; 0x3c
 8013f38:	db19      	blt.n	8013f6e <__ieee754_atan2f+0xe2>
 8013f3a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8013f3e:	f001 f931 	bl	80151a4 <fabsf>
 8013f42:	f001 f85b 	bl	8014ffc <atanf>
 8013f46:	eef0 7a40 	vmov.f32	s15, s0
 8013f4a:	2c01      	cmp	r4, #1
 8013f4c:	d012      	beq.n	8013f74 <__ieee754_atan2f+0xe8>
 8013f4e:	2c02      	cmp	r4, #2
 8013f50:	d017      	beq.n	8013f82 <__ieee754_atan2f+0xf6>
 8013f52:	2c00      	cmp	r4, #0
 8013f54:	d0ad      	beq.n	8013eb2 <__ieee754_atan2f+0x26>
 8013f56:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8013fbc <__ieee754_atan2f+0x130>
 8013f5a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013f5e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8013fc0 <__ieee754_atan2f+0x134>
 8013f62:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013f66:	e7a4      	b.n	8013eb2 <__ieee754_atan2f+0x26>
 8013f68:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013fac <__ieee754_atan2f+0x120>
 8013f6c:	e7ed      	b.n	8013f4a <__ieee754_atan2f+0xbe>
 8013f6e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013fc4 <__ieee754_atan2f+0x138>
 8013f72:	e7ea      	b.n	8013f4a <__ieee754_atan2f+0xbe>
 8013f74:	ee17 3a90 	vmov	r3, s15
 8013f78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013f7c:	ee07 3a90 	vmov	s15, r3
 8013f80:	e797      	b.n	8013eb2 <__ieee754_atan2f+0x26>
 8013f82:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013fbc <__ieee754_atan2f+0x130>
 8013f86:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013f8a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8013fc0 <__ieee754_atan2f+0x134>
 8013f8e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013f92:	e78e      	b.n	8013eb2 <__ieee754_atan2f+0x26>
 8013f94:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8013fc0 <__ieee754_atan2f+0x134>
 8013f98:	e78b      	b.n	8013eb2 <__ieee754_atan2f+0x26>
 8013f9a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013fc8 <__ieee754_atan2f+0x13c>
 8013f9e:	e788      	b.n	8013eb2 <__ieee754_atan2f+0x26>
 8013fa0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013fc4 <__ieee754_atan2f+0x138>
 8013fa4:	e785      	b.n	8013eb2 <__ieee754_atan2f+0x26>
 8013fa6:	bf00      	nop
 8013fa8:	c0490fdb 	.word	0xc0490fdb
 8013fac:	3fc90fdb 	.word	0x3fc90fdb
 8013fb0:	bfc90fdb 	.word	0xbfc90fdb
 8013fb4:	08015920 	.word	0x08015920
 8013fb8:	0801592c 	.word	0x0801592c
 8013fbc:	33bbbd2e 	.word	0x33bbbd2e
 8013fc0:	40490fdb 	.word	0x40490fdb
 8013fc4:	00000000 	.word	0x00000000
 8013fc8:	3f490fdb 	.word	0x3f490fdb

08013fcc <__ieee754_powf>:
 8013fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fd0:	ee10 4a90 	vmov	r4, s1
 8013fd4:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8013fd8:	ed2d 8b02 	vpush	{d8}
 8013fdc:	ee10 6a10 	vmov	r6, s0
 8013fe0:	eeb0 8a40 	vmov.f32	s16, s0
 8013fe4:	eef0 8a60 	vmov.f32	s17, s1
 8013fe8:	d10c      	bne.n	8014004 <__ieee754_powf+0x38>
 8013fea:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8013fee:	0076      	lsls	r6, r6, #1
 8013ff0:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8013ff4:	f240 8296 	bls.w	8014524 <__ieee754_powf+0x558>
 8013ff8:	ee38 0a28 	vadd.f32	s0, s16, s17
 8013ffc:	ecbd 8b02 	vpop	{d8}
 8014000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014004:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8014008:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801400c:	dcf4      	bgt.n	8013ff8 <__ieee754_powf+0x2c>
 801400e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8014012:	dd08      	ble.n	8014026 <__ieee754_powf+0x5a>
 8014014:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8014018:	d1ee      	bne.n	8013ff8 <__ieee754_powf+0x2c>
 801401a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801401e:	0064      	lsls	r4, r4, #1
 8014020:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8014024:	e7e6      	b.n	8013ff4 <__ieee754_powf+0x28>
 8014026:	2e00      	cmp	r6, #0
 8014028:	da20      	bge.n	801406c <__ieee754_powf+0xa0>
 801402a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 801402e:	da2d      	bge.n	801408c <__ieee754_powf+0xc0>
 8014030:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8014034:	f2c0 827f 	blt.w	8014536 <__ieee754_powf+0x56a>
 8014038:	ea4f 53e8 	mov.w	r3, r8, asr #23
 801403c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8014040:	fa48 f703 	asr.w	r7, r8, r3
 8014044:	fa07 f303 	lsl.w	r3, r7, r3
 8014048:	4543      	cmp	r3, r8
 801404a:	f040 8274 	bne.w	8014536 <__ieee754_powf+0x56a>
 801404e:	f007 0701 	and.w	r7, r7, #1
 8014052:	f1c7 0702 	rsb	r7, r7, #2
 8014056:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801405a:	d11f      	bne.n	801409c <__ieee754_powf+0xd0>
 801405c:	2c00      	cmp	r4, #0
 801405e:	f280 8267 	bge.w	8014530 <__ieee754_powf+0x564>
 8014062:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014066:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801406a:	e7c7      	b.n	8013ffc <__ieee754_powf+0x30>
 801406c:	2700      	movs	r7, #0
 801406e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8014072:	d1f0      	bne.n	8014056 <__ieee754_powf+0x8a>
 8014074:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8014078:	f000 8254 	beq.w	8014524 <__ieee754_powf+0x558>
 801407c:	dd08      	ble.n	8014090 <__ieee754_powf+0xc4>
 801407e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8014388 <__ieee754_powf+0x3bc>
 8014082:	2c00      	cmp	r4, #0
 8014084:	bfa8      	it	ge
 8014086:	eeb0 0a68 	vmovge.f32	s0, s17
 801408a:	e7b7      	b.n	8013ffc <__ieee754_powf+0x30>
 801408c:	2702      	movs	r7, #2
 801408e:	e7ee      	b.n	801406e <__ieee754_powf+0xa2>
 8014090:	2c00      	cmp	r4, #0
 8014092:	f280 824a 	bge.w	801452a <__ieee754_powf+0x55e>
 8014096:	eeb1 0a68 	vneg.f32	s0, s17
 801409a:	e7af      	b.n	8013ffc <__ieee754_powf+0x30>
 801409c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80140a0:	d102      	bne.n	80140a8 <__ieee754_powf+0xdc>
 80140a2:	ee28 0a08 	vmul.f32	s0, s16, s16
 80140a6:	e7a9      	b.n	8013ffc <__ieee754_powf+0x30>
 80140a8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80140ac:	eeb0 0a48 	vmov.f32	s0, s16
 80140b0:	d107      	bne.n	80140c2 <__ieee754_powf+0xf6>
 80140b2:	2e00      	cmp	r6, #0
 80140b4:	db05      	blt.n	80140c2 <__ieee754_powf+0xf6>
 80140b6:	ecbd 8b02 	vpop	{d8}
 80140ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140be:	f000 bb8f 	b.w	80147e0 <__ieee754_sqrtf>
 80140c2:	f001 f86f 	bl	80151a4 <fabsf>
 80140c6:	b125      	cbz	r5, 80140d2 <__ieee754_powf+0x106>
 80140c8:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80140cc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80140d0:	d116      	bne.n	8014100 <__ieee754_powf+0x134>
 80140d2:	2c00      	cmp	r4, #0
 80140d4:	bfbc      	itt	lt
 80140d6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80140da:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80140de:	2e00      	cmp	r6, #0
 80140e0:	da8c      	bge.n	8013ffc <__ieee754_powf+0x30>
 80140e2:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80140e6:	ea55 0307 	orrs.w	r3, r5, r7
 80140ea:	d104      	bne.n	80140f6 <__ieee754_powf+0x12a>
 80140ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 80140f0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80140f4:	e782      	b.n	8013ffc <__ieee754_powf+0x30>
 80140f6:	2f01      	cmp	r7, #1
 80140f8:	d180      	bne.n	8013ffc <__ieee754_powf+0x30>
 80140fa:	eeb1 0a40 	vneg.f32	s0, s0
 80140fe:	e77d      	b.n	8013ffc <__ieee754_powf+0x30>
 8014100:	0ff0      	lsrs	r0, r6, #31
 8014102:	3801      	subs	r0, #1
 8014104:	ea57 0300 	orrs.w	r3, r7, r0
 8014108:	d104      	bne.n	8014114 <__ieee754_powf+0x148>
 801410a:	ee38 8a48 	vsub.f32	s16, s16, s16
 801410e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8014112:	e773      	b.n	8013ffc <__ieee754_powf+0x30>
 8014114:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8014118:	dd74      	ble.n	8014204 <__ieee754_powf+0x238>
 801411a:	4b9c      	ldr	r3, [pc, #624]	; (801438c <__ieee754_powf+0x3c0>)
 801411c:	429d      	cmp	r5, r3
 801411e:	dc08      	bgt.n	8014132 <__ieee754_powf+0x166>
 8014120:	2c00      	cmp	r4, #0
 8014122:	da0b      	bge.n	801413c <__ieee754_powf+0x170>
 8014124:	2000      	movs	r0, #0
 8014126:	ecbd 8b02 	vpop	{d8}
 801412a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801412e:	f000 bec5 	b.w	8014ebc <__math_oflowf>
 8014132:	4b97      	ldr	r3, [pc, #604]	; (8014390 <__ieee754_powf+0x3c4>)
 8014134:	429d      	cmp	r5, r3
 8014136:	dd08      	ble.n	801414a <__ieee754_powf+0x17e>
 8014138:	2c00      	cmp	r4, #0
 801413a:	dcf3      	bgt.n	8014124 <__ieee754_powf+0x158>
 801413c:	2000      	movs	r0, #0
 801413e:	ecbd 8b02 	vpop	{d8}
 8014142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014146:	f000 beb3 	b.w	8014eb0 <__math_uflowf>
 801414a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801414e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014152:	eddf 6a90 	vldr	s13, [pc, #576]	; 8014394 <__ieee754_powf+0x3c8>
 8014156:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801415a:	eee0 6a67 	vfms.f32	s13, s0, s15
 801415e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014162:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8014166:	ee20 7a00 	vmul.f32	s14, s0, s0
 801416a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801416e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8014398 <__ieee754_powf+0x3cc>
 8014172:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8014176:	ed9f 7a89 	vldr	s14, [pc, #548]	; 801439c <__ieee754_powf+0x3d0>
 801417a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801417e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80143a0 <__ieee754_powf+0x3d4>
 8014182:	eef0 6a67 	vmov.f32	s13, s15
 8014186:	eee0 6a07 	vfma.f32	s13, s0, s14
 801418a:	ee16 3a90 	vmov	r3, s13
 801418e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014192:	f023 030f 	bic.w	r3, r3, #15
 8014196:	ee00 3a90 	vmov	s1, r3
 801419a:	eee0 0a47 	vfms.f32	s1, s0, s14
 801419e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80141a2:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80141a6:	f024 040f 	bic.w	r4, r4, #15
 80141aa:	ee07 4a10 	vmov	s14, r4
 80141ae:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80141b2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80141b6:	ee07 3a90 	vmov	s15, r3
 80141ba:	eee7 0a27 	vfma.f32	s1, s14, s15
 80141be:	3f01      	subs	r7, #1
 80141c0:	ea57 0200 	orrs.w	r2, r7, r0
 80141c4:	ee07 4a10 	vmov	s14, r4
 80141c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80141cc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80141d0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80141d4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80141d8:	ee17 4a10 	vmov	r4, s14
 80141dc:	bf08      	it	eq
 80141de:	eeb0 8a40 	vmoveq.f32	s16, s0
 80141e2:	2c00      	cmp	r4, #0
 80141e4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80141e8:	f340 817e 	ble.w	80144e8 <__ieee754_powf+0x51c>
 80141ec:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80141f0:	f340 80f8 	ble.w	80143e4 <__ieee754_powf+0x418>
 80141f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80141f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141fc:	bf4c      	ite	mi
 80141fe:	2001      	movmi	r0, #1
 8014200:	2000      	movpl	r0, #0
 8014202:	e790      	b.n	8014126 <__ieee754_powf+0x15a>
 8014204:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8014208:	bf01      	itttt	eq
 801420a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80143a4 <__ieee754_powf+0x3d8>
 801420e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8014212:	f06f 0217 	mvneq.w	r2, #23
 8014216:	ee17 5a90 	vmoveq	r5, s15
 801421a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801421e:	bf18      	it	ne
 8014220:	2200      	movne	r2, #0
 8014222:	3b7f      	subs	r3, #127	; 0x7f
 8014224:	4413      	add	r3, r2
 8014226:	4a60      	ldr	r2, [pc, #384]	; (80143a8 <__ieee754_powf+0x3dc>)
 8014228:	f3c5 0516 	ubfx	r5, r5, #0, #23
 801422c:	4295      	cmp	r5, r2
 801422e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8014232:	dd06      	ble.n	8014242 <__ieee754_powf+0x276>
 8014234:	4a5d      	ldr	r2, [pc, #372]	; (80143ac <__ieee754_powf+0x3e0>)
 8014236:	4295      	cmp	r5, r2
 8014238:	f340 80a4 	ble.w	8014384 <__ieee754_powf+0x3b8>
 801423c:	3301      	adds	r3, #1
 801423e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8014242:	2500      	movs	r5, #0
 8014244:	4a5a      	ldr	r2, [pc, #360]	; (80143b0 <__ieee754_powf+0x3e4>)
 8014246:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801424a:	ee07 1a90 	vmov	s15, r1
 801424e:	ed92 7a00 	vldr	s14, [r2]
 8014252:	4a58      	ldr	r2, [pc, #352]	; (80143b4 <__ieee754_powf+0x3e8>)
 8014254:	ee37 6a27 	vadd.f32	s12, s14, s15
 8014258:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801425c:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8014260:	1049      	asrs	r1, r1, #1
 8014262:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8014266:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801426a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 801426e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8014272:	ee06 1a10 	vmov	s12, r1
 8014276:	ee65 4a26 	vmul.f32	s9, s10, s13
 801427a:	ee36 7a47 	vsub.f32	s14, s12, s14
 801427e:	ee14 6a90 	vmov	r6, s9
 8014282:	4016      	ands	r6, r2
 8014284:	ee05 6a90 	vmov	s11, r6
 8014288:	eea5 5ac6 	vfms.f32	s10, s11, s12
 801428c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014290:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80143b8 <__ieee754_powf+0x3ec>
 8014294:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8014298:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801429c:	ee25 6a26 	vmul.f32	s12, s10, s13
 80142a0:	eddf 6a46 	vldr	s13, [pc, #280]	; 80143bc <__ieee754_powf+0x3f0>
 80142a4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80142a8:	eddf 6a45 	vldr	s13, [pc, #276]	; 80143c0 <__ieee754_powf+0x3f4>
 80142ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 80142b0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014394 <__ieee754_powf+0x3c8>
 80142b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80142b8:	eddf 6a42 	vldr	s13, [pc, #264]	; 80143c4 <__ieee754_powf+0x3f8>
 80142bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80142c0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80143c8 <__ieee754_powf+0x3fc>
 80142c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80142c8:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80142cc:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80142d0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80142d4:	eee5 6a07 	vfma.f32	s13, s10, s14
 80142d8:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80142dc:	eef0 7a45 	vmov.f32	s15, s10
 80142e0:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80142e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80142e8:	ee17 1a90 	vmov	r1, s15
 80142ec:	4011      	ands	r1, r2
 80142ee:	ee07 1a90 	vmov	s15, r1
 80142f2:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80142f6:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80142fa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80142fe:	ee27 7a24 	vmul.f32	s14, s14, s9
 8014302:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014306:	eeb0 6a47 	vmov.f32	s12, s14
 801430a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801430e:	ee16 1a10 	vmov	r1, s12
 8014312:	4011      	ands	r1, r2
 8014314:	ee06 1a90 	vmov	s13, r1
 8014318:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801431c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80143cc <__ieee754_powf+0x400>
 8014320:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80143d0 <__ieee754_powf+0x404>
 8014324:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014328:	ee06 1a10 	vmov	s12, r1
 801432c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014330:	eddf 7a28 	vldr	s15, [pc, #160]	; 80143d4 <__ieee754_powf+0x408>
 8014334:	4928      	ldr	r1, [pc, #160]	; (80143d8 <__ieee754_powf+0x40c>)
 8014336:	eea6 7a27 	vfma.f32	s14, s12, s15
 801433a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801433e:	edd1 7a00 	vldr	s15, [r1]
 8014342:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014346:	ee07 3a90 	vmov	s15, r3
 801434a:	4b24      	ldr	r3, [pc, #144]	; (80143dc <__ieee754_powf+0x410>)
 801434c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014350:	eef0 7a47 	vmov.f32	s15, s14
 8014354:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014358:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801435c:	edd5 0a00 	vldr	s1, [r5]
 8014360:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014368:	ee17 3a90 	vmov	r3, s15
 801436c:	4013      	ands	r3, r2
 801436e:	ee07 3a90 	vmov	s15, r3
 8014372:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8014376:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801437a:	eee6 6a65 	vfms.f32	s13, s12, s11
 801437e:	ee77 7a66 	vsub.f32	s15, s14, s13
 8014382:	e70e      	b.n	80141a2 <__ieee754_powf+0x1d6>
 8014384:	2501      	movs	r5, #1
 8014386:	e75d      	b.n	8014244 <__ieee754_powf+0x278>
 8014388:	00000000 	.word	0x00000000
 801438c:	3f7ffff3 	.word	0x3f7ffff3
 8014390:	3f800007 	.word	0x3f800007
 8014394:	3eaaaaab 	.word	0x3eaaaaab
 8014398:	3fb8aa3b 	.word	0x3fb8aa3b
 801439c:	36eca570 	.word	0x36eca570
 80143a0:	3fb8aa00 	.word	0x3fb8aa00
 80143a4:	4b800000 	.word	0x4b800000
 80143a8:	001cc471 	.word	0x001cc471
 80143ac:	005db3d6 	.word	0x005db3d6
 80143b0:	08015938 	.word	0x08015938
 80143b4:	fffff000 	.word	0xfffff000
 80143b8:	3e6c3255 	.word	0x3e6c3255
 80143bc:	3e53f142 	.word	0x3e53f142
 80143c0:	3e8ba305 	.word	0x3e8ba305
 80143c4:	3edb6db7 	.word	0x3edb6db7
 80143c8:	3f19999a 	.word	0x3f19999a
 80143cc:	3f76384f 	.word	0x3f76384f
 80143d0:	3f763800 	.word	0x3f763800
 80143d4:	369dc3a0 	.word	0x369dc3a0
 80143d8:	08015948 	.word	0x08015948
 80143dc:	08015940 	.word	0x08015940
 80143e0:	3338aa3c 	.word	0x3338aa3c
 80143e4:	f040 8095 	bne.w	8014512 <__ieee754_powf+0x546>
 80143e8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80143e0 <__ieee754_powf+0x414>
 80143ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80143f0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80143f4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80143f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143fc:	f73f aefa 	bgt.w	80141f4 <__ieee754_powf+0x228>
 8014400:	15db      	asrs	r3, r3, #23
 8014402:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8014406:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801440a:	4103      	asrs	r3, r0
 801440c:	4423      	add	r3, r4
 801440e:	494b      	ldr	r1, [pc, #300]	; (801453c <__ieee754_powf+0x570>)
 8014410:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014414:	3a7f      	subs	r2, #127	; 0x7f
 8014416:	4111      	asrs	r1, r2
 8014418:	ea23 0101 	bic.w	r1, r3, r1
 801441c:	ee07 1a10 	vmov	s14, r1
 8014420:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8014424:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8014428:	f1c2 0217 	rsb	r2, r2, #23
 801442c:	4110      	asrs	r0, r2
 801442e:	2c00      	cmp	r4, #0
 8014430:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014434:	bfb8      	it	lt
 8014436:	4240      	neglt	r0, r0
 8014438:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801443c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8014540 <__ieee754_powf+0x574>
 8014440:	eddf 6a40 	vldr	s13, [pc, #256]	; 8014544 <__ieee754_powf+0x578>
 8014444:	ee17 3a10 	vmov	r3, s14
 8014448:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801444c:	f023 030f 	bic.w	r3, r3, #15
 8014450:	ee07 3a10 	vmov	s14, r3
 8014454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014458:	ee27 0a00 	vmul.f32	s0, s14, s0
 801445c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014460:	eddf 7a39 	vldr	s15, [pc, #228]	; 8014548 <__ieee754_powf+0x57c>
 8014464:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8014468:	eef0 7a40 	vmov.f32	s15, s0
 801446c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014470:	eeb0 6a67 	vmov.f32	s12, s15
 8014474:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014478:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801447c:	ee30 0a46 	vsub.f32	s0, s0, s12
 8014480:	eddf 6a32 	vldr	s13, [pc, #200]	; 801454c <__ieee754_powf+0x580>
 8014484:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8014550 <__ieee754_powf+0x584>
 8014488:	eee7 6a06 	vfma.f32	s13, s14, s12
 801448c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8014554 <__ieee754_powf+0x588>
 8014490:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014494:	eddf 6a30 	vldr	s13, [pc, #192]	; 8014558 <__ieee754_powf+0x58c>
 8014498:	eee6 6a07 	vfma.f32	s13, s12, s14
 801449c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801455c <__ieee754_powf+0x590>
 80144a0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80144a4:	eef0 6a67 	vmov.f32	s13, s15
 80144a8:	eee6 6a47 	vfms.f32	s13, s12, s14
 80144ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80144b0:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80144b4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80144b8:	eea7 0a80 	vfma.f32	s0, s15, s0
 80144bc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80144c0:	ee37 0a40 	vsub.f32	s0, s14, s0
 80144c4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80144c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80144cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80144d0:	ee10 3a10 	vmov	r3, s0
 80144d4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80144d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80144dc:	da1f      	bge.n	801451e <__ieee754_powf+0x552>
 80144de:	f000 febd 	bl	801525c <scalbnf>
 80144e2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80144e6:	e589      	b.n	8013ffc <__ieee754_powf+0x30>
 80144e8:	4a1d      	ldr	r2, [pc, #116]	; (8014560 <__ieee754_powf+0x594>)
 80144ea:	4293      	cmp	r3, r2
 80144ec:	dd07      	ble.n	80144fe <__ieee754_powf+0x532>
 80144ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80144f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144f6:	bf4c      	ite	mi
 80144f8:	2001      	movmi	r0, #1
 80144fa:	2000      	movpl	r0, #0
 80144fc:	e61f      	b.n	801413e <__ieee754_powf+0x172>
 80144fe:	d108      	bne.n	8014512 <__ieee754_powf+0x546>
 8014500:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014504:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8014508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801450c:	f6ff af78 	blt.w	8014400 <__ieee754_powf+0x434>
 8014510:	e7ed      	b.n	80144ee <__ieee754_powf+0x522>
 8014512:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8014516:	f73f af73 	bgt.w	8014400 <__ieee754_powf+0x434>
 801451a:	2000      	movs	r0, #0
 801451c:	e78c      	b.n	8014438 <__ieee754_powf+0x46c>
 801451e:	ee00 3a10 	vmov	s0, r3
 8014522:	e7de      	b.n	80144e2 <__ieee754_powf+0x516>
 8014524:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014528:	e568      	b.n	8013ffc <__ieee754_powf+0x30>
 801452a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8014564 <__ieee754_powf+0x598>
 801452e:	e565      	b.n	8013ffc <__ieee754_powf+0x30>
 8014530:	eeb0 0a48 	vmov.f32	s0, s16
 8014534:	e562      	b.n	8013ffc <__ieee754_powf+0x30>
 8014536:	2700      	movs	r7, #0
 8014538:	e58d      	b.n	8014056 <__ieee754_powf+0x8a>
 801453a:	bf00      	nop
 801453c:	007fffff 	.word	0x007fffff
 8014540:	35bfbe8c 	.word	0x35bfbe8c
 8014544:	3f317200 	.word	0x3f317200
 8014548:	3f317218 	.word	0x3f317218
 801454c:	b5ddea0e 	.word	0xb5ddea0e
 8014550:	3331bb4c 	.word	0x3331bb4c
 8014554:	388ab355 	.word	0x388ab355
 8014558:	bb360b61 	.word	0xbb360b61
 801455c:	3e2aaaab 	.word	0x3e2aaaab
 8014560:	43160000 	.word	0x43160000
 8014564:	00000000 	.word	0x00000000

08014568 <__ieee754_rem_pio2f>:
 8014568:	b5f0      	push	{r4, r5, r6, r7, lr}
 801456a:	ee10 6a10 	vmov	r6, s0
 801456e:	4b8e      	ldr	r3, [pc, #568]	; (80147a8 <__ieee754_rem_pio2f+0x240>)
 8014570:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8014574:	429d      	cmp	r5, r3
 8014576:	b087      	sub	sp, #28
 8014578:	eef0 7a40 	vmov.f32	s15, s0
 801457c:	4604      	mov	r4, r0
 801457e:	dc05      	bgt.n	801458c <__ieee754_rem_pio2f+0x24>
 8014580:	2300      	movs	r3, #0
 8014582:	ed80 0a00 	vstr	s0, [r0]
 8014586:	6043      	str	r3, [r0, #4]
 8014588:	2000      	movs	r0, #0
 801458a:	e01a      	b.n	80145c2 <__ieee754_rem_pio2f+0x5a>
 801458c:	4b87      	ldr	r3, [pc, #540]	; (80147ac <__ieee754_rem_pio2f+0x244>)
 801458e:	429d      	cmp	r5, r3
 8014590:	dc46      	bgt.n	8014620 <__ieee754_rem_pio2f+0xb8>
 8014592:	2e00      	cmp	r6, #0
 8014594:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80147b0 <__ieee754_rem_pio2f+0x248>
 8014598:	4b86      	ldr	r3, [pc, #536]	; (80147b4 <__ieee754_rem_pio2f+0x24c>)
 801459a:	f025 050f 	bic.w	r5, r5, #15
 801459e:	dd1f      	ble.n	80145e0 <__ieee754_rem_pio2f+0x78>
 80145a0:	429d      	cmp	r5, r3
 80145a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80145a6:	d00e      	beq.n	80145c6 <__ieee754_rem_pio2f+0x5e>
 80145a8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80147b8 <__ieee754_rem_pio2f+0x250>
 80145ac:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80145b0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80145b4:	ed80 0a00 	vstr	s0, [r0]
 80145b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80145bc:	2001      	movs	r0, #1
 80145be:	edc4 7a01 	vstr	s15, [r4, #4]
 80145c2:	b007      	add	sp, #28
 80145c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145c6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80147bc <__ieee754_rem_pio2f+0x254>
 80145ca:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80147c0 <__ieee754_rem_pio2f+0x258>
 80145ce:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80145d2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80145d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80145da:	edc0 6a00 	vstr	s13, [r0]
 80145de:	e7eb      	b.n	80145b8 <__ieee754_rem_pio2f+0x50>
 80145e0:	429d      	cmp	r5, r3
 80145e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80145e6:	d00e      	beq.n	8014606 <__ieee754_rem_pio2f+0x9e>
 80145e8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80147b8 <__ieee754_rem_pio2f+0x250>
 80145ec:	ee37 0a87 	vadd.f32	s0, s15, s14
 80145f0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80145f4:	ed80 0a00 	vstr	s0, [r0]
 80145f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80145fc:	f04f 30ff 	mov.w	r0, #4294967295
 8014600:	edc4 7a01 	vstr	s15, [r4, #4]
 8014604:	e7dd      	b.n	80145c2 <__ieee754_rem_pio2f+0x5a>
 8014606:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80147bc <__ieee754_rem_pio2f+0x254>
 801460a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80147c0 <__ieee754_rem_pio2f+0x258>
 801460e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014612:	ee77 6a87 	vadd.f32	s13, s15, s14
 8014616:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801461a:	edc0 6a00 	vstr	s13, [r0]
 801461e:	e7eb      	b.n	80145f8 <__ieee754_rem_pio2f+0x90>
 8014620:	4b68      	ldr	r3, [pc, #416]	; (80147c4 <__ieee754_rem_pio2f+0x25c>)
 8014622:	429d      	cmp	r5, r3
 8014624:	dc72      	bgt.n	801470c <__ieee754_rem_pio2f+0x1a4>
 8014626:	f000 fdbd 	bl	80151a4 <fabsf>
 801462a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80147c8 <__ieee754_rem_pio2f+0x260>
 801462e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014632:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801463a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801463e:	ee17 0a90 	vmov	r0, s15
 8014642:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80147b0 <__ieee754_rem_pio2f+0x248>
 8014646:	eea7 0a67 	vfms.f32	s0, s14, s15
 801464a:	281f      	cmp	r0, #31
 801464c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80147b8 <__ieee754_rem_pio2f+0x250>
 8014650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014654:	eeb1 6a47 	vneg.f32	s12, s14
 8014658:	ee70 6a67 	vsub.f32	s13, s0, s15
 801465c:	ee16 2a90 	vmov	r2, s13
 8014660:	dc1c      	bgt.n	801469c <__ieee754_rem_pio2f+0x134>
 8014662:	495a      	ldr	r1, [pc, #360]	; (80147cc <__ieee754_rem_pio2f+0x264>)
 8014664:	1e47      	subs	r7, r0, #1
 8014666:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801466a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801466e:	428b      	cmp	r3, r1
 8014670:	d014      	beq.n	801469c <__ieee754_rem_pio2f+0x134>
 8014672:	6022      	str	r2, [r4, #0]
 8014674:	ed94 7a00 	vldr	s14, [r4]
 8014678:	ee30 0a47 	vsub.f32	s0, s0, s14
 801467c:	2e00      	cmp	r6, #0
 801467e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014682:	ed84 0a01 	vstr	s0, [r4, #4]
 8014686:	da9c      	bge.n	80145c2 <__ieee754_rem_pio2f+0x5a>
 8014688:	eeb1 7a47 	vneg.f32	s14, s14
 801468c:	eeb1 0a40 	vneg.f32	s0, s0
 8014690:	ed84 7a00 	vstr	s14, [r4]
 8014694:	ed84 0a01 	vstr	s0, [r4, #4]
 8014698:	4240      	negs	r0, r0
 801469a:	e792      	b.n	80145c2 <__ieee754_rem_pio2f+0x5a>
 801469c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80146a0:	15eb      	asrs	r3, r5, #23
 80146a2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80146a6:	2d08      	cmp	r5, #8
 80146a8:	dde3      	ble.n	8014672 <__ieee754_rem_pio2f+0x10a>
 80146aa:	eddf 7a44 	vldr	s15, [pc, #272]	; 80147bc <__ieee754_rem_pio2f+0x254>
 80146ae:	eddf 5a44 	vldr	s11, [pc, #272]	; 80147c0 <__ieee754_rem_pio2f+0x258>
 80146b2:	eef0 6a40 	vmov.f32	s13, s0
 80146b6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80146ba:	ee30 0a66 	vsub.f32	s0, s0, s13
 80146be:	eea6 0a27 	vfma.f32	s0, s12, s15
 80146c2:	eef0 7a40 	vmov.f32	s15, s0
 80146c6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80146ca:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80146ce:	ee15 2a90 	vmov	r2, s11
 80146d2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80146d6:	1a5b      	subs	r3, r3, r1
 80146d8:	2b19      	cmp	r3, #25
 80146da:	dc04      	bgt.n	80146e6 <__ieee754_rem_pio2f+0x17e>
 80146dc:	edc4 5a00 	vstr	s11, [r4]
 80146e0:	eeb0 0a66 	vmov.f32	s0, s13
 80146e4:	e7c6      	b.n	8014674 <__ieee754_rem_pio2f+0x10c>
 80146e6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80147d0 <__ieee754_rem_pio2f+0x268>
 80146ea:	eeb0 0a66 	vmov.f32	s0, s13
 80146ee:	eea6 0a25 	vfma.f32	s0, s12, s11
 80146f2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80146f6:	eddf 6a37 	vldr	s13, [pc, #220]	; 80147d4 <__ieee754_rem_pio2f+0x26c>
 80146fa:	eee6 7a25 	vfma.f32	s15, s12, s11
 80146fe:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8014702:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014706:	ed84 7a00 	vstr	s14, [r4]
 801470a:	e7b3      	b.n	8014674 <__ieee754_rem_pio2f+0x10c>
 801470c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8014710:	db06      	blt.n	8014720 <__ieee754_rem_pio2f+0x1b8>
 8014712:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014716:	edc0 7a01 	vstr	s15, [r0, #4]
 801471a:	edc0 7a00 	vstr	s15, [r0]
 801471e:	e733      	b.n	8014588 <__ieee754_rem_pio2f+0x20>
 8014720:	15ea      	asrs	r2, r5, #23
 8014722:	3a86      	subs	r2, #134	; 0x86
 8014724:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8014728:	ee07 3a90 	vmov	s15, r3
 801472c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014730:	eddf 6a29 	vldr	s13, [pc, #164]	; 80147d8 <__ieee754_rem_pio2f+0x270>
 8014734:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014738:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801473c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014740:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014744:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014748:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801474c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014750:	ed8d 7a04 	vstr	s14, [sp, #16]
 8014754:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014758:	eef5 7a40 	vcmp.f32	s15, #0.0
 801475c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014760:	edcd 7a05 	vstr	s15, [sp, #20]
 8014764:	d11e      	bne.n	80147a4 <__ieee754_rem_pio2f+0x23c>
 8014766:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801476a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801476e:	bf14      	ite	ne
 8014770:	2302      	movne	r3, #2
 8014772:	2301      	moveq	r3, #1
 8014774:	4919      	ldr	r1, [pc, #100]	; (80147dc <__ieee754_rem_pio2f+0x274>)
 8014776:	9101      	str	r1, [sp, #4]
 8014778:	2102      	movs	r1, #2
 801477a:	9100      	str	r1, [sp, #0]
 801477c:	a803      	add	r0, sp, #12
 801477e:	4621      	mov	r1, r4
 8014780:	f000 f892 	bl	80148a8 <__kernel_rem_pio2f>
 8014784:	2e00      	cmp	r6, #0
 8014786:	f6bf af1c 	bge.w	80145c2 <__ieee754_rem_pio2f+0x5a>
 801478a:	edd4 7a00 	vldr	s15, [r4]
 801478e:	eef1 7a67 	vneg.f32	s15, s15
 8014792:	edc4 7a00 	vstr	s15, [r4]
 8014796:	edd4 7a01 	vldr	s15, [r4, #4]
 801479a:	eef1 7a67 	vneg.f32	s15, s15
 801479e:	edc4 7a01 	vstr	s15, [r4, #4]
 80147a2:	e779      	b.n	8014698 <__ieee754_rem_pio2f+0x130>
 80147a4:	2303      	movs	r3, #3
 80147a6:	e7e5      	b.n	8014774 <__ieee754_rem_pio2f+0x20c>
 80147a8:	3f490fd8 	.word	0x3f490fd8
 80147ac:	4016cbe3 	.word	0x4016cbe3
 80147b0:	3fc90f80 	.word	0x3fc90f80
 80147b4:	3fc90fd0 	.word	0x3fc90fd0
 80147b8:	37354443 	.word	0x37354443
 80147bc:	37354400 	.word	0x37354400
 80147c0:	2e85a308 	.word	0x2e85a308
 80147c4:	43490f80 	.word	0x43490f80
 80147c8:	3f22f984 	.word	0x3f22f984
 80147cc:	08015950 	.word	0x08015950
 80147d0:	2e85a300 	.word	0x2e85a300
 80147d4:	248d3132 	.word	0x248d3132
 80147d8:	43800000 	.word	0x43800000
 80147dc:	080159d0 	.word	0x080159d0

080147e0 <__ieee754_sqrtf>:
 80147e0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80147e4:	4770      	bx	lr
	...

080147e8 <__kernel_cosf>:
 80147e8:	ee10 3a10 	vmov	r3, s0
 80147ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80147f0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80147f4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80147f8:	da05      	bge.n	8014806 <__kernel_cosf+0x1e>
 80147fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80147fe:	ee17 2a90 	vmov	r2, s15
 8014802:	2a00      	cmp	r2, #0
 8014804:	d03d      	beq.n	8014882 <__kernel_cosf+0x9a>
 8014806:	ee60 5a00 	vmul.f32	s11, s0, s0
 801480a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014888 <__kernel_cosf+0xa0>
 801480e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801488c <__kernel_cosf+0xa4>
 8014812:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8014890 <__kernel_cosf+0xa8>
 8014816:	4a1f      	ldr	r2, [pc, #124]	; (8014894 <__kernel_cosf+0xac>)
 8014818:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801481c:	4293      	cmp	r3, r2
 801481e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8014898 <__kernel_cosf+0xb0>
 8014822:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014826:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801489c <__kernel_cosf+0xb4>
 801482a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801482e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80148a0 <__kernel_cosf+0xb8>
 8014832:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014836:	eeb0 7a66 	vmov.f32	s14, s13
 801483a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801483e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014842:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8014846:	ee67 6a25 	vmul.f32	s13, s14, s11
 801484a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801484e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014852:	dc04      	bgt.n	801485e <__kernel_cosf+0x76>
 8014854:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014858:	ee36 0a47 	vsub.f32	s0, s12, s14
 801485c:	4770      	bx	lr
 801485e:	4a11      	ldr	r2, [pc, #68]	; (80148a4 <__kernel_cosf+0xbc>)
 8014860:	4293      	cmp	r3, r2
 8014862:	bfda      	itte	le
 8014864:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8014868:	ee06 3a90 	vmovle	s13, r3
 801486c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8014870:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014874:	ee36 0a66 	vsub.f32	s0, s12, s13
 8014878:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801487c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014880:	4770      	bx	lr
 8014882:	eeb0 0a46 	vmov.f32	s0, s12
 8014886:	4770      	bx	lr
 8014888:	ad47d74e 	.word	0xad47d74e
 801488c:	310f74f6 	.word	0x310f74f6
 8014890:	3d2aaaab 	.word	0x3d2aaaab
 8014894:	3e999999 	.word	0x3e999999
 8014898:	b493f27c 	.word	0xb493f27c
 801489c:	37d00d01 	.word	0x37d00d01
 80148a0:	bab60b61 	.word	0xbab60b61
 80148a4:	3f480000 	.word	0x3f480000

080148a8 <__kernel_rem_pio2f>:
 80148a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148ac:	ed2d 8b04 	vpush	{d8-d9}
 80148b0:	b0d9      	sub	sp, #356	; 0x164
 80148b2:	4688      	mov	r8, r1
 80148b4:	9002      	str	r0, [sp, #8]
 80148b6:	49bb      	ldr	r1, [pc, #748]	; (8014ba4 <__kernel_rem_pio2f+0x2fc>)
 80148b8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80148ba:	9301      	str	r3, [sp, #4]
 80148bc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80148c0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80148c4:	1e59      	subs	r1, r3, #1
 80148c6:	1d13      	adds	r3, r2, #4
 80148c8:	db27      	blt.n	801491a <__kernel_rem_pio2f+0x72>
 80148ca:	f1b2 0b03 	subs.w	fp, r2, #3
 80148ce:	bf48      	it	mi
 80148d0:	f102 0b04 	addmi.w	fp, r2, #4
 80148d4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80148d8:	1c45      	adds	r5, r0, #1
 80148da:	00ec      	lsls	r4, r5, #3
 80148dc:	1a47      	subs	r7, r0, r1
 80148de:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8014bb4 <__kernel_rem_pio2f+0x30c>
 80148e2:	9403      	str	r4, [sp, #12]
 80148e4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80148e8:	eb0a 0c01 	add.w	ip, sl, r1
 80148ec:	ae1c      	add	r6, sp, #112	; 0x70
 80148ee:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80148f2:	2400      	movs	r4, #0
 80148f4:	4564      	cmp	r4, ip
 80148f6:	dd12      	ble.n	801491e <__kernel_rem_pio2f+0x76>
 80148f8:	9b01      	ldr	r3, [sp, #4]
 80148fa:	ac1c      	add	r4, sp, #112	; 0x70
 80148fc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8014900:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8014904:	f04f 0c00 	mov.w	ip, #0
 8014908:	45d4      	cmp	ip, sl
 801490a:	dc27      	bgt.n	801495c <__kernel_rem_pio2f+0xb4>
 801490c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8014910:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8014bb4 <__kernel_rem_pio2f+0x30c>
 8014914:	4627      	mov	r7, r4
 8014916:	2600      	movs	r6, #0
 8014918:	e016      	b.n	8014948 <__kernel_rem_pio2f+0xa0>
 801491a:	2000      	movs	r0, #0
 801491c:	e7dc      	b.n	80148d8 <__kernel_rem_pio2f+0x30>
 801491e:	42e7      	cmn	r7, r4
 8014920:	bf5d      	ittte	pl
 8014922:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8014926:	ee07 3a90 	vmovpl	s15, r3
 801492a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801492e:	eef0 7a47 	vmovmi.f32	s15, s14
 8014932:	ece6 7a01 	vstmia	r6!, {s15}
 8014936:	3401      	adds	r4, #1
 8014938:	e7dc      	b.n	80148f4 <__kernel_rem_pio2f+0x4c>
 801493a:	ecf9 6a01 	vldmia	r9!, {s13}
 801493e:	ed97 7a00 	vldr	s14, [r7]
 8014942:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014946:	3601      	adds	r6, #1
 8014948:	428e      	cmp	r6, r1
 801494a:	f1a7 0704 	sub.w	r7, r7, #4
 801494e:	ddf4      	ble.n	801493a <__kernel_rem_pio2f+0x92>
 8014950:	eceb 7a01 	vstmia	fp!, {s15}
 8014954:	f10c 0c01 	add.w	ip, ip, #1
 8014958:	3404      	adds	r4, #4
 801495a:	e7d5      	b.n	8014908 <__kernel_rem_pio2f+0x60>
 801495c:	ab08      	add	r3, sp, #32
 801495e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8014962:	eddf 8a93 	vldr	s17, [pc, #588]	; 8014bb0 <__kernel_rem_pio2f+0x308>
 8014966:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8014bac <__kernel_rem_pio2f+0x304>
 801496a:	9304      	str	r3, [sp, #16]
 801496c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8014970:	4656      	mov	r6, sl
 8014972:	00b3      	lsls	r3, r6, #2
 8014974:	9305      	str	r3, [sp, #20]
 8014976:	ab58      	add	r3, sp, #352	; 0x160
 8014978:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801497c:	ac08      	add	r4, sp, #32
 801497e:	ab44      	add	r3, sp, #272	; 0x110
 8014980:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8014984:	46a4      	mov	ip, r4
 8014986:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801498a:	4637      	mov	r7, r6
 801498c:	2f00      	cmp	r7, #0
 801498e:	f1a0 0004 	sub.w	r0, r0, #4
 8014992:	dc4f      	bgt.n	8014a34 <__kernel_rem_pio2f+0x18c>
 8014994:	4628      	mov	r0, r5
 8014996:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801499a:	f000 fc5f 	bl	801525c <scalbnf>
 801499e:	eeb0 8a40 	vmov.f32	s16, s0
 80149a2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80149a6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80149aa:	f000 fc0f 	bl	80151cc <floorf>
 80149ae:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80149b2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80149b6:	2d00      	cmp	r5, #0
 80149b8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80149bc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80149c0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80149c4:	ee17 9a90 	vmov	r9, s15
 80149c8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80149cc:	dd44      	ble.n	8014a58 <__kernel_rem_pio2f+0x1b0>
 80149ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80149d2:	ab08      	add	r3, sp, #32
 80149d4:	f1c5 0e08 	rsb	lr, r5, #8
 80149d8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80149dc:	fa47 f00e 	asr.w	r0, r7, lr
 80149e0:	4481      	add	r9, r0
 80149e2:	fa00 f00e 	lsl.w	r0, r0, lr
 80149e6:	1a3f      	subs	r7, r7, r0
 80149e8:	f1c5 0007 	rsb	r0, r5, #7
 80149ec:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80149f0:	4107      	asrs	r7, r0
 80149f2:	2f00      	cmp	r7, #0
 80149f4:	dd3f      	ble.n	8014a76 <__kernel_rem_pio2f+0x1ce>
 80149f6:	f04f 0e00 	mov.w	lr, #0
 80149fa:	f109 0901 	add.w	r9, r9, #1
 80149fe:	4673      	mov	r3, lr
 8014a00:	4576      	cmp	r6, lr
 8014a02:	dc6b      	bgt.n	8014adc <__kernel_rem_pio2f+0x234>
 8014a04:	2d00      	cmp	r5, #0
 8014a06:	dd04      	ble.n	8014a12 <__kernel_rem_pio2f+0x16a>
 8014a08:	2d01      	cmp	r5, #1
 8014a0a:	d078      	beq.n	8014afe <__kernel_rem_pio2f+0x256>
 8014a0c:	2d02      	cmp	r5, #2
 8014a0e:	f000 8081 	beq.w	8014b14 <__kernel_rem_pio2f+0x26c>
 8014a12:	2f02      	cmp	r7, #2
 8014a14:	d12f      	bne.n	8014a76 <__kernel_rem_pio2f+0x1ce>
 8014a16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014a1a:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014a1e:	b353      	cbz	r3, 8014a76 <__kernel_rem_pio2f+0x1ce>
 8014a20:	4628      	mov	r0, r5
 8014a22:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8014a26:	f000 fc19 	bl	801525c <scalbnf>
 8014a2a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8014a2e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014a32:	e020      	b.n	8014a76 <__kernel_rem_pio2f+0x1ce>
 8014a34:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014a38:	3f01      	subs	r7, #1
 8014a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a42:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014a46:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014a4a:	ecac 0a01 	vstmia	ip!, {s0}
 8014a4e:	ed90 0a00 	vldr	s0, [r0]
 8014a52:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014a56:	e799      	b.n	801498c <__kernel_rem_pio2f+0xe4>
 8014a58:	d105      	bne.n	8014a66 <__kernel_rem_pio2f+0x1be>
 8014a5a:	1e70      	subs	r0, r6, #1
 8014a5c:	ab08      	add	r3, sp, #32
 8014a5e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8014a62:	11ff      	asrs	r7, r7, #7
 8014a64:	e7c5      	b.n	80149f2 <__kernel_rem_pio2f+0x14a>
 8014a66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014a6a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a72:	da31      	bge.n	8014ad8 <__kernel_rem_pio2f+0x230>
 8014a74:	2700      	movs	r7, #0
 8014a76:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a7e:	f040 809b 	bne.w	8014bb8 <__kernel_rem_pio2f+0x310>
 8014a82:	1e74      	subs	r4, r6, #1
 8014a84:	46a4      	mov	ip, r4
 8014a86:	2000      	movs	r0, #0
 8014a88:	45d4      	cmp	ip, sl
 8014a8a:	da4a      	bge.n	8014b22 <__kernel_rem_pio2f+0x27a>
 8014a8c:	2800      	cmp	r0, #0
 8014a8e:	d07a      	beq.n	8014b86 <__kernel_rem_pio2f+0x2de>
 8014a90:	ab08      	add	r3, sp, #32
 8014a92:	3d08      	subs	r5, #8
 8014a94:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	f000 8081 	beq.w	8014ba0 <__kernel_rem_pio2f+0x2f8>
 8014a9e:	4628      	mov	r0, r5
 8014aa0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014aa4:	00a5      	lsls	r5, r4, #2
 8014aa6:	f000 fbd9 	bl	801525c <scalbnf>
 8014aaa:	aa44      	add	r2, sp, #272	; 0x110
 8014aac:	1d2b      	adds	r3, r5, #4
 8014aae:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8014bb0 <__kernel_rem_pio2f+0x308>
 8014ab2:	18d1      	adds	r1, r2, r3
 8014ab4:	4622      	mov	r2, r4
 8014ab6:	2a00      	cmp	r2, #0
 8014ab8:	f280 80ae 	bge.w	8014c18 <__kernel_rem_pio2f+0x370>
 8014abc:	4622      	mov	r2, r4
 8014abe:	2a00      	cmp	r2, #0
 8014ac0:	f2c0 80cc 	blt.w	8014c5c <__kernel_rem_pio2f+0x3b4>
 8014ac4:	a944      	add	r1, sp, #272	; 0x110
 8014ac6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8014aca:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8014ba8 <__kernel_rem_pio2f+0x300>
 8014ace:	eddf 7a39 	vldr	s15, [pc, #228]	; 8014bb4 <__kernel_rem_pio2f+0x30c>
 8014ad2:	2000      	movs	r0, #0
 8014ad4:	1aa1      	subs	r1, r4, r2
 8014ad6:	e0b6      	b.n	8014c46 <__kernel_rem_pio2f+0x39e>
 8014ad8:	2702      	movs	r7, #2
 8014ada:	e78c      	b.n	80149f6 <__kernel_rem_pio2f+0x14e>
 8014adc:	6820      	ldr	r0, [r4, #0]
 8014ade:	b94b      	cbnz	r3, 8014af4 <__kernel_rem_pio2f+0x24c>
 8014ae0:	b118      	cbz	r0, 8014aea <__kernel_rem_pio2f+0x242>
 8014ae2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8014ae6:	6020      	str	r0, [r4, #0]
 8014ae8:	2001      	movs	r0, #1
 8014aea:	f10e 0e01 	add.w	lr, lr, #1
 8014aee:	3404      	adds	r4, #4
 8014af0:	4603      	mov	r3, r0
 8014af2:	e785      	b.n	8014a00 <__kernel_rem_pio2f+0x158>
 8014af4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8014af8:	6020      	str	r0, [r4, #0]
 8014afa:	4618      	mov	r0, r3
 8014afc:	e7f5      	b.n	8014aea <__kernel_rem_pio2f+0x242>
 8014afe:	1e74      	subs	r4, r6, #1
 8014b00:	a808      	add	r0, sp, #32
 8014b02:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8014b06:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8014b0a:	f10d 0c20 	add.w	ip, sp, #32
 8014b0e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8014b12:	e77e      	b.n	8014a12 <__kernel_rem_pio2f+0x16a>
 8014b14:	1e74      	subs	r4, r6, #1
 8014b16:	a808      	add	r0, sp, #32
 8014b18:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8014b1c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8014b20:	e7f3      	b.n	8014b0a <__kernel_rem_pio2f+0x262>
 8014b22:	ab08      	add	r3, sp, #32
 8014b24:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8014b28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014b2c:	4318      	orrs	r0, r3
 8014b2e:	e7ab      	b.n	8014a88 <__kernel_rem_pio2f+0x1e0>
 8014b30:	f10c 0c01 	add.w	ip, ip, #1
 8014b34:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8014b38:	2c00      	cmp	r4, #0
 8014b3a:	d0f9      	beq.n	8014b30 <__kernel_rem_pio2f+0x288>
 8014b3c:	9b05      	ldr	r3, [sp, #20]
 8014b3e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8014b42:	eb0d 0003 	add.w	r0, sp, r3
 8014b46:	9b01      	ldr	r3, [sp, #4]
 8014b48:	18f4      	adds	r4, r6, r3
 8014b4a:	ab1c      	add	r3, sp, #112	; 0x70
 8014b4c:	1c77      	adds	r7, r6, #1
 8014b4e:	384c      	subs	r0, #76	; 0x4c
 8014b50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014b54:	4466      	add	r6, ip
 8014b56:	42be      	cmp	r6, r7
 8014b58:	f6ff af0b 	blt.w	8014972 <__kernel_rem_pio2f+0xca>
 8014b5c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8014b60:	f8dd e008 	ldr.w	lr, [sp, #8]
 8014b64:	ee07 3a90 	vmov	s15, r3
 8014b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b6c:	f04f 0c00 	mov.w	ip, #0
 8014b70:	ece4 7a01 	vstmia	r4!, {s15}
 8014b74:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8014bb4 <__kernel_rem_pio2f+0x30c>
 8014b78:	46a1      	mov	r9, r4
 8014b7a:	458c      	cmp	ip, r1
 8014b7c:	dd07      	ble.n	8014b8e <__kernel_rem_pio2f+0x2e6>
 8014b7e:	ece0 7a01 	vstmia	r0!, {s15}
 8014b82:	3701      	adds	r7, #1
 8014b84:	e7e7      	b.n	8014b56 <__kernel_rem_pio2f+0x2ae>
 8014b86:	9804      	ldr	r0, [sp, #16]
 8014b88:	f04f 0c01 	mov.w	ip, #1
 8014b8c:	e7d2      	b.n	8014b34 <__kernel_rem_pio2f+0x28c>
 8014b8e:	ecfe 6a01 	vldmia	lr!, {s13}
 8014b92:	ed39 7a01 	vldmdb	r9!, {s14}
 8014b96:	f10c 0c01 	add.w	ip, ip, #1
 8014b9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014b9e:	e7ec      	b.n	8014b7a <__kernel_rem_pio2f+0x2d2>
 8014ba0:	3c01      	subs	r4, #1
 8014ba2:	e775      	b.n	8014a90 <__kernel_rem_pio2f+0x1e8>
 8014ba4:	08015d14 	.word	0x08015d14
 8014ba8:	08015ce8 	.word	0x08015ce8
 8014bac:	43800000 	.word	0x43800000
 8014bb0:	3b800000 	.word	0x3b800000
 8014bb4:	00000000 	.word	0x00000000
 8014bb8:	9b03      	ldr	r3, [sp, #12]
 8014bba:	eeb0 0a48 	vmov.f32	s0, s16
 8014bbe:	1a98      	subs	r0, r3, r2
 8014bc0:	f000 fb4c 	bl	801525c <scalbnf>
 8014bc4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8014bac <__kernel_rem_pio2f+0x304>
 8014bc8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bd0:	db19      	blt.n	8014c06 <__kernel_rem_pio2f+0x35e>
 8014bd2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8014bb0 <__kernel_rem_pio2f+0x308>
 8014bd6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014bda:	aa08      	add	r2, sp, #32
 8014bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014be0:	1c74      	adds	r4, r6, #1
 8014be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014be6:	3508      	adds	r5, #8
 8014be8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014bf0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014bf4:	ee10 3a10 	vmov	r3, s0
 8014bf8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014bfc:	ee17 3a90 	vmov	r3, s15
 8014c00:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014c04:	e74b      	b.n	8014a9e <__kernel_rem_pio2f+0x1f6>
 8014c06:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014c0a:	aa08      	add	r2, sp, #32
 8014c0c:	ee10 3a10 	vmov	r3, s0
 8014c10:	4634      	mov	r4, r6
 8014c12:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014c16:	e742      	b.n	8014a9e <__kernel_rem_pio2f+0x1f6>
 8014c18:	a808      	add	r0, sp, #32
 8014c1a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8014c1e:	9001      	str	r0, [sp, #4]
 8014c20:	ee07 0a90 	vmov	s15, r0
 8014c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c28:	3a01      	subs	r2, #1
 8014c2a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014c2e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014c32:	ed61 7a01 	vstmdb	r1!, {s15}
 8014c36:	e73e      	b.n	8014ab6 <__kernel_rem_pio2f+0x20e>
 8014c38:	ecfc 6a01 	vldmia	ip!, {s13}
 8014c3c:	ecb6 7a01 	vldmia	r6!, {s14}
 8014c40:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014c44:	3001      	adds	r0, #1
 8014c46:	4550      	cmp	r0, sl
 8014c48:	dc01      	bgt.n	8014c4e <__kernel_rem_pio2f+0x3a6>
 8014c4a:	4288      	cmp	r0, r1
 8014c4c:	ddf4      	ble.n	8014c38 <__kernel_rem_pio2f+0x390>
 8014c4e:	a858      	add	r0, sp, #352	; 0x160
 8014c50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014c54:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8014c58:	3a01      	subs	r2, #1
 8014c5a:	e730      	b.n	8014abe <__kernel_rem_pio2f+0x216>
 8014c5c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8014c5e:	2a02      	cmp	r2, #2
 8014c60:	dc09      	bgt.n	8014c76 <__kernel_rem_pio2f+0x3ce>
 8014c62:	2a00      	cmp	r2, #0
 8014c64:	dc2a      	bgt.n	8014cbc <__kernel_rem_pio2f+0x414>
 8014c66:	d043      	beq.n	8014cf0 <__kernel_rem_pio2f+0x448>
 8014c68:	f009 0007 	and.w	r0, r9, #7
 8014c6c:	b059      	add	sp, #356	; 0x164
 8014c6e:	ecbd 8b04 	vpop	{d8-d9}
 8014c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c76:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8014c78:	2b03      	cmp	r3, #3
 8014c7a:	d1f5      	bne.n	8014c68 <__kernel_rem_pio2f+0x3c0>
 8014c7c:	ab30      	add	r3, sp, #192	; 0xc0
 8014c7e:	442b      	add	r3, r5
 8014c80:	461a      	mov	r2, r3
 8014c82:	4619      	mov	r1, r3
 8014c84:	4620      	mov	r0, r4
 8014c86:	2800      	cmp	r0, #0
 8014c88:	f1a1 0104 	sub.w	r1, r1, #4
 8014c8c:	dc51      	bgt.n	8014d32 <__kernel_rem_pio2f+0x48a>
 8014c8e:	4621      	mov	r1, r4
 8014c90:	2901      	cmp	r1, #1
 8014c92:	f1a2 0204 	sub.w	r2, r2, #4
 8014c96:	dc5c      	bgt.n	8014d52 <__kernel_rem_pio2f+0x4aa>
 8014c98:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8014bb4 <__kernel_rem_pio2f+0x30c>
 8014c9c:	3304      	adds	r3, #4
 8014c9e:	2c01      	cmp	r4, #1
 8014ca0:	dc67      	bgt.n	8014d72 <__kernel_rem_pio2f+0x4ca>
 8014ca2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014ca6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8014caa:	2f00      	cmp	r7, #0
 8014cac:	d167      	bne.n	8014d7e <__kernel_rem_pio2f+0x4d6>
 8014cae:	edc8 6a00 	vstr	s13, [r8]
 8014cb2:	ed88 7a01 	vstr	s14, [r8, #4]
 8014cb6:	edc8 7a02 	vstr	s15, [r8, #8]
 8014cba:	e7d5      	b.n	8014c68 <__kernel_rem_pio2f+0x3c0>
 8014cbc:	aa30      	add	r2, sp, #192	; 0xc0
 8014cbe:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8014bb4 <__kernel_rem_pio2f+0x30c>
 8014cc2:	4413      	add	r3, r2
 8014cc4:	4622      	mov	r2, r4
 8014cc6:	2a00      	cmp	r2, #0
 8014cc8:	da24      	bge.n	8014d14 <__kernel_rem_pio2f+0x46c>
 8014cca:	b34f      	cbz	r7, 8014d20 <__kernel_rem_pio2f+0x478>
 8014ccc:	eef1 7a47 	vneg.f32	s15, s14
 8014cd0:	edc8 7a00 	vstr	s15, [r8]
 8014cd4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8014cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014cdc:	aa31      	add	r2, sp, #196	; 0xc4
 8014cde:	2301      	movs	r3, #1
 8014ce0:	429c      	cmp	r4, r3
 8014ce2:	da20      	bge.n	8014d26 <__kernel_rem_pio2f+0x47e>
 8014ce4:	b10f      	cbz	r7, 8014cea <__kernel_rem_pio2f+0x442>
 8014ce6:	eef1 7a67 	vneg.f32	s15, s15
 8014cea:	edc8 7a01 	vstr	s15, [r8, #4]
 8014cee:	e7bb      	b.n	8014c68 <__kernel_rem_pio2f+0x3c0>
 8014cf0:	aa30      	add	r2, sp, #192	; 0xc0
 8014cf2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8014bb4 <__kernel_rem_pio2f+0x30c>
 8014cf6:	4413      	add	r3, r2
 8014cf8:	2c00      	cmp	r4, #0
 8014cfa:	da05      	bge.n	8014d08 <__kernel_rem_pio2f+0x460>
 8014cfc:	b10f      	cbz	r7, 8014d02 <__kernel_rem_pio2f+0x45a>
 8014cfe:	eef1 7a67 	vneg.f32	s15, s15
 8014d02:	edc8 7a00 	vstr	s15, [r8]
 8014d06:	e7af      	b.n	8014c68 <__kernel_rem_pio2f+0x3c0>
 8014d08:	ed33 7a01 	vldmdb	r3!, {s14}
 8014d0c:	3c01      	subs	r4, #1
 8014d0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d12:	e7f1      	b.n	8014cf8 <__kernel_rem_pio2f+0x450>
 8014d14:	ed73 7a01 	vldmdb	r3!, {s15}
 8014d18:	3a01      	subs	r2, #1
 8014d1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014d1e:	e7d2      	b.n	8014cc6 <__kernel_rem_pio2f+0x41e>
 8014d20:	eef0 7a47 	vmov.f32	s15, s14
 8014d24:	e7d4      	b.n	8014cd0 <__kernel_rem_pio2f+0x428>
 8014d26:	ecb2 7a01 	vldmia	r2!, {s14}
 8014d2a:	3301      	adds	r3, #1
 8014d2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d30:	e7d6      	b.n	8014ce0 <__kernel_rem_pio2f+0x438>
 8014d32:	edd1 7a00 	vldr	s15, [r1]
 8014d36:	edd1 6a01 	vldr	s13, [r1, #4]
 8014d3a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014d3e:	3801      	subs	r0, #1
 8014d40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d44:	ed81 7a00 	vstr	s14, [r1]
 8014d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014d4c:	edc1 7a01 	vstr	s15, [r1, #4]
 8014d50:	e799      	b.n	8014c86 <__kernel_rem_pio2f+0x3de>
 8014d52:	edd2 7a00 	vldr	s15, [r2]
 8014d56:	edd2 6a01 	vldr	s13, [r2, #4]
 8014d5a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014d5e:	3901      	subs	r1, #1
 8014d60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d64:	ed82 7a00 	vstr	s14, [r2]
 8014d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014d6c:	edc2 7a01 	vstr	s15, [r2, #4]
 8014d70:	e78e      	b.n	8014c90 <__kernel_rem_pio2f+0x3e8>
 8014d72:	ed33 7a01 	vldmdb	r3!, {s14}
 8014d76:	3c01      	subs	r4, #1
 8014d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d7c:	e78f      	b.n	8014c9e <__kernel_rem_pio2f+0x3f6>
 8014d7e:	eef1 6a66 	vneg.f32	s13, s13
 8014d82:	eeb1 7a47 	vneg.f32	s14, s14
 8014d86:	edc8 6a00 	vstr	s13, [r8]
 8014d8a:	ed88 7a01 	vstr	s14, [r8, #4]
 8014d8e:	eef1 7a67 	vneg.f32	s15, s15
 8014d92:	e790      	b.n	8014cb6 <__kernel_rem_pio2f+0x40e>

08014d94 <__kernel_sinf>:
 8014d94:	ee10 3a10 	vmov	r3, s0
 8014d98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014d9c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014da0:	da04      	bge.n	8014dac <__kernel_sinf+0x18>
 8014da2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014da6:	ee17 3a90 	vmov	r3, s15
 8014daa:	b35b      	cbz	r3, 8014e04 <__kernel_sinf+0x70>
 8014dac:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014db0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014e08 <__kernel_sinf+0x74>
 8014db4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8014e0c <__kernel_sinf+0x78>
 8014db8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014dbc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8014e10 <__kernel_sinf+0x7c>
 8014dc0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014dc4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8014e14 <__kernel_sinf+0x80>
 8014dc8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8014dcc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8014e18 <__kernel_sinf+0x84>
 8014dd0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8014dd4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014dd8:	b930      	cbnz	r0, 8014de8 <__kernel_sinf+0x54>
 8014dda:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8014e1c <__kernel_sinf+0x88>
 8014dde:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014de2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8014de6:	4770      	bx	lr
 8014de8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8014dec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014df0:	eee0 7a86 	vfma.f32	s15, s1, s12
 8014df4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8014df8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8014e20 <__kernel_sinf+0x8c>
 8014dfc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8014e00:	ee30 0a60 	vsub.f32	s0, s0, s1
 8014e04:	4770      	bx	lr
 8014e06:	bf00      	nop
 8014e08:	2f2ec9d3 	.word	0x2f2ec9d3
 8014e0c:	b2d72f34 	.word	0xb2d72f34
 8014e10:	3638ef1b 	.word	0x3638ef1b
 8014e14:	b9500d01 	.word	0xb9500d01
 8014e18:	3c088889 	.word	0x3c088889
 8014e1c:	be2aaaab 	.word	0xbe2aaaab
 8014e20:	3e2aaaab 	.word	0x3e2aaaab

08014e24 <with_errno>:
 8014e24:	b570      	push	{r4, r5, r6, lr}
 8014e26:	4604      	mov	r4, r0
 8014e28:	460d      	mov	r5, r1
 8014e2a:	4616      	mov	r6, r2
 8014e2c:	f7fb f916 	bl	801005c <__errno>
 8014e30:	4629      	mov	r1, r5
 8014e32:	6006      	str	r6, [r0, #0]
 8014e34:	4620      	mov	r0, r4
 8014e36:	bd70      	pop	{r4, r5, r6, pc}

08014e38 <xflow>:
 8014e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e3a:	4614      	mov	r4, r2
 8014e3c:	461d      	mov	r5, r3
 8014e3e:	b108      	cbz	r0, 8014e44 <xflow+0xc>
 8014e40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014e44:	e9cd 2300 	strd	r2, r3, [sp]
 8014e48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e4c:	4620      	mov	r0, r4
 8014e4e:	4629      	mov	r1, r5
 8014e50:	f7eb fbd2 	bl	80005f8 <__aeabi_dmul>
 8014e54:	2222      	movs	r2, #34	; 0x22
 8014e56:	b003      	add	sp, #12
 8014e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e5c:	f7ff bfe2 	b.w	8014e24 <with_errno>

08014e60 <__math_uflow>:
 8014e60:	b508      	push	{r3, lr}
 8014e62:	2200      	movs	r2, #0
 8014e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014e68:	f7ff ffe6 	bl	8014e38 <xflow>
 8014e6c:	ec41 0b10 	vmov	d0, r0, r1
 8014e70:	bd08      	pop	{r3, pc}

08014e72 <__math_oflow>:
 8014e72:	b508      	push	{r3, lr}
 8014e74:	2200      	movs	r2, #0
 8014e76:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8014e7a:	f7ff ffdd 	bl	8014e38 <xflow>
 8014e7e:	ec41 0b10 	vmov	d0, r0, r1
 8014e82:	bd08      	pop	{r3, pc}

08014e84 <with_errnof>:
 8014e84:	b513      	push	{r0, r1, r4, lr}
 8014e86:	4604      	mov	r4, r0
 8014e88:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014e8c:	f7fb f8e6 	bl	801005c <__errno>
 8014e90:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014e94:	6004      	str	r4, [r0, #0]
 8014e96:	b002      	add	sp, #8
 8014e98:	bd10      	pop	{r4, pc}

08014e9a <xflowf>:
 8014e9a:	b130      	cbz	r0, 8014eaa <xflowf+0x10>
 8014e9c:	eef1 7a40 	vneg.f32	s15, s0
 8014ea0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014ea4:	2022      	movs	r0, #34	; 0x22
 8014ea6:	f7ff bfed 	b.w	8014e84 <with_errnof>
 8014eaa:	eef0 7a40 	vmov.f32	s15, s0
 8014eae:	e7f7      	b.n	8014ea0 <xflowf+0x6>

08014eb0 <__math_uflowf>:
 8014eb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014eb8 <__math_uflowf+0x8>
 8014eb4:	f7ff bff1 	b.w	8014e9a <xflowf>
 8014eb8:	10000000 	.word	0x10000000

08014ebc <__math_oflowf>:
 8014ebc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014ec4 <__math_oflowf+0x8>
 8014ec0:	f7ff bfeb 	b.w	8014e9a <xflowf>
 8014ec4:	70000000 	.word	0x70000000

08014ec8 <fabs>:
 8014ec8:	ec51 0b10 	vmov	r0, r1, d0
 8014ecc:	ee10 2a10 	vmov	r2, s0
 8014ed0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014ed4:	ec43 2b10 	vmov	d0, r2, r3
 8014ed8:	4770      	bx	lr

08014eda <finite>:
 8014eda:	b082      	sub	sp, #8
 8014edc:	ed8d 0b00 	vstr	d0, [sp]
 8014ee0:	9801      	ldr	r0, [sp, #4]
 8014ee2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014ee6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014eea:	0fc0      	lsrs	r0, r0, #31
 8014eec:	b002      	add	sp, #8
 8014eee:	4770      	bx	lr

08014ef0 <scalbn>:
 8014ef0:	b570      	push	{r4, r5, r6, lr}
 8014ef2:	ec55 4b10 	vmov	r4, r5, d0
 8014ef6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014efa:	4606      	mov	r6, r0
 8014efc:	462b      	mov	r3, r5
 8014efe:	b99a      	cbnz	r2, 8014f28 <scalbn+0x38>
 8014f00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014f04:	4323      	orrs	r3, r4
 8014f06:	d036      	beq.n	8014f76 <scalbn+0x86>
 8014f08:	4b39      	ldr	r3, [pc, #228]	; (8014ff0 <scalbn+0x100>)
 8014f0a:	4629      	mov	r1, r5
 8014f0c:	ee10 0a10 	vmov	r0, s0
 8014f10:	2200      	movs	r2, #0
 8014f12:	f7eb fb71 	bl	80005f8 <__aeabi_dmul>
 8014f16:	4b37      	ldr	r3, [pc, #220]	; (8014ff4 <scalbn+0x104>)
 8014f18:	429e      	cmp	r6, r3
 8014f1a:	4604      	mov	r4, r0
 8014f1c:	460d      	mov	r5, r1
 8014f1e:	da10      	bge.n	8014f42 <scalbn+0x52>
 8014f20:	a32b      	add	r3, pc, #172	; (adr r3, 8014fd0 <scalbn+0xe0>)
 8014f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f26:	e03a      	b.n	8014f9e <scalbn+0xae>
 8014f28:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014f2c:	428a      	cmp	r2, r1
 8014f2e:	d10c      	bne.n	8014f4a <scalbn+0x5a>
 8014f30:	ee10 2a10 	vmov	r2, s0
 8014f34:	4620      	mov	r0, r4
 8014f36:	4629      	mov	r1, r5
 8014f38:	f7eb f9a8 	bl	800028c <__adddf3>
 8014f3c:	4604      	mov	r4, r0
 8014f3e:	460d      	mov	r5, r1
 8014f40:	e019      	b.n	8014f76 <scalbn+0x86>
 8014f42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014f46:	460b      	mov	r3, r1
 8014f48:	3a36      	subs	r2, #54	; 0x36
 8014f4a:	4432      	add	r2, r6
 8014f4c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014f50:	428a      	cmp	r2, r1
 8014f52:	dd08      	ble.n	8014f66 <scalbn+0x76>
 8014f54:	2d00      	cmp	r5, #0
 8014f56:	a120      	add	r1, pc, #128	; (adr r1, 8014fd8 <scalbn+0xe8>)
 8014f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f5c:	da1c      	bge.n	8014f98 <scalbn+0xa8>
 8014f5e:	a120      	add	r1, pc, #128	; (adr r1, 8014fe0 <scalbn+0xf0>)
 8014f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f64:	e018      	b.n	8014f98 <scalbn+0xa8>
 8014f66:	2a00      	cmp	r2, #0
 8014f68:	dd08      	ble.n	8014f7c <scalbn+0x8c>
 8014f6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014f6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014f72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014f76:	ec45 4b10 	vmov	d0, r4, r5
 8014f7a:	bd70      	pop	{r4, r5, r6, pc}
 8014f7c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014f80:	da19      	bge.n	8014fb6 <scalbn+0xc6>
 8014f82:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014f86:	429e      	cmp	r6, r3
 8014f88:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8014f8c:	dd0a      	ble.n	8014fa4 <scalbn+0xb4>
 8014f8e:	a112      	add	r1, pc, #72	; (adr r1, 8014fd8 <scalbn+0xe8>)
 8014f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d1e2      	bne.n	8014f5e <scalbn+0x6e>
 8014f98:	a30f      	add	r3, pc, #60	; (adr r3, 8014fd8 <scalbn+0xe8>)
 8014f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f9e:	f7eb fb2b 	bl	80005f8 <__aeabi_dmul>
 8014fa2:	e7cb      	b.n	8014f3c <scalbn+0x4c>
 8014fa4:	a10a      	add	r1, pc, #40	; (adr r1, 8014fd0 <scalbn+0xe0>)
 8014fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d0b8      	beq.n	8014f20 <scalbn+0x30>
 8014fae:	a10e      	add	r1, pc, #56	; (adr r1, 8014fe8 <scalbn+0xf8>)
 8014fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fb4:	e7b4      	b.n	8014f20 <scalbn+0x30>
 8014fb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014fba:	3236      	adds	r2, #54	; 0x36
 8014fbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014fc0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014fc4:	4620      	mov	r0, r4
 8014fc6:	4b0c      	ldr	r3, [pc, #48]	; (8014ff8 <scalbn+0x108>)
 8014fc8:	2200      	movs	r2, #0
 8014fca:	e7e8      	b.n	8014f9e <scalbn+0xae>
 8014fcc:	f3af 8000 	nop.w
 8014fd0:	c2f8f359 	.word	0xc2f8f359
 8014fd4:	01a56e1f 	.word	0x01a56e1f
 8014fd8:	8800759c 	.word	0x8800759c
 8014fdc:	7e37e43c 	.word	0x7e37e43c
 8014fe0:	8800759c 	.word	0x8800759c
 8014fe4:	fe37e43c 	.word	0xfe37e43c
 8014fe8:	c2f8f359 	.word	0xc2f8f359
 8014fec:	81a56e1f 	.word	0x81a56e1f
 8014ff0:	43500000 	.word	0x43500000
 8014ff4:	ffff3cb0 	.word	0xffff3cb0
 8014ff8:	3c900000 	.word	0x3c900000

08014ffc <atanf>:
 8014ffc:	b538      	push	{r3, r4, r5, lr}
 8014ffe:	ee10 5a10 	vmov	r5, s0
 8015002:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8015006:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801500a:	eef0 7a40 	vmov.f32	s15, s0
 801500e:	db10      	blt.n	8015032 <atanf+0x36>
 8015010:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015014:	dd04      	ble.n	8015020 <atanf+0x24>
 8015016:	ee70 7a00 	vadd.f32	s15, s0, s0
 801501a:	eeb0 0a67 	vmov.f32	s0, s15
 801501e:	bd38      	pop	{r3, r4, r5, pc}
 8015020:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8015158 <atanf+0x15c>
 8015024:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801515c <atanf+0x160>
 8015028:	2d00      	cmp	r5, #0
 801502a:	bfd8      	it	le
 801502c:	eef0 7a40 	vmovle.f32	s15, s0
 8015030:	e7f3      	b.n	801501a <atanf+0x1e>
 8015032:	4b4b      	ldr	r3, [pc, #300]	; (8015160 <atanf+0x164>)
 8015034:	429c      	cmp	r4, r3
 8015036:	dc10      	bgt.n	801505a <atanf+0x5e>
 8015038:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801503c:	da0a      	bge.n	8015054 <atanf+0x58>
 801503e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8015164 <atanf+0x168>
 8015042:	ee30 7a07 	vadd.f32	s14, s0, s14
 8015046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801504a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801504e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015052:	dce2      	bgt.n	801501a <atanf+0x1e>
 8015054:	f04f 33ff 	mov.w	r3, #4294967295
 8015058:	e013      	b.n	8015082 <atanf+0x86>
 801505a:	f000 f8a3 	bl	80151a4 <fabsf>
 801505e:	4b42      	ldr	r3, [pc, #264]	; (8015168 <atanf+0x16c>)
 8015060:	429c      	cmp	r4, r3
 8015062:	dc4f      	bgt.n	8015104 <atanf+0x108>
 8015064:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8015068:	429c      	cmp	r4, r3
 801506a:	dc41      	bgt.n	80150f0 <atanf+0xf4>
 801506c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015070:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015074:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015078:	2300      	movs	r3, #0
 801507a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801507e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015082:	1c5a      	adds	r2, r3, #1
 8015084:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015088:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801516c <atanf+0x170>
 801508c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8015170 <atanf+0x174>
 8015090:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8015174 <atanf+0x178>
 8015094:	ee66 6a06 	vmul.f32	s13, s12, s12
 8015098:	eee6 5a87 	vfma.f32	s11, s13, s14
 801509c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8015178 <atanf+0x17c>
 80150a0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80150a4:	eddf 5a35 	vldr	s11, [pc, #212]	; 801517c <atanf+0x180>
 80150a8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80150ac:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8015180 <atanf+0x184>
 80150b0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80150b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8015184 <atanf+0x188>
 80150b8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80150bc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8015188 <atanf+0x18c>
 80150c0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80150c4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801518c <atanf+0x190>
 80150c8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80150cc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8015190 <atanf+0x194>
 80150d0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80150d4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8015194 <atanf+0x198>
 80150d8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80150dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80150e0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80150e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80150e8:	d121      	bne.n	801512e <atanf+0x132>
 80150ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80150ee:	e794      	b.n	801501a <atanf+0x1e>
 80150f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80150f4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80150f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80150fc:	2301      	movs	r3, #1
 80150fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015102:	e7be      	b.n	8015082 <atanf+0x86>
 8015104:	4b24      	ldr	r3, [pc, #144]	; (8015198 <atanf+0x19c>)
 8015106:	429c      	cmp	r4, r3
 8015108:	dc0b      	bgt.n	8015122 <atanf+0x126>
 801510a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801510e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015112:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015116:	2302      	movs	r3, #2
 8015118:	ee70 6a67 	vsub.f32	s13, s0, s15
 801511c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015120:	e7af      	b.n	8015082 <atanf+0x86>
 8015122:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015126:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801512a:	2303      	movs	r3, #3
 801512c:	e7a9      	b.n	8015082 <atanf+0x86>
 801512e:	4a1b      	ldr	r2, [pc, #108]	; (801519c <atanf+0x1a0>)
 8015130:	491b      	ldr	r1, [pc, #108]	; (80151a0 <atanf+0x1a4>)
 8015132:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015136:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801513a:	ed93 0a00 	vldr	s0, [r3]
 801513e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8015142:	ed92 0a00 	vldr	s0, [r2]
 8015146:	ee77 7a67 	vsub.f32	s15, s14, s15
 801514a:	2d00      	cmp	r5, #0
 801514c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015150:	bfb8      	it	lt
 8015152:	eef1 7a67 	vneglt.f32	s15, s15
 8015156:	e760      	b.n	801501a <atanf+0x1e>
 8015158:	3fc90fdb 	.word	0x3fc90fdb
 801515c:	bfc90fdb 	.word	0xbfc90fdb
 8015160:	3edfffff 	.word	0x3edfffff
 8015164:	7149f2ca 	.word	0x7149f2ca
 8015168:	3f97ffff 	.word	0x3f97ffff
 801516c:	3c8569d7 	.word	0x3c8569d7
 8015170:	3d4bda59 	.word	0x3d4bda59
 8015174:	bd6ef16b 	.word	0xbd6ef16b
 8015178:	3d886b35 	.word	0x3d886b35
 801517c:	3dba2e6e 	.word	0x3dba2e6e
 8015180:	3e124925 	.word	0x3e124925
 8015184:	3eaaaaab 	.word	0x3eaaaaab
 8015188:	bd15a221 	.word	0xbd15a221
 801518c:	bd9d8795 	.word	0xbd9d8795
 8015190:	bde38e38 	.word	0xbde38e38
 8015194:	be4ccccd 	.word	0xbe4ccccd
 8015198:	401bffff 	.word	0x401bffff
 801519c:	08015d20 	.word	0x08015d20
 80151a0:	08015d30 	.word	0x08015d30

080151a4 <fabsf>:
 80151a4:	ee10 3a10 	vmov	r3, s0
 80151a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80151ac:	ee00 3a10 	vmov	s0, r3
 80151b0:	4770      	bx	lr

080151b2 <finitef>:
 80151b2:	b082      	sub	sp, #8
 80151b4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80151b8:	9801      	ldr	r0, [sp, #4]
 80151ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80151be:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80151c2:	bfac      	ite	ge
 80151c4:	2000      	movge	r0, #0
 80151c6:	2001      	movlt	r0, #1
 80151c8:	b002      	add	sp, #8
 80151ca:	4770      	bx	lr

080151cc <floorf>:
 80151cc:	ee10 3a10 	vmov	r3, s0
 80151d0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80151d4:	3a7f      	subs	r2, #127	; 0x7f
 80151d6:	2a16      	cmp	r2, #22
 80151d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80151dc:	dc2a      	bgt.n	8015234 <floorf+0x68>
 80151de:	2a00      	cmp	r2, #0
 80151e0:	da11      	bge.n	8015206 <floorf+0x3a>
 80151e2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8015244 <floorf+0x78>
 80151e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80151ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80151ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151f2:	dd05      	ble.n	8015200 <floorf+0x34>
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	da23      	bge.n	8015240 <floorf+0x74>
 80151f8:	4a13      	ldr	r2, [pc, #76]	; (8015248 <floorf+0x7c>)
 80151fa:	2900      	cmp	r1, #0
 80151fc:	bf18      	it	ne
 80151fe:	4613      	movne	r3, r2
 8015200:	ee00 3a10 	vmov	s0, r3
 8015204:	4770      	bx	lr
 8015206:	4911      	ldr	r1, [pc, #68]	; (801524c <floorf+0x80>)
 8015208:	4111      	asrs	r1, r2
 801520a:	420b      	tst	r3, r1
 801520c:	d0fa      	beq.n	8015204 <floorf+0x38>
 801520e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8015244 <floorf+0x78>
 8015212:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015216:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801521e:	ddef      	ble.n	8015200 <floorf+0x34>
 8015220:	2b00      	cmp	r3, #0
 8015222:	bfbe      	ittt	lt
 8015224:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8015228:	fa40 f202 	asrlt.w	r2, r0, r2
 801522c:	189b      	addlt	r3, r3, r2
 801522e:	ea23 0301 	bic.w	r3, r3, r1
 8015232:	e7e5      	b.n	8015200 <floorf+0x34>
 8015234:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015238:	d3e4      	bcc.n	8015204 <floorf+0x38>
 801523a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801523e:	4770      	bx	lr
 8015240:	2300      	movs	r3, #0
 8015242:	e7dd      	b.n	8015200 <floorf+0x34>
 8015244:	7149f2ca 	.word	0x7149f2ca
 8015248:	bf800000 	.word	0xbf800000
 801524c:	007fffff 	.word	0x007fffff

08015250 <nanf>:
 8015250:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015258 <nanf+0x8>
 8015254:	4770      	bx	lr
 8015256:	bf00      	nop
 8015258:	7fc00000 	.word	0x7fc00000

0801525c <scalbnf>:
 801525c:	ee10 3a10 	vmov	r3, s0
 8015260:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8015264:	d025      	beq.n	80152b2 <scalbnf+0x56>
 8015266:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801526a:	d302      	bcc.n	8015272 <scalbnf+0x16>
 801526c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015270:	4770      	bx	lr
 8015272:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8015276:	d122      	bne.n	80152be <scalbnf+0x62>
 8015278:	4b2a      	ldr	r3, [pc, #168]	; (8015324 <scalbnf+0xc8>)
 801527a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015328 <scalbnf+0xcc>
 801527e:	4298      	cmp	r0, r3
 8015280:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015284:	db16      	blt.n	80152b4 <scalbnf+0x58>
 8015286:	ee10 3a10 	vmov	r3, s0
 801528a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801528e:	3a19      	subs	r2, #25
 8015290:	4402      	add	r2, r0
 8015292:	2afe      	cmp	r2, #254	; 0xfe
 8015294:	dd15      	ble.n	80152c2 <scalbnf+0x66>
 8015296:	ee10 3a10 	vmov	r3, s0
 801529a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801532c <scalbnf+0xd0>
 801529e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8015330 <scalbnf+0xd4>
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	eeb0 7a67 	vmov.f32	s14, s15
 80152a8:	bfb8      	it	lt
 80152aa:	eef0 7a66 	vmovlt.f32	s15, s13
 80152ae:	ee27 0a27 	vmul.f32	s0, s14, s15
 80152b2:	4770      	bx	lr
 80152b4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015334 <scalbnf+0xd8>
 80152b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80152bc:	4770      	bx	lr
 80152be:	0dd2      	lsrs	r2, r2, #23
 80152c0:	e7e6      	b.n	8015290 <scalbnf+0x34>
 80152c2:	2a00      	cmp	r2, #0
 80152c4:	dd06      	ble.n	80152d4 <scalbnf+0x78>
 80152c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80152ca:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80152ce:	ee00 3a10 	vmov	s0, r3
 80152d2:	4770      	bx	lr
 80152d4:	f112 0f16 	cmn.w	r2, #22
 80152d8:	da1a      	bge.n	8015310 <scalbnf+0xb4>
 80152da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80152de:	4298      	cmp	r0, r3
 80152e0:	ee10 3a10 	vmov	r3, s0
 80152e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80152e8:	dd0a      	ble.n	8015300 <scalbnf+0xa4>
 80152ea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801532c <scalbnf+0xd0>
 80152ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8015330 <scalbnf+0xd4>
 80152f2:	eef0 7a40 	vmov.f32	s15, s0
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	bf18      	it	ne
 80152fa:	eeb0 0a47 	vmovne.f32	s0, s14
 80152fe:	e7db      	b.n	80152b8 <scalbnf+0x5c>
 8015300:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8015334 <scalbnf+0xd8>
 8015304:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8015338 <scalbnf+0xdc>
 8015308:	eef0 7a40 	vmov.f32	s15, s0
 801530c:	2b00      	cmp	r3, #0
 801530e:	e7f3      	b.n	80152f8 <scalbnf+0x9c>
 8015310:	3219      	adds	r2, #25
 8015312:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015316:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801531a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801533c <scalbnf+0xe0>
 801531e:	ee07 3a10 	vmov	s14, r3
 8015322:	e7c4      	b.n	80152ae <scalbnf+0x52>
 8015324:	ffff3cb0 	.word	0xffff3cb0
 8015328:	4c000000 	.word	0x4c000000
 801532c:	7149f2ca 	.word	0x7149f2ca
 8015330:	f149f2ca 	.word	0xf149f2ca
 8015334:	0da24260 	.word	0x0da24260
 8015338:	8da24260 	.word	0x8da24260
 801533c:	33000000 	.word	0x33000000

08015340 <_init>:
 8015340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015342:	bf00      	nop
 8015344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015346:	bc08      	pop	{r3}
 8015348:	469e      	mov	lr, r3
 801534a:	4770      	bx	lr

0801534c <_fini>:
 801534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801534e:	bf00      	nop
 8015350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015352:	bc08      	pop	{r3}
 8015354:	469e      	mov	lr, r3
 8015356:	4770      	bx	lr
