
Dipterv_Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014df0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  08014f80  08014f80  00024f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080158d0  080158d0  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  080158d0  080158d0  000258d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080158d8  080158d8  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080158d8  080158d8  000258d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080158dc  080158dc  000258dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080158e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301ec  2**0
                  CONTENTS
 10 .bss          000066b4  200001f0  200001f0  000301f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200068a4  200068a4  000301f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   000209a5  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041f4  00000000  00000000  00050bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c58  00000000  00000000  00054db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ac8  00000000  00000000  00056a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025543  00000000  00000000  000584d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020dc8  00000000  00000000  0007da1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000debce  00000000  00000000  0009e7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017d3b1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000091cc  00000000  00000000  0017d404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014f68 	.word	0x08014f68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08014f68 	.word	0x08014f68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <vApplicationGetIdleTaskMemory+0x30>)
 8000fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000020c 	.word	0x2000020c
 8000fbc:	20000260 	.word	0x20000260

08000fc0 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000fe4 <FusionRadiansToDegrees+0x24>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	42652ee0 	.word	0x42652ee0

08000fe8 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	d802      	bhi.n	800100a <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8001004:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001038 <FusionAsin+0x50>
 8001008:	e011      	b.n	800102e <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	db02      	blt.n	8001022 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 800101c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800103c <FusionAsin+0x54>
 8001020:	e005      	b.n	800102e <FusionAsin+0x46>
    }
    return asinf(value);
 8001022:	ed97 0a01 	vldr	s0, [r7, #4]
 8001026:	f011 fdf7 	bl	8012c18 <asinf>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	bfc90fdb 	.word	0xbfc90fdb
 800103c:	3fc90fdb 	.word	0x3fc90fdb

08001040 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8001040:	b480      	push	{r7}
 8001042:	b091      	sub	sp, #68	; 0x44
 8001044:	af00      	add	r7, sp, #0
 8001046:	eeb0 5a40 	vmov.f32	s10, s0
 800104a:	eef0 5a60 	vmov.f32	s11, s1
 800104e:	eeb0 6a41 	vmov.f32	s12, s2
 8001052:	eef0 6a61 	vmov.f32	s13, s3
 8001056:	eeb0 7a42 	vmov.f32	s14, s4
 800105a:	eef0 7a62 	vmov.f32	s15, s5
 800105e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001062:	edc7 5a08 	vstr	s11, [r7, #32]
 8001066:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800106a:	edc7 6a04 	vstr	s13, [r7, #16]
 800106e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001072:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8001076:	ed97 7a07 	vldr	s14, [r7, #28]
 800107a:	edd7 7a04 	vldr	s15, [r7, #16]
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001082:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8001086:	ed97 7a08 	vldr	s14, [r7, #32]
 800108a:	edd7 7a05 	vldr	s15, [r7, #20]
 800108e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001092:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8001096:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800109a:	edd7 7a06 	vldr	s15, [r7, #24]
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80010a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ba:	ee06 1a90 	vmov	s13, r1
 80010be:	ee07 2a10 	vmov	s14, r2
 80010c2:	ee07 3a90 	vmov	s15, r3
}
 80010c6:	eeb0 0a66 	vmov.f32	s0, s13
 80010ca:	eef0 0a47 	vmov.f32	s1, s14
 80010ce:	eeb0 1a67 	vmov.f32	s2, s15
 80010d2:	3744      	adds	r7, #68	; 0x44
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80010dc:	b480      	push	{r7}
 80010de:	b08f      	sub	sp, #60	; 0x3c
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	eef0 6a40 	vmov.f32	s13, s0
 80010e6:	eeb0 7a60 	vmov.f32	s14, s1
 80010ea:	eef0 7a41 	vmov.f32	s15, s2
 80010ee:	edc7 1a04 	vstr	s3, [r7, #16]
 80010f2:	edc7 6a05 	vstr	s13, [r7, #20]
 80010f6:	ed87 7a06 	vstr	s14, [r7, #24]
 80010fa:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 80010fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001102:	edd7 7a04 	vldr	s15, [r7, #16]
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800110a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800110e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001112:	edd7 7a04 	vldr	s15, [r7, #16]
 8001116:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800111a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800111e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001122:	edd7 7a04 	vldr	s15, [r7, #16]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800112a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800112e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001132:	f107 0220 	add.w	r2, r7, #32
 8001136:	ca07      	ldmia	r2, {r0, r1, r2}
 8001138:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800113c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800113e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001142:	ee06 1a90 	vmov	s13, r1
 8001146:	ee07 2a10 	vmov	s14, r2
 800114a:	ee07 3a90 	vmov	s15, r3
}
 800114e:	eeb0 0a66 	vmov.f32	s0, s13
 8001152:	eef0 0a47 	vmov.f32	s1, s14
 8001156:	eeb0 1a67 	vmov.f32	s2, s15
 800115a:	373c      	adds	r7, #60	; 0x3c
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001164:	b084      	sub	sp, #16
 8001166:	b480      	push	{r7}
 8001168:	b08f      	sub	sp, #60	; 0x3c
 800116a:	af00      	add	r7, sp, #0
 800116c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8001170:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001174:	eef0 6a40 	vmov.f32	s13, s0
 8001178:	eeb0 7a60 	vmov.f32	s14, s1
 800117c:	eef0 7a41 	vmov.f32	s15, s2
 8001180:	edc7 6a05 	vstr	s13, [r7, #20]
 8001184:	ed87 7a06 	vstr	s14, [r7, #24]
 8001188:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 800118c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001190:	edd7 7a05 	vldr	s15, [r7, #20]
 8001194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001198:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800119c:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80011ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011b8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80011bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80011cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80011dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 80011ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001208:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800120c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001218:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	f107 0220 	add.w	r2, r7, #32
 8001224:	ca07      	ldmia	r2, {r0, r1, r2}
 8001226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800122a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800122c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001230:	ee06 1a90 	vmov	s13, r1
 8001234:	ee07 2a10 	vmov	s14, r2
 8001238:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800123c:	eeb0 0a66 	vmov.f32	s0, s13
 8001240:	eef0 0a47 	vmov.f32	s1, s14
 8001244:	eeb0 1a67 	vmov.f32	s2, s15
 8001248:	373c      	adds	r7, #60	; 0x3c
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	b004      	add	sp, #16
 8001252:	4770      	bx	lr

08001254 <FusionQuaternionToMatrix>:
/**
 * @brief Converts a quaternion to a rotation matrix.
 * @param quaternion Quaternion.
 * @return Rotation matrix.
 */
static inline FusionMatrix FusionQuaternionToMatrix(const FusionQuaternion quaternion) {
 8001254:	b4b0      	push	{r4, r5, r7}
 8001256:	b097      	sub	sp, #92	; 0x5c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6178      	str	r0, [r7, #20]
 800125c:	eeb0 6a40 	vmov.f32	s12, s0
 8001260:	eef0 6a60 	vmov.f32	s13, s1
 8001264:	eeb0 7a41 	vmov.f32	s14, s2
 8001268:	eef0 7a61 	vmov.f32	s15, s3
 800126c:	ed87 6a01 	vstr	s12, [r7, #4]
 8001270:	edc7 6a02 	vstr	s13, [r7, #8]
 8001274:	ed87 7a03 	vstr	s14, [r7, #12]
 8001278:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q quaternion.element
    const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 800127c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001280:	edd7 7a01 	vldr	s15, [r7, #4]
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    const float qwqx = Q.w * Q.x;
 800128c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001290:	edd7 7a02 	vldr	s15, [r7, #8]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    const float qwqy = Q.w * Q.y;
 800129c:	ed97 7a01 	vldr	s14, [r7, #4]
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    const float qwqz = Q.w * Q.z;
 80012ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    const float qxqy = Q.x * Q.y;
 80012bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    const float qxqz = Q.x * Q.z;
 80012cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    const float qyqz = Q.y * Q.z;
 80012dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionMatrix matrix = {.element = {
            .xx = 2.0f * (qwqw - 0.5f + Q.x * Q.x),
 80012ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80012f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80012fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800130c:	edc7 7a06 	vstr	s15, [r7, #24]
            .xy = 2.0f * (qxqy - qwqz),
 8001310:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001314:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001320:	edc7 7a07 	vstr	s15, [r7, #28]
            .xz = 2.0f * (qxqz + qwqy),
 8001324:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001328:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001334:	edc7 7a08 	vstr	s15, [r7, #32]
            .yx = 2.0f * (qxqy + qwqz),
 8001338:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800133c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001348:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .yy = 2.0f * (qwqw - 0.5f + Q.y * Q.y),
 800134c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001350:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001354:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001358:	edd7 6a03 	vldr	s13, [r7, #12]
 800135c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001368:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800136c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yz = 2.0f * (qyqz - qwqx),
 8001370:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001374:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001380:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .zx = 2.0f * (qxqz - qwqy),
 8001384:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001388:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001394:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .zy = 2.0f * (qyqz + qwqx),
 8001398:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800139c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .zz = 2.0f * (qwqw - 0.5f + Q.z * Q.z),
 80013ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80013bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013cc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    }};
    return matrix;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	461d      	mov	r5, r3
 80013d4:	f107 0418 	add.w	r4, r7, #24
 80013d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	602b      	str	r3, [r5, #0]
#undef Q
}
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	375c      	adds	r7, #92	; 0x5c
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bcb0      	pop	{r4, r5, r7}
 80013ec:	4770      	bx	lr

080013ee <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b090      	sub	sp, #64	; 0x40
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	eeb0 6a40 	vmov.f32	s12, s0
 80013f8:	eef0 6a60 	vmov.f32	s13, s1
 80013fc:	eeb0 7a41 	vmov.f32	s14, s2
 8001400:	eef0 7a61 	vmov.f32	s15, s3
 8001404:	ed87 6a04 	vstr	s12, [r7, #16]
 8001408:	edc7 6a05 	vstr	s13, [r7, #20]
 800140c:	ed87 7a06 	vstr	s14, [r7, #24]
 8001410:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8001414:	ed97 7a06 	vldr	s14, [r7, #24]
 8001418:	edd7 7a06 	vldr	s15, [r7, #24]
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001428:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 800142c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001430:	edd7 7a05 	vldr	s15, [r7, #20]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001438:	edd7 6a06 	vldr	s13, [r7, #24]
 800143c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001448:	ed97 7a05 	vldr	s14, [r7, #20]
 800144c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001454:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145c:	eef0 0a67 	vmov.f32	s1, s15
 8001460:	eeb0 0a66 	vmov.f32	s0, s13
 8001464:	f011 fc04 	bl	8012c70 <atan2f>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	f7ff fda6 	bl	8000fc0 <FusionRadiansToDegrees>
 8001474:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001478:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 800147c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001480:	edd7 7a06 	vldr	s15, [r7, #24]
 8001484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001488:	edd7 6a07 	vldr	s13, [r7, #28]
 800148c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001498:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	f7ff fda2 	bl	8000fe8 <FusionAsin>
 80014a4:	eef0 7a40 	vmov.f32	s15, s0
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	f7ff fd88 	bl	8000fc0 <FusionRadiansToDegrees>
 80014b0:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80014b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 80014b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80014bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80014d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80014d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e8:	eef0 0a67 	vmov.f32	s1, s15
 80014ec:	eeb0 0a66 	vmov.f32	s0, s13
 80014f0:	f011 fbbe 	bl	8012c70 <atan2f>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	f7ff fd60 	bl	8000fc0 <FusionRadiansToDegrees>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001504:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8001508:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800150c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001510:	ca07      	ldmia	r2, {r0, r1, r2}
 8001512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151c:	ee06 1a90 	vmov	s13, r1
 8001520:	ee07 2a10 	vmov	s14, r2
 8001524:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8001528:	eeb0 0a66 	vmov.f32	s0, s13
 800152c:	eef0 0a47 	vmov.f32	s1, s14
 8001530:	eeb0 1a67 	vmov.f32	s2, s15
 8001534:	3740      	adds	r7, #64	; 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b096      	sub	sp, #88	; 0x58
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f004 fcb1 	bl	8005ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f89f 	bl	8001688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f000 fd83 	bl	8002054 <MX_GPIO_Init>
  MX_DMA_Init();
 800154e:	f000 fd61 	bl	8002014 <MX_DMA_Init>
  MX_TIM2_Init();
 8001552:	f000 fab9 	bl	8001ac8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001556:	f000 fcdf 	bl	8001f18 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800155a:	f000 f9f5 	bl	8001948 <MX_I2C1_Init>
  MX_I2C2_Init();
 800155e:	f000 fa21 	bl	80019a4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001562:	f000 fa4d 	bl	8001a00 <MX_I2C3_Init>
  MX_TIM3_Init();
 8001566:	f000 fb1f 	bl	8001ba8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800156a:	f000 fbcb 	bl	8001d04 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800156e:	f000 fca9 	bl	8001ec4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001572:	f000 fcfb 	bl	8001f6c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001576:	f000 fa71 	bl	8001a5c <MX_SPI2_Init>
  MX_USART6_UART_Init();
 800157a:	f000 fd21 	bl	8001fc0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800157e:	f000 f8ed 	bl	800175c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001582:	f000 f93d 	bl	8001800 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001586:	f000 f98d 	bl	80018a4 <MX_ADC3_Init>
  MX_TIM6_Init();
 800158a:	f000 fc2f 	bl	8001dec <MX_TIM6_Init>
  MX_TIM7_Init();
 800158e:	f000 fc63 	bl	8001e58 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */




  __HAL_SPI_ENABLE(&hspi2);
 8001592:	4b33      	ldr	r3, [pc, #204]	; (8001660 <main+0x124>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b31      	ldr	r3, [pc, #196]	; (8001660 <main+0x124>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a0:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_1  );
 80015a2:	2100      	movs	r1, #0
 80015a4:	482f      	ldr	r0, [pc, #188]	; (8001664 <main+0x128>)
 80015a6:	f008 f825 	bl	80095f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_2  );
 80015aa:	2104      	movs	r1, #4
 80015ac:	482d      	ldr	r0, [pc, #180]	; (8001664 <main+0x128>)
 80015ae:	f008 f821 	bl	80095f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_3  );
 80015b2:	2108      	movs	r1, #8
 80015b4:	482b      	ldr	r0, [pc, #172]	; (8001664 <main+0x128>)
 80015b6:	f008 f81d 	bl	80095f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_4  );
 80015ba:	210c      	movs	r1, #12
 80015bc:	4829      	ldr	r0, [pc, #164]	; (8001664 <main+0x128>)
 80015be:	f008 f819 	bl	80095f4 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  telemetria_Queue = xQueueCreate( 3, 3*sizeof( float ) );
 80015c2:	2200      	movs	r2, #0
 80015c4:	210c      	movs	r1, #12
 80015c6:	2003      	movs	r0, #3
 80015c8:	f00c fbe6 	bl	800dd98 <xQueueGenericCreate>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4a26      	ldr	r2, [pc, #152]	; (8001668 <main+0x12c>)
 80015d0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 500);
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <main+0x130>)
 80015d4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80015d8:	461d      	mov	r5, r3
 80015da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00c fa57 	bl	800daa0 <osThreadCreate>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <main+0x134>)
 80015f6:	6013      	str	r3, [r2, #0]
  vTaskSuspend( defaultTaskHandle );
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <main+0x134>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00d f8db 	bl	800e7b8 <vTaskSuspend>

  /* definition and creation of Data_Reading */
  osThreadDef(Data_Reading, Start_Data_Reading, osPriorityNormal, 0, 500);
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <main+0x138>)
 8001604:	f107 0420 	add.w	r4, r7, #32
 8001608:	461d      	mov	r5, r3
 800160a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Data_ReadingHandle = osThreadCreate(osThread(Data_Reading), NULL);
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f00c fa3f 	bl	800daa0 <osThreadCreate>
 8001622:	4603      	mov	r3, r0
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <main+0x13c>)
 8001626:	6013      	str	r3, [r2, #0]

  /* definition and creation of Orientation_cal */
  osThreadDef(Orientation_cal, Start_Orientation, osPriorityBelowNormal, 0, 200);
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <main+0x140>)
 800162a:	1d3c      	adds	r4, r7, #4
 800162c:	461d      	mov	r5, r3
 800162e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Orientation_calHandle = osThreadCreate(osThread(Orientation_cal), NULL);
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f00c fa2e 	bl	800daa0 <osThreadCreate>
 8001644:	4603      	mov	r3, r0
 8001646:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <main+0x144>)
 8001648:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800164a:	f00c fa22 	bl	800da92 <osKernelStart>

  while (1)
  {


	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800164e:	2108      	movs	r1, #8
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <main+0x148>)
 8001652:	f005 fdea 	bl	800722a <HAL_GPIO_TogglePin>

	  HAL_Delay(3);
 8001656:	2003      	movs	r0, #3
 8001658:	f004 fc98 	bl	8005f8c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800165c:	e7f7      	b.n	800164e <main+0x112>
 800165e:	bf00      	nop
 8001660:	20000634 	.word	0x20000634
 8001664:	200006d4 	.word	0x200006d4
 8001668:	20002b34 	.word	0x20002b34
 800166c:	08014fac 	.word	0x08014fac
 8001670:	20000964 	.word	0x20000964
 8001674:	08014fc8 	.word	0x08014fc8
 8001678:	20000968 	.word	0x20000968
 800167c:	08014fe4 	.word	0x08014fe4
 8001680:	2000096c 	.word	0x2000096c
 8001684:	40020400 	.word	0x40020400

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b094      	sub	sp, #80	; 0x50
 800168c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	2230      	movs	r2, #48	; 0x30
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f00e fae8 	bl	800fc6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <SystemClock_Config+0xcc>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	4a27      	ldr	r2, [pc, #156]	; (8001754 <SystemClock_Config+0xcc>)
 80016b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ba:	6413      	str	r3, [r2, #64]	; 0x40
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <SystemClock_Config+0xcc>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <SystemClock_Config+0xd0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a21      	ldr	r2, [pc, #132]	; (8001758 <SystemClock_Config+0xd0>)
 80016d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <SystemClock_Config+0xd0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e4:	2301      	movs	r3, #1
 80016e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ee:	2302      	movs	r3, #2
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016f8:	2304      	movs	r3, #4
 80016fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016fc:	23a8      	movs	r3, #168	; 0xa8
 80016fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001700:	2302      	movs	r3, #2
 8001702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001704:	2304      	movs	r3, #4
 8001706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001708:	f107 0320 	add.w	r3, r7, #32
 800170c:	4618      	mov	r0, r3
 800170e:	f006 fd7f 	bl	8008210 <HAL_RCC_OscConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001718:	f001 ffb4 	bl	8003684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171c:	230f      	movs	r3, #15
 800171e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001720:	2302      	movs	r3, #2
 8001722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800172c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800172e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	2105      	movs	r1, #5
 800173a:	4618      	mov	r0, r3
 800173c:	f006 ffe0 	bl	8008700 <HAL_RCC_ClockConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001746:	f001 ff9d 	bl	8003684 <Error_Handler>
  }
}
 800174a:	bf00      	nop
 800174c:	3750      	adds	r7, #80	; 0x50
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40007000 	.word	0x40007000

0800175c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001762:	463b      	mov	r3, r7
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001770:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <MX_ADC1_Init+0x9c>)
 8001772:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800177a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <MX_ADC1_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_ADC1_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001798:	2200      	movs	r2, #0
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <MX_ADC1_Init+0x98>)
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <MX_ADC1_Init+0xa0>)
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017bc:	480d      	ldr	r0, [pc, #52]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017be:	f004 fc09 	bl	8005fd4 <HAL_ADC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017c8:	f001 ff5c 	bl	8003684 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017cc:	2305      	movs	r3, #5
 80017ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017d0:	2301      	movs	r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017de:	f004 fc3d 	bl	800605c <HAL_ADC_ConfigChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017e8:	f001 ff4c 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000460 	.word	0x20000460
 80017f8:	40012000 	.word	0x40012000
 80017fc:	0f000001 	.word	0x0f000001

08001800 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <MX_ADC2_Init+0x98>)
 8001814:	4a21      	ldr	r2, [pc, #132]	; (800189c <MX_ADC2_Init+0x9c>)
 8001816:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <MX_ADC2_Init+0x98>)
 800181a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800181e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <MX_ADC2_Init+0x98>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <MX_ADC2_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_ADC2_Init+0x98>)
 800182e:	2200      	movs	r2, #0
 8001830:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <MX_ADC2_Init+0x98>)
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <MX_ADC2_Init+0x98>)
 800183c:	2200      	movs	r2, #0
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <MX_ADC2_Init+0x98>)
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <MX_ADC2_Init+0xa0>)
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_ADC2_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_ADC2_Init+0x98>)
 800184e:	2201      	movs	r2, #1
 8001850:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_ADC2_Init+0x98>)
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_ADC2_Init+0x98>)
 800185c:	2201      	movs	r2, #1
 800185e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <MX_ADC2_Init+0x98>)
 8001862:	f004 fbb7 	bl	8005fd4 <HAL_ADC_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800186c:	f001 ff0a 	bl	8003684 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001870:	2304      	movs	r3, #4
 8001872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001874:	2301      	movs	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800187c:	463b      	mov	r3, r7
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_ADC2_Init+0x98>)
 8001882:	f004 fbeb 	bl	800605c <HAL_ADC_ConfigChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800188c:	f001 fefa 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200004a8 	.word	0x200004a8
 800189c:	40012100 	.word	0x40012100
 80018a0:	0f000001 	.word	0x0f000001

080018a4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018aa:	463b      	mov	r3, r7
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <MX_ADC3_Init+0x98>)
 80018b8:	4a21      	ldr	r2, [pc, #132]	; (8001940 <MX_ADC3_Init+0x9c>)
 80018ba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_ADC3_Init+0x98>)
 80018be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018c2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <MX_ADC3_Init+0x98>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <MX_ADC3_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <MX_ADC3_Init+0x98>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <MX_ADC3_Init+0x98>)
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_ADC3_Init+0x98>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_ADC3_Init+0x98>)
 80018e6:	4a17      	ldr	r2, [pc, #92]	; (8001944 <MX_ADC3_Init+0xa0>)
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_ADC3_Init+0x98>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <MX_ADC3_Init+0x98>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_ADC3_Init+0x98>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_ADC3_Init+0x98>)
 8001900:	2201      	movs	r2, #1
 8001902:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <MX_ADC3_Init+0x98>)
 8001906:	f004 fb65 	bl	8005fd4 <HAL_ADC_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001910:	f001 feb8 	bl	8003684 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001914:	230d      	movs	r3, #13
 8001916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001920:	463b      	mov	r3, r7
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_ADC3_Init+0x98>)
 8001926:	f004 fb99 	bl	800605c <HAL_ADC_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001930:	f001 fea8 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200004f0 	.word	0x200004f0
 8001940:	40012200 	.word	0x40012200
 8001944:	0f000001 	.word	0x0f000001

08001948 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_I2C1_Init+0x50>)
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <MX_I2C1_Init+0x54>)
 8001950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_I2C1_Init+0x50>)
 8001954:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <MX_I2C1_Init+0x58>)
 8001956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_I2C1_Init+0x50>)
 8001966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <MX_I2C1_Init+0x50>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_I2C1_Init+0x50>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <MX_I2C1_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_I2C1_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <MX_I2C1_Init+0x50>)
 8001986:	f005 fc83 	bl	8007290 <HAL_I2C_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001990:	f001 fe78 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000538 	.word	0x20000538
 800199c:	40005400 	.word	0x40005400
 80019a0:	00061a80 	.word	0x00061a80

080019a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <MX_I2C2_Init+0x54>)
 80019ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019b0:	4a12      	ldr	r2, [pc, #72]	; (80019fc <MX_I2C2_Init+0x58>)
 80019b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_I2C2_Init+0x50>)
 80019e2:	f005 fc55 	bl	8007290 <HAL_I2C_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019ec:	f001 fe4a 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000058c 	.word	0x2000058c
 80019f8:	40005800 	.word	0x40005800
 80019fc:	00061a80 	.word	0x00061a80

08001a00 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <MX_I2C3_Init+0x54>)
 8001a08:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <MX_I2C3_Init+0x58>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a22:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a3c:	4804      	ldr	r0, [pc, #16]	; (8001a50 <MX_I2C3_Init+0x50>)
 8001a3e:	f005 fc27 	bl	8007290 <HAL_I2C_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a48:	f001 fe1c 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200005e0 	.word	0x200005e0
 8001a54:	40005c00 	.word	0x40005c00
 8001a58:	00061a80 	.word	0x00061a80

08001a5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a62:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <MX_SPI2_Init+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a90:	2220      	movs	r2, #32
 8001a92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001aa8:	220a      	movs	r2, #10
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <MX_SPI2_Init+0x64>)
 8001aae:	f007 f847 	bl	8008b40 <HAL_SPI_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ab8:	f001 fde4 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000634 	.word	0x20000634
 8001ac4:	40003800 	.word	0x40003800

08001ac8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	f107 0318 	add.w	r3, r7, #24
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af2:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001afa:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001afc:	2253      	movs	r2, #83	; 0x53
 8001afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001b06:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b1a:	4822      	ldr	r0, [pc, #136]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b1c:	f007 fc50 	bl	80093c0 <HAL_TIM_Base_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001b26:	f001 fdad 	bl	8003684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b30:	f107 0318 	add.w	r3, r7, #24
 8001b34:	4619      	mov	r1, r3
 8001b36:	481b      	ldr	r0, [pc, #108]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b38:	f008 f8e4 	bl	8009d04 <HAL_TIM_ConfigClockSource>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b42:	f001 fd9f 	bl	8003684 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b46:	4817      	ldr	r0, [pc, #92]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b48:	f007 fe1c 	bl	8009784 <HAL_TIM_IC_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b52:	f001 fd97 	bl	8003684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	4619      	mov	r1, r3
 8001b64:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b66:	f008 ff05 	bl	800a974 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001b70:	f001 fd88 	bl	8003684 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b74:	2300      	movs	r3, #0
 8001b76:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b84:	463b      	mov	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <MX_TIM2_Init+0xdc>)
 8001b8c:	f007 ff5b 	bl	8009a46 <HAL_TIM_IC_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001b96:	f001 fd75 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000068c 	.word	0x2000068c

08001ba8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b092      	sub	sp, #72	; 0x48
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	615a      	str	r2, [r3, #20]
 8001be6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be8:	4b44      	ldr	r3, [pc, #272]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bea:	4a45      	ldr	r2, [pc, #276]	; (8001d00 <MX_TIM3_Init+0x158>)
 8001bec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7-1;
 8001bee:	4b43      	ldr	r3, [pc, #268]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bf0:	2206      	movs	r2, #6
 8001bf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001bfa:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001bfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c08:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c0e:	483b      	ldr	r0, [pc, #236]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c10:	f007 fbd6 	bl	80093c0 <HAL_TIM_Base_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c1a:	f001 fd33 	bl	8003684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4834      	ldr	r0, [pc, #208]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c2c:	f008 f86a 	bl	8009d04 <HAL_TIM_ConfigClockSource>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c36:	f001 fd25 	bl	8003684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c3a:	4830      	ldr	r0, [pc, #192]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c3c:	f007 fc80 	bl	8009540 <HAL_TIM_PWM_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001c46:	f001 fd1d 	bl	8003684 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001c4e:	2330      	movs	r3, #48	; 0x30
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	4619      	mov	r1, r3
 8001c58:	4828      	ldr	r0, [pc, #160]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c5a:	f008 f91a 	bl	8009e92 <HAL_TIM_SlaveConfigSynchro>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001c64:	f001 fd0e 	bl	8003684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	4821      	ldr	r0, [pc, #132]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c78:	f008 fe7c 	bl	800a974 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c82:	f001 fcff 	bl	8003684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c86:	2360      	movs	r3, #96	; 0x60
 8001c88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c96:	463b      	mov	r3, r7
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4817      	ldr	r0, [pc, #92]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001c9e:	f007 ff6f 	bl	8009b80 <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001ca8:	f001 fcec 	bl	8003684 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cac:	463b      	mov	r3, r7
 8001cae:	2204      	movs	r2, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4812      	ldr	r0, [pc, #72]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001cb4:	f007 ff64 	bl	8009b80 <HAL_TIM_PWM_ConfigChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001cbe:	f001 fce1 	bl	8003684 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001cca:	f007 ff59 	bl	8009b80 <HAL_TIM_PWM_ConfigChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8001cd4:	f001 fcd6 	bl	8003684 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cd8:	463b      	mov	r3, r7
 8001cda:	220c      	movs	r2, #12
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4807      	ldr	r0, [pc, #28]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001ce0:	f007 ff4e 	bl	8009b80 <HAL_TIM_PWM_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8001cea:	f001 fccb 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cee:	4803      	ldr	r0, [pc, #12]	; (8001cfc <MX_TIM3_Init+0x154>)
 8001cf0:	f001 ff74 	bl	8003bdc <HAL_TIM_MspPostInit>

}
 8001cf4:	bf00      	nop
 8001cf6:	3748      	adds	r7, #72	; 0x48
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	200006d4 	.word	0x200006d4
 8001d00:	40000400 	.word	0x40000400

08001d04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08e      	sub	sp, #56	; 0x38
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
 8001d30:	615a      	str	r2, [r3, #20]
 8001d32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d34:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d36:	4a2c      	ldr	r2, [pc, #176]	; (8001de8 <MX_TIM4_Init+0xe4>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d3a:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d46:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d5a:	4822      	ldr	r0, [pc, #136]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d5c:	f007 fb30 	bl	80093c0 <HAL_TIM_Base_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d66:	f001 fc8d 	bl	8003684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d74:	4619      	mov	r1, r3
 8001d76:	481b      	ldr	r0, [pc, #108]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d78:	f007 ffc4 	bl	8009d04 <HAL_TIM_ConfigClockSource>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d82:	f001 fc7f 	bl	8003684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d86:	4817      	ldr	r0, [pc, #92]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001d88:	f007 fbda 	bl	8009540 <HAL_TIM_PWM_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d92:	f001 fc77 	bl	8003684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	4619      	mov	r1, r3
 8001da4:	480f      	ldr	r0, [pc, #60]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001da6:	f008 fde5 	bl	800a974 <HAL_TIMEx_MasterConfigSynchronization>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001db0:	f001 fc68 	bl	8003684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db4:	2360      	movs	r3, #96	; 0x60
 8001db6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4806      	ldr	r0, [pc, #24]	; (8001de4 <MX_TIM4_Init+0xe0>)
 8001dcc:	f007 fed8 	bl	8009b80 <HAL_TIM_PWM_ConfigChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001dd6:	f001 fc55 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	3738      	adds	r7, #56	; 0x38
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000071c 	.word	0x2000071c
 8001de8:	40000800 	.word	0x40000800

08001dec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df2:	463b      	mov	r3, r7
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001dfc:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <MX_TIM6_Init+0x68>)
 8001dfe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e02:	2253      	movs	r2, #83	; 0x53
 8001e04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65000;
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e0e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001e12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e1c:	f007 fad0 	bl	80093c0 <HAL_TIM_Base_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e26:	f001 fc2d 	bl	8003684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e32:	463b      	mov	r3, r7
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e38:	f008 fd9c 	bl	800a974 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e42:	f001 fc1f 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000764 	.word	0x20000764
 8001e54:	40001000 	.word	0x40001000

08001e58 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e68:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <MX_TIM7_Init+0x68>)
 8001e6a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 85-1;
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e6e:	2254      	movs	r2, #84	; 0x54
 8001e70:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001e78:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e7e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e86:	480d      	ldr	r0, [pc, #52]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001e88:	f007 fa9a 	bl	80093c0 <HAL_TIM_Base_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001e92:	f001 fbf7 	bl	8003684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4806      	ldr	r0, [pc, #24]	; (8001ebc <MX_TIM7_Init+0x64>)
 8001ea4:	f008 fd66 	bl	800a974 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001eae:	f001 fbe9 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200007ac 	.word	0x200007ac
 8001ec0:	40001400 	.word	0x40001400

08001ec4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001eca:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <MX_USART1_UART_Init+0x4c>)
 8001ecc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 420000;
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ed0:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <MX_USART1_UART_Init+0x50>)
 8001ed2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ee8:	220c      	movs	r2, #12
 8001eea:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ef8:	4804      	ldr	r0, [pc, #16]	; (8001f0c <MX_USART1_UART_Init+0x48>)
 8001efa:	f008 fdcb 	bl	800aa94 <HAL_UART_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001f04:	f001 fbbe 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200007f4 	.word	0x200007f4
 8001f10:	40011000 	.word	0x40011000
 8001f14:	000668a0 	.word	0x000668a0

08001f18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <MX_USART2_UART_Init+0x50>)
 8001f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f3e:	220c      	movs	r2, #12
 8001f40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f4e:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_USART2_UART_Init+0x4c>)
 8001f50:	f008 fda0 	bl	800aa94 <HAL_UART_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f5a:	f001 fb93 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000838 	.word	0x20000838
 8001f68:	40004400 	.word	0x40004400

08001f6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <MX_USART3_UART_Init+0x50>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_USART3_UART_Init+0x4c>)
 8001fa4:	f008 fd76 	bl	800aa94 <HAL_UART_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fae:	f001 fb69 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	2000087c 	.word	0x2000087c
 8001fbc:	40004800 	.word	0x40004800

08001fc0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <MX_USART6_UART_Init+0x50>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <MX_USART6_UART_Init+0x4c>)
 8001ff8:	f008 fd4c 	bl	800aa94 <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002002:	f001 fb3f 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200008c0 	.word	0x200008c0
 8002010:	40011400 	.word	0x40011400

08002014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_DMA_Init+0x3c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <MX_DMA_Init+0x3c>)
 8002024:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_DMA_Init+0x3c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2105      	movs	r1, #5
 800203a:	203a      	movs	r0, #58	; 0x3a
 800203c:	f004 fb07 	bl	800664e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002040:	203a      	movs	r0, #58	; 0x3a
 8002042:	f004 fb20 	bl	8006686 <HAL_NVIC_EnableIRQ>

}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800

08002054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a6c      	ldr	r2, [pc, #432]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b6a      	ldr	r3, [pc, #424]	; (8002224 <MX_GPIO_Init+0x1d0>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b66      	ldr	r3, [pc, #408]	; (8002224 <MX_GPIO_Init+0x1d0>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a65      	ldr	r2, [pc, #404]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b63      	ldr	r3, [pc, #396]	; (8002224 <MX_GPIO_Init+0x1d0>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	4b5f      	ldr	r3, [pc, #380]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a5e      	ldr	r2, [pc, #376]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b5c      	ldr	r3, [pc, #368]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	4b58      	ldr	r3, [pc, #352]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a57      	ldr	r2, [pc, #348]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b55      	ldr	r3, [pc, #340]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	4b51      	ldr	r3, [pc, #324]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a50      	ldr	r2, [pc, #320]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <MX_GPIO_Init+0x1d0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|GNSS_RST_Pin, GPIO_PIN_RESET);
 80020f6:	2200      	movs	r2, #0
 80020f8:	f248 0102 	movw	r1, #32770	; 0x8002
 80020fc:	484a      	ldr	r0, [pc, #296]	; (8002228 <MX_GPIO_Init+0x1d4>)
 80020fe:	f005 f87b 	bl	80071f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	f241 0118 	movw	r1, #4120	; 0x1018
 8002108:	4848      	ldr	r0, [pc, #288]	; (800222c <MX_GPIO_Init+0x1d8>)
 800210a:	f005 f875 	bl	80071f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002114:	4846      	ldr	r0, [pc, #280]	; (8002230 <MX_GPIO_Init+0x1dc>)
 8002116:	f005 f86f 	bl	80071f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800211a:	2200      	movs	r2, #0
 800211c:	2104      	movs	r1, #4
 800211e:	4845      	ldr	r0, [pc, #276]	; (8002234 <MX_GPIO_Init+0x1e0>)
 8002120:	f005 f86a 	bl	80071f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IT_MAGN_Pin BUTTON_Pin */
  GPIO_InitStruct.Pin = IT_MAGN_Pin|BUTTON_Pin;
 8002124:	f242 0301 	movw	r3, #8193	; 0x2001
 8002128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800212a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800212e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4619      	mov	r1, r3
 800213a:	483d      	ldr	r0, [pc, #244]	; (8002230 <MX_GPIO_Init+0x1dc>)
 800213c:	f004 fec0 	bl	8006ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin GNSS_RST_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|GNSS_RST_Pin;
 8002140:	f248 0302 	movw	r3, #32770	; 0x8002
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002146:	2301      	movs	r3, #1
 8002148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	4833      	ldr	r0, [pc, #204]	; (8002228 <MX_GPIO_Init+0x1d4>)
 800215a:	f004 feb1 	bl	8006ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IT_PRESS_Pin */
  GPIO_InitStruct.Pin = IT_PRESS_Pin;
 800215e:	2304      	movs	r3, #4
 8002160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002162:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IT_PRESS_GPIO_Port, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	482e      	ldr	r0, [pc, #184]	; (800222c <MX_GPIO_Init+0x1d8>)
 8002174:	f004 fea4 	bl	8006ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_GYRO_Pin PB3 PB4 */
  GPIO_InitStruct.Pin = CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4;
 8002178:	f241 0318 	movw	r3, #4120	; 0x1018
 800217c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217e:	2301      	movs	r3, #1
 8002180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	4826      	ldr	r0, [pc, #152]	; (800222c <MX_GPIO_Init+0x1d8>)
 8002192:	f004 fe95 	bl	8006ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_ACC_Pin */
  GPIO_InitStruct.Pin = CS_ACC_Pin;
 8002196:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_ACC_GPIO_Port, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	4820      	ldr	r0, [pc, #128]	; (8002230 <MX_GPIO_Init+0x1dc>)
 80021b0:	f004 fe86 	bl	8006ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IT_GYRO_Pin IT_ACC_Pin */
  GPIO_InitStruct.Pin = IT_GYRO_Pin|IT_ACC_Pin;
 80021b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	4817      	ldr	r0, [pc, #92]	; (8002228 <MX_GPIO_Init+0x1d4>)
 80021cc:	f004 fe78 	bl	8006ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021d0:	2304      	movs	r3, #4
 80021d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4619      	mov	r1, r3
 80021e6:	4813      	ldr	r0, [pc, #76]	; (8002234 <MX_GPIO_Init+0x1e0>)
 80021e8:	f004 fe6a 	bl	8006ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80021ec:	2200      	movs	r2, #0
 80021ee:	2105      	movs	r1, #5
 80021f0:	2006      	movs	r0, #6
 80021f2:	f004 fa2c 	bl	800664e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021f6:	2006      	movs	r0, #6
 80021f8:	f004 fa45 	bl	8006686 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2105      	movs	r1, #5
 8002200:	2008      	movs	r0, #8
 8002202:	f004 fa24 	bl	800664e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002206:	2008      	movs	r0, #8
 8002208:	f004 fa3d 	bl	8006686 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2105      	movs	r1, #5
 8002210:	2028      	movs	r0, #40	; 0x28
 8002212:	f004 fa1c 	bl	800664e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002216:	2028      	movs	r0, #40	; 0x28
 8002218:	f004 fa35 	bl	8006686 <HAL_NVIC_EnableIRQ>

}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000
 800222c:	40020400 	.word	0x40020400
 8002230:	40020800 	.word	0x40020800
 8002234:	40020c00 	.word	0x40020c00

08002238 <HAL_GPIO_EXTI_Callback>:

    return reversed;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin) {
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d11c      	bne.n	8002282 <HAL_GPIO_EXTI_Callback+0x4a>
		if(state == 4){state = 5;}
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d102      	bne.n	8002256 <HAL_GPIO_EXTI_Callback+0x1e>
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002252:	2205      	movs	r2, #5
 8002254:	701a      	strb	r2, [r3, #0]
		if(state == 3){state = 4;}
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d102      	bne.n	8002264 <HAL_GPIO_EXTI_Callback+0x2c>
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002260:	2204      	movs	r2, #4
 8002262:	701a      	strb	r2, [r3, #0]
		if(state == 2){state = 3;}
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d102      	bne.n	8002272 <HAL_GPIO_EXTI_Callback+0x3a>
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800226e:	2203      	movs	r2, #3
 8002270:	701a      	strb	r2, [r3, #0]
		if(state == 1){state = 2;}
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d104      	bne.n	8002284 <HAL_GPIO_EXTI_Callback+0x4c>
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800227c:	2202      	movs	r2, #2
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e000      	b.n	8002284 <HAL_GPIO_EXTI_Callback+0x4c>
	  } else {
	      __NOP();
 8002282:	bf00      	nop
	  }

	if(GPIO_Pin == IT_ACC_Pin) {
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800228a:	d103      	bne.n	8002294 <HAL_GPIO_EXTI_Callback+0x5c>

	 readstart = 1;
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_GPIO_EXTI_Callback+0x80>)
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	e000      	b.n	8002296 <HAL_GPIO_EXTI_Callback+0x5e>
  } else {
      __NOP();
 8002294:	bf00      	nop
  }
  if(GPIO_Pin == IT_MAGN_Pin) {
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229c:	d103      	bne.n	80022a6 <HAL_GPIO_EXTI_Callback+0x6e>
  	 //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

  	 billent = 1;
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_GPIO_EXTI_Callback+0x84>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
    } else {
        __NOP();
    }
}
 80022a4:	e000      	b.n	80022a8 <HAL_GPIO_EXTI_Callback+0x70>
        __NOP();
 80022a6:	bf00      	nop
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	20000009 	.word	0x20000009
 80022b8:	20000008 	.word	0x20000008
 80022bc:	20000a2c 	.word	0x20000a2c

080022c0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a47      	ldr	r2, [pc, #284]	; (80023e8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	f040 8083 	bne.w	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
	  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80022d2:	2110      	movs	r1, #16
 80022d4:	4845      	ldr	r0, [pc, #276]	; (80023ec <HAL_TIM_IC_CaptureCallback+0x12c>)
 80022d6:	f004 ffa8 	bl	800722a <HAL_GPIO_TogglePin>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7f1b      	ldrb	r3, [r3, #28]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d17a      	bne.n	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 80022e2:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d11a      	bne.n	8002320 <HAL_TIM_IC_CaptureCallback+0x60>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80022ea:	2100      	movs	r1, #0
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f007 fe13 	bl	8009f18 <HAL_TIM_ReadCapturedValue>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4a3f      	ldr	r2, [pc, #252]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80022f6:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 80022f8:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6a1a      	ldr	r2, [r3, #32]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 020a 	bic.w	r2, r2, #10
 800230c:	621a      	str	r2, [r3, #32]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6a1a      	ldr	r2, [r3, #32]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0202 	orr.w	r2, r2, #2
 800231c:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				//__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
			}
		}
	  }
}
 800231e:	e05b      	b.n	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
			else if (Is_First_Captured==1)   // if the first is already captured
 8002320:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d157      	bne.n	80023d8 <HAL_TIM_IC_CaptureCallback+0x118>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8002328:	2100      	movs	r1, #0
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f007 fdf4 	bl	8009f18 <HAL_TIM_ReadCapturedValue>
 8002330:	4603      	mov	r3, r0
 8002332:	4a31      	ldr	r2, [pc, #196]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002334:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2200      	movs	r2, #0
 800233c:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Val2 > IC_Val1)
 800233e:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b2c      	ldr	r3, [pc, #176]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d907      	bls.n	800235a <HAL_TIM_IC_CaptureCallback+0x9a>
					Difference = IC_Val2-IC_Val1;
 800234a:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	4a29      	ldr	r2, [pc, #164]	; (80023fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	e00f      	b.n	800237a <HAL_TIM_IC_CaptureCallback+0xba>
				else if (IC_Val1 > IC_Val2)
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d909      	bls.n	800237a <HAL_TIM_IC_CaptureCallback+0xba>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002374:	33ff      	adds	r3, #255	; 0xff
 8002376:	4a21      	ldr	r2, [pc, #132]	; (80023fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002378:	6013      	str	r3, [r2, #0]
				Distance = Difference * .34/2;
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f8c0 	bl	8000504 <__aeabi_ui2d>
 8002384:	a316      	add	r3, pc, #88	; (adr r3, 80023e0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	f7fe f935 	bl	80005f8 <__aeabi_dmul>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800239e:	f7fe fa55 	bl	800084c <__aeabi_ddiv>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	f7fe fbfd 	bl	8000ba8 <__aeabi_d2uiz>
 80023ae:	4603      	mov	r3, r0
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b13      	ldr	r3, [pc, #76]	; (8002400 <HAL_TIM_IC_CaptureCallback+0x140>)
 80023b4:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6a1a      	ldr	r2, [r3, #32]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 020a 	bic.w	r2, r2, #10
 80023ca:	621a      	str	r2, [r3, #32]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6a12      	ldr	r2, [r2, #32]
 80023d6:	621a      	str	r2, [r3, #32]
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	5c28f5c3 	.word	0x5c28f5c3
 80023e4:	3fd5c28f 	.word	0x3fd5c28f
 80023e8:	2000068c 	.word	0x2000068c
 80023ec:	40020400 	.word	0x40020400
 80023f0:	20000b30 	.word	0x20000b30
 80023f4:	20000b24 	.word	0x20000b24
 80023f8:	20000b28 	.word	0x20000b28
 80023fc:	20000b2c 	.word	0x20000b2c
 8002400:	20000b31 	.word	0x20000b31

08002404 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6 )
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d10d      	bne.n	8002430 <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
	  if(timerse == 1){timerse =0;}
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d102      	bne.n	8002422 <HAL_TIM_PeriodElapsedCallback+0x1e>
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
	  if(timerse == 0){timerse =1;}
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <HAL_TIM_PeriodElapsedCallback+0x2c>
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800242c:	2201      	movs	r2, #1
 800242e:	701a      	strb	r2, [r3, #0]
  }
  if(htim == &htim7){

  }
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	20000764 	.word	0x20000764
 8002440:	20000b44 	.word	0x20000b44

08002444 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	if(huart ==&huart1){
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a4b      	ldr	r2, [pc, #300]	; (800257c <HAL_UART_RxCpltCallback+0x138>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d17b      	bne.n	800254c <HAL_UART_RxCpltCallback+0x108>
		debug_i = __HAL_TIM_GET_COUNTER(&htim6);
 8002454:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <HAL_UART_RxCpltCallback+0x13c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	461a      	mov	r2, r3
 800245c:	4b49      	ldr	r3, [pc, #292]	; (8002584 <HAL_UART_RxCpltCallback+0x140>)
 800245e:	601a      	str	r2, [r3, #0]
		if(debug_i < 100){
 8002460:	4b48      	ldr	r3, [pc, #288]	; (8002584 <HAL_UART_RxCpltCallback+0x140>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b63      	cmp	r3, #99	; 0x63
 8002466:	dc0d      	bgt.n	8002484 <HAL_UART_RxCpltCallback+0x40>
			CRSF_debug[CRSF_i] = UART1_rxBuffer[0];
 8002468:	4b47      	ldr	r3, [pc, #284]	; (8002588 <HAL_UART_RxCpltCallback+0x144>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4b47      	ldr	r3, [pc, #284]	; (800258c <HAL_UART_RxCpltCallback+0x148>)
 8002470:	7819      	ldrb	r1, [r3, #0]
 8002472:	4b47      	ldr	r3, [pc, #284]	; (8002590 <HAL_UART_RxCpltCallback+0x14c>)
 8002474:	5499      	strb	r1, [r3, r2]
			CRSF_i++;
 8002476:	4b44      	ldr	r3, [pc, #272]	; (8002588 <HAL_UART_RxCpltCallback+0x144>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	3301      	adds	r3, #1
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4b42      	ldr	r3, [pc, #264]	; (8002588 <HAL_UART_RxCpltCallback+0x144>)
 8002480:	701a      	strb	r2, [r3, #0]
 8002482:	e05f      	b.n	8002544 <HAL_UART_RxCpltCallback+0x100>
		}
		else{
			if(CRSF_debug[2] == 0x16){
 8002484:	4b42      	ldr	r3, [pc, #264]	; (8002590 <HAL_UART_RxCpltCallback+0x14c>)
 8002486:	789b      	ldrb	r3, [r3, #2]
 8002488:	2b16      	cmp	r3, #22
 800248a:	d154      	bne.n	8002536 <HAL_UART_RxCpltCallback+0xf2>
				RX_roll = (((uint16_t)(CRSF_debug[4] & 0b00000111)) << 8) + (uint16_t)(CRSF_debug[3]);
 800248c:	4b40      	ldr	r3, [pc, #256]	; (8002590 <HAL_UART_RxCpltCallback+0x14c>)
 800248e:	791b      	ldrb	r3, [r3, #4]
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	b29b      	uxth	r3, r3
 8002494:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002498:	b29a      	uxth	r2, r3
 800249a:	4b3d      	ldr	r3, [pc, #244]	; (8002590 <HAL_UART_RxCpltCallback+0x14c>)
 800249c:	78db      	ldrb	r3, [r3, #3]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <HAL_UART_RxCpltCallback+0x150>)
 80024a6:	801a      	strh	r2, [r3, #0]
				RX_pitch = (((uint16_t)(CRSF_debug[5] & 0b00111111)) << 5) + (((uint16_t)(CRSF_debug[4] & 0b11111000)) >> 3);
 80024a8:	4b39      	ldr	r3, [pc, #228]	; (8002590 <HAL_UART_RxCpltCallback+0x14c>)
 80024aa:	795b      	ldrb	r3, [r3, #5]
 80024ac:	015b      	lsls	r3, r3, #5
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	4b36      	ldr	r3, [pc, #216]	; (8002590 <HAL_UART_RxCpltCallback+0x14c>)
 80024b8:	791b      	ldrb	r3, [r3, #4]
 80024ba:	08db      	lsrs	r3, r3, #3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	4b34      	ldr	r3, [pc, #208]	; (8002598 <HAL_UART_RxCpltCallback+0x154>)
 80024c6:	801a      	strh	r2, [r3, #0]
				RX_throttle = (((uint16_t)(CRSF_debug[7] & 0b00000001)) << 10)+ (((uint16_t)(CRSF_debug[6])) << 2) + (((uint16_t)(CRSF_debug[5] & 0b11000000)) >> 6);
 80024c8:	4b31      	ldr	r3, [pc, #196]	; (8002590 <HAL_UART_RxCpltCallback+0x14c>)
 80024ca:	79db      	ldrb	r3, [r3, #7]
 80024cc:	029b      	lsls	r3, r3, #10
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <HAL_UART_RxCpltCallback+0x14c>)
 80024d8:	799b      	ldrb	r3, [r3, #6]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	b29b      	uxth	r3, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <HAL_UART_RxCpltCallback+0x14c>)
 80024e6:	795b      	ldrb	r3, [r3, #5]
 80024e8:	099b      	lsrs	r3, r3, #6
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	4b2a      	ldr	r3, [pc, #168]	; (800259c <HAL_UART_RxCpltCallback+0x158>)
 80024f4:	801a      	strh	r2, [r3, #0]
				RX_yaw = (((uint16_t)(CRSF_debug[8] & 0b00001111)) << 7) + (((uint16_t)(CRSF_debug[7] & 0b11111110)) >> 1);
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_UART_RxCpltCallback+0x14c>)
 80024f8:	7a1b      	ldrb	r3, [r3, #8]
 80024fa:	01db      	lsls	r3, r3, #7
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8002502:	b29a      	uxth	r2, r3
 8002504:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_UART_RxCpltCallback+0x14c>)
 8002506:	79db      	ldrb	r3, [r3, #7]
 8002508:	085b      	lsrs	r3, r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	b29b      	uxth	r3, r3
 800250e:	4413      	add	r3, r2
 8002510:	b29a      	uxth	r2, r3
 8002512:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <HAL_UART_RxCpltCallback+0x15c>)
 8002514:	801a      	strh	r2, [r3, #0]
				RX_arm = (((uint16_t)(CRSF_debug[9] & 0b01111111)) << 4) + (((uint16_t)(CRSF_debug[8] & 0b11110000)) >> 4);
 8002516:	4b1e      	ldr	r3, [pc, #120]	; (8002590 <HAL_UART_RxCpltCallback+0x14c>)
 8002518:	7a5b      	ldrb	r3, [r3, #9]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	b29b      	uxth	r3, r3
 800251e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8002522:	b29a      	uxth	r2, r3
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <HAL_UART_RxCpltCallback+0x14c>)
 8002526:	7a1b      	ldrb	r3, [r3, #8]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	b2db      	uxtb	r3, r3
 800252c:	b29b      	uxth	r3, r3
 800252e:	4413      	add	r3, r2
 8002530:	b29a      	uxth	r2, r3
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <HAL_UART_RxCpltCallback+0x160>)
 8002534:	801a      	strh	r2, [r3, #0]
			}
			CRSF_debug[0] = UART1_rxBuffer[0];
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_UART_RxCpltCallback+0x148>)
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_UART_RxCpltCallback+0x14c>)
 800253c:	701a      	strb	r2, [r3, #0]
			CRSF_i = 1;
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_UART_RxCpltCallback+0x144>)
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
		}
		htim6.Instance->CNT = 0;
 8002544:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_UART_RxCpltCallback+0x13c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2200      	movs	r2, #0
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(huart == &huart2){
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <HAL_UART_RxCpltCallback+0x164>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d10e      	bne.n	8002572 <HAL_UART_RxCpltCallback+0x12e>
		if(uart_telemetria == 1){
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_UART_RxCpltCallback+0x168>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <HAL_UART_RxCpltCallback+0x124>
			HAL_UART_Receive_IT(&huart2, telem, 11);
 800255c:	220b      	movs	r2, #11
 800255e:	4914      	ldr	r1, [pc, #80]	; (80025b0 <HAL_UART_RxCpltCallback+0x16c>)
 8002560:	4811      	ldr	r0, [pc, #68]	; (80025a8 <HAL_UART_RxCpltCallback+0x164>)
 8002562:	f008 fb76 	bl	800ac52 <HAL_UART_Receive_IT>
		}
		else
			HAL_UART_Receive_IT(&huart2, telem, 11);
	}
}
 8002566:	e004      	b.n	8002572 <HAL_UART_RxCpltCallback+0x12e>
			HAL_UART_Receive_IT(&huart2, telem, 11);
 8002568:	220b      	movs	r2, #11
 800256a:	4911      	ldr	r1, [pc, #68]	; (80025b0 <HAL_UART_RxCpltCallback+0x16c>)
 800256c:	480e      	ldr	r0, [pc, #56]	; (80025a8 <HAL_UART_RxCpltCallback+0x164>)
 800256e:	f008 fb70 	bl	800ac52 <HAL_UART_Receive_IT>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200007f4 	.word	0x200007f4
 8002580:	20000764 	.word	0x20000764
 8002584:	20000b40 	.word	0x20000b40
 8002588:	20002b0c 	.word	0x20002b0c
 800258c:	20002b10 	.word	0x20002b10
 8002590:	20002acc 	.word	0x20002acc
 8002594:	20002b12 	.word	0x20002b12
 8002598:	20002b14 	.word	0x20002b14
 800259c:	20002b18 	.word	0x20002b18
 80025a0:	20002b16 	.word	0x20002b16
 80025a4:	20002b1a 	.word	0x20002b1a
 80025a8:	20000838 	.word	0x20000838
 80025ac:	20000b32 	.word	0x20000b32
 80025b0:	20000000 	.word	0x20000000

080025b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b08d      	sub	sp, #52	; 0x34
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
	uint8_t telemetria[8];
	uint8_t telemetria_data[20] = "HELLO WORLD \r\n";
 80025bc:	4b5d      	ldr	r3, [pc, #372]	; (8002734 <StartDefaultTask+0x180>)
 80025be:	f107 0414 	add.w	r4, r7, #20
 80025c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025c4:	c407      	stmia	r4!, {r0, r1, r2}
 80025c6:	8023      	strh	r3, [r4, #0]
 80025c8:	3402      	adds	r4, #2
 80025ca:	0c1b      	lsrs	r3, r3, #16
 80025cc:	7023      	strb	r3, [r4, #0]
 80025ce:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	711a      	strb	r2, [r3, #4]


  /* Infinite loop */
  for(;;)
  {
	  if(uart_telemetria == 1){
 80025d8:	4b57      	ldr	r3, [pc, #348]	; (8002738 <StartDefaultTask+0x184>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	f040 8086 	bne.w	80026ee <StartDefaultTask+0x13a>
		  if(telem[0] == 'P'){
 80025e2:	4b56      	ldr	r3, [pc, #344]	; (800273c <StartDefaultTask+0x188>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b50      	cmp	r3, #80	; 0x50
 80025e8:	d13e      	bne.n	8002668 <StartDefaultTask+0xb4>
			  telem_P = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 80025ea:	4b54      	ldr	r3, [pc, #336]	; (800273c <StartDefaultTask+0x188>)
 80025ec:	785b      	ldrb	r3, [r3, #1]
 80025ee:	461a      	mov	r2, r3
 80025f0:	4b53      	ldr	r3, [pc, #332]	; (8002740 <StartDefaultTask+0x18c>)
 80025f2:	fb03 f202 	mul.w	r2, r3, r2
 80025f6:	4b51      	ldr	r3, [pc, #324]	; (800273c <StartDefaultTask+0x188>)
 80025f8:	789b      	ldrb	r3, [r3, #2]
 80025fa:	4619      	mov	r1, r3
 80025fc:	4b51      	ldr	r3, [pc, #324]	; (8002744 <StartDefaultTask+0x190>)
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	441a      	add	r2, r3
 8002604:	4b4d      	ldr	r3, [pc, #308]	; (800273c <StartDefaultTask+0x188>)
 8002606:	78db      	ldrb	r3, [r3, #3]
 8002608:	4619      	mov	r1, r3
 800260a:	f242 7310 	movw	r3, #10000	; 0x2710
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	441a      	add	r2, r3
 8002614:	4b49      	ldr	r3, [pc, #292]	; (800273c <StartDefaultTask+0x188>)
 8002616:	791b      	ldrb	r3, [r3, #4]
 8002618:	4619      	mov	r1, r3
 800261a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	441a      	add	r2, r3
 8002624:	4b45      	ldr	r3, [pc, #276]	; (800273c <StartDefaultTask+0x188>)
 8002626:	795b      	ldrb	r3, [r3, #5]
 8002628:	4619      	mov	r1, r3
 800262a:	2364      	movs	r3, #100	; 0x64
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	441a      	add	r2, r3
 8002632:	4b42      	ldr	r3, [pc, #264]	; (800273c <StartDefaultTask+0x188>)
 8002634:	799b      	ldrb	r3, [r3, #6]
 8002636:	4619      	mov	r1, r3
 8002638:	460b      	mov	r3, r1
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	4a3e      	ldr	r2, [pc, #248]	; (800273c <StartDefaultTask+0x188>)
 8002644:	79d2      	ldrb	r2, [r2, #7]
 8002646:	441a      	add	r2, r3
 8002648:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <StartDefaultTask+0x194>)
 800264a:	4413      	add	r3, r2
 800264c:	ee07 3a90 	vmov	s15, r3
 8002650:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002654:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800274c <StartDefaultTask+0x198>
 8002658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800265c:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <StartDefaultTask+0x19c>)
 800265e:	edc3 7a00 	vstr	s15, [r3]
			  new_P = 1;
 8002662:	4b3c      	ldr	r3, [pc, #240]	; (8002754 <StartDefaultTask+0x1a0>)
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
		  }
		  if(telem[0] == 'D'){
 8002668:	4b34      	ldr	r3, [pc, #208]	; (800273c <StartDefaultTask+0x188>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b44      	cmp	r3, #68	; 0x44
 800266e:	d13e      	bne.n	80026ee <StartDefaultTask+0x13a>
			  telem_D = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 8002670:	4b32      	ldr	r3, [pc, #200]	; (800273c <StartDefaultTask+0x188>)
 8002672:	785b      	ldrb	r3, [r3, #1]
 8002674:	461a      	mov	r2, r3
 8002676:	4b32      	ldr	r3, [pc, #200]	; (8002740 <StartDefaultTask+0x18c>)
 8002678:	fb03 f202 	mul.w	r2, r3, r2
 800267c:	4b2f      	ldr	r3, [pc, #188]	; (800273c <StartDefaultTask+0x188>)
 800267e:	789b      	ldrb	r3, [r3, #2]
 8002680:	4619      	mov	r1, r3
 8002682:	4b30      	ldr	r3, [pc, #192]	; (8002744 <StartDefaultTask+0x190>)
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	441a      	add	r2, r3
 800268a:	4b2c      	ldr	r3, [pc, #176]	; (800273c <StartDefaultTask+0x188>)
 800268c:	78db      	ldrb	r3, [r3, #3]
 800268e:	4619      	mov	r1, r3
 8002690:	f242 7310 	movw	r3, #10000	; 0x2710
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	441a      	add	r2, r3
 800269a:	4b28      	ldr	r3, [pc, #160]	; (800273c <StartDefaultTask+0x188>)
 800269c:	791b      	ldrb	r3, [r3, #4]
 800269e:	4619      	mov	r1, r3
 80026a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	441a      	add	r2, r3
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <StartDefaultTask+0x188>)
 80026ac:	795b      	ldrb	r3, [r3, #5]
 80026ae:	4619      	mov	r1, r3
 80026b0:	2364      	movs	r3, #100	; 0x64
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	441a      	add	r2, r3
 80026b8:	4b20      	ldr	r3, [pc, #128]	; (800273c <StartDefaultTask+0x188>)
 80026ba:	799b      	ldrb	r3, [r3, #6]
 80026bc:	4619      	mov	r1, r3
 80026be:	460b      	mov	r3, r1
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	4a1c      	ldr	r2, [pc, #112]	; (800273c <StartDefaultTask+0x188>)
 80026ca:	79d2      	ldrb	r2, [r2, #7]
 80026cc:	441a      	add	r2, r3
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <StartDefaultTask+0x194>)
 80026d0:	4413      	add	r3, r2
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026da:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800274c <StartDefaultTask+0x198>
 80026de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <StartDefaultTask+0x1a4>)
 80026e4:	edc3 7a00 	vstr	s15, [r3]
			  new_D = 1;
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <StartDefaultTask+0x1a8>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if (xQueueReceive(telemetria_Queue, (void*)&drone_angle, 0) == pdTRUE){
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <StartDefaultTask+0x1ac>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f107 0108 	add.w	r1, r7, #8
 80026f6:	2200      	movs	r2, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f00b fca5 	bl	800e048 <xQueueReceive>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b01      	cmp	r3, #1
 8002702:	d111      	bne.n	8002728 <StartDefaultTask+0x174>
		  sprintf((char*)telemetria_data, "Yaw: %4.2f\r\n", drone_angle[0]); //%5.2f
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd ff1e 	bl	8000548 <__aeabi_f2d>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	f107 0014 	add.w	r0, r7, #20
 8002714:	4913      	ldr	r1, [pc, #76]	; (8002764 <StartDefaultTask+0x1b0>)
 8002716:	f00d ff1b 	bl	8010550 <siprintf>
//		  sprintf((char*)telemetria_data, "Raw:0,0,0,0,0,0,%d,%d,%d\r\n", (int)((drone_angle[0])*10), (int)((drone_angle[1])*10), (int)(drone_angle[2])*10); //%5.2f
	//	  sprintf((char*)telemetria_data, "Yaw: 115.47\r\n");
		  HAL_UART_Transmit (&huart2, telemetria_data, sizeof (telemetria_data), 200);
 800271a:	f107 0114 	add.w	r1, r7, #20
 800271e:	23c8      	movs	r3, #200	; 0xc8
 8002720:	2214      	movs	r2, #20
 8002722:	4811      	ldr	r0, [pc, #68]	; (8002768 <StartDefaultTask+0x1b4>)
 8002724:	f008 fa03 	bl	800ab2e <HAL_UART_Transmit>

	  }


	  osDelay(500);
 8002728:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800272c:	f00b fa04 	bl	800db38 <osDelay>
	  if(uart_telemetria == 1){
 8002730:	e752      	b.n	80025d8 <StartDefaultTask+0x24>
 8002732:	bf00      	nop
 8002734:	08015010 	.word	0x08015010
 8002738:	20000b32 	.word	0x20000b32
 800273c:	20000000 	.word	0x20000000
 8002740:	000f4240 	.word	0x000f4240
 8002744:	000186a0 	.word	0x000186a0
 8002748:	fcd232b0 	.word	0xfcd232b0
 800274c:	47c35000 	.word	0x47c35000
 8002750:	20000b34 	.word	0x20000b34
 8002754:	20000b3c 	.word	0x20000b3c
 8002758:	20000b38 	.word	0x20000b38
 800275c:	20000b3d 	.word	0x20000b3d
 8002760:	20002b34 	.word	0x20002b34
 8002764:	08015000 	.word	0x08015000
 8002768:	20000838 	.word	0x20000838
 800276c:	00000000 	.word	0x00000000

08002770 <Start_Data_Reading>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Data_Reading */
void Start_Data_Reading(void const * argument)
{
 8002770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002772:	b0e7      	sub	sp, #412	; 0x19c
 8002774:	af06      	add	r7, sp, #24
 8002776:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800277a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800277e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Data_Reading */
	extern QueueHandle_t telemetria_Queue;

	//magnetometer calibration
	FusionVector magneto_offset = {-11.31, -3.64, 0.43};//{-11.8, -5.68, 3.08};
 8002780:	4a68      	ldr	r2, [pc, #416]	; (8002924 <Start_Data_Reading+0x1b4>)
 8002782:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002786:	ca07      	ldmia	r2, {r0, r1, r2}
 8002788:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionMatrix magneto_transform = {1.015, 0.018, -0.002, 0.018, 1.015, -0.004, -0.002, -0.004, 0.972};
 800278c:	4b66      	ldr	r3, [pc, #408]	; (8002928 <Start_Data_Reading+0x1b8>)
 800278e:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8002792:	461d      	mov	r5, r3
 8002794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800279c:	682b      	ldr	r3, [r5, #0]
 800279e:	6023      	str	r3, [r4, #0]
	FusionVector magneto_data;

	//pitch angle velocity control params
	float err_pitch = 0;
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	float errd_pitch = 0;
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	float prev_err_pitch = 0;
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	float control_pitch = 0;
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	float P_pitch = 20;
 80027c0:	4b5a      	ldr	r3, [pc, #360]	; (800292c <Start_Data_Reading+0x1bc>)
 80027c2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	float D_pitch = 0.1;
 80027c6:	4b5a      	ldr	r3, [pc, #360]	; (8002930 <Start_Data_Reading+0x1c0>)
 80027c8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	//pitch angle control params
	float err_angle_pitch = 0;
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	float errd_angle_pitch = 0;
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	float prev_err_angle_pitch = 0;
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	float angle_control_pitch = 0;
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	float P_angle_pitch = 0.04;
 80027ec:	4b51      	ldr	r3, [pc, #324]	; (8002934 <Start_Data_Reading+0x1c4>)
 80027ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	float D_angle_pitch = 0.0001;//0.005;
 80027f2:	4b51      	ldr	r3, [pc, #324]	; (8002938 <Start_Data_Reading+0x1c8>)
 80027f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	//roll angle velocity control params
	float err_roll = 0;
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	float errd_roll = 0;
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	float prev_err_roll = 0;
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	float control_roll = 0;
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	float P_roll = 5;
 8002818:	4b48      	ldr	r3, [pc, #288]	; (800293c <Start_Data_Reading+0x1cc>)
 800281a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	float D_roll = 0.1;//0.4
 800281e:	4b44      	ldr	r3, [pc, #272]	; (8002930 <Start_Data_Reading+0x1c0>)
 8002820:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	//roll angle control params
	float P_angle_roll = 0.2;
 8002824:	4b46      	ldr	r3, [pc, #280]	; (8002940 <Start_Data_Reading+0x1d0>)
 8002826:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	float D_angle_roll = 0.0001;//0.005;
 800282a:	4b43      	ldr	r3, [pc, #268]	; (8002938 <Start_Data_Reading+0x1c8>)
 800282c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	float err_angle_roll = 0;
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	float errd_angle_roll = 0;
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	float prev_err_angle_roll = 0;
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	float angle_control_roll = 0;
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	//yaw angle velocity control params
	float err_yaw = 0;
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	float errd_yaw = 0;
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	float prev_err_yaw = 0;
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	float control_yaw = 0;
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	float P_yaw = 20;
 8002870:	4b2e      	ldr	r3, [pc, #184]	; (800292c <Start_Data_Reading+0x1bc>)
 8002872:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	float D_yaw = 0.1;
 8002876:	4b2e      	ldr	r3, [pc, #184]	; (8002930 <Start_Data_Reading+0x1c0>)
 8002878:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

	//yaw angle control params
	float P_angle_yaw = 0.8;//0.04;
 800287c:	4b31      	ldr	r3, [pc, #196]	; (8002944 <Start_Data_Reading+0x1d4>)
 800287e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	float D_angle_yaw = 0.000;//0.005;
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	float err_angle_yaw = 0;
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	float errd_angle_yaw = 0;
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	float prev_err_angle_yaw = 0;
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	float angle_control_yaw = 0;
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	float yaw_angle = 0;
 80028aa:	f04f 0300 	mov.w	r3, #0
 80028ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	float prev_euler_yaw = 0;
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	int n = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158



	//imu init function
	BMI088_Init(&imu, &hspi2, CS_ACC_GPIO_Port, CS_ACC_Pin, CS_GYRO_GPIO_Port, CS_GYRO_Pin);
 80028c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c4:	9301      	str	r3, [sp, #4]
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <Start_Data_Reading+0x1d8>)
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ce:	4a1f      	ldr	r2, [pc, #124]	; (800294c <Start_Data_Reading+0x1dc>)
 80028d0:	491f      	ldr	r1, [pc, #124]	; (8002950 <Start_Data_Reading+0x1e0>)
 80028d2:	4820      	ldr	r0, [pc, #128]	; (8002954 <Start_Data_Reading+0x1e4>)
 80028d4:	f001 fc76 	bl	80041c4 <BMI088_Init>


	//bmp388 pressure sensor init
	bmp._hi2c = &hi2c2;
 80028d8:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <Start_Data_Reading+0x1e8>)
 80028da:	4a20      	ldr	r2, [pc, #128]	; (800295c <Start_Data_Reading+0x1ec>)
 80028dc:	601a      	str	r2, [r3, #0]


	BMP388_SetTempOS(&bmp, 0);
 80028de:	2100      	movs	r1, #0
 80028e0:	481d      	ldr	r0, [pc, #116]	; (8002958 <Start_Data_Reading+0x1e8>)
 80028e2:	f002 fe4f 	bl	8005584 <BMP388_SetTempOS>
	HAL_Delay(10);
 80028e6:	200a      	movs	r0, #10
 80028e8:	f003 fb50 	bl	8005f8c <HAL_Delay>
	BMP388_SetPressOS(&bmp, 0x03); //0 volt, de adatlap alapján 8x-nek megfelelő 0x03 beírva
 80028ec:	2103      	movs	r1, #3
 80028ee:	481a      	ldr	r0, [pc, #104]	; (8002958 <Start_Data_Reading+0x1e8>)
 80028f0:	f002 fe68 	bl	80055c4 <BMP388_SetPressOS>
	HAL_Delay(10);
 80028f4:	200a      	movs	r0, #10
 80028f6:	f003 fb49 	bl	8005f8c <HAL_Delay>
	BMP388_SetIIRFilterCoeff(&bmp, 2);
 80028fa:	2102      	movs	r1, #2
 80028fc:	4816      	ldr	r0, [pc, #88]	; (8002958 <Start_Data_Reading+0x1e8>)
 80028fe:	f002 fe80 	bl	8005602 <BMP388_SetIIRFilterCoeff>
	HAL_Delay(10);
 8002902:	200a      	movs	r0, #10
 8002904:	f003 fb42 	bl	8005f8c <HAL_Delay>
	BMP388_SetOutputDataRate(&bmp, 0x02);
 8002908:	2102      	movs	r1, #2
 800290a:	4813      	ldr	r0, [pc, #76]	; (8002958 <Start_Data_Reading+0x1e8>)
 800290c:	f002 fe90 	bl	8005630 <BMP388_SetOutputDataRate>
	HAL_Delay(10);
 8002910:	200a      	movs	r0, #10
 8002912:	f003 fb3b 	bl	8005f8c <HAL_Delay>
	BMP388_Init(&bmp);
 8002916:	4810      	ldr	r0, [pc, #64]	; (8002958 <Start_Data_Reading+0x1e8>)
 8002918:	f002 fdb9 	bl	800548e <BMP388_Init>

	for(int i_init = 0; i_init<2000; i_init++ ){
 800291c:	2300      	movs	r3, #0
 800291e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002922:	e078      	b.n	8002a16 <Start_Data_Reading+0x2a6>
 8002924:	08015024 	.word	0x08015024
 8002928:	08015030 	.word	0x08015030
 800292c:	41a00000 	.word	0x41a00000
 8002930:	3dcccccd 	.word	0x3dcccccd
 8002934:	3d23d70a 	.word	0x3d23d70a
 8002938:	38d1b717 	.word	0x38d1b717
 800293c:	40a00000 	.word	0x40a00000
 8002940:	3e4ccccd 	.word	0x3e4ccccd
 8002944:	3f4ccccd 	.word	0x3f4ccccd
 8002948:	40020400 	.word	0x40020400
 800294c:	40020800 	.word	0x40020800
 8002950:	20000634 	.word	0x20000634
 8002954:	20000970 	.word	0x20000970
 8002958:	200009c0 	.word	0x200009c0
 800295c:	2000058c 	.word	0x2000058c
	  BMP388_ReadRawPressTempTime(&bmp, &raw_press, &raw_temp, &raw_time);
 8002960:	4bb3      	ldr	r3, [pc, #716]	; (8002c30 <Start_Data_Reading+0x4c0>)
 8002962:	4ab4      	ldr	r2, [pc, #720]	; (8002c34 <Start_Data_Reading+0x4c4>)
 8002964:	49b4      	ldr	r1, [pc, #720]	; (8002c38 <Start_Data_Reading+0x4c8>)
 8002966:	48b5      	ldr	r0, [pc, #724]	; (8002c3c <Start_Data_Reading+0x4cc>)
 8002968:	f002 fe77 	bl	800565a <BMP388_ReadRawPressTempTime>
	  BMP388_CompensateRawPressTemp(&bmp, raw_press, raw_temp, &press, &temp);
 800296c:	4bb2      	ldr	r3, [pc, #712]	; (8002c38 <Start_Data_Reading+0x4c8>)
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	4bb0      	ldr	r3, [pc, #704]	; (8002c34 <Start_Data_Reading+0x4c4>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4bb2      	ldr	r3, [pc, #712]	; (8002c40 <Start_Data_Reading+0x4d0>)
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	4bb2      	ldr	r3, [pc, #712]	; (8002c44 <Start_Data_Reading+0x4d4>)
 800297a:	48b0      	ldr	r0, [pc, #704]	; (8002c3c <Start_Data_Reading+0x4cc>)
 800297c:	f002 fe99 	bl	80056b2 <BMP388_CompensateRawPressTemp>
	  h0 += BMP388_FindAltitude(ground_pressure, press);
 8002980:	4bb0      	ldr	r3, [pc, #704]	; (8002c44 <Start_Data_Reading+0x4d4>)
 8002982:	edd3 7a00 	vldr	s15, [r3]
 8002986:	eef0 0a67 	vmov.f32	s1, s15
 800298a:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8002c48 <Start_Data_Reading+0x4d8>
 800298e:	f002 feb3 	bl	80056f8 <BMP388_FindAltitude>
 8002992:	eeb0 7a40 	vmov.f32	s14, s0
 8002996:	4bad      	ldr	r3, [pc, #692]	; (8002c4c <Start_Data_Reading+0x4dc>)
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a0:	4baa      	ldr	r3, [pc, #680]	; (8002c4c <Start_Data_Reading+0x4dc>)
 80029a2:	edc3 7a00 	vstr	s15, [r3]
	  BMI088_ReadGyroscope(&imu);
 80029a6:	48aa      	ldr	r0, [pc, #680]	; (8002c50 <Start_Data_Reading+0x4e0>)
 80029a8:	f001 fe8a 	bl	80046c0 <BMI088_ReadGyroscope>
	  gyro_offset_x_calc += imu.gyr_rps[0];
 80029ac:	4ba8      	ldr	r3, [pc, #672]	; (8002c50 <Start_Data_Reading+0x4e0>)
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fd fdc9 	bl	8000548 <__aeabi_f2d>
 80029b6:	4ba7      	ldr	r3, [pc, #668]	; (8002c54 <Start_Data_Reading+0x4e4>)
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	f7fd fc66 	bl	800028c <__adddf3>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	49a3      	ldr	r1, [pc, #652]	; (8002c54 <Start_Data_Reading+0x4e4>)
 80029c6:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_y_calc += imu.gyr_rps[1];
 80029ca:	4ba1      	ldr	r3, [pc, #644]	; (8002c50 <Start_Data_Reading+0x4e0>)
 80029cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fd fdba 	bl	8000548 <__aeabi_f2d>
 80029d4:	4ba0      	ldr	r3, [pc, #640]	; (8002c58 <Start_Data_Reading+0x4e8>)
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	f7fd fc57 	bl	800028c <__adddf3>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	499d      	ldr	r1, [pc, #628]	; (8002c58 <Start_Data_Reading+0x4e8>)
 80029e4:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_z_calc += imu.gyr_rps[2];
 80029e8:	4b99      	ldr	r3, [pc, #612]	; (8002c50 <Start_Data_Reading+0x4e0>)
 80029ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fdab 	bl	8000548 <__aeabi_f2d>
 80029f2:	4b9a      	ldr	r3, [pc, #616]	; (8002c5c <Start_Data_Reading+0x4ec>)
 80029f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f8:	f7fd fc48 	bl	800028c <__adddf3>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4996      	ldr	r1, [pc, #600]	; (8002c5c <Start_Data_Reading+0x4ec>)
 8002a02:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_Delay(1);
 8002a06:	2001      	movs	r0, #1
 8002a08:	f003 fac0 	bl	8005f8c <HAL_Delay>
	for(int i_init = 0; i_init<2000; i_init++ ){
 8002a0c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002a10:	3301      	adds	r3, #1
 8002a12:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a16:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002a1a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a1e:	db9f      	blt.n	8002960 <Start_Data_Reading+0x1f0>
	}
	h0 /= 2000;
 8002a20:	4b8a      	ldr	r3, [pc, #552]	; (8002c4c <Start_Data_Reading+0x4dc>)
 8002a22:	ed93 7a00 	vldr	s14, [r3]
 8002a26:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8002c60 <Start_Data_Reading+0x4f0>
 8002a2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a2e:	4b87      	ldr	r3, [pc, #540]	; (8002c4c <Start_Data_Reading+0x4dc>)
 8002a30:	edc3 7a00 	vstr	s15, [r3]
	gyro_offset_x = gyro_offset_x_calc/2000;
 8002a34:	4b87      	ldr	r3, [pc, #540]	; (8002c54 <Start_Data_Reading+0x4e4>)
 8002a36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	4b89      	ldr	r3, [pc, #548]	; (8002c64 <Start_Data_Reading+0x4f4>)
 8002a40:	f7fd ff04 	bl	800084c <__aeabi_ddiv>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4987      	ldr	r1, [pc, #540]	; (8002c68 <Start_Data_Reading+0x4f8>)
 8002a4a:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_y = gyro_offset_y_calc/2000;
 8002a4e:	4b82      	ldr	r3, [pc, #520]	; (8002c58 <Start_Data_Reading+0x4e8>)
 8002a50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	4b82      	ldr	r3, [pc, #520]	; (8002c64 <Start_Data_Reading+0x4f4>)
 8002a5a:	f7fd fef7 	bl	800084c <__aeabi_ddiv>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4982      	ldr	r1, [pc, #520]	; (8002c6c <Start_Data_Reading+0x4fc>)
 8002a64:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_z = gyro_offset_z_calc/2000;
 8002a68:	4b7c      	ldr	r3, [pc, #496]	; (8002c5c <Start_Data_Reading+0x4ec>)
 8002a6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	4b7c      	ldr	r3, [pc, #496]	; (8002c64 <Start_Data_Reading+0x4f4>)
 8002a74:	f7fd feea 	bl	800084c <__aeabi_ddiv>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	497c      	ldr	r1, [pc, #496]	; (8002c70 <Start_Data_Reading+0x500>)
 8002a7e:	e9c1 2300 	strd	r2, r3, [r1]

	//magneto sensor init
	bmm.hi2c_handle = &hi2c1;
 8002a82:	4b7c      	ldr	r3, [pc, #496]	; (8002c74 <Start_Data_Reading+0x504>)
 8002a84:	4a7c      	ldr	r2, [pc, #496]	; (8002c78 <Start_Data_Reading+0x508>)
 8002a86:	601a      	str	r2, [r3, #0]

	BMM150_Init(&bmm);
 8002a88:	487a      	ldr	r0, [pc, #488]	; (8002c74 <Start_Data_Reading+0x504>)
 8002a8a:	f001 fe91 	bl	80047b0 <BMM150_Init>
	HAL_Delay(10);
 8002a8e:	200a      	movs	r0, #10
 8002a90:	f003 fa7c 	bl	8005f8c <HAL_Delay>
	BMM150_Get_TrimData(&bmm, &trim_data);
 8002a94:	4979      	ldr	r1, [pc, #484]	; (8002c7c <Start_Data_Reading+0x50c>)
 8002a96:	4877      	ldr	r0, [pc, #476]	; (8002c74 <Start_Data_Reading+0x504>)
 8002a98:	f002 f884 	bl	8004ba4 <BMM150_Get_TrimData>
	uint8_t transmit_data[20];
	float telemetria_float[3];



	q.SEq_1=1;
 8002a9c:	4b78      	ldr	r3, [pc, #480]	; (8002c80 <Start_Data_Reading+0x510>)
 8002a9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002aa2:	601a      	str	r2, [r3, #0]
	q.SEq_2=0;
 8002aa4:	4b76      	ldr	r3, [pc, #472]	; (8002c80 <Start_Data_Reading+0x510>)
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
	q.SEq_3=0;
 8002aac:	4b74      	ldr	r3, [pc, #464]	; (8002c80 <Start_Data_Reading+0x510>)
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
	q.SEq_4=0;
 8002ab4:	4b72      	ldr	r3, [pc, #456]	; (8002c80 <Start_Data_Reading+0x510>)
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	60da      	str	r2, [r3, #12]

	w.w_bx=0;
 8002abc:	4b71      	ldr	r3, [pc, #452]	; (8002c84 <Start_Data_Reading+0x514>)
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
	w.w_by=0;
 8002ac4:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <Start_Data_Reading+0x514>)
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	605a      	str	r2, [r3, #4]
	w.w_bz=0;
 8002acc:	4b6d      	ldr	r3, [pc, #436]	; (8002c84 <Start_Data_Reading+0x514>)
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
//	P_prev.a32 = 0;
//	P_prev.a33 = 0;
//	meas.a11=0;
//	meas.a21=0;

	HAL_TIM_Base_Start_IT(&htim6);
 8002ad4:	486c      	ldr	r0, [pc, #432]	; (8002c88 <Start_Data_Reading+0x518>)
 8002ad6:	f006 fcc3 	bl	8009460 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002ada:	486c      	ldr	r0, [pc, #432]	; (8002c8c <Start_Data_Reading+0x51c>)
 8002adc:	f006 fcc0 	bl	8009460 <HAL_TIM_Base_Start_IT>
	FusionAhrsInitialise(&ahrs);
 8002ae0:	486b      	ldr	r0, [pc, #428]	; (8002c90 <Start_Data_Reading+0x520>)
 8002ae2:	f009 ff4d 	bl	800c980 <FusionAhrsInitialise>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2108      	movs	r1, #8
 8002aea:	486a      	ldr	r0, [pc, #424]	; (8002c94 <Start_Data_Reading+0x524>)
 8002aec:	f004 fb84 	bl	80071f8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002af0:	2064      	movs	r0, #100	; 0x64
 8002af2:	f003 fa4b 	bl	8005f8c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002af6:	2201      	movs	r2, #1
 8002af8:	2108      	movs	r1, #8
 8002afa:	4866      	ldr	r0, [pc, #408]	; (8002c94 <Start_Data_Reading+0x524>)
 8002afc:	f004 fb7c 	bl	80071f8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002b00:	2064      	movs	r0, #100	; 0x64
 8002b02:	f003 fa43 	bl	8005f8c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002b06:	2200      	movs	r2, #0
 8002b08:	2108      	movs	r1, #8
 8002b0a:	4862      	ldr	r0, [pc, #392]	; (8002c94 <Start_Data_Reading+0x524>)
 8002b0c:	f004 fb74 	bl	80071f8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002b10:	2064      	movs	r0, #100	; 0x64
 8002b12:	f003 fa3b 	bl	8005f8c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002b16:	2201      	movs	r2, #1
 8002b18:	2108      	movs	r1, #8
 8002b1a:	485e      	ldr	r0, [pc, #376]	; (8002c94 <Start_Data_Reading+0x524>)
 8002b1c:	f004 fb6c 	bl	80071f8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002b20:	2064      	movs	r0, #100	; 0x64
 8002b22:	f003 fa33 	bl	8005f8c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2108      	movs	r1, #8
 8002b2a:	485a      	ldr	r0, [pc, #360]	; (8002c94 <Start_Data_Reading+0x524>)
 8002b2c:	f004 fb64 	bl	80071f8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002b30:	2064      	movs	r0, #100	; 0x64
 8002b32:	f003 fa2b 	bl	8005f8c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002b36:	2201      	movs	r2, #1
 8002b38:	2108      	movs	r1, #8
 8002b3a:	4856      	ldr	r0, [pc, #344]	; (8002c94 <Start_Data_Reading+0x524>)
 8002b3c:	f004 fb5c 	bl	80071f8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002b40:	2064      	movs	r0, #100	; 0x64
 8002b42:	f003 fa23 	bl	8005f8c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2108      	movs	r1, #8
 8002b4a:	4852      	ldr	r0, [pc, #328]	; (8002c94 <Start_Data_Reading+0x524>)
 8002b4c:	f004 fb54 	bl	80071f8 <HAL_GPIO_WritePin>

	HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, bytetoread);
 8002b50:	4b51      	ldr	r3, [pc, #324]	; (8002c98 <Start_Data_Reading+0x528>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	4950      	ldr	r1, [pc, #320]	; (8002c9c <Start_Data_Reading+0x52c>)
 8002b5a:	4851      	ldr	r0, [pc, #324]	; (8002ca0 <Start_Data_Reading+0x530>)
 8002b5c:	f008 f8a9 	bl	800acb2 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_IT(&huart2, telem, 11);
 8002b60:	220b      	movs	r2, #11
 8002b62:	4950      	ldr	r1, [pc, #320]	; (8002ca4 <Start_Data_Reading+0x534>)
 8002b64:	4850      	ldr	r0, [pc, #320]	; (8002ca8 <Start_Data_Reading+0x538>)
 8002b66:	f008 f874 	bl	800ac52 <HAL_UART_Receive_IT>


	vTaskResume( defaultTaskHandle );
 8002b6a:	4b50      	ldr	r3, [pc, #320]	; (8002cac <Start_Data_Reading+0x53c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f00b fee6 	bl	800e940 <vTaskResume>

  /* Infinite loop */
  for(;;)
  {

	  	  mytimer = __HAL_TIM_GET_COUNTER(&htim7);
 8002b74:	4b45      	ldr	r3, [pc, #276]	; (8002c8c <Start_Data_Reading+0x51c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b4c      	ldr	r3, [pc, #304]	; (8002cb0 <Start_Data_Reading+0x540>)
 8002b7e:	601a      	str	r2, [r3, #0]
	  	  htim7.Instance->CNT = 0;
 8002b80:	4b42      	ldr	r3, [pc, #264]	; (8002c8c <Start_Data_Reading+0x51c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2200      	movs	r2, #0
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24
	  	  BMM150_Set_OpMode(&bmm, 0x02); //280 us - 100kHz,
 8002b88:	2102      	movs	r1, #2
 8002b8a:	483a      	ldr	r0, [pc, #232]	; (8002c74 <Start_Data_Reading+0x504>)
 8002b8c:	f001 ff41 	bl	8004a12 <BMM150_Set_OpMode>

		  // opmode start a measurement, because of the set preset mode, the results will be available in the next loop,
		  // with nXY = 5, nZ = 6 delay is -> 4.16 ms ~240Hz -> 200 Hz control loop available
		  BMM150_GetRawData(&bmm, &field_x, &field_y, &field_z, &Rhall, 8); // all time 1.31 ms magnetometer i2c 100kHz, 330 us with 400 kHz
 8002b90:	2308      	movs	r3, #8
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <Start_Data_Reading+0x544>)
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <Start_Data_Reading+0x548>)
 8002b9a:	4a48      	ldr	r2, [pc, #288]	; (8002cbc <Start_Data_Reading+0x54c>)
 8002b9c:	4948      	ldr	r1, [pc, #288]	; (8002cc0 <Start_Data_Reading+0x550>)
 8002b9e:	4835      	ldr	r0, [pc, #212]	; (8002c74 <Start_Data_Reading+0x504>)
 8002ba0:	f001 ffa0 	bl	8004ae4 <BMM150_GetRawData>



		  // magnetic field data in uT
		  mag_data_x = BMM150_Compensate_x(field_x, Rhall,  &trim_data); //magn data compensation 33.4 us
 8002ba4:	4b46      	ldr	r3, [pc, #280]	; (8002cc0 <Start_Data_Reading+0x550>)
 8002ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002baa:	4a42      	ldr	r2, [pc, #264]	; (8002cb4 <Start_Data_Reading+0x544>)
 8002bac:	8811      	ldrh	r1, [r2, #0]
 8002bae:	4a33      	ldr	r2, [pc, #204]	; (8002c7c <Start_Data_Reading+0x50c>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f002 f92d 	bl	8004e10 <BMM150_Compensate_x>
 8002bb6:	eef0 7a40 	vmov.f32	s15, s0
 8002bba:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <Start_Data_Reading+0x554>)
 8002bbc:	edc3 7a00 	vstr	s15, [r3]
		  mag_data_y = BMM150_Compensate_y(field_y, Rhall,  &trim_data);
 8002bc0:	4b3e      	ldr	r3, [pc, #248]	; (8002cbc <Start_Data_Reading+0x54c>)
 8002bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc6:	4a3b      	ldr	r2, [pc, #236]	; (8002cb4 <Start_Data_Reading+0x544>)
 8002bc8:	8811      	ldrh	r1, [r2, #0]
 8002bca:	4a2c      	ldr	r2, [pc, #176]	; (8002c7c <Start_Data_Reading+0x50c>)
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 fa33 	bl	8005038 <BMM150_Compensate_y>
 8002bd2:	eef0 7a40 	vmov.f32	s15, s0
 8002bd6:	4b3c      	ldr	r3, [pc, #240]	; (8002cc8 <Start_Data_Reading+0x558>)
 8002bd8:	edc3 7a00 	vstr	s15, [r3]
		  mag_data_z = BMM150_Compensate_z(field_z, Rhall,  &trim_data);
 8002bdc:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <Start_Data_Reading+0x548>)
 8002bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002be2:	4a34      	ldr	r2, [pc, #208]	; (8002cb4 <Start_Data_Reading+0x544>)
 8002be4:	8811      	ldrh	r1, [r2, #0]
 8002be6:	4a25      	ldr	r2, [pc, #148]	; (8002c7c <Start_Data_Reading+0x50c>)
 8002be8:	4618      	mov	r0, r3
 8002bea:	f002 fb39 	bl	8005260 <BMM150_Compensate_z>
 8002bee:	eef0 7a40 	vmov.f32	s15, s0
 8002bf2:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <Start_Data_Reading+0x55c>)
 8002bf4:	edc3 7a00 	vstr	s15, [r3]
		  magneto_data.axis.x = mag_data_y;
 8002bf8:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <Start_Data_Reading+0x558>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c04:	601a      	str	r2, [r3, #0]
		  magneto_data.axis.y = -mag_data_x;
 8002c06:	4b2f      	ldr	r3, [pc, #188]	; (8002cc4 <Start_Data_Reading+0x554>)
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	eef1 7a67 	vneg.f32	s15, s15
 8002c10:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c18:	edc3 7a01 	vstr	s15, [r3, #4]
		  magneto_data.axis.z = mag_data_z;
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <Start_Data_Reading+0x55c>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c28:	609a      	str	r2, [r3, #8]

		  if(i_mag < 1000){
 8002c2a:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <Start_Data_Reading+0x560>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	e051      	b.n	8002cd4 <Start_Data_Reading+0x564>
 8002c30:	20000a38 	.word	0x20000a38
 8002c34:	20000a34 	.word	0x20000a34
 8002c38:	20000a30 	.word	0x20000a30
 8002c3c:	200009c0 	.word	0x200009c0
 8002c40:	20000a40 	.word	0x20000a40
 8002c44:	20000a3c 	.word	0x20000a3c
 8002c48:	47c5f400 	.word	0x47c5f400
 8002c4c:	20000a44 	.word	0x20000a44
 8002c50:	20000970 	.word	0x20000970
 8002c54:	20000b50 	.word	0x20000b50
 8002c58:	20000b58 	.word	0x20000b58
 8002c5c:	20000b60 	.word	0x20000b60
 8002c60:	44fa0000 	.word	0x44fa0000
 8002c64:	409f4000 	.word	0x409f4000
 8002c68:	20000b68 	.word	0x20000b68
 8002c6c:	20000b70 	.word	0x20000b70
 8002c70:	20000b78 	.word	0x20000b78
 8002c74:	20000a00 	.word	0x20000a00
 8002c78:	20000538 	.word	0x20000538
 8002c7c:	20000a08 	.word	0x20000a08
 8002c80:	20000a54 	.word	0x20000a54
 8002c84:	20000a64 	.word	0x20000a64
 8002c88:	20000764 	.word	0x20000764
 8002c8c:	200007ac 	.word	0x200007ac
 8002c90:	20000a74 	.word	0x20000a74
 8002c94:	40020400 	.word	0x40020400
 8002c98:	2000000a 	.word	0x2000000a
 8002c9c:	20002b10 	.word	0x20002b10
 8002ca0:	200007f4 	.word	0x200007f4
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	20000838 	.word	0x20000838
 8002cac:	20000964 	.word	0x20000964
 8002cb0:	20000b48 	.word	0x20000b48
 8002cb4:	20000a1e 	.word	0x20000a1e
 8002cb8:	20000a1c 	.word	0x20000a1c
 8002cbc:	20000a1a 	.word	0x20000a1a
 8002cc0:	20000a18 	.word	0x20000a18
 8002cc4:	20000a20 	.word	0x20000a20
 8002cc8:	20000a24 	.word	0x20000a24
 8002ccc:	20000a28 	.word	0x20000a28
 8002cd0:	20002ac0 	.word	0x20002ac0
 8002cd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cd8:	da14      	bge.n	8002d04 <Start_Data_Reading+0x594>
			  mag_debug_x[i_mag] = mag_data_x;
 8002cda:	4bd1      	ldr	r3, [pc, #836]	; (8003020 <Start_Data_Reading+0x8b0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4ad1      	ldr	r2, [pc, #836]	; (8003024 <Start_Data_Reading+0x8b4>)
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	49d1      	ldr	r1, [pc, #836]	; (8003028 <Start_Data_Reading+0x8b8>)
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	601a      	str	r2, [r3, #0]
			  mag_debug_y[i_mag] = mag_data_y;
 8002cea:	4bcd      	ldr	r3, [pc, #820]	; (8003020 <Start_Data_Reading+0x8b0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4acf      	ldr	r2, [pc, #828]	; (800302c <Start_Data_Reading+0x8bc>)
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	49cf      	ldr	r1, [pc, #828]	; (8003030 <Start_Data_Reading+0x8c0>)
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	601a      	str	r2, [r3, #0]
			  i_mag++;
 8002cfa:	4bc9      	ldr	r3, [pc, #804]	; (8003020 <Start_Data_Reading+0x8b0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	4ac7      	ldr	r2, [pc, #796]	; (8003020 <Start_Data_Reading+0x8b0>)
 8002d02:	6013      	str	r3, [r2, #0]
		  }

		  //read IMU
		  BMI088_ReadGyroscope(&imu);	// imu read 119 us
 8002d04:	48cb      	ldr	r0, [pc, #812]	; (8003034 <Start_Data_Reading+0x8c4>)
 8002d06:	f001 fcdb 	bl	80046c0 <BMI088_ReadGyroscope>
		  BMI088_ReadAccelerometer(&imu);
 8002d0a:	48ca      	ldr	r0, [pc, #808]	; (8003034 <Start_Data_Reading+0x8c4>)
 8002d0c:	f001 fc64 	bl	80045d8 <BMI088_ReadAccelerometer>
		  //filterUpdate((imu.gyr_rps[0]-gyro_offset_x), (imu.gyr_rps[1]-gyro_offset_y), imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], (imu.gyr_rps[2]-gyro_offset_z), mag_data_y, -mag_data_x, mag_data_z, &q, &f, &w);


		  //eulerAngles(q, &roll, &pitch, &yaw);

		  gyro_x_degree = ((imu.gyr_rps[0]-gyro_offset_x)*57.29);
 8002d10:	4bc8      	ldr	r3, [pc, #800]	; (8003034 <Start_Data_Reading+0x8c4>)
 8002d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd fc17 	bl	8000548 <__aeabi_f2d>
 8002d1a:	4bc7      	ldr	r3, [pc, #796]	; (8003038 <Start_Data_Reading+0x8c8>)
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	f7fd fab2 	bl	8000288 <__aeabi_dsub>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4610      	mov	r0, r2
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	a3b8      	add	r3, pc, #736	; (adr r3, 8003010 <Start_Data_Reading+0x8a0>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	f7fd fc61 	bl	80005f8 <__aeabi_dmul>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f7fd ff53 	bl	8000be8 <__aeabi_d2f>
 8002d42:	4603      	mov	r3, r0
 8002d44:	4abd      	ldr	r2, [pc, #756]	; (800303c <Start_Data_Reading+0x8cc>)
 8002d46:	6013      	str	r3, [r2, #0]
		  gyro_y_degree = ((imu.gyr_rps[1]-gyro_offset_x)*57.29);
 8002d48:	4bba      	ldr	r3, [pc, #744]	; (8003034 <Start_Data_Reading+0x8c4>)
 8002d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fd fbfb 	bl	8000548 <__aeabi_f2d>
 8002d52:	4bb9      	ldr	r3, [pc, #740]	; (8003038 <Start_Data_Reading+0x8c8>)
 8002d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d58:	f7fd fa96 	bl	8000288 <__aeabi_dsub>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4610      	mov	r0, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	a3aa      	add	r3, pc, #680	; (adr r3, 8003010 <Start_Data_Reading+0x8a0>)
 8002d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6a:	f7fd fc45 	bl	80005f8 <__aeabi_dmul>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	f7fd ff37 	bl	8000be8 <__aeabi_d2f>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4ab0      	ldr	r2, [pc, #704]	; (8003040 <Start_Data_Reading+0x8d0>)
 8002d7e:	6013      	str	r3, [r2, #0]
		  gyro_z_degree = ((imu.gyr_rps[2]-gyro_offset_x)*57.29);
 8002d80:	4bac      	ldr	r3, [pc, #688]	; (8003034 <Start_Data_Reading+0x8c4>)
 8002d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fd fbdf 	bl	8000548 <__aeabi_f2d>
 8002d8a:	4bab      	ldr	r3, [pc, #684]	; (8003038 <Start_Data_Reading+0x8c8>)
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f7fd fa7a 	bl	8000288 <__aeabi_dsub>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	a39c      	add	r3, pc, #624	; (adr r3, 8003010 <Start_Data_Reading+0x8a0>)
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	f7fd fc29 	bl	80005f8 <__aeabi_dmul>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	f7fd ff1b 	bl	8000be8 <__aeabi_d2f>
 8002db2:	4603      	mov	r3, r0
 8002db4:	4aa3      	ldr	r2, [pc, #652]	; (8003044 <Start_Data_Reading+0x8d4>)
 8002db6:	6013      	str	r3, [r2, #0]


		  magneto_data = FusionVectorSubtract(magneto_data, magneto_offset);
 8002db8:	ed97 5a2a 	vldr	s10, [r7, #168]	; 0xa8
 8002dbc:	edd7 5a2b 	vldr	s11, [r7, #172]	; 0xac
 8002dc0:	ed97 6a2c 	vldr	s12, [r7, #176]	; 0xb0
 8002dc4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002dcc:	edd3 6a00 	vldr	s13, [r3]
 8002dd0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dd8:	eef0 1a45 	vmov.f32	s3, s10
 8002ddc:	eeb0 2a65 	vmov.f32	s4, s11
 8002de0:	eef0 2a46 	vmov.f32	s5, s12
 8002de4:	eeb0 0a66 	vmov.f32	s0, s13
 8002de8:	eef0 0a47 	vmov.f32	s1, s14
 8002dec:	eeb0 1a67 	vmov.f32	s2, s15
 8002df0:	f7fe f926 	bl	8001040 <FusionVectorSubtract>
 8002df4:	eef0 6a40 	vmov.f32	s13, s0
 8002df8:	eeb0 7a60 	vmov.f32	s14, s1
 8002dfc:	eef0 7a41 	vmov.f32	s15, s2
 8002e00:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e08:	edc3 6a00 	vstr	s13, [r3]
 8002e0c:	ed83 7a01 	vstr	s14, [r3, #4]
 8002e10:	edc3 7a02 	vstr	s15, [r3, #8]
//		  magneto_data = FusionMatrixMultiplyVector(magneto_transform, FusionVectorSubtract(magneto_data, magneto_offset));

		  const FusionVector gyroscope = {gyro_x_degree, gyro_y_degree, gyro_z_degree};
 8002e14:	4b89      	ldr	r3, [pc, #548]	; (800303c <Start_Data_Reading+0x8cc>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002e1c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	4b87      	ldr	r3, [pc, #540]	; (8003040 <Start_Data_Reading+0x8d0>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002e2a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	4b84      	ldr	r3, [pc, #528]	; (8003044 <Start_Data_Reading+0x8d4>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002e38:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e3c:	609a      	str	r2, [r3, #8]
		  const FusionVector accelerometer = {imu.acc_mps2[0]/9.81, imu.acc_mps2[1]/9.81, imu.acc_mps2[2]/9.81};
 8002e3e:	4b7d      	ldr	r3, [pc, #500]	; (8003034 <Start_Data_Reading+0x8c4>)
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fd fb80 	bl	8000548 <__aeabi_f2d>
 8002e48:	a373      	add	r3, pc, #460	; (adr r3, 8003018 <Start_Data_Reading+0x8a8>)
 8002e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4e:	f7fd fcfd 	bl	800084c <__aeabi_ddiv>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f7fd fec5 	bl	8000be8 <__aeabi_d2f>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002e64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	4b72      	ldr	r3, [pc, #456]	; (8003034 <Start_Data_Reading+0x8c4>)
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd fb6a 	bl	8000548 <__aeabi_f2d>
 8002e74:	a368      	add	r3, pc, #416	; (adr r3, 8003018 <Start_Data_Reading+0x8a8>)
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	f7fd fce7 	bl	800084c <__aeabi_ddiv>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	f7fd feaf 	bl	8000be8 <__aeabi_d2f>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002e90:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	4b67      	ldr	r3, [pc, #412]	; (8003034 <Start_Data_Reading+0x8c4>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fb54 	bl	8000548 <__aeabi_f2d>
 8002ea0:	a35d      	add	r3, pc, #372	; (adr r3, 8003018 <Start_Data_Reading+0x8a8>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f7fd fcd1 	bl	800084c <__aeabi_ddiv>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f7fd fe99 	bl	8000be8 <__aeabi_d2f>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002ebc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ec0:	609a      	str	r2, [r3, #8]
		  const FusionVector magnetometer = {magneto_data.axis.x, magneto_data.axis.y, magneto_data.axis.z};
 8002ec2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002ed0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002ee4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002ef8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002efc:	609a      	str	r2, [r3, #8]


		  //no magnetometer AHRS
		  FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, SAMPLE_PERIOD);
 8002efe:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002f02:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002f06:	ed93 5a00 	vldr	s10, [r3]
 8002f0a:	edd3 5a01 	vldr	s11, [r3, #4]
 8002f0e:	ed93 6a02 	vldr	s12, [r3, #8]
 8002f12:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002f16:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f1a:	edd3 6a00 	vldr	s13, [r3]
 8002f1e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f22:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f26:	ed9f 3a48 	vldr	s6, [pc, #288]	; 8003048 <Start_Data_Reading+0x8d8>
 8002f2a:	eef0 1a45 	vmov.f32	s3, s10
 8002f2e:	eeb0 2a65 	vmov.f32	s4, s11
 8002f32:	eef0 2a46 	vmov.f32	s5, s12
 8002f36:	eeb0 0a66 	vmov.f32	s0, s13
 8002f3a:	eef0 0a47 	vmov.f32	s1, s14
 8002f3e:	eeb0 1a67 	vmov.f32	s2, s15
 8002f42:	4842      	ldr	r0, [pc, #264]	; (800304c <Start_Data_Reading+0x8dc>)
 8002f44:	f00a fc7a 	bl	800d83c <FusionAhrsUpdateNoMagnetometer>

		  //magnetometer AHRS
//		  FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, SAMPLE_PERIOD);

		  euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8002f48:	4840      	ldr	r0, [pc, #256]	; (800304c <Start_Data_Reading+0x8dc>)
 8002f4a:	f00a fcd1 	bl	800d8f0 <FusionAhrsGetQuaternion>
 8002f4e:	eeb0 6a40 	vmov.f32	s12, s0
 8002f52:	eef0 6a60 	vmov.f32	s13, s1
 8002f56:	eeb0 7a41 	vmov.f32	s14, s2
 8002f5a:	eef0 7a61 	vmov.f32	s15, s3
 8002f5e:	ed87 6a2d 	vstr	s12, [r7, #180]	; 0xb4
 8002f62:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8002f66:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8002f6a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8002f6e:	ed97 6a2d 	vldr	s12, [r7, #180]	; 0xb4
 8002f72:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8002f76:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8002f7a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002f7e:	eeb0 0a46 	vmov.f32	s0, s12
 8002f82:	eef0 0a66 	vmov.f32	s1, s13
 8002f86:	eeb0 1a47 	vmov.f32	s2, s14
 8002f8a:	eef0 1a67 	vmov.f32	s3, s15
 8002f8e:	f7fe fa2e 	bl	80013ee <FusionQuaternionToEuler>
 8002f92:	eef0 6a40 	vmov.f32	s13, s0
 8002f96:	eeb0 7a60 	vmov.f32	s14, s1
 8002f9a:	eef0 7a41 	vmov.f32	s15, s2
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <Start_Data_Reading+0x8e0>)
 8002fa0:	edc3 6a00 	vstr	s13, [r3]
 8002fa4:	ed83 7a01 	vstr	s14, [r3, #4]
 8002fa8:	edc3 7a02 	vstr	s15, [r3, #8]
		  // Rotation matrix from sensor frame to earth(NWU) frame
		  ERS = FusionQuaternionToMatrix(FusionAhrsGetQuaternion(&ahrs));
 8002fac:	4827      	ldr	r0, [pc, #156]	; (800304c <Start_Data_Reading+0x8dc>)
 8002fae:	f00a fc9f 	bl	800d8f0 <FusionAhrsGetQuaternion>
 8002fb2:	eeb0 6a40 	vmov.f32	s12, s0
 8002fb6:	eef0 6a60 	vmov.f32	s13, s1
 8002fba:	eeb0 7a41 	vmov.f32	s14, s2
 8002fbe:	eef0 7a61 	vmov.f32	s15, s3
 8002fc2:	ed87 6a31 	vstr	s12, [r7, #196]	; 0xc4
 8002fc6:	edc7 6a32 	vstr	s13, [r7, #200]	; 0xc8
 8002fca:	ed87 7a33 	vstr	s14, [r7, #204]	; 0xcc
 8002fce:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
 8002fd2:	4c20      	ldr	r4, [pc, #128]	; (8003054 <Start_Data_Reading+0x8e4>)
 8002fd4:	463b      	mov	r3, r7
 8002fd6:	ed97 6a31 	vldr	s12, [r7, #196]	; 0xc4
 8002fda:	edd7 6a32 	vldr	s13, [r7, #200]	; 0xc8
 8002fde:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8002fe2:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002fe6:	eeb0 0a46 	vmov.f32	s0, s12
 8002fea:	eef0 0a66 	vmov.f32	s1, s13
 8002fee:	eeb0 1a47 	vmov.f32	s2, s14
 8002ff2:	eef0 1a67 	vmov.f32	s3, s15
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe f92c 	bl	8001254 <FusionQuaternionToMatrix>
 8002ffc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003000:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003004:	461d      	mov	r5, r3
 8003006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800300a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800300c:	e026      	b.n	800305c <Start_Data_Reading+0x8ec>
 800300e:	bf00      	nop
 8003010:	b851eb85 	.word	0xb851eb85
 8003014:	404ca51e 	.word	0x404ca51e
 8003018:	51eb851f 	.word	0x51eb851f
 800301c:	40239eb8 	.word	0x40239eb8
 8003020:	20002ac0 	.word	0x20002ac0
 8003024:	20000a20 	.word	0x20000a20
 8003028:	20000b80 	.word	0x20000b80
 800302c:	20000a24 	.word	0x20000a24
 8003030:	20001b20 	.word	0x20001b20
 8003034:	20000970 	.word	0x20000970
 8003038:	20000b68 	.word	0x20000b68
 800303c:	20000a48 	.word	0x20000a48
 8003040:	20000a4c 	.word	0x20000a4c
 8003044:	20000a50 	.word	0x20000a50
 8003048:	3ba3d70a 	.word	0x3ba3d70a
 800304c:	20000a74 	.word	0x20000a74
 8003050:	20000ae8 	.word	0x20000ae8
 8003054:	20000af4 	.word	0x20000af4
 8003058:	411cf5c3 	.word	0x411cf5c3
 800305c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800305e:	682b      	ldr	r3, [r5, #0]
 8003060:	6023      	str	r3, [r4, #0]
		  aE = FusionMatrixMultiplyVector(ERS, FusionVectorMultiplyScalar(accelerometer, 9.81));
 8003062:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8003066:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800306a:	edd3 6a00 	vldr	s13, [r3]
 800306e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003072:	edd3 7a02 	vldr	s15, [r3, #8]
 8003076:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 8003058 <Start_Data_Reading+0x8e8>
 800307a:	eeb0 0a66 	vmov.f32	s0, s13
 800307e:	eef0 0a47 	vmov.f32	s1, s14
 8003082:	eeb0 1a67 	vmov.f32	s2, s15
 8003086:	f7fe f829 	bl	80010dc <FusionVectorMultiplyScalar>
 800308a:	eef0 6a40 	vmov.f32	s13, s0
 800308e:	eeb0 7a60 	vmov.f32	s14, s1
 8003092:	eef0 7a41 	vmov.f32	s15, s2
 8003096:	edc7 6a35 	vstr	s13, [r7, #212]	; 0xd4
 800309a:	ed87 7a36 	vstr	s14, [r7, #216]	; 0xd8
 800309e:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
 80030a2:	edd7 6a35 	vldr	s13, [r7, #212]	; 0xd4
 80030a6:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 80030aa:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80030ae:	4ed8      	ldr	r6, [pc, #864]	; (8003410 <Start_Data_Reading+0xca0>)
 80030b0:	466d      	mov	r5, sp
 80030b2:	f106 0410 	add.w	r4, r6, #16
 80030b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ba:	6823      	ldr	r3, [r4, #0]
 80030bc:	602b      	str	r3, [r5, #0]
 80030be:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80030c2:	eeb0 0a66 	vmov.f32	s0, s13
 80030c6:	eef0 0a47 	vmov.f32	s1, s14
 80030ca:	eeb0 1a67 	vmov.f32	s2, s15
 80030ce:	f7fe f849 	bl	8001164 <FusionMatrixMultiplyVector>
 80030d2:	eef0 6a40 	vmov.f32	s13, s0
 80030d6:	eeb0 7a60 	vmov.f32	s14, s1
 80030da:	eef0 7a41 	vmov.f32	s15, s2
 80030de:	4bcd      	ldr	r3, [pc, #820]	; (8003414 <Start_Data_Reading+0xca4>)
 80030e0:	edc3 6a00 	vstr	s13, [r3]
 80030e4:	ed83 7a01 	vstr	s14, [r3, #4]
 80030e8:	edc3 7a02 	vstr	s15, [r3, #8]
		  aE.axis.z -=9.85173;
 80030ec:	4bc9      	ldr	r3, [pc, #804]	; (8003414 <Start_Data_Reading+0xca4>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd fa29 	bl	8000548 <__aeabi_f2d>
 80030f6:	a3c2      	add	r3, pc, #776	; (adr r3, 8003400 <Start_Data_Reading+0xc90>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f7fd f8c4 	bl	8000288 <__aeabi_dsub>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	f7fd fd6e 	bl	8000be8 <__aeabi_d2f>
 800310c:	4603      	mov	r3, r0
 800310e:	4ac1      	ldr	r2, [pc, #772]	; (8003414 <Start_Data_Reading+0xca4>)
 8003110:	6093      	str	r3, [r2, #8]



		  // calculate rotation around yaw axis
		  if(prev_euler_yaw > 170 && euler.angle.yaw < 0){
 8003112:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 8003116:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8003418 <Start_Data_Reading+0xca8>
 800311a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003122:	dd0c      	ble.n	800313e <Start_Data_Reading+0x9ce>
 8003124:	4bbd      	ldr	r3, [pc, #756]	; (800341c <Start_Data_Reading+0xcac>)
 8003126:	edd3 7a02 	vldr	s15, [r3, #8]
 800312a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800312e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003132:	d504      	bpl.n	800313e <Start_Data_Reading+0x9ce>
			  n++;
 8003134:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003138:	3301      	adds	r3, #1
 800313a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		  }
		  if(prev_euler_yaw < -170 && euler.angle.yaw > 0){
 800313e:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 8003142:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8003420 <Start_Data_Reading+0xcb0>
 8003146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314e:	d50c      	bpl.n	800316a <Start_Data_Reading+0x9fa>
 8003150:	4bb2      	ldr	r3, [pc, #712]	; (800341c <Start_Data_Reading+0xcac>)
 8003152:	edd3 7a02 	vldr	s15, [r3, #8]
 8003156:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800315a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315e:	dd04      	ble.n	800316a <Start_Data_Reading+0x9fa>
			  n--;
 8003160:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003164:	3b01      	subs	r3, #1
 8003166:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		  }
		  yaw_angle = euler.angle.yaw + n * 360.0;
 800316a:	4bac      	ldr	r3, [pc, #688]	; (800341c <Start_Data_Reading+0xcac>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd f9ea 	bl	8000548 <__aeabi_f2d>
 8003174:	4604      	mov	r4, r0
 8003176:	460d      	mov	r5, r1
 8003178:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 800317c:	f7fd f9d2 	bl	8000524 <__aeabi_i2d>
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	4ba7      	ldr	r3, [pc, #668]	; (8003424 <Start_Data_Reading+0xcb4>)
 8003186:	f7fd fa37 	bl	80005f8 <__aeabi_dmul>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4620      	mov	r0, r4
 8003190:	4629      	mov	r1, r5
 8003192:	f7fd f87b 	bl	800028c <__adddf3>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f7fd fd23 	bl	8000be8 <__aeabi_d2f>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		  abs_yaw = yaw_angle;
 80031a8:	4a9f      	ldr	r2, [pc, #636]	; (8003428 <Start_Data_Reading+0xcb8>)
 80031aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ae:	6013      	str	r3, [r2, #0]
		  prev_euler_yaw = euler.angle.yaw;
 80031b0:	4b9a      	ldr	r3, [pc, #616]	; (800341c <Start_Data_Reading+0xcac>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
		  //motioncal
//		  sprintf((char*)transmit_data, "Raw:0,0,0,0,0,0,%d,%d,%d\r\n", (int)(magnetometer.axis.x*10), (int)((magnetometer.axis.y)*10), (int)(magnetometer.axis.z)*10); //%5.2f
//		  HAL_UART_Transmit (&huart2, transmit_data, sizeof (transmit_data), 100);

		  //telemetria
		  telemetria_float[0] = M_yaw;
 80031b8:	4b9c      	ldr	r3, [pc, #624]	; (800342c <Start_Data_Reading+0xcbc>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80031c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031c4:	601a      	str	r2, [r3, #0]
		  telemetria_float[1] = euler.angle.yaw;
 80031c6:	4b95      	ldr	r3, [pc, #596]	; (800341c <Start_Data_Reading+0xcac>)
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80031ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031d2:	605a      	str	r2, [r3, #4]
		  telemetria_float[2] = euler.angle.roll;
 80031d4:	4b91      	ldr	r3, [pc, #580]	; (800341c <Start_Data_Reading+0xcac>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80031dc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031e0:	609a      	str	r2, [r3, #8]
		  xQueueSendToFront(telemetria_Queue, (void*)&telemetria_float, 0);
 80031e2:	4b93      	ldr	r3, [pc, #588]	; (8003430 <Start_Data_Reading+0xcc0>)
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80031ea:	2301      	movs	r3, #1
 80031ec:	2200      	movs	r2, #0
 80031ee:	f00a fe2d 	bl	800de4c <xQueueGenericSend>

		  //altitudeKF(prev_state, &current_state, P_prev, &P, meas);
		  M_throttle = CRSFtoDuty(RX_throttle);
 80031f2:	4b90      	ldr	r3, [pc, #576]	; (8003434 <Start_Data_Reading+0xcc4>)
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f002 fdba 	bl	8005d70 <CRSFtoDuty>
 80031fc:	eef0 7a40 	vmov.f32	s15, s0
 8003200:	4b8d      	ldr	r3, [pc, #564]	; (8003438 <Start_Data_Reading+0xcc8>)
 8003202:	edc3 7a00 	vstr	s15, [r3]
		  M_pitch = CRSFtoPitch(RX_pitch)*25;
 8003206:	4b8d      	ldr	r3, [pc, #564]	; (800343c <Start_Data_Reading+0xccc>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f002 fdf2 	bl	8005df4 <CRSFtoPitch>
 8003210:	eef0 7a40 	vmov.f32	s15, s0
 8003214:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800321c:	4b88      	ldr	r3, [pc, #544]	; (8003440 <Start_Data_Reading+0xcd0>)
 800321e:	edc3 7a00 	vstr	s15, [r3]
		  M_roll = CRSFtoRoll(RX_roll)*15;
 8003222:	4b88      	ldr	r3, [pc, #544]	; (8003444 <Start_Data_Reading+0xcd4>)
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f002 fe02 	bl	8005e30 <CRSFtoRoll>
 800322c:	eef0 7a40 	vmov.f32	s15, s0
 8003230:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003238:	4b83      	ldr	r3, [pc, #524]	; (8003448 <Start_Data_Reading+0xcd8>)
 800323a:	edc3 7a00 	vstr	s15, [r3]
		  M_yaw += CRSFtoYaw(RX_yaw)*0.3;
 800323e:	4b83      	ldr	r3, [pc, #524]	; (800344c <Start_Data_Reading+0xcdc>)
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f002 fe12 	bl	8005e6c <CRSFtoYaw>
 8003248:	ee10 3a10 	vmov	r3, s0
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd f97b 	bl	8000548 <__aeabi_f2d>
 8003252:	a36d      	add	r3, pc, #436	; (adr r3, 8003408 <Start_Data_Reading+0xc98>)
 8003254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003258:	f7fd f9ce 	bl	80005f8 <__aeabi_dmul>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4614      	mov	r4, r2
 8003262:	461d      	mov	r5, r3
 8003264:	4b71      	ldr	r3, [pc, #452]	; (800342c <Start_Data_Reading+0xcbc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd f96d 	bl	8000548 <__aeabi_f2d>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4620      	mov	r0, r4
 8003274:	4629      	mov	r1, r5
 8003276:	f7fd f809 	bl	800028c <__adddf3>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4610      	mov	r0, r2
 8003280:	4619      	mov	r1, r3
 8003282:	f7fd fcb1 	bl	8000be8 <__aeabi_d2f>
 8003286:	4603      	mov	r3, r0
 8003288:	4a68      	ldr	r2, [pc, #416]	; (800342c <Start_Data_Reading+0xcbc>)
 800328a:	6013      	str	r3, [r2, #0]

		  //pitch angle control
		  err_angle_pitch = M_pitch - euler.angle.pitch;
 800328c:	4b6c      	ldr	r3, [pc, #432]	; (8003440 <Start_Data_Reading+0xcd0>)
 800328e:	ed93 7a00 	vldr	s14, [r3]
 8003292:	4b62      	ldr	r3, [pc, #392]	; (800341c <Start_Data_Reading+0xcac>)
 8003294:	edd3 7a01 	vldr	s15, [r3, #4]
 8003298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800329c:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
		  errd_angle_pitch = (err_angle_pitch - prev_err_angle_pitch)/SAMPLE_PERIOD;
 80032a0:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 80032a4:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 80032a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032ac:	eddf 6a6b 	vldr	s13, [pc, #428]	; 800345c <Start_Data_Reading+0xcec>
 80032b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032b4:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
		  angle_control_pitch = P_angle_pitch * err_angle_pitch + D_angle_pitch * errd_angle_pitch;
 80032b8:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 80032bc:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 80032c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032c4:	edd7 6a4b 	vldr	s13, [r7, #300]	; 0x12c
 80032c8:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 80032cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d4:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
		  prev_err_angle_pitch = err_angle_pitch;
 80032d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80032dc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
		  //debug_control1 = err_angle_pitch;

		  //pitch angle velocity control
		  err_pitch = angle_control_pitch - imu.gyr_rps[1];
 80032e0:	4b5b      	ldr	r3, [pc, #364]	; (8003450 <Start_Data_Reading+0xce0>)
 80032e2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80032e6:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 80032ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ee:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
		  errd_pitch = (err_pitch - prev_err_pitch)/SAMPLE_PERIOD;
 80032f2:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 80032f6:	edd7 7a5f 	vldr	s15, [r7, #380]	; 0x17c
 80032fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032fe:	eddf 6a57 	vldr	s13, [pc, #348]	; 800345c <Start_Data_Reading+0xcec>
 8003302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003306:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
		  prev_err_pitch = err_pitch;
 800330a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800330e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
		  control_pitch = P_pitch * err_pitch + D_pitch * errd_pitch;
 8003312:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 8003316:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 800331a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800331e:	edd7 6a50 	vldr	s13, [r7, #320]	; 0x140
 8003322:	edd7 7a53 	vldr	s15, [r7, #332]	; 0x14c
 8003326:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800332a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332e:	edc7 7a52 	vstr	s15, [r7, #328]	; 0x148

		  //roll angle control
		  err_angle_roll = M_roll - euler.angle.roll;
 8003332:	4b45      	ldr	r3, [pc, #276]	; (8003448 <Start_Data_Reading+0xcd8>)
 8003334:	ed93 7a00 	vldr	s14, [r3]
 8003338:	4b38      	ldr	r3, [pc, #224]	; (800341c <Start_Data_Reading+0xcac>)
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003342:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
		  errd_angle_roll = (err_angle_roll - prev_err_angle_roll)/SAMPLE_PERIOD;
 8003346:	ed97 7a43 	vldr	s14, [r7, #268]	; 0x10c
 800334a:	edd7 7a5c 	vldr	s15, [r7, #368]	; 0x170
 800334e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003352:	eddf 6a42 	vldr	s13, [pc, #264]	; 800345c <Start_Data_Reading+0xcec>
 8003356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800335a:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108
		  angle_control_roll = P_angle_roll * err_angle_roll + D_angle_roll * errd_angle_roll;
 800335e:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8003362:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 8003366:	ee27 7a27 	vmul.f32	s14, s14, s15
 800336a:	edd7 6a44 	vldr	s13, [r7, #272]	; 0x110
 800336e:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 8003372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337a:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104
		  prev_err_angle_roll = err_angle_roll;
 800337e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003382:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		  debug_control1 = err_angle_roll;
 8003386:	4a33      	ldr	r2, [pc, #204]	; (8003454 <Start_Data_Reading+0xce4>)
 8003388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800338c:	6013      	str	r3, [r2, #0]


		  //roll angle velocity control
		  err_roll = angle_control_roll - imu.gyr_rps[0]; //M_roll
 800338e:	4b30      	ldr	r3, [pc, #192]	; (8003450 <Start_Data_Reading+0xce0>)
 8003390:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003394:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 8003398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800339c:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
		  errd_roll = (err_roll - prev_err_roll)/SAMPLE_PERIOD;
 80033a0:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 80033a4:	edd7 7a5d 	vldr	s15, [r7, #372]	; 0x174
 80033a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033ac:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800345c <Start_Data_Reading+0xcec>
 80033b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033b4:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
		  prev_err_roll = err_roll;
 80033b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80033bc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
		  control_roll = P_roll * err_roll + D_roll * errd_roll;
 80033c0:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 80033c4:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 80033c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033cc:	edd7 6a46 	vldr	s13, [r7, #280]	; 0x118
 80033d0:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 80033d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033dc:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120
		  debug_control2 = control_roll;
 80033e0:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <Start_Data_Reading+0xce8>)
 80033e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80033e6:	6013      	str	r3, [r2, #0]


		  //yaw angle control
		  err_angle_yaw = M_yaw - euler.angle.yaw;
 80033e8:	4b10      	ldr	r3, [pc, #64]	; (800342c <Start_Data_Reading+0xcbc>)
 80033ea:	ed93 7a00 	vldr	s14, [r3]
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <Start_Data_Reading+0xcac>)
 80033f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80033f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f8:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
 80033fc:	e030      	b.n	8003460 <Start_Data_Reading+0xcf0>
 80033fe:	bf00      	nop
 8003400:	f45e0b4e 	.word	0xf45e0b4e
 8003404:	4023b415 	.word	0x4023b415
 8003408:	33333333 	.word	0x33333333
 800340c:	3fd33333 	.word	0x3fd33333
 8003410:	20000af4 	.word	0x20000af4
 8003414:	20000b18 	.word	0x20000b18
 8003418:	432a0000 	.word	0x432a0000
 800341c:	20000ae8 	.word	0x20000ae8
 8003420:	c32a0000 	.word	0xc32a0000
 8003424:	40768000 	.word	0x40768000
 8003428:	20000a70 	.word	0x20000a70
 800342c:	20002b28 	.word	0x20002b28
 8003430:	20002b34 	.word	0x20002b34
 8003434:	20002b18 	.word	0x20002b18
 8003438:	20002b1c 	.word	0x20002b1c
 800343c:	20002b14 	.word	0x20002b14
 8003440:	20002b20 	.word	0x20002b20
 8003444:	20002b12 	.word	0x20002b12
 8003448:	20002b24 	.word	0x20002b24
 800344c:	20002b16 	.word	0x20002b16
 8003450:	20000970 	.word	0x20000970
 8003454:	20002b2c 	.word	0x20002b2c
 8003458:	20002b30 	.word	0x20002b30
 800345c:	3ba3d70a 	.word	0x3ba3d70a
		  errd_angle_yaw = (err_angle_yaw - prev_err_angle_yaw)/SAMPLE_PERIOD;
 8003460:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 8003464:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 8003468:	ee37 7a67 	vsub.f32	s14, s14, s15
 800346c:	ed5f 6a05 	vldr	s13, [pc, #-20]	; 800345c <Start_Data_Reading+0xcec>
 8003470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003474:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
		  angle_control_yaw = P_angle_yaw * err_angle_yaw + D_angle_yaw * errd_angle_yaw;
 8003478:	ed97 7a3d 	vldr	s14, [r7, #244]	; 0xf4
 800347c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003480:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003484:	edd7 6a3c 	vldr	s13, [r7, #240]	; 0xf0
 8003488:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800348c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003494:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
		  prev_err_angle_yaw = err_angle_yaw;
 8003498:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800349c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160



		  //yaw angle velocity control
		  err_yaw = angle_control_yaw - imu.gyr_rps[2]; //angle_control_yaw
 80034a0:	4b66      	ldr	r3, [pc, #408]	; (800363c <Start_Data_Reading+0xecc>)
 80034a2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80034a6:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 80034aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ae:	edc7 7a40 	vstr	s15, [r7, #256]	; 0x100
		  errd_yaw = (err_yaw - prev_err_yaw)/SAMPLE_PERIOD;
 80034b2:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 80034b6:	edd7 7a5b 	vldr	s15, [r7, #364]	; 0x16c
 80034ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034be:	eddf 6a60 	vldr	s13, [pc, #384]	; 8003640 <Start_Data_Reading+0xed0>
 80034c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034c6:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
		  prev_err_yaw = err_yaw;
 80034ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80034ce:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		  control_yaw = P_yaw * err_yaw + D_yaw * errd_yaw;
 80034d2:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
 80034d6:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 80034da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034de:	edd7 6a59 	vldr	s13, [r7, #356]	; 0x164
 80034e2:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 80034e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ee:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8



		  if(RX_arm > 1000){
 80034f2:	4b54      	ldr	r3, [pc, #336]	; (8003644 <Start_Data_Reading+0xed4>)
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034fa:	d963      	bls.n	80035c4 <Start_Data_Reading+0xe54>
			  uart_telemetria = 0;
 80034fc:	4b52      	ldr	r3, [pc, #328]	; (8003648 <Start_Data_Reading+0xed8>)
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
//			  ref2 = (uint16_t)(M_throttle - control_roll);
//			  ref3 = (uint16_t)(M_throttle - control_roll);
//			  ref4 = (uint16_t)(M_throttle + control_roll);

			  //yaw
			  ref1 = (uint16_t)(M_throttle - control_yaw);
 8003502:	4b52      	ldr	r3, [pc, #328]	; (800364c <Start_Data_Reading+0xedc>)
 8003504:	ed93 7a00 	vldr	s14, [r3]
 8003508:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 800350c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003514:	ee17 3a90 	vmov	r3, s15
 8003518:	b29a      	uxth	r2, r3
 800351a:	4b4d      	ldr	r3, [pc, #308]	; (8003650 <Start_Data_Reading+0xee0>)
 800351c:	801a      	strh	r2, [r3, #0]
			  ref2 = (uint16_t)(M_throttle + control_yaw);
 800351e:	4b4b      	ldr	r3, [pc, #300]	; (800364c <Start_Data_Reading+0xedc>)
 8003520:	ed93 7a00 	vldr	s14, [r3]
 8003524:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8003528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003530:	ee17 3a90 	vmov	r3, s15
 8003534:	b29a      	uxth	r2, r3
 8003536:	4b47      	ldr	r3, [pc, #284]	; (8003654 <Start_Data_Reading+0xee4>)
 8003538:	801a      	strh	r2, [r3, #0]
			  ref3 = (uint16_t)(M_throttle - control_yaw);
 800353a:	4b44      	ldr	r3, [pc, #272]	; (800364c <Start_Data_Reading+0xedc>)
 800353c:	ed93 7a00 	vldr	s14, [r3]
 8003540:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8003544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800354c:	ee17 3a90 	vmov	r3, s15
 8003550:	b29a      	uxth	r2, r3
 8003552:	4b41      	ldr	r3, [pc, #260]	; (8003658 <Start_Data_Reading+0xee8>)
 8003554:	801a      	strh	r2, [r3, #0]
			  ref4 = (uint16_t)(M_throttle + control_yaw);
 8003556:	4b3d      	ldr	r3, [pc, #244]	; (800364c <Start_Data_Reading+0xedc>)
 8003558:	ed93 7a00 	vldr	s14, [r3]
 800355c:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8003560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003568:	ee17 3a90 	vmov	r3, s15
 800356c:	b29a      	uxth	r2, r3
 800356e:	4b3b      	ldr	r3, [pc, #236]	; (800365c <Start_Data_Reading+0xeec>)
 8003570:	801a      	strh	r2, [r3, #0]

			  if(ref1<550) ref1 = 550;
 8003572:	4b37      	ldr	r3, [pc, #220]	; (8003650 <Start_Data_Reading+0xee0>)
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	f240 2225 	movw	r2, #549	; 0x225
 800357a:	4293      	cmp	r3, r2
 800357c:	d803      	bhi.n	8003586 <Start_Data_Reading+0xe16>
 800357e:	4b34      	ldr	r3, [pc, #208]	; (8003650 <Start_Data_Reading+0xee0>)
 8003580:	f240 2226 	movw	r2, #550	; 0x226
 8003584:	801a      	strh	r2, [r3, #0]
			  if(ref2<550) ref2 = 550;
 8003586:	4b33      	ldr	r3, [pc, #204]	; (8003654 <Start_Data_Reading+0xee4>)
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	f240 2225 	movw	r2, #549	; 0x225
 800358e:	4293      	cmp	r3, r2
 8003590:	d803      	bhi.n	800359a <Start_Data_Reading+0xe2a>
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <Start_Data_Reading+0xee4>)
 8003594:	f240 2226 	movw	r2, #550	; 0x226
 8003598:	801a      	strh	r2, [r3, #0]
			  if(ref3<550) ref3 = 550;
 800359a:	4b2f      	ldr	r3, [pc, #188]	; (8003658 <Start_Data_Reading+0xee8>)
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	f240 2225 	movw	r2, #549	; 0x225
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d803      	bhi.n	80035ae <Start_Data_Reading+0xe3e>
 80035a6:	4b2c      	ldr	r3, [pc, #176]	; (8003658 <Start_Data_Reading+0xee8>)
 80035a8:	f240 2226 	movw	r2, #550	; 0x226
 80035ac:	801a      	strh	r2, [r3, #0]
			  if(ref4<550) ref4 = 550;
 80035ae:	4b2b      	ldr	r3, [pc, #172]	; (800365c <Start_Data_Reading+0xeec>)
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	f240 2225 	movw	r2, #549	; 0x225
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d82d      	bhi.n	8003616 <Start_Data_Reading+0xea6>
 80035ba:	4b28      	ldr	r3, [pc, #160]	; (800365c <Start_Data_Reading+0xeec>)
 80035bc:	f240 2226 	movw	r2, #550	; 0x226
 80035c0:	801a      	strh	r2, [r3, #0]
 80035c2:	e028      	b.n	8003616 <Start_Data_Reading+0xea6>
//			  ref2 = (uint16_t)CRSFtoDuty(RX_throttle);
//			  ref3 = (uint16_t)CRSFtoDuty(RX_throttle);
//			  ref4 = (uint16_t)CRSFtoDuty(RX_throttle);
		  }
		  else{
			  uart_telemetria = 1;
 80035c4:	4b20      	ldr	r3, [pc, #128]	; (8003648 <Start_Data_Reading+0xed8>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]
			  if(new_P == 1){
 80035ca:	4b25      	ldr	r3, [pc, #148]	; (8003660 <Start_Data_Reading+0xef0>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d106      	bne.n	80035e0 <Start_Data_Reading+0xe70>
				  P_yaw = telem_P;
 80035d2:	4b24      	ldr	r3, [pc, #144]	; (8003664 <Start_Data_Reading+0xef4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
				  new_P = 0;
 80035da:	4b21      	ldr	r3, [pc, #132]	; (8003660 <Start_Data_Reading+0xef0>)
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
			  }
			  if(new_D == 1){
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <Start_Data_Reading+0xef8>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d106      	bne.n	80035f6 <Start_Data_Reading+0xe86>
				  D_yaw = telem_D;
 80035e8:	4b20      	ldr	r3, [pc, #128]	; (800366c <Start_Data_Reading+0xefc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
				  new_D = 0;
 80035f0:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <Start_Data_Reading+0xef8>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	701a      	strb	r2, [r3, #0]
			  }
			  ref1 = 550;
 80035f6:	4b16      	ldr	r3, [pc, #88]	; (8003650 <Start_Data_Reading+0xee0>)
 80035f8:	f240 2226 	movw	r2, #550	; 0x226
 80035fc:	801a      	strh	r2, [r3, #0]
			  ref2 = 550;
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <Start_Data_Reading+0xee4>)
 8003600:	f240 2226 	movw	r2, #550	; 0x226
 8003604:	801a      	strh	r2, [r3, #0]
			  ref3 = 550;
 8003606:	4b14      	ldr	r3, [pc, #80]	; (8003658 <Start_Data_Reading+0xee8>)
 8003608:	f240 2226 	movw	r2, #550	; 0x226
 800360c:	801a      	strh	r2, [r3, #0]
			  ref4 = 550;
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <Start_Data_Reading+0xeec>)
 8003610:	f240 2226 	movw	r2, #550	; 0x226
 8003614:	801a      	strh	r2, [r3, #0]




		  //set_duty_Oneshot42(&htim3, 550, 550, 550, 550);
		  set_duty_Oneshot42(&htim3, ref1, ref2, ref3, ref4);
 8003616:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <Start_Data_Reading+0xee0>)
 8003618:	8819      	ldrh	r1, [r3, #0]
 800361a:	4b0e      	ldr	r3, [pc, #56]	; (8003654 <Start_Data_Reading+0xee4>)
 800361c:	881a      	ldrh	r2, [r3, #0]
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <Start_Data_Reading+0xee8>)
 8003620:	8818      	ldrh	r0, [r3, #0]
 8003622:	4b0e      	ldr	r3, [pc, #56]	; (800365c <Start_Data_Reading+0xeec>)
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	4603      	mov	r3, r0
 800362a:	4811      	ldr	r0, [pc, #68]	; (8003670 <Start_Data_Reading+0xf00>)
 800362c:	f002 fb7d 	bl	8005d2a <set_duty_Oneshot42>
	osDelay(3);
 8003630:	2003      	movs	r0, #3
 8003632:	f00a fa81 	bl	800db38 <osDelay>
  {
 8003636:	f7ff ba9d 	b.w	8002b74 <Start_Data_Reading+0x404>
 800363a:	bf00      	nop
 800363c:	20000970 	.word	0x20000970
 8003640:	3ba3d70a 	.word	0x3ba3d70a
 8003644:	20002b1a 	.word	0x20002b1a
 8003648:	20000b32 	.word	0x20000b32
 800364c:	20002b1c 	.word	0x20002b1c
 8003650:	20002ac4 	.word	0x20002ac4
 8003654:	20002ac6 	.word	0x20002ac6
 8003658:	20002ac8 	.word	0x20002ac8
 800365c:	20002aca 	.word	0x20002aca
 8003660:	20000b3c 	.word	0x20000b3c
 8003664:	20000b34 	.word	0x20000b34
 8003668:	20000b3d 	.word	0x20000b3d
 800366c:	20000b38 	.word	0x20000b38
 8003670:	200006d4 	.word	0x200006d4

08003674 <Start_Orientation>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Orientation */
void Start_Orientation(void const * argument)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
//		//filterUpdateIMU(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], &q );
//		filterUpdate(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], mag_data_y, -mag_data_x, mag_data_z, &q, &f);
//		eulerAngles(q, &roll, &pitch, &yaw);
//		oricalc = 0;
//	  }
    osDelay(1);
 800367c:	2001      	movs	r0, #1
 800367e:	f00a fa5b 	bl	800db38 <osDelay>
 8003682:	e7fb      	b.n	800367c <Start_Orientation+0x8>

08003684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003688:	b672      	cpsid	i
}
 800368a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800368c:	e7fe      	b.n	800368c <Error_Handler+0x8>
	...

08003690 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_MspInit+0x54>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	4a11      	ldr	r2, [pc, #68]	; (80036e4 <HAL_MspInit+0x54>)
 80036a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036a4:	6453      	str	r3, [r2, #68]	; 0x44
 80036a6:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <HAL_MspInit+0x54>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ae:	607b      	str	r3, [r7, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_MspInit+0x54>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	4a0a      	ldr	r2, [pc, #40]	; (80036e4 <HAL_MspInit+0x54>)
 80036bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c0:	6413      	str	r3, [r2, #64]	; 0x40
 80036c2:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <HAL_MspInit+0x54>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036ce:	2200      	movs	r2, #0
 80036d0:	210f      	movs	r1, #15
 80036d2:	f06f 0001 	mvn.w	r0, #1
 80036d6:	f002 ffba 	bl	800664e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800

080036e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08e      	sub	sp, #56	; 0x38
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a45      	ldr	r2, [pc, #276]	; (800381c <HAL_ADC_MspInit+0x134>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d128      	bne.n	800375c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	623b      	str	r3, [r7, #32]
 800370e:	4b44      	ldr	r3, [pc, #272]	; (8003820 <HAL_ADC_MspInit+0x138>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	4a43      	ldr	r2, [pc, #268]	; (8003820 <HAL_ADC_MspInit+0x138>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003718:	6453      	str	r3, [r2, #68]	; 0x44
 800371a:	4b41      	ldr	r3, [pc, #260]	; (8003820 <HAL_ADC_MspInit+0x138>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	623b      	str	r3, [r7, #32]
 8003724:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	4b3d      	ldr	r3, [pc, #244]	; (8003820 <HAL_ADC_MspInit+0x138>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	4a3c      	ldr	r2, [pc, #240]	; (8003820 <HAL_ADC_MspInit+0x138>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6313      	str	r3, [r2, #48]	; 0x30
 8003736:	4b3a      	ldr	r3, [pc, #232]	; (8003820 <HAL_ADC_MspInit+0x138>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	61fb      	str	r3, [r7, #28]
 8003740:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CRNT_Pin;
 8003742:	2320      	movs	r3, #32
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003746:	2303      	movs	r3, #3
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CRNT_GPIO_Port, &GPIO_InitStruct);
 800374e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003752:	4619      	mov	r1, r3
 8003754:	4833      	ldr	r0, [pc, #204]	; (8003824 <HAL_ADC_MspInit+0x13c>)
 8003756:	f003 fbb3 	bl	8006ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800375a:	e05a      	b.n	8003812 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a31      	ldr	r2, [pc, #196]	; (8003828 <HAL_ADC_MspInit+0x140>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d128      	bne.n	80037b8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	4b2d      	ldr	r3, [pc, #180]	; (8003820 <HAL_ADC_MspInit+0x138>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	4a2c      	ldr	r2, [pc, #176]	; (8003820 <HAL_ADC_MspInit+0x138>)
 8003770:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003774:	6453      	str	r3, [r2, #68]	; 0x44
 8003776:	4b2a      	ldr	r3, [pc, #168]	; (8003820 <HAL_ADC_MspInit+0x138>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	4b26      	ldr	r3, [pc, #152]	; (8003820 <HAL_ADC_MspInit+0x138>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a25      	ldr	r2, [pc, #148]	; (8003820 <HAL_ADC_MspInit+0x138>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b23      	ldr	r3, [pc, #140]	; (8003820 <HAL_ADC_MspInit+0x138>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800379e:	2310      	movs	r3, #16
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037a2:	2303      	movs	r3, #3
 80037a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ae:	4619      	mov	r1, r3
 80037b0:	481c      	ldr	r0, [pc, #112]	; (8003824 <HAL_ADC_MspInit+0x13c>)
 80037b2:	f003 fb85 	bl	8006ec0 <HAL_GPIO_Init>
}
 80037b6:	e02c      	b.n	8003812 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1b      	ldr	r2, [pc, #108]	; (800382c <HAL_ADC_MspInit+0x144>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d127      	bne.n	8003812 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	4b16      	ldr	r3, [pc, #88]	; (8003820 <HAL_ADC_MspInit+0x138>)
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	4a15      	ldr	r2, [pc, #84]	; (8003820 <HAL_ADC_MspInit+0x138>)
 80037cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037d0:	6453      	str	r3, [r2, #68]	; 0x44
 80037d2:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_ADC_MspInit+0x138>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <HAL_ADC_MspInit+0x138>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	4a0e      	ldr	r2, [pc, #56]	; (8003820 <HAL_ADC_MspInit+0x138>)
 80037e8:	f043 0304 	orr.w	r3, r3, #4
 80037ec:	6313      	str	r3, [r2, #48]	; 0x30
 80037ee:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <HAL_ADC_MspInit+0x138>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037fa:	2308      	movs	r3, #8
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037fe:	2303      	movs	r3, #3
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003802:	2300      	movs	r3, #0
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800380a:	4619      	mov	r1, r3
 800380c:	4808      	ldr	r0, [pc, #32]	; (8003830 <HAL_ADC_MspInit+0x148>)
 800380e:	f003 fb57 	bl	8006ec0 <HAL_GPIO_Init>
}
 8003812:	bf00      	nop
 8003814:	3738      	adds	r7, #56	; 0x38
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40012000 	.word	0x40012000
 8003820:	40023800 	.word	0x40023800
 8003824:	40020000 	.word	0x40020000
 8003828:	40012100 	.word	0x40012100
 800382c:	40012200 	.word	0x40012200
 8003830:	40020800 	.word	0x40020800

08003834 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08e      	sub	sp, #56	; 0x38
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a5c      	ldr	r2, [pc, #368]	; (80039c4 <HAL_I2C_MspInit+0x190>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d12d      	bne.n	80038b2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	623b      	str	r3, [r7, #32]
 800385a:	4b5b      	ldr	r3, [pc, #364]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	4a5a      	ldr	r2, [pc, #360]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	6313      	str	r3, [r2, #48]	; 0x30
 8003866:	4b58      	ldr	r3, [pc, #352]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	623b      	str	r3, [r7, #32]
 8003870:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAGN_SCL_Pin|MAGN_SDA_Pin;
 8003872:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003878:	2312      	movs	r3, #18
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387c:	2300      	movs	r3, #0
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003880:	2303      	movs	r3, #3
 8003882:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003884:	2304      	movs	r3, #4
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800388c:	4619      	mov	r1, r3
 800388e:	484f      	ldr	r0, [pc, #316]	; (80039cc <HAL_I2C_MspInit+0x198>)
 8003890:	f003 fb16 	bl	8006ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003894:	2300      	movs	r3, #0
 8003896:	61fb      	str	r3, [r7, #28]
 8003898:	4b4b      	ldr	r3, [pc, #300]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	4a4a      	ldr	r2, [pc, #296]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 800389e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038a2:	6413      	str	r3, [r2, #64]	; 0x40
 80038a4:	4b48      	ldr	r3, [pc, #288]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80038b0:	e083      	b.n	80039ba <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a46      	ldr	r2, [pc, #280]	; (80039d0 <HAL_I2C_MspInit+0x19c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d12d      	bne.n	8003918 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038bc:	2300      	movs	r3, #0
 80038be:	61bb      	str	r3, [r7, #24]
 80038c0:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	4a40      	ldr	r2, [pc, #256]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 80038c6:	f043 0302 	orr.w	r3, r3, #2
 80038ca:	6313      	str	r3, [r2, #48]	; 0x30
 80038cc:	4b3e      	ldr	r3, [pc, #248]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PRESS_SCL_Pin|PRESS_SDA_Pin;
 80038d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038de:	2312      	movs	r3, #18
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e6:	2303      	movs	r3, #3
 80038e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80038ea:	2304      	movs	r3, #4
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f2:	4619      	mov	r1, r3
 80038f4:	4835      	ldr	r0, [pc, #212]	; (80039cc <HAL_I2C_MspInit+0x198>)
 80038f6:	f003 fae3 	bl	8006ec0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	4b32      	ldr	r3, [pc, #200]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	4a31      	ldr	r2, [pc, #196]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 8003904:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003908:	6413      	str	r3, [r2, #64]	; 0x40
 800390a:	4b2f      	ldr	r3, [pc, #188]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	697b      	ldr	r3, [r7, #20]
}
 8003916:	e050      	b.n	80039ba <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2d      	ldr	r2, [pc, #180]	; (80039d4 <HAL_I2C_MspInit+0x1a0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d14b      	bne.n	80039ba <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	4b28      	ldr	r3, [pc, #160]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	4a27      	ldr	r2, [pc, #156]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 800392c:	f043 0304 	orr.w	r3, r3, #4
 8003930:	6313      	str	r3, [r2, #48]	; 0x30
 8003932:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	4a20      	ldr	r2, [pc, #128]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	6313      	str	r3, [r2, #48]	; 0x30
 800394e:	4b1e      	ldr	r3, [pc, #120]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800395a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003960:	2312      	movs	r3, #18
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003968:	2303      	movs	r3, #3
 800396a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800396c:	2304      	movs	r3, #4
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003974:	4619      	mov	r1, r3
 8003976:	4818      	ldr	r0, [pc, #96]	; (80039d8 <HAL_I2C_MspInit+0x1a4>)
 8003978:	f003 faa2 	bl	8006ec0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800397c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003982:	2312      	movs	r3, #18
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003986:	2300      	movs	r3, #0
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398a:	2303      	movs	r3, #3
 800398c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800398e:	2304      	movs	r3, #4
 8003990:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003996:	4619      	mov	r1, r3
 8003998:	4810      	ldr	r0, [pc, #64]	; (80039dc <HAL_I2C_MspInit+0x1a8>)
 800399a:	f003 fa91 	bl	8006ec0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	4a08      	ldr	r2, [pc, #32]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 80039a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039ac:	6413      	str	r3, [r2, #64]	; 0x40
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <HAL_I2C_MspInit+0x194>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
}
 80039ba:	bf00      	nop
 80039bc:	3738      	adds	r7, #56	; 0x38
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40005400 	.word	0x40005400
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40020400 	.word	0x40020400
 80039d0:	40005800 	.word	0x40005800
 80039d4:	40005c00 	.word	0x40005c00
 80039d8:	40020800 	.word	0x40020800
 80039dc:	40020000 	.word	0x40020000

080039e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	; 0x28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	f107 0314 	add.w	r3, r7, #20
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a19      	ldr	r2, [pc, #100]	; (8003a64 <HAL_SPI_MspInit+0x84>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d12c      	bne.n	8003a5c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <HAL_SPI_MspInit+0x88>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	4a17      	ldr	r2, [pc, #92]	; (8003a68 <HAL_SPI_MspInit+0x88>)
 8003a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a10:	6413      	str	r3, [r2, #64]	; 0x40
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <HAL_SPI_MspInit+0x88>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_SPI_MspInit+0x88>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	4a10      	ldr	r2, [pc, #64]	; (8003a68 <HAL_SPI_MspInit+0x88>)
 8003a28:	f043 0302 	orr.w	r3, r3, #2
 8003a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2e:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <HAL_SPI_MspInit+0x88>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8003a3a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	2302      	movs	r3, #2
 8003a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a4c:	2305      	movs	r3, #5
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	4619      	mov	r1, r3
 8003a56:	4805      	ldr	r0, [pc, #20]	; (8003a6c <HAL_SPI_MspInit+0x8c>)
 8003a58:	f003 fa32 	bl	8006ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003a5c:	bf00      	nop
 8003a5e:	3728      	adds	r7, #40	; 0x28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40003800 	.word	0x40003800
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40020400 	.word	0x40020400

08003a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08e      	sub	sp, #56	; 0x38
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a90:	d134      	bne.n	8003afc <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	623b      	str	r3, [r7, #32]
 8003a96:	4b4b      	ldr	r3, [pc, #300]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	4a4a      	ldr	r2, [pc, #296]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa2:	4b48      	ldr	r3, [pc, #288]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	623b      	str	r3, [r7, #32]
 8003aac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	4b44      	ldr	r3, [pc, #272]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	4a43      	ldr	r2, [pc, #268]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6313      	str	r3, [r2, #48]	; 0x30
 8003abe:	4b41      	ldr	r3, [pc, #260]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8003aca:	2301      	movs	r3, #1
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ada:	2301      	movs	r3, #1
 8003adc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4838      	ldr	r0, [pc, #224]	; (8003bc8 <HAL_TIM_Base_MspInit+0x158>)
 8003ae6:	f003 f9eb 	bl	8006ec0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003aea:	2200      	movs	r2, #0
 8003aec:	2105      	movs	r1, #5
 8003aee:	201c      	movs	r0, #28
 8003af0:	f002 fdad 	bl	800664e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003af4:	201c      	movs	r0, #28
 8003af6:	f002 fdc6 	bl	8006686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003afa:	e05e      	b.n	8003bba <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM3)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a32      	ldr	r2, [pc, #200]	; (8003bcc <HAL_TIM_Base_MspInit+0x15c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d10e      	bne.n	8003b24 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	4b2e      	ldr	r3, [pc, #184]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	4a2d      	ldr	r2, [pc, #180]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003b10:	f043 0302 	orr.w	r3, r3, #2
 8003b14:	6413      	str	r3, [r2, #64]	; 0x40
 8003b16:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	69bb      	ldr	r3, [r7, #24]
}
 8003b22:	e04a      	b.n	8003bba <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM4)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a29      	ldr	r2, [pc, #164]	; (8003bd0 <HAL_TIM_Base_MspInit+0x160>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d10e      	bne.n	8003b4c <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	4b24      	ldr	r3, [pc, #144]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	4a23      	ldr	r2, [pc, #140]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3e:	4b21      	ldr	r3, [pc, #132]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	697b      	ldr	r3, [r7, #20]
}
 8003b4a:	e036      	b.n	8003bba <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM6)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a20      	ldr	r2, [pc, #128]	; (8003bd4 <HAL_TIM_Base_MspInit+0x164>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d116      	bne.n	8003b84 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a19      	ldr	r2, [pc, #100]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003b60:	f043 0310 	orr.w	r3, r3, #16
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
 8003b66:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003b72:	2200      	movs	r2, #0
 8003b74:	2105      	movs	r1, #5
 8003b76:	2036      	movs	r0, #54	; 0x36
 8003b78:	f002 fd69 	bl	800664e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b7c:	2036      	movs	r0, #54	; 0x36
 8003b7e:	f002 fd82 	bl	8006686 <HAL_NVIC_EnableIRQ>
}
 8003b82:	e01a      	b.n	8003bba <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM7)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a13      	ldr	r2, [pc, #76]	; (8003bd8 <HAL_TIM_Base_MspInit+0x168>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d115      	bne.n	8003bba <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	4a0b      	ldr	r2, [pc, #44]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003b98:	f043 0320 	orr.w	r3, r3, #32
 8003b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_TIM_Base_MspInit+0x154>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003baa:	2200      	movs	r2, #0
 8003bac:	2105      	movs	r1, #5
 8003bae:	2037      	movs	r0, #55	; 0x37
 8003bb0:	f002 fd4d 	bl	800664e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003bb4:	2037      	movs	r0, #55	; 0x37
 8003bb6:	f002 fd66 	bl	8006686 <HAL_NVIC_EnableIRQ>
}
 8003bba:	bf00      	nop
 8003bbc:	3738      	adds	r7, #56	; 0x38
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40020000 	.word	0x40020000
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800
 8003bd4:	40001000 	.word	0x40001000
 8003bd8:	40001400 	.word	0x40001400

08003bdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08a      	sub	sp, #40	; 0x28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be4:	f107 0314 	add.w	r3, r7, #20
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a21      	ldr	r2, [pc, #132]	; (8003c80 <HAL_TIM_MspPostInit+0xa4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d13b      	bne.n	8003c76 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <HAL_TIM_MspPostInit+0xa8>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <HAL_TIM_MspPostInit+0xa8>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_TIM_MspPostInit+0xa8>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <HAL_TIM_MspPostInit+0xa8>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <HAL_TIM_MspPostInit+0xa8>)
 8003c24:	f043 0302 	orr.w	r3, r3, #2
 8003c28:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2a:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <HAL_TIM_MspPostInit+0xa8>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8003c36:	23c0      	movs	r3, #192	; 0xc0
 8003c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c42:	2300      	movs	r3, #0
 8003c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c46:	2302      	movs	r3, #2
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4a:	f107 0314 	add.w	r3, r7, #20
 8003c4e:	4619      	mov	r1, r3
 8003c50:	480d      	ldr	r0, [pc, #52]	; (8003c88 <HAL_TIM_MspPostInit+0xac>)
 8003c52:	f003 f935 	bl	8006ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 8003c56:	2303      	movs	r3, #3
 8003c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c62:	2300      	movs	r3, #0
 8003c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c66:	2302      	movs	r3, #2
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6a:	f107 0314 	add.w	r3, r7, #20
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4806      	ldr	r0, [pc, #24]	; (8003c8c <HAL_TIM_MspPostInit+0xb0>)
 8003c72:	f003 f925 	bl	8006ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003c76:	bf00      	nop
 8003c78:	3728      	adds	r7, #40	; 0x28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40020000 	.word	0x40020000
 8003c8c:	40020400 	.word	0x40020400

08003c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b090      	sub	sp, #64	; 0x40
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a81      	ldr	r2, [pc, #516]	; (8003eb4 <HAL_UART_MspInit+0x224>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d15d      	bne.n	8003d6e <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb6:	4b80      	ldr	r3, [pc, #512]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	4a7f      	ldr	r2, [pc, #508]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003cbc:	f043 0310 	orr.w	r3, r3, #16
 8003cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cc2:	4b7d      	ldr	r3, [pc, #500]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd2:	4b79      	ldr	r3, [pc, #484]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	4a78      	ldr	r2, [pc, #480]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cde:	4b76      	ldr	r3, [pc, #472]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RECEIVER_TX_Pin|RECEIVER_RX_Pin;
 8003cea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cfc:	2307      	movs	r3, #7
 8003cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d04:	4619      	mov	r1, r3
 8003d06:	486d      	ldr	r0, [pc, #436]	; (8003ebc <HAL_UART_MspInit+0x22c>)
 8003d08:	f003 f8da 	bl	8006ec0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003d0c:	4b6c      	ldr	r3, [pc, #432]	; (8003ec0 <HAL_UART_MspInit+0x230>)
 8003d0e:	4a6d      	ldr	r2, [pc, #436]	; (8003ec4 <HAL_UART_MspInit+0x234>)
 8003d10:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003d12:	4b6b      	ldr	r3, [pc, #428]	; (8003ec0 <HAL_UART_MspInit+0x230>)
 8003d14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d18:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d1a:	4b69      	ldr	r3, [pc, #420]	; (8003ec0 <HAL_UART_MspInit+0x230>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d20:	4b67      	ldr	r3, [pc, #412]	; (8003ec0 <HAL_UART_MspInit+0x230>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d26:	4b66      	ldr	r3, [pc, #408]	; (8003ec0 <HAL_UART_MspInit+0x230>)
 8003d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d2e:	4b64      	ldr	r3, [pc, #400]	; (8003ec0 <HAL_UART_MspInit+0x230>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d34:	4b62      	ldr	r3, [pc, #392]	; (8003ec0 <HAL_UART_MspInit+0x230>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003d3a:	4b61      	ldr	r3, [pc, #388]	; (8003ec0 <HAL_UART_MspInit+0x230>)
 8003d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d40:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003d42:	4b5f      	ldr	r3, [pc, #380]	; (8003ec0 <HAL_UART_MspInit+0x230>)
 8003d44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d48:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d4a:	4b5d      	ldr	r3, [pc, #372]	; (8003ec0 <HAL_UART_MspInit+0x230>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003d50:	485b      	ldr	r0, [pc, #364]	; (8003ec0 <HAL_UART_MspInit+0x230>)
 8003d52:	f002 fcb3 	bl	80066bc <HAL_DMA_Init>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003d5c:	f7ff fc92 	bl	8003684 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a57      	ldr	r2, [pc, #348]	; (8003ec0 <HAL_UART_MspInit+0x230>)
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
 8003d66:	4a56      	ldr	r2, [pc, #344]	; (8003ec0 <HAL_UART_MspInit+0x230>)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003d6c:	e09d      	b.n	8003eaa <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a55      	ldr	r2, [pc, #340]	; (8003ec8 <HAL_UART_MspInit+0x238>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d134      	bne.n	8003de2 <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d78:	2300      	movs	r3, #0
 8003d7a:	623b      	str	r3, [r7, #32]
 8003d7c:	4b4e      	ldr	r3, [pc, #312]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	4a4d      	ldr	r2, [pc, #308]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d86:	6413      	str	r3, [r2, #64]	; 0x40
 8003d88:	4b4b      	ldr	r3, [pc, #300]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	623b      	str	r3, [r7, #32]
 8003d92:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	4b47      	ldr	r3, [pc, #284]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	4a46      	ldr	r2, [pc, #280]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6313      	str	r3, [r2, #48]	; 0x30
 8003da4:	4b44      	ldr	r3, [pc, #272]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]
 8003dae:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003db0:	230c      	movs	r3, #12
 8003db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db4:	2302      	movs	r3, #2
 8003db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003dc0:	2307      	movs	r3, #7
 8003dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dc8:	4619      	mov	r1, r3
 8003dca:	483c      	ldr	r0, [pc, #240]	; (8003ebc <HAL_UART_MspInit+0x22c>)
 8003dcc:	f003 f878 	bl	8006ec0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2105      	movs	r1, #5
 8003dd4:	2026      	movs	r0, #38	; 0x26
 8003dd6:	f002 fc3a 	bl	800664e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003dda:	2026      	movs	r0, #38	; 0x26
 8003ddc:	f002 fc53 	bl	8006686 <HAL_NVIC_EnableIRQ>
}
 8003de0:	e063      	b.n	8003eaa <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART3)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a39      	ldr	r2, [pc, #228]	; (8003ecc <HAL_UART_MspInit+0x23c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d12d      	bne.n	8003e48 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003dec:	2300      	movs	r3, #0
 8003dee:	61bb      	str	r3, [r7, #24]
 8003df0:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	4a30      	ldr	r2, [pc, #192]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003df6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfc:	4b2e      	ldr	r3, [pc, #184]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	4b2a      	ldr	r3, [pc, #168]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	4a29      	ldr	r2, [pc, #164]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003e12:	f043 0304 	orr.w	r3, r3, #4
 8003e16:	6313      	str	r3, [r2, #48]	; 0x30
 8003e18:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003e24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e32:	2303      	movs	r3, #3
 8003e34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e36:	2307      	movs	r3, #7
 8003e38:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4823      	ldr	r0, [pc, #140]	; (8003ed0 <HAL_UART_MspInit+0x240>)
 8003e42:	f003 f83d 	bl	8006ec0 <HAL_GPIO_Init>
}
 8003e46:	e030      	b.n	8003eaa <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART6)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a21      	ldr	r2, [pc, #132]	; (8003ed4 <HAL_UART_MspInit+0x244>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d12b      	bne.n	8003eaa <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	4b18      	ldr	r3, [pc, #96]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	4a17      	ldr	r2, [pc, #92]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003e5c:	f043 0320 	orr.w	r3, r3, #32
 8003e60:	6453      	str	r3, [r2, #68]	; 0x44
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	4a10      	ldr	r2, [pc, #64]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003e78:	f043 0304 	orr.w	r3, r3, #4
 8003e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7e:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <HAL_UART_MspInit+0x228>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e8a:	23c0      	movs	r3, #192	; 0xc0
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e96:	2303      	movs	r3, #3
 8003e98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	480a      	ldr	r0, [pc, #40]	; (8003ed0 <HAL_UART_MspInit+0x240>)
 8003ea6:	f003 f80b 	bl	8006ec0 <HAL_GPIO_Init>
}
 8003eaa:	bf00      	nop
 8003eac:	3740      	adds	r7, #64	; 0x40
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40011000 	.word	0x40011000
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40020000 	.word	0x40020000
 8003ec0:	20000904 	.word	0x20000904
 8003ec4:	40026440 	.word	0x40026440
 8003ec8:	40004400 	.word	0x40004400
 8003ecc:	40004800 	.word	0x40004800
 8003ed0:	40020800 	.word	0x40020800
 8003ed4:	40011400 	.word	0x40011400

08003ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003edc:	e7fe      	b.n	8003edc <NMI_Handler+0x4>

08003ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ee2:	e7fe      	b.n	8003ee2 <HardFault_Handler+0x4>

08003ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ee8:	e7fe      	b.n	8003ee8 <MemManage_Handler+0x4>

08003eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eee:	e7fe      	b.n	8003eee <BusFault_Handler+0x4>

08003ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef4:	e7fe      	b.n	8003ef4 <UsageFault_Handler+0x4>

08003ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f08:	f002 f820 	bl	8005f4c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003f0c:	f00b f974 	bl	800f1f8 <xTaskGetSchedulerState>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d001      	beq.n	8003f1a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003f16:	f00b fc37 	bl	800f788 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003f22:	2001      	movs	r0, #1
 8003f24:	f003 f99c 	bl	8007260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003f28:	bf00      	nop
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_PRESS_Pin);
 8003f30:	2004      	movs	r0, #4
 8003f32:	f003 f995 	bl	8007260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f40:	4802      	ldr	r0, [pc, #8]	; (8003f4c <TIM2_IRQHandler+0x10>)
 8003f42:	f005 fc78 	bl	8009836 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	2000068c 	.word	0x2000068c

08003f50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f54:	4802      	ldr	r0, [pc, #8]	; (8003f60 <USART2_IRQHandler+0x10>)
 8003f56:	f006 fedd 	bl	800ad14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000838 	.word	0x20000838

08003f64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_GYRO_Pin);
 8003f68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f6c:	f003 f978 	bl	8007260 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_ACC_Pin);
 8003f70:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f74:	f003 f974 	bl	8007260 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_MAGN_Pin);
 8003f78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003f7c:	f003 f970 	bl	8007260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f80:	bf00      	nop
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003f88:	4802      	ldr	r0, [pc, #8]	; (8003f94 <TIM6_DAC_IRQHandler+0x10>)
 8003f8a:	f005 fc54 	bl	8009836 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000764 	.word	0x20000764

08003f98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003f9c:	4802      	ldr	r0, [pc, #8]	; (8003fa8 <TIM7_IRQHandler+0x10>)
 8003f9e:	f005 fc4a 	bl	8009836 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	200007ac 	.word	0x200007ac

08003fac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003fb0:	4802      	ldr	r0, [pc, #8]	; (8003fbc <DMA2_Stream2_IRQHandler+0x10>)
 8003fb2:	f002 fd1b 	bl	80069ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000904 	.word	0x20000904

08003fc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return 1;
 8003fc4:	2301      	movs	r3, #1
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <_kill>:

int _kill(int pid, int sig)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fda:	f00b fe0f 	bl	800fbfc <__errno>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2216      	movs	r2, #22
 8003fe2:	601a      	str	r2, [r3, #0]
  return -1;
 8003fe4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <_exit>:

void _exit (int status)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff ffe7 	bl	8003fd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004002:	e7fe      	b.n	8004002 <_exit+0x12>

08004004 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e00a      	b.n	800402c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004016:	f3af 8000 	nop.w
 800401a:	4601      	mov	r1, r0
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	60ba      	str	r2, [r7, #8]
 8004022:	b2ca      	uxtb	r2, r1
 8004024:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	3301      	adds	r3, #1
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	429a      	cmp	r2, r3
 8004032:	dbf0      	blt.n	8004016 <_read+0x12>
  }

  return len;
 8004034:	687b      	ldr	r3, [r7, #4]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b086      	sub	sp, #24
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	e009      	b.n	8004064 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	60ba      	str	r2, [r7, #8]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	3301      	adds	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	429a      	cmp	r2, r3
 800406a:	dbf1      	blt.n	8004050 <_write+0x12>
  }
  return len;
 800406c:	687b      	ldr	r3, [r7, #4]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <_close>:

int _close(int file)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800407e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800409e:	605a      	str	r2, [r3, #4]
  return 0;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <_isatty>:

int _isatty(int file)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80040b6:	2301      	movs	r3, #1
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040e8:	4a14      	ldr	r2, [pc, #80]	; (800413c <_sbrk+0x5c>)
 80040ea:	4b15      	ldr	r3, [pc, #84]	; (8004140 <_sbrk+0x60>)
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040f4:	4b13      	ldr	r3, [pc, #76]	; (8004144 <_sbrk+0x64>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d102      	bne.n	8004102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040fc:	4b11      	ldr	r3, [pc, #68]	; (8004144 <_sbrk+0x64>)
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <_sbrk+0x68>)
 8004100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004102:	4b10      	ldr	r3, [pc, #64]	; (8004144 <_sbrk+0x64>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4413      	add	r3, r2
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	429a      	cmp	r2, r3
 800410e:	d207      	bcs.n	8004120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004110:	f00b fd74 	bl	800fbfc <__errno>
 8004114:	4603      	mov	r3, r0
 8004116:	220c      	movs	r2, #12
 8004118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800411a:	f04f 33ff 	mov.w	r3, #4294967295
 800411e:	e009      	b.n	8004134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004120:	4b08      	ldr	r3, [pc, #32]	; (8004144 <_sbrk+0x64>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004126:	4b07      	ldr	r3, [pc, #28]	; (8004144 <_sbrk+0x64>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	4a05      	ldr	r2, [pc, #20]	; (8004144 <_sbrk+0x64>)
 8004130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004132:	68fb      	ldr	r3, [r7, #12]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20020000 	.word	0x20020000
 8004140:	00000400 	.word	0x00000400
 8004144:	20002b38 	.word	0x20002b38
 8004148:	200068a8 	.word	0x200068a8

0800414c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004150:	4b06      	ldr	r3, [pc, #24]	; (800416c <SystemInit+0x20>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	4a05      	ldr	r2, [pc, #20]	; (800416c <SystemInit+0x20>)
 8004158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800415c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004160:	bf00      	nop
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	e000ed00 	.word	0xe000ed00

08004170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004174:	480d      	ldr	r0, [pc, #52]	; (80041ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004176:	490e      	ldr	r1, [pc, #56]	; (80041b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004178:	4a0e      	ldr	r2, [pc, #56]	; (80041b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800417a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800417c:	e002      	b.n	8004184 <LoopCopyDataInit>

0800417e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800417e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004182:	3304      	adds	r3, #4

08004184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004188:	d3f9      	bcc.n	800417e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800418a:	4a0b      	ldr	r2, [pc, #44]	; (80041b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800418c:	4c0b      	ldr	r4, [pc, #44]	; (80041bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800418e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004190:	e001      	b.n	8004196 <LoopFillZerobss>

08004192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004194:	3204      	adds	r2, #4

08004196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004198:	d3fb      	bcc.n	8004192 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800419a:	f7ff ffd7 	bl	800414c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800419e:	f00b fd33 	bl	800fc08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041a2:	f7fd f9cb 	bl	800153c <main>
  bx  lr    
 80041a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80041a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041b0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80041b4:	080158e0 	.word	0x080158e0
  ldr r2, =_sbss
 80041b8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80041bc:	200068a4 	.word	0x200068a4

080041c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041c0:	e7fe      	b.n	80041c0 <ADC_IRQHandler>
	...

080041c4 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	887a      	ldrh	r2, [r7, #2]
 80041e2:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a3a      	ldr	r2, [r7, #32]
 80041e8:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041ee:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	75fb      	strb	r3, [r7, #23]
	/*
	 *
	 * ACCELEROMETER
	 *
	 */
	uint8_t chipID=2;
 8004200:	2302      	movs	r3, #2
 8004202:	75bb      	strb	r3, [r7, #22]
		}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		HAL_Delay(200);
	}*/
	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6858      	ldr	r0, [r3, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	899b      	ldrh	r3, [r3, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	4619      	mov	r1, r3
 8004210:	f002 fff2 	bl	80071f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004214:	2001      	movs	r0, #1
 8004216:	f001 feb9 	bl	8005f8c <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6858      	ldr	r0, [r3, #4]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	899b      	ldrh	r3, [r3, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	4619      	mov	r1, r3
 8004226:	f002 ffe7 	bl	80071f8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800422a:	2032      	movs	r0, #50	; 0x32
 800422c:	f001 feae 	bl	8005f8c <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8004230:	22b6      	movs	r2, #182	; 0xb6
 8004232:	217e      	movs	r1, #126	; 0x7e
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f95b 	bl	80044f0 <BMI088_WriteAccRegister>
 800423a:	4603      	mov	r3, r0
 800423c:	461a      	mov	r2, r3
 800423e:	7dfb      	ldrb	r3, [r7, #23]
 8004240:	4413      	add	r3, r2
 8004242:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8004244:	2032      	movs	r0, #50	; 0x32
 8004246:	f001 fea1 	bl	8005f8c <HAL_Delay>

	/* Check chip ID */
	chipID=2;
 800424a:	2302      	movs	r3, #2
 800424c:	75bb      	strb	r3, [r7, #22]

	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 800424e:	f107 0316 	add.w	r3, r7, #22
 8004252:	461a      	mov	r2, r3
 8004254:	2100      	movs	r1, #0
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f8d0 	bl	80043fc <BMI088_ReadAccRegister>
 800425c:	4603      	mov	r3, r0
 800425e:	461a      	mov	r2, r3
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	4413      	add	r3, r2
 8004264:	75fb      	strb	r3, [r7, #23]

	/*HAL_Delay(10);
	//status += BMI088_ReadAccRegister(imu, 0x02, &chipID); //0x02 ACC_ERR_REG return 0xFF ->fatal error
	status += BMI088_ReadAccRegister(imu, 0x02, &chipID);*/

	HAL_Delay(10);
 8004266:	200a      	movs	r0, #10
 8004268:	f001 fe90 	bl	8005f8c <HAL_Delay>

	/* Configure accelerometer  */

	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA9); /* (0xA8 no oversampling, ODR = 100 Hz, BW = 40 Hz), 200 Hz no oversampling 0xA9, 0x99 200Hz OSR2  */
 800426c:	22a9      	movs	r2, #169	; 0xa9
 800426e:	2140      	movs	r1, #64	; 0x40
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f93d 	bl	80044f0 <BMI088_WriteAccRegister>
 8004276:	4603      	mov	r3, r0
 8004278:	461a      	mov	r2, r3
 800427a:	7dfb      	ldrb	r3, [r7, #23]
 800427c:	4413      	add	r3, r2
 800427e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004280:	200a      	movs	r0, #10
 8004282:	f001 fe83 	bl	8005f8c <HAL_Delay>


	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 8004286:	2200      	movs	r2, #0
 8004288:	2141      	movs	r1, #65	; 0x41
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f930 	bl	80044f0 <BMI088_WriteAccRegister>
 8004290:	4603      	mov	r3, r0
 8004292:	461a      	mov	r2, r3
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	4413      	add	r3, r2
 8004298:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800429a:	200a      	movs	r0, #10
 800429c:	f001 fe76 	bl	8005f8c <HAL_Delay>


	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 80042a0:	220a      	movs	r2, #10
 80042a2:	2153      	movs	r1, #83	; 0x53
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f923 	bl	80044f0 <BMI088_WriteAccRegister>
 80042aa:	4603      	mov	r3, r0
 80042ac:	461a      	mov	r2, r3
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
 80042b0:	4413      	add	r3, r2
 80042b2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80042b4:	200a      	movs	r0, #10
 80042b6:	f001 fe69 	bl	8005f8c <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);//ACC INT -> INT1
 80042ba:	2204      	movs	r2, #4
 80042bc:	2158      	movs	r1, #88	; 0x58
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f916 	bl	80044f0 <BMI088_WriteAccRegister>
 80042c4:	4603      	mov	r3, r0
 80042c6:	461a      	mov	r2, r3
 80042c8:	7dfb      	ldrb	r3, [r7, #23]
 80042ca:	4413      	add	r3, r2
 80042cc:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(10);
 80042ce:	200a      	movs	r0, #10
 80042d0:	f001 fe5c 	bl	8005f8c <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 80042d4:	2200      	movs	r2, #0
 80042d6:	217c      	movs	r1, #124	; 0x7c
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f909 	bl	80044f0 <BMI088_WriteAccRegister>
 80042de:	4603      	mov	r3, r0
 80042e0:	461a      	mov	r2, r3
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
 80042e4:	4413      	add	r3, r2
 80042e6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80042e8:	200a      	movs	r0, #10
 80042ea:	f001 fe4f 	bl	8005f8c <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 80042ee:	2204      	movs	r2, #4
 80042f0:	217d      	movs	r1, #125	; 0x7d
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f8fc 	bl	80044f0 <BMI088_WriteAccRegister>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	7dfb      	ldrb	r3, [r7, #23]
 80042fe:	4413      	add	r3, r2
 8004300:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004302:	200a      	movs	r0, #10
 8004304:	f001 fe42 	bl	8005f8c <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2), 9.81 g-constant, 32768 normalize raw data, 2^(<0x41>+1)*1.5, <0x41> is the acc range register */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4a3a      	ldr	r2, [pc, #232]	; (80043f4 <BMI088_Init+0x230>)
 800430c:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2292      	movs	r2, #146	; 0x92
 8004312:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6898      	ldr	r0, [r3, #8]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	89db      	ldrh	r3, [r3, #14]
 800431c:	2201      	movs	r2, #1
 800431e:	4619      	mov	r1, r3
 8004320:	f002 ff6a 	bl	80071f8 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8004324:	22b6      	movs	r2, #182	; 0xb6
 8004326:	2114      	movs	r1, #20
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f91b 	bl	8004564 <BMI088_WriteGyrRegister>
 800432e:	4603      	mov	r3, r0
 8004330:	461a      	mov	r2, r3
 8004332:	7dfb      	ldrb	r3, [r7, #23]
 8004334:	4413      	add	r3, r2
 8004336:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 8004338:	20fa      	movs	r0, #250	; 0xfa
 800433a:	f001 fe27 	bl	8005f8c <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 800433e:	f107 0316 	add.w	r3, r7, #22
 8004342:	461a      	mov	r2, r3
 8004344:	2100      	movs	r1, #0
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f896 	bl	8004478 <BMI088_ReadGyrRegister>
 800434c:	4603      	mov	r3, r0
 800434e:	461a      	mov	r2, r3
 8004350:	7dfb      	ldrb	r3, [r7, #23]
 8004352:	4413      	add	r3, r2
 8004354:	75fb      	strb	r3, [r7, #23]

		//return 0;

	}

	HAL_Delay(10);
 8004356:	200a      	movs	r0, #10
 8004358:	f001 fe18 	bl	8005f8c <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 800435c:	2201      	movs	r2, #1
 800435e:	210f      	movs	r1, #15
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f8ff 	bl	8004564 <BMI088_WriteGyrRegister>
 8004366:	4603      	mov	r3, r0
 8004368:	461a      	mov	r2, r3
 800436a:	7dfb      	ldrb	r3, [r7, #23]
 800436c:	4413      	add	r3, r2
 800436e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004370:	200a      	movs	r0, #10
 8004372:	f001 fe0b 	bl	8005f8c <HAL_Delay>


	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* 0x07 ODR = 100 Hz, Filter bandwidth = 32 Hz, 0x06 BW = 64Hz ODR = 200 Hz, 0x04 ODR = 200Hz BW = 23Hz */
 8004376:	2206      	movs	r2, #6
 8004378:	2110      	movs	r1, #16
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f8f2 	bl	8004564 <BMI088_WriteGyrRegister>
 8004380:	4603      	mov	r3, r0
 8004382:	461a      	mov	r2, r3
 8004384:	7dfb      	ldrb	r3, [r7, #23]
 8004386:	4413      	add	r3, r2
 8004388:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800438a:	200a      	movs	r0, #10
 800438c:	f001 fdfe 	bl	8005f8c <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 8004390:	2280      	movs	r2, #128	; 0x80
 8004392:	2115      	movs	r1, #21
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f8e5 	bl	8004564 <BMI088_WriteGyrRegister>
 800439a:	4603      	mov	r3, r0
 800439c:	461a      	mov	r2, r3
 800439e:	7dfb      	ldrb	r3, [r7, #23]
 80043a0:	4413      	add	r3, r2
 80043a2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80043a4:	200a      	movs	r0, #10
 80043a6:	f001 fdf1 	bl	8005f8c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 80043aa:	2201      	movs	r2, #1
 80043ac:	2116      	movs	r1, #22
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f8d8 	bl	8004564 <BMI088_WriteGyrRegister>
 80043b4:	4603      	mov	r3, r0
 80043b6:	461a      	mov	r2, r3
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
 80043ba:	4413      	add	r3, r2
 80043bc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80043be:	200a      	movs	r0, #10
 80043c0:	f001 fde4 	bl	8005f8c <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 80043c4:	2201      	movs	r2, #1
 80043c6:	2118      	movs	r1, #24
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f8cb 	bl	8004564 <BMI088_WriteGyrRegister>
 80043ce:	4603      	mov	r3, r0
 80043d0:	461a      	mov	r2, r3
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
 80043d4:	4413      	add	r3, r2
 80043d6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80043d8:	200a      	movs	r0, #10
 80043da:	f001 fdd7 	bl	8005f8c <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) 0.017 °/s -> rad/s, 1000 the range, 32768 normalize the raw data*/
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4a05      	ldr	r2, [pc, #20]	; (80043f8 <BMI088_Init+0x234>)
 80043e2:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2282      	movs	r2, #130	; 0x82
 80043e8:	769a      	strb	r2, [r3, #26]

	return status;
 80043ea:	7dfb      	ldrb	r3, [r7, #23]

}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	3a6b70a4 	.word	0x3a6b70a4
 80043f8:	3a0ba058 	.word	0x3a0ba058

080043fc <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	460b      	mov	r3, r1
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 800440a:	7afb      	ldrb	r3, [r7, #11]
 800440c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004410:	b2db      	uxtb	r3, r3
 8004412:	753b      	strb	r3, [r7, #20]
 8004414:	2300      	movs	r3, #0
 8004416:	757b      	strb	r3, [r7, #21]
 8004418:	2300      	movs	r3, #0
 800441a:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6858      	ldr	r0, [r3, #4]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	899b      	ldrh	r3, [r3, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	4619      	mov	r1, r3
 8004428:	f002 fee6 	bl	80071f8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	f107 0210 	add.w	r2, r7, #16
 8004434:	f107 0114 	add.w	r1, r7, #20
 8004438:	f04f 33ff 	mov.w	r3, #4294967295
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	2303      	movs	r3, #3
 8004440:	f004 fd43 	bl	8008eca <HAL_SPI_TransmitReceive>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	bf0c      	ite	eq
 800444a:	2301      	moveq	r3, #1
 800444c:	2300      	movne	r3, #0
 800444e:	b2db      	uxtb	r3, r3
 8004450:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6858      	ldr	r0, [r3, #4]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	899b      	ldrh	r3, [r3, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	4619      	mov	r1, r3
 800445e:	f002 fecb 	bl	80071f8 <HAL_GPIO_WritePin>

	if (status == 1) {
 8004462:	7dfb      	ldrb	r3, [r7, #23]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d102      	bne.n	800446e <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 8004468:	7cba      	ldrb	r2, [r7, #18]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800446e:	7dfb      	ldrb	r3, [r7, #23]

}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af02      	add	r7, sp, #8
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	460b      	mov	r3, r1
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00}; //0x80
 8004486:	7afb      	ldrb	r3, [r7, #11]
 8004488:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800448c:	b2db      	uxtb	r3, r3
 800448e:	753b      	strb	r3, [r7, #20]
 8004490:	2300      	movs	r3, #0
 8004492:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6898      	ldr	r0, [r3, #8]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	89db      	ldrh	r3, [r3, #14]
 800449c:	2200      	movs	r2, #0
 800449e:	4619      	mov	r1, r3
 80044a0:	f002 feaa 	bl	80071f8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	f107 0210 	add.w	r2, r7, #16
 80044ac:	f107 0114 	add.w	r1, r7, #20
 80044b0:	f04f 33ff 	mov.w	r3, #4294967295
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	2302      	movs	r3, #2
 80044b8:	f004 fd07 	bl	8008eca <HAL_SPI_TransmitReceive>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bf0c      	ite	eq
 80044c2:	2301      	moveq	r3, #1
 80044c4:	2300      	movne	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6898      	ldr	r0, [r3, #8]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	89db      	ldrh	r3, [r3, #14]
 80044d2:	2201      	movs	r2, #1
 80044d4:	4619      	mov	r1, r3
 80044d6:	f002 fe8f 	bl	80071f8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);*/

	if (status == 1) {
 80044da:	7dfb      	ldrb	r3, [r7, #23]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d102      	bne.n	80044e6 <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 80044e0:	7c7a      	ldrb	r2, [r7, #17]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80044e6:	7dfb      	ldrb	r3, [r7, #23]

}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	70fb      	strb	r3, [r7, #3]
 80044fc:	4613      	mov	r3, r2
 80044fe:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	733b      	strb	r3, [r7, #12]
 8004504:	78bb      	ldrb	r3, [r7, #2]
 8004506:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6858      	ldr	r0, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	899b      	ldrh	r3, [r3, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	4619      	mov	r1, r3
 8004514:	f002 fe70 	bl	80071f8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	f107 010c 	add.w	r1, r7, #12
 8004520:	f04f 33ff 	mov.w	r3, #4294967295
 8004524:	2202      	movs	r2, #2
 8004526:	f004 fb94 	bl	8008c52 <HAL_SPI_Transmit>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8004538:	bf00      	nop
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f004 fe65 	bl	800920e <HAL_SPI_GetState>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d1f7      	bne.n	800453a <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6858      	ldr	r0, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	899b      	ldrh	r3, [r3, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	4619      	mov	r1, r3
 8004556:	f002 fe4f 	bl	80071f8 <HAL_GPIO_WritePin>

	return status;
 800455a:	7bfb      	ldrb	r3, [r7, #15]

}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	70fb      	strb	r3, [r7, #3]
 8004570:	4613      	mov	r3, r2
 8004572:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	733b      	strb	r3, [r7, #12]
 8004578:	78bb      	ldrb	r3, [r7, #2]
 800457a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6898      	ldr	r0, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	89db      	ldrh	r3, [r3, #14]
 8004584:	2200      	movs	r2, #0
 8004586:	4619      	mov	r1, r3
 8004588:	f002 fe36 	bl	80071f8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	f107 010c 	add.w	r1, r7, #12
 8004594:	f04f 33ff 	mov.w	r3, #4294967295
 8004598:	2202      	movs	r2, #2
 800459a:	f004 fb5a 	bl	8008c52 <HAL_SPI_Transmit>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80045ac:	bf00      	nop
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f004 fe2b 	bl	800920e <HAL_SPI_GetState>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d1f7      	bne.n	80045ae <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6898      	ldr	r0, [r3, #8]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	89db      	ldrh	r3, [r3, #14]
 80045c6:	2201      	movs	r2, #1
 80045c8:	4619      	mov	r1, r3
 80045ca:	f002 fe15 	bl	80071f8 <HAL_GPIO_WritePin>

	return status;
 80045ce:	7bfb      	ldrb	r3, [r7, #15]

}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	; 0x28
 80045dc:	af02      	add	r7, sp, #8
 80045de:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 80045e0:	4a36      	ldr	r2, [pc, #216]	; (80046bc <BMI088_ReadAccelerometer+0xe4>)
 80045e2:	f107 0310 	add.w	r3, r7, #16
 80045e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045ea:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6858      	ldr	r0, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	899b      	ldrh	r3, [r3, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	4619      	mov	r1, r3
 80045fa:	f002 fdfd 	bl	80071f8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	f107 0208 	add.w	r2, r7, #8
 8004606:	f107 0110 	add.w	r1, r7, #16
 800460a:	f04f 33ff 	mov.w	r3, #4294967295
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2308      	movs	r3, #8
 8004612:	f004 fc5a 	bl	8008eca <HAL_SPI_TransmitReceive>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf0c      	ite	eq
 800461c:	2301      	moveq	r3, #1
 800461e:	2300      	movne	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6858      	ldr	r0, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	899b      	ldrh	r3, [r3, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	4619      	mov	r1, r3
 8004630:	f002 fde2 	bl	80071f8 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 8004634:	7afb      	ldrb	r3, [r7, #11]
 8004636:	021b      	lsls	r3, r3, #8
 8004638:	b21a      	sxth	r2, r3
 800463a:	7abb      	ldrb	r3, [r7, #10]
 800463c:	b21b      	sxth	r3, r3
 800463e:	4313      	orrs	r3, r2
 8004640:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 8004642:	7b7b      	ldrb	r3, [r7, #13]
 8004644:	021b      	lsls	r3, r3, #8
 8004646:	b21a      	sxth	r2, r3
 8004648:	7b3b      	ldrb	r3, [r7, #12]
 800464a:	b21b      	sxth	r3, r3
 800464c:	4313      	orrs	r3, r2
 800464e:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	b21a      	sxth	r2, r3
 8004656:	7bbb      	ldrb	r3, [r7, #14]
 8004658:	b21b      	sxth	r3, r3
 800465a:	4313      	orrs	r3, r2
 800465c:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004664:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004680:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004684:	ee07 3a90 	vmov	s15, r3
 8004688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800468c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800469c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80046a0:	ee07 3a90 	vmov	s15, r3
 80046a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	return status;
 80046b2:	7ffb      	ldrb	r3, [r7, #31]

}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3720      	adds	r7, #32
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	08015054 	.word	0x08015054

080046c0 <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	; 0x28
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 80046c8:	4a38      	ldr	r2, [pc, #224]	; (80047ac <BMI088_ReadGyroscope+0xec>)
 80046ca:	f107 0310 	add.w	r3, r7, #16
 80046ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046d2:	6018      	str	r0, [r3, #0]
 80046d4:	3304      	adds	r3, #4
 80046d6:	8019      	strh	r1, [r3, #0]
 80046d8:	3302      	adds	r3, #2
 80046da:	0c0a      	lsrs	r2, r1, #16
 80046dc:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6898      	ldr	r0, [r3, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	89db      	ldrh	r3, [r3, #14]
 80046e6:	2200      	movs	r2, #0
 80046e8:	4619      	mov	r1, r3
 80046ea:	f002 fd85 	bl	80071f8 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	f107 0208 	add.w	r2, r7, #8
 80046f6:	f107 0110 	add.w	r1, r7, #16
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	2307      	movs	r3, #7
 8004702:	f004 fbe2 	bl	8008eca <HAL_SPI_TransmitReceive>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6898      	ldr	r0, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	89db      	ldrh	r3, [r3, #14]
 800471c:	2201      	movs	r2, #1
 800471e:	4619      	mov	r1, r3
 8004720:	f002 fd6a 	bl	80071f8 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 8004724:	7abb      	ldrb	r3, [r7, #10]
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	b21a      	sxth	r2, r3
 800472a:	7a7b      	ldrb	r3, [r7, #9]
 800472c:	b21b      	sxth	r3, r3
 800472e:	4313      	orrs	r3, r2
 8004730:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 8004732:	7b3b      	ldrb	r3, [r7, #12]
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	b21a      	sxth	r2, r3
 8004738:	7afb      	ldrb	r3, [r7, #11]
 800473a:	b21b      	sxth	r3, r3
 800473c:	4313      	orrs	r3, r2
 800473e:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 8004740:	7bbb      	ldrb	r3, [r7, #14]
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	b21a      	sxth	r2, r3
 8004746:	7b7b      	ldrb	r3, [r7, #13]
 8004748:	b21b      	sxth	r3, r3
 800474a:	4313      	orrs	r3, r2
 800474c:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;//-0.0000661263;//-0.000220318;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004754:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004758:	ee07 3a90 	vmov	s15, r3
 800475c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;//-0.000491353;//-0.001161367;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004770:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004774:	ee07 3a90 	vmov	s15, r3
 8004778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800477c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;//-0.002349043;//-0.002582031;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800478c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004790:	ee07 3a90 	vmov	s15, r3
 8004794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	//own code line
	//if(status == 1) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	return status;
 80047a2:	7ffb      	ldrb	r3, [r7, #31]

}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3720      	adds	r7, #32
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	0801505c 	.word	0x0801505c

080047b0 <BMM150_Init>:
HAL_StatusTypeDef	BMM150_SoftReset(BMM150 *bmm);
HAL_StatusTypeDef	BMM150_ReadByte(BMM150 *bmm, uint8_t regAddr, uint8_t *data);
HAL_StatusTypeDef	BMM150_WriteByte(BMM150 *bmm, uint8_t regAddr, uint8_t data);
HAL_StatusTypeDef	BMM150_ReadMultiBytes(BMM150 *bmm, uint8_t regAddr, uint8_t *data, uint8_t len);

HAL_StatusTypeDef    BMM150_Init(BMM150 *bmm){
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b092      	sub	sp, #72	; 0x48
 80047b4:	af04      	add	r7, sp, #16
 80047b6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t chip_id;
	uint8_t pwr_ctrl_on = 0b0000001;
 80047b8:	2301      	movs	r3, #1
 80047ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t opmode = 0x00;
 80047be:	2300      	movs	r3, #0
 80047c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	float magz_p;
	float magz_n;
	BMM150_trim_data trim_debug;

	//bring up from suspend mode to sleep mode
	HAL_I2C_Mem_Write(bmm->hi2c_handle, BMM150_ADDR << 1, BMM_PWR_CTRL_ADDR, I2C_MEMADD_SIZE_8BIT, &pwr_ctrl_on, 1, 100);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	2364      	movs	r3, #100	; 0x64
 80047ca:	9302      	str	r3, [sp, #8]
 80047cc:	2301      	movs	r3, #1
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	2301      	movs	r3, #1
 80047d8:	224b      	movs	r2, #75	; 0x4b
 80047da:	2120      	movs	r1, #32
 80047dc:	f002 fe9c 	bl	8007518 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80047e0:	200a      	movs	r0, #10
 80047e2:	f001 fbd3 	bl	8005f8c <HAL_Delay>
	// Read CHIP_ID byte
	rslt = BMM150_ReadByte(bmm, BMM150_CHIP_ID_ADDR, &chip_id);
 80047e6:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80047ea:	461a      	mov	r2, r3
 80047ec:	2140      	movs	r1, #64	; 0x40
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fdfa 	bl	80053e8 <BMM150_ReadByte>
 80047f4:	4603      	mov	r3, r0
 80047f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (chip_id != 0x32) {

		//	return 0;

		}
	HAL_Delay(10);
 80047fa:	200a      	movs	r0, #10
 80047fc:	f001 fbc6 	bl	8005f8c <HAL_Delay>
	BMM150_Get_TrimData(bmm, &trim_debug);
 8004800:	f107 030c 	add.w	r3, r7, #12
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f9cc 	bl	8004ba4 <BMM150_Get_TrimData>
	HAL_Delay(10);
 800480c:	200a      	movs	r0, #10
 800480e:	f001 fbbd 	bl	8005f8c <HAL_Delay>
//	0x4C reg bit <1:2> advanced self test, bit <3:5> data rate, bit <6:7> opmode, bit <8> normal self test
//	1. set sleep mode, opmode 11 is sleep
	BMM150_Set_OpMode(bmm, 0x06);
 8004812:	2106      	movs	r1, #6
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f8fc 	bl	8004a12 <BMM150_Set_OpMode>
//	disable x,y axis, 0x4E
	rslt = BMM150_ReadByte(bmm, 0x4E, &debug);
 800481a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800481e:	461a      	mov	r2, r3
 8004820:	214e      	movs	r1, #78	; 0x4e
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fde0 	bl	80053e8 <BMM150_ReadByte>
 8004828:	4603      	mov	r3, r0
 800482a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	debug = debug | 0x18;
 800482e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004832:	f043 0318 	orr.w	r3, r3, #24
 8004836:	b2db      	uxtb	r3, r3
 8004838:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	HAL_Delay(1);
 800483c:	2001      	movs	r0, #1
 800483e:	f001 fba5 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_WriteByte(bmm, 0x4E, debug);
 8004842:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004846:	461a      	mov	r2, r3
 8004848:	214e      	movs	r1, #78	; 0x4e
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fe04 	bl	8005458 <BMM150_WriteByte>
 8004850:	4603      	mov	r3, r0
 8004852:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	HAL_Delay(1);
 8004856:	2001      	movs	r0, #1
 8004858:	f001 fb98 	bl	8005f8c <HAL_Delay>
//	set Z repetitions
	rslt = BMM150_WriteByte(bmm, 0x52, 0x0F);
 800485c:	220f      	movs	r2, #15
 800485e:	2152      	movs	r1, #82	; 0x52
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fdf9 	bl	8005458 <BMM150_WriteByte>
 8004866:	4603      	mov	r3, r0
 8004868:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	HAL_Delay(1);
 800486c:	2001      	movs	r0, #1
 800486e:	f001 fb8d 	bl	8005f8c <HAL_Delay>
//	enable positive advanced self test current, 0x4C reg 11 <1:2> bit(1->8 bit) -> positive test current
	BMM150_Set_OpMode(bmm, 0xC6);
 8004872:	21c6      	movs	r1, #198	; 0xc6
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f8cc 	bl	8004a12 <BMM150_Set_OpMode>
	HAL_Delay(1);
 800487a:	2001      	movs	r0, #1
 800487c:	f001 fb86 	bl	8005f8c <HAL_Delay>
//	set force mode, readout Z and R channel, after measurement is finished
	BMM150_Set_OpMode(bmm, 0xC2);
 8004880:	21c2      	movs	r1, #194	; 0xc2
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f8c5 	bl	8004a12 <BMM150_Set_OpMode>
	HAL_Delay(10);
 8004888:	200a      	movs	r0, #10
 800488a:	f001 fb7f 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadMultiBytes(bmm, 0x46,  &debug_array, 4);
 800488e:	f107 021c 	add.w	r2, r7, #28
 8004892:	2304      	movs	r3, #4
 8004894:	2146      	movs	r1, #70	; 0x46
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fdc0 	bl	800541c <BMM150_ReadMultiBytes>
 800489c:	4603      	mov	r3, r0
 800489e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	field_zp = (int16_t)((debug_array[1] << 8) + (debug_array[0] ));
 80048a2:	7f7b      	ldrb	r3, [r7, #29]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	7f3b      	ldrb	r3, [r7, #28]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	4413      	add	r3, r2
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	86bb      	strh	r3, [r7, #52]	; 0x34
	field_zp = field_zp/2;
 80048b4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80048b8:	0fda      	lsrs	r2, r3, #31
 80048ba:	4413      	add	r3, r2
 80048bc:	105b      	asrs	r3, r3, #1
 80048be:	86bb      	strh	r3, [r7, #52]	; 0x34
	Rhall = (uint16_t)((debug_array[3] << 6) + (debug_array[2] >> 2));
 80048c0:	7ffb      	ldrb	r3, [r7, #31]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	019b      	lsls	r3, r3, #6
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	7fbb      	ldrb	r3, [r7, #30]
 80048ca:	089b      	lsrs	r3, r3, #2
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	4413      	add	r3, r2
 80048d2:	867b      	strh	r3, [r7, #50]	; 0x32
	HAL_Delay(1);
 80048d4:	2001      	movs	r0, #1
 80048d6:	f001 fb59 	bl	8005f8c <HAL_Delay>
	magz_p = BMM150_Compensate_z(field_zp, Rhall,  &trim_debug);
 80048da:	f107 020c 	add.w	r2, r7, #12
 80048de:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80048e0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fcbb 	bl	8005260 <BMM150_Compensate_z>
 80048ea:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
//	enable negative advanced self test current, 0x4C reg 10 <1:2> bit(1->8 bit) -> negative test current
	BMM150_Set_OpMode(bmm, 0x86);
 80048ee:	2186      	movs	r1, #134	; 0x86
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f88e 	bl	8004a12 <BMM150_Set_OpMode>
	HAL_Delay(1);
 80048f6:	2001      	movs	r0, #1
 80048f8:	f001 fb48 	bl	8005f8c <HAL_Delay>
//	set force mode, readout Z and R channel, after measurement is finished
	BMM150_Set_OpMode(bmm, 0x82);
 80048fc:	2182      	movs	r1, #130	; 0x82
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f887 	bl	8004a12 <BMM150_Set_OpMode>
	HAL_Delay(10);
 8004904:	200a      	movs	r0, #10
 8004906:	f001 fb41 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadMultiBytes(bmm, 0x46,  &debug_array, 4);
 800490a:	f107 021c 	add.w	r2, r7, #28
 800490e:	2304      	movs	r3, #4
 8004910:	2146      	movs	r1, #70	; 0x46
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fd82 	bl	800541c <BMM150_ReadMultiBytes>
 8004918:	4603      	mov	r3, r0
 800491a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	field_zn = (int16_t)((debug_array[1] << 8) + (debug_array[0] ));
 800491e:	7f7b      	ldrb	r3, [r7, #29]
 8004920:	b29b      	uxth	r3, r3
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	b29a      	uxth	r2, r3
 8004926:	7f3b      	ldrb	r3, [r7, #28]
 8004928:	b29b      	uxth	r3, r3
 800492a:	4413      	add	r3, r2
 800492c:	b29b      	uxth	r3, r3
 800492e:	857b      	strh	r3, [r7, #42]	; 0x2a
	field_zn = field_zn/2;
 8004930:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004934:	0fda      	lsrs	r2, r3, #31
 8004936:	4413      	add	r3, r2
 8004938:	105b      	asrs	r3, r3, #1
 800493a:	857b      	strh	r3, [r7, #42]	; 0x2a
	Rhall = (uint16_t)((debug_array[3] << 6) + (debug_array[2] >> 2));
 800493c:	7ffb      	ldrb	r3, [r7, #31]
 800493e:	b29b      	uxth	r3, r3
 8004940:	019b      	lsls	r3, r3, #6
 8004942:	b29a      	uxth	r2, r3
 8004944:	7fbb      	ldrb	r3, [r7, #30]
 8004946:	089b      	lsrs	r3, r3, #2
 8004948:	b2db      	uxtb	r3, r3
 800494a:	b29b      	uxth	r3, r3
 800494c:	4413      	add	r3, r2
 800494e:	867b      	strh	r3, [r7, #50]	; 0x32
	HAL_Delay(1);
 8004950:	2001      	movs	r0, #1
 8004952:	f001 fb1b 	bl	8005f8c <HAL_Delay>
	magz_n = BMM150_Compensate_z(field_zn, Rhall,  &trim_debug);
 8004956:	f107 020c 	add.w	r2, r7, #12
 800495a:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800495c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fc7d 	bl	8005260 <BMM150_Compensate_z>
 8004966:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
//	disable advanced self test current, 0x4C reg 00 <1:2> bit(1->8 bit) -> normal mode
	rslt = BMM150_WriteByte(bmm, 0x4C, 0x06);
 800496a:	2206      	movs	r2, #6
 800496c:	214c      	movs	r1, #76	; 0x4c
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fd72 	bl	8005458 <BMM150_WriteByte>
 8004974:	4603      	mov	r3, r0
 8004976:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
//	calculate difference between the two compensated field values, result should be around 200 uT
//	perform soft-reset


	HAL_Delay(10);
 800497a:	200a      	movs	r0, #10
 800497c:	f001 fb06 	bl	8005f8c <HAL_Delay>
	BMM150_SoftReset(bmm);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f824 	bl	80049ce <BMM150_SoftReset>
	HAL_Delay(10);
 8004986:	200a      	movs	r0, #10
 8004988:	f001 fb00 	bl	8005f8c <HAL_Delay>
//	rslt = BMM150_ReadByte(bmm, BMM150_CHIP_ID_ADDR, &chip_id);
//	HAL_Delay(10);
//	rslt = BMM150_ReadByte(bmm, BMM_PWR_CTRL_ADDR,  &debug);

	//set operation mode normal
	BMM150_Set_OpMode(bmm, opmode);
 800498c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f83d 	bl	8004a12 <BMM150_Set_OpMode>
	HAL_Delay(10);
 8004998:	200a      	movs	r0, #10
 800499a:	f001 faf7 	bl	8005f8c <HAL_Delay>
//	HAL_Delay(10);
//	BMM150_ReadByte(bmm, BMM_PWR_CTRL_ADDR,  &debug);
//	HAL_Delay(10);
//	BMM150_ReadByte(bmm, BMM_OPMODE_REG,  &debug);
	//set ODR 20Hz
	BMM150_Set_ODR(bmm, BMM_ODR_30HZ);
 800499e:	2138      	movs	r1, #56	; 0x38
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f87b 	bl	8004a9c <BMM150_Set_ODR>
	HAL_Delay(10);
 80049a6:	200a      	movs	r0, #10
 80049a8:	f001 faf0 	bl	8005f8c <HAL_Delay>

	BMM150_Preset(bmm, 3, 6);
 80049ac:	2206      	movs	r2, #6
 80049ae:	2103      	movs	r1, #3
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fa04 	bl	8004dbe <BMM150_Preset>
	HAL_Delay(10);
 80049b6:	200a      	movs	r0, #10
 80049b8:	f001 fae8 	bl	8005f8c <HAL_Delay>

	BMM150_EN_DRDY_INT(bmm);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f84b 	bl	8004a58 <BMM150_EN_DRDY_INT>

	return rslt;
 80049c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3738      	adds	r7, #56	; 0x38
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <BMM150_SoftReset>:


HAL_StatusTypeDef	BMM150_SoftReset(BMM150 *bmm){
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b084      	sub	sp, #16
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t pwr_reg;
	rslt = BMM150_ReadByte(bmm, BMM_PWR_CTRL_ADDR,  &pwr_reg);
 80049d6:	f107 030e 	add.w	r3, r7, #14
 80049da:	461a      	mov	r2, r3
 80049dc:	214b      	movs	r1, #75	; 0x4b
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fd02 	bl	80053e8 <BMM150_ReadByte>
 80049e4:	4603      	mov	r3, r0
 80049e6:	73fb      	strb	r3, [r7, #15]
	pwr_reg = pwr_reg | 0b10000010;
 80049e8:	7bbb      	ldrb	r3, [r7, #14]
 80049ea:	f063 037d 	orn	r3, r3, #125	; 0x7d
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 80049f2:	200a      	movs	r0, #10
 80049f4:	f001 faca 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_WriteByte(bmm, BMM_PWR_CTRL_ADDR, pwr_reg);
 80049f8:	7bbb      	ldrb	r3, [r7, #14]
 80049fa:	461a      	mov	r2, r3
 80049fc:	214b      	movs	r1, #75	; 0x4b
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fd2a 	bl	8005458 <BMM150_WriteByte>
 8004a04:	4603      	mov	r3, r0
 8004a06:	73fb      	strb	r3, [r7, #15]
	return rslt;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <BMM150_Set_OpMode>:

HAL_StatusTypeDef    BMM150_Set_OpMode(BMM150 *bmm, uint8_t opmode){
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef rslt;
	uint8_t debug;

	rslt = BMM150_WriteByte(bmm, BMM_OPMODE_REG, opmode);
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	461a      	mov	r2, r3
 8004a22:	214c      	movs	r1, #76	; 0x4c
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fd17 	bl	8005458 <BMM150_WriteByte>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 8004a2e:	2001      	movs	r0, #1
 8004a30:	f001 faac 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, BMM_OPMODE_REG,  &debug);
 8004a34:	f107 030e 	add.w	r3, r7, #14
 8004a38:	461a      	mov	r2, r3
 8004a3a:	214c      	movs	r1, #76	; 0x4c
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fcd3 	bl	80053e8 <BMM150_ReadByte>
 8004a42:	4603      	mov	r3, r0
 8004a44:	73fb      	strb	r3, [r7, #15]
	bmm->opmode = opmode;
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	605a      	str	r2, [r3, #4]
	return rslt;
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <BMM150_EN_DRDY_INT>:

HAL_StatusTypeDef    BMM150_EN_DRDY_INT(BMM150 *bmm){
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t data;
	rslt = BMM150_ReadByte(bmm, BMM_DRDY_EN_REG,  &data);
 8004a60:	f107 030e 	add.w	r3, r7, #14
 8004a64:	461a      	mov	r2, r3
 8004a66:	214e      	movs	r1, #78	; 0x4e
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fcbd 	bl	80053e8 <BMM150_ReadByte>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	73fb      	strb	r3, [r7, #15]
	data = data | 0b11000000;
 8004a72:	7bbb      	ldrb	r3, [r7, #14]
 8004a74:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(1);
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	f001 fa85 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_WriteByte(bmm, BMM_DRDY_EN_REG, data);
 8004a82:	7bbb      	ldrb	r3, [r7, #14]
 8004a84:	461a      	mov	r2, r3
 8004a86:	214e      	movs	r1, #78	; 0x4e
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fce5 	bl	8005458 <BMM150_WriteByte>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <BMM150_Set_ODR>:

HAL_StatusTypeDef    BMM150_Set_ODR(BMM150 *bmm, uint8_t odr){
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef rslt;
	uint8_t op_ctrl_reg;

	rslt = BMM150_ReadByte(bmm, BMM_OPMODE_REG,  &op_ctrl_reg);
 8004aa8:	f107 030e 	add.w	r3, r7, #14
 8004aac:	461a      	mov	r2, r3
 8004aae:	214c      	movs	r1, #76	; 0x4c
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fc99 	bl	80053e8 <BMM150_ReadByte>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	73fb      	strb	r3, [r7, #15]
	op_ctrl_reg = op_ctrl_reg | odr;
 8004aba:	7bba      	ldrb	r2, [r7, #14]
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 8004ac4:	200a      	movs	r0, #10
 8004ac6:	f001 fa61 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_WriteByte(bmm, BMM_OPMODE_REG, op_ctrl_reg);
 8004aca:	7bbb      	ldrb	r3, [r7, #14]
 8004acc:	461a      	mov	r2, r3
 8004ace:	214c      	movs	r1, #76	; 0x4c
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fcc1 	bl	8005458 <BMM150_WriteByte>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	73fb      	strb	r3, [r7, #15]
	return rslt;
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <BMM150_GetRawData>:

HAL_StatusTypeDef    BMM150_GetRawData(BMM150 *bmm, int16_t *field_x, int16_t *field_y, int16_t *field_z, uint16_t *Rhall, uint8_t len){
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef rslt;
	uint8_t raw_field_data[8];
	rslt = BMM150_ReadMultiBytes(bmm, 0x42,  &raw_field_data, len);
 8004af2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004af6:	f107 0214 	add.w	r2, r7, #20
 8004afa:	2142      	movs	r1, #66	; 0x42
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fc8d 	bl	800541c <BMM150_ReadMultiBytes>
 8004b02:	4603      	mov	r3, r0
 8004b04:	77fb      	strb	r3, [r7, #31]
//	*field_x = (int16_t)((raw_field_data[1] << 5) + (raw_field_data[0] >> 3));
//	*field_y = (int16_t)((raw_field_data[3] << 5) + (raw_field_data[2] >> 3));
//	*field_z = (int16_t)((raw_field_data[5] << 7) + (raw_field_data[4] >> 1));
	*field_x = (int16_t)((raw_field_data[1] << 8) + (raw_field_data[0] ));
 8004b06:	7d7b      	ldrb	r3, [r7, #21]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	7d3b      	ldrb	r3, [r7, #20]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	b21a      	sxth	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	801a      	strh	r2, [r3, #0]
	*field_x = *field_x/8;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	da00      	bge.n	8004b28 <BMM150_GetRawData+0x44>
 8004b26:	3307      	adds	r3, #7
 8004b28:	10db      	asrs	r3, r3, #3
 8004b2a:	b21a      	sxth	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	801a      	strh	r2, [r3, #0]
	*field_y = (int16_t)((raw_field_data[3] << 8) + (raw_field_data[2] ));
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	7dbb      	ldrb	r3, [r7, #22]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	b21a      	sxth	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	801a      	strh	r2, [r3, #0]
	*field_y = *field_y/8;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	da00      	bge.n	8004b52 <BMM150_GetRawData+0x6e>
 8004b50:	3307      	adds	r3, #7
 8004b52:	10db      	asrs	r3, r3, #3
 8004b54:	b21a      	sxth	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	801a      	strh	r2, [r3, #0]
	*field_z = (int16_t)((raw_field_data[5] << 8) + (raw_field_data[4] ));
 8004b5a:	7e7b      	ldrb	r3, [r7, #25]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	021b      	lsls	r3, r3, #8
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	7e3b      	ldrb	r3, [r7, #24]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	4413      	add	r3, r2
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	b21a      	sxth	r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	801a      	strh	r2, [r3, #0]
	*field_z = *field_z/2;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b76:	0fda      	lsrs	r2, r3, #31
 8004b78:	4413      	add	r3, r2
 8004b7a:	105b      	asrs	r3, r3, #1
 8004b7c:	b21a      	sxth	r2, r3
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	801a      	strh	r2, [r3, #0]
	*Rhall = (uint16_t)((raw_field_data[7] << 6) + (raw_field_data[6] >> 2));
 8004b82:	7efb      	ldrb	r3, [r7, #27]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	019b      	lsls	r3, r3, #6
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	7ebb      	ldrb	r3, [r7, #26]
 8004b8c:	089b      	lsrs	r3, r3, #2
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	4413      	add	r3, r2
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	801a      	strh	r2, [r3, #0]
	return rslt;
 8004b9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3720      	adds	r7, #32
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <BMM150_Get_TrimData>:

HAL_StatusTypeDef    BMM150_Get_TrimData(BMM150 *bmm, BMM150_trim_data *trim){
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef rslt;
	uint8_t readout1;
	uint8_t readout2;
	//dig_x1
	rslt = BMM150_ReadByte(bmm, 0x5D,  &readout1);
 8004bae:	f107 030e 	add.w	r3, r7, #14
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	215d      	movs	r1, #93	; 0x5d
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fc16 	bl	80053e8 <BMM150_ReadByte>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	73fb      	strb	r3, [r7, #15]
	trim->dig_x1 = readout1;
 8004bc0:	7bbb      	ldrb	r3, [r7, #14]
 8004bc2:	b25a      	sxtb	r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	701a      	strb	r2, [r3, #0]
	HAL_Delay(2);
 8004bc8:	2002      	movs	r0, #2
 8004bca:	f001 f9df 	bl	8005f8c <HAL_Delay>
	//dig_y1
	rslt = BMM150_ReadByte(bmm, 0x5E,  &readout1);
 8004bce:	f107 030e 	add.w	r3, r7, #14
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	215e      	movs	r1, #94	; 0x5e
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fc06 	bl	80053e8 <BMM150_ReadByte>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	73fb      	strb	r3, [r7, #15]
	trim->dig_y1 = readout1;
 8004be0:	7bbb      	ldrb	r3, [r7, #14]
 8004be2:	b25a      	sxtb	r2, r3
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	705a      	strb	r2, [r3, #1]
	HAL_Delay(2);
 8004be8:	2002      	movs	r0, #2
 8004bea:	f001 f9cf 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x64,  &readout1);
 8004bee:	f107 030e 	add.w	r3, r7, #14
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	2164      	movs	r1, #100	; 0x64
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fbf6 	bl	80053e8 <BMM150_ReadByte>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	73fb      	strb	r3, [r7, #15]
	trim->dig_x2 = readout1;
 8004c00:	7bbb      	ldrb	r3, [r7, #14]
 8004c02:	b25a      	sxtb	r2, r3
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	709a      	strb	r2, [r3, #2]
	HAL_Delay(2);
 8004c08:	2002      	movs	r0, #2
 8004c0a:	f001 f9bf 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x65,  &readout1);
 8004c0e:	f107 030e 	add.w	r3, r7, #14
 8004c12:	461a      	mov	r2, r3
 8004c14:	2165      	movs	r1, #101	; 0x65
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fbe6 	bl	80053e8 <BMM150_ReadByte>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	73fb      	strb	r3, [r7, #15]
	trim->dig_y2 = readout1;
 8004c20:	7bbb      	ldrb	r3, [r7, #14]
 8004c22:	b25a      	sxtb	r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	70da      	strb	r2, [r3, #3]
	HAL_Delay(2);
 8004c28:	2002      	movs	r0, #2
 8004c2a:	f001 f9af 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x71,  &readout1);
 8004c2e:	f107 030e 	add.w	r3, r7, #14
 8004c32:	461a      	mov	r2, r3
 8004c34:	2171      	movs	r1, #113	; 0x71
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fbd6 	bl	80053e8 <BMM150_ReadByte>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	73fb      	strb	r3, [r7, #15]
	trim->dig_xy1 = readout1;
 8004c40:	7bba      	ldrb	r2, [r7, #14]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	731a      	strb	r2, [r3, #12]
	HAL_Delay(2);
 8004c46:	2002      	movs	r0, #2
 8004c48:	f001 f9a0 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x70,  &readout1);
 8004c4c:	f107 030e 	add.w	r3, r7, #14
 8004c50:	461a      	mov	r2, r3
 8004c52:	2170      	movs	r1, #112	; 0x70
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fbc7 	bl	80053e8 <BMM150_ReadByte>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	73fb      	strb	r3, [r7, #15]
	trim->dig_xy2 = readout1;
 8004c5e:	7bbb      	ldrb	r3, [r7, #14]
 8004c60:	b25a      	sxtb	r2, r3
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	735a      	strb	r2, [r3, #13]
	HAL_Delay(2);
 8004c66:	2002      	movs	r0, #2
 8004c68:	f001 f990 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x6A,  &readout1);
 8004c6c:	f107 030e 	add.w	r3, r7, #14
 8004c70:	461a      	mov	r2, r3
 8004c72:	216a      	movs	r1, #106	; 0x6a
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fbb7 	bl	80053e8 <BMM150_ReadByte>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 8004c7e:	2002      	movs	r0, #2
 8004c80:	f001 f984 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x6B,  &readout2);
 8004c84:	f107 030d 	add.w	r3, r7, #13
 8004c88:	461a      	mov	r2, r3
 8004c8a:	216b      	movs	r1, #107	; 0x6b
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fbab 	bl	80053e8 <BMM150_ReadByte>
 8004c92:	4603      	mov	r3, r0
 8004c94:	73fb      	strb	r3, [r7, #15]
	trim->dig_z1 = (readout2 << 8) | readout1;
 8004c96:	7b7b      	ldrb	r3, [r7, #13]
 8004c98:	021b      	lsls	r3, r3, #8
 8004c9a:	b21a      	sxth	r2, r3
 8004c9c:	7bbb      	ldrb	r3, [r7, #14]
 8004c9e:	b21b      	sxth	r3, r3
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	b21b      	sxth	r3, r3
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	809a      	strh	r2, [r3, #4]
	HAL_Delay(2);
 8004caa:	2002      	movs	r0, #2
 8004cac:	f001 f96e 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x68,  &readout1);
 8004cb0:	f107 030e 	add.w	r3, r7, #14
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2168      	movs	r1, #104	; 0x68
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fb95 	bl	80053e8 <BMM150_ReadByte>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 8004cc2:	2002      	movs	r0, #2
 8004cc4:	f001 f962 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x69,  &readout2);
 8004cc8:	f107 030d 	add.w	r3, r7, #13
 8004ccc:	461a      	mov	r2, r3
 8004cce:	2169      	movs	r1, #105	; 0x69
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fb89 	bl	80053e8 <BMM150_ReadByte>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	73fb      	strb	r3, [r7, #15]
	trim->dig_z2 = (readout2 << 8) | readout1;
 8004cda:	7b7b      	ldrb	r3, [r7, #13]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	b21a      	sxth	r2, r3
 8004ce0:	7bbb      	ldrb	r3, [r7, #14]
 8004ce2:	b21b      	sxth	r3, r3
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	b21a      	sxth	r2, r3
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	80da      	strh	r2, [r3, #6]
	HAL_Delay(2);
 8004cec:	2002      	movs	r0, #2
 8004cee:	f001 f94d 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x6E,  &readout1);
 8004cf2:	f107 030e 	add.w	r3, r7, #14
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	216e      	movs	r1, #110	; 0x6e
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fb74 	bl	80053e8 <BMM150_ReadByte>
 8004d00:	4603      	mov	r3, r0
 8004d02:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 8004d04:	2002      	movs	r0, #2
 8004d06:	f001 f941 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x6F,  &readout2);
 8004d0a:	f107 030d 	add.w	r3, r7, #13
 8004d0e:	461a      	mov	r2, r3
 8004d10:	216f      	movs	r1, #111	; 0x6f
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fb68 	bl	80053e8 <BMM150_ReadByte>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	73fb      	strb	r3, [r7, #15]
	trim->dig_z3 = (readout2 << 8) | readout1;
 8004d1c:	7b7b      	ldrb	r3, [r7, #13]
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	b21a      	sxth	r2, r3
 8004d22:	7bbb      	ldrb	r3, [r7, #14]
 8004d24:	b21b      	sxth	r3, r3
 8004d26:	4313      	orrs	r3, r2
 8004d28:	b21a      	sxth	r2, r3
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	811a      	strh	r2, [r3, #8]
	HAL_Delay(2);
 8004d2e:	2002      	movs	r0, #2
 8004d30:	f001 f92c 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x62,  &readout1);
 8004d34:	f107 030e 	add.w	r3, r7, #14
 8004d38:	461a      	mov	r2, r3
 8004d3a:	2162      	movs	r1, #98	; 0x62
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fb53 	bl	80053e8 <BMM150_ReadByte>
 8004d42:	4603      	mov	r3, r0
 8004d44:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 8004d46:	2002      	movs	r0, #2
 8004d48:	f001 f920 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x63,  &readout2);
 8004d4c:	f107 030d 	add.w	r3, r7, #13
 8004d50:	461a      	mov	r2, r3
 8004d52:	2163      	movs	r1, #99	; 0x63
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 fb47 	bl	80053e8 <BMM150_ReadByte>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	73fb      	strb	r3, [r7, #15]
	trim->dig_z4 = (readout2 << 8) | readout1;
 8004d5e:	7b7b      	ldrb	r3, [r7, #13]
 8004d60:	021b      	lsls	r3, r3, #8
 8004d62:	b21a      	sxth	r2, r3
 8004d64:	7bbb      	ldrb	r3, [r7, #14]
 8004d66:	b21b      	sxth	r3, r3
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	b21a      	sxth	r2, r3
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	815a      	strh	r2, [r3, #10]
	HAL_Delay(2);
 8004d70:	2002      	movs	r0, #2
 8004d72:	f001 f90b 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x6C,  &readout1);
 8004d76:	f107 030e 	add.w	r3, r7, #14
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	216c      	movs	r1, #108	; 0x6c
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fb32 	bl	80053e8 <BMM150_ReadByte>
 8004d84:	4603      	mov	r3, r0
 8004d86:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 8004d88:	2002      	movs	r0, #2
 8004d8a:	f001 f8ff 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_ReadByte(bmm, 0x6D,  &readout2);
 8004d8e:	f107 030d 	add.w	r3, r7, #13
 8004d92:	461a      	mov	r2, r3
 8004d94:	216d      	movs	r1, #109	; 0x6d
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fb26 	bl	80053e8 <BMM150_ReadByte>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	73fb      	strb	r3, [r7, #15]
	trim->dig_xyz1 = (readout2 << 8) | readout1;
 8004da0:	7b7b      	ldrb	r3, [r7, #13]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	b21a      	sxth	r2, r3
 8004da6:	7bbb      	ldrb	r3, [r7, #14]
 8004da8:	b21b      	sxth	r3, r3
 8004daa:	4313      	orrs	r3, r2
 8004dac:	b21b      	sxth	r3, r3
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	81da      	strh	r2, [r3, #14]

	return rslt;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <BMM150_Preset>:
	*Rhall = (uint16_t)((raw_field_data[7] << 6) + (raw_field_data[6] >> 2));
	BMM150_ReadByte(bmm, 0x4C,  &debug); //0x4C reg value 0x02 tehát a Force Mode-ban van, miért? nem olvasom ki a data regisztereket
	return rslt;
}

HAL_StatusTypeDef    BMM150_Preset(BMM150 *bmm, uint8_t nXY, uint8_t nZ){
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	70fb      	strb	r3, [r7, #3]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef rslt;
	uint8_t REPXY = (nXY-1)/2;
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	0fda      	lsrs	r2, r3, #31
 8004dd4:	4413      	add	r3, r2
 8004dd6:	105b      	asrs	r3, r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
	uint8_t REPZ  = (nZ-1);
 8004dda:	78bb      	ldrb	r3, [r7, #2]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	73bb      	strb	r3, [r7, #14]
	//uint8_t debug;

	rslt = BMM150_WriteByte(bmm, BMM_REPXY_REG, REPXY); // nXY = 9 for 100HZ nXY = 1+2*(REPXY)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	461a      	mov	r2, r3
 8004de4:	2151      	movs	r1, #81	; 0x51
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fb36 	bl	8005458 <BMM150_WriteByte>
 8004dec:	4603      	mov	r3, r0
 8004dee:	737b      	strb	r3, [r7, #13]
	HAL_Delay(10);
 8004df0:	200a      	movs	r0, #10
 8004df2:	f001 f8cb 	bl	8005f8c <HAL_Delay>
	rslt = BMM150_WriteByte(bmm, BMM_REPZ_REG, REPZ); // nZ = 15 for 100HZ nZ = 1+(REPXY)
 8004df6:	7bbb      	ldrb	r3, [r7, #14]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	2152      	movs	r1, #82	; 0x52
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fb2b 	bl	8005458 <BMM150_WriteByte>
 8004e02:	4603      	mov	r3, r0
 8004e04:	737b      	strb	r3, [r7, #13]

	return rslt;
 8004e06:	7b7b      	ldrb	r3, [r7, #13]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <BMM150_Compensate_x>:


float    BMM150_Compensate_x(int16_t raw_mag_data_x, uint16_t raw_data_r,  BMM150_trim_data *trim){
 8004e10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	4603      	mov	r3, r0
 8004e1a:	603a      	str	r2, [r7, #0]
 8004e1c:	80fb      	strh	r3, [r7, #6]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	80bb      	strh	r3, [r7, #4]
	float compensated_X = 0;
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]

	if (raw_mag_data_x != (-4096)) {
 8004e28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e2c:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8004e30:	f000 80e8 	beq.w	8005004 <BMM150_Compensate_x+0x1f4>
		if ((raw_data_r != 0) && (trim->dig_xyz1 != 0)) {
 8004e34:	88bb      	ldrh	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 80df 	beq.w	8004ffa <BMM150_Compensate_x+0x1ea>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	89db      	ldrh	r3, [r3, #14]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 80da 	beq.w	8004ffa <BMM150_Compensate_x+0x1ea>
			compensated_X = ((((float)trim->dig_xyz1)*16384.0/(float)raw_data_r) - 16384.0);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	89db      	ldrh	r3, [r3, #14]
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e52:	ee17 0a90 	vmov	r0, s15
 8004e56:	f7fb fb77 	bl	8000548 <__aeabi_f2d>
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	4b6f      	ldr	r3, [pc, #444]	; (800501c <BMM150_Compensate_x+0x20c>)
 8004e60:	f7fb fbca 	bl	80005f8 <__aeabi_dmul>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4614      	mov	r4, r2
 8004e6a:	461d      	mov	r5, r3
 8004e6c:	88bb      	ldrh	r3, [r7, #4]
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e76:	ee17 0a90 	vmov	r0, s15
 8004e7a:	f7fb fb65 	bl	8000548 <__aeabi_f2d>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4620      	mov	r0, r4
 8004e84:	4629      	mov	r1, r5
 8004e86:	f7fb fce1 	bl	800084c <__aeabi_ddiv>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4619      	mov	r1, r3
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	4b61      	ldr	r3, [pc, #388]	; (800501c <BMM150_Compensate_x+0x20c>)
 8004e98:	f7fb f9f6 	bl	8000288 <__aeabi_dsub>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	f7fb fea0 	bl	8000be8 <__aeabi_d2f>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	60fb      	str	r3, [r7, #12]
		}
		else {
			compensated_X = 0.0f;
			return compensated_X;
		}
		compensated_X = ((((float)raw_mag_data_x * ((((((float)(trim->dig_xy2)) *(compensated_X*compensated_X /268435456.0) + compensated_X * ((float)(trim->dig_xy1))
 8004eac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eb8:	ee17 0a90 	vmov	r0, s15
 8004ebc:	f7fb fb44 	bl	8000548 <__aeabi_f2d>
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	460d      	mov	r5, r1
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ed2:	ee17 0a90 	vmov	r0, s15
 8004ed6:	f7fb fb37 	bl	8000548 <__aeabi_f2d>
 8004eda:	4680      	mov	r8, r0
 8004edc:	4689      	mov	r9, r1
 8004ede:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ee2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004ee6:	ee17 0a90 	vmov	r0, s15
 8004eea:	f7fb fb2d 	bl	8000548 <__aeabi_f2d>
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	4b4b      	ldr	r3, [pc, #300]	; (8005020 <BMM150_Compensate_x+0x210>)
 8004ef4:	f7fb fcaa 	bl	800084c <__aeabi_ddiv>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4640      	mov	r0, r8
 8004efe:	4649      	mov	r1, r9
 8004f00:	f7fb fb7a 	bl	80005f8 <__aeabi_dmul>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4690      	mov	r8, r2
 8004f0a:	4699      	mov	r9, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	7b1b      	ldrb	r3, [r3, #12]
 8004f10:	ee07 3a90 	vmov	s15, r3
 8004f14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f18:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f20:	ee17 0a90 	vmov	r0, s15
 8004f24:	f7fb fb10 	bl	8000548 <__aeabi_f2d>
		/ 16384.0)) + 256.0) *(((float)(trim->dig_x2)) + 160.0)))/ 8192.0)+ (((float)(trim->dig_x1)) *8.0)) / 16.0;
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	4b3b      	ldr	r3, [pc, #236]	; (800501c <BMM150_Compensate_x+0x20c>)
 8004f2e:	f7fb fc8d 	bl	800084c <__aeabi_ddiv>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
		compensated_X = ((((float)raw_mag_data_x * ((((((float)(trim->dig_xy2)) *(compensated_X*compensated_X /268435456.0) + compensated_X * ((float)(trim->dig_xy1))
 8004f36:	4640      	mov	r0, r8
 8004f38:	4649      	mov	r1, r9
 8004f3a:	f7fb f9a7 	bl	800028c <__adddf3>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4610      	mov	r0, r2
 8004f44:	4619      	mov	r1, r3
		/ 16384.0)) + 256.0) *(((float)(trim->dig_x2)) + 160.0)))/ 8192.0)+ (((float)(trim->dig_x1)) *8.0)) / 16.0;
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	4b36      	ldr	r3, [pc, #216]	; (8005024 <BMM150_Compensate_x+0x214>)
 8004f4c:	f7fb f99e 	bl	800028c <__adddf3>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4690      	mov	r8, r2
 8004f56:	4699      	mov	r9, r3
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f66:	ee17 0a90 	vmov	r0, s15
 8004f6a:	f7fb faed 	bl	8000548 <__aeabi_f2d>
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	4b2d      	ldr	r3, [pc, #180]	; (8005028 <BMM150_Compensate_x+0x218>)
 8004f74:	f7fb f98a 	bl	800028c <__adddf3>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	4649      	mov	r1, r9
 8004f80:	f7fb fb3a 	bl	80005f8 <__aeabi_dmul>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
		compensated_X = ((((float)raw_mag_data_x * ((((((float)(trim->dig_xy2)) *(compensated_X*compensated_X /268435456.0) + compensated_X * ((float)(trim->dig_xy1))
 8004f88:	4620      	mov	r0, r4
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	f7fb fb34 	bl	80005f8 <__aeabi_dmul>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4610      	mov	r0, r2
 8004f96:	4619      	mov	r1, r3
		/ 16384.0)) + 256.0) *(((float)(trim->dig_x2)) + 160.0)))/ 8192.0)+ (((float)(trim->dig_x1)) *8.0)) / 16.0;
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	4b23      	ldr	r3, [pc, #140]	; (800502c <BMM150_Compensate_x+0x21c>)
 8004f9e:	f7fb fc55 	bl	800084c <__aeabi_ddiv>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4614      	mov	r4, r2
 8004fa8:	461d      	mov	r5, r3
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	f993 3000 	ldrsb.w	r3, [r3]
 8004fb0:	ee07 3a90 	vmov	s15, r3
 8004fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fb8:	ee17 0a90 	vmov	r0, s15
 8004fbc:	f7fb fac4 	bl	8000548 <__aeabi_f2d>
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <BMM150_Compensate_x+0x220>)
 8004fc6:	f7fb fb17 	bl	80005f8 <__aeabi_dmul>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4620      	mov	r0, r4
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	f7fb f95b 	bl	800028c <__adddf3>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4610      	mov	r0, r2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	4b14      	ldr	r3, [pc, #80]	; (8005034 <BMM150_Compensate_x+0x224>)
 8004fe4:	f7fb fc32 	bl	800084c <__aeabi_ddiv>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
		compensated_X = ((((float)raw_mag_data_x * ((((((float)(trim->dig_xy2)) *(compensated_X*compensated_X /268435456.0) + compensated_X * ((float)(trim->dig_xy1))
 8004fec:	4610      	mov	r0, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f7fb fdfa 	bl	8000be8 <__aeabi_d2f>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e007      	b.n	800500a <BMM150_Compensate_x+0x1fa>
			compensated_X = 0.0f;
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]
			return compensated_X;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	e003      	b.n	800500c <BMM150_Compensate_x+0x1fc>
	}
	else {
		compensated_X = 0.0f;
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
	}
	return compensated_X;
 800500a:	68fb      	ldr	r3, [r7, #12]
}
 800500c:	ee07 3a90 	vmov	s15, r3
 8005010:	eeb0 0a67 	vmov.f32	s0, s15
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800501c:	40d00000 	.word	0x40d00000
 8005020:	41b00000 	.word	0x41b00000
 8005024:	40700000 	.word	0x40700000
 8005028:	40640000 	.word	0x40640000
 800502c:	40c00000 	.word	0x40c00000
 8005030:	40200000 	.word	0x40200000
 8005034:	40300000 	.word	0x40300000

08005038 <BMM150_Compensate_y>:

float   BMM150_Compensate_y(int16_t raw_mag_data_y, uint16_t raw_data_r,  BMM150_trim_data *trim){
 8005038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	4603      	mov	r3, r0
 8005042:	603a      	str	r2, [r7, #0]
 8005044:	80fb      	strh	r3, [r7, #6]
 8005046:	460b      	mov	r3, r1
 8005048:	80bb      	strh	r3, [r7, #4]
	float compensated_Y = 0;
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]

	if (raw_mag_data_y != (-4096)) {
 8005050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005054:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8005058:	f000 80e8 	beq.w	800522c <BMM150_Compensate_y+0x1f4>
		if ((raw_data_r != 0)&& (trim->dig_xyz1 != 0)) {
 800505c:	88bb      	ldrh	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 80df 	beq.w	8005222 <BMM150_Compensate_y+0x1ea>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	89db      	ldrh	r3, [r3, #14]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 80da 	beq.w	8005222 <BMM150_Compensate_y+0x1ea>
			compensated_Y = ((((float)(trim->dig_xyz1))* 16384.0/(float)raw_data_r) - 16384.0);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	89db      	ldrh	r3, [r3, #14]
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507a:	ee17 0a90 	vmov	r0, s15
 800507e:	f7fb fa63 	bl	8000548 <__aeabi_f2d>
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	4b6f      	ldr	r3, [pc, #444]	; (8005244 <BMM150_Compensate_y+0x20c>)
 8005088:	f7fb fab6 	bl	80005f8 <__aeabi_dmul>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4614      	mov	r4, r2
 8005092:	461d      	mov	r5, r3
 8005094:	88bb      	ldrh	r3, [r7, #4]
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509e:	ee17 0a90 	vmov	r0, s15
 80050a2:	f7fb fa51 	bl	8000548 <__aeabi_f2d>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	4620      	mov	r0, r4
 80050ac:	4629      	mov	r1, r5
 80050ae:	f7fb fbcd 	bl	800084c <__aeabi_ddiv>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4610      	mov	r0, r2
 80050b8:	4619      	mov	r1, r3
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	4b61      	ldr	r3, [pc, #388]	; (8005244 <BMM150_Compensate_y+0x20c>)
 80050c0:	f7fb f8e2 	bl	8000288 <__aeabi_dsub>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4610      	mov	r0, r2
 80050ca:	4619      	mov	r1, r3
 80050cc:	f7fb fd8c 	bl	8000be8 <__aeabi_d2f>
 80050d0:	4603      	mov	r3, r0
 80050d2:	60fb      	str	r3, [r7, #12]
		}
		else {
			compensated_Y = 0.0f;
			return compensated_Y;
		}
		compensated_Y = ((((float)raw_mag_data_y * ((((((float)(trim->dig_xy2)) *(compensated_Y*compensated_Y/ 268435456.0) +compensated_Y
 80050d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050d8:	ee07 3a90 	vmov	s15, r3
 80050dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050e0:	ee17 0a90 	vmov	r0, s15
 80050e4:	f7fb fa30 	bl	8000548 <__aeabi_f2d>
 80050e8:	4604      	mov	r4, r0
 80050ea:	460d      	mov	r5, r1
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	f993 300d 	ldrsb.w	r3, [r3, #13]
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050fa:	ee17 0a90 	vmov	r0, s15
 80050fe:	f7fb fa23 	bl	8000548 <__aeabi_f2d>
 8005102:	4680      	mov	r8, r0
 8005104:	4689      	mov	r9, r1
 8005106:	edd7 7a03 	vldr	s15, [r7, #12]
 800510a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800510e:	ee17 0a90 	vmov	r0, s15
 8005112:	f7fb fa19 	bl	8000548 <__aeabi_f2d>
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	4b4b      	ldr	r3, [pc, #300]	; (8005248 <BMM150_Compensate_y+0x210>)
 800511c:	f7fb fb96 	bl	800084c <__aeabi_ddiv>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4640      	mov	r0, r8
 8005126:	4649      	mov	r1, r9
 8005128:	f7fb fa66 	bl	80005f8 <__aeabi_dmul>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4690      	mov	r8, r2
 8005132:	4699      	mov	r9, r3
		* ((float)(trim->dig_xy1))/ 16384.0)) +256.0) *(((float)(trim->dig_y2)) + 160.0)))/ 8192.0) +(((float)(trim->dig_y1)) * 8.0))/ 16.0;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	7b1b      	ldrb	r3, [r3, #12]
 8005138:	ee07 3a90 	vmov	s15, r3
 800513c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005140:	edd7 7a03 	vldr	s15, [r7, #12]
 8005144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005148:	ee17 0a90 	vmov	r0, s15
 800514c:	f7fb f9fc 	bl	8000548 <__aeabi_f2d>
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	4b3b      	ldr	r3, [pc, #236]	; (8005244 <BMM150_Compensate_y+0x20c>)
 8005156:	f7fb fb79 	bl	800084c <__aeabi_ddiv>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
		compensated_Y = ((((float)raw_mag_data_y * ((((((float)(trim->dig_xy2)) *(compensated_Y*compensated_Y/ 268435456.0) +compensated_Y
 800515e:	4640      	mov	r0, r8
 8005160:	4649      	mov	r1, r9
 8005162:	f7fb f893 	bl	800028c <__adddf3>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4610      	mov	r0, r2
 800516c:	4619      	mov	r1, r3
		* ((float)(trim->dig_xy1))/ 16384.0)) +256.0) *(((float)(trim->dig_y2)) + 160.0)))/ 8192.0) +(((float)(trim->dig_y1)) * 8.0))/ 16.0;
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	4b36      	ldr	r3, [pc, #216]	; (800524c <BMM150_Compensate_y+0x214>)
 8005174:	f7fb f88a 	bl	800028c <__adddf3>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4690      	mov	r8, r2
 800517e:	4699      	mov	r9, r3
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800518e:	ee17 0a90 	vmov	r0, s15
 8005192:	f7fb f9d9 	bl	8000548 <__aeabi_f2d>
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	4b2d      	ldr	r3, [pc, #180]	; (8005250 <BMM150_Compensate_y+0x218>)
 800519c:	f7fb f876 	bl	800028c <__adddf3>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4640      	mov	r0, r8
 80051a6:	4649      	mov	r1, r9
 80051a8:	f7fb fa26 	bl	80005f8 <__aeabi_dmul>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
		compensated_Y = ((((float)raw_mag_data_y * ((((((float)(trim->dig_xy2)) *(compensated_Y*compensated_Y/ 268435456.0) +compensated_Y
 80051b0:	4620      	mov	r0, r4
 80051b2:	4629      	mov	r1, r5
 80051b4:	f7fb fa20 	bl	80005f8 <__aeabi_dmul>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4610      	mov	r0, r2
 80051be:	4619      	mov	r1, r3
		* ((float)(trim->dig_xy1))/ 16384.0)) +256.0) *(((float)(trim->dig_y2)) + 160.0)))/ 8192.0) +(((float)(trim->dig_y1)) * 8.0))/ 16.0;
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	4b23      	ldr	r3, [pc, #140]	; (8005254 <BMM150_Compensate_y+0x21c>)
 80051c6:	f7fb fb41 	bl	800084c <__aeabi_ddiv>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4614      	mov	r4, r2
 80051d0:	461d      	mov	r5, r3
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051e0:	ee17 0a90 	vmov	r0, s15
 80051e4:	f7fb f9b0 	bl	8000548 <__aeabi_f2d>
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <BMM150_Compensate_y+0x220>)
 80051ee:	f7fb fa03 	bl	80005f8 <__aeabi_dmul>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4620      	mov	r0, r4
 80051f8:	4629      	mov	r1, r5
 80051fa:	f7fb f847 	bl	800028c <__adddf3>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4610      	mov	r0, r2
 8005204:	4619      	mov	r1, r3
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	4b14      	ldr	r3, [pc, #80]	; (800525c <BMM150_Compensate_y+0x224>)
 800520c:	f7fb fb1e 	bl	800084c <__aeabi_ddiv>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
		compensated_Y = ((((float)raw_mag_data_y * ((((((float)(trim->dig_xy2)) *(compensated_Y*compensated_Y/ 268435456.0) +compensated_Y
 8005214:	4610      	mov	r0, r2
 8005216:	4619      	mov	r1, r3
 8005218:	f7fb fce6 	bl	8000be8 <__aeabi_d2f>
 800521c:	4603      	mov	r3, r0
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e007      	b.n	8005232 <BMM150_Compensate_y+0x1fa>
			compensated_Y = 0.0f;
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]
			return compensated_Y;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	e003      	b.n	8005234 <BMM150_Compensate_y+0x1fc>
	}
	else {
		compensated_Y = 0.0f;
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
	}
	return compensated_Y;
 8005232:	68fb      	ldr	r3, [r7, #12]
}
 8005234:	ee07 3a90 	vmov	s15, r3
 8005238:	eeb0 0a67 	vmov.f32	s0, s15
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005244:	40d00000 	.word	0x40d00000
 8005248:	41b00000 	.word	0x41b00000
 800524c:	40700000 	.word	0x40700000
 8005250:	40640000 	.word	0x40640000
 8005254:	40c00000 	.word	0x40c00000
 8005258:	40200000 	.word	0x40200000
 800525c:	40300000 	.word	0x40300000

08005260 <BMM150_Compensate_z>:
float    BMM150_Compensate_z(int16_t raw_mag_data_z, uint16_t raw_data_r,  BMM150_trim_data *trim){
 8005260:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	4603      	mov	r3, r0
 800526a:	603a      	str	r2, [r7, #0]
 800526c:	80fb      	strh	r3, [r7, #6]
 800526e:	460b      	mov	r3, r1
 8005270:	80bb      	strh	r3, [r7, #4]
	float compensated_Z = 0;
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]
	if (raw_mag_data_z != (-16384)) {
 8005278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800527c:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8005280:	f000 809f 	beq.w	80053c2 <BMM150_Compensate_z+0x162>
		if ((trim->dig_z2 != 0)&& (trim->dig_z1 != 0)&& (trim->dig_xyz1 != 0)&& (raw_data_r != 0)) {
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 809c 	beq.w	80053c8 <BMM150_Compensate_z+0x168>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	889b      	ldrh	r3, [r3, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 8097 	beq.w	80053c8 <BMM150_Compensate_z+0x168>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	89db      	ldrh	r3, [r3, #14]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 8092 	beq.w	80053c8 <BMM150_Compensate_z+0x168>
 80052a4:	88bb      	ldrh	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 808e 	beq.w	80053c8 <BMM150_Compensate_z+0x168>
			compensated_Z = ((((((float)raw_mag_data_z)-((float)trim->dig_z4)) * 131072.0)-(((float)trim->dig_z3)*(((float)raw_data_r)
 80052ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052b0:	ee07 3a90 	vmov	s15, r3
 80052b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052ca:	ee17 0a90 	vmov	r0, s15
 80052ce:	f7fb f93b 	bl	8000548 <__aeabi_f2d>
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80052da:	f7fb f98d 	bl	80005f8 <__aeabi_dmul>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4614      	mov	r4, r2
 80052e4:	461d      	mov	r5, r3
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80052ec:	ee07 3a90 	vmov	s15, r3
 80052f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052f4:	88bb      	ldrh	r3, [r7, #4]
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
			-((float)trim->dig_xyz1))))/((((float)trim->dig_z2)+((float)trim->dig_z1)*((float)raw_data_r) /32768.0) * 4.0)) / 16.0;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	89db      	ldrh	r3, [r3, #14]
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530a:	ee76 7ae7 	vsub.f32	s15, s13, s15
			compensated_Z = ((((((float)raw_mag_data_z)-((float)trim->dig_z4)) * 131072.0)-(((float)trim->dig_z3)*(((float)raw_data_r)
 800530e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005312:	ee17 0a90 	vmov	r0, s15
 8005316:	f7fb f917 	bl	8000548 <__aeabi_f2d>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4620      	mov	r0, r4
 8005320:	4629      	mov	r1, r5
 8005322:	f7fa ffb1 	bl	8000288 <__aeabi_dsub>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4690      	mov	r8, r2
 800532c:	4699      	mov	r9, r3
			-((float)trim->dig_xyz1))))/((((float)trim->dig_z2)+((float)trim->dig_z1)*((float)raw_data_r) /32768.0) * 4.0)) / 16.0;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005334:	ee07 3a90 	vmov	s15, r3
 8005338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800533c:	ee17 0a90 	vmov	r0, s15
 8005340:	f7fb f902 	bl	8000548 <__aeabi_f2d>
 8005344:	4604      	mov	r4, r0
 8005346:	460d      	mov	r5, r1
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	889b      	ldrh	r3, [r3, #4]
 800534c:	ee07 3a90 	vmov	s15, r3
 8005350:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005354:	88bb      	ldrh	r3, [r7, #4]
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005362:	ee17 0a90 	vmov	r0, s15
 8005366:	f7fb f8ef 	bl	8000548 <__aeabi_f2d>
 800536a:	f04f 0200 	mov.w	r2, #0
 800536e:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <BMM150_Compensate_z+0x17c>)
 8005370:	f7fb fa6c 	bl	800084c <__aeabi_ddiv>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4620      	mov	r0, r4
 800537a:	4629      	mov	r1, r5
 800537c:	f7fa ff86 	bl	800028c <__adddf3>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4610      	mov	r0, r2
 8005386:	4619      	mov	r1, r3
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	4b14      	ldr	r3, [pc, #80]	; (80053e0 <BMM150_Compensate_z+0x180>)
 800538e:	f7fb f933 	bl	80005f8 <__aeabi_dmul>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4640      	mov	r0, r8
 8005398:	4649      	mov	r1, r9
 800539a:	f7fb fa57 	bl	800084c <__aeabi_ddiv>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	4b0e      	ldr	r3, [pc, #56]	; (80053e4 <BMM150_Compensate_z+0x184>)
 80053ac:	f7fb fa4e 	bl	800084c <__aeabi_ddiv>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
			compensated_Z = ((((((float)raw_mag_data_z)-((float)trim->dig_z4)) * 131072.0)-(((float)trim->dig_z3)*(((float)raw_data_r)
 80053b4:	4610      	mov	r0, r2
 80053b6:	4619      	mov	r1, r3
 80053b8:	f7fb fc16 	bl	8000be8 <__aeabi_d2f>
 80053bc:	4603      	mov	r3, r0
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	e002      	b.n	80053c8 <BMM150_Compensate_z+0x168>
		}
	}
	else {
		compensated_Z = 0.0f;
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]
	}
	return (compensated_Z);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	ee07 3a90 	vmov	s15, r3
}
 80053ce:	eeb0 0a67 	vmov.f32	s0, s15
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80053da:	bf00      	nop
 80053dc:	40e00000 	.word	0x40e00000
 80053e0:	40100000 	.word	0x40100000
 80053e4:	40300000 	.word	0x40300000

080053e8 <BMM150_ReadByte>:



HAL_StatusTypeDef	BMM150_ReadByte(BMM150 *bmm, uint8_t regAddr, uint8_t *data){
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af04      	add	r7, sp, #16
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	460b      	mov	r3, r1
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(bmm->hi2c_handle, BMM150_ADDR << 1, regAddr, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	7afb      	ldrb	r3, [r7, #11]
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	2364      	movs	r3, #100	; 0x64
 8005400:	9302      	str	r3, [sp, #8]
 8005402:	2301      	movs	r3, #1
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	2301      	movs	r3, #1
 800540c:	2120      	movs	r1, #32
 800540e:	f002 f97d 	bl	800770c <HAL_I2C_Mem_Read>
 8005412:	4603      	mov	r3, r0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <BMM150_ReadMultiBytes>:
HAL_StatusTypeDef	BMM150_ReadMultiBytes(BMM150 *bmm, uint8_t regAddr, uint8_t *data, uint8_t len){
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af04      	add	r7, sp, #16
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	607a      	str	r2, [r7, #4]
 8005426:	461a      	mov	r2, r3
 8005428:	460b      	mov	r3, r1
 800542a:	72fb      	strb	r3, [r7, #11]
 800542c:	4613      	mov	r3, r2
 800542e:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(bmm->hi2c_handle, BMM150_ADDR << 1, regAddr, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	7afb      	ldrb	r3, [r7, #11]
 8005436:	b29a      	uxth	r2, r3
 8005438:	7abb      	ldrb	r3, [r7, #10]
 800543a:	b29b      	uxth	r3, r3
 800543c:	2164      	movs	r1, #100	; 0x64
 800543e:	9102      	str	r1, [sp, #8]
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	2301      	movs	r3, #1
 8005448:	2120      	movs	r1, #32
 800544a:	f002 f95f 	bl	800770c <HAL_I2C_Mem_Read>
 800544e:	4603      	mov	r3, r0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <BMM150_WriteByte>:
HAL_StatusTypeDef	BMM150_WriteByte(BMM150 *bmm, uint8_t regAddr, uint8_t data){
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af04      	add	r7, sp, #16
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	70fb      	strb	r3, [r7, #3]
 8005464:	4613      	mov	r3, r2
 8005466:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write(bmm->hi2c_handle, BMM150_ADDR << 1, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	b29a      	uxth	r2, r3
 8005470:	2364      	movs	r3, #100	; 0x64
 8005472:	9302      	str	r3, [sp, #8]
 8005474:	2301      	movs	r3, #1
 8005476:	9301      	str	r3, [sp, #4]
 8005478:	1cbb      	adds	r3, r7, #2
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	2301      	movs	r3, #1
 800547e:	2120      	movs	r1, #32
 8005480:	f002 f84a 	bl	8007518 <HAL_I2C_Mem_Write>
 8005484:	4603      	mov	r3, r0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <BMP388_Init>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_Init(BMP388_HandleTypeDef *bmp){
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t chip_id;

	// Read CHIP_ID byte
	rslt = BMP388_ReadBytes(bmp, CHIP_ID, &chip_id, 1);
 8005496:	f107 020e 	add.w	r2, r7, #14
 800549a:	2301      	movs	r3, #1
 800549c:	2100      	movs	r1, #0
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fc07 	bl	8005cb2 <BMP388_ReadBytes>
 80054a4:	4603      	mov	r3, r0
 80054a6:	73fb      	strb	r3, [r7, #15]
	if(rslt == HAL_OK && chip_id == BMP388_CHIP_ID){
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d12a      	bne.n	8005504 <BMP388_Init+0x76>
 80054ae:	7bbb      	ldrb	r3, [r7, #14]
 80054b0:	2b50      	cmp	r3, #80	; 0x50
 80054b2:	d127      	bne.n	8005504 <BMP388_Init+0x76>
		// using softreset command
		rslt = BMP388_SoftReset(bmp);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f961 	bl	800577c <BMP388_SoftReset>
 80054ba:	4603      	mov	r3, r0
 80054bc:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d11d      	bne.n	8005500 <BMP388_Init+0x72>
			// get calibration data
			rslt = BMP388_GetCalibData(bmp);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f999 	bl	80057fc <BMP388_GetCalibData>
 80054ca:	4603      	mov	r3, r0
 80054cc:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 80054ce:	bf00      	nop
		}
	}
	else{
		return rslt;
	}
	uint8_t pwr_ctrl = BMP388_PWR_CTRL_PRESS_ON | BMP388_PWR_CTRL_TEMP_ON | BMP388_PWR_CTRL_MODE_NORMAL;
 80054d0:	2333      	movs	r3, #51	; 0x33
 80054d2:	737b      	strb	r3, [r7, #13]

	uint8_t oversampling = bmp->_oversampling;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	791b      	ldrb	r3, [r3, #4]
 80054d8:	733b      	strb	r3, [r7, #12]
	uint8_t odr = bmp->_odr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	799b      	ldrb	r3, [r3, #6]
 80054de:	72fb      	strb	r3, [r7, #11]
	uint8_t filtercoeff = bmp->_filtercoeff;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	795b      	ldrb	r3, [r3, #5]
 80054e4:	72bb      	strb	r3, [r7, #10]



	// Set OSR register
	rslt = BMP388_WriteBytes(bmp, OSR, &oversampling, 1);
 80054e6:	f107 020c 	add.w	r2, r7, #12
 80054ea:	2301      	movs	r3, #1
 80054ec:	211c      	movs	r1, #28
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fbfd 	bl	8005cee <BMP388_WriteBytes>
 80054f4:	4603      	mov	r3, r0
 80054f6:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d006      	beq.n	800550c <BMP388_Init+0x7e>
 80054fe:	e003      	b.n	8005508 <BMP388_Init+0x7a>
			return rslt;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	e03b      	b.n	800557c <BMP388_Init+0xee>
		return rslt;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	e039      	b.n	800557c <BMP388_Init+0xee>
		return rslt;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	e037      	b.n	800557c <BMP388_Init+0xee>
	}
	// Set ODR register
	rslt = BMP388_WriteBytes(bmp, ODR, &odr, 1);
 800550c:	f107 020b 	add.w	r2, r7, #11
 8005510:	2301      	movs	r3, #1
 8005512:	211d      	movs	r1, #29
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fbea 	bl	8005cee <BMP388_WriteBytes>
 800551a:	4603      	mov	r3, r0
 800551c:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <BMP388_Init+0x9a>
		return rslt;
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	e029      	b.n	800557c <BMP388_Init+0xee>
	}
	// Set CONFIG register
	rslt = BMP388_WriteBytes(bmp, CONFIG, &filtercoeff, 1);
 8005528:	f107 020a 	add.w	r2, r7, #10
 800552c:	2301      	movs	r3, #1
 800552e:	211f      	movs	r1, #31
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fbdc 	bl	8005cee <BMP388_WriteBytes>
 8005536:	4603      	mov	r3, r0
 8005538:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <BMP388_Init+0xb6>
		return rslt;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	e01b      	b.n	800557c <BMP388_Init+0xee>
	}
	// Set PWR_CTRL register
	rslt = BMP388_WriteBytes(bmp, PWR_CTRL, &pwr_ctrl, 1);
 8005544:	f107 020d 	add.w	r2, r7, #13
 8005548:	2301      	movs	r3, #1
 800554a:	211b      	movs	r1, #27
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fbce 	bl	8005cee <BMP388_WriteBytes>
 8005552:	4603      	mov	r3, r0
 8005554:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <BMP388_Init+0xd2>
		return rslt;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	e00d      	b.n	800557c <BMP388_Init+0xee>
	}

	rslt = BMP388_WriteBytes(bmp, INT_CTRL, 0x40, 1);
 8005560:	2301      	movs	r3, #1
 8005562:	2240      	movs	r2, #64	; 0x40
 8005564:	2119      	movs	r1, #25
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fbc1 	bl	8005cee <BMP388_WriteBytes>
 800556c:	4603      	mov	r3, r0
 800556e:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <BMP388_Init+0xec>
		return rslt;
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	e000      	b.n	800557c <BMP388_Init+0xee>
	}

	return rslt;
 800557a:	7bfb      	ldrb	r3, [r7, #15]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <BMP388_SetTempOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetTempOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	2b05      	cmp	r3, #5
 8005594:	d901      	bls.n	800559a <BMP388_SetTempOS+0x16>
		return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e00e      	b.n	80055b8 <BMP388_SetTempOS+0x34>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11000111) | (oversample << 3); //& clear the temp OS bits and the | set the temp OS reg
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	791b      	ldrb	r3, [r3, #4]
 800559e:	b25b      	sxtb	r3, r3
 80055a0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80055a4:	b25a      	sxtb	r2, r3
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	b25b      	sxtb	r3, r3
 80055ac:	4313      	orrs	r3, r2
 80055ae:	b25b      	sxtb	r3, r3
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <BMP388_SetPressOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetPressOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 80055d0:	78fb      	ldrb	r3, [r7, #3]
 80055d2:	2b05      	cmp	r3, #5
 80055d4:	d901      	bls.n	80055da <BMP388_SetPressOS+0x16>
		return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e00d      	b.n	80055f6 <BMP388_SetPressOS+0x32>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11111000) | oversample; //& clear the press OS bits and the | set the press OS reg
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	791b      	ldrb	r3, [r3, #4]
 80055de:	b25b      	sxtb	r3, r3
 80055e0:	f023 0307 	bic.w	r3, r3, #7
 80055e4:	b25a      	sxtb	r2, r3
 80055e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	b25b      	sxtb	r3, r3
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <BMP388_SetIIRFilterCoeff>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong filter coefficient
 */
HAL_StatusTypeDef BMP388_SetIIRFilterCoeff(BMP388_HandleTypeDef *bmp, uint8_t filtercoeff){
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	460b      	mov	r3, r1
 800560c:	70fb      	strb	r3, [r7, #3]
	if(filtercoeff > BMP3_IIR_FILTER_COEFF_127){
 800560e:	78fb      	ldrb	r3, [r7, #3]
 8005610:	2b07      	cmp	r3, #7
 8005612:	d901      	bls.n	8005618 <BMP388_SetIIRFilterCoeff+0x16>
		return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e005      	b.n	8005624 <BMP388_SetIIRFilterCoeff+0x22>
	}
	bmp->_filtercoeff = filtercoeff << 1;
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	b2da      	uxtb	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <BMP388_SetOutputDataRate>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetOutputDataRate(BMP388_HandleTypeDef *bmp, uint8_t odr){
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
	if(odr > BMP3_ODR_0_001_HZ){
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	2b11      	cmp	r3, #17
 8005640:	d901      	bls.n	8005646 <BMP388_SetOutputDataRate+0x16>
		return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e003      	b.n	800564e <BMP388_SetOutputDataRate+0x1e>
	}
	bmp->_odr = odr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	78fa      	ldrb	r2, [r7, #3]
 800564a:	719a      	strb	r2, [r3, #6]
	return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <BMP388_ReadRawPressTempTime>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadRawPressTempTime(BMP388_HandleTypeDef *bmp, uint32_t *raw_pressure, uint32_t *raw_temperature, uint32_t *time){
 800565a:	b580      	push	{r7, lr}
 800565c:	b088      	sub	sp, #32
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	603b      	str	r3, [r7, #0]
	}*/

	uint8_t raw_data[11]; //registers in order 0x04 - 0x06 press data, 0x07 - 0x09 temp data, 0x0A and 0x0B reserved, 0x0C - 0x0E time data -> 11 byte
	// Get raw data for pressure and temperature
	//rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 11);
	rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 6);
 8005668:	f107 0214 	add.w	r2, r7, #20
 800566c:	2306      	movs	r3, #6
 800566e:	2104      	movs	r1, #4
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 fb1e 	bl	8005cb2 <BMP388_ReadBytes>
 8005676:	4603      	mov	r3, r0
 8005678:	77fb      	strb	r3, [r7, #31]
	if(rslt != HAL_OK){
 800567a:	7ffb      	ldrb	r3, [r7, #31]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <BMP388_ReadRawPressTempTime+0x2a>
		return rslt;
 8005680:	7ffb      	ldrb	r3, [r7, #31]
 8005682:	e012      	b.n	80056aa <BMP388_ReadRawPressTempTime+0x50>
//	uint32_t data_xlsb;
//	uint32_t data_lsb;
//	uint32_t data_msb;

	// Parsing pressure data
	*raw_pressure = (uint32_t)raw_data[2] << 16 | (uint32_t)raw_data[1] << 8 | (uint32_t)raw_data[0];
 8005684:	7dbb      	ldrb	r3, [r7, #22]
 8005686:	041a      	lsls	r2, r3, #16
 8005688:	7d7b      	ldrb	r3, [r7, #21]
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	4313      	orrs	r3, r2
 800568e:	7d3a      	ldrb	r2, [r7, #20]
 8005690:	431a      	orrs	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	601a      	str	r2, [r3, #0]

	// Parsing temperature data
	*raw_temperature = (uint32_t)raw_data[5] << 16 | (uint32_t)raw_data[4] << 8 | (uint32_t)raw_data[3];
 8005696:	7e7b      	ldrb	r3, [r7, #25]
 8005698:	041a      	lsls	r2, r3, #16
 800569a:	7e3b      	ldrb	r3, [r7, #24]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	4313      	orrs	r3, r2
 80056a0:	7dfa      	ldrb	r2, [r7, #23]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	601a      	str	r2, [r3, #0]

	// Parsing time bytes
	//*time = (uint32_t)raw_data[10] << 16 | (uint32_t)raw_data[9] << 8 | (uint32_t)raw_data[8];


	return rslt;
 80056a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3720      	adds	r7, #32
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <BMP388_CompensateRawPressTemp>:
 *	@param[out]	temperature		: Pointer to the variable that contain temperature.
 *
 *  @return none
 */
void BMP388_CompensateRawPressTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_pressure, uint32_t raw_temperature,
									  	  	  	  	  	  	  float *pressure, float *temperature){
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b086      	sub	sp, #24
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	603b      	str	r3, [r7, #0]
	float temp;
	float press;

	BMP388_CompensateTemp(bmp, raw_temperature, &temp);
 80056c0:	f107 0314 	add.w	r3, r7, #20
 80056c4:	461a      	mov	r2, r3
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f9eb 	bl	8005aa4 <BMP388_CompensateTemp>
	BMP388_CompensatePress(bmp, temp, raw_pressure, &press);
 80056ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80056d2:	f107 0310 	add.w	r3, r7, #16
 80056d6:	461a      	mov	r2, r3
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	eeb0 0a67 	vmov.f32	s0, s15
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 fa16 	bl	8005b10 <BMP388_CompensatePress>

	*pressure = press;
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	601a      	str	r2, [r3, #0]
	*temperature = temp;
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	601a      	str	r2, [r3, #0]
}
 80056f0:	bf00      	nop
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <BMP388_FindAltitude>:
 *	@param[in] ground_pressure	: Pressure at ground
 *  @param[in] pressure			: Pressure that measured at flight.
 *
 *  @return Altitude
 */
float BMP388_FindAltitude(float ground_pressure, float pressure){
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8005702:	edc7 0a00 	vstr	s1, [r7]

	// Note that using the equation from wikipedia can give bad results
	// at high altitude. See this thread for more information:
	//  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

	return 44330.0 * (1.0 - pow(pressure / ground_pressure, 0.1903));
 8005706:	ed97 7a00 	vldr	s14, [r7]
 800570a:	edd7 7a01 	vldr	s15, [r7, #4]
 800570e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005712:	ee16 0a90 	vmov	r0, s13
 8005716:	f7fa ff17 	bl	8000548 <__aeabi_f2d>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8005768 <BMP388_FindAltitude+0x70>
 8005722:	ec43 2b10 	vmov	d0, r2, r3
 8005726:	f00d fa07 	bl	8012b38 <pow>
 800572a:	ec53 2b10 	vmov	r2, r3, d0
 800572e:	f04f 0000 	mov.w	r0, #0
 8005732:	4911      	ldr	r1, [pc, #68]	; (8005778 <BMP388_FindAltitude+0x80>)
 8005734:	f7fa fda8 	bl	8000288 <__aeabi_dsub>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4610      	mov	r0, r2
 800573e:	4619      	mov	r1, r3
 8005740:	a30b      	add	r3, pc, #44	; (adr r3, 8005770 <BMP388_FindAltitude+0x78>)
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f7fa ff57 	bl	80005f8 <__aeabi_dmul>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4610      	mov	r0, r2
 8005750:	4619      	mov	r1, r3
 8005752:	f7fb fa49 	bl	8000be8 <__aeabi_d2f>
 8005756:	4603      	mov	r3, r0
 8005758:	ee07 3a90 	vmov	s15, r3
}
 800575c:	eeb0 0a67 	vmov.f32	s0, s15
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	1a36e2eb 	.word	0x1a36e2eb
 800576c:	3fc85bc0 	.word	0x3fc85bc0
 8005770:	00000000 	.word	0x00000000
 8005774:	40e5a540 	.word	0x40e5a540
 8005778:	3ff00000 	.word	0x3ff00000

0800577c <BMP388_SoftReset>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_SoftReset(BMP388_HandleTypeDef *bmp){
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	uint8_t rst_cmnd = BMP388_SOFTRESET;
 8005784:	23b6      	movs	r3, #182	; 0xb6
 8005786:	73bb      	strb	r3, [r7, #14]
    uint8_t cmd_err_status;

	HAL_StatusTypeDef rslt;

	// Reading STATUS reg to understand that the BMP388 is ready to receive command
	rslt = BMP388_ReadBytes(bmp, STATUS, &cmd_rdy_status, 1);
 8005788:	f107 020d 	add.w	r2, r7, #13
 800578c:	2301      	movs	r3, #1
 800578e:	2103      	movs	r1, #3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fa8e 	bl	8005cb2 <BMP388_ReadBytes>
 8005796:	4603      	mov	r3, r0
 8005798:	73fb      	strb	r3, [r7, #15]
	if((rslt == HAL_OK) && (cmd_rdy_status & BMP388_CMD_RDY)){
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d128      	bne.n	80057f2 <BMP388_SoftReset+0x76>
 80057a0:	7b7b      	ldrb	r3, [r7, #13]
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d023      	beq.n	80057f2 <BMP388_SoftReset+0x76>
		// Writing SOFTRESET command to CMD reg
		rslt = BMP388_WriteBytes(bmp, CMD, &rst_cmnd, 1);
 80057aa:	f107 020e 	add.w	r2, r7, #14
 80057ae:	2301      	movs	r3, #1
 80057b0:	217e      	movs	r1, #126	; 0x7e
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fa9b 	bl	8005cee <BMP388_WriteBytes>
 80057b8:	4603      	mov	r3, r0
 80057ba:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d115      	bne.n	80057ee <BMP388_SoftReset+0x72>
			// 2 ms pause then check ERR reg
			HAL_Delay(2);
 80057c2:	2002      	movs	r0, #2
 80057c4:	f000 fbe2 	bl	8005f8c <HAL_Delay>
			rslt = BMP388_ReadBytes(bmp, ERR_REG, &cmd_err_status, 1);
 80057c8:	f107 020c 	add.w	r2, r7, #12
 80057cc:	2301      	movs	r3, #1
 80057ce:	2102      	movs	r1, #2
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fa6e 	bl	8005cb2 <BMP388_ReadBytes>
 80057d6:	4603      	mov	r3, r0
 80057d8:	73fb      	strb	r3, [r7, #15]
			if((cmd_err_status & CMD) || (rslt != HAL_OK)){
 80057da:	7b3b      	ldrb	r3, [r7, #12]
 80057dc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <BMP388_SoftReset+0x6e>
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <BMP388_SoftReset+0x76>
				return rslt;
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	e002      	b.n	80057f4 <BMP388_SoftReset+0x78>
			}
		}
		else{
			return rslt;
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	e000      	b.n	80057f4 <BMP388_SoftReset+0x78>
		}
	}

	return rslt;
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <BMP388_GetCalibData>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_GetCalibData(BMP388_HandleTypeDef *bmp){
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b090      	sub	sp, #64	; 0x40
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t calib_buff[BMP388_CALIBDATA_LEN] = {0};
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	f107 0310 	add.w	r3, r7, #16
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	605a      	str	r2, [r3, #4]
 8005812:	609a      	str	r2, [r3, #8]
 8005814:	60da      	str	r2, [r3, #12]
 8005816:	741a      	strb	r2, [r3, #16]
	int8_t		raw_par_p8;
	int16_t		raw_par_p9;
	int8_t		raw_par_p10;
	int8_t		raw_par_p11;

	rslt = BMP388_ReadBytes(bmp, CALIB_DATA, calib_buff, BMP388_CALIBDATA_LEN);
 8005818:	f107 020c 	add.w	r2, r7, #12
 800581c:	2315      	movs	r3, #21
 800581e:	2131      	movs	r1, #49	; 0x31
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fa46 	bl	8005cb2 <BMP388_ReadBytes>
 8005826:	4603      	mov	r3, r0
 8005828:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	float temp_var;
	if(rslt == HAL_OK){
 800582c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005830:	2b00      	cmp	r3, #0
 8005832:	f040 812f 	bne.w	8005a94 <BMP388_GetCalibData+0x298>
		// PAR_T1
		temp_var = 0.00390625f;
 8005836:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 800583a:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t1 = ((uint16_t)calib_buff[1] << 8) | (uint16_t)calib_buff[0];
 800583c:	7b7b      	ldrb	r3, [r7, #13]
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	b21a      	sxth	r2, r3
 8005842:	7b3b      	ldrb	r3, [r7, #12]
 8005844:	b21b      	sxth	r3, r3
 8005846:	4313      	orrs	r3, r2
 8005848:	b21b      	sxth	r3, r3
 800584a:	86fb      	strh	r3, [r7, #54]	; 0x36
		bmp->_calib_data.par_t1 = (float)raw_par_t1 / temp_var;
 800584c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005856:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800585a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	edc3 7a02 	vstr	s15, [r3, #8]
		// PAR_T2
		temp_var = 1073741824.f;
 8005864:	f04f 439d 	mov.w	r3, #1317011456	; 0x4e800000
 8005868:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t2 = ((uint16_t)calib_buff[3] << 8) | (uint16_t)calib_buff[2];
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	b21a      	sxth	r2, r3
 8005870:	7bbb      	ldrb	r3, [r7, #14]
 8005872:	b21b      	sxth	r3, r3
 8005874:	4313      	orrs	r3, r2
 8005876:	b21b      	sxth	r3, r3
 8005878:	86bb      	strh	r3, [r7, #52]	; 0x34
		bmp->_calib_data.par_t2 = (float)raw_par_t2 / temp_var;
 800587a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800587c:	ee07 3a90 	vmov	s15, r3
 8005880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005884:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	edc3 7a03 	vstr	s15, [r3, #12]
		// PAR_T3
		temp_var = 281474976710656.f;
 8005892:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8005896:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t3 = calib_buff[4];
 8005898:	7c3b      	ldrb	r3, [r7, #16]
 800589a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		bmp->_calib_data.par_t3 = (float)raw_par_t3 / temp_var;
 800589e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80058aa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80058ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	edc3 7a04 	vstr	s15, [r3, #16]
		// PAR_P1
		temp_var = 1048576.f;
 80058b8:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 80058bc:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p1 = ((int16_t)calib_buff[6] << 8) | (int16_t)calib_buff[5];
 80058be:	7cbb      	ldrb	r3, [r7, #18]
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	b21a      	sxth	r2, r3
 80058c4:	7c7b      	ldrb	r3, [r7, #17]
 80058c6:	b21b      	sxth	r3, r3
 80058c8:	4313      	orrs	r3, r2
 80058ca:	863b      	strh	r3, [r7, #48]	; 0x30
		bmp->_calib_data.par_p1 = ((float)raw_par_p1 - 16384) / temp_var;
 80058cc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80058d0:	ee07 3a90 	vmov	s15, r3
 80058d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058d8:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8005aa0 <BMP388_GetCalibData+0x2a4>
 80058dc:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80058e0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80058e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	edc3 7a05 	vstr	s15, [r3, #20]
		// PAR_P2
		temp_var = 536870912.f;
 80058ee:	f04f 439c 	mov.w	r3, #1308622848	; 0x4e000000
 80058f2:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p2 = ((int16_t)calib_buff[8] << 8) | (int16_t)calib_buff[7];
 80058f4:	7d3b      	ldrb	r3, [r7, #20]
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	b21a      	sxth	r2, r3
 80058fa:	7cfb      	ldrb	r3, [r7, #19]
 80058fc:	b21b      	sxth	r3, r3
 80058fe:	4313      	orrs	r3, r2
 8005900:	85fb      	strh	r3, [r7, #46]	; 0x2e
		bmp->_calib_data.par_p2 = ((float)raw_par_p2 - 16384) / temp_var;
 8005902:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800590e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005aa0 <BMP388_GetCalibData+0x2a4>
 8005912:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005916:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800591a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	edc3 7a06 	vstr	s15, [r3, #24]
		// PAR_P3
		temp_var = 4294967296.f;
 8005924:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
 8005928:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p3 = (int8_t)calib_buff[9];
 800592a:	7d7b      	ldrb	r3, [r7, #21]
 800592c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		bmp->_calib_data.par_p3 = (float)raw_par_p3 / temp_var;
 8005930:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8005934:	ee07 3a90 	vmov	s15, r3
 8005938:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800593c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	edc3 7a07 	vstr	s15, [r3, #28]
		// PAR_P4
		temp_var = 137438953472.f;
 800594a:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 800594e:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p4 = (int8_t)calib_buff[10];
 8005950:	7dbb      	ldrb	r3, [r7, #22]
 8005952:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		bmp->_calib_data.par_p4 = (float)raw_par_p4 / temp_var;
 8005956:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005962:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	edc3 7a08 	vstr	s15, [r3, #32]
		// PAR_P5
		temp_var = 0.125f;
 8005970:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8005974:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p5 = ((uint16_t)calib_buff[12] << 8) | (uint16_t)calib_buff[11];
 8005976:	7e3b      	ldrb	r3, [r7, #24]
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	b21a      	sxth	r2, r3
 800597c:	7dfb      	ldrb	r3, [r7, #23]
 800597e:	b21b      	sxth	r3, r3
 8005980:	4313      	orrs	r3, r2
 8005982:	b21b      	sxth	r3, r3
 8005984:	857b      	strh	r3, [r7, #42]	; 0x2a
		bmp->_calib_data.par_p5 = (float)raw_par_p5 / temp_var;
 8005986:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005988:	ee07 3a90 	vmov	s15, r3
 800598c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005990:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		// PAR_P6
		temp_var = 64.f;
 800599e:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 80059a2:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p6 = ((uint16_t)calib_buff[14] << 8) | (uint16_t)calib_buff[13];
 80059a4:	7ebb      	ldrb	r3, [r7, #26]
 80059a6:	021b      	lsls	r3, r3, #8
 80059a8:	b21a      	sxth	r2, r3
 80059aa:	7e7b      	ldrb	r3, [r7, #25]
 80059ac:	b21b      	sxth	r3, r3
 80059ae:	4313      	orrs	r3, r2
 80059b0:	b21b      	sxth	r3, r3
 80059b2:	853b      	strh	r3, [r7, #40]	; 0x28
		bmp->_calib_data.par_p6 = (float)raw_par_p6 / temp_var;
 80059b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80059c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		// PAR_P7
		temp_var = 256.f;
 80059cc:	f04f 4387 	mov.w	r3, #1132462080	; 0x43800000
 80059d0:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p7 = (int8_t)calib_buff[15];
 80059d2:	7efb      	ldrb	r3, [r7, #27]
 80059d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		bmp->_calib_data.par_p7 = (float)raw_par_p7 / temp_var;
 80059d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80059dc:	ee07 3a90 	vmov	s15, r3
 80059e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80059e4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80059e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		// PAR_P8
		temp_var = 32768.f;
 80059f2:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 80059f6:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p8 = (int8_t)calib_buff[16];
 80059f8:	7f3b      	ldrb	r3, [r7, #28]
 80059fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bmp->_calib_data.par_p8 = (float)raw_par_p8 / temp_var;
 80059fe:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005a0a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		// PAR_P9
		temp_var = 281474976710656.f;
 8005a18:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8005a1c:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p9 = ((int16_t)calib_buff[18] << 8) | (int16_t)calib_buff[17];
 8005a1e:	7fbb      	ldrb	r3, [r7, #30]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	b21a      	sxth	r2, r3
 8005a24:	7f7b      	ldrb	r3, [r7, #29]
 8005a26:	b21b      	sxth	r3, r3
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		bmp->_calib_data.par_p9 = (float)raw_par_p9 / temp_var;
 8005a2c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005a30:	ee07 3a90 	vmov	s15, r3
 8005a34:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005a38:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		// PAR_P10
		temp_var = 281474976710656.f;
 8005a46:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8005a4a:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p10 = (int8_t)calib_buff[19];
 8005a4c:	7ffb      	ldrb	r3, [r7, #31]
 8005a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		bmp->_calib_data.par_p10 = (float)raw_par_p10 / temp_var;
 8005a52:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005a5e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// PAR_P11
		temp_var = 36893488147419103232.f;
 8005a6c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005a70:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p11 = (int8_t)calib_buff[20];
 8005a72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		bmp->_calib_data.par_p11 = (float)raw_par_p11 / temp_var;
 8005a7a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005a86:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005a8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	return rslt;
 8005a94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3740      	adds	r7, #64	; 0x40
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	46800000 	.word	0x46800000

08005aa4 <BMP388_CompensateTemp>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
float BMP388_CompensateTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_temp, float *temp){
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
    float partial_data1 = (float)(raw_temp - bmp->_calib_data.par_t1);;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ac4:	edc7 7a05 	vstr	s15, [r7, #20]
    float partial_data2 = (float)(partial_data1 * bmp->_calib_data.par_t2);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	edd3 7a03 	vldr	s15, [r3, #12]
 8005ace:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad6:	edc7 7a04 	vstr	s15, [r7, #16]

    *temp = partial_data2 + (partial_data1 * partial_data1) * bmp->_calib_data.par_t3;
 8005ada:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ade:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aec:	edd7 7a04 	vldr	s15, [r7, #16]
 8005af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	edc3 7a00 	vstr	s15, [r3]

    return *temp;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	ee07 3a90 	vmov	s15, r3
}
 8005b02:	eeb0 0a67 	vmov.f32	s0, s15
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <BMP388_CompensatePress>:
 *	@param[out] press		: Measured pressure in Pa
 *
 *  @return Status of execution
 *  @retval = press			: Compensated pressure value
 */
float BMP388_CompensatePress(BMP388_HandleTypeDef *bmp, float temp, uint32_t raw_press, float *press){
 8005b10:	b480      	push	{r7}
 8005b12:	b08b      	sub	sp, #44	; 0x2c
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b1c:	6079      	str	r1, [r7, #4]
 8005b1e:	603a      	str	r2, [r7, #0]
    float partial_out1;
    float partial_out2;



    partial_data1 = bmp->_calib_data.par_p6 * temp;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005b26:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p7 * (temp * temp);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005b38:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b3c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b44:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p8 * (temp * temp * temp);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005b4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b52:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005b56:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b62:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out1 = bmp->_calib_data.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005b6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b74:	edd7 7a08 	vldr	s15, [r7, #32]
 8005b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b84:	edc7 7a06 	vstr	s15, [r7, #24]

    partial_data1 = bmp->_calib_data.par_p2 * temp;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b96:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p3 * (temp * temp);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	ed93 7a07 	vldr	s14, [r3, #28]
 8005ba0:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ba4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bac:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p4 * (temp * temp * temp);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	ed93 7a08 	vldr	s14, [r3, #32]
 8005bb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bba:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005bbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bca:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out2 = (float)raw_press * (bmp->_calib_data.par_p1 + partial_data1 + partial_data2 + partial_data3);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	ee07 3a90 	vmov	s15, r3
 8005bd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	edd3 6a05 	vldr	s13, [r3, #20]
 8005bde:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005be2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005be6:	edd7 7a08 	vldr	s15, [r7, #32]
 8005bea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005bee:	edd7 7a07 	vldr	s15, [r7, #28]
 8005bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfa:	edc7 7a05 	vstr	s15, [r7, #20]

    partial_data1 = (float)raw_press * (float)raw_press;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	ee07 3a90 	vmov	s15, r3
 8005c04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c16:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p9 + bmp->_calib_data.par_p10 * temp;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c32:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = partial_data1 * partial_data2;
 8005c36:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005c3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8005c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c42:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_data4 = partial_data3 + ((float)raw_press * (float)raw_press * (float)raw_press) * bmp->_calib_data.par_p11;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	ee07 3a90 	vmov	s15, r3
 8005c4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	ee07 3a90 	vmov	s15, r3
 8005c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c76:	ed97 7a07 	vldr	s14, [r7, #28]
 8005c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c7e:	edc7 7a04 	vstr	s15, [r7, #16]

    *press = partial_out1 + partial_out2 + partial_data4;
 8005c82:	ed97 7a06 	vldr	s14, [r7, #24]
 8005c86:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	edc3 7a00 	vstr	s15, [r3]

    return *press;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	ee07 3a90 	vmov	s15, r3
}
 8005ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ca8:	372c      	adds	r7, #44	; 0x2c
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <BMP388_ReadBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b088      	sub	sp, #32
 8005cb6:	af04      	add	r7, sp, #16
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	72fb      	strb	r3, [r7, #11]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	7afb      	ldrb	r3, [r7, #11]
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	7abb      	ldrb	r3, [r7, #10]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2164      	movs	r1, #100	; 0x64
 8005cd4:	9102      	str	r1, [sp, #8]
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	2301      	movs	r3, #1
 8005cde:	21ec      	movs	r1, #236	; 0xec
 8005ce0:	f001 fd14 	bl	800770c <HAL_I2C_Mem_Read>
 8005ce4:	4603      	mov	r3, r0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <BMP388_WriteBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_WriteBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b088      	sub	sp, #32
 8005cf2:	af04      	add	r7, sp, #16
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	72fb      	strb	r3, [r7, #11]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	7afb      	ldrb	r3, [r7, #11]
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	7abb      	ldrb	r3, [r7, #10]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2164      	movs	r1, #100	; 0x64
 8005d10:	9102      	str	r1, [sp, #8]
 8005d12:	9301      	str	r3, [sp, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	2301      	movs	r3, #1
 8005d1a:	21ec      	movs	r1, #236	; 0xec
 8005d1c:	f001 fbfc 	bl	8007518 <HAL_I2C_Mem_Write>
 8005d20:	4603      	mov	r3, r0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <set_duty_Oneshot42>:
#define P_yaw 5
#define D_yaw 0



void set_duty_Oneshot42(TIM_HandleTypeDef* const pwmHandle1, uint16_t ref_1, uint16_t ref_2, uint16_t ref_3, uint16_t ref_4){
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	4608      	mov	r0, r1
 8005d34:	4611      	mov	r1, r2
 8005d36:	461a      	mov	r2, r3
 8005d38:	4603      	mov	r3, r0
 8005d3a:	817b      	strh	r3, [r7, #10]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	813b      	strh	r3, [r7, #8]
 8005d40:	4613      	mov	r3, r2
 8005d42:	80fb      	strh	r3, [r7, #6]
	// Multishot42 12 kHz PSC 7-1, ARR 1000-1 -> 1000 = 100%, 500 = stop, ?0 = -100%?
	pwmHandle1 -> Instance -> CCR1 = ref_1;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	897a      	ldrh	r2, [r7, #10]
 8005d4a:	635a      	str	r2, [r3, #52]	; 0x34
	pwmHandle1 -> Instance -> CCR2 = ref_2;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	893a      	ldrh	r2, [r7, #8]
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38
	pwmHandle1 -> Instance -> CCR3 = ref_3;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	88fa      	ldrh	r2, [r7, #6]
 8005d5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pwmHandle1 -> Instance -> CCR4 = ref_4;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	8b3a      	ldrh	r2, [r7, #24]
 8005d62:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <CRSFtoDuty>:

float CRSFtoDuty(uint16_t CRSF_val){
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	80fb      	strh	r3, [r7, #6]
	float Duty;
//	Duty = 550+((float)(CRSF_val-172))/4.1; // minimum duty 55% max duty 95%
	Duty = 550+((float)(CRSF_val-172))/4.1*0.6; //for safety reasons minimum duty 55% max duty 79%
 8005d7a:	88fb      	ldrh	r3, [r7, #6]
 8005d7c:	3bac      	subs	r3, #172	; 0xac
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d86:	ee17 0a90 	vmov	r0, s15
 8005d8a:	f7fa fbdd 	bl	8000548 <__aeabi_f2d>
 8005d8e:	a315      	add	r3, pc, #84	; (adr r3, 8005de4 <CRSFtoDuty+0x74>)
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	f7fa fd5a 	bl	800084c <__aeabi_ddiv>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4619      	mov	r1, r3
 8005da0:	a312      	add	r3, pc, #72	; (adr r3, 8005dec <CRSFtoDuty+0x7c>)
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	f7fa fc27 	bl	80005f8 <__aeabi_dmul>
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	4610      	mov	r0, r2
 8005db0:	4619      	mov	r1, r3
 8005db2:	f04f 0200 	mov.w	r2, #0
 8005db6:	4b0a      	ldr	r3, [pc, #40]	; (8005de0 <CRSFtoDuty+0x70>)
 8005db8:	f7fa fa68 	bl	800028c <__adddf3>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	f7fa ff10 	bl	8000be8 <__aeabi_d2f>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	60fb      	str	r3, [r7, #12]
	return Duty;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	ee07 3a90 	vmov	s15, r3
}
 8005dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	f3af 8000 	nop.w
 8005de0:	40813000 	.word	0x40813000
 8005de4:	66666666 	.word	0x66666666
 8005de8:	40106666 	.word	0x40106666
 8005dec:	33333333 	.word	0x33333333
 8005df0:	3fe33333 	.word	0x3fe33333

08005df4 <CRSFtoPitch>:

float CRSFtoPitch(uint16_t CRSF_val){
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	80fb      	strh	r3, [r7, #6]
	float pitch;
	pitch = ((float)(CRSF_val-992))/820.0;
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005e04:	ee07 3a90 	vmov	s15, r3
 8005e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e0c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005e2c <CRSFtoPitch+0x38>
 8005e10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e14:	edc7 7a03 	vstr	s15, [r7, #12]
	return pitch;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	ee07 3a90 	vmov	s15, r3
}
 8005e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	444d0000 	.word	0x444d0000

08005e30 <CRSFtoRoll>:

float CRSFtoRoll(uint16_t CRSF_val){
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	80fb      	strh	r3, [r7, #6]
	float roll;
	roll = ((float)(CRSF_val-992))/820.0;
 8005e3a:	88fb      	ldrh	r3, [r7, #6]
 8005e3c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005e40:	ee07 3a90 	vmov	s15, r3
 8005e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e48:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005e68 <CRSFtoRoll+0x38>
 8005e4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e50:	edc7 7a03 	vstr	s15, [r7, #12]
	return roll;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	ee07 3a90 	vmov	s15, r3
}
 8005e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	444d0000 	.word	0x444d0000

08005e6c <CRSFtoYaw>:

float CRSFtoYaw(uint16_t CRSF_val){
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	80fb      	strh	r3, [r7, #6]
	float yaw;
	yaw = ((float)(CRSF_val-992))/820.0;
 8005e76:	88fb      	ldrh	r3, [r7, #6]
 8005e78:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005e7c:	ee07 3a90 	vmov	s15, r3
 8005e80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e84:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005ea4 <CRSFtoYaw+0x38>
 8005e88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e8c:	edc7 7a03 	vstr	s15, [r7, #12]
	return yaw;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	ee07 3a90 	vmov	s15, r3
}
 8005e96:	eeb0 0a67 	vmov.f32	s0, s15
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	444d0000 	.word	0x444d0000

08005ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005eac:	4b0e      	ldr	r3, [pc, #56]	; (8005ee8 <HAL_Init+0x40>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a0d      	ldr	r2, [pc, #52]	; (8005ee8 <HAL_Init+0x40>)
 8005eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <HAL_Init+0x40>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a0a      	ldr	r2, [pc, #40]	; (8005ee8 <HAL_Init+0x40>)
 8005ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ec4:	4b08      	ldr	r3, [pc, #32]	; (8005ee8 <HAL_Init+0x40>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a07      	ldr	r2, [pc, #28]	; (8005ee8 <HAL_Init+0x40>)
 8005eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ed0:	2003      	movs	r0, #3
 8005ed2:	f000 fbb1 	bl	8006638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ed6:	200f      	movs	r0, #15
 8005ed8:	f000 f808 	bl	8005eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005edc:	f7fd fbd8 	bl	8003690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40023c00 	.word	0x40023c00

08005eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ef4:	4b12      	ldr	r3, [pc, #72]	; (8005f40 <HAL_InitTick+0x54>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	4b12      	ldr	r3, [pc, #72]	; (8005f44 <HAL_InitTick+0x58>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	4619      	mov	r1, r3
 8005efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fbc9 	bl	80066a2 <HAL_SYSTICK_Config>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e00e      	b.n	8005f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b0f      	cmp	r3, #15
 8005f1e:	d80a      	bhi.n	8005f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f20:	2200      	movs	r2, #0
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	f04f 30ff 	mov.w	r0, #4294967295
 8005f28:	f000 fb91 	bl	800664e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f2c:	4a06      	ldr	r2, [pc, #24]	; (8005f48 <HAL_InitTick+0x5c>)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	e000      	b.n	8005f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	2000000c 	.word	0x2000000c
 8005f44:	20000014 	.word	0x20000014
 8005f48:	20000010 	.word	0x20000010

08005f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f50:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <HAL_IncTick+0x20>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	461a      	mov	r2, r3
 8005f56:	4b06      	ldr	r3, [pc, #24]	; (8005f70 <HAL_IncTick+0x24>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	4a04      	ldr	r2, [pc, #16]	; (8005f70 <HAL_IncTick+0x24>)
 8005f5e:	6013      	str	r3, [r2, #0]
}
 8005f60:	bf00      	nop
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	20000014 	.word	0x20000014
 8005f70:	20002b3c 	.word	0x20002b3c

08005f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
  return uwTick;
 8005f78:	4b03      	ldr	r3, [pc, #12]	; (8005f88 <HAL_GetTick+0x14>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	20002b3c 	.word	0x20002b3c

08005f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f94:	f7ff ffee 	bl	8005f74 <HAL_GetTick>
 8005f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d005      	beq.n	8005fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fa6:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <HAL_Delay+0x44>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005fb2:	bf00      	nop
 8005fb4:	f7ff ffde 	bl	8005f74 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d8f7      	bhi.n	8005fb4 <HAL_Delay+0x28>
  {
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000014 	.word	0x20000014

08005fd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e033      	b.n	8006052 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d109      	bne.n	8006006 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fd fb78 	bl	80036e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	f003 0310 	and.w	r3, r3, #16
 800600e:	2b00      	cmp	r3, #0
 8006010:	d118      	bne.n	8006044 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800601a:	f023 0302 	bic.w	r3, r3, #2
 800601e:	f043 0202 	orr.w	r2, r3, #2
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f93a 	bl	80062a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f023 0303 	bic.w	r3, r3, #3
 800603a:	f043 0201 	orr.w	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	641a      	str	r2, [r3, #64]	; 0x40
 8006042:	e001      	b.n	8006048 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006050:	7bfb      	ldrb	r3, [r7, #15]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_ADC_ConfigChannel+0x1c>
 8006074:	2302      	movs	r3, #2
 8006076:	e105      	b.n	8006284 <HAL_ADC_ConfigChannel+0x228>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b09      	cmp	r3, #9
 8006086:	d925      	bls.n	80060d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68d9      	ldr	r1, [r3, #12]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	4613      	mov	r3, r2
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	4413      	add	r3, r2
 800609c:	3b1e      	subs	r3, #30
 800609e:	2207      	movs	r2, #7
 80060a0:	fa02 f303 	lsl.w	r3, r2, r3
 80060a4:	43da      	mvns	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	400a      	ands	r2, r1
 80060ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68d9      	ldr	r1, [r3, #12]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	4618      	mov	r0, r3
 80060c0:	4603      	mov	r3, r0
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	4403      	add	r3, r0
 80060c6:	3b1e      	subs	r3, #30
 80060c8:	409a      	lsls	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	60da      	str	r2, [r3, #12]
 80060d2:	e022      	b.n	800611a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6919      	ldr	r1, [r3, #16]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	4613      	mov	r3, r2
 80060e4:	005b      	lsls	r3, r3, #1
 80060e6:	4413      	add	r3, r2
 80060e8:	2207      	movs	r2, #7
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	43da      	mvns	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	400a      	ands	r2, r1
 80060f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6919      	ldr	r1, [r3, #16]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	4618      	mov	r0, r3
 800610a:	4603      	mov	r3, r0
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	4403      	add	r3, r0
 8006110:	409a      	lsls	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b06      	cmp	r3, #6
 8006120:	d824      	bhi.n	800616c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	3b05      	subs	r3, #5
 8006134:	221f      	movs	r2, #31
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	43da      	mvns	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	400a      	ands	r2, r1
 8006142:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	b29b      	uxth	r3, r3
 8006150:	4618      	mov	r0, r3
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	3b05      	subs	r3, #5
 800615e:	fa00 f203 	lsl.w	r2, r0, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	635a      	str	r2, [r3, #52]	; 0x34
 800616a:	e04c      	b.n	8006206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2b0c      	cmp	r3, #12
 8006172:	d824      	bhi.n	80061be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	4613      	mov	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	3b23      	subs	r3, #35	; 0x23
 8006186:	221f      	movs	r2, #31
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	43da      	mvns	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	400a      	ands	r2, r1
 8006194:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	4618      	mov	r0, r3
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	3b23      	subs	r3, #35	; 0x23
 80061b0:	fa00 f203 	lsl.w	r2, r0, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	631a      	str	r2, [r3, #48]	; 0x30
 80061bc:	e023      	b.n	8006206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	3b41      	subs	r3, #65	; 0x41
 80061d0:	221f      	movs	r2, #31
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	43da      	mvns	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	400a      	ands	r2, r1
 80061de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	4618      	mov	r0, r3
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	3b41      	subs	r3, #65	; 0x41
 80061fa:	fa00 f203 	lsl.w	r2, r0, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006206:	4b22      	ldr	r3, [pc, #136]	; (8006290 <HAL_ADC_ConfigChannel+0x234>)
 8006208:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a21      	ldr	r2, [pc, #132]	; (8006294 <HAL_ADC_ConfigChannel+0x238>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d109      	bne.n	8006228 <HAL_ADC_ConfigChannel+0x1cc>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b12      	cmp	r3, #18
 800621a:	d105      	bne.n	8006228 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a19      	ldr	r2, [pc, #100]	; (8006294 <HAL_ADC_ConfigChannel+0x238>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d123      	bne.n	800627a <HAL_ADC_ConfigChannel+0x21e>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b10      	cmp	r3, #16
 8006238:	d003      	beq.n	8006242 <HAL_ADC_ConfigChannel+0x1e6>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b11      	cmp	r3, #17
 8006240:	d11b      	bne.n	800627a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b10      	cmp	r3, #16
 8006254:	d111      	bne.n	800627a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006256:	4b10      	ldr	r3, [pc, #64]	; (8006298 <HAL_ADC_ConfigChannel+0x23c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a10      	ldr	r2, [pc, #64]	; (800629c <HAL_ADC_ConfigChannel+0x240>)
 800625c:	fba2 2303 	umull	r2, r3, r2, r3
 8006260:	0c9a      	lsrs	r2, r3, #18
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800626c:	e002      	b.n	8006274 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	3b01      	subs	r3, #1
 8006272:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f9      	bne.n	800626e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	40012300 	.word	0x40012300
 8006294:	40012000 	.word	0x40012000
 8006298:	2000000c 	.word	0x2000000c
 800629c:	431bde83 	.word	0x431bde83

080062a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80062a8:	4b79      	ldr	r3, [pc, #484]	; (8006490 <ADC_Init+0x1f0>)
 80062aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	431a      	orrs	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6859      	ldr	r1, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	021a      	lsls	r2, r3, #8
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80062f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6859      	ldr	r1, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800631a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6899      	ldr	r1, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	4a58      	ldr	r2, [pc, #352]	; (8006494 <ADC_Init+0x1f4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d022      	beq.n	800637e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006346:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6899      	ldr	r1, [r3, #8]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6899      	ldr	r1, [r3, #8]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	609a      	str	r2, [r3, #8]
 800637c:	e00f      	b.n	800639e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800638c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800639c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0202 	bic.w	r2, r2, #2
 80063ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6899      	ldr	r1, [r3, #8]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	7e1b      	ldrb	r3, [r3, #24]
 80063b8:	005a      	lsls	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01b      	beq.n	8006404 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80063ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	3b01      	subs	r3, #1
 80063f8:	035a      	lsls	r2, r3, #13
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]
 8006402:	e007      	b.n	8006414 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006412:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	3b01      	subs	r3, #1
 8006430:	051a      	lsls	r2, r3, #20
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6899      	ldr	r1, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006456:	025a      	lsls	r2, r3, #9
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800646e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6899      	ldr	r1, [r3, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	029a      	lsls	r2, r3, #10
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	609a      	str	r2, [r3, #8]
}
 8006484:	bf00      	nop
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	40012300 	.word	0x40012300
 8006494:	0f000001 	.word	0x0f000001

08006498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064a8:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <__NVIC_SetPriorityGrouping+0x44>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064b4:	4013      	ands	r3, r2
 80064b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064ca:	4a04      	ldr	r2, [pc, #16]	; (80064dc <__NVIC_SetPriorityGrouping+0x44>)
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	60d3      	str	r3, [r2, #12]
}
 80064d0:	bf00      	nop
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	e000ed00 	.word	0xe000ed00

080064e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064e4:	4b04      	ldr	r3, [pc, #16]	; (80064f8 <__NVIC_GetPriorityGrouping+0x18>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	0a1b      	lsrs	r3, r3, #8
 80064ea:	f003 0307 	and.w	r3, r3, #7
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	e000ed00 	.word	0xe000ed00

080064fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800650a:	2b00      	cmp	r3, #0
 800650c:	db0b      	blt.n	8006526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	f003 021f 	and.w	r2, r3, #31
 8006514:	4907      	ldr	r1, [pc, #28]	; (8006534 <__NVIC_EnableIRQ+0x38>)
 8006516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	2001      	movs	r0, #1
 800651e:	fa00 f202 	lsl.w	r2, r0, r2
 8006522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	e000e100 	.word	0xe000e100

08006538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	4603      	mov	r3, r0
 8006540:	6039      	str	r1, [r7, #0]
 8006542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006548:	2b00      	cmp	r3, #0
 800654a:	db0a      	blt.n	8006562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	b2da      	uxtb	r2, r3
 8006550:	490c      	ldr	r1, [pc, #48]	; (8006584 <__NVIC_SetPriority+0x4c>)
 8006552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006556:	0112      	lsls	r2, r2, #4
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	440b      	add	r3, r1
 800655c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006560:	e00a      	b.n	8006578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	b2da      	uxtb	r2, r3
 8006566:	4908      	ldr	r1, [pc, #32]	; (8006588 <__NVIC_SetPriority+0x50>)
 8006568:	79fb      	ldrb	r3, [r7, #7]
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	3b04      	subs	r3, #4
 8006570:	0112      	lsls	r2, r2, #4
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	440b      	add	r3, r1
 8006576:	761a      	strb	r2, [r3, #24]
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	e000e100 	.word	0xe000e100
 8006588:	e000ed00 	.word	0xe000ed00

0800658c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800658c:	b480      	push	{r7}
 800658e:	b089      	sub	sp, #36	; 0x24
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f1c3 0307 	rsb	r3, r3, #7
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	bf28      	it	cs
 80065aa:	2304      	movcs	r3, #4
 80065ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	3304      	adds	r3, #4
 80065b2:	2b06      	cmp	r3, #6
 80065b4:	d902      	bls.n	80065bc <NVIC_EncodePriority+0x30>
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	3b03      	subs	r3, #3
 80065ba:	e000      	b.n	80065be <NVIC_EncodePriority+0x32>
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065c0:	f04f 32ff 	mov.w	r2, #4294967295
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	43da      	mvns	r2, r3
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	401a      	ands	r2, r3
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065d4:	f04f 31ff 	mov.w	r1, #4294967295
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	fa01 f303 	lsl.w	r3, r1, r3
 80065de:	43d9      	mvns	r1, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065e4:	4313      	orrs	r3, r2
         );
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3724      	adds	r7, #36	; 0x24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
	...

080065f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	3b01      	subs	r3, #1
 8006600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006604:	d301      	bcc.n	800660a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006606:	2301      	movs	r3, #1
 8006608:	e00f      	b.n	800662a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800660a:	4a0a      	ldr	r2, [pc, #40]	; (8006634 <SysTick_Config+0x40>)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3b01      	subs	r3, #1
 8006610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006612:	210f      	movs	r1, #15
 8006614:	f04f 30ff 	mov.w	r0, #4294967295
 8006618:	f7ff ff8e 	bl	8006538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800661c:	4b05      	ldr	r3, [pc, #20]	; (8006634 <SysTick_Config+0x40>)
 800661e:	2200      	movs	r2, #0
 8006620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006622:	4b04      	ldr	r3, [pc, #16]	; (8006634 <SysTick_Config+0x40>)
 8006624:	2207      	movs	r2, #7
 8006626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	e000e010 	.word	0xe000e010

08006638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff ff29 	bl	8006498 <__NVIC_SetPriorityGrouping>
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800664e:	b580      	push	{r7, lr}
 8006650:	b086      	sub	sp, #24
 8006652:	af00      	add	r7, sp, #0
 8006654:	4603      	mov	r3, r0
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	607a      	str	r2, [r7, #4]
 800665a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800665c:	2300      	movs	r3, #0
 800665e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006660:	f7ff ff3e 	bl	80064e0 <__NVIC_GetPriorityGrouping>
 8006664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	68b9      	ldr	r1, [r7, #8]
 800666a:	6978      	ldr	r0, [r7, #20]
 800666c:	f7ff ff8e 	bl	800658c <NVIC_EncodePriority>
 8006670:	4602      	mov	r2, r0
 8006672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006676:	4611      	mov	r1, r2
 8006678:	4618      	mov	r0, r3
 800667a:	f7ff ff5d 	bl	8006538 <__NVIC_SetPriority>
}
 800667e:	bf00      	nop
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b082      	sub	sp, #8
 800668a:	af00      	add	r7, sp, #0
 800668c:	4603      	mov	r3, r0
 800668e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff ff31 	bl	80064fc <__NVIC_EnableIRQ>
}
 800669a:	bf00      	nop
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b082      	sub	sp, #8
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff ffa2 	bl	80065f4 <SysTick_Config>
 80066b0:	4603      	mov	r3, r0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
	...

080066bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80066c8:	f7ff fc54 	bl	8005f74 <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e099      	b.n	800680c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0201 	bic.w	r2, r2, #1
 80066f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066f8:	e00f      	b.n	800671a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066fa:	f7ff fc3b 	bl	8005f74 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b05      	cmp	r3, #5
 8006706:	d908      	bls.n	800671a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2203      	movs	r2, #3
 8006712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e078      	b.n	800680c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e8      	bne.n	80066fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	4b38      	ldr	r3, [pc, #224]	; (8006814 <HAL_DMA_Init+0x158>)
 8006734:	4013      	ands	r3, r2
 8006736:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006746:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006752:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800675e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	2b04      	cmp	r3, #4
 8006772:	d107      	bne.n	8006784 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677c:	4313      	orrs	r3, r2
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f023 0307 	bic.w	r3, r3, #7
 800679a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	d117      	bne.n	80067de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00e      	beq.n	80067de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fb01 	bl	8006dc8 <DMA_CheckFifoParam>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d008      	beq.n	80067de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2240      	movs	r2, #64	; 0x40
 80067d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80067da:	2301      	movs	r3, #1
 80067dc:	e016      	b.n	800680c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fab8 	bl	8006d5c <DMA_CalcBaseAndBitshift>
 80067ec:	4603      	mov	r3, r0
 80067ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f4:	223f      	movs	r2, #63	; 0x3f
 80067f6:	409a      	lsls	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	f010803f 	.word	0xf010803f

08006818 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800682e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_DMA_Start_IT+0x26>
 800683a:	2302      	movs	r3, #2
 800683c:	e040      	b.n	80068c0 <HAL_DMA_Start_IT+0xa8>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b01      	cmp	r3, #1
 8006850:	d12f      	bne.n	80068b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2202      	movs	r2, #2
 8006856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	68b9      	ldr	r1, [r7, #8]
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 fa4a 	bl	8006d00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006870:	223f      	movs	r2, #63	; 0x3f
 8006872:	409a      	lsls	r2, r3
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0216 	orr.w	r2, r2, #22
 8006886:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	d007      	beq.n	80068a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0208 	orr.w	r2, r2, #8
 800689e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	e005      	b.n	80068be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80068ba:	2302      	movs	r3, #2
 80068bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80068be:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3718      	adds	r7, #24
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80068d6:	f7ff fb4d 	bl	8005f74 <HAL_GetTick>
 80068da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d008      	beq.n	80068fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2280      	movs	r2, #128	; 0x80
 80068ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e052      	b.n	80069a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0216 	bic.w	r2, r2, #22
 8006908:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	695a      	ldr	r2, [r3, #20]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006918:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	2b00      	cmp	r3, #0
 8006920:	d103      	bne.n	800692a <HAL_DMA_Abort+0x62>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006926:	2b00      	cmp	r3, #0
 8006928:	d007      	beq.n	800693a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0208 	bic.w	r2, r2, #8
 8006938:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0201 	bic.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800694a:	e013      	b.n	8006974 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800694c:	f7ff fb12 	bl	8005f74 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b05      	cmp	r3, #5
 8006958:	d90c      	bls.n	8006974 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2220      	movs	r2, #32
 800695e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2203      	movs	r2, #3
 8006964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e015      	b.n	80069a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e4      	bne.n	800694c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006986:	223f      	movs	r2, #63	; 0x3f
 8006988:	409a      	lsls	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d004      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2280      	movs	r2, #128	; 0x80
 80069c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e00c      	b.n	80069e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2205      	movs	r2, #5
 80069ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0201 	bic.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80069f8:	4b8e      	ldr	r3, [pc, #568]	; (8006c34 <HAL_DMA_IRQHandler+0x248>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a8e      	ldr	r2, [pc, #568]	; (8006c38 <HAL_DMA_IRQHandler+0x24c>)
 80069fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006a02:	0a9b      	lsrs	r3, r3, #10
 8006a04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a16:	2208      	movs	r2, #8
 8006a18:	409a      	lsls	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d01a      	beq.n	8006a58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d013      	beq.n	8006a58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0204 	bic.w	r2, r2, #4
 8006a3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a44:	2208      	movs	r2, #8
 8006a46:	409a      	lsls	r2, r3
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a50:	f043 0201 	orr.w	r2, r3, #1
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	409a      	lsls	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4013      	ands	r3, r2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d012      	beq.n	8006a8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00b      	beq.n	8006a8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	409a      	lsls	r2, r3
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a86:	f043 0202 	orr.w	r2, r3, #2
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a92:	2204      	movs	r2, #4
 8006a94:	409a      	lsls	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4013      	ands	r3, r2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d012      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab0:	2204      	movs	r2, #4
 8006ab2:	409a      	lsls	r2, r3
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abc:	f043 0204 	orr.w	r2, r3, #4
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac8:	2210      	movs	r2, #16
 8006aca:	409a      	lsls	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d043      	beq.n	8006b5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d03c      	beq.n	8006b5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae6:	2210      	movs	r2, #16
 8006ae8:	409a      	lsls	r2, r3
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d018      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d108      	bne.n	8006b1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d024      	beq.n	8006b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
 8006b1a:	e01f      	b.n	8006b5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01b      	beq.n	8006b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
 8006b2c:	e016      	b.n	8006b5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d107      	bne.n	8006b4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 0208 	bic.w	r2, r2, #8
 8006b4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b60:	2220      	movs	r2, #32
 8006b62:	409a      	lsls	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4013      	ands	r3, r2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 808f 	beq.w	8006c8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0310 	and.w	r3, r3, #16
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 8087 	beq.w	8006c8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b82:	2220      	movs	r2, #32
 8006b84:	409a      	lsls	r2, r3
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b05      	cmp	r3, #5
 8006b94:	d136      	bne.n	8006c04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0216 	bic.w	r2, r2, #22
 8006ba4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	695a      	ldr	r2, [r3, #20]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d103      	bne.n	8006bc6 <HAL_DMA_IRQHandler+0x1da>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d007      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0208 	bic.w	r2, r2, #8
 8006bd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bda:	223f      	movs	r2, #63	; 0x3f
 8006bdc:	409a      	lsls	r2, r3
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d07e      	beq.n	8006cf8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	4798      	blx	r3
        }
        return;
 8006c02:	e079      	b.n	8006cf8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01d      	beq.n	8006c4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10d      	bne.n	8006c3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d031      	beq.n	8006c8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	4798      	blx	r3
 8006c30:	e02c      	b.n	8006c8c <HAL_DMA_IRQHandler+0x2a0>
 8006c32:	bf00      	nop
 8006c34:	2000000c 	.word	0x2000000c
 8006c38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d023      	beq.n	8006c8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	4798      	blx	r3
 8006c4c:	e01e      	b.n	8006c8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10f      	bne.n	8006c7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0210 	bic.w	r2, r2, #16
 8006c6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d032      	beq.n	8006cfa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d022      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2205      	movs	r2, #5
 8006ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0201 	bic.w	r2, r2, #1
 8006cb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	60bb      	str	r3, [r7, #8]
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d307      	bcc.n	8006cd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1f2      	bne.n	8006cb8 <HAL_DMA_IRQHandler+0x2cc>
 8006cd2:	e000      	b.n	8006cd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006cd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d005      	beq.n	8006cfa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
 8006cf6:	e000      	b.n	8006cfa <HAL_DMA_IRQHandler+0x30e>
        return;
 8006cf8:	bf00      	nop
    }
  }
}
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	2b40      	cmp	r3, #64	; 0x40
 8006d2c:	d108      	bne.n	8006d40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006d3e:	e007      	b.n	8006d50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	60da      	str	r2, [r3, #12]
}
 8006d50:	bf00      	nop
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	3b10      	subs	r3, #16
 8006d6c:	4a14      	ldr	r2, [pc, #80]	; (8006dc0 <DMA_CalcBaseAndBitshift+0x64>)
 8006d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d72:	091b      	lsrs	r3, r3, #4
 8006d74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006d76:	4a13      	ldr	r2, [pc, #76]	; (8006dc4 <DMA_CalcBaseAndBitshift+0x68>)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d909      	bls.n	8006d9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d92:	f023 0303 	bic.w	r3, r3, #3
 8006d96:	1d1a      	adds	r2, r3, #4
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	659a      	str	r2, [r3, #88]	; 0x58
 8006d9c:	e007      	b.n	8006dae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006da6:	f023 0303 	bic.w	r3, r3, #3
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	aaaaaaab 	.word	0xaaaaaaab
 8006dc4:	0801509c 	.word	0x0801509c

08006dc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d11f      	bne.n	8006e22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d856      	bhi.n	8006e96 <DMA_CheckFifoParam+0xce>
 8006de8:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <DMA_CheckFifoParam+0x28>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e01 	.word	0x08006e01
 8006df4:	08006e13 	.word	0x08006e13
 8006df8:	08006e01 	.word	0x08006e01
 8006dfc:	08006e97 	.word	0x08006e97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d046      	beq.n	8006e9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e10:	e043      	b.n	8006e9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e1a:	d140      	bne.n	8006e9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e20:	e03d      	b.n	8006e9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e2a:	d121      	bne.n	8006e70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	d837      	bhi.n	8006ea2 <DMA_CheckFifoParam+0xda>
 8006e32:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <DMA_CheckFifoParam+0x70>)
 8006e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e38:	08006e49 	.word	0x08006e49
 8006e3c:	08006e4f 	.word	0x08006e4f
 8006e40:	08006e49 	.word	0x08006e49
 8006e44:	08006e61 	.word	0x08006e61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e4c:	e030      	b.n	8006eb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d025      	beq.n	8006ea6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e5e:	e022      	b.n	8006ea6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e68:	d11f      	bne.n	8006eaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006e6e:	e01c      	b.n	8006eaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d903      	bls.n	8006e7e <DMA_CheckFifoParam+0xb6>
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d003      	beq.n	8006e84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006e7c:	e018      	b.n	8006eb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	73fb      	strb	r3, [r7, #15]
      break;
 8006e82:	e015      	b.n	8006eb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00e      	beq.n	8006eae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	73fb      	strb	r3, [r7, #15]
      break;
 8006e94:	e00b      	b.n	8006eae <DMA_CheckFifoParam+0xe6>
      break;
 8006e96:	bf00      	nop
 8006e98:	e00a      	b.n	8006eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8006e9a:	bf00      	nop
 8006e9c:	e008      	b.n	8006eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8006e9e:	bf00      	nop
 8006ea0:	e006      	b.n	8006eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8006ea2:	bf00      	nop
 8006ea4:	e004      	b.n	8006eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8006ea6:	bf00      	nop
 8006ea8:	e002      	b.n	8006eb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8006eaa:	bf00      	nop
 8006eac:	e000      	b.n	8006eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8006eae:	bf00      	nop
    }
  } 
  
  return status; 
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop

08006ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b089      	sub	sp, #36	; 0x24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	61fb      	str	r3, [r7, #28]
 8006eda:	e16b      	b.n	80071b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006edc:	2201      	movs	r2, #1
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	4013      	ands	r3, r2
 8006eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	f040 815a 	bne.w	80071ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d005      	beq.n	8006f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d130      	bne.n	8006f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f22:	43db      	mvns	r3, r3
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	4013      	ands	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	fa02 f303 	lsl.w	r3, r2, r3
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f48:	2201      	movs	r2, #1
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	43db      	mvns	r3, r3
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	4013      	ands	r3, r2
 8006f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	091b      	lsrs	r3, r3, #4
 8006f5e:	f003 0201 	and.w	r2, r3, #1
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	fa02 f303 	lsl.w	r3, r2, r3
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f003 0303 	and.w	r3, r3, #3
 8006f7c:	2b03      	cmp	r3, #3
 8006f7e:	d017      	beq.n	8006fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	2203      	movs	r2, #3
 8006f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f90:	43db      	mvns	r3, r3
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	4013      	ands	r3, r2
 8006f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d123      	bne.n	8007004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	08da      	lsrs	r2, r3, #3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3208      	adds	r2, #8
 8006fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	f003 0307 	and.w	r3, r3, #7
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	220f      	movs	r2, #15
 8006fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd8:	43db      	mvns	r3, r3
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	08da      	lsrs	r2, r3, #3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	3208      	adds	r2, #8
 8006ffe:	69b9      	ldr	r1, [r7, #24]
 8007000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	2203      	movs	r2, #3
 8007010:	fa02 f303 	lsl.w	r3, r2, r3
 8007014:	43db      	mvns	r3, r3
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	4013      	ands	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f003 0203 	and.w	r2, r3, #3
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	fa02 f303 	lsl.w	r3, r2, r3
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	4313      	orrs	r3, r2
 8007030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80b4 	beq.w	80071ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	4b60      	ldr	r3, [pc, #384]	; (80071cc <HAL_GPIO_Init+0x30c>)
 800704c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704e:	4a5f      	ldr	r2, [pc, #380]	; (80071cc <HAL_GPIO_Init+0x30c>)
 8007050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007054:	6453      	str	r3, [r2, #68]	; 0x44
 8007056:	4b5d      	ldr	r3, [pc, #372]	; (80071cc <HAL_GPIO_Init+0x30c>)
 8007058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007062:	4a5b      	ldr	r2, [pc, #364]	; (80071d0 <HAL_GPIO_Init+0x310>)
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	089b      	lsrs	r3, r3, #2
 8007068:	3302      	adds	r3, #2
 800706a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800706e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	220f      	movs	r2, #15
 800707a:	fa02 f303 	lsl.w	r3, r2, r3
 800707e:	43db      	mvns	r3, r3
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	4013      	ands	r3, r2
 8007084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a52      	ldr	r2, [pc, #328]	; (80071d4 <HAL_GPIO_Init+0x314>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d02b      	beq.n	80070e6 <HAL_GPIO_Init+0x226>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a51      	ldr	r2, [pc, #324]	; (80071d8 <HAL_GPIO_Init+0x318>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d025      	beq.n	80070e2 <HAL_GPIO_Init+0x222>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a50      	ldr	r2, [pc, #320]	; (80071dc <HAL_GPIO_Init+0x31c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d01f      	beq.n	80070de <HAL_GPIO_Init+0x21e>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a4f      	ldr	r2, [pc, #316]	; (80071e0 <HAL_GPIO_Init+0x320>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d019      	beq.n	80070da <HAL_GPIO_Init+0x21a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a4e      	ldr	r2, [pc, #312]	; (80071e4 <HAL_GPIO_Init+0x324>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d013      	beq.n	80070d6 <HAL_GPIO_Init+0x216>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a4d      	ldr	r2, [pc, #308]	; (80071e8 <HAL_GPIO_Init+0x328>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d00d      	beq.n	80070d2 <HAL_GPIO_Init+0x212>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a4c      	ldr	r2, [pc, #304]	; (80071ec <HAL_GPIO_Init+0x32c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d007      	beq.n	80070ce <HAL_GPIO_Init+0x20e>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a4b      	ldr	r2, [pc, #300]	; (80071f0 <HAL_GPIO_Init+0x330>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d101      	bne.n	80070ca <HAL_GPIO_Init+0x20a>
 80070c6:	2307      	movs	r3, #7
 80070c8:	e00e      	b.n	80070e8 <HAL_GPIO_Init+0x228>
 80070ca:	2308      	movs	r3, #8
 80070cc:	e00c      	b.n	80070e8 <HAL_GPIO_Init+0x228>
 80070ce:	2306      	movs	r3, #6
 80070d0:	e00a      	b.n	80070e8 <HAL_GPIO_Init+0x228>
 80070d2:	2305      	movs	r3, #5
 80070d4:	e008      	b.n	80070e8 <HAL_GPIO_Init+0x228>
 80070d6:	2304      	movs	r3, #4
 80070d8:	e006      	b.n	80070e8 <HAL_GPIO_Init+0x228>
 80070da:	2303      	movs	r3, #3
 80070dc:	e004      	b.n	80070e8 <HAL_GPIO_Init+0x228>
 80070de:	2302      	movs	r3, #2
 80070e0:	e002      	b.n	80070e8 <HAL_GPIO_Init+0x228>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <HAL_GPIO_Init+0x228>
 80070e6:	2300      	movs	r3, #0
 80070e8:	69fa      	ldr	r2, [r7, #28]
 80070ea:	f002 0203 	and.w	r2, r2, #3
 80070ee:	0092      	lsls	r2, r2, #2
 80070f0:	4093      	lsls	r3, r2
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070f8:	4935      	ldr	r1, [pc, #212]	; (80071d0 <HAL_GPIO_Init+0x310>)
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	089b      	lsrs	r3, r3, #2
 80070fe:	3302      	adds	r3, #2
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007106:	4b3b      	ldr	r3, [pc, #236]	; (80071f4 <HAL_GPIO_Init+0x334>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	43db      	mvns	r3, r3
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	4013      	ands	r3, r2
 8007114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	4313      	orrs	r3, r2
 8007128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800712a:	4a32      	ldr	r2, [pc, #200]	; (80071f4 <HAL_GPIO_Init+0x334>)
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007130:	4b30      	ldr	r3, [pc, #192]	; (80071f4 <HAL_GPIO_Init+0x334>)
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	43db      	mvns	r3, r3
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	4013      	ands	r3, r2
 800713e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	4313      	orrs	r3, r2
 8007152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007154:	4a27      	ldr	r2, [pc, #156]	; (80071f4 <HAL_GPIO_Init+0x334>)
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800715a:	4b26      	ldr	r3, [pc, #152]	; (80071f4 <HAL_GPIO_Init+0x334>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	43db      	mvns	r3, r3
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	4013      	ands	r3, r2
 8007168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	4313      	orrs	r3, r2
 800717c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800717e:	4a1d      	ldr	r2, [pc, #116]	; (80071f4 <HAL_GPIO_Init+0x334>)
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007184:	4b1b      	ldr	r3, [pc, #108]	; (80071f4 <HAL_GPIO_Init+0x334>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	43db      	mvns	r3, r3
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	4013      	ands	r3, r2
 8007192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80071a8:	4a12      	ldr	r2, [pc, #72]	; (80071f4 <HAL_GPIO_Init+0x334>)
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	3301      	adds	r3, #1
 80071b2:	61fb      	str	r3, [r7, #28]
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	2b0f      	cmp	r3, #15
 80071b8:	f67f ae90 	bls.w	8006edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80071bc:	bf00      	nop
 80071be:	bf00      	nop
 80071c0:	3724      	adds	r7, #36	; 0x24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40023800 	.word	0x40023800
 80071d0:	40013800 	.word	0x40013800
 80071d4:	40020000 	.word	0x40020000
 80071d8:	40020400 	.word	0x40020400
 80071dc:	40020800 	.word	0x40020800
 80071e0:	40020c00 	.word	0x40020c00
 80071e4:	40021000 	.word	0x40021000
 80071e8:	40021400 	.word	0x40021400
 80071ec:	40021800 	.word	0x40021800
 80071f0:	40021c00 	.word	0x40021c00
 80071f4:	40013c00 	.word	0x40013c00

080071f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	807b      	strh	r3, [r7, #2]
 8007204:	4613      	mov	r3, r2
 8007206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007208:	787b      	ldrb	r3, [r7, #1]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800720e:	887a      	ldrh	r2, [r7, #2]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007214:	e003      	b.n	800721e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007216:	887b      	ldrh	r3, [r7, #2]
 8007218:	041a      	lsls	r2, r3, #16
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	619a      	str	r2, [r3, #24]
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800722a:	b480      	push	{r7}
 800722c:	b085      	sub	sp, #20
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800723c:	887a      	ldrh	r2, [r7, #2]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	4013      	ands	r3, r2
 8007242:	041a      	lsls	r2, r3, #16
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	43d9      	mvns	r1, r3
 8007248:	887b      	ldrh	r3, [r7, #2]
 800724a:	400b      	ands	r3, r1
 800724c:	431a      	orrs	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	619a      	str	r2, [r3, #24]
}
 8007252:	bf00      	nop
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	4603      	mov	r3, r0
 8007268:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800726a:	4b08      	ldr	r3, [pc, #32]	; (800728c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800726c:	695a      	ldr	r2, [r3, #20]
 800726e:	88fb      	ldrh	r3, [r7, #6]
 8007270:	4013      	ands	r3, r2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d006      	beq.n	8007284 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007276:	4a05      	ldr	r2, [pc, #20]	; (800728c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007278:	88fb      	ldrh	r3, [r7, #6]
 800727a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800727c:	88fb      	ldrh	r3, [r7, #6]
 800727e:	4618      	mov	r0, r3
 8007280:	f7fa ffda 	bl	8002238 <HAL_GPIO_EXTI_Callback>
  }
}
 8007284:	bf00      	nop
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	40013c00 	.word	0x40013c00

08007290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e12b      	b.n	80074fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d106      	bne.n	80072bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7fc fabc 	bl	8003834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2224      	movs	r2, #36	; 0x24
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f022 0201 	bic.w	r2, r2, #1
 80072d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80072f4:	f001 fbfc 	bl	8008af0 <HAL_RCC_GetPCLK1Freq>
 80072f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	4a81      	ldr	r2, [pc, #516]	; (8007504 <HAL_I2C_Init+0x274>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d807      	bhi.n	8007314 <HAL_I2C_Init+0x84>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4a80      	ldr	r2, [pc, #512]	; (8007508 <HAL_I2C_Init+0x278>)
 8007308:	4293      	cmp	r3, r2
 800730a:	bf94      	ite	ls
 800730c:	2301      	movls	r3, #1
 800730e:	2300      	movhi	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	e006      	b.n	8007322 <HAL_I2C_Init+0x92>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4a7d      	ldr	r2, [pc, #500]	; (800750c <HAL_I2C_Init+0x27c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	bf94      	ite	ls
 800731c:	2301      	movls	r3, #1
 800731e:	2300      	movhi	r3, #0
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e0e7      	b.n	80074fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4a78      	ldr	r2, [pc, #480]	; (8007510 <HAL_I2C_Init+0x280>)
 800732e:	fba2 2303 	umull	r2, r3, r2, r3
 8007332:	0c9b      	lsrs	r3, r3, #18
 8007334:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	4a6a      	ldr	r2, [pc, #424]	; (8007504 <HAL_I2C_Init+0x274>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d802      	bhi.n	8007364 <HAL_I2C_Init+0xd4>
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	3301      	adds	r3, #1
 8007362:	e009      	b.n	8007378 <HAL_I2C_Init+0xe8>
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800736a:	fb02 f303 	mul.w	r3, r2, r3
 800736e:	4a69      	ldr	r2, [pc, #420]	; (8007514 <HAL_I2C_Init+0x284>)
 8007370:	fba2 2303 	umull	r2, r3, r2, r3
 8007374:	099b      	lsrs	r3, r3, #6
 8007376:	3301      	adds	r3, #1
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6812      	ldr	r2, [r2, #0]
 800737c:	430b      	orrs	r3, r1
 800737e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800738a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	495c      	ldr	r1, [pc, #368]	; (8007504 <HAL_I2C_Init+0x274>)
 8007394:	428b      	cmp	r3, r1
 8007396:	d819      	bhi.n	80073cc <HAL_I2C_Init+0x13c>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	1e59      	subs	r1, r3, #1
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80073a6:	1c59      	adds	r1, r3, #1
 80073a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80073ac:	400b      	ands	r3, r1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <HAL_I2C_Init+0x138>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	1e59      	subs	r1, r3, #1
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80073c0:	3301      	adds	r3, #1
 80073c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073c6:	e051      	b.n	800746c <HAL_I2C_Init+0x1dc>
 80073c8:	2304      	movs	r3, #4
 80073ca:	e04f      	b.n	800746c <HAL_I2C_Init+0x1dc>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d111      	bne.n	80073f8 <HAL_I2C_Init+0x168>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	1e58      	subs	r0, r3, #1
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6859      	ldr	r1, [r3, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	440b      	add	r3, r1
 80073e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80073e6:	3301      	adds	r3, #1
 80073e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bf0c      	ite	eq
 80073f0:	2301      	moveq	r3, #1
 80073f2:	2300      	movne	r3, #0
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	e012      	b.n	800741e <HAL_I2C_Init+0x18e>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	1e58      	subs	r0, r3, #1
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6859      	ldr	r1, [r3, #4]
 8007400:	460b      	mov	r3, r1
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	440b      	add	r3, r1
 8007406:	0099      	lsls	r1, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	fbb0 f3f3 	udiv	r3, r0, r3
 800740e:	3301      	adds	r3, #1
 8007410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007414:	2b00      	cmp	r3, #0
 8007416:	bf0c      	ite	eq
 8007418:	2301      	moveq	r3, #1
 800741a:	2300      	movne	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <HAL_I2C_Init+0x196>
 8007422:	2301      	movs	r3, #1
 8007424:	e022      	b.n	800746c <HAL_I2C_Init+0x1dc>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10e      	bne.n	800744c <HAL_I2C_Init+0x1bc>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1e58      	subs	r0, r3, #1
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6859      	ldr	r1, [r3, #4]
 8007436:	460b      	mov	r3, r1
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	440b      	add	r3, r1
 800743c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007440:	3301      	adds	r3, #1
 8007442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800744a:	e00f      	b.n	800746c <HAL_I2C_Init+0x1dc>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	1e58      	subs	r0, r3, #1
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6859      	ldr	r1, [r3, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	440b      	add	r3, r1
 800745a:	0099      	lsls	r1, r3, #2
 800745c:	440b      	add	r3, r1
 800745e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007462:	3301      	adds	r3, #1
 8007464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	6809      	ldr	r1, [r1, #0]
 8007470:	4313      	orrs	r3, r2
 8007472:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69da      	ldr	r2, [r3, #28]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	431a      	orrs	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800749a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6911      	ldr	r1, [r2, #16]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	68d2      	ldr	r2, [r2, #12]
 80074a6:	4311      	orrs	r1, r2
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6812      	ldr	r2, [r2, #0]
 80074ac:	430b      	orrs	r3, r1
 80074ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	695a      	ldr	r2, [r3, #20]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0201 	orr.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	000186a0 	.word	0x000186a0
 8007508:	001e847f 	.word	0x001e847f
 800750c:	003d08ff 	.word	0x003d08ff
 8007510:	431bde83 	.word	0x431bde83
 8007514:	10624dd3 	.word	0x10624dd3

08007518 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	af02      	add	r7, sp, #8
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	4608      	mov	r0, r1
 8007522:	4611      	mov	r1, r2
 8007524:	461a      	mov	r2, r3
 8007526:	4603      	mov	r3, r0
 8007528:	817b      	strh	r3, [r7, #10]
 800752a:	460b      	mov	r3, r1
 800752c:	813b      	strh	r3, [r7, #8]
 800752e:	4613      	mov	r3, r2
 8007530:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007532:	f7fe fd1f 	bl	8005f74 <HAL_GetTick>
 8007536:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b20      	cmp	r3, #32
 8007542:	f040 80d9 	bne.w	80076f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	2319      	movs	r3, #25
 800754c:	2201      	movs	r2, #1
 800754e:	496d      	ldr	r1, [pc, #436]	; (8007704 <HAL_I2C_Mem_Write+0x1ec>)
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fc7f 	bl	8007e54 <I2C_WaitOnFlagUntilTimeout>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800755c:	2302      	movs	r3, #2
 800755e:	e0cc      	b.n	80076fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007566:	2b01      	cmp	r3, #1
 8007568:	d101      	bne.n	800756e <HAL_I2C_Mem_Write+0x56>
 800756a:	2302      	movs	r3, #2
 800756c:	e0c5      	b.n	80076fa <HAL_I2C_Mem_Write+0x1e2>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b01      	cmp	r3, #1
 8007582:	d007      	beq.n	8007594 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f042 0201 	orr.w	r2, r2, #1
 8007592:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2221      	movs	r2, #33	; 0x21
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2240      	movs	r2, #64	; 0x40
 80075b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a3a      	ldr	r2, [r7, #32]
 80075be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4a4d      	ldr	r2, [pc, #308]	; (8007708 <HAL_I2C_Mem_Write+0x1f0>)
 80075d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075d6:	88f8      	ldrh	r0, [r7, #6]
 80075d8:	893a      	ldrh	r2, [r7, #8]
 80075da:	8979      	ldrh	r1, [r7, #10]
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	9301      	str	r3, [sp, #4]
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	4603      	mov	r3, r0
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 fab6 	bl	8007b58 <I2C_RequestMemoryWrite>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d052      	beq.n	8007698 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e081      	b.n	80076fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 fd00 	bl	8008000 <I2C_WaitOnTXEFlagUntilTimeout>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00d      	beq.n	8007622 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	2b04      	cmp	r3, #4
 800760c:	d107      	bne.n	800761e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800761c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e06b      	b.n	80076fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	781a      	ldrb	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800763c:	3b01      	subs	r3, #1
 800763e:	b29a      	uxth	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007648:	b29b      	uxth	r3, r3
 800764a:	3b01      	subs	r3, #1
 800764c:	b29a      	uxth	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b04      	cmp	r3, #4
 800765e:	d11b      	bne.n	8007698 <HAL_I2C_Mem_Write+0x180>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007664:	2b00      	cmp	r3, #0
 8007666:	d017      	beq.n	8007698 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	781a      	ldrb	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	1c5a      	adds	r2, r3, #1
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800768e:	b29b      	uxth	r3, r3
 8007690:	3b01      	subs	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1aa      	bne.n	80075f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 fcec 	bl	8008082 <I2C_WaitOnBTFFlagUntilTimeout>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00d      	beq.n	80076cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b4:	2b04      	cmp	r3, #4
 80076b6:	d107      	bne.n	80076c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e016      	b.n	80076fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2220      	movs	r2, #32
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	e000      	b.n	80076fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80076f8:	2302      	movs	r3, #2
  }
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3718      	adds	r7, #24
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	00100002 	.word	0x00100002
 8007708:	ffff0000 	.word	0xffff0000

0800770c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b08c      	sub	sp, #48	; 0x30
 8007710:	af02      	add	r7, sp, #8
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	4608      	mov	r0, r1
 8007716:	4611      	mov	r1, r2
 8007718:	461a      	mov	r2, r3
 800771a:	4603      	mov	r3, r0
 800771c:	817b      	strh	r3, [r7, #10]
 800771e:	460b      	mov	r3, r1
 8007720:	813b      	strh	r3, [r7, #8]
 8007722:	4613      	mov	r3, r2
 8007724:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007726:	f7fe fc25 	bl	8005f74 <HAL_GetTick>
 800772a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b20      	cmp	r3, #32
 8007736:	f040 8208 	bne.w	8007b4a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	2319      	movs	r3, #25
 8007740:	2201      	movs	r2, #1
 8007742:	497b      	ldr	r1, [pc, #492]	; (8007930 <HAL_I2C_Mem_Read+0x224>)
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 fb85 	bl	8007e54 <I2C_WaitOnFlagUntilTimeout>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007750:	2302      	movs	r3, #2
 8007752:	e1fb      	b.n	8007b4c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800775a:	2b01      	cmp	r3, #1
 800775c:	d101      	bne.n	8007762 <HAL_I2C_Mem_Read+0x56>
 800775e:	2302      	movs	r3, #2
 8007760:	e1f4      	b.n	8007b4c <HAL_I2C_Mem_Read+0x440>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b01      	cmp	r3, #1
 8007776:	d007      	beq.n	8007788 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0201 	orr.w	r2, r2, #1
 8007786:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007796:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2222      	movs	r2, #34	; 0x22
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2240      	movs	r2, #64	; 0x40
 80077a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80077b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4a5b      	ldr	r2, [pc, #364]	; (8007934 <HAL_I2C_Mem_Read+0x228>)
 80077c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077ca:	88f8      	ldrh	r0, [r7, #6]
 80077cc:	893a      	ldrh	r2, [r7, #8]
 80077ce:	8979      	ldrh	r1, [r7, #10]
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	9301      	str	r3, [sp, #4]
 80077d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	4603      	mov	r3, r0
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 fa52 	bl	8007c84 <I2C_RequestMemoryRead>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e1b0      	b.n	8007b4c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d113      	bne.n	800781a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077f2:	2300      	movs	r3, #0
 80077f4:	623b      	str	r3, [r7, #32]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	623b      	str	r3, [r7, #32]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	623b      	str	r3, [r7, #32]
 8007806:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	e184      	b.n	8007b24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781e:	2b01      	cmp	r3, #1
 8007820:	d11b      	bne.n	800785a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007830:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007832:	2300      	movs	r3, #0
 8007834:	61fb      	str	r3, [r7, #28]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	61fb      	str	r3, [r7, #28]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	61fb      	str	r3, [r7, #28]
 8007846:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	e164      	b.n	8007b24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800785e:	2b02      	cmp	r3, #2
 8007860:	d11b      	bne.n	800789a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007870:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007880:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007882:	2300      	movs	r3, #0
 8007884:	61bb      	str	r3, [r7, #24]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	61bb      	str	r3, [r7, #24]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	61bb      	str	r3, [r7, #24]
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	e144      	b.n	8007b24 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800789a:	2300      	movs	r3, #0
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	617b      	str	r3, [r7, #20]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	617b      	str	r3, [r7, #20]
 80078ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80078b0:	e138      	b.n	8007b24 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	f200 80f1 	bhi.w	8007a9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d123      	bne.n	800790c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 fc1b 	bl	8008104 <I2C_WaitOnRXNEFlagUntilTimeout>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e139      	b.n	8007b4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	691a      	ldr	r2, [r3, #16]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	855a      	strh	r2, [r3, #42]	; 0x2a
 800790a:	e10b      	b.n	8007b24 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007910:	2b02      	cmp	r3, #2
 8007912:	d14e      	bne.n	80079b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	2200      	movs	r2, #0
 800791c:	4906      	ldr	r1, [pc, #24]	; (8007938 <HAL_I2C_Mem_Read+0x22c>)
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 fa98 	bl	8007e54 <I2C_WaitOnFlagUntilTimeout>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d008      	beq.n	800793c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e10e      	b.n	8007b4c <HAL_I2C_Mem_Read+0x440>
 800792e:	bf00      	nop
 8007930:	00100002 	.word	0x00100002
 8007934:	ffff0000 	.word	0xffff0000
 8007938:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800794a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691a      	ldr	r2, [r3, #16]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007968:	3b01      	subs	r3, #1
 800796a:	b29a      	uxth	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007974:	b29b      	uxth	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	691a      	ldr	r2, [r3, #16]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007988:	b2d2      	uxtb	r2, r2
 800798a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800799a:	3b01      	subs	r3, #1
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	3b01      	subs	r3, #1
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079b0:	e0b8      	b.n	8007b24 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b8:	2200      	movs	r2, #0
 80079ba:	4966      	ldr	r1, [pc, #408]	; (8007b54 <HAL_I2C_Mem_Read+0x448>)
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 fa49 	bl	8007e54 <I2C_WaitOnFlagUntilTimeout>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e0bf      	b.n	8007b4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	691a      	ldr	r2, [r3, #16]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	b2d2      	uxtb	r2, r2
 80079e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f8:	3b01      	subs	r3, #1
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	3b01      	subs	r3, #1
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a14:	2200      	movs	r2, #0
 8007a16:	494f      	ldr	r1, [pc, #316]	; (8007b54 <HAL_I2C_Mem_Read+0x448>)
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 fa1b 	bl	8007e54 <I2C_WaitOnFlagUntilTimeout>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e091      	b.n	8007b4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	691a      	ldr	r2, [r3, #16]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	691a      	ldr	r2, [r3, #16]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	b2d2      	uxtb	r2, r2
 8007a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a86:	3b01      	subs	r3, #1
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	3b01      	subs	r3, #1
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a9c:	e042      	b.n	8007b24 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f000 fb2e 	bl	8008104 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e04c      	b.n	8007b4c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	691a      	ldr	r2, [r3, #16]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	b2d2      	uxtb	r2, r2
 8007abe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	1c5a      	adds	r2, r3, #1
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	3b01      	subs	r3, #1
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	f003 0304 	and.w	r3, r3, #4
 8007aee:	2b04      	cmp	r3, #4
 8007af0:	d118      	bne.n	8007b24 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	691a      	ldr	r2, [r3, #16]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f47f aec2 	bne.w	80078b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2220      	movs	r2, #32
 8007b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	e000      	b.n	8007b4c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007b4a:	2302      	movs	r3, #2
  }
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3728      	adds	r7, #40	; 0x28
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	00010004 	.word	0x00010004

08007b58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af02      	add	r7, sp, #8
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	4608      	mov	r0, r1
 8007b62:	4611      	mov	r1, r2
 8007b64:	461a      	mov	r2, r3
 8007b66:	4603      	mov	r3, r0
 8007b68:	817b      	strh	r3, [r7, #10]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	813b      	strh	r3, [r7, #8]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 f960 	bl	8007e54 <I2C_WaitOnFlagUntilTimeout>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00d      	beq.n	8007bb6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ba8:	d103      	bne.n	8007bb2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e05f      	b.n	8007c76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007bb6:	897b      	ldrh	r3, [r7, #10]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	461a      	mov	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007bc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	6a3a      	ldr	r2, [r7, #32]
 8007bca:	492d      	ldr	r1, [pc, #180]	; (8007c80 <I2C_RequestMemoryWrite+0x128>)
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 f998 	bl	8007f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e04c      	b.n	8007c76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bdc:	2300      	movs	r3, #0
 8007bde:	617b      	str	r3, [r7, #20]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	617b      	str	r3, [r7, #20]
 8007bf0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf4:	6a39      	ldr	r1, [r7, #32]
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 fa02 	bl	8008000 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00d      	beq.n	8007c1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d107      	bne.n	8007c1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e02b      	b.n	8007c76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c1e:	88fb      	ldrh	r3, [r7, #6]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d105      	bne.n	8007c30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c24:	893b      	ldrh	r3, [r7, #8]
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	611a      	str	r2, [r3, #16]
 8007c2e:	e021      	b.n	8007c74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c30:	893b      	ldrh	r3, [r7, #8]
 8007c32:	0a1b      	lsrs	r3, r3, #8
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c40:	6a39      	ldr	r1, [r7, #32]
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 f9dc 	bl	8008000 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00d      	beq.n	8007c6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	d107      	bne.n	8007c66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e005      	b.n	8007c76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c6a:	893b      	ldrh	r3, [r7, #8]
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	00010002 	.word	0x00010002

08007c84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af02      	add	r7, sp, #8
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	4608      	mov	r0, r1
 8007c8e:	4611      	mov	r1, r2
 8007c90:	461a      	mov	r2, r3
 8007c92:	4603      	mov	r3, r0
 8007c94:	817b      	strh	r3, [r7, #10]
 8007c96:	460b      	mov	r3, r1
 8007c98:	813b      	strh	r3, [r7, #8]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	6a3b      	ldr	r3, [r7, #32]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 f8c2 	bl	8007e54 <I2C_WaitOnFlagUntilTimeout>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00d      	beq.n	8007cf2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ce4:	d103      	bne.n	8007cee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e0aa      	b.n	8007e48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cf2:	897b      	ldrh	r3, [r7, #10]
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	6a3a      	ldr	r2, [r7, #32]
 8007d06:	4952      	ldr	r1, [pc, #328]	; (8007e50 <I2C_RequestMemoryRead+0x1cc>)
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 f8fa 	bl	8007f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e097      	b.n	8007e48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	617b      	str	r3, [r7, #20]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	617b      	str	r3, [r7, #20]
 8007d2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d30:	6a39      	ldr	r1, [r7, #32]
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 f964 	bl	8008000 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00d      	beq.n	8007d5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d107      	bne.n	8007d56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e076      	b.n	8007e48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d5a:	88fb      	ldrh	r3, [r7, #6]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d105      	bne.n	8007d6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d60:	893b      	ldrh	r3, [r7, #8]
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	611a      	str	r2, [r3, #16]
 8007d6a:	e021      	b.n	8007db0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d6c:	893b      	ldrh	r3, [r7, #8]
 8007d6e:	0a1b      	lsrs	r3, r3, #8
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d7c:	6a39      	ldr	r1, [r7, #32]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 f93e 	bl	8008000 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00d      	beq.n	8007da6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d107      	bne.n	8007da2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007da0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e050      	b.n	8007e48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007da6:	893b      	ldrh	r3, [r7, #8]
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007db2:	6a39      	ldr	r1, [r7, #32]
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 f923 	bl	8008000 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00d      	beq.n	8007ddc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d107      	bne.n	8007dd8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e035      	b.n	8007e48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	6a3b      	ldr	r3, [r7, #32]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 f82b 	bl	8007e54 <I2C_WaitOnFlagUntilTimeout>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00d      	beq.n	8007e20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e12:	d103      	bne.n	8007e1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e013      	b.n	8007e48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e20:	897b      	ldrh	r3, [r7, #10]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f043 0301 	orr.w	r3, r3, #1
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	6a3a      	ldr	r2, [r7, #32]
 8007e34:	4906      	ldr	r1, [pc, #24]	; (8007e50 <I2C_RequestMemoryRead+0x1cc>)
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f863 	bl	8007f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3718      	adds	r7, #24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	00010002 	.word	0x00010002

08007e54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	4613      	mov	r3, r2
 8007e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e64:	e025      	b.n	8007eb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6c:	d021      	beq.n	8007eb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e6e:	f7fe f881 	bl	8005f74 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d302      	bcc.n	8007e84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d116      	bne.n	8007eb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9e:	f043 0220 	orr.w	r2, r3, #32
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e023      	b.n	8007efa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	0c1b      	lsrs	r3, r3, #16
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d10d      	bne.n	8007ed8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	43da      	mvns	r2, r3
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	bf0c      	ite	eq
 8007ece:	2301      	moveq	r3, #1
 8007ed0:	2300      	movne	r3, #0
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	e00c      	b.n	8007ef2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	43da      	mvns	r2, r3
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bf0c      	ite	eq
 8007eea:	2301      	moveq	r3, #1
 8007eec:	2300      	movne	r3, #0
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	79fb      	ldrb	r3, [r7, #7]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d0b6      	beq.n	8007e66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
 8007f0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f10:	e051      	b.n	8007fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f20:	d123      	bne.n	8007f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f56:	f043 0204 	orr.w	r2, r3, #4
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e046      	b.n	8007ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f70:	d021      	beq.n	8007fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f72:	f7fd ffff 	bl	8005f74 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d302      	bcc.n	8007f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d116      	bne.n	8007fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2220      	movs	r2, #32
 8007f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa2:	f043 0220 	orr.w	r2, r3, #32
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e020      	b.n	8007ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	0c1b      	lsrs	r3, r3, #16
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d10c      	bne.n	8007fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	43da      	mvns	r2, r3
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	bf14      	ite	ne
 8007fd2:	2301      	movne	r3, #1
 8007fd4:	2300      	moveq	r3, #0
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	e00b      	b.n	8007ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	43da      	mvns	r2, r3
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bf14      	ite	ne
 8007fec:	2301      	movne	r3, #1
 8007fee:	2300      	moveq	r3, #0
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d18d      	bne.n	8007f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800800c:	e02d      	b.n	800806a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 f8ce 	bl	80081b0 <I2C_IsAcknowledgeFailed>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e02d      	b.n	800807a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008024:	d021      	beq.n	800806a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008026:	f7fd ffa5 	bl	8005f74 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	429a      	cmp	r2, r3
 8008034:	d302      	bcc.n	800803c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d116      	bne.n	800806a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2220      	movs	r2, #32
 8008046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	f043 0220 	orr.w	r2, r3, #32
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e007      	b.n	800807a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008074:	2b80      	cmp	r3, #128	; 0x80
 8008076:	d1ca      	bne.n	800800e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b084      	sub	sp, #16
 8008086:	af00      	add	r7, sp, #0
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800808e:	e02d      	b.n	80080ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 f88d 	bl	80081b0 <I2C_IsAcknowledgeFailed>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d001      	beq.n	80080a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e02d      	b.n	80080fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a6:	d021      	beq.n	80080ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080a8:	f7fd ff64 	bl	8005f74 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d302      	bcc.n	80080be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d116      	bne.n	80080ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2220      	movs	r2, #32
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d8:	f043 0220 	orr.w	r2, r3, #32
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e007      	b.n	80080fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	f003 0304 	and.w	r3, r3, #4
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	d1ca      	bne.n	8008090 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008110:	e042      	b.n	8008198 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	f003 0310 	and.w	r3, r3, #16
 800811c:	2b10      	cmp	r3, #16
 800811e:	d119      	bne.n	8008154 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f06f 0210 	mvn.w	r2, #16
 8008128:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2220      	movs	r2, #32
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e029      	b.n	80081a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008154:	f7fd ff0e 	bl	8005f74 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	429a      	cmp	r2, r3
 8008162:	d302      	bcc.n	800816a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d116      	bne.n	8008198 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2220      	movs	r2, #32
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008184:	f043 0220 	orr.w	r2, r3, #32
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e007      	b.n	80081a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a2:	2b40      	cmp	r3, #64	; 0x40
 80081a4:	d1b5      	bne.n	8008112 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081c6:	d11b      	bne.n	8008200 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2220      	movs	r2, #32
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ec:	f043 0204 	orr.w	r2, r3, #4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e000      	b.n	8008202 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
	...

08008210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e267      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d075      	beq.n	800831a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800822e:	4b88      	ldr	r3, [pc, #544]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f003 030c 	and.w	r3, r3, #12
 8008236:	2b04      	cmp	r3, #4
 8008238:	d00c      	beq.n	8008254 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800823a:	4b85      	ldr	r3, [pc, #532]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008242:	2b08      	cmp	r3, #8
 8008244:	d112      	bne.n	800826c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008246:	4b82      	ldr	r3, [pc, #520]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800824e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008252:	d10b      	bne.n	800826c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008254:	4b7e      	ldr	r3, [pc, #504]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d05b      	beq.n	8008318 <HAL_RCC_OscConfig+0x108>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d157      	bne.n	8008318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e242      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008274:	d106      	bne.n	8008284 <HAL_RCC_OscConfig+0x74>
 8008276:	4b76      	ldr	r3, [pc, #472]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a75      	ldr	r2, [pc, #468]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 800827c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008280:	6013      	str	r3, [r2, #0]
 8008282:	e01d      	b.n	80082c0 <HAL_RCC_OscConfig+0xb0>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800828c:	d10c      	bne.n	80082a8 <HAL_RCC_OscConfig+0x98>
 800828e:	4b70      	ldr	r3, [pc, #448]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a6f      	ldr	r2, [pc, #444]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 8008294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	4b6d      	ldr	r3, [pc, #436]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a6c      	ldr	r2, [pc, #432]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 80082a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082a4:	6013      	str	r3, [r2, #0]
 80082a6:	e00b      	b.n	80082c0 <HAL_RCC_OscConfig+0xb0>
 80082a8:	4b69      	ldr	r3, [pc, #420]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a68      	ldr	r2, [pc, #416]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 80082ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	4b66      	ldr	r3, [pc, #408]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a65      	ldr	r2, [pc, #404]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 80082ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d013      	beq.n	80082f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082c8:	f7fd fe54 	bl	8005f74 <HAL_GetTick>
 80082cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082ce:	e008      	b.n	80082e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082d0:	f7fd fe50 	bl	8005f74 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	2b64      	cmp	r3, #100	; 0x64
 80082dc:	d901      	bls.n	80082e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e207      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082e2:	4b5b      	ldr	r3, [pc, #364]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0f0      	beq.n	80082d0 <HAL_RCC_OscConfig+0xc0>
 80082ee:	e014      	b.n	800831a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082f0:	f7fd fe40 	bl	8005f74 <HAL_GetTick>
 80082f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082f6:	e008      	b.n	800830a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082f8:	f7fd fe3c 	bl	8005f74 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	2b64      	cmp	r3, #100	; 0x64
 8008304:	d901      	bls.n	800830a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e1f3      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800830a:	4b51      	ldr	r3, [pc, #324]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1f0      	bne.n	80082f8 <HAL_RCC_OscConfig+0xe8>
 8008316:	e000      	b.n	800831a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d063      	beq.n	80083ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008326:	4b4a      	ldr	r3, [pc, #296]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f003 030c 	and.w	r3, r3, #12
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00b      	beq.n	800834a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008332:	4b47      	ldr	r3, [pc, #284]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800833a:	2b08      	cmp	r3, #8
 800833c:	d11c      	bne.n	8008378 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800833e:	4b44      	ldr	r3, [pc, #272]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d116      	bne.n	8008378 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800834a:	4b41      	ldr	r3, [pc, #260]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	2b00      	cmp	r3, #0
 8008354:	d005      	beq.n	8008362 <HAL_RCC_OscConfig+0x152>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d001      	beq.n	8008362 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e1c7      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008362:	4b3b      	ldr	r3, [pc, #236]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	00db      	lsls	r3, r3, #3
 8008370:	4937      	ldr	r1, [pc, #220]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 8008372:	4313      	orrs	r3, r2
 8008374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008376:	e03a      	b.n	80083ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d020      	beq.n	80083c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008380:	4b34      	ldr	r3, [pc, #208]	; (8008454 <HAL_RCC_OscConfig+0x244>)
 8008382:	2201      	movs	r2, #1
 8008384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008386:	f7fd fdf5 	bl	8005f74 <HAL_GetTick>
 800838a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800838c:	e008      	b.n	80083a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800838e:	f7fd fdf1 	bl	8005f74 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	2b02      	cmp	r3, #2
 800839a:	d901      	bls.n	80083a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e1a8      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083a0:	4b2b      	ldr	r3, [pc, #172]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0f0      	beq.n	800838e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083ac:	4b28      	ldr	r3, [pc, #160]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	4925      	ldr	r1, [pc, #148]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	600b      	str	r3, [r1, #0]
 80083c0:	e015      	b.n	80083ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083c2:	4b24      	ldr	r3, [pc, #144]	; (8008454 <HAL_RCC_OscConfig+0x244>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c8:	f7fd fdd4 	bl	8005f74 <HAL_GetTick>
 80083cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083ce:	e008      	b.n	80083e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083d0:	f7fd fdd0 	bl	8005f74 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d901      	bls.n	80083e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e187      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083e2:	4b1b      	ldr	r3, [pc, #108]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1f0      	bne.n	80083d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0308 	and.w	r3, r3, #8
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d036      	beq.n	8008468 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d016      	beq.n	8008430 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008402:	4b15      	ldr	r3, [pc, #84]	; (8008458 <HAL_RCC_OscConfig+0x248>)
 8008404:	2201      	movs	r2, #1
 8008406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008408:	f7fd fdb4 	bl	8005f74 <HAL_GetTick>
 800840c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800840e:	e008      	b.n	8008422 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008410:	f7fd fdb0 	bl	8005f74 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	2b02      	cmp	r3, #2
 800841c:	d901      	bls.n	8008422 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e167      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008422:	4b0b      	ldr	r3, [pc, #44]	; (8008450 <HAL_RCC_OscConfig+0x240>)
 8008424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0f0      	beq.n	8008410 <HAL_RCC_OscConfig+0x200>
 800842e:	e01b      	b.n	8008468 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008430:	4b09      	ldr	r3, [pc, #36]	; (8008458 <HAL_RCC_OscConfig+0x248>)
 8008432:	2200      	movs	r2, #0
 8008434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008436:	f7fd fd9d 	bl	8005f74 <HAL_GetTick>
 800843a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800843c:	e00e      	b.n	800845c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800843e:	f7fd fd99 	bl	8005f74 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d907      	bls.n	800845c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e150      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
 8008450:	40023800 	.word	0x40023800
 8008454:	42470000 	.word	0x42470000
 8008458:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800845c:	4b88      	ldr	r3, [pc, #544]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 800845e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008460:	f003 0302 	and.w	r3, r3, #2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1ea      	bne.n	800843e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0304 	and.w	r3, r3, #4
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 8097 	beq.w	80085a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008476:	2300      	movs	r3, #0
 8008478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800847a:	4b81      	ldr	r3, [pc, #516]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10f      	bne.n	80084a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008486:	2300      	movs	r3, #0
 8008488:	60bb      	str	r3, [r7, #8]
 800848a:	4b7d      	ldr	r3, [pc, #500]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 800848c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848e:	4a7c      	ldr	r2, [pc, #496]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 8008490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008494:	6413      	str	r3, [r2, #64]	; 0x40
 8008496:	4b7a      	ldr	r3, [pc, #488]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 8008498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800849e:	60bb      	str	r3, [r7, #8]
 80084a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084a2:	2301      	movs	r3, #1
 80084a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084a6:	4b77      	ldr	r3, [pc, #476]	; (8008684 <HAL_RCC_OscConfig+0x474>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d118      	bne.n	80084e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084b2:	4b74      	ldr	r3, [pc, #464]	; (8008684 <HAL_RCC_OscConfig+0x474>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a73      	ldr	r2, [pc, #460]	; (8008684 <HAL_RCC_OscConfig+0x474>)
 80084b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084be:	f7fd fd59 	bl	8005f74 <HAL_GetTick>
 80084c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084c4:	e008      	b.n	80084d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084c6:	f7fd fd55 	bl	8005f74 <HAL_GetTick>
 80084ca:	4602      	mov	r2, r0
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d901      	bls.n	80084d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e10c      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084d8:	4b6a      	ldr	r3, [pc, #424]	; (8008684 <HAL_RCC_OscConfig+0x474>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d0f0      	beq.n	80084c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d106      	bne.n	80084fa <HAL_RCC_OscConfig+0x2ea>
 80084ec:	4b64      	ldr	r3, [pc, #400]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 80084ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f0:	4a63      	ldr	r2, [pc, #396]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 80084f2:	f043 0301 	orr.w	r3, r3, #1
 80084f6:	6713      	str	r3, [r2, #112]	; 0x70
 80084f8:	e01c      	b.n	8008534 <HAL_RCC_OscConfig+0x324>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	2b05      	cmp	r3, #5
 8008500:	d10c      	bne.n	800851c <HAL_RCC_OscConfig+0x30c>
 8008502:	4b5f      	ldr	r3, [pc, #380]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 8008504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008506:	4a5e      	ldr	r2, [pc, #376]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 8008508:	f043 0304 	orr.w	r3, r3, #4
 800850c:	6713      	str	r3, [r2, #112]	; 0x70
 800850e:	4b5c      	ldr	r3, [pc, #368]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 8008510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008512:	4a5b      	ldr	r2, [pc, #364]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 8008514:	f043 0301 	orr.w	r3, r3, #1
 8008518:	6713      	str	r3, [r2, #112]	; 0x70
 800851a:	e00b      	b.n	8008534 <HAL_RCC_OscConfig+0x324>
 800851c:	4b58      	ldr	r3, [pc, #352]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 800851e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008520:	4a57      	ldr	r2, [pc, #348]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 8008522:	f023 0301 	bic.w	r3, r3, #1
 8008526:	6713      	str	r3, [r2, #112]	; 0x70
 8008528:	4b55      	ldr	r3, [pc, #340]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 800852a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852c:	4a54      	ldr	r2, [pc, #336]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 800852e:	f023 0304 	bic.w	r3, r3, #4
 8008532:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d015      	beq.n	8008568 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800853c:	f7fd fd1a 	bl	8005f74 <HAL_GetTick>
 8008540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008542:	e00a      	b.n	800855a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008544:	f7fd fd16 	bl	8005f74 <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008552:	4293      	cmp	r3, r2
 8008554:	d901      	bls.n	800855a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e0cb      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800855a:	4b49      	ldr	r3, [pc, #292]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 800855c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0ee      	beq.n	8008544 <HAL_RCC_OscConfig+0x334>
 8008566:	e014      	b.n	8008592 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008568:	f7fd fd04 	bl	8005f74 <HAL_GetTick>
 800856c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800856e:	e00a      	b.n	8008586 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008570:	f7fd fd00 	bl	8005f74 <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	f241 3288 	movw	r2, #5000	; 0x1388
 800857e:	4293      	cmp	r3, r2
 8008580:	d901      	bls.n	8008586 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e0b5      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008586:	4b3e      	ldr	r3, [pc, #248]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 8008588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800858a:	f003 0302 	and.w	r3, r3, #2
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1ee      	bne.n	8008570 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008592:	7dfb      	ldrb	r3, [r7, #23]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d105      	bne.n	80085a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008598:	4b39      	ldr	r3, [pc, #228]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 800859a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859c:	4a38      	ldr	r2, [pc, #224]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 800859e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 80a1 	beq.w	80086f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80085ae:	4b34      	ldr	r3, [pc, #208]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f003 030c 	and.w	r3, r3, #12
 80085b6:	2b08      	cmp	r3, #8
 80085b8:	d05c      	beq.n	8008674 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d141      	bne.n	8008646 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085c2:	4b31      	ldr	r3, [pc, #196]	; (8008688 <HAL_RCC_OscConfig+0x478>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085c8:	f7fd fcd4 	bl	8005f74 <HAL_GetTick>
 80085cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085ce:	e008      	b.n	80085e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085d0:	f7fd fcd0 	bl	8005f74 <HAL_GetTick>
 80085d4:	4602      	mov	r2, r0
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d901      	bls.n	80085e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e087      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085e2:	4b27      	ldr	r3, [pc, #156]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1f0      	bne.n	80085d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	69da      	ldr	r2, [r3, #28]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	431a      	orrs	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	019b      	lsls	r3, r3, #6
 80085fe:	431a      	orrs	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	085b      	lsrs	r3, r3, #1
 8008606:	3b01      	subs	r3, #1
 8008608:	041b      	lsls	r3, r3, #16
 800860a:	431a      	orrs	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008610:	061b      	lsls	r3, r3, #24
 8008612:	491b      	ldr	r1, [pc, #108]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 8008614:	4313      	orrs	r3, r2
 8008616:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008618:	4b1b      	ldr	r3, [pc, #108]	; (8008688 <HAL_RCC_OscConfig+0x478>)
 800861a:	2201      	movs	r2, #1
 800861c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800861e:	f7fd fca9 	bl	8005f74 <HAL_GetTick>
 8008622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008624:	e008      	b.n	8008638 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008626:	f7fd fca5 	bl	8005f74 <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	2b02      	cmp	r3, #2
 8008632:	d901      	bls.n	8008638 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e05c      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008638:	4b11      	ldr	r3, [pc, #68]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d0f0      	beq.n	8008626 <HAL_RCC_OscConfig+0x416>
 8008644:	e054      	b.n	80086f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008646:	4b10      	ldr	r3, [pc, #64]	; (8008688 <HAL_RCC_OscConfig+0x478>)
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800864c:	f7fd fc92 	bl	8005f74 <HAL_GetTick>
 8008650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008652:	e008      	b.n	8008666 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008654:	f7fd fc8e 	bl	8005f74 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b02      	cmp	r3, #2
 8008660:	d901      	bls.n	8008666 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e045      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008666:	4b06      	ldr	r3, [pc, #24]	; (8008680 <HAL_RCC_OscConfig+0x470>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1f0      	bne.n	8008654 <HAL_RCC_OscConfig+0x444>
 8008672:	e03d      	b.n	80086f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d107      	bne.n	800868c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e038      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
 8008680:	40023800 	.word	0x40023800
 8008684:	40007000 	.word	0x40007000
 8008688:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800868c:	4b1b      	ldr	r3, [pc, #108]	; (80086fc <HAL_RCC_OscConfig+0x4ec>)
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d028      	beq.n	80086ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d121      	bne.n	80086ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d11a      	bne.n	80086ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80086bc:	4013      	ands	r3, r2
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80086c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d111      	bne.n	80086ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d2:	085b      	lsrs	r3, r3, #1
 80086d4:	3b01      	subs	r3, #1
 80086d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80086d8:	429a      	cmp	r2, r3
 80086da:	d107      	bne.n	80086ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d001      	beq.n	80086f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e000      	b.n	80086f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	40023800 	.word	0x40023800

08008700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d101      	bne.n	8008714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e0cc      	b.n	80088ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008714:	4b68      	ldr	r3, [pc, #416]	; (80088b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0307 	and.w	r3, r3, #7
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	429a      	cmp	r2, r3
 8008720:	d90c      	bls.n	800873c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008722:	4b65      	ldr	r3, [pc, #404]	; (80088b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	b2d2      	uxtb	r2, r2
 8008728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800872a:	4b63      	ldr	r3, [pc, #396]	; (80088b8 <HAL_RCC_ClockConfig+0x1b8>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	429a      	cmp	r2, r3
 8008736:	d001      	beq.n	800873c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e0b8      	b.n	80088ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b00      	cmp	r3, #0
 8008746:	d020      	beq.n	800878a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0304 	and.w	r3, r3, #4
 8008750:	2b00      	cmp	r3, #0
 8008752:	d005      	beq.n	8008760 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008754:	4b59      	ldr	r3, [pc, #356]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	4a58      	ldr	r2, [pc, #352]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 800875a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800875e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0308 	and.w	r3, r3, #8
 8008768:	2b00      	cmp	r3, #0
 800876a:	d005      	beq.n	8008778 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800876c:	4b53      	ldr	r3, [pc, #332]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	4a52      	ldr	r2, [pc, #328]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 8008772:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008776:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008778:	4b50      	ldr	r3, [pc, #320]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	494d      	ldr	r1, [pc, #308]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 8008786:	4313      	orrs	r3, r2
 8008788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d044      	beq.n	8008820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d107      	bne.n	80087ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800879e:	4b47      	ldr	r3, [pc, #284]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d119      	bne.n	80087de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e07f      	b.n	80088ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d003      	beq.n	80087be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	d107      	bne.n	80087ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087be:	4b3f      	ldr	r3, [pc, #252]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d109      	bne.n	80087de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e06f      	b.n	80088ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087ce:	4b3b      	ldr	r3, [pc, #236]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e067      	b.n	80088ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087de:	4b37      	ldr	r3, [pc, #220]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f023 0203 	bic.w	r2, r3, #3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	4934      	ldr	r1, [pc, #208]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 80087ec:	4313      	orrs	r3, r2
 80087ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087f0:	f7fd fbc0 	bl	8005f74 <HAL_GetTick>
 80087f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087f6:	e00a      	b.n	800880e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087f8:	f7fd fbbc 	bl	8005f74 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	f241 3288 	movw	r2, #5000	; 0x1388
 8008806:	4293      	cmp	r3, r2
 8008808:	d901      	bls.n	800880e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e04f      	b.n	80088ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800880e:	4b2b      	ldr	r3, [pc, #172]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f003 020c 	and.w	r2, r3, #12
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	429a      	cmp	r2, r3
 800881e:	d1eb      	bne.n	80087f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008820:	4b25      	ldr	r3, [pc, #148]	; (80088b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0307 	and.w	r3, r3, #7
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d20c      	bcs.n	8008848 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800882e:	4b22      	ldr	r3, [pc, #136]	; (80088b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	b2d2      	uxtb	r2, r2
 8008834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008836:	4b20      	ldr	r3, [pc, #128]	; (80088b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0307 	and.w	r3, r3, #7
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	429a      	cmp	r2, r3
 8008842:	d001      	beq.n	8008848 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e032      	b.n	80088ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	d008      	beq.n	8008866 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008854:	4b19      	ldr	r3, [pc, #100]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	4916      	ldr	r1, [pc, #88]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 8008862:	4313      	orrs	r3, r2
 8008864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0308 	and.w	r3, r3, #8
 800886e:	2b00      	cmp	r3, #0
 8008870:	d009      	beq.n	8008886 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008872:	4b12      	ldr	r3, [pc, #72]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	490e      	ldr	r1, [pc, #56]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 8008882:	4313      	orrs	r3, r2
 8008884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008886:	f000 f821 	bl	80088cc <HAL_RCC_GetSysClockFreq>
 800888a:	4602      	mov	r2, r0
 800888c:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <HAL_RCC_ClockConfig+0x1bc>)
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	091b      	lsrs	r3, r3, #4
 8008892:	f003 030f 	and.w	r3, r3, #15
 8008896:	490a      	ldr	r1, [pc, #40]	; (80088c0 <HAL_RCC_ClockConfig+0x1c0>)
 8008898:	5ccb      	ldrb	r3, [r1, r3]
 800889a:	fa22 f303 	lsr.w	r3, r2, r3
 800889e:	4a09      	ldr	r2, [pc, #36]	; (80088c4 <HAL_RCC_ClockConfig+0x1c4>)
 80088a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80088a2:	4b09      	ldr	r3, [pc, #36]	; (80088c8 <HAL_RCC_ClockConfig+0x1c8>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fd fb20 	bl	8005eec <HAL_InitTick>

  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	40023c00 	.word	0x40023c00
 80088bc:	40023800 	.word	0x40023800
 80088c0:	08015084 	.word	0x08015084
 80088c4:	2000000c 	.word	0x2000000c
 80088c8:	20000010 	.word	0x20000010

080088cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088d0:	b094      	sub	sp, #80	; 0x50
 80088d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	647b      	str	r3, [r7, #68]	; 0x44
 80088d8:	2300      	movs	r3, #0
 80088da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088dc:	2300      	movs	r3, #0
 80088de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088e4:	4b79      	ldr	r3, [pc, #484]	; (8008acc <HAL_RCC_GetSysClockFreq+0x200>)
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f003 030c 	and.w	r3, r3, #12
 80088ec:	2b08      	cmp	r3, #8
 80088ee:	d00d      	beq.n	800890c <HAL_RCC_GetSysClockFreq+0x40>
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	f200 80e1 	bhi.w	8008ab8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <HAL_RCC_GetSysClockFreq+0x34>
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	d003      	beq.n	8008906 <HAL_RCC_GetSysClockFreq+0x3a>
 80088fe:	e0db      	b.n	8008ab8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008900:	4b73      	ldr	r3, [pc, #460]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008902:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008904:	e0db      	b.n	8008abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008906:	4b73      	ldr	r3, [pc, #460]	; (8008ad4 <HAL_RCC_GetSysClockFreq+0x208>)
 8008908:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800890a:	e0d8      	b.n	8008abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800890c:	4b6f      	ldr	r3, [pc, #444]	; (8008acc <HAL_RCC_GetSysClockFreq+0x200>)
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008914:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008916:	4b6d      	ldr	r3, [pc, #436]	; (8008acc <HAL_RCC_GetSysClockFreq+0x200>)
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d063      	beq.n	80089ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008922:	4b6a      	ldr	r3, [pc, #424]	; (8008acc <HAL_RCC_GetSysClockFreq+0x200>)
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	099b      	lsrs	r3, r3, #6
 8008928:	2200      	movs	r2, #0
 800892a:	63bb      	str	r3, [r7, #56]	; 0x38
 800892c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008934:	633b      	str	r3, [r7, #48]	; 0x30
 8008936:	2300      	movs	r3, #0
 8008938:	637b      	str	r3, [r7, #52]	; 0x34
 800893a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800893e:	4622      	mov	r2, r4
 8008940:	462b      	mov	r3, r5
 8008942:	f04f 0000 	mov.w	r0, #0
 8008946:	f04f 0100 	mov.w	r1, #0
 800894a:	0159      	lsls	r1, r3, #5
 800894c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008950:	0150      	lsls	r0, r2, #5
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	4621      	mov	r1, r4
 8008958:	1a51      	subs	r1, r2, r1
 800895a:	6139      	str	r1, [r7, #16]
 800895c:	4629      	mov	r1, r5
 800895e:	eb63 0301 	sbc.w	r3, r3, r1
 8008962:	617b      	str	r3, [r7, #20]
 8008964:	f04f 0200 	mov.w	r2, #0
 8008968:	f04f 0300 	mov.w	r3, #0
 800896c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008970:	4659      	mov	r1, fp
 8008972:	018b      	lsls	r3, r1, #6
 8008974:	4651      	mov	r1, sl
 8008976:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800897a:	4651      	mov	r1, sl
 800897c:	018a      	lsls	r2, r1, #6
 800897e:	4651      	mov	r1, sl
 8008980:	ebb2 0801 	subs.w	r8, r2, r1
 8008984:	4659      	mov	r1, fp
 8008986:	eb63 0901 	sbc.w	r9, r3, r1
 800898a:	f04f 0200 	mov.w	r2, #0
 800898e:	f04f 0300 	mov.w	r3, #0
 8008992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800899a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800899e:	4690      	mov	r8, r2
 80089a0:	4699      	mov	r9, r3
 80089a2:	4623      	mov	r3, r4
 80089a4:	eb18 0303 	adds.w	r3, r8, r3
 80089a8:	60bb      	str	r3, [r7, #8]
 80089aa:	462b      	mov	r3, r5
 80089ac:	eb49 0303 	adc.w	r3, r9, r3
 80089b0:	60fb      	str	r3, [r7, #12]
 80089b2:	f04f 0200 	mov.w	r2, #0
 80089b6:	f04f 0300 	mov.w	r3, #0
 80089ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80089be:	4629      	mov	r1, r5
 80089c0:	024b      	lsls	r3, r1, #9
 80089c2:	4621      	mov	r1, r4
 80089c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80089c8:	4621      	mov	r1, r4
 80089ca:	024a      	lsls	r2, r1, #9
 80089cc:	4610      	mov	r0, r2
 80089ce:	4619      	mov	r1, r3
 80089d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089d2:	2200      	movs	r2, #0
 80089d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80089d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089dc:	f7f8 f954 	bl	8000c88 <__aeabi_uldivmod>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4613      	mov	r3, r2
 80089e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089e8:	e058      	b.n	8008a9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089ea:	4b38      	ldr	r3, [pc, #224]	; (8008acc <HAL_RCC_GetSysClockFreq+0x200>)
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	099b      	lsrs	r3, r3, #6
 80089f0:	2200      	movs	r2, #0
 80089f2:	4618      	mov	r0, r3
 80089f4:	4611      	mov	r1, r2
 80089f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80089fa:	623b      	str	r3, [r7, #32]
 80089fc:	2300      	movs	r3, #0
 80089fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008a00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008a04:	4642      	mov	r2, r8
 8008a06:	464b      	mov	r3, r9
 8008a08:	f04f 0000 	mov.w	r0, #0
 8008a0c:	f04f 0100 	mov.w	r1, #0
 8008a10:	0159      	lsls	r1, r3, #5
 8008a12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a16:	0150      	lsls	r0, r2, #5
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4641      	mov	r1, r8
 8008a1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008a22:	4649      	mov	r1, r9
 8008a24:	eb63 0b01 	sbc.w	fp, r3, r1
 8008a28:	f04f 0200 	mov.w	r2, #0
 8008a2c:	f04f 0300 	mov.w	r3, #0
 8008a30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008a34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008a38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008a3c:	ebb2 040a 	subs.w	r4, r2, sl
 8008a40:	eb63 050b 	sbc.w	r5, r3, fp
 8008a44:	f04f 0200 	mov.w	r2, #0
 8008a48:	f04f 0300 	mov.w	r3, #0
 8008a4c:	00eb      	lsls	r3, r5, #3
 8008a4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a52:	00e2      	lsls	r2, r4, #3
 8008a54:	4614      	mov	r4, r2
 8008a56:	461d      	mov	r5, r3
 8008a58:	4643      	mov	r3, r8
 8008a5a:	18e3      	adds	r3, r4, r3
 8008a5c:	603b      	str	r3, [r7, #0]
 8008a5e:	464b      	mov	r3, r9
 8008a60:	eb45 0303 	adc.w	r3, r5, r3
 8008a64:	607b      	str	r3, [r7, #4]
 8008a66:	f04f 0200 	mov.w	r2, #0
 8008a6a:	f04f 0300 	mov.w	r3, #0
 8008a6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a72:	4629      	mov	r1, r5
 8008a74:	028b      	lsls	r3, r1, #10
 8008a76:	4621      	mov	r1, r4
 8008a78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	028a      	lsls	r2, r1, #10
 8008a80:	4610      	mov	r0, r2
 8008a82:	4619      	mov	r1, r3
 8008a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a86:	2200      	movs	r2, #0
 8008a88:	61bb      	str	r3, [r7, #24]
 8008a8a:	61fa      	str	r2, [r7, #28]
 8008a8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a90:	f7f8 f8fa 	bl	8000c88 <__aeabi_uldivmod>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	4613      	mov	r3, r2
 8008a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008a9c:	4b0b      	ldr	r3, [pc, #44]	; (8008acc <HAL_RCC_GetSysClockFreq+0x200>)
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	0c1b      	lsrs	r3, r3, #16
 8008aa2:	f003 0303 	and.w	r3, r3, #3
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008aac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ab6:	e002      	b.n	8008abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ab8:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008aba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3750      	adds	r7, #80	; 0x50
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008aca:	bf00      	nop
 8008acc:	40023800 	.word	0x40023800
 8008ad0:	00f42400 	.word	0x00f42400
 8008ad4:	007a1200 	.word	0x007a1200

08008ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008adc:	4b03      	ldr	r3, [pc, #12]	; (8008aec <HAL_RCC_GetHCLKFreq+0x14>)
 8008ade:	681b      	ldr	r3, [r3, #0]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	2000000c 	.word	0x2000000c

08008af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008af4:	f7ff fff0 	bl	8008ad8 <HAL_RCC_GetHCLKFreq>
 8008af8:	4602      	mov	r2, r0
 8008afa:	4b05      	ldr	r3, [pc, #20]	; (8008b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	0a9b      	lsrs	r3, r3, #10
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	4903      	ldr	r1, [pc, #12]	; (8008b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b06:	5ccb      	ldrb	r3, [r1, r3]
 8008b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	40023800 	.word	0x40023800
 8008b14:	08015094 	.word	0x08015094

08008b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008b1c:	f7ff ffdc 	bl	8008ad8 <HAL_RCC_GetHCLKFreq>
 8008b20:	4602      	mov	r2, r0
 8008b22:	4b05      	ldr	r3, [pc, #20]	; (8008b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	0b5b      	lsrs	r3, r3, #13
 8008b28:	f003 0307 	and.w	r3, r3, #7
 8008b2c:	4903      	ldr	r1, [pc, #12]	; (8008b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b2e:	5ccb      	ldrb	r3, [r1, r3]
 8008b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	40023800 	.word	0x40023800
 8008b3c:	08015094 	.word	0x08015094

08008b40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e07b      	b.n	8008c4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d108      	bne.n	8008b6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b62:	d009      	beq.n	8008b78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	61da      	str	r2, [r3, #28]
 8008b6a:	e005      	b.n	8008b78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d106      	bne.n	8008b98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7fa ff24 	bl	80039e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008bc0:	431a      	orrs	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	431a      	orrs	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008be8:	431a      	orrs	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bfc:	ea42 0103 	orr.w	r1, r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	0c1b      	lsrs	r3, r3, #16
 8008c16:	f003 0104 	and.w	r1, r3, #4
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1e:	f003 0210 	and.w	r2, r3, #16
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	430a      	orrs	r2, r1
 8008c28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	69da      	ldr	r2, [r3, #28]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b088      	sub	sp, #32
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	603b      	str	r3, [r7, #0]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d101      	bne.n	8008c74 <HAL_SPI_Transmit+0x22>
 8008c70:	2302      	movs	r3, #2
 8008c72:	e126      	b.n	8008ec2 <HAL_SPI_Transmit+0x270>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c7c:	f7fd f97a 	bl	8005f74 <HAL_GetTick>
 8008c80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008c82:	88fb      	ldrh	r3, [r7, #6]
 8008c84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d002      	beq.n	8008c98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008c92:	2302      	movs	r3, #2
 8008c94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008c96:	e10b      	b.n	8008eb0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <HAL_SPI_Transmit+0x52>
 8008c9e:	88fb      	ldrh	r3, [r7, #6]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d102      	bne.n	8008caa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ca8:	e102      	b.n	8008eb0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2203      	movs	r2, #3
 8008cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	88fa      	ldrh	r2, [r7, #6]
 8008cc2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	88fa      	ldrh	r2, [r7, #6]
 8008cc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cf0:	d10f      	bne.n	8008d12 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d1c:	2b40      	cmp	r3, #64	; 0x40
 8008d1e:	d007      	beq.n	8008d30 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d38:	d14b      	bne.n	8008dd2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d002      	beq.n	8008d48 <HAL_SPI_Transmit+0xf6>
 8008d42:	8afb      	ldrh	r3, [r7, #22]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d13e      	bne.n	8008dc6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4c:	881a      	ldrh	r2, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d58:	1c9a      	adds	r2, r3, #2
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	3b01      	subs	r3, #1
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008d6c:	e02b      	b.n	8008dc6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	f003 0302 	and.w	r3, r3, #2
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d112      	bne.n	8008da2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d80:	881a      	ldrh	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8c:	1c9a      	adds	r2, r3, #2
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008da0:	e011      	b.n	8008dc6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008da2:	f7fd f8e7 	bl	8005f74 <HAL_GetTick>
 8008da6:	4602      	mov	r2, r0
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	683a      	ldr	r2, [r7, #0]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d803      	bhi.n	8008dba <HAL_SPI_Transmit+0x168>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db8:	d102      	bne.n	8008dc0 <HAL_SPI_Transmit+0x16e>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d102      	bne.n	8008dc6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008dc4:	e074      	b.n	8008eb0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1ce      	bne.n	8008d6e <HAL_SPI_Transmit+0x11c>
 8008dd0:	e04c      	b.n	8008e6c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <HAL_SPI_Transmit+0x18e>
 8008dda:	8afb      	ldrh	r3, [r7, #22]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d140      	bne.n	8008e62 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	330c      	adds	r3, #12
 8008dea:	7812      	ldrb	r2, [r2, #0]
 8008dec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008e06:	e02c      	b.n	8008e62 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f003 0302 	and.w	r3, r3, #2
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d113      	bne.n	8008e3e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	330c      	adds	r3, #12
 8008e20:	7812      	ldrb	r2, [r2, #0]
 8008e22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e28:	1c5a      	adds	r2, r3, #1
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	3b01      	subs	r3, #1
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e3c:	e011      	b.n	8008e62 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e3e:	f7fd f899 	bl	8005f74 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d803      	bhi.n	8008e56 <HAL_SPI_Transmit+0x204>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e54:	d102      	bne.n	8008e5c <HAL_SPI_Transmit+0x20a>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d102      	bne.n	8008e62 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e60:	e026      	b.n	8008eb0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1cd      	bne.n	8008e08 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e6c:	69ba      	ldr	r2, [r7, #24]
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f000 fa63 	bl	800933c <SPI_EndRxTxTransaction>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d002      	beq.n	8008e82 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2220      	movs	r2, #32
 8008e80:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10a      	bne.n	8008ea0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	613b      	str	r3, [r7, #16]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	613b      	str	r3, [r7, #16]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	613b      	str	r3, [r7, #16]
 8008e9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	77fb      	strb	r3, [r7, #31]
 8008eac:	e000      	b.n	8008eb0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008eae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008ec0:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3720      	adds	r7, #32
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b08c      	sub	sp, #48	; 0x30
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
 8008ed6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d101      	bne.n	8008ef0 <HAL_SPI_TransmitReceive+0x26>
 8008eec:	2302      	movs	r3, #2
 8008eee:	e18a      	b.n	8009206 <HAL_SPI_TransmitReceive+0x33c>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ef8:	f7fd f83c 	bl	8005f74 <HAL_GetTick>
 8008efc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008f0e:	887b      	ldrh	r3, [r7, #2]
 8008f10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008f12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d00f      	beq.n	8008f3a <HAL_SPI_TransmitReceive+0x70>
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f20:	d107      	bne.n	8008f32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d103      	bne.n	8008f32 <HAL_SPI_TransmitReceive+0x68>
 8008f2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f2e:	2b04      	cmp	r3, #4
 8008f30:	d003      	beq.n	8008f3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008f32:	2302      	movs	r3, #2
 8008f34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008f38:	e15b      	b.n	80091f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d005      	beq.n	8008f4c <HAL_SPI_TransmitReceive+0x82>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d002      	beq.n	8008f4c <HAL_SPI_TransmitReceive+0x82>
 8008f46:	887b      	ldrh	r3, [r7, #2]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d103      	bne.n	8008f54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008f52:	e14e      	b.n	80091f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b04      	cmp	r3, #4
 8008f5e:	d003      	beq.n	8008f68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2205      	movs	r2, #5
 8008f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	887a      	ldrh	r2, [r7, #2]
 8008f78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	887a      	ldrh	r2, [r7, #2]
 8008f7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	887a      	ldrh	r2, [r7, #2]
 8008f8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	887a      	ldrh	r2, [r7, #2]
 8008f90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa8:	2b40      	cmp	r3, #64	; 0x40
 8008faa:	d007      	beq.n	8008fbc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fc4:	d178      	bne.n	80090b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d002      	beq.n	8008fd4 <HAL_SPI_TransmitReceive+0x10a>
 8008fce:	8b7b      	ldrh	r3, [r7, #26]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d166      	bne.n	80090a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd8:	881a      	ldrh	r2, [r3, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe4:	1c9a      	adds	r2, r3, #2
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ff8:	e053      	b.n	80090a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b02      	cmp	r3, #2
 8009006:	d11b      	bne.n	8009040 <HAL_SPI_TransmitReceive+0x176>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800900c:	b29b      	uxth	r3, r3
 800900e:	2b00      	cmp	r3, #0
 8009010:	d016      	beq.n	8009040 <HAL_SPI_TransmitReceive+0x176>
 8009012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009014:	2b01      	cmp	r3, #1
 8009016:	d113      	bne.n	8009040 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901c:	881a      	ldrh	r2, [r3, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009028:	1c9a      	adds	r2, r3, #2
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009032:	b29b      	uxth	r3, r3
 8009034:	3b01      	subs	r3, #1
 8009036:	b29a      	uxth	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b01      	cmp	r3, #1
 800904c:	d119      	bne.n	8009082 <HAL_SPI_TransmitReceive+0x1b8>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009052:	b29b      	uxth	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d014      	beq.n	8009082 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68da      	ldr	r2, [r3, #12]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009062:	b292      	uxth	r2, r2
 8009064:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906a:	1c9a      	adds	r2, r3, #2
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009074:	b29b      	uxth	r3, r3
 8009076:	3b01      	subs	r3, #1
 8009078:	b29a      	uxth	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800907e:	2301      	movs	r3, #1
 8009080:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009082:	f7fc ff77 	bl	8005f74 <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800908e:	429a      	cmp	r2, r3
 8009090:	d807      	bhi.n	80090a2 <HAL_SPI_TransmitReceive+0x1d8>
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009098:	d003      	beq.n	80090a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80090a0:	e0a7      	b.n	80091f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1a6      	bne.n	8008ffa <HAL_SPI_TransmitReceive+0x130>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1a1      	bne.n	8008ffa <HAL_SPI_TransmitReceive+0x130>
 80090b6:	e07c      	b.n	80091b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <HAL_SPI_TransmitReceive+0x1fc>
 80090c0:	8b7b      	ldrh	r3, [r7, #26]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d16b      	bne.n	800919e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	330c      	adds	r3, #12
 80090d0:	7812      	ldrb	r2, [r2, #0]
 80090d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d8:	1c5a      	adds	r2, r3, #1
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	3b01      	subs	r3, #1
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090ec:	e057      	b.n	800919e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d11c      	bne.n	8009136 <HAL_SPI_TransmitReceive+0x26c>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009100:	b29b      	uxth	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d017      	beq.n	8009136 <HAL_SPI_TransmitReceive+0x26c>
 8009106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009108:	2b01      	cmp	r3, #1
 800910a:	d114      	bne.n	8009136 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	330c      	adds	r3, #12
 8009116:	7812      	ldrb	r2, [r2, #0]
 8009118:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800911e:	1c5a      	adds	r2, r3, #1
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009128:	b29b      	uxth	r3, r3
 800912a:	3b01      	subs	r3, #1
 800912c:	b29a      	uxth	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f003 0301 	and.w	r3, r3, #1
 8009140:	2b01      	cmp	r3, #1
 8009142:	d119      	bne.n	8009178 <HAL_SPI_TransmitReceive+0x2ae>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009148:	b29b      	uxth	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d014      	beq.n	8009178 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009158:	b2d2      	uxtb	r2, r2
 800915a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009160:	1c5a      	adds	r2, r3, #1
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800916a:	b29b      	uxth	r3, r3
 800916c:	3b01      	subs	r3, #1
 800916e:	b29a      	uxth	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009174:	2301      	movs	r3, #1
 8009176:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009178:	f7fc fefc 	bl	8005f74 <HAL_GetTick>
 800917c:	4602      	mov	r2, r0
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009184:	429a      	cmp	r2, r3
 8009186:	d803      	bhi.n	8009190 <HAL_SPI_TransmitReceive+0x2c6>
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918e:	d102      	bne.n	8009196 <HAL_SPI_TransmitReceive+0x2cc>
 8009190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009192:	2b00      	cmp	r3, #0
 8009194:	d103      	bne.n	800919e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009196:	2303      	movs	r3, #3
 8009198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800919c:	e029      	b.n	80091f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1a2      	bne.n	80090ee <HAL_SPI_TransmitReceive+0x224>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d19d      	bne.n	80090ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 f8c0 	bl	800933c <SPI_EndRxTxTransaction>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d006      	beq.n	80091d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2220      	movs	r2, #32
 80091cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80091ce:	e010      	b.n	80091f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10b      	bne.n	80091f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091d8:	2300      	movs	r3, #0
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	617b      	str	r3, [r7, #20]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	617b      	str	r3, [r7, #20]
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	e000      	b.n	80091f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80091f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009202:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009206:	4618      	mov	r0, r3
 8009208:	3730      	adds	r7, #48	; 0x30
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800921c:	b2db      	uxtb	r3, r3
}
 800921e:	4618      	mov	r0, r3
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
	...

0800922c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b088      	sub	sp, #32
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	603b      	str	r3, [r7, #0]
 8009238:	4613      	mov	r3, r2
 800923a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800923c:	f7fc fe9a 	bl	8005f74 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	1a9b      	subs	r3, r3, r2
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	4413      	add	r3, r2
 800924a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800924c:	f7fc fe92 	bl	8005f74 <HAL_GetTick>
 8009250:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009252:	4b39      	ldr	r3, [pc, #228]	; (8009338 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	015b      	lsls	r3, r3, #5
 8009258:	0d1b      	lsrs	r3, r3, #20
 800925a:	69fa      	ldr	r2, [r7, #28]
 800925c:	fb02 f303 	mul.w	r3, r2, r3
 8009260:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009262:	e054      	b.n	800930e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926a:	d050      	beq.n	800930e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800926c:	f7fc fe82 	bl	8005f74 <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	69fa      	ldr	r2, [r7, #28]
 8009278:	429a      	cmp	r2, r3
 800927a:	d902      	bls.n	8009282 <SPI_WaitFlagStateUntilTimeout+0x56>
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d13d      	bne.n	80092fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009290:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800929a:	d111      	bne.n	80092c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092a4:	d004      	beq.n	80092b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ae:	d107      	bne.n	80092c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092c8:	d10f      	bne.n	80092ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092d8:	601a      	str	r2, [r3, #0]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e017      	b.n	800932e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d101      	bne.n	8009308 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009304:	2300      	movs	r3, #0
 8009306:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	3b01      	subs	r3, #1
 800930c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	689a      	ldr	r2, [r3, #8]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	4013      	ands	r3, r2
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	429a      	cmp	r2, r3
 800931c:	bf0c      	ite	eq
 800931e:	2301      	moveq	r3, #1
 8009320:	2300      	movne	r3, #0
 8009322:	b2db      	uxtb	r3, r3
 8009324:	461a      	mov	r2, r3
 8009326:	79fb      	ldrb	r3, [r7, #7]
 8009328:	429a      	cmp	r2, r3
 800932a:	d19b      	bne.n	8009264 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3720      	adds	r7, #32
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	2000000c 	.word	0x2000000c

0800933c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af02      	add	r7, sp, #8
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009348:	4b1b      	ldr	r3, [pc, #108]	; (80093b8 <SPI_EndRxTxTransaction+0x7c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a1b      	ldr	r2, [pc, #108]	; (80093bc <SPI_EndRxTxTransaction+0x80>)
 800934e:	fba2 2303 	umull	r2, r3, r2, r3
 8009352:	0d5b      	lsrs	r3, r3, #21
 8009354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009358:	fb02 f303 	mul.w	r3, r2, r3
 800935c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009366:	d112      	bne.n	800938e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2200      	movs	r2, #0
 8009370:	2180      	movs	r1, #128	; 0x80
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f7ff ff5a 	bl	800922c <SPI_WaitFlagStateUntilTimeout>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d016      	beq.n	80093ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009382:	f043 0220 	orr.w	r2, r3, #32
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e00f      	b.n	80093ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00a      	beq.n	80093aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	3b01      	subs	r3, #1
 8009398:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a4:	2b80      	cmp	r3, #128	; 0x80
 80093a6:	d0f2      	beq.n	800938e <SPI_EndRxTxTransaction+0x52>
 80093a8:	e000      	b.n	80093ac <SPI_EndRxTxTransaction+0x70>
        break;
 80093aa:	bf00      	nop
  }

  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	2000000c 	.word	0x2000000c
 80093bc:	165e9f81 	.word	0x165e9f81

080093c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e041      	b.n	8009456 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d106      	bne.n	80093ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7fa fb42 	bl	8003a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	3304      	adds	r3, #4
 80093fc:	4619      	mov	r1, r3
 80093fe:	4610      	mov	r0, r2
 8009400:	f000 fdec 	bl	8009fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
	...

08009460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b01      	cmp	r3, #1
 8009472:	d001      	beq.n	8009478 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e04e      	b.n	8009516 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2202      	movs	r2, #2
 800947c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68da      	ldr	r2, [r3, #12]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f042 0201 	orr.w	r2, r2, #1
 800948e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a23      	ldr	r2, [pc, #140]	; (8009524 <HAL_TIM_Base_Start_IT+0xc4>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d022      	beq.n	80094e0 <HAL_TIM_Base_Start_IT+0x80>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a2:	d01d      	beq.n	80094e0 <HAL_TIM_Base_Start_IT+0x80>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a1f      	ldr	r2, [pc, #124]	; (8009528 <HAL_TIM_Base_Start_IT+0xc8>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d018      	beq.n	80094e0 <HAL_TIM_Base_Start_IT+0x80>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a1e      	ldr	r2, [pc, #120]	; (800952c <HAL_TIM_Base_Start_IT+0xcc>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d013      	beq.n	80094e0 <HAL_TIM_Base_Start_IT+0x80>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a1c      	ldr	r2, [pc, #112]	; (8009530 <HAL_TIM_Base_Start_IT+0xd0>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d00e      	beq.n	80094e0 <HAL_TIM_Base_Start_IT+0x80>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a1b      	ldr	r2, [pc, #108]	; (8009534 <HAL_TIM_Base_Start_IT+0xd4>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d009      	beq.n	80094e0 <HAL_TIM_Base_Start_IT+0x80>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a19      	ldr	r2, [pc, #100]	; (8009538 <HAL_TIM_Base_Start_IT+0xd8>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d004      	beq.n	80094e0 <HAL_TIM_Base_Start_IT+0x80>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a18      	ldr	r2, [pc, #96]	; (800953c <HAL_TIM_Base_Start_IT+0xdc>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d111      	bne.n	8009504 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	f003 0307 	and.w	r3, r3, #7
 80094ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2b06      	cmp	r3, #6
 80094f0:	d010      	beq.n	8009514 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f042 0201 	orr.w	r2, r2, #1
 8009500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009502:	e007      	b.n	8009514 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f042 0201 	orr.w	r2, r2, #1
 8009512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3714      	adds	r7, #20
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	40010000 	.word	0x40010000
 8009528:	40000400 	.word	0x40000400
 800952c:	40000800 	.word	0x40000800
 8009530:	40000c00 	.word	0x40000c00
 8009534:	40010400 	.word	0x40010400
 8009538:	40014000 	.word	0x40014000
 800953c:	40001800 	.word	0x40001800

08009540 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d101      	bne.n	8009552 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e041      	b.n	80095d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009558:	b2db      	uxtb	r3, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	d106      	bne.n	800956c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f839 	bl	80095de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2202      	movs	r2, #2
 8009570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	3304      	adds	r3, #4
 800957c:	4619      	mov	r1, r3
 800957e:	4610      	mov	r0, r2
 8009580:	f000 fd2c 	bl	8009fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095de:	b480      	push	{r7}
 80095e0:	b083      	sub	sp, #12
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095e6:	bf00      	nop
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
	...

080095f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d109      	bne.n	8009618 <HAL_TIM_PWM_Start+0x24>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b01      	cmp	r3, #1
 800960e:	bf14      	ite	ne
 8009610:	2301      	movne	r3, #1
 8009612:	2300      	moveq	r3, #0
 8009614:	b2db      	uxtb	r3, r3
 8009616:	e022      	b.n	800965e <HAL_TIM_PWM_Start+0x6a>
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	2b04      	cmp	r3, #4
 800961c:	d109      	bne.n	8009632 <HAL_TIM_PWM_Start+0x3e>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b01      	cmp	r3, #1
 8009628:	bf14      	ite	ne
 800962a:	2301      	movne	r3, #1
 800962c:	2300      	moveq	r3, #0
 800962e:	b2db      	uxtb	r3, r3
 8009630:	e015      	b.n	800965e <HAL_TIM_PWM_Start+0x6a>
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	2b08      	cmp	r3, #8
 8009636:	d109      	bne.n	800964c <HAL_TIM_PWM_Start+0x58>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b01      	cmp	r3, #1
 8009642:	bf14      	ite	ne
 8009644:	2301      	movne	r3, #1
 8009646:	2300      	moveq	r3, #0
 8009648:	b2db      	uxtb	r3, r3
 800964a:	e008      	b.n	800965e <HAL_TIM_PWM_Start+0x6a>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b01      	cmp	r3, #1
 8009656:	bf14      	ite	ne
 8009658:	2301      	movne	r3, #1
 800965a:	2300      	moveq	r3, #0
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e07c      	b.n	8009760 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d104      	bne.n	8009676 <HAL_TIM_PWM_Start+0x82>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2202      	movs	r2, #2
 8009670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009674:	e013      	b.n	800969e <HAL_TIM_PWM_Start+0xaa>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b04      	cmp	r3, #4
 800967a:	d104      	bne.n	8009686 <HAL_TIM_PWM_Start+0x92>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2202      	movs	r2, #2
 8009680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009684:	e00b      	b.n	800969e <HAL_TIM_PWM_Start+0xaa>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b08      	cmp	r3, #8
 800968a:	d104      	bne.n	8009696 <HAL_TIM_PWM_Start+0xa2>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2202      	movs	r2, #2
 8009690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009694:	e003      	b.n	800969e <HAL_TIM_PWM_Start+0xaa>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2202      	movs	r2, #2
 800969a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2201      	movs	r2, #1
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f001 f93e 	bl	800a928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a2d      	ldr	r2, [pc, #180]	; (8009768 <HAL_TIM_PWM_Start+0x174>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d004      	beq.n	80096c0 <HAL_TIM_PWM_Start+0xcc>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a2c      	ldr	r2, [pc, #176]	; (800976c <HAL_TIM_PWM_Start+0x178>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d101      	bne.n	80096c4 <HAL_TIM_PWM_Start+0xd0>
 80096c0:	2301      	movs	r3, #1
 80096c2:	e000      	b.n	80096c6 <HAL_TIM_PWM_Start+0xd2>
 80096c4:	2300      	movs	r3, #0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d007      	beq.n	80096da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a22      	ldr	r2, [pc, #136]	; (8009768 <HAL_TIM_PWM_Start+0x174>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d022      	beq.n	800972a <HAL_TIM_PWM_Start+0x136>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ec:	d01d      	beq.n	800972a <HAL_TIM_PWM_Start+0x136>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a1f      	ldr	r2, [pc, #124]	; (8009770 <HAL_TIM_PWM_Start+0x17c>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d018      	beq.n	800972a <HAL_TIM_PWM_Start+0x136>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a1d      	ldr	r2, [pc, #116]	; (8009774 <HAL_TIM_PWM_Start+0x180>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d013      	beq.n	800972a <HAL_TIM_PWM_Start+0x136>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a1c      	ldr	r2, [pc, #112]	; (8009778 <HAL_TIM_PWM_Start+0x184>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d00e      	beq.n	800972a <HAL_TIM_PWM_Start+0x136>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a16      	ldr	r2, [pc, #88]	; (800976c <HAL_TIM_PWM_Start+0x178>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d009      	beq.n	800972a <HAL_TIM_PWM_Start+0x136>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a18      	ldr	r2, [pc, #96]	; (800977c <HAL_TIM_PWM_Start+0x188>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d004      	beq.n	800972a <HAL_TIM_PWM_Start+0x136>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a16      	ldr	r2, [pc, #88]	; (8009780 <HAL_TIM_PWM_Start+0x18c>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d111      	bne.n	800974e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	f003 0307 	and.w	r3, r3, #7
 8009734:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2b06      	cmp	r3, #6
 800973a:	d010      	beq.n	800975e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f042 0201 	orr.w	r2, r2, #1
 800974a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800974c:	e007      	b.n	800975e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f042 0201 	orr.w	r2, r2, #1
 800975c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	40010000 	.word	0x40010000
 800976c:	40010400 	.word	0x40010400
 8009770:	40000400 	.word	0x40000400
 8009774:	40000800 	.word	0x40000800
 8009778:	40000c00 	.word	0x40000c00
 800977c:	40014000 	.word	0x40014000
 8009780:	40001800 	.word	0x40001800

08009784 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d101      	bne.n	8009796 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e041      	b.n	800981a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d106      	bne.n	80097b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f839 	bl	8009822 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2202      	movs	r2, #2
 80097b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	3304      	adds	r3, #4
 80097c0:	4619      	mov	r1, r3
 80097c2:	4610      	mov	r0, r2
 80097c4:	f000 fc0a 	bl	8009fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009822:	b480      	push	{r7}
 8009824:	b083      	sub	sp, #12
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800982a:	bf00      	nop
 800982c:	370c      	adds	r7, #12
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b082      	sub	sp, #8
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	f003 0302 	and.w	r3, r3, #2
 8009848:	2b02      	cmp	r3, #2
 800984a:	d122      	bne.n	8009892 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	f003 0302 	and.w	r3, r3, #2
 8009856:	2b02      	cmp	r3, #2
 8009858:	d11b      	bne.n	8009892 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f06f 0202 	mvn.w	r2, #2
 8009862:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	f003 0303 	and.w	r3, r3, #3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7f8 fd21 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 800987e:	e005      	b.n	800988c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fb8d 	bl	8009fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fb94 	bl	8009fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	f003 0304 	and.w	r3, r3, #4
 800989c:	2b04      	cmp	r3, #4
 800989e:	d122      	bne.n	80098e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	f003 0304 	and.w	r3, r3, #4
 80098aa:	2b04      	cmp	r3, #4
 80098ac:	d11b      	bne.n	80098e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f06f 0204 	mvn.w	r2, #4
 80098b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2202      	movs	r2, #2
 80098bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7f8 fcf7 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 80098d2:	e005      	b.n	80098e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fb63 	bl	8009fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fb6a 	bl	8009fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	f003 0308 	and.w	r3, r3, #8
 80098f0:	2b08      	cmp	r3, #8
 80098f2:	d122      	bne.n	800993a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	f003 0308 	and.w	r3, r3, #8
 80098fe:	2b08      	cmp	r3, #8
 8009900:	d11b      	bne.n	800993a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f06f 0208 	mvn.w	r2, #8
 800990a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2204      	movs	r2, #4
 8009910:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	69db      	ldr	r3, [r3, #28]
 8009918:	f003 0303 	and.w	r3, r3, #3
 800991c:	2b00      	cmp	r3, #0
 800991e:	d003      	beq.n	8009928 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7f8 fccd 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 8009926:	e005      	b.n	8009934 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fb39 	bl	8009fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fb40 	bl	8009fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	f003 0310 	and.w	r3, r3, #16
 8009944:	2b10      	cmp	r3, #16
 8009946:	d122      	bne.n	800998e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	f003 0310 	and.w	r3, r3, #16
 8009952:	2b10      	cmp	r3, #16
 8009954:	d11b      	bne.n	800998e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f06f 0210 	mvn.w	r2, #16
 800995e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2208      	movs	r2, #8
 8009964:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009970:	2b00      	cmp	r3, #0
 8009972:	d003      	beq.n	800997c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7f8 fca3 	bl	80022c0 <HAL_TIM_IC_CaptureCallback>
 800997a:	e005      	b.n	8009988 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fb0f 	bl	8009fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fb16 	bl	8009fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	2b01      	cmp	r3, #1
 800999a:	d10e      	bne.n	80099ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d107      	bne.n	80099ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f06f 0201 	mvn.w	r2, #1
 80099b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7f8 fd25 	bl	8002404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c4:	2b80      	cmp	r3, #128	; 0x80
 80099c6:	d10e      	bne.n	80099e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d2:	2b80      	cmp	r3, #128	; 0x80
 80099d4:	d107      	bne.n	80099e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f001 f84d 	bl	800aa80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f0:	2b40      	cmp	r3, #64	; 0x40
 80099f2:	d10e      	bne.n	8009a12 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099fe:	2b40      	cmp	r3, #64	; 0x40
 8009a00:	d107      	bne.n	8009a12 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fadb 	bl	8009fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	f003 0320 	and.w	r3, r3, #32
 8009a1c:	2b20      	cmp	r3, #32
 8009a1e:	d10e      	bne.n	8009a3e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	2b20      	cmp	r3, #32
 8009a2c:	d107      	bne.n	8009a3e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f06f 0220 	mvn.w	r2, #32
 8009a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f001 f817 	bl	800aa6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a3e:	bf00      	nop
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b086      	sub	sp, #24
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	60f8      	str	r0, [r7, #12]
 8009a4e:	60b9      	str	r1, [r7, #8]
 8009a50:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d101      	bne.n	8009a64 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009a60:	2302      	movs	r3, #2
 8009a62:	e088      	b.n	8009b76 <HAL_TIM_IC_ConfigChannel+0x130>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d11b      	bne.n	8009aaa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6818      	ldr	r0, [r3, #0]
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	6819      	ldr	r1, [r3, #0]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	f000 fd8d 	bl	800a5a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	699a      	ldr	r2, [r3, #24]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f022 020c 	bic.w	r2, r2, #12
 8009a94:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6999      	ldr	r1, [r3, #24]
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	689a      	ldr	r2, [r3, #8]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	430a      	orrs	r2, r1
 8009aa6:	619a      	str	r2, [r3, #24]
 8009aa8:	e060      	b.n	8009b6c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2b04      	cmp	r3, #4
 8009aae:	d11c      	bne.n	8009aea <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6818      	ldr	r0, [r3, #0]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	6819      	ldr	r1, [r3, #0]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	f000 fe11 	bl	800a6e6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	699a      	ldr	r2, [r3, #24]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009ad2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6999      	ldr	r1, [r3, #24]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	021a      	lsls	r2, r3, #8
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	619a      	str	r2, [r3, #24]
 8009ae8:	e040      	b.n	8009b6c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b08      	cmp	r3, #8
 8009aee:	d11b      	bne.n	8009b28 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6818      	ldr	r0, [r3, #0]
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	6819      	ldr	r1, [r3, #0]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	f000 fe5e 	bl	800a7c0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	69da      	ldr	r2, [r3, #28]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f022 020c 	bic.w	r2, r2, #12
 8009b12:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	69d9      	ldr	r1, [r3, #28]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	689a      	ldr	r2, [r3, #8]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	430a      	orrs	r2, r1
 8009b24:	61da      	str	r2, [r3, #28]
 8009b26:	e021      	b.n	8009b6c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b0c      	cmp	r3, #12
 8009b2c:	d11c      	bne.n	8009b68 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6818      	ldr	r0, [r3, #0]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	6819      	ldr	r1, [r3, #0]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	685a      	ldr	r2, [r3, #4]
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	f000 fe7b 	bl	800a838 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	69da      	ldr	r2, [r3, #28]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009b50:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	69d9      	ldr	r1, [r3, #28]
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	021a      	lsls	r2, r3, #8
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	61da      	str	r2, [r3, #28]
 8009b66:	e001      	b.n	8009b6c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
	...

08009b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d101      	bne.n	8009b9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	e0ae      	b.n	8009cfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b0c      	cmp	r3, #12
 8009baa:	f200 809f 	bhi.w	8009cec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009bae:	a201      	add	r2, pc, #4	; (adr r2, 8009bb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb4:	08009be9 	.word	0x08009be9
 8009bb8:	08009ced 	.word	0x08009ced
 8009bbc:	08009ced 	.word	0x08009ced
 8009bc0:	08009ced 	.word	0x08009ced
 8009bc4:	08009c29 	.word	0x08009c29
 8009bc8:	08009ced 	.word	0x08009ced
 8009bcc:	08009ced 	.word	0x08009ced
 8009bd0:	08009ced 	.word	0x08009ced
 8009bd4:	08009c6b 	.word	0x08009c6b
 8009bd8:	08009ced 	.word	0x08009ced
 8009bdc:	08009ced 	.word	0x08009ced
 8009be0:	08009ced 	.word	0x08009ced
 8009be4:	08009cab 	.word	0x08009cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68b9      	ldr	r1, [r7, #8]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 fa94 	bl	800a11c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	699a      	ldr	r2, [r3, #24]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f042 0208 	orr.w	r2, r2, #8
 8009c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	699a      	ldr	r2, [r3, #24]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f022 0204 	bic.w	r2, r2, #4
 8009c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6999      	ldr	r1, [r3, #24]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	691a      	ldr	r2, [r3, #16]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	430a      	orrs	r2, r1
 8009c24:	619a      	str	r2, [r3, #24]
      break;
 8009c26:	e064      	b.n	8009cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68b9      	ldr	r1, [r7, #8]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 fae4 	bl	800a1fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	699a      	ldr	r2, [r3, #24]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	699a      	ldr	r2, [r3, #24]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	6999      	ldr	r1, [r3, #24]
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	021a      	lsls	r2, r3, #8
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	430a      	orrs	r2, r1
 8009c66:	619a      	str	r2, [r3, #24]
      break;
 8009c68:	e043      	b.n	8009cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68b9      	ldr	r1, [r7, #8]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 fb39 	bl	800a2e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	69da      	ldr	r2, [r3, #28]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f042 0208 	orr.w	r2, r2, #8
 8009c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	69da      	ldr	r2, [r3, #28]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f022 0204 	bic.w	r2, r2, #4
 8009c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	69d9      	ldr	r1, [r3, #28]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	691a      	ldr	r2, [r3, #16]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	430a      	orrs	r2, r1
 8009ca6:	61da      	str	r2, [r3, #28]
      break;
 8009ca8:	e023      	b.n	8009cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68b9      	ldr	r1, [r7, #8]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f000 fb8d 	bl	800a3d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	69da      	ldr	r2, [r3, #28]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	69da      	ldr	r2, [r3, #28]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	69d9      	ldr	r1, [r3, #28]
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	021a      	lsls	r2, r3, #8
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	61da      	str	r2, [r3, #28]
      break;
 8009cea:	e002      	b.n	8009cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	75fb      	strb	r3, [r7, #23]
      break;
 8009cf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d101      	bne.n	8009d20 <HAL_TIM_ConfigClockSource+0x1c>
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	e0b4      	b.n	8009e8a <HAL_TIM_ConfigClockSource+0x186>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d58:	d03e      	beq.n	8009dd8 <HAL_TIM_ConfigClockSource+0xd4>
 8009d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d5e:	f200 8087 	bhi.w	8009e70 <HAL_TIM_ConfigClockSource+0x16c>
 8009d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d66:	f000 8086 	beq.w	8009e76 <HAL_TIM_ConfigClockSource+0x172>
 8009d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d6e:	d87f      	bhi.n	8009e70 <HAL_TIM_ConfigClockSource+0x16c>
 8009d70:	2b70      	cmp	r3, #112	; 0x70
 8009d72:	d01a      	beq.n	8009daa <HAL_TIM_ConfigClockSource+0xa6>
 8009d74:	2b70      	cmp	r3, #112	; 0x70
 8009d76:	d87b      	bhi.n	8009e70 <HAL_TIM_ConfigClockSource+0x16c>
 8009d78:	2b60      	cmp	r3, #96	; 0x60
 8009d7a:	d050      	beq.n	8009e1e <HAL_TIM_ConfigClockSource+0x11a>
 8009d7c:	2b60      	cmp	r3, #96	; 0x60
 8009d7e:	d877      	bhi.n	8009e70 <HAL_TIM_ConfigClockSource+0x16c>
 8009d80:	2b50      	cmp	r3, #80	; 0x50
 8009d82:	d03c      	beq.n	8009dfe <HAL_TIM_ConfigClockSource+0xfa>
 8009d84:	2b50      	cmp	r3, #80	; 0x50
 8009d86:	d873      	bhi.n	8009e70 <HAL_TIM_ConfigClockSource+0x16c>
 8009d88:	2b40      	cmp	r3, #64	; 0x40
 8009d8a:	d058      	beq.n	8009e3e <HAL_TIM_ConfigClockSource+0x13a>
 8009d8c:	2b40      	cmp	r3, #64	; 0x40
 8009d8e:	d86f      	bhi.n	8009e70 <HAL_TIM_ConfigClockSource+0x16c>
 8009d90:	2b30      	cmp	r3, #48	; 0x30
 8009d92:	d064      	beq.n	8009e5e <HAL_TIM_ConfigClockSource+0x15a>
 8009d94:	2b30      	cmp	r3, #48	; 0x30
 8009d96:	d86b      	bhi.n	8009e70 <HAL_TIM_ConfigClockSource+0x16c>
 8009d98:	2b20      	cmp	r3, #32
 8009d9a:	d060      	beq.n	8009e5e <HAL_TIM_ConfigClockSource+0x15a>
 8009d9c:	2b20      	cmp	r3, #32
 8009d9e:	d867      	bhi.n	8009e70 <HAL_TIM_ConfigClockSource+0x16c>
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d05c      	beq.n	8009e5e <HAL_TIM_ConfigClockSource+0x15a>
 8009da4:	2b10      	cmp	r3, #16
 8009da6:	d05a      	beq.n	8009e5e <HAL_TIM_ConfigClockSource+0x15a>
 8009da8:	e062      	b.n	8009e70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6818      	ldr	r0, [r3, #0]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	6899      	ldr	r1, [r3, #8]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	685a      	ldr	r2, [r3, #4]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	f000 fd95 	bl	800a8e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009dcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	609a      	str	r2, [r3, #8]
      break;
 8009dd6:	e04f      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6818      	ldr	r0, [r3, #0]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	6899      	ldr	r1, [r3, #8]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	f000 fd7e 	bl	800a8e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	689a      	ldr	r2, [r3, #8]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009dfa:	609a      	str	r2, [r3, #8]
      break;
 8009dfc:	e03c      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6818      	ldr	r0, [r3, #0]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	6859      	ldr	r1, [r3, #4]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f000 fc3c 	bl	800a688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2150      	movs	r1, #80	; 0x50
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 fd4b 	bl	800a8b2 <TIM_ITRx_SetConfig>
      break;
 8009e1c:	e02c      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	6859      	ldr	r1, [r3, #4]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f000 fc98 	bl	800a760 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2160      	movs	r1, #96	; 0x60
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 fd3b 	bl	800a8b2 <TIM_ITRx_SetConfig>
      break;
 8009e3c:	e01c      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6818      	ldr	r0, [r3, #0]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	6859      	ldr	r1, [r3, #4]
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	f000 fc1c 	bl	800a688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2140      	movs	r1, #64	; 0x40
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 fd2b 	bl	800a8b2 <TIM_ITRx_SetConfig>
      break;
 8009e5c:	e00c      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4619      	mov	r1, r3
 8009e68:	4610      	mov	r0, r2
 8009e6a:	f000 fd22 	bl	800a8b2 <TIM_ITRx_SetConfig>
      break;
 8009e6e:	e003      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	73fb      	strb	r3, [r7, #15]
      break;
 8009e74:	e000      	b.n	8009e78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b082      	sub	sp, #8
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d101      	bne.n	8009eaa <HAL_TIM_SlaveConfigSynchro+0x18>
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	e031      	b.n	8009f0e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fadd 	bl	800a47c <TIM_SlaveTimer_SetConfig>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d009      	beq.n	8009edc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e018      	b.n	8009f0e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68da      	ldr	r2, [r3, #12]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009eea:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68da      	ldr	r2, [r3, #12]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009efa:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
	...

08009f18 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009f22:	2300      	movs	r3, #0
 8009f24:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2b0c      	cmp	r3, #12
 8009f2a:	d831      	bhi.n	8009f90 <HAL_TIM_ReadCapturedValue+0x78>
 8009f2c:	a201      	add	r2, pc, #4	; (adr r2, 8009f34 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f32:	bf00      	nop
 8009f34:	08009f69 	.word	0x08009f69
 8009f38:	08009f91 	.word	0x08009f91
 8009f3c:	08009f91 	.word	0x08009f91
 8009f40:	08009f91 	.word	0x08009f91
 8009f44:	08009f73 	.word	0x08009f73
 8009f48:	08009f91 	.word	0x08009f91
 8009f4c:	08009f91 	.word	0x08009f91
 8009f50:	08009f91 	.word	0x08009f91
 8009f54:	08009f7d 	.word	0x08009f7d
 8009f58:	08009f91 	.word	0x08009f91
 8009f5c:	08009f91 	.word	0x08009f91
 8009f60:	08009f91 	.word	0x08009f91
 8009f64:	08009f87 	.word	0x08009f87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6e:	60fb      	str	r3, [r7, #12]

      break;
 8009f70:	e00f      	b.n	8009f92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f78:	60fb      	str	r3, [r7, #12]

      break;
 8009f7a:	e00a      	b.n	8009f92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f82:	60fb      	str	r3, [r7, #12]

      break;
 8009f84:	e005      	b.n	8009f92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8c:	60fb      	str	r3, [r7, #12]

      break;
 8009f8e:	e000      	b.n	8009f92 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009f90:	bf00      	nop
  }

  return tmpreg;
 8009f92:	68fb      	ldr	r3, [r7, #12]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a40      	ldr	r2, [pc, #256]	; (800a0f0 <TIM_Base_SetConfig+0x114>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d013      	beq.n	800a01c <TIM_Base_SetConfig+0x40>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ffa:	d00f      	beq.n	800a01c <TIM_Base_SetConfig+0x40>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a3d      	ldr	r2, [pc, #244]	; (800a0f4 <TIM_Base_SetConfig+0x118>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d00b      	beq.n	800a01c <TIM_Base_SetConfig+0x40>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a3c      	ldr	r2, [pc, #240]	; (800a0f8 <TIM_Base_SetConfig+0x11c>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d007      	beq.n	800a01c <TIM_Base_SetConfig+0x40>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a3b      	ldr	r2, [pc, #236]	; (800a0fc <TIM_Base_SetConfig+0x120>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d003      	beq.n	800a01c <TIM_Base_SetConfig+0x40>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a3a      	ldr	r2, [pc, #232]	; (800a100 <TIM_Base_SetConfig+0x124>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d108      	bne.n	800a02e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a2f      	ldr	r2, [pc, #188]	; (800a0f0 <TIM_Base_SetConfig+0x114>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d02b      	beq.n	800a08e <TIM_Base_SetConfig+0xb2>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a03c:	d027      	beq.n	800a08e <TIM_Base_SetConfig+0xb2>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a2c      	ldr	r2, [pc, #176]	; (800a0f4 <TIM_Base_SetConfig+0x118>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d023      	beq.n	800a08e <TIM_Base_SetConfig+0xb2>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a2b      	ldr	r2, [pc, #172]	; (800a0f8 <TIM_Base_SetConfig+0x11c>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d01f      	beq.n	800a08e <TIM_Base_SetConfig+0xb2>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a2a      	ldr	r2, [pc, #168]	; (800a0fc <TIM_Base_SetConfig+0x120>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d01b      	beq.n	800a08e <TIM_Base_SetConfig+0xb2>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a29      	ldr	r2, [pc, #164]	; (800a100 <TIM_Base_SetConfig+0x124>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d017      	beq.n	800a08e <TIM_Base_SetConfig+0xb2>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a28      	ldr	r2, [pc, #160]	; (800a104 <TIM_Base_SetConfig+0x128>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d013      	beq.n	800a08e <TIM_Base_SetConfig+0xb2>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a27      	ldr	r2, [pc, #156]	; (800a108 <TIM_Base_SetConfig+0x12c>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d00f      	beq.n	800a08e <TIM_Base_SetConfig+0xb2>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a26      	ldr	r2, [pc, #152]	; (800a10c <TIM_Base_SetConfig+0x130>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d00b      	beq.n	800a08e <TIM_Base_SetConfig+0xb2>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a25      	ldr	r2, [pc, #148]	; (800a110 <TIM_Base_SetConfig+0x134>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d007      	beq.n	800a08e <TIM_Base_SetConfig+0xb2>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a24      	ldr	r2, [pc, #144]	; (800a114 <TIM_Base_SetConfig+0x138>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d003      	beq.n	800a08e <TIM_Base_SetConfig+0xb2>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a23      	ldr	r2, [pc, #140]	; (800a118 <TIM_Base_SetConfig+0x13c>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d108      	bne.n	800a0a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	689a      	ldr	r2, [r3, #8]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a0a      	ldr	r2, [pc, #40]	; (800a0f0 <TIM_Base_SetConfig+0x114>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d003      	beq.n	800a0d4 <TIM_Base_SetConfig+0xf8>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a0c      	ldr	r2, [pc, #48]	; (800a100 <TIM_Base_SetConfig+0x124>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d103      	bne.n	800a0dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	691a      	ldr	r2, [r3, #16]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	615a      	str	r2, [r3, #20]
}
 800a0e2:	bf00      	nop
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	40010000 	.word	0x40010000
 800a0f4:	40000400 	.word	0x40000400
 800a0f8:	40000800 	.word	0x40000800
 800a0fc:	40000c00 	.word	0x40000c00
 800a100:	40010400 	.word	0x40010400
 800a104:	40014000 	.word	0x40014000
 800a108:	40014400 	.word	0x40014400
 800a10c:	40014800 	.word	0x40014800
 800a110:	40001800 	.word	0x40001800
 800a114:	40001c00 	.word	0x40001c00
 800a118:	40002000 	.word	0x40002000

0800a11c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b087      	sub	sp, #28
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	f023 0201 	bic.w	r2, r3, #1
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a14a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f023 0303 	bic.w	r3, r3, #3
 800a152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	f023 0302 	bic.w	r3, r3, #2
 800a164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a20      	ldr	r2, [pc, #128]	; (800a1f4 <TIM_OC1_SetConfig+0xd8>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d003      	beq.n	800a180 <TIM_OC1_SetConfig+0x64>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a1f      	ldr	r2, [pc, #124]	; (800a1f8 <TIM_OC1_SetConfig+0xdc>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d10c      	bne.n	800a19a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f023 0308 	bic.w	r3, r3, #8
 800a186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	4313      	orrs	r3, r2
 800a190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f023 0304 	bic.w	r3, r3, #4
 800a198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a15      	ldr	r2, [pc, #84]	; (800a1f4 <TIM_OC1_SetConfig+0xd8>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d003      	beq.n	800a1aa <TIM_OC1_SetConfig+0x8e>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a14      	ldr	r2, [pc, #80]	; (800a1f8 <TIM_OC1_SetConfig+0xdc>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d111      	bne.n	800a1ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	693a      	ldr	r2, [r7, #16]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	697a      	ldr	r2, [r7, #20]
 800a1e6:	621a      	str	r2, [r3, #32]
}
 800a1e8:	bf00      	nop
 800a1ea:	371c      	adds	r7, #28
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	40010000 	.word	0x40010000
 800a1f8:	40010400 	.word	0x40010400

0800a1fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a1b      	ldr	r3, [r3, #32]
 800a20a:	f023 0210 	bic.w	r2, r3, #16
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a22a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	021b      	lsls	r3, r3, #8
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	f023 0320 	bic.w	r3, r3, #32
 800a246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	011b      	lsls	r3, r3, #4
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	4313      	orrs	r3, r2
 800a252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a22      	ldr	r2, [pc, #136]	; (800a2e0 <TIM_OC2_SetConfig+0xe4>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d003      	beq.n	800a264 <TIM_OC2_SetConfig+0x68>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a21      	ldr	r2, [pc, #132]	; (800a2e4 <TIM_OC2_SetConfig+0xe8>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d10d      	bne.n	800a280 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a26a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	011b      	lsls	r3, r3, #4
 800a272:	697a      	ldr	r2, [r7, #20]
 800a274:	4313      	orrs	r3, r2
 800a276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a27e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a17      	ldr	r2, [pc, #92]	; (800a2e0 <TIM_OC2_SetConfig+0xe4>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d003      	beq.n	800a290 <TIM_OC2_SetConfig+0x94>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a16      	ldr	r2, [pc, #88]	; (800a2e4 <TIM_OC2_SetConfig+0xe8>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d113      	bne.n	800a2b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a296:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a29e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	685a      	ldr	r2, [r3, #4]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	621a      	str	r2, [r3, #32]
}
 800a2d2:	bf00      	nop
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	40010000 	.word	0x40010000
 800a2e4:	40010400 	.word	0x40010400

0800a2e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f023 0303 	bic.w	r3, r3, #3
 800a31e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	4313      	orrs	r3, r2
 800a328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	021b      	lsls	r3, r3, #8
 800a338:	697a      	ldr	r2, [r7, #20]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a21      	ldr	r2, [pc, #132]	; (800a3c8 <TIM_OC3_SetConfig+0xe0>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d003      	beq.n	800a34e <TIM_OC3_SetConfig+0x66>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a20      	ldr	r2, [pc, #128]	; (800a3cc <TIM_OC3_SetConfig+0xe4>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d10d      	bne.n	800a36a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	021b      	lsls	r3, r3, #8
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	4313      	orrs	r3, r2
 800a360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a16      	ldr	r2, [pc, #88]	; (800a3c8 <TIM_OC3_SetConfig+0xe0>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d003      	beq.n	800a37a <TIM_OC3_SetConfig+0x92>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4a15      	ldr	r2, [pc, #84]	; (800a3cc <TIM_OC3_SetConfig+0xe4>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d113      	bne.n	800a3a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	695b      	ldr	r3, [r3, #20]
 800a38e:	011b      	lsls	r3, r3, #4
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	4313      	orrs	r3, r2
 800a394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	011b      	lsls	r3, r3, #4
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	693a      	ldr	r2, [r7, #16]
 800a3a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	685a      	ldr	r2, [r3, #4]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	621a      	str	r2, [r3, #32]
}
 800a3bc:	bf00      	nop
 800a3be:	371c      	adds	r7, #28
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr
 800a3c8:	40010000 	.word	0x40010000
 800a3cc:	40010400 	.word	0x40010400

0800a3d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b087      	sub	sp, #28
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a1b      	ldr	r3, [r3, #32]
 800a3ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	69db      	ldr	r3, [r3, #28]
 800a3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	021b      	lsls	r3, r3, #8
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	4313      	orrs	r3, r2
 800a412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a41a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	031b      	lsls	r3, r3, #12
 800a422:	693a      	ldr	r2, [r7, #16]
 800a424:	4313      	orrs	r3, r2
 800a426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4a12      	ldr	r2, [pc, #72]	; (800a474 <TIM_OC4_SetConfig+0xa4>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d003      	beq.n	800a438 <TIM_OC4_SetConfig+0x68>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4a11      	ldr	r2, [pc, #68]	; (800a478 <TIM_OC4_SetConfig+0xa8>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d109      	bne.n	800a44c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a43e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	695b      	ldr	r3, [r3, #20]
 800a444:	019b      	lsls	r3, r3, #6
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	4313      	orrs	r3, r2
 800a44a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	621a      	str	r2, [r3, #32]
}
 800a466:	bf00      	nop
 800a468:	371c      	adds	r7, #28
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	40010000 	.word	0x40010000
 800a478:	40010400 	.word	0x40010400

0800a47c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a498:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	f023 0307 	bic.w	r3, r3, #7
 800a4aa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	2b70      	cmp	r3, #112	; 0x70
 800a4c4:	d01a      	beq.n	800a4fc <TIM_SlaveTimer_SetConfig+0x80>
 800a4c6:	2b70      	cmp	r3, #112	; 0x70
 800a4c8:	d860      	bhi.n	800a58c <TIM_SlaveTimer_SetConfig+0x110>
 800a4ca:	2b60      	cmp	r3, #96	; 0x60
 800a4cc:	d054      	beq.n	800a578 <TIM_SlaveTimer_SetConfig+0xfc>
 800a4ce:	2b60      	cmp	r3, #96	; 0x60
 800a4d0:	d85c      	bhi.n	800a58c <TIM_SlaveTimer_SetConfig+0x110>
 800a4d2:	2b50      	cmp	r3, #80	; 0x50
 800a4d4:	d046      	beq.n	800a564 <TIM_SlaveTimer_SetConfig+0xe8>
 800a4d6:	2b50      	cmp	r3, #80	; 0x50
 800a4d8:	d858      	bhi.n	800a58c <TIM_SlaveTimer_SetConfig+0x110>
 800a4da:	2b40      	cmp	r3, #64	; 0x40
 800a4dc:	d019      	beq.n	800a512 <TIM_SlaveTimer_SetConfig+0x96>
 800a4de:	2b40      	cmp	r3, #64	; 0x40
 800a4e0:	d854      	bhi.n	800a58c <TIM_SlaveTimer_SetConfig+0x110>
 800a4e2:	2b30      	cmp	r3, #48	; 0x30
 800a4e4:	d055      	beq.n	800a592 <TIM_SlaveTimer_SetConfig+0x116>
 800a4e6:	2b30      	cmp	r3, #48	; 0x30
 800a4e8:	d850      	bhi.n	800a58c <TIM_SlaveTimer_SetConfig+0x110>
 800a4ea:	2b20      	cmp	r3, #32
 800a4ec:	d051      	beq.n	800a592 <TIM_SlaveTimer_SetConfig+0x116>
 800a4ee:	2b20      	cmp	r3, #32
 800a4f0:	d84c      	bhi.n	800a58c <TIM_SlaveTimer_SetConfig+0x110>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d04d      	beq.n	800a592 <TIM_SlaveTimer_SetConfig+0x116>
 800a4f6:	2b10      	cmp	r3, #16
 800a4f8:	d04b      	beq.n	800a592 <TIM_SlaveTimer_SetConfig+0x116>
 800a4fa:	e047      	b.n	800a58c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6818      	ldr	r0, [r3, #0]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	68d9      	ldr	r1, [r3, #12]
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	689a      	ldr	r2, [r3, #8]
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	f000 f9ec 	bl	800a8e8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800a510:	e040      	b.n	800a594 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b05      	cmp	r3, #5
 800a518:	d101      	bne.n	800a51e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e03b      	b.n	800a596 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	6a1b      	ldr	r3, [r3, #32]
 800a524:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6a1a      	ldr	r2, [r3, #32]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f022 0201 	bic.w	r2, r2, #1
 800a534:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a544:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	011b      	lsls	r3, r3, #4
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	4313      	orrs	r3, r2
 800a550:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	621a      	str	r2, [r3, #32]
      break;
 800a562:	e017      	b.n	800a594 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6818      	ldr	r0, [r3, #0]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	6899      	ldr	r1, [r3, #8]
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	461a      	mov	r2, r3
 800a572:	f000 f889 	bl	800a688 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a576:	e00d      	b.n	800a594 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6818      	ldr	r0, [r3, #0]
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	6899      	ldr	r1, [r3, #8]
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	461a      	mov	r2, r3
 800a586:	f000 f8eb 	bl	800a760 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a58a:	e003      	b.n	800a594 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	75fb      	strb	r3, [r7, #23]
      break;
 800a590:	e000      	b.n	800a594 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800a592:	bf00      	nop
  }

  return status;
 800a594:	7dfb      	ldrb	r3, [r7, #23]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3718      	adds	r7, #24
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
	...

0800a5a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b087      	sub	sp, #28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	f023 0201 	bic.w	r2, r3, #1
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	699b      	ldr	r3, [r3, #24]
 800a5be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6a1b      	ldr	r3, [r3, #32]
 800a5c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	4a28      	ldr	r2, [pc, #160]	; (800a66c <TIM_TI1_SetConfig+0xcc>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d01b      	beq.n	800a606 <TIM_TI1_SetConfig+0x66>
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5d4:	d017      	beq.n	800a606 <TIM_TI1_SetConfig+0x66>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	4a25      	ldr	r2, [pc, #148]	; (800a670 <TIM_TI1_SetConfig+0xd0>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d013      	beq.n	800a606 <TIM_TI1_SetConfig+0x66>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	4a24      	ldr	r2, [pc, #144]	; (800a674 <TIM_TI1_SetConfig+0xd4>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d00f      	beq.n	800a606 <TIM_TI1_SetConfig+0x66>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	4a23      	ldr	r2, [pc, #140]	; (800a678 <TIM_TI1_SetConfig+0xd8>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d00b      	beq.n	800a606 <TIM_TI1_SetConfig+0x66>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	4a22      	ldr	r2, [pc, #136]	; (800a67c <TIM_TI1_SetConfig+0xdc>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d007      	beq.n	800a606 <TIM_TI1_SetConfig+0x66>
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	4a21      	ldr	r2, [pc, #132]	; (800a680 <TIM_TI1_SetConfig+0xe0>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d003      	beq.n	800a606 <TIM_TI1_SetConfig+0x66>
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	4a20      	ldr	r2, [pc, #128]	; (800a684 <TIM_TI1_SetConfig+0xe4>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d101      	bne.n	800a60a <TIM_TI1_SetConfig+0x6a>
 800a606:	2301      	movs	r3, #1
 800a608:	e000      	b.n	800a60c <TIM_TI1_SetConfig+0x6c>
 800a60a:	2300      	movs	r3, #0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d008      	beq.n	800a622 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	f023 0303 	bic.w	r3, r3, #3
 800a616:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	617b      	str	r3, [r7, #20]
 800a620:	e003      	b.n	800a62a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	f043 0301 	orr.w	r3, r3, #1
 800a628:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	011b      	lsls	r3, r3, #4
 800a636:	b2db      	uxtb	r3, r3
 800a638:	697a      	ldr	r2, [r7, #20]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	f023 030a 	bic.w	r3, r3, #10
 800a644:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	f003 030a 	and.w	r3, r3, #10
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	4313      	orrs	r3, r2
 800a650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	621a      	str	r2, [r3, #32]
}
 800a65e:	bf00      	nop
 800a660:	371c      	adds	r7, #28
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	40010000 	.word	0x40010000
 800a670:	40000400 	.word	0x40000400
 800a674:	40000800 	.word	0x40000800
 800a678:	40000c00 	.word	0x40000c00
 800a67c:	40010400 	.word	0x40010400
 800a680:	40014000 	.word	0x40014000
 800a684:	40001800 	.word	0x40001800

0800a688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6a1b      	ldr	r3, [r3, #32]
 800a698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	f023 0201 	bic.w	r2, r3, #1
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	699b      	ldr	r3, [r3, #24]
 800a6aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	011b      	lsls	r3, r3, #4
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	f023 030a 	bic.w	r3, r3, #10
 800a6c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6c6:	697a      	ldr	r2, [r7, #20]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	697a      	ldr	r2, [r7, #20]
 800a6d8:	621a      	str	r2, [r3, #32]
}
 800a6da:	bf00      	nop
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr

0800a6e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b087      	sub	sp, #28
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	60f8      	str	r0, [r7, #12]
 800a6ee:	60b9      	str	r1, [r7, #8]
 800a6f0:	607a      	str	r2, [r7, #4]
 800a6f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6a1b      	ldr	r3, [r3, #32]
 800a6f8:	f023 0210 	bic.w	r2, r3, #16
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a712:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	021b      	lsls	r3, r3, #8
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a724:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	031b      	lsls	r3, r3, #12
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	697a      	ldr	r2, [r7, #20]
 800a72e:	4313      	orrs	r3, r2
 800a730:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a738:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	011b      	lsls	r3, r3, #4
 800a73e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	4313      	orrs	r3, r2
 800a746:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	621a      	str	r2, [r3, #32]
}
 800a754:	bf00      	nop
 800a756:	371c      	adds	r7, #28
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a760:	b480      	push	{r7}
 800a762:	b087      	sub	sp, #28
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6a1b      	ldr	r3, [r3, #32]
 800a770:	f023 0210 	bic.w	r2, r3, #16
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6a1b      	ldr	r3, [r3, #32]
 800a782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a78a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	031b      	lsls	r3, r3, #12
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	4313      	orrs	r3, r2
 800a794:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a79c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	011b      	lsls	r3, r3, #4
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	693a      	ldr	r2, [r7, #16]
 800a7b2:	621a      	str	r2, [r3, #32]
}
 800a7b4:	bf00      	nop
 800a7b6:	371c      	adds	r7, #28
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b087      	sub	sp, #28
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
 800a7cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	69db      	ldr	r3, [r3, #28]
 800a7de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6a1b      	ldr	r3, [r3, #32]
 800a7e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	f023 0303 	bic.w	r3, r3, #3
 800a7ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a7fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	011b      	lsls	r3, r3, #4
 800a802:	b2db      	uxtb	r3, r3
 800a804:	697a      	ldr	r2, [r7, #20]
 800a806:	4313      	orrs	r3, r2
 800a808:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a810:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	021b      	lsls	r3, r3, #8
 800a816:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a81a:	693a      	ldr	r2, [r7, #16]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	621a      	str	r2, [r3, #32]
}
 800a82c:	bf00      	nop
 800a82e:	371c      	adds	r7, #28
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
 800a844:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	69db      	ldr	r3, [r3, #28]
 800a856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6a1b      	ldr	r3, [r3, #32]
 800a85c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a864:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	021b      	lsls	r3, r3, #8
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a876:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	031b      	lsls	r3, r3, #12
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	697a      	ldr	r2, [r7, #20]
 800a880:	4313      	orrs	r3, r2
 800a882:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a88a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	031b      	lsls	r3, r3, #12
 800a890:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	4313      	orrs	r3, r2
 800a898:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	697a      	ldr	r2, [r7, #20]
 800a89e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	621a      	str	r2, [r3, #32]
}
 800a8a6:	bf00      	nop
 800a8a8:	371c      	adds	r7, #28
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b085      	sub	sp, #20
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	f043 0307 	orr.w	r3, r3, #7
 800a8d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	609a      	str	r2, [r3, #8]
}
 800a8dc:	bf00      	nop
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b087      	sub	sp, #28
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	021a      	lsls	r2, r3, #8
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	431a      	orrs	r2, r3
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	4313      	orrs	r3, r2
 800a910:	697a      	ldr	r2, [r7, #20]
 800a912:	4313      	orrs	r3, r2
 800a914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	697a      	ldr	r2, [r7, #20]
 800a91a:	609a      	str	r2, [r3, #8]
}
 800a91c:	bf00      	nop
 800a91e:	371c      	adds	r7, #28
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a928:	b480      	push	{r7}
 800a92a:	b087      	sub	sp, #28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	f003 031f 	and.w	r3, r3, #31
 800a93a:	2201      	movs	r2, #1
 800a93c:	fa02 f303 	lsl.w	r3, r2, r3
 800a940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6a1a      	ldr	r2, [r3, #32]
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	43db      	mvns	r3, r3
 800a94a:	401a      	ands	r2, r3
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6a1a      	ldr	r2, [r3, #32]
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	f003 031f 	and.w	r3, r3, #31
 800a95a:	6879      	ldr	r1, [r7, #4]
 800a95c:	fa01 f303 	lsl.w	r3, r1, r3
 800a960:	431a      	orrs	r2, r3
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	621a      	str	r2, [r3, #32]
}
 800a966:	bf00      	nop
 800a968:	371c      	adds	r7, #28
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
	...

0800a974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a984:	2b01      	cmp	r3, #1
 800a986:	d101      	bne.n	800a98c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a988:	2302      	movs	r3, #2
 800a98a:	e05a      	b.n	800aa42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2202      	movs	r2, #2
 800a998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a21      	ldr	r2, [pc, #132]	; (800aa50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d022      	beq.n	800aa16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9d8:	d01d      	beq.n	800aa16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a1d      	ldr	r2, [pc, #116]	; (800aa54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d018      	beq.n	800aa16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a1b      	ldr	r2, [pc, #108]	; (800aa58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d013      	beq.n	800aa16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a1a      	ldr	r2, [pc, #104]	; (800aa5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d00e      	beq.n	800aa16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a18      	ldr	r2, [pc, #96]	; (800aa60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d009      	beq.n	800aa16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a17      	ldr	r2, [pc, #92]	; (800aa64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d004      	beq.n	800aa16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a15      	ldr	r2, [pc, #84]	; (800aa68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d10c      	bne.n	800aa30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3714      	adds	r7, #20
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	40010000 	.word	0x40010000
 800aa54:	40000400 	.word	0x40000400
 800aa58:	40000800 	.word	0x40000800
 800aa5c:	40000c00 	.word	0x40000c00
 800aa60:	40010400 	.word	0x40010400
 800aa64:	40014000 	.word	0x40014000
 800aa68:	40001800 	.word	0x40001800

0800aa6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e03f      	b.n	800ab26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d106      	bne.n	800aac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7f9 f8e8 	bl	8003c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2224      	movs	r2, #36	; 0x24
 800aac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68da      	ldr	r2, [r3, #12]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 ffd7 	bl	800ba8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	691a      	ldr	r2, [r3, #16]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aaec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	695a      	ldr	r2, [r3, #20]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aafc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68da      	ldr	r2, [r3, #12]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2220      	movs	r2, #32
 800ab18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2220      	movs	r2, #32
 800ab20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b08a      	sub	sp, #40	; 0x28
 800ab32:	af02      	add	r7, sp, #8
 800ab34:	60f8      	str	r0, [r7, #12]
 800ab36:	60b9      	str	r1, [r7, #8]
 800ab38:	603b      	str	r3, [r7, #0]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	2b20      	cmp	r3, #32
 800ab4c:	d17c      	bne.n	800ac48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <HAL_UART_Transmit+0x2c>
 800ab54:	88fb      	ldrh	r3, [r7, #6]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d101      	bne.n	800ab5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e075      	b.n	800ac4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d101      	bne.n	800ab6c <HAL_UART_Transmit+0x3e>
 800ab68:	2302      	movs	r3, #2
 800ab6a:	e06e      	b.n	800ac4a <HAL_UART_Transmit+0x11c>
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2200      	movs	r2, #0
 800ab78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2221      	movs	r2, #33	; 0x21
 800ab7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab82:	f7fb f9f7 	bl	8005f74 <HAL_GetTick>
 800ab86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	88fa      	ldrh	r2, [r7, #6]
 800ab8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	88fa      	ldrh	r2, [r7, #6]
 800ab92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab9c:	d108      	bne.n	800abb0 <HAL_UART_Transmit+0x82>
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d104      	bne.n	800abb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800aba6:	2300      	movs	r3, #0
 800aba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	61bb      	str	r3, [r7, #24]
 800abae:	e003      	b.n	800abb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abb4:	2300      	movs	r3, #0
 800abb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2200      	movs	r2, #0
 800abbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800abc0:	e02a      	b.n	800ac18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	2200      	movs	r2, #0
 800abca:	2180      	movs	r1, #128	; 0x80
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 fc51 	bl	800b474 <UART_WaitOnFlagUntilTimeout>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800abd8:	2303      	movs	r3, #3
 800abda:	e036      	b.n	800ac4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10b      	bne.n	800abfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	881b      	ldrh	r3, [r3, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	3302      	adds	r3, #2
 800abf6:	61bb      	str	r3, [r7, #24]
 800abf8:	e007      	b.n	800ac0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	781a      	ldrb	r2, [r3, #0]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	3301      	adds	r3, #1
 800ac08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	3b01      	subs	r3, #1
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1cf      	bne.n	800abc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	2140      	movs	r1, #64	; 0x40
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f000 fc21 	bl	800b474 <UART_WaitOnFlagUntilTimeout>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d001      	beq.n	800ac3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ac38:	2303      	movs	r3, #3
 800ac3a:	e006      	b.n	800ac4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2220      	movs	r2, #32
 800ac40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	e000      	b.n	800ac4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ac48:	2302      	movs	r3, #2
  }
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3720      	adds	r7, #32
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b084      	sub	sp, #16
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	60f8      	str	r0, [r7, #12]
 800ac5a:	60b9      	str	r1, [r7, #8]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b20      	cmp	r3, #32
 800ac6a:	d11d      	bne.n	800aca8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d002      	beq.n	800ac78 <HAL_UART_Receive_IT+0x26>
 800ac72:	88fb      	ldrh	r3, [r7, #6]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d101      	bne.n	800ac7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e016      	b.n	800acaa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d101      	bne.n	800ac8a <HAL_UART_Receive_IT+0x38>
 800ac86:	2302      	movs	r3, #2
 800ac88:	e00f      	b.n	800acaa <HAL_UART_Receive_IT+0x58>
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ac98:	88fb      	ldrh	r3, [r7, #6]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	68b9      	ldr	r1, [r7, #8]
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f000 fc56 	bl	800b550 <UART_Start_Receive_IT>
 800aca4:	4603      	mov	r3, r0
 800aca6:	e000      	b.n	800acaa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800aca8:	2302      	movs	r3, #2
  }
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b084      	sub	sp, #16
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	60f8      	str	r0, [r7, #12]
 800acba:	60b9      	str	r1, [r7, #8]
 800acbc:	4613      	mov	r3, r2
 800acbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	2b20      	cmp	r3, #32
 800acca:	d11d      	bne.n	800ad08 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d002      	beq.n	800acd8 <HAL_UART_Receive_DMA+0x26>
 800acd2:	88fb      	ldrh	r3, [r7, #6]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d101      	bne.n	800acdc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e016      	b.n	800ad0a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d101      	bne.n	800acea <HAL_UART_Receive_DMA+0x38>
 800ace6:	2302      	movs	r3, #2
 800ace8:	e00f      	b.n	800ad0a <HAL_UART_Receive_DMA+0x58>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2201      	movs	r2, #1
 800acee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800acf8:	88fb      	ldrh	r3, [r7, #6]
 800acfa:	461a      	mov	r2, r3
 800acfc:	68b9      	ldr	r1, [r7, #8]
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	f000 fc64 	bl	800b5cc <UART_Start_Receive_DMA>
 800ad04:	4603      	mov	r3, r0
 800ad06:	e000      	b.n	800ad0a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ad08:	2302      	movs	r3, #2
  }
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
	...

0800ad14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b0ba      	sub	sp, #232	; 0xe8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	695b      	ldr	r3, [r3, #20]
 800ad36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ad40:	2300      	movs	r3, #0
 800ad42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ad46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad4a:	f003 030f 	and.w	r3, r3, #15
 800ad4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ad52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10f      	bne.n	800ad7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad5e:	f003 0320 	and.w	r3, r3, #32
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d009      	beq.n	800ad7a <HAL_UART_IRQHandler+0x66>
 800ad66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad6a:	f003 0320 	and.w	r3, r3, #32
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d003      	beq.n	800ad7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fdcf 	bl	800b916 <UART_Receive_IT>
      return;
 800ad78:	e256      	b.n	800b228 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ad7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f000 80de 	beq.w	800af40 <HAL_UART_IRQHandler+0x22c>
 800ad84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad88:	f003 0301 	and.w	r3, r3, #1
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d106      	bne.n	800ad9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ad90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f000 80d1 	beq.w	800af40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ad9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada2:	f003 0301 	and.w	r3, r3, #1
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00b      	beq.n	800adc2 <HAL_UART_IRQHandler+0xae>
 800adaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d005      	beq.n	800adc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adba:	f043 0201 	orr.w	r2, r3, #1
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800adc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc6:	f003 0304 	and.w	r3, r3, #4
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00b      	beq.n	800ade6 <HAL_UART_IRQHandler+0xd2>
 800adce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	2b00      	cmp	r3, #0
 800add8:	d005      	beq.n	800ade6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adde:	f043 0202 	orr.w	r2, r3, #2
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ade6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adea:	f003 0302 	and.w	r3, r3, #2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00b      	beq.n	800ae0a <HAL_UART_IRQHandler+0xf6>
 800adf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adf6:	f003 0301 	and.w	r3, r3, #1
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d005      	beq.n	800ae0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae02:	f043 0204 	orr.w	r2, r3, #4
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ae0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae0e:	f003 0308 	and.w	r3, r3, #8
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d011      	beq.n	800ae3a <HAL_UART_IRQHandler+0x126>
 800ae16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae1a:	f003 0320 	and.w	r3, r3, #32
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d105      	bne.n	800ae2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ae22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae26:	f003 0301 	and.w	r3, r3, #1
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d005      	beq.n	800ae3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae32:	f043 0208 	orr.w	r2, r3, #8
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f000 81ed 	beq.w	800b21e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae48:	f003 0320 	and.w	r3, r3, #32
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d008      	beq.n	800ae62 <HAL_UART_IRQHandler+0x14e>
 800ae50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae54:	f003 0320 	and.w	r3, r3, #32
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fd5a 	bl	800b916 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	695b      	ldr	r3, [r3, #20]
 800ae68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae6c:	2b40      	cmp	r3, #64	; 0x40
 800ae6e:	bf0c      	ite	eq
 800ae70:	2301      	moveq	r3, #1
 800ae72:	2300      	movne	r3, #0
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae7e:	f003 0308 	and.w	r3, r3, #8
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d103      	bne.n	800ae8e <HAL_UART_IRQHandler+0x17a>
 800ae86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d04f      	beq.n	800af2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fc62 	bl	800b758 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae9e:	2b40      	cmp	r3, #64	; 0x40
 800aea0:	d141      	bne.n	800af26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3314      	adds	r3, #20
 800aea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aeb0:	e853 3f00 	ldrex	r3, [r3]
 800aeb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aeb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	3314      	adds	r3, #20
 800aeca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aece:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800aeda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aede:	e841 2300 	strex	r3, r2, [r1]
 800aee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800aee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d1d9      	bne.n	800aea2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d013      	beq.n	800af1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aefa:	4a7d      	ldr	r2, [pc, #500]	; (800b0f0 <HAL_UART_IRQHandler+0x3dc>)
 800aefc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af02:	4618      	mov	r0, r3
 800af04:	f7fb fd50 	bl	80069a8 <HAL_DMA_Abort_IT>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d016      	beq.n	800af3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af18:	4610      	mov	r0, r2
 800af1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af1c:	e00e      	b.n	800af3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f99a 	bl	800b258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af24:	e00a      	b.n	800af3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f996 	bl	800b258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af2c:	e006      	b.n	800af3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f992 	bl	800b258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800af3a:	e170      	b.n	800b21e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af3c:	bf00      	nop
    return;
 800af3e:	e16e      	b.n	800b21e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af44:	2b01      	cmp	r3, #1
 800af46:	f040 814a 	bne.w	800b1de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800af4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af4e:	f003 0310 	and.w	r3, r3, #16
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 8143 	beq.w	800b1de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800af58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af5c:	f003 0310 	and.w	r3, r3, #16
 800af60:	2b00      	cmp	r3, #0
 800af62:	f000 813c 	beq.w	800b1de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af66:	2300      	movs	r3, #0
 800af68:	60bb      	str	r3, [r7, #8]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	60bb      	str	r3, [r7, #8]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	60bb      	str	r3, [r7, #8]
 800af7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af86:	2b40      	cmp	r3, #64	; 0x40
 800af88:	f040 80b4 	bne.w	800b0f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800af98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f000 8140 	beq.w	800b222 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800afa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800afaa:	429a      	cmp	r2, r3
 800afac:	f080 8139 	bcs.w	800b222 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800afb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afbc:	69db      	ldr	r3, [r3, #28]
 800afbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afc2:	f000 8088 	beq.w	800b0d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	330c      	adds	r3, #12
 800afcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800afd4:	e853 3f00 	ldrex	r3, [r3]
 800afd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800afdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800afe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	330c      	adds	r3, #12
 800afee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aff2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800affe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b002:	e841 2300 	strex	r3, r2, [r1]
 800b006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b00a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1d9      	bne.n	800afc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	3314      	adds	r3, #20
 800b018:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b01c:	e853 3f00 	ldrex	r3, [r3]
 800b020:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b024:	f023 0301 	bic.w	r3, r3, #1
 800b028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	3314      	adds	r3, #20
 800b032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b036:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b03a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b03e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b042:	e841 2300 	strex	r3, r2, [r1]
 800b046:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d1e1      	bne.n	800b012 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	3314      	adds	r3, #20
 800b054:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b058:	e853 3f00 	ldrex	r3, [r3]
 800b05c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b05e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b064:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	3314      	adds	r3, #20
 800b06e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b072:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b074:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b076:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b078:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b07a:	e841 2300 	strex	r3, r2, [r1]
 800b07e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1e3      	bne.n	800b04e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2220      	movs	r2, #32
 800b08a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	330c      	adds	r3, #12
 800b09a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b09e:	e853 3f00 	ldrex	r3, [r3]
 800b0a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b0a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0a6:	f023 0310 	bic.w	r3, r3, #16
 800b0aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	330c      	adds	r3, #12
 800b0b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b0b8:	65ba      	str	r2, [r7, #88]	; 0x58
 800b0ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b0be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0c0:	e841 2300 	strex	r3, r2, [r1]
 800b0c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b0c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d1e3      	bne.n	800b094 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7fb fbf9 	bl	80068c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	1ad3      	subs	r3, r2, r3
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 f8c0 	bl	800b26c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b0ec:	e099      	b.n	800b222 <HAL_UART_IRQHandler+0x50e>
 800b0ee:	bf00      	nop
 800b0f0:	0800b81f 	.word	0x0800b81f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	1ad3      	subs	r3, r2, r3
 800b100:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b108:	b29b      	uxth	r3, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	f000 808b 	beq.w	800b226 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b114:	2b00      	cmp	r3, #0
 800b116:	f000 8086 	beq.w	800b226 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	330c      	adds	r3, #12
 800b120:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b124:	e853 3f00 	ldrex	r3, [r3]
 800b128:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b12c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b130:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	330c      	adds	r3, #12
 800b13a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b13e:	647a      	str	r2, [r7, #68]	; 0x44
 800b140:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b142:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b144:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b146:	e841 2300 	strex	r3, r2, [r1]
 800b14a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1e3      	bne.n	800b11a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	3314      	adds	r3, #20
 800b158:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15c:	e853 3f00 	ldrex	r3, [r3]
 800b160:	623b      	str	r3, [r7, #32]
   return(result);
 800b162:	6a3b      	ldr	r3, [r7, #32]
 800b164:	f023 0301 	bic.w	r3, r3, #1
 800b168:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	3314      	adds	r3, #20
 800b172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b176:	633a      	str	r2, [r7, #48]	; 0x30
 800b178:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b17c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b17e:	e841 2300 	strex	r3, r2, [r1]
 800b182:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1e3      	bne.n	800b152 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2220      	movs	r2, #32
 800b18e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	330c      	adds	r3, #12
 800b19e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	e853 3f00 	ldrex	r3, [r3]
 800b1a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f023 0310 	bic.w	r3, r3, #16
 800b1ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	330c      	adds	r3, #12
 800b1b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b1bc:	61fa      	str	r2, [r7, #28]
 800b1be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c0:	69b9      	ldr	r1, [r7, #24]
 800b1c2:	69fa      	ldr	r2, [r7, #28]
 800b1c4:	e841 2300 	strex	r3, r2, [r1]
 800b1c8:	617b      	str	r3, [r7, #20]
   return(result);
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1e3      	bne.n	800b198 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b1d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 f848 	bl	800b26c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b1dc:	e023      	b.n	800b226 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d009      	beq.n	800b1fe <HAL_UART_IRQHandler+0x4ea>
 800b1ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d003      	beq.n	800b1fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fb25 	bl	800b846 <UART_Transmit_IT>
    return;
 800b1fc:	e014      	b.n	800b228 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00e      	beq.n	800b228 <HAL_UART_IRQHandler+0x514>
 800b20a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b20e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b212:	2b00      	cmp	r3, #0
 800b214:	d008      	beq.n	800b228 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 fb65 	bl	800b8e6 <UART_EndTransmit_IT>
    return;
 800b21c:	e004      	b.n	800b228 <HAL_UART_IRQHandler+0x514>
    return;
 800b21e:	bf00      	nop
 800b220:	e002      	b.n	800b228 <HAL_UART_IRQHandler+0x514>
      return;
 800b222:	bf00      	nop
 800b224:	e000      	b.n	800b228 <HAL_UART_IRQHandler+0x514>
      return;
 800b226:	bf00      	nop
  }
}
 800b228:	37e8      	adds	r7, #232	; 0xe8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop

0800b230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b24c:	bf00      	nop
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	460b      	mov	r3, r1
 800b276:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b278:	bf00      	nop
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b09c      	sub	sp, #112	; 0x70
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b290:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d172      	bne.n	800b386 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b2a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	330c      	adds	r3, #12
 800b2ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2b0:	e853 3f00 	ldrex	r3, [r3]
 800b2b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b2b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	330c      	adds	r3, #12
 800b2c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b2c6:	65ba      	str	r2, [r7, #88]	; 0x58
 800b2c8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b2cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2ce:	e841 2300 	strex	r3, r2, [r1]
 800b2d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b2d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1e5      	bne.n	800b2a6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3314      	adds	r3, #20
 800b2e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e4:	e853 3f00 	ldrex	r3, [r3]
 800b2e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ec:	f023 0301 	bic.w	r3, r3, #1
 800b2f0:	667b      	str	r3, [r7, #100]	; 0x64
 800b2f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3314      	adds	r3, #20
 800b2f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b2fa:	647a      	str	r2, [r7, #68]	; 0x44
 800b2fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b300:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b302:	e841 2300 	strex	r3, r2, [r1]
 800b306:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1e5      	bne.n	800b2da <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b30e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3314      	adds	r3, #20
 800b314:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b318:	e853 3f00 	ldrex	r3, [r3]
 800b31c:	623b      	str	r3, [r7, #32]
   return(result);
 800b31e:	6a3b      	ldr	r3, [r7, #32]
 800b320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b324:	663b      	str	r3, [r7, #96]	; 0x60
 800b326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3314      	adds	r3, #20
 800b32c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b32e:	633a      	str	r2, [r7, #48]	; 0x30
 800b330:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b336:	e841 2300 	strex	r3, r2, [r1]
 800b33a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1e5      	bne.n	800b30e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b344:	2220      	movs	r2, #32
 800b346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b34a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d119      	bne.n	800b386 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	330c      	adds	r3, #12
 800b358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	e853 3f00 	ldrex	r3, [r3]
 800b360:	60fb      	str	r3, [r7, #12]
   return(result);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f023 0310 	bic.w	r3, r3, #16
 800b368:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b36a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	330c      	adds	r3, #12
 800b370:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b372:	61fa      	str	r2, [r7, #28]
 800b374:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b376:	69b9      	ldr	r1, [r7, #24]
 800b378:	69fa      	ldr	r2, [r7, #28]
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	617b      	str	r3, [r7, #20]
   return(result);
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1e5      	bne.n	800b352 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d106      	bne.n	800b39c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b38e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b390:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b392:	4619      	mov	r1, r3
 800b394:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b396:	f7ff ff69 	bl	800b26c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b39a:	e002      	b.n	800b3a2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b39c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b39e:	f7f7 f851 	bl	8002444 <HAL_UART_RxCpltCallback>
}
 800b3a2:	bf00      	nop
 800b3a4:	3770      	adds	r7, #112	; 0x70
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b084      	sub	sp, #16
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d108      	bne.n	800b3d2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b3c4:	085b      	lsrs	r3, r3, #1
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f7ff ff4e 	bl	800b26c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b3d0:	e002      	b.n	800b3d8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f7ff ff36 	bl	800b244 <HAL_UART_RxHalfCpltCallback>
}
 800b3d8:	bf00      	nop
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	695b      	ldr	r3, [r3, #20]
 800b3f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3fc:	2b80      	cmp	r3, #128	; 0x80
 800b3fe:	bf0c      	ite	eq
 800b400:	2301      	moveq	r3, #1
 800b402:	2300      	movne	r3, #0
 800b404:	b2db      	uxtb	r3, r3
 800b406:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	2b21      	cmp	r3, #33	; 0x21
 800b412:	d108      	bne.n	800b426 <UART_DMAError+0x46>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d005      	beq.n	800b426 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2200      	movs	r2, #0
 800b41e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b420:	68b8      	ldr	r0, [r7, #8]
 800b422:	f000 f971 	bl	800b708 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	695b      	ldr	r3, [r3, #20]
 800b42c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b430:	2b40      	cmp	r3, #64	; 0x40
 800b432:	bf0c      	ite	eq
 800b434:	2301      	moveq	r3, #1
 800b436:	2300      	movne	r3, #0
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b442:	b2db      	uxtb	r3, r3
 800b444:	2b22      	cmp	r3, #34	; 0x22
 800b446:	d108      	bne.n	800b45a <UART_DMAError+0x7a>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d005      	beq.n	800b45a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	2200      	movs	r2, #0
 800b452:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b454:	68b8      	ldr	r0, [r7, #8]
 800b456:	f000 f97f 	bl	800b758 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b45e:	f043 0210 	orr.w	r2, r3, #16
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b466:	68b8      	ldr	r0, [r7, #8]
 800b468:	f7ff fef6 	bl	800b258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b46c:	bf00      	nop
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b090      	sub	sp, #64	; 0x40
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	603b      	str	r3, [r7, #0]
 800b480:	4613      	mov	r3, r2
 800b482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b484:	e050      	b.n	800b528 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48c:	d04c      	beq.n	800b528 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b48e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b490:	2b00      	cmp	r3, #0
 800b492:	d007      	beq.n	800b4a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b494:	f7fa fd6e 	bl	8005f74 <HAL_GetTick>
 800b498:	4602      	mov	r2, r0
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	1ad3      	subs	r3, r2, r3
 800b49e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d241      	bcs.n	800b528 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	330c      	adds	r3, #12
 800b4aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ae:	e853 3f00 	ldrex	r3, [r3]
 800b4b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	330c      	adds	r3, #12
 800b4c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4c4:	637a      	str	r2, [r7, #52]	; 0x34
 800b4c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4cc:	e841 2300 	strex	r3, r2, [r1]
 800b4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1e5      	bne.n	800b4a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	3314      	adds	r3, #20
 800b4de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	e853 3f00 	ldrex	r3, [r3]
 800b4e6:	613b      	str	r3, [r7, #16]
   return(result);
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	f023 0301 	bic.w	r3, r3, #1
 800b4ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	3314      	adds	r3, #20
 800b4f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4f8:	623a      	str	r2, [r7, #32]
 800b4fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fc:	69f9      	ldr	r1, [r7, #28]
 800b4fe:	6a3a      	ldr	r2, [r7, #32]
 800b500:	e841 2300 	strex	r3, r2, [r1]
 800b504:	61bb      	str	r3, [r7, #24]
   return(result);
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1e5      	bne.n	800b4d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2220      	movs	r2, #32
 800b510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2220      	movs	r2, #32
 800b518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b524:	2303      	movs	r3, #3
 800b526:	e00f      	b.n	800b548 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	4013      	ands	r3, r2
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	429a      	cmp	r2, r3
 800b536:	bf0c      	ite	eq
 800b538:	2301      	moveq	r3, #1
 800b53a:	2300      	movne	r3, #0
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	461a      	mov	r2, r3
 800b540:	79fb      	ldrb	r3, [r7, #7]
 800b542:	429a      	cmp	r2, r3
 800b544:	d09f      	beq.n	800b486 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b546:	2300      	movs	r3, #0
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3740      	adds	r7, #64	; 0x40
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	4613      	mov	r3, r2
 800b55c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	68ba      	ldr	r2, [r7, #8]
 800b562:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	88fa      	ldrh	r2, [r7, #6]
 800b568:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	88fa      	ldrh	r2, [r7, #6]
 800b56e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2222      	movs	r2, #34	; 0x22
 800b57a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2200      	movs	r2, #0
 800b582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	691b      	ldr	r3, [r3, #16]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d007      	beq.n	800b59e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68da      	ldr	r2, [r3, #12]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b59c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	695a      	ldr	r2, [r3, #20]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f042 0201 	orr.w	r2, r2, #1
 800b5ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68da      	ldr	r2, [r3, #12]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f042 0220 	orr.w	r2, r2, #32
 800b5bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3714      	adds	r7, #20
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b098      	sub	sp, #96	; 0x60
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	88fa      	ldrh	r2, [r7, #6]
 800b5e4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2222      	movs	r2, #34	; 0x22
 800b5f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f8:	4a40      	ldr	r2, [pc, #256]	; (800b6fc <UART_Start_Receive_DMA+0x130>)
 800b5fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b600:	4a3f      	ldr	r2, [pc, #252]	; (800b700 <UART_Start_Receive_DMA+0x134>)
 800b602:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b608:	4a3e      	ldr	r2, [pc, #248]	; (800b704 <UART_Start_Receive_DMA+0x138>)
 800b60a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b610:	2200      	movs	r2, #0
 800b612:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b614:	f107 0308 	add.w	r3, r7, #8
 800b618:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3304      	adds	r3, #4
 800b624:	4619      	mov	r1, r3
 800b626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	88fb      	ldrh	r3, [r7, #6]
 800b62c:	f7fb f8f4 	bl	8006818 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b630:	2300      	movs	r3, #0
 800b632:	613b      	str	r3, [r7, #16]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	613b      	str	r3, [r7, #16]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	613b      	str	r3, [r7, #16]
 800b644:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2200      	movs	r2, #0
 800b64a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d019      	beq.n	800b68a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	330c      	adds	r3, #12
 800b65c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b660:	e853 3f00 	ldrex	r3, [r3]
 800b664:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b66c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	330c      	adds	r3, #12
 800b674:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b676:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b678:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b67c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b67e:	e841 2300 	strex	r3, r2, [r1]
 800b682:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b686:	2b00      	cmp	r3, #0
 800b688:	d1e5      	bne.n	800b656 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3314      	adds	r3, #20
 800b690:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b694:	e853 3f00 	ldrex	r3, [r3]
 800b698:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69c:	f043 0301 	orr.w	r3, r3, #1
 800b6a0:	657b      	str	r3, [r7, #84]	; 0x54
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3314      	adds	r3, #20
 800b6a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b6aa:	63ba      	str	r2, [r7, #56]	; 0x38
 800b6ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6b2:	e841 2300 	strex	r3, r2, [r1]
 800b6b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d1e5      	bne.n	800b68a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	3314      	adds	r3, #20
 800b6c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	e853 3f00 	ldrex	r3, [r3]
 800b6cc:	617b      	str	r3, [r7, #20]
   return(result);
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6d4:	653b      	str	r3, [r7, #80]	; 0x50
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	3314      	adds	r3, #20
 800b6dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b6de:	627a      	str	r2, [r7, #36]	; 0x24
 800b6e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e2:	6a39      	ldr	r1, [r7, #32]
 800b6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e6:	e841 2300 	strex	r3, r2, [r1]
 800b6ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1e5      	bne.n	800b6be <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3760      	adds	r7, #96	; 0x60
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	0800b285 	.word	0x0800b285
 800b700:	0800b3ab 	.word	0x0800b3ab
 800b704:	0800b3e1 	.word	0x0800b3e1

0800b708 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b708:	b480      	push	{r7}
 800b70a:	b089      	sub	sp, #36	; 0x24
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	330c      	adds	r3, #12
 800b716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	e853 3f00 	ldrex	r3, [r3]
 800b71e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b726:	61fb      	str	r3, [r7, #28]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	330c      	adds	r3, #12
 800b72e:	69fa      	ldr	r2, [r7, #28]
 800b730:	61ba      	str	r2, [r7, #24]
 800b732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b734:	6979      	ldr	r1, [r7, #20]
 800b736:	69ba      	ldr	r2, [r7, #24]
 800b738:	e841 2300 	strex	r3, r2, [r1]
 800b73c:	613b      	str	r3, [r7, #16]
   return(result);
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1e5      	bne.n	800b710 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2220      	movs	r2, #32
 800b748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b74c:	bf00      	nop
 800b74e:	3724      	adds	r7, #36	; 0x24
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b758:	b480      	push	{r7}
 800b75a:	b095      	sub	sp, #84	; 0x54
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	330c      	adds	r3, #12
 800b766:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b76a:	e853 3f00 	ldrex	r3, [r3]
 800b76e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b772:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b776:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	330c      	adds	r3, #12
 800b77e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b780:	643a      	str	r2, [r7, #64]	; 0x40
 800b782:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b784:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b786:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b788:	e841 2300 	strex	r3, r2, [r1]
 800b78c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1e5      	bne.n	800b760 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	3314      	adds	r3, #20
 800b79a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	e853 3f00 	ldrex	r3, [r3]
 800b7a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	f023 0301 	bic.w	r3, r3, #1
 800b7aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	3314      	adds	r3, #20
 800b7b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b7b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7bc:	e841 2300 	strex	r3, r2, [r1]
 800b7c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1e5      	bne.n	800b794 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d119      	bne.n	800b804 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	330c      	adds	r3, #12
 800b7d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	e853 3f00 	ldrex	r3, [r3]
 800b7de:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	f023 0310 	bic.w	r3, r3, #16
 800b7e6:	647b      	str	r3, [r7, #68]	; 0x44
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	330c      	adds	r3, #12
 800b7ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7f0:	61ba      	str	r2, [r7, #24]
 800b7f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f4:	6979      	ldr	r1, [r7, #20]
 800b7f6:	69ba      	ldr	r2, [r7, #24]
 800b7f8:	e841 2300 	strex	r3, r2, [r1]
 800b7fc:	613b      	str	r3, [r7, #16]
   return(result);
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1e5      	bne.n	800b7d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2220      	movs	r2, #32
 800b808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b812:	bf00      	nop
 800b814:	3754      	adds	r7, #84	; 0x54
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr

0800b81e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b084      	sub	sp, #16
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2200      	movs	r2, #0
 800b836:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f7ff fd0d 	bl	800b258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b83e:	bf00      	nop
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b846:	b480      	push	{r7}
 800b848:	b085      	sub	sp, #20
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b854:	b2db      	uxtb	r3, r3
 800b856:	2b21      	cmp	r3, #33	; 0x21
 800b858:	d13e      	bne.n	800b8d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b862:	d114      	bne.n	800b88e <UART_Transmit_IT+0x48>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d110      	bne.n	800b88e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a1b      	ldr	r3, [r3, #32]
 800b870:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	881b      	ldrh	r3, [r3, #0]
 800b876:	461a      	mov	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b880:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6a1b      	ldr	r3, [r3, #32]
 800b886:	1c9a      	adds	r2, r3, #2
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	621a      	str	r2, [r3, #32]
 800b88c:	e008      	b.n	800b8a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a1b      	ldr	r3, [r3, #32]
 800b892:	1c59      	adds	r1, r3, #1
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	6211      	str	r1, [r2, #32]
 800b898:	781a      	ldrb	r2, [r3, #0]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d10f      	bne.n	800b8d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68da      	ldr	r2, [r3, #12]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	68da      	ldr	r2, [r3, #12]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	e000      	b.n	800b8da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b8d8:	2302      	movs	r3, #2
  }
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b082      	sub	sp, #8
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68da      	ldr	r2, [r3, #12]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2220      	movs	r2, #32
 800b902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f7ff fc92 	bl	800b230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b08c      	sub	sp, #48	; 0x30
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b22      	cmp	r3, #34	; 0x22
 800b928:	f040 80ab 	bne.w	800ba82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b934:	d117      	bne.n	800b966 <UART_Receive_IT+0x50>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	691b      	ldr	r3, [r3, #16]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d113      	bne.n	800b966 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b93e:	2300      	movs	r3, #0
 800b940:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b946:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	b29b      	uxth	r3, r3
 800b950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b954:	b29a      	uxth	r2, r3
 800b956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b958:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b95e:	1c9a      	adds	r2, r3, #2
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	629a      	str	r2, [r3, #40]	; 0x28
 800b964:	e026      	b.n	800b9b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b96c:	2300      	movs	r3, #0
 800b96e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b978:	d007      	beq.n	800b98a <UART_Receive_IT+0x74>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10a      	bne.n	800b998 <UART_Receive_IT+0x82>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	691b      	ldr	r3, [r3, #16]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d106      	bne.n	800b998 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	b2da      	uxtb	r2, r3
 800b992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b994:	701a      	strb	r2, [r3, #0]
 800b996:	e008      	b.n	800b9aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9a4:	b2da      	uxtb	r2, r3
 800b9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ae:	1c5a      	adds	r2, r3, #1
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d15a      	bne.n	800ba7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68da      	ldr	r2, [r3, #12]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f022 0220 	bic.w	r2, r2, #32
 800b9d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	68da      	ldr	r2, [r3, #12]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b9e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	695a      	ldr	r2, [r3, #20]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f022 0201 	bic.w	r2, r2, #1
 800b9f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2220      	movs	r2, #32
 800b9fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d135      	bne.n	800ba74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	330c      	adds	r3, #12
 800ba14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	e853 3f00 	ldrex	r3, [r3]
 800ba1c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	f023 0310 	bic.w	r3, r3, #16
 800ba24:	627b      	str	r3, [r7, #36]	; 0x24
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	330c      	adds	r3, #12
 800ba2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba2e:	623a      	str	r2, [r7, #32]
 800ba30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba32:	69f9      	ldr	r1, [r7, #28]
 800ba34:	6a3a      	ldr	r2, [r7, #32]
 800ba36:	e841 2300 	strex	r3, r2, [r1]
 800ba3a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1e5      	bne.n	800ba0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 0310 	and.w	r3, r3, #16
 800ba4c:	2b10      	cmp	r3, #16
 800ba4e:	d10a      	bne.n	800ba66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba50:	2300      	movs	r3, #0
 800ba52:	60fb      	str	r3, [r7, #12]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	60fb      	str	r3, [r7, #12]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	60fb      	str	r3, [r7, #12]
 800ba64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f7ff fbfd 	bl	800b26c <HAL_UARTEx_RxEventCallback>
 800ba72:	e002      	b.n	800ba7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f7f6 fce5 	bl	8002444 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	e002      	b.n	800ba84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	e000      	b.n	800ba84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ba82:	2302      	movs	r3, #2
  }
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3730      	adds	r7, #48	; 0x30
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba90:	b0c0      	sub	sp, #256	; 0x100
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	691b      	ldr	r3, [r3, #16]
 800baa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800baa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baa8:	68d9      	ldr	r1, [r3, #12]
 800baaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	ea40 0301 	orr.w	r3, r0, r1
 800bab4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baba:	689a      	ldr	r2, [r3, #8]
 800babc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	431a      	orrs	r2, r3
 800bac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bac8:	695b      	ldr	r3, [r3, #20]
 800baca:	431a      	orrs	r2, r3
 800bacc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bad0:	69db      	ldr	r3, [r3, #28]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bae4:	f021 010c 	bic.w	r1, r1, #12
 800bae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800baf2:	430b      	orrs	r3, r1
 800baf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800baf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	695b      	ldr	r3, [r3, #20]
 800bafe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bb02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb06:	6999      	ldr	r1, [r3, #24]
 800bb08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	ea40 0301 	orr.w	r3, r0, r1
 800bb12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bb14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	4b8f      	ldr	r3, [pc, #572]	; (800bd58 <UART_SetConfig+0x2cc>)
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d005      	beq.n	800bb2c <UART_SetConfig+0xa0>
 800bb20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	4b8d      	ldr	r3, [pc, #564]	; (800bd5c <UART_SetConfig+0x2d0>)
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d104      	bne.n	800bb36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bb2c:	f7fc fff4 	bl	8008b18 <HAL_RCC_GetPCLK2Freq>
 800bb30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bb34:	e003      	b.n	800bb3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bb36:	f7fc ffdb 	bl	8008af0 <HAL_RCC_GetPCLK1Freq>
 800bb3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb42:	69db      	ldr	r3, [r3, #28]
 800bb44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb48:	f040 810c 	bne.w	800bd64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bb4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb50:	2200      	movs	r2, #0
 800bb52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bb56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bb5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bb5e:	4622      	mov	r2, r4
 800bb60:	462b      	mov	r3, r5
 800bb62:	1891      	adds	r1, r2, r2
 800bb64:	65b9      	str	r1, [r7, #88]	; 0x58
 800bb66:	415b      	adcs	r3, r3
 800bb68:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bb6e:	4621      	mov	r1, r4
 800bb70:	eb12 0801 	adds.w	r8, r2, r1
 800bb74:	4629      	mov	r1, r5
 800bb76:	eb43 0901 	adc.w	r9, r3, r1
 800bb7a:	f04f 0200 	mov.w	r2, #0
 800bb7e:	f04f 0300 	mov.w	r3, #0
 800bb82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bb86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bb8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bb8e:	4690      	mov	r8, r2
 800bb90:	4699      	mov	r9, r3
 800bb92:	4623      	mov	r3, r4
 800bb94:	eb18 0303 	adds.w	r3, r8, r3
 800bb98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bb9c:	462b      	mov	r3, r5
 800bb9e:	eb49 0303 	adc.w	r3, r9, r3
 800bba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bbb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bbb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bbba:	460b      	mov	r3, r1
 800bbbc:	18db      	adds	r3, r3, r3
 800bbbe:	653b      	str	r3, [r7, #80]	; 0x50
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	eb42 0303 	adc.w	r3, r2, r3
 800bbc6:	657b      	str	r3, [r7, #84]	; 0x54
 800bbc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bbcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bbd0:	f7f5 f85a 	bl	8000c88 <__aeabi_uldivmod>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	4b61      	ldr	r3, [pc, #388]	; (800bd60 <UART_SetConfig+0x2d4>)
 800bbda:	fba3 2302 	umull	r2, r3, r3, r2
 800bbde:	095b      	lsrs	r3, r3, #5
 800bbe0:	011c      	lsls	r4, r3, #4
 800bbe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bbf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bbf4:	4642      	mov	r2, r8
 800bbf6:	464b      	mov	r3, r9
 800bbf8:	1891      	adds	r1, r2, r2
 800bbfa:	64b9      	str	r1, [r7, #72]	; 0x48
 800bbfc:	415b      	adcs	r3, r3
 800bbfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bc04:	4641      	mov	r1, r8
 800bc06:	eb12 0a01 	adds.w	sl, r2, r1
 800bc0a:	4649      	mov	r1, r9
 800bc0c:	eb43 0b01 	adc.w	fp, r3, r1
 800bc10:	f04f 0200 	mov.w	r2, #0
 800bc14:	f04f 0300 	mov.w	r3, #0
 800bc18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bc1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bc20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc24:	4692      	mov	sl, r2
 800bc26:	469b      	mov	fp, r3
 800bc28:	4643      	mov	r3, r8
 800bc2a:	eb1a 0303 	adds.w	r3, sl, r3
 800bc2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc32:	464b      	mov	r3, r9
 800bc34:	eb4b 0303 	adc.w	r3, fp, r3
 800bc38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bc3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bc4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bc50:	460b      	mov	r3, r1
 800bc52:	18db      	adds	r3, r3, r3
 800bc54:	643b      	str	r3, [r7, #64]	; 0x40
 800bc56:	4613      	mov	r3, r2
 800bc58:	eb42 0303 	adc.w	r3, r2, r3
 800bc5c:	647b      	str	r3, [r7, #68]	; 0x44
 800bc5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bc62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bc66:	f7f5 f80f 	bl	8000c88 <__aeabi_uldivmod>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4611      	mov	r1, r2
 800bc70:	4b3b      	ldr	r3, [pc, #236]	; (800bd60 <UART_SetConfig+0x2d4>)
 800bc72:	fba3 2301 	umull	r2, r3, r3, r1
 800bc76:	095b      	lsrs	r3, r3, #5
 800bc78:	2264      	movs	r2, #100	; 0x64
 800bc7a:	fb02 f303 	mul.w	r3, r2, r3
 800bc7e:	1acb      	subs	r3, r1, r3
 800bc80:	00db      	lsls	r3, r3, #3
 800bc82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bc86:	4b36      	ldr	r3, [pc, #216]	; (800bd60 <UART_SetConfig+0x2d4>)
 800bc88:	fba3 2302 	umull	r2, r3, r3, r2
 800bc8c:	095b      	lsrs	r3, r3, #5
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bc94:	441c      	add	r4, r3
 800bc96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bca0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bca4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bca8:	4642      	mov	r2, r8
 800bcaa:	464b      	mov	r3, r9
 800bcac:	1891      	adds	r1, r2, r2
 800bcae:	63b9      	str	r1, [r7, #56]	; 0x38
 800bcb0:	415b      	adcs	r3, r3
 800bcb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bcb8:	4641      	mov	r1, r8
 800bcba:	1851      	adds	r1, r2, r1
 800bcbc:	6339      	str	r1, [r7, #48]	; 0x30
 800bcbe:	4649      	mov	r1, r9
 800bcc0:	414b      	adcs	r3, r1
 800bcc2:	637b      	str	r3, [r7, #52]	; 0x34
 800bcc4:	f04f 0200 	mov.w	r2, #0
 800bcc8:	f04f 0300 	mov.w	r3, #0
 800bccc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bcd0:	4659      	mov	r1, fp
 800bcd2:	00cb      	lsls	r3, r1, #3
 800bcd4:	4651      	mov	r1, sl
 800bcd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bcda:	4651      	mov	r1, sl
 800bcdc:	00ca      	lsls	r2, r1, #3
 800bcde:	4610      	mov	r0, r2
 800bce0:	4619      	mov	r1, r3
 800bce2:	4603      	mov	r3, r0
 800bce4:	4642      	mov	r2, r8
 800bce6:	189b      	adds	r3, r3, r2
 800bce8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bcec:	464b      	mov	r3, r9
 800bcee:	460a      	mov	r2, r1
 800bcf0:	eb42 0303 	adc.w	r3, r2, r3
 800bcf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bcf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bd04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bd08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	18db      	adds	r3, r3, r3
 800bd10:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd12:	4613      	mov	r3, r2
 800bd14:	eb42 0303 	adc.w	r3, r2, r3
 800bd18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bd1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bd22:	f7f4 ffb1 	bl	8000c88 <__aeabi_uldivmod>
 800bd26:	4602      	mov	r2, r0
 800bd28:	460b      	mov	r3, r1
 800bd2a:	4b0d      	ldr	r3, [pc, #52]	; (800bd60 <UART_SetConfig+0x2d4>)
 800bd2c:	fba3 1302 	umull	r1, r3, r3, r2
 800bd30:	095b      	lsrs	r3, r3, #5
 800bd32:	2164      	movs	r1, #100	; 0x64
 800bd34:	fb01 f303 	mul.w	r3, r1, r3
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	00db      	lsls	r3, r3, #3
 800bd3c:	3332      	adds	r3, #50	; 0x32
 800bd3e:	4a08      	ldr	r2, [pc, #32]	; (800bd60 <UART_SetConfig+0x2d4>)
 800bd40:	fba2 2303 	umull	r2, r3, r2, r3
 800bd44:	095b      	lsrs	r3, r3, #5
 800bd46:	f003 0207 	and.w	r2, r3, #7
 800bd4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4422      	add	r2, r4
 800bd52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bd54:	e105      	b.n	800bf62 <UART_SetConfig+0x4d6>
 800bd56:	bf00      	nop
 800bd58:	40011000 	.word	0x40011000
 800bd5c:	40011400 	.word	0x40011400
 800bd60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bd64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bd6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bd72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bd76:	4642      	mov	r2, r8
 800bd78:	464b      	mov	r3, r9
 800bd7a:	1891      	adds	r1, r2, r2
 800bd7c:	6239      	str	r1, [r7, #32]
 800bd7e:	415b      	adcs	r3, r3
 800bd80:	627b      	str	r3, [r7, #36]	; 0x24
 800bd82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bd86:	4641      	mov	r1, r8
 800bd88:	1854      	adds	r4, r2, r1
 800bd8a:	4649      	mov	r1, r9
 800bd8c:	eb43 0501 	adc.w	r5, r3, r1
 800bd90:	f04f 0200 	mov.w	r2, #0
 800bd94:	f04f 0300 	mov.w	r3, #0
 800bd98:	00eb      	lsls	r3, r5, #3
 800bd9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bd9e:	00e2      	lsls	r2, r4, #3
 800bda0:	4614      	mov	r4, r2
 800bda2:	461d      	mov	r5, r3
 800bda4:	4643      	mov	r3, r8
 800bda6:	18e3      	adds	r3, r4, r3
 800bda8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bdac:	464b      	mov	r3, r9
 800bdae:	eb45 0303 	adc.w	r3, r5, r3
 800bdb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bdb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bdc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bdc6:	f04f 0200 	mov.w	r2, #0
 800bdca:	f04f 0300 	mov.w	r3, #0
 800bdce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bdd2:	4629      	mov	r1, r5
 800bdd4:	008b      	lsls	r3, r1, #2
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bddc:	4621      	mov	r1, r4
 800bdde:	008a      	lsls	r2, r1, #2
 800bde0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bde4:	f7f4 ff50 	bl	8000c88 <__aeabi_uldivmod>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4b60      	ldr	r3, [pc, #384]	; (800bf70 <UART_SetConfig+0x4e4>)
 800bdee:	fba3 2302 	umull	r2, r3, r3, r2
 800bdf2:	095b      	lsrs	r3, r3, #5
 800bdf4:	011c      	lsls	r4, r3, #4
 800bdf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800be04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800be08:	4642      	mov	r2, r8
 800be0a:	464b      	mov	r3, r9
 800be0c:	1891      	adds	r1, r2, r2
 800be0e:	61b9      	str	r1, [r7, #24]
 800be10:	415b      	adcs	r3, r3
 800be12:	61fb      	str	r3, [r7, #28]
 800be14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be18:	4641      	mov	r1, r8
 800be1a:	1851      	adds	r1, r2, r1
 800be1c:	6139      	str	r1, [r7, #16]
 800be1e:	4649      	mov	r1, r9
 800be20:	414b      	adcs	r3, r1
 800be22:	617b      	str	r3, [r7, #20]
 800be24:	f04f 0200 	mov.w	r2, #0
 800be28:	f04f 0300 	mov.w	r3, #0
 800be2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800be30:	4659      	mov	r1, fp
 800be32:	00cb      	lsls	r3, r1, #3
 800be34:	4651      	mov	r1, sl
 800be36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be3a:	4651      	mov	r1, sl
 800be3c:	00ca      	lsls	r2, r1, #3
 800be3e:	4610      	mov	r0, r2
 800be40:	4619      	mov	r1, r3
 800be42:	4603      	mov	r3, r0
 800be44:	4642      	mov	r2, r8
 800be46:	189b      	adds	r3, r3, r2
 800be48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be4c:	464b      	mov	r3, r9
 800be4e:	460a      	mov	r2, r1
 800be50:	eb42 0303 	adc.w	r3, r2, r3
 800be54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	67bb      	str	r3, [r7, #120]	; 0x78
 800be62:	67fa      	str	r2, [r7, #124]	; 0x7c
 800be64:	f04f 0200 	mov.w	r2, #0
 800be68:	f04f 0300 	mov.w	r3, #0
 800be6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800be70:	4649      	mov	r1, r9
 800be72:	008b      	lsls	r3, r1, #2
 800be74:	4641      	mov	r1, r8
 800be76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be7a:	4641      	mov	r1, r8
 800be7c:	008a      	lsls	r2, r1, #2
 800be7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800be82:	f7f4 ff01 	bl	8000c88 <__aeabi_uldivmod>
 800be86:	4602      	mov	r2, r0
 800be88:	460b      	mov	r3, r1
 800be8a:	4b39      	ldr	r3, [pc, #228]	; (800bf70 <UART_SetConfig+0x4e4>)
 800be8c:	fba3 1302 	umull	r1, r3, r3, r2
 800be90:	095b      	lsrs	r3, r3, #5
 800be92:	2164      	movs	r1, #100	; 0x64
 800be94:	fb01 f303 	mul.w	r3, r1, r3
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	011b      	lsls	r3, r3, #4
 800be9c:	3332      	adds	r3, #50	; 0x32
 800be9e:	4a34      	ldr	r2, [pc, #208]	; (800bf70 <UART_SetConfig+0x4e4>)
 800bea0:	fba2 2303 	umull	r2, r3, r2, r3
 800bea4:	095b      	lsrs	r3, r3, #5
 800bea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800beaa:	441c      	add	r4, r3
 800beac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800beb0:	2200      	movs	r2, #0
 800beb2:	673b      	str	r3, [r7, #112]	; 0x70
 800beb4:	677a      	str	r2, [r7, #116]	; 0x74
 800beb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800beba:	4642      	mov	r2, r8
 800bebc:	464b      	mov	r3, r9
 800bebe:	1891      	adds	r1, r2, r2
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	415b      	adcs	r3, r3
 800bec4:	60fb      	str	r3, [r7, #12]
 800bec6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800beca:	4641      	mov	r1, r8
 800becc:	1851      	adds	r1, r2, r1
 800bece:	6039      	str	r1, [r7, #0]
 800bed0:	4649      	mov	r1, r9
 800bed2:	414b      	adcs	r3, r1
 800bed4:	607b      	str	r3, [r7, #4]
 800bed6:	f04f 0200 	mov.w	r2, #0
 800beda:	f04f 0300 	mov.w	r3, #0
 800bede:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bee2:	4659      	mov	r1, fp
 800bee4:	00cb      	lsls	r3, r1, #3
 800bee6:	4651      	mov	r1, sl
 800bee8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800beec:	4651      	mov	r1, sl
 800beee:	00ca      	lsls	r2, r1, #3
 800bef0:	4610      	mov	r0, r2
 800bef2:	4619      	mov	r1, r3
 800bef4:	4603      	mov	r3, r0
 800bef6:	4642      	mov	r2, r8
 800bef8:	189b      	adds	r3, r3, r2
 800befa:	66bb      	str	r3, [r7, #104]	; 0x68
 800befc:	464b      	mov	r3, r9
 800befe:	460a      	mov	r2, r1
 800bf00:	eb42 0303 	adc.w	r3, r2, r3
 800bf04:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	663b      	str	r3, [r7, #96]	; 0x60
 800bf10:	667a      	str	r2, [r7, #100]	; 0x64
 800bf12:	f04f 0200 	mov.w	r2, #0
 800bf16:	f04f 0300 	mov.w	r3, #0
 800bf1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bf1e:	4649      	mov	r1, r9
 800bf20:	008b      	lsls	r3, r1, #2
 800bf22:	4641      	mov	r1, r8
 800bf24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf28:	4641      	mov	r1, r8
 800bf2a:	008a      	lsls	r2, r1, #2
 800bf2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bf30:	f7f4 feaa 	bl	8000c88 <__aeabi_uldivmod>
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	4b0d      	ldr	r3, [pc, #52]	; (800bf70 <UART_SetConfig+0x4e4>)
 800bf3a:	fba3 1302 	umull	r1, r3, r3, r2
 800bf3e:	095b      	lsrs	r3, r3, #5
 800bf40:	2164      	movs	r1, #100	; 0x64
 800bf42:	fb01 f303 	mul.w	r3, r1, r3
 800bf46:	1ad3      	subs	r3, r2, r3
 800bf48:	011b      	lsls	r3, r3, #4
 800bf4a:	3332      	adds	r3, #50	; 0x32
 800bf4c:	4a08      	ldr	r2, [pc, #32]	; (800bf70 <UART_SetConfig+0x4e4>)
 800bf4e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf52:	095b      	lsrs	r3, r3, #5
 800bf54:	f003 020f 	and.w	r2, r3, #15
 800bf58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4422      	add	r2, r4
 800bf60:	609a      	str	r2, [r3, #8]
}
 800bf62:	bf00      	nop
 800bf64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf6e:	bf00      	nop
 800bf70:	51eb851f 	.word	0x51eb851f

0800bf74 <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800bf7e:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf82:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800bf98 <FusionDegreesToRadians+0x24>
 800bf86:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800bf8a:	eeb0 0a67 	vmov.f32	s0, s15
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr
 800bf98:	3c8efa35 	.word	0x3c8efa35

0800bf9c <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	105a      	asrs	r2, r3, #1
 800bfae:	4b10      	ldr	r3, [pc, #64]	; (800bff0 <FusionFastInverseSqrt+0x54>)
 800bfb0:	1a9b      	subs	r3, r3, r2
 800bfb2:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 800bfb4:	ed97 7a03 	vldr	s14, [r7, #12]
 800bfb8:	edd7 7a01 	vldr	s15, [r7, #4]
 800bfbc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800bff4 <FusionFastInverseSqrt+0x58>
 800bfc0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800bfc4:	edd7 7a03 	vldr	s15, [r7, #12]
 800bfc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bfcc:	edd7 7a03 	vldr	s15, [r7, #12]
 800bfd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bfd4:	eddf 6a08 	vldr	s13, [pc, #32]	; 800bff8 <FusionFastInverseSqrt+0x5c>
 800bfd8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800bfdc:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800bfe0:	eeb0 0a67 	vmov.f32	s0, s15
 800bfe4:	3714      	adds	r7, #20
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	5f1f1412 	.word	0x5f1f1412
 800bff4:	3f36d312 	.word	0x3f36d312
 800bff8:	3fd851ff 	.word	0x3fd851ff

0800bffc <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	eef0 6a40 	vmov.f32	s13, s0
 800c006:	eeb0 7a60 	vmov.f32	s14, s1
 800c00a:	eef0 7a41 	vmov.f32	s15, s2
 800c00e:	edc7 6a01 	vstr	s13, [r7, #4]
 800c012:	ed87 7a02 	vstr	s14, [r7, #8]
 800c016:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800c01a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c01e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c026:	d10f      	bne.n	800c048 <FusionVectorIsZero+0x4c>
 800c028:	edd7 7a02 	vldr	s15, [r7, #8]
 800c02c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c034:	d108      	bne.n	800c048 <FusionVectorIsZero+0x4c>
 800c036:	edd7 7a03 	vldr	s15, [r7, #12]
 800c03a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c042:	d101      	bne.n	800c048 <FusionVectorIsZero+0x4c>
 800c044:	2301      	movs	r3, #1
 800c046:	e000      	b.n	800c04a <FusionVectorIsZero+0x4e>
 800c048:	2300      	movs	r3, #0
 800c04a:	f003 0301 	and.w	r3, r3, #1
 800c04e:	b2db      	uxtb	r3, r3
}
 800c050:	4618      	mov	r0, r3
 800c052:	3714      	adds	r7, #20
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800c05c:	b480      	push	{r7}
 800c05e:	b091      	sub	sp, #68	; 0x44
 800c060:	af00      	add	r7, sp, #0
 800c062:	eeb0 5a40 	vmov.f32	s10, s0
 800c066:	eef0 5a60 	vmov.f32	s11, s1
 800c06a:	eeb0 6a41 	vmov.f32	s12, s2
 800c06e:	eef0 6a61 	vmov.f32	s13, s3
 800c072:	eeb0 7a42 	vmov.f32	s14, s4
 800c076:	eef0 7a62 	vmov.f32	s15, s5
 800c07a:	ed87 5a07 	vstr	s10, [r7, #28]
 800c07e:	edc7 5a08 	vstr	s11, [r7, #32]
 800c082:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800c086:	edc7 6a04 	vstr	s13, [r7, #16]
 800c08a:	ed87 7a05 	vstr	s14, [r7, #20]
 800c08e:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 800c092:	ed97 7a07 	vldr	s14, [r7, #28]
 800c096:	edd7 7a04 	vldr	s15, [r7, #16]
 800c09a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c09e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800c0a2:	ed97 7a08 	vldr	s14, [r7, #32]
 800c0a6:	edd7 7a05 	vldr	s15, [r7, #20]
 800c0aa:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c0ae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800c0b2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c0b6:	edd7 7a06 	vldr	s15, [r7, #24]
 800c0ba:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c0be:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800c0c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c0c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c0ca:	ca07      	ldmia	r2, {r0, r1, r2}
 800c0cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c0d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c0d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0d6:	ee06 1a90 	vmov	s13, r1
 800c0da:	ee07 2a10 	vmov	s14, r2
 800c0de:	ee07 3a90 	vmov	s15, r3
}
 800c0e2:	eeb0 0a66 	vmov.f32	s0, s13
 800c0e6:	eef0 0a47 	vmov.f32	s1, s14
 800c0ea:	eeb0 1a67 	vmov.f32	s2, s15
 800c0ee:	3744      	adds	r7, #68	; 0x44
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	eef0 6a40 	vmov.f32	s13, s0
 800c102:	eeb0 7a60 	vmov.f32	s14, s1
 800c106:	eef0 7a41 	vmov.f32	s15, s2
 800c10a:	edc7 6a01 	vstr	s13, [r7, #4]
 800c10e:	ed87 7a02 	vstr	s14, [r7, #8]
 800c112:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800c116:	ed97 7a01 	vldr	s14, [r7, #4]
 800c11a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c11e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c122:	edd7 7a03 	vldr	s15, [r7, #12]
 800c126:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800c12a:	eeb0 0a67 	vmov.f32	s0, s15
 800c12e:	3714      	adds	r7, #20
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800c138:	b480      	push	{r7}
 800c13a:	b08f      	sub	sp, #60	; 0x3c
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	eef0 6a40 	vmov.f32	s13, s0
 800c142:	eeb0 7a60 	vmov.f32	s14, s1
 800c146:	eef0 7a41 	vmov.f32	s15, s2
 800c14a:	edc7 1a04 	vstr	s3, [r7, #16]
 800c14e:	edc7 6a05 	vstr	s13, [r7, #20]
 800c152:	ed87 7a06 	vstr	s14, [r7, #24]
 800c156:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 800c15a:	ed97 7a05 	vldr	s14, [r7, #20]
 800c15e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c162:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c166:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800c16a:	ed97 7a06 	vldr	s14, [r7, #24]
 800c16e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c172:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c176:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800c17a:	ed97 7a07 	vldr	s14, [r7, #28]
 800c17e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c182:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c186:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800c18a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c18e:	f107 0220 	add.w	r2, r7, #32
 800c192:	ca07      	ldmia	r2, {r0, r1, r2}
 800c194:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c198:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c19a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19e:	ee06 1a90 	vmov	s13, r1
 800c1a2:	ee07 2a10 	vmov	s14, r2
 800c1a6:	ee07 3a90 	vmov	s15, r3
}
 800c1aa:	eeb0 0a66 	vmov.f32	s0, s13
 800c1ae:	eef0 0a47 	vmov.f32	s1, s14
 800c1b2:	eeb0 1a67 	vmov.f32	s2, s15
 800c1b6:	373c      	adds	r7, #60	; 0x3c
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800c1c0:	b480      	push	{r7}
 800c1c2:	b091      	sub	sp, #68	; 0x44
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	eeb0 5a40 	vmov.f32	s10, s0
 800c1ca:	eef0 5a60 	vmov.f32	s11, s1
 800c1ce:	eeb0 6a41 	vmov.f32	s12, s2
 800c1d2:	eef0 6a61 	vmov.f32	s13, s3
 800c1d6:	eeb0 7a42 	vmov.f32	s14, s4
 800c1da:	eef0 7a62 	vmov.f32	s15, s5
 800c1de:	ed87 5a07 	vstr	s10, [r7, #28]
 800c1e2:	edc7 5a08 	vstr	s11, [r7, #32]
 800c1e6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800c1ea:	edc7 6a04 	vstr	s13, [r7, #16]
 800c1ee:	ed87 7a05 	vstr	s14, [r7, #20]
 800c1f2:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800c1f6:	ed97 7a07 	vldr	s14, [r7, #28]
 800c1fa:	edd7 7a04 	vldr	s15, [r7, #16]
 800c1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c202:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800c206:	ed97 7a08 	vldr	s14, [r7, #32]
 800c20a:	edd7 7a05 	vldr	s15, [r7, #20]
 800c20e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c212:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800c216:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c21a:	edd7 7a06 	vldr	s15, [r7, #24]
 800c21e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c222:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800c226:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c22a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c22e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c230:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c234:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c23a:	ee06 1a90 	vmov	s13, r1
 800c23e:	ee07 2a10 	vmov	s14, r2
 800c242:	ee07 3a90 	vmov	s15, r3
}
 800c246:	eeb0 0a66 	vmov.f32	s0, s13
 800c24a:	eef0 0a47 	vmov.f32	s1, s14
 800c24e:	eeb0 1a67 	vmov.f32	s2, s15
 800c252:	3744      	adds	r7, #68	; 0x44
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800c25c:	b480      	push	{r7}
 800c25e:	b091      	sub	sp, #68	; 0x44
 800c260:	af00      	add	r7, sp, #0
 800c262:	eeb0 5a40 	vmov.f32	s10, s0
 800c266:	eef0 5a60 	vmov.f32	s11, s1
 800c26a:	eeb0 6a41 	vmov.f32	s12, s2
 800c26e:	eef0 6a61 	vmov.f32	s13, s3
 800c272:	eeb0 7a42 	vmov.f32	s14, s4
 800c276:	eef0 7a62 	vmov.f32	s15, s5
 800c27a:	ed87 5a07 	vstr	s10, [r7, #28]
 800c27e:	edc7 5a08 	vstr	s11, [r7, #32]
 800c282:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800c286:	edc7 6a04 	vstr	s13, [r7, #16]
 800c28a:	ed87 7a05 	vstr	s14, [r7, #20]
 800c28e:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 800c292:	ed97 7a08 	vldr	s14, [r7, #32]
 800c296:	edd7 7a06 	vldr	s15, [r7, #24]
 800c29a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c29e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c2a2:	edd7 7a05 	vldr	s15, [r7, #20]
 800c2a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2aa:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c2ae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800c2b2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c2b6:	edd7 7a04 	vldr	s15, [r7, #16]
 800c2ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2be:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2c2:	edd7 7a06 	vldr	s15, [r7, #24]
 800c2c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2ca:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c2ce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800c2d2:	ed97 7a07 	vldr	s14, [r7, #28]
 800c2d6:	edd7 7a05 	vldr	s15, [r7, #20]
 800c2da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2de:	edd7 6a08 	vldr	s13, [r7, #32]
 800c2e2:	edd7 7a04 	vldr	s15, [r7, #16]
 800c2e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2ea:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800c2ee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800c2f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c2f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c2fa:	ca07      	ldmia	r2, {r0, r1, r2}
 800c2fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c300:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c306:	ee06 1a90 	vmov	s13, r1
 800c30a:	ee07 2a10 	vmov	s14, r2
 800c30e:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800c312:	eeb0 0a66 	vmov.f32	s0, s13
 800c316:	eef0 0a47 	vmov.f32	s1, s14
 800c31a:	eeb0 1a67 	vmov.f32	s2, s15
 800c31e:	3744      	adds	r7, #68	; 0x44
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <FusionVectorDotProduct>:
 * @brief Returns the dot product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Dot product.
 */
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08a      	sub	sp, #40	; 0x28
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	eeb0 5a40 	vmov.f32	s10, s0
 800c332:	eef0 5a60 	vmov.f32	s11, s1
 800c336:	eeb0 6a41 	vmov.f32	s12, s2
 800c33a:	eef0 6a61 	vmov.f32	s13, s3
 800c33e:	eeb0 7a42 	vmov.f32	s14, s4
 800c342:	eef0 7a62 	vmov.f32	s15, s5
 800c346:	ed87 5a03 	vstr	s10, [r7, #12]
 800c34a:	edc7 5a04 	vstr	s11, [r7, #16]
 800c34e:	ed87 6a05 	vstr	s12, [r7, #20]
 800c352:	edc7 6a00 	vstr	s13, [r7]
 800c356:	ed87 7a01 	vstr	s14, [r7, #4]
 800c35a:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 800c35e:	ed97 5a00 	vldr	s10, [r7]
 800c362:	edd7 5a01 	vldr	s11, [r7, #4]
 800c366:	ed97 6a02 	vldr	s12, [r7, #8]
 800c36a:	edd7 6a03 	vldr	s13, [r7, #12]
 800c36e:	ed97 7a04 	vldr	s14, [r7, #16]
 800c372:	edd7 7a05 	vldr	s15, [r7, #20]
 800c376:	eef0 1a45 	vmov.f32	s3, s10
 800c37a:	eeb0 2a65 	vmov.f32	s4, s11
 800c37e:	eef0 2a46 	vmov.f32	s5, s12
 800c382:	eeb0 0a66 	vmov.f32	s0, s13
 800c386:	eef0 0a47 	vmov.f32	s1, s14
 800c38a:	eeb0 1a67 	vmov.f32	s2, s15
 800c38e:	f7ff ff17 	bl	800c1c0 <FusionVectorHadamardProduct>
 800c392:	eef0 6a40 	vmov.f32	s13, s0
 800c396:	eeb0 7a60 	vmov.f32	s14, s1
 800c39a:	eef0 7a41 	vmov.f32	s15, s2
 800c39e:	edc7 6a07 	vstr	s13, [r7, #28]
 800c3a2:	ed87 7a08 	vstr	s14, [r7, #32]
 800c3a6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800c3aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3ae:	ed97 7a08 	vldr	s14, [r7, #32]
 800c3b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c3b6:	eeb0 0a66 	vmov.f32	s0, s13
 800c3ba:	eef0 0a47 	vmov.f32	s1, s14
 800c3be:	eeb0 1a67 	vmov.f32	s2, s15
 800c3c2:	f7ff fe99 	bl	800c0f8 <FusionVectorSum>
 800c3c6:	eef0 7a40 	vmov.f32	s15, s0
}
 800c3ca:	eeb0 0a67 	vmov.f32	s0, s15
 800c3ce:	3728      	adds	r7, #40	; 0x28
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}

0800c3d4 <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b088      	sub	sp, #32
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	eef0 6a40 	vmov.f32	s13, s0
 800c3de:	eeb0 7a60 	vmov.f32	s14, s1
 800c3e2:	eef0 7a41 	vmov.f32	s15, s2
 800c3e6:	edc7 6a01 	vstr	s13, [r7, #4]
 800c3ea:	ed87 7a02 	vstr	s14, [r7, #8]
 800c3ee:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800c3f2:	ed97 5a01 	vldr	s10, [r7, #4]
 800c3f6:	edd7 5a02 	vldr	s11, [r7, #8]
 800c3fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3fe:	edd7 6a01 	vldr	s13, [r7, #4]
 800c402:	ed97 7a02 	vldr	s14, [r7, #8]
 800c406:	edd7 7a03 	vldr	s15, [r7, #12]
 800c40a:	eef0 1a45 	vmov.f32	s3, s10
 800c40e:	eeb0 2a65 	vmov.f32	s4, s11
 800c412:	eef0 2a46 	vmov.f32	s5, s12
 800c416:	eeb0 0a66 	vmov.f32	s0, s13
 800c41a:	eef0 0a47 	vmov.f32	s1, s14
 800c41e:	eeb0 1a67 	vmov.f32	s2, s15
 800c422:	f7ff fecd 	bl	800c1c0 <FusionVectorHadamardProduct>
 800c426:	eef0 6a40 	vmov.f32	s13, s0
 800c42a:	eeb0 7a60 	vmov.f32	s14, s1
 800c42e:	eef0 7a41 	vmov.f32	s15, s2
 800c432:	edc7 6a05 	vstr	s13, [r7, #20]
 800c436:	ed87 7a06 	vstr	s14, [r7, #24]
 800c43a:	edc7 7a07 	vstr	s15, [r7, #28]
 800c43e:	edd7 6a05 	vldr	s13, [r7, #20]
 800c442:	ed97 7a06 	vldr	s14, [r7, #24]
 800c446:	edd7 7a07 	vldr	s15, [r7, #28]
 800c44a:	eeb0 0a66 	vmov.f32	s0, s13
 800c44e:	eef0 0a47 	vmov.f32	s1, s14
 800c452:	eeb0 1a67 	vmov.f32	s2, s15
 800c456:	f7ff fe4f 	bl	800c0f8 <FusionVectorSum>
 800c45a:	eef0 7a40 	vmov.f32	s15, s0
}
 800c45e:	eeb0 0a67 	vmov.f32	s0, s15
 800c462:	3720      	adds	r7, #32
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 800c468:	b580      	push	{r7, lr}
 800c46a:	b08c      	sub	sp, #48	; 0x30
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	eef0 6a40 	vmov.f32	s13, s0
 800c472:	eeb0 7a60 	vmov.f32	s14, s1
 800c476:	eef0 7a41 	vmov.f32	s15, s2
 800c47a:	edc7 6a05 	vstr	s13, [r7, #20]
 800c47e:	ed87 7a06 	vstr	s14, [r7, #24]
 800c482:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800c486:	edd7 6a05 	vldr	s13, [r7, #20]
 800c48a:	ed97 7a06 	vldr	s14, [r7, #24]
 800c48e:	edd7 7a07 	vldr	s15, [r7, #28]
 800c492:	eeb0 0a66 	vmov.f32	s0, s13
 800c496:	eef0 0a47 	vmov.f32	s1, s14
 800c49a:	eeb0 1a67 	vmov.f32	s2, s15
 800c49e:	f7ff ff99 	bl	800c3d4 <FusionVectorMagnitudeSquared>
 800c4a2:	eef0 7a40 	vmov.f32	s15, s0
 800c4a6:	eeb0 0a67 	vmov.f32	s0, s15
 800c4aa:	f7ff fd77 	bl	800bf9c <FusionFastInverseSqrt>
 800c4ae:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800c4b2:	edd7 6a05 	vldr	s13, [r7, #20]
 800c4b6:	ed97 7a06 	vldr	s14, [r7, #24]
 800c4ba:	edd7 7a07 	vldr	s15, [r7, #28]
 800c4be:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800c4c2:	eeb0 0a66 	vmov.f32	s0, s13
 800c4c6:	eef0 0a47 	vmov.f32	s1, s14
 800c4ca:	eeb0 1a67 	vmov.f32	s2, s15
 800c4ce:	f7ff fe33 	bl	800c138 <FusionVectorMultiplyScalar>
 800c4d2:	eef0 6a40 	vmov.f32	s13, s0
 800c4d6:	eeb0 7a60 	vmov.f32	s14, s1
 800c4da:	eef0 7a41 	vmov.f32	s15, s2
 800c4de:	edc7 6a08 	vstr	s13, [r7, #32]
 800c4e2:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800c4e6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800c4ea:	6a39      	ldr	r1, [r7, #32]
 800c4ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f0:	ee06 1a90 	vmov	s13, r1
 800c4f4:	ee07 2a10 	vmov	s14, r2
 800c4f8:	ee07 3a90 	vmov	s15, r3
}
 800c4fc:	eeb0 0a66 	vmov.f32	s0, s13
 800c500:	eef0 0a47 	vmov.f32	s1, s14
 800c504:	eeb0 1a67 	vmov.f32	s2, s15
 800c508:	3730      	adds	r7, #48	; 0x30
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800c50e:	b490      	push	{r4, r7}
 800c510:	b094      	sub	sp, #80	; 0x50
 800c512:	af00      	add	r7, sp, #0
 800c514:	eeb0 4a40 	vmov.f32	s8, s0
 800c518:	eef0 4a60 	vmov.f32	s9, s1
 800c51c:	eeb0 5a41 	vmov.f32	s10, s2
 800c520:	eef0 5a61 	vmov.f32	s11, s3
 800c524:	eeb0 6a42 	vmov.f32	s12, s4
 800c528:	eef0 6a62 	vmov.f32	s13, s5
 800c52c:	eeb0 7a43 	vmov.f32	s14, s6
 800c530:	eef0 7a63 	vmov.f32	s15, s7
 800c534:	ed87 4a08 	vstr	s8, [r7, #32]
 800c538:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800c53c:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800c540:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800c544:	ed87 6a04 	vstr	s12, [r7, #16]
 800c548:	edc7 6a05 	vstr	s13, [r7, #20]
 800c54c:	ed87 7a06 	vstr	s14, [r7, #24]
 800c550:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 800c554:	ed97 7a08 	vldr	s14, [r7, #32]
 800c558:	edd7 7a04 	vldr	s15, [r7, #16]
 800c55c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c560:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 800c564:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c568:	edd7 7a05 	vldr	s15, [r7, #20]
 800c56c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c570:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 800c574:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c578:	edd7 7a06 	vldr	s15, [r7, #24]
 800c57c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c580:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 800c584:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c588:	edd7 7a07 	vldr	s15, [r7, #28]
 800c58c:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c590:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800c594:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800c598:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c59c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c59e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c5a2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c5a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c5a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5aa:	ee06 0a10 	vmov	s12, r0
 800c5ae:	ee06 1a90 	vmov	s13, r1
 800c5b2:	ee07 2a10 	vmov	s14, r2
 800c5b6:	ee07 3a90 	vmov	s15, r3
}
 800c5ba:	eeb0 0a46 	vmov.f32	s0, s12
 800c5be:	eef0 0a66 	vmov.f32	s1, s13
 800c5c2:	eeb0 1a47 	vmov.f32	s2, s14
 800c5c6:	eef0 1a67 	vmov.f32	s3, s15
 800c5ca:	3750      	adds	r7, #80	; 0x50
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bc90      	pop	{r4, r7}
 800c5d0:	4770      	bx	lr

0800c5d2 <FusionQuaternionMultiply>:
 * @brief Returns the multiplication of two quaternions.
 * @param quaternionA Quaternion A (to be post-multiplied).
 * @param quaternionB Quaternion B (to be pre-multiplied).
 * @return Multiplication of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800c5d2:	b490      	push	{r4, r7}
 800c5d4:	b094      	sub	sp, #80	; 0x50
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	eeb0 4a40 	vmov.f32	s8, s0
 800c5dc:	eef0 4a60 	vmov.f32	s9, s1
 800c5e0:	eeb0 5a41 	vmov.f32	s10, s2
 800c5e4:	eef0 5a61 	vmov.f32	s11, s3
 800c5e8:	eeb0 6a42 	vmov.f32	s12, s4
 800c5ec:	eef0 6a62 	vmov.f32	s13, s5
 800c5f0:	eeb0 7a43 	vmov.f32	s14, s6
 800c5f4:	eef0 7a63 	vmov.f32	s15, s7
 800c5f8:	ed87 4a08 	vstr	s8, [r7, #32]
 800c5fc:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800c600:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800c604:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800c608:	ed87 6a04 	vstr	s12, [r7, #16]
 800c60c:	edc7 6a05 	vstr	s13, [r7, #20]
 800c610:	ed87 7a06 	vstr	s14, [r7, #24]
 800c614:	edc7 7a07 	vstr	s15, [r7, #28]
#define A quaternionA.element
#define B quaternionB.element
    const FusionQuaternion result = {.element = {
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 800c618:	ed97 7a08 	vldr	s14, [r7, #32]
 800c61c:	edd7 7a04 	vldr	s15, [r7, #16]
 800c620:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c624:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c628:	edd7 7a05 	vldr	s15, [r7, #20]
 800c62c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c630:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c634:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c638:	edd7 7a06 	vldr	s15, [r7, #24]
 800c63c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c640:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c644:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c648:	edd7 7a07 	vldr	s15, [r7, #28]
 800c64c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c650:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c654:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 800c658:	ed97 7a08 	vldr	s14, [r7, #32]
 800c65c:	edd7 7a05 	vldr	s15, [r7, #20]
 800c660:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c664:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c668:	edd7 7a04 	vldr	s15, [r7, #16]
 800c66c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c670:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c674:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c678:	edd7 7a07 	vldr	s15, [r7, #28]
 800c67c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c680:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c684:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c688:	edd7 7a06 	vldr	s15, [r7, #24]
 800c68c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c690:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c694:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 800c698:	ed97 7a08 	vldr	s14, [r7, #32]
 800c69c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c6a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6a4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c6a8:	edd7 7a07 	vldr	s15, [r7, #28]
 800c6ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6b4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c6b8:	edd7 7a04 	vldr	s15, [r7, #16]
 800c6bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c6c4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c6c8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c6cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6d0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c6d4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 800c6d8:	ed97 7a08 	vldr	s14, [r7, #32]
 800c6dc:	edd7 7a07 	vldr	s15, [r7, #28]
 800c6e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6e4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c6e8:	edd7 7a06 	vldr	s15, [r7, #24]
 800c6ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c6f4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c6f8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c6fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c700:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c704:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c708:	edd7 7a04 	vldr	s15, [r7, #16]
 800c70c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c710:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c714:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800c718:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800c71c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c726:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c728:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c72a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c72c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c72e:	ee06 0a10 	vmov	s12, r0
 800c732:	ee06 1a90 	vmov	s13, r1
 800c736:	ee07 2a10 	vmov	s14, r2
 800c73a:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800c73e:	eeb0 0a46 	vmov.f32	s0, s12
 800c742:	eef0 0a66 	vmov.f32	s1, s13
 800c746:	eeb0 1a47 	vmov.f32	s2, s14
 800c74a:	eef0 1a67 	vmov.f32	s3, s15
 800c74e:	3750      	adds	r7, #80	; 0x50
 800c750:	46bd      	mov	sp, r7
 800c752:	bc90      	pop	{r4, r7}
 800c754:	4770      	bx	lr

0800c756 <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 800c756:	b490      	push	{r4, r7}
 800c758:	b094      	sub	sp, #80	; 0x50
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	eef0 4a40 	vmov.f32	s9, s0
 800c760:	eeb0 5a60 	vmov.f32	s10, s1
 800c764:	eef0 5a41 	vmov.f32	s11, s2
 800c768:	eeb0 6a61 	vmov.f32	s12, s3
 800c76c:	eef0 6a42 	vmov.f32	s13, s4
 800c770:	eeb0 7a62 	vmov.f32	s14, s5
 800c774:	eef0 7a43 	vmov.f32	s15, s6
 800c778:	edc7 4a08 	vstr	s9, [r7, #32]
 800c77c:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 800c780:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 800c784:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 800c788:	edc7 6a05 	vstr	s13, [r7, #20]
 800c78c:	ed87 7a06 	vstr	s14, [r7, #24]
 800c790:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 800c794:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c798:	eeb1 7a67 	vneg.f32	s14, s15
 800c79c:	edd7 7a05 	vldr	s15, [r7, #20]
 800c7a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7a4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c7a8:	edd7 7a06 	vldr	s15, [r7, #24]
 800c7ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c7b4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c7b8:	edd7 7a07 	vldr	s15, [r7, #28]
 800c7bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7c0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c7c4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 800c7c8:	ed97 7a08 	vldr	s14, [r7, #32]
 800c7cc:	edd7 7a05 	vldr	s15, [r7, #20]
 800c7d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7d4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c7d8:	edd7 7a07 	vldr	s15, [r7, #28]
 800c7dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c7e4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c7e8:	edd7 7a06 	vldr	s15, [r7, #24]
 800c7ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7f0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c7f4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800c7f8:	ed97 7a08 	vldr	s14, [r7, #32]
 800c7fc:	edd7 7a06 	vldr	s15, [r7, #24]
 800c800:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c804:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c808:	edd7 7a07 	vldr	s15, [r7, #28]
 800c80c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c810:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c814:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c818:	edd7 7a05 	vldr	s15, [r7, #20]
 800c81c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c820:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c824:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 800c828:	ed97 7a08 	vldr	s14, [r7, #32]
 800c82c:	edd7 7a07 	vldr	s15, [r7, #28]
 800c830:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c834:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c838:	edd7 7a06 	vldr	s15, [r7, #24]
 800c83c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c840:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c844:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c848:	edd7 7a05 	vldr	s15, [r7, #20]
 800c84c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c850:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c854:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800c858:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800c85c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c860:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c862:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c866:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c868:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c86a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c86c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c86e:	ee06 0a10 	vmov	s12, r0
 800c872:	ee06 1a90 	vmov	s13, r1
 800c876:	ee07 2a10 	vmov	s14, r2
 800c87a:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 800c87e:	eeb0 0a46 	vmov.f32	s0, s12
 800c882:	eef0 0a66 	vmov.f32	s1, s13
 800c886:	eeb0 1a47 	vmov.f32	s2, s14
 800c88a:	eef0 1a67 	vmov.f32	s3, s15
 800c88e:	3750      	adds	r7, #80	; 0x50
 800c890:	46bd      	mov	sp, r7
 800c892:	bc90      	pop	{r4, r7}
 800c894:	4770      	bx	lr

0800c896 <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800c896:	b590      	push	{r4, r7, lr}
 800c898:	b093      	sub	sp, #76	; 0x4c
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	eeb0 6a40 	vmov.f32	s12, s0
 800c8a0:	eef0 6a60 	vmov.f32	s13, s1
 800c8a4:	eeb0 7a41 	vmov.f32	s14, s2
 800c8a8:	eef0 7a61 	vmov.f32	s15, s3
 800c8ac:	ed87 6a04 	vstr	s12, [r7, #16]
 800c8b0:	edc7 6a05 	vstr	s13, [r7, #20]
 800c8b4:	ed87 7a06 	vstr	s14, [r7, #24]
 800c8b8:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800c8bc:	ed97 7a04 	vldr	s14, [r7, #16]
 800c8c0:	edd7 7a04 	vldr	s15, [r7, #16]
 800c8c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8c8:	edd7 6a05 	vldr	s13, [r7, #20]
 800c8cc:	edd7 7a05 	vldr	s15, [r7, #20]
 800c8d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c8d8:	edd7 6a06 	vldr	s13, [r7, #24]
 800c8dc:	edd7 7a06 	vldr	s15, [r7, #24]
 800c8e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c8e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8ec:	edd7 7a07 	vldr	s15, [r7, #28]
 800c8f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8f8:	eeb0 0a67 	vmov.f32	s0, s15
 800c8fc:	f7ff fb4e 	bl	800bf9c <FusionFastInverseSqrt>
 800c900:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 800c904:	ed97 7a04 	vldr	s14, [r7, #16]
 800c908:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c90c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c910:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 800c914:	ed97 7a05 	vldr	s14, [r7, #20]
 800c918:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c91c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c920:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 800c924:	ed97 7a06 	vldr	s14, [r7, #24]
 800c928:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c92c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c930:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 800c934:	ed97 7a07 	vldr	s14, [r7, #28]
 800c938:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c93c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800c940:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800c944:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800c948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c94c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c94e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c952:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c954:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c956:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c95a:	ee06 0a10 	vmov	s12, r0
 800c95e:	ee06 1a90 	vmov	s13, r1
 800c962:	ee07 2a10 	vmov	s14, r2
 800c966:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 800c96a:	eeb0 0a46 	vmov.f32	s0, s12
 800c96e:	eef0 0a66 	vmov.f32	s1, s13
 800c972:	eeb0 1a47 	vmov.f32	s2, s14
 800c976:	eef0 1a67 	vmov.f32	s3, s15
 800c97a:	374c      	adds	r7, #76	; 0x4c
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd90      	pop	{r4, r7, pc}

0800c980 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 800c980:	b5b0      	push	{r4, r5, r7, lr}
 800c982:	b088      	sub	sp, #32
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800c988:	4b0b      	ldr	r3, [pc, #44]	; (800c9b8 <FusionAhrsInitialise+0x38>)
 800c98a:	f107 0408 	add.w	r4, r7, #8
 800c98e:	461d      	mov	r5, r3
 800c990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c994:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c998:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800c99c:	f107 0308 	add.w	r3, r7, #8
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 f86e 	bl	800ca84 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f807 	bl	800c9bc <FusionAhrsReset>
}
 800c9ae:	bf00      	nop
 800c9b0:	3720      	adds	r7, #32
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bdb0      	pop	{r4, r5, r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	08015064 	.word	0x08015064

0800c9bc <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800c9bc:	b480      	push	{r7}
 800c9be:	b091      	sub	sp, #68	; 0x44
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c9ca:	619a      	str	r2, [r3, #24]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f04f 0200 	mov.w	r2, #0
 800c9d2:	61da      	str	r2, [r3, #28]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f04f 0200 	mov.w	r2, #0
 800c9da:	621a      	str	r2, [r3, #32]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f04f 0200 	mov.w	r2, #0
 800c9e2:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f04f 0200 	mov.w	r2, #0
 800c9ea:	629a      	str	r2, [r3, #40]	; 0x28
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f04f 0200 	mov.w	r2, #0
 800c9f2:	62da      	str	r2, [r3, #44]	; 0x2c
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f04f 0200 	mov.w	r2, #0
 800c9fa:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2201      	movs	r2, #1
 800ca00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a1e      	ldr	r2, [pc, #120]	; (800ca80 <FusionAhrsReset+0xc4>)
 800ca08:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f04f 0200 	mov.w	r2, #0
 800ca18:	645a      	str	r2, [r3, #68]	; 0x44
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f04f 0200 	mov.w	r2, #0
 800ca20:	649a      	str	r2, [r3, #72]	; 0x48
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f04f 0200 	mov.w	r2, #0
 800ca28:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f04f 0200 	mov.w	r2, #0
 800ca30:	651a      	str	r2, [r3, #80]	; 0x50
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f04f 0200 	mov.w	r2, #0
 800ca38:	655a      	str	r2, [r3, #84]	; 0x54
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f04f 0200 	mov.w	r2, #0
 800ca40:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	695b      	ldr	r3, [r3, #20]
 800ca54:	461a      	mov	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	695b      	ldr	r3, [r3, #20]
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ca72:	bf00      	nop
 800ca74:	3744      	adds	r7, #68	; 0x44
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	41200000 	.word	0x41200000

0800ca84 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	781a      	ldrb	r2, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	685a      	ldr	r2, [r3, #4]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	edd3 7a02 	vldr	s15, [r3, #8]
 800caa4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800caa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caac:	d007      	beq.n	800cabe <FusionAhrsSetSettings+0x3a>
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	edd3 7a02 	vldr	s15, [r3, #8]
 800cab4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800cbe8 <FusionAhrsSetSettings+0x164>
 800cab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cabc:	e001      	b.n	800cac2 <FusionAhrsSetSettings+0x3e>
 800cabe:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800cbec <FusionAhrsSetSettings+0x168>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	edd3 7a03 	vldr	s15, [r3, #12]
 800cace:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad6:	d01b      	beq.n	800cb10 <FusionAhrsSetSettings+0x8c>
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	edd3 7a03 	vldr	s15, [r3, #12]
 800cade:	eeb0 0a67 	vmov.f32	s0, s15
 800cae2:	f7ff fa47 	bl	800bf74 <FusionDegreesToRadians>
 800cae6:	eef0 7a40 	vmov.f32	s15, s0
 800caea:	eeb0 0a67 	vmov.f32	s0, s15
 800caee:	f005 ffdd 	bl	8012aac <sinf>
 800caf2:	eef0 7a40 	vmov.f32	s15, s0
 800caf6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cafa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cafe:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800cb02:	eeb0 0a67 	vmov.f32	s0, s15
 800cb06:	f006 f8b5 	bl	8012c74 <powf>
 800cb0a:	eef0 7a40 	vmov.f32	s15, s0
 800cb0e:	e001      	b.n	800cb14 <FusionAhrsSetSettings+0x90>
 800cb10:	eddf 7a36 	vldr	s15, [pc, #216]	; 800cbec <FusionAhrsSetSettings+0x168>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	edd3 7a04 	vldr	s15, [r3, #16]
 800cb20:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb28:	d01b      	beq.n	800cb62 <FusionAhrsSetSettings+0xde>
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	edd3 7a04 	vldr	s15, [r3, #16]
 800cb30:	eeb0 0a67 	vmov.f32	s0, s15
 800cb34:	f7ff fa1e 	bl	800bf74 <FusionDegreesToRadians>
 800cb38:	eef0 7a40 	vmov.f32	s15, s0
 800cb3c:	eeb0 0a67 	vmov.f32	s0, s15
 800cb40:	f005 ffb4 	bl	8012aac <sinf>
 800cb44:	eef0 7a40 	vmov.f32	s15, s0
 800cb48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cb4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb50:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800cb54:	eeb0 0a67 	vmov.f32	s0, s15
 800cb58:	f006 f88c 	bl	8012c74 <powf>
 800cb5c:	eef0 7a40 	vmov.f32	s15, s0
 800cb60:	e001      	b.n	800cb66 <FusionAhrsSetSettings+0xe2>
 800cb62:	eddf 7a22 	vldr	s15, [pc, #136]	; 800cbec <FusionAhrsSetSettings+0x168>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	695a      	ldr	r2, [r3, #20]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	695b      	ldr	r3, [r3, #20]
 800cb78:	461a      	mov	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	695b      	ldr	r3, [r3, #20]
 800cb82:	461a      	mov	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	edd3 7a01 	vldr	s15, [r3, #4]
 800cb8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb96:	d003      	beq.n	800cba0 <FusionAhrsSetSettings+0x11c>
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	695b      	ldr	r3, [r3, #20]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d105      	bne.n	800cbac <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4a13      	ldr	r2, [pc, #76]	; (800cbf0 <FusionAhrsSetSettings+0x16c>)
 800cba4:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4a11      	ldr	r2, [pc, #68]	; (800cbf0 <FusionAhrsSetSettings+0x16c>)
 800cbaa:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbb2:	f083 0301 	eor.w	r3, r3, #1
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d003      	beq.n	800cbc4 <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685a      	ldr	r2, [r3, #4]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	edd3 7a01 	vldr	s15, [r3, #4]
 800cbca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800cbce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cbd2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800cbd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 800cbe0:	bf00      	nop
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	3f7ae148 	.word	0x3f7ae148
 800cbec:	7f7fffff 	.word	0x7f7fffff
 800cbf0:	7f7fffff 	.word	0x7f7fffff

0800cbf4 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 800cbf4:	b590      	push	{r4, r7, lr}
 800cbf6:	b0bf      	sub	sp, #252	; 0xfc
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cbfc:	eeb0 5a61 	vmov.f32	s10, s3
 800cc00:	eef0 5a42 	vmov.f32	s11, s4
 800cc04:	eeb0 6a62 	vmov.f32	s12, s5
 800cc08:	eef0 6a43 	vmov.f32	s13, s6
 800cc0c:	eeb0 7a63 	vmov.f32	s14, s7
 800cc10:	eef0 7a44 	vmov.f32	s15, s8
 800cc14:	edc7 4a01 	vstr	s9, [r7, #4]
 800cc18:	ed87 0a08 	vstr	s0, [r7, #32]
 800cc1c:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 800cc20:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 800cc24:	ed87 5a05 	vstr	s10, [r7, #20]
 800cc28:	edc7 5a06 	vstr	s11, [r7, #24]
 800cc2c:	ed87 6a07 	vstr	s12, [r7, #28]
 800cc30:	edc7 6a02 	vstr	s13, [r7, #8]
 800cc34:	ed87 7a03 	vstr	s14, [r7, #12]
 800cc38:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800cc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3e:	3328      	adds	r3, #40	; 0x28
 800cc40:	f107 0214 	add.w	r2, r7, #20
 800cc44:	ca07      	ldmia	r2, {r0, r1, r2}
 800cc46:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 800cc4a:	edd7 7a08 	vldr	s15, [r7, #32]
 800cc4e:	eeb0 7ae7 	vabs.f32	s14, s15
 800cc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc54:	edd3 7a02 	vldr	s15, [r3, #8]
 800cc58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc60:	dc17      	bgt.n	800cc92 <FusionAhrsUpdate+0x9e>
 800cc62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cc66:	eeb0 7ae7 	vabs.f32	s14, s15
 800cc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6c:	edd3 7a02 	vldr	s15, [r3, #8]
 800cc70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc78:	dc0b      	bgt.n	800cc92 <FusionAhrsUpdate+0x9e>
 800cc7a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc7e:	eeb0 7ae7 	vabs.f32	s14, s15
 800cc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc84:	edd3 7a02 	vldr	s15, [r3, #8]
 800cc88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc90:	dd15      	ble.n	800ccbe <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 800cc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc94:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800cc98:	3318      	adds	r3, #24
 800cc9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cc9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 800cca0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cca2:	f7ff fe8b 	bl	800c9bc <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 800cca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca8:	f103 0418 	add.w	r4, r3, #24
 800ccac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ccb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ccb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 800ccb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb8:	2201      	movs	r2, #1
 800ccba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800ccbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d02d      	beq.n	800cd24 <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 800ccc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccca:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800ccce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd0:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800ccd4:	edd7 7a01 	vldr	s15, [r7, #4]
 800ccd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ccdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 800cce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800ccec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccee:	edd3 7a01 	vldr	s15, [r3, #4]
 800ccf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ccf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccfa:	d407      	bmi.n	800cd0c <FusionAhrsUpdate+0x118>
 800ccfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfe:	edd3 7a01 	vldr	s15, [r3, #4]
 800cd02:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd0a:	d10b      	bne.n	800cd24 <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 800cd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0e:	685a      	ldr	r2, [r3, #4]
 800cd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd12:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 800cd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 800cd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 800cd24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd26:	f000 faf4 	bl	800d312 <HalfGravity>
 800cd2a:	eef0 6a40 	vmov.f32	s13, s0
 800cd2e:	eeb0 7a60 	vmov.f32	s14, s1
 800cd32:	eef0 7a41 	vmov.f32	s15, s2
 800cd36:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 800cd3a:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 800cd3e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800cd42:	f04f 0300 	mov.w	r3, #0
 800cd46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cd4a:	f04f 0300 	mov.w	r3, #0
 800cd4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cd52:	f04f 0300 	mov.w	r3, #0
 800cd56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 800cd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 800cd62:	edd7 6a05 	vldr	s13, [r7, #20]
 800cd66:	ed97 7a06 	vldr	s14, [r7, #24]
 800cd6a:	edd7 7a07 	vldr	s15, [r7, #28]
 800cd6e:	eeb0 0a66 	vmov.f32	s0, s13
 800cd72:	eef0 0a47 	vmov.f32	s1, s14
 800cd76:	eeb0 1a67 	vmov.f32	s2, s15
 800cd7a:	f7ff f93f 	bl	800bffc <FusionVectorIsZero>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	f083 0301 	eor.w	r3, r3, #1
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	f000 809c 	beq.w	800cec4 <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 800cd8c:	edd7 6a05 	vldr	s13, [r7, #20]
 800cd90:	ed97 7a06 	vldr	s14, [r7, #24]
 800cd94:	edd7 7a07 	vldr	s15, [r7, #28]
 800cd98:	eeb0 0a66 	vmov.f32	s0, s13
 800cd9c:	eef0 0a47 	vmov.f32	s1, s14
 800cda0:	eeb0 1a67 	vmov.f32	s2, s15
 800cda4:	f7ff fb60 	bl	800c468 <FusionVectorNormalise>
 800cda8:	eef0 6a40 	vmov.f32	s13, s0
 800cdac:	eeb0 7a60 	vmov.f32	s14, s1
 800cdb0:	eef0 7a41 	vmov.f32	s15, s2
 800cdb4:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 800cdb8:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 800cdbc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800cdc0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800cdc2:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 800cdc6:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800cdca:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 800cdce:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800cdd2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800cdd6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800cdda:	eef0 1a45 	vmov.f32	s3, s10
 800cdde:	eeb0 2a65 	vmov.f32	s4, s11
 800cde2:	eef0 2a46 	vmov.f32	s5, s12
 800cde6:	eeb0 0a66 	vmov.f32	s0, s13
 800cdea:	eef0 0a47 	vmov.f32	s1, s14
 800cdee:	eeb0 1a67 	vmov.f32	s2, s15
 800cdf2:	f000 fc55 	bl	800d6a0 <Feedback>
 800cdf6:	eef0 6a40 	vmov.f32	s13, s0
 800cdfa:	eeb0 7a60 	vmov.f32	s14, s1
 800cdfe:	eef0 7a41 	vmov.f32	s15, s2
 800ce02:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 800ce06:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 800ce0a:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 800ce0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d118      	bne.n	800ce4a <FusionAhrsUpdate+0x256>
 800ce18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1a:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800ce1e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800ce22:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800ce26:	eeb0 0a66 	vmov.f32	s0, s13
 800ce2a:	eef0 0a47 	vmov.f32	s1, s14
 800ce2e:	eeb0 1a67 	vmov.f32	s2, s15
 800ce32:	f7ff facf 	bl	800c3d4 <FusionVectorMagnitudeSquared>
 800ce36:	eeb0 7a40 	vmov.f32	s14, s0
 800ce3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3c:	edd3 7a03 	vldr	s15, [r3, #12]
 800ce40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ce44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce48:	d80a      	bhi.n	800ce60 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 800ce4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 800ce52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce56:	f1a3 0209 	sub.w	r2, r3, #9
 800ce5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5c:	661a      	str	r2, [r3, #96]	; 0x60
 800ce5e:	e004      	b.n	800ce6a <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 800ce60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce64:	1c5a      	adds	r2, r3, #1
 800ce66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce68:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 800ce6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ce6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce72:	429a      	cmp	r2, r3
 800ce74:	dd07      	ble.n	800ce86 <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	2200      	movs	r2, #0
 800ce7a:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 800ce7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800ce84:	e004      	b.n	800ce90 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800ce86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce88:	695b      	ldr	r3, [r3, #20]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800ce90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce92:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800ce94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce96:	695b      	ldr	r3, [r3, #20]
 800ce98:	461a      	mov	r2, r3
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	f000 fcb5 	bl	800d80a <Clamp>
 800cea0:	4602      	mov	r2, r0
 800cea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea4:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 800cea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ceac:	f083 0301 	eor.w	r3, r3, #1
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d006      	beq.n	800cec4 <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 800ceb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ceb8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800cebc:	3244      	adds	r2, #68	; 0x44
 800cebe:	ca07      	ldmia	r2, {r0, r1, r2}
 800cec0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800cec4:	f04f 0300 	mov.w	r3, #0
 800cec8:	673b      	str	r3, [r7, #112]	; 0x70
 800ceca:	f04f 0300 	mov.w	r3, #0
 800cece:	677b      	str	r3, [r7, #116]	; 0x74
 800ced0:	f04f 0300 	mov.w	r3, #0
 800ced4:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = false;
 800ced6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced8:	2200      	movs	r2, #0
 800ceda:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 800cede:	edd7 6a02 	vldr	s13, [r7, #8]
 800cee2:	ed97 7a03 	vldr	s14, [r7, #12]
 800cee6:	edd7 7a04 	vldr	s15, [r7, #16]
 800ceea:	eeb0 0a66 	vmov.f32	s0, s13
 800ceee:	eef0 0a47 	vmov.f32	s1, s14
 800cef2:	eeb0 1a67 	vmov.f32	s2, s15
 800cef6:	f7ff f881 	bl	800bffc <FusionVectorIsZero>
 800cefa:	4603      	mov	r3, r0
 800cefc:	f083 0301 	eor.w	r3, r3, #1
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f000 80d1 	beq.w	800d0aa <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800cf08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf0a:	f000 fabf 	bl	800d48c <HalfMagnetic>
 800cf0e:	eef0 6a40 	vmov.f32	s13, s0
 800cf12:	eeb0 7a60 	vmov.f32	s14, s1
 800cf16:	eef0 7a41 	vmov.f32	s15, s2
 800cf1a:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 800cf1e:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 800cf22:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800cf26:	ed97 5a02 	vldr	s10, [r7, #8]
 800cf2a:	edd7 5a03 	vldr	s11, [r7, #12]
 800cf2e:	ed97 6a04 	vldr	s12, [r7, #16]
 800cf32:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800cf36:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800cf3a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800cf3e:	eef0 1a45 	vmov.f32	s3, s10
 800cf42:	eeb0 2a65 	vmov.f32	s4, s11
 800cf46:	eef0 2a46 	vmov.f32	s5, s12
 800cf4a:	eeb0 0a66 	vmov.f32	s0, s13
 800cf4e:	eef0 0a47 	vmov.f32	s1, s14
 800cf52:	eeb0 1a67 	vmov.f32	s2, s15
 800cf56:	f7ff f981 	bl	800c25c <FusionVectorCrossProduct>
 800cf5a:	eef0 6a40 	vmov.f32	s13, s0
 800cf5e:	eeb0 7a60 	vmov.f32	s14, s1
 800cf62:	eef0 7a41 	vmov.f32	s15, s2
 800cf66:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800cf6a:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 800cf6e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 800cf72:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800cf76:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800cf7a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800cf7e:	eeb0 0a66 	vmov.f32	s0, s13
 800cf82:	eef0 0a47 	vmov.f32	s1, s14
 800cf86:	eeb0 1a67 	vmov.f32	s2, s15
 800cf8a:	f7ff fa6d 	bl	800c468 <FusionVectorNormalise>
 800cf8e:	eef0 6a40 	vmov.f32	s13, s0
 800cf92:	eeb0 7a60 	vmov.f32	s14, s1
 800cf96:	eef0 7a41 	vmov.f32	s15, s2
 800cf9a:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 800cf9e:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 800cfa2:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800cfa6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800cfa8:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 800cfac:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 800cfb0:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800cfb4:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800cfb8:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800cfbc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800cfc0:	eef0 1a45 	vmov.f32	s3, s10
 800cfc4:	eeb0 2a65 	vmov.f32	s4, s11
 800cfc8:	eef0 2a46 	vmov.f32	s5, s12
 800cfcc:	eeb0 0a66 	vmov.f32	s0, s13
 800cfd0:	eef0 0a47 	vmov.f32	s1, s14
 800cfd4:	eeb0 1a67 	vmov.f32	s2, s15
 800cfd8:	f000 fb62 	bl	800d6a0 <Feedback>
 800cfdc:	eef0 6a40 	vmov.f32	s13, s0
 800cfe0:	eeb0 7a60 	vmov.f32	s14, s1
 800cfe4:	eef0 7a41 	vmov.f32	s15, s2
 800cfe8:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 800cfec:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 800cff0:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 800cff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d118      	bne.n	800d030 <FusionAhrsUpdate+0x43c>
 800cffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d000:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800d004:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800d008:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800d00c:	eeb0 0a66 	vmov.f32	s0, s13
 800d010:	eef0 0a47 	vmov.f32	s1, s14
 800d014:	eeb0 1a67 	vmov.f32	s2, s15
 800d018:	f7ff f9dc 	bl	800c3d4 <FusionVectorMagnitudeSquared>
 800d01c:	eeb0 7a40 	vmov.f32	s14, s0
 800d020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d022:	edd3 7a04 	vldr	s15, [r3, #16]
 800d026:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d02e:	d80a      	bhi.n	800d046 <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 800d030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d032:	2200      	movs	r2, #0
 800d034:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 800d038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d03c:	f1a3 0209 	sub.w	r2, r3, #9
 800d040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d042:	66da      	str	r2, [r3, #108]	; 0x6c
 800d044:	e004      	b.n	800d050 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 800d046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d04a:	1c5a      	adds	r2, r3, #1
 800d04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04e:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 800d050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d052:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d058:	429a      	cmp	r2, r3
 800d05a:	dd07      	ble.n	800d06c <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 800d05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05e:	2200      	movs	r2, #0
 800d060:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 800d062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d064:	2200      	movs	r2, #0
 800d066:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800d06a:	e004      	b.n	800d076 <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800d06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06e:	695b      	ldr	r3, [r3, #20]
 800d070:	461a      	mov	r2, r3
 800d072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d074:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800d076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d078:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800d07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07c:	695b      	ldr	r3, [r3, #20]
 800d07e:	461a      	mov	r2, r3
 800d080:	2100      	movs	r1, #0
 800d082:	f000 fbc2 	bl	800d80a <Clamp>
 800d086:	4602      	mov	r2, r0
 800d088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08a:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 800d08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d092:	f083 0301 	eor.w	r3, r3, #1
 800d096:	b2db      	uxtb	r3, r3
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d006      	beq.n	800d0aa <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 800d09c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d09e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d0a2:	3250      	adds	r2, #80	; 0x50
 800d0a4:	ca07      	ldmia	r2, {r0, r1, r2}
 800d0a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800d0aa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800d0ae:	f7fe ff61 	bl	800bf74 <FusionDegreesToRadians>
 800d0b2:	eeb0 6a40 	vmov.f32	s12, s0
 800d0b6:	edd7 6a08 	vldr	s13, [r7, #32]
 800d0ba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d0be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0c2:	eef0 1a46 	vmov.f32	s3, s12
 800d0c6:	eeb0 0a66 	vmov.f32	s0, s13
 800d0ca:	eef0 0a47 	vmov.f32	s1, s14
 800d0ce:	eeb0 1a67 	vmov.f32	s2, s15
 800d0d2:	f7ff f831 	bl	800c138 <FusionVectorMultiplyScalar>
 800d0d6:	eef0 6a40 	vmov.f32	s13, s0
 800d0da:	eeb0 7a60 	vmov.f32	s14, s1
 800d0de:	eef0 7a41 	vmov.f32	s15, s2
 800d0e2:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 800d0e6:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 800d0ea:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 800d0ee:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 800d0f2:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800d0f6:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800d0fa:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800d0fe:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800d102:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800d106:	eef0 1a45 	vmov.f32	s3, s10
 800d10a:	eeb0 2a65 	vmov.f32	s4, s11
 800d10e:	eef0 2a46 	vmov.f32	s5, s12
 800d112:	eeb0 0a66 	vmov.f32	s0, s13
 800d116:	eef0 0a47 	vmov.f32	s1, s14
 800d11a:	eeb0 1a67 	vmov.f32	s2, s15
 800d11e:	f7fe ff9d 	bl	800c05c <FusionVectorAdd>
 800d122:	eef0 6a40 	vmov.f32	s13, s0
 800d126:	eeb0 7a60 	vmov.f32	s14, s1
 800d12a:	eef0 7a41 	vmov.f32	s15, s2
 800d12e:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 800d132:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800d136:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800d13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13c:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800d140:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800d144:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800d148:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800d14c:	eef0 1a46 	vmov.f32	s3, s12
 800d150:	eeb0 0a66 	vmov.f32	s0, s13
 800d154:	eef0 0a47 	vmov.f32	s1, s14
 800d158:	eeb0 1a67 	vmov.f32	s2, s15
 800d15c:	f7fe ffec 	bl	800c138 <FusionVectorMultiplyScalar>
 800d160:	eef0 6a40 	vmov.f32	s13, s0
 800d164:	eeb0 7a60 	vmov.f32	s14, s1
 800d168:	eef0 7a41 	vmov.f32	s15, s2
 800d16c:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 800d170:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 800d174:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800d178:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 800d17c:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 800d180:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 800d184:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800d188:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800d18c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d190:	eef0 1a45 	vmov.f32	s3, s10
 800d194:	eeb0 2a65 	vmov.f32	s4, s11
 800d198:	eef0 2a46 	vmov.f32	s5, s12
 800d19c:	eeb0 0a66 	vmov.f32	s0, s13
 800d1a0:	eef0 0a47 	vmov.f32	s1, s14
 800d1a4:	eeb0 1a67 	vmov.f32	s2, s15
 800d1a8:	f7fe ff58 	bl	800c05c <FusionVectorAdd>
 800d1ac:	eef0 6a40 	vmov.f32	s13, s0
 800d1b0:	eeb0 7a60 	vmov.f32	s14, s1
 800d1b4:	eef0 7a41 	vmov.f32	s15, s2
 800d1b8:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800d1bc:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800d1c0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 800d1c4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800d1c8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800d1cc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d1d0:	edd7 1a01 	vldr	s3, [r7, #4]
 800d1d4:	eeb0 0a66 	vmov.f32	s0, s13
 800d1d8:	eef0 0a47 	vmov.f32	s1, s14
 800d1dc:	eeb0 1a67 	vmov.f32	s2, s15
 800d1e0:	f7fe ffaa 	bl	800c138 <FusionVectorMultiplyScalar>
 800d1e4:	eef0 6a40 	vmov.f32	s13, s0
 800d1e8:	eeb0 7a60 	vmov.f32	s14, s1
 800d1ec:	eef0 7a41 	vmov.f32	s15, s2
 800d1f0:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 800d1f4:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 800d1f8:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 800d1fc:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 800d200:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 800d204:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 800d208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20a:	ed93 6a06 	vldr	s12, [r3, #24]
 800d20e:	edd3 6a07 	vldr	s13, [r3, #28]
 800d212:	ed93 7a08 	vldr	s14, [r3, #32]
 800d216:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d21a:	eeb0 2a64 	vmov.f32	s4, s9
 800d21e:	eef0 2a45 	vmov.f32	s5, s10
 800d222:	eeb0 3a65 	vmov.f32	s6, s11
 800d226:	eeb0 0a46 	vmov.f32	s0, s12
 800d22a:	eef0 0a66 	vmov.f32	s1, s13
 800d22e:	eeb0 1a47 	vmov.f32	s2, s14
 800d232:	eef0 1a67 	vmov.f32	s3, s15
 800d236:	f7ff fa8e 	bl	800c756 <FusionQuaternionMultiplyVector>
 800d23a:	eeb0 6a40 	vmov.f32	s12, s0
 800d23e:	eef0 6a60 	vmov.f32	s13, s1
 800d242:	eeb0 7a41 	vmov.f32	s14, s2
 800d246:	eef0 7a61 	vmov.f32	s15, s3
 800d24a:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 800d24e:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 800d252:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 800d256:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 800d25a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d25c:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 800d260:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 800d264:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 800d268:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26e:	ed93 6a06 	vldr	s12, [r3, #24]
 800d272:	edd3 6a07 	vldr	s13, [r3, #28]
 800d276:	ed93 7a08 	vldr	s14, [r3, #32]
 800d27a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d27e:	eeb0 2a44 	vmov.f32	s4, s8
 800d282:	eef0 2a64 	vmov.f32	s5, s9
 800d286:	eeb0 3a45 	vmov.f32	s6, s10
 800d28a:	eef0 3a65 	vmov.f32	s7, s11
 800d28e:	eeb0 0a46 	vmov.f32	s0, s12
 800d292:	eef0 0a66 	vmov.f32	s1, s13
 800d296:	eeb0 1a47 	vmov.f32	s2, s14
 800d29a:	eef0 1a67 	vmov.f32	s3, s15
 800d29e:	f7ff f936 	bl	800c50e <FusionQuaternionAdd>
 800d2a2:	eeb0 6a40 	vmov.f32	s12, s0
 800d2a6:	eef0 6a60 	vmov.f32	s13, s1
 800d2aa:	eeb0 7a41 	vmov.f32	s14, s2
 800d2ae:	eef0 7a61 	vmov.f32	s15, s3
 800d2b2:	ed84 6a06 	vstr	s12, [r4, #24]
 800d2b6:	edc4 6a07 	vstr	s13, [r4, #28]
 800d2ba:	ed84 7a08 	vstr	s14, [r4, #32]
 800d2be:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 800d2c2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c6:	ed93 6a06 	vldr	s12, [r3, #24]
 800d2ca:	edd3 6a07 	vldr	s13, [r3, #28]
 800d2ce:	ed93 7a08 	vldr	s14, [r3, #32]
 800d2d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d2d6:	eeb0 0a46 	vmov.f32	s0, s12
 800d2da:	eef0 0a66 	vmov.f32	s1, s13
 800d2de:	eeb0 1a47 	vmov.f32	s2, s14
 800d2e2:	eef0 1a67 	vmov.f32	s3, s15
 800d2e6:	f7ff fad6 	bl	800c896 <FusionQuaternionNormalise>
 800d2ea:	eeb0 6a40 	vmov.f32	s12, s0
 800d2ee:	eef0 6a60 	vmov.f32	s13, s1
 800d2f2:	eeb0 7a41 	vmov.f32	s14, s2
 800d2f6:	eef0 7a61 	vmov.f32	s15, s3
 800d2fa:	ed84 6a06 	vstr	s12, [r4, #24]
 800d2fe:	edc4 6a07 	vstr	s13, [r4, #28]
 800d302:	ed84 7a08 	vstr	s14, [r4, #32]
 800d306:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800d30a:	bf00      	nop
 800d30c:	37fc      	adds	r7, #252	; 0xfc
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd90      	pop	{r4, r7, pc}

0800d312 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 800d312:	b480      	push	{r7}
 800d314:	b093      	sub	sp, #76	; 0x4c
 800d316:	af00      	add	r7, sp, #0
 800d318:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	2b01      	cmp	r3, #1
 800d320:	dc02      	bgt.n	800d328 <HalfGravity+0x16>
 800d322:	2b00      	cmp	r3, #0
 800d324:	da03      	bge.n	800d32e <HalfGravity+0x1c>
 800d326:	e094      	b.n	800d452 <HalfGravity+0x140>
 800d328:	2b02      	cmp	r3, #2
 800d32a:	d048      	beq.n	800d3be <HalfGravity+0xac>
 800d32c:	e091      	b.n	800d452 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	ed93 7a07 	vldr	s14, [r3, #28]
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d33a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	edd3 6a06 	vldr	s13, [r3, #24]
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	edd3 7a08 	vldr	s15, [r3, #32]
 800d34a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d34e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d352:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	ed93 7a08 	vldr	s14, [r3, #32]
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d362:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	edd3 6a06 	vldr	s13, [r3, #24]
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	edd3 7a07 	vldr	s15, [r3, #28]
 800d372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d376:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d37a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	ed93 7a06 	vldr	s14, [r3, #24]
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	edd3 7a06 	vldr	s15, [r3, #24]
 800d38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d38e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d392:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d3a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3a6:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d3aa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 800d3ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d3b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d3b6:	ca07      	ldmia	r2, {r0, r1, r2}
 800d3b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d3bc:	e052      	b.n	800d464 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	ed93 7a06 	vldr	s14, [r3, #24]
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	edd3 7a08 	vldr	s15, [r3, #32]
 800d3ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	edd3 6a07 	vldr	s13, [r3, #28]
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d3da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3de:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d3e2:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	ed93 7a08 	vldr	s14, [r3, #32]
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d3f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	edd3 6a06 	vldr	s13, [r3, #24]
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	edd3 7a07 	vldr	s15, [r3, #28]
 800d402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d40a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 800d40e:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	ed93 7a06 	vldr	s14, [r3, #24]
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	edd3 7a06 	vldr	s15, [r3, #24]
 800d41e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d422:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d426:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d43a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800d43e:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 800d442:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d446:	f107 0218 	add.w	r2, r7, #24
 800d44a:	ca07      	ldmia	r2, {r0, r1, r2}
 800d44c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d450:	e008      	b.n	800d464 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800d452:	f04f 0300 	mov.w	r3, #0
 800d456:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d458:	f04f 0300 	mov.w	r3, #0
 800d45c:	643b      	str	r3, [r7, #64]	; 0x40
 800d45e:	f04f 0300 	mov.w	r3, #0
 800d462:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 800d464:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d466:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d46a:	ee06 1a90 	vmov	s13, r1
 800d46e:	ee07 2a10 	vmov	s14, r2
 800d472:	ee07 3a90 	vmov	s15, r3
 800d476:	eeb0 0a66 	vmov.f32	s0, s13
 800d47a:	eef0 0a47 	vmov.f32	s1, s14
 800d47e:	eeb0 1a67 	vmov.f32	s2, s15
 800d482:	374c      	adds	r7, #76	; 0x4c
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 800d48c:	b480      	push	{r7}
 800d48e:	b097      	sub	sp, #92	; 0x5c
 800d490:	af00      	add	r7, sp, #0
 800d492:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	2b02      	cmp	r3, #2
 800d49a:	f000 809a 	beq.w	800d5d2 <HalfMagnetic+0x146>
 800d49e:	2b02      	cmp	r3, #2
 800d4a0:	f300 80e1 	bgt.w	800d666 <HalfMagnetic+0x1da>
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d002      	beq.n	800d4ae <HalfMagnetic+0x22>
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d048      	beq.n	800d53e <HalfMagnetic+0xb2>
 800d4ac:	e0db      	b.n	800d666 <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	ed93 7a07 	vldr	s14, [r3, #28]
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	edd3 7a08 	vldr	s15, [r3, #32]
 800d4ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	edd3 6a06 	vldr	s13, [r3, #24]
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d4ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4ce:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d4d2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	ed93 7a06 	vldr	s14, [r3, #24]
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	edd3 7a06 	vldr	s15, [r3, #24]
 800d4e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d4ea:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	edd3 6a08 	vldr	s13, [r3, #32]
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	edd3 7a08 	vldr	s15, [r3, #32]
 800d4fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4fe:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d502:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	ed93 7a08 	vldr	s14, [r3, #32]
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d512:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	edd3 6a06 	vldr	s13, [r3, #24]
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	edd3 7a07 	vldr	s15, [r3, #28]
 800d522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d526:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d52a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 800d52e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d532:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800d536:	ca07      	ldmia	r2, {r0, r1, r2}
 800d538:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d53c:	e09c      	b.n	800d678 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	ed93 7a06 	vldr	s14, [r3, #24]
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	edd3 7a06 	vldr	s15, [r3, #24]
 800d54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d54e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d552:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	edd3 6a07 	vldr	s13, [r3, #28]
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	edd3 7a07 	vldr	s15, [r3, #28]
 800d562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d566:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d56a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	ed93 7a06 	vldr	s14, [r3, #24]
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d57a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	edd3 6a07 	vldr	s13, [r3, #28]
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	edd3 7a08 	vldr	s15, [r3, #32]
 800d58a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d58e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d592:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	ed93 7a07 	vldr	s14, [r3, #28]
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d5a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	edd3 6a06 	vldr	s13, [r3, #24]
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	edd3 7a08 	vldr	s15, [r3, #32]
 800d5b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5ba:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800d5be:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800d5c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d5c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d5ca:	ca07      	ldmia	r2, {r0, r1, r2}
 800d5cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d5d0:	e052      	b.n	800d678 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	ed93 7a07 	vldr	s14, [r3, #28]
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	edd3 7a08 	vldr	s15, [r3, #32]
 800d5de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	edd3 6a06 	vldr	s13, [r3, #24]
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d5ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5f6:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800d5fa:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	ed93 7a06 	vldr	s14, [r3, #24]
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	edd3 7a06 	vldr	s15, [r3, #24]
 800d60a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d60e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d612:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	edd3 6a08 	vldr	s13, [r3, #32]
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	edd3 7a08 	vldr	s15, [r3, #32]
 800d622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d626:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d62a:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	ed93 7a06 	vldr	s14, [r3, #24]
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	edd3 7a07 	vldr	s15, [r3, #28]
 800d63a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	edd3 6a08 	vldr	s13, [r3, #32]
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d64a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d64e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800d652:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800d656:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d65a:	f107 021c 	add.w	r2, r7, #28
 800d65e:	ca07      	ldmia	r2, {r0, r1, r2}
 800d660:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d664:	e008      	b.n	800d678 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800d666:	f04f 0300 	mov.w	r3, #0
 800d66a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d66c:	f04f 0300 	mov.w	r3, #0
 800d670:	653b      	str	r3, [r7, #80]	; 0x50
 800d672:	f04f 0300 	mov.w	r3, #0
 800d676:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 800d678:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d67a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d67c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d67e:	ee06 1a90 	vmov	s13, r1
 800d682:	ee07 2a10 	vmov	s14, r2
 800d686:	ee07 3a90 	vmov	s15, r3
 800d68a:	eeb0 0a66 	vmov.f32	s0, s13
 800d68e:	eef0 0a47 	vmov.f32	s1, s14
 800d692:	eeb0 1a67 	vmov.f32	s2, s15
 800d696:	375c      	adds	r7, #92	; 0x5c
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b090      	sub	sp, #64	; 0x40
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	eeb0 5a40 	vmov.f32	s10, s0
 800d6aa:	eef0 5a60 	vmov.f32	s11, s1
 800d6ae:	eeb0 6a41 	vmov.f32	s12, s2
 800d6b2:	eef0 6a61 	vmov.f32	s13, s3
 800d6b6:	eeb0 7a42 	vmov.f32	s14, s4
 800d6ba:	eef0 7a62 	vmov.f32	s15, s5
 800d6be:	ed87 5a07 	vstr	s10, [r7, #28]
 800d6c2:	edc7 5a08 	vstr	s11, [r7, #32]
 800d6c6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800d6ca:	edc7 6a04 	vstr	s13, [r7, #16]
 800d6ce:	ed87 7a05 	vstr	s14, [r7, #20]
 800d6d2:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 800d6d6:	ed97 5a04 	vldr	s10, [r7, #16]
 800d6da:	edd7 5a05 	vldr	s11, [r7, #20]
 800d6de:	ed97 6a06 	vldr	s12, [r7, #24]
 800d6e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6e6:	ed97 7a08 	vldr	s14, [r7, #32]
 800d6ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d6ee:	eef0 1a45 	vmov.f32	s3, s10
 800d6f2:	eeb0 2a65 	vmov.f32	s4, s11
 800d6f6:	eef0 2a46 	vmov.f32	s5, s12
 800d6fa:	eeb0 0a66 	vmov.f32	s0, s13
 800d6fe:	eef0 0a47 	vmov.f32	s1, s14
 800d702:	eeb0 1a67 	vmov.f32	s2, s15
 800d706:	f7fe fe0f 	bl	800c328 <FusionVectorDotProduct>
 800d70a:	eef0 7a40 	vmov.f32	s15, s0
 800d70e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d716:	d540      	bpl.n	800d79a <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 800d718:	ed97 5a04 	vldr	s10, [r7, #16]
 800d71c:	edd7 5a05 	vldr	s11, [r7, #20]
 800d720:	ed97 6a06 	vldr	s12, [r7, #24]
 800d724:	edd7 6a07 	vldr	s13, [r7, #28]
 800d728:	ed97 7a08 	vldr	s14, [r7, #32]
 800d72c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d730:	eef0 1a45 	vmov.f32	s3, s10
 800d734:	eeb0 2a65 	vmov.f32	s4, s11
 800d738:	eef0 2a46 	vmov.f32	s5, s12
 800d73c:	eeb0 0a66 	vmov.f32	s0, s13
 800d740:	eef0 0a47 	vmov.f32	s1, s14
 800d744:	eeb0 1a67 	vmov.f32	s2, s15
 800d748:	f7fe fd88 	bl	800c25c <FusionVectorCrossProduct>
 800d74c:	eef0 6a40 	vmov.f32	s13, s0
 800d750:	eeb0 7a60 	vmov.f32	s14, s1
 800d754:	eef0 7a41 	vmov.f32	s15, s2
 800d758:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800d75c:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800d760:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800d764:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800d768:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d76c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d770:	eeb0 0a66 	vmov.f32	s0, s13
 800d774:	eef0 0a47 	vmov.f32	s1, s14
 800d778:	eeb0 1a67 	vmov.f32	s2, s15
 800d77c:	f7fe fe74 	bl	800c468 <FusionVectorNormalise>
 800d780:	eef0 6a40 	vmov.f32	s13, s0
 800d784:	eeb0 7a60 	vmov.f32	s14, s1
 800d788:	eef0 7a41 	vmov.f32	s15, s2
 800d78c:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800d790:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800d794:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800d798:	e025      	b.n	800d7e6 <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 800d79a:	ed97 5a04 	vldr	s10, [r7, #16]
 800d79e:	edd7 5a05 	vldr	s11, [r7, #20]
 800d7a2:	ed97 6a06 	vldr	s12, [r7, #24]
 800d7a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7aa:	ed97 7a08 	vldr	s14, [r7, #32]
 800d7ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d7b2:	eef0 1a45 	vmov.f32	s3, s10
 800d7b6:	eeb0 2a65 	vmov.f32	s4, s11
 800d7ba:	eef0 2a46 	vmov.f32	s5, s12
 800d7be:	eeb0 0a66 	vmov.f32	s0, s13
 800d7c2:	eef0 0a47 	vmov.f32	s1, s14
 800d7c6:	eeb0 1a67 	vmov.f32	s2, s15
 800d7ca:	f7fe fd47 	bl	800c25c <FusionVectorCrossProduct>
 800d7ce:	eef0 6a40 	vmov.f32	s13, s0
 800d7d2:	eeb0 7a60 	vmov.f32	s14, s1
 800d7d6:	eef0 7a41 	vmov.f32	s15, s2
 800d7da:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800d7de:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800d7e2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 800d7e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ec:	ee06 1a90 	vmov	s13, r1
 800d7f0:	ee07 2a10 	vmov	s14, r2
 800d7f4:	ee07 3a90 	vmov	s15, r3
 800d7f8:	eeb0 0a66 	vmov.f32	s0, s13
 800d7fc:	eef0 0a47 	vmov.f32	s1, s14
 800d800:	eeb0 1a67 	vmov.f32	s2, s15
 800d804:	3740      	adds	r7, #64	; 0x40
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}

0800d80a <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 800d80a:	b480      	push	{r7}
 800d80c:	b085      	sub	sp, #20
 800d80e:	af00      	add	r7, sp, #0
 800d810:	60f8      	str	r0, [r7, #12]
 800d812:	60b9      	str	r1, [r7, #8]
 800d814:	607a      	str	r2, [r7, #4]
    if (value < min) {
 800d816:	68fa      	ldr	r2, [r7, #12]
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	da01      	bge.n	800d822 <Clamp+0x18>
        return min;
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	e006      	b.n	800d830 <Clamp+0x26>
    }
    if (value > max) {
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	429a      	cmp	r2, r3
 800d828:	dd01      	ble.n	800d82e <Clamp+0x24>
        return max;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	e000      	b.n	800d830 <Clamp+0x26>
    }
    return value;
 800d82e:	68fb      	ldr	r3, [r7, #12]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3714      	adds	r7, #20
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr

0800d83c <FusionAhrsUpdateNoMagnetometer>:
 * @param ahrs AHRS algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b08c      	sub	sp, #48	; 0x30
 800d840:	af00      	add	r7, sp, #0
 800d842:	61f8      	str	r0, [r7, #28]
 800d844:	eeb0 5a40 	vmov.f32	s10, s0
 800d848:	eef0 5a60 	vmov.f32	s11, s1
 800d84c:	eeb0 6a41 	vmov.f32	s12, s2
 800d850:	eef0 6a61 	vmov.f32	s13, s3
 800d854:	eeb0 7a42 	vmov.f32	s14, s4
 800d858:	eef0 7a62 	vmov.f32	s15, s5
 800d85c:	ed87 3a00 	vstr	s6, [r7]
 800d860:	ed87 5a04 	vstr	s10, [r7, #16]
 800d864:	edc7 5a05 	vstr	s11, [r7, #20]
 800d868:	ed87 6a06 	vstr	s12, [r7, #24]
 800d86c:	edc7 6a01 	vstr	s13, [r7, #4]
 800d870:	ed87 7a02 	vstr	s14, [r7, #8]
 800d874:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 800d878:	f04f 0300 	mov.w	r3, #0
 800d87c:	627b      	str	r3, [r7, #36]	; 0x24
 800d87e:	f04f 0300 	mov.w	r3, #0
 800d882:	62bb      	str	r3, [r7, #40]	; 0x28
 800d884:	f04f 0300 	mov.w	r3, #0
 800d888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d88a:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 800d88e:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 800d892:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 800d896:	ed97 5a01 	vldr	s10, [r7, #4]
 800d89a:	edd7 5a02 	vldr	s11, [r7, #8]
 800d89e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8a2:	edd7 6a04 	vldr	s13, [r7, #16]
 800d8a6:	ed97 7a05 	vldr	s14, [r7, #20]
 800d8aa:	edd7 7a06 	vldr	s15, [r7, #24]
 800d8ae:	edd7 4a00 	vldr	s9, [r7]
 800d8b2:	eef0 1a45 	vmov.f32	s3, s10
 800d8b6:	eeb0 2a65 	vmov.f32	s4, s11
 800d8ba:	eef0 2a46 	vmov.f32	s5, s12
 800d8be:	eeb0 0a66 	vmov.f32	s0, s13
 800d8c2:	eef0 0a47 	vmov.f32	s1, s14
 800d8c6:	eeb0 1a67 	vmov.f32	s2, s15
 800d8ca:	69f8      	ldr	r0, [r7, #28]
 800d8cc:	f7ff f992 	bl	800cbf4 <FusionAhrsUpdate>

    // Zero heading during initialisation
    if (ahrs->initialising == true) {
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d004      	beq.n	800d8e4 <FusionAhrsUpdateNoMagnetometer+0xa8>
        FusionAhrsSetHeading(ahrs, 0.0f);
 800d8da:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800d8ec <FusionAhrsUpdateNoMagnetometer+0xb0>
 800d8de:	69f8      	ldr	r0, [r7, #28]
 800d8e0:	f000 f829 	bl	800d936 <FusionAhrsSetHeading>
    }
}
 800d8e4:	bf00      	nop
 800d8e6:	3730      	adds	r7, #48	; 0x30
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	00000000 	.word	0x00000000

0800d8f0 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 800d8f0:	b490      	push	{r4, r7}
 800d8f2:	b08a      	sub	sp, #40	; 0x28
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	f107 0418 	add.w	r4, r7, #24
 800d8fe:	3318      	adds	r3, #24
 800d900:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d902:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d906:	69b8      	ldr	r0, [r7, #24]
 800d908:	69f9      	ldr	r1, [r7, #28]
 800d90a:	6a3a      	ldr	r2, [r7, #32]
 800d90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90e:	ee06 0a10 	vmov	s12, r0
 800d912:	ee06 1a90 	vmov	s13, r1
 800d916:	ee07 2a10 	vmov	s14, r2
 800d91a:	ee07 3a90 	vmov	s15, r3
}
 800d91e:	eeb0 0a46 	vmov.f32	s0, s12
 800d922:	eef0 0a66 	vmov.f32	s1, s13
 800d926:	eeb0 1a47 	vmov.f32	s2, s14
 800d92a:	eef0 1a67 	vmov.f32	s3, s15
 800d92e:	3728      	adds	r7, #40	; 0x28
 800d930:	46bd      	mov	sp, r7
 800d932:	bc90      	pop	{r4, r7}
 800d934:	4770      	bx	lr

0800d936 <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 800d936:	b590      	push	{r4, r7, lr}
 800d938:	b089      	sub	sp, #36	; 0x24
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
 800d93e:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	ed93 7a06 	vldr	s14, [r3, #24]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d94e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	edd3 6a07 	vldr	s13, [r3, #28]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	edd3 7a08 	vldr	s15, [r3, #32]
 800d95e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d962:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	ed93 7a08 	vldr	s14, [r3, #32]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	edd3 7a08 	vldr	s15, [r3, #32]
 800d972:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d976:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d97a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d98a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d98e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d992:	eef0 0a67 	vmov.f32	s1, s15
 800d996:	eeb0 0a46 	vmov.f32	s0, s12
 800d99a:	f005 f969 	bl	8012c70 <atan2f>
 800d99e:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 800d9a2:	ed97 0a00 	vldr	s0, [r7]
 800d9a6:	f7fe fae5 	bl	800bf74 <FusionDegreesToRadians>
 800d9aa:	eeb0 7a40 	vmov.f32	s14, s0
 800d9ae:	edd7 7a07 	vldr	s15, [r7, #28]
 800d9b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d9ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d9be:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 800d9c2:	ed97 0a06 	vldr	s0, [r7, #24]
 800d9c6:	f005 f82d 	bl	8012a24 <cosf>
 800d9ca:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 800d9ce:	edc7 7a02 	vstr	s15, [r7, #8]
 800d9d2:	f04f 0300 	mov.w	r3, #0
 800d9d6:	60fb      	str	r3, [r7, #12]
 800d9d8:	f04f 0300 	mov.w	r3, #0
 800d9dc:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 800d9de:	ed97 0a06 	vldr	s0, [r7, #24]
 800d9e2:	f005 f863 	bl	8012aac <sinf>
 800d9e6:	eef0 7a40 	vmov.f32	s15, s0
 800d9ea:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 800d9ee:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 800d9f2:	687c      	ldr	r4, [r7, #4]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	ed93 4a06 	vldr	s8, [r3, #24]
 800d9fa:	edd3 4a07 	vldr	s9, [r3, #28]
 800d9fe:	ed93 5a08 	vldr	s10, [r3, #32]
 800da02:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 800da06:	ed97 6a02 	vldr	s12, [r7, #8]
 800da0a:	edd7 6a03 	vldr	s13, [r7, #12]
 800da0e:	ed97 7a04 	vldr	s14, [r7, #16]
 800da12:	edd7 7a05 	vldr	s15, [r7, #20]
 800da16:	eeb0 2a44 	vmov.f32	s4, s8
 800da1a:	eef0 2a64 	vmov.f32	s5, s9
 800da1e:	eeb0 3a45 	vmov.f32	s6, s10
 800da22:	eef0 3a65 	vmov.f32	s7, s11
 800da26:	eeb0 0a46 	vmov.f32	s0, s12
 800da2a:	eef0 0a66 	vmov.f32	s1, s13
 800da2e:	eeb0 1a47 	vmov.f32	s2, s14
 800da32:	eef0 1a67 	vmov.f32	s3, s15
 800da36:	f7fe fdcc 	bl	800c5d2 <FusionQuaternionMultiply>
 800da3a:	eeb0 6a40 	vmov.f32	s12, s0
 800da3e:	eef0 6a60 	vmov.f32	s13, s1
 800da42:	eeb0 7a41 	vmov.f32	s14, s2
 800da46:	eef0 7a61 	vmov.f32	s15, s3
 800da4a:	ed84 6a06 	vstr	s12, [r4, #24]
 800da4e:	edc4 6a07 	vstr	s13, [r4, #28]
 800da52:	ed84 7a08 	vstr	s14, [r4, #32]
 800da56:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800da5a:	bf00      	nop
 800da5c:	3724      	adds	r7, #36	; 0x24
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd90      	pop	{r4, r7, pc}

0800da62 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800da62:	b480      	push	{r7}
 800da64:	b085      	sub	sp, #20
 800da66:	af00      	add	r7, sp, #0
 800da68:	4603      	mov	r3, r0
 800da6a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800da6c:	2300      	movs	r3, #0
 800da6e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800da70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da74:	2b84      	cmp	r3, #132	; 0x84
 800da76:	d005      	beq.n	800da84 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800da78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	4413      	add	r3, r2
 800da80:	3303      	adds	r3, #3
 800da82:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800da84:	68fb      	ldr	r3, [r7, #12]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3714      	adds	r7, #20
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr

0800da92 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800da92:	b580      	push	{r7, lr}
 800da94:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800da96:	f000 ffb1 	bl	800e9fc <vTaskStartScheduler>
  
  return osOK;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800daa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daa2:	b089      	sub	sp, #36	; 0x24
 800daa4:	af04      	add	r7, sp, #16
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	695b      	ldr	r3, [r3, #20]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d020      	beq.n	800daf4 <osThreadCreate+0x54>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	699b      	ldr	r3, [r3, #24]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d01c      	beq.n	800daf4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	685c      	ldr	r4, [r3, #4]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681d      	ldr	r5, [r3, #0]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	691e      	ldr	r6, [r3, #16]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800dacc:	4618      	mov	r0, r3
 800dace:	f7ff ffc8 	bl	800da62 <makeFreeRtosPriority>
 800dad2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	695b      	ldr	r3, [r3, #20]
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dadc:	9202      	str	r2, [sp, #8]
 800dade:	9301      	str	r3, [sp, #4]
 800dae0:	9100      	str	r1, [sp, #0]
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	4632      	mov	r2, r6
 800dae6:	4629      	mov	r1, r5
 800dae8:	4620      	mov	r0, r4
 800daea:	f000 fc9d 	bl	800e428 <xTaskCreateStatic>
 800daee:	4603      	mov	r3, r0
 800daf0:	60fb      	str	r3, [r7, #12]
 800daf2:	e01c      	b.n	800db2e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	685c      	ldr	r4, [r3, #4]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800db00:	b29e      	uxth	r6, r3
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800db08:	4618      	mov	r0, r3
 800db0a:	f7ff ffaa 	bl	800da62 <makeFreeRtosPriority>
 800db0e:	4602      	mov	r2, r0
 800db10:	f107 030c 	add.w	r3, r7, #12
 800db14:	9301      	str	r3, [sp, #4]
 800db16:	9200      	str	r2, [sp, #0]
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	4632      	mov	r2, r6
 800db1c:	4629      	mov	r1, r5
 800db1e:	4620      	mov	r0, r4
 800db20:	f000 fcdf 	bl	800e4e2 <xTaskCreate>
 800db24:	4603      	mov	r3, r0
 800db26:	2b01      	cmp	r3, #1
 800db28:	d001      	beq.n	800db2e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800db2a:	2300      	movs	r3, #0
 800db2c:	e000      	b.n	800db30 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800db2e:	68fb      	ldr	r3, [r7, #12]
}
 800db30:	4618      	mov	r0, r3
 800db32:	3714      	adds	r7, #20
 800db34:	46bd      	mov	sp, r7
 800db36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800db38 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b084      	sub	sp, #16
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d001      	beq.n	800db4e <osDelay+0x16>
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	e000      	b.n	800db50 <osDelay+0x18>
 800db4e:	2301      	movs	r3, #1
 800db50:	4618      	mov	r0, r3
 800db52:	f000 fdfd 	bl	800e750 <vTaskDelay>
  
  return osOK;
 800db56:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3710      	adds	r7, #16
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f103 0208 	add.w	r2, r3, #8
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f04f 32ff 	mov.w	r2, #4294967295
 800db78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f103 0208 	add.w	r2, r3, #8
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f103 0208 	add.w	r2, r3, #8
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2200      	movs	r2, #0
 800db92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800db94:	bf00      	nop
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr

0800dba0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dba0:	b480      	push	{r7}
 800dba2:	b083      	sub	sp, #12
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dbae:	bf00      	nop
 800dbb0:	370c      	adds	r7, #12
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr

0800dbba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dbba:	b480      	push	{r7}
 800dbbc:	b085      	sub	sp, #20
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	68fa      	ldr	r2, [r7, #12]
 800dbce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	689a      	ldr	r2, [r3, #8]
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	683a      	ldr	r2, [r7, #0]
 800dbde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	683a      	ldr	r2, [r7, #0]
 800dbe4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	1c5a      	adds	r2, r3, #1
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	601a      	str	r2, [r3, #0]
}
 800dbf6:	bf00      	nop
 800dbf8:	3714      	adds	r7, #20
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr

0800dc02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dc02:	b480      	push	{r7}
 800dc04:	b085      	sub	sp, #20
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
 800dc0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc18:	d103      	bne.n	800dc22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	691b      	ldr	r3, [r3, #16]
 800dc1e:	60fb      	str	r3, [r7, #12]
 800dc20:	e00c      	b.n	800dc3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	3308      	adds	r3, #8
 800dc26:	60fb      	str	r3, [r7, #12]
 800dc28:	e002      	b.n	800dc30 <vListInsert+0x2e>
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	60fb      	str	r3, [r7, #12]
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	68ba      	ldr	r2, [r7, #8]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d2f6      	bcs.n	800dc2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	685a      	ldr	r2, [r3, #4]
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	685b      	ldr	r3, [r3, #4]
 800dc48:	683a      	ldr	r2, [r7, #0]
 800dc4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	68fa      	ldr	r2, [r7, #12]
 800dc50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	683a      	ldr	r2, [r7, #0]
 800dc56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	687a      	ldr	r2, [r7, #4]
 800dc5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	1c5a      	adds	r2, r3, #1
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	601a      	str	r2, [r3, #0]
}
 800dc68:	bf00      	nop
 800dc6a:	3714      	adds	r7, #20
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dc74:	b480      	push	{r7}
 800dc76:	b085      	sub	sp, #20
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	691b      	ldr	r3, [r3, #16]
 800dc80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	6892      	ldr	r2, [r2, #8]
 800dc8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	689b      	ldr	r3, [r3, #8]
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	6852      	ldr	r2, [r2, #4]
 800dc94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	687a      	ldr	r2, [r7, #4]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d103      	bne.n	800dca8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	689a      	ldr	r2, [r3, #8]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	1e5a      	subs	r2, r3, #1
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3714      	adds	r7, #20
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr

0800dcc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d10a      	bne.n	800dcf2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce0:	f383 8811 	msr	BASEPRI, r3
 800dce4:	f3bf 8f6f 	isb	sy
 800dce8:	f3bf 8f4f 	dsb	sy
 800dcec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dcee:	bf00      	nop
 800dcf0:	e7fe      	b.n	800dcf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dcf2:	f001 fcb7 	bl	800f664 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcfe:	68f9      	ldr	r1, [r7, #12]
 800dd00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dd02:	fb01 f303 	mul.w	r3, r1, r3
 800dd06:	441a      	add	r2, r3
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd22:	3b01      	subs	r3, #1
 800dd24:	68f9      	ldr	r1, [r7, #12]
 800dd26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dd28:	fb01 f303 	mul.w	r3, r1, r3
 800dd2c:	441a      	add	r2, r3
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	22ff      	movs	r2, #255	; 0xff
 800dd36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	22ff      	movs	r2, #255	; 0xff
 800dd3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d114      	bne.n	800dd72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	691b      	ldr	r3, [r3, #16]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d01a      	beq.n	800dd86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	3310      	adds	r3, #16
 800dd54:	4618      	mov	r0, r3
 800dd56:	f001 f893 	bl	800ee80 <xTaskRemoveFromEventList>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d012      	beq.n	800dd86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dd60:	4b0c      	ldr	r3, [pc, #48]	; (800dd94 <xQueueGenericReset+0xcc>)
 800dd62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd66:	601a      	str	r2, [r3, #0]
 800dd68:	f3bf 8f4f 	dsb	sy
 800dd6c:	f3bf 8f6f 	isb	sy
 800dd70:	e009      	b.n	800dd86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	3310      	adds	r3, #16
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7ff fef2 	bl	800db60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	3324      	adds	r3, #36	; 0x24
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7ff feed 	bl	800db60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dd86:	f001 fc9d 	bl	800f6c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dd8a:	2301      	movs	r3, #1
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3710      	adds	r7, #16
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	e000ed04 	.word	0xe000ed04

0800dd98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b08a      	sub	sp, #40	; 0x28
 800dd9c:	af02      	add	r7, sp, #8
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	4613      	mov	r3, r2
 800dda4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d10a      	bne.n	800ddc2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ddac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb0:	f383 8811 	msr	BASEPRI, r3
 800ddb4:	f3bf 8f6f 	isb	sy
 800ddb8:	f3bf 8f4f 	dsb	sy
 800ddbc:	613b      	str	r3, [r7, #16]
}
 800ddbe:	bf00      	nop
 800ddc0:	e7fe      	b.n	800ddc0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	fb02 f303 	mul.w	r3, r2, r3
 800ddca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	3348      	adds	r3, #72	; 0x48
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f001 fd29 	bl	800f828 <pvPortMalloc>
 800ddd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d011      	beq.n	800de02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	3348      	adds	r3, #72	; 0x48
 800dde6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dde8:	69bb      	ldr	r3, [r7, #24]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ddf0:	79fa      	ldrb	r2, [r7, #7]
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	9300      	str	r3, [sp, #0]
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	697a      	ldr	r2, [r7, #20]
 800ddfa:	68b9      	ldr	r1, [r7, #8]
 800ddfc:	68f8      	ldr	r0, [r7, #12]
 800ddfe:	f000 f805 	bl	800de0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800de02:	69bb      	ldr	r3, [r7, #24]
	}
 800de04:	4618      	mov	r0, r3
 800de06:	3720      	adds	r7, #32
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	60b9      	str	r1, [r7, #8]
 800de16:	607a      	str	r2, [r7, #4]
 800de18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d103      	bne.n	800de28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	69ba      	ldr	r2, [r7, #24]
 800de24:	601a      	str	r2, [r3, #0]
 800de26:	e002      	b.n	800de2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800de28:	69bb      	ldr	r3, [r7, #24]
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800de2e:	69bb      	ldr	r3, [r7, #24]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	68ba      	ldr	r2, [r7, #8]
 800de38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800de3a:	2101      	movs	r1, #1
 800de3c:	69b8      	ldr	r0, [r7, #24]
 800de3e:	f7ff ff43 	bl	800dcc8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800de42:	bf00      	nop
 800de44:	3710      	adds	r7, #16
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
	...

0800de4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b08e      	sub	sp, #56	; 0x38
 800de50:	af00      	add	r7, sp, #0
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	60b9      	str	r1, [r7, #8]
 800de56:	607a      	str	r2, [r7, #4]
 800de58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800de5a:	2300      	movs	r3, #0
 800de5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800de62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de64:	2b00      	cmp	r3, #0
 800de66:	d10a      	bne.n	800de7e <xQueueGenericSend+0x32>
	__asm volatile
 800de68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6c:	f383 8811 	msr	BASEPRI, r3
 800de70:	f3bf 8f6f 	isb	sy
 800de74:	f3bf 8f4f 	dsb	sy
 800de78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800de7a:	bf00      	nop
 800de7c:	e7fe      	b.n	800de7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d103      	bne.n	800de8c <xQueueGenericSend+0x40>
 800de84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d101      	bne.n	800de90 <xQueueGenericSend+0x44>
 800de8c:	2301      	movs	r3, #1
 800de8e:	e000      	b.n	800de92 <xQueueGenericSend+0x46>
 800de90:	2300      	movs	r3, #0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d10a      	bne.n	800deac <xQueueGenericSend+0x60>
	__asm volatile
 800de96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9a:	f383 8811 	msr	BASEPRI, r3
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dea8:	bf00      	nop
 800deaa:	e7fe      	b.n	800deaa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	2b02      	cmp	r3, #2
 800deb0:	d103      	bne.n	800deba <xQueueGenericSend+0x6e>
 800deb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d101      	bne.n	800debe <xQueueGenericSend+0x72>
 800deba:	2301      	movs	r3, #1
 800debc:	e000      	b.n	800dec0 <xQueueGenericSend+0x74>
 800debe:	2300      	movs	r3, #0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10a      	bne.n	800deda <xQueueGenericSend+0x8e>
	__asm volatile
 800dec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	623b      	str	r3, [r7, #32]
}
 800ded6:	bf00      	nop
 800ded8:	e7fe      	b.n	800ded8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800deda:	f001 f98d 	bl	800f1f8 <xTaskGetSchedulerState>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d102      	bne.n	800deea <xQueueGenericSend+0x9e>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d101      	bne.n	800deee <xQueueGenericSend+0xa2>
 800deea:	2301      	movs	r3, #1
 800deec:	e000      	b.n	800def0 <xQueueGenericSend+0xa4>
 800deee:	2300      	movs	r3, #0
 800def0:	2b00      	cmp	r3, #0
 800def2:	d10a      	bne.n	800df0a <xQueueGenericSend+0xbe>
	__asm volatile
 800def4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def8:	f383 8811 	msr	BASEPRI, r3
 800defc:	f3bf 8f6f 	isb	sy
 800df00:	f3bf 8f4f 	dsb	sy
 800df04:	61fb      	str	r3, [r7, #28]
}
 800df06:	bf00      	nop
 800df08:	e7fe      	b.n	800df08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df0a:	f001 fbab 	bl	800f664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df16:	429a      	cmp	r2, r3
 800df18:	d302      	bcc.n	800df20 <xQueueGenericSend+0xd4>
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	2b02      	cmp	r3, #2
 800df1e:	d129      	bne.n	800df74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df20:	683a      	ldr	r2, [r7, #0]
 800df22:	68b9      	ldr	r1, [r7, #8]
 800df24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df26:	f000 f96f 	bl	800e208 <prvCopyDataToQueue>
 800df2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df30:	2b00      	cmp	r3, #0
 800df32:	d010      	beq.n	800df56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df36:	3324      	adds	r3, #36	; 0x24
 800df38:	4618      	mov	r0, r3
 800df3a:	f000 ffa1 	bl	800ee80 <xTaskRemoveFromEventList>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d013      	beq.n	800df6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800df44:	4b3f      	ldr	r3, [pc, #252]	; (800e044 <xQueueGenericSend+0x1f8>)
 800df46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df4a:	601a      	str	r2, [r3, #0]
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	e00a      	b.n	800df6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800df56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d007      	beq.n	800df6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800df5c:	4b39      	ldr	r3, [pc, #228]	; (800e044 <xQueueGenericSend+0x1f8>)
 800df5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df62:	601a      	str	r2, [r3, #0]
 800df64:	f3bf 8f4f 	dsb	sy
 800df68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800df6c:	f001 fbaa 	bl	800f6c4 <vPortExitCritical>
				return pdPASS;
 800df70:	2301      	movs	r3, #1
 800df72:	e063      	b.n	800e03c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d103      	bne.n	800df82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800df7a:	f001 fba3 	bl	800f6c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800df7e:	2300      	movs	r3, #0
 800df80:	e05c      	b.n	800e03c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df84:	2b00      	cmp	r3, #0
 800df86:	d106      	bne.n	800df96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df88:	f107 0314 	add.w	r3, r7, #20
 800df8c:	4618      	mov	r0, r3
 800df8e:	f000 ffd9 	bl	800ef44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df92:	2301      	movs	r3, #1
 800df94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df96:	f001 fb95 	bl	800f6c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df9a:	f000 fd8f 	bl	800eabc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df9e:	f001 fb61 	bl	800f664 <vPortEnterCritical>
 800dfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfa8:	b25b      	sxtb	r3, r3
 800dfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfae:	d103      	bne.n	800dfb8 <xQueueGenericSend+0x16c>
 800dfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dfbe:	b25b      	sxtb	r3, r3
 800dfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc4:	d103      	bne.n	800dfce <xQueueGenericSend+0x182>
 800dfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dfce:	f001 fb79 	bl	800f6c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfd2:	1d3a      	adds	r2, r7, #4
 800dfd4:	f107 0314 	add.w	r3, r7, #20
 800dfd8:	4611      	mov	r1, r2
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f000 ffc8 	bl	800ef70 <xTaskCheckForTimeOut>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d124      	bne.n	800e030 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dfe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfe8:	f000 fa06 	bl	800e3f8 <prvIsQueueFull>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d018      	beq.n	800e024 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff4:	3310      	adds	r3, #16
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	4611      	mov	r1, r2
 800dffa:	4618      	mov	r0, r3
 800dffc:	f000 ff1c 	bl	800ee38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e002:	f000 f991 	bl	800e328 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e006:	f000 fd67 	bl	800ead8 <xTaskResumeAll>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f47f af7c 	bne.w	800df0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e012:	4b0c      	ldr	r3, [pc, #48]	; (800e044 <xQueueGenericSend+0x1f8>)
 800e014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e018:	601a      	str	r2, [r3, #0]
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	f3bf 8f6f 	isb	sy
 800e022:	e772      	b.n	800df0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e026:	f000 f97f 	bl	800e328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e02a:	f000 fd55 	bl	800ead8 <xTaskResumeAll>
 800e02e:	e76c      	b.n	800df0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e032:	f000 f979 	bl	800e328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e036:	f000 fd4f 	bl	800ead8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e03a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3738      	adds	r7, #56	; 0x38
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	e000ed04 	.word	0xe000ed04

0800e048 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b08c      	sub	sp, #48	; 0x30
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e054:	2300      	movs	r3, #0
 800e056:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d10a      	bne.n	800e078 <xQueueReceive+0x30>
	__asm volatile
 800e062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e066:	f383 8811 	msr	BASEPRI, r3
 800e06a:	f3bf 8f6f 	isb	sy
 800e06e:	f3bf 8f4f 	dsb	sy
 800e072:	623b      	str	r3, [r7, #32]
}
 800e074:	bf00      	nop
 800e076:	e7fe      	b.n	800e076 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d103      	bne.n	800e086 <xQueueReceive+0x3e>
 800e07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e082:	2b00      	cmp	r3, #0
 800e084:	d101      	bne.n	800e08a <xQueueReceive+0x42>
 800e086:	2301      	movs	r3, #1
 800e088:	e000      	b.n	800e08c <xQueueReceive+0x44>
 800e08a:	2300      	movs	r3, #0
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d10a      	bne.n	800e0a6 <xQueueReceive+0x5e>
	__asm volatile
 800e090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	61fb      	str	r3, [r7, #28]
}
 800e0a2:	bf00      	nop
 800e0a4:	e7fe      	b.n	800e0a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e0a6:	f001 f8a7 	bl	800f1f8 <xTaskGetSchedulerState>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d102      	bne.n	800e0b6 <xQueueReceive+0x6e>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d101      	bne.n	800e0ba <xQueueReceive+0x72>
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e000      	b.n	800e0bc <xQueueReceive+0x74>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d10a      	bne.n	800e0d6 <xQueueReceive+0x8e>
	__asm volatile
 800e0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c4:	f383 8811 	msr	BASEPRI, r3
 800e0c8:	f3bf 8f6f 	isb	sy
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	61bb      	str	r3, [r7, #24]
}
 800e0d2:	bf00      	nop
 800e0d4:	e7fe      	b.n	800e0d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e0d6:	f001 fac5 	bl	800f664 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d01f      	beq.n	800e126 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e0e6:	68b9      	ldr	r1, [r7, #8]
 800e0e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0ea:	f000 f8f7 	bl	800e2dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f0:	1e5a      	subs	r2, r3, #1
 800e0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f8:	691b      	ldr	r3, [r3, #16]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00f      	beq.n	800e11e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e100:	3310      	adds	r3, #16
 800e102:	4618      	mov	r0, r3
 800e104:	f000 febc 	bl	800ee80 <xTaskRemoveFromEventList>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d007      	beq.n	800e11e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e10e:	4b3d      	ldr	r3, [pc, #244]	; (800e204 <xQueueReceive+0x1bc>)
 800e110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e114:	601a      	str	r2, [r3, #0]
 800e116:	f3bf 8f4f 	dsb	sy
 800e11a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e11e:	f001 fad1 	bl	800f6c4 <vPortExitCritical>
				return pdPASS;
 800e122:	2301      	movs	r3, #1
 800e124:	e069      	b.n	800e1fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d103      	bne.n	800e134 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e12c:	f001 faca 	bl	800f6c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e130:	2300      	movs	r3, #0
 800e132:	e062      	b.n	800e1fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e136:	2b00      	cmp	r3, #0
 800e138:	d106      	bne.n	800e148 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e13a:	f107 0310 	add.w	r3, r7, #16
 800e13e:	4618      	mov	r0, r3
 800e140:	f000 ff00 	bl	800ef44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e144:	2301      	movs	r3, #1
 800e146:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e148:	f001 fabc 	bl	800f6c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e14c:	f000 fcb6 	bl	800eabc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e150:	f001 fa88 	bl	800f664 <vPortEnterCritical>
 800e154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e15a:	b25b      	sxtb	r3, r3
 800e15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e160:	d103      	bne.n	800e16a <xQueueReceive+0x122>
 800e162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e164:	2200      	movs	r2, #0
 800e166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e170:	b25b      	sxtb	r3, r3
 800e172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e176:	d103      	bne.n	800e180 <xQueueReceive+0x138>
 800e178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17a:	2200      	movs	r2, #0
 800e17c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e180:	f001 faa0 	bl	800f6c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e184:	1d3a      	adds	r2, r7, #4
 800e186:	f107 0310 	add.w	r3, r7, #16
 800e18a:	4611      	mov	r1, r2
 800e18c:	4618      	mov	r0, r3
 800e18e:	f000 feef 	bl	800ef70 <xTaskCheckForTimeOut>
 800e192:	4603      	mov	r3, r0
 800e194:	2b00      	cmp	r3, #0
 800e196:	d123      	bne.n	800e1e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e19a:	f000 f917 	bl	800e3cc <prvIsQueueEmpty>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d017      	beq.n	800e1d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a6:	3324      	adds	r3, #36	; 0x24
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	4611      	mov	r1, r2
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f000 fe43 	bl	800ee38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e1b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1b4:	f000 f8b8 	bl	800e328 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e1b8:	f000 fc8e 	bl	800ead8 <xTaskResumeAll>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d189      	bne.n	800e0d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e1c2:	4b10      	ldr	r3, [pc, #64]	; (800e204 <xQueueReceive+0x1bc>)
 800e1c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1c8:	601a      	str	r2, [r3, #0]
 800e1ca:	f3bf 8f4f 	dsb	sy
 800e1ce:	f3bf 8f6f 	isb	sy
 800e1d2:	e780      	b.n	800e0d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e1d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1d6:	f000 f8a7 	bl	800e328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e1da:	f000 fc7d 	bl	800ead8 <xTaskResumeAll>
 800e1de:	e77a      	b.n	800e0d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e1e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1e2:	f000 f8a1 	bl	800e328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e1e6:	f000 fc77 	bl	800ead8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e1ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e1ec:	f000 f8ee 	bl	800e3cc <prvIsQueueEmpty>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	f43f af6f 	beq.w	800e0d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e1f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3730      	adds	r7, #48	; 0x30
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
 800e202:	bf00      	nop
 800e204:	e000ed04 	.word	0xe000ed04

0800e208 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b086      	sub	sp, #24
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e214:	2300      	movs	r3, #0
 800e216:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e21c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e222:	2b00      	cmp	r3, #0
 800e224:	d10d      	bne.n	800e242 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d14d      	bne.n	800e2ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	689b      	ldr	r3, [r3, #8]
 800e232:	4618      	mov	r0, r3
 800e234:	f000 fffe 	bl	800f234 <xTaskPriorityDisinherit>
 800e238:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2200      	movs	r2, #0
 800e23e:	609a      	str	r2, [r3, #8]
 800e240:	e043      	b.n	800e2ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d119      	bne.n	800e27c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	6858      	ldr	r0, [r3, #4]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e250:	461a      	mov	r2, r3
 800e252:	68b9      	ldr	r1, [r7, #8]
 800e254:	f001 fcfc 	bl	800fc50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	685a      	ldr	r2, [r3, #4]
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e260:	441a      	add	r2, r3
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	685a      	ldr	r2, [r3, #4]
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d32b      	bcc.n	800e2ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	605a      	str	r2, [r3, #4]
 800e27a:	e026      	b.n	800e2ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	68d8      	ldr	r0, [r3, #12]
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e284:	461a      	mov	r2, r3
 800e286:	68b9      	ldr	r1, [r7, #8]
 800e288:	f001 fce2 	bl	800fc50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	68da      	ldr	r2, [r3, #12]
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e294:	425b      	negs	r3, r3
 800e296:	441a      	add	r2, r3
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	68da      	ldr	r2, [r3, #12]
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d207      	bcs.n	800e2b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	689a      	ldr	r2, [r3, #8]
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2b0:	425b      	negs	r3, r3
 800e2b2:	441a      	add	r2, r3
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b02      	cmp	r3, #2
 800e2bc:	d105      	bne.n	800e2ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d002      	beq.n	800e2ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	1c5a      	adds	r2, r3, #1
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e2d2:	697b      	ldr	r3, [r7, #20]
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3718      	adds	r7, #24
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d018      	beq.n	800e320 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	68da      	ldr	r2, [r3, #12]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2f6:	441a      	add	r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	68da      	ldr	r2, [r3, #12]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	429a      	cmp	r2, r3
 800e306:	d303      	bcc.n	800e310 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	68d9      	ldr	r1, [r3, #12]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e318:	461a      	mov	r2, r3
 800e31a:	6838      	ldr	r0, [r7, #0]
 800e31c:	f001 fc98 	bl	800fc50 <memcpy>
	}
}
 800e320:	bf00      	nop
 800e322:	3708      	adds	r7, #8
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e330:	f001 f998 	bl	800f664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e33a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e33c:	e011      	b.n	800e362 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e342:	2b00      	cmp	r3, #0
 800e344:	d012      	beq.n	800e36c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	3324      	adds	r3, #36	; 0x24
 800e34a:	4618      	mov	r0, r3
 800e34c:	f000 fd98 	bl	800ee80 <xTaskRemoveFromEventList>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d001      	beq.n	800e35a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e356:	f000 fe6d 	bl	800f034 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e35a:	7bfb      	ldrb	r3, [r7, #15]
 800e35c:	3b01      	subs	r3, #1
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e366:	2b00      	cmp	r3, #0
 800e368:	dce9      	bgt.n	800e33e <prvUnlockQueue+0x16>
 800e36a:	e000      	b.n	800e36e <prvUnlockQueue+0x46>
					break;
 800e36c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	22ff      	movs	r2, #255	; 0xff
 800e372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e376:	f001 f9a5 	bl	800f6c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e37a:	f001 f973 	bl	800f664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e384:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e386:	e011      	b.n	800e3ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	691b      	ldr	r3, [r3, #16]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d012      	beq.n	800e3b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	3310      	adds	r3, #16
 800e394:	4618      	mov	r0, r3
 800e396:	f000 fd73 	bl	800ee80 <xTaskRemoveFromEventList>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d001      	beq.n	800e3a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e3a0:	f000 fe48 	bl	800f034 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e3a4:	7bbb      	ldrb	r3, [r7, #14]
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e3ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	dce9      	bgt.n	800e388 <prvUnlockQueue+0x60>
 800e3b4:	e000      	b.n	800e3b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e3b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	22ff      	movs	r2, #255	; 0xff
 800e3bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e3c0:	f001 f980 	bl	800f6c4 <vPortExitCritical>
}
 800e3c4:	bf00      	nop
 800e3c6:	3710      	adds	r7, #16
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e3d4:	f001 f946 	bl	800f664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d102      	bne.n	800e3e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	60fb      	str	r3, [r7, #12]
 800e3e4:	e001      	b.n	800e3ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e3ea:	f001 f96b 	bl	800f6c4 <vPortExitCritical>

	return xReturn;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3710      	adds	r7, #16
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e400:	f001 f930 	bl	800f664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d102      	bne.n	800e416 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e410:	2301      	movs	r3, #1
 800e412:	60fb      	str	r3, [r7, #12]
 800e414:	e001      	b.n	800e41a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e416:	2300      	movs	r3, #0
 800e418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e41a:	f001 f953 	bl	800f6c4 <vPortExitCritical>

	return xReturn;
 800e41e:	68fb      	ldr	r3, [r7, #12]
}
 800e420:	4618      	mov	r0, r3
 800e422:	3710      	adds	r7, #16
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}

0800e428 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b08e      	sub	sp, #56	; 0x38
 800e42c:	af04      	add	r7, sp, #16
 800e42e:	60f8      	str	r0, [r7, #12]
 800e430:	60b9      	str	r1, [r7, #8]
 800e432:	607a      	str	r2, [r7, #4]
 800e434:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d10a      	bne.n	800e452 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e440:	f383 8811 	msr	BASEPRI, r3
 800e444:	f3bf 8f6f 	isb	sy
 800e448:	f3bf 8f4f 	dsb	sy
 800e44c:	623b      	str	r3, [r7, #32]
}
 800e44e:	bf00      	nop
 800e450:	e7fe      	b.n	800e450 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e454:	2b00      	cmp	r3, #0
 800e456:	d10a      	bne.n	800e46e <xTaskCreateStatic+0x46>
	__asm volatile
 800e458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45c:	f383 8811 	msr	BASEPRI, r3
 800e460:	f3bf 8f6f 	isb	sy
 800e464:	f3bf 8f4f 	dsb	sy
 800e468:	61fb      	str	r3, [r7, #28]
}
 800e46a:	bf00      	nop
 800e46c:	e7fe      	b.n	800e46c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e46e:	2354      	movs	r3, #84	; 0x54
 800e470:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	2b54      	cmp	r3, #84	; 0x54
 800e476:	d00a      	beq.n	800e48e <xTaskCreateStatic+0x66>
	__asm volatile
 800e478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e47c:	f383 8811 	msr	BASEPRI, r3
 800e480:	f3bf 8f6f 	isb	sy
 800e484:	f3bf 8f4f 	dsb	sy
 800e488:	61bb      	str	r3, [r7, #24]
}
 800e48a:	bf00      	nop
 800e48c:	e7fe      	b.n	800e48c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e48e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e492:	2b00      	cmp	r3, #0
 800e494:	d01e      	beq.n	800e4d4 <xTaskCreateStatic+0xac>
 800e496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d01b      	beq.n	800e4d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a8:	2202      	movs	r2, #2
 800e4aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	9303      	str	r3, [sp, #12]
 800e4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b4:	9302      	str	r3, [sp, #8]
 800e4b6:	f107 0314 	add.w	r3, r7, #20
 800e4ba:	9301      	str	r3, [sp, #4]
 800e4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4be:	9300      	str	r3, [sp, #0]
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	68b9      	ldr	r1, [r7, #8]
 800e4c6:	68f8      	ldr	r0, [r7, #12]
 800e4c8:	f000 f850 	bl	800e56c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e4cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4ce:	f000 f8d5 	bl	800e67c <prvAddNewTaskToReadyList>
 800e4d2:	e001      	b.n	800e4d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e4d8:	697b      	ldr	r3, [r7, #20]
	}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3728      	adds	r7, #40	; 0x28
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}

0800e4e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e4e2:	b580      	push	{r7, lr}
 800e4e4:	b08c      	sub	sp, #48	; 0x30
 800e4e6:	af04      	add	r7, sp, #16
 800e4e8:	60f8      	str	r0, [r7, #12]
 800e4ea:	60b9      	str	r1, [r7, #8]
 800e4ec:	603b      	str	r3, [r7, #0]
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e4f2:	88fb      	ldrh	r3, [r7, #6]
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f001 f996 	bl	800f828 <pvPortMalloc>
 800e4fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d00e      	beq.n	800e522 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e504:	2054      	movs	r0, #84	; 0x54
 800e506:	f001 f98f 	bl	800f828 <pvPortMalloc>
 800e50a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d003      	beq.n	800e51a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	697a      	ldr	r2, [r7, #20]
 800e516:	631a      	str	r2, [r3, #48]	; 0x30
 800e518:	e005      	b.n	800e526 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e51a:	6978      	ldr	r0, [r7, #20]
 800e51c:	f001 fa50 	bl	800f9c0 <vPortFree>
 800e520:	e001      	b.n	800e526 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e522:	2300      	movs	r3, #0
 800e524:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e526:	69fb      	ldr	r3, [r7, #28]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d017      	beq.n	800e55c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	2200      	movs	r2, #0
 800e530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e534:	88fa      	ldrh	r2, [r7, #6]
 800e536:	2300      	movs	r3, #0
 800e538:	9303      	str	r3, [sp, #12]
 800e53a:	69fb      	ldr	r3, [r7, #28]
 800e53c:	9302      	str	r3, [sp, #8]
 800e53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e540:	9301      	str	r3, [sp, #4]
 800e542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e544:	9300      	str	r3, [sp, #0]
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	68b9      	ldr	r1, [r7, #8]
 800e54a:	68f8      	ldr	r0, [r7, #12]
 800e54c:	f000 f80e 	bl	800e56c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e550:	69f8      	ldr	r0, [r7, #28]
 800e552:	f000 f893 	bl	800e67c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e556:	2301      	movs	r3, #1
 800e558:	61bb      	str	r3, [r7, #24]
 800e55a:	e002      	b.n	800e562 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e55c:	f04f 33ff 	mov.w	r3, #4294967295
 800e560:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e562:	69bb      	ldr	r3, [r7, #24]
	}
 800e564:	4618      	mov	r0, r3
 800e566:	3720      	adds	r7, #32
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b088      	sub	sp, #32
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	607a      	str	r2, [r7, #4]
 800e578:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e584:	3b01      	subs	r3, #1
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	4413      	add	r3, r2
 800e58a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	f023 0307 	bic.w	r3, r3, #7
 800e592:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e594:	69bb      	ldr	r3, [r7, #24]
 800e596:	f003 0307 	and.w	r3, r3, #7
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d00a      	beq.n	800e5b4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800e59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a2:	f383 8811 	msr	BASEPRI, r3
 800e5a6:	f3bf 8f6f 	isb	sy
 800e5aa:	f3bf 8f4f 	dsb	sy
 800e5ae:	617b      	str	r3, [r7, #20]
}
 800e5b0:	bf00      	nop
 800e5b2:	e7fe      	b.n	800e5b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d01f      	beq.n	800e5fa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	61fb      	str	r3, [r7, #28]
 800e5be:	e012      	b.n	800e5e6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e5c0:	68ba      	ldr	r2, [r7, #8]
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	7819      	ldrb	r1, [r3, #0]
 800e5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5ca:	69fb      	ldr	r3, [r7, #28]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	3334      	adds	r3, #52	; 0x34
 800e5d0:	460a      	mov	r2, r1
 800e5d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e5d4:	68ba      	ldr	r2, [r7, #8]
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	4413      	add	r3, r2
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d006      	beq.n	800e5ee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	61fb      	str	r3, [r7, #28]
 800e5e6:	69fb      	ldr	r3, [r7, #28]
 800e5e8:	2b0f      	cmp	r3, #15
 800e5ea:	d9e9      	bls.n	800e5c0 <prvInitialiseNewTask+0x54>
 800e5ec:	e000      	b.n	800e5f0 <prvInitialiseNewTask+0x84>
			{
				break;
 800e5ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e5f8:	e003      	b.n	800e602 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e604:	2b06      	cmp	r3, #6
 800e606:	d901      	bls.n	800e60c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e608:	2306      	movs	r3, #6
 800e60a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e610:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e616:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61a:	2200      	movs	r2, #0
 800e61c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e620:	3304      	adds	r3, #4
 800e622:	4618      	mov	r0, r3
 800e624:	f7ff fabc 	bl	800dba0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62a:	3318      	adds	r3, #24
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7ff fab7 	bl	800dba0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e636:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63a:	f1c3 0207 	rsb	r2, r3, #7
 800e63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e640:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e646:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e64a:	2200      	movs	r2, #0
 800e64c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e650:	2200      	movs	r2, #0
 800e652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e656:	683a      	ldr	r2, [r7, #0]
 800e658:	68f9      	ldr	r1, [r7, #12]
 800e65a:	69b8      	ldr	r0, [r7, #24]
 800e65c:	f000 fed6 	bl	800f40c <pxPortInitialiseStack>
 800e660:	4602      	mov	r2, r0
 800e662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e664:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d002      	beq.n	800e672 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e670:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e672:	bf00      	nop
 800e674:	3720      	adds	r7, #32
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
	...

0800e67c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e684:	f000 ffee 	bl	800f664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e688:	4b2a      	ldr	r3, [pc, #168]	; (800e734 <prvAddNewTaskToReadyList+0xb8>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	3301      	adds	r3, #1
 800e68e:	4a29      	ldr	r2, [pc, #164]	; (800e734 <prvAddNewTaskToReadyList+0xb8>)
 800e690:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e692:	4b29      	ldr	r3, [pc, #164]	; (800e738 <prvAddNewTaskToReadyList+0xbc>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d109      	bne.n	800e6ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e69a:	4a27      	ldr	r2, [pc, #156]	; (800e738 <prvAddNewTaskToReadyList+0xbc>)
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e6a0:	4b24      	ldr	r3, [pc, #144]	; (800e734 <prvAddNewTaskToReadyList+0xb8>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	d110      	bne.n	800e6ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e6a8:	f000 fce8 	bl	800f07c <prvInitialiseTaskLists>
 800e6ac:	e00d      	b.n	800e6ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e6ae:	4b23      	ldr	r3, [pc, #140]	; (800e73c <prvAddNewTaskToReadyList+0xc0>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d109      	bne.n	800e6ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e6b6:	4b20      	ldr	r3, [pc, #128]	; (800e738 <prvAddNewTaskToReadyList+0xbc>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d802      	bhi.n	800e6ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e6c4:	4a1c      	ldr	r2, [pc, #112]	; (800e738 <prvAddNewTaskToReadyList+0xbc>)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e6ca:	4b1d      	ldr	r3, [pc, #116]	; (800e740 <prvAddNewTaskToReadyList+0xc4>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	4a1b      	ldr	r2, [pc, #108]	; (800e740 <prvAddNewTaskToReadyList+0xc4>)
 800e6d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6d8:	2201      	movs	r2, #1
 800e6da:	409a      	lsls	r2, r3
 800e6dc:	4b19      	ldr	r3, [pc, #100]	; (800e744 <prvAddNewTaskToReadyList+0xc8>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	4a18      	ldr	r2, [pc, #96]	; (800e744 <prvAddNewTaskToReadyList+0xc8>)
 800e6e4:	6013      	str	r3, [r2, #0]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	4413      	add	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4a15      	ldr	r2, [pc, #84]	; (800e748 <prvAddNewTaskToReadyList+0xcc>)
 800e6f4:	441a      	add	r2, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	3304      	adds	r3, #4
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	4610      	mov	r0, r2
 800e6fe:	f7ff fa5c 	bl	800dbba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e702:	f000 ffdf 	bl	800f6c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e706:	4b0d      	ldr	r3, [pc, #52]	; (800e73c <prvAddNewTaskToReadyList+0xc0>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d00e      	beq.n	800e72c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e70e:	4b0a      	ldr	r3, [pc, #40]	; (800e738 <prvAddNewTaskToReadyList+0xbc>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e718:	429a      	cmp	r2, r3
 800e71a:	d207      	bcs.n	800e72c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e71c:	4b0b      	ldr	r3, [pc, #44]	; (800e74c <prvAddNewTaskToReadyList+0xd0>)
 800e71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e722:	601a      	str	r2, [r3, #0]
 800e724:	f3bf 8f4f 	dsb	sy
 800e728:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e72c:	bf00      	nop
 800e72e:	3708      	adds	r7, #8
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	20002c40 	.word	0x20002c40
 800e738:	20002b40 	.word	0x20002b40
 800e73c:	20002c4c 	.word	0x20002c4c
 800e740:	20002c5c 	.word	0x20002c5c
 800e744:	20002c48 	.word	0x20002c48
 800e748:	20002b44 	.word	0x20002b44
 800e74c:	e000ed04 	.word	0xe000ed04

0800e750 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e758:	2300      	movs	r3, #0
 800e75a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d017      	beq.n	800e792 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e762:	4b13      	ldr	r3, [pc, #76]	; (800e7b0 <vTaskDelay+0x60>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00a      	beq.n	800e780 <vTaskDelay+0x30>
	__asm volatile
 800e76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76e:	f383 8811 	msr	BASEPRI, r3
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	f3bf 8f4f 	dsb	sy
 800e77a:	60bb      	str	r3, [r7, #8]
}
 800e77c:	bf00      	nop
 800e77e:	e7fe      	b.n	800e77e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e780:	f000 f99c 	bl	800eabc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e784:	2100      	movs	r1, #0
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 fdda 	bl	800f340 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e78c:	f000 f9a4 	bl	800ead8 <xTaskResumeAll>
 800e790:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d107      	bne.n	800e7a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e798:	4b06      	ldr	r3, [pc, #24]	; (800e7b4 <vTaskDelay+0x64>)
 800e79a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e79e:	601a      	str	r2, [r3, #0]
 800e7a0:	f3bf 8f4f 	dsb	sy
 800e7a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7a8:	bf00      	nop
 800e7aa:	3710      	adds	r7, #16
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	20002c68 	.word	0x20002c68
 800e7b4:	e000ed04 	.word	0xe000ed04

0800e7b8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e7c0:	f000 ff50 	bl	800f664 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d102      	bne.n	800e7d0 <vTaskSuspend+0x18>
 800e7ca:	4b3c      	ldr	r3, [pc, #240]	; (800e8bc <vTaskSuspend+0x104>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	e000      	b.n	800e7d2 <vTaskSuspend+0x1a>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	3304      	adds	r3, #4
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff fa4b 	bl	800dc74 <uxListRemove>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d115      	bne.n	800e810 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e8:	4935      	ldr	r1, [pc, #212]	; (800e8c0 <vTaskSuspend+0x108>)
 800e7ea:	4613      	mov	r3, r2
 800e7ec:	009b      	lsls	r3, r3, #2
 800e7ee:	4413      	add	r3, r2
 800e7f0:	009b      	lsls	r3, r3, #2
 800e7f2:	440b      	add	r3, r1
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d10a      	bne.n	800e810 <vTaskSuspend+0x58>
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7fe:	2201      	movs	r2, #1
 800e800:	fa02 f303 	lsl.w	r3, r2, r3
 800e804:	43da      	mvns	r2, r3
 800e806:	4b2f      	ldr	r3, [pc, #188]	; (800e8c4 <vTaskSuspend+0x10c>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	4013      	ands	r3, r2
 800e80c:	4a2d      	ldr	r2, [pc, #180]	; (800e8c4 <vTaskSuspend+0x10c>)
 800e80e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e814:	2b00      	cmp	r3, #0
 800e816:	d004      	beq.n	800e822 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	3318      	adds	r3, #24
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7ff fa29 	bl	800dc74 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	3304      	adds	r3, #4
 800e826:	4619      	mov	r1, r3
 800e828:	4827      	ldr	r0, [pc, #156]	; (800e8c8 <vTaskSuspend+0x110>)
 800e82a:	f7ff f9c6 	bl	800dbba <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e834:	b2db      	uxtb	r3, r3
 800e836:	2b01      	cmp	r3, #1
 800e838:	d103      	bne.n	800e842 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2200      	movs	r2, #0
 800e83e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800e842:	f000 ff3f 	bl	800f6c4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800e846:	4b21      	ldr	r3, [pc, #132]	; (800e8cc <vTaskSuspend+0x114>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d005      	beq.n	800e85a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800e84e:	f000 ff09 	bl	800f664 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800e852:	f000 fcb1 	bl	800f1b8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800e856:	f000 ff35 	bl	800f6c4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800e85a:	4b18      	ldr	r3, [pc, #96]	; (800e8bc <vTaskSuspend+0x104>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	68fa      	ldr	r2, [r7, #12]
 800e860:	429a      	cmp	r2, r3
 800e862:	d127      	bne.n	800e8b4 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800e864:	4b19      	ldr	r3, [pc, #100]	; (800e8cc <vTaskSuspend+0x114>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d017      	beq.n	800e89c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800e86c:	4b18      	ldr	r3, [pc, #96]	; (800e8d0 <vTaskSuspend+0x118>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00a      	beq.n	800e88a <vTaskSuspend+0xd2>
	__asm volatile
 800e874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e878:	f383 8811 	msr	BASEPRI, r3
 800e87c:	f3bf 8f6f 	isb	sy
 800e880:	f3bf 8f4f 	dsb	sy
 800e884:	60bb      	str	r3, [r7, #8]
}
 800e886:	bf00      	nop
 800e888:	e7fe      	b.n	800e888 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800e88a:	4b12      	ldr	r3, [pc, #72]	; (800e8d4 <vTaskSuspend+0x11c>)
 800e88c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e890:	601a      	str	r2, [r3, #0]
 800e892:	f3bf 8f4f 	dsb	sy
 800e896:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e89a:	e00b      	b.n	800e8b4 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800e89c:	4b0a      	ldr	r3, [pc, #40]	; (800e8c8 <vTaskSuspend+0x110>)
 800e89e:	681a      	ldr	r2, [r3, #0]
 800e8a0:	4b0d      	ldr	r3, [pc, #52]	; (800e8d8 <vTaskSuspend+0x120>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d103      	bne.n	800e8b0 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800e8a8:	4b04      	ldr	r3, [pc, #16]	; (800e8bc <vTaskSuspend+0x104>)
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	601a      	str	r2, [r3, #0]
	}
 800e8ae:	e001      	b.n	800e8b4 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800e8b0:	f000 fa66 	bl	800ed80 <vTaskSwitchContext>
	}
 800e8b4:	bf00      	nop
 800e8b6:	3710      	adds	r7, #16
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	20002b40 	.word	0x20002b40
 800e8c0:	20002b44 	.word	0x20002b44
 800e8c4:	20002c48 	.word	0x20002c48
 800e8c8:	20002c2c 	.word	0x20002c2c
 800e8cc:	20002c4c 	.word	0x20002c4c
 800e8d0:	20002c68 	.word	0x20002c68
 800e8d4:	e000ed04 	.word	0xe000ed04
 800e8d8:	20002c40 	.word	0x20002c40

0800e8dc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800e8dc:	b480      	push	{r7}
 800e8de:	b087      	sub	sp, #28
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d10a      	bne.n	800e908 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800e8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f6:	f383 8811 	msr	BASEPRI, r3
 800e8fa:	f3bf 8f6f 	isb	sy
 800e8fe:	f3bf 8f4f 	dsb	sy
 800e902:	60fb      	str	r3, [r7, #12]
}
 800e904:	bf00      	nop
 800e906:	e7fe      	b.n	800e906 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	695b      	ldr	r3, [r3, #20]
 800e90c:	4a0a      	ldr	r2, [pc, #40]	; (800e938 <prvTaskIsTaskSuspended+0x5c>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d10a      	bne.n	800e928 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e916:	4a09      	ldr	r2, [pc, #36]	; (800e93c <prvTaskIsTaskSuspended+0x60>)
 800e918:	4293      	cmp	r3, r2
 800e91a:	d005      	beq.n	800e928 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e920:	2b00      	cmp	r3, #0
 800e922:	d101      	bne.n	800e928 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800e924:	2301      	movs	r3, #1
 800e926:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e928:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800e92a:	4618      	mov	r0, r3
 800e92c:	371c      	adds	r7, #28
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr
 800e936:	bf00      	nop
 800e938:	20002c2c 	.word	0x20002c2c
 800e93c:	20002c00 	.word	0x20002c00

0800e940 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d10a      	bne.n	800e968 <vTaskResume+0x28>
	__asm volatile
 800e952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e956:	f383 8811 	msr	BASEPRI, r3
 800e95a:	f3bf 8f6f 	isb	sy
 800e95e:	f3bf 8f4f 	dsb	sy
 800e962:	60bb      	str	r3, [r7, #8]
}
 800e964:	bf00      	nop
 800e966:	e7fe      	b.n	800e966 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800e968:	4b20      	ldr	r3, [pc, #128]	; (800e9ec <vTaskResume+0xac>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d037      	beq.n	800e9e2 <vTaskResume+0xa2>
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d034      	beq.n	800e9e2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800e978:	f000 fe74 	bl	800f664 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800e97c:	68f8      	ldr	r0, [r7, #12]
 800e97e:	f7ff ffad 	bl	800e8dc <prvTaskIsTaskSuspended>
 800e982:	4603      	mov	r3, r0
 800e984:	2b00      	cmp	r3, #0
 800e986:	d02a      	beq.n	800e9de <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	3304      	adds	r3, #4
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7ff f971 	bl	800dc74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e996:	2201      	movs	r2, #1
 800e998:	409a      	lsls	r2, r3
 800e99a:	4b15      	ldr	r3, [pc, #84]	; (800e9f0 <vTaskResume+0xb0>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	4a13      	ldr	r2, [pc, #76]	; (800e9f0 <vTaskResume+0xb0>)
 800e9a2:	6013      	str	r3, [r2, #0]
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9a8:	4613      	mov	r3, r2
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	4413      	add	r3, r2
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	4a10      	ldr	r2, [pc, #64]	; (800e9f4 <vTaskResume+0xb4>)
 800e9b2:	441a      	add	r2, r3
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	3304      	adds	r3, #4
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	4610      	mov	r0, r2
 800e9bc:	f7ff f8fd 	bl	800dbba <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9c4:	4b09      	ldr	r3, [pc, #36]	; (800e9ec <vTaskResume+0xac>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d307      	bcc.n	800e9de <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800e9ce:	4b0a      	ldr	r3, [pc, #40]	; (800e9f8 <vTaskResume+0xb8>)
 800e9d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9d4:	601a      	str	r2, [r3, #0]
 800e9d6:	f3bf 8f4f 	dsb	sy
 800e9da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800e9de:	f000 fe71 	bl	800f6c4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e9e2:	bf00      	nop
 800e9e4:	3710      	adds	r7, #16
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	20002b40 	.word	0x20002b40
 800e9f0:	20002c48 	.word	0x20002c48
 800e9f4:	20002b44 	.word	0x20002b44
 800e9f8:	e000ed04 	.word	0xe000ed04

0800e9fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b08a      	sub	sp, #40	; 0x28
 800ea00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ea02:	2300      	movs	r3, #0
 800ea04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ea06:	2300      	movs	r3, #0
 800ea08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ea0a:	463a      	mov	r2, r7
 800ea0c:	1d39      	adds	r1, r7, #4
 800ea0e:	f107 0308 	add.w	r3, r7, #8
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7f2 faba 	bl	8000f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ea18:	6839      	ldr	r1, [r7, #0]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	68ba      	ldr	r2, [r7, #8]
 800ea1e:	9202      	str	r2, [sp, #8]
 800ea20:	9301      	str	r3, [sp, #4]
 800ea22:	2300      	movs	r3, #0
 800ea24:	9300      	str	r3, [sp, #0]
 800ea26:	2300      	movs	r3, #0
 800ea28:	460a      	mov	r2, r1
 800ea2a:	491e      	ldr	r1, [pc, #120]	; (800eaa4 <vTaskStartScheduler+0xa8>)
 800ea2c:	481e      	ldr	r0, [pc, #120]	; (800eaa8 <vTaskStartScheduler+0xac>)
 800ea2e:	f7ff fcfb 	bl	800e428 <xTaskCreateStatic>
 800ea32:	4603      	mov	r3, r0
 800ea34:	4a1d      	ldr	r2, [pc, #116]	; (800eaac <vTaskStartScheduler+0xb0>)
 800ea36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ea38:	4b1c      	ldr	r3, [pc, #112]	; (800eaac <vTaskStartScheduler+0xb0>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d002      	beq.n	800ea46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ea40:	2301      	movs	r3, #1
 800ea42:	617b      	str	r3, [r7, #20]
 800ea44:	e001      	b.n	800ea4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ea46:	2300      	movs	r3, #0
 800ea48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	d116      	bne.n	800ea7e <vTaskStartScheduler+0x82>
	__asm volatile
 800ea50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea54:	f383 8811 	msr	BASEPRI, r3
 800ea58:	f3bf 8f6f 	isb	sy
 800ea5c:	f3bf 8f4f 	dsb	sy
 800ea60:	613b      	str	r3, [r7, #16]
}
 800ea62:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ea64:	4b12      	ldr	r3, [pc, #72]	; (800eab0 <vTaskStartScheduler+0xb4>)
 800ea66:	f04f 32ff 	mov.w	r2, #4294967295
 800ea6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ea6c:	4b11      	ldr	r3, [pc, #68]	; (800eab4 <vTaskStartScheduler+0xb8>)
 800ea6e:	2201      	movs	r2, #1
 800ea70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ea72:	4b11      	ldr	r3, [pc, #68]	; (800eab8 <vTaskStartScheduler+0xbc>)
 800ea74:	2200      	movs	r2, #0
 800ea76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ea78:	f000 fd52 	bl	800f520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ea7c:	e00e      	b.n	800ea9c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea84:	d10a      	bne.n	800ea9c <vTaskStartScheduler+0xa0>
	__asm volatile
 800ea86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea8a:	f383 8811 	msr	BASEPRI, r3
 800ea8e:	f3bf 8f6f 	isb	sy
 800ea92:	f3bf 8f4f 	dsb	sy
 800ea96:	60fb      	str	r3, [r7, #12]
}
 800ea98:	bf00      	nop
 800ea9a:	e7fe      	b.n	800ea9a <vTaskStartScheduler+0x9e>
}
 800ea9c:	bf00      	nop
 800ea9e:	3718      	adds	r7, #24
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	0801507c 	.word	0x0801507c
 800eaa8:	0800f04d 	.word	0x0800f04d
 800eaac:	20002c64 	.word	0x20002c64
 800eab0:	20002c60 	.word	0x20002c60
 800eab4:	20002c4c 	.word	0x20002c4c
 800eab8:	20002c44 	.word	0x20002c44

0800eabc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eabc:	b480      	push	{r7}
 800eabe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800eac0:	4b04      	ldr	r3, [pc, #16]	; (800ead4 <vTaskSuspendAll+0x18>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	3301      	adds	r3, #1
 800eac6:	4a03      	ldr	r2, [pc, #12]	; (800ead4 <vTaskSuspendAll+0x18>)
 800eac8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800eaca:	bf00      	nop
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr
 800ead4:	20002c68 	.word	0x20002c68

0800ead8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800eade:	2300      	movs	r3, #0
 800eae0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800eae2:	2300      	movs	r3, #0
 800eae4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800eae6:	4b41      	ldr	r3, [pc, #260]	; (800ebec <xTaskResumeAll+0x114>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d10a      	bne.n	800eb04 <xTaskResumeAll+0x2c>
	__asm volatile
 800eaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf2:	f383 8811 	msr	BASEPRI, r3
 800eaf6:	f3bf 8f6f 	isb	sy
 800eafa:	f3bf 8f4f 	dsb	sy
 800eafe:	603b      	str	r3, [r7, #0]
}
 800eb00:	bf00      	nop
 800eb02:	e7fe      	b.n	800eb02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800eb04:	f000 fdae 	bl	800f664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800eb08:	4b38      	ldr	r3, [pc, #224]	; (800ebec <xTaskResumeAll+0x114>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	3b01      	subs	r3, #1
 800eb0e:	4a37      	ldr	r2, [pc, #220]	; (800ebec <xTaskResumeAll+0x114>)
 800eb10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb12:	4b36      	ldr	r3, [pc, #216]	; (800ebec <xTaskResumeAll+0x114>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d161      	bne.n	800ebde <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eb1a:	4b35      	ldr	r3, [pc, #212]	; (800ebf0 <xTaskResumeAll+0x118>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d05d      	beq.n	800ebde <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb22:	e02e      	b.n	800eb82 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb24:	4b33      	ldr	r3, [pc, #204]	; (800ebf4 <xTaskResumeAll+0x11c>)
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	3318      	adds	r3, #24
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7ff f89f 	bl	800dc74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	3304      	adds	r3, #4
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7ff f89a 	bl	800dc74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb44:	2201      	movs	r2, #1
 800eb46:	409a      	lsls	r2, r3
 800eb48:	4b2b      	ldr	r3, [pc, #172]	; (800ebf8 <xTaskResumeAll+0x120>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	4a2a      	ldr	r2, [pc, #168]	; (800ebf8 <xTaskResumeAll+0x120>)
 800eb50:	6013      	str	r3, [r2, #0]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb56:	4613      	mov	r3, r2
 800eb58:	009b      	lsls	r3, r3, #2
 800eb5a:	4413      	add	r3, r2
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	4a27      	ldr	r2, [pc, #156]	; (800ebfc <xTaskResumeAll+0x124>)
 800eb60:	441a      	add	r2, r3
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	3304      	adds	r3, #4
 800eb66:	4619      	mov	r1, r3
 800eb68:	4610      	mov	r0, r2
 800eb6a:	f7ff f826 	bl	800dbba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb72:	4b23      	ldr	r3, [pc, #140]	; (800ec00 <xTaskResumeAll+0x128>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d302      	bcc.n	800eb82 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800eb7c:	4b21      	ldr	r3, [pc, #132]	; (800ec04 <xTaskResumeAll+0x12c>)
 800eb7e:	2201      	movs	r2, #1
 800eb80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb82:	4b1c      	ldr	r3, [pc, #112]	; (800ebf4 <xTaskResumeAll+0x11c>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d1cc      	bne.n	800eb24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d001      	beq.n	800eb94 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eb90:	f000 fb12 	bl	800f1b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eb94:	4b1c      	ldr	r3, [pc, #112]	; (800ec08 <xTaskResumeAll+0x130>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d010      	beq.n	800ebc2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eba0:	f000 f836 	bl	800ec10 <xTaskIncrementTick>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d002      	beq.n	800ebb0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ebaa:	4b16      	ldr	r3, [pc, #88]	; (800ec04 <xTaskResumeAll+0x12c>)
 800ebac:	2201      	movs	r2, #1
 800ebae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	3b01      	subs	r3, #1
 800ebb4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d1f1      	bne.n	800eba0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ebbc:	4b12      	ldr	r3, [pc, #72]	; (800ec08 <xTaskResumeAll+0x130>)
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ebc2:	4b10      	ldr	r3, [pc, #64]	; (800ec04 <xTaskResumeAll+0x12c>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d009      	beq.n	800ebde <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ebce:	4b0f      	ldr	r3, [pc, #60]	; (800ec0c <xTaskResumeAll+0x134>)
 800ebd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebd4:	601a      	str	r2, [r3, #0]
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ebde:	f000 fd71 	bl	800f6c4 <vPortExitCritical>

	return xAlreadyYielded;
 800ebe2:	68bb      	ldr	r3, [r7, #8]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3710      	adds	r7, #16
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}
 800ebec:	20002c68 	.word	0x20002c68
 800ebf0:	20002c40 	.word	0x20002c40
 800ebf4:	20002c00 	.word	0x20002c00
 800ebf8:	20002c48 	.word	0x20002c48
 800ebfc:	20002b44 	.word	0x20002b44
 800ec00:	20002b40 	.word	0x20002b40
 800ec04:	20002c54 	.word	0x20002c54
 800ec08:	20002c50 	.word	0x20002c50
 800ec0c:	e000ed04 	.word	0xe000ed04

0800ec10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b086      	sub	sp, #24
 800ec14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ec16:	2300      	movs	r3, #0
 800ec18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec1a:	4b4e      	ldr	r3, [pc, #312]	; (800ed54 <xTaskIncrementTick+0x144>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f040 808e 	bne.w	800ed40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ec24:	4b4c      	ldr	r3, [pc, #304]	; (800ed58 <xTaskIncrementTick+0x148>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	3301      	adds	r3, #1
 800ec2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ec2c:	4a4a      	ldr	r2, [pc, #296]	; (800ed58 <xTaskIncrementTick+0x148>)
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d120      	bne.n	800ec7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ec38:	4b48      	ldr	r3, [pc, #288]	; (800ed5c <xTaskIncrementTick+0x14c>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00a      	beq.n	800ec58 <xTaskIncrementTick+0x48>
	__asm volatile
 800ec42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec46:	f383 8811 	msr	BASEPRI, r3
 800ec4a:	f3bf 8f6f 	isb	sy
 800ec4e:	f3bf 8f4f 	dsb	sy
 800ec52:	603b      	str	r3, [r7, #0]
}
 800ec54:	bf00      	nop
 800ec56:	e7fe      	b.n	800ec56 <xTaskIncrementTick+0x46>
 800ec58:	4b40      	ldr	r3, [pc, #256]	; (800ed5c <xTaskIncrementTick+0x14c>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	60fb      	str	r3, [r7, #12]
 800ec5e:	4b40      	ldr	r3, [pc, #256]	; (800ed60 <xTaskIncrementTick+0x150>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4a3e      	ldr	r2, [pc, #248]	; (800ed5c <xTaskIncrementTick+0x14c>)
 800ec64:	6013      	str	r3, [r2, #0]
 800ec66:	4a3e      	ldr	r2, [pc, #248]	; (800ed60 <xTaskIncrementTick+0x150>)
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	6013      	str	r3, [r2, #0]
 800ec6c:	4b3d      	ldr	r3, [pc, #244]	; (800ed64 <xTaskIncrementTick+0x154>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	3301      	adds	r3, #1
 800ec72:	4a3c      	ldr	r2, [pc, #240]	; (800ed64 <xTaskIncrementTick+0x154>)
 800ec74:	6013      	str	r3, [r2, #0]
 800ec76:	f000 fa9f 	bl	800f1b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ec7a:	4b3b      	ldr	r3, [pc, #236]	; (800ed68 <xTaskIncrementTick+0x158>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	693a      	ldr	r2, [r7, #16]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d348      	bcc.n	800ed16 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec84:	4b35      	ldr	r3, [pc, #212]	; (800ed5c <xTaskIncrementTick+0x14c>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d104      	bne.n	800ec98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec8e:	4b36      	ldr	r3, [pc, #216]	; (800ed68 <xTaskIncrementTick+0x158>)
 800ec90:	f04f 32ff 	mov.w	r2, #4294967295
 800ec94:	601a      	str	r2, [r3, #0]
					break;
 800ec96:	e03e      	b.n	800ed16 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec98:	4b30      	ldr	r3, [pc, #192]	; (800ed5c <xTaskIncrementTick+0x14c>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	68db      	ldr	r3, [r3, #12]
 800eca0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800eca8:	693a      	ldr	r2, [r7, #16]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d203      	bcs.n	800ecb8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ecb0:	4a2d      	ldr	r2, [pc, #180]	; (800ed68 <xTaskIncrementTick+0x158>)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ecb6:	e02e      	b.n	800ed16 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	3304      	adds	r3, #4
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7fe ffd9 	bl	800dc74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d004      	beq.n	800ecd4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	3318      	adds	r3, #24
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fe ffd0 	bl	800dc74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd8:	2201      	movs	r2, #1
 800ecda:	409a      	lsls	r2, r3
 800ecdc:	4b23      	ldr	r3, [pc, #140]	; (800ed6c <xTaskIncrementTick+0x15c>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4313      	orrs	r3, r2
 800ece2:	4a22      	ldr	r2, [pc, #136]	; (800ed6c <xTaskIncrementTick+0x15c>)
 800ece4:	6013      	str	r3, [r2, #0]
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecea:	4613      	mov	r3, r2
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	4413      	add	r3, r2
 800ecf0:	009b      	lsls	r3, r3, #2
 800ecf2:	4a1f      	ldr	r2, [pc, #124]	; (800ed70 <xTaskIncrementTick+0x160>)
 800ecf4:	441a      	add	r2, r3
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	3304      	adds	r3, #4
 800ecfa:	4619      	mov	r1, r3
 800ecfc:	4610      	mov	r0, r2
 800ecfe:	f7fe ff5c 	bl	800dbba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed06:	4b1b      	ldr	r3, [pc, #108]	; (800ed74 <xTaskIncrementTick+0x164>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d3b9      	bcc.n	800ec84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ed10:	2301      	movs	r3, #1
 800ed12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed14:	e7b6      	b.n	800ec84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ed16:	4b17      	ldr	r3, [pc, #92]	; (800ed74 <xTaskIncrementTick+0x164>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed1c:	4914      	ldr	r1, [pc, #80]	; (800ed70 <xTaskIncrementTick+0x160>)
 800ed1e:	4613      	mov	r3, r2
 800ed20:	009b      	lsls	r3, r3, #2
 800ed22:	4413      	add	r3, r2
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	440b      	add	r3, r1
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d901      	bls.n	800ed32 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ed32:	4b11      	ldr	r3, [pc, #68]	; (800ed78 <xTaskIncrementTick+0x168>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d007      	beq.n	800ed4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	617b      	str	r3, [r7, #20]
 800ed3e:	e004      	b.n	800ed4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ed40:	4b0e      	ldr	r3, [pc, #56]	; (800ed7c <xTaskIncrementTick+0x16c>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	3301      	adds	r3, #1
 800ed46:	4a0d      	ldr	r2, [pc, #52]	; (800ed7c <xTaskIncrementTick+0x16c>)
 800ed48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ed4a:	697b      	ldr	r3, [r7, #20]
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3718      	adds	r7, #24
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	20002c68 	.word	0x20002c68
 800ed58:	20002c44 	.word	0x20002c44
 800ed5c:	20002bf8 	.word	0x20002bf8
 800ed60:	20002bfc 	.word	0x20002bfc
 800ed64:	20002c58 	.word	0x20002c58
 800ed68:	20002c60 	.word	0x20002c60
 800ed6c:	20002c48 	.word	0x20002c48
 800ed70:	20002b44 	.word	0x20002b44
 800ed74:	20002b40 	.word	0x20002b40
 800ed78:	20002c54 	.word	0x20002c54
 800ed7c:	20002c50 	.word	0x20002c50

0800ed80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ed80:	b480      	push	{r7}
 800ed82:	b087      	sub	sp, #28
 800ed84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ed86:	4b27      	ldr	r3, [pc, #156]	; (800ee24 <vTaskSwitchContext+0xa4>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d003      	beq.n	800ed96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ed8e:	4b26      	ldr	r3, [pc, #152]	; (800ee28 <vTaskSwitchContext+0xa8>)
 800ed90:	2201      	movs	r2, #1
 800ed92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ed94:	e03f      	b.n	800ee16 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800ed96:	4b24      	ldr	r3, [pc, #144]	; (800ee28 <vTaskSwitchContext+0xa8>)
 800ed98:	2200      	movs	r2, #0
 800ed9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed9c:	4b23      	ldr	r3, [pc, #140]	; (800ee2c <vTaskSwitchContext+0xac>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	fab3 f383 	clz	r3, r3
 800eda8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800edaa:	7afb      	ldrb	r3, [r7, #11]
 800edac:	f1c3 031f 	rsb	r3, r3, #31
 800edb0:	617b      	str	r3, [r7, #20]
 800edb2:	491f      	ldr	r1, [pc, #124]	; (800ee30 <vTaskSwitchContext+0xb0>)
 800edb4:	697a      	ldr	r2, [r7, #20]
 800edb6:	4613      	mov	r3, r2
 800edb8:	009b      	lsls	r3, r3, #2
 800edba:	4413      	add	r3, r2
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	440b      	add	r3, r1
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d10a      	bne.n	800eddc <vTaskSwitchContext+0x5c>
	__asm volatile
 800edc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edca:	f383 8811 	msr	BASEPRI, r3
 800edce:	f3bf 8f6f 	isb	sy
 800edd2:	f3bf 8f4f 	dsb	sy
 800edd6:	607b      	str	r3, [r7, #4]
}
 800edd8:	bf00      	nop
 800edda:	e7fe      	b.n	800edda <vTaskSwitchContext+0x5a>
 800eddc:	697a      	ldr	r2, [r7, #20]
 800edde:	4613      	mov	r3, r2
 800ede0:	009b      	lsls	r3, r3, #2
 800ede2:	4413      	add	r3, r2
 800ede4:	009b      	lsls	r3, r3, #2
 800ede6:	4a12      	ldr	r2, [pc, #72]	; (800ee30 <vTaskSwitchContext+0xb0>)
 800ede8:	4413      	add	r3, r2
 800edea:	613b      	str	r3, [r7, #16]
 800edec:	693b      	ldr	r3, [r7, #16]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	685a      	ldr	r2, [r3, #4]
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	605a      	str	r2, [r3, #4]
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	685a      	ldr	r2, [r3, #4]
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	3308      	adds	r3, #8
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d104      	bne.n	800ee0c <vTaskSwitchContext+0x8c>
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	685a      	ldr	r2, [r3, #4]
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	605a      	str	r2, [r3, #4]
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	4a08      	ldr	r2, [pc, #32]	; (800ee34 <vTaskSwitchContext+0xb4>)
 800ee14:	6013      	str	r3, [r2, #0]
}
 800ee16:	bf00      	nop
 800ee18:	371c      	adds	r7, #28
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop
 800ee24:	20002c68 	.word	0x20002c68
 800ee28:	20002c54 	.word	0x20002c54
 800ee2c:	20002c48 	.word	0x20002c48
 800ee30:	20002b44 	.word	0x20002b44
 800ee34:	20002b40 	.word	0x20002b40

0800ee38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d10a      	bne.n	800ee5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ee48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4c:	f383 8811 	msr	BASEPRI, r3
 800ee50:	f3bf 8f6f 	isb	sy
 800ee54:	f3bf 8f4f 	dsb	sy
 800ee58:	60fb      	str	r3, [r7, #12]
}
 800ee5a:	bf00      	nop
 800ee5c:	e7fe      	b.n	800ee5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee5e:	4b07      	ldr	r3, [pc, #28]	; (800ee7c <vTaskPlaceOnEventList+0x44>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	3318      	adds	r3, #24
 800ee64:	4619      	mov	r1, r3
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f7fe fecb 	bl	800dc02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee6c:	2101      	movs	r1, #1
 800ee6e:	6838      	ldr	r0, [r7, #0]
 800ee70:	f000 fa66 	bl	800f340 <prvAddCurrentTaskToDelayedList>
}
 800ee74:	bf00      	nop
 800ee76:	3710      	adds	r7, #16
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	20002b40 	.word	0x20002b40

0800ee80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	68db      	ldr	r3, [r3, #12]
 800ee8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d10a      	bne.n	800eeac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ee96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee9a:	f383 8811 	msr	BASEPRI, r3
 800ee9e:	f3bf 8f6f 	isb	sy
 800eea2:	f3bf 8f4f 	dsb	sy
 800eea6:	60fb      	str	r3, [r7, #12]
}
 800eea8:	bf00      	nop
 800eeaa:	e7fe      	b.n	800eeaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	3318      	adds	r3, #24
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7fe fedf 	bl	800dc74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eeb6:	4b1d      	ldr	r3, [pc, #116]	; (800ef2c <xTaskRemoveFromEventList+0xac>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d11c      	bne.n	800eef8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	3304      	adds	r3, #4
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7fe fed6 	bl	800dc74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eecc:	2201      	movs	r2, #1
 800eece:	409a      	lsls	r2, r3
 800eed0:	4b17      	ldr	r3, [pc, #92]	; (800ef30 <xTaskRemoveFromEventList+0xb0>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4313      	orrs	r3, r2
 800eed6:	4a16      	ldr	r2, [pc, #88]	; (800ef30 <xTaskRemoveFromEventList+0xb0>)
 800eed8:	6013      	str	r3, [r2, #0]
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eede:	4613      	mov	r3, r2
 800eee0:	009b      	lsls	r3, r3, #2
 800eee2:	4413      	add	r3, r2
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	4a13      	ldr	r2, [pc, #76]	; (800ef34 <xTaskRemoveFromEventList+0xb4>)
 800eee8:	441a      	add	r2, r3
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	3304      	adds	r3, #4
 800eeee:	4619      	mov	r1, r3
 800eef0:	4610      	mov	r0, r2
 800eef2:	f7fe fe62 	bl	800dbba <vListInsertEnd>
 800eef6:	e005      	b.n	800ef04 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	3318      	adds	r3, #24
 800eefc:	4619      	mov	r1, r3
 800eefe:	480e      	ldr	r0, [pc, #56]	; (800ef38 <xTaskRemoveFromEventList+0xb8>)
 800ef00:	f7fe fe5b 	bl	800dbba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef08:	4b0c      	ldr	r3, [pc, #48]	; (800ef3c <xTaskRemoveFromEventList+0xbc>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d905      	bls.n	800ef1e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ef12:	2301      	movs	r3, #1
 800ef14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ef16:	4b0a      	ldr	r3, [pc, #40]	; (800ef40 <xTaskRemoveFromEventList+0xc0>)
 800ef18:	2201      	movs	r2, #1
 800ef1a:	601a      	str	r2, [r3, #0]
 800ef1c:	e001      	b.n	800ef22 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ef22:	697b      	ldr	r3, [r7, #20]
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3718      	adds	r7, #24
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}
 800ef2c:	20002c68 	.word	0x20002c68
 800ef30:	20002c48 	.word	0x20002c48
 800ef34:	20002b44 	.word	0x20002b44
 800ef38:	20002c00 	.word	0x20002c00
 800ef3c:	20002b40 	.word	0x20002b40
 800ef40:	20002c54 	.word	0x20002c54

0800ef44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ef44:	b480      	push	{r7}
 800ef46:	b083      	sub	sp, #12
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ef4c:	4b06      	ldr	r3, [pc, #24]	; (800ef68 <vTaskInternalSetTimeOutState+0x24>)
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ef54:	4b05      	ldr	r3, [pc, #20]	; (800ef6c <vTaskInternalSetTimeOutState+0x28>)
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	605a      	str	r2, [r3, #4]
}
 800ef5c:	bf00      	nop
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	20002c58 	.word	0x20002c58
 800ef6c:	20002c44 	.word	0x20002c44

0800ef70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b088      	sub	sp, #32
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d10a      	bne.n	800ef96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ef80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef84:	f383 8811 	msr	BASEPRI, r3
 800ef88:	f3bf 8f6f 	isb	sy
 800ef8c:	f3bf 8f4f 	dsb	sy
 800ef90:	613b      	str	r3, [r7, #16]
}
 800ef92:	bf00      	nop
 800ef94:	e7fe      	b.n	800ef94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d10a      	bne.n	800efb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ef9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa0:	f383 8811 	msr	BASEPRI, r3
 800efa4:	f3bf 8f6f 	isb	sy
 800efa8:	f3bf 8f4f 	dsb	sy
 800efac:	60fb      	str	r3, [r7, #12]
}
 800efae:	bf00      	nop
 800efb0:	e7fe      	b.n	800efb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800efb2:	f000 fb57 	bl	800f664 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800efb6:	4b1d      	ldr	r3, [pc, #116]	; (800f02c <xTaskCheckForTimeOut+0xbc>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	69ba      	ldr	r2, [r7, #24]
 800efc2:	1ad3      	subs	r3, r2, r3
 800efc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efce:	d102      	bne.n	800efd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800efd0:	2300      	movs	r3, #0
 800efd2:	61fb      	str	r3, [r7, #28]
 800efd4:	e023      	b.n	800f01e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681a      	ldr	r2, [r3, #0]
 800efda:	4b15      	ldr	r3, [pc, #84]	; (800f030 <xTaskCheckForTimeOut+0xc0>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d007      	beq.n	800eff2 <xTaskCheckForTimeOut+0x82>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	69ba      	ldr	r2, [r7, #24]
 800efe8:	429a      	cmp	r2, r3
 800efea:	d302      	bcc.n	800eff2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800efec:	2301      	movs	r3, #1
 800efee:	61fb      	str	r3, [r7, #28]
 800eff0:	e015      	b.n	800f01e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	697a      	ldr	r2, [r7, #20]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d20b      	bcs.n	800f014 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	1ad2      	subs	r2, r2, r3
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f7ff ff9b 	bl	800ef44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f00e:	2300      	movs	r3, #0
 800f010:	61fb      	str	r3, [r7, #28]
 800f012:	e004      	b.n	800f01e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	2200      	movs	r2, #0
 800f018:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f01a:	2301      	movs	r3, #1
 800f01c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f01e:	f000 fb51 	bl	800f6c4 <vPortExitCritical>

	return xReturn;
 800f022:	69fb      	ldr	r3, [r7, #28]
}
 800f024:	4618      	mov	r0, r3
 800f026:	3720      	adds	r7, #32
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	20002c44 	.word	0x20002c44
 800f030:	20002c58 	.word	0x20002c58

0800f034 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f034:	b480      	push	{r7}
 800f036:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f038:	4b03      	ldr	r3, [pc, #12]	; (800f048 <vTaskMissedYield+0x14>)
 800f03a:	2201      	movs	r2, #1
 800f03c:	601a      	str	r2, [r3, #0]
}
 800f03e:	bf00      	nop
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr
 800f048:	20002c54 	.word	0x20002c54

0800f04c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f054:	f000 f852 	bl	800f0fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f058:	4b06      	ldr	r3, [pc, #24]	; (800f074 <prvIdleTask+0x28>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d9f9      	bls.n	800f054 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f060:	4b05      	ldr	r3, [pc, #20]	; (800f078 <prvIdleTask+0x2c>)
 800f062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f066:	601a      	str	r2, [r3, #0]
 800f068:	f3bf 8f4f 	dsb	sy
 800f06c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f070:	e7f0      	b.n	800f054 <prvIdleTask+0x8>
 800f072:	bf00      	nop
 800f074:	20002b44 	.word	0x20002b44
 800f078:	e000ed04 	.word	0xe000ed04

0800f07c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f082:	2300      	movs	r3, #0
 800f084:	607b      	str	r3, [r7, #4]
 800f086:	e00c      	b.n	800f0a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	4613      	mov	r3, r2
 800f08c:	009b      	lsls	r3, r3, #2
 800f08e:	4413      	add	r3, r2
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	4a12      	ldr	r2, [pc, #72]	; (800f0dc <prvInitialiseTaskLists+0x60>)
 800f094:	4413      	add	r3, r2
 800f096:	4618      	mov	r0, r3
 800f098:	f7fe fd62 	bl	800db60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	607b      	str	r3, [r7, #4]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2b06      	cmp	r3, #6
 800f0a6:	d9ef      	bls.n	800f088 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f0a8:	480d      	ldr	r0, [pc, #52]	; (800f0e0 <prvInitialiseTaskLists+0x64>)
 800f0aa:	f7fe fd59 	bl	800db60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f0ae:	480d      	ldr	r0, [pc, #52]	; (800f0e4 <prvInitialiseTaskLists+0x68>)
 800f0b0:	f7fe fd56 	bl	800db60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f0b4:	480c      	ldr	r0, [pc, #48]	; (800f0e8 <prvInitialiseTaskLists+0x6c>)
 800f0b6:	f7fe fd53 	bl	800db60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f0ba:	480c      	ldr	r0, [pc, #48]	; (800f0ec <prvInitialiseTaskLists+0x70>)
 800f0bc:	f7fe fd50 	bl	800db60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f0c0:	480b      	ldr	r0, [pc, #44]	; (800f0f0 <prvInitialiseTaskLists+0x74>)
 800f0c2:	f7fe fd4d 	bl	800db60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f0c6:	4b0b      	ldr	r3, [pc, #44]	; (800f0f4 <prvInitialiseTaskLists+0x78>)
 800f0c8:	4a05      	ldr	r2, [pc, #20]	; (800f0e0 <prvInitialiseTaskLists+0x64>)
 800f0ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f0cc:	4b0a      	ldr	r3, [pc, #40]	; (800f0f8 <prvInitialiseTaskLists+0x7c>)
 800f0ce:	4a05      	ldr	r2, [pc, #20]	; (800f0e4 <prvInitialiseTaskLists+0x68>)
 800f0d0:	601a      	str	r2, [r3, #0]
}
 800f0d2:	bf00      	nop
 800f0d4:	3708      	adds	r7, #8
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	20002b44 	.word	0x20002b44
 800f0e0:	20002bd0 	.word	0x20002bd0
 800f0e4:	20002be4 	.word	0x20002be4
 800f0e8:	20002c00 	.word	0x20002c00
 800f0ec:	20002c14 	.word	0x20002c14
 800f0f0:	20002c2c 	.word	0x20002c2c
 800f0f4:	20002bf8 	.word	0x20002bf8
 800f0f8:	20002bfc 	.word	0x20002bfc

0800f0fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f102:	e019      	b.n	800f138 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f104:	f000 faae 	bl	800f664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f108:	4b10      	ldr	r3, [pc, #64]	; (800f14c <prvCheckTasksWaitingTermination+0x50>)
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	68db      	ldr	r3, [r3, #12]
 800f10e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	3304      	adds	r3, #4
 800f114:	4618      	mov	r0, r3
 800f116:	f7fe fdad 	bl	800dc74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f11a:	4b0d      	ldr	r3, [pc, #52]	; (800f150 <prvCheckTasksWaitingTermination+0x54>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	3b01      	subs	r3, #1
 800f120:	4a0b      	ldr	r2, [pc, #44]	; (800f150 <prvCheckTasksWaitingTermination+0x54>)
 800f122:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f124:	4b0b      	ldr	r3, [pc, #44]	; (800f154 <prvCheckTasksWaitingTermination+0x58>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	3b01      	subs	r3, #1
 800f12a:	4a0a      	ldr	r2, [pc, #40]	; (800f154 <prvCheckTasksWaitingTermination+0x58>)
 800f12c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f12e:	f000 fac9 	bl	800f6c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f000 f810 	bl	800f158 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f138:	4b06      	ldr	r3, [pc, #24]	; (800f154 <prvCheckTasksWaitingTermination+0x58>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d1e1      	bne.n	800f104 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f140:	bf00      	nop
 800f142:	bf00      	nop
 800f144:	3708      	adds	r7, #8
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	20002c14 	.word	0x20002c14
 800f150:	20002c40 	.word	0x20002c40
 800f154:	20002c28 	.word	0x20002c28

0800f158 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b084      	sub	sp, #16
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f166:	2b00      	cmp	r3, #0
 800f168:	d108      	bne.n	800f17c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f16e:	4618      	mov	r0, r3
 800f170:	f000 fc26 	bl	800f9c0 <vPortFree>
				vPortFree( pxTCB );
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 fc23 	bl	800f9c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f17a:	e018      	b.n	800f1ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f182:	2b01      	cmp	r3, #1
 800f184:	d103      	bne.n	800f18e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 fc1a 	bl	800f9c0 <vPortFree>
	}
 800f18c:	e00f      	b.n	800f1ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f194:	2b02      	cmp	r3, #2
 800f196:	d00a      	beq.n	800f1ae <prvDeleteTCB+0x56>
	__asm volatile
 800f198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f19c:	f383 8811 	msr	BASEPRI, r3
 800f1a0:	f3bf 8f6f 	isb	sy
 800f1a4:	f3bf 8f4f 	dsb	sy
 800f1a8:	60fb      	str	r3, [r7, #12]
}
 800f1aa:	bf00      	nop
 800f1ac:	e7fe      	b.n	800f1ac <prvDeleteTCB+0x54>
	}
 800f1ae:	bf00      	nop
 800f1b0:	3710      	adds	r7, #16
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}
	...

0800f1b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b083      	sub	sp, #12
 800f1bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1be:	4b0c      	ldr	r3, [pc, #48]	; (800f1f0 <prvResetNextTaskUnblockTime+0x38>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d104      	bne.n	800f1d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f1c8:	4b0a      	ldr	r3, [pc, #40]	; (800f1f4 <prvResetNextTaskUnblockTime+0x3c>)
 800f1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f1d0:	e008      	b.n	800f1e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1d2:	4b07      	ldr	r3, [pc, #28]	; (800f1f0 <prvResetNextTaskUnblockTime+0x38>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	4a04      	ldr	r2, [pc, #16]	; (800f1f4 <prvResetNextTaskUnblockTime+0x3c>)
 800f1e2:	6013      	str	r3, [r2, #0]
}
 800f1e4:	bf00      	nop
 800f1e6:	370c      	adds	r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr
 800f1f0:	20002bf8 	.word	0x20002bf8
 800f1f4:	20002c60 	.word	0x20002c60

0800f1f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b083      	sub	sp, #12
 800f1fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f1fe:	4b0b      	ldr	r3, [pc, #44]	; (800f22c <xTaskGetSchedulerState+0x34>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d102      	bne.n	800f20c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f206:	2301      	movs	r3, #1
 800f208:	607b      	str	r3, [r7, #4]
 800f20a:	e008      	b.n	800f21e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f20c:	4b08      	ldr	r3, [pc, #32]	; (800f230 <xTaskGetSchedulerState+0x38>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d102      	bne.n	800f21a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f214:	2302      	movs	r3, #2
 800f216:	607b      	str	r3, [r7, #4]
 800f218:	e001      	b.n	800f21e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f21a:	2300      	movs	r3, #0
 800f21c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f21e:	687b      	ldr	r3, [r7, #4]
	}
 800f220:	4618      	mov	r0, r3
 800f222:	370c      	adds	r7, #12
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr
 800f22c:	20002c4c 	.word	0x20002c4c
 800f230:	20002c68 	.word	0x20002c68

0800f234 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f234:	b580      	push	{r7, lr}
 800f236:	b086      	sub	sp, #24
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f240:	2300      	movs	r3, #0
 800f242:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d06e      	beq.n	800f328 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f24a:	4b3a      	ldr	r3, [pc, #232]	; (800f334 <xTaskPriorityDisinherit+0x100>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	693a      	ldr	r2, [r7, #16]
 800f250:	429a      	cmp	r2, r3
 800f252:	d00a      	beq.n	800f26a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f258:	f383 8811 	msr	BASEPRI, r3
 800f25c:	f3bf 8f6f 	isb	sy
 800f260:	f3bf 8f4f 	dsb	sy
 800f264:	60fb      	str	r3, [r7, #12]
}
 800f266:	bf00      	nop
 800f268:	e7fe      	b.n	800f268 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d10a      	bne.n	800f288 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f276:	f383 8811 	msr	BASEPRI, r3
 800f27a:	f3bf 8f6f 	isb	sy
 800f27e:	f3bf 8f4f 	dsb	sy
 800f282:	60bb      	str	r3, [r7, #8]
}
 800f284:	bf00      	nop
 800f286:	e7fe      	b.n	800f286 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f28c:	1e5a      	subs	r2, r3, #1
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f296:	693b      	ldr	r3, [r7, #16]
 800f298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d044      	beq.n	800f328 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d140      	bne.n	800f328 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	3304      	adds	r3, #4
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fe fce2 	bl	800dc74 <uxListRemove>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d115      	bne.n	800f2e2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2ba:	491f      	ldr	r1, [pc, #124]	; (800f338 <xTaskPriorityDisinherit+0x104>)
 800f2bc:	4613      	mov	r3, r2
 800f2be:	009b      	lsls	r3, r3, #2
 800f2c0:	4413      	add	r3, r2
 800f2c2:	009b      	lsls	r3, r3, #2
 800f2c4:	440b      	add	r3, r1
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d10a      	bne.n	800f2e2 <xTaskPriorityDisinherit+0xae>
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2d0:	2201      	movs	r2, #1
 800f2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800f2d6:	43da      	mvns	r2, r3
 800f2d8:	4b18      	ldr	r3, [pc, #96]	; (800f33c <xTaskPriorityDisinherit+0x108>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4013      	ands	r3, r2
 800f2de:	4a17      	ldr	r2, [pc, #92]	; (800f33c <xTaskPriorityDisinherit+0x108>)
 800f2e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ee:	f1c3 0207 	rsb	r2, r3, #7
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	409a      	lsls	r2, r3
 800f2fe:	4b0f      	ldr	r3, [pc, #60]	; (800f33c <xTaskPriorityDisinherit+0x108>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	4313      	orrs	r3, r2
 800f304:	4a0d      	ldr	r2, [pc, #52]	; (800f33c <xTaskPriorityDisinherit+0x108>)
 800f306:	6013      	str	r3, [r2, #0]
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f30c:	4613      	mov	r3, r2
 800f30e:	009b      	lsls	r3, r3, #2
 800f310:	4413      	add	r3, r2
 800f312:	009b      	lsls	r3, r3, #2
 800f314:	4a08      	ldr	r2, [pc, #32]	; (800f338 <xTaskPriorityDisinherit+0x104>)
 800f316:	441a      	add	r2, r3
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	3304      	adds	r3, #4
 800f31c:	4619      	mov	r1, r3
 800f31e:	4610      	mov	r0, r2
 800f320:	f7fe fc4b 	bl	800dbba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f324:	2301      	movs	r3, #1
 800f326:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f328:	697b      	ldr	r3, [r7, #20]
	}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3718      	adds	r7, #24
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	20002b40 	.word	0x20002b40
 800f338:	20002b44 	.word	0x20002b44
 800f33c:	20002c48 	.word	0x20002c48

0800f340 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f34a:	4b29      	ldr	r3, [pc, #164]	; (800f3f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f350:	4b28      	ldr	r3, [pc, #160]	; (800f3f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	3304      	adds	r3, #4
 800f356:	4618      	mov	r0, r3
 800f358:	f7fe fc8c 	bl	800dc74 <uxListRemove>
 800f35c:	4603      	mov	r3, r0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d10b      	bne.n	800f37a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f362:	4b24      	ldr	r3, [pc, #144]	; (800f3f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f368:	2201      	movs	r2, #1
 800f36a:	fa02 f303 	lsl.w	r3, r2, r3
 800f36e:	43da      	mvns	r2, r3
 800f370:	4b21      	ldr	r3, [pc, #132]	; (800f3f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4013      	ands	r3, r2
 800f376:	4a20      	ldr	r2, [pc, #128]	; (800f3f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f378:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f380:	d10a      	bne.n	800f398 <prvAddCurrentTaskToDelayedList+0x58>
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d007      	beq.n	800f398 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f388:	4b1a      	ldr	r3, [pc, #104]	; (800f3f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	3304      	adds	r3, #4
 800f38e:	4619      	mov	r1, r3
 800f390:	481a      	ldr	r0, [pc, #104]	; (800f3fc <prvAddCurrentTaskToDelayedList+0xbc>)
 800f392:	f7fe fc12 	bl	800dbba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f396:	e026      	b.n	800f3e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f398:	68fa      	ldr	r2, [r7, #12]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	4413      	add	r3, r2
 800f39e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f3a0:	4b14      	ldr	r3, [pc, #80]	; (800f3f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	68ba      	ldr	r2, [r7, #8]
 800f3a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f3a8:	68ba      	ldr	r2, [r7, #8]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d209      	bcs.n	800f3c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3b0:	4b13      	ldr	r3, [pc, #76]	; (800f400 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	4b0f      	ldr	r3, [pc, #60]	; (800f3f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	3304      	adds	r3, #4
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	4610      	mov	r0, r2
 800f3be:	f7fe fc20 	bl	800dc02 <vListInsert>
}
 800f3c2:	e010      	b.n	800f3e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f3c4:	4b0f      	ldr	r3, [pc, #60]	; (800f404 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f3c6:	681a      	ldr	r2, [r3, #0]
 800f3c8:	4b0a      	ldr	r3, [pc, #40]	; (800f3f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	3304      	adds	r3, #4
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	4610      	mov	r0, r2
 800f3d2:	f7fe fc16 	bl	800dc02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f3d6:	4b0c      	ldr	r3, [pc, #48]	; (800f408 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	68ba      	ldr	r2, [r7, #8]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d202      	bcs.n	800f3e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f3e0:	4a09      	ldr	r2, [pc, #36]	; (800f408 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	6013      	str	r3, [r2, #0]
}
 800f3e6:	bf00      	nop
 800f3e8:	3710      	adds	r7, #16
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	20002c44 	.word	0x20002c44
 800f3f4:	20002b40 	.word	0x20002b40
 800f3f8:	20002c48 	.word	0x20002c48
 800f3fc:	20002c2c 	.word	0x20002c2c
 800f400:	20002bfc 	.word	0x20002bfc
 800f404:	20002bf8 	.word	0x20002bf8
 800f408:	20002c60 	.word	0x20002c60

0800f40c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f40c:	b480      	push	{r7}
 800f40e:	b085      	sub	sp, #20
 800f410:	af00      	add	r7, sp, #0
 800f412:	60f8      	str	r0, [r7, #12]
 800f414:	60b9      	str	r1, [r7, #8]
 800f416:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	3b04      	subs	r3, #4
 800f41c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	3b04      	subs	r3, #4
 800f42a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	f023 0201 	bic.w	r2, r3, #1
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	3b04      	subs	r3, #4
 800f43a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f43c:	4a0c      	ldr	r2, [pc, #48]	; (800f470 <pxPortInitialiseStack+0x64>)
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	3b14      	subs	r3, #20
 800f446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f448:	687a      	ldr	r2, [r7, #4]
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	3b04      	subs	r3, #4
 800f452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f06f 0202 	mvn.w	r2, #2
 800f45a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	3b20      	subs	r3, #32
 800f460:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f462:	68fb      	ldr	r3, [r7, #12]
}
 800f464:	4618      	mov	r0, r3
 800f466:	3714      	adds	r7, #20
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr
 800f470:	0800f475 	.word	0x0800f475

0800f474 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f474:	b480      	push	{r7}
 800f476:	b085      	sub	sp, #20
 800f478:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f47a:	2300      	movs	r3, #0
 800f47c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f47e:	4b12      	ldr	r3, [pc, #72]	; (800f4c8 <prvTaskExitError+0x54>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f486:	d00a      	beq.n	800f49e <prvTaskExitError+0x2a>
	__asm volatile
 800f488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48c:	f383 8811 	msr	BASEPRI, r3
 800f490:	f3bf 8f6f 	isb	sy
 800f494:	f3bf 8f4f 	dsb	sy
 800f498:	60fb      	str	r3, [r7, #12]
}
 800f49a:	bf00      	nop
 800f49c:	e7fe      	b.n	800f49c <prvTaskExitError+0x28>
	__asm volatile
 800f49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a2:	f383 8811 	msr	BASEPRI, r3
 800f4a6:	f3bf 8f6f 	isb	sy
 800f4aa:	f3bf 8f4f 	dsb	sy
 800f4ae:	60bb      	str	r3, [r7, #8]
}
 800f4b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f4b2:	bf00      	nop
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d0fc      	beq.n	800f4b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f4ba:	bf00      	nop
 800f4bc:	bf00      	nop
 800f4be:	3714      	adds	r7, #20
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr
 800f4c8:	20000018 	.word	0x20000018
 800f4cc:	00000000 	.word	0x00000000

0800f4d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f4d0:	4b07      	ldr	r3, [pc, #28]	; (800f4f0 <pxCurrentTCBConst2>)
 800f4d2:	6819      	ldr	r1, [r3, #0]
 800f4d4:	6808      	ldr	r0, [r1, #0]
 800f4d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4da:	f380 8809 	msr	PSP, r0
 800f4de:	f3bf 8f6f 	isb	sy
 800f4e2:	f04f 0000 	mov.w	r0, #0
 800f4e6:	f380 8811 	msr	BASEPRI, r0
 800f4ea:	4770      	bx	lr
 800f4ec:	f3af 8000 	nop.w

0800f4f0 <pxCurrentTCBConst2>:
 800f4f0:	20002b40 	.word	0x20002b40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f4f4:	bf00      	nop
 800f4f6:	bf00      	nop

0800f4f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f4f8:	4808      	ldr	r0, [pc, #32]	; (800f51c <prvPortStartFirstTask+0x24>)
 800f4fa:	6800      	ldr	r0, [r0, #0]
 800f4fc:	6800      	ldr	r0, [r0, #0]
 800f4fe:	f380 8808 	msr	MSP, r0
 800f502:	f04f 0000 	mov.w	r0, #0
 800f506:	f380 8814 	msr	CONTROL, r0
 800f50a:	b662      	cpsie	i
 800f50c:	b661      	cpsie	f
 800f50e:	f3bf 8f4f 	dsb	sy
 800f512:	f3bf 8f6f 	isb	sy
 800f516:	df00      	svc	0
 800f518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f51a:	bf00      	nop
 800f51c:	e000ed08 	.word	0xe000ed08

0800f520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b086      	sub	sp, #24
 800f524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f526:	4b46      	ldr	r3, [pc, #280]	; (800f640 <xPortStartScheduler+0x120>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4a46      	ldr	r2, [pc, #280]	; (800f644 <xPortStartScheduler+0x124>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d10a      	bne.n	800f546 <xPortStartScheduler+0x26>
	__asm volatile
 800f530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f534:	f383 8811 	msr	BASEPRI, r3
 800f538:	f3bf 8f6f 	isb	sy
 800f53c:	f3bf 8f4f 	dsb	sy
 800f540:	613b      	str	r3, [r7, #16]
}
 800f542:	bf00      	nop
 800f544:	e7fe      	b.n	800f544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f546:	4b3e      	ldr	r3, [pc, #248]	; (800f640 <xPortStartScheduler+0x120>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	4a3f      	ldr	r2, [pc, #252]	; (800f648 <xPortStartScheduler+0x128>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d10a      	bne.n	800f566 <xPortStartScheduler+0x46>
	__asm volatile
 800f550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f554:	f383 8811 	msr	BASEPRI, r3
 800f558:	f3bf 8f6f 	isb	sy
 800f55c:	f3bf 8f4f 	dsb	sy
 800f560:	60fb      	str	r3, [r7, #12]
}
 800f562:	bf00      	nop
 800f564:	e7fe      	b.n	800f564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f566:	4b39      	ldr	r3, [pc, #228]	; (800f64c <xPortStartScheduler+0x12c>)
 800f568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	22ff      	movs	r2, #255	; 0xff
 800f576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f580:	78fb      	ldrb	r3, [r7, #3]
 800f582:	b2db      	uxtb	r3, r3
 800f584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f588:	b2da      	uxtb	r2, r3
 800f58a:	4b31      	ldr	r3, [pc, #196]	; (800f650 <xPortStartScheduler+0x130>)
 800f58c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f58e:	4b31      	ldr	r3, [pc, #196]	; (800f654 <xPortStartScheduler+0x134>)
 800f590:	2207      	movs	r2, #7
 800f592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f594:	e009      	b.n	800f5aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f596:	4b2f      	ldr	r3, [pc, #188]	; (800f654 <xPortStartScheduler+0x134>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	3b01      	subs	r3, #1
 800f59c:	4a2d      	ldr	r2, [pc, #180]	; (800f654 <xPortStartScheduler+0x134>)
 800f59e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f5a0:	78fb      	ldrb	r3, [r7, #3]
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	005b      	lsls	r3, r3, #1
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f5aa:	78fb      	ldrb	r3, [r7, #3]
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5b2:	2b80      	cmp	r3, #128	; 0x80
 800f5b4:	d0ef      	beq.n	800f596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f5b6:	4b27      	ldr	r3, [pc, #156]	; (800f654 <xPortStartScheduler+0x134>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f1c3 0307 	rsb	r3, r3, #7
 800f5be:	2b04      	cmp	r3, #4
 800f5c0:	d00a      	beq.n	800f5d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c6:	f383 8811 	msr	BASEPRI, r3
 800f5ca:	f3bf 8f6f 	isb	sy
 800f5ce:	f3bf 8f4f 	dsb	sy
 800f5d2:	60bb      	str	r3, [r7, #8]
}
 800f5d4:	bf00      	nop
 800f5d6:	e7fe      	b.n	800f5d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f5d8:	4b1e      	ldr	r3, [pc, #120]	; (800f654 <xPortStartScheduler+0x134>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	021b      	lsls	r3, r3, #8
 800f5de:	4a1d      	ldr	r2, [pc, #116]	; (800f654 <xPortStartScheduler+0x134>)
 800f5e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f5e2:	4b1c      	ldr	r3, [pc, #112]	; (800f654 <xPortStartScheduler+0x134>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f5ea:	4a1a      	ldr	r2, [pc, #104]	; (800f654 <xPortStartScheduler+0x134>)
 800f5ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	b2da      	uxtb	r2, r3
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f5f6:	4b18      	ldr	r3, [pc, #96]	; (800f658 <xPortStartScheduler+0x138>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	4a17      	ldr	r2, [pc, #92]	; (800f658 <xPortStartScheduler+0x138>)
 800f5fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f602:	4b15      	ldr	r3, [pc, #84]	; (800f658 <xPortStartScheduler+0x138>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4a14      	ldr	r2, [pc, #80]	; (800f658 <xPortStartScheduler+0x138>)
 800f608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f60c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f60e:	f000 f8dd 	bl	800f7cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f612:	4b12      	ldr	r3, [pc, #72]	; (800f65c <xPortStartScheduler+0x13c>)
 800f614:	2200      	movs	r2, #0
 800f616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f618:	f000 f8fc 	bl	800f814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f61c:	4b10      	ldr	r3, [pc, #64]	; (800f660 <xPortStartScheduler+0x140>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4a0f      	ldr	r2, [pc, #60]	; (800f660 <xPortStartScheduler+0x140>)
 800f622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f628:	f7ff ff66 	bl	800f4f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f62c:	f7ff fba8 	bl	800ed80 <vTaskSwitchContext>
	prvTaskExitError();
 800f630:	f7ff ff20 	bl	800f474 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	3718      	adds	r7, #24
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
 800f63e:	bf00      	nop
 800f640:	e000ed00 	.word	0xe000ed00
 800f644:	410fc271 	.word	0x410fc271
 800f648:	410fc270 	.word	0x410fc270
 800f64c:	e000e400 	.word	0xe000e400
 800f650:	20002c6c 	.word	0x20002c6c
 800f654:	20002c70 	.word	0x20002c70
 800f658:	e000ed20 	.word	0xe000ed20
 800f65c:	20000018 	.word	0x20000018
 800f660:	e000ef34 	.word	0xe000ef34

0800f664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f664:	b480      	push	{r7}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
	__asm volatile
 800f66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f66e:	f383 8811 	msr	BASEPRI, r3
 800f672:	f3bf 8f6f 	isb	sy
 800f676:	f3bf 8f4f 	dsb	sy
 800f67a:	607b      	str	r3, [r7, #4]
}
 800f67c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f67e:	4b0f      	ldr	r3, [pc, #60]	; (800f6bc <vPortEnterCritical+0x58>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	3301      	adds	r3, #1
 800f684:	4a0d      	ldr	r2, [pc, #52]	; (800f6bc <vPortEnterCritical+0x58>)
 800f686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f688:	4b0c      	ldr	r3, [pc, #48]	; (800f6bc <vPortEnterCritical+0x58>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d10f      	bne.n	800f6b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f690:	4b0b      	ldr	r3, [pc, #44]	; (800f6c0 <vPortEnterCritical+0x5c>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	b2db      	uxtb	r3, r3
 800f696:	2b00      	cmp	r3, #0
 800f698:	d00a      	beq.n	800f6b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f69e:	f383 8811 	msr	BASEPRI, r3
 800f6a2:	f3bf 8f6f 	isb	sy
 800f6a6:	f3bf 8f4f 	dsb	sy
 800f6aa:	603b      	str	r3, [r7, #0]
}
 800f6ac:	bf00      	nop
 800f6ae:	e7fe      	b.n	800f6ae <vPortEnterCritical+0x4a>
	}
}
 800f6b0:	bf00      	nop
 800f6b2:	370c      	adds	r7, #12
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr
 800f6bc:	20000018 	.word	0x20000018
 800f6c0:	e000ed04 	.word	0xe000ed04

0800f6c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f6ca:	4b12      	ldr	r3, [pc, #72]	; (800f714 <vPortExitCritical+0x50>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d10a      	bne.n	800f6e8 <vPortExitCritical+0x24>
	__asm volatile
 800f6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d6:	f383 8811 	msr	BASEPRI, r3
 800f6da:	f3bf 8f6f 	isb	sy
 800f6de:	f3bf 8f4f 	dsb	sy
 800f6e2:	607b      	str	r3, [r7, #4]
}
 800f6e4:	bf00      	nop
 800f6e6:	e7fe      	b.n	800f6e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f6e8:	4b0a      	ldr	r3, [pc, #40]	; (800f714 <vPortExitCritical+0x50>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	3b01      	subs	r3, #1
 800f6ee:	4a09      	ldr	r2, [pc, #36]	; (800f714 <vPortExitCritical+0x50>)
 800f6f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f6f2:	4b08      	ldr	r3, [pc, #32]	; (800f714 <vPortExitCritical+0x50>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d105      	bne.n	800f706 <vPortExitCritical+0x42>
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f706:	bf00      	nop
 800f708:	370c      	adds	r7, #12
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr
 800f712:	bf00      	nop
 800f714:	20000018 	.word	0x20000018
	...

0800f720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f720:	f3ef 8009 	mrs	r0, PSP
 800f724:	f3bf 8f6f 	isb	sy
 800f728:	4b15      	ldr	r3, [pc, #84]	; (800f780 <pxCurrentTCBConst>)
 800f72a:	681a      	ldr	r2, [r3, #0]
 800f72c:	f01e 0f10 	tst.w	lr, #16
 800f730:	bf08      	it	eq
 800f732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f73a:	6010      	str	r0, [r2, #0]
 800f73c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f740:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f744:	f380 8811 	msr	BASEPRI, r0
 800f748:	f3bf 8f4f 	dsb	sy
 800f74c:	f3bf 8f6f 	isb	sy
 800f750:	f7ff fb16 	bl	800ed80 <vTaskSwitchContext>
 800f754:	f04f 0000 	mov.w	r0, #0
 800f758:	f380 8811 	msr	BASEPRI, r0
 800f75c:	bc09      	pop	{r0, r3}
 800f75e:	6819      	ldr	r1, [r3, #0]
 800f760:	6808      	ldr	r0, [r1, #0]
 800f762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f766:	f01e 0f10 	tst.w	lr, #16
 800f76a:	bf08      	it	eq
 800f76c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f770:	f380 8809 	msr	PSP, r0
 800f774:	f3bf 8f6f 	isb	sy
 800f778:	4770      	bx	lr
 800f77a:	bf00      	nop
 800f77c:	f3af 8000 	nop.w

0800f780 <pxCurrentTCBConst>:
 800f780:	20002b40 	.word	0x20002b40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f784:	bf00      	nop
 800f786:	bf00      	nop

0800f788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
	__asm volatile
 800f78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f792:	f383 8811 	msr	BASEPRI, r3
 800f796:	f3bf 8f6f 	isb	sy
 800f79a:	f3bf 8f4f 	dsb	sy
 800f79e:	607b      	str	r3, [r7, #4]
}
 800f7a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f7a2:	f7ff fa35 	bl	800ec10 <xTaskIncrementTick>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d003      	beq.n	800f7b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f7ac:	4b06      	ldr	r3, [pc, #24]	; (800f7c8 <xPortSysTickHandler+0x40>)
 800f7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7b2:	601a      	str	r2, [r3, #0]
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	f383 8811 	msr	BASEPRI, r3
}
 800f7be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f7c0:	bf00      	nop
 800f7c2:	3708      	adds	r7, #8
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}
 800f7c8:	e000ed04 	.word	0xe000ed04

0800f7cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f7d0:	4b0b      	ldr	r3, [pc, #44]	; (800f800 <vPortSetupTimerInterrupt+0x34>)
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f7d6:	4b0b      	ldr	r3, [pc, #44]	; (800f804 <vPortSetupTimerInterrupt+0x38>)
 800f7d8:	2200      	movs	r2, #0
 800f7da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f7dc:	4b0a      	ldr	r3, [pc, #40]	; (800f808 <vPortSetupTimerInterrupt+0x3c>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4a0a      	ldr	r2, [pc, #40]	; (800f80c <vPortSetupTimerInterrupt+0x40>)
 800f7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f7e6:	099b      	lsrs	r3, r3, #6
 800f7e8:	4a09      	ldr	r2, [pc, #36]	; (800f810 <vPortSetupTimerInterrupt+0x44>)
 800f7ea:	3b01      	subs	r3, #1
 800f7ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f7ee:	4b04      	ldr	r3, [pc, #16]	; (800f800 <vPortSetupTimerInterrupt+0x34>)
 800f7f0:	2207      	movs	r2, #7
 800f7f2:	601a      	str	r2, [r3, #0]
}
 800f7f4:	bf00      	nop
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fc:	4770      	bx	lr
 800f7fe:	bf00      	nop
 800f800:	e000e010 	.word	0xe000e010
 800f804:	e000e018 	.word	0xe000e018
 800f808:	2000000c 	.word	0x2000000c
 800f80c:	10624dd3 	.word	0x10624dd3
 800f810:	e000e014 	.word	0xe000e014

0800f814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f824 <vPortEnableVFP+0x10>
 800f818:	6801      	ldr	r1, [r0, #0]
 800f81a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f81e:	6001      	str	r1, [r0, #0]
 800f820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f822:	bf00      	nop
 800f824:	e000ed88 	.word	0xe000ed88

0800f828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b08a      	sub	sp, #40	; 0x28
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f830:	2300      	movs	r3, #0
 800f832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f834:	f7ff f942 	bl	800eabc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f838:	4b5b      	ldr	r3, [pc, #364]	; (800f9a8 <pvPortMalloc+0x180>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d101      	bne.n	800f844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f840:	f000 f920 	bl	800fa84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f844:	4b59      	ldr	r3, [pc, #356]	; (800f9ac <pvPortMalloc+0x184>)
 800f846:	681a      	ldr	r2, [r3, #0]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4013      	ands	r3, r2
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	f040 8093 	bne.w	800f978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d01d      	beq.n	800f894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f858:	2208      	movs	r2, #8
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	4413      	add	r3, r2
 800f85e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f003 0307 	and.w	r3, r3, #7
 800f866:	2b00      	cmp	r3, #0
 800f868:	d014      	beq.n	800f894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f023 0307 	bic.w	r3, r3, #7
 800f870:	3308      	adds	r3, #8
 800f872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f003 0307 	and.w	r3, r3, #7
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d00a      	beq.n	800f894 <pvPortMalloc+0x6c>
	__asm volatile
 800f87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f882:	f383 8811 	msr	BASEPRI, r3
 800f886:	f3bf 8f6f 	isb	sy
 800f88a:	f3bf 8f4f 	dsb	sy
 800f88e:	617b      	str	r3, [r7, #20]
}
 800f890:	bf00      	nop
 800f892:	e7fe      	b.n	800f892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d06e      	beq.n	800f978 <pvPortMalloc+0x150>
 800f89a:	4b45      	ldr	r3, [pc, #276]	; (800f9b0 <pvPortMalloc+0x188>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	687a      	ldr	r2, [r7, #4]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d869      	bhi.n	800f978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f8a4:	4b43      	ldr	r3, [pc, #268]	; (800f9b4 <pvPortMalloc+0x18c>)
 800f8a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f8a8:	4b42      	ldr	r3, [pc, #264]	; (800f9b4 <pvPortMalloc+0x18c>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f8ae:	e004      	b.n	800f8ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	687a      	ldr	r2, [r7, #4]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d903      	bls.n	800f8cc <pvPortMalloc+0xa4>
 800f8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d1f1      	bne.n	800f8b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f8cc:	4b36      	ldr	r3, [pc, #216]	; (800f9a8 <pvPortMalloc+0x180>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d050      	beq.n	800f978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f8d6:	6a3b      	ldr	r3, [r7, #32]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	2208      	movs	r2, #8
 800f8dc:	4413      	add	r3, r2
 800f8de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e2:	681a      	ldr	r2, [r3, #0]
 800f8e4:	6a3b      	ldr	r3, [r7, #32]
 800f8e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ea:	685a      	ldr	r2, [r3, #4]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	1ad2      	subs	r2, r2, r3
 800f8f0:	2308      	movs	r3, #8
 800f8f2:	005b      	lsls	r3, r3, #1
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d91f      	bls.n	800f938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	4413      	add	r3, r2
 800f8fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f900:	69bb      	ldr	r3, [r7, #24]
 800f902:	f003 0307 	and.w	r3, r3, #7
 800f906:	2b00      	cmp	r3, #0
 800f908:	d00a      	beq.n	800f920 <pvPortMalloc+0xf8>
	__asm volatile
 800f90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f90e:	f383 8811 	msr	BASEPRI, r3
 800f912:	f3bf 8f6f 	isb	sy
 800f916:	f3bf 8f4f 	dsb	sy
 800f91a:	613b      	str	r3, [r7, #16]
}
 800f91c:	bf00      	nop
 800f91e:	e7fe      	b.n	800f91e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f922:	685a      	ldr	r2, [r3, #4]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	1ad2      	subs	r2, r2, r3
 800f928:	69bb      	ldr	r3, [r7, #24]
 800f92a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f932:	69b8      	ldr	r0, [r7, #24]
 800f934:	f000 f908 	bl	800fb48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f938:	4b1d      	ldr	r3, [pc, #116]	; (800f9b0 <pvPortMalloc+0x188>)
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	1ad3      	subs	r3, r2, r3
 800f942:	4a1b      	ldr	r2, [pc, #108]	; (800f9b0 <pvPortMalloc+0x188>)
 800f944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f946:	4b1a      	ldr	r3, [pc, #104]	; (800f9b0 <pvPortMalloc+0x188>)
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	4b1b      	ldr	r3, [pc, #108]	; (800f9b8 <pvPortMalloc+0x190>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d203      	bcs.n	800f95a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f952:	4b17      	ldr	r3, [pc, #92]	; (800f9b0 <pvPortMalloc+0x188>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	4a18      	ldr	r2, [pc, #96]	; (800f9b8 <pvPortMalloc+0x190>)
 800f958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95c:	685a      	ldr	r2, [r3, #4]
 800f95e:	4b13      	ldr	r3, [pc, #76]	; (800f9ac <pvPortMalloc+0x184>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	431a      	orrs	r2, r3
 800f964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96a:	2200      	movs	r2, #0
 800f96c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f96e:	4b13      	ldr	r3, [pc, #76]	; (800f9bc <pvPortMalloc+0x194>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	3301      	adds	r3, #1
 800f974:	4a11      	ldr	r2, [pc, #68]	; (800f9bc <pvPortMalloc+0x194>)
 800f976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f978:	f7ff f8ae 	bl	800ead8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	f003 0307 	and.w	r3, r3, #7
 800f982:	2b00      	cmp	r3, #0
 800f984:	d00a      	beq.n	800f99c <pvPortMalloc+0x174>
	__asm volatile
 800f986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f98a:	f383 8811 	msr	BASEPRI, r3
 800f98e:	f3bf 8f6f 	isb	sy
 800f992:	f3bf 8f4f 	dsb	sy
 800f996:	60fb      	str	r3, [r7, #12]
}
 800f998:	bf00      	nop
 800f99a:	e7fe      	b.n	800f99a <pvPortMalloc+0x172>
	return pvReturn;
 800f99c:	69fb      	ldr	r3, [r7, #28]
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3728      	adds	r7, #40	; 0x28
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	2000687c 	.word	0x2000687c
 800f9ac:	20006890 	.word	0x20006890
 800f9b0:	20006880 	.word	0x20006880
 800f9b4:	20006874 	.word	0x20006874
 800f9b8:	20006884 	.word	0x20006884
 800f9bc:	20006888 	.word	0x20006888

0800f9c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b086      	sub	sp, #24
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d04d      	beq.n	800fa6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f9d2:	2308      	movs	r3, #8
 800f9d4:	425b      	negs	r3, r3
 800f9d6:	697a      	ldr	r2, [r7, #20]
 800f9d8:	4413      	add	r3, r2
 800f9da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	685a      	ldr	r2, [r3, #4]
 800f9e4:	4b24      	ldr	r3, [pc, #144]	; (800fa78 <vPortFree+0xb8>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4013      	ands	r3, r2
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d10a      	bne.n	800fa04 <vPortFree+0x44>
	__asm volatile
 800f9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f2:	f383 8811 	msr	BASEPRI, r3
 800f9f6:	f3bf 8f6f 	isb	sy
 800f9fa:	f3bf 8f4f 	dsb	sy
 800f9fe:	60fb      	str	r3, [r7, #12]
}
 800fa00:	bf00      	nop
 800fa02:	e7fe      	b.n	800fa02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d00a      	beq.n	800fa22 <vPortFree+0x62>
	__asm volatile
 800fa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa10:	f383 8811 	msr	BASEPRI, r3
 800fa14:	f3bf 8f6f 	isb	sy
 800fa18:	f3bf 8f4f 	dsb	sy
 800fa1c:	60bb      	str	r3, [r7, #8]
}
 800fa1e:	bf00      	nop
 800fa20:	e7fe      	b.n	800fa20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	685a      	ldr	r2, [r3, #4]
 800fa26:	4b14      	ldr	r3, [pc, #80]	; (800fa78 <vPortFree+0xb8>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	4013      	ands	r3, r2
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d01e      	beq.n	800fa6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d11a      	bne.n	800fa6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	685a      	ldr	r2, [r3, #4]
 800fa3c:	4b0e      	ldr	r3, [pc, #56]	; (800fa78 <vPortFree+0xb8>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	43db      	mvns	r3, r3
 800fa42:	401a      	ands	r2, r3
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fa48:	f7ff f838 	bl	800eabc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	685a      	ldr	r2, [r3, #4]
 800fa50:	4b0a      	ldr	r3, [pc, #40]	; (800fa7c <vPortFree+0xbc>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	4413      	add	r3, r2
 800fa56:	4a09      	ldr	r2, [pc, #36]	; (800fa7c <vPortFree+0xbc>)
 800fa58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fa5a:	6938      	ldr	r0, [r7, #16]
 800fa5c:	f000 f874 	bl	800fb48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fa60:	4b07      	ldr	r3, [pc, #28]	; (800fa80 <vPortFree+0xc0>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	3301      	adds	r3, #1
 800fa66:	4a06      	ldr	r2, [pc, #24]	; (800fa80 <vPortFree+0xc0>)
 800fa68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fa6a:	f7ff f835 	bl	800ead8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fa6e:	bf00      	nop
 800fa70:	3718      	adds	r7, #24
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	20006890 	.word	0x20006890
 800fa7c:	20006880 	.word	0x20006880
 800fa80:	2000688c 	.word	0x2000688c

0800fa84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fa84:	b480      	push	{r7}
 800fa86:	b085      	sub	sp, #20
 800fa88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fa8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fa8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fa90:	4b27      	ldr	r3, [pc, #156]	; (800fb30 <prvHeapInit+0xac>)
 800fa92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f003 0307 	and.w	r3, r3, #7
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d00c      	beq.n	800fab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	3307      	adds	r3, #7
 800faa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f023 0307 	bic.w	r3, r3, #7
 800faaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800faac:	68ba      	ldr	r2, [r7, #8]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	1ad3      	subs	r3, r2, r3
 800fab2:	4a1f      	ldr	r2, [pc, #124]	; (800fb30 <prvHeapInit+0xac>)
 800fab4:	4413      	add	r3, r2
 800fab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fabc:	4a1d      	ldr	r2, [pc, #116]	; (800fb34 <prvHeapInit+0xb0>)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fac2:	4b1c      	ldr	r3, [pc, #112]	; (800fb34 <prvHeapInit+0xb0>)
 800fac4:	2200      	movs	r2, #0
 800fac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	68ba      	ldr	r2, [r7, #8]
 800facc:	4413      	add	r3, r2
 800face:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fad0:	2208      	movs	r2, #8
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	1a9b      	subs	r3, r3, r2
 800fad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f023 0307 	bic.w	r3, r3, #7
 800fade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	4a15      	ldr	r2, [pc, #84]	; (800fb38 <prvHeapInit+0xb4>)
 800fae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fae6:	4b14      	ldr	r3, [pc, #80]	; (800fb38 <prvHeapInit+0xb4>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2200      	movs	r2, #0
 800faec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800faee:	4b12      	ldr	r3, [pc, #72]	; (800fb38 <prvHeapInit+0xb4>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	2200      	movs	r2, #0
 800faf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	1ad2      	subs	r2, r2, r3
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fb04:	4b0c      	ldr	r3, [pc, #48]	; (800fb38 <prvHeapInit+0xb4>)
 800fb06:	681a      	ldr	r2, [r3, #0]
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	4a0a      	ldr	r2, [pc, #40]	; (800fb3c <prvHeapInit+0xb8>)
 800fb12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	685b      	ldr	r3, [r3, #4]
 800fb18:	4a09      	ldr	r2, [pc, #36]	; (800fb40 <prvHeapInit+0xbc>)
 800fb1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fb1c:	4b09      	ldr	r3, [pc, #36]	; (800fb44 <prvHeapInit+0xc0>)
 800fb1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fb22:	601a      	str	r2, [r3, #0]
}
 800fb24:	bf00      	nop
 800fb26:	3714      	adds	r7, #20
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr
 800fb30:	20002c74 	.word	0x20002c74
 800fb34:	20006874 	.word	0x20006874
 800fb38:	2000687c 	.word	0x2000687c
 800fb3c:	20006884 	.word	0x20006884
 800fb40:	20006880 	.word	0x20006880
 800fb44:	20006890 	.word	0x20006890

0800fb48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b085      	sub	sp, #20
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fb50:	4b28      	ldr	r3, [pc, #160]	; (800fbf4 <prvInsertBlockIntoFreeList+0xac>)
 800fb52:	60fb      	str	r3, [r7, #12]
 800fb54:	e002      	b.n	800fb5c <prvInsertBlockIntoFreeList+0x14>
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	60fb      	str	r3, [r7, #12]
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d8f7      	bhi.n	800fb56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	68ba      	ldr	r2, [r7, #8]
 800fb70:	4413      	add	r3, r2
 800fb72:	687a      	ldr	r2, [r7, #4]
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d108      	bne.n	800fb8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	685a      	ldr	r2, [r3, #4]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	441a      	add	r2, r3
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	68ba      	ldr	r2, [r7, #8]
 800fb94:	441a      	add	r2, r3
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d118      	bne.n	800fbd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681a      	ldr	r2, [r3, #0]
 800fba2:	4b15      	ldr	r3, [pc, #84]	; (800fbf8 <prvInsertBlockIntoFreeList+0xb0>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d00d      	beq.n	800fbc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	685a      	ldr	r2, [r3, #4]
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	441a      	add	r2, r3
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	601a      	str	r2, [r3, #0]
 800fbc4:	e008      	b.n	800fbd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fbc6:	4b0c      	ldr	r3, [pc, #48]	; (800fbf8 <prvInsertBlockIntoFreeList+0xb0>)
 800fbc8:	681a      	ldr	r2, [r3, #0]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	601a      	str	r2, [r3, #0]
 800fbce:	e003      	b.n	800fbd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	681a      	ldr	r2, [r3, #0]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fbd8:	68fa      	ldr	r2, [r7, #12]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d002      	beq.n	800fbe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	687a      	ldr	r2, [r7, #4]
 800fbe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fbe6:	bf00      	nop
 800fbe8:	3714      	adds	r7, #20
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr
 800fbf2:	bf00      	nop
 800fbf4:	20006874 	.word	0x20006874
 800fbf8:	2000687c 	.word	0x2000687c

0800fbfc <__errno>:
 800fbfc:	4b01      	ldr	r3, [pc, #4]	; (800fc04 <__errno+0x8>)
 800fbfe:	6818      	ldr	r0, [r3, #0]
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	2000001c 	.word	0x2000001c

0800fc08 <__libc_init_array>:
 800fc08:	b570      	push	{r4, r5, r6, lr}
 800fc0a:	4d0d      	ldr	r5, [pc, #52]	; (800fc40 <__libc_init_array+0x38>)
 800fc0c:	4c0d      	ldr	r4, [pc, #52]	; (800fc44 <__libc_init_array+0x3c>)
 800fc0e:	1b64      	subs	r4, r4, r5
 800fc10:	10a4      	asrs	r4, r4, #2
 800fc12:	2600      	movs	r6, #0
 800fc14:	42a6      	cmp	r6, r4
 800fc16:	d109      	bne.n	800fc2c <__libc_init_array+0x24>
 800fc18:	4d0b      	ldr	r5, [pc, #44]	; (800fc48 <__libc_init_array+0x40>)
 800fc1a:	4c0c      	ldr	r4, [pc, #48]	; (800fc4c <__libc_init_array+0x44>)
 800fc1c:	f005 f9a4 	bl	8014f68 <_init>
 800fc20:	1b64      	subs	r4, r4, r5
 800fc22:	10a4      	asrs	r4, r4, #2
 800fc24:	2600      	movs	r6, #0
 800fc26:	42a6      	cmp	r6, r4
 800fc28:	d105      	bne.n	800fc36 <__libc_init_array+0x2e>
 800fc2a:	bd70      	pop	{r4, r5, r6, pc}
 800fc2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc30:	4798      	blx	r3
 800fc32:	3601      	adds	r6, #1
 800fc34:	e7ee      	b.n	800fc14 <__libc_init_array+0xc>
 800fc36:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc3a:	4798      	blx	r3
 800fc3c:	3601      	adds	r6, #1
 800fc3e:	e7f2      	b.n	800fc26 <__libc_init_array+0x1e>
 800fc40:	080158d8 	.word	0x080158d8
 800fc44:	080158d8 	.word	0x080158d8
 800fc48:	080158d8 	.word	0x080158d8
 800fc4c:	080158dc 	.word	0x080158dc

0800fc50 <memcpy>:
 800fc50:	440a      	add	r2, r1
 800fc52:	4291      	cmp	r1, r2
 800fc54:	f100 33ff 	add.w	r3, r0, #4294967295
 800fc58:	d100      	bne.n	800fc5c <memcpy+0xc>
 800fc5a:	4770      	bx	lr
 800fc5c:	b510      	push	{r4, lr}
 800fc5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc66:	4291      	cmp	r1, r2
 800fc68:	d1f9      	bne.n	800fc5e <memcpy+0xe>
 800fc6a:	bd10      	pop	{r4, pc}

0800fc6c <memset>:
 800fc6c:	4402      	add	r2, r0
 800fc6e:	4603      	mov	r3, r0
 800fc70:	4293      	cmp	r3, r2
 800fc72:	d100      	bne.n	800fc76 <memset+0xa>
 800fc74:	4770      	bx	lr
 800fc76:	f803 1b01 	strb.w	r1, [r3], #1
 800fc7a:	e7f9      	b.n	800fc70 <memset+0x4>

0800fc7c <__cvt>:
 800fc7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc80:	ec55 4b10 	vmov	r4, r5, d0
 800fc84:	2d00      	cmp	r5, #0
 800fc86:	460e      	mov	r6, r1
 800fc88:	4619      	mov	r1, r3
 800fc8a:	462b      	mov	r3, r5
 800fc8c:	bfbb      	ittet	lt
 800fc8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fc92:	461d      	movlt	r5, r3
 800fc94:	2300      	movge	r3, #0
 800fc96:	232d      	movlt	r3, #45	; 0x2d
 800fc98:	700b      	strb	r3, [r1, #0]
 800fc9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fca0:	4691      	mov	r9, r2
 800fca2:	f023 0820 	bic.w	r8, r3, #32
 800fca6:	bfbc      	itt	lt
 800fca8:	4622      	movlt	r2, r4
 800fcaa:	4614      	movlt	r4, r2
 800fcac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fcb0:	d005      	beq.n	800fcbe <__cvt+0x42>
 800fcb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fcb6:	d100      	bne.n	800fcba <__cvt+0x3e>
 800fcb8:	3601      	adds	r6, #1
 800fcba:	2102      	movs	r1, #2
 800fcbc:	e000      	b.n	800fcc0 <__cvt+0x44>
 800fcbe:	2103      	movs	r1, #3
 800fcc0:	ab03      	add	r3, sp, #12
 800fcc2:	9301      	str	r3, [sp, #4]
 800fcc4:	ab02      	add	r3, sp, #8
 800fcc6:	9300      	str	r3, [sp, #0]
 800fcc8:	ec45 4b10 	vmov	d0, r4, r5
 800fccc:	4653      	mov	r3, sl
 800fcce:	4632      	mov	r2, r6
 800fcd0:	f000 fcea 	bl	80106a8 <_dtoa_r>
 800fcd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fcd8:	4607      	mov	r7, r0
 800fcda:	d102      	bne.n	800fce2 <__cvt+0x66>
 800fcdc:	f019 0f01 	tst.w	r9, #1
 800fce0:	d022      	beq.n	800fd28 <__cvt+0xac>
 800fce2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fce6:	eb07 0906 	add.w	r9, r7, r6
 800fcea:	d110      	bne.n	800fd0e <__cvt+0x92>
 800fcec:	783b      	ldrb	r3, [r7, #0]
 800fcee:	2b30      	cmp	r3, #48	; 0x30
 800fcf0:	d10a      	bne.n	800fd08 <__cvt+0x8c>
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	f7f0 fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcfe:	b918      	cbnz	r0, 800fd08 <__cvt+0x8c>
 800fd00:	f1c6 0601 	rsb	r6, r6, #1
 800fd04:	f8ca 6000 	str.w	r6, [sl]
 800fd08:	f8da 3000 	ldr.w	r3, [sl]
 800fd0c:	4499      	add	r9, r3
 800fd0e:	2200      	movs	r2, #0
 800fd10:	2300      	movs	r3, #0
 800fd12:	4620      	mov	r0, r4
 800fd14:	4629      	mov	r1, r5
 800fd16:	f7f0 fed7 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd1a:	b108      	cbz	r0, 800fd20 <__cvt+0xa4>
 800fd1c:	f8cd 900c 	str.w	r9, [sp, #12]
 800fd20:	2230      	movs	r2, #48	; 0x30
 800fd22:	9b03      	ldr	r3, [sp, #12]
 800fd24:	454b      	cmp	r3, r9
 800fd26:	d307      	bcc.n	800fd38 <__cvt+0xbc>
 800fd28:	9b03      	ldr	r3, [sp, #12]
 800fd2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd2c:	1bdb      	subs	r3, r3, r7
 800fd2e:	4638      	mov	r0, r7
 800fd30:	6013      	str	r3, [r2, #0]
 800fd32:	b004      	add	sp, #16
 800fd34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd38:	1c59      	adds	r1, r3, #1
 800fd3a:	9103      	str	r1, [sp, #12]
 800fd3c:	701a      	strb	r2, [r3, #0]
 800fd3e:	e7f0      	b.n	800fd22 <__cvt+0xa6>

0800fd40 <__exponent>:
 800fd40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd42:	4603      	mov	r3, r0
 800fd44:	2900      	cmp	r1, #0
 800fd46:	bfb8      	it	lt
 800fd48:	4249      	neglt	r1, r1
 800fd4a:	f803 2b02 	strb.w	r2, [r3], #2
 800fd4e:	bfb4      	ite	lt
 800fd50:	222d      	movlt	r2, #45	; 0x2d
 800fd52:	222b      	movge	r2, #43	; 0x2b
 800fd54:	2909      	cmp	r1, #9
 800fd56:	7042      	strb	r2, [r0, #1]
 800fd58:	dd2a      	ble.n	800fdb0 <__exponent+0x70>
 800fd5a:	f10d 0407 	add.w	r4, sp, #7
 800fd5e:	46a4      	mov	ip, r4
 800fd60:	270a      	movs	r7, #10
 800fd62:	46a6      	mov	lr, r4
 800fd64:	460a      	mov	r2, r1
 800fd66:	fb91 f6f7 	sdiv	r6, r1, r7
 800fd6a:	fb07 1516 	mls	r5, r7, r6, r1
 800fd6e:	3530      	adds	r5, #48	; 0x30
 800fd70:	2a63      	cmp	r2, #99	; 0x63
 800fd72:	f104 34ff 	add.w	r4, r4, #4294967295
 800fd76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fd7a:	4631      	mov	r1, r6
 800fd7c:	dcf1      	bgt.n	800fd62 <__exponent+0x22>
 800fd7e:	3130      	adds	r1, #48	; 0x30
 800fd80:	f1ae 0502 	sub.w	r5, lr, #2
 800fd84:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fd88:	1c44      	adds	r4, r0, #1
 800fd8a:	4629      	mov	r1, r5
 800fd8c:	4561      	cmp	r1, ip
 800fd8e:	d30a      	bcc.n	800fda6 <__exponent+0x66>
 800fd90:	f10d 0209 	add.w	r2, sp, #9
 800fd94:	eba2 020e 	sub.w	r2, r2, lr
 800fd98:	4565      	cmp	r5, ip
 800fd9a:	bf88      	it	hi
 800fd9c:	2200      	movhi	r2, #0
 800fd9e:	4413      	add	r3, r2
 800fda0:	1a18      	subs	r0, r3, r0
 800fda2:	b003      	add	sp, #12
 800fda4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fda6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdaa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fdae:	e7ed      	b.n	800fd8c <__exponent+0x4c>
 800fdb0:	2330      	movs	r3, #48	; 0x30
 800fdb2:	3130      	adds	r1, #48	; 0x30
 800fdb4:	7083      	strb	r3, [r0, #2]
 800fdb6:	70c1      	strb	r1, [r0, #3]
 800fdb8:	1d03      	adds	r3, r0, #4
 800fdba:	e7f1      	b.n	800fda0 <__exponent+0x60>

0800fdbc <_printf_float>:
 800fdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc0:	ed2d 8b02 	vpush	{d8}
 800fdc4:	b08d      	sub	sp, #52	; 0x34
 800fdc6:	460c      	mov	r4, r1
 800fdc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fdcc:	4616      	mov	r6, r2
 800fdce:	461f      	mov	r7, r3
 800fdd0:	4605      	mov	r5, r0
 800fdd2:	f001 fa57 	bl	8011284 <_localeconv_r>
 800fdd6:	f8d0 a000 	ldr.w	sl, [r0]
 800fdda:	4650      	mov	r0, sl
 800fddc:	f7f0 f9f8 	bl	80001d0 <strlen>
 800fde0:	2300      	movs	r3, #0
 800fde2:	930a      	str	r3, [sp, #40]	; 0x28
 800fde4:	6823      	ldr	r3, [r4, #0]
 800fde6:	9305      	str	r3, [sp, #20]
 800fde8:	f8d8 3000 	ldr.w	r3, [r8]
 800fdec:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fdf0:	3307      	adds	r3, #7
 800fdf2:	f023 0307 	bic.w	r3, r3, #7
 800fdf6:	f103 0208 	add.w	r2, r3, #8
 800fdfa:	f8c8 2000 	str.w	r2, [r8]
 800fdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe02:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fe06:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fe0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fe0e:	9307      	str	r3, [sp, #28]
 800fe10:	f8cd 8018 	str.w	r8, [sp, #24]
 800fe14:	ee08 0a10 	vmov	s16, r0
 800fe18:	4b9f      	ldr	r3, [pc, #636]	; (8010098 <_printf_float+0x2dc>)
 800fe1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe1e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe22:	f7f0 fe83 	bl	8000b2c <__aeabi_dcmpun>
 800fe26:	bb88      	cbnz	r0, 800fe8c <_printf_float+0xd0>
 800fe28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fe2c:	4b9a      	ldr	r3, [pc, #616]	; (8010098 <_printf_float+0x2dc>)
 800fe2e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe32:	f7f0 fe5d 	bl	8000af0 <__aeabi_dcmple>
 800fe36:	bb48      	cbnz	r0, 800fe8c <_printf_float+0xd0>
 800fe38:	2200      	movs	r2, #0
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	4640      	mov	r0, r8
 800fe3e:	4649      	mov	r1, r9
 800fe40:	f7f0 fe4c 	bl	8000adc <__aeabi_dcmplt>
 800fe44:	b110      	cbz	r0, 800fe4c <_printf_float+0x90>
 800fe46:	232d      	movs	r3, #45	; 0x2d
 800fe48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe4c:	4b93      	ldr	r3, [pc, #588]	; (801009c <_printf_float+0x2e0>)
 800fe4e:	4894      	ldr	r0, [pc, #592]	; (80100a0 <_printf_float+0x2e4>)
 800fe50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fe54:	bf94      	ite	ls
 800fe56:	4698      	movls	r8, r3
 800fe58:	4680      	movhi	r8, r0
 800fe5a:	2303      	movs	r3, #3
 800fe5c:	6123      	str	r3, [r4, #16]
 800fe5e:	9b05      	ldr	r3, [sp, #20]
 800fe60:	f023 0204 	bic.w	r2, r3, #4
 800fe64:	6022      	str	r2, [r4, #0]
 800fe66:	f04f 0900 	mov.w	r9, #0
 800fe6a:	9700      	str	r7, [sp, #0]
 800fe6c:	4633      	mov	r3, r6
 800fe6e:	aa0b      	add	r2, sp, #44	; 0x2c
 800fe70:	4621      	mov	r1, r4
 800fe72:	4628      	mov	r0, r5
 800fe74:	f000 f9d8 	bl	8010228 <_printf_common>
 800fe78:	3001      	adds	r0, #1
 800fe7a:	f040 8090 	bne.w	800ff9e <_printf_float+0x1e2>
 800fe7e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe82:	b00d      	add	sp, #52	; 0x34
 800fe84:	ecbd 8b02 	vpop	{d8}
 800fe88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe8c:	4642      	mov	r2, r8
 800fe8e:	464b      	mov	r3, r9
 800fe90:	4640      	mov	r0, r8
 800fe92:	4649      	mov	r1, r9
 800fe94:	f7f0 fe4a 	bl	8000b2c <__aeabi_dcmpun>
 800fe98:	b140      	cbz	r0, 800feac <_printf_float+0xf0>
 800fe9a:	464b      	mov	r3, r9
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	bfbc      	itt	lt
 800fea0:	232d      	movlt	r3, #45	; 0x2d
 800fea2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fea6:	487f      	ldr	r0, [pc, #508]	; (80100a4 <_printf_float+0x2e8>)
 800fea8:	4b7f      	ldr	r3, [pc, #508]	; (80100a8 <_printf_float+0x2ec>)
 800feaa:	e7d1      	b.n	800fe50 <_printf_float+0x94>
 800feac:	6863      	ldr	r3, [r4, #4]
 800feae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800feb2:	9206      	str	r2, [sp, #24]
 800feb4:	1c5a      	adds	r2, r3, #1
 800feb6:	d13f      	bne.n	800ff38 <_printf_float+0x17c>
 800feb8:	2306      	movs	r3, #6
 800feba:	6063      	str	r3, [r4, #4]
 800febc:	9b05      	ldr	r3, [sp, #20]
 800febe:	6861      	ldr	r1, [r4, #4]
 800fec0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fec4:	2300      	movs	r3, #0
 800fec6:	9303      	str	r3, [sp, #12]
 800fec8:	ab0a      	add	r3, sp, #40	; 0x28
 800feca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fece:	ab09      	add	r3, sp, #36	; 0x24
 800fed0:	ec49 8b10 	vmov	d0, r8, r9
 800fed4:	9300      	str	r3, [sp, #0]
 800fed6:	6022      	str	r2, [r4, #0]
 800fed8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fedc:	4628      	mov	r0, r5
 800fede:	f7ff fecd 	bl	800fc7c <__cvt>
 800fee2:	9b06      	ldr	r3, [sp, #24]
 800fee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fee6:	2b47      	cmp	r3, #71	; 0x47
 800fee8:	4680      	mov	r8, r0
 800feea:	d108      	bne.n	800fefe <_printf_float+0x142>
 800feec:	1cc8      	adds	r0, r1, #3
 800feee:	db02      	blt.n	800fef6 <_printf_float+0x13a>
 800fef0:	6863      	ldr	r3, [r4, #4]
 800fef2:	4299      	cmp	r1, r3
 800fef4:	dd41      	ble.n	800ff7a <_printf_float+0x1be>
 800fef6:	f1ab 0b02 	sub.w	fp, fp, #2
 800fefa:	fa5f fb8b 	uxtb.w	fp, fp
 800fefe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ff02:	d820      	bhi.n	800ff46 <_printf_float+0x18a>
 800ff04:	3901      	subs	r1, #1
 800ff06:	465a      	mov	r2, fp
 800ff08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ff0c:	9109      	str	r1, [sp, #36]	; 0x24
 800ff0e:	f7ff ff17 	bl	800fd40 <__exponent>
 800ff12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff14:	1813      	adds	r3, r2, r0
 800ff16:	2a01      	cmp	r2, #1
 800ff18:	4681      	mov	r9, r0
 800ff1a:	6123      	str	r3, [r4, #16]
 800ff1c:	dc02      	bgt.n	800ff24 <_printf_float+0x168>
 800ff1e:	6822      	ldr	r2, [r4, #0]
 800ff20:	07d2      	lsls	r2, r2, #31
 800ff22:	d501      	bpl.n	800ff28 <_printf_float+0x16c>
 800ff24:	3301      	adds	r3, #1
 800ff26:	6123      	str	r3, [r4, #16]
 800ff28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d09c      	beq.n	800fe6a <_printf_float+0xae>
 800ff30:	232d      	movs	r3, #45	; 0x2d
 800ff32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff36:	e798      	b.n	800fe6a <_printf_float+0xae>
 800ff38:	9a06      	ldr	r2, [sp, #24]
 800ff3a:	2a47      	cmp	r2, #71	; 0x47
 800ff3c:	d1be      	bne.n	800febc <_printf_float+0x100>
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d1bc      	bne.n	800febc <_printf_float+0x100>
 800ff42:	2301      	movs	r3, #1
 800ff44:	e7b9      	b.n	800feba <_printf_float+0xfe>
 800ff46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ff4a:	d118      	bne.n	800ff7e <_printf_float+0x1c2>
 800ff4c:	2900      	cmp	r1, #0
 800ff4e:	6863      	ldr	r3, [r4, #4]
 800ff50:	dd0b      	ble.n	800ff6a <_printf_float+0x1ae>
 800ff52:	6121      	str	r1, [r4, #16]
 800ff54:	b913      	cbnz	r3, 800ff5c <_printf_float+0x1a0>
 800ff56:	6822      	ldr	r2, [r4, #0]
 800ff58:	07d0      	lsls	r0, r2, #31
 800ff5a:	d502      	bpl.n	800ff62 <_printf_float+0x1a6>
 800ff5c:	3301      	adds	r3, #1
 800ff5e:	440b      	add	r3, r1
 800ff60:	6123      	str	r3, [r4, #16]
 800ff62:	65a1      	str	r1, [r4, #88]	; 0x58
 800ff64:	f04f 0900 	mov.w	r9, #0
 800ff68:	e7de      	b.n	800ff28 <_printf_float+0x16c>
 800ff6a:	b913      	cbnz	r3, 800ff72 <_printf_float+0x1b6>
 800ff6c:	6822      	ldr	r2, [r4, #0]
 800ff6e:	07d2      	lsls	r2, r2, #31
 800ff70:	d501      	bpl.n	800ff76 <_printf_float+0x1ba>
 800ff72:	3302      	adds	r3, #2
 800ff74:	e7f4      	b.n	800ff60 <_printf_float+0x1a4>
 800ff76:	2301      	movs	r3, #1
 800ff78:	e7f2      	b.n	800ff60 <_printf_float+0x1a4>
 800ff7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ff7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff80:	4299      	cmp	r1, r3
 800ff82:	db05      	blt.n	800ff90 <_printf_float+0x1d4>
 800ff84:	6823      	ldr	r3, [r4, #0]
 800ff86:	6121      	str	r1, [r4, #16]
 800ff88:	07d8      	lsls	r0, r3, #31
 800ff8a:	d5ea      	bpl.n	800ff62 <_printf_float+0x1a6>
 800ff8c:	1c4b      	adds	r3, r1, #1
 800ff8e:	e7e7      	b.n	800ff60 <_printf_float+0x1a4>
 800ff90:	2900      	cmp	r1, #0
 800ff92:	bfd4      	ite	le
 800ff94:	f1c1 0202 	rsble	r2, r1, #2
 800ff98:	2201      	movgt	r2, #1
 800ff9a:	4413      	add	r3, r2
 800ff9c:	e7e0      	b.n	800ff60 <_printf_float+0x1a4>
 800ff9e:	6823      	ldr	r3, [r4, #0]
 800ffa0:	055a      	lsls	r2, r3, #21
 800ffa2:	d407      	bmi.n	800ffb4 <_printf_float+0x1f8>
 800ffa4:	6923      	ldr	r3, [r4, #16]
 800ffa6:	4642      	mov	r2, r8
 800ffa8:	4631      	mov	r1, r6
 800ffaa:	4628      	mov	r0, r5
 800ffac:	47b8      	blx	r7
 800ffae:	3001      	adds	r0, #1
 800ffb0:	d12c      	bne.n	801000c <_printf_float+0x250>
 800ffb2:	e764      	b.n	800fe7e <_printf_float+0xc2>
 800ffb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ffb8:	f240 80e0 	bls.w	801017c <_printf_float+0x3c0>
 800ffbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	f7f0 fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	d034      	beq.n	8010036 <_printf_float+0x27a>
 800ffcc:	4a37      	ldr	r2, [pc, #220]	; (80100ac <_printf_float+0x2f0>)
 800ffce:	2301      	movs	r3, #1
 800ffd0:	4631      	mov	r1, r6
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	47b8      	blx	r7
 800ffd6:	3001      	adds	r0, #1
 800ffd8:	f43f af51 	beq.w	800fe7e <_printf_float+0xc2>
 800ffdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	db02      	blt.n	800ffea <_printf_float+0x22e>
 800ffe4:	6823      	ldr	r3, [r4, #0]
 800ffe6:	07d8      	lsls	r0, r3, #31
 800ffe8:	d510      	bpl.n	801000c <_printf_float+0x250>
 800ffea:	ee18 3a10 	vmov	r3, s16
 800ffee:	4652      	mov	r2, sl
 800fff0:	4631      	mov	r1, r6
 800fff2:	4628      	mov	r0, r5
 800fff4:	47b8      	blx	r7
 800fff6:	3001      	adds	r0, #1
 800fff8:	f43f af41 	beq.w	800fe7e <_printf_float+0xc2>
 800fffc:	f04f 0800 	mov.w	r8, #0
 8010000:	f104 091a 	add.w	r9, r4, #26
 8010004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010006:	3b01      	subs	r3, #1
 8010008:	4543      	cmp	r3, r8
 801000a:	dc09      	bgt.n	8010020 <_printf_float+0x264>
 801000c:	6823      	ldr	r3, [r4, #0]
 801000e:	079b      	lsls	r3, r3, #30
 8010010:	f100 8105 	bmi.w	801021e <_printf_float+0x462>
 8010014:	68e0      	ldr	r0, [r4, #12]
 8010016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010018:	4298      	cmp	r0, r3
 801001a:	bfb8      	it	lt
 801001c:	4618      	movlt	r0, r3
 801001e:	e730      	b.n	800fe82 <_printf_float+0xc6>
 8010020:	2301      	movs	r3, #1
 8010022:	464a      	mov	r2, r9
 8010024:	4631      	mov	r1, r6
 8010026:	4628      	mov	r0, r5
 8010028:	47b8      	blx	r7
 801002a:	3001      	adds	r0, #1
 801002c:	f43f af27 	beq.w	800fe7e <_printf_float+0xc2>
 8010030:	f108 0801 	add.w	r8, r8, #1
 8010034:	e7e6      	b.n	8010004 <_printf_float+0x248>
 8010036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010038:	2b00      	cmp	r3, #0
 801003a:	dc39      	bgt.n	80100b0 <_printf_float+0x2f4>
 801003c:	4a1b      	ldr	r2, [pc, #108]	; (80100ac <_printf_float+0x2f0>)
 801003e:	2301      	movs	r3, #1
 8010040:	4631      	mov	r1, r6
 8010042:	4628      	mov	r0, r5
 8010044:	47b8      	blx	r7
 8010046:	3001      	adds	r0, #1
 8010048:	f43f af19 	beq.w	800fe7e <_printf_float+0xc2>
 801004c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010050:	4313      	orrs	r3, r2
 8010052:	d102      	bne.n	801005a <_printf_float+0x29e>
 8010054:	6823      	ldr	r3, [r4, #0]
 8010056:	07d9      	lsls	r1, r3, #31
 8010058:	d5d8      	bpl.n	801000c <_printf_float+0x250>
 801005a:	ee18 3a10 	vmov	r3, s16
 801005e:	4652      	mov	r2, sl
 8010060:	4631      	mov	r1, r6
 8010062:	4628      	mov	r0, r5
 8010064:	47b8      	blx	r7
 8010066:	3001      	adds	r0, #1
 8010068:	f43f af09 	beq.w	800fe7e <_printf_float+0xc2>
 801006c:	f04f 0900 	mov.w	r9, #0
 8010070:	f104 0a1a 	add.w	sl, r4, #26
 8010074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010076:	425b      	negs	r3, r3
 8010078:	454b      	cmp	r3, r9
 801007a:	dc01      	bgt.n	8010080 <_printf_float+0x2c4>
 801007c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801007e:	e792      	b.n	800ffa6 <_printf_float+0x1ea>
 8010080:	2301      	movs	r3, #1
 8010082:	4652      	mov	r2, sl
 8010084:	4631      	mov	r1, r6
 8010086:	4628      	mov	r0, r5
 8010088:	47b8      	blx	r7
 801008a:	3001      	adds	r0, #1
 801008c:	f43f aef7 	beq.w	800fe7e <_printf_float+0xc2>
 8010090:	f109 0901 	add.w	r9, r9, #1
 8010094:	e7ee      	b.n	8010074 <_printf_float+0x2b8>
 8010096:	bf00      	nop
 8010098:	7fefffff 	.word	0x7fefffff
 801009c:	080150a8 	.word	0x080150a8
 80100a0:	080150ac 	.word	0x080150ac
 80100a4:	080150b4 	.word	0x080150b4
 80100a8:	080150b0 	.word	0x080150b0
 80100ac:	080150b8 	.word	0x080150b8
 80100b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80100b4:	429a      	cmp	r2, r3
 80100b6:	bfa8      	it	ge
 80100b8:	461a      	movge	r2, r3
 80100ba:	2a00      	cmp	r2, #0
 80100bc:	4691      	mov	r9, r2
 80100be:	dc37      	bgt.n	8010130 <_printf_float+0x374>
 80100c0:	f04f 0b00 	mov.w	fp, #0
 80100c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80100c8:	f104 021a 	add.w	r2, r4, #26
 80100cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80100ce:	9305      	str	r3, [sp, #20]
 80100d0:	eba3 0309 	sub.w	r3, r3, r9
 80100d4:	455b      	cmp	r3, fp
 80100d6:	dc33      	bgt.n	8010140 <_printf_float+0x384>
 80100d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100dc:	429a      	cmp	r2, r3
 80100de:	db3b      	blt.n	8010158 <_printf_float+0x39c>
 80100e0:	6823      	ldr	r3, [r4, #0]
 80100e2:	07da      	lsls	r2, r3, #31
 80100e4:	d438      	bmi.n	8010158 <_printf_float+0x39c>
 80100e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100e8:	9a05      	ldr	r2, [sp, #20]
 80100ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100ec:	1a9a      	subs	r2, r3, r2
 80100ee:	eba3 0901 	sub.w	r9, r3, r1
 80100f2:	4591      	cmp	r9, r2
 80100f4:	bfa8      	it	ge
 80100f6:	4691      	movge	r9, r2
 80100f8:	f1b9 0f00 	cmp.w	r9, #0
 80100fc:	dc35      	bgt.n	801016a <_printf_float+0x3ae>
 80100fe:	f04f 0800 	mov.w	r8, #0
 8010102:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010106:	f104 0a1a 	add.w	sl, r4, #26
 801010a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801010e:	1a9b      	subs	r3, r3, r2
 8010110:	eba3 0309 	sub.w	r3, r3, r9
 8010114:	4543      	cmp	r3, r8
 8010116:	f77f af79 	ble.w	801000c <_printf_float+0x250>
 801011a:	2301      	movs	r3, #1
 801011c:	4652      	mov	r2, sl
 801011e:	4631      	mov	r1, r6
 8010120:	4628      	mov	r0, r5
 8010122:	47b8      	blx	r7
 8010124:	3001      	adds	r0, #1
 8010126:	f43f aeaa 	beq.w	800fe7e <_printf_float+0xc2>
 801012a:	f108 0801 	add.w	r8, r8, #1
 801012e:	e7ec      	b.n	801010a <_printf_float+0x34e>
 8010130:	4613      	mov	r3, r2
 8010132:	4631      	mov	r1, r6
 8010134:	4642      	mov	r2, r8
 8010136:	4628      	mov	r0, r5
 8010138:	47b8      	blx	r7
 801013a:	3001      	adds	r0, #1
 801013c:	d1c0      	bne.n	80100c0 <_printf_float+0x304>
 801013e:	e69e      	b.n	800fe7e <_printf_float+0xc2>
 8010140:	2301      	movs	r3, #1
 8010142:	4631      	mov	r1, r6
 8010144:	4628      	mov	r0, r5
 8010146:	9205      	str	r2, [sp, #20]
 8010148:	47b8      	blx	r7
 801014a:	3001      	adds	r0, #1
 801014c:	f43f ae97 	beq.w	800fe7e <_printf_float+0xc2>
 8010150:	9a05      	ldr	r2, [sp, #20]
 8010152:	f10b 0b01 	add.w	fp, fp, #1
 8010156:	e7b9      	b.n	80100cc <_printf_float+0x310>
 8010158:	ee18 3a10 	vmov	r3, s16
 801015c:	4652      	mov	r2, sl
 801015e:	4631      	mov	r1, r6
 8010160:	4628      	mov	r0, r5
 8010162:	47b8      	blx	r7
 8010164:	3001      	adds	r0, #1
 8010166:	d1be      	bne.n	80100e6 <_printf_float+0x32a>
 8010168:	e689      	b.n	800fe7e <_printf_float+0xc2>
 801016a:	9a05      	ldr	r2, [sp, #20]
 801016c:	464b      	mov	r3, r9
 801016e:	4442      	add	r2, r8
 8010170:	4631      	mov	r1, r6
 8010172:	4628      	mov	r0, r5
 8010174:	47b8      	blx	r7
 8010176:	3001      	adds	r0, #1
 8010178:	d1c1      	bne.n	80100fe <_printf_float+0x342>
 801017a:	e680      	b.n	800fe7e <_printf_float+0xc2>
 801017c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801017e:	2a01      	cmp	r2, #1
 8010180:	dc01      	bgt.n	8010186 <_printf_float+0x3ca>
 8010182:	07db      	lsls	r3, r3, #31
 8010184:	d538      	bpl.n	80101f8 <_printf_float+0x43c>
 8010186:	2301      	movs	r3, #1
 8010188:	4642      	mov	r2, r8
 801018a:	4631      	mov	r1, r6
 801018c:	4628      	mov	r0, r5
 801018e:	47b8      	blx	r7
 8010190:	3001      	adds	r0, #1
 8010192:	f43f ae74 	beq.w	800fe7e <_printf_float+0xc2>
 8010196:	ee18 3a10 	vmov	r3, s16
 801019a:	4652      	mov	r2, sl
 801019c:	4631      	mov	r1, r6
 801019e:	4628      	mov	r0, r5
 80101a0:	47b8      	blx	r7
 80101a2:	3001      	adds	r0, #1
 80101a4:	f43f ae6b 	beq.w	800fe7e <_printf_float+0xc2>
 80101a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80101ac:	2200      	movs	r2, #0
 80101ae:	2300      	movs	r3, #0
 80101b0:	f7f0 fc8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80101b4:	b9d8      	cbnz	r0, 80101ee <_printf_float+0x432>
 80101b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101b8:	f108 0201 	add.w	r2, r8, #1
 80101bc:	3b01      	subs	r3, #1
 80101be:	4631      	mov	r1, r6
 80101c0:	4628      	mov	r0, r5
 80101c2:	47b8      	blx	r7
 80101c4:	3001      	adds	r0, #1
 80101c6:	d10e      	bne.n	80101e6 <_printf_float+0x42a>
 80101c8:	e659      	b.n	800fe7e <_printf_float+0xc2>
 80101ca:	2301      	movs	r3, #1
 80101cc:	4652      	mov	r2, sl
 80101ce:	4631      	mov	r1, r6
 80101d0:	4628      	mov	r0, r5
 80101d2:	47b8      	blx	r7
 80101d4:	3001      	adds	r0, #1
 80101d6:	f43f ae52 	beq.w	800fe7e <_printf_float+0xc2>
 80101da:	f108 0801 	add.w	r8, r8, #1
 80101de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101e0:	3b01      	subs	r3, #1
 80101e2:	4543      	cmp	r3, r8
 80101e4:	dcf1      	bgt.n	80101ca <_printf_float+0x40e>
 80101e6:	464b      	mov	r3, r9
 80101e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80101ec:	e6dc      	b.n	800ffa8 <_printf_float+0x1ec>
 80101ee:	f04f 0800 	mov.w	r8, #0
 80101f2:	f104 0a1a 	add.w	sl, r4, #26
 80101f6:	e7f2      	b.n	80101de <_printf_float+0x422>
 80101f8:	2301      	movs	r3, #1
 80101fa:	4642      	mov	r2, r8
 80101fc:	e7df      	b.n	80101be <_printf_float+0x402>
 80101fe:	2301      	movs	r3, #1
 8010200:	464a      	mov	r2, r9
 8010202:	4631      	mov	r1, r6
 8010204:	4628      	mov	r0, r5
 8010206:	47b8      	blx	r7
 8010208:	3001      	adds	r0, #1
 801020a:	f43f ae38 	beq.w	800fe7e <_printf_float+0xc2>
 801020e:	f108 0801 	add.w	r8, r8, #1
 8010212:	68e3      	ldr	r3, [r4, #12]
 8010214:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010216:	1a5b      	subs	r3, r3, r1
 8010218:	4543      	cmp	r3, r8
 801021a:	dcf0      	bgt.n	80101fe <_printf_float+0x442>
 801021c:	e6fa      	b.n	8010014 <_printf_float+0x258>
 801021e:	f04f 0800 	mov.w	r8, #0
 8010222:	f104 0919 	add.w	r9, r4, #25
 8010226:	e7f4      	b.n	8010212 <_printf_float+0x456>

08010228 <_printf_common>:
 8010228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801022c:	4616      	mov	r6, r2
 801022e:	4699      	mov	r9, r3
 8010230:	688a      	ldr	r2, [r1, #8]
 8010232:	690b      	ldr	r3, [r1, #16]
 8010234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010238:	4293      	cmp	r3, r2
 801023a:	bfb8      	it	lt
 801023c:	4613      	movlt	r3, r2
 801023e:	6033      	str	r3, [r6, #0]
 8010240:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010244:	4607      	mov	r7, r0
 8010246:	460c      	mov	r4, r1
 8010248:	b10a      	cbz	r2, 801024e <_printf_common+0x26>
 801024a:	3301      	adds	r3, #1
 801024c:	6033      	str	r3, [r6, #0]
 801024e:	6823      	ldr	r3, [r4, #0]
 8010250:	0699      	lsls	r1, r3, #26
 8010252:	bf42      	ittt	mi
 8010254:	6833      	ldrmi	r3, [r6, #0]
 8010256:	3302      	addmi	r3, #2
 8010258:	6033      	strmi	r3, [r6, #0]
 801025a:	6825      	ldr	r5, [r4, #0]
 801025c:	f015 0506 	ands.w	r5, r5, #6
 8010260:	d106      	bne.n	8010270 <_printf_common+0x48>
 8010262:	f104 0a19 	add.w	sl, r4, #25
 8010266:	68e3      	ldr	r3, [r4, #12]
 8010268:	6832      	ldr	r2, [r6, #0]
 801026a:	1a9b      	subs	r3, r3, r2
 801026c:	42ab      	cmp	r3, r5
 801026e:	dc26      	bgt.n	80102be <_printf_common+0x96>
 8010270:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010274:	1e13      	subs	r3, r2, #0
 8010276:	6822      	ldr	r2, [r4, #0]
 8010278:	bf18      	it	ne
 801027a:	2301      	movne	r3, #1
 801027c:	0692      	lsls	r2, r2, #26
 801027e:	d42b      	bmi.n	80102d8 <_printf_common+0xb0>
 8010280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010284:	4649      	mov	r1, r9
 8010286:	4638      	mov	r0, r7
 8010288:	47c0      	blx	r8
 801028a:	3001      	adds	r0, #1
 801028c:	d01e      	beq.n	80102cc <_printf_common+0xa4>
 801028e:	6823      	ldr	r3, [r4, #0]
 8010290:	68e5      	ldr	r5, [r4, #12]
 8010292:	6832      	ldr	r2, [r6, #0]
 8010294:	f003 0306 	and.w	r3, r3, #6
 8010298:	2b04      	cmp	r3, #4
 801029a:	bf08      	it	eq
 801029c:	1aad      	subeq	r5, r5, r2
 801029e:	68a3      	ldr	r3, [r4, #8]
 80102a0:	6922      	ldr	r2, [r4, #16]
 80102a2:	bf0c      	ite	eq
 80102a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102a8:	2500      	movne	r5, #0
 80102aa:	4293      	cmp	r3, r2
 80102ac:	bfc4      	itt	gt
 80102ae:	1a9b      	subgt	r3, r3, r2
 80102b0:	18ed      	addgt	r5, r5, r3
 80102b2:	2600      	movs	r6, #0
 80102b4:	341a      	adds	r4, #26
 80102b6:	42b5      	cmp	r5, r6
 80102b8:	d11a      	bne.n	80102f0 <_printf_common+0xc8>
 80102ba:	2000      	movs	r0, #0
 80102bc:	e008      	b.n	80102d0 <_printf_common+0xa8>
 80102be:	2301      	movs	r3, #1
 80102c0:	4652      	mov	r2, sl
 80102c2:	4649      	mov	r1, r9
 80102c4:	4638      	mov	r0, r7
 80102c6:	47c0      	blx	r8
 80102c8:	3001      	adds	r0, #1
 80102ca:	d103      	bne.n	80102d4 <_printf_common+0xac>
 80102cc:	f04f 30ff 	mov.w	r0, #4294967295
 80102d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102d4:	3501      	adds	r5, #1
 80102d6:	e7c6      	b.n	8010266 <_printf_common+0x3e>
 80102d8:	18e1      	adds	r1, r4, r3
 80102da:	1c5a      	adds	r2, r3, #1
 80102dc:	2030      	movs	r0, #48	; 0x30
 80102de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80102e2:	4422      	add	r2, r4
 80102e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80102e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80102ec:	3302      	adds	r3, #2
 80102ee:	e7c7      	b.n	8010280 <_printf_common+0x58>
 80102f0:	2301      	movs	r3, #1
 80102f2:	4622      	mov	r2, r4
 80102f4:	4649      	mov	r1, r9
 80102f6:	4638      	mov	r0, r7
 80102f8:	47c0      	blx	r8
 80102fa:	3001      	adds	r0, #1
 80102fc:	d0e6      	beq.n	80102cc <_printf_common+0xa4>
 80102fe:	3601      	adds	r6, #1
 8010300:	e7d9      	b.n	80102b6 <_printf_common+0x8e>
	...

08010304 <_printf_i>:
 8010304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010308:	7e0f      	ldrb	r7, [r1, #24]
 801030a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801030c:	2f78      	cmp	r7, #120	; 0x78
 801030e:	4691      	mov	r9, r2
 8010310:	4680      	mov	r8, r0
 8010312:	460c      	mov	r4, r1
 8010314:	469a      	mov	sl, r3
 8010316:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801031a:	d807      	bhi.n	801032c <_printf_i+0x28>
 801031c:	2f62      	cmp	r7, #98	; 0x62
 801031e:	d80a      	bhi.n	8010336 <_printf_i+0x32>
 8010320:	2f00      	cmp	r7, #0
 8010322:	f000 80d8 	beq.w	80104d6 <_printf_i+0x1d2>
 8010326:	2f58      	cmp	r7, #88	; 0x58
 8010328:	f000 80a3 	beq.w	8010472 <_printf_i+0x16e>
 801032c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010334:	e03a      	b.n	80103ac <_printf_i+0xa8>
 8010336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801033a:	2b15      	cmp	r3, #21
 801033c:	d8f6      	bhi.n	801032c <_printf_i+0x28>
 801033e:	a101      	add	r1, pc, #4	; (adr r1, 8010344 <_printf_i+0x40>)
 8010340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010344:	0801039d 	.word	0x0801039d
 8010348:	080103b1 	.word	0x080103b1
 801034c:	0801032d 	.word	0x0801032d
 8010350:	0801032d 	.word	0x0801032d
 8010354:	0801032d 	.word	0x0801032d
 8010358:	0801032d 	.word	0x0801032d
 801035c:	080103b1 	.word	0x080103b1
 8010360:	0801032d 	.word	0x0801032d
 8010364:	0801032d 	.word	0x0801032d
 8010368:	0801032d 	.word	0x0801032d
 801036c:	0801032d 	.word	0x0801032d
 8010370:	080104bd 	.word	0x080104bd
 8010374:	080103e1 	.word	0x080103e1
 8010378:	0801049f 	.word	0x0801049f
 801037c:	0801032d 	.word	0x0801032d
 8010380:	0801032d 	.word	0x0801032d
 8010384:	080104df 	.word	0x080104df
 8010388:	0801032d 	.word	0x0801032d
 801038c:	080103e1 	.word	0x080103e1
 8010390:	0801032d 	.word	0x0801032d
 8010394:	0801032d 	.word	0x0801032d
 8010398:	080104a7 	.word	0x080104a7
 801039c:	682b      	ldr	r3, [r5, #0]
 801039e:	1d1a      	adds	r2, r3, #4
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	602a      	str	r2, [r5, #0]
 80103a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103ac:	2301      	movs	r3, #1
 80103ae:	e0a3      	b.n	80104f8 <_printf_i+0x1f4>
 80103b0:	6820      	ldr	r0, [r4, #0]
 80103b2:	6829      	ldr	r1, [r5, #0]
 80103b4:	0606      	lsls	r6, r0, #24
 80103b6:	f101 0304 	add.w	r3, r1, #4
 80103ba:	d50a      	bpl.n	80103d2 <_printf_i+0xce>
 80103bc:	680e      	ldr	r6, [r1, #0]
 80103be:	602b      	str	r3, [r5, #0]
 80103c0:	2e00      	cmp	r6, #0
 80103c2:	da03      	bge.n	80103cc <_printf_i+0xc8>
 80103c4:	232d      	movs	r3, #45	; 0x2d
 80103c6:	4276      	negs	r6, r6
 80103c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103cc:	485e      	ldr	r0, [pc, #376]	; (8010548 <_printf_i+0x244>)
 80103ce:	230a      	movs	r3, #10
 80103d0:	e019      	b.n	8010406 <_printf_i+0x102>
 80103d2:	680e      	ldr	r6, [r1, #0]
 80103d4:	602b      	str	r3, [r5, #0]
 80103d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80103da:	bf18      	it	ne
 80103dc:	b236      	sxthne	r6, r6
 80103de:	e7ef      	b.n	80103c0 <_printf_i+0xbc>
 80103e0:	682b      	ldr	r3, [r5, #0]
 80103e2:	6820      	ldr	r0, [r4, #0]
 80103e4:	1d19      	adds	r1, r3, #4
 80103e6:	6029      	str	r1, [r5, #0]
 80103e8:	0601      	lsls	r1, r0, #24
 80103ea:	d501      	bpl.n	80103f0 <_printf_i+0xec>
 80103ec:	681e      	ldr	r6, [r3, #0]
 80103ee:	e002      	b.n	80103f6 <_printf_i+0xf2>
 80103f0:	0646      	lsls	r6, r0, #25
 80103f2:	d5fb      	bpl.n	80103ec <_printf_i+0xe8>
 80103f4:	881e      	ldrh	r6, [r3, #0]
 80103f6:	4854      	ldr	r0, [pc, #336]	; (8010548 <_printf_i+0x244>)
 80103f8:	2f6f      	cmp	r7, #111	; 0x6f
 80103fa:	bf0c      	ite	eq
 80103fc:	2308      	moveq	r3, #8
 80103fe:	230a      	movne	r3, #10
 8010400:	2100      	movs	r1, #0
 8010402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010406:	6865      	ldr	r5, [r4, #4]
 8010408:	60a5      	str	r5, [r4, #8]
 801040a:	2d00      	cmp	r5, #0
 801040c:	bfa2      	ittt	ge
 801040e:	6821      	ldrge	r1, [r4, #0]
 8010410:	f021 0104 	bicge.w	r1, r1, #4
 8010414:	6021      	strge	r1, [r4, #0]
 8010416:	b90e      	cbnz	r6, 801041c <_printf_i+0x118>
 8010418:	2d00      	cmp	r5, #0
 801041a:	d04d      	beq.n	80104b8 <_printf_i+0x1b4>
 801041c:	4615      	mov	r5, r2
 801041e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010422:	fb03 6711 	mls	r7, r3, r1, r6
 8010426:	5dc7      	ldrb	r7, [r0, r7]
 8010428:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801042c:	4637      	mov	r7, r6
 801042e:	42bb      	cmp	r3, r7
 8010430:	460e      	mov	r6, r1
 8010432:	d9f4      	bls.n	801041e <_printf_i+0x11a>
 8010434:	2b08      	cmp	r3, #8
 8010436:	d10b      	bne.n	8010450 <_printf_i+0x14c>
 8010438:	6823      	ldr	r3, [r4, #0]
 801043a:	07de      	lsls	r6, r3, #31
 801043c:	d508      	bpl.n	8010450 <_printf_i+0x14c>
 801043e:	6923      	ldr	r3, [r4, #16]
 8010440:	6861      	ldr	r1, [r4, #4]
 8010442:	4299      	cmp	r1, r3
 8010444:	bfde      	ittt	le
 8010446:	2330      	movle	r3, #48	; 0x30
 8010448:	f805 3c01 	strble.w	r3, [r5, #-1]
 801044c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010450:	1b52      	subs	r2, r2, r5
 8010452:	6122      	str	r2, [r4, #16]
 8010454:	f8cd a000 	str.w	sl, [sp]
 8010458:	464b      	mov	r3, r9
 801045a:	aa03      	add	r2, sp, #12
 801045c:	4621      	mov	r1, r4
 801045e:	4640      	mov	r0, r8
 8010460:	f7ff fee2 	bl	8010228 <_printf_common>
 8010464:	3001      	adds	r0, #1
 8010466:	d14c      	bne.n	8010502 <_printf_i+0x1fe>
 8010468:	f04f 30ff 	mov.w	r0, #4294967295
 801046c:	b004      	add	sp, #16
 801046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010472:	4835      	ldr	r0, [pc, #212]	; (8010548 <_printf_i+0x244>)
 8010474:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010478:	6829      	ldr	r1, [r5, #0]
 801047a:	6823      	ldr	r3, [r4, #0]
 801047c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010480:	6029      	str	r1, [r5, #0]
 8010482:	061d      	lsls	r5, r3, #24
 8010484:	d514      	bpl.n	80104b0 <_printf_i+0x1ac>
 8010486:	07df      	lsls	r7, r3, #31
 8010488:	bf44      	itt	mi
 801048a:	f043 0320 	orrmi.w	r3, r3, #32
 801048e:	6023      	strmi	r3, [r4, #0]
 8010490:	b91e      	cbnz	r6, 801049a <_printf_i+0x196>
 8010492:	6823      	ldr	r3, [r4, #0]
 8010494:	f023 0320 	bic.w	r3, r3, #32
 8010498:	6023      	str	r3, [r4, #0]
 801049a:	2310      	movs	r3, #16
 801049c:	e7b0      	b.n	8010400 <_printf_i+0xfc>
 801049e:	6823      	ldr	r3, [r4, #0]
 80104a0:	f043 0320 	orr.w	r3, r3, #32
 80104a4:	6023      	str	r3, [r4, #0]
 80104a6:	2378      	movs	r3, #120	; 0x78
 80104a8:	4828      	ldr	r0, [pc, #160]	; (801054c <_printf_i+0x248>)
 80104aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80104ae:	e7e3      	b.n	8010478 <_printf_i+0x174>
 80104b0:	0659      	lsls	r1, r3, #25
 80104b2:	bf48      	it	mi
 80104b4:	b2b6      	uxthmi	r6, r6
 80104b6:	e7e6      	b.n	8010486 <_printf_i+0x182>
 80104b8:	4615      	mov	r5, r2
 80104ba:	e7bb      	b.n	8010434 <_printf_i+0x130>
 80104bc:	682b      	ldr	r3, [r5, #0]
 80104be:	6826      	ldr	r6, [r4, #0]
 80104c0:	6961      	ldr	r1, [r4, #20]
 80104c2:	1d18      	adds	r0, r3, #4
 80104c4:	6028      	str	r0, [r5, #0]
 80104c6:	0635      	lsls	r5, r6, #24
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	d501      	bpl.n	80104d0 <_printf_i+0x1cc>
 80104cc:	6019      	str	r1, [r3, #0]
 80104ce:	e002      	b.n	80104d6 <_printf_i+0x1d2>
 80104d0:	0670      	lsls	r0, r6, #25
 80104d2:	d5fb      	bpl.n	80104cc <_printf_i+0x1c8>
 80104d4:	8019      	strh	r1, [r3, #0]
 80104d6:	2300      	movs	r3, #0
 80104d8:	6123      	str	r3, [r4, #16]
 80104da:	4615      	mov	r5, r2
 80104dc:	e7ba      	b.n	8010454 <_printf_i+0x150>
 80104de:	682b      	ldr	r3, [r5, #0]
 80104e0:	1d1a      	adds	r2, r3, #4
 80104e2:	602a      	str	r2, [r5, #0]
 80104e4:	681d      	ldr	r5, [r3, #0]
 80104e6:	6862      	ldr	r2, [r4, #4]
 80104e8:	2100      	movs	r1, #0
 80104ea:	4628      	mov	r0, r5
 80104ec:	f7ef fe78 	bl	80001e0 <memchr>
 80104f0:	b108      	cbz	r0, 80104f6 <_printf_i+0x1f2>
 80104f2:	1b40      	subs	r0, r0, r5
 80104f4:	6060      	str	r0, [r4, #4]
 80104f6:	6863      	ldr	r3, [r4, #4]
 80104f8:	6123      	str	r3, [r4, #16]
 80104fa:	2300      	movs	r3, #0
 80104fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010500:	e7a8      	b.n	8010454 <_printf_i+0x150>
 8010502:	6923      	ldr	r3, [r4, #16]
 8010504:	462a      	mov	r2, r5
 8010506:	4649      	mov	r1, r9
 8010508:	4640      	mov	r0, r8
 801050a:	47d0      	blx	sl
 801050c:	3001      	adds	r0, #1
 801050e:	d0ab      	beq.n	8010468 <_printf_i+0x164>
 8010510:	6823      	ldr	r3, [r4, #0]
 8010512:	079b      	lsls	r3, r3, #30
 8010514:	d413      	bmi.n	801053e <_printf_i+0x23a>
 8010516:	68e0      	ldr	r0, [r4, #12]
 8010518:	9b03      	ldr	r3, [sp, #12]
 801051a:	4298      	cmp	r0, r3
 801051c:	bfb8      	it	lt
 801051e:	4618      	movlt	r0, r3
 8010520:	e7a4      	b.n	801046c <_printf_i+0x168>
 8010522:	2301      	movs	r3, #1
 8010524:	4632      	mov	r2, r6
 8010526:	4649      	mov	r1, r9
 8010528:	4640      	mov	r0, r8
 801052a:	47d0      	blx	sl
 801052c:	3001      	adds	r0, #1
 801052e:	d09b      	beq.n	8010468 <_printf_i+0x164>
 8010530:	3501      	adds	r5, #1
 8010532:	68e3      	ldr	r3, [r4, #12]
 8010534:	9903      	ldr	r1, [sp, #12]
 8010536:	1a5b      	subs	r3, r3, r1
 8010538:	42ab      	cmp	r3, r5
 801053a:	dcf2      	bgt.n	8010522 <_printf_i+0x21e>
 801053c:	e7eb      	b.n	8010516 <_printf_i+0x212>
 801053e:	2500      	movs	r5, #0
 8010540:	f104 0619 	add.w	r6, r4, #25
 8010544:	e7f5      	b.n	8010532 <_printf_i+0x22e>
 8010546:	bf00      	nop
 8010548:	080150ba 	.word	0x080150ba
 801054c:	080150cb 	.word	0x080150cb

08010550 <siprintf>:
 8010550:	b40e      	push	{r1, r2, r3}
 8010552:	b500      	push	{lr}
 8010554:	b09c      	sub	sp, #112	; 0x70
 8010556:	ab1d      	add	r3, sp, #116	; 0x74
 8010558:	9002      	str	r0, [sp, #8]
 801055a:	9006      	str	r0, [sp, #24]
 801055c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010560:	4809      	ldr	r0, [pc, #36]	; (8010588 <siprintf+0x38>)
 8010562:	9107      	str	r1, [sp, #28]
 8010564:	9104      	str	r1, [sp, #16]
 8010566:	4909      	ldr	r1, [pc, #36]	; (801058c <siprintf+0x3c>)
 8010568:	f853 2b04 	ldr.w	r2, [r3], #4
 801056c:	9105      	str	r1, [sp, #20]
 801056e:	6800      	ldr	r0, [r0, #0]
 8010570:	9301      	str	r3, [sp, #4]
 8010572:	a902      	add	r1, sp, #8
 8010574:	f001 fb68 	bl	8011c48 <_svfiprintf_r>
 8010578:	9b02      	ldr	r3, [sp, #8]
 801057a:	2200      	movs	r2, #0
 801057c:	701a      	strb	r2, [r3, #0]
 801057e:	b01c      	add	sp, #112	; 0x70
 8010580:	f85d eb04 	ldr.w	lr, [sp], #4
 8010584:	b003      	add	sp, #12
 8010586:	4770      	bx	lr
 8010588:	2000001c 	.word	0x2000001c
 801058c:	ffff0208 	.word	0xffff0208

08010590 <quorem>:
 8010590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010594:	6903      	ldr	r3, [r0, #16]
 8010596:	690c      	ldr	r4, [r1, #16]
 8010598:	42a3      	cmp	r3, r4
 801059a:	4607      	mov	r7, r0
 801059c:	f2c0 8081 	blt.w	80106a2 <quorem+0x112>
 80105a0:	3c01      	subs	r4, #1
 80105a2:	f101 0814 	add.w	r8, r1, #20
 80105a6:	f100 0514 	add.w	r5, r0, #20
 80105aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80105ae:	9301      	str	r3, [sp, #4]
 80105b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80105b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80105b8:	3301      	adds	r3, #1
 80105ba:	429a      	cmp	r2, r3
 80105bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80105c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80105c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80105c8:	d331      	bcc.n	801062e <quorem+0x9e>
 80105ca:	f04f 0e00 	mov.w	lr, #0
 80105ce:	4640      	mov	r0, r8
 80105d0:	46ac      	mov	ip, r5
 80105d2:	46f2      	mov	sl, lr
 80105d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80105d8:	b293      	uxth	r3, r2
 80105da:	fb06 e303 	mla	r3, r6, r3, lr
 80105de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	ebaa 0303 	sub.w	r3, sl, r3
 80105e8:	f8dc a000 	ldr.w	sl, [ip]
 80105ec:	0c12      	lsrs	r2, r2, #16
 80105ee:	fa13 f38a 	uxtah	r3, r3, sl
 80105f2:	fb06 e202 	mla	r2, r6, r2, lr
 80105f6:	9300      	str	r3, [sp, #0]
 80105f8:	9b00      	ldr	r3, [sp, #0]
 80105fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80105fe:	b292      	uxth	r2, r2
 8010600:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010604:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010608:	f8bd 3000 	ldrh.w	r3, [sp]
 801060c:	4581      	cmp	r9, r0
 801060e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010612:	f84c 3b04 	str.w	r3, [ip], #4
 8010616:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801061a:	d2db      	bcs.n	80105d4 <quorem+0x44>
 801061c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010620:	b92b      	cbnz	r3, 801062e <quorem+0x9e>
 8010622:	9b01      	ldr	r3, [sp, #4]
 8010624:	3b04      	subs	r3, #4
 8010626:	429d      	cmp	r5, r3
 8010628:	461a      	mov	r2, r3
 801062a:	d32e      	bcc.n	801068a <quorem+0xfa>
 801062c:	613c      	str	r4, [r7, #16]
 801062e:	4638      	mov	r0, r7
 8010630:	f001 f8b6 	bl	80117a0 <__mcmp>
 8010634:	2800      	cmp	r0, #0
 8010636:	db24      	blt.n	8010682 <quorem+0xf2>
 8010638:	3601      	adds	r6, #1
 801063a:	4628      	mov	r0, r5
 801063c:	f04f 0c00 	mov.w	ip, #0
 8010640:	f858 2b04 	ldr.w	r2, [r8], #4
 8010644:	f8d0 e000 	ldr.w	lr, [r0]
 8010648:	b293      	uxth	r3, r2
 801064a:	ebac 0303 	sub.w	r3, ip, r3
 801064e:	0c12      	lsrs	r2, r2, #16
 8010650:	fa13 f38e 	uxtah	r3, r3, lr
 8010654:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010658:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801065c:	b29b      	uxth	r3, r3
 801065e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010662:	45c1      	cmp	r9, r8
 8010664:	f840 3b04 	str.w	r3, [r0], #4
 8010668:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801066c:	d2e8      	bcs.n	8010640 <quorem+0xb0>
 801066e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010672:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010676:	b922      	cbnz	r2, 8010682 <quorem+0xf2>
 8010678:	3b04      	subs	r3, #4
 801067a:	429d      	cmp	r5, r3
 801067c:	461a      	mov	r2, r3
 801067e:	d30a      	bcc.n	8010696 <quorem+0x106>
 8010680:	613c      	str	r4, [r7, #16]
 8010682:	4630      	mov	r0, r6
 8010684:	b003      	add	sp, #12
 8010686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801068a:	6812      	ldr	r2, [r2, #0]
 801068c:	3b04      	subs	r3, #4
 801068e:	2a00      	cmp	r2, #0
 8010690:	d1cc      	bne.n	801062c <quorem+0x9c>
 8010692:	3c01      	subs	r4, #1
 8010694:	e7c7      	b.n	8010626 <quorem+0x96>
 8010696:	6812      	ldr	r2, [r2, #0]
 8010698:	3b04      	subs	r3, #4
 801069a:	2a00      	cmp	r2, #0
 801069c:	d1f0      	bne.n	8010680 <quorem+0xf0>
 801069e:	3c01      	subs	r4, #1
 80106a0:	e7eb      	b.n	801067a <quorem+0xea>
 80106a2:	2000      	movs	r0, #0
 80106a4:	e7ee      	b.n	8010684 <quorem+0xf4>
	...

080106a8 <_dtoa_r>:
 80106a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ac:	ed2d 8b04 	vpush	{d8-d9}
 80106b0:	ec57 6b10 	vmov	r6, r7, d0
 80106b4:	b093      	sub	sp, #76	; 0x4c
 80106b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80106b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80106bc:	9106      	str	r1, [sp, #24]
 80106be:	ee10 aa10 	vmov	sl, s0
 80106c2:	4604      	mov	r4, r0
 80106c4:	9209      	str	r2, [sp, #36]	; 0x24
 80106c6:	930c      	str	r3, [sp, #48]	; 0x30
 80106c8:	46bb      	mov	fp, r7
 80106ca:	b975      	cbnz	r5, 80106ea <_dtoa_r+0x42>
 80106cc:	2010      	movs	r0, #16
 80106ce:	f000 fddd 	bl	801128c <malloc>
 80106d2:	4602      	mov	r2, r0
 80106d4:	6260      	str	r0, [r4, #36]	; 0x24
 80106d6:	b920      	cbnz	r0, 80106e2 <_dtoa_r+0x3a>
 80106d8:	4ba7      	ldr	r3, [pc, #668]	; (8010978 <_dtoa_r+0x2d0>)
 80106da:	21ea      	movs	r1, #234	; 0xea
 80106dc:	48a7      	ldr	r0, [pc, #668]	; (801097c <_dtoa_r+0x2d4>)
 80106de:	f001 fbc3 	bl	8011e68 <__assert_func>
 80106e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80106e6:	6005      	str	r5, [r0, #0]
 80106e8:	60c5      	str	r5, [r0, #12]
 80106ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106ec:	6819      	ldr	r1, [r3, #0]
 80106ee:	b151      	cbz	r1, 8010706 <_dtoa_r+0x5e>
 80106f0:	685a      	ldr	r2, [r3, #4]
 80106f2:	604a      	str	r2, [r1, #4]
 80106f4:	2301      	movs	r3, #1
 80106f6:	4093      	lsls	r3, r2
 80106f8:	608b      	str	r3, [r1, #8]
 80106fa:	4620      	mov	r0, r4
 80106fc:	f000 fe0e 	bl	801131c <_Bfree>
 8010700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010702:	2200      	movs	r2, #0
 8010704:	601a      	str	r2, [r3, #0]
 8010706:	1e3b      	subs	r3, r7, #0
 8010708:	bfaa      	itet	ge
 801070a:	2300      	movge	r3, #0
 801070c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010710:	f8c8 3000 	strge.w	r3, [r8]
 8010714:	4b9a      	ldr	r3, [pc, #616]	; (8010980 <_dtoa_r+0x2d8>)
 8010716:	bfbc      	itt	lt
 8010718:	2201      	movlt	r2, #1
 801071a:	f8c8 2000 	strlt.w	r2, [r8]
 801071e:	ea33 030b 	bics.w	r3, r3, fp
 8010722:	d11b      	bne.n	801075c <_dtoa_r+0xb4>
 8010724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010726:	f242 730f 	movw	r3, #9999	; 0x270f
 801072a:	6013      	str	r3, [r2, #0]
 801072c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010730:	4333      	orrs	r3, r6
 8010732:	f000 8592 	beq.w	801125a <_dtoa_r+0xbb2>
 8010736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010738:	b963      	cbnz	r3, 8010754 <_dtoa_r+0xac>
 801073a:	4b92      	ldr	r3, [pc, #584]	; (8010984 <_dtoa_r+0x2dc>)
 801073c:	e022      	b.n	8010784 <_dtoa_r+0xdc>
 801073e:	4b92      	ldr	r3, [pc, #584]	; (8010988 <_dtoa_r+0x2e0>)
 8010740:	9301      	str	r3, [sp, #4]
 8010742:	3308      	adds	r3, #8
 8010744:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010746:	6013      	str	r3, [r2, #0]
 8010748:	9801      	ldr	r0, [sp, #4]
 801074a:	b013      	add	sp, #76	; 0x4c
 801074c:	ecbd 8b04 	vpop	{d8-d9}
 8010750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010754:	4b8b      	ldr	r3, [pc, #556]	; (8010984 <_dtoa_r+0x2dc>)
 8010756:	9301      	str	r3, [sp, #4]
 8010758:	3303      	adds	r3, #3
 801075a:	e7f3      	b.n	8010744 <_dtoa_r+0x9c>
 801075c:	2200      	movs	r2, #0
 801075e:	2300      	movs	r3, #0
 8010760:	4650      	mov	r0, sl
 8010762:	4659      	mov	r1, fp
 8010764:	f7f0 f9b0 	bl	8000ac8 <__aeabi_dcmpeq>
 8010768:	ec4b ab19 	vmov	d9, sl, fp
 801076c:	4680      	mov	r8, r0
 801076e:	b158      	cbz	r0, 8010788 <_dtoa_r+0xe0>
 8010770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010772:	2301      	movs	r3, #1
 8010774:	6013      	str	r3, [r2, #0]
 8010776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010778:	2b00      	cmp	r3, #0
 801077a:	f000 856b 	beq.w	8011254 <_dtoa_r+0xbac>
 801077e:	4883      	ldr	r0, [pc, #524]	; (801098c <_dtoa_r+0x2e4>)
 8010780:	6018      	str	r0, [r3, #0]
 8010782:	1e43      	subs	r3, r0, #1
 8010784:	9301      	str	r3, [sp, #4]
 8010786:	e7df      	b.n	8010748 <_dtoa_r+0xa0>
 8010788:	ec4b ab10 	vmov	d0, sl, fp
 801078c:	aa10      	add	r2, sp, #64	; 0x40
 801078e:	a911      	add	r1, sp, #68	; 0x44
 8010790:	4620      	mov	r0, r4
 8010792:	f001 f8ab 	bl	80118ec <__d2b>
 8010796:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801079a:	ee08 0a10 	vmov	s16, r0
 801079e:	2d00      	cmp	r5, #0
 80107a0:	f000 8084 	beq.w	80108ac <_dtoa_r+0x204>
 80107a4:	ee19 3a90 	vmov	r3, s19
 80107a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80107b0:	4656      	mov	r6, sl
 80107b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80107b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80107ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80107be:	4b74      	ldr	r3, [pc, #464]	; (8010990 <_dtoa_r+0x2e8>)
 80107c0:	2200      	movs	r2, #0
 80107c2:	4630      	mov	r0, r6
 80107c4:	4639      	mov	r1, r7
 80107c6:	f7ef fd5f 	bl	8000288 <__aeabi_dsub>
 80107ca:	a365      	add	r3, pc, #404	; (adr r3, 8010960 <_dtoa_r+0x2b8>)
 80107cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d0:	f7ef ff12 	bl	80005f8 <__aeabi_dmul>
 80107d4:	a364      	add	r3, pc, #400	; (adr r3, 8010968 <_dtoa_r+0x2c0>)
 80107d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107da:	f7ef fd57 	bl	800028c <__adddf3>
 80107de:	4606      	mov	r6, r0
 80107e0:	4628      	mov	r0, r5
 80107e2:	460f      	mov	r7, r1
 80107e4:	f7ef fe9e 	bl	8000524 <__aeabi_i2d>
 80107e8:	a361      	add	r3, pc, #388	; (adr r3, 8010970 <_dtoa_r+0x2c8>)
 80107ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ee:	f7ef ff03 	bl	80005f8 <__aeabi_dmul>
 80107f2:	4602      	mov	r2, r0
 80107f4:	460b      	mov	r3, r1
 80107f6:	4630      	mov	r0, r6
 80107f8:	4639      	mov	r1, r7
 80107fa:	f7ef fd47 	bl	800028c <__adddf3>
 80107fe:	4606      	mov	r6, r0
 8010800:	460f      	mov	r7, r1
 8010802:	f7f0 f9a9 	bl	8000b58 <__aeabi_d2iz>
 8010806:	2200      	movs	r2, #0
 8010808:	9000      	str	r0, [sp, #0]
 801080a:	2300      	movs	r3, #0
 801080c:	4630      	mov	r0, r6
 801080e:	4639      	mov	r1, r7
 8010810:	f7f0 f964 	bl	8000adc <__aeabi_dcmplt>
 8010814:	b150      	cbz	r0, 801082c <_dtoa_r+0x184>
 8010816:	9800      	ldr	r0, [sp, #0]
 8010818:	f7ef fe84 	bl	8000524 <__aeabi_i2d>
 801081c:	4632      	mov	r2, r6
 801081e:	463b      	mov	r3, r7
 8010820:	f7f0 f952 	bl	8000ac8 <__aeabi_dcmpeq>
 8010824:	b910      	cbnz	r0, 801082c <_dtoa_r+0x184>
 8010826:	9b00      	ldr	r3, [sp, #0]
 8010828:	3b01      	subs	r3, #1
 801082a:	9300      	str	r3, [sp, #0]
 801082c:	9b00      	ldr	r3, [sp, #0]
 801082e:	2b16      	cmp	r3, #22
 8010830:	d85a      	bhi.n	80108e8 <_dtoa_r+0x240>
 8010832:	9a00      	ldr	r2, [sp, #0]
 8010834:	4b57      	ldr	r3, [pc, #348]	; (8010994 <_dtoa_r+0x2ec>)
 8010836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801083a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083e:	ec51 0b19 	vmov	r0, r1, d9
 8010842:	f7f0 f94b 	bl	8000adc <__aeabi_dcmplt>
 8010846:	2800      	cmp	r0, #0
 8010848:	d050      	beq.n	80108ec <_dtoa_r+0x244>
 801084a:	9b00      	ldr	r3, [sp, #0]
 801084c:	3b01      	subs	r3, #1
 801084e:	9300      	str	r3, [sp, #0]
 8010850:	2300      	movs	r3, #0
 8010852:	930b      	str	r3, [sp, #44]	; 0x2c
 8010854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010856:	1b5d      	subs	r5, r3, r5
 8010858:	1e6b      	subs	r3, r5, #1
 801085a:	9305      	str	r3, [sp, #20]
 801085c:	bf45      	ittet	mi
 801085e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010862:	9304      	strmi	r3, [sp, #16]
 8010864:	2300      	movpl	r3, #0
 8010866:	2300      	movmi	r3, #0
 8010868:	bf4c      	ite	mi
 801086a:	9305      	strmi	r3, [sp, #20]
 801086c:	9304      	strpl	r3, [sp, #16]
 801086e:	9b00      	ldr	r3, [sp, #0]
 8010870:	2b00      	cmp	r3, #0
 8010872:	db3d      	blt.n	80108f0 <_dtoa_r+0x248>
 8010874:	9b05      	ldr	r3, [sp, #20]
 8010876:	9a00      	ldr	r2, [sp, #0]
 8010878:	920a      	str	r2, [sp, #40]	; 0x28
 801087a:	4413      	add	r3, r2
 801087c:	9305      	str	r3, [sp, #20]
 801087e:	2300      	movs	r3, #0
 8010880:	9307      	str	r3, [sp, #28]
 8010882:	9b06      	ldr	r3, [sp, #24]
 8010884:	2b09      	cmp	r3, #9
 8010886:	f200 8089 	bhi.w	801099c <_dtoa_r+0x2f4>
 801088a:	2b05      	cmp	r3, #5
 801088c:	bfc4      	itt	gt
 801088e:	3b04      	subgt	r3, #4
 8010890:	9306      	strgt	r3, [sp, #24]
 8010892:	9b06      	ldr	r3, [sp, #24]
 8010894:	f1a3 0302 	sub.w	r3, r3, #2
 8010898:	bfcc      	ite	gt
 801089a:	2500      	movgt	r5, #0
 801089c:	2501      	movle	r5, #1
 801089e:	2b03      	cmp	r3, #3
 80108a0:	f200 8087 	bhi.w	80109b2 <_dtoa_r+0x30a>
 80108a4:	e8df f003 	tbb	[pc, r3]
 80108a8:	59383a2d 	.word	0x59383a2d
 80108ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80108b0:	441d      	add	r5, r3
 80108b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80108b6:	2b20      	cmp	r3, #32
 80108b8:	bfc1      	itttt	gt
 80108ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80108be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80108c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80108c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80108ca:	bfda      	itte	le
 80108cc:	f1c3 0320 	rsble	r3, r3, #32
 80108d0:	fa06 f003 	lslle.w	r0, r6, r3
 80108d4:	4318      	orrgt	r0, r3
 80108d6:	f7ef fe15 	bl	8000504 <__aeabi_ui2d>
 80108da:	2301      	movs	r3, #1
 80108dc:	4606      	mov	r6, r0
 80108de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80108e2:	3d01      	subs	r5, #1
 80108e4:	930e      	str	r3, [sp, #56]	; 0x38
 80108e6:	e76a      	b.n	80107be <_dtoa_r+0x116>
 80108e8:	2301      	movs	r3, #1
 80108ea:	e7b2      	b.n	8010852 <_dtoa_r+0x1aa>
 80108ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80108ee:	e7b1      	b.n	8010854 <_dtoa_r+0x1ac>
 80108f0:	9b04      	ldr	r3, [sp, #16]
 80108f2:	9a00      	ldr	r2, [sp, #0]
 80108f4:	1a9b      	subs	r3, r3, r2
 80108f6:	9304      	str	r3, [sp, #16]
 80108f8:	4253      	negs	r3, r2
 80108fa:	9307      	str	r3, [sp, #28]
 80108fc:	2300      	movs	r3, #0
 80108fe:	930a      	str	r3, [sp, #40]	; 0x28
 8010900:	e7bf      	b.n	8010882 <_dtoa_r+0x1da>
 8010902:	2300      	movs	r3, #0
 8010904:	9308      	str	r3, [sp, #32]
 8010906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010908:	2b00      	cmp	r3, #0
 801090a:	dc55      	bgt.n	80109b8 <_dtoa_r+0x310>
 801090c:	2301      	movs	r3, #1
 801090e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010912:	461a      	mov	r2, r3
 8010914:	9209      	str	r2, [sp, #36]	; 0x24
 8010916:	e00c      	b.n	8010932 <_dtoa_r+0x28a>
 8010918:	2301      	movs	r3, #1
 801091a:	e7f3      	b.n	8010904 <_dtoa_r+0x25c>
 801091c:	2300      	movs	r3, #0
 801091e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010920:	9308      	str	r3, [sp, #32]
 8010922:	9b00      	ldr	r3, [sp, #0]
 8010924:	4413      	add	r3, r2
 8010926:	9302      	str	r3, [sp, #8]
 8010928:	3301      	adds	r3, #1
 801092a:	2b01      	cmp	r3, #1
 801092c:	9303      	str	r3, [sp, #12]
 801092e:	bfb8      	it	lt
 8010930:	2301      	movlt	r3, #1
 8010932:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010934:	2200      	movs	r2, #0
 8010936:	6042      	str	r2, [r0, #4]
 8010938:	2204      	movs	r2, #4
 801093a:	f102 0614 	add.w	r6, r2, #20
 801093e:	429e      	cmp	r6, r3
 8010940:	6841      	ldr	r1, [r0, #4]
 8010942:	d93d      	bls.n	80109c0 <_dtoa_r+0x318>
 8010944:	4620      	mov	r0, r4
 8010946:	f000 fca9 	bl	801129c <_Balloc>
 801094a:	9001      	str	r0, [sp, #4]
 801094c:	2800      	cmp	r0, #0
 801094e:	d13b      	bne.n	80109c8 <_dtoa_r+0x320>
 8010950:	4b11      	ldr	r3, [pc, #68]	; (8010998 <_dtoa_r+0x2f0>)
 8010952:	4602      	mov	r2, r0
 8010954:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010958:	e6c0      	b.n	80106dc <_dtoa_r+0x34>
 801095a:	2301      	movs	r3, #1
 801095c:	e7df      	b.n	801091e <_dtoa_r+0x276>
 801095e:	bf00      	nop
 8010960:	636f4361 	.word	0x636f4361
 8010964:	3fd287a7 	.word	0x3fd287a7
 8010968:	8b60c8b3 	.word	0x8b60c8b3
 801096c:	3fc68a28 	.word	0x3fc68a28
 8010970:	509f79fb 	.word	0x509f79fb
 8010974:	3fd34413 	.word	0x3fd34413
 8010978:	080150e9 	.word	0x080150e9
 801097c:	08015100 	.word	0x08015100
 8010980:	7ff00000 	.word	0x7ff00000
 8010984:	080150e5 	.word	0x080150e5
 8010988:	080150dc 	.word	0x080150dc
 801098c:	080150b9 	.word	0x080150b9
 8010990:	3ff80000 	.word	0x3ff80000
 8010994:	080151f0 	.word	0x080151f0
 8010998:	0801515b 	.word	0x0801515b
 801099c:	2501      	movs	r5, #1
 801099e:	2300      	movs	r3, #0
 80109a0:	9306      	str	r3, [sp, #24]
 80109a2:	9508      	str	r5, [sp, #32]
 80109a4:	f04f 33ff 	mov.w	r3, #4294967295
 80109a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80109ac:	2200      	movs	r2, #0
 80109ae:	2312      	movs	r3, #18
 80109b0:	e7b0      	b.n	8010914 <_dtoa_r+0x26c>
 80109b2:	2301      	movs	r3, #1
 80109b4:	9308      	str	r3, [sp, #32]
 80109b6:	e7f5      	b.n	80109a4 <_dtoa_r+0x2fc>
 80109b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80109be:	e7b8      	b.n	8010932 <_dtoa_r+0x28a>
 80109c0:	3101      	adds	r1, #1
 80109c2:	6041      	str	r1, [r0, #4]
 80109c4:	0052      	lsls	r2, r2, #1
 80109c6:	e7b8      	b.n	801093a <_dtoa_r+0x292>
 80109c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109ca:	9a01      	ldr	r2, [sp, #4]
 80109cc:	601a      	str	r2, [r3, #0]
 80109ce:	9b03      	ldr	r3, [sp, #12]
 80109d0:	2b0e      	cmp	r3, #14
 80109d2:	f200 809d 	bhi.w	8010b10 <_dtoa_r+0x468>
 80109d6:	2d00      	cmp	r5, #0
 80109d8:	f000 809a 	beq.w	8010b10 <_dtoa_r+0x468>
 80109dc:	9b00      	ldr	r3, [sp, #0]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	dd32      	ble.n	8010a48 <_dtoa_r+0x3a0>
 80109e2:	4ab7      	ldr	r2, [pc, #732]	; (8010cc0 <_dtoa_r+0x618>)
 80109e4:	f003 030f 	and.w	r3, r3, #15
 80109e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80109ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80109f0:	9b00      	ldr	r3, [sp, #0]
 80109f2:	05d8      	lsls	r0, r3, #23
 80109f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80109f8:	d516      	bpl.n	8010a28 <_dtoa_r+0x380>
 80109fa:	4bb2      	ldr	r3, [pc, #712]	; (8010cc4 <_dtoa_r+0x61c>)
 80109fc:	ec51 0b19 	vmov	r0, r1, d9
 8010a00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a04:	f7ef ff22 	bl	800084c <__aeabi_ddiv>
 8010a08:	f007 070f 	and.w	r7, r7, #15
 8010a0c:	4682      	mov	sl, r0
 8010a0e:	468b      	mov	fp, r1
 8010a10:	2503      	movs	r5, #3
 8010a12:	4eac      	ldr	r6, [pc, #688]	; (8010cc4 <_dtoa_r+0x61c>)
 8010a14:	b957      	cbnz	r7, 8010a2c <_dtoa_r+0x384>
 8010a16:	4642      	mov	r2, r8
 8010a18:	464b      	mov	r3, r9
 8010a1a:	4650      	mov	r0, sl
 8010a1c:	4659      	mov	r1, fp
 8010a1e:	f7ef ff15 	bl	800084c <__aeabi_ddiv>
 8010a22:	4682      	mov	sl, r0
 8010a24:	468b      	mov	fp, r1
 8010a26:	e028      	b.n	8010a7a <_dtoa_r+0x3d2>
 8010a28:	2502      	movs	r5, #2
 8010a2a:	e7f2      	b.n	8010a12 <_dtoa_r+0x36a>
 8010a2c:	07f9      	lsls	r1, r7, #31
 8010a2e:	d508      	bpl.n	8010a42 <_dtoa_r+0x39a>
 8010a30:	4640      	mov	r0, r8
 8010a32:	4649      	mov	r1, r9
 8010a34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010a38:	f7ef fdde 	bl	80005f8 <__aeabi_dmul>
 8010a3c:	3501      	adds	r5, #1
 8010a3e:	4680      	mov	r8, r0
 8010a40:	4689      	mov	r9, r1
 8010a42:	107f      	asrs	r7, r7, #1
 8010a44:	3608      	adds	r6, #8
 8010a46:	e7e5      	b.n	8010a14 <_dtoa_r+0x36c>
 8010a48:	f000 809b 	beq.w	8010b82 <_dtoa_r+0x4da>
 8010a4c:	9b00      	ldr	r3, [sp, #0]
 8010a4e:	4f9d      	ldr	r7, [pc, #628]	; (8010cc4 <_dtoa_r+0x61c>)
 8010a50:	425e      	negs	r6, r3
 8010a52:	4b9b      	ldr	r3, [pc, #620]	; (8010cc0 <_dtoa_r+0x618>)
 8010a54:	f006 020f 	and.w	r2, r6, #15
 8010a58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a60:	ec51 0b19 	vmov	r0, r1, d9
 8010a64:	f7ef fdc8 	bl	80005f8 <__aeabi_dmul>
 8010a68:	1136      	asrs	r6, r6, #4
 8010a6a:	4682      	mov	sl, r0
 8010a6c:	468b      	mov	fp, r1
 8010a6e:	2300      	movs	r3, #0
 8010a70:	2502      	movs	r5, #2
 8010a72:	2e00      	cmp	r6, #0
 8010a74:	d17a      	bne.n	8010b6c <_dtoa_r+0x4c4>
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d1d3      	bne.n	8010a22 <_dtoa_r+0x37a>
 8010a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	f000 8082 	beq.w	8010b86 <_dtoa_r+0x4de>
 8010a82:	4b91      	ldr	r3, [pc, #580]	; (8010cc8 <_dtoa_r+0x620>)
 8010a84:	2200      	movs	r2, #0
 8010a86:	4650      	mov	r0, sl
 8010a88:	4659      	mov	r1, fp
 8010a8a:	f7f0 f827 	bl	8000adc <__aeabi_dcmplt>
 8010a8e:	2800      	cmp	r0, #0
 8010a90:	d079      	beq.n	8010b86 <_dtoa_r+0x4de>
 8010a92:	9b03      	ldr	r3, [sp, #12]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d076      	beq.n	8010b86 <_dtoa_r+0x4de>
 8010a98:	9b02      	ldr	r3, [sp, #8]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	dd36      	ble.n	8010b0c <_dtoa_r+0x464>
 8010a9e:	9b00      	ldr	r3, [sp, #0]
 8010aa0:	4650      	mov	r0, sl
 8010aa2:	4659      	mov	r1, fp
 8010aa4:	1e5f      	subs	r7, r3, #1
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	4b88      	ldr	r3, [pc, #544]	; (8010ccc <_dtoa_r+0x624>)
 8010aaa:	f7ef fda5 	bl	80005f8 <__aeabi_dmul>
 8010aae:	9e02      	ldr	r6, [sp, #8]
 8010ab0:	4682      	mov	sl, r0
 8010ab2:	468b      	mov	fp, r1
 8010ab4:	3501      	adds	r5, #1
 8010ab6:	4628      	mov	r0, r5
 8010ab8:	f7ef fd34 	bl	8000524 <__aeabi_i2d>
 8010abc:	4652      	mov	r2, sl
 8010abe:	465b      	mov	r3, fp
 8010ac0:	f7ef fd9a 	bl	80005f8 <__aeabi_dmul>
 8010ac4:	4b82      	ldr	r3, [pc, #520]	; (8010cd0 <_dtoa_r+0x628>)
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	f7ef fbe0 	bl	800028c <__adddf3>
 8010acc:	46d0      	mov	r8, sl
 8010ace:	46d9      	mov	r9, fp
 8010ad0:	4682      	mov	sl, r0
 8010ad2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010ad6:	2e00      	cmp	r6, #0
 8010ad8:	d158      	bne.n	8010b8c <_dtoa_r+0x4e4>
 8010ada:	4b7e      	ldr	r3, [pc, #504]	; (8010cd4 <_dtoa_r+0x62c>)
 8010adc:	2200      	movs	r2, #0
 8010ade:	4640      	mov	r0, r8
 8010ae0:	4649      	mov	r1, r9
 8010ae2:	f7ef fbd1 	bl	8000288 <__aeabi_dsub>
 8010ae6:	4652      	mov	r2, sl
 8010ae8:	465b      	mov	r3, fp
 8010aea:	4680      	mov	r8, r0
 8010aec:	4689      	mov	r9, r1
 8010aee:	f7f0 f813 	bl	8000b18 <__aeabi_dcmpgt>
 8010af2:	2800      	cmp	r0, #0
 8010af4:	f040 8295 	bne.w	8011022 <_dtoa_r+0x97a>
 8010af8:	4652      	mov	r2, sl
 8010afa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010afe:	4640      	mov	r0, r8
 8010b00:	4649      	mov	r1, r9
 8010b02:	f7ef ffeb 	bl	8000adc <__aeabi_dcmplt>
 8010b06:	2800      	cmp	r0, #0
 8010b08:	f040 8289 	bne.w	801101e <_dtoa_r+0x976>
 8010b0c:	ec5b ab19 	vmov	sl, fp, d9
 8010b10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	f2c0 8148 	blt.w	8010da8 <_dtoa_r+0x700>
 8010b18:	9a00      	ldr	r2, [sp, #0]
 8010b1a:	2a0e      	cmp	r2, #14
 8010b1c:	f300 8144 	bgt.w	8010da8 <_dtoa_r+0x700>
 8010b20:	4b67      	ldr	r3, [pc, #412]	; (8010cc0 <_dtoa_r+0x618>)
 8010b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	f280 80d5 	bge.w	8010cdc <_dtoa_r+0x634>
 8010b32:	9b03      	ldr	r3, [sp, #12]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	f300 80d1 	bgt.w	8010cdc <_dtoa_r+0x634>
 8010b3a:	f040 826f 	bne.w	801101c <_dtoa_r+0x974>
 8010b3e:	4b65      	ldr	r3, [pc, #404]	; (8010cd4 <_dtoa_r+0x62c>)
 8010b40:	2200      	movs	r2, #0
 8010b42:	4640      	mov	r0, r8
 8010b44:	4649      	mov	r1, r9
 8010b46:	f7ef fd57 	bl	80005f8 <__aeabi_dmul>
 8010b4a:	4652      	mov	r2, sl
 8010b4c:	465b      	mov	r3, fp
 8010b4e:	f7ef ffd9 	bl	8000b04 <__aeabi_dcmpge>
 8010b52:	9e03      	ldr	r6, [sp, #12]
 8010b54:	4637      	mov	r7, r6
 8010b56:	2800      	cmp	r0, #0
 8010b58:	f040 8245 	bne.w	8010fe6 <_dtoa_r+0x93e>
 8010b5c:	9d01      	ldr	r5, [sp, #4]
 8010b5e:	2331      	movs	r3, #49	; 0x31
 8010b60:	f805 3b01 	strb.w	r3, [r5], #1
 8010b64:	9b00      	ldr	r3, [sp, #0]
 8010b66:	3301      	adds	r3, #1
 8010b68:	9300      	str	r3, [sp, #0]
 8010b6a:	e240      	b.n	8010fee <_dtoa_r+0x946>
 8010b6c:	07f2      	lsls	r2, r6, #31
 8010b6e:	d505      	bpl.n	8010b7c <_dtoa_r+0x4d4>
 8010b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b74:	f7ef fd40 	bl	80005f8 <__aeabi_dmul>
 8010b78:	3501      	adds	r5, #1
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	1076      	asrs	r6, r6, #1
 8010b7e:	3708      	adds	r7, #8
 8010b80:	e777      	b.n	8010a72 <_dtoa_r+0x3ca>
 8010b82:	2502      	movs	r5, #2
 8010b84:	e779      	b.n	8010a7a <_dtoa_r+0x3d2>
 8010b86:	9f00      	ldr	r7, [sp, #0]
 8010b88:	9e03      	ldr	r6, [sp, #12]
 8010b8a:	e794      	b.n	8010ab6 <_dtoa_r+0x40e>
 8010b8c:	9901      	ldr	r1, [sp, #4]
 8010b8e:	4b4c      	ldr	r3, [pc, #304]	; (8010cc0 <_dtoa_r+0x618>)
 8010b90:	4431      	add	r1, r6
 8010b92:	910d      	str	r1, [sp, #52]	; 0x34
 8010b94:	9908      	ldr	r1, [sp, #32]
 8010b96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010b9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010b9e:	2900      	cmp	r1, #0
 8010ba0:	d043      	beq.n	8010c2a <_dtoa_r+0x582>
 8010ba2:	494d      	ldr	r1, [pc, #308]	; (8010cd8 <_dtoa_r+0x630>)
 8010ba4:	2000      	movs	r0, #0
 8010ba6:	f7ef fe51 	bl	800084c <__aeabi_ddiv>
 8010baa:	4652      	mov	r2, sl
 8010bac:	465b      	mov	r3, fp
 8010bae:	f7ef fb6b 	bl	8000288 <__aeabi_dsub>
 8010bb2:	9d01      	ldr	r5, [sp, #4]
 8010bb4:	4682      	mov	sl, r0
 8010bb6:	468b      	mov	fp, r1
 8010bb8:	4649      	mov	r1, r9
 8010bba:	4640      	mov	r0, r8
 8010bbc:	f7ef ffcc 	bl	8000b58 <__aeabi_d2iz>
 8010bc0:	4606      	mov	r6, r0
 8010bc2:	f7ef fcaf 	bl	8000524 <__aeabi_i2d>
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	460b      	mov	r3, r1
 8010bca:	4640      	mov	r0, r8
 8010bcc:	4649      	mov	r1, r9
 8010bce:	f7ef fb5b 	bl	8000288 <__aeabi_dsub>
 8010bd2:	3630      	adds	r6, #48	; 0x30
 8010bd4:	f805 6b01 	strb.w	r6, [r5], #1
 8010bd8:	4652      	mov	r2, sl
 8010bda:	465b      	mov	r3, fp
 8010bdc:	4680      	mov	r8, r0
 8010bde:	4689      	mov	r9, r1
 8010be0:	f7ef ff7c 	bl	8000adc <__aeabi_dcmplt>
 8010be4:	2800      	cmp	r0, #0
 8010be6:	d163      	bne.n	8010cb0 <_dtoa_r+0x608>
 8010be8:	4642      	mov	r2, r8
 8010bea:	464b      	mov	r3, r9
 8010bec:	4936      	ldr	r1, [pc, #216]	; (8010cc8 <_dtoa_r+0x620>)
 8010bee:	2000      	movs	r0, #0
 8010bf0:	f7ef fb4a 	bl	8000288 <__aeabi_dsub>
 8010bf4:	4652      	mov	r2, sl
 8010bf6:	465b      	mov	r3, fp
 8010bf8:	f7ef ff70 	bl	8000adc <__aeabi_dcmplt>
 8010bfc:	2800      	cmp	r0, #0
 8010bfe:	f040 80b5 	bne.w	8010d6c <_dtoa_r+0x6c4>
 8010c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c04:	429d      	cmp	r5, r3
 8010c06:	d081      	beq.n	8010b0c <_dtoa_r+0x464>
 8010c08:	4b30      	ldr	r3, [pc, #192]	; (8010ccc <_dtoa_r+0x624>)
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	4650      	mov	r0, sl
 8010c0e:	4659      	mov	r1, fp
 8010c10:	f7ef fcf2 	bl	80005f8 <__aeabi_dmul>
 8010c14:	4b2d      	ldr	r3, [pc, #180]	; (8010ccc <_dtoa_r+0x624>)
 8010c16:	4682      	mov	sl, r0
 8010c18:	468b      	mov	fp, r1
 8010c1a:	4640      	mov	r0, r8
 8010c1c:	4649      	mov	r1, r9
 8010c1e:	2200      	movs	r2, #0
 8010c20:	f7ef fcea 	bl	80005f8 <__aeabi_dmul>
 8010c24:	4680      	mov	r8, r0
 8010c26:	4689      	mov	r9, r1
 8010c28:	e7c6      	b.n	8010bb8 <_dtoa_r+0x510>
 8010c2a:	4650      	mov	r0, sl
 8010c2c:	4659      	mov	r1, fp
 8010c2e:	f7ef fce3 	bl	80005f8 <__aeabi_dmul>
 8010c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c34:	9d01      	ldr	r5, [sp, #4]
 8010c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c38:	4682      	mov	sl, r0
 8010c3a:	468b      	mov	fp, r1
 8010c3c:	4649      	mov	r1, r9
 8010c3e:	4640      	mov	r0, r8
 8010c40:	f7ef ff8a 	bl	8000b58 <__aeabi_d2iz>
 8010c44:	4606      	mov	r6, r0
 8010c46:	f7ef fc6d 	bl	8000524 <__aeabi_i2d>
 8010c4a:	3630      	adds	r6, #48	; 0x30
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	460b      	mov	r3, r1
 8010c50:	4640      	mov	r0, r8
 8010c52:	4649      	mov	r1, r9
 8010c54:	f7ef fb18 	bl	8000288 <__aeabi_dsub>
 8010c58:	f805 6b01 	strb.w	r6, [r5], #1
 8010c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c5e:	429d      	cmp	r5, r3
 8010c60:	4680      	mov	r8, r0
 8010c62:	4689      	mov	r9, r1
 8010c64:	f04f 0200 	mov.w	r2, #0
 8010c68:	d124      	bne.n	8010cb4 <_dtoa_r+0x60c>
 8010c6a:	4b1b      	ldr	r3, [pc, #108]	; (8010cd8 <_dtoa_r+0x630>)
 8010c6c:	4650      	mov	r0, sl
 8010c6e:	4659      	mov	r1, fp
 8010c70:	f7ef fb0c 	bl	800028c <__adddf3>
 8010c74:	4602      	mov	r2, r0
 8010c76:	460b      	mov	r3, r1
 8010c78:	4640      	mov	r0, r8
 8010c7a:	4649      	mov	r1, r9
 8010c7c:	f7ef ff4c 	bl	8000b18 <__aeabi_dcmpgt>
 8010c80:	2800      	cmp	r0, #0
 8010c82:	d173      	bne.n	8010d6c <_dtoa_r+0x6c4>
 8010c84:	4652      	mov	r2, sl
 8010c86:	465b      	mov	r3, fp
 8010c88:	4913      	ldr	r1, [pc, #76]	; (8010cd8 <_dtoa_r+0x630>)
 8010c8a:	2000      	movs	r0, #0
 8010c8c:	f7ef fafc 	bl	8000288 <__aeabi_dsub>
 8010c90:	4602      	mov	r2, r0
 8010c92:	460b      	mov	r3, r1
 8010c94:	4640      	mov	r0, r8
 8010c96:	4649      	mov	r1, r9
 8010c98:	f7ef ff20 	bl	8000adc <__aeabi_dcmplt>
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	f43f af35 	beq.w	8010b0c <_dtoa_r+0x464>
 8010ca2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010ca4:	1e6b      	subs	r3, r5, #1
 8010ca6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ca8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010cac:	2b30      	cmp	r3, #48	; 0x30
 8010cae:	d0f8      	beq.n	8010ca2 <_dtoa_r+0x5fa>
 8010cb0:	9700      	str	r7, [sp, #0]
 8010cb2:	e049      	b.n	8010d48 <_dtoa_r+0x6a0>
 8010cb4:	4b05      	ldr	r3, [pc, #20]	; (8010ccc <_dtoa_r+0x624>)
 8010cb6:	f7ef fc9f 	bl	80005f8 <__aeabi_dmul>
 8010cba:	4680      	mov	r8, r0
 8010cbc:	4689      	mov	r9, r1
 8010cbe:	e7bd      	b.n	8010c3c <_dtoa_r+0x594>
 8010cc0:	080151f0 	.word	0x080151f0
 8010cc4:	080151c8 	.word	0x080151c8
 8010cc8:	3ff00000 	.word	0x3ff00000
 8010ccc:	40240000 	.word	0x40240000
 8010cd0:	401c0000 	.word	0x401c0000
 8010cd4:	40140000 	.word	0x40140000
 8010cd8:	3fe00000 	.word	0x3fe00000
 8010cdc:	9d01      	ldr	r5, [sp, #4]
 8010cde:	4656      	mov	r6, sl
 8010ce0:	465f      	mov	r7, fp
 8010ce2:	4642      	mov	r2, r8
 8010ce4:	464b      	mov	r3, r9
 8010ce6:	4630      	mov	r0, r6
 8010ce8:	4639      	mov	r1, r7
 8010cea:	f7ef fdaf 	bl	800084c <__aeabi_ddiv>
 8010cee:	f7ef ff33 	bl	8000b58 <__aeabi_d2iz>
 8010cf2:	4682      	mov	sl, r0
 8010cf4:	f7ef fc16 	bl	8000524 <__aeabi_i2d>
 8010cf8:	4642      	mov	r2, r8
 8010cfa:	464b      	mov	r3, r9
 8010cfc:	f7ef fc7c 	bl	80005f8 <__aeabi_dmul>
 8010d00:	4602      	mov	r2, r0
 8010d02:	460b      	mov	r3, r1
 8010d04:	4630      	mov	r0, r6
 8010d06:	4639      	mov	r1, r7
 8010d08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010d0c:	f7ef fabc 	bl	8000288 <__aeabi_dsub>
 8010d10:	f805 6b01 	strb.w	r6, [r5], #1
 8010d14:	9e01      	ldr	r6, [sp, #4]
 8010d16:	9f03      	ldr	r7, [sp, #12]
 8010d18:	1bae      	subs	r6, r5, r6
 8010d1a:	42b7      	cmp	r7, r6
 8010d1c:	4602      	mov	r2, r0
 8010d1e:	460b      	mov	r3, r1
 8010d20:	d135      	bne.n	8010d8e <_dtoa_r+0x6e6>
 8010d22:	f7ef fab3 	bl	800028c <__adddf3>
 8010d26:	4642      	mov	r2, r8
 8010d28:	464b      	mov	r3, r9
 8010d2a:	4606      	mov	r6, r0
 8010d2c:	460f      	mov	r7, r1
 8010d2e:	f7ef fef3 	bl	8000b18 <__aeabi_dcmpgt>
 8010d32:	b9d0      	cbnz	r0, 8010d6a <_dtoa_r+0x6c2>
 8010d34:	4642      	mov	r2, r8
 8010d36:	464b      	mov	r3, r9
 8010d38:	4630      	mov	r0, r6
 8010d3a:	4639      	mov	r1, r7
 8010d3c:	f7ef fec4 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d40:	b110      	cbz	r0, 8010d48 <_dtoa_r+0x6a0>
 8010d42:	f01a 0f01 	tst.w	sl, #1
 8010d46:	d110      	bne.n	8010d6a <_dtoa_r+0x6c2>
 8010d48:	4620      	mov	r0, r4
 8010d4a:	ee18 1a10 	vmov	r1, s16
 8010d4e:	f000 fae5 	bl	801131c <_Bfree>
 8010d52:	2300      	movs	r3, #0
 8010d54:	9800      	ldr	r0, [sp, #0]
 8010d56:	702b      	strb	r3, [r5, #0]
 8010d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d5a:	3001      	adds	r0, #1
 8010d5c:	6018      	str	r0, [r3, #0]
 8010d5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	f43f acf1 	beq.w	8010748 <_dtoa_r+0xa0>
 8010d66:	601d      	str	r5, [r3, #0]
 8010d68:	e4ee      	b.n	8010748 <_dtoa_r+0xa0>
 8010d6a:	9f00      	ldr	r7, [sp, #0]
 8010d6c:	462b      	mov	r3, r5
 8010d6e:	461d      	mov	r5, r3
 8010d70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d74:	2a39      	cmp	r2, #57	; 0x39
 8010d76:	d106      	bne.n	8010d86 <_dtoa_r+0x6de>
 8010d78:	9a01      	ldr	r2, [sp, #4]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d1f7      	bne.n	8010d6e <_dtoa_r+0x6c6>
 8010d7e:	9901      	ldr	r1, [sp, #4]
 8010d80:	2230      	movs	r2, #48	; 0x30
 8010d82:	3701      	adds	r7, #1
 8010d84:	700a      	strb	r2, [r1, #0]
 8010d86:	781a      	ldrb	r2, [r3, #0]
 8010d88:	3201      	adds	r2, #1
 8010d8a:	701a      	strb	r2, [r3, #0]
 8010d8c:	e790      	b.n	8010cb0 <_dtoa_r+0x608>
 8010d8e:	4ba6      	ldr	r3, [pc, #664]	; (8011028 <_dtoa_r+0x980>)
 8010d90:	2200      	movs	r2, #0
 8010d92:	f7ef fc31 	bl	80005f8 <__aeabi_dmul>
 8010d96:	2200      	movs	r2, #0
 8010d98:	2300      	movs	r3, #0
 8010d9a:	4606      	mov	r6, r0
 8010d9c:	460f      	mov	r7, r1
 8010d9e:	f7ef fe93 	bl	8000ac8 <__aeabi_dcmpeq>
 8010da2:	2800      	cmp	r0, #0
 8010da4:	d09d      	beq.n	8010ce2 <_dtoa_r+0x63a>
 8010da6:	e7cf      	b.n	8010d48 <_dtoa_r+0x6a0>
 8010da8:	9a08      	ldr	r2, [sp, #32]
 8010daa:	2a00      	cmp	r2, #0
 8010dac:	f000 80d7 	beq.w	8010f5e <_dtoa_r+0x8b6>
 8010db0:	9a06      	ldr	r2, [sp, #24]
 8010db2:	2a01      	cmp	r2, #1
 8010db4:	f300 80ba 	bgt.w	8010f2c <_dtoa_r+0x884>
 8010db8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010dba:	2a00      	cmp	r2, #0
 8010dbc:	f000 80b2 	beq.w	8010f24 <_dtoa_r+0x87c>
 8010dc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010dc4:	9e07      	ldr	r6, [sp, #28]
 8010dc6:	9d04      	ldr	r5, [sp, #16]
 8010dc8:	9a04      	ldr	r2, [sp, #16]
 8010dca:	441a      	add	r2, r3
 8010dcc:	9204      	str	r2, [sp, #16]
 8010dce:	9a05      	ldr	r2, [sp, #20]
 8010dd0:	2101      	movs	r1, #1
 8010dd2:	441a      	add	r2, r3
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	9205      	str	r2, [sp, #20]
 8010dd8:	f000 fb58 	bl	801148c <__i2b>
 8010ddc:	4607      	mov	r7, r0
 8010dde:	2d00      	cmp	r5, #0
 8010de0:	dd0c      	ble.n	8010dfc <_dtoa_r+0x754>
 8010de2:	9b05      	ldr	r3, [sp, #20]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	dd09      	ble.n	8010dfc <_dtoa_r+0x754>
 8010de8:	42ab      	cmp	r3, r5
 8010dea:	9a04      	ldr	r2, [sp, #16]
 8010dec:	bfa8      	it	ge
 8010dee:	462b      	movge	r3, r5
 8010df0:	1ad2      	subs	r2, r2, r3
 8010df2:	9204      	str	r2, [sp, #16]
 8010df4:	9a05      	ldr	r2, [sp, #20]
 8010df6:	1aed      	subs	r5, r5, r3
 8010df8:	1ad3      	subs	r3, r2, r3
 8010dfa:	9305      	str	r3, [sp, #20]
 8010dfc:	9b07      	ldr	r3, [sp, #28]
 8010dfe:	b31b      	cbz	r3, 8010e48 <_dtoa_r+0x7a0>
 8010e00:	9b08      	ldr	r3, [sp, #32]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f000 80af 	beq.w	8010f66 <_dtoa_r+0x8be>
 8010e08:	2e00      	cmp	r6, #0
 8010e0a:	dd13      	ble.n	8010e34 <_dtoa_r+0x78c>
 8010e0c:	4639      	mov	r1, r7
 8010e0e:	4632      	mov	r2, r6
 8010e10:	4620      	mov	r0, r4
 8010e12:	f000 fbfb 	bl	801160c <__pow5mult>
 8010e16:	ee18 2a10 	vmov	r2, s16
 8010e1a:	4601      	mov	r1, r0
 8010e1c:	4607      	mov	r7, r0
 8010e1e:	4620      	mov	r0, r4
 8010e20:	f000 fb4a 	bl	80114b8 <__multiply>
 8010e24:	ee18 1a10 	vmov	r1, s16
 8010e28:	4680      	mov	r8, r0
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	f000 fa76 	bl	801131c <_Bfree>
 8010e30:	ee08 8a10 	vmov	s16, r8
 8010e34:	9b07      	ldr	r3, [sp, #28]
 8010e36:	1b9a      	subs	r2, r3, r6
 8010e38:	d006      	beq.n	8010e48 <_dtoa_r+0x7a0>
 8010e3a:	ee18 1a10 	vmov	r1, s16
 8010e3e:	4620      	mov	r0, r4
 8010e40:	f000 fbe4 	bl	801160c <__pow5mult>
 8010e44:	ee08 0a10 	vmov	s16, r0
 8010e48:	2101      	movs	r1, #1
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	f000 fb1e 	bl	801148c <__i2b>
 8010e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	4606      	mov	r6, r0
 8010e56:	f340 8088 	ble.w	8010f6a <_dtoa_r+0x8c2>
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	4601      	mov	r1, r0
 8010e5e:	4620      	mov	r0, r4
 8010e60:	f000 fbd4 	bl	801160c <__pow5mult>
 8010e64:	9b06      	ldr	r3, [sp, #24]
 8010e66:	2b01      	cmp	r3, #1
 8010e68:	4606      	mov	r6, r0
 8010e6a:	f340 8081 	ble.w	8010f70 <_dtoa_r+0x8c8>
 8010e6e:	f04f 0800 	mov.w	r8, #0
 8010e72:	6933      	ldr	r3, [r6, #16]
 8010e74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010e78:	6918      	ldr	r0, [r3, #16]
 8010e7a:	f000 fab7 	bl	80113ec <__hi0bits>
 8010e7e:	f1c0 0020 	rsb	r0, r0, #32
 8010e82:	9b05      	ldr	r3, [sp, #20]
 8010e84:	4418      	add	r0, r3
 8010e86:	f010 001f 	ands.w	r0, r0, #31
 8010e8a:	f000 8092 	beq.w	8010fb2 <_dtoa_r+0x90a>
 8010e8e:	f1c0 0320 	rsb	r3, r0, #32
 8010e92:	2b04      	cmp	r3, #4
 8010e94:	f340 808a 	ble.w	8010fac <_dtoa_r+0x904>
 8010e98:	f1c0 001c 	rsb	r0, r0, #28
 8010e9c:	9b04      	ldr	r3, [sp, #16]
 8010e9e:	4403      	add	r3, r0
 8010ea0:	9304      	str	r3, [sp, #16]
 8010ea2:	9b05      	ldr	r3, [sp, #20]
 8010ea4:	4403      	add	r3, r0
 8010ea6:	4405      	add	r5, r0
 8010ea8:	9305      	str	r3, [sp, #20]
 8010eaa:	9b04      	ldr	r3, [sp, #16]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	dd07      	ble.n	8010ec0 <_dtoa_r+0x818>
 8010eb0:	ee18 1a10 	vmov	r1, s16
 8010eb4:	461a      	mov	r2, r3
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	f000 fc02 	bl	80116c0 <__lshift>
 8010ebc:	ee08 0a10 	vmov	s16, r0
 8010ec0:	9b05      	ldr	r3, [sp, #20]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	dd05      	ble.n	8010ed2 <_dtoa_r+0x82a>
 8010ec6:	4631      	mov	r1, r6
 8010ec8:	461a      	mov	r2, r3
 8010eca:	4620      	mov	r0, r4
 8010ecc:	f000 fbf8 	bl	80116c0 <__lshift>
 8010ed0:	4606      	mov	r6, r0
 8010ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d06e      	beq.n	8010fb6 <_dtoa_r+0x90e>
 8010ed8:	ee18 0a10 	vmov	r0, s16
 8010edc:	4631      	mov	r1, r6
 8010ede:	f000 fc5f 	bl	80117a0 <__mcmp>
 8010ee2:	2800      	cmp	r0, #0
 8010ee4:	da67      	bge.n	8010fb6 <_dtoa_r+0x90e>
 8010ee6:	9b00      	ldr	r3, [sp, #0]
 8010ee8:	3b01      	subs	r3, #1
 8010eea:	ee18 1a10 	vmov	r1, s16
 8010eee:	9300      	str	r3, [sp, #0]
 8010ef0:	220a      	movs	r2, #10
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f000 fa33 	bl	8011360 <__multadd>
 8010efa:	9b08      	ldr	r3, [sp, #32]
 8010efc:	ee08 0a10 	vmov	s16, r0
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	f000 81b1 	beq.w	8011268 <_dtoa_r+0xbc0>
 8010f06:	2300      	movs	r3, #0
 8010f08:	4639      	mov	r1, r7
 8010f0a:	220a      	movs	r2, #10
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	f000 fa27 	bl	8011360 <__multadd>
 8010f12:	9b02      	ldr	r3, [sp, #8]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	4607      	mov	r7, r0
 8010f18:	f300 808e 	bgt.w	8011038 <_dtoa_r+0x990>
 8010f1c:	9b06      	ldr	r3, [sp, #24]
 8010f1e:	2b02      	cmp	r3, #2
 8010f20:	dc51      	bgt.n	8010fc6 <_dtoa_r+0x91e>
 8010f22:	e089      	b.n	8011038 <_dtoa_r+0x990>
 8010f24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010f2a:	e74b      	b.n	8010dc4 <_dtoa_r+0x71c>
 8010f2c:	9b03      	ldr	r3, [sp, #12]
 8010f2e:	1e5e      	subs	r6, r3, #1
 8010f30:	9b07      	ldr	r3, [sp, #28]
 8010f32:	42b3      	cmp	r3, r6
 8010f34:	bfbf      	itttt	lt
 8010f36:	9b07      	ldrlt	r3, [sp, #28]
 8010f38:	9607      	strlt	r6, [sp, #28]
 8010f3a:	1af2      	sublt	r2, r6, r3
 8010f3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010f3e:	bfb6      	itet	lt
 8010f40:	189b      	addlt	r3, r3, r2
 8010f42:	1b9e      	subge	r6, r3, r6
 8010f44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010f46:	9b03      	ldr	r3, [sp, #12]
 8010f48:	bfb8      	it	lt
 8010f4a:	2600      	movlt	r6, #0
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	bfb7      	itett	lt
 8010f50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010f54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010f58:	1a9d      	sublt	r5, r3, r2
 8010f5a:	2300      	movlt	r3, #0
 8010f5c:	e734      	b.n	8010dc8 <_dtoa_r+0x720>
 8010f5e:	9e07      	ldr	r6, [sp, #28]
 8010f60:	9d04      	ldr	r5, [sp, #16]
 8010f62:	9f08      	ldr	r7, [sp, #32]
 8010f64:	e73b      	b.n	8010dde <_dtoa_r+0x736>
 8010f66:	9a07      	ldr	r2, [sp, #28]
 8010f68:	e767      	b.n	8010e3a <_dtoa_r+0x792>
 8010f6a:	9b06      	ldr	r3, [sp, #24]
 8010f6c:	2b01      	cmp	r3, #1
 8010f6e:	dc18      	bgt.n	8010fa2 <_dtoa_r+0x8fa>
 8010f70:	f1ba 0f00 	cmp.w	sl, #0
 8010f74:	d115      	bne.n	8010fa2 <_dtoa_r+0x8fa>
 8010f76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f7a:	b993      	cbnz	r3, 8010fa2 <_dtoa_r+0x8fa>
 8010f7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010f80:	0d1b      	lsrs	r3, r3, #20
 8010f82:	051b      	lsls	r3, r3, #20
 8010f84:	b183      	cbz	r3, 8010fa8 <_dtoa_r+0x900>
 8010f86:	9b04      	ldr	r3, [sp, #16]
 8010f88:	3301      	adds	r3, #1
 8010f8a:	9304      	str	r3, [sp, #16]
 8010f8c:	9b05      	ldr	r3, [sp, #20]
 8010f8e:	3301      	adds	r3, #1
 8010f90:	9305      	str	r3, [sp, #20]
 8010f92:	f04f 0801 	mov.w	r8, #1
 8010f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	f47f af6a 	bne.w	8010e72 <_dtoa_r+0x7ca>
 8010f9e:	2001      	movs	r0, #1
 8010fa0:	e76f      	b.n	8010e82 <_dtoa_r+0x7da>
 8010fa2:	f04f 0800 	mov.w	r8, #0
 8010fa6:	e7f6      	b.n	8010f96 <_dtoa_r+0x8ee>
 8010fa8:	4698      	mov	r8, r3
 8010faa:	e7f4      	b.n	8010f96 <_dtoa_r+0x8ee>
 8010fac:	f43f af7d 	beq.w	8010eaa <_dtoa_r+0x802>
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	301c      	adds	r0, #28
 8010fb4:	e772      	b.n	8010e9c <_dtoa_r+0x7f4>
 8010fb6:	9b03      	ldr	r3, [sp, #12]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	dc37      	bgt.n	801102c <_dtoa_r+0x984>
 8010fbc:	9b06      	ldr	r3, [sp, #24]
 8010fbe:	2b02      	cmp	r3, #2
 8010fc0:	dd34      	ble.n	801102c <_dtoa_r+0x984>
 8010fc2:	9b03      	ldr	r3, [sp, #12]
 8010fc4:	9302      	str	r3, [sp, #8]
 8010fc6:	9b02      	ldr	r3, [sp, #8]
 8010fc8:	b96b      	cbnz	r3, 8010fe6 <_dtoa_r+0x93e>
 8010fca:	4631      	mov	r1, r6
 8010fcc:	2205      	movs	r2, #5
 8010fce:	4620      	mov	r0, r4
 8010fd0:	f000 f9c6 	bl	8011360 <__multadd>
 8010fd4:	4601      	mov	r1, r0
 8010fd6:	4606      	mov	r6, r0
 8010fd8:	ee18 0a10 	vmov	r0, s16
 8010fdc:	f000 fbe0 	bl	80117a0 <__mcmp>
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	f73f adbb 	bgt.w	8010b5c <_dtoa_r+0x4b4>
 8010fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fe8:	9d01      	ldr	r5, [sp, #4]
 8010fea:	43db      	mvns	r3, r3
 8010fec:	9300      	str	r3, [sp, #0]
 8010fee:	f04f 0800 	mov.w	r8, #0
 8010ff2:	4631      	mov	r1, r6
 8010ff4:	4620      	mov	r0, r4
 8010ff6:	f000 f991 	bl	801131c <_Bfree>
 8010ffa:	2f00      	cmp	r7, #0
 8010ffc:	f43f aea4 	beq.w	8010d48 <_dtoa_r+0x6a0>
 8011000:	f1b8 0f00 	cmp.w	r8, #0
 8011004:	d005      	beq.n	8011012 <_dtoa_r+0x96a>
 8011006:	45b8      	cmp	r8, r7
 8011008:	d003      	beq.n	8011012 <_dtoa_r+0x96a>
 801100a:	4641      	mov	r1, r8
 801100c:	4620      	mov	r0, r4
 801100e:	f000 f985 	bl	801131c <_Bfree>
 8011012:	4639      	mov	r1, r7
 8011014:	4620      	mov	r0, r4
 8011016:	f000 f981 	bl	801131c <_Bfree>
 801101a:	e695      	b.n	8010d48 <_dtoa_r+0x6a0>
 801101c:	2600      	movs	r6, #0
 801101e:	4637      	mov	r7, r6
 8011020:	e7e1      	b.n	8010fe6 <_dtoa_r+0x93e>
 8011022:	9700      	str	r7, [sp, #0]
 8011024:	4637      	mov	r7, r6
 8011026:	e599      	b.n	8010b5c <_dtoa_r+0x4b4>
 8011028:	40240000 	.word	0x40240000
 801102c:	9b08      	ldr	r3, [sp, #32]
 801102e:	2b00      	cmp	r3, #0
 8011030:	f000 80ca 	beq.w	80111c8 <_dtoa_r+0xb20>
 8011034:	9b03      	ldr	r3, [sp, #12]
 8011036:	9302      	str	r3, [sp, #8]
 8011038:	2d00      	cmp	r5, #0
 801103a:	dd05      	ble.n	8011048 <_dtoa_r+0x9a0>
 801103c:	4639      	mov	r1, r7
 801103e:	462a      	mov	r2, r5
 8011040:	4620      	mov	r0, r4
 8011042:	f000 fb3d 	bl	80116c0 <__lshift>
 8011046:	4607      	mov	r7, r0
 8011048:	f1b8 0f00 	cmp.w	r8, #0
 801104c:	d05b      	beq.n	8011106 <_dtoa_r+0xa5e>
 801104e:	6879      	ldr	r1, [r7, #4]
 8011050:	4620      	mov	r0, r4
 8011052:	f000 f923 	bl	801129c <_Balloc>
 8011056:	4605      	mov	r5, r0
 8011058:	b928      	cbnz	r0, 8011066 <_dtoa_r+0x9be>
 801105a:	4b87      	ldr	r3, [pc, #540]	; (8011278 <_dtoa_r+0xbd0>)
 801105c:	4602      	mov	r2, r0
 801105e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011062:	f7ff bb3b 	b.w	80106dc <_dtoa_r+0x34>
 8011066:	693a      	ldr	r2, [r7, #16]
 8011068:	3202      	adds	r2, #2
 801106a:	0092      	lsls	r2, r2, #2
 801106c:	f107 010c 	add.w	r1, r7, #12
 8011070:	300c      	adds	r0, #12
 8011072:	f7fe fded 	bl	800fc50 <memcpy>
 8011076:	2201      	movs	r2, #1
 8011078:	4629      	mov	r1, r5
 801107a:	4620      	mov	r0, r4
 801107c:	f000 fb20 	bl	80116c0 <__lshift>
 8011080:	9b01      	ldr	r3, [sp, #4]
 8011082:	f103 0901 	add.w	r9, r3, #1
 8011086:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801108a:	4413      	add	r3, r2
 801108c:	9305      	str	r3, [sp, #20]
 801108e:	f00a 0301 	and.w	r3, sl, #1
 8011092:	46b8      	mov	r8, r7
 8011094:	9304      	str	r3, [sp, #16]
 8011096:	4607      	mov	r7, r0
 8011098:	4631      	mov	r1, r6
 801109a:	ee18 0a10 	vmov	r0, s16
 801109e:	f7ff fa77 	bl	8010590 <quorem>
 80110a2:	4641      	mov	r1, r8
 80110a4:	9002      	str	r0, [sp, #8]
 80110a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80110aa:	ee18 0a10 	vmov	r0, s16
 80110ae:	f000 fb77 	bl	80117a0 <__mcmp>
 80110b2:	463a      	mov	r2, r7
 80110b4:	9003      	str	r0, [sp, #12]
 80110b6:	4631      	mov	r1, r6
 80110b8:	4620      	mov	r0, r4
 80110ba:	f000 fb8d 	bl	80117d8 <__mdiff>
 80110be:	68c2      	ldr	r2, [r0, #12]
 80110c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80110c4:	4605      	mov	r5, r0
 80110c6:	bb02      	cbnz	r2, 801110a <_dtoa_r+0xa62>
 80110c8:	4601      	mov	r1, r0
 80110ca:	ee18 0a10 	vmov	r0, s16
 80110ce:	f000 fb67 	bl	80117a0 <__mcmp>
 80110d2:	4602      	mov	r2, r0
 80110d4:	4629      	mov	r1, r5
 80110d6:	4620      	mov	r0, r4
 80110d8:	9207      	str	r2, [sp, #28]
 80110da:	f000 f91f 	bl	801131c <_Bfree>
 80110de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80110e2:	ea43 0102 	orr.w	r1, r3, r2
 80110e6:	9b04      	ldr	r3, [sp, #16]
 80110e8:	430b      	orrs	r3, r1
 80110ea:	464d      	mov	r5, r9
 80110ec:	d10f      	bne.n	801110e <_dtoa_r+0xa66>
 80110ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80110f2:	d02a      	beq.n	801114a <_dtoa_r+0xaa2>
 80110f4:	9b03      	ldr	r3, [sp, #12]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	dd02      	ble.n	8011100 <_dtoa_r+0xa58>
 80110fa:	9b02      	ldr	r3, [sp, #8]
 80110fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011100:	f88b a000 	strb.w	sl, [fp]
 8011104:	e775      	b.n	8010ff2 <_dtoa_r+0x94a>
 8011106:	4638      	mov	r0, r7
 8011108:	e7ba      	b.n	8011080 <_dtoa_r+0x9d8>
 801110a:	2201      	movs	r2, #1
 801110c:	e7e2      	b.n	80110d4 <_dtoa_r+0xa2c>
 801110e:	9b03      	ldr	r3, [sp, #12]
 8011110:	2b00      	cmp	r3, #0
 8011112:	db04      	blt.n	801111e <_dtoa_r+0xa76>
 8011114:	9906      	ldr	r1, [sp, #24]
 8011116:	430b      	orrs	r3, r1
 8011118:	9904      	ldr	r1, [sp, #16]
 801111a:	430b      	orrs	r3, r1
 801111c:	d122      	bne.n	8011164 <_dtoa_r+0xabc>
 801111e:	2a00      	cmp	r2, #0
 8011120:	ddee      	ble.n	8011100 <_dtoa_r+0xa58>
 8011122:	ee18 1a10 	vmov	r1, s16
 8011126:	2201      	movs	r2, #1
 8011128:	4620      	mov	r0, r4
 801112a:	f000 fac9 	bl	80116c0 <__lshift>
 801112e:	4631      	mov	r1, r6
 8011130:	ee08 0a10 	vmov	s16, r0
 8011134:	f000 fb34 	bl	80117a0 <__mcmp>
 8011138:	2800      	cmp	r0, #0
 801113a:	dc03      	bgt.n	8011144 <_dtoa_r+0xa9c>
 801113c:	d1e0      	bne.n	8011100 <_dtoa_r+0xa58>
 801113e:	f01a 0f01 	tst.w	sl, #1
 8011142:	d0dd      	beq.n	8011100 <_dtoa_r+0xa58>
 8011144:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011148:	d1d7      	bne.n	80110fa <_dtoa_r+0xa52>
 801114a:	2339      	movs	r3, #57	; 0x39
 801114c:	f88b 3000 	strb.w	r3, [fp]
 8011150:	462b      	mov	r3, r5
 8011152:	461d      	mov	r5, r3
 8011154:	3b01      	subs	r3, #1
 8011156:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801115a:	2a39      	cmp	r2, #57	; 0x39
 801115c:	d071      	beq.n	8011242 <_dtoa_r+0xb9a>
 801115e:	3201      	adds	r2, #1
 8011160:	701a      	strb	r2, [r3, #0]
 8011162:	e746      	b.n	8010ff2 <_dtoa_r+0x94a>
 8011164:	2a00      	cmp	r2, #0
 8011166:	dd07      	ble.n	8011178 <_dtoa_r+0xad0>
 8011168:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801116c:	d0ed      	beq.n	801114a <_dtoa_r+0xaa2>
 801116e:	f10a 0301 	add.w	r3, sl, #1
 8011172:	f88b 3000 	strb.w	r3, [fp]
 8011176:	e73c      	b.n	8010ff2 <_dtoa_r+0x94a>
 8011178:	9b05      	ldr	r3, [sp, #20]
 801117a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801117e:	4599      	cmp	r9, r3
 8011180:	d047      	beq.n	8011212 <_dtoa_r+0xb6a>
 8011182:	ee18 1a10 	vmov	r1, s16
 8011186:	2300      	movs	r3, #0
 8011188:	220a      	movs	r2, #10
 801118a:	4620      	mov	r0, r4
 801118c:	f000 f8e8 	bl	8011360 <__multadd>
 8011190:	45b8      	cmp	r8, r7
 8011192:	ee08 0a10 	vmov	s16, r0
 8011196:	f04f 0300 	mov.w	r3, #0
 801119a:	f04f 020a 	mov.w	r2, #10
 801119e:	4641      	mov	r1, r8
 80111a0:	4620      	mov	r0, r4
 80111a2:	d106      	bne.n	80111b2 <_dtoa_r+0xb0a>
 80111a4:	f000 f8dc 	bl	8011360 <__multadd>
 80111a8:	4680      	mov	r8, r0
 80111aa:	4607      	mov	r7, r0
 80111ac:	f109 0901 	add.w	r9, r9, #1
 80111b0:	e772      	b.n	8011098 <_dtoa_r+0x9f0>
 80111b2:	f000 f8d5 	bl	8011360 <__multadd>
 80111b6:	4639      	mov	r1, r7
 80111b8:	4680      	mov	r8, r0
 80111ba:	2300      	movs	r3, #0
 80111bc:	220a      	movs	r2, #10
 80111be:	4620      	mov	r0, r4
 80111c0:	f000 f8ce 	bl	8011360 <__multadd>
 80111c4:	4607      	mov	r7, r0
 80111c6:	e7f1      	b.n	80111ac <_dtoa_r+0xb04>
 80111c8:	9b03      	ldr	r3, [sp, #12]
 80111ca:	9302      	str	r3, [sp, #8]
 80111cc:	9d01      	ldr	r5, [sp, #4]
 80111ce:	ee18 0a10 	vmov	r0, s16
 80111d2:	4631      	mov	r1, r6
 80111d4:	f7ff f9dc 	bl	8010590 <quorem>
 80111d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80111dc:	9b01      	ldr	r3, [sp, #4]
 80111de:	f805 ab01 	strb.w	sl, [r5], #1
 80111e2:	1aea      	subs	r2, r5, r3
 80111e4:	9b02      	ldr	r3, [sp, #8]
 80111e6:	4293      	cmp	r3, r2
 80111e8:	dd09      	ble.n	80111fe <_dtoa_r+0xb56>
 80111ea:	ee18 1a10 	vmov	r1, s16
 80111ee:	2300      	movs	r3, #0
 80111f0:	220a      	movs	r2, #10
 80111f2:	4620      	mov	r0, r4
 80111f4:	f000 f8b4 	bl	8011360 <__multadd>
 80111f8:	ee08 0a10 	vmov	s16, r0
 80111fc:	e7e7      	b.n	80111ce <_dtoa_r+0xb26>
 80111fe:	9b02      	ldr	r3, [sp, #8]
 8011200:	2b00      	cmp	r3, #0
 8011202:	bfc8      	it	gt
 8011204:	461d      	movgt	r5, r3
 8011206:	9b01      	ldr	r3, [sp, #4]
 8011208:	bfd8      	it	le
 801120a:	2501      	movle	r5, #1
 801120c:	441d      	add	r5, r3
 801120e:	f04f 0800 	mov.w	r8, #0
 8011212:	ee18 1a10 	vmov	r1, s16
 8011216:	2201      	movs	r2, #1
 8011218:	4620      	mov	r0, r4
 801121a:	f000 fa51 	bl	80116c0 <__lshift>
 801121e:	4631      	mov	r1, r6
 8011220:	ee08 0a10 	vmov	s16, r0
 8011224:	f000 fabc 	bl	80117a0 <__mcmp>
 8011228:	2800      	cmp	r0, #0
 801122a:	dc91      	bgt.n	8011150 <_dtoa_r+0xaa8>
 801122c:	d102      	bne.n	8011234 <_dtoa_r+0xb8c>
 801122e:	f01a 0f01 	tst.w	sl, #1
 8011232:	d18d      	bne.n	8011150 <_dtoa_r+0xaa8>
 8011234:	462b      	mov	r3, r5
 8011236:	461d      	mov	r5, r3
 8011238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801123c:	2a30      	cmp	r2, #48	; 0x30
 801123e:	d0fa      	beq.n	8011236 <_dtoa_r+0xb8e>
 8011240:	e6d7      	b.n	8010ff2 <_dtoa_r+0x94a>
 8011242:	9a01      	ldr	r2, [sp, #4]
 8011244:	429a      	cmp	r2, r3
 8011246:	d184      	bne.n	8011152 <_dtoa_r+0xaaa>
 8011248:	9b00      	ldr	r3, [sp, #0]
 801124a:	3301      	adds	r3, #1
 801124c:	9300      	str	r3, [sp, #0]
 801124e:	2331      	movs	r3, #49	; 0x31
 8011250:	7013      	strb	r3, [r2, #0]
 8011252:	e6ce      	b.n	8010ff2 <_dtoa_r+0x94a>
 8011254:	4b09      	ldr	r3, [pc, #36]	; (801127c <_dtoa_r+0xbd4>)
 8011256:	f7ff ba95 	b.w	8010784 <_dtoa_r+0xdc>
 801125a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801125c:	2b00      	cmp	r3, #0
 801125e:	f47f aa6e 	bne.w	801073e <_dtoa_r+0x96>
 8011262:	4b07      	ldr	r3, [pc, #28]	; (8011280 <_dtoa_r+0xbd8>)
 8011264:	f7ff ba8e 	b.w	8010784 <_dtoa_r+0xdc>
 8011268:	9b02      	ldr	r3, [sp, #8]
 801126a:	2b00      	cmp	r3, #0
 801126c:	dcae      	bgt.n	80111cc <_dtoa_r+0xb24>
 801126e:	9b06      	ldr	r3, [sp, #24]
 8011270:	2b02      	cmp	r3, #2
 8011272:	f73f aea8 	bgt.w	8010fc6 <_dtoa_r+0x91e>
 8011276:	e7a9      	b.n	80111cc <_dtoa_r+0xb24>
 8011278:	0801515b 	.word	0x0801515b
 801127c:	080150b8 	.word	0x080150b8
 8011280:	080150dc 	.word	0x080150dc

08011284 <_localeconv_r>:
 8011284:	4800      	ldr	r0, [pc, #0]	; (8011288 <_localeconv_r+0x4>)
 8011286:	4770      	bx	lr
 8011288:	20000170 	.word	0x20000170

0801128c <malloc>:
 801128c:	4b02      	ldr	r3, [pc, #8]	; (8011298 <malloc+0xc>)
 801128e:	4601      	mov	r1, r0
 8011290:	6818      	ldr	r0, [r3, #0]
 8011292:	f000 bc09 	b.w	8011aa8 <_malloc_r>
 8011296:	bf00      	nop
 8011298:	2000001c 	.word	0x2000001c

0801129c <_Balloc>:
 801129c:	b570      	push	{r4, r5, r6, lr}
 801129e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80112a0:	4604      	mov	r4, r0
 80112a2:	460d      	mov	r5, r1
 80112a4:	b976      	cbnz	r6, 80112c4 <_Balloc+0x28>
 80112a6:	2010      	movs	r0, #16
 80112a8:	f7ff fff0 	bl	801128c <malloc>
 80112ac:	4602      	mov	r2, r0
 80112ae:	6260      	str	r0, [r4, #36]	; 0x24
 80112b0:	b920      	cbnz	r0, 80112bc <_Balloc+0x20>
 80112b2:	4b18      	ldr	r3, [pc, #96]	; (8011314 <_Balloc+0x78>)
 80112b4:	4818      	ldr	r0, [pc, #96]	; (8011318 <_Balloc+0x7c>)
 80112b6:	2166      	movs	r1, #102	; 0x66
 80112b8:	f000 fdd6 	bl	8011e68 <__assert_func>
 80112bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112c0:	6006      	str	r6, [r0, #0]
 80112c2:	60c6      	str	r6, [r0, #12]
 80112c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80112c6:	68f3      	ldr	r3, [r6, #12]
 80112c8:	b183      	cbz	r3, 80112ec <_Balloc+0x50>
 80112ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112cc:	68db      	ldr	r3, [r3, #12]
 80112ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80112d2:	b9b8      	cbnz	r0, 8011304 <_Balloc+0x68>
 80112d4:	2101      	movs	r1, #1
 80112d6:	fa01 f605 	lsl.w	r6, r1, r5
 80112da:	1d72      	adds	r2, r6, #5
 80112dc:	0092      	lsls	r2, r2, #2
 80112de:	4620      	mov	r0, r4
 80112e0:	f000 fb60 	bl	80119a4 <_calloc_r>
 80112e4:	b160      	cbz	r0, 8011300 <_Balloc+0x64>
 80112e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80112ea:	e00e      	b.n	801130a <_Balloc+0x6e>
 80112ec:	2221      	movs	r2, #33	; 0x21
 80112ee:	2104      	movs	r1, #4
 80112f0:	4620      	mov	r0, r4
 80112f2:	f000 fb57 	bl	80119a4 <_calloc_r>
 80112f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112f8:	60f0      	str	r0, [r6, #12]
 80112fa:	68db      	ldr	r3, [r3, #12]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d1e4      	bne.n	80112ca <_Balloc+0x2e>
 8011300:	2000      	movs	r0, #0
 8011302:	bd70      	pop	{r4, r5, r6, pc}
 8011304:	6802      	ldr	r2, [r0, #0]
 8011306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801130a:	2300      	movs	r3, #0
 801130c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011310:	e7f7      	b.n	8011302 <_Balloc+0x66>
 8011312:	bf00      	nop
 8011314:	080150e9 	.word	0x080150e9
 8011318:	0801516c 	.word	0x0801516c

0801131c <_Bfree>:
 801131c:	b570      	push	{r4, r5, r6, lr}
 801131e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011320:	4605      	mov	r5, r0
 8011322:	460c      	mov	r4, r1
 8011324:	b976      	cbnz	r6, 8011344 <_Bfree+0x28>
 8011326:	2010      	movs	r0, #16
 8011328:	f7ff ffb0 	bl	801128c <malloc>
 801132c:	4602      	mov	r2, r0
 801132e:	6268      	str	r0, [r5, #36]	; 0x24
 8011330:	b920      	cbnz	r0, 801133c <_Bfree+0x20>
 8011332:	4b09      	ldr	r3, [pc, #36]	; (8011358 <_Bfree+0x3c>)
 8011334:	4809      	ldr	r0, [pc, #36]	; (801135c <_Bfree+0x40>)
 8011336:	218a      	movs	r1, #138	; 0x8a
 8011338:	f000 fd96 	bl	8011e68 <__assert_func>
 801133c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011340:	6006      	str	r6, [r0, #0]
 8011342:	60c6      	str	r6, [r0, #12]
 8011344:	b13c      	cbz	r4, 8011356 <_Bfree+0x3a>
 8011346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011348:	6862      	ldr	r2, [r4, #4]
 801134a:	68db      	ldr	r3, [r3, #12]
 801134c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011350:	6021      	str	r1, [r4, #0]
 8011352:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011356:	bd70      	pop	{r4, r5, r6, pc}
 8011358:	080150e9 	.word	0x080150e9
 801135c:	0801516c 	.word	0x0801516c

08011360 <__multadd>:
 8011360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011364:	690d      	ldr	r5, [r1, #16]
 8011366:	4607      	mov	r7, r0
 8011368:	460c      	mov	r4, r1
 801136a:	461e      	mov	r6, r3
 801136c:	f101 0c14 	add.w	ip, r1, #20
 8011370:	2000      	movs	r0, #0
 8011372:	f8dc 3000 	ldr.w	r3, [ip]
 8011376:	b299      	uxth	r1, r3
 8011378:	fb02 6101 	mla	r1, r2, r1, r6
 801137c:	0c1e      	lsrs	r6, r3, #16
 801137e:	0c0b      	lsrs	r3, r1, #16
 8011380:	fb02 3306 	mla	r3, r2, r6, r3
 8011384:	b289      	uxth	r1, r1
 8011386:	3001      	adds	r0, #1
 8011388:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801138c:	4285      	cmp	r5, r0
 801138e:	f84c 1b04 	str.w	r1, [ip], #4
 8011392:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011396:	dcec      	bgt.n	8011372 <__multadd+0x12>
 8011398:	b30e      	cbz	r6, 80113de <__multadd+0x7e>
 801139a:	68a3      	ldr	r3, [r4, #8]
 801139c:	42ab      	cmp	r3, r5
 801139e:	dc19      	bgt.n	80113d4 <__multadd+0x74>
 80113a0:	6861      	ldr	r1, [r4, #4]
 80113a2:	4638      	mov	r0, r7
 80113a4:	3101      	adds	r1, #1
 80113a6:	f7ff ff79 	bl	801129c <_Balloc>
 80113aa:	4680      	mov	r8, r0
 80113ac:	b928      	cbnz	r0, 80113ba <__multadd+0x5a>
 80113ae:	4602      	mov	r2, r0
 80113b0:	4b0c      	ldr	r3, [pc, #48]	; (80113e4 <__multadd+0x84>)
 80113b2:	480d      	ldr	r0, [pc, #52]	; (80113e8 <__multadd+0x88>)
 80113b4:	21b5      	movs	r1, #181	; 0xb5
 80113b6:	f000 fd57 	bl	8011e68 <__assert_func>
 80113ba:	6922      	ldr	r2, [r4, #16]
 80113bc:	3202      	adds	r2, #2
 80113be:	f104 010c 	add.w	r1, r4, #12
 80113c2:	0092      	lsls	r2, r2, #2
 80113c4:	300c      	adds	r0, #12
 80113c6:	f7fe fc43 	bl	800fc50 <memcpy>
 80113ca:	4621      	mov	r1, r4
 80113cc:	4638      	mov	r0, r7
 80113ce:	f7ff ffa5 	bl	801131c <_Bfree>
 80113d2:	4644      	mov	r4, r8
 80113d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80113d8:	3501      	adds	r5, #1
 80113da:	615e      	str	r6, [r3, #20]
 80113dc:	6125      	str	r5, [r4, #16]
 80113de:	4620      	mov	r0, r4
 80113e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113e4:	0801515b 	.word	0x0801515b
 80113e8:	0801516c 	.word	0x0801516c

080113ec <__hi0bits>:
 80113ec:	0c03      	lsrs	r3, r0, #16
 80113ee:	041b      	lsls	r3, r3, #16
 80113f0:	b9d3      	cbnz	r3, 8011428 <__hi0bits+0x3c>
 80113f2:	0400      	lsls	r0, r0, #16
 80113f4:	2310      	movs	r3, #16
 80113f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80113fa:	bf04      	itt	eq
 80113fc:	0200      	lsleq	r0, r0, #8
 80113fe:	3308      	addeq	r3, #8
 8011400:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011404:	bf04      	itt	eq
 8011406:	0100      	lsleq	r0, r0, #4
 8011408:	3304      	addeq	r3, #4
 801140a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801140e:	bf04      	itt	eq
 8011410:	0080      	lsleq	r0, r0, #2
 8011412:	3302      	addeq	r3, #2
 8011414:	2800      	cmp	r0, #0
 8011416:	db05      	blt.n	8011424 <__hi0bits+0x38>
 8011418:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801141c:	f103 0301 	add.w	r3, r3, #1
 8011420:	bf08      	it	eq
 8011422:	2320      	moveq	r3, #32
 8011424:	4618      	mov	r0, r3
 8011426:	4770      	bx	lr
 8011428:	2300      	movs	r3, #0
 801142a:	e7e4      	b.n	80113f6 <__hi0bits+0xa>

0801142c <__lo0bits>:
 801142c:	6803      	ldr	r3, [r0, #0]
 801142e:	f013 0207 	ands.w	r2, r3, #7
 8011432:	4601      	mov	r1, r0
 8011434:	d00b      	beq.n	801144e <__lo0bits+0x22>
 8011436:	07da      	lsls	r2, r3, #31
 8011438:	d423      	bmi.n	8011482 <__lo0bits+0x56>
 801143a:	0798      	lsls	r0, r3, #30
 801143c:	bf49      	itett	mi
 801143e:	085b      	lsrmi	r3, r3, #1
 8011440:	089b      	lsrpl	r3, r3, #2
 8011442:	2001      	movmi	r0, #1
 8011444:	600b      	strmi	r3, [r1, #0]
 8011446:	bf5c      	itt	pl
 8011448:	600b      	strpl	r3, [r1, #0]
 801144a:	2002      	movpl	r0, #2
 801144c:	4770      	bx	lr
 801144e:	b298      	uxth	r0, r3
 8011450:	b9a8      	cbnz	r0, 801147e <__lo0bits+0x52>
 8011452:	0c1b      	lsrs	r3, r3, #16
 8011454:	2010      	movs	r0, #16
 8011456:	b2da      	uxtb	r2, r3
 8011458:	b90a      	cbnz	r2, 801145e <__lo0bits+0x32>
 801145a:	3008      	adds	r0, #8
 801145c:	0a1b      	lsrs	r3, r3, #8
 801145e:	071a      	lsls	r2, r3, #28
 8011460:	bf04      	itt	eq
 8011462:	091b      	lsreq	r3, r3, #4
 8011464:	3004      	addeq	r0, #4
 8011466:	079a      	lsls	r2, r3, #30
 8011468:	bf04      	itt	eq
 801146a:	089b      	lsreq	r3, r3, #2
 801146c:	3002      	addeq	r0, #2
 801146e:	07da      	lsls	r2, r3, #31
 8011470:	d403      	bmi.n	801147a <__lo0bits+0x4e>
 8011472:	085b      	lsrs	r3, r3, #1
 8011474:	f100 0001 	add.w	r0, r0, #1
 8011478:	d005      	beq.n	8011486 <__lo0bits+0x5a>
 801147a:	600b      	str	r3, [r1, #0]
 801147c:	4770      	bx	lr
 801147e:	4610      	mov	r0, r2
 8011480:	e7e9      	b.n	8011456 <__lo0bits+0x2a>
 8011482:	2000      	movs	r0, #0
 8011484:	4770      	bx	lr
 8011486:	2020      	movs	r0, #32
 8011488:	4770      	bx	lr
	...

0801148c <__i2b>:
 801148c:	b510      	push	{r4, lr}
 801148e:	460c      	mov	r4, r1
 8011490:	2101      	movs	r1, #1
 8011492:	f7ff ff03 	bl	801129c <_Balloc>
 8011496:	4602      	mov	r2, r0
 8011498:	b928      	cbnz	r0, 80114a6 <__i2b+0x1a>
 801149a:	4b05      	ldr	r3, [pc, #20]	; (80114b0 <__i2b+0x24>)
 801149c:	4805      	ldr	r0, [pc, #20]	; (80114b4 <__i2b+0x28>)
 801149e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80114a2:	f000 fce1 	bl	8011e68 <__assert_func>
 80114a6:	2301      	movs	r3, #1
 80114a8:	6144      	str	r4, [r0, #20]
 80114aa:	6103      	str	r3, [r0, #16]
 80114ac:	bd10      	pop	{r4, pc}
 80114ae:	bf00      	nop
 80114b0:	0801515b 	.word	0x0801515b
 80114b4:	0801516c 	.word	0x0801516c

080114b8 <__multiply>:
 80114b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114bc:	4691      	mov	r9, r2
 80114be:	690a      	ldr	r2, [r1, #16]
 80114c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	bfb8      	it	lt
 80114c8:	460b      	movlt	r3, r1
 80114ca:	460c      	mov	r4, r1
 80114cc:	bfbc      	itt	lt
 80114ce:	464c      	movlt	r4, r9
 80114d0:	4699      	movlt	r9, r3
 80114d2:	6927      	ldr	r7, [r4, #16]
 80114d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80114d8:	68a3      	ldr	r3, [r4, #8]
 80114da:	6861      	ldr	r1, [r4, #4]
 80114dc:	eb07 060a 	add.w	r6, r7, sl
 80114e0:	42b3      	cmp	r3, r6
 80114e2:	b085      	sub	sp, #20
 80114e4:	bfb8      	it	lt
 80114e6:	3101      	addlt	r1, #1
 80114e8:	f7ff fed8 	bl	801129c <_Balloc>
 80114ec:	b930      	cbnz	r0, 80114fc <__multiply+0x44>
 80114ee:	4602      	mov	r2, r0
 80114f0:	4b44      	ldr	r3, [pc, #272]	; (8011604 <__multiply+0x14c>)
 80114f2:	4845      	ldr	r0, [pc, #276]	; (8011608 <__multiply+0x150>)
 80114f4:	f240 115d 	movw	r1, #349	; 0x15d
 80114f8:	f000 fcb6 	bl	8011e68 <__assert_func>
 80114fc:	f100 0514 	add.w	r5, r0, #20
 8011500:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011504:	462b      	mov	r3, r5
 8011506:	2200      	movs	r2, #0
 8011508:	4543      	cmp	r3, r8
 801150a:	d321      	bcc.n	8011550 <__multiply+0x98>
 801150c:	f104 0314 	add.w	r3, r4, #20
 8011510:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011514:	f109 0314 	add.w	r3, r9, #20
 8011518:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801151c:	9202      	str	r2, [sp, #8]
 801151e:	1b3a      	subs	r2, r7, r4
 8011520:	3a15      	subs	r2, #21
 8011522:	f022 0203 	bic.w	r2, r2, #3
 8011526:	3204      	adds	r2, #4
 8011528:	f104 0115 	add.w	r1, r4, #21
 801152c:	428f      	cmp	r7, r1
 801152e:	bf38      	it	cc
 8011530:	2204      	movcc	r2, #4
 8011532:	9201      	str	r2, [sp, #4]
 8011534:	9a02      	ldr	r2, [sp, #8]
 8011536:	9303      	str	r3, [sp, #12]
 8011538:	429a      	cmp	r2, r3
 801153a:	d80c      	bhi.n	8011556 <__multiply+0x9e>
 801153c:	2e00      	cmp	r6, #0
 801153e:	dd03      	ble.n	8011548 <__multiply+0x90>
 8011540:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011544:	2b00      	cmp	r3, #0
 8011546:	d05a      	beq.n	80115fe <__multiply+0x146>
 8011548:	6106      	str	r6, [r0, #16]
 801154a:	b005      	add	sp, #20
 801154c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011550:	f843 2b04 	str.w	r2, [r3], #4
 8011554:	e7d8      	b.n	8011508 <__multiply+0x50>
 8011556:	f8b3 a000 	ldrh.w	sl, [r3]
 801155a:	f1ba 0f00 	cmp.w	sl, #0
 801155e:	d024      	beq.n	80115aa <__multiply+0xf2>
 8011560:	f104 0e14 	add.w	lr, r4, #20
 8011564:	46a9      	mov	r9, r5
 8011566:	f04f 0c00 	mov.w	ip, #0
 801156a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801156e:	f8d9 1000 	ldr.w	r1, [r9]
 8011572:	fa1f fb82 	uxth.w	fp, r2
 8011576:	b289      	uxth	r1, r1
 8011578:	fb0a 110b 	mla	r1, sl, fp, r1
 801157c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011580:	f8d9 2000 	ldr.w	r2, [r9]
 8011584:	4461      	add	r1, ip
 8011586:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801158a:	fb0a c20b 	mla	r2, sl, fp, ip
 801158e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011592:	b289      	uxth	r1, r1
 8011594:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011598:	4577      	cmp	r7, lr
 801159a:	f849 1b04 	str.w	r1, [r9], #4
 801159e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80115a2:	d8e2      	bhi.n	801156a <__multiply+0xb2>
 80115a4:	9a01      	ldr	r2, [sp, #4]
 80115a6:	f845 c002 	str.w	ip, [r5, r2]
 80115aa:	9a03      	ldr	r2, [sp, #12]
 80115ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80115b0:	3304      	adds	r3, #4
 80115b2:	f1b9 0f00 	cmp.w	r9, #0
 80115b6:	d020      	beq.n	80115fa <__multiply+0x142>
 80115b8:	6829      	ldr	r1, [r5, #0]
 80115ba:	f104 0c14 	add.w	ip, r4, #20
 80115be:	46ae      	mov	lr, r5
 80115c0:	f04f 0a00 	mov.w	sl, #0
 80115c4:	f8bc b000 	ldrh.w	fp, [ip]
 80115c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80115cc:	fb09 220b 	mla	r2, r9, fp, r2
 80115d0:	4492      	add	sl, r2
 80115d2:	b289      	uxth	r1, r1
 80115d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80115d8:	f84e 1b04 	str.w	r1, [lr], #4
 80115dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80115e0:	f8be 1000 	ldrh.w	r1, [lr]
 80115e4:	0c12      	lsrs	r2, r2, #16
 80115e6:	fb09 1102 	mla	r1, r9, r2, r1
 80115ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80115ee:	4567      	cmp	r7, ip
 80115f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80115f4:	d8e6      	bhi.n	80115c4 <__multiply+0x10c>
 80115f6:	9a01      	ldr	r2, [sp, #4]
 80115f8:	50a9      	str	r1, [r5, r2]
 80115fa:	3504      	adds	r5, #4
 80115fc:	e79a      	b.n	8011534 <__multiply+0x7c>
 80115fe:	3e01      	subs	r6, #1
 8011600:	e79c      	b.n	801153c <__multiply+0x84>
 8011602:	bf00      	nop
 8011604:	0801515b 	.word	0x0801515b
 8011608:	0801516c 	.word	0x0801516c

0801160c <__pow5mult>:
 801160c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011610:	4615      	mov	r5, r2
 8011612:	f012 0203 	ands.w	r2, r2, #3
 8011616:	4606      	mov	r6, r0
 8011618:	460f      	mov	r7, r1
 801161a:	d007      	beq.n	801162c <__pow5mult+0x20>
 801161c:	4c25      	ldr	r4, [pc, #148]	; (80116b4 <__pow5mult+0xa8>)
 801161e:	3a01      	subs	r2, #1
 8011620:	2300      	movs	r3, #0
 8011622:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011626:	f7ff fe9b 	bl	8011360 <__multadd>
 801162a:	4607      	mov	r7, r0
 801162c:	10ad      	asrs	r5, r5, #2
 801162e:	d03d      	beq.n	80116ac <__pow5mult+0xa0>
 8011630:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011632:	b97c      	cbnz	r4, 8011654 <__pow5mult+0x48>
 8011634:	2010      	movs	r0, #16
 8011636:	f7ff fe29 	bl	801128c <malloc>
 801163a:	4602      	mov	r2, r0
 801163c:	6270      	str	r0, [r6, #36]	; 0x24
 801163e:	b928      	cbnz	r0, 801164c <__pow5mult+0x40>
 8011640:	4b1d      	ldr	r3, [pc, #116]	; (80116b8 <__pow5mult+0xac>)
 8011642:	481e      	ldr	r0, [pc, #120]	; (80116bc <__pow5mult+0xb0>)
 8011644:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011648:	f000 fc0e 	bl	8011e68 <__assert_func>
 801164c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011650:	6004      	str	r4, [r0, #0]
 8011652:	60c4      	str	r4, [r0, #12]
 8011654:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011658:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801165c:	b94c      	cbnz	r4, 8011672 <__pow5mult+0x66>
 801165e:	f240 2171 	movw	r1, #625	; 0x271
 8011662:	4630      	mov	r0, r6
 8011664:	f7ff ff12 	bl	801148c <__i2b>
 8011668:	2300      	movs	r3, #0
 801166a:	f8c8 0008 	str.w	r0, [r8, #8]
 801166e:	4604      	mov	r4, r0
 8011670:	6003      	str	r3, [r0, #0]
 8011672:	f04f 0900 	mov.w	r9, #0
 8011676:	07eb      	lsls	r3, r5, #31
 8011678:	d50a      	bpl.n	8011690 <__pow5mult+0x84>
 801167a:	4639      	mov	r1, r7
 801167c:	4622      	mov	r2, r4
 801167e:	4630      	mov	r0, r6
 8011680:	f7ff ff1a 	bl	80114b8 <__multiply>
 8011684:	4639      	mov	r1, r7
 8011686:	4680      	mov	r8, r0
 8011688:	4630      	mov	r0, r6
 801168a:	f7ff fe47 	bl	801131c <_Bfree>
 801168e:	4647      	mov	r7, r8
 8011690:	106d      	asrs	r5, r5, #1
 8011692:	d00b      	beq.n	80116ac <__pow5mult+0xa0>
 8011694:	6820      	ldr	r0, [r4, #0]
 8011696:	b938      	cbnz	r0, 80116a8 <__pow5mult+0x9c>
 8011698:	4622      	mov	r2, r4
 801169a:	4621      	mov	r1, r4
 801169c:	4630      	mov	r0, r6
 801169e:	f7ff ff0b 	bl	80114b8 <__multiply>
 80116a2:	6020      	str	r0, [r4, #0]
 80116a4:	f8c0 9000 	str.w	r9, [r0]
 80116a8:	4604      	mov	r4, r0
 80116aa:	e7e4      	b.n	8011676 <__pow5mult+0x6a>
 80116ac:	4638      	mov	r0, r7
 80116ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116b2:	bf00      	nop
 80116b4:	080152b8 	.word	0x080152b8
 80116b8:	080150e9 	.word	0x080150e9
 80116bc:	0801516c 	.word	0x0801516c

080116c0 <__lshift>:
 80116c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116c4:	460c      	mov	r4, r1
 80116c6:	6849      	ldr	r1, [r1, #4]
 80116c8:	6923      	ldr	r3, [r4, #16]
 80116ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80116ce:	68a3      	ldr	r3, [r4, #8]
 80116d0:	4607      	mov	r7, r0
 80116d2:	4691      	mov	r9, r2
 80116d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80116d8:	f108 0601 	add.w	r6, r8, #1
 80116dc:	42b3      	cmp	r3, r6
 80116de:	db0b      	blt.n	80116f8 <__lshift+0x38>
 80116e0:	4638      	mov	r0, r7
 80116e2:	f7ff fddb 	bl	801129c <_Balloc>
 80116e6:	4605      	mov	r5, r0
 80116e8:	b948      	cbnz	r0, 80116fe <__lshift+0x3e>
 80116ea:	4602      	mov	r2, r0
 80116ec:	4b2a      	ldr	r3, [pc, #168]	; (8011798 <__lshift+0xd8>)
 80116ee:	482b      	ldr	r0, [pc, #172]	; (801179c <__lshift+0xdc>)
 80116f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80116f4:	f000 fbb8 	bl	8011e68 <__assert_func>
 80116f8:	3101      	adds	r1, #1
 80116fa:	005b      	lsls	r3, r3, #1
 80116fc:	e7ee      	b.n	80116dc <__lshift+0x1c>
 80116fe:	2300      	movs	r3, #0
 8011700:	f100 0114 	add.w	r1, r0, #20
 8011704:	f100 0210 	add.w	r2, r0, #16
 8011708:	4618      	mov	r0, r3
 801170a:	4553      	cmp	r3, sl
 801170c:	db37      	blt.n	801177e <__lshift+0xbe>
 801170e:	6920      	ldr	r0, [r4, #16]
 8011710:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011714:	f104 0314 	add.w	r3, r4, #20
 8011718:	f019 091f 	ands.w	r9, r9, #31
 801171c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011720:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011724:	d02f      	beq.n	8011786 <__lshift+0xc6>
 8011726:	f1c9 0e20 	rsb	lr, r9, #32
 801172a:	468a      	mov	sl, r1
 801172c:	f04f 0c00 	mov.w	ip, #0
 8011730:	681a      	ldr	r2, [r3, #0]
 8011732:	fa02 f209 	lsl.w	r2, r2, r9
 8011736:	ea42 020c 	orr.w	r2, r2, ip
 801173a:	f84a 2b04 	str.w	r2, [sl], #4
 801173e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011742:	4298      	cmp	r0, r3
 8011744:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011748:	d8f2      	bhi.n	8011730 <__lshift+0x70>
 801174a:	1b03      	subs	r3, r0, r4
 801174c:	3b15      	subs	r3, #21
 801174e:	f023 0303 	bic.w	r3, r3, #3
 8011752:	3304      	adds	r3, #4
 8011754:	f104 0215 	add.w	r2, r4, #21
 8011758:	4290      	cmp	r0, r2
 801175a:	bf38      	it	cc
 801175c:	2304      	movcc	r3, #4
 801175e:	f841 c003 	str.w	ip, [r1, r3]
 8011762:	f1bc 0f00 	cmp.w	ip, #0
 8011766:	d001      	beq.n	801176c <__lshift+0xac>
 8011768:	f108 0602 	add.w	r6, r8, #2
 801176c:	3e01      	subs	r6, #1
 801176e:	4638      	mov	r0, r7
 8011770:	612e      	str	r6, [r5, #16]
 8011772:	4621      	mov	r1, r4
 8011774:	f7ff fdd2 	bl	801131c <_Bfree>
 8011778:	4628      	mov	r0, r5
 801177a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801177e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011782:	3301      	adds	r3, #1
 8011784:	e7c1      	b.n	801170a <__lshift+0x4a>
 8011786:	3904      	subs	r1, #4
 8011788:	f853 2b04 	ldr.w	r2, [r3], #4
 801178c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011790:	4298      	cmp	r0, r3
 8011792:	d8f9      	bhi.n	8011788 <__lshift+0xc8>
 8011794:	e7ea      	b.n	801176c <__lshift+0xac>
 8011796:	bf00      	nop
 8011798:	0801515b 	.word	0x0801515b
 801179c:	0801516c 	.word	0x0801516c

080117a0 <__mcmp>:
 80117a0:	b530      	push	{r4, r5, lr}
 80117a2:	6902      	ldr	r2, [r0, #16]
 80117a4:	690c      	ldr	r4, [r1, #16]
 80117a6:	1b12      	subs	r2, r2, r4
 80117a8:	d10e      	bne.n	80117c8 <__mcmp+0x28>
 80117aa:	f100 0314 	add.w	r3, r0, #20
 80117ae:	3114      	adds	r1, #20
 80117b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80117b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80117b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80117bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80117c0:	42a5      	cmp	r5, r4
 80117c2:	d003      	beq.n	80117cc <__mcmp+0x2c>
 80117c4:	d305      	bcc.n	80117d2 <__mcmp+0x32>
 80117c6:	2201      	movs	r2, #1
 80117c8:	4610      	mov	r0, r2
 80117ca:	bd30      	pop	{r4, r5, pc}
 80117cc:	4283      	cmp	r3, r0
 80117ce:	d3f3      	bcc.n	80117b8 <__mcmp+0x18>
 80117d0:	e7fa      	b.n	80117c8 <__mcmp+0x28>
 80117d2:	f04f 32ff 	mov.w	r2, #4294967295
 80117d6:	e7f7      	b.n	80117c8 <__mcmp+0x28>

080117d8 <__mdiff>:
 80117d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117dc:	460c      	mov	r4, r1
 80117de:	4606      	mov	r6, r0
 80117e0:	4611      	mov	r1, r2
 80117e2:	4620      	mov	r0, r4
 80117e4:	4690      	mov	r8, r2
 80117e6:	f7ff ffdb 	bl	80117a0 <__mcmp>
 80117ea:	1e05      	subs	r5, r0, #0
 80117ec:	d110      	bne.n	8011810 <__mdiff+0x38>
 80117ee:	4629      	mov	r1, r5
 80117f0:	4630      	mov	r0, r6
 80117f2:	f7ff fd53 	bl	801129c <_Balloc>
 80117f6:	b930      	cbnz	r0, 8011806 <__mdiff+0x2e>
 80117f8:	4b3a      	ldr	r3, [pc, #232]	; (80118e4 <__mdiff+0x10c>)
 80117fa:	4602      	mov	r2, r0
 80117fc:	f240 2132 	movw	r1, #562	; 0x232
 8011800:	4839      	ldr	r0, [pc, #228]	; (80118e8 <__mdiff+0x110>)
 8011802:	f000 fb31 	bl	8011e68 <__assert_func>
 8011806:	2301      	movs	r3, #1
 8011808:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801180c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011810:	bfa4      	itt	ge
 8011812:	4643      	movge	r3, r8
 8011814:	46a0      	movge	r8, r4
 8011816:	4630      	mov	r0, r6
 8011818:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801181c:	bfa6      	itte	ge
 801181e:	461c      	movge	r4, r3
 8011820:	2500      	movge	r5, #0
 8011822:	2501      	movlt	r5, #1
 8011824:	f7ff fd3a 	bl	801129c <_Balloc>
 8011828:	b920      	cbnz	r0, 8011834 <__mdiff+0x5c>
 801182a:	4b2e      	ldr	r3, [pc, #184]	; (80118e4 <__mdiff+0x10c>)
 801182c:	4602      	mov	r2, r0
 801182e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011832:	e7e5      	b.n	8011800 <__mdiff+0x28>
 8011834:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011838:	6926      	ldr	r6, [r4, #16]
 801183a:	60c5      	str	r5, [r0, #12]
 801183c:	f104 0914 	add.w	r9, r4, #20
 8011840:	f108 0514 	add.w	r5, r8, #20
 8011844:	f100 0e14 	add.w	lr, r0, #20
 8011848:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801184c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011850:	f108 0210 	add.w	r2, r8, #16
 8011854:	46f2      	mov	sl, lr
 8011856:	2100      	movs	r1, #0
 8011858:	f859 3b04 	ldr.w	r3, [r9], #4
 801185c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011860:	fa1f f883 	uxth.w	r8, r3
 8011864:	fa11 f18b 	uxtah	r1, r1, fp
 8011868:	0c1b      	lsrs	r3, r3, #16
 801186a:	eba1 0808 	sub.w	r8, r1, r8
 801186e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011872:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011876:	fa1f f888 	uxth.w	r8, r8
 801187a:	1419      	asrs	r1, r3, #16
 801187c:	454e      	cmp	r6, r9
 801187e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011882:	f84a 3b04 	str.w	r3, [sl], #4
 8011886:	d8e7      	bhi.n	8011858 <__mdiff+0x80>
 8011888:	1b33      	subs	r3, r6, r4
 801188a:	3b15      	subs	r3, #21
 801188c:	f023 0303 	bic.w	r3, r3, #3
 8011890:	3304      	adds	r3, #4
 8011892:	3415      	adds	r4, #21
 8011894:	42a6      	cmp	r6, r4
 8011896:	bf38      	it	cc
 8011898:	2304      	movcc	r3, #4
 801189a:	441d      	add	r5, r3
 801189c:	4473      	add	r3, lr
 801189e:	469e      	mov	lr, r3
 80118a0:	462e      	mov	r6, r5
 80118a2:	4566      	cmp	r6, ip
 80118a4:	d30e      	bcc.n	80118c4 <__mdiff+0xec>
 80118a6:	f10c 0203 	add.w	r2, ip, #3
 80118aa:	1b52      	subs	r2, r2, r5
 80118ac:	f022 0203 	bic.w	r2, r2, #3
 80118b0:	3d03      	subs	r5, #3
 80118b2:	45ac      	cmp	ip, r5
 80118b4:	bf38      	it	cc
 80118b6:	2200      	movcc	r2, #0
 80118b8:	441a      	add	r2, r3
 80118ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80118be:	b17b      	cbz	r3, 80118e0 <__mdiff+0x108>
 80118c0:	6107      	str	r7, [r0, #16]
 80118c2:	e7a3      	b.n	801180c <__mdiff+0x34>
 80118c4:	f856 8b04 	ldr.w	r8, [r6], #4
 80118c8:	fa11 f288 	uxtah	r2, r1, r8
 80118cc:	1414      	asrs	r4, r2, #16
 80118ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80118d2:	b292      	uxth	r2, r2
 80118d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80118d8:	f84e 2b04 	str.w	r2, [lr], #4
 80118dc:	1421      	asrs	r1, r4, #16
 80118de:	e7e0      	b.n	80118a2 <__mdiff+0xca>
 80118e0:	3f01      	subs	r7, #1
 80118e2:	e7ea      	b.n	80118ba <__mdiff+0xe2>
 80118e4:	0801515b 	.word	0x0801515b
 80118e8:	0801516c 	.word	0x0801516c

080118ec <__d2b>:
 80118ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80118f0:	4689      	mov	r9, r1
 80118f2:	2101      	movs	r1, #1
 80118f4:	ec57 6b10 	vmov	r6, r7, d0
 80118f8:	4690      	mov	r8, r2
 80118fa:	f7ff fccf 	bl	801129c <_Balloc>
 80118fe:	4604      	mov	r4, r0
 8011900:	b930      	cbnz	r0, 8011910 <__d2b+0x24>
 8011902:	4602      	mov	r2, r0
 8011904:	4b25      	ldr	r3, [pc, #148]	; (801199c <__d2b+0xb0>)
 8011906:	4826      	ldr	r0, [pc, #152]	; (80119a0 <__d2b+0xb4>)
 8011908:	f240 310a 	movw	r1, #778	; 0x30a
 801190c:	f000 faac 	bl	8011e68 <__assert_func>
 8011910:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011914:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011918:	bb35      	cbnz	r5, 8011968 <__d2b+0x7c>
 801191a:	2e00      	cmp	r6, #0
 801191c:	9301      	str	r3, [sp, #4]
 801191e:	d028      	beq.n	8011972 <__d2b+0x86>
 8011920:	4668      	mov	r0, sp
 8011922:	9600      	str	r6, [sp, #0]
 8011924:	f7ff fd82 	bl	801142c <__lo0bits>
 8011928:	9900      	ldr	r1, [sp, #0]
 801192a:	b300      	cbz	r0, 801196e <__d2b+0x82>
 801192c:	9a01      	ldr	r2, [sp, #4]
 801192e:	f1c0 0320 	rsb	r3, r0, #32
 8011932:	fa02 f303 	lsl.w	r3, r2, r3
 8011936:	430b      	orrs	r3, r1
 8011938:	40c2      	lsrs	r2, r0
 801193a:	6163      	str	r3, [r4, #20]
 801193c:	9201      	str	r2, [sp, #4]
 801193e:	9b01      	ldr	r3, [sp, #4]
 8011940:	61a3      	str	r3, [r4, #24]
 8011942:	2b00      	cmp	r3, #0
 8011944:	bf14      	ite	ne
 8011946:	2202      	movne	r2, #2
 8011948:	2201      	moveq	r2, #1
 801194a:	6122      	str	r2, [r4, #16]
 801194c:	b1d5      	cbz	r5, 8011984 <__d2b+0x98>
 801194e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011952:	4405      	add	r5, r0
 8011954:	f8c9 5000 	str.w	r5, [r9]
 8011958:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801195c:	f8c8 0000 	str.w	r0, [r8]
 8011960:	4620      	mov	r0, r4
 8011962:	b003      	add	sp, #12
 8011964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801196c:	e7d5      	b.n	801191a <__d2b+0x2e>
 801196e:	6161      	str	r1, [r4, #20]
 8011970:	e7e5      	b.n	801193e <__d2b+0x52>
 8011972:	a801      	add	r0, sp, #4
 8011974:	f7ff fd5a 	bl	801142c <__lo0bits>
 8011978:	9b01      	ldr	r3, [sp, #4]
 801197a:	6163      	str	r3, [r4, #20]
 801197c:	2201      	movs	r2, #1
 801197e:	6122      	str	r2, [r4, #16]
 8011980:	3020      	adds	r0, #32
 8011982:	e7e3      	b.n	801194c <__d2b+0x60>
 8011984:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011988:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801198c:	f8c9 0000 	str.w	r0, [r9]
 8011990:	6918      	ldr	r0, [r3, #16]
 8011992:	f7ff fd2b 	bl	80113ec <__hi0bits>
 8011996:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801199a:	e7df      	b.n	801195c <__d2b+0x70>
 801199c:	0801515b 	.word	0x0801515b
 80119a0:	0801516c 	.word	0x0801516c

080119a4 <_calloc_r>:
 80119a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119a6:	fba1 2402 	umull	r2, r4, r1, r2
 80119aa:	b94c      	cbnz	r4, 80119c0 <_calloc_r+0x1c>
 80119ac:	4611      	mov	r1, r2
 80119ae:	9201      	str	r2, [sp, #4]
 80119b0:	f000 f87a 	bl	8011aa8 <_malloc_r>
 80119b4:	9a01      	ldr	r2, [sp, #4]
 80119b6:	4605      	mov	r5, r0
 80119b8:	b930      	cbnz	r0, 80119c8 <_calloc_r+0x24>
 80119ba:	4628      	mov	r0, r5
 80119bc:	b003      	add	sp, #12
 80119be:	bd30      	pop	{r4, r5, pc}
 80119c0:	220c      	movs	r2, #12
 80119c2:	6002      	str	r2, [r0, #0]
 80119c4:	2500      	movs	r5, #0
 80119c6:	e7f8      	b.n	80119ba <_calloc_r+0x16>
 80119c8:	4621      	mov	r1, r4
 80119ca:	f7fe f94f 	bl	800fc6c <memset>
 80119ce:	e7f4      	b.n	80119ba <_calloc_r+0x16>

080119d0 <_free_r>:
 80119d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119d2:	2900      	cmp	r1, #0
 80119d4:	d044      	beq.n	8011a60 <_free_r+0x90>
 80119d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119da:	9001      	str	r0, [sp, #4]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	f1a1 0404 	sub.w	r4, r1, #4
 80119e2:	bfb8      	it	lt
 80119e4:	18e4      	addlt	r4, r4, r3
 80119e6:	f000 fa9b 	bl	8011f20 <__malloc_lock>
 80119ea:	4a1e      	ldr	r2, [pc, #120]	; (8011a64 <_free_r+0x94>)
 80119ec:	9801      	ldr	r0, [sp, #4]
 80119ee:	6813      	ldr	r3, [r2, #0]
 80119f0:	b933      	cbnz	r3, 8011a00 <_free_r+0x30>
 80119f2:	6063      	str	r3, [r4, #4]
 80119f4:	6014      	str	r4, [r2, #0]
 80119f6:	b003      	add	sp, #12
 80119f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119fc:	f000 ba96 	b.w	8011f2c <__malloc_unlock>
 8011a00:	42a3      	cmp	r3, r4
 8011a02:	d908      	bls.n	8011a16 <_free_r+0x46>
 8011a04:	6825      	ldr	r5, [r4, #0]
 8011a06:	1961      	adds	r1, r4, r5
 8011a08:	428b      	cmp	r3, r1
 8011a0a:	bf01      	itttt	eq
 8011a0c:	6819      	ldreq	r1, [r3, #0]
 8011a0e:	685b      	ldreq	r3, [r3, #4]
 8011a10:	1949      	addeq	r1, r1, r5
 8011a12:	6021      	streq	r1, [r4, #0]
 8011a14:	e7ed      	b.n	80119f2 <_free_r+0x22>
 8011a16:	461a      	mov	r2, r3
 8011a18:	685b      	ldr	r3, [r3, #4]
 8011a1a:	b10b      	cbz	r3, 8011a20 <_free_r+0x50>
 8011a1c:	42a3      	cmp	r3, r4
 8011a1e:	d9fa      	bls.n	8011a16 <_free_r+0x46>
 8011a20:	6811      	ldr	r1, [r2, #0]
 8011a22:	1855      	adds	r5, r2, r1
 8011a24:	42a5      	cmp	r5, r4
 8011a26:	d10b      	bne.n	8011a40 <_free_r+0x70>
 8011a28:	6824      	ldr	r4, [r4, #0]
 8011a2a:	4421      	add	r1, r4
 8011a2c:	1854      	adds	r4, r2, r1
 8011a2e:	42a3      	cmp	r3, r4
 8011a30:	6011      	str	r1, [r2, #0]
 8011a32:	d1e0      	bne.n	80119f6 <_free_r+0x26>
 8011a34:	681c      	ldr	r4, [r3, #0]
 8011a36:	685b      	ldr	r3, [r3, #4]
 8011a38:	6053      	str	r3, [r2, #4]
 8011a3a:	4421      	add	r1, r4
 8011a3c:	6011      	str	r1, [r2, #0]
 8011a3e:	e7da      	b.n	80119f6 <_free_r+0x26>
 8011a40:	d902      	bls.n	8011a48 <_free_r+0x78>
 8011a42:	230c      	movs	r3, #12
 8011a44:	6003      	str	r3, [r0, #0]
 8011a46:	e7d6      	b.n	80119f6 <_free_r+0x26>
 8011a48:	6825      	ldr	r5, [r4, #0]
 8011a4a:	1961      	adds	r1, r4, r5
 8011a4c:	428b      	cmp	r3, r1
 8011a4e:	bf04      	itt	eq
 8011a50:	6819      	ldreq	r1, [r3, #0]
 8011a52:	685b      	ldreq	r3, [r3, #4]
 8011a54:	6063      	str	r3, [r4, #4]
 8011a56:	bf04      	itt	eq
 8011a58:	1949      	addeq	r1, r1, r5
 8011a5a:	6021      	streq	r1, [r4, #0]
 8011a5c:	6054      	str	r4, [r2, #4]
 8011a5e:	e7ca      	b.n	80119f6 <_free_r+0x26>
 8011a60:	b003      	add	sp, #12
 8011a62:	bd30      	pop	{r4, r5, pc}
 8011a64:	20006894 	.word	0x20006894

08011a68 <sbrk_aligned>:
 8011a68:	b570      	push	{r4, r5, r6, lr}
 8011a6a:	4e0e      	ldr	r6, [pc, #56]	; (8011aa4 <sbrk_aligned+0x3c>)
 8011a6c:	460c      	mov	r4, r1
 8011a6e:	6831      	ldr	r1, [r6, #0]
 8011a70:	4605      	mov	r5, r0
 8011a72:	b911      	cbnz	r1, 8011a7a <sbrk_aligned+0x12>
 8011a74:	f000 f9e8 	bl	8011e48 <_sbrk_r>
 8011a78:	6030      	str	r0, [r6, #0]
 8011a7a:	4621      	mov	r1, r4
 8011a7c:	4628      	mov	r0, r5
 8011a7e:	f000 f9e3 	bl	8011e48 <_sbrk_r>
 8011a82:	1c43      	adds	r3, r0, #1
 8011a84:	d00a      	beq.n	8011a9c <sbrk_aligned+0x34>
 8011a86:	1cc4      	adds	r4, r0, #3
 8011a88:	f024 0403 	bic.w	r4, r4, #3
 8011a8c:	42a0      	cmp	r0, r4
 8011a8e:	d007      	beq.n	8011aa0 <sbrk_aligned+0x38>
 8011a90:	1a21      	subs	r1, r4, r0
 8011a92:	4628      	mov	r0, r5
 8011a94:	f000 f9d8 	bl	8011e48 <_sbrk_r>
 8011a98:	3001      	adds	r0, #1
 8011a9a:	d101      	bne.n	8011aa0 <sbrk_aligned+0x38>
 8011a9c:	f04f 34ff 	mov.w	r4, #4294967295
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	bd70      	pop	{r4, r5, r6, pc}
 8011aa4:	20006898 	.word	0x20006898

08011aa8 <_malloc_r>:
 8011aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aac:	1ccd      	adds	r5, r1, #3
 8011aae:	f025 0503 	bic.w	r5, r5, #3
 8011ab2:	3508      	adds	r5, #8
 8011ab4:	2d0c      	cmp	r5, #12
 8011ab6:	bf38      	it	cc
 8011ab8:	250c      	movcc	r5, #12
 8011aba:	2d00      	cmp	r5, #0
 8011abc:	4607      	mov	r7, r0
 8011abe:	db01      	blt.n	8011ac4 <_malloc_r+0x1c>
 8011ac0:	42a9      	cmp	r1, r5
 8011ac2:	d905      	bls.n	8011ad0 <_malloc_r+0x28>
 8011ac4:	230c      	movs	r3, #12
 8011ac6:	603b      	str	r3, [r7, #0]
 8011ac8:	2600      	movs	r6, #0
 8011aca:	4630      	mov	r0, r6
 8011acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ad0:	4e2e      	ldr	r6, [pc, #184]	; (8011b8c <_malloc_r+0xe4>)
 8011ad2:	f000 fa25 	bl	8011f20 <__malloc_lock>
 8011ad6:	6833      	ldr	r3, [r6, #0]
 8011ad8:	461c      	mov	r4, r3
 8011ada:	bb34      	cbnz	r4, 8011b2a <_malloc_r+0x82>
 8011adc:	4629      	mov	r1, r5
 8011ade:	4638      	mov	r0, r7
 8011ae0:	f7ff ffc2 	bl	8011a68 <sbrk_aligned>
 8011ae4:	1c43      	adds	r3, r0, #1
 8011ae6:	4604      	mov	r4, r0
 8011ae8:	d14d      	bne.n	8011b86 <_malloc_r+0xde>
 8011aea:	6834      	ldr	r4, [r6, #0]
 8011aec:	4626      	mov	r6, r4
 8011aee:	2e00      	cmp	r6, #0
 8011af0:	d140      	bne.n	8011b74 <_malloc_r+0xcc>
 8011af2:	6823      	ldr	r3, [r4, #0]
 8011af4:	4631      	mov	r1, r6
 8011af6:	4638      	mov	r0, r7
 8011af8:	eb04 0803 	add.w	r8, r4, r3
 8011afc:	f000 f9a4 	bl	8011e48 <_sbrk_r>
 8011b00:	4580      	cmp	r8, r0
 8011b02:	d13a      	bne.n	8011b7a <_malloc_r+0xd2>
 8011b04:	6821      	ldr	r1, [r4, #0]
 8011b06:	3503      	adds	r5, #3
 8011b08:	1a6d      	subs	r5, r5, r1
 8011b0a:	f025 0503 	bic.w	r5, r5, #3
 8011b0e:	3508      	adds	r5, #8
 8011b10:	2d0c      	cmp	r5, #12
 8011b12:	bf38      	it	cc
 8011b14:	250c      	movcc	r5, #12
 8011b16:	4629      	mov	r1, r5
 8011b18:	4638      	mov	r0, r7
 8011b1a:	f7ff ffa5 	bl	8011a68 <sbrk_aligned>
 8011b1e:	3001      	adds	r0, #1
 8011b20:	d02b      	beq.n	8011b7a <_malloc_r+0xd2>
 8011b22:	6823      	ldr	r3, [r4, #0]
 8011b24:	442b      	add	r3, r5
 8011b26:	6023      	str	r3, [r4, #0]
 8011b28:	e00e      	b.n	8011b48 <_malloc_r+0xa0>
 8011b2a:	6822      	ldr	r2, [r4, #0]
 8011b2c:	1b52      	subs	r2, r2, r5
 8011b2e:	d41e      	bmi.n	8011b6e <_malloc_r+0xc6>
 8011b30:	2a0b      	cmp	r2, #11
 8011b32:	d916      	bls.n	8011b62 <_malloc_r+0xba>
 8011b34:	1961      	adds	r1, r4, r5
 8011b36:	42a3      	cmp	r3, r4
 8011b38:	6025      	str	r5, [r4, #0]
 8011b3a:	bf18      	it	ne
 8011b3c:	6059      	strne	r1, [r3, #4]
 8011b3e:	6863      	ldr	r3, [r4, #4]
 8011b40:	bf08      	it	eq
 8011b42:	6031      	streq	r1, [r6, #0]
 8011b44:	5162      	str	r2, [r4, r5]
 8011b46:	604b      	str	r3, [r1, #4]
 8011b48:	4638      	mov	r0, r7
 8011b4a:	f104 060b 	add.w	r6, r4, #11
 8011b4e:	f000 f9ed 	bl	8011f2c <__malloc_unlock>
 8011b52:	f026 0607 	bic.w	r6, r6, #7
 8011b56:	1d23      	adds	r3, r4, #4
 8011b58:	1af2      	subs	r2, r6, r3
 8011b5a:	d0b6      	beq.n	8011aca <_malloc_r+0x22>
 8011b5c:	1b9b      	subs	r3, r3, r6
 8011b5e:	50a3      	str	r3, [r4, r2]
 8011b60:	e7b3      	b.n	8011aca <_malloc_r+0x22>
 8011b62:	6862      	ldr	r2, [r4, #4]
 8011b64:	42a3      	cmp	r3, r4
 8011b66:	bf0c      	ite	eq
 8011b68:	6032      	streq	r2, [r6, #0]
 8011b6a:	605a      	strne	r2, [r3, #4]
 8011b6c:	e7ec      	b.n	8011b48 <_malloc_r+0xa0>
 8011b6e:	4623      	mov	r3, r4
 8011b70:	6864      	ldr	r4, [r4, #4]
 8011b72:	e7b2      	b.n	8011ada <_malloc_r+0x32>
 8011b74:	4634      	mov	r4, r6
 8011b76:	6876      	ldr	r6, [r6, #4]
 8011b78:	e7b9      	b.n	8011aee <_malloc_r+0x46>
 8011b7a:	230c      	movs	r3, #12
 8011b7c:	603b      	str	r3, [r7, #0]
 8011b7e:	4638      	mov	r0, r7
 8011b80:	f000 f9d4 	bl	8011f2c <__malloc_unlock>
 8011b84:	e7a1      	b.n	8011aca <_malloc_r+0x22>
 8011b86:	6025      	str	r5, [r4, #0]
 8011b88:	e7de      	b.n	8011b48 <_malloc_r+0xa0>
 8011b8a:	bf00      	nop
 8011b8c:	20006894 	.word	0x20006894

08011b90 <__ssputs_r>:
 8011b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b94:	688e      	ldr	r6, [r1, #8]
 8011b96:	429e      	cmp	r6, r3
 8011b98:	4682      	mov	sl, r0
 8011b9a:	460c      	mov	r4, r1
 8011b9c:	4690      	mov	r8, r2
 8011b9e:	461f      	mov	r7, r3
 8011ba0:	d838      	bhi.n	8011c14 <__ssputs_r+0x84>
 8011ba2:	898a      	ldrh	r2, [r1, #12]
 8011ba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011ba8:	d032      	beq.n	8011c10 <__ssputs_r+0x80>
 8011baa:	6825      	ldr	r5, [r4, #0]
 8011bac:	6909      	ldr	r1, [r1, #16]
 8011bae:	eba5 0901 	sub.w	r9, r5, r1
 8011bb2:	6965      	ldr	r5, [r4, #20]
 8011bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011bb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	444b      	add	r3, r9
 8011bc0:	106d      	asrs	r5, r5, #1
 8011bc2:	429d      	cmp	r5, r3
 8011bc4:	bf38      	it	cc
 8011bc6:	461d      	movcc	r5, r3
 8011bc8:	0553      	lsls	r3, r2, #21
 8011bca:	d531      	bpl.n	8011c30 <__ssputs_r+0xa0>
 8011bcc:	4629      	mov	r1, r5
 8011bce:	f7ff ff6b 	bl	8011aa8 <_malloc_r>
 8011bd2:	4606      	mov	r6, r0
 8011bd4:	b950      	cbnz	r0, 8011bec <__ssputs_r+0x5c>
 8011bd6:	230c      	movs	r3, #12
 8011bd8:	f8ca 3000 	str.w	r3, [sl]
 8011bdc:	89a3      	ldrh	r3, [r4, #12]
 8011bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011be2:	81a3      	strh	r3, [r4, #12]
 8011be4:	f04f 30ff 	mov.w	r0, #4294967295
 8011be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bec:	6921      	ldr	r1, [r4, #16]
 8011bee:	464a      	mov	r2, r9
 8011bf0:	f7fe f82e 	bl	800fc50 <memcpy>
 8011bf4:	89a3      	ldrh	r3, [r4, #12]
 8011bf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bfe:	81a3      	strh	r3, [r4, #12]
 8011c00:	6126      	str	r6, [r4, #16]
 8011c02:	6165      	str	r5, [r4, #20]
 8011c04:	444e      	add	r6, r9
 8011c06:	eba5 0509 	sub.w	r5, r5, r9
 8011c0a:	6026      	str	r6, [r4, #0]
 8011c0c:	60a5      	str	r5, [r4, #8]
 8011c0e:	463e      	mov	r6, r7
 8011c10:	42be      	cmp	r6, r7
 8011c12:	d900      	bls.n	8011c16 <__ssputs_r+0x86>
 8011c14:	463e      	mov	r6, r7
 8011c16:	6820      	ldr	r0, [r4, #0]
 8011c18:	4632      	mov	r2, r6
 8011c1a:	4641      	mov	r1, r8
 8011c1c:	f000 f966 	bl	8011eec <memmove>
 8011c20:	68a3      	ldr	r3, [r4, #8]
 8011c22:	1b9b      	subs	r3, r3, r6
 8011c24:	60a3      	str	r3, [r4, #8]
 8011c26:	6823      	ldr	r3, [r4, #0]
 8011c28:	4433      	add	r3, r6
 8011c2a:	6023      	str	r3, [r4, #0]
 8011c2c:	2000      	movs	r0, #0
 8011c2e:	e7db      	b.n	8011be8 <__ssputs_r+0x58>
 8011c30:	462a      	mov	r2, r5
 8011c32:	f000 f981 	bl	8011f38 <_realloc_r>
 8011c36:	4606      	mov	r6, r0
 8011c38:	2800      	cmp	r0, #0
 8011c3a:	d1e1      	bne.n	8011c00 <__ssputs_r+0x70>
 8011c3c:	6921      	ldr	r1, [r4, #16]
 8011c3e:	4650      	mov	r0, sl
 8011c40:	f7ff fec6 	bl	80119d0 <_free_r>
 8011c44:	e7c7      	b.n	8011bd6 <__ssputs_r+0x46>
	...

08011c48 <_svfiprintf_r>:
 8011c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c4c:	4698      	mov	r8, r3
 8011c4e:	898b      	ldrh	r3, [r1, #12]
 8011c50:	061b      	lsls	r3, r3, #24
 8011c52:	b09d      	sub	sp, #116	; 0x74
 8011c54:	4607      	mov	r7, r0
 8011c56:	460d      	mov	r5, r1
 8011c58:	4614      	mov	r4, r2
 8011c5a:	d50e      	bpl.n	8011c7a <_svfiprintf_r+0x32>
 8011c5c:	690b      	ldr	r3, [r1, #16]
 8011c5e:	b963      	cbnz	r3, 8011c7a <_svfiprintf_r+0x32>
 8011c60:	2140      	movs	r1, #64	; 0x40
 8011c62:	f7ff ff21 	bl	8011aa8 <_malloc_r>
 8011c66:	6028      	str	r0, [r5, #0]
 8011c68:	6128      	str	r0, [r5, #16]
 8011c6a:	b920      	cbnz	r0, 8011c76 <_svfiprintf_r+0x2e>
 8011c6c:	230c      	movs	r3, #12
 8011c6e:	603b      	str	r3, [r7, #0]
 8011c70:	f04f 30ff 	mov.w	r0, #4294967295
 8011c74:	e0d1      	b.n	8011e1a <_svfiprintf_r+0x1d2>
 8011c76:	2340      	movs	r3, #64	; 0x40
 8011c78:	616b      	str	r3, [r5, #20]
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8011c7e:	2320      	movs	r3, #32
 8011c80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c88:	2330      	movs	r3, #48	; 0x30
 8011c8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011e34 <_svfiprintf_r+0x1ec>
 8011c8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c92:	f04f 0901 	mov.w	r9, #1
 8011c96:	4623      	mov	r3, r4
 8011c98:	469a      	mov	sl, r3
 8011c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c9e:	b10a      	cbz	r2, 8011ca4 <_svfiprintf_r+0x5c>
 8011ca0:	2a25      	cmp	r2, #37	; 0x25
 8011ca2:	d1f9      	bne.n	8011c98 <_svfiprintf_r+0x50>
 8011ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8011ca8:	d00b      	beq.n	8011cc2 <_svfiprintf_r+0x7a>
 8011caa:	465b      	mov	r3, fp
 8011cac:	4622      	mov	r2, r4
 8011cae:	4629      	mov	r1, r5
 8011cb0:	4638      	mov	r0, r7
 8011cb2:	f7ff ff6d 	bl	8011b90 <__ssputs_r>
 8011cb6:	3001      	adds	r0, #1
 8011cb8:	f000 80aa 	beq.w	8011e10 <_svfiprintf_r+0x1c8>
 8011cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011cbe:	445a      	add	r2, fp
 8011cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8011cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	f000 80a2 	beq.w	8011e10 <_svfiprintf_r+0x1c8>
 8011ccc:	2300      	movs	r3, #0
 8011cce:	f04f 32ff 	mov.w	r2, #4294967295
 8011cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cd6:	f10a 0a01 	add.w	sl, sl, #1
 8011cda:	9304      	str	r3, [sp, #16]
 8011cdc:	9307      	str	r3, [sp, #28]
 8011cde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8011ce4:	4654      	mov	r4, sl
 8011ce6:	2205      	movs	r2, #5
 8011ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cec:	4851      	ldr	r0, [pc, #324]	; (8011e34 <_svfiprintf_r+0x1ec>)
 8011cee:	f7ee fa77 	bl	80001e0 <memchr>
 8011cf2:	9a04      	ldr	r2, [sp, #16]
 8011cf4:	b9d8      	cbnz	r0, 8011d2e <_svfiprintf_r+0xe6>
 8011cf6:	06d0      	lsls	r0, r2, #27
 8011cf8:	bf44      	itt	mi
 8011cfa:	2320      	movmi	r3, #32
 8011cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d00:	0711      	lsls	r1, r2, #28
 8011d02:	bf44      	itt	mi
 8011d04:	232b      	movmi	r3, #43	; 0x2b
 8011d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8011d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8011d10:	d015      	beq.n	8011d3e <_svfiprintf_r+0xf6>
 8011d12:	9a07      	ldr	r2, [sp, #28]
 8011d14:	4654      	mov	r4, sl
 8011d16:	2000      	movs	r0, #0
 8011d18:	f04f 0c0a 	mov.w	ip, #10
 8011d1c:	4621      	mov	r1, r4
 8011d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d22:	3b30      	subs	r3, #48	; 0x30
 8011d24:	2b09      	cmp	r3, #9
 8011d26:	d94e      	bls.n	8011dc6 <_svfiprintf_r+0x17e>
 8011d28:	b1b0      	cbz	r0, 8011d58 <_svfiprintf_r+0x110>
 8011d2a:	9207      	str	r2, [sp, #28]
 8011d2c:	e014      	b.n	8011d58 <_svfiprintf_r+0x110>
 8011d2e:	eba0 0308 	sub.w	r3, r0, r8
 8011d32:	fa09 f303 	lsl.w	r3, r9, r3
 8011d36:	4313      	orrs	r3, r2
 8011d38:	9304      	str	r3, [sp, #16]
 8011d3a:	46a2      	mov	sl, r4
 8011d3c:	e7d2      	b.n	8011ce4 <_svfiprintf_r+0x9c>
 8011d3e:	9b03      	ldr	r3, [sp, #12]
 8011d40:	1d19      	adds	r1, r3, #4
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	9103      	str	r1, [sp, #12]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	bfbb      	ittet	lt
 8011d4a:	425b      	neglt	r3, r3
 8011d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8011d50:	9307      	strge	r3, [sp, #28]
 8011d52:	9307      	strlt	r3, [sp, #28]
 8011d54:	bfb8      	it	lt
 8011d56:	9204      	strlt	r2, [sp, #16]
 8011d58:	7823      	ldrb	r3, [r4, #0]
 8011d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8011d5c:	d10c      	bne.n	8011d78 <_svfiprintf_r+0x130>
 8011d5e:	7863      	ldrb	r3, [r4, #1]
 8011d60:	2b2a      	cmp	r3, #42	; 0x2a
 8011d62:	d135      	bne.n	8011dd0 <_svfiprintf_r+0x188>
 8011d64:	9b03      	ldr	r3, [sp, #12]
 8011d66:	1d1a      	adds	r2, r3, #4
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	9203      	str	r2, [sp, #12]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	bfb8      	it	lt
 8011d70:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d74:	3402      	adds	r4, #2
 8011d76:	9305      	str	r3, [sp, #20]
 8011d78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011e44 <_svfiprintf_r+0x1fc>
 8011d7c:	7821      	ldrb	r1, [r4, #0]
 8011d7e:	2203      	movs	r2, #3
 8011d80:	4650      	mov	r0, sl
 8011d82:	f7ee fa2d 	bl	80001e0 <memchr>
 8011d86:	b140      	cbz	r0, 8011d9a <_svfiprintf_r+0x152>
 8011d88:	2340      	movs	r3, #64	; 0x40
 8011d8a:	eba0 000a 	sub.w	r0, r0, sl
 8011d8e:	fa03 f000 	lsl.w	r0, r3, r0
 8011d92:	9b04      	ldr	r3, [sp, #16]
 8011d94:	4303      	orrs	r3, r0
 8011d96:	3401      	adds	r4, #1
 8011d98:	9304      	str	r3, [sp, #16]
 8011d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d9e:	4826      	ldr	r0, [pc, #152]	; (8011e38 <_svfiprintf_r+0x1f0>)
 8011da0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011da4:	2206      	movs	r2, #6
 8011da6:	f7ee fa1b 	bl	80001e0 <memchr>
 8011daa:	2800      	cmp	r0, #0
 8011dac:	d038      	beq.n	8011e20 <_svfiprintf_r+0x1d8>
 8011dae:	4b23      	ldr	r3, [pc, #140]	; (8011e3c <_svfiprintf_r+0x1f4>)
 8011db0:	bb1b      	cbnz	r3, 8011dfa <_svfiprintf_r+0x1b2>
 8011db2:	9b03      	ldr	r3, [sp, #12]
 8011db4:	3307      	adds	r3, #7
 8011db6:	f023 0307 	bic.w	r3, r3, #7
 8011dba:	3308      	adds	r3, #8
 8011dbc:	9303      	str	r3, [sp, #12]
 8011dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dc0:	4433      	add	r3, r6
 8011dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8011dc4:	e767      	b.n	8011c96 <_svfiprintf_r+0x4e>
 8011dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dca:	460c      	mov	r4, r1
 8011dcc:	2001      	movs	r0, #1
 8011dce:	e7a5      	b.n	8011d1c <_svfiprintf_r+0xd4>
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	3401      	adds	r4, #1
 8011dd4:	9305      	str	r3, [sp, #20]
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	f04f 0c0a 	mov.w	ip, #10
 8011ddc:	4620      	mov	r0, r4
 8011dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011de2:	3a30      	subs	r2, #48	; 0x30
 8011de4:	2a09      	cmp	r2, #9
 8011de6:	d903      	bls.n	8011df0 <_svfiprintf_r+0x1a8>
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d0c5      	beq.n	8011d78 <_svfiprintf_r+0x130>
 8011dec:	9105      	str	r1, [sp, #20]
 8011dee:	e7c3      	b.n	8011d78 <_svfiprintf_r+0x130>
 8011df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8011df4:	4604      	mov	r4, r0
 8011df6:	2301      	movs	r3, #1
 8011df8:	e7f0      	b.n	8011ddc <_svfiprintf_r+0x194>
 8011dfa:	ab03      	add	r3, sp, #12
 8011dfc:	9300      	str	r3, [sp, #0]
 8011dfe:	462a      	mov	r2, r5
 8011e00:	4b0f      	ldr	r3, [pc, #60]	; (8011e40 <_svfiprintf_r+0x1f8>)
 8011e02:	a904      	add	r1, sp, #16
 8011e04:	4638      	mov	r0, r7
 8011e06:	f7fd ffd9 	bl	800fdbc <_printf_float>
 8011e0a:	1c42      	adds	r2, r0, #1
 8011e0c:	4606      	mov	r6, r0
 8011e0e:	d1d6      	bne.n	8011dbe <_svfiprintf_r+0x176>
 8011e10:	89ab      	ldrh	r3, [r5, #12]
 8011e12:	065b      	lsls	r3, r3, #25
 8011e14:	f53f af2c 	bmi.w	8011c70 <_svfiprintf_r+0x28>
 8011e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e1a:	b01d      	add	sp, #116	; 0x74
 8011e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e20:	ab03      	add	r3, sp, #12
 8011e22:	9300      	str	r3, [sp, #0]
 8011e24:	462a      	mov	r2, r5
 8011e26:	4b06      	ldr	r3, [pc, #24]	; (8011e40 <_svfiprintf_r+0x1f8>)
 8011e28:	a904      	add	r1, sp, #16
 8011e2a:	4638      	mov	r0, r7
 8011e2c:	f7fe fa6a 	bl	8010304 <_printf_i>
 8011e30:	e7eb      	b.n	8011e0a <_svfiprintf_r+0x1c2>
 8011e32:	bf00      	nop
 8011e34:	080152c4 	.word	0x080152c4
 8011e38:	080152ce 	.word	0x080152ce
 8011e3c:	0800fdbd 	.word	0x0800fdbd
 8011e40:	08011b91 	.word	0x08011b91
 8011e44:	080152ca 	.word	0x080152ca

08011e48 <_sbrk_r>:
 8011e48:	b538      	push	{r3, r4, r5, lr}
 8011e4a:	4d06      	ldr	r5, [pc, #24]	; (8011e64 <_sbrk_r+0x1c>)
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	4604      	mov	r4, r0
 8011e50:	4608      	mov	r0, r1
 8011e52:	602b      	str	r3, [r5, #0]
 8011e54:	f7f2 f944 	bl	80040e0 <_sbrk>
 8011e58:	1c43      	adds	r3, r0, #1
 8011e5a:	d102      	bne.n	8011e62 <_sbrk_r+0x1a>
 8011e5c:	682b      	ldr	r3, [r5, #0]
 8011e5e:	b103      	cbz	r3, 8011e62 <_sbrk_r+0x1a>
 8011e60:	6023      	str	r3, [r4, #0]
 8011e62:	bd38      	pop	{r3, r4, r5, pc}
 8011e64:	2000689c 	.word	0x2000689c

08011e68 <__assert_func>:
 8011e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e6a:	4614      	mov	r4, r2
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	4b09      	ldr	r3, [pc, #36]	; (8011e94 <__assert_func+0x2c>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	4605      	mov	r5, r0
 8011e74:	68d8      	ldr	r0, [r3, #12]
 8011e76:	b14c      	cbz	r4, 8011e8c <__assert_func+0x24>
 8011e78:	4b07      	ldr	r3, [pc, #28]	; (8011e98 <__assert_func+0x30>)
 8011e7a:	9100      	str	r1, [sp, #0]
 8011e7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e80:	4906      	ldr	r1, [pc, #24]	; (8011e9c <__assert_func+0x34>)
 8011e82:	462b      	mov	r3, r5
 8011e84:	f000 f80e 	bl	8011ea4 <fiprintf>
 8011e88:	f000 faac 	bl	80123e4 <abort>
 8011e8c:	4b04      	ldr	r3, [pc, #16]	; (8011ea0 <__assert_func+0x38>)
 8011e8e:	461c      	mov	r4, r3
 8011e90:	e7f3      	b.n	8011e7a <__assert_func+0x12>
 8011e92:	bf00      	nop
 8011e94:	2000001c 	.word	0x2000001c
 8011e98:	080152d5 	.word	0x080152d5
 8011e9c:	080152e2 	.word	0x080152e2
 8011ea0:	08015310 	.word	0x08015310

08011ea4 <fiprintf>:
 8011ea4:	b40e      	push	{r1, r2, r3}
 8011ea6:	b503      	push	{r0, r1, lr}
 8011ea8:	4601      	mov	r1, r0
 8011eaa:	ab03      	add	r3, sp, #12
 8011eac:	4805      	ldr	r0, [pc, #20]	; (8011ec4 <fiprintf+0x20>)
 8011eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8011eb2:	6800      	ldr	r0, [r0, #0]
 8011eb4:	9301      	str	r3, [sp, #4]
 8011eb6:	f000 f897 	bl	8011fe8 <_vfiprintf_r>
 8011eba:	b002      	add	sp, #8
 8011ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ec0:	b003      	add	sp, #12
 8011ec2:	4770      	bx	lr
 8011ec4:	2000001c 	.word	0x2000001c

08011ec8 <__ascii_mbtowc>:
 8011ec8:	b082      	sub	sp, #8
 8011eca:	b901      	cbnz	r1, 8011ece <__ascii_mbtowc+0x6>
 8011ecc:	a901      	add	r1, sp, #4
 8011ece:	b142      	cbz	r2, 8011ee2 <__ascii_mbtowc+0x1a>
 8011ed0:	b14b      	cbz	r3, 8011ee6 <__ascii_mbtowc+0x1e>
 8011ed2:	7813      	ldrb	r3, [r2, #0]
 8011ed4:	600b      	str	r3, [r1, #0]
 8011ed6:	7812      	ldrb	r2, [r2, #0]
 8011ed8:	1e10      	subs	r0, r2, #0
 8011eda:	bf18      	it	ne
 8011edc:	2001      	movne	r0, #1
 8011ede:	b002      	add	sp, #8
 8011ee0:	4770      	bx	lr
 8011ee2:	4610      	mov	r0, r2
 8011ee4:	e7fb      	b.n	8011ede <__ascii_mbtowc+0x16>
 8011ee6:	f06f 0001 	mvn.w	r0, #1
 8011eea:	e7f8      	b.n	8011ede <__ascii_mbtowc+0x16>

08011eec <memmove>:
 8011eec:	4288      	cmp	r0, r1
 8011eee:	b510      	push	{r4, lr}
 8011ef0:	eb01 0402 	add.w	r4, r1, r2
 8011ef4:	d902      	bls.n	8011efc <memmove+0x10>
 8011ef6:	4284      	cmp	r4, r0
 8011ef8:	4623      	mov	r3, r4
 8011efa:	d807      	bhi.n	8011f0c <memmove+0x20>
 8011efc:	1e43      	subs	r3, r0, #1
 8011efe:	42a1      	cmp	r1, r4
 8011f00:	d008      	beq.n	8011f14 <memmove+0x28>
 8011f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011f0a:	e7f8      	b.n	8011efe <memmove+0x12>
 8011f0c:	4402      	add	r2, r0
 8011f0e:	4601      	mov	r1, r0
 8011f10:	428a      	cmp	r2, r1
 8011f12:	d100      	bne.n	8011f16 <memmove+0x2a>
 8011f14:	bd10      	pop	{r4, pc}
 8011f16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011f1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011f1e:	e7f7      	b.n	8011f10 <memmove+0x24>

08011f20 <__malloc_lock>:
 8011f20:	4801      	ldr	r0, [pc, #4]	; (8011f28 <__malloc_lock+0x8>)
 8011f22:	f000 bc1f 	b.w	8012764 <__retarget_lock_acquire_recursive>
 8011f26:	bf00      	nop
 8011f28:	200068a0 	.word	0x200068a0

08011f2c <__malloc_unlock>:
 8011f2c:	4801      	ldr	r0, [pc, #4]	; (8011f34 <__malloc_unlock+0x8>)
 8011f2e:	f000 bc1a 	b.w	8012766 <__retarget_lock_release_recursive>
 8011f32:	bf00      	nop
 8011f34:	200068a0 	.word	0x200068a0

08011f38 <_realloc_r>:
 8011f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f3c:	4680      	mov	r8, r0
 8011f3e:	4614      	mov	r4, r2
 8011f40:	460e      	mov	r6, r1
 8011f42:	b921      	cbnz	r1, 8011f4e <_realloc_r+0x16>
 8011f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f48:	4611      	mov	r1, r2
 8011f4a:	f7ff bdad 	b.w	8011aa8 <_malloc_r>
 8011f4e:	b92a      	cbnz	r2, 8011f5c <_realloc_r+0x24>
 8011f50:	f7ff fd3e 	bl	80119d0 <_free_r>
 8011f54:	4625      	mov	r5, r4
 8011f56:	4628      	mov	r0, r5
 8011f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f5c:	f000 fc6a 	bl	8012834 <_malloc_usable_size_r>
 8011f60:	4284      	cmp	r4, r0
 8011f62:	4607      	mov	r7, r0
 8011f64:	d802      	bhi.n	8011f6c <_realloc_r+0x34>
 8011f66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011f6a:	d812      	bhi.n	8011f92 <_realloc_r+0x5a>
 8011f6c:	4621      	mov	r1, r4
 8011f6e:	4640      	mov	r0, r8
 8011f70:	f7ff fd9a 	bl	8011aa8 <_malloc_r>
 8011f74:	4605      	mov	r5, r0
 8011f76:	2800      	cmp	r0, #0
 8011f78:	d0ed      	beq.n	8011f56 <_realloc_r+0x1e>
 8011f7a:	42bc      	cmp	r4, r7
 8011f7c:	4622      	mov	r2, r4
 8011f7e:	4631      	mov	r1, r6
 8011f80:	bf28      	it	cs
 8011f82:	463a      	movcs	r2, r7
 8011f84:	f7fd fe64 	bl	800fc50 <memcpy>
 8011f88:	4631      	mov	r1, r6
 8011f8a:	4640      	mov	r0, r8
 8011f8c:	f7ff fd20 	bl	80119d0 <_free_r>
 8011f90:	e7e1      	b.n	8011f56 <_realloc_r+0x1e>
 8011f92:	4635      	mov	r5, r6
 8011f94:	e7df      	b.n	8011f56 <_realloc_r+0x1e>

08011f96 <__sfputc_r>:
 8011f96:	6893      	ldr	r3, [r2, #8]
 8011f98:	3b01      	subs	r3, #1
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	b410      	push	{r4}
 8011f9e:	6093      	str	r3, [r2, #8]
 8011fa0:	da08      	bge.n	8011fb4 <__sfputc_r+0x1e>
 8011fa2:	6994      	ldr	r4, [r2, #24]
 8011fa4:	42a3      	cmp	r3, r4
 8011fa6:	db01      	blt.n	8011fac <__sfputc_r+0x16>
 8011fa8:	290a      	cmp	r1, #10
 8011faa:	d103      	bne.n	8011fb4 <__sfputc_r+0x1e>
 8011fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fb0:	f000 b94a 	b.w	8012248 <__swbuf_r>
 8011fb4:	6813      	ldr	r3, [r2, #0]
 8011fb6:	1c58      	adds	r0, r3, #1
 8011fb8:	6010      	str	r0, [r2, #0]
 8011fba:	7019      	strb	r1, [r3, #0]
 8011fbc:	4608      	mov	r0, r1
 8011fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fc2:	4770      	bx	lr

08011fc4 <__sfputs_r>:
 8011fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fc6:	4606      	mov	r6, r0
 8011fc8:	460f      	mov	r7, r1
 8011fca:	4614      	mov	r4, r2
 8011fcc:	18d5      	adds	r5, r2, r3
 8011fce:	42ac      	cmp	r4, r5
 8011fd0:	d101      	bne.n	8011fd6 <__sfputs_r+0x12>
 8011fd2:	2000      	movs	r0, #0
 8011fd4:	e007      	b.n	8011fe6 <__sfputs_r+0x22>
 8011fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fda:	463a      	mov	r2, r7
 8011fdc:	4630      	mov	r0, r6
 8011fde:	f7ff ffda 	bl	8011f96 <__sfputc_r>
 8011fe2:	1c43      	adds	r3, r0, #1
 8011fe4:	d1f3      	bne.n	8011fce <__sfputs_r+0xa>
 8011fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011fe8 <_vfiprintf_r>:
 8011fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fec:	460d      	mov	r5, r1
 8011fee:	b09d      	sub	sp, #116	; 0x74
 8011ff0:	4614      	mov	r4, r2
 8011ff2:	4698      	mov	r8, r3
 8011ff4:	4606      	mov	r6, r0
 8011ff6:	b118      	cbz	r0, 8012000 <_vfiprintf_r+0x18>
 8011ff8:	6983      	ldr	r3, [r0, #24]
 8011ffa:	b90b      	cbnz	r3, 8012000 <_vfiprintf_r+0x18>
 8011ffc:	f000 fb14 	bl	8012628 <__sinit>
 8012000:	4b89      	ldr	r3, [pc, #548]	; (8012228 <_vfiprintf_r+0x240>)
 8012002:	429d      	cmp	r5, r3
 8012004:	d11b      	bne.n	801203e <_vfiprintf_r+0x56>
 8012006:	6875      	ldr	r5, [r6, #4]
 8012008:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801200a:	07d9      	lsls	r1, r3, #31
 801200c:	d405      	bmi.n	801201a <_vfiprintf_r+0x32>
 801200e:	89ab      	ldrh	r3, [r5, #12]
 8012010:	059a      	lsls	r2, r3, #22
 8012012:	d402      	bmi.n	801201a <_vfiprintf_r+0x32>
 8012014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012016:	f000 fba5 	bl	8012764 <__retarget_lock_acquire_recursive>
 801201a:	89ab      	ldrh	r3, [r5, #12]
 801201c:	071b      	lsls	r3, r3, #28
 801201e:	d501      	bpl.n	8012024 <_vfiprintf_r+0x3c>
 8012020:	692b      	ldr	r3, [r5, #16]
 8012022:	b9eb      	cbnz	r3, 8012060 <_vfiprintf_r+0x78>
 8012024:	4629      	mov	r1, r5
 8012026:	4630      	mov	r0, r6
 8012028:	f000 f96e 	bl	8012308 <__swsetup_r>
 801202c:	b1c0      	cbz	r0, 8012060 <_vfiprintf_r+0x78>
 801202e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012030:	07dc      	lsls	r4, r3, #31
 8012032:	d50e      	bpl.n	8012052 <_vfiprintf_r+0x6a>
 8012034:	f04f 30ff 	mov.w	r0, #4294967295
 8012038:	b01d      	add	sp, #116	; 0x74
 801203a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801203e:	4b7b      	ldr	r3, [pc, #492]	; (801222c <_vfiprintf_r+0x244>)
 8012040:	429d      	cmp	r5, r3
 8012042:	d101      	bne.n	8012048 <_vfiprintf_r+0x60>
 8012044:	68b5      	ldr	r5, [r6, #8]
 8012046:	e7df      	b.n	8012008 <_vfiprintf_r+0x20>
 8012048:	4b79      	ldr	r3, [pc, #484]	; (8012230 <_vfiprintf_r+0x248>)
 801204a:	429d      	cmp	r5, r3
 801204c:	bf08      	it	eq
 801204e:	68f5      	ldreq	r5, [r6, #12]
 8012050:	e7da      	b.n	8012008 <_vfiprintf_r+0x20>
 8012052:	89ab      	ldrh	r3, [r5, #12]
 8012054:	0598      	lsls	r0, r3, #22
 8012056:	d4ed      	bmi.n	8012034 <_vfiprintf_r+0x4c>
 8012058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801205a:	f000 fb84 	bl	8012766 <__retarget_lock_release_recursive>
 801205e:	e7e9      	b.n	8012034 <_vfiprintf_r+0x4c>
 8012060:	2300      	movs	r3, #0
 8012062:	9309      	str	r3, [sp, #36]	; 0x24
 8012064:	2320      	movs	r3, #32
 8012066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801206a:	f8cd 800c 	str.w	r8, [sp, #12]
 801206e:	2330      	movs	r3, #48	; 0x30
 8012070:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012234 <_vfiprintf_r+0x24c>
 8012074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012078:	f04f 0901 	mov.w	r9, #1
 801207c:	4623      	mov	r3, r4
 801207e:	469a      	mov	sl, r3
 8012080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012084:	b10a      	cbz	r2, 801208a <_vfiprintf_r+0xa2>
 8012086:	2a25      	cmp	r2, #37	; 0x25
 8012088:	d1f9      	bne.n	801207e <_vfiprintf_r+0x96>
 801208a:	ebba 0b04 	subs.w	fp, sl, r4
 801208e:	d00b      	beq.n	80120a8 <_vfiprintf_r+0xc0>
 8012090:	465b      	mov	r3, fp
 8012092:	4622      	mov	r2, r4
 8012094:	4629      	mov	r1, r5
 8012096:	4630      	mov	r0, r6
 8012098:	f7ff ff94 	bl	8011fc4 <__sfputs_r>
 801209c:	3001      	adds	r0, #1
 801209e:	f000 80aa 	beq.w	80121f6 <_vfiprintf_r+0x20e>
 80120a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120a4:	445a      	add	r2, fp
 80120a6:	9209      	str	r2, [sp, #36]	; 0x24
 80120a8:	f89a 3000 	ldrb.w	r3, [sl]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	f000 80a2 	beq.w	80121f6 <_vfiprintf_r+0x20e>
 80120b2:	2300      	movs	r3, #0
 80120b4:	f04f 32ff 	mov.w	r2, #4294967295
 80120b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120bc:	f10a 0a01 	add.w	sl, sl, #1
 80120c0:	9304      	str	r3, [sp, #16]
 80120c2:	9307      	str	r3, [sp, #28]
 80120c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120c8:	931a      	str	r3, [sp, #104]	; 0x68
 80120ca:	4654      	mov	r4, sl
 80120cc:	2205      	movs	r2, #5
 80120ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120d2:	4858      	ldr	r0, [pc, #352]	; (8012234 <_vfiprintf_r+0x24c>)
 80120d4:	f7ee f884 	bl	80001e0 <memchr>
 80120d8:	9a04      	ldr	r2, [sp, #16]
 80120da:	b9d8      	cbnz	r0, 8012114 <_vfiprintf_r+0x12c>
 80120dc:	06d1      	lsls	r1, r2, #27
 80120de:	bf44      	itt	mi
 80120e0:	2320      	movmi	r3, #32
 80120e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120e6:	0713      	lsls	r3, r2, #28
 80120e8:	bf44      	itt	mi
 80120ea:	232b      	movmi	r3, #43	; 0x2b
 80120ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120f0:	f89a 3000 	ldrb.w	r3, [sl]
 80120f4:	2b2a      	cmp	r3, #42	; 0x2a
 80120f6:	d015      	beq.n	8012124 <_vfiprintf_r+0x13c>
 80120f8:	9a07      	ldr	r2, [sp, #28]
 80120fa:	4654      	mov	r4, sl
 80120fc:	2000      	movs	r0, #0
 80120fe:	f04f 0c0a 	mov.w	ip, #10
 8012102:	4621      	mov	r1, r4
 8012104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012108:	3b30      	subs	r3, #48	; 0x30
 801210a:	2b09      	cmp	r3, #9
 801210c:	d94e      	bls.n	80121ac <_vfiprintf_r+0x1c4>
 801210e:	b1b0      	cbz	r0, 801213e <_vfiprintf_r+0x156>
 8012110:	9207      	str	r2, [sp, #28]
 8012112:	e014      	b.n	801213e <_vfiprintf_r+0x156>
 8012114:	eba0 0308 	sub.w	r3, r0, r8
 8012118:	fa09 f303 	lsl.w	r3, r9, r3
 801211c:	4313      	orrs	r3, r2
 801211e:	9304      	str	r3, [sp, #16]
 8012120:	46a2      	mov	sl, r4
 8012122:	e7d2      	b.n	80120ca <_vfiprintf_r+0xe2>
 8012124:	9b03      	ldr	r3, [sp, #12]
 8012126:	1d19      	adds	r1, r3, #4
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	9103      	str	r1, [sp, #12]
 801212c:	2b00      	cmp	r3, #0
 801212e:	bfbb      	ittet	lt
 8012130:	425b      	neglt	r3, r3
 8012132:	f042 0202 	orrlt.w	r2, r2, #2
 8012136:	9307      	strge	r3, [sp, #28]
 8012138:	9307      	strlt	r3, [sp, #28]
 801213a:	bfb8      	it	lt
 801213c:	9204      	strlt	r2, [sp, #16]
 801213e:	7823      	ldrb	r3, [r4, #0]
 8012140:	2b2e      	cmp	r3, #46	; 0x2e
 8012142:	d10c      	bne.n	801215e <_vfiprintf_r+0x176>
 8012144:	7863      	ldrb	r3, [r4, #1]
 8012146:	2b2a      	cmp	r3, #42	; 0x2a
 8012148:	d135      	bne.n	80121b6 <_vfiprintf_r+0x1ce>
 801214a:	9b03      	ldr	r3, [sp, #12]
 801214c:	1d1a      	adds	r2, r3, #4
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	9203      	str	r2, [sp, #12]
 8012152:	2b00      	cmp	r3, #0
 8012154:	bfb8      	it	lt
 8012156:	f04f 33ff 	movlt.w	r3, #4294967295
 801215a:	3402      	adds	r4, #2
 801215c:	9305      	str	r3, [sp, #20]
 801215e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012244 <_vfiprintf_r+0x25c>
 8012162:	7821      	ldrb	r1, [r4, #0]
 8012164:	2203      	movs	r2, #3
 8012166:	4650      	mov	r0, sl
 8012168:	f7ee f83a 	bl	80001e0 <memchr>
 801216c:	b140      	cbz	r0, 8012180 <_vfiprintf_r+0x198>
 801216e:	2340      	movs	r3, #64	; 0x40
 8012170:	eba0 000a 	sub.w	r0, r0, sl
 8012174:	fa03 f000 	lsl.w	r0, r3, r0
 8012178:	9b04      	ldr	r3, [sp, #16]
 801217a:	4303      	orrs	r3, r0
 801217c:	3401      	adds	r4, #1
 801217e:	9304      	str	r3, [sp, #16]
 8012180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012184:	482c      	ldr	r0, [pc, #176]	; (8012238 <_vfiprintf_r+0x250>)
 8012186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801218a:	2206      	movs	r2, #6
 801218c:	f7ee f828 	bl	80001e0 <memchr>
 8012190:	2800      	cmp	r0, #0
 8012192:	d03f      	beq.n	8012214 <_vfiprintf_r+0x22c>
 8012194:	4b29      	ldr	r3, [pc, #164]	; (801223c <_vfiprintf_r+0x254>)
 8012196:	bb1b      	cbnz	r3, 80121e0 <_vfiprintf_r+0x1f8>
 8012198:	9b03      	ldr	r3, [sp, #12]
 801219a:	3307      	adds	r3, #7
 801219c:	f023 0307 	bic.w	r3, r3, #7
 80121a0:	3308      	adds	r3, #8
 80121a2:	9303      	str	r3, [sp, #12]
 80121a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121a6:	443b      	add	r3, r7
 80121a8:	9309      	str	r3, [sp, #36]	; 0x24
 80121aa:	e767      	b.n	801207c <_vfiprintf_r+0x94>
 80121ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80121b0:	460c      	mov	r4, r1
 80121b2:	2001      	movs	r0, #1
 80121b4:	e7a5      	b.n	8012102 <_vfiprintf_r+0x11a>
 80121b6:	2300      	movs	r3, #0
 80121b8:	3401      	adds	r4, #1
 80121ba:	9305      	str	r3, [sp, #20]
 80121bc:	4619      	mov	r1, r3
 80121be:	f04f 0c0a 	mov.w	ip, #10
 80121c2:	4620      	mov	r0, r4
 80121c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121c8:	3a30      	subs	r2, #48	; 0x30
 80121ca:	2a09      	cmp	r2, #9
 80121cc:	d903      	bls.n	80121d6 <_vfiprintf_r+0x1ee>
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d0c5      	beq.n	801215e <_vfiprintf_r+0x176>
 80121d2:	9105      	str	r1, [sp, #20]
 80121d4:	e7c3      	b.n	801215e <_vfiprintf_r+0x176>
 80121d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80121da:	4604      	mov	r4, r0
 80121dc:	2301      	movs	r3, #1
 80121de:	e7f0      	b.n	80121c2 <_vfiprintf_r+0x1da>
 80121e0:	ab03      	add	r3, sp, #12
 80121e2:	9300      	str	r3, [sp, #0]
 80121e4:	462a      	mov	r2, r5
 80121e6:	4b16      	ldr	r3, [pc, #88]	; (8012240 <_vfiprintf_r+0x258>)
 80121e8:	a904      	add	r1, sp, #16
 80121ea:	4630      	mov	r0, r6
 80121ec:	f7fd fde6 	bl	800fdbc <_printf_float>
 80121f0:	4607      	mov	r7, r0
 80121f2:	1c78      	adds	r0, r7, #1
 80121f4:	d1d6      	bne.n	80121a4 <_vfiprintf_r+0x1bc>
 80121f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121f8:	07d9      	lsls	r1, r3, #31
 80121fa:	d405      	bmi.n	8012208 <_vfiprintf_r+0x220>
 80121fc:	89ab      	ldrh	r3, [r5, #12]
 80121fe:	059a      	lsls	r2, r3, #22
 8012200:	d402      	bmi.n	8012208 <_vfiprintf_r+0x220>
 8012202:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012204:	f000 faaf 	bl	8012766 <__retarget_lock_release_recursive>
 8012208:	89ab      	ldrh	r3, [r5, #12]
 801220a:	065b      	lsls	r3, r3, #25
 801220c:	f53f af12 	bmi.w	8012034 <_vfiprintf_r+0x4c>
 8012210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012212:	e711      	b.n	8012038 <_vfiprintf_r+0x50>
 8012214:	ab03      	add	r3, sp, #12
 8012216:	9300      	str	r3, [sp, #0]
 8012218:	462a      	mov	r2, r5
 801221a:	4b09      	ldr	r3, [pc, #36]	; (8012240 <_vfiprintf_r+0x258>)
 801221c:	a904      	add	r1, sp, #16
 801221e:	4630      	mov	r0, r6
 8012220:	f7fe f870 	bl	8010304 <_printf_i>
 8012224:	e7e4      	b.n	80121f0 <_vfiprintf_r+0x208>
 8012226:	bf00      	nop
 8012228:	0801543c 	.word	0x0801543c
 801222c:	0801545c 	.word	0x0801545c
 8012230:	0801541c 	.word	0x0801541c
 8012234:	080152c4 	.word	0x080152c4
 8012238:	080152ce 	.word	0x080152ce
 801223c:	0800fdbd 	.word	0x0800fdbd
 8012240:	08011fc5 	.word	0x08011fc5
 8012244:	080152ca 	.word	0x080152ca

08012248 <__swbuf_r>:
 8012248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801224a:	460e      	mov	r6, r1
 801224c:	4614      	mov	r4, r2
 801224e:	4605      	mov	r5, r0
 8012250:	b118      	cbz	r0, 801225a <__swbuf_r+0x12>
 8012252:	6983      	ldr	r3, [r0, #24]
 8012254:	b90b      	cbnz	r3, 801225a <__swbuf_r+0x12>
 8012256:	f000 f9e7 	bl	8012628 <__sinit>
 801225a:	4b21      	ldr	r3, [pc, #132]	; (80122e0 <__swbuf_r+0x98>)
 801225c:	429c      	cmp	r4, r3
 801225e:	d12b      	bne.n	80122b8 <__swbuf_r+0x70>
 8012260:	686c      	ldr	r4, [r5, #4]
 8012262:	69a3      	ldr	r3, [r4, #24]
 8012264:	60a3      	str	r3, [r4, #8]
 8012266:	89a3      	ldrh	r3, [r4, #12]
 8012268:	071a      	lsls	r2, r3, #28
 801226a:	d52f      	bpl.n	80122cc <__swbuf_r+0x84>
 801226c:	6923      	ldr	r3, [r4, #16]
 801226e:	b36b      	cbz	r3, 80122cc <__swbuf_r+0x84>
 8012270:	6923      	ldr	r3, [r4, #16]
 8012272:	6820      	ldr	r0, [r4, #0]
 8012274:	1ac0      	subs	r0, r0, r3
 8012276:	6963      	ldr	r3, [r4, #20]
 8012278:	b2f6      	uxtb	r6, r6
 801227a:	4283      	cmp	r3, r0
 801227c:	4637      	mov	r7, r6
 801227e:	dc04      	bgt.n	801228a <__swbuf_r+0x42>
 8012280:	4621      	mov	r1, r4
 8012282:	4628      	mov	r0, r5
 8012284:	f000 f93c 	bl	8012500 <_fflush_r>
 8012288:	bb30      	cbnz	r0, 80122d8 <__swbuf_r+0x90>
 801228a:	68a3      	ldr	r3, [r4, #8]
 801228c:	3b01      	subs	r3, #1
 801228e:	60a3      	str	r3, [r4, #8]
 8012290:	6823      	ldr	r3, [r4, #0]
 8012292:	1c5a      	adds	r2, r3, #1
 8012294:	6022      	str	r2, [r4, #0]
 8012296:	701e      	strb	r6, [r3, #0]
 8012298:	6963      	ldr	r3, [r4, #20]
 801229a:	3001      	adds	r0, #1
 801229c:	4283      	cmp	r3, r0
 801229e:	d004      	beq.n	80122aa <__swbuf_r+0x62>
 80122a0:	89a3      	ldrh	r3, [r4, #12]
 80122a2:	07db      	lsls	r3, r3, #31
 80122a4:	d506      	bpl.n	80122b4 <__swbuf_r+0x6c>
 80122a6:	2e0a      	cmp	r6, #10
 80122a8:	d104      	bne.n	80122b4 <__swbuf_r+0x6c>
 80122aa:	4621      	mov	r1, r4
 80122ac:	4628      	mov	r0, r5
 80122ae:	f000 f927 	bl	8012500 <_fflush_r>
 80122b2:	b988      	cbnz	r0, 80122d8 <__swbuf_r+0x90>
 80122b4:	4638      	mov	r0, r7
 80122b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122b8:	4b0a      	ldr	r3, [pc, #40]	; (80122e4 <__swbuf_r+0x9c>)
 80122ba:	429c      	cmp	r4, r3
 80122bc:	d101      	bne.n	80122c2 <__swbuf_r+0x7a>
 80122be:	68ac      	ldr	r4, [r5, #8]
 80122c0:	e7cf      	b.n	8012262 <__swbuf_r+0x1a>
 80122c2:	4b09      	ldr	r3, [pc, #36]	; (80122e8 <__swbuf_r+0xa0>)
 80122c4:	429c      	cmp	r4, r3
 80122c6:	bf08      	it	eq
 80122c8:	68ec      	ldreq	r4, [r5, #12]
 80122ca:	e7ca      	b.n	8012262 <__swbuf_r+0x1a>
 80122cc:	4621      	mov	r1, r4
 80122ce:	4628      	mov	r0, r5
 80122d0:	f000 f81a 	bl	8012308 <__swsetup_r>
 80122d4:	2800      	cmp	r0, #0
 80122d6:	d0cb      	beq.n	8012270 <__swbuf_r+0x28>
 80122d8:	f04f 37ff 	mov.w	r7, #4294967295
 80122dc:	e7ea      	b.n	80122b4 <__swbuf_r+0x6c>
 80122de:	bf00      	nop
 80122e0:	0801543c 	.word	0x0801543c
 80122e4:	0801545c 	.word	0x0801545c
 80122e8:	0801541c 	.word	0x0801541c

080122ec <__ascii_wctomb>:
 80122ec:	b149      	cbz	r1, 8012302 <__ascii_wctomb+0x16>
 80122ee:	2aff      	cmp	r2, #255	; 0xff
 80122f0:	bf85      	ittet	hi
 80122f2:	238a      	movhi	r3, #138	; 0x8a
 80122f4:	6003      	strhi	r3, [r0, #0]
 80122f6:	700a      	strbls	r2, [r1, #0]
 80122f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80122fc:	bf98      	it	ls
 80122fe:	2001      	movls	r0, #1
 8012300:	4770      	bx	lr
 8012302:	4608      	mov	r0, r1
 8012304:	4770      	bx	lr
	...

08012308 <__swsetup_r>:
 8012308:	4b32      	ldr	r3, [pc, #200]	; (80123d4 <__swsetup_r+0xcc>)
 801230a:	b570      	push	{r4, r5, r6, lr}
 801230c:	681d      	ldr	r5, [r3, #0]
 801230e:	4606      	mov	r6, r0
 8012310:	460c      	mov	r4, r1
 8012312:	b125      	cbz	r5, 801231e <__swsetup_r+0x16>
 8012314:	69ab      	ldr	r3, [r5, #24]
 8012316:	b913      	cbnz	r3, 801231e <__swsetup_r+0x16>
 8012318:	4628      	mov	r0, r5
 801231a:	f000 f985 	bl	8012628 <__sinit>
 801231e:	4b2e      	ldr	r3, [pc, #184]	; (80123d8 <__swsetup_r+0xd0>)
 8012320:	429c      	cmp	r4, r3
 8012322:	d10f      	bne.n	8012344 <__swsetup_r+0x3c>
 8012324:	686c      	ldr	r4, [r5, #4]
 8012326:	89a3      	ldrh	r3, [r4, #12]
 8012328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801232c:	0719      	lsls	r1, r3, #28
 801232e:	d42c      	bmi.n	801238a <__swsetup_r+0x82>
 8012330:	06dd      	lsls	r5, r3, #27
 8012332:	d411      	bmi.n	8012358 <__swsetup_r+0x50>
 8012334:	2309      	movs	r3, #9
 8012336:	6033      	str	r3, [r6, #0]
 8012338:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801233c:	81a3      	strh	r3, [r4, #12]
 801233e:	f04f 30ff 	mov.w	r0, #4294967295
 8012342:	e03e      	b.n	80123c2 <__swsetup_r+0xba>
 8012344:	4b25      	ldr	r3, [pc, #148]	; (80123dc <__swsetup_r+0xd4>)
 8012346:	429c      	cmp	r4, r3
 8012348:	d101      	bne.n	801234e <__swsetup_r+0x46>
 801234a:	68ac      	ldr	r4, [r5, #8]
 801234c:	e7eb      	b.n	8012326 <__swsetup_r+0x1e>
 801234e:	4b24      	ldr	r3, [pc, #144]	; (80123e0 <__swsetup_r+0xd8>)
 8012350:	429c      	cmp	r4, r3
 8012352:	bf08      	it	eq
 8012354:	68ec      	ldreq	r4, [r5, #12]
 8012356:	e7e6      	b.n	8012326 <__swsetup_r+0x1e>
 8012358:	0758      	lsls	r0, r3, #29
 801235a:	d512      	bpl.n	8012382 <__swsetup_r+0x7a>
 801235c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801235e:	b141      	cbz	r1, 8012372 <__swsetup_r+0x6a>
 8012360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012364:	4299      	cmp	r1, r3
 8012366:	d002      	beq.n	801236e <__swsetup_r+0x66>
 8012368:	4630      	mov	r0, r6
 801236a:	f7ff fb31 	bl	80119d0 <_free_r>
 801236e:	2300      	movs	r3, #0
 8012370:	6363      	str	r3, [r4, #52]	; 0x34
 8012372:	89a3      	ldrh	r3, [r4, #12]
 8012374:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012378:	81a3      	strh	r3, [r4, #12]
 801237a:	2300      	movs	r3, #0
 801237c:	6063      	str	r3, [r4, #4]
 801237e:	6923      	ldr	r3, [r4, #16]
 8012380:	6023      	str	r3, [r4, #0]
 8012382:	89a3      	ldrh	r3, [r4, #12]
 8012384:	f043 0308 	orr.w	r3, r3, #8
 8012388:	81a3      	strh	r3, [r4, #12]
 801238a:	6923      	ldr	r3, [r4, #16]
 801238c:	b94b      	cbnz	r3, 80123a2 <__swsetup_r+0x9a>
 801238e:	89a3      	ldrh	r3, [r4, #12]
 8012390:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012398:	d003      	beq.n	80123a2 <__swsetup_r+0x9a>
 801239a:	4621      	mov	r1, r4
 801239c:	4630      	mov	r0, r6
 801239e:	f000 fa09 	bl	80127b4 <__smakebuf_r>
 80123a2:	89a0      	ldrh	r0, [r4, #12]
 80123a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80123a8:	f010 0301 	ands.w	r3, r0, #1
 80123ac:	d00a      	beq.n	80123c4 <__swsetup_r+0xbc>
 80123ae:	2300      	movs	r3, #0
 80123b0:	60a3      	str	r3, [r4, #8]
 80123b2:	6963      	ldr	r3, [r4, #20]
 80123b4:	425b      	negs	r3, r3
 80123b6:	61a3      	str	r3, [r4, #24]
 80123b8:	6923      	ldr	r3, [r4, #16]
 80123ba:	b943      	cbnz	r3, 80123ce <__swsetup_r+0xc6>
 80123bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80123c0:	d1ba      	bne.n	8012338 <__swsetup_r+0x30>
 80123c2:	bd70      	pop	{r4, r5, r6, pc}
 80123c4:	0781      	lsls	r1, r0, #30
 80123c6:	bf58      	it	pl
 80123c8:	6963      	ldrpl	r3, [r4, #20]
 80123ca:	60a3      	str	r3, [r4, #8]
 80123cc:	e7f4      	b.n	80123b8 <__swsetup_r+0xb0>
 80123ce:	2000      	movs	r0, #0
 80123d0:	e7f7      	b.n	80123c2 <__swsetup_r+0xba>
 80123d2:	bf00      	nop
 80123d4:	2000001c 	.word	0x2000001c
 80123d8:	0801543c 	.word	0x0801543c
 80123dc:	0801545c 	.word	0x0801545c
 80123e0:	0801541c 	.word	0x0801541c

080123e4 <abort>:
 80123e4:	b508      	push	{r3, lr}
 80123e6:	2006      	movs	r0, #6
 80123e8:	f000 fa54 	bl	8012894 <raise>
 80123ec:	2001      	movs	r0, #1
 80123ee:	f7f1 fdff 	bl	8003ff0 <_exit>
	...

080123f4 <__sflush_r>:
 80123f4:	898a      	ldrh	r2, [r1, #12]
 80123f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123fa:	4605      	mov	r5, r0
 80123fc:	0710      	lsls	r0, r2, #28
 80123fe:	460c      	mov	r4, r1
 8012400:	d458      	bmi.n	80124b4 <__sflush_r+0xc0>
 8012402:	684b      	ldr	r3, [r1, #4]
 8012404:	2b00      	cmp	r3, #0
 8012406:	dc05      	bgt.n	8012414 <__sflush_r+0x20>
 8012408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801240a:	2b00      	cmp	r3, #0
 801240c:	dc02      	bgt.n	8012414 <__sflush_r+0x20>
 801240e:	2000      	movs	r0, #0
 8012410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012416:	2e00      	cmp	r6, #0
 8012418:	d0f9      	beq.n	801240e <__sflush_r+0x1a>
 801241a:	2300      	movs	r3, #0
 801241c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012420:	682f      	ldr	r7, [r5, #0]
 8012422:	602b      	str	r3, [r5, #0]
 8012424:	d032      	beq.n	801248c <__sflush_r+0x98>
 8012426:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012428:	89a3      	ldrh	r3, [r4, #12]
 801242a:	075a      	lsls	r2, r3, #29
 801242c:	d505      	bpl.n	801243a <__sflush_r+0x46>
 801242e:	6863      	ldr	r3, [r4, #4]
 8012430:	1ac0      	subs	r0, r0, r3
 8012432:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012434:	b10b      	cbz	r3, 801243a <__sflush_r+0x46>
 8012436:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012438:	1ac0      	subs	r0, r0, r3
 801243a:	2300      	movs	r3, #0
 801243c:	4602      	mov	r2, r0
 801243e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012440:	6a21      	ldr	r1, [r4, #32]
 8012442:	4628      	mov	r0, r5
 8012444:	47b0      	blx	r6
 8012446:	1c43      	adds	r3, r0, #1
 8012448:	89a3      	ldrh	r3, [r4, #12]
 801244a:	d106      	bne.n	801245a <__sflush_r+0x66>
 801244c:	6829      	ldr	r1, [r5, #0]
 801244e:	291d      	cmp	r1, #29
 8012450:	d82c      	bhi.n	80124ac <__sflush_r+0xb8>
 8012452:	4a2a      	ldr	r2, [pc, #168]	; (80124fc <__sflush_r+0x108>)
 8012454:	40ca      	lsrs	r2, r1
 8012456:	07d6      	lsls	r6, r2, #31
 8012458:	d528      	bpl.n	80124ac <__sflush_r+0xb8>
 801245a:	2200      	movs	r2, #0
 801245c:	6062      	str	r2, [r4, #4]
 801245e:	04d9      	lsls	r1, r3, #19
 8012460:	6922      	ldr	r2, [r4, #16]
 8012462:	6022      	str	r2, [r4, #0]
 8012464:	d504      	bpl.n	8012470 <__sflush_r+0x7c>
 8012466:	1c42      	adds	r2, r0, #1
 8012468:	d101      	bne.n	801246e <__sflush_r+0x7a>
 801246a:	682b      	ldr	r3, [r5, #0]
 801246c:	b903      	cbnz	r3, 8012470 <__sflush_r+0x7c>
 801246e:	6560      	str	r0, [r4, #84]	; 0x54
 8012470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012472:	602f      	str	r7, [r5, #0]
 8012474:	2900      	cmp	r1, #0
 8012476:	d0ca      	beq.n	801240e <__sflush_r+0x1a>
 8012478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801247c:	4299      	cmp	r1, r3
 801247e:	d002      	beq.n	8012486 <__sflush_r+0x92>
 8012480:	4628      	mov	r0, r5
 8012482:	f7ff faa5 	bl	80119d0 <_free_r>
 8012486:	2000      	movs	r0, #0
 8012488:	6360      	str	r0, [r4, #52]	; 0x34
 801248a:	e7c1      	b.n	8012410 <__sflush_r+0x1c>
 801248c:	6a21      	ldr	r1, [r4, #32]
 801248e:	2301      	movs	r3, #1
 8012490:	4628      	mov	r0, r5
 8012492:	47b0      	blx	r6
 8012494:	1c41      	adds	r1, r0, #1
 8012496:	d1c7      	bne.n	8012428 <__sflush_r+0x34>
 8012498:	682b      	ldr	r3, [r5, #0]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d0c4      	beq.n	8012428 <__sflush_r+0x34>
 801249e:	2b1d      	cmp	r3, #29
 80124a0:	d001      	beq.n	80124a6 <__sflush_r+0xb2>
 80124a2:	2b16      	cmp	r3, #22
 80124a4:	d101      	bne.n	80124aa <__sflush_r+0xb6>
 80124a6:	602f      	str	r7, [r5, #0]
 80124a8:	e7b1      	b.n	801240e <__sflush_r+0x1a>
 80124aa:	89a3      	ldrh	r3, [r4, #12]
 80124ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124b0:	81a3      	strh	r3, [r4, #12]
 80124b2:	e7ad      	b.n	8012410 <__sflush_r+0x1c>
 80124b4:	690f      	ldr	r7, [r1, #16]
 80124b6:	2f00      	cmp	r7, #0
 80124b8:	d0a9      	beq.n	801240e <__sflush_r+0x1a>
 80124ba:	0793      	lsls	r3, r2, #30
 80124bc:	680e      	ldr	r6, [r1, #0]
 80124be:	bf08      	it	eq
 80124c0:	694b      	ldreq	r3, [r1, #20]
 80124c2:	600f      	str	r7, [r1, #0]
 80124c4:	bf18      	it	ne
 80124c6:	2300      	movne	r3, #0
 80124c8:	eba6 0807 	sub.w	r8, r6, r7
 80124cc:	608b      	str	r3, [r1, #8]
 80124ce:	f1b8 0f00 	cmp.w	r8, #0
 80124d2:	dd9c      	ble.n	801240e <__sflush_r+0x1a>
 80124d4:	6a21      	ldr	r1, [r4, #32]
 80124d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80124d8:	4643      	mov	r3, r8
 80124da:	463a      	mov	r2, r7
 80124dc:	4628      	mov	r0, r5
 80124de:	47b0      	blx	r6
 80124e0:	2800      	cmp	r0, #0
 80124e2:	dc06      	bgt.n	80124f2 <__sflush_r+0xfe>
 80124e4:	89a3      	ldrh	r3, [r4, #12]
 80124e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124ea:	81a3      	strh	r3, [r4, #12]
 80124ec:	f04f 30ff 	mov.w	r0, #4294967295
 80124f0:	e78e      	b.n	8012410 <__sflush_r+0x1c>
 80124f2:	4407      	add	r7, r0
 80124f4:	eba8 0800 	sub.w	r8, r8, r0
 80124f8:	e7e9      	b.n	80124ce <__sflush_r+0xda>
 80124fa:	bf00      	nop
 80124fc:	20400001 	.word	0x20400001

08012500 <_fflush_r>:
 8012500:	b538      	push	{r3, r4, r5, lr}
 8012502:	690b      	ldr	r3, [r1, #16]
 8012504:	4605      	mov	r5, r0
 8012506:	460c      	mov	r4, r1
 8012508:	b913      	cbnz	r3, 8012510 <_fflush_r+0x10>
 801250a:	2500      	movs	r5, #0
 801250c:	4628      	mov	r0, r5
 801250e:	bd38      	pop	{r3, r4, r5, pc}
 8012510:	b118      	cbz	r0, 801251a <_fflush_r+0x1a>
 8012512:	6983      	ldr	r3, [r0, #24]
 8012514:	b90b      	cbnz	r3, 801251a <_fflush_r+0x1a>
 8012516:	f000 f887 	bl	8012628 <__sinit>
 801251a:	4b14      	ldr	r3, [pc, #80]	; (801256c <_fflush_r+0x6c>)
 801251c:	429c      	cmp	r4, r3
 801251e:	d11b      	bne.n	8012558 <_fflush_r+0x58>
 8012520:	686c      	ldr	r4, [r5, #4]
 8012522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d0ef      	beq.n	801250a <_fflush_r+0xa>
 801252a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801252c:	07d0      	lsls	r0, r2, #31
 801252e:	d404      	bmi.n	801253a <_fflush_r+0x3a>
 8012530:	0599      	lsls	r1, r3, #22
 8012532:	d402      	bmi.n	801253a <_fflush_r+0x3a>
 8012534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012536:	f000 f915 	bl	8012764 <__retarget_lock_acquire_recursive>
 801253a:	4628      	mov	r0, r5
 801253c:	4621      	mov	r1, r4
 801253e:	f7ff ff59 	bl	80123f4 <__sflush_r>
 8012542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012544:	07da      	lsls	r2, r3, #31
 8012546:	4605      	mov	r5, r0
 8012548:	d4e0      	bmi.n	801250c <_fflush_r+0xc>
 801254a:	89a3      	ldrh	r3, [r4, #12]
 801254c:	059b      	lsls	r3, r3, #22
 801254e:	d4dd      	bmi.n	801250c <_fflush_r+0xc>
 8012550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012552:	f000 f908 	bl	8012766 <__retarget_lock_release_recursive>
 8012556:	e7d9      	b.n	801250c <_fflush_r+0xc>
 8012558:	4b05      	ldr	r3, [pc, #20]	; (8012570 <_fflush_r+0x70>)
 801255a:	429c      	cmp	r4, r3
 801255c:	d101      	bne.n	8012562 <_fflush_r+0x62>
 801255e:	68ac      	ldr	r4, [r5, #8]
 8012560:	e7df      	b.n	8012522 <_fflush_r+0x22>
 8012562:	4b04      	ldr	r3, [pc, #16]	; (8012574 <_fflush_r+0x74>)
 8012564:	429c      	cmp	r4, r3
 8012566:	bf08      	it	eq
 8012568:	68ec      	ldreq	r4, [r5, #12]
 801256a:	e7da      	b.n	8012522 <_fflush_r+0x22>
 801256c:	0801543c 	.word	0x0801543c
 8012570:	0801545c 	.word	0x0801545c
 8012574:	0801541c 	.word	0x0801541c

08012578 <std>:
 8012578:	2300      	movs	r3, #0
 801257a:	b510      	push	{r4, lr}
 801257c:	4604      	mov	r4, r0
 801257e:	e9c0 3300 	strd	r3, r3, [r0]
 8012582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012586:	6083      	str	r3, [r0, #8]
 8012588:	8181      	strh	r1, [r0, #12]
 801258a:	6643      	str	r3, [r0, #100]	; 0x64
 801258c:	81c2      	strh	r2, [r0, #14]
 801258e:	6183      	str	r3, [r0, #24]
 8012590:	4619      	mov	r1, r3
 8012592:	2208      	movs	r2, #8
 8012594:	305c      	adds	r0, #92	; 0x5c
 8012596:	f7fd fb69 	bl	800fc6c <memset>
 801259a:	4b05      	ldr	r3, [pc, #20]	; (80125b0 <std+0x38>)
 801259c:	6263      	str	r3, [r4, #36]	; 0x24
 801259e:	4b05      	ldr	r3, [pc, #20]	; (80125b4 <std+0x3c>)
 80125a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80125a2:	4b05      	ldr	r3, [pc, #20]	; (80125b8 <std+0x40>)
 80125a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80125a6:	4b05      	ldr	r3, [pc, #20]	; (80125bc <std+0x44>)
 80125a8:	6224      	str	r4, [r4, #32]
 80125aa:	6323      	str	r3, [r4, #48]	; 0x30
 80125ac:	bd10      	pop	{r4, pc}
 80125ae:	bf00      	nop
 80125b0:	080128cd 	.word	0x080128cd
 80125b4:	080128ef 	.word	0x080128ef
 80125b8:	08012927 	.word	0x08012927
 80125bc:	0801294b 	.word	0x0801294b

080125c0 <_cleanup_r>:
 80125c0:	4901      	ldr	r1, [pc, #4]	; (80125c8 <_cleanup_r+0x8>)
 80125c2:	f000 b8af 	b.w	8012724 <_fwalk_reent>
 80125c6:	bf00      	nop
 80125c8:	08012501 	.word	0x08012501

080125cc <__sfmoreglue>:
 80125cc:	b570      	push	{r4, r5, r6, lr}
 80125ce:	2268      	movs	r2, #104	; 0x68
 80125d0:	1e4d      	subs	r5, r1, #1
 80125d2:	4355      	muls	r5, r2
 80125d4:	460e      	mov	r6, r1
 80125d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80125da:	f7ff fa65 	bl	8011aa8 <_malloc_r>
 80125de:	4604      	mov	r4, r0
 80125e0:	b140      	cbz	r0, 80125f4 <__sfmoreglue+0x28>
 80125e2:	2100      	movs	r1, #0
 80125e4:	e9c0 1600 	strd	r1, r6, [r0]
 80125e8:	300c      	adds	r0, #12
 80125ea:	60a0      	str	r0, [r4, #8]
 80125ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80125f0:	f7fd fb3c 	bl	800fc6c <memset>
 80125f4:	4620      	mov	r0, r4
 80125f6:	bd70      	pop	{r4, r5, r6, pc}

080125f8 <__sfp_lock_acquire>:
 80125f8:	4801      	ldr	r0, [pc, #4]	; (8012600 <__sfp_lock_acquire+0x8>)
 80125fa:	f000 b8b3 	b.w	8012764 <__retarget_lock_acquire_recursive>
 80125fe:	bf00      	nop
 8012600:	200068a1 	.word	0x200068a1

08012604 <__sfp_lock_release>:
 8012604:	4801      	ldr	r0, [pc, #4]	; (801260c <__sfp_lock_release+0x8>)
 8012606:	f000 b8ae 	b.w	8012766 <__retarget_lock_release_recursive>
 801260a:	bf00      	nop
 801260c:	200068a1 	.word	0x200068a1

08012610 <__sinit_lock_acquire>:
 8012610:	4801      	ldr	r0, [pc, #4]	; (8012618 <__sinit_lock_acquire+0x8>)
 8012612:	f000 b8a7 	b.w	8012764 <__retarget_lock_acquire_recursive>
 8012616:	bf00      	nop
 8012618:	200068a2 	.word	0x200068a2

0801261c <__sinit_lock_release>:
 801261c:	4801      	ldr	r0, [pc, #4]	; (8012624 <__sinit_lock_release+0x8>)
 801261e:	f000 b8a2 	b.w	8012766 <__retarget_lock_release_recursive>
 8012622:	bf00      	nop
 8012624:	200068a2 	.word	0x200068a2

08012628 <__sinit>:
 8012628:	b510      	push	{r4, lr}
 801262a:	4604      	mov	r4, r0
 801262c:	f7ff fff0 	bl	8012610 <__sinit_lock_acquire>
 8012630:	69a3      	ldr	r3, [r4, #24]
 8012632:	b11b      	cbz	r3, 801263c <__sinit+0x14>
 8012634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012638:	f7ff bff0 	b.w	801261c <__sinit_lock_release>
 801263c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012640:	6523      	str	r3, [r4, #80]	; 0x50
 8012642:	4b13      	ldr	r3, [pc, #76]	; (8012690 <__sinit+0x68>)
 8012644:	4a13      	ldr	r2, [pc, #76]	; (8012694 <__sinit+0x6c>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	62a2      	str	r2, [r4, #40]	; 0x28
 801264a:	42a3      	cmp	r3, r4
 801264c:	bf04      	itt	eq
 801264e:	2301      	moveq	r3, #1
 8012650:	61a3      	streq	r3, [r4, #24]
 8012652:	4620      	mov	r0, r4
 8012654:	f000 f820 	bl	8012698 <__sfp>
 8012658:	6060      	str	r0, [r4, #4]
 801265a:	4620      	mov	r0, r4
 801265c:	f000 f81c 	bl	8012698 <__sfp>
 8012660:	60a0      	str	r0, [r4, #8]
 8012662:	4620      	mov	r0, r4
 8012664:	f000 f818 	bl	8012698 <__sfp>
 8012668:	2200      	movs	r2, #0
 801266a:	60e0      	str	r0, [r4, #12]
 801266c:	2104      	movs	r1, #4
 801266e:	6860      	ldr	r0, [r4, #4]
 8012670:	f7ff ff82 	bl	8012578 <std>
 8012674:	68a0      	ldr	r0, [r4, #8]
 8012676:	2201      	movs	r2, #1
 8012678:	2109      	movs	r1, #9
 801267a:	f7ff ff7d 	bl	8012578 <std>
 801267e:	68e0      	ldr	r0, [r4, #12]
 8012680:	2202      	movs	r2, #2
 8012682:	2112      	movs	r1, #18
 8012684:	f7ff ff78 	bl	8012578 <std>
 8012688:	2301      	movs	r3, #1
 801268a:	61a3      	str	r3, [r4, #24]
 801268c:	e7d2      	b.n	8012634 <__sinit+0xc>
 801268e:	bf00      	nop
 8012690:	080150a4 	.word	0x080150a4
 8012694:	080125c1 	.word	0x080125c1

08012698 <__sfp>:
 8012698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801269a:	4607      	mov	r7, r0
 801269c:	f7ff ffac 	bl	80125f8 <__sfp_lock_acquire>
 80126a0:	4b1e      	ldr	r3, [pc, #120]	; (801271c <__sfp+0x84>)
 80126a2:	681e      	ldr	r6, [r3, #0]
 80126a4:	69b3      	ldr	r3, [r6, #24]
 80126a6:	b913      	cbnz	r3, 80126ae <__sfp+0x16>
 80126a8:	4630      	mov	r0, r6
 80126aa:	f7ff ffbd 	bl	8012628 <__sinit>
 80126ae:	3648      	adds	r6, #72	; 0x48
 80126b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80126b4:	3b01      	subs	r3, #1
 80126b6:	d503      	bpl.n	80126c0 <__sfp+0x28>
 80126b8:	6833      	ldr	r3, [r6, #0]
 80126ba:	b30b      	cbz	r3, 8012700 <__sfp+0x68>
 80126bc:	6836      	ldr	r6, [r6, #0]
 80126be:	e7f7      	b.n	80126b0 <__sfp+0x18>
 80126c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80126c4:	b9d5      	cbnz	r5, 80126fc <__sfp+0x64>
 80126c6:	4b16      	ldr	r3, [pc, #88]	; (8012720 <__sfp+0x88>)
 80126c8:	60e3      	str	r3, [r4, #12]
 80126ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80126ce:	6665      	str	r5, [r4, #100]	; 0x64
 80126d0:	f000 f847 	bl	8012762 <__retarget_lock_init_recursive>
 80126d4:	f7ff ff96 	bl	8012604 <__sfp_lock_release>
 80126d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80126dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80126e0:	6025      	str	r5, [r4, #0]
 80126e2:	61a5      	str	r5, [r4, #24]
 80126e4:	2208      	movs	r2, #8
 80126e6:	4629      	mov	r1, r5
 80126e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80126ec:	f7fd fabe 	bl	800fc6c <memset>
 80126f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80126f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80126f8:	4620      	mov	r0, r4
 80126fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126fc:	3468      	adds	r4, #104	; 0x68
 80126fe:	e7d9      	b.n	80126b4 <__sfp+0x1c>
 8012700:	2104      	movs	r1, #4
 8012702:	4638      	mov	r0, r7
 8012704:	f7ff ff62 	bl	80125cc <__sfmoreglue>
 8012708:	4604      	mov	r4, r0
 801270a:	6030      	str	r0, [r6, #0]
 801270c:	2800      	cmp	r0, #0
 801270e:	d1d5      	bne.n	80126bc <__sfp+0x24>
 8012710:	f7ff ff78 	bl	8012604 <__sfp_lock_release>
 8012714:	230c      	movs	r3, #12
 8012716:	603b      	str	r3, [r7, #0]
 8012718:	e7ee      	b.n	80126f8 <__sfp+0x60>
 801271a:	bf00      	nop
 801271c:	080150a4 	.word	0x080150a4
 8012720:	ffff0001 	.word	0xffff0001

08012724 <_fwalk_reent>:
 8012724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012728:	4606      	mov	r6, r0
 801272a:	4688      	mov	r8, r1
 801272c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012730:	2700      	movs	r7, #0
 8012732:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012736:	f1b9 0901 	subs.w	r9, r9, #1
 801273a:	d505      	bpl.n	8012748 <_fwalk_reent+0x24>
 801273c:	6824      	ldr	r4, [r4, #0]
 801273e:	2c00      	cmp	r4, #0
 8012740:	d1f7      	bne.n	8012732 <_fwalk_reent+0xe>
 8012742:	4638      	mov	r0, r7
 8012744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012748:	89ab      	ldrh	r3, [r5, #12]
 801274a:	2b01      	cmp	r3, #1
 801274c:	d907      	bls.n	801275e <_fwalk_reent+0x3a>
 801274e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012752:	3301      	adds	r3, #1
 8012754:	d003      	beq.n	801275e <_fwalk_reent+0x3a>
 8012756:	4629      	mov	r1, r5
 8012758:	4630      	mov	r0, r6
 801275a:	47c0      	blx	r8
 801275c:	4307      	orrs	r7, r0
 801275e:	3568      	adds	r5, #104	; 0x68
 8012760:	e7e9      	b.n	8012736 <_fwalk_reent+0x12>

08012762 <__retarget_lock_init_recursive>:
 8012762:	4770      	bx	lr

08012764 <__retarget_lock_acquire_recursive>:
 8012764:	4770      	bx	lr

08012766 <__retarget_lock_release_recursive>:
 8012766:	4770      	bx	lr

08012768 <__swhatbuf_r>:
 8012768:	b570      	push	{r4, r5, r6, lr}
 801276a:	460e      	mov	r6, r1
 801276c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012770:	2900      	cmp	r1, #0
 8012772:	b096      	sub	sp, #88	; 0x58
 8012774:	4614      	mov	r4, r2
 8012776:	461d      	mov	r5, r3
 8012778:	da08      	bge.n	801278c <__swhatbuf_r+0x24>
 801277a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801277e:	2200      	movs	r2, #0
 8012780:	602a      	str	r2, [r5, #0]
 8012782:	061a      	lsls	r2, r3, #24
 8012784:	d410      	bmi.n	80127a8 <__swhatbuf_r+0x40>
 8012786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801278a:	e00e      	b.n	80127aa <__swhatbuf_r+0x42>
 801278c:	466a      	mov	r2, sp
 801278e:	f000 f903 	bl	8012998 <_fstat_r>
 8012792:	2800      	cmp	r0, #0
 8012794:	dbf1      	blt.n	801277a <__swhatbuf_r+0x12>
 8012796:	9a01      	ldr	r2, [sp, #4]
 8012798:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801279c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80127a0:	425a      	negs	r2, r3
 80127a2:	415a      	adcs	r2, r3
 80127a4:	602a      	str	r2, [r5, #0]
 80127a6:	e7ee      	b.n	8012786 <__swhatbuf_r+0x1e>
 80127a8:	2340      	movs	r3, #64	; 0x40
 80127aa:	2000      	movs	r0, #0
 80127ac:	6023      	str	r3, [r4, #0]
 80127ae:	b016      	add	sp, #88	; 0x58
 80127b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080127b4 <__smakebuf_r>:
 80127b4:	898b      	ldrh	r3, [r1, #12]
 80127b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80127b8:	079d      	lsls	r5, r3, #30
 80127ba:	4606      	mov	r6, r0
 80127bc:	460c      	mov	r4, r1
 80127be:	d507      	bpl.n	80127d0 <__smakebuf_r+0x1c>
 80127c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80127c4:	6023      	str	r3, [r4, #0]
 80127c6:	6123      	str	r3, [r4, #16]
 80127c8:	2301      	movs	r3, #1
 80127ca:	6163      	str	r3, [r4, #20]
 80127cc:	b002      	add	sp, #8
 80127ce:	bd70      	pop	{r4, r5, r6, pc}
 80127d0:	ab01      	add	r3, sp, #4
 80127d2:	466a      	mov	r2, sp
 80127d4:	f7ff ffc8 	bl	8012768 <__swhatbuf_r>
 80127d8:	9900      	ldr	r1, [sp, #0]
 80127da:	4605      	mov	r5, r0
 80127dc:	4630      	mov	r0, r6
 80127de:	f7ff f963 	bl	8011aa8 <_malloc_r>
 80127e2:	b948      	cbnz	r0, 80127f8 <__smakebuf_r+0x44>
 80127e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127e8:	059a      	lsls	r2, r3, #22
 80127ea:	d4ef      	bmi.n	80127cc <__smakebuf_r+0x18>
 80127ec:	f023 0303 	bic.w	r3, r3, #3
 80127f0:	f043 0302 	orr.w	r3, r3, #2
 80127f4:	81a3      	strh	r3, [r4, #12]
 80127f6:	e7e3      	b.n	80127c0 <__smakebuf_r+0xc>
 80127f8:	4b0d      	ldr	r3, [pc, #52]	; (8012830 <__smakebuf_r+0x7c>)
 80127fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80127fc:	89a3      	ldrh	r3, [r4, #12]
 80127fe:	6020      	str	r0, [r4, #0]
 8012800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012804:	81a3      	strh	r3, [r4, #12]
 8012806:	9b00      	ldr	r3, [sp, #0]
 8012808:	6163      	str	r3, [r4, #20]
 801280a:	9b01      	ldr	r3, [sp, #4]
 801280c:	6120      	str	r0, [r4, #16]
 801280e:	b15b      	cbz	r3, 8012828 <__smakebuf_r+0x74>
 8012810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012814:	4630      	mov	r0, r6
 8012816:	f000 f8d1 	bl	80129bc <_isatty_r>
 801281a:	b128      	cbz	r0, 8012828 <__smakebuf_r+0x74>
 801281c:	89a3      	ldrh	r3, [r4, #12]
 801281e:	f023 0303 	bic.w	r3, r3, #3
 8012822:	f043 0301 	orr.w	r3, r3, #1
 8012826:	81a3      	strh	r3, [r4, #12]
 8012828:	89a0      	ldrh	r0, [r4, #12]
 801282a:	4305      	orrs	r5, r0
 801282c:	81a5      	strh	r5, [r4, #12]
 801282e:	e7cd      	b.n	80127cc <__smakebuf_r+0x18>
 8012830:	080125c1 	.word	0x080125c1

08012834 <_malloc_usable_size_r>:
 8012834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012838:	1f18      	subs	r0, r3, #4
 801283a:	2b00      	cmp	r3, #0
 801283c:	bfbc      	itt	lt
 801283e:	580b      	ldrlt	r3, [r1, r0]
 8012840:	18c0      	addlt	r0, r0, r3
 8012842:	4770      	bx	lr

08012844 <_raise_r>:
 8012844:	291f      	cmp	r1, #31
 8012846:	b538      	push	{r3, r4, r5, lr}
 8012848:	4604      	mov	r4, r0
 801284a:	460d      	mov	r5, r1
 801284c:	d904      	bls.n	8012858 <_raise_r+0x14>
 801284e:	2316      	movs	r3, #22
 8012850:	6003      	str	r3, [r0, #0]
 8012852:	f04f 30ff 	mov.w	r0, #4294967295
 8012856:	bd38      	pop	{r3, r4, r5, pc}
 8012858:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801285a:	b112      	cbz	r2, 8012862 <_raise_r+0x1e>
 801285c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012860:	b94b      	cbnz	r3, 8012876 <_raise_r+0x32>
 8012862:	4620      	mov	r0, r4
 8012864:	f000 f830 	bl	80128c8 <_getpid_r>
 8012868:	462a      	mov	r2, r5
 801286a:	4601      	mov	r1, r0
 801286c:	4620      	mov	r0, r4
 801286e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012872:	f000 b817 	b.w	80128a4 <_kill_r>
 8012876:	2b01      	cmp	r3, #1
 8012878:	d00a      	beq.n	8012890 <_raise_r+0x4c>
 801287a:	1c59      	adds	r1, r3, #1
 801287c:	d103      	bne.n	8012886 <_raise_r+0x42>
 801287e:	2316      	movs	r3, #22
 8012880:	6003      	str	r3, [r0, #0]
 8012882:	2001      	movs	r0, #1
 8012884:	e7e7      	b.n	8012856 <_raise_r+0x12>
 8012886:	2400      	movs	r4, #0
 8012888:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801288c:	4628      	mov	r0, r5
 801288e:	4798      	blx	r3
 8012890:	2000      	movs	r0, #0
 8012892:	e7e0      	b.n	8012856 <_raise_r+0x12>

08012894 <raise>:
 8012894:	4b02      	ldr	r3, [pc, #8]	; (80128a0 <raise+0xc>)
 8012896:	4601      	mov	r1, r0
 8012898:	6818      	ldr	r0, [r3, #0]
 801289a:	f7ff bfd3 	b.w	8012844 <_raise_r>
 801289e:	bf00      	nop
 80128a0:	2000001c 	.word	0x2000001c

080128a4 <_kill_r>:
 80128a4:	b538      	push	{r3, r4, r5, lr}
 80128a6:	4d07      	ldr	r5, [pc, #28]	; (80128c4 <_kill_r+0x20>)
 80128a8:	2300      	movs	r3, #0
 80128aa:	4604      	mov	r4, r0
 80128ac:	4608      	mov	r0, r1
 80128ae:	4611      	mov	r1, r2
 80128b0:	602b      	str	r3, [r5, #0]
 80128b2:	f7f1 fb8d 	bl	8003fd0 <_kill>
 80128b6:	1c43      	adds	r3, r0, #1
 80128b8:	d102      	bne.n	80128c0 <_kill_r+0x1c>
 80128ba:	682b      	ldr	r3, [r5, #0]
 80128bc:	b103      	cbz	r3, 80128c0 <_kill_r+0x1c>
 80128be:	6023      	str	r3, [r4, #0]
 80128c0:	bd38      	pop	{r3, r4, r5, pc}
 80128c2:	bf00      	nop
 80128c4:	2000689c 	.word	0x2000689c

080128c8 <_getpid_r>:
 80128c8:	f7f1 bb7a 	b.w	8003fc0 <_getpid>

080128cc <__sread>:
 80128cc:	b510      	push	{r4, lr}
 80128ce:	460c      	mov	r4, r1
 80128d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128d4:	f000 f894 	bl	8012a00 <_read_r>
 80128d8:	2800      	cmp	r0, #0
 80128da:	bfab      	itete	ge
 80128dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80128de:	89a3      	ldrhlt	r3, [r4, #12]
 80128e0:	181b      	addge	r3, r3, r0
 80128e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80128e6:	bfac      	ite	ge
 80128e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80128ea:	81a3      	strhlt	r3, [r4, #12]
 80128ec:	bd10      	pop	{r4, pc}

080128ee <__swrite>:
 80128ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128f2:	461f      	mov	r7, r3
 80128f4:	898b      	ldrh	r3, [r1, #12]
 80128f6:	05db      	lsls	r3, r3, #23
 80128f8:	4605      	mov	r5, r0
 80128fa:	460c      	mov	r4, r1
 80128fc:	4616      	mov	r6, r2
 80128fe:	d505      	bpl.n	801290c <__swrite+0x1e>
 8012900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012904:	2302      	movs	r3, #2
 8012906:	2200      	movs	r2, #0
 8012908:	f000 f868 	bl	80129dc <_lseek_r>
 801290c:	89a3      	ldrh	r3, [r4, #12]
 801290e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012916:	81a3      	strh	r3, [r4, #12]
 8012918:	4632      	mov	r2, r6
 801291a:	463b      	mov	r3, r7
 801291c:	4628      	mov	r0, r5
 801291e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012922:	f000 b817 	b.w	8012954 <_write_r>

08012926 <__sseek>:
 8012926:	b510      	push	{r4, lr}
 8012928:	460c      	mov	r4, r1
 801292a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801292e:	f000 f855 	bl	80129dc <_lseek_r>
 8012932:	1c43      	adds	r3, r0, #1
 8012934:	89a3      	ldrh	r3, [r4, #12]
 8012936:	bf15      	itete	ne
 8012938:	6560      	strne	r0, [r4, #84]	; 0x54
 801293a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801293e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012942:	81a3      	strheq	r3, [r4, #12]
 8012944:	bf18      	it	ne
 8012946:	81a3      	strhne	r3, [r4, #12]
 8012948:	bd10      	pop	{r4, pc}

0801294a <__sclose>:
 801294a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801294e:	f000 b813 	b.w	8012978 <_close_r>
	...

08012954 <_write_r>:
 8012954:	b538      	push	{r3, r4, r5, lr}
 8012956:	4d07      	ldr	r5, [pc, #28]	; (8012974 <_write_r+0x20>)
 8012958:	4604      	mov	r4, r0
 801295a:	4608      	mov	r0, r1
 801295c:	4611      	mov	r1, r2
 801295e:	2200      	movs	r2, #0
 8012960:	602a      	str	r2, [r5, #0]
 8012962:	461a      	mov	r2, r3
 8012964:	f7f1 fb6b 	bl	800403e <_write>
 8012968:	1c43      	adds	r3, r0, #1
 801296a:	d102      	bne.n	8012972 <_write_r+0x1e>
 801296c:	682b      	ldr	r3, [r5, #0]
 801296e:	b103      	cbz	r3, 8012972 <_write_r+0x1e>
 8012970:	6023      	str	r3, [r4, #0]
 8012972:	bd38      	pop	{r3, r4, r5, pc}
 8012974:	2000689c 	.word	0x2000689c

08012978 <_close_r>:
 8012978:	b538      	push	{r3, r4, r5, lr}
 801297a:	4d06      	ldr	r5, [pc, #24]	; (8012994 <_close_r+0x1c>)
 801297c:	2300      	movs	r3, #0
 801297e:	4604      	mov	r4, r0
 8012980:	4608      	mov	r0, r1
 8012982:	602b      	str	r3, [r5, #0]
 8012984:	f7f1 fb77 	bl	8004076 <_close>
 8012988:	1c43      	adds	r3, r0, #1
 801298a:	d102      	bne.n	8012992 <_close_r+0x1a>
 801298c:	682b      	ldr	r3, [r5, #0]
 801298e:	b103      	cbz	r3, 8012992 <_close_r+0x1a>
 8012990:	6023      	str	r3, [r4, #0]
 8012992:	bd38      	pop	{r3, r4, r5, pc}
 8012994:	2000689c 	.word	0x2000689c

08012998 <_fstat_r>:
 8012998:	b538      	push	{r3, r4, r5, lr}
 801299a:	4d07      	ldr	r5, [pc, #28]	; (80129b8 <_fstat_r+0x20>)
 801299c:	2300      	movs	r3, #0
 801299e:	4604      	mov	r4, r0
 80129a0:	4608      	mov	r0, r1
 80129a2:	4611      	mov	r1, r2
 80129a4:	602b      	str	r3, [r5, #0]
 80129a6:	f7f1 fb72 	bl	800408e <_fstat>
 80129aa:	1c43      	adds	r3, r0, #1
 80129ac:	d102      	bne.n	80129b4 <_fstat_r+0x1c>
 80129ae:	682b      	ldr	r3, [r5, #0]
 80129b0:	b103      	cbz	r3, 80129b4 <_fstat_r+0x1c>
 80129b2:	6023      	str	r3, [r4, #0]
 80129b4:	bd38      	pop	{r3, r4, r5, pc}
 80129b6:	bf00      	nop
 80129b8:	2000689c 	.word	0x2000689c

080129bc <_isatty_r>:
 80129bc:	b538      	push	{r3, r4, r5, lr}
 80129be:	4d06      	ldr	r5, [pc, #24]	; (80129d8 <_isatty_r+0x1c>)
 80129c0:	2300      	movs	r3, #0
 80129c2:	4604      	mov	r4, r0
 80129c4:	4608      	mov	r0, r1
 80129c6:	602b      	str	r3, [r5, #0]
 80129c8:	f7f1 fb71 	bl	80040ae <_isatty>
 80129cc:	1c43      	adds	r3, r0, #1
 80129ce:	d102      	bne.n	80129d6 <_isatty_r+0x1a>
 80129d0:	682b      	ldr	r3, [r5, #0]
 80129d2:	b103      	cbz	r3, 80129d6 <_isatty_r+0x1a>
 80129d4:	6023      	str	r3, [r4, #0]
 80129d6:	bd38      	pop	{r3, r4, r5, pc}
 80129d8:	2000689c 	.word	0x2000689c

080129dc <_lseek_r>:
 80129dc:	b538      	push	{r3, r4, r5, lr}
 80129de:	4d07      	ldr	r5, [pc, #28]	; (80129fc <_lseek_r+0x20>)
 80129e0:	4604      	mov	r4, r0
 80129e2:	4608      	mov	r0, r1
 80129e4:	4611      	mov	r1, r2
 80129e6:	2200      	movs	r2, #0
 80129e8:	602a      	str	r2, [r5, #0]
 80129ea:	461a      	mov	r2, r3
 80129ec:	f7f1 fb6a 	bl	80040c4 <_lseek>
 80129f0:	1c43      	adds	r3, r0, #1
 80129f2:	d102      	bne.n	80129fa <_lseek_r+0x1e>
 80129f4:	682b      	ldr	r3, [r5, #0]
 80129f6:	b103      	cbz	r3, 80129fa <_lseek_r+0x1e>
 80129f8:	6023      	str	r3, [r4, #0]
 80129fa:	bd38      	pop	{r3, r4, r5, pc}
 80129fc:	2000689c 	.word	0x2000689c

08012a00 <_read_r>:
 8012a00:	b538      	push	{r3, r4, r5, lr}
 8012a02:	4d07      	ldr	r5, [pc, #28]	; (8012a20 <_read_r+0x20>)
 8012a04:	4604      	mov	r4, r0
 8012a06:	4608      	mov	r0, r1
 8012a08:	4611      	mov	r1, r2
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	602a      	str	r2, [r5, #0]
 8012a0e:	461a      	mov	r2, r3
 8012a10:	f7f1 faf8 	bl	8004004 <_read>
 8012a14:	1c43      	adds	r3, r0, #1
 8012a16:	d102      	bne.n	8012a1e <_read_r+0x1e>
 8012a18:	682b      	ldr	r3, [r5, #0]
 8012a1a:	b103      	cbz	r3, 8012a1e <_read_r+0x1e>
 8012a1c:	6023      	str	r3, [r4, #0]
 8012a1e:	bd38      	pop	{r3, r4, r5, pc}
 8012a20:	2000689c 	.word	0x2000689c

08012a24 <cosf>:
 8012a24:	ee10 3a10 	vmov	r3, s0
 8012a28:	b507      	push	{r0, r1, r2, lr}
 8012a2a:	4a1e      	ldr	r2, [pc, #120]	; (8012aa4 <cosf+0x80>)
 8012a2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012a30:	4293      	cmp	r3, r2
 8012a32:	dc06      	bgt.n	8012a42 <cosf+0x1e>
 8012a34:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8012aa8 <cosf+0x84>
 8012a38:	b003      	add	sp, #12
 8012a3a:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a3e:	f001 bce7 	b.w	8014410 <__kernel_cosf>
 8012a42:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012a46:	db04      	blt.n	8012a52 <cosf+0x2e>
 8012a48:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012a4c:	b003      	add	sp, #12
 8012a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a52:	4668      	mov	r0, sp
 8012a54:	f001 fb9c 	bl	8014190 <__ieee754_rem_pio2f>
 8012a58:	f000 0003 	and.w	r0, r0, #3
 8012a5c:	2801      	cmp	r0, #1
 8012a5e:	d009      	beq.n	8012a74 <cosf+0x50>
 8012a60:	2802      	cmp	r0, #2
 8012a62:	d010      	beq.n	8012a86 <cosf+0x62>
 8012a64:	b9b0      	cbnz	r0, 8012a94 <cosf+0x70>
 8012a66:	eddd 0a01 	vldr	s1, [sp, #4]
 8012a6a:	ed9d 0a00 	vldr	s0, [sp]
 8012a6e:	f001 fccf 	bl	8014410 <__kernel_cosf>
 8012a72:	e7eb      	b.n	8012a4c <cosf+0x28>
 8012a74:	eddd 0a01 	vldr	s1, [sp, #4]
 8012a78:	ed9d 0a00 	vldr	s0, [sp]
 8012a7c:	f001 ff9e 	bl	80149bc <__kernel_sinf>
 8012a80:	eeb1 0a40 	vneg.f32	s0, s0
 8012a84:	e7e2      	b.n	8012a4c <cosf+0x28>
 8012a86:	eddd 0a01 	vldr	s1, [sp, #4]
 8012a8a:	ed9d 0a00 	vldr	s0, [sp]
 8012a8e:	f001 fcbf 	bl	8014410 <__kernel_cosf>
 8012a92:	e7f5      	b.n	8012a80 <cosf+0x5c>
 8012a94:	eddd 0a01 	vldr	s1, [sp, #4]
 8012a98:	ed9d 0a00 	vldr	s0, [sp]
 8012a9c:	2001      	movs	r0, #1
 8012a9e:	f001 ff8d 	bl	80149bc <__kernel_sinf>
 8012aa2:	e7d3      	b.n	8012a4c <cosf+0x28>
 8012aa4:	3f490fd8 	.word	0x3f490fd8
 8012aa8:	00000000 	.word	0x00000000

08012aac <sinf>:
 8012aac:	ee10 3a10 	vmov	r3, s0
 8012ab0:	b507      	push	{r0, r1, r2, lr}
 8012ab2:	4a1f      	ldr	r2, [pc, #124]	; (8012b30 <sinf+0x84>)
 8012ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	dc07      	bgt.n	8012acc <sinf+0x20>
 8012abc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8012b34 <sinf+0x88>
 8012ac0:	2000      	movs	r0, #0
 8012ac2:	b003      	add	sp, #12
 8012ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ac8:	f001 bf78 	b.w	80149bc <__kernel_sinf>
 8012acc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012ad0:	db04      	blt.n	8012adc <sinf+0x30>
 8012ad2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012ad6:	b003      	add	sp, #12
 8012ad8:	f85d fb04 	ldr.w	pc, [sp], #4
 8012adc:	4668      	mov	r0, sp
 8012ade:	f001 fb57 	bl	8014190 <__ieee754_rem_pio2f>
 8012ae2:	f000 0003 	and.w	r0, r0, #3
 8012ae6:	2801      	cmp	r0, #1
 8012ae8:	d00a      	beq.n	8012b00 <sinf+0x54>
 8012aea:	2802      	cmp	r0, #2
 8012aec:	d00f      	beq.n	8012b0e <sinf+0x62>
 8012aee:	b9c0      	cbnz	r0, 8012b22 <sinf+0x76>
 8012af0:	eddd 0a01 	vldr	s1, [sp, #4]
 8012af4:	ed9d 0a00 	vldr	s0, [sp]
 8012af8:	2001      	movs	r0, #1
 8012afa:	f001 ff5f 	bl	80149bc <__kernel_sinf>
 8012afe:	e7ea      	b.n	8012ad6 <sinf+0x2a>
 8012b00:	eddd 0a01 	vldr	s1, [sp, #4]
 8012b04:	ed9d 0a00 	vldr	s0, [sp]
 8012b08:	f001 fc82 	bl	8014410 <__kernel_cosf>
 8012b0c:	e7e3      	b.n	8012ad6 <sinf+0x2a>
 8012b0e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012b12:	ed9d 0a00 	vldr	s0, [sp]
 8012b16:	2001      	movs	r0, #1
 8012b18:	f001 ff50 	bl	80149bc <__kernel_sinf>
 8012b1c:	eeb1 0a40 	vneg.f32	s0, s0
 8012b20:	e7d9      	b.n	8012ad6 <sinf+0x2a>
 8012b22:	eddd 0a01 	vldr	s1, [sp, #4]
 8012b26:	ed9d 0a00 	vldr	s0, [sp]
 8012b2a:	f001 fc71 	bl	8014410 <__kernel_cosf>
 8012b2e:	e7f5      	b.n	8012b1c <sinf+0x70>
 8012b30:	3f490fd8 	.word	0x3f490fd8
 8012b34:	00000000 	.word	0x00000000

08012b38 <pow>:
 8012b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b3a:	ed2d 8b02 	vpush	{d8}
 8012b3e:	eeb0 8a40 	vmov.f32	s16, s0
 8012b42:	eef0 8a60 	vmov.f32	s17, s1
 8012b46:	ec55 4b11 	vmov	r4, r5, d1
 8012b4a:	f000 f8ed 	bl	8012d28 <__ieee754_pow>
 8012b4e:	4622      	mov	r2, r4
 8012b50:	462b      	mov	r3, r5
 8012b52:	4620      	mov	r0, r4
 8012b54:	4629      	mov	r1, r5
 8012b56:	ec57 6b10 	vmov	r6, r7, d0
 8012b5a:	f7ed ffe7 	bl	8000b2c <__aeabi_dcmpun>
 8012b5e:	2800      	cmp	r0, #0
 8012b60:	d13b      	bne.n	8012bda <pow+0xa2>
 8012b62:	ec51 0b18 	vmov	r0, r1, d8
 8012b66:	2200      	movs	r2, #0
 8012b68:	2300      	movs	r3, #0
 8012b6a:	f7ed ffad 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b6e:	b1b8      	cbz	r0, 8012ba0 <pow+0x68>
 8012b70:	2200      	movs	r2, #0
 8012b72:	2300      	movs	r3, #0
 8012b74:	4620      	mov	r0, r4
 8012b76:	4629      	mov	r1, r5
 8012b78:	f7ed ffa6 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b7c:	2800      	cmp	r0, #0
 8012b7e:	d146      	bne.n	8012c0e <pow+0xd6>
 8012b80:	ec45 4b10 	vmov	d0, r4, r5
 8012b84:	f001 ffbd 	bl	8014b02 <finite>
 8012b88:	b338      	cbz	r0, 8012bda <pow+0xa2>
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	4620      	mov	r0, r4
 8012b90:	4629      	mov	r1, r5
 8012b92:	f7ed ffa3 	bl	8000adc <__aeabi_dcmplt>
 8012b96:	b300      	cbz	r0, 8012bda <pow+0xa2>
 8012b98:	f7fd f830 	bl	800fbfc <__errno>
 8012b9c:	2322      	movs	r3, #34	; 0x22
 8012b9e:	e01b      	b.n	8012bd8 <pow+0xa0>
 8012ba0:	ec47 6b10 	vmov	d0, r6, r7
 8012ba4:	f001 ffad 	bl	8014b02 <finite>
 8012ba8:	b9e0      	cbnz	r0, 8012be4 <pow+0xac>
 8012baa:	eeb0 0a48 	vmov.f32	s0, s16
 8012bae:	eef0 0a68 	vmov.f32	s1, s17
 8012bb2:	f001 ffa6 	bl	8014b02 <finite>
 8012bb6:	b1a8      	cbz	r0, 8012be4 <pow+0xac>
 8012bb8:	ec45 4b10 	vmov	d0, r4, r5
 8012bbc:	f001 ffa1 	bl	8014b02 <finite>
 8012bc0:	b180      	cbz	r0, 8012be4 <pow+0xac>
 8012bc2:	4632      	mov	r2, r6
 8012bc4:	463b      	mov	r3, r7
 8012bc6:	4630      	mov	r0, r6
 8012bc8:	4639      	mov	r1, r7
 8012bca:	f7ed ffaf 	bl	8000b2c <__aeabi_dcmpun>
 8012bce:	2800      	cmp	r0, #0
 8012bd0:	d0e2      	beq.n	8012b98 <pow+0x60>
 8012bd2:	f7fd f813 	bl	800fbfc <__errno>
 8012bd6:	2321      	movs	r3, #33	; 0x21
 8012bd8:	6003      	str	r3, [r0, #0]
 8012bda:	ecbd 8b02 	vpop	{d8}
 8012bde:	ec47 6b10 	vmov	d0, r6, r7
 8012be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012be4:	2200      	movs	r2, #0
 8012be6:	2300      	movs	r3, #0
 8012be8:	4630      	mov	r0, r6
 8012bea:	4639      	mov	r1, r7
 8012bec:	f7ed ff6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8012bf0:	2800      	cmp	r0, #0
 8012bf2:	d0f2      	beq.n	8012bda <pow+0xa2>
 8012bf4:	eeb0 0a48 	vmov.f32	s0, s16
 8012bf8:	eef0 0a68 	vmov.f32	s1, s17
 8012bfc:	f001 ff81 	bl	8014b02 <finite>
 8012c00:	2800      	cmp	r0, #0
 8012c02:	d0ea      	beq.n	8012bda <pow+0xa2>
 8012c04:	ec45 4b10 	vmov	d0, r4, r5
 8012c08:	f001 ff7b 	bl	8014b02 <finite>
 8012c0c:	e7c3      	b.n	8012b96 <pow+0x5e>
 8012c0e:	4f01      	ldr	r7, [pc, #4]	; (8012c14 <pow+0xdc>)
 8012c10:	2600      	movs	r6, #0
 8012c12:	e7e2      	b.n	8012bda <pow+0xa2>
 8012c14:	3ff00000 	.word	0x3ff00000

08012c18 <asinf>:
 8012c18:	b508      	push	{r3, lr}
 8012c1a:	ed2d 8b02 	vpush	{d8}
 8012c1e:	eeb0 8a40 	vmov.f32	s16, s0
 8012c22:	f000 fe61 	bl	80138e8 <__ieee754_asinf>
 8012c26:	eeb4 8a48 	vcmp.f32	s16, s16
 8012c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c2e:	eef0 8a40 	vmov.f32	s17, s0
 8012c32:	d615      	bvs.n	8012c60 <asinf+0x48>
 8012c34:	eeb0 0a48 	vmov.f32	s0, s16
 8012c38:	f002 f8c8 	bl	8014dcc <fabsf>
 8012c3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012c40:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c48:	dd0a      	ble.n	8012c60 <asinf+0x48>
 8012c4a:	f7fc ffd7 	bl	800fbfc <__errno>
 8012c4e:	ecbd 8b02 	vpop	{d8}
 8012c52:	2321      	movs	r3, #33	; 0x21
 8012c54:	6003      	str	r3, [r0, #0]
 8012c56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012c5a:	4804      	ldr	r0, [pc, #16]	; (8012c6c <asinf+0x54>)
 8012c5c:	f002 b90c 	b.w	8014e78 <nanf>
 8012c60:	eeb0 0a68 	vmov.f32	s0, s17
 8012c64:	ecbd 8b02 	vpop	{d8}
 8012c68:	bd08      	pop	{r3, pc}
 8012c6a:	bf00      	nop
 8012c6c:	08015310 	.word	0x08015310

08012c70 <atan2f>:
 8012c70:	f000 bf20 	b.w	8013ab4 <__ieee754_atan2f>

08012c74 <powf>:
 8012c74:	b508      	push	{r3, lr}
 8012c76:	ed2d 8b04 	vpush	{d8-d9}
 8012c7a:	eeb0 8a60 	vmov.f32	s16, s1
 8012c7e:	eeb0 9a40 	vmov.f32	s18, s0
 8012c82:	f000 ffb7 	bl	8013bf4 <__ieee754_powf>
 8012c86:	eeb4 8a48 	vcmp.f32	s16, s16
 8012c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c8e:	eef0 8a40 	vmov.f32	s17, s0
 8012c92:	d63e      	bvs.n	8012d12 <powf+0x9e>
 8012c94:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c9c:	d112      	bne.n	8012cc4 <powf+0x50>
 8012c9e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca6:	d039      	beq.n	8012d1c <powf+0xa8>
 8012ca8:	eeb0 0a48 	vmov.f32	s0, s16
 8012cac:	f002 f895 	bl	8014dda <finitef>
 8012cb0:	b378      	cbz	r0, 8012d12 <powf+0x9e>
 8012cb2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cba:	d52a      	bpl.n	8012d12 <powf+0x9e>
 8012cbc:	f7fc ff9e 	bl	800fbfc <__errno>
 8012cc0:	2322      	movs	r3, #34	; 0x22
 8012cc2:	e014      	b.n	8012cee <powf+0x7a>
 8012cc4:	f002 f889 	bl	8014dda <finitef>
 8012cc8:	b998      	cbnz	r0, 8012cf2 <powf+0x7e>
 8012cca:	eeb0 0a49 	vmov.f32	s0, s18
 8012cce:	f002 f884 	bl	8014dda <finitef>
 8012cd2:	b170      	cbz	r0, 8012cf2 <powf+0x7e>
 8012cd4:	eeb0 0a48 	vmov.f32	s0, s16
 8012cd8:	f002 f87f 	bl	8014dda <finitef>
 8012cdc:	b148      	cbz	r0, 8012cf2 <powf+0x7e>
 8012cde:	eef4 8a68 	vcmp.f32	s17, s17
 8012ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce6:	d7e9      	bvc.n	8012cbc <powf+0x48>
 8012ce8:	f7fc ff88 	bl	800fbfc <__errno>
 8012cec:	2321      	movs	r3, #33	; 0x21
 8012cee:	6003      	str	r3, [r0, #0]
 8012cf0:	e00f      	b.n	8012d12 <powf+0x9e>
 8012cf2:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cfa:	d10a      	bne.n	8012d12 <powf+0x9e>
 8012cfc:	eeb0 0a49 	vmov.f32	s0, s18
 8012d00:	f002 f86b 	bl	8014dda <finitef>
 8012d04:	b128      	cbz	r0, 8012d12 <powf+0x9e>
 8012d06:	eeb0 0a48 	vmov.f32	s0, s16
 8012d0a:	f002 f866 	bl	8014dda <finitef>
 8012d0e:	2800      	cmp	r0, #0
 8012d10:	d1d4      	bne.n	8012cbc <powf+0x48>
 8012d12:	eeb0 0a68 	vmov.f32	s0, s17
 8012d16:	ecbd 8b04 	vpop	{d8-d9}
 8012d1a:	bd08      	pop	{r3, pc}
 8012d1c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012d20:	e7f7      	b.n	8012d12 <powf+0x9e>
 8012d22:	0000      	movs	r0, r0
 8012d24:	0000      	movs	r0, r0
	...

08012d28 <__ieee754_pow>:
 8012d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d2c:	ed2d 8b06 	vpush	{d8-d10}
 8012d30:	b089      	sub	sp, #36	; 0x24
 8012d32:	ed8d 1b00 	vstr	d1, [sp]
 8012d36:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012d3a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012d3e:	ea58 0102 	orrs.w	r1, r8, r2
 8012d42:	ec57 6b10 	vmov	r6, r7, d0
 8012d46:	d115      	bne.n	8012d74 <__ieee754_pow+0x4c>
 8012d48:	19b3      	adds	r3, r6, r6
 8012d4a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8012d4e:	4152      	adcs	r2, r2
 8012d50:	4299      	cmp	r1, r3
 8012d52:	4b89      	ldr	r3, [pc, #548]	; (8012f78 <__ieee754_pow+0x250>)
 8012d54:	4193      	sbcs	r3, r2
 8012d56:	f080 84d2 	bcs.w	80136fe <__ieee754_pow+0x9d6>
 8012d5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d5e:	4630      	mov	r0, r6
 8012d60:	4639      	mov	r1, r7
 8012d62:	f7ed fa93 	bl	800028c <__adddf3>
 8012d66:	ec41 0b10 	vmov	d0, r0, r1
 8012d6a:	b009      	add	sp, #36	; 0x24
 8012d6c:	ecbd 8b06 	vpop	{d8-d10}
 8012d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d74:	4b81      	ldr	r3, [pc, #516]	; (8012f7c <__ieee754_pow+0x254>)
 8012d76:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8012d7a:	429c      	cmp	r4, r3
 8012d7c:	ee10 aa10 	vmov	sl, s0
 8012d80:	463d      	mov	r5, r7
 8012d82:	dc06      	bgt.n	8012d92 <__ieee754_pow+0x6a>
 8012d84:	d101      	bne.n	8012d8a <__ieee754_pow+0x62>
 8012d86:	2e00      	cmp	r6, #0
 8012d88:	d1e7      	bne.n	8012d5a <__ieee754_pow+0x32>
 8012d8a:	4598      	cmp	r8, r3
 8012d8c:	dc01      	bgt.n	8012d92 <__ieee754_pow+0x6a>
 8012d8e:	d10f      	bne.n	8012db0 <__ieee754_pow+0x88>
 8012d90:	b172      	cbz	r2, 8012db0 <__ieee754_pow+0x88>
 8012d92:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012d96:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8012d9a:	ea55 050a 	orrs.w	r5, r5, sl
 8012d9e:	d1dc      	bne.n	8012d5a <__ieee754_pow+0x32>
 8012da0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012da4:	18db      	adds	r3, r3, r3
 8012da6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8012daa:	4152      	adcs	r2, r2
 8012dac:	429d      	cmp	r5, r3
 8012dae:	e7d0      	b.n	8012d52 <__ieee754_pow+0x2a>
 8012db0:	2d00      	cmp	r5, #0
 8012db2:	da3b      	bge.n	8012e2c <__ieee754_pow+0x104>
 8012db4:	4b72      	ldr	r3, [pc, #456]	; (8012f80 <__ieee754_pow+0x258>)
 8012db6:	4598      	cmp	r8, r3
 8012db8:	dc51      	bgt.n	8012e5e <__ieee754_pow+0x136>
 8012dba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012dbe:	4598      	cmp	r8, r3
 8012dc0:	f340 84ac 	ble.w	801371c <__ieee754_pow+0x9f4>
 8012dc4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012dc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012dcc:	2b14      	cmp	r3, #20
 8012dce:	dd0f      	ble.n	8012df0 <__ieee754_pow+0xc8>
 8012dd0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012dd4:	fa22 f103 	lsr.w	r1, r2, r3
 8012dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8012ddc:	4293      	cmp	r3, r2
 8012dde:	f040 849d 	bne.w	801371c <__ieee754_pow+0x9f4>
 8012de2:	f001 0101 	and.w	r1, r1, #1
 8012de6:	f1c1 0302 	rsb	r3, r1, #2
 8012dea:	9304      	str	r3, [sp, #16]
 8012dec:	b182      	cbz	r2, 8012e10 <__ieee754_pow+0xe8>
 8012dee:	e05f      	b.n	8012eb0 <__ieee754_pow+0x188>
 8012df0:	2a00      	cmp	r2, #0
 8012df2:	d15b      	bne.n	8012eac <__ieee754_pow+0x184>
 8012df4:	f1c3 0314 	rsb	r3, r3, #20
 8012df8:	fa48 f103 	asr.w	r1, r8, r3
 8012dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8012e00:	4543      	cmp	r3, r8
 8012e02:	f040 8488 	bne.w	8013716 <__ieee754_pow+0x9ee>
 8012e06:	f001 0101 	and.w	r1, r1, #1
 8012e0a:	f1c1 0302 	rsb	r3, r1, #2
 8012e0e:	9304      	str	r3, [sp, #16]
 8012e10:	4b5c      	ldr	r3, [pc, #368]	; (8012f84 <__ieee754_pow+0x25c>)
 8012e12:	4598      	cmp	r8, r3
 8012e14:	d132      	bne.n	8012e7c <__ieee754_pow+0x154>
 8012e16:	f1b9 0f00 	cmp.w	r9, #0
 8012e1a:	f280 8478 	bge.w	801370e <__ieee754_pow+0x9e6>
 8012e1e:	4959      	ldr	r1, [pc, #356]	; (8012f84 <__ieee754_pow+0x25c>)
 8012e20:	4632      	mov	r2, r6
 8012e22:	463b      	mov	r3, r7
 8012e24:	2000      	movs	r0, #0
 8012e26:	f7ed fd11 	bl	800084c <__aeabi_ddiv>
 8012e2a:	e79c      	b.n	8012d66 <__ieee754_pow+0x3e>
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	9304      	str	r3, [sp, #16]
 8012e30:	2a00      	cmp	r2, #0
 8012e32:	d13d      	bne.n	8012eb0 <__ieee754_pow+0x188>
 8012e34:	4b51      	ldr	r3, [pc, #324]	; (8012f7c <__ieee754_pow+0x254>)
 8012e36:	4598      	cmp	r8, r3
 8012e38:	d1ea      	bne.n	8012e10 <__ieee754_pow+0xe8>
 8012e3a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012e3e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012e42:	ea53 030a 	orrs.w	r3, r3, sl
 8012e46:	f000 845a 	beq.w	80136fe <__ieee754_pow+0x9d6>
 8012e4a:	4b4f      	ldr	r3, [pc, #316]	; (8012f88 <__ieee754_pow+0x260>)
 8012e4c:	429c      	cmp	r4, r3
 8012e4e:	dd08      	ble.n	8012e62 <__ieee754_pow+0x13a>
 8012e50:	f1b9 0f00 	cmp.w	r9, #0
 8012e54:	f2c0 8457 	blt.w	8013706 <__ieee754_pow+0x9de>
 8012e58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e5c:	e783      	b.n	8012d66 <__ieee754_pow+0x3e>
 8012e5e:	2302      	movs	r3, #2
 8012e60:	e7e5      	b.n	8012e2e <__ieee754_pow+0x106>
 8012e62:	f1b9 0f00 	cmp.w	r9, #0
 8012e66:	f04f 0000 	mov.w	r0, #0
 8012e6a:	f04f 0100 	mov.w	r1, #0
 8012e6e:	f6bf af7a 	bge.w	8012d66 <__ieee754_pow+0x3e>
 8012e72:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012e76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012e7a:	e774      	b.n	8012d66 <__ieee754_pow+0x3e>
 8012e7c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012e80:	d106      	bne.n	8012e90 <__ieee754_pow+0x168>
 8012e82:	4632      	mov	r2, r6
 8012e84:	463b      	mov	r3, r7
 8012e86:	4630      	mov	r0, r6
 8012e88:	4639      	mov	r1, r7
 8012e8a:	f7ed fbb5 	bl	80005f8 <__aeabi_dmul>
 8012e8e:	e76a      	b.n	8012d66 <__ieee754_pow+0x3e>
 8012e90:	4b3e      	ldr	r3, [pc, #248]	; (8012f8c <__ieee754_pow+0x264>)
 8012e92:	4599      	cmp	r9, r3
 8012e94:	d10c      	bne.n	8012eb0 <__ieee754_pow+0x188>
 8012e96:	2d00      	cmp	r5, #0
 8012e98:	db0a      	blt.n	8012eb0 <__ieee754_pow+0x188>
 8012e9a:	ec47 6b10 	vmov	d0, r6, r7
 8012e9e:	b009      	add	sp, #36	; 0x24
 8012ea0:	ecbd 8b06 	vpop	{d8-d10}
 8012ea4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea8:	f000 bc6c 	b.w	8013784 <__ieee754_sqrt>
 8012eac:	2300      	movs	r3, #0
 8012eae:	9304      	str	r3, [sp, #16]
 8012eb0:	ec47 6b10 	vmov	d0, r6, r7
 8012eb4:	f001 fe1c 	bl	8014af0 <fabs>
 8012eb8:	ec51 0b10 	vmov	r0, r1, d0
 8012ebc:	f1ba 0f00 	cmp.w	sl, #0
 8012ec0:	d129      	bne.n	8012f16 <__ieee754_pow+0x1ee>
 8012ec2:	b124      	cbz	r4, 8012ece <__ieee754_pow+0x1a6>
 8012ec4:	4b2f      	ldr	r3, [pc, #188]	; (8012f84 <__ieee754_pow+0x25c>)
 8012ec6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d123      	bne.n	8012f16 <__ieee754_pow+0x1ee>
 8012ece:	f1b9 0f00 	cmp.w	r9, #0
 8012ed2:	da05      	bge.n	8012ee0 <__ieee754_pow+0x1b8>
 8012ed4:	4602      	mov	r2, r0
 8012ed6:	460b      	mov	r3, r1
 8012ed8:	2000      	movs	r0, #0
 8012eda:	492a      	ldr	r1, [pc, #168]	; (8012f84 <__ieee754_pow+0x25c>)
 8012edc:	f7ed fcb6 	bl	800084c <__aeabi_ddiv>
 8012ee0:	2d00      	cmp	r5, #0
 8012ee2:	f6bf af40 	bge.w	8012d66 <__ieee754_pow+0x3e>
 8012ee6:	9b04      	ldr	r3, [sp, #16]
 8012ee8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012eec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012ef0:	4323      	orrs	r3, r4
 8012ef2:	d108      	bne.n	8012f06 <__ieee754_pow+0x1de>
 8012ef4:	4602      	mov	r2, r0
 8012ef6:	460b      	mov	r3, r1
 8012ef8:	4610      	mov	r0, r2
 8012efa:	4619      	mov	r1, r3
 8012efc:	f7ed f9c4 	bl	8000288 <__aeabi_dsub>
 8012f00:	4602      	mov	r2, r0
 8012f02:	460b      	mov	r3, r1
 8012f04:	e78f      	b.n	8012e26 <__ieee754_pow+0xfe>
 8012f06:	9b04      	ldr	r3, [sp, #16]
 8012f08:	2b01      	cmp	r3, #1
 8012f0a:	f47f af2c 	bne.w	8012d66 <__ieee754_pow+0x3e>
 8012f0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f12:	4619      	mov	r1, r3
 8012f14:	e727      	b.n	8012d66 <__ieee754_pow+0x3e>
 8012f16:	0feb      	lsrs	r3, r5, #31
 8012f18:	3b01      	subs	r3, #1
 8012f1a:	9306      	str	r3, [sp, #24]
 8012f1c:	9a06      	ldr	r2, [sp, #24]
 8012f1e:	9b04      	ldr	r3, [sp, #16]
 8012f20:	4313      	orrs	r3, r2
 8012f22:	d102      	bne.n	8012f2a <__ieee754_pow+0x202>
 8012f24:	4632      	mov	r2, r6
 8012f26:	463b      	mov	r3, r7
 8012f28:	e7e6      	b.n	8012ef8 <__ieee754_pow+0x1d0>
 8012f2a:	4b19      	ldr	r3, [pc, #100]	; (8012f90 <__ieee754_pow+0x268>)
 8012f2c:	4598      	cmp	r8, r3
 8012f2e:	f340 80fb 	ble.w	8013128 <__ieee754_pow+0x400>
 8012f32:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012f36:	4598      	cmp	r8, r3
 8012f38:	4b13      	ldr	r3, [pc, #76]	; (8012f88 <__ieee754_pow+0x260>)
 8012f3a:	dd0c      	ble.n	8012f56 <__ieee754_pow+0x22e>
 8012f3c:	429c      	cmp	r4, r3
 8012f3e:	dc0f      	bgt.n	8012f60 <__ieee754_pow+0x238>
 8012f40:	f1b9 0f00 	cmp.w	r9, #0
 8012f44:	da0f      	bge.n	8012f66 <__ieee754_pow+0x23e>
 8012f46:	2000      	movs	r0, #0
 8012f48:	b009      	add	sp, #36	; 0x24
 8012f4a:	ecbd 8b06 	vpop	{d8-d10}
 8012f4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f52:	f001 bda2 	b.w	8014a9a <__math_oflow>
 8012f56:	429c      	cmp	r4, r3
 8012f58:	dbf2      	blt.n	8012f40 <__ieee754_pow+0x218>
 8012f5a:	4b0a      	ldr	r3, [pc, #40]	; (8012f84 <__ieee754_pow+0x25c>)
 8012f5c:	429c      	cmp	r4, r3
 8012f5e:	dd19      	ble.n	8012f94 <__ieee754_pow+0x26c>
 8012f60:	f1b9 0f00 	cmp.w	r9, #0
 8012f64:	dcef      	bgt.n	8012f46 <__ieee754_pow+0x21e>
 8012f66:	2000      	movs	r0, #0
 8012f68:	b009      	add	sp, #36	; 0x24
 8012f6a:	ecbd 8b06 	vpop	{d8-d10}
 8012f6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f72:	f001 bd89 	b.w	8014a88 <__math_uflow>
 8012f76:	bf00      	nop
 8012f78:	fff00000 	.word	0xfff00000
 8012f7c:	7ff00000 	.word	0x7ff00000
 8012f80:	433fffff 	.word	0x433fffff
 8012f84:	3ff00000 	.word	0x3ff00000
 8012f88:	3fefffff 	.word	0x3fefffff
 8012f8c:	3fe00000 	.word	0x3fe00000
 8012f90:	41e00000 	.word	0x41e00000
 8012f94:	4b60      	ldr	r3, [pc, #384]	; (8013118 <__ieee754_pow+0x3f0>)
 8012f96:	2200      	movs	r2, #0
 8012f98:	f7ed f976 	bl	8000288 <__aeabi_dsub>
 8012f9c:	a354      	add	r3, pc, #336	; (adr r3, 80130f0 <__ieee754_pow+0x3c8>)
 8012f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa2:	4604      	mov	r4, r0
 8012fa4:	460d      	mov	r5, r1
 8012fa6:	f7ed fb27 	bl	80005f8 <__aeabi_dmul>
 8012faa:	a353      	add	r3, pc, #332	; (adr r3, 80130f8 <__ieee754_pow+0x3d0>)
 8012fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb0:	4606      	mov	r6, r0
 8012fb2:	460f      	mov	r7, r1
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	4629      	mov	r1, r5
 8012fb8:	f7ed fb1e 	bl	80005f8 <__aeabi_dmul>
 8012fbc:	4b57      	ldr	r3, [pc, #348]	; (801311c <__ieee754_pow+0x3f4>)
 8012fbe:	4682      	mov	sl, r0
 8012fc0:	468b      	mov	fp, r1
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	4620      	mov	r0, r4
 8012fc6:	4629      	mov	r1, r5
 8012fc8:	f7ed fb16 	bl	80005f8 <__aeabi_dmul>
 8012fcc:	4602      	mov	r2, r0
 8012fce:	460b      	mov	r3, r1
 8012fd0:	a14b      	add	r1, pc, #300	; (adr r1, 8013100 <__ieee754_pow+0x3d8>)
 8012fd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fd6:	f7ed f957 	bl	8000288 <__aeabi_dsub>
 8012fda:	4622      	mov	r2, r4
 8012fdc:	462b      	mov	r3, r5
 8012fde:	f7ed fb0b 	bl	80005f8 <__aeabi_dmul>
 8012fe2:	4602      	mov	r2, r0
 8012fe4:	460b      	mov	r3, r1
 8012fe6:	2000      	movs	r0, #0
 8012fe8:	494d      	ldr	r1, [pc, #308]	; (8013120 <__ieee754_pow+0x3f8>)
 8012fea:	f7ed f94d 	bl	8000288 <__aeabi_dsub>
 8012fee:	4622      	mov	r2, r4
 8012ff0:	4680      	mov	r8, r0
 8012ff2:	4689      	mov	r9, r1
 8012ff4:	462b      	mov	r3, r5
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	4629      	mov	r1, r5
 8012ffa:	f7ed fafd 	bl	80005f8 <__aeabi_dmul>
 8012ffe:	4602      	mov	r2, r0
 8013000:	460b      	mov	r3, r1
 8013002:	4640      	mov	r0, r8
 8013004:	4649      	mov	r1, r9
 8013006:	f7ed faf7 	bl	80005f8 <__aeabi_dmul>
 801300a:	a33f      	add	r3, pc, #252	; (adr r3, 8013108 <__ieee754_pow+0x3e0>)
 801300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013010:	f7ed faf2 	bl	80005f8 <__aeabi_dmul>
 8013014:	4602      	mov	r2, r0
 8013016:	460b      	mov	r3, r1
 8013018:	4650      	mov	r0, sl
 801301a:	4659      	mov	r1, fp
 801301c:	f7ed f934 	bl	8000288 <__aeabi_dsub>
 8013020:	4602      	mov	r2, r0
 8013022:	460b      	mov	r3, r1
 8013024:	4680      	mov	r8, r0
 8013026:	4689      	mov	r9, r1
 8013028:	4630      	mov	r0, r6
 801302a:	4639      	mov	r1, r7
 801302c:	f7ed f92e 	bl	800028c <__adddf3>
 8013030:	2000      	movs	r0, #0
 8013032:	4632      	mov	r2, r6
 8013034:	463b      	mov	r3, r7
 8013036:	4604      	mov	r4, r0
 8013038:	460d      	mov	r5, r1
 801303a:	f7ed f925 	bl	8000288 <__aeabi_dsub>
 801303e:	4602      	mov	r2, r0
 8013040:	460b      	mov	r3, r1
 8013042:	4640      	mov	r0, r8
 8013044:	4649      	mov	r1, r9
 8013046:	f7ed f91f 	bl	8000288 <__aeabi_dsub>
 801304a:	9b04      	ldr	r3, [sp, #16]
 801304c:	9a06      	ldr	r2, [sp, #24]
 801304e:	3b01      	subs	r3, #1
 8013050:	4313      	orrs	r3, r2
 8013052:	4682      	mov	sl, r0
 8013054:	468b      	mov	fp, r1
 8013056:	f040 81e7 	bne.w	8013428 <__ieee754_pow+0x700>
 801305a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013110 <__ieee754_pow+0x3e8>
 801305e:	eeb0 8a47 	vmov.f32	s16, s14
 8013062:	eef0 8a67 	vmov.f32	s17, s15
 8013066:	e9dd 6700 	ldrd	r6, r7, [sp]
 801306a:	2600      	movs	r6, #0
 801306c:	4632      	mov	r2, r6
 801306e:	463b      	mov	r3, r7
 8013070:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013074:	f7ed f908 	bl	8000288 <__aeabi_dsub>
 8013078:	4622      	mov	r2, r4
 801307a:	462b      	mov	r3, r5
 801307c:	f7ed fabc 	bl	80005f8 <__aeabi_dmul>
 8013080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013084:	4680      	mov	r8, r0
 8013086:	4689      	mov	r9, r1
 8013088:	4650      	mov	r0, sl
 801308a:	4659      	mov	r1, fp
 801308c:	f7ed fab4 	bl	80005f8 <__aeabi_dmul>
 8013090:	4602      	mov	r2, r0
 8013092:	460b      	mov	r3, r1
 8013094:	4640      	mov	r0, r8
 8013096:	4649      	mov	r1, r9
 8013098:	f7ed f8f8 	bl	800028c <__adddf3>
 801309c:	4632      	mov	r2, r6
 801309e:	463b      	mov	r3, r7
 80130a0:	4680      	mov	r8, r0
 80130a2:	4689      	mov	r9, r1
 80130a4:	4620      	mov	r0, r4
 80130a6:	4629      	mov	r1, r5
 80130a8:	f7ed faa6 	bl	80005f8 <__aeabi_dmul>
 80130ac:	460b      	mov	r3, r1
 80130ae:	4604      	mov	r4, r0
 80130b0:	460d      	mov	r5, r1
 80130b2:	4602      	mov	r2, r0
 80130b4:	4649      	mov	r1, r9
 80130b6:	4640      	mov	r0, r8
 80130b8:	f7ed f8e8 	bl	800028c <__adddf3>
 80130bc:	4b19      	ldr	r3, [pc, #100]	; (8013124 <__ieee754_pow+0x3fc>)
 80130be:	4299      	cmp	r1, r3
 80130c0:	ec45 4b19 	vmov	d9, r4, r5
 80130c4:	4606      	mov	r6, r0
 80130c6:	460f      	mov	r7, r1
 80130c8:	468b      	mov	fp, r1
 80130ca:	f340 82f1 	ble.w	80136b0 <__ieee754_pow+0x988>
 80130ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80130d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80130d6:	4303      	orrs	r3, r0
 80130d8:	f000 81e4 	beq.w	80134a4 <__ieee754_pow+0x77c>
 80130dc:	ec51 0b18 	vmov	r0, r1, d8
 80130e0:	2200      	movs	r2, #0
 80130e2:	2300      	movs	r3, #0
 80130e4:	f7ed fcfa 	bl	8000adc <__aeabi_dcmplt>
 80130e8:	3800      	subs	r0, #0
 80130ea:	bf18      	it	ne
 80130ec:	2001      	movne	r0, #1
 80130ee:	e72b      	b.n	8012f48 <__ieee754_pow+0x220>
 80130f0:	60000000 	.word	0x60000000
 80130f4:	3ff71547 	.word	0x3ff71547
 80130f8:	f85ddf44 	.word	0xf85ddf44
 80130fc:	3e54ae0b 	.word	0x3e54ae0b
 8013100:	55555555 	.word	0x55555555
 8013104:	3fd55555 	.word	0x3fd55555
 8013108:	652b82fe 	.word	0x652b82fe
 801310c:	3ff71547 	.word	0x3ff71547
 8013110:	00000000 	.word	0x00000000
 8013114:	bff00000 	.word	0xbff00000
 8013118:	3ff00000 	.word	0x3ff00000
 801311c:	3fd00000 	.word	0x3fd00000
 8013120:	3fe00000 	.word	0x3fe00000
 8013124:	408fffff 	.word	0x408fffff
 8013128:	4bd5      	ldr	r3, [pc, #852]	; (8013480 <__ieee754_pow+0x758>)
 801312a:	402b      	ands	r3, r5
 801312c:	2200      	movs	r2, #0
 801312e:	b92b      	cbnz	r3, 801313c <__ieee754_pow+0x414>
 8013130:	4bd4      	ldr	r3, [pc, #848]	; (8013484 <__ieee754_pow+0x75c>)
 8013132:	f7ed fa61 	bl	80005f8 <__aeabi_dmul>
 8013136:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801313a:	460c      	mov	r4, r1
 801313c:	1523      	asrs	r3, r4, #20
 801313e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013142:	4413      	add	r3, r2
 8013144:	9305      	str	r3, [sp, #20]
 8013146:	4bd0      	ldr	r3, [pc, #832]	; (8013488 <__ieee754_pow+0x760>)
 8013148:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801314c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013150:	429c      	cmp	r4, r3
 8013152:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013156:	dd08      	ble.n	801316a <__ieee754_pow+0x442>
 8013158:	4bcc      	ldr	r3, [pc, #816]	; (801348c <__ieee754_pow+0x764>)
 801315a:	429c      	cmp	r4, r3
 801315c:	f340 8162 	ble.w	8013424 <__ieee754_pow+0x6fc>
 8013160:	9b05      	ldr	r3, [sp, #20]
 8013162:	3301      	adds	r3, #1
 8013164:	9305      	str	r3, [sp, #20]
 8013166:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801316a:	2400      	movs	r4, #0
 801316c:	00e3      	lsls	r3, r4, #3
 801316e:	9307      	str	r3, [sp, #28]
 8013170:	4bc7      	ldr	r3, [pc, #796]	; (8013490 <__ieee754_pow+0x768>)
 8013172:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013176:	ed93 7b00 	vldr	d7, [r3]
 801317a:	4629      	mov	r1, r5
 801317c:	ec53 2b17 	vmov	r2, r3, d7
 8013180:	eeb0 9a47 	vmov.f32	s18, s14
 8013184:	eef0 9a67 	vmov.f32	s19, s15
 8013188:	4682      	mov	sl, r0
 801318a:	f7ed f87d 	bl	8000288 <__aeabi_dsub>
 801318e:	4652      	mov	r2, sl
 8013190:	4606      	mov	r6, r0
 8013192:	460f      	mov	r7, r1
 8013194:	462b      	mov	r3, r5
 8013196:	ec51 0b19 	vmov	r0, r1, d9
 801319a:	f7ed f877 	bl	800028c <__adddf3>
 801319e:	4602      	mov	r2, r0
 80131a0:	460b      	mov	r3, r1
 80131a2:	2000      	movs	r0, #0
 80131a4:	49bb      	ldr	r1, [pc, #748]	; (8013494 <__ieee754_pow+0x76c>)
 80131a6:	f7ed fb51 	bl	800084c <__aeabi_ddiv>
 80131aa:	ec41 0b1a 	vmov	d10, r0, r1
 80131ae:	4602      	mov	r2, r0
 80131b0:	460b      	mov	r3, r1
 80131b2:	4630      	mov	r0, r6
 80131b4:	4639      	mov	r1, r7
 80131b6:	f7ed fa1f 	bl	80005f8 <__aeabi_dmul>
 80131ba:	2300      	movs	r3, #0
 80131bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131c0:	9302      	str	r3, [sp, #8]
 80131c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80131c6:	46ab      	mov	fp, r5
 80131c8:	106d      	asrs	r5, r5, #1
 80131ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80131ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80131d2:	ec41 0b18 	vmov	d8, r0, r1
 80131d6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80131da:	2200      	movs	r2, #0
 80131dc:	4640      	mov	r0, r8
 80131de:	4649      	mov	r1, r9
 80131e0:	4614      	mov	r4, r2
 80131e2:	461d      	mov	r5, r3
 80131e4:	f7ed fa08 	bl	80005f8 <__aeabi_dmul>
 80131e8:	4602      	mov	r2, r0
 80131ea:	460b      	mov	r3, r1
 80131ec:	4630      	mov	r0, r6
 80131ee:	4639      	mov	r1, r7
 80131f0:	f7ed f84a 	bl	8000288 <__aeabi_dsub>
 80131f4:	ec53 2b19 	vmov	r2, r3, d9
 80131f8:	4606      	mov	r6, r0
 80131fa:	460f      	mov	r7, r1
 80131fc:	4620      	mov	r0, r4
 80131fe:	4629      	mov	r1, r5
 8013200:	f7ed f842 	bl	8000288 <__aeabi_dsub>
 8013204:	4602      	mov	r2, r0
 8013206:	460b      	mov	r3, r1
 8013208:	4650      	mov	r0, sl
 801320a:	4659      	mov	r1, fp
 801320c:	f7ed f83c 	bl	8000288 <__aeabi_dsub>
 8013210:	4642      	mov	r2, r8
 8013212:	464b      	mov	r3, r9
 8013214:	f7ed f9f0 	bl	80005f8 <__aeabi_dmul>
 8013218:	4602      	mov	r2, r0
 801321a:	460b      	mov	r3, r1
 801321c:	4630      	mov	r0, r6
 801321e:	4639      	mov	r1, r7
 8013220:	f7ed f832 	bl	8000288 <__aeabi_dsub>
 8013224:	ec53 2b1a 	vmov	r2, r3, d10
 8013228:	f7ed f9e6 	bl	80005f8 <__aeabi_dmul>
 801322c:	ec53 2b18 	vmov	r2, r3, d8
 8013230:	ec41 0b19 	vmov	d9, r0, r1
 8013234:	ec51 0b18 	vmov	r0, r1, d8
 8013238:	f7ed f9de 	bl	80005f8 <__aeabi_dmul>
 801323c:	a37c      	add	r3, pc, #496	; (adr r3, 8013430 <__ieee754_pow+0x708>)
 801323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013242:	4604      	mov	r4, r0
 8013244:	460d      	mov	r5, r1
 8013246:	f7ed f9d7 	bl	80005f8 <__aeabi_dmul>
 801324a:	a37b      	add	r3, pc, #492	; (adr r3, 8013438 <__ieee754_pow+0x710>)
 801324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013250:	f7ed f81c 	bl	800028c <__adddf3>
 8013254:	4622      	mov	r2, r4
 8013256:	462b      	mov	r3, r5
 8013258:	f7ed f9ce 	bl	80005f8 <__aeabi_dmul>
 801325c:	a378      	add	r3, pc, #480	; (adr r3, 8013440 <__ieee754_pow+0x718>)
 801325e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013262:	f7ed f813 	bl	800028c <__adddf3>
 8013266:	4622      	mov	r2, r4
 8013268:	462b      	mov	r3, r5
 801326a:	f7ed f9c5 	bl	80005f8 <__aeabi_dmul>
 801326e:	a376      	add	r3, pc, #472	; (adr r3, 8013448 <__ieee754_pow+0x720>)
 8013270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013274:	f7ed f80a 	bl	800028c <__adddf3>
 8013278:	4622      	mov	r2, r4
 801327a:	462b      	mov	r3, r5
 801327c:	f7ed f9bc 	bl	80005f8 <__aeabi_dmul>
 8013280:	a373      	add	r3, pc, #460	; (adr r3, 8013450 <__ieee754_pow+0x728>)
 8013282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013286:	f7ed f801 	bl	800028c <__adddf3>
 801328a:	4622      	mov	r2, r4
 801328c:	462b      	mov	r3, r5
 801328e:	f7ed f9b3 	bl	80005f8 <__aeabi_dmul>
 8013292:	a371      	add	r3, pc, #452	; (adr r3, 8013458 <__ieee754_pow+0x730>)
 8013294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013298:	f7ec fff8 	bl	800028c <__adddf3>
 801329c:	4622      	mov	r2, r4
 801329e:	4606      	mov	r6, r0
 80132a0:	460f      	mov	r7, r1
 80132a2:	462b      	mov	r3, r5
 80132a4:	4620      	mov	r0, r4
 80132a6:	4629      	mov	r1, r5
 80132a8:	f7ed f9a6 	bl	80005f8 <__aeabi_dmul>
 80132ac:	4602      	mov	r2, r0
 80132ae:	460b      	mov	r3, r1
 80132b0:	4630      	mov	r0, r6
 80132b2:	4639      	mov	r1, r7
 80132b4:	f7ed f9a0 	bl	80005f8 <__aeabi_dmul>
 80132b8:	4642      	mov	r2, r8
 80132ba:	4604      	mov	r4, r0
 80132bc:	460d      	mov	r5, r1
 80132be:	464b      	mov	r3, r9
 80132c0:	ec51 0b18 	vmov	r0, r1, d8
 80132c4:	f7ec ffe2 	bl	800028c <__adddf3>
 80132c8:	ec53 2b19 	vmov	r2, r3, d9
 80132cc:	f7ed f994 	bl	80005f8 <__aeabi_dmul>
 80132d0:	4622      	mov	r2, r4
 80132d2:	462b      	mov	r3, r5
 80132d4:	f7ec ffda 	bl	800028c <__adddf3>
 80132d8:	4642      	mov	r2, r8
 80132da:	4682      	mov	sl, r0
 80132dc:	468b      	mov	fp, r1
 80132de:	464b      	mov	r3, r9
 80132e0:	4640      	mov	r0, r8
 80132e2:	4649      	mov	r1, r9
 80132e4:	f7ed f988 	bl	80005f8 <__aeabi_dmul>
 80132e8:	4b6b      	ldr	r3, [pc, #428]	; (8013498 <__ieee754_pow+0x770>)
 80132ea:	2200      	movs	r2, #0
 80132ec:	4606      	mov	r6, r0
 80132ee:	460f      	mov	r7, r1
 80132f0:	f7ec ffcc 	bl	800028c <__adddf3>
 80132f4:	4652      	mov	r2, sl
 80132f6:	465b      	mov	r3, fp
 80132f8:	f7ec ffc8 	bl	800028c <__adddf3>
 80132fc:	2000      	movs	r0, #0
 80132fe:	4604      	mov	r4, r0
 8013300:	460d      	mov	r5, r1
 8013302:	4602      	mov	r2, r0
 8013304:	460b      	mov	r3, r1
 8013306:	4640      	mov	r0, r8
 8013308:	4649      	mov	r1, r9
 801330a:	f7ed f975 	bl	80005f8 <__aeabi_dmul>
 801330e:	4b62      	ldr	r3, [pc, #392]	; (8013498 <__ieee754_pow+0x770>)
 8013310:	4680      	mov	r8, r0
 8013312:	4689      	mov	r9, r1
 8013314:	2200      	movs	r2, #0
 8013316:	4620      	mov	r0, r4
 8013318:	4629      	mov	r1, r5
 801331a:	f7ec ffb5 	bl	8000288 <__aeabi_dsub>
 801331e:	4632      	mov	r2, r6
 8013320:	463b      	mov	r3, r7
 8013322:	f7ec ffb1 	bl	8000288 <__aeabi_dsub>
 8013326:	4602      	mov	r2, r0
 8013328:	460b      	mov	r3, r1
 801332a:	4650      	mov	r0, sl
 801332c:	4659      	mov	r1, fp
 801332e:	f7ec ffab 	bl	8000288 <__aeabi_dsub>
 8013332:	ec53 2b18 	vmov	r2, r3, d8
 8013336:	f7ed f95f 	bl	80005f8 <__aeabi_dmul>
 801333a:	4622      	mov	r2, r4
 801333c:	4606      	mov	r6, r0
 801333e:	460f      	mov	r7, r1
 8013340:	462b      	mov	r3, r5
 8013342:	ec51 0b19 	vmov	r0, r1, d9
 8013346:	f7ed f957 	bl	80005f8 <__aeabi_dmul>
 801334a:	4602      	mov	r2, r0
 801334c:	460b      	mov	r3, r1
 801334e:	4630      	mov	r0, r6
 8013350:	4639      	mov	r1, r7
 8013352:	f7ec ff9b 	bl	800028c <__adddf3>
 8013356:	4606      	mov	r6, r0
 8013358:	460f      	mov	r7, r1
 801335a:	4602      	mov	r2, r0
 801335c:	460b      	mov	r3, r1
 801335e:	4640      	mov	r0, r8
 8013360:	4649      	mov	r1, r9
 8013362:	f7ec ff93 	bl	800028c <__adddf3>
 8013366:	a33e      	add	r3, pc, #248	; (adr r3, 8013460 <__ieee754_pow+0x738>)
 8013368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801336c:	2000      	movs	r0, #0
 801336e:	4604      	mov	r4, r0
 8013370:	460d      	mov	r5, r1
 8013372:	f7ed f941 	bl	80005f8 <__aeabi_dmul>
 8013376:	4642      	mov	r2, r8
 8013378:	ec41 0b18 	vmov	d8, r0, r1
 801337c:	464b      	mov	r3, r9
 801337e:	4620      	mov	r0, r4
 8013380:	4629      	mov	r1, r5
 8013382:	f7ec ff81 	bl	8000288 <__aeabi_dsub>
 8013386:	4602      	mov	r2, r0
 8013388:	460b      	mov	r3, r1
 801338a:	4630      	mov	r0, r6
 801338c:	4639      	mov	r1, r7
 801338e:	f7ec ff7b 	bl	8000288 <__aeabi_dsub>
 8013392:	a335      	add	r3, pc, #212	; (adr r3, 8013468 <__ieee754_pow+0x740>)
 8013394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013398:	f7ed f92e 	bl	80005f8 <__aeabi_dmul>
 801339c:	a334      	add	r3, pc, #208	; (adr r3, 8013470 <__ieee754_pow+0x748>)
 801339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a2:	4606      	mov	r6, r0
 80133a4:	460f      	mov	r7, r1
 80133a6:	4620      	mov	r0, r4
 80133a8:	4629      	mov	r1, r5
 80133aa:	f7ed f925 	bl	80005f8 <__aeabi_dmul>
 80133ae:	4602      	mov	r2, r0
 80133b0:	460b      	mov	r3, r1
 80133b2:	4630      	mov	r0, r6
 80133b4:	4639      	mov	r1, r7
 80133b6:	f7ec ff69 	bl	800028c <__adddf3>
 80133ba:	9a07      	ldr	r2, [sp, #28]
 80133bc:	4b37      	ldr	r3, [pc, #220]	; (801349c <__ieee754_pow+0x774>)
 80133be:	4413      	add	r3, r2
 80133c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c4:	f7ec ff62 	bl	800028c <__adddf3>
 80133c8:	4682      	mov	sl, r0
 80133ca:	9805      	ldr	r0, [sp, #20]
 80133cc:	468b      	mov	fp, r1
 80133ce:	f7ed f8a9 	bl	8000524 <__aeabi_i2d>
 80133d2:	9a07      	ldr	r2, [sp, #28]
 80133d4:	4b32      	ldr	r3, [pc, #200]	; (80134a0 <__ieee754_pow+0x778>)
 80133d6:	4413      	add	r3, r2
 80133d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80133dc:	4606      	mov	r6, r0
 80133de:	460f      	mov	r7, r1
 80133e0:	4652      	mov	r2, sl
 80133e2:	465b      	mov	r3, fp
 80133e4:	ec51 0b18 	vmov	r0, r1, d8
 80133e8:	f7ec ff50 	bl	800028c <__adddf3>
 80133ec:	4642      	mov	r2, r8
 80133ee:	464b      	mov	r3, r9
 80133f0:	f7ec ff4c 	bl	800028c <__adddf3>
 80133f4:	4632      	mov	r2, r6
 80133f6:	463b      	mov	r3, r7
 80133f8:	f7ec ff48 	bl	800028c <__adddf3>
 80133fc:	2000      	movs	r0, #0
 80133fe:	4632      	mov	r2, r6
 8013400:	463b      	mov	r3, r7
 8013402:	4604      	mov	r4, r0
 8013404:	460d      	mov	r5, r1
 8013406:	f7ec ff3f 	bl	8000288 <__aeabi_dsub>
 801340a:	4642      	mov	r2, r8
 801340c:	464b      	mov	r3, r9
 801340e:	f7ec ff3b 	bl	8000288 <__aeabi_dsub>
 8013412:	ec53 2b18 	vmov	r2, r3, d8
 8013416:	f7ec ff37 	bl	8000288 <__aeabi_dsub>
 801341a:	4602      	mov	r2, r0
 801341c:	460b      	mov	r3, r1
 801341e:	4650      	mov	r0, sl
 8013420:	4659      	mov	r1, fp
 8013422:	e610      	b.n	8013046 <__ieee754_pow+0x31e>
 8013424:	2401      	movs	r4, #1
 8013426:	e6a1      	b.n	801316c <__ieee754_pow+0x444>
 8013428:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013478 <__ieee754_pow+0x750>
 801342c:	e617      	b.n	801305e <__ieee754_pow+0x336>
 801342e:	bf00      	nop
 8013430:	4a454eef 	.word	0x4a454eef
 8013434:	3fca7e28 	.word	0x3fca7e28
 8013438:	93c9db65 	.word	0x93c9db65
 801343c:	3fcd864a 	.word	0x3fcd864a
 8013440:	a91d4101 	.word	0xa91d4101
 8013444:	3fd17460 	.word	0x3fd17460
 8013448:	518f264d 	.word	0x518f264d
 801344c:	3fd55555 	.word	0x3fd55555
 8013450:	db6fabff 	.word	0xdb6fabff
 8013454:	3fdb6db6 	.word	0x3fdb6db6
 8013458:	33333303 	.word	0x33333303
 801345c:	3fe33333 	.word	0x3fe33333
 8013460:	e0000000 	.word	0xe0000000
 8013464:	3feec709 	.word	0x3feec709
 8013468:	dc3a03fd 	.word	0xdc3a03fd
 801346c:	3feec709 	.word	0x3feec709
 8013470:	145b01f5 	.word	0x145b01f5
 8013474:	be3e2fe0 	.word	0xbe3e2fe0
 8013478:	00000000 	.word	0x00000000
 801347c:	3ff00000 	.word	0x3ff00000
 8013480:	7ff00000 	.word	0x7ff00000
 8013484:	43400000 	.word	0x43400000
 8013488:	0003988e 	.word	0x0003988e
 801348c:	000bb679 	.word	0x000bb679
 8013490:	08015480 	.word	0x08015480
 8013494:	3ff00000 	.word	0x3ff00000
 8013498:	40080000 	.word	0x40080000
 801349c:	080154a0 	.word	0x080154a0
 80134a0:	08015490 	.word	0x08015490
 80134a4:	a3b5      	add	r3, pc, #724	; (adr r3, 801377c <__ieee754_pow+0xa54>)
 80134a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134aa:	4640      	mov	r0, r8
 80134ac:	4649      	mov	r1, r9
 80134ae:	f7ec feed 	bl	800028c <__adddf3>
 80134b2:	4622      	mov	r2, r4
 80134b4:	ec41 0b1a 	vmov	d10, r0, r1
 80134b8:	462b      	mov	r3, r5
 80134ba:	4630      	mov	r0, r6
 80134bc:	4639      	mov	r1, r7
 80134be:	f7ec fee3 	bl	8000288 <__aeabi_dsub>
 80134c2:	4602      	mov	r2, r0
 80134c4:	460b      	mov	r3, r1
 80134c6:	ec51 0b1a 	vmov	r0, r1, d10
 80134ca:	f7ed fb25 	bl	8000b18 <__aeabi_dcmpgt>
 80134ce:	2800      	cmp	r0, #0
 80134d0:	f47f ae04 	bne.w	80130dc <__ieee754_pow+0x3b4>
 80134d4:	4aa4      	ldr	r2, [pc, #656]	; (8013768 <__ieee754_pow+0xa40>)
 80134d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80134da:	4293      	cmp	r3, r2
 80134dc:	f340 8108 	ble.w	80136f0 <__ieee754_pow+0x9c8>
 80134e0:	151b      	asrs	r3, r3, #20
 80134e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80134e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80134ea:	fa4a f303 	asr.w	r3, sl, r3
 80134ee:	445b      	add	r3, fp
 80134f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80134f4:	4e9d      	ldr	r6, [pc, #628]	; (801376c <__ieee754_pow+0xa44>)
 80134f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80134fa:	4116      	asrs	r6, r2
 80134fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013500:	2000      	movs	r0, #0
 8013502:	ea23 0106 	bic.w	r1, r3, r6
 8013506:	f1c2 0214 	rsb	r2, r2, #20
 801350a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801350e:	fa4a fa02 	asr.w	sl, sl, r2
 8013512:	f1bb 0f00 	cmp.w	fp, #0
 8013516:	4602      	mov	r2, r0
 8013518:	460b      	mov	r3, r1
 801351a:	4620      	mov	r0, r4
 801351c:	4629      	mov	r1, r5
 801351e:	bfb8      	it	lt
 8013520:	f1ca 0a00 	rsblt	sl, sl, #0
 8013524:	f7ec feb0 	bl	8000288 <__aeabi_dsub>
 8013528:	ec41 0b19 	vmov	d9, r0, r1
 801352c:	4642      	mov	r2, r8
 801352e:	464b      	mov	r3, r9
 8013530:	ec51 0b19 	vmov	r0, r1, d9
 8013534:	f7ec feaa 	bl	800028c <__adddf3>
 8013538:	a37b      	add	r3, pc, #492	; (adr r3, 8013728 <__ieee754_pow+0xa00>)
 801353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801353e:	2000      	movs	r0, #0
 8013540:	4604      	mov	r4, r0
 8013542:	460d      	mov	r5, r1
 8013544:	f7ed f858 	bl	80005f8 <__aeabi_dmul>
 8013548:	ec53 2b19 	vmov	r2, r3, d9
 801354c:	4606      	mov	r6, r0
 801354e:	460f      	mov	r7, r1
 8013550:	4620      	mov	r0, r4
 8013552:	4629      	mov	r1, r5
 8013554:	f7ec fe98 	bl	8000288 <__aeabi_dsub>
 8013558:	4602      	mov	r2, r0
 801355a:	460b      	mov	r3, r1
 801355c:	4640      	mov	r0, r8
 801355e:	4649      	mov	r1, r9
 8013560:	f7ec fe92 	bl	8000288 <__aeabi_dsub>
 8013564:	a372      	add	r3, pc, #456	; (adr r3, 8013730 <__ieee754_pow+0xa08>)
 8013566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801356a:	f7ed f845 	bl	80005f8 <__aeabi_dmul>
 801356e:	a372      	add	r3, pc, #456	; (adr r3, 8013738 <__ieee754_pow+0xa10>)
 8013570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013574:	4680      	mov	r8, r0
 8013576:	4689      	mov	r9, r1
 8013578:	4620      	mov	r0, r4
 801357a:	4629      	mov	r1, r5
 801357c:	f7ed f83c 	bl	80005f8 <__aeabi_dmul>
 8013580:	4602      	mov	r2, r0
 8013582:	460b      	mov	r3, r1
 8013584:	4640      	mov	r0, r8
 8013586:	4649      	mov	r1, r9
 8013588:	f7ec fe80 	bl	800028c <__adddf3>
 801358c:	4604      	mov	r4, r0
 801358e:	460d      	mov	r5, r1
 8013590:	4602      	mov	r2, r0
 8013592:	460b      	mov	r3, r1
 8013594:	4630      	mov	r0, r6
 8013596:	4639      	mov	r1, r7
 8013598:	f7ec fe78 	bl	800028c <__adddf3>
 801359c:	4632      	mov	r2, r6
 801359e:	463b      	mov	r3, r7
 80135a0:	4680      	mov	r8, r0
 80135a2:	4689      	mov	r9, r1
 80135a4:	f7ec fe70 	bl	8000288 <__aeabi_dsub>
 80135a8:	4602      	mov	r2, r0
 80135aa:	460b      	mov	r3, r1
 80135ac:	4620      	mov	r0, r4
 80135ae:	4629      	mov	r1, r5
 80135b0:	f7ec fe6a 	bl	8000288 <__aeabi_dsub>
 80135b4:	4642      	mov	r2, r8
 80135b6:	4606      	mov	r6, r0
 80135b8:	460f      	mov	r7, r1
 80135ba:	464b      	mov	r3, r9
 80135bc:	4640      	mov	r0, r8
 80135be:	4649      	mov	r1, r9
 80135c0:	f7ed f81a 	bl	80005f8 <__aeabi_dmul>
 80135c4:	a35e      	add	r3, pc, #376	; (adr r3, 8013740 <__ieee754_pow+0xa18>)
 80135c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ca:	4604      	mov	r4, r0
 80135cc:	460d      	mov	r5, r1
 80135ce:	f7ed f813 	bl	80005f8 <__aeabi_dmul>
 80135d2:	a35d      	add	r3, pc, #372	; (adr r3, 8013748 <__ieee754_pow+0xa20>)
 80135d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d8:	f7ec fe56 	bl	8000288 <__aeabi_dsub>
 80135dc:	4622      	mov	r2, r4
 80135de:	462b      	mov	r3, r5
 80135e0:	f7ed f80a 	bl	80005f8 <__aeabi_dmul>
 80135e4:	a35a      	add	r3, pc, #360	; (adr r3, 8013750 <__ieee754_pow+0xa28>)
 80135e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135ea:	f7ec fe4f 	bl	800028c <__adddf3>
 80135ee:	4622      	mov	r2, r4
 80135f0:	462b      	mov	r3, r5
 80135f2:	f7ed f801 	bl	80005f8 <__aeabi_dmul>
 80135f6:	a358      	add	r3, pc, #352	; (adr r3, 8013758 <__ieee754_pow+0xa30>)
 80135f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135fc:	f7ec fe44 	bl	8000288 <__aeabi_dsub>
 8013600:	4622      	mov	r2, r4
 8013602:	462b      	mov	r3, r5
 8013604:	f7ec fff8 	bl	80005f8 <__aeabi_dmul>
 8013608:	a355      	add	r3, pc, #340	; (adr r3, 8013760 <__ieee754_pow+0xa38>)
 801360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801360e:	f7ec fe3d 	bl	800028c <__adddf3>
 8013612:	4622      	mov	r2, r4
 8013614:	462b      	mov	r3, r5
 8013616:	f7ec ffef 	bl	80005f8 <__aeabi_dmul>
 801361a:	4602      	mov	r2, r0
 801361c:	460b      	mov	r3, r1
 801361e:	4640      	mov	r0, r8
 8013620:	4649      	mov	r1, r9
 8013622:	f7ec fe31 	bl	8000288 <__aeabi_dsub>
 8013626:	4604      	mov	r4, r0
 8013628:	460d      	mov	r5, r1
 801362a:	4602      	mov	r2, r0
 801362c:	460b      	mov	r3, r1
 801362e:	4640      	mov	r0, r8
 8013630:	4649      	mov	r1, r9
 8013632:	f7ec ffe1 	bl	80005f8 <__aeabi_dmul>
 8013636:	2200      	movs	r2, #0
 8013638:	ec41 0b19 	vmov	d9, r0, r1
 801363c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013640:	4620      	mov	r0, r4
 8013642:	4629      	mov	r1, r5
 8013644:	f7ec fe20 	bl	8000288 <__aeabi_dsub>
 8013648:	4602      	mov	r2, r0
 801364a:	460b      	mov	r3, r1
 801364c:	ec51 0b19 	vmov	r0, r1, d9
 8013650:	f7ed f8fc 	bl	800084c <__aeabi_ddiv>
 8013654:	4632      	mov	r2, r6
 8013656:	4604      	mov	r4, r0
 8013658:	460d      	mov	r5, r1
 801365a:	463b      	mov	r3, r7
 801365c:	4640      	mov	r0, r8
 801365e:	4649      	mov	r1, r9
 8013660:	f7ec ffca 	bl	80005f8 <__aeabi_dmul>
 8013664:	4632      	mov	r2, r6
 8013666:	463b      	mov	r3, r7
 8013668:	f7ec fe10 	bl	800028c <__adddf3>
 801366c:	4602      	mov	r2, r0
 801366e:	460b      	mov	r3, r1
 8013670:	4620      	mov	r0, r4
 8013672:	4629      	mov	r1, r5
 8013674:	f7ec fe08 	bl	8000288 <__aeabi_dsub>
 8013678:	4642      	mov	r2, r8
 801367a:	464b      	mov	r3, r9
 801367c:	f7ec fe04 	bl	8000288 <__aeabi_dsub>
 8013680:	460b      	mov	r3, r1
 8013682:	4602      	mov	r2, r0
 8013684:	493a      	ldr	r1, [pc, #232]	; (8013770 <__ieee754_pow+0xa48>)
 8013686:	2000      	movs	r0, #0
 8013688:	f7ec fdfe 	bl	8000288 <__aeabi_dsub>
 801368c:	ec41 0b10 	vmov	d0, r0, r1
 8013690:	ee10 3a90 	vmov	r3, s1
 8013694:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801369c:	da2b      	bge.n	80136f6 <__ieee754_pow+0x9ce>
 801369e:	4650      	mov	r0, sl
 80136a0:	f001 fa3a 	bl	8014b18 <scalbn>
 80136a4:	ec51 0b10 	vmov	r0, r1, d0
 80136a8:	ec53 2b18 	vmov	r2, r3, d8
 80136ac:	f7ff bbed 	b.w	8012e8a <__ieee754_pow+0x162>
 80136b0:	4b30      	ldr	r3, [pc, #192]	; (8013774 <__ieee754_pow+0xa4c>)
 80136b2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80136b6:	429e      	cmp	r6, r3
 80136b8:	f77f af0c 	ble.w	80134d4 <__ieee754_pow+0x7ac>
 80136bc:	4b2e      	ldr	r3, [pc, #184]	; (8013778 <__ieee754_pow+0xa50>)
 80136be:	440b      	add	r3, r1
 80136c0:	4303      	orrs	r3, r0
 80136c2:	d009      	beq.n	80136d8 <__ieee754_pow+0x9b0>
 80136c4:	ec51 0b18 	vmov	r0, r1, d8
 80136c8:	2200      	movs	r2, #0
 80136ca:	2300      	movs	r3, #0
 80136cc:	f7ed fa06 	bl	8000adc <__aeabi_dcmplt>
 80136d0:	3800      	subs	r0, #0
 80136d2:	bf18      	it	ne
 80136d4:	2001      	movne	r0, #1
 80136d6:	e447      	b.n	8012f68 <__ieee754_pow+0x240>
 80136d8:	4622      	mov	r2, r4
 80136da:	462b      	mov	r3, r5
 80136dc:	f7ec fdd4 	bl	8000288 <__aeabi_dsub>
 80136e0:	4642      	mov	r2, r8
 80136e2:	464b      	mov	r3, r9
 80136e4:	f7ed fa0e 	bl	8000b04 <__aeabi_dcmpge>
 80136e8:	2800      	cmp	r0, #0
 80136ea:	f43f aef3 	beq.w	80134d4 <__ieee754_pow+0x7ac>
 80136ee:	e7e9      	b.n	80136c4 <__ieee754_pow+0x99c>
 80136f0:	f04f 0a00 	mov.w	sl, #0
 80136f4:	e71a      	b.n	801352c <__ieee754_pow+0x804>
 80136f6:	ec51 0b10 	vmov	r0, r1, d0
 80136fa:	4619      	mov	r1, r3
 80136fc:	e7d4      	b.n	80136a8 <__ieee754_pow+0x980>
 80136fe:	491c      	ldr	r1, [pc, #112]	; (8013770 <__ieee754_pow+0xa48>)
 8013700:	2000      	movs	r0, #0
 8013702:	f7ff bb30 	b.w	8012d66 <__ieee754_pow+0x3e>
 8013706:	2000      	movs	r0, #0
 8013708:	2100      	movs	r1, #0
 801370a:	f7ff bb2c 	b.w	8012d66 <__ieee754_pow+0x3e>
 801370e:	4630      	mov	r0, r6
 8013710:	4639      	mov	r1, r7
 8013712:	f7ff bb28 	b.w	8012d66 <__ieee754_pow+0x3e>
 8013716:	9204      	str	r2, [sp, #16]
 8013718:	f7ff bb7a 	b.w	8012e10 <__ieee754_pow+0xe8>
 801371c:	2300      	movs	r3, #0
 801371e:	f7ff bb64 	b.w	8012dea <__ieee754_pow+0xc2>
 8013722:	bf00      	nop
 8013724:	f3af 8000 	nop.w
 8013728:	00000000 	.word	0x00000000
 801372c:	3fe62e43 	.word	0x3fe62e43
 8013730:	fefa39ef 	.word	0xfefa39ef
 8013734:	3fe62e42 	.word	0x3fe62e42
 8013738:	0ca86c39 	.word	0x0ca86c39
 801373c:	be205c61 	.word	0xbe205c61
 8013740:	72bea4d0 	.word	0x72bea4d0
 8013744:	3e663769 	.word	0x3e663769
 8013748:	c5d26bf1 	.word	0xc5d26bf1
 801374c:	3ebbbd41 	.word	0x3ebbbd41
 8013750:	af25de2c 	.word	0xaf25de2c
 8013754:	3f11566a 	.word	0x3f11566a
 8013758:	16bebd93 	.word	0x16bebd93
 801375c:	3f66c16c 	.word	0x3f66c16c
 8013760:	5555553e 	.word	0x5555553e
 8013764:	3fc55555 	.word	0x3fc55555
 8013768:	3fe00000 	.word	0x3fe00000
 801376c:	000fffff 	.word	0x000fffff
 8013770:	3ff00000 	.word	0x3ff00000
 8013774:	4090cbff 	.word	0x4090cbff
 8013778:	3f6f3400 	.word	0x3f6f3400
 801377c:	652b82fe 	.word	0x652b82fe
 8013780:	3c971547 	.word	0x3c971547

08013784 <__ieee754_sqrt>:
 8013784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013788:	ec55 4b10 	vmov	r4, r5, d0
 801378c:	4e55      	ldr	r6, [pc, #340]	; (80138e4 <__ieee754_sqrt+0x160>)
 801378e:	43ae      	bics	r6, r5
 8013790:	ee10 0a10 	vmov	r0, s0
 8013794:	ee10 3a10 	vmov	r3, s0
 8013798:	462a      	mov	r2, r5
 801379a:	4629      	mov	r1, r5
 801379c:	d110      	bne.n	80137c0 <__ieee754_sqrt+0x3c>
 801379e:	ee10 2a10 	vmov	r2, s0
 80137a2:	462b      	mov	r3, r5
 80137a4:	f7ec ff28 	bl	80005f8 <__aeabi_dmul>
 80137a8:	4602      	mov	r2, r0
 80137aa:	460b      	mov	r3, r1
 80137ac:	4620      	mov	r0, r4
 80137ae:	4629      	mov	r1, r5
 80137b0:	f7ec fd6c 	bl	800028c <__adddf3>
 80137b4:	4604      	mov	r4, r0
 80137b6:	460d      	mov	r5, r1
 80137b8:	ec45 4b10 	vmov	d0, r4, r5
 80137bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137c0:	2d00      	cmp	r5, #0
 80137c2:	dc10      	bgt.n	80137e6 <__ieee754_sqrt+0x62>
 80137c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80137c8:	4330      	orrs	r0, r6
 80137ca:	d0f5      	beq.n	80137b8 <__ieee754_sqrt+0x34>
 80137cc:	b15d      	cbz	r5, 80137e6 <__ieee754_sqrt+0x62>
 80137ce:	ee10 2a10 	vmov	r2, s0
 80137d2:	462b      	mov	r3, r5
 80137d4:	ee10 0a10 	vmov	r0, s0
 80137d8:	f7ec fd56 	bl	8000288 <__aeabi_dsub>
 80137dc:	4602      	mov	r2, r0
 80137de:	460b      	mov	r3, r1
 80137e0:	f7ed f834 	bl	800084c <__aeabi_ddiv>
 80137e4:	e7e6      	b.n	80137b4 <__ieee754_sqrt+0x30>
 80137e6:	1512      	asrs	r2, r2, #20
 80137e8:	d074      	beq.n	80138d4 <__ieee754_sqrt+0x150>
 80137ea:	07d4      	lsls	r4, r2, #31
 80137ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80137f0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80137f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80137f8:	bf5e      	ittt	pl
 80137fa:	0fda      	lsrpl	r2, r3, #31
 80137fc:	005b      	lslpl	r3, r3, #1
 80137fe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8013802:	2400      	movs	r4, #0
 8013804:	0fda      	lsrs	r2, r3, #31
 8013806:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801380a:	107f      	asrs	r7, r7, #1
 801380c:	005b      	lsls	r3, r3, #1
 801380e:	2516      	movs	r5, #22
 8013810:	4620      	mov	r0, r4
 8013812:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013816:	1886      	adds	r6, r0, r2
 8013818:	428e      	cmp	r6, r1
 801381a:	bfde      	ittt	le
 801381c:	1b89      	suble	r1, r1, r6
 801381e:	18b0      	addle	r0, r6, r2
 8013820:	18a4      	addle	r4, r4, r2
 8013822:	0049      	lsls	r1, r1, #1
 8013824:	3d01      	subs	r5, #1
 8013826:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801382a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801382e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013832:	d1f0      	bne.n	8013816 <__ieee754_sqrt+0x92>
 8013834:	462a      	mov	r2, r5
 8013836:	f04f 0e20 	mov.w	lr, #32
 801383a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801383e:	4281      	cmp	r1, r0
 8013840:	eb06 0c05 	add.w	ip, r6, r5
 8013844:	dc02      	bgt.n	801384c <__ieee754_sqrt+0xc8>
 8013846:	d113      	bne.n	8013870 <__ieee754_sqrt+0xec>
 8013848:	459c      	cmp	ip, r3
 801384a:	d811      	bhi.n	8013870 <__ieee754_sqrt+0xec>
 801384c:	f1bc 0f00 	cmp.w	ip, #0
 8013850:	eb0c 0506 	add.w	r5, ip, r6
 8013854:	da43      	bge.n	80138de <__ieee754_sqrt+0x15a>
 8013856:	2d00      	cmp	r5, #0
 8013858:	db41      	blt.n	80138de <__ieee754_sqrt+0x15a>
 801385a:	f100 0801 	add.w	r8, r0, #1
 801385e:	1a09      	subs	r1, r1, r0
 8013860:	459c      	cmp	ip, r3
 8013862:	bf88      	it	hi
 8013864:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8013868:	eba3 030c 	sub.w	r3, r3, ip
 801386c:	4432      	add	r2, r6
 801386e:	4640      	mov	r0, r8
 8013870:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8013874:	f1be 0e01 	subs.w	lr, lr, #1
 8013878:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801387c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013880:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013884:	d1db      	bne.n	801383e <__ieee754_sqrt+0xba>
 8013886:	430b      	orrs	r3, r1
 8013888:	d006      	beq.n	8013898 <__ieee754_sqrt+0x114>
 801388a:	1c50      	adds	r0, r2, #1
 801388c:	bf13      	iteet	ne
 801388e:	3201      	addne	r2, #1
 8013890:	3401      	addeq	r4, #1
 8013892:	4672      	moveq	r2, lr
 8013894:	f022 0201 	bicne.w	r2, r2, #1
 8013898:	1063      	asrs	r3, r4, #1
 801389a:	0852      	lsrs	r2, r2, #1
 801389c:	07e1      	lsls	r1, r4, #31
 801389e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80138a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80138a6:	bf48      	it	mi
 80138a8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80138ac:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80138b0:	4614      	mov	r4, r2
 80138b2:	e781      	b.n	80137b8 <__ieee754_sqrt+0x34>
 80138b4:	0ad9      	lsrs	r1, r3, #11
 80138b6:	3815      	subs	r0, #21
 80138b8:	055b      	lsls	r3, r3, #21
 80138ba:	2900      	cmp	r1, #0
 80138bc:	d0fa      	beq.n	80138b4 <__ieee754_sqrt+0x130>
 80138be:	02cd      	lsls	r5, r1, #11
 80138c0:	d50a      	bpl.n	80138d8 <__ieee754_sqrt+0x154>
 80138c2:	f1c2 0420 	rsb	r4, r2, #32
 80138c6:	fa23 f404 	lsr.w	r4, r3, r4
 80138ca:	1e55      	subs	r5, r2, #1
 80138cc:	4093      	lsls	r3, r2
 80138ce:	4321      	orrs	r1, r4
 80138d0:	1b42      	subs	r2, r0, r5
 80138d2:	e78a      	b.n	80137ea <__ieee754_sqrt+0x66>
 80138d4:	4610      	mov	r0, r2
 80138d6:	e7f0      	b.n	80138ba <__ieee754_sqrt+0x136>
 80138d8:	0049      	lsls	r1, r1, #1
 80138da:	3201      	adds	r2, #1
 80138dc:	e7ef      	b.n	80138be <__ieee754_sqrt+0x13a>
 80138de:	4680      	mov	r8, r0
 80138e0:	e7bd      	b.n	801385e <__ieee754_sqrt+0xda>
 80138e2:	bf00      	nop
 80138e4:	7ff00000 	.word	0x7ff00000

080138e8 <__ieee754_asinf>:
 80138e8:	b538      	push	{r3, r4, r5, lr}
 80138ea:	ee10 5a10 	vmov	r5, s0
 80138ee:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80138f2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80138f6:	ed2d 8b04 	vpush	{d8-d9}
 80138fa:	d10c      	bne.n	8013916 <__ieee754_asinf+0x2e>
 80138fc:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8013a74 <__ieee754_asinf+0x18c>
 8013900:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8013a78 <__ieee754_asinf+0x190>
 8013904:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013908:	eee0 7a07 	vfma.f32	s15, s0, s14
 801390c:	eeb0 0a67 	vmov.f32	s0, s15
 8013910:	ecbd 8b04 	vpop	{d8-d9}
 8013914:	bd38      	pop	{r3, r4, r5, pc}
 8013916:	dd04      	ble.n	8013922 <__ieee754_asinf+0x3a>
 8013918:	ee70 7a40 	vsub.f32	s15, s0, s0
 801391c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013920:	e7f6      	b.n	8013910 <__ieee754_asinf+0x28>
 8013922:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013926:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801392a:	da0b      	bge.n	8013944 <__ieee754_asinf+0x5c>
 801392c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8013930:	da52      	bge.n	80139d8 <__ieee754_asinf+0xf0>
 8013932:	eddf 7a52 	vldr	s15, [pc, #328]	; 8013a7c <__ieee754_asinf+0x194>
 8013936:	ee70 7a27 	vadd.f32	s15, s0, s15
 801393a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801393e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013942:	dce5      	bgt.n	8013910 <__ieee754_asinf+0x28>
 8013944:	f001 fa42 	bl	8014dcc <fabsf>
 8013948:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801394c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8013950:	ee20 8a08 	vmul.f32	s16, s0, s16
 8013954:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8013a80 <__ieee754_asinf+0x198>
 8013958:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8013a84 <__ieee754_asinf+0x19c>
 801395c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8013a88 <__ieee754_asinf+0x1a0>
 8013960:	eea8 7a27 	vfma.f32	s14, s16, s15
 8013964:	eddf 7a49 	vldr	s15, [pc, #292]	; 8013a8c <__ieee754_asinf+0x1a4>
 8013968:	eee7 7a08 	vfma.f32	s15, s14, s16
 801396c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8013a90 <__ieee754_asinf+0x1a8>
 8013970:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013974:	eddf 7a47 	vldr	s15, [pc, #284]	; 8013a94 <__ieee754_asinf+0x1ac>
 8013978:	eee7 7a08 	vfma.f32	s15, s14, s16
 801397c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8013a98 <__ieee754_asinf+0x1b0>
 8013980:	eea7 9a88 	vfma.f32	s18, s15, s16
 8013984:	eddf 7a45 	vldr	s15, [pc, #276]	; 8013a9c <__ieee754_asinf+0x1b4>
 8013988:	eee8 7a07 	vfma.f32	s15, s16, s14
 801398c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8013aa0 <__ieee754_asinf+0x1b8>
 8013990:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013994:	eddf 7a43 	vldr	s15, [pc, #268]	; 8013aa4 <__ieee754_asinf+0x1bc>
 8013998:	eee7 7a08 	vfma.f32	s15, s14, s16
 801399c:	eeb0 0a48 	vmov.f32	s0, s16
 80139a0:	eee7 8a88 	vfma.f32	s17, s15, s16
 80139a4:	f000 fd30 	bl	8014408 <__ieee754_sqrtf>
 80139a8:	4b3f      	ldr	r3, [pc, #252]	; (8013aa8 <__ieee754_asinf+0x1c0>)
 80139aa:	ee29 9a08 	vmul.f32	s18, s18, s16
 80139ae:	429c      	cmp	r4, r3
 80139b0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80139b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80139b8:	dd3d      	ble.n	8013a36 <__ieee754_asinf+0x14e>
 80139ba:	eea0 0a06 	vfma.f32	s0, s0, s12
 80139be:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8013aac <__ieee754_asinf+0x1c4>
 80139c2:	eee0 7a26 	vfma.f32	s15, s0, s13
 80139c6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8013a78 <__ieee754_asinf+0x190>
 80139ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80139ce:	2d00      	cmp	r5, #0
 80139d0:	bfd8      	it	le
 80139d2:	eeb1 0a40 	vnegle.f32	s0, s0
 80139d6:	e79b      	b.n	8013910 <__ieee754_asinf+0x28>
 80139d8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80139dc:	eddf 6a28 	vldr	s13, [pc, #160]	; 8013a80 <__ieee754_asinf+0x198>
 80139e0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8013a84 <__ieee754_asinf+0x19c>
 80139e4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8013a98 <__ieee754_asinf+0x1b0>
 80139e8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80139ec:	eddf 6a27 	vldr	s13, [pc, #156]	; 8013a8c <__ieee754_asinf+0x1a4>
 80139f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80139f4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8013a90 <__ieee754_asinf+0x1a8>
 80139f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80139fc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8013a94 <__ieee754_asinf+0x1ac>
 8013a00:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013a04:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8013a88 <__ieee754_asinf+0x1a0>
 8013a08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013a0c:	eddf 6a23 	vldr	s13, [pc, #140]	; 8013a9c <__ieee754_asinf+0x1b4>
 8013a10:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013a14:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8013aa0 <__ieee754_asinf+0x1b8>
 8013a18:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013a1c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8013aa4 <__ieee754_asinf+0x1bc>
 8013a20:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013a24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a28:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8013a2c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013a30:	eea0 0a27 	vfma.f32	s0, s0, s15
 8013a34:	e76c      	b.n	8013910 <__ieee754_asinf+0x28>
 8013a36:	ee10 3a10 	vmov	r3, s0
 8013a3a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013a3e:	f023 030f 	bic.w	r3, r3, #15
 8013a42:	ee07 3a10 	vmov	s14, r3
 8013a46:	eea7 8a47 	vfms.f32	s16, s14, s14
 8013a4a:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013a4e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013a52:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8013a56:	eddf 7a07 	vldr	s15, [pc, #28]	; 8013a74 <__ieee754_asinf+0x18c>
 8013a5a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8013a5e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8013a62:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8013ab0 <__ieee754_asinf+0x1c8>
 8013a66:	eeb0 6a40 	vmov.f32	s12, s0
 8013a6a:	eea7 6a66 	vfms.f32	s12, s14, s13
 8013a6e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013a72:	e7aa      	b.n	80139ca <__ieee754_asinf+0xe2>
 8013a74:	b33bbd2e 	.word	0xb33bbd2e
 8013a78:	3fc90fdb 	.word	0x3fc90fdb
 8013a7c:	7149f2ca 	.word	0x7149f2ca
 8013a80:	3811ef08 	.word	0x3811ef08
 8013a84:	3a4f7f04 	.word	0x3a4f7f04
 8013a88:	3e2aaaab 	.word	0x3e2aaaab
 8013a8c:	bd241146 	.word	0xbd241146
 8013a90:	3e4e0aa8 	.word	0x3e4e0aa8
 8013a94:	bea6b090 	.word	0xbea6b090
 8013a98:	3d9dc62e 	.word	0x3d9dc62e
 8013a9c:	bf303361 	.word	0xbf303361
 8013aa0:	4001572d 	.word	0x4001572d
 8013aa4:	c019d139 	.word	0xc019d139
 8013aa8:	3f799999 	.word	0x3f799999
 8013aac:	333bbd2e 	.word	0x333bbd2e
 8013ab0:	3f490fdb 	.word	0x3f490fdb

08013ab4 <__ieee754_atan2f>:
 8013ab4:	ee10 2a90 	vmov	r2, s1
 8013ab8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013abc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013ac0:	b510      	push	{r4, lr}
 8013ac2:	eef0 7a40 	vmov.f32	s15, s0
 8013ac6:	dc06      	bgt.n	8013ad6 <__ieee754_atan2f+0x22>
 8013ac8:	ee10 0a10 	vmov	r0, s0
 8013acc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8013ad0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013ad4:	dd04      	ble.n	8013ae0 <__ieee754_atan2f+0x2c>
 8013ad6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013ada:	eeb0 0a67 	vmov.f32	s0, s15
 8013ade:	bd10      	pop	{r4, pc}
 8013ae0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013ae4:	d103      	bne.n	8013aee <__ieee754_atan2f+0x3a>
 8013ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013aea:	f001 b89b 	b.w	8014c24 <atanf>
 8013aee:	1794      	asrs	r4, r2, #30
 8013af0:	f004 0402 	and.w	r4, r4, #2
 8013af4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8013af8:	b943      	cbnz	r3, 8013b0c <__ieee754_atan2f+0x58>
 8013afa:	2c02      	cmp	r4, #2
 8013afc:	d05e      	beq.n	8013bbc <__ieee754_atan2f+0x108>
 8013afe:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013bd0 <__ieee754_atan2f+0x11c>
 8013b02:	2c03      	cmp	r4, #3
 8013b04:	bf08      	it	eq
 8013b06:	eef0 7a47 	vmoveq.f32	s15, s14
 8013b0a:	e7e6      	b.n	8013ada <__ieee754_atan2f+0x26>
 8013b0c:	b941      	cbnz	r1, 8013b20 <__ieee754_atan2f+0x6c>
 8013b0e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8013bd4 <__ieee754_atan2f+0x120>
 8013b12:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8013bd8 <__ieee754_atan2f+0x124>
 8013b16:	2800      	cmp	r0, #0
 8013b18:	bfb8      	it	lt
 8013b1a:	eef0 7a40 	vmovlt.f32	s15, s0
 8013b1e:	e7dc      	b.n	8013ada <__ieee754_atan2f+0x26>
 8013b20:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013b24:	d110      	bne.n	8013b48 <__ieee754_atan2f+0x94>
 8013b26:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013b2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8013b2e:	d107      	bne.n	8013b40 <__ieee754_atan2f+0x8c>
 8013b30:	2c02      	cmp	r4, #2
 8013b32:	d846      	bhi.n	8013bc2 <__ieee754_atan2f+0x10e>
 8013b34:	4b29      	ldr	r3, [pc, #164]	; (8013bdc <__ieee754_atan2f+0x128>)
 8013b36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013b3a:	edd4 7a00 	vldr	s15, [r4]
 8013b3e:	e7cc      	b.n	8013ada <__ieee754_atan2f+0x26>
 8013b40:	2c02      	cmp	r4, #2
 8013b42:	d841      	bhi.n	8013bc8 <__ieee754_atan2f+0x114>
 8013b44:	4b26      	ldr	r3, [pc, #152]	; (8013be0 <__ieee754_atan2f+0x12c>)
 8013b46:	e7f6      	b.n	8013b36 <__ieee754_atan2f+0x82>
 8013b48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013b4c:	d0df      	beq.n	8013b0e <__ieee754_atan2f+0x5a>
 8013b4e:	1a5b      	subs	r3, r3, r1
 8013b50:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8013b54:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8013b58:	da1a      	bge.n	8013b90 <__ieee754_atan2f+0xdc>
 8013b5a:	2a00      	cmp	r2, #0
 8013b5c:	da01      	bge.n	8013b62 <__ieee754_atan2f+0xae>
 8013b5e:	313c      	adds	r1, #60	; 0x3c
 8013b60:	db19      	blt.n	8013b96 <__ieee754_atan2f+0xe2>
 8013b62:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8013b66:	f001 f931 	bl	8014dcc <fabsf>
 8013b6a:	f001 f85b 	bl	8014c24 <atanf>
 8013b6e:	eef0 7a40 	vmov.f32	s15, s0
 8013b72:	2c01      	cmp	r4, #1
 8013b74:	d012      	beq.n	8013b9c <__ieee754_atan2f+0xe8>
 8013b76:	2c02      	cmp	r4, #2
 8013b78:	d017      	beq.n	8013baa <__ieee754_atan2f+0xf6>
 8013b7a:	2c00      	cmp	r4, #0
 8013b7c:	d0ad      	beq.n	8013ada <__ieee754_atan2f+0x26>
 8013b7e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8013be4 <__ieee754_atan2f+0x130>
 8013b82:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013b86:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8013be8 <__ieee754_atan2f+0x134>
 8013b8a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013b8e:	e7a4      	b.n	8013ada <__ieee754_atan2f+0x26>
 8013b90:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013bd4 <__ieee754_atan2f+0x120>
 8013b94:	e7ed      	b.n	8013b72 <__ieee754_atan2f+0xbe>
 8013b96:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013bec <__ieee754_atan2f+0x138>
 8013b9a:	e7ea      	b.n	8013b72 <__ieee754_atan2f+0xbe>
 8013b9c:	ee17 3a90 	vmov	r3, s15
 8013ba0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013ba4:	ee07 3a90 	vmov	s15, r3
 8013ba8:	e797      	b.n	8013ada <__ieee754_atan2f+0x26>
 8013baa:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013be4 <__ieee754_atan2f+0x130>
 8013bae:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013bb2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8013be8 <__ieee754_atan2f+0x134>
 8013bb6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013bba:	e78e      	b.n	8013ada <__ieee754_atan2f+0x26>
 8013bbc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8013be8 <__ieee754_atan2f+0x134>
 8013bc0:	e78b      	b.n	8013ada <__ieee754_atan2f+0x26>
 8013bc2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013bf0 <__ieee754_atan2f+0x13c>
 8013bc6:	e788      	b.n	8013ada <__ieee754_atan2f+0x26>
 8013bc8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013bec <__ieee754_atan2f+0x138>
 8013bcc:	e785      	b.n	8013ada <__ieee754_atan2f+0x26>
 8013bce:	bf00      	nop
 8013bd0:	c0490fdb 	.word	0xc0490fdb
 8013bd4:	3fc90fdb 	.word	0x3fc90fdb
 8013bd8:	bfc90fdb 	.word	0xbfc90fdb
 8013bdc:	080154b0 	.word	0x080154b0
 8013be0:	080154bc 	.word	0x080154bc
 8013be4:	33bbbd2e 	.word	0x33bbbd2e
 8013be8:	40490fdb 	.word	0x40490fdb
 8013bec:	00000000 	.word	0x00000000
 8013bf0:	3f490fdb 	.word	0x3f490fdb

08013bf4 <__ieee754_powf>:
 8013bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bf8:	ee10 4a90 	vmov	r4, s1
 8013bfc:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8013c00:	ed2d 8b02 	vpush	{d8}
 8013c04:	ee10 6a10 	vmov	r6, s0
 8013c08:	eeb0 8a40 	vmov.f32	s16, s0
 8013c0c:	eef0 8a60 	vmov.f32	s17, s1
 8013c10:	d10c      	bne.n	8013c2c <__ieee754_powf+0x38>
 8013c12:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8013c16:	0076      	lsls	r6, r6, #1
 8013c18:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8013c1c:	f240 8296 	bls.w	801414c <__ieee754_powf+0x558>
 8013c20:	ee38 0a28 	vadd.f32	s0, s16, s17
 8013c24:	ecbd 8b02 	vpop	{d8}
 8013c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c2c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8013c30:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013c34:	dcf4      	bgt.n	8013c20 <__ieee754_powf+0x2c>
 8013c36:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8013c3a:	dd08      	ble.n	8013c4e <__ieee754_powf+0x5a>
 8013c3c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8013c40:	d1ee      	bne.n	8013c20 <__ieee754_powf+0x2c>
 8013c42:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8013c46:	0064      	lsls	r4, r4, #1
 8013c48:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8013c4c:	e7e6      	b.n	8013c1c <__ieee754_powf+0x28>
 8013c4e:	2e00      	cmp	r6, #0
 8013c50:	da20      	bge.n	8013c94 <__ieee754_powf+0xa0>
 8013c52:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8013c56:	da2d      	bge.n	8013cb4 <__ieee754_powf+0xc0>
 8013c58:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8013c5c:	f2c0 827f 	blt.w	801415e <__ieee754_powf+0x56a>
 8013c60:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8013c64:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8013c68:	fa48 f703 	asr.w	r7, r8, r3
 8013c6c:	fa07 f303 	lsl.w	r3, r7, r3
 8013c70:	4543      	cmp	r3, r8
 8013c72:	f040 8274 	bne.w	801415e <__ieee754_powf+0x56a>
 8013c76:	f007 0701 	and.w	r7, r7, #1
 8013c7a:	f1c7 0702 	rsb	r7, r7, #2
 8013c7e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8013c82:	d11f      	bne.n	8013cc4 <__ieee754_powf+0xd0>
 8013c84:	2c00      	cmp	r4, #0
 8013c86:	f280 8267 	bge.w	8014158 <__ieee754_powf+0x564>
 8013c8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013c8e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8013c92:	e7c7      	b.n	8013c24 <__ieee754_powf+0x30>
 8013c94:	2700      	movs	r7, #0
 8013c96:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8013c9a:	d1f0      	bne.n	8013c7e <__ieee754_powf+0x8a>
 8013c9c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8013ca0:	f000 8254 	beq.w	801414c <__ieee754_powf+0x558>
 8013ca4:	dd08      	ble.n	8013cb8 <__ieee754_powf+0xc4>
 8013ca6:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8013fb0 <__ieee754_powf+0x3bc>
 8013caa:	2c00      	cmp	r4, #0
 8013cac:	bfa8      	it	ge
 8013cae:	eeb0 0a68 	vmovge.f32	s0, s17
 8013cb2:	e7b7      	b.n	8013c24 <__ieee754_powf+0x30>
 8013cb4:	2702      	movs	r7, #2
 8013cb6:	e7ee      	b.n	8013c96 <__ieee754_powf+0xa2>
 8013cb8:	2c00      	cmp	r4, #0
 8013cba:	f280 824a 	bge.w	8014152 <__ieee754_powf+0x55e>
 8013cbe:	eeb1 0a68 	vneg.f32	s0, s17
 8013cc2:	e7af      	b.n	8013c24 <__ieee754_powf+0x30>
 8013cc4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8013cc8:	d102      	bne.n	8013cd0 <__ieee754_powf+0xdc>
 8013cca:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013cce:	e7a9      	b.n	8013c24 <__ieee754_powf+0x30>
 8013cd0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013cd4:	eeb0 0a48 	vmov.f32	s0, s16
 8013cd8:	d107      	bne.n	8013cea <__ieee754_powf+0xf6>
 8013cda:	2e00      	cmp	r6, #0
 8013cdc:	db05      	blt.n	8013cea <__ieee754_powf+0xf6>
 8013cde:	ecbd 8b02 	vpop	{d8}
 8013ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ce6:	f000 bb8f 	b.w	8014408 <__ieee754_sqrtf>
 8013cea:	f001 f86f 	bl	8014dcc <fabsf>
 8013cee:	b125      	cbz	r5, 8013cfa <__ieee754_powf+0x106>
 8013cf0:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8013cf4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013cf8:	d116      	bne.n	8013d28 <__ieee754_powf+0x134>
 8013cfa:	2c00      	cmp	r4, #0
 8013cfc:	bfbc      	itt	lt
 8013cfe:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8013d02:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8013d06:	2e00      	cmp	r6, #0
 8013d08:	da8c      	bge.n	8013c24 <__ieee754_powf+0x30>
 8013d0a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8013d0e:	ea55 0307 	orrs.w	r3, r5, r7
 8013d12:	d104      	bne.n	8013d1e <__ieee754_powf+0x12a>
 8013d14:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013d18:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013d1c:	e782      	b.n	8013c24 <__ieee754_powf+0x30>
 8013d1e:	2f01      	cmp	r7, #1
 8013d20:	d180      	bne.n	8013c24 <__ieee754_powf+0x30>
 8013d22:	eeb1 0a40 	vneg.f32	s0, s0
 8013d26:	e77d      	b.n	8013c24 <__ieee754_powf+0x30>
 8013d28:	0ff0      	lsrs	r0, r6, #31
 8013d2a:	3801      	subs	r0, #1
 8013d2c:	ea57 0300 	orrs.w	r3, r7, r0
 8013d30:	d104      	bne.n	8013d3c <__ieee754_powf+0x148>
 8013d32:	ee38 8a48 	vsub.f32	s16, s16, s16
 8013d36:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013d3a:	e773      	b.n	8013c24 <__ieee754_powf+0x30>
 8013d3c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8013d40:	dd74      	ble.n	8013e2c <__ieee754_powf+0x238>
 8013d42:	4b9c      	ldr	r3, [pc, #624]	; (8013fb4 <__ieee754_powf+0x3c0>)
 8013d44:	429d      	cmp	r5, r3
 8013d46:	dc08      	bgt.n	8013d5a <__ieee754_powf+0x166>
 8013d48:	2c00      	cmp	r4, #0
 8013d4a:	da0b      	bge.n	8013d64 <__ieee754_powf+0x170>
 8013d4c:	2000      	movs	r0, #0
 8013d4e:	ecbd 8b02 	vpop	{d8}
 8013d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d56:	f000 bec5 	b.w	8014ae4 <__math_oflowf>
 8013d5a:	4b97      	ldr	r3, [pc, #604]	; (8013fb8 <__ieee754_powf+0x3c4>)
 8013d5c:	429d      	cmp	r5, r3
 8013d5e:	dd08      	ble.n	8013d72 <__ieee754_powf+0x17e>
 8013d60:	2c00      	cmp	r4, #0
 8013d62:	dcf3      	bgt.n	8013d4c <__ieee754_powf+0x158>
 8013d64:	2000      	movs	r0, #0
 8013d66:	ecbd 8b02 	vpop	{d8}
 8013d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d6e:	f000 beb3 	b.w	8014ad8 <__math_uflowf>
 8013d72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013d76:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013d7a:	eddf 6a90 	vldr	s13, [pc, #576]	; 8013fbc <__ieee754_powf+0x3c8>
 8013d7e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8013d82:	eee0 6a67 	vfms.f32	s13, s0, s15
 8013d86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013d8a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8013d8e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013d96:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8013fc0 <__ieee754_powf+0x3cc>
 8013d9a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8013d9e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8013fc4 <__ieee754_powf+0x3d0>
 8013da2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013da6:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8013fc8 <__ieee754_powf+0x3d4>
 8013daa:	eef0 6a67 	vmov.f32	s13, s15
 8013dae:	eee0 6a07 	vfma.f32	s13, s0, s14
 8013db2:	ee16 3a90 	vmov	r3, s13
 8013db6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013dba:	f023 030f 	bic.w	r3, r3, #15
 8013dbe:	ee00 3a90 	vmov	s1, r3
 8013dc2:	eee0 0a47 	vfms.f32	s1, s0, s14
 8013dc6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013dca:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8013dce:	f024 040f 	bic.w	r4, r4, #15
 8013dd2:	ee07 4a10 	vmov	s14, r4
 8013dd6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8013dda:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013dde:	ee07 3a90 	vmov	s15, r3
 8013de2:	eee7 0a27 	vfma.f32	s1, s14, s15
 8013de6:	3f01      	subs	r7, #1
 8013de8:	ea57 0200 	orrs.w	r2, r7, r0
 8013dec:	ee07 4a10 	vmov	s14, r4
 8013df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013df4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013df8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8013dfc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013e00:	ee17 4a10 	vmov	r4, s14
 8013e04:	bf08      	it	eq
 8013e06:	eeb0 8a40 	vmoveq.f32	s16, s0
 8013e0a:	2c00      	cmp	r4, #0
 8013e0c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013e10:	f340 817e 	ble.w	8014110 <__ieee754_powf+0x51c>
 8013e14:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8013e18:	f340 80f8 	ble.w	801400c <__ieee754_powf+0x418>
 8013e1c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e24:	bf4c      	ite	mi
 8013e26:	2001      	movmi	r0, #1
 8013e28:	2000      	movpl	r0, #0
 8013e2a:	e790      	b.n	8013d4e <__ieee754_powf+0x15a>
 8013e2c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8013e30:	bf01      	itttt	eq
 8013e32:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8013fcc <__ieee754_powf+0x3d8>
 8013e36:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8013e3a:	f06f 0217 	mvneq.w	r2, #23
 8013e3e:	ee17 5a90 	vmoveq	r5, s15
 8013e42:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8013e46:	bf18      	it	ne
 8013e48:	2200      	movne	r2, #0
 8013e4a:	3b7f      	subs	r3, #127	; 0x7f
 8013e4c:	4413      	add	r3, r2
 8013e4e:	4a60      	ldr	r2, [pc, #384]	; (8013fd0 <__ieee754_powf+0x3dc>)
 8013e50:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8013e54:	4295      	cmp	r5, r2
 8013e56:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8013e5a:	dd06      	ble.n	8013e6a <__ieee754_powf+0x276>
 8013e5c:	4a5d      	ldr	r2, [pc, #372]	; (8013fd4 <__ieee754_powf+0x3e0>)
 8013e5e:	4295      	cmp	r5, r2
 8013e60:	f340 80a4 	ble.w	8013fac <__ieee754_powf+0x3b8>
 8013e64:	3301      	adds	r3, #1
 8013e66:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013e6a:	2500      	movs	r5, #0
 8013e6c:	4a5a      	ldr	r2, [pc, #360]	; (8013fd8 <__ieee754_powf+0x3e4>)
 8013e6e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8013e72:	ee07 1a90 	vmov	s15, r1
 8013e76:	ed92 7a00 	vldr	s14, [r2]
 8013e7a:	4a58      	ldr	r2, [pc, #352]	; (8013fdc <__ieee754_powf+0x3e8>)
 8013e7c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8013e80:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013e84:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8013e88:	1049      	asrs	r1, r1, #1
 8013e8a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8013e8e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8013e92:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8013e96:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8013e9a:	ee06 1a10 	vmov	s12, r1
 8013e9e:	ee65 4a26 	vmul.f32	s9, s10, s13
 8013ea2:	ee36 7a47 	vsub.f32	s14, s12, s14
 8013ea6:	ee14 6a90 	vmov	r6, s9
 8013eaa:	4016      	ands	r6, r2
 8013eac:	ee05 6a90 	vmov	s11, r6
 8013eb0:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8013eb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013eb8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013fe0 <__ieee754_powf+0x3ec>
 8013ebc:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8013ec0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8013ec4:	ee25 6a26 	vmul.f32	s12, s10, s13
 8013ec8:	eddf 6a46 	vldr	s13, [pc, #280]	; 8013fe4 <__ieee754_powf+0x3f0>
 8013ecc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013ed0:	eddf 6a45 	vldr	s13, [pc, #276]	; 8013fe8 <__ieee754_powf+0x3f4>
 8013ed4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013ed8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013fbc <__ieee754_powf+0x3c8>
 8013edc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013ee0:	eddf 6a42 	vldr	s13, [pc, #264]	; 8013fec <__ieee754_powf+0x3f8>
 8013ee4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013ee8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8013ff0 <__ieee754_powf+0x3fc>
 8013eec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013ef0:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8013ef4:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8013ef8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013efc:	eee5 6a07 	vfma.f32	s13, s10, s14
 8013f00:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8013f04:	eef0 7a45 	vmov.f32	s15, s10
 8013f08:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8013f0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f10:	ee17 1a90 	vmov	r1, s15
 8013f14:	4011      	ands	r1, r2
 8013f16:	ee07 1a90 	vmov	s15, r1
 8013f1a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8013f1e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8013f22:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013f26:	ee27 7a24 	vmul.f32	s14, s14, s9
 8013f2a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013f2e:	eeb0 6a47 	vmov.f32	s12, s14
 8013f32:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8013f36:	ee16 1a10 	vmov	r1, s12
 8013f3a:	4011      	ands	r1, r2
 8013f3c:	ee06 1a90 	vmov	s13, r1
 8013f40:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8013f44:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013ff4 <__ieee754_powf+0x400>
 8013f48:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8013ff8 <__ieee754_powf+0x404>
 8013f4c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013f50:	ee06 1a10 	vmov	s12, r1
 8013f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013f58:	eddf 7a28 	vldr	s15, [pc, #160]	; 8013ffc <__ieee754_powf+0x408>
 8013f5c:	4928      	ldr	r1, [pc, #160]	; (8014000 <__ieee754_powf+0x40c>)
 8013f5e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013f62:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8013f66:	edd1 7a00 	vldr	s15, [r1]
 8013f6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013f6e:	ee07 3a90 	vmov	s15, r3
 8013f72:	4b24      	ldr	r3, [pc, #144]	; (8014004 <__ieee754_powf+0x410>)
 8013f74:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013f78:	eef0 7a47 	vmov.f32	s15, s14
 8013f7c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013f80:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8013f84:	edd5 0a00 	vldr	s1, [r5]
 8013f88:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f90:	ee17 3a90 	vmov	r3, s15
 8013f94:	4013      	ands	r3, r2
 8013f96:	ee07 3a90 	vmov	s15, r3
 8013f9a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8013f9e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8013fa2:	eee6 6a65 	vfms.f32	s13, s12, s11
 8013fa6:	ee77 7a66 	vsub.f32	s15, s14, s13
 8013faa:	e70e      	b.n	8013dca <__ieee754_powf+0x1d6>
 8013fac:	2501      	movs	r5, #1
 8013fae:	e75d      	b.n	8013e6c <__ieee754_powf+0x278>
 8013fb0:	00000000 	.word	0x00000000
 8013fb4:	3f7ffff3 	.word	0x3f7ffff3
 8013fb8:	3f800007 	.word	0x3f800007
 8013fbc:	3eaaaaab 	.word	0x3eaaaaab
 8013fc0:	3fb8aa3b 	.word	0x3fb8aa3b
 8013fc4:	36eca570 	.word	0x36eca570
 8013fc8:	3fb8aa00 	.word	0x3fb8aa00
 8013fcc:	4b800000 	.word	0x4b800000
 8013fd0:	001cc471 	.word	0x001cc471
 8013fd4:	005db3d6 	.word	0x005db3d6
 8013fd8:	080154c8 	.word	0x080154c8
 8013fdc:	fffff000 	.word	0xfffff000
 8013fe0:	3e6c3255 	.word	0x3e6c3255
 8013fe4:	3e53f142 	.word	0x3e53f142
 8013fe8:	3e8ba305 	.word	0x3e8ba305
 8013fec:	3edb6db7 	.word	0x3edb6db7
 8013ff0:	3f19999a 	.word	0x3f19999a
 8013ff4:	3f76384f 	.word	0x3f76384f
 8013ff8:	3f763800 	.word	0x3f763800
 8013ffc:	369dc3a0 	.word	0x369dc3a0
 8014000:	080154d8 	.word	0x080154d8
 8014004:	080154d0 	.word	0x080154d0
 8014008:	3338aa3c 	.word	0x3338aa3c
 801400c:	f040 8095 	bne.w	801413a <__ieee754_powf+0x546>
 8014010:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8014008 <__ieee754_powf+0x414>
 8014014:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014018:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801401c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014024:	f73f aefa 	bgt.w	8013e1c <__ieee754_powf+0x228>
 8014028:	15db      	asrs	r3, r3, #23
 801402a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801402e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014032:	4103      	asrs	r3, r0
 8014034:	4423      	add	r3, r4
 8014036:	494b      	ldr	r1, [pc, #300]	; (8014164 <__ieee754_powf+0x570>)
 8014038:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801403c:	3a7f      	subs	r2, #127	; 0x7f
 801403e:	4111      	asrs	r1, r2
 8014040:	ea23 0101 	bic.w	r1, r3, r1
 8014044:	ee07 1a10 	vmov	s14, r1
 8014048:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801404c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8014050:	f1c2 0217 	rsb	r2, r2, #23
 8014054:	4110      	asrs	r0, r2
 8014056:	2c00      	cmp	r4, #0
 8014058:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801405c:	bfb8      	it	lt
 801405e:	4240      	neglt	r0, r0
 8014060:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8014064:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8014168 <__ieee754_powf+0x574>
 8014068:	eddf 6a40 	vldr	s13, [pc, #256]	; 801416c <__ieee754_powf+0x578>
 801406c:	ee17 3a10 	vmov	r3, s14
 8014070:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014074:	f023 030f 	bic.w	r3, r3, #15
 8014078:	ee07 3a10 	vmov	s14, r3
 801407c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014080:	ee27 0a00 	vmul.f32	s0, s14, s0
 8014084:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014088:	eddf 7a39 	vldr	s15, [pc, #228]	; 8014170 <__ieee754_powf+0x57c>
 801408c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8014090:	eef0 7a40 	vmov.f32	s15, s0
 8014094:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014098:	eeb0 6a67 	vmov.f32	s12, s15
 801409c:	eea7 6a66 	vfms.f32	s12, s14, s13
 80140a0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80140a4:	ee30 0a46 	vsub.f32	s0, s0, s12
 80140a8:	eddf 6a32 	vldr	s13, [pc, #200]	; 8014174 <__ieee754_powf+0x580>
 80140ac:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8014178 <__ieee754_powf+0x584>
 80140b0:	eee7 6a06 	vfma.f32	s13, s14, s12
 80140b4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801417c <__ieee754_powf+0x588>
 80140b8:	eea6 6a87 	vfma.f32	s12, s13, s14
 80140bc:	eddf 6a30 	vldr	s13, [pc, #192]	; 8014180 <__ieee754_powf+0x58c>
 80140c0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80140c4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8014184 <__ieee754_powf+0x590>
 80140c8:	eea6 6a87 	vfma.f32	s12, s13, s14
 80140cc:	eef0 6a67 	vmov.f32	s13, s15
 80140d0:	eee6 6a47 	vfms.f32	s13, s12, s14
 80140d4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80140d8:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80140dc:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80140e0:	eea7 0a80 	vfma.f32	s0, s15, s0
 80140e4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80140e8:	ee37 0a40 	vsub.f32	s0, s14, s0
 80140ec:	ee70 7a67 	vsub.f32	s15, s0, s15
 80140f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80140f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80140f8:	ee10 3a10 	vmov	r3, s0
 80140fc:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8014100:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014104:	da1f      	bge.n	8014146 <__ieee754_powf+0x552>
 8014106:	f000 febd 	bl	8014e84 <scalbnf>
 801410a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801410e:	e589      	b.n	8013c24 <__ieee754_powf+0x30>
 8014110:	4a1d      	ldr	r2, [pc, #116]	; (8014188 <__ieee754_powf+0x594>)
 8014112:	4293      	cmp	r3, r2
 8014114:	dd07      	ble.n	8014126 <__ieee754_powf+0x532>
 8014116:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801411a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801411e:	bf4c      	ite	mi
 8014120:	2001      	movmi	r0, #1
 8014122:	2000      	movpl	r0, #0
 8014124:	e61f      	b.n	8013d66 <__ieee754_powf+0x172>
 8014126:	d108      	bne.n	801413a <__ieee754_powf+0x546>
 8014128:	ee37 7a67 	vsub.f32	s14, s14, s15
 801412c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8014130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014134:	f6ff af78 	blt.w	8014028 <__ieee754_powf+0x434>
 8014138:	e7ed      	b.n	8014116 <__ieee754_powf+0x522>
 801413a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801413e:	f73f af73 	bgt.w	8014028 <__ieee754_powf+0x434>
 8014142:	2000      	movs	r0, #0
 8014144:	e78c      	b.n	8014060 <__ieee754_powf+0x46c>
 8014146:	ee00 3a10 	vmov	s0, r3
 801414a:	e7de      	b.n	801410a <__ieee754_powf+0x516>
 801414c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014150:	e568      	b.n	8013c24 <__ieee754_powf+0x30>
 8014152:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801418c <__ieee754_powf+0x598>
 8014156:	e565      	b.n	8013c24 <__ieee754_powf+0x30>
 8014158:	eeb0 0a48 	vmov.f32	s0, s16
 801415c:	e562      	b.n	8013c24 <__ieee754_powf+0x30>
 801415e:	2700      	movs	r7, #0
 8014160:	e58d      	b.n	8013c7e <__ieee754_powf+0x8a>
 8014162:	bf00      	nop
 8014164:	007fffff 	.word	0x007fffff
 8014168:	35bfbe8c 	.word	0x35bfbe8c
 801416c:	3f317200 	.word	0x3f317200
 8014170:	3f317218 	.word	0x3f317218
 8014174:	b5ddea0e 	.word	0xb5ddea0e
 8014178:	3331bb4c 	.word	0x3331bb4c
 801417c:	388ab355 	.word	0x388ab355
 8014180:	bb360b61 	.word	0xbb360b61
 8014184:	3e2aaaab 	.word	0x3e2aaaab
 8014188:	43160000 	.word	0x43160000
 801418c:	00000000 	.word	0x00000000

08014190 <__ieee754_rem_pio2f>:
 8014190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014192:	ee10 6a10 	vmov	r6, s0
 8014196:	4b8e      	ldr	r3, [pc, #568]	; (80143d0 <__ieee754_rem_pio2f+0x240>)
 8014198:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801419c:	429d      	cmp	r5, r3
 801419e:	b087      	sub	sp, #28
 80141a0:	eef0 7a40 	vmov.f32	s15, s0
 80141a4:	4604      	mov	r4, r0
 80141a6:	dc05      	bgt.n	80141b4 <__ieee754_rem_pio2f+0x24>
 80141a8:	2300      	movs	r3, #0
 80141aa:	ed80 0a00 	vstr	s0, [r0]
 80141ae:	6043      	str	r3, [r0, #4]
 80141b0:	2000      	movs	r0, #0
 80141b2:	e01a      	b.n	80141ea <__ieee754_rem_pio2f+0x5a>
 80141b4:	4b87      	ldr	r3, [pc, #540]	; (80143d4 <__ieee754_rem_pio2f+0x244>)
 80141b6:	429d      	cmp	r5, r3
 80141b8:	dc46      	bgt.n	8014248 <__ieee754_rem_pio2f+0xb8>
 80141ba:	2e00      	cmp	r6, #0
 80141bc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80143d8 <__ieee754_rem_pio2f+0x248>
 80141c0:	4b86      	ldr	r3, [pc, #536]	; (80143dc <__ieee754_rem_pio2f+0x24c>)
 80141c2:	f025 050f 	bic.w	r5, r5, #15
 80141c6:	dd1f      	ble.n	8014208 <__ieee754_rem_pio2f+0x78>
 80141c8:	429d      	cmp	r5, r3
 80141ca:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80141ce:	d00e      	beq.n	80141ee <__ieee754_rem_pio2f+0x5e>
 80141d0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80143e0 <__ieee754_rem_pio2f+0x250>
 80141d4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80141d8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80141dc:	ed80 0a00 	vstr	s0, [r0]
 80141e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80141e4:	2001      	movs	r0, #1
 80141e6:	edc4 7a01 	vstr	s15, [r4, #4]
 80141ea:	b007      	add	sp, #28
 80141ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141ee:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80143e4 <__ieee754_rem_pio2f+0x254>
 80141f2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80143e8 <__ieee754_rem_pio2f+0x258>
 80141f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80141fa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80141fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014202:	edc0 6a00 	vstr	s13, [r0]
 8014206:	e7eb      	b.n	80141e0 <__ieee754_rem_pio2f+0x50>
 8014208:	429d      	cmp	r5, r3
 801420a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801420e:	d00e      	beq.n	801422e <__ieee754_rem_pio2f+0x9e>
 8014210:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80143e0 <__ieee754_rem_pio2f+0x250>
 8014214:	ee37 0a87 	vadd.f32	s0, s15, s14
 8014218:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801421c:	ed80 0a00 	vstr	s0, [r0]
 8014220:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014224:	f04f 30ff 	mov.w	r0, #4294967295
 8014228:	edc4 7a01 	vstr	s15, [r4, #4]
 801422c:	e7dd      	b.n	80141ea <__ieee754_rem_pio2f+0x5a>
 801422e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80143e4 <__ieee754_rem_pio2f+0x254>
 8014232:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80143e8 <__ieee754_rem_pio2f+0x258>
 8014236:	ee77 7a80 	vadd.f32	s15, s15, s0
 801423a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801423e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014242:	edc0 6a00 	vstr	s13, [r0]
 8014246:	e7eb      	b.n	8014220 <__ieee754_rem_pio2f+0x90>
 8014248:	4b68      	ldr	r3, [pc, #416]	; (80143ec <__ieee754_rem_pio2f+0x25c>)
 801424a:	429d      	cmp	r5, r3
 801424c:	dc72      	bgt.n	8014334 <__ieee754_rem_pio2f+0x1a4>
 801424e:	f000 fdbd 	bl	8014dcc <fabsf>
 8014252:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80143f0 <__ieee754_rem_pio2f+0x260>
 8014256:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801425a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801425e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014262:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014266:	ee17 0a90 	vmov	r0, s15
 801426a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80143d8 <__ieee754_rem_pio2f+0x248>
 801426e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8014272:	281f      	cmp	r0, #31
 8014274:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80143e0 <__ieee754_rem_pio2f+0x250>
 8014278:	ee67 7a27 	vmul.f32	s15, s14, s15
 801427c:	eeb1 6a47 	vneg.f32	s12, s14
 8014280:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014284:	ee16 2a90 	vmov	r2, s13
 8014288:	dc1c      	bgt.n	80142c4 <__ieee754_rem_pio2f+0x134>
 801428a:	495a      	ldr	r1, [pc, #360]	; (80143f4 <__ieee754_rem_pio2f+0x264>)
 801428c:	1e47      	subs	r7, r0, #1
 801428e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8014292:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8014296:	428b      	cmp	r3, r1
 8014298:	d014      	beq.n	80142c4 <__ieee754_rem_pio2f+0x134>
 801429a:	6022      	str	r2, [r4, #0]
 801429c:	ed94 7a00 	vldr	s14, [r4]
 80142a0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80142a4:	2e00      	cmp	r6, #0
 80142a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80142aa:	ed84 0a01 	vstr	s0, [r4, #4]
 80142ae:	da9c      	bge.n	80141ea <__ieee754_rem_pio2f+0x5a>
 80142b0:	eeb1 7a47 	vneg.f32	s14, s14
 80142b4:	eeb1 0a40 	vneg.f32	s0, s0
 80142b8:	ed84 7a00 	vstr	s14, [r4]
 80142bc:	ed84 0a01 	vstr	s0, [r4, #4]
 80142c0:	4240      	negs	r0, r0
 80142c2:	e792      	b.n	80141ea <__ieee754_rem_pio2f+0x5a>
 80142c4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80142c8:	15eb      	asrs	r3, r5, #23
 80142ca:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80142ce:	2d08      	cmp	r5, #8
 80142d0:	dde3      	ble.n	801429a <__ieee754_rem_pio2f+0x10a>
 80142d2:	eddf 7a44 	vldr	s15, [pc, #272]	; 80143e4 <__ieee754_rem_pio2f+0x254>
 80142d6:	eddf 5a44 	vldr	s11, [pc, #272]	; 80143e8 <__ieee754_rem_pio2f+0x258>
 80142da:	eef0 6a40 	vmov.f32	s13, s0
 80142de:	eee6 6a27 	vfma.f32	s13, s12, s15
 80142e2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80142e6:	eea6 0a27 	vfma.f32	s0, s12, s15
 80142ea:	eef0 7a40 	vmov.f32	s15, s0
 80142ee:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80142f2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80142f6:	ee15 2a90 	vmov	r2, s11
 80142fa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80142fe:	1a5b      	subs	r3, r3, r1
 8014300:	2b19      	cmp	r3, #25
 8014302:	dc04      	bgt.n	801430e <__ieee754_rem_pio2f+0x17e>
 8014304:	edc4 5a00 	vstr	s11, [r4]
 8014308:	eeb0 0a66 	vmov.f32	s0, s13
 801430c:	e7c6      	b.n	801429c <__ieee754_rem_pio2f+0x10c>
 801430e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80143f8 <__ieee754_rem_pio2f+0x268>
 8014312:	eeb0 0a66 	vmov.f32	s0, s13
 8014316:	eea6 0a25 	vfma.f32	s0, s12, s11
 801431a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801431e:	eddf 6a37 	vldr	s13, [pc, #220]	; 80143fc <__ieee754_rem_pio2f+0x26c>
 8014322:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014326:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801432a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801432e:	ed84 7a00 	vstr	s14, [r4]
 8014332:	e7b3      	b.n	801429c <__ieee754_rem_pio2f+0x10c>
 8014334:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8014338:	db06      	blt.n	8014348 <__ieee754_rem_pio2f+0x1b8>
 801433a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801433e:	edc0 7a01 	vstr	s15, [r0, #4]
 8014342:	edc0 7a00 	vstr	s15, [r0]
 8014346:	e733      	b.n	80141b0 <__ieee754_rem_pio2f+0x20>
 8014348:	15ea      	asrs	r2, r5, #23
 801434a:	3a86      	subs	r2, #134	; 0x86
 801434c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8014350:	ee07 3a90 	vmov	s15, r3
 8014354:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014358:	eddf 6a29 	vldr	s13, [pc, #164]	; 8014400 <__ieee754_rem_pio2f+0x270>
 801435c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014360:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014364:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014368:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801436c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014370:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014374:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014378:	ed8d 7a04 	vstr	s14, [sp, #16]
 801437c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014380:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014388:	edcd 7a05 	vstr	s15, [sp, #20]
 801438c:	d11e      	bne.n	80143cc <__ieee754_rem_pio2f+0x23c>
 801438e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014396:	bf14      	ite	ne
 8014398:	2302      	movne	r3, #2
 801439a:	2301      	moveq	r3, #1
 801439c:	4919      	ldr	r1, [pc, #100]	; (8014404 <__ieee754_rem_pio2f+0x274>)
 801439e:	9101      	str	r1, [sp, #4]
 80143a0:	2102      	movs	r1, #2
 80143a2:	9100      	str	r1, [sp, #0]
 80143a4:	a803      	add	r0, sp, #12
 80143a6:	4621      	mov	r1, r4
 80143a8:	f000 f892 	bl	80144d0 <__kernel_rem_pio2f>
 80143ac:	2e00      	cmp	r6, #0
 80143ae:	f6bf af1c 	bge.w	80141ea <__ieee754_rem_pio2f+0x5a>
 80143b2:	edd4 7a00 	vldr	s15, [r4]
 80143b6:	eef1 7a67 	vneg.f32	s15, s15
 80143ba:	edc4 7a00 	vstr	s15, [r4]
 80143be:	edd4 7a01 	vldr	s15, [r4, #4]
 80143c2:	eef1 7a67 	vneg.f32	s15, s15
 80143c6:	edc4 7a01 	vstr	s15, [r4, #4]
 80143ca:	e779      	b.n	80142c0 <__ieee754_rem_pio2f+0x130>
 80143cc:	2303      	movs	r3, #3
 80143ce:	e7e5      	b.n	801439c <__ieee754_rem_pio2f+0x20c>
 80143d0:	3f490fd8 	.word	0x3f490fd8
 80143d4:	4016cbe3 	.word	0x4016cbe3
 80143d8:	3fc90f80 	.word	0x3fc90f80
 80143dc:	3fc90fd0 	.word	0x3fc90fd0
 80143e0:	37354443 	.word	0x37354443
 80143e4:	37354400 	.word	0x37354400
 80143e8:	2e85a308 	.word	0x2e85a308
 80143ec:	43490f80 	.word	0x43490f80
 80143f0:	3f22f984 	.word	0x3f22f984
 80143f4:	080154e0 	.word	0x080154e0
 80143f8:	2e85a300 	.word	0x2e85a300
 80143fc:	248d3132 	.word	0x248d3132
 8014400:	43800000 	.word	0x43800000
 8014404:	08015560 	.word	0x08015560

08014408 <__ieee754_sqrtf>:
 8014408:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801440c:	4770      	bx	lr
	...

08014410 <__kernel_cosf>:
 8014410:	ee10 3a10 	vmov	r3, s0
 8014414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014418:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801441c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014420:	da05      	bge.n	801442e <__kernel_cosf+0x1e>
 8014422:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014426:	ee17 2a90 	vmov	r2, s15
 801442a:	2a00      	cmp	r2, #0
 801442c:	d03d      	beq.n	80144aa <__kernel_cosf+0x9a>
 801442e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8014432:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80144b0 <__kernel_cosf+0xa0>
 8014436:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80144b4 <__kernel_cosf+0xa4>
 801443a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80144b8 <__kernel_cosf+0xa8>
 801443e:	4a1f      	ldr	r2, [pc, #124]	; (80144bc <__kernel_cosf+0xac>)
 8014440:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014444:	4293      	cmp	r3, r2
 8014446:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80144c0 <__kernel_cosf+0xb0>
 801444a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801444e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80144c4 <__kernel_cosf+0xb4>
 8014452:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8014456:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80144c8 <__kernel_cosf+0xb8>
 801445a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801445e:	eeb0 7a66 	vmov.f32	s14, s13
 8014462:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8014466:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801446a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801446e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8014472:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8014476:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801447a:	dc04      	bgt.n	8014486 <__kernel_cosf+0x76>
 801447c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014480:	ee36 0a47 	vsub.f32	s0, s12, s14
 8014484:	4770      	bx	lr
 8014486:	4a11      	ldr	r2, [pc, #68]	; (80144cc <__kernel_cosf+0xbc>)
 8014488:	4293      	cmp	r3, r2
 801448a:	bfda      	itte	le
 801448c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8014490:	ee06 3a90 	vmovle	s13, r3
 8014494:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8014498:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801449c:	ee36 0a66 	vsub.f32	s0, s12, s13
 80144a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80144a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80144a8:	4770      	bx	lr
 80144aa:	eeb0 0a46 	vmov.f32	s0, s12
 80144ae:	4770      	bx	lr
 80144b0:	ad47d74e 	.word	0xad47d74e
 80144b4:	310f74f6 	.word	0x310f74f6
 80144b8:	3d2aaaab 	.word	0x3d2aaaab
 80144bc:	3e999999 	.word	0x3e999999
 80144c0:	b493f27c 	.word	0xb493f27c
 80144c4:	37d00d01 	.word	0x37d00d01
 80144c8:	bab60b61 	.word	0xbab60b61
 80144cc:	3f480000 	.word	0x3f480000

080144d0 <__kernel_rem_pio2f>:
 80144d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144d4:	ed2d 8b04 	vpush	{d8-d9}
 80144d8:	b0d9      	sub	sp, #356	; 0x164
 80144da:	4688      	mov	r8, r1
 80144dc:	9002      	str	r0, [sp, #8]
 80144de:	49bb      	ldr	r1, [pc, #748]	; (80147cc <__kernel_rem_pio2f+0x2fc>)
 80144e0:	9866      	ldr	r0, [sp, #408]	; 0x198
 80144e2:	9301      	str	r3, [sp, #4]
 80144e4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80144e8:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80144ec:	1e59      	subs	r1, r3, #1
 80144ee:	1d13      	adds	r3, r2, #4
 80144f0:	db27      	blt.n	8014542 <__kernel_rem_pio2f+0x72>
 80144f2:	f1b2 0b03 	subs.w	fp, r2, #3
 80144f6:	bf48      	it	mi
 80144f8:	f102 0b04 	addmi.w	fp, r2, #4
 80144fc:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8014500:	1c45      	adds	r5, r0, #1
 8014502:	00ec      	lsls	r4, r5, #3
 8014504:	1a47      	subs	r7, r0, r1
 8014506:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80147dc <__kernel_rem_pio2f+0x30c>
 801450a:	9403      	str	r4, [sp, #12]
 801450c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8014510:	eb0a 0c01 	add.w	ip, sl, r1
 8014514:	ae1c      	add	r6, sp, #112	; 0x70
 8014516:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801451a:	2400      	movs	r4, #0
 801451c:	4564      	cmp	r4, ip
 801451e:	dd12      	ble.n	8014546 <__kernel_rem_pio2f+0x76>
 8014520:	9b01      	ldr	r3, [sp, #4]
 8014522:	ac1c      	add	r4, sp, #112	; 0x70
 8014524:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8014528:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801452c:	f04f 0c00 	mov.w	ip, #0
 8014530:	45d4      	cmp	ip, sl
 8014532:	dc27      	bgt.n	8014584 <__kernel_rem_pio2f+0xb4>
 8014534:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8014538:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80147dc <__kernel_rem_pio2f+0x30c>
 801453c:	4627      	mov	r7, r4
 801453e:	2600      	movs	r6, #0
 8014540:	e016      	b.n	8014570 <__kernel_rem_pio2f+0xa0>
 8014542:	2000      	movs	r0, #0
 8014544:	e7dc      	b.n	8014500 <__kernel_rem_pio2f+0x30>
 8014546:	42e7      	cmn	r7, r4
 8014548:	bf5d      	ittte	pl
 801454a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801454e:	ee07 3a90 	vmovpl	s15, r3
 8014552:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8014556:	eef0 7a47 	vmovmi.f32	s15, s14
 801455a:	ece6 7a01 	vstmia	r6!, {s15}
 801455e:	3401      	adds	r4, #1
 8014560:	e7dc      	b.n	801451c <__kernel_rem_pio2f+0x4c>
 8014562:	ecf9 6a01 	vldmia	r9!, {s13}
 8014566:	ed97 7a00 	vldr	s14, [r7]
 801456a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801456e:	3601      	adds	r6, #1
 8014570:	428e      	cmp	r6, r1
 8014572:	f1a7 0704 	sub.w	r7, r7, #4
 8014576:	ddf4      	ble.n	8014562 <__kernel_rem_pio2f+0x92>
 8014578:	eceb 7a01 	vstmia	fp!, {s15}
 801457c:	f10c 0c01 	add.w	ip, ip, #1
 8014580:	3404      	adds	r4, #4
 8014582:	e7d5      	b.n	8014530 <__kernel_rem_pio2f+0x60>
 8014584:	ab08      	add	r3, sp, #32
 8014586:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801458a:	eddf 8a93 	vldr	s17, [pc, #588]	; 80147d8 <__kernel_rem_pio2f+0x308>
 801458e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80147d4 <__kernel_rem_pio2f+0x304>
 8014592:	9304      	str	r3, [sp, #16]
 8014594:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8014598:	4656      	mov	r6, sl
 801459a:	00b3      	lsls	r3, r6, #2
 801459c:	9305      	str	r3, [sp, #20]
 801459e:	ab58      	add	r3, sp, #352	; 0x160
 80145a0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80145a4:	ac08      	add	r4, sp, #32
 80145a6:	ab44      	add	r3, sp, #272	; 0x110
 80145a8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80145ac:	46a4      	mov	ip, r4
 80145ae:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80145b2:	4637      	mov	r7, r6
 80145b4:	2f00      	cmp	r7, #0
 80145b6:	f1a0 0004 	sub.w	r0, r0, #4
 80145ba:	dc4f      	bgt.n	801465c <__kernel_rem_pio2f+0x18c>
 80145bc:	4628      	mov	r0, r5
 80145be:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80145c2:	f000 fc5f 	bl	8014e84 <scalbnf>
 80145c6:	eeb0 8a40 	vmov.f32	s16, s0
 80145ca:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80145ce:	ee28 0a00 	vmul.f32	s0, s16, s0
 80145d2:	f000 fc0f 	bl	8014df4 <floorf>
 80145d6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80145da:	eea0 8a67 	vfms.f32	s16, s0, s15
 80145de:	2d00      	cmp	r5, #0
 80145e0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80145e4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80145e8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80145ec:	ee17 9a90 	vmov	r9, s15
 80145f0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80145f4:	dd44      	ble.n	8014680 <__kernel_rem_pio2f+0x1b0>
 80145f6:	f106 3cff 	add.w	ip, r6, #4294967295
 80145fa:	ab08      	add	r3, sp, #32
 80145fc:	f1c5 0e08 	rsb	lr, r5, #8
 8014600:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8014604:	fa47 f00e 	asr.w	r0, r7, lr
 8014608:	4481      	add	r9, r0
 801460a:	fa00 f00e 	lsl.w	r0, r0, lr
 801460e:	1a3f      	subs	r7, r7, r0
 8014610:	f1c5 0007 	rsb	r0, r5, #7
 8014614:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8014618:	4107      	asrs	r7, r0
 801461a:	2f00      	cmp	r7, #0
 801461c:	dd3f      	ble.n	801469e <__kernel_rem_pio2f+0x1ce>
 801461e:	f04f 0e00 	mov.w	lr, #0
 8014622:	f109 0901 	add.w	r9, r9, #1
 8014626:	4673      	mov	r3, lr
 8014628:	4576      	cmp	r6, lr
 801462a:	dc6b      	bgt.n	8014704 <__kernel_rem_pio2f+0x234>
 801462c:	2d00      	cmp	r5, #0
 801462e:	dd04      	ble.n	801463a <__kernel_rem_pio2f+0x16a>
 8014630:	2d01      	cmp	r5, #1
 8014632:	d078      	beq.n	8014726 <__kernel_rem_pio2f+0x256>
 8014634:	2d02      	cmp	r5, #2
 8014636:	f000 8081 	beq.w	801473c <__kernel_rem_pio2f+0x26c>
 801463a:	2f02      	cmp	r7, #2
 801463c:	d12f      	bne.n	801469e <__kernel_rem_pio2f+0x1ce>
 801463e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014642:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014646:	b353      	cbz	r3, 801469e <__kernel_rem_pio2f+0x1ce>
 8014648:	4628      	mov	r0, r5
 801464a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801464e:	f000 fc19 	bl	8014e84 <scalbnf>
 8014652:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8014656:	ee38 8a40 	vsub.f32	s16, s16, s0
 801465a:	e020      	b.n	801469e <__kernel_rem_pio2f+0x1ce>
 801465c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014660:	3f01      	subs	r7, #1
 8014662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801466a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801466e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014672:	ecac 0a01 	vstmia	ip!, {s0}
 8014676:	ed90 0a00 	vldr	s0, [r0]
 801467a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801467e:	e799      	b.n	80145b4 <__kernel_rem_pio2f+0xe4>
 8014680:	d105      	bne.n	801468e <__kernel_rem_pio2f+0x1be>
 8014682:	1e70      	subs	r0, r6, #1
 8014684:	ab08      	add	r3, sp, #32
 8014686:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801468a:	11ff      	asrs	r7, r7, #7
 801468c:	e7c5      	b.n	801461a <__kernel_rem_pio2f+0x14a>
 801468e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014692:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801469a:	da31      	bge.n	8014700 <__kernel_rem_pio2f+0x230>
 801469c:	2700      	movs	r7, #0
 801469e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80146a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a6:	f040 809b 	bne.w	80147e0 <__kernel_rem_pio2f+0x310>
 80146aa:	1e74      	subs	r4, r6, #1
 80146ac:	46a4      	mov	ip, r4
 80146ae:	2000      	movs	r0, #0
 80146b0:	45d4      	cmp	ip, sl
 80146b2:	da4a      	bge.n	801474a <__kernel_rem_pio2f+0x27a>
 80146b4:	2800      	cmp	r0, #0
 80146b6:	d07a      	beq.n	80147ae <__kernel_rem_pio2f+0x2de>
 80146b8:	ab08      	add	r3, sp, #32
 80146ba:	3d08      	subs	r5, #8
 80146bc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	f000 8081 	beq.w	80147c8 <__kernel_rem_pio2f+0x2f8>
 80146c6:	4628      	mov	r0, r5
 80146c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80146cc:	00a5      	lsls	r5, r4, #2
 80146ce:	f000 fbd9 	bl	8014e84 <scalbnf>
 80146d2:	aa44      	add	r2, sp, #272	; 0x110
 80146d4:	1d2b      	adds	r3, r5, #4
 80146d6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80147d8 <__kernel_rem_pio2f+0x308>
 80146da:	18d1      	adds	r1, r2, r3
 80146dc:	4622      	mov	r2, r4
 80146de:	2a00      	cmp	r2, #0
 80146e0:	f280 80ae 	bge.w	8014840 <__kernel_rem_pio2f+0x370>
 80146e4:	4622      	mov	r2, r4
 80146e6:	2a00      	cmp	r2, #0
 80146e8:	f2c0 80cc 	blt.w	8014884 <__kernel_rem_pio2f+0x3b4>
 80146ec:	a944      	add	r1, sp, #272	; 0x110
 80146ee:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80146f2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80147d0 <__kernel_rem_pio2f+0x300>
 80146f6:	eddf 7a39 	vldr	s15, [pc, #228]	; 80147dc <__kernel_rem_pio2f+0x30c>
 80146fa:	2000      	movs	r0, #0
 80146fc:	1aa1      	subs	r1, r4, r2
 80146fe:	e0b6      	b.n	801486e <__kernel_rem_pio2f+0x39e>
 8014700:	2702      	movs	r7, #2
 8014702:	e78c      	b.n	801461e <__kernel_rem_pio2f+0x14e>
 8014704:	6820      	ldr	r0, [r4, #0]
 8014706:	b94b      	cbnz	r3, 801471c <__kernel_rem_pio2f+0x24c>
 8014708:	b118      	cbz	r0, 8014712 <__kernel_rem_pio2f+0x242>
 801470a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801470e:	6020      	str	r0, [r4, #0]
 8014710:	2001      	movs	r0, #1
 8014712:	f10e 0e01 	add.w	lr, lr, #1
 8014716:	3404      	adds	r4, #4
 8014718:	4603      	mov	r3, r0
 801471a:	e785      	b.n	8014628 <__kernel_rem_pio2f+0x158>
 801471c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8014720:	6020      	str	r0, [r4, #0]
 8014722:	4618      	mov	r0, r3
 8014724:	e7f5      	b.n	8014712 <__kernel_rem_pio2f+0x242>
 8014726:	1e74      	subs	r4, r6, #1
 8014728:	a808      	add	r0, sp, #32
 801472a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801472e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8014732:	f10d 0c20 	add.w	ip, sp, #32
 8014736:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801473a:	e77e      	b.n	801463a <__kernel_rem_pio2f+0x16a>
 801473c:	1e74      	subs	r4, r6, #1
 801473e:	a808      	add	r0, sp, #32
 8014740:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8014744:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8014748:	e7f3      	b.n	8014732 <__kernel_rem_pio2f+0x262>
 801474a:	ab08      	add	r3, sp, #32
 801474c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8014750:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014754:	4318      	orrs	r0, r3
 8014756:	e7ab      	b.n	80146b0 <__kernel_rem_pio2f+0x1e0>
 8014758:	f10c 0c01 	add.w	ip, ip, #1
 801475c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8014760:	2c00      	cmp	r4, #0
 8014762:	d0f9      	beq.n	8014758 <__kernel_rem_pio2f+0x288>
 8014764:	9b05      	ldr	r3, [sp, #20]
 8014766:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801476a:	eb0d 0003 	add.w	r0, sp, r3
 801476e:	9b01      	ldr	r3, [sp, #4]
 8014770:	18f4      	adds	r4, r6, r3
 8014772:	ab1c      	add	r3, sp, #112	; 0x70
 8014774:	1c77      	adds	r7, r6, #1
 8014776:	384c      	subs	r0, #76	; 0x4c
 8014778:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801477c:	4466      	add	r6, ip
 801477e:	42be      	cmp	r6, r7
 8014780:	f6ff af0b 	blt.w	801459a <__kernel_rem_pio2f+0xca>
 8014784:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8014788:	f8dd e008 	ldr.w	lr, [sp, #8]
 801478c:	ee07 3a90 	vmov	s15, r3
 8014790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014794:	f04f 0c00 	mov.w	ip, #0
 8014798:	ece4 7a01 	vstmia	r4!, {s15}
 801479c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80147dc <__kernel_rem_pio2f+0x30c>
 80147a0:	46a1      	mov	r9, r4
 80147a2:	458c      	cmp	ip, r1
 80147a4:	dd07      	ble.n	80147b6 <__kernel_rem_pio2f+0x2e6>
 80147a6:	ece0 7a01 	vstmia	r0!, {s15}
 80147aa:	3701      	adds	r7, #1
 80147ac:	e7e7      	b.n	801477e <__kernel_rem_pio2f+0x2ae>
 80147ae:	9804      	ldr	r0, [sp, #16]
 80147b0:	f04f 0c01 	mov.w	ip, #1
 80147b4:	e7d2      	b.n	801475c <__kernel_rem_pio2f+0x28c>
 80147b6:	ecfe 6a01 	vldmia	lr!, {s13}
 80147ba:	ed39 7a01 	vldmdb	r9!, {s14}
 80147be:	f10c 0c01 	add.w	ip, ip, #1
 80147c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80147c6:	e7ec      	b.n	80147a2 <__kernel_rem_pio2f+0x2d2>
 80147c8:	3c01      	subs	r4, #1
 80147ca:	e775      	b.n	80146b8 <__kernel_rem_pio2f+0x1e8>
 80147cc:	080158a4 	.word	0x080158a4
 80147d0:	08015878 	.word	0x08015878
 80147d4:	43800000 	.word	0x43800000
 80147d8:	3b800000 	.word	0x3b800000
 80147dc:	00000000 	.word	0x00000000
 80147e0:	9b03      	ldr	r3, [sp, #12]
 80147e2:	eeb0 0a48 	vmov.f32	s0, s16
 80147e6:	1a98      	subs	r0, r3, r2
 80147e8:	f000 fb4c 	bl	8014e84 <scalbnf>
 80147ec:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80147d4 <__kernel_rem_pio2f+0x304>
 80147f0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80147f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f8:	db19      	blt.n	801482e <__kernel_rem_pio2f+0x35e>
 80147fa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80147d8 <__kernel_rem_pio2f+0x308>
 80147fe:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014802:	aa08      	add	r2, sp, #32
 8014804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014808:	1c74      	adds	r4, r6, #1
 801480a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801480e:	3508      	adds	r5, #8
 8014810:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014818:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801481c:	ee10 3a10 	vmov	r3, s0
 8014820:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014824:	ee17 3a90 	vmov	r3, s15
 8014828:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801482c:	e74b      	b.n	80146c6 <__kernel_rem_pio2f+0x1f6>
 801482e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014832:	aa08      	add	r2, sp, #32
 8014834:	ee10 3a10 	vmov	r3, s0
 8014838:	4634      	mov	r4, r6
 801483a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801483e:	e742      	b.n	80146c6 <__kernel_rem_pio2f+0x1f6>
 8014840:	a808      	add	r0, sp, #32
 8014842:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8014846:	9001      	str	r0, [sp, #4]
 8014848:	ee07 0a90 	vmov	s15, r0
 801484c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014850:	3a01      	subs	r2, #1
 8014852:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014856:	ee20 0a07 	vmul.f32	s0, s0, s14
 801485a:	ed61 7a01 	vstmdb	r1!, {s15}
 801485e:	e73e      	b.n	80146de <__kernel_rem_pio2f+0x20e>
 8014860:	ecfc 6a01 	vldmia	ip!, {s13}
 8014864:	ecb6 7a01 	vldmia	r6!, {s14}
 8014868:	eee6 7a87 	vfma.f32	s15, s13, s14
 801486c:	3001      	adds	r0, #1
 801486e:	4550      	cmp	r0, sl
 8014870:	dc01      	bgt.n	8014876 <__kernel_rem_pio2f+0x3a6>
 8014872:	4288      	cmp	r0, r1
 8014874:	ddf4      	ble.n	8014860 <__kernel_rem_pio2f+0x390>
 8014876:	a858      	add	r0, sp, #352	; 0x160
 8014878:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801487c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8014880:	3a01      	subs	r2, #1
 8014882:	e730      	b.n	80146e6 <__kernel_rem_pio2f+0x216>
 8014884:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8014886:	2a02      	cmp	r2, #2
 8014888:	dc09      	bgt.n	801489e <__kernel_rem_pio2f+0x3ce>
 801488a:	2a00      	cmp	r2, #0
 801488c:	dc2a      	bgt.n	80148e4 <__kernel_rem_pio2f+0x414>
 801488e:	d043      	beq.n	8014918 <__kernel_rem_pio2f+0x448>
 8014890:	f009 0007 	and.w	r0, r9, #7
 8014894:	b059      	add	sp, #356	; 0x164
 8014896:	ecbd 8b04 	vpop	{d8-d9}
 801489a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801489e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80148a0:	2b03      	cmp	r3, #3
 80148a2:	d1f5      	bne.n	8014890 <__kernel_rem_pio2f+0x3c0>
 80148a4:	ab30      	add	r3, sp, #192	; 0xc0
 80148a6:	442b      	add	r3, r5
 80148a8:	461a      	mov	r2, r3
 80148aa:	4619      	mov	r1, r3
 80148ac:	4620      	mov	r0, r4
 80148ae:	2800      	cmp	r0, #0
 80148b0:	f1a1 0104 	sub.w	r1, r1, #4
 80148b4:	dc51      	bgt.n	801495a <__kernel_rem_pio2f+0x48a>
 80148b6:	4621      	mov	r1, r4
 80148b8:	2901      	cmp	r1, #1
 80148ba:	f1a2 0204 	sub.w	r2, r2, #4
 80148be:	dc5c      	bgt.n	801497a <__kernel_rem_pio2f+0x4aa>
 80148c0:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80147dc <__kernel_rem_pio2f+0x30c>
 80148c4:	3304      	adds	r3, #4
 80148c6:	2c01      	cmp	r4, #1
 80148c8:	dc67      	bgt.n	801499a <__kernel_rem_pio2f+0x4ca>
 80148ca:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80148ce:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80148d2:	2f00      	cmp	r7, #0
 80148d4:	d167      	bne.n	80149a6 <__kernel_rem_pio2f+0x4d6>
 80148d6:	edc8 6a00 	vstr	s13, [r8]
 80148da:	ed88 7a01 	vstr	s14, [r8, #4]
 80148de:	edc8 7a02 	vstr	s15, [r8, #8]
 80148e2:	e7d5      	b.n	8014890 <__kernel_rem_pio2f+0x3c0>
 80148e4:	aa30      	add	r2, sp, #192	; 0xc0
 80148e6:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80147dc <__kernel_rem_pio2f+0x30c>
 80148ea:	4413      	add	r3, r2
 80148ec:	4622      	mov	r2, r4
 80148ee:	2a00      	cmp	r2, #0
 80148f0:	da24      	bge.n	801493c <__kernel_rem_pio2f+0x46c>
 80148f2:	b34f      	cbz	r7, 8014948 <__kernel_rem_pio2f+0x478>
 80148f4:	eef1 7a47 	vneg.f32	s15, s14
 80148f8:	edc8 7a00 	vstr	s15, [r8]
 80148fc:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8014900:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014904:	aa31      	add	r2, sp, #196	; 0xc4
 8014906:	2301      	movs	r3, #1
 8014908:	429c      	cmp	r4, r3
 801490a:	da20      	bge.n	801494e <__kernel_rem_pio2f+0x47e>
 801490c:	b10f      	cbz	r7, 8014912 <__kernel_rem_pio2f+0x442>
 801490e:	eef1 7a67 	vneg.f32	s15, s15
 8014912:	edc8 7a01 	vstr	s15, [r8, #4]
 8014916:	e7bb      	b.n	8014890 <__kernel_rem_pio2f+0x3c0>
 8014918:	aa30      	add	r2, sp, #192	; 0xc0
 801491a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80147dc <__kernel_rem_pio2f+0x30c>
 801491e:	4413      	add	r3, r2
 8014920:	2c00      	cmp	r4, #0
 8014922:	da05      	bge.n	8014930 <__kernel_rem_pio2f+0x460>
 8014924:	b10f      	cbz	r7, 801492a <__kernel_rem_pio2f+0x45a>
 8014926:	eef1 7a67 	vneg.f32	s15, s15
 801492a:	edc8 7a00 	vstr	s15, [r8]
 801492e:	e7af      	b.n	8014890 <__kernel_rem_pio2f+0x3c0>
 8014930:	ed33 7a01 	vldmdb	r3!, {s14}
 8014934:	3c01      	subs	r4, #1
 8014936:	ee77 7a87 	vadd.f32	s15, s15, s14
 801493a:	e7f1      	b.n	8014920 <__kernel_rem_pio2f+0x450>
 801493c:	ed73 7a01 	vldmdb	r3!, {s15}
 8014940:	3a01      	subs	r2, #1
 8014942:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014946:	e7d2      	b.n	80148ee <__kernel_rem_pio2f+0x41e>
 8014948:	eef0 7a47 	vmov.f32	s15, s14
 801494c:	e7d4      	b.n	80148f8 <__kernel_rem_pio2f+0x428>
 801494e:	ecb2 7a01 	vldmia	r2!, {s14}
 8014952:	3301      	adds	r3, #1
 8014954:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014958:	e7d6      	b.n	8014908 <__kernel_rem_pio2f+0x438>
 801495a:	edd1 7a00 	vldr	s15, [r1]
 801495e:	edd1 6a01 	vldr	s13, [r1, #4]
 8014962:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014966:	3801      	subs	r0, #1
 8014968:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801496c:	ed81 7a00 	vstr	s14, [r1]
 8014970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014974:	edc1 7a01 	vstr	s15, [r1, #4]
 8014978:	e799      	b.n	80148ae <__kernel_rem_pio2f+0x3de>
 801497a:	edd2 7a00 	vldr	s15, [r2]
 801497e:	edd2 6a01 	vldr	s13, [r2, #4]
 8014982:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014986:	3901      	subs	r1, #1
 8014988:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801498c:	ed82 7a00 	vstr	s14, [r2]
 8014990:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014994:	edc2 7a01 	vstr	s15, [r2, #4]
 8014998:	e78e      	b.n	80148b8 <__kernel_rem_pio2f+0x3e8>
 801499a:	ed33 7a01 	vldmdb	r3!, {s14}
 801499e:	3c01      	subs	r4, #1
 80149a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80149a4:	e78f      	b.n	80148c6 <__kernel_rem_pio2f+0x3f6>
 80149a6:	eef1 6a66 	vneg.f32	s13, s13
 80149aa:	eeb1 7a47 	vneg.f32	s14, s14
 80149ae:	edc8 6a00 	vstr	s13, [r8]
 80149b2:	ed88 7a01 	vstr	s14, [r8, #4]
 80149b6:	eef1 7a67 	vneg.f32	s15, s15
 80149ba:	e790      	b.n	80148de <__kernel_rem_pio2f+0x40e>

080149bc <__kernel_sinf>:
 80149bc:	ee10 3a10 	vmov	r3, s0
 80149c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80149c4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80149c8:	da04      	bge.n	80149d4 <__kernel_sinf+0x18>
 80149ca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80149ce:	ee17 3a90 	vmov	r3, s15
 80149d2:	b35b      	cbz	r3, 8014a2c <__kernel_sinf+0x70>
 80149d4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80149d8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014a30 <__kernel_sinf+0x74>
 80149dc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8014a34 <__kernel_sinf+0x78>
 80149e0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80149e4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8014a38 <__kernel_sinf+0x7c>
 80149e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80149ec:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8014a3c <__kernel_sinf+0x80>
 80149f0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80149f4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8014a40 <__kernel_sinf+0x84>
 80149f8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80149fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014a00:	b930      	cbnz	r0, 8014a10 <__kernel_sinf+0x54>
 8014a02:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8014a44 <__kernel_sinf+0x88>
 8014a06:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014a0a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8014a0e:	4770      	bx	lr
 8014a10:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8014a14:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014a18:	eee0 7a86 	vfma.f32	s15, s1, s12
 8014a1c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8014a20:	eddf 7a09 	vldr	s15, [pc, #36]	; 8014a48 <__kernel_sinf+0x8c>
 8014a24:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8014a28:	ee30 0a60 	vsub.f32	s0, s0, s1
 8014a2c:	4770      	bx	lr
 8014a2e:	bf00      	nop
 8014a30:	2f2ec9d3 	.word	0x2f2ec9d3
 8014a34:	b2d72f34 	.word	0xb2d72f34
 8014a38:	3638ef1b 	.word	0x3638ef1b
 8014a3c:	b9500d01 	.word	0xb9500d01
 8014a40:	3c088889 	.word	0x3c088889
 8014a44:	be2aaaab 	.word	0xbe2aaaab
 8014a48:	3e2aaaab 	.word	0x3e2aaaab

08014a4c <with_errno>:
 8014a4c:	b570      	push	{r4, r5, r6, lr}
 8014a4e:	4604      	mov	r4, r0
 8014a50:	460d      	mov	r5, r1
 8014a52:	4616      	mov	r6, r2
 8014a54:	f7fb f8d2 	bl	800fbfc <__errno>
 8014a58:	4629      	mov	r1, r5
 8014a5a:	6006      	str	r6, [r0, #0]
 8014a5c:	4620      	mov	r0, r4
 8014a5e:	bd70      	pop	{r4, r5, r6, pc}

08014a60 <xflow>:
 8014a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a62:	4614      	mov	r4, r2
 8014a64:	461d      	mov	r5, r3
 8014a66:	b108      	cbz	r0, 8014a6c <xflow+0xc>
 8014a68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014a6c:	e9cd 2300 	strd	r2, r3, [sp]
 8014a70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a74:	4620      	mov	r0, r4
 8014a76:	4629      	mov	r1, r5
 8014a78:	f7eb fdbe 	bl	80005f8 <__aeabi_dmul>
 8014a7c:	2222      	movs	r2, #34	; 0x22
 8014a7e:	b003      	add	sp, #12
 8014a80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a84:	f7ff bfe2 	b.w	8014a4c <with_errno>

08014a88 <__math_uflow>:
 8014a88:	b508      	push	{r3, lr}
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014a90:	f7ff ffe6 	bl	8014a60 <xflow>
 8014a94:	ec41 0b10 	vmov	d0, r0, r1
 8014a98:	bd08      	pop	{r3, pc}

08014a9a <__math_oflow>:
 8014a9a:	b508      	push	{r3, lr}
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8014aa2:	f7ff ffdd 	bl	8014a60 <xflow>
 8014aa6:	ec41 0b10 	vmov	d0, r0, r1
 8014aaa:	bd08      	pop	{r3, pc}

08014aac <with_errnof>:
 8014aac:	b513      	push	{r0, r1, r4, lr}
 8014aae:	4604      	mov	r4, r0
 8014ab0:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014ab4:	f7fb f8a2 	bl	800fbfc <__errno>
 8014ab8:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014abc:	6004      	str	r4, [r0, #0]
 8014abe:	b002      	add	sp, #8
 8014ac0:	bd10      	pop	{r4, pc}

08014ac2 <xflowf>:
 8014ac2:	b130      	cbz	r0, 8014ad2 <xflowf+0x10>
 8014ac4:	eef1 7a40 	vneg.f32	s15, s0
 8014ac8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014acc:	2022      	movs	r0, #34	; 0x22
 8014ace:	f7ff bfed 	b.w	8014aac <with_errnof>
 8014ad2:	eef0 7a40 	vmov.f32	s15, s0
 8014ad6:	e7f7      	b.n	8014ac8 <xflowf+0x6>

08014ad8 <__math_uflowf>:
 8014ad8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014ae0 <__math_uflowf+0x8>
 8014adc:	f7ff bff1 	b.w	8014ac2 <xflowf>
 8014ae0:	10000000 	.word	0x10000000

08014ae4 <__math_oflowf>:
 8014ae4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014aec <__math_oflowf+0x8>
 8014ae8:	f7ff bfeb 	b.w	8014ac2 <xflowf>
 8014aec:	70000000 	.word	0x70000000

08014af0 <fabs>:
 8014af0:	ec51 0b10 	vmov	r0, r1, d0
 8014af4:	ee10 2a10 	vmov	r2, s0
 8014af8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014afc:	ec43 2b10 	vmov	d0, r2, r3
 8014b00:	4770      	bx	lr

08014b02 <finite>:
 8014b02:	b082      	sub	sp, #8
 8014b04:	ed8d 0b00 	vstr	d0, [sp]
 8014b08:	9801      	ldr	r0, [sp, #4]
 8014b0a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014b0e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014b12:	0fc0      	lsrs	r0, r0, #31
 8014b14:	b002      	add	sp, #8
 8014b16:	4770      	bx	lr

08014b18 <scalbn>:
 8014b18:	b570      	push	{r4, r5, r6, lr}
 8014b1a:	ec55 4b10 	vmov	r4, r5, d0
 8014b1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014b22:	4606      	mov	r6, r0
 8014b24:	462b      	mov	r3, r5
 8014b26:	b99a      	cbnz	r2, 8014b50 <scalbn+0x38>
 8014b28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014b2c:	4323      	orrs	r3, r4
 8014b2e:	d036      	beq.n	8014b9e <scalbn+0x86>
 8014b30:	4b39      	ldr	r3, [pc, #228]	; (8014c18 <scalbn+0x100>)
 8014b32:	4629      	mov	r1, r5
 8014b34:	ee10 0a10 	vmov	r0, s0
 8014b38:	2200      	movs	r2, #0
 8014b3a:	f7eb fd5d 	bl	80005f8 <__aeabi_dmul>
 8014b3e:	4b37      	ldr	r3, [pc, #220]	; (8014c1c <scalbn+0x104>)
 8014b40:	429e      	cmp	r6, r3
 8014b42:	4604      	mov	r4, r0
 8014b44:	460d      	mov	r5, r1
 8014b46:	da10      	bge.n	8014b6a <scalbn+0x52>
 8014b48:	a32b      	add	r3, pc, #172	; (adr r3, 8014bf8 <scalbn+0xe0>)
 8014b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b4e:	e03a      	b.n	8014bc6 <scalbn+0xae>
 8014b50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014b54:	428a      	cmp	r2, r1
 8014b56:	d10c      	bne.n	8014b72 <scalbn+0x5a>
 8014b58:	ee10 2a10 	vmov	r2, s0
 8014b5c:	4620      	mov	r0, r4
 8014b5e:	4629      	mov	r1, r5
 8014b60:	f7eb fb94 	bl	800028c <__adddf3>
 8014b64:	4604      	mov	r4, r0
 8014b66:	460d      	mov	r5, r1
 8014b68:	e019      	b.n	8014b9e <scalbn+0x86>
 8014b6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014b6e:	460b      	mov	r3, r1
 8014b70:	3a36      	subs	r2, #54	; 0x36
 8014b72:	4432      	add	r2, r6
 8014b74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014b78:	428a      	cmp	r2, r1
 8014b7a:	dd08      	ble.n	8014b8e <scalbn+0x76>
 8014b7c:	2d00      	cmp	r5, #0
 8014b7e:	a120      	add	r1, pc, #128	; (adr r1, 8014c00 <scalbn+0xe8>)
 8014b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b84:	da1c      	bge.n	8014bc0 <scalbn+0xa8>
 8014b86:	a120      	add	r1, pc, #128	; (adr r1, 8014c08 <scalbn+0xf0>)
 8014b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b8c:	e018      	b.n	8014bc0 <scalbn+0xa8>
 8014b8e:	2a00      	cmp	r2, #0
 8014b90:	dd08      	ble.n	8014ba4 <scalbn+0x8c>
 8014b92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014b96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014b9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014b9e:	ec45 4b10 	vmov	d0, r4, r5
 8014ba2:	bd70      	pop	{r4, r5, r6, pc}
 8014ba4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014ba8:	da19      	bge.n	8014bde <scalbn+0xc6>
 8014baa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014bae:	429e      	cmp	r6, r3
 8014bb0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8014bb4:	dd0a      	ble.n	8014bcc <scalbn+0xb4>
 8014bb6:	a112      	add	r1, pc, #72	; (adr r1, 8014c00 <scalbn+0xe8>)
 8014bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d1e2      	bne.n	8014b86 <scalbn+0x6e>
 8014bc0:	a30f      	add	r3, pc, #60	; (adr r3, 8014c00 <scalbn+0xe8>)
 8014bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bc6:	f7eb fd17 	bl	80005f8 <__aeabi_dmul>
 8014bca:	e7cb      	b.n	8014b64 <scalbn+0x4c>
 8014bcc:	a10a      	add	r1, pc, #40	; (adr r1, 8014bf8 <scalbn+0xe0>)
 8014bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d0b8      	beq.n	8014b48 <scalbn+0x30>
 8014bd6:	a10e      	add	r1, pc, #56	; (adr r1, 8014c10 <scalbn+0xf8>)
 8014bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014bdc:	e7b4      	b.n	8014b48 <scalbn+0x30>
 8014bde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014be2:	3236      	adds	r2, #54	; 0x36
 8014be4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014be8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014bec:	4620      	mov	r0, r4
 8014bee:	4b0c      	ldr	r3, [pc, #48]	; (8014c20 <scalbn+0x108>)
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	e7e8      	b.n	8014bc6 <scalbn+0xae>
 8014bf4:	f3af 8000 	nop.w
 8014bf8:	c2f8f359 	.word	0xc2f8f359
 8014bfc:	01a56e1f 	.word	0x01a56e1f
 8014c00:	8800759c 	.word	0x8800759c
 8014c04:	7e37e43c 	.word	0x7e37e43c
 8014c08:	8800759c 	.word	0x8800759c
 8014c0c:	fe37e43c 	.word	0xfe37e43c
 8014c10:	c2f8f359 	.word	0xc2f8f359
 8014c14:	81a56e1f 	.word	0x81a56e1f
 8014c18:	43500000 	.word	0x43500000
 8014c1c:	ffff3cb0 	.word	0xffff3cb0
 8014c20:	3c900000 	.word	0x3c900000

08014c24 <atanf>:
 8014c24:	b538      	push	{r3, r4, r5, lr}
 8014c26:	ee10 5a10 	vmov	r5, s0
 8014c2a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014c2e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8014c32:	eef0 7a40 	vmov.f32	s15, s0
 8014c36:	db10      	blt.n	8014c5a <atanf+0x36>
 8014c38:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014c3c:	dd04      	ble.n	8014c48 <atanf+0x24>
 8014c3e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8014c42:	eeb0 0a67 	vmov.f32	s0, s15
 8014c46:	bd38      	pop	{r3, r4, r5, pc}
 8014c48:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014d80 <atanf+0x15c>
 8014c4c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8014d84 <atanf+0x160>
 8014c50:	2d00      	cmp	r5, #0
 8014c52:	bfd8      	it	le
 8014c54:	eef0 7a40 	vmovle.f32	s15, s0
 8014c58:	e7f3      	b.n	8014c42 <atanf+0x1e>
 8014c5a:	4b4b      	ldr	r3, [pc, #300]	; (8014d88 <atanf+0x164>)
 8014c5c:	429c      	cmp	r4, r3
 8014c5e:	dc10      	bgt.n	8014c82 <atanf+0x5e>
 8014c60:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8014c64:	da0a      	bge.n	8014c7c <atanf+0x58>
 8014c66:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014d8c <atanf+0x168>
 8014c6a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014c72:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c7a:	dce2      	bgt.n	8014c42 <atanf+0x1e>
 8014c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c80:	e013      	b.n	8014caa <atanf+0x86>
 8014c82:	f000 f8a3 	bl	8014dcc <fabsf>
 8014c86:	4b42      	ldr	r3, [pc, #264]	; (8014d90 <atanf+0x16c>)
 8014c88:	429c      	cmp	r4, r3
 8014c8a:	dc4f      	bgt.n	8014d2c <atanf+0x108>
 8014c8c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014c90:	429c      	cmp	r4, r3
 8014c92:	dc41      	bgt.n	8014d18 <atanf+0xf4>
 8014c94:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014c98:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014c9c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014ca6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014caa:	1c5a      	adds	r2, r3, #1
 8014cac:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014cb0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014d94 <atanf+0x170>
 8014cb4:	eddf 5a38 	vldr	s11, [pc, #224]	; 8014d98 <atanf+0x174>
 8014cb8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8014d9c <atanf+0x178>
 8014cbc:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014cc0:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014cc4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014da0 <atanf+0x17c>
 8014cc8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014ccc:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014da4 <atanf+0x180>
 8014cd0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014cd4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014da8 <atanf+0x184>
 8014cd8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014cdc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8014dac <atanf+0x188>
 8014ce0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014ce4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8014db0 <atanf+0x18c>
 8014ce8:	eea6 5a87 	vfma.f32	s10, s13, s14
 8014cec:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014db4 <atanf+0x190>
 8014cf0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014cf4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8014db8 <atanf+0x194>
 8014cf8:	eea7 5a26 	vfma.f32	s10, s14, s13
 8014cfc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8014dbc <atanf+0x198>
 8014d00:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014d04:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014d08:	eea5 7a86 	vfma.f32	s14, s11, s12
 8014d0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014d10:	d121      	bne.n	8014d56 <atanf+0x132>
 8014d12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d16:	e794      	b.n	8014c42 <atanf+0x1e>
 8014d18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014d1c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014d20:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014d24:	2301      	movs	r3, #1
 8014d26:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014d2a:	e7be      	b.n	8014caa <atanf+0x86>
 8014d2c:	4b24      	ldr	r3, [pc, #144]	; (8014dc0 <atanf+0x19c>)
 8014d2e:	429c      	cmp	r4, r3
 8014d30:	dc0b      	bgt.n	8014d4a <atanf+0x126>
 8014d32:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014d3a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014d3e:	2302      	movs	r3, #2
 8014d40:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014d48:	e7af      	b.n	8014caa <atanf+0x86>
 8014d4a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014d4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014d52:	2303      	movs	r3, #3
 8014d54:	e7a9      	b.n	8014caa <atanf+0x86>
 8014d56:	4a1b      	ldr	r2, [pc, #108]	; (8014dc4 <atanf+0x1a0>)
 8014d58:	491b      	ldr	r1, [pc, #108]	; (8014dc8 <atanf+0x1a4>)
 8014d5a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014d5e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014d62:	ed93 0a00 	vldr	s0, [r3]
 8014d66:	ee37 7a40 	vsub.f32	s14, s14, s0
 8014d6a:	ed92 0a00 	vldr	s0, [r2]
 8014d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d72:	2d00      	cmp	r5, #0
 8014d74:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014d78:	bfb8      	it	lt
 8014d7a:	eef1 7a67 	vneglt.f32	s15, s15
 8014d7e:	e760      	b.n	8014c42 <atanf+0x1e>
 8014d80:	3fc90fdb 	.word	0x3fc90fdb
 8014d84:	bfc90fdb 	.word	0xbfc90fdb
 8014d88:	3edfffff 	.word	0x3edfffff
 8014d8c:	7149f2ca 	.word	0x7149f2ca
 8014d90:	3f97ffff 	.word	0x3f97ffff
 8014d94:	3c8569d7 	.word	0x3c8569d7
 8014d98:	3d4bda59 	.word	0x3d4bda59
 8014d9c:	bd6ef16b 	.word	0xbd6ef16b
 8014da0:	3d886b35 	.word	0x3d886b35
 8014da4:	3dba2e6e 	.word	0x3dba2e6e
 8014da8:	3e124925 	.word	0x3e124925
 8014dac:	3eaaaaab 	.word	0x3eaaaaab
 8014db0:	bd15a221 	.word	0xbd15a221
 8014db4:	bd9d8795 	.word	0xbd9d8795
 8014db8:	bde38e38 	.word	0xbde38e38
 8014dbc:	be4ccccd 	.word	0xbe4ccccd
 8014dc0:	401bffff 	.word	0x401bffff
 8014dc4:	080158b0 	.word	0x080158b0
 8014dc8:	080158c0 	.word	0x080158c0

08014dcc <fabsf>:
 8014dcc:	ee10 3a10 	vmov	r3, s0
 8014dd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014dd4:	ee00 3a10 	vmov	s0, r3
 8014dd8:	4770      	bx	lr

08014dda <finitef>:
 8014dda:	b082      	sub	sp, #8
 8014ddc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014de0:	9801      	ldr	r0, [sp, #4]
 8014de2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014de6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8014dea:	bfac      	ite	ge
 8014dec:	2000      	movge	r0, #0
 8014dee:	2001      	movlt	r0, #1
 8014df0:	b002      	add	sp, #8
 8014df2:	4770      	bx	lr

08014df4 <floorf>:
 8014df4:	ee10 3a10 	vmov	r3, s0
 8014df8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014dfc:	3a7f      	subs	r2, #127	; 0x7f
 8014dfe:	2a16      	cmp	r2, #22
 8014e00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014e04:	dc2a      	bgt.n	8014e5c <floorf+0x68>
 8014e06:	2a00      	cmp	r2, #0
 8014e08:	da11      	bge.n	8014e2e <floorf+0x3a>
 8014e0a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014e6c <floorf+0x78>
 8014e0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014e12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e1a:	dd05      	ble.n	8014e28 <floorf+0x34>
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	da23      	bge.n	8014e68 <floorf+0x74>
 8014e20:	4a13      	ldr	r2, [pc, #76]	; (8014e70 <floorf+0x7c>)
 8014e22:	2900      	cmp	r1, #0
 8014e24:	bf18      	it	ne
 8014e26:	4613      	movne	r3, r2
 8014e28:	ee00 3a10 	vmov	s0, r3
 8014e2c:	4770      	bx	lr
 8014e2e:	4911      	ldr	r1, [pc, #68]	; (8014e74 <floorf+0x80>)
 8014e30:	4111      	asrs	r1, r2
 8014e32:	420b      	tst	r3, r1
 8014e34:	d0fa      	beq.n	8014e2c <floorf+0x38>
 8014e36:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014e6c <floorf+0x78>
 8014e3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014e3e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e46:	ddef      	ble.n	8014e28 <floorf+0x34>
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	bfbe      	ittt	lt
 8014e4c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8014e50:	fa40 f202 	asrlt.w	r2, r0, r2
 8014e54:	189b      	addlt	r3, r3, r2
 8014e56:	ea23 0301 	bic.w	r3, r3, r1
 8014e5a:	e7e5      	b.n	8014e28 <floorf+0x34>
 8014e5c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014e60:	d3e4      	bcc.n	8014e2c <floorf+0x38>
 8014e62:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014e66:	4770      	bx	lr
 8014e68:	2300      	movs	r3, #0
 8014e6a:	e7dd      	b.n	8014e28 <floorf+0x34>
 8014e6c:	7149f2ca 	.word	0x7149f2ca
 8014e70:	bf800000 	.word	0xbf800000
 8014e74:	007fffff 	.word	0x007fffff

08014e78 <nanf>:
 8014e78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014e80 <nanf+0x8>
 8014e7c:	4770      	bx	lr
 8014e7e:	bf00      	nop
 8014e80:	7fc00000 	.word	0x7fc00000

08014e84 <scalbnf>:
 8014e84:	ee10 3a10 	vmov	r3, s0
 8014e88:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8014e8c:	d025      	beq.n	8014eda <scalbnf+0x56>
 8014e8e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014e92:	d302      	bcc.n	8014e9a <scalbnf+0x16>
 8014e94:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014e98:	4770      	bx	lr
 8014e9a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8014e9e:	d122      	bne.n	8014ee6 <scalbnf+0x62>
 8014ea0:	4b2a      	ldr	r3, [pc, #168]	; (8014f4c <scalbnf+0xc8>)
 8014ea2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014f50 <scalbnf+0xcc>
 8014ea6:	4298      	cmp	r0, r3
 8014ea8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014eac:	db16      	blt.n	8014edc <scalbnf+0x58>
 8014eae:	ee10 3a10 	vmov	r3, s0
 8014eb2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014eb6:	3a19      	subs	r2, #25
 8014eb8:	4402      	add	r2, r0
 8014eba:	2afe      	cmp	r2, #254	; 0xfe
 8014ebc:	dd15      	ble.n	8014eea <scalbnf+0x66>
 8014ebe:	ee10 3a10 	vmov	r3, s0
 8014ec2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8014f54 <scalbnf+0xd0>
 8014ec6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014f58 <scalbnf+0xd4>
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	eeb0 7a67 	vmov.f32	s14, s15
 8014ed0:	bfb8      	it	lt
 8014ed2:	eef0 7a66 	vmovlt.f32	s15, s13
 8014ed6:	ee27 0a27 	vmul.f32	s0, s14, s15
 8014eda:	4770      	bx	lr
 8014edc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014f5c <scalbnf+0xd8>
 8014ee0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014ee4:	4770      	bx	lr
 8014ee6:	0dd2      	lsrs	r2, r2, #23
 8014ee8:	e7e6      	b.n	8014eb8 <scalbnf+0x34>
 8014eea:	2a00      	cmp	r2, #0
 8014eec:	dd06      	ble.n	8014efc <scalbnf+0x78>
 8014eee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014ef2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014ef6:	ee00 3a10 	vmov	s0, r3
 8014efa:	4770      	bx	lr
 8014efc:	f112 0f16 	cmn.w	r2, #22
 8014f00:	da1a      	bge.n	8014f38 <scalbnf+0xb4>
 8014f02:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014f06:	4298      	cmp	r0, r3
 8014f08:	ee10 3a10 	vmov	r3, s0
 8014f0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014f10:	dd0a      	ble.n	8014f28 <scalbnf+0xa4>
 8014f12:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8014f54 <scalbnf+0xd0>
 8014f16:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014f58 <scalbnf+0xd4>
 8014f1a:	eef0 7a40 	vmov.f32	s15, s0
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	bf18      	it	ne
 8014f22:	eeb0 0a47 	vmovne.f32	s0, s14
 8014f26:	e7db      	b.n	8014ee0 <scalbnf+0x5c>
 8014f28:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8014f5c <scalbnf+0xd8>
 8014f2c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014f60 <scalbnf+0xdc>
 8014f30:	eef0 7a40 	vmov.f32	s15, s0
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	e7f3      	b.n	8014f20 <scalbnf+0x9c>
 8014f38:	3219      	adds	r2, #25
 8014f3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014f3e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014f42:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014f64 <scalbnf+0xe0>
 8014f46:	ee07 3a10 	vmov	s14, r3
 8014f4a:	e7c4      	b.n	8014ed6 <scalbnf+0x52>
 8014f4c:	ffff3cb0 	.word	0xffff3cb0
 8014f50:	4c000000 	.word	0x4c000000
 8014f54:	7149f2ca 	.word	0x7149f2ca
 8014f58:	f149f2ca 	.word	0xf149f2ca
 8014f5c:	0da24260 	.word	0x0da24260
 8014f60:	8da24260 	.word	0x8da24260
 8014f64:	33000000 	.word	0x33000000

08014f68 <_init>:
 8014f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f6a:	bf00      	nop
 8014f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f6e:	bc08      	pop	{r3}
 8014f70:	469e      	mov	lr, r3
 8014f72:	4770      	bx	lr

08014f74 <_fini>:
 8014f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f76:	bf00      	nop
 8014f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f7a:	bc08      	pop	{r3}
 8014f7c:	469e      	mov	lr, r3
 8014f7e:	4770      	bx	lr
