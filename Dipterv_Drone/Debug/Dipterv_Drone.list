
Dipterv_Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000151e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e8  08015378  08015378  00025378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015d60  08015d60  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08015d60  08015d60  00025d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015d68  08015d68  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015d68  08015d68  00025d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015d6c  08015d6c  00025d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08015d70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301ec  2**0
                  CONTENTS
 10 .bss          000066d8  200001f0  200001f0  000301f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200068c8  200068c8  000301f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022213  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004427  00000000  00000000  0005242f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d98  00000000  00000000  00056858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001bf8  00000000  00000000  000585f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c14  00000000  00000000  0005a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021baf  00000000  00000000  0007fdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0d57  00000000  00000000  000a19ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00182702  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000096e4  00000000  00000000  00182754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015360 	.word	0x08015360

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08015360 	.word	0x08015360

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <vApplicationGetIdleTaskMemory+0x30>)
 8000fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000020c 	.word	0x2000020c
 8000fbc:	20000260 	.word	0x20000260

08000fc0 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000fe4 <FusionRadiansToDegrees+0x24>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	42652ee0 	.word	0x42652ee0

08000fe8 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	d802      	bhi.n	800100a <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8001004:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001038 <FusionAsin+0x50>
 8001008:	e011      	b.n	800102e <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101a:	db02      	blt.n	8001022 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 800101c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800103c <FusionAsin+0x54>
 8001020:	e005      	b.n	800102e <FusionAsin+0x46>
    }
    return asinf(value);
 8001022:	ed97 0a01 	vldr	s0, [r7, #4]
 8001026:	f011 fff3 	bl	8013010 <asinf>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	bfc90fdb 	.word	0xbfc90fdb
 800103c:	3fc90fdb 	.word	0x3fc90fdb

08001040 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8001040:	b480      	push	{r7}
 8001042:	b091      	sub	sp, #68	; 0x44
 8001044:	af00      	add	r7, sp, #0
 8001046:	eeb0 5a40 	vmov.f32	s10, s0
 800104a:	eef0 5a60 	vmov.f32	s11, s1
 800104e:	eeb0 6a41 	vmov.f32	s12, s2
 8001052:	eef0 6a61 	vmov.f32	s13, s3
 8001056:	eeb0 7a42 	vmov.f32	s14, s4
 800105a:	eef0 7a62 	vmov.f32	s15, s5
 800105e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001062:	edc7 5a08 	vstr	s11, [r7, #32]
 8001066:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800106a:	edc7 6a04 	vstr	s13, [r7, #16]
 800106e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001072:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8001076:	ed97 7a07 	vldr	s14, [r7, #28]
 800107a:	edd7 7a04 	vldr	s15, [r7, #16]
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001082:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8001086:	ed97 7a08 	vldr	s14, [r7, #32]
 800108a:	edd7 7a05 	vldr	s15, [r7, #20]
 800108e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001092:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8001096:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800109a:	edd7 7a06 	vldr	s15, [r7, #24]
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80010a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ba:	ee06 1a90 	vmov	s13, r1
 80010be:	ee07 2a10 	vmov	s14, r2
 80010c2:	ee07 3a90 	vmov	s15, r3
}
 80010c6:	eeb0 0a66 	vmov.f32	s0, s13
 80010ca:	eef0 0a47 	vmov.f32	s1, s14
 80010ce:	eeb0 1a67 	vmov.f32	s2, s15
 80010d2:	3744      	adds	r7, #68	; 0x44
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80010dc:	b480      	push	{r7}
 80010de:	b08f      	sub	sp, #60	; 0x3c
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	eef0 6a40 	vmov.f32	s13, s0
 80010e6:	eeb0 7a60 	vmov.f32	s14, s1
 80010ea:	eef0 7a41 	vmov.f32	s15, s2
 80010ee:	edc7 1a04 	vstr	s3, [r7, #16]
 80010f2:	edc7 6a05 	vstr	s13, [r7, #20]
 80010f6:	ed87 7a06 	vstr	s14, [r7, #24]
 80010fa:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 80010fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001102:	edd7 7a04 	vldr	s15, [r7, #16]
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800110a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800110e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001112:	edd7 7a04 	vldr	s15, [r7, #16]
 8001116:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800111a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800111e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001122:	edd7 7a04 	vldr	s15, [r7, #16]
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800112a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800112e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001132:	f107 0220 	add.w	r2, r7, #32
 8001136:	ca07      	ldmia	r2, {r0, r1, r2}
 8001138:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800113c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800113e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001142:	ee06 1a90 	vmov	s13, r1
 8001146:	ee07 2a10 	vmov	s14, r2
 800114a:	ee07 3a90 	vmov	s15, r3
}
 800114e:	eeb0 0a66 	vmov.f32	s0, s13
 8001152:	eef0 0a47 	vmov.f32	s1, s14
 8001156:	eeb0 1a67 	vmov.f32	s2, s15
 800115a:	373c      	adds	r7, #60	; 0x3c
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001164:	b084      	sub	sp, #16
 8001166:	b480      	push	{r7}
 8001168:	b08f      	sub	sp, #60	; 0x3c
 800116a:	af00      	add	r7, sp, #0
 800116c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8001170:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001174:	eef0 6a40 	vmov.f32	s13, s0
 8001178:	eeb0 7a60 	vmov.f32	s14, s1
 800117c:	eef0 7a41 	vmov.f32	s15, s2
 8001180:	edc7 6a05 	vstr	s13, [r7, #20]
 8001184:	ed87 7a06 	vstr	s14, [r7, #24]
 8001188:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 800118c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001190:	edd7 7a05 	vldr	s15, [r7, #20]
 8001194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001198:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800119c:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80011ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011b8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80011bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80011cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80011dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 80011ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80011fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001208:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800120c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001218:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	f107 0220 	add.w	r2, r7, #32
 8001224:	ca07      	ldmia	r2, {r0, r1, r2}
 8001226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800122a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800122c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001230:	ee06 1a90 	vmov	s13, r1
 8001234:	ee07 2a10 	vmov	s14, r2
 8001238:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800123c:	eeb0 0a66 	vmov.f32	s0, s13
 8001240:	eef0 0a47 	vmov.f32	s1, s14
 8001244:	eeb0 1a67 	vmov.f32	s2, s15
 8001248:	373c      	adds	r7, #60	; 0x3c
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	b004      	add	sp, #16
 8001252:	4770      	bx	lr

08001254 <FusionQuaternionToMatrix>:
/**
 * @brief Converts a quaternion to a rotation matrix.
 * @param quaternion Quaternion.
 * @return Rotation matrix.
 */
static inline FusionMatrix FusionQuaternionToMatrix(const FusionQuaternion quaternion) {
 8001254:	b4b0      	push	{r4, r5, r7}
 8001256:	b097      	sub	sp, #92	; 0x5c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6178      	str	r0, [r7, #20]
 800125c:	eeb0 6a40 	vmov.f32	s12, s0
 8001260:	eef0 6a60 	vmov.f32	s13, s1
 8001264:	eeb0 7a41 	vmov.f32	s14, s2
 8001268:	eef0 7a61 	vmov.f32	s15, s3
 800126c:	ed87 6a01 	vstr	s12, [r7, #4]
 8001270:	edc7 6a02 	vstr	s13, [r7, #8]
 8001274:	ed87 7a03 	vstr	s14, [r7, #12]
 8001278:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q quaternion.element
    const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 800127c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001280:	edd7 7a01 	vldr	s15, [r7, #4]
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    const float qwqx = Q.w * Q.x;
 800128c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001290:	edd7 7a02 	vldr	s15, [r7, #8]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    const float qwqy = Q.w * Q.y;
 800129c:	ed97 7a01 	vldr	s14, [r7, #4]
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    const float qwqz = Q.w * Q.z;
 80012ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    const float qxqy = Q.x * Q.y;
 80012bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    const float qxqz = Q.x * Q.z;
 80012cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    const float qyqz = Q.y * Q.z;
 80012dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionMatrix matrix = {.element = {
            .xx = 2.0f * (qwqw - 0.5f + Q.x * Q.x),
 80012ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80012f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80012fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800130c:	edc7 7a06 	vstr	s15, [r7, #24]
            .xy = 2.0f * (qxqy - qwqz),
 8001310:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001314:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001320:	edc7 7a07 	vstr	s15, [r7, #28]
            .xz = 2.0f * (qxqz + qwqy),
 8001324:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001328:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001334:	edc7 7a08 	vstr	s15, [r7, #32]
            .yx = 2.0f * (qxqy + qwqz),
 8001338:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800133c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001348:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .yy = 2.0f * (qwqw - 0.5f + Q.y * Q.y),
 800134c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001350:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001354:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001358:	edd7 6a03 	vldr	s13, [r7, #12]
 800135c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001368:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 800136c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yz = 2.0f * (qyqz - qwqx),
 8001370:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001374:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001380:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .zx = 2.0f * (qxqz - qwqy),
 8001384:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001388:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 8001394:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .zy = 2.0f * (qyqz + qwqx),
 8001398:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800139c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .zz = 2.0f * (qwqw - 0.5f + Q.z * Q.z),
 80013ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80013bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionMatrix matrix = {.element = {
 80013cc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    }};
    return matrix;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	461d      	mov	r5, r3
 80013d4:	f107 0418 	add.w	r4, r7, #24
 80013d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	602b      	str	r3, [r5, #0]
#undef Q
}
 80013e4:	6978      	ldr	r0, [r7, #20]
 80013e6:	375c      	adds	r7, #92	; 0x5c
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bcb0      	pop	{r4, r5, r7}
 80013ec:	4770      	bx	lr

080013ee <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b090      	sub	sp, #64	; 0x40
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	eeb0 6a40 	vmov.f32	s12, s0
 80013f8:	eef0 6a60 	vmov.f32	s13, s1
 80013fc:	eeb0 7a41 	vmov.f32	s14, s2
 8001400:	eef0 7a61 	vmov.f32	s15, s3
 8001404:	ed87 6a04 	vstr	s12, [r7, #16]
 8001408:	edc7 6a05 	vstr	s13, [r7, #20]
 800140c:	ed87 7a06 	vstr	s14, [r7, #24]
 8001410:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8001414:	ed97 7a06 	vldr	s14, [r7, #24]
 8001418:	edd7 7a06 	vldr	s15, [r7, #24]
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001428:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 800142c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001430:	edd7 7a05 	vldr	s15, [r7, #20]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001438:	edd7 6a06 	vldr	s13, [r7, #24]
 800143c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001448:	ed97 7a05 	vldr	s14, [r7, #20]
 800144c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001454:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145c:	eef0 0a67 	vmov.f32	s1, s15
 8001460:	eeb0 0a66 	vmov.f32	s0, s13
 8001464:	f011 fe00 	bl	8013068 <atan2f>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	f7ff fda6 	bl	8000fc0 <FusionRadiansToDegrees>
 8001474:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001478:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 800147c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001480:	edd7 7a06 	vldr	s15, [r7, #24]
 8001484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001488:	edd7 6a07 	vldr	s13, [r7, #28]
 800148c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001498:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	f7ff fda2 	bl	8000fe8 <FusionAsin>
 80014a4:	eef0 7a40 	vmov.f32	s15, s0
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	f7ff fd88 	bl	8000fc0 <FusionRadiansToDegrees>
 80014b0:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80014b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 80014b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80014bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80014d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80014d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e8:	eef0 0a67 	vmov.f32	s1, s15
 80014ec:	eeb0 0a66 	vmov.f32	s0, s13
 80014f0:	f011 fdba 	bl	8013068 <atan2f>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	f7ff fd60 	bl	8000fc0 <FusionRadiansToDegrees>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001504:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8001508:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800150c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001510:	ca07      	ldmia	r2, {r0, r1, r2}
 8001512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151c:	ee06 1a90 	vmov	s13, r1
 8001520:	ee07 2a10 	vmov	s14, r2
 8001524:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8001528:	eeb0 0a66 	vmov.f32	s0, s13
 800152c:	eef0 0a47 	vmov.f32	s1, s14
 8001530:	eeb0 1a67 	vmov.f32	s2, s15
 8001534:	3740      	adds	r7, #64	; 0x40
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b096      	sub	sp, #88	; 0x58
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f003 ff5d 	bl	8005400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f8a1 	bl	800168c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f000 fda9 	bl	80020a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800154e:	f000 fd87 	bl	8002060 <MX_DMA_Init>
  MX_TIM2_Init();
 8001552:	f000 fabb 	bl	8001acc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001556:	f000 fd05 	bl	8001f64 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800155a:	f000 f9f7 	bl	800194c <MX_I2C1_Init>
  MX_I2C2_Init();
 800155e:	f000 fa23 	bl	80019a8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001562:	f000 fa4f 	bl	8001a04 <MX_I2C3_Init>
  MX_TIM3_Init();
 8001566:	f000 fb21 	bl	8001bac <MX_TIM3_Init>
  MX_TIM4_Init();
 800156a:	f000 fbcd 	bl	8001d08 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800156e:	f000 fccf 	bl	8001f10 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001572:	f000 fd21 	bl	8001fb8 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8001576:	f000 fa73 	bl	8001a60 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 800157a:	f000 fd47 	bl	800200c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800157e:	f000 f8ef 	bl	8001760 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001582:	f000 f93f 	bl	8001804 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001586:	f000 f98f 	bl	80018a8 <MX_ADC3_Init>
  MX_TIM6_Init();
 800158a:	f000 fc31 	bl	8001df0 <MX_TIM6_Init>
  MX_TIM7_Init();
 800158e:	f000 fc65 	bl	8001e5c <MX_TIM7_Init>
  MX_TIM10_Init();
 8001592:	f000 fc99 	bl	8001ec8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */




  __HAL_SPI_ENABLE(&hspi2);
 8001596:	4b32      	ldr	r3, [pc, #200]	; (8001660 <main+0x124>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <main+0x124>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015a4:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_1  );
 80015a6:	2100      	movs	r1, #0
 80015a8:	482e      	ldr	r0, [pc, #184]	; (8001664 <main+0x128>)
 80015aa:	f007 fc65 	bl	8008e78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_2  );
 80015ae:	2104      	movs	r1, #4
 80015b0:	482c      	ldr	r0, [pc, #176]	; (8001664 <main+0x128>)
 80015b2:	f007 fc61 	bl	8008e78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_3  );
 80015b6:	2108      	movs	r1, #8
 80015b8:	482a      	ldr	r0, [pc, #168]	; (8001664 <main+0x128>)
 80015ba:	f007 fc5d 	bl	8008e78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start  ( &htim3,  TIM_CHANNEL_4  );
 80015be:	210c      	movs	r1, #12
 80015c0:	4828      	ldr	r0, [pc, #160]	; (8001664 <main+0x128>)
 80015c2:	f007 fc59 	bl	8008e78 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start  ( &htim10 );
 80015c6:	4828      	ldr	r0, [pc, #160]	; (8001668 <main+0x12c>)
 80015c8:	f007 fb24 	bl	8008c14 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  telemetria_Queue = xQueueCreate( 3, 3*sizeof( float ) );
 80015cc:	2200      	movs	r2, #0
 80015ce:	210c      	movs	r1, #12
 80015d0:	2003      	movs	r0, #3
 80015d2:	f00c feb3 	bl	800e33c <xQueueGenericCreate>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a24      	ldr	r2, [pc, #144]	; (800166c <main+0x130>)
 80015da:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 500);
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <main+0x134>)
 80015de:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80015e2:	461d      	mov	r5, r3
 80015e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00c fd23 	bl	800e042 <osThreadCreate>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <main+0x138>)
 8001600:	6013      	str	r3, [r2, #0]

  /* definition and creation of Data_Reading */
  osThreadDef(Data_Reading, Start_Data_Reading, osPriorityNormal, 0, 600);
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <main+0x13c>)
 8001604:	f107 0420 	add.w	r4, r7, #32
 8001608:	461d      	mov	r5, r3
 800160a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Data_ReadingHandle = osThreadCreate(osThread(Data_Reading), NULL);
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f00c fd10 	bl	800e042 <osThreadCreate>
 8001622:	4603      	mov	r3, r0
 8001624:	4a15      	ldr	r2, [pc, #84]	; (800167c <main+0x140>)
 8001626:	6013      	str	r3, [r2, #0]

  /* definition and creation of Orientation_cal */
  osThreadDef(Orientation_cal, Start_Orientation, osPriorityBelowNormal, 0, 200);
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <main+0x144>)
 800162a:	1d3c      	adds	r4, r7, #4
 800162c:	461d      	mov	r5, r3
 800162e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Orientation_calHandle = osThreadCreate(osThread(Orientation_cal), NULL);
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f00c fcff 	bl	800e042 <osThreadCreate>
 8001644:	4603      	mov	r3, r0
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <main+0x148>)
 8001648:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800164a:	f00c fcf3 	bl	800e034 <osKernelStart>

  while (1)
  {


	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800164e:	2108      	movs	r1, #8
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <main+0x14c>)
 8001652:	f005 f896 	bl	8006782 <HAL_GPIO_TogglePin>

	  HAL_Delay(3);
 8001656:	2003      	movs	r0, #3
 8001658:	f003 ff44 	bl	80054e4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800165c:	e7f7      	b.n	800164e <main+0x112>
 800165e:	bf00      	nop
 8001660:	20000634 	.word	0x20000634
 8001664:	200006d4 	.word	0x200006d4
 8001668:	200007f4 	.word	0x200007f4
 800166c:	20002b54 	.word	0x20002b54
 8001670:	080153a4 	.word	0x080153a4
 8001674:	200009ac 	.word	0x200009ac
 8001678:	080153c0 	.word	0x080153c0
 800167c:	200009b0 	.word	0x200009b0
 8001680:	080153dc 	.word	0x080153dc
 8001684:	200009b4 	.word	0x200009b4
 8001688:	40020400 	.word	0x40020400

0800168c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b094      	sub	sp, #80	; 0x50
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	f107 0320 	add.w	r3, r7, #32
 8001696:	2230      	movs	r2, #48	; 0x30
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f00e fd26 	bl	80100ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <SystemClock_Config+0xcc>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	4a27      	ldr	r2, [pc, #156]	; (8001758 <SystemClock_Config+0xcc>)
 80016ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016be:	6413      	str	r3, [r2, #64]	; 0x40
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <SystemClock_Config+0xcc>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <SystemClock_Config+0xd0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a21      	ldr	r2, [pc, #132]	; (800175c <SystemClock_Config+0xd0>)
 80016d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <SystemClock_Config+0xd0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e8:	2301      	movs	r3, #1
 80016ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f2:	2302      	movs	r3, #2
 80016f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016fc:	2304      	movs	r3, #4
 80016fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001700:	23a8      	movs	r3, #168	; 0xa8
 8001702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001704:	2302      	movs	r3, #2
 8001706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001708:	2304      	movs	r3, #4
 800170a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	4618      	mov	r0, r3
 8001712:	f006 f957 	bl	80079c4 <HAL_RCC_OscConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800171c:	f002 f8b6 	bl	800388c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001720:	230f      	movs	r3, #15
 8001722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001724:	2302      	movs	r3, #2
 8001726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800172c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	2105      	movs	r1, #5
 800173e:	4618      	mov	r0, r3
 8001740:	f006 fbb8 	bl	8007eb4 <HAL_RCC_ClockConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800174a:	f002 f89f 	bl	800388c <Error_Handler>
  }
}
 800174e:	bf00      	nop
 8001750:	3750      	adds	r7, #80	; 0x50
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40007000 	.word	0x40007000

08001760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001766:	463b      	mov	r3, r7
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <MX_ADC1_Init+0x98>)
 8001774:	4a21      	ldr	r2, [pc, #132]	; (80017fc <MX_ADC1_Init+0x9c>)
 8001776:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <MX_ADC1_Init+0x98>)
 800177a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800177e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <MX_ADC1_Init+0x98>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_ADC1_Init+0x98>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_ADC1_Init+0x98>)
 800178e:	2200      	movs	r2, #0
 8001790:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_ADC1_Init+0x98>)
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_ADC1_Init+0x98>)
 800179c:	2200      	movs	r2, #0
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017a2:	4a17      	ldr	r2, [pc, #92]	; (8001800 <MX_ADC1_Init+0xa0>)
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017bc:	2201      	movs	r2, #1
 80017be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017c2:	f003 feb3 	bl	800552c <HAL_ADC_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017cc:	f002 f85e 	bl	800388c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017d0:	2305      	movs	r3, #5
 80017d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017dc:	463b      	mov	r3, r7
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_ADC1_Init+0x98>)
 80017e2:	f003 fee7 	bl	80055b4 <HAL_ADC_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017ec:	f002 f84e 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000460 	.word	0x20000460
 80017fc:	40012000 	.word	0x40012000
 8001800:	0f000001 	.word	0x0f000001

08001804 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800180a:	463b      	mov	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <MX_ADC2_Init+0x98>)
 8001818:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <MX_ADC2_Init+0x9c>)
 800181a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_ADC2_Init+0x98>)
 800181e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001822:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <MX_ADC2_Init+0x98>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <MX_ADC2_Init+0x98>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <MX_ADC2_Init+0x98>)
 8001832:	2200      	movs	r2, #0
 8001834:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <MX_ADC2_Init+0x98>)
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <MX_ADC2_Init+0x98>)
 8001840:	2200      	movs	r2, #0
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <MX_ADC2_Init+0x98>)
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <MX_ADC2_Init+0xa0>)
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_ADC2_Init+0x98>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_ADC2_Init+0x98>)
 8001852:	2201      	movs	r2, #1
 8001854:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_ADC2_Init+0x98>)
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_ADC2_Init+0x98>)
 8001860:	2201      	movs	r2, #1
 8001862:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001864:	480d      	ldr	r0, [pc, #52]	; (800189c <MX_ADC2_Init+0x98>)
 8001866:	f003 fe61 	bl	800552c <HAL_ADC_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001870:	f002 f80c 	bl	800388c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001874:	2304      	movs	r3, #4
 8001876:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001878:	2301      	movs	r3, #1
 800187a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_ADC2_Init+0x98>)
 8001886:	f003 fe95 	bl	80055b4 <HAL_ADC_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001890:	f001 fffc 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200004a8 	.word	0x200004a8
 80018a0:	40012100 	.word	0x40012100
 80018a4:	0f000001 	.word	0x0f000001

080018a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ae:	463b      	mov	r3, r7
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <MX_ADC3_Init+0x98>)
 80018bc:	4a21      	ldr	r2, [pc, #132]	; (8001944 <MX_ADC3_Init+0x9c>)
 80018be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <MX_ADC3_Init+0x98>)
 80018c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018c6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <MX_ADC3_Init+0x98>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <MX_ADC3_Init+0x98>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <MX_ADC3_Init+0x98>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <MX_ADC3_Init+0x98>)
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <MX_ADC3_Init+0x98>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <MX_ADC3_Init+0x98>)
 80018ea:	4a17      	ldr	r2, [pc, #92]	; (8001948 <MX_ADC3_Init+0xa0>)
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <MX_ADC3_Init+0x98>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80018f4:	4b12      	ldr	r3, [pc, #72]	; (8001940 <MX_ADC3_Init+0x98>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <MX_ADC3_Init+0x98>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <MX_ADC3_Init+0x98>)
 8001904:	2201      	movs	r2, #1
 8001906:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <MX_ADC3_Init+0x98>)
 800190a:	f003 fe0f 	bl	800552c <HAL_ADC_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001914:	f001 ffba 	bl	800388c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001918:	230d      	movs	r3, #13
 800191a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800191c:	2301      	movs	r3, #1
 800191e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001924:	463b      	mov	r3, r7
 8001926:	4619      	mov	r1, r3
 8001928:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_ADC3_Init+0x98>)
 800192a:	f003 fe43 	bl	80055b4 <HAL_ADC_ConfigChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001934:	f001 ffaa 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200004f0 	.word	0x200004f0
 8001944:	40012200 	.word	0x40012200
 8001948:	0f000001 	.word	0x0f000001

0800194c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <MX_I2C1_Init+0x50>)
 8001952:	4a13      	ldr	r2, [pc, #76]	; (80019a0 <MX_I2C1_Init+0x54>)
 8001954:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <MX_I2C1_Init+0x50>)
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <MX_I2C1_Init+0x58>)
 800195a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <MX_I2C1_Init+0x50>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_I2C1_Init+0x50>)
 8001964:	2200      	movs	r2, #0
 8001966:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_I2C1_Init+0x50>)
 800196a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001970:	4b0a      	ldr	r3, [pc, #40]	; (800199c <MX_I2C1_Init+0x50>)
 8001972:	2200      	movs	r2, #0
 8001974:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_I2C1_Init+0x50>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <MX_I2C1_Init+0x50>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_I2C1_Init+0x50>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001988:	4804      	ldr	r0, [pc, #16]	; (800199c <MX_I2C1_Init+0x50>)
 800198a:	f004 ff2d 	bl	80067e8 <HAL_I2C_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001994:	f001 ff7a 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000538 	.word	0x20000538
 80019a0:	40005400 	.word	0x40005400
 80019a4:	00061a80 	.word	0x00061a80

080019a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019ae:	4a13      	ldr	r2, [pc, #76]	; (80019fc <MX_I2C2_Init+0x54>)
 80019b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019b4:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <MX_I2C2_Init+0x58>)
 80019b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <MX_I2C2_Init+0x50>)
 80019e6:	f004 feff 	bl	80067e8 <HAL_I2C_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019f0:	f001 ff4c 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	2000058c 	.word	0x2000058c
 80019fc:	40005800 	.word	0x40005800
 8001a00:	00061a80 	.word	0x00061a80

08001a04 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a0a:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <MX_I2C3_Init+0x54>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a10:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <MX_I2C3_Init+0x58>)
 8001a12:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a26:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a40:	4804      	ldr	r0, [pc, #16]	; (8001a54 <MX_I2C3_Init+0x50>)
 8001a42:	f004 fed1 	bl	80067e8 <HAL_I2C_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a4c:	f001 ff1e 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200005e0 	.word	0x200005e0
 8001a58:	40005c00 	.word	0x40005c00
 8001a5c:	00061a80 	.word	0x00061a80

08001a60 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a66:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <MX_SPI2_Init+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a70:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a90:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a94:	2220      	movs	r2, #32
 8001a96:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001aac:	220a      	movs	r2, #10
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <MX_SPI2_Init+0x64>)
 8001ab2:	f006 fc1f 	bl	80082f4 <HAL_SPI_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001abc:	f001 fee6 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000634 	.word	0x20000634
 8001ac8:	40003800 	.word	0x40003800

08001acc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad2:	f107 0318 	add.w	r3, r7, #24
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001aea:	463b      	mov	r3, r7
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af6:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001af8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001afc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b00:	2253      	movs	r2, #83	; 0x53
 8001b02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b04:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001b0a:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b12:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b18:	4b23      	ldr	r3, [pc, #140]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b1e:	4822      	ldr	r0, [pc, #136]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b20:	f007 f828 	bl	8008b74 <HAL_TIM_Base_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001b2a:	f001 feaf 	bl	800388c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b32:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	4619      	mov	r1, r3
 8001b3a:	481b      	ldr	r0, [pc, #108]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b3c:	f007 fd24 	bl	8009588 <HAL_TIM_ConfigClockSource>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b46:	f001 fea1 	bl	800388c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b4a:	4817      	ldr	r0, [pc, #92]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b4c:	f007 fa5c 	bl	8009008 <HAL_TIM_IC_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b56:	f001 fe99 	bl	800388c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	4619      	mov	r1, r3
 8001b68:	480f      	ldr	r0, [pc, #60]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b6a:	f008 fb45 	bl	800a1f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001b74:	f001 fe8a 	bl	800388c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <MX_TIM2_Init+0xdc>)
 8001b90:	f007 fb9b 	bl	80092ca <HAL_TIM_IC_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001b9a:	f001 fe77 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	; 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000068c 	.word	0x2000068c

08001bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b092      	sub	sp, #72	; 0x48
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	615a      	str	r2, [r3, #20]
 8001bea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bec:	4b44      	ldr	r3, [pc, #272]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001bee:	4a45      	ldr	r2, [pc, #276]	; (8001d04 <MX_TIM3_Init+0x158>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7-1;
 8001bf2:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001bf4:	2206      	movs	r2, #6
 8001bf6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001bfe:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b3c      	ldr	r3, [pc, #240]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c12:	483b      	ldr	r0, [pc, #236]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c14:	f006 ffae 	bl	8008b74 <HAL_TIM_Base_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c1e:	f001 fe35 	bl	800388c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4834      	ldr	r0, [pc, #208]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c30:	f007 fcaa 	bl	8009588 <HAL_TIM_ConfigClockSource>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c3a:	f001 fe27 	bl	800388c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c3e:	4830      	ldr	r0, [pc, #192]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c40:	f007 f8c0 	bl	8008dc4 <HAL_TIM_PWM_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001c4a:	f001 fe1f 	bl	800388c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001c52:	2330      	movs	r3, #48	; 0x30
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4828      	ldr	r0, [pc, #160]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c5e:	f007 fd5a 	bl	8009716 <HAL_TIM_SlaveConfigSynchro>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001c68:	f001 fe10 	bl	800388c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4821      	ldr	r0, [pc, #132]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001c7c:	f008 fabc 	bl	800a1f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001c86:	f001 fe01 	bl	800388c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8a:	2360      	movs	r3, #96	; 0x60
 8001c8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4817      	ldr	r0, [pc, #92]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001ca2:	f007 fbaf 	bl	8009404 <HAL_TIM_PWM_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001cac:	f001 fdee 	bl	800388c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4812      	ldr	r0, [pc, #72]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001cb8:	f007 fba4 	bl	8009404 <HAL_TIM_PWM_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001cc2:	f001 fde3 	bl	800388c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	2208      	movs	r2, #8
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001cce:	f007 fb99 	bl	8009404 <HAL_TIM_PWM_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8001cd8:	f001 fdd8 	bl	800388c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	220c      	movs	r2, #12
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4807      	ldr	r0, [pc, #28]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001ce4:	f007 fb8e 	bl	8009404 <HAL_TIM_PWM_ConfigChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8001cee:	f001 fdcd 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cf2:	4803      	ldr	r0, [pc, #12]	; (8001d00 <MX_TIM3_Init+0x154>)
 8001cf4:	f002 f88c 	bl	8003e10 <HAL_TIM_MspPostInit>

}
 8001cf8:	bf00      	nop
 8001cfa:	3748      	adds	r7, #72	; 0x48
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	200006d4 	.word	0x200006d4
 8001d04:	40000400 	.word	0x40000400

08001d08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08e      	sub	sp, #56	; 0x38
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
 8001d34:	615a      	str	r2, [r3, #20]
 8001d36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d38:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d3a:	4a2c      	ldr	r2, [pc, #176]	; (8001dec <MX_TIM4_Init+0xe4>)
 8001d3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d44:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d52:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d58:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d5e:	4822      	ldr	r0, [pc, #136]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d60:	f006 ff08 	bl	8008b74 <HAL_TIM_Base_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d6a:	f001 fd8f 	bl	800388c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	481b      	ldr	r0, [pc, #108]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d7c:	f007 fc04 	bl	8009588 <HAL_TIM_ConfigClockSource>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d86:	f001 fd81 	bl	800388c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d8a:	4817      	ldr	r0, [pc, #92]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001d8c:	f007 f81a 	bl	8008dc4 <HAL_TIM_PWM_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d96:	f001 fd79 	bl	800388c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001da2:	f107 0320 	add.w	r3, r7, #32
 8001da6:	4619      	mov	r1, r3
 8001da8:	480f      	ldr	r0, [pc, #60]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001daa:	f008 fa25 	bl	800a1f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001db4:	f001 fd6a 	bl	800388c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db8:	2360      	movs	r3, #96	; 0x60
 8001dba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	2200      	movs	r2, #0
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	; (8001de8 <MX_TIM4_Init+0xe0>)
 8001dd0:	f007 fb18 	bl	8009404 <HAL_TIM_PWM_ConfigChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001dda:	f001 fd57 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	3738      	adds	r7, #56	; 0x38
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000071c 	.word	0x2000071c
 8001dec:	40000800 	.word	0x40000800

08001df0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df6:	463b      	mov	r3, r7
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e00:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <MX_TIM6_Init+0x68>)
 8001e02:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e06:	2253      	movs	r2, #83	; 0x53
 8001e08:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65000;
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e12:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001e16:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e1e:	480d      	ldr	r0, [pc, #52]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e20:	f006 fea8 	bl	8008b74 <HAL_TIM_Base_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e2a:	f001 fd2f 	bl	800388c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e36:	463b      	mov	r3, r7
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4806      	ldr	r0, [pc, #24]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e3c:	f008 f9dc 	bl	800a1f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e46:	f001 fd21 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000764 	.word	0x20000764
 8001e58:	40001000 	.word	0x40001000

08001e5c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e62:	463b      	mov	r3, r7
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e6c:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <MX_TIM7_Init+0x68>)
 8001e6e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 85-1;
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e72:	2254      	movs	r2, #84	; 0x54
 8001e74:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e7e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e82:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e8a:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001e8c:	f006 fe72 	bl	8008b74 <HAL_TIM_Base_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001e96:	f001 fcf9 	bl	800388c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ea2:	463b      	mov	r3, r7
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4806      	ldr	r0, [pc, #24]	; (8001ec0 <MX_TIM7_Init+0x64>)
 8001ea8:	f008 f9a6 	bl	800a1f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001eb2:	f001 fceb 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200007ac 	.word	0x200007ac
 8001ec4:	40001400 	.word	0x40001400

08001ec8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001ece:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <MX_TIM10_Init+0x44>)
 8001ed0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001ed4:	22a7      	movs	r2, #167	; 0xa7
 8001ed6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <MX_TIM10_Init+0x40>)
 8001ef4:	f006 fe3e 	bl	8008b74 <HAL_TIM_Base_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001efe:	f001 fcc5 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200007f4 	.word	0x200007f4
 8001f0c:	40014400 	.word	0x40014400

08001f10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f16:	4a11      	ldr	r2, [pc, #68]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 420000;
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f1c:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <MX_USART1_UART_Init+0x50>)
 8001f1e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f34:	220c      	movs	r2, #12
 8001f36:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	; (8001f58 <MX_USART1_UART_Init+0x48>)
 8001f46:	f008 f9e7 	bl	800a318 <HAL_UART_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001f50:	f001 fc9c 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	2000083c 	.word	0x2000083c
 8001f5c:	40011000 	.word	0x40011000
 8001f60:	000668a0 	.word	0x000668a0

08001f64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <MX_USART2_UART_Init+0x50>)
 8001f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f9c:	f008 f9bc 	bl	800a318 <HAL_UART_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fa6:	f001 fc71 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000880 	.word	0x20000880
 8001fb4:	40004400 	.word	0x40004400

08001fb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <MX_USART3_UART_Init+0x50>)
 8001fc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fde:	220c      	movs	r2, #12
 8001fe0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001ff0:	f008 f992 	bl	800a318 <HAL_UART_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ffa:	f001 fc47 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200008c4 	.word	0x200008c4
 8002008:	40004800 	.word	0x40004800

0800200c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <MX_USART6_UART_Init+0x50>)
 8002014:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800201c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002032:	220c      	movs	r2, #12
 8002034:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002042:	4805      	ldr	r0, [pc, #20]	; (8002058 <MX_USART6_UART_Init+0x4c>)
 8002044:	f008 f968 	bl	800a318 <HAL_UART_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800204e:	f001 fc1d 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000908 	.word	0x20000908
 800205c:	40011400 	.word	0x40011400

08002060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_DMA_Init+0x3c>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a0b      	ldr	r2, [pc, #44]	; (800209c <MX_DMA_Init+0x3c>)
 8002070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_DMA_Init+0x3c>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2105      	movs	r1, #5
 8002086:	203a      	movs	r0, #58	; 0x3a
 8002088:	f003 fd8d 	bl	8005ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800208c:	203a      	movs	r0, #58	; 0x3a
 800208e:	f003 fda6 	bl	8005bde <HAL_NVIC_EnableIRQ>

}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800

080020a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	4b6d      	ldr	r3, [pc, #436]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a6c      	ldr	r2, [pc, #432]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b6a      	ldr	r3, [pc, #424]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b66      	ldr	r3, [pc, #408]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a65      	ldr	r2, [pc, #404]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b63      	ldr	r3, [pc, #396]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	4b5f      	ldr	r3, [pc, #380]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a5e      	ldr	r2, [pc, #376]	; (8002270 <MX_GPIO_Init+0x1d0>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b5c      	ldr	r3, [pc, #368]	; (8002270 <MX_GPIO_Init+0x1d0>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	4b58      	ldr	r3, [pc, #352]	; (8002270 <MX_GPIO_Init+0x1d0>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a57      	ldr	r2, [pc, #348]	; (8002270 <MX_GPIO_Init+0x1d0>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b55      	ldr	r3, [pc, #340]	; (8002270 <MX_GPIO_Init+0x1d0>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	4b51      	ldr	r3, [pc, #324]	; (8002270 <MX_GPIO_Init+0x1d0>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a50      	ldr	r2, [pc, #320]	; (8002270 <MX_GPIO_Init+0x1d0>)
 8002130:	f043 0308 	orr.w	r3, r3, #8
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b4e      	ldr	r3, [pc, #312]	; (8002270 <MX_GPIO_Init+0x1d0>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|GNSS_RST_Pin, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	f248 0102 	movw	r1, #32770	; 0x8002
 8002148:	484a      	ldr	r0, [pc, #296]	; (8002274 <MX_GPIO_Init+0x1d4>)
 800214a:	f004 fb01 	bl	8006750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	f241 0118 	movw	r1, #4120	; 0x1018
 8002154:	4848      	ldr	r0, [pc, #288]	; (8002278 <MX_GPIO_Init+0x1d8>)
 8002156:	f004 fafb 	bl	8006750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002160:	4846      	ldr	r0, [pc, #280]	; (800227c <MX_GPIO_Init+0x1dc>)
 8002162:	f004 faf5 	bl	8006750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	2104      	movs	r1, #4
 800216a:	4845      	ldr	r0, [pc, #276]	; (8002280 <MX_GPIO_Init+0x1e0>)
 800216c:	f004 faf0 	bl	8006750 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IT_MAGN_Pin BUTTON_Pin */
  GPIO_InitStruct.Pin = IT_MAGN_Pin|BUTTON_Pin;
 8002170:	f242 0301 	movw	r3, #8193	; 0x2001
 8002174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002176:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800217a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4619      	mov	r1, r3
 8002186:	483d      	ldr	r0, [pc, #244]	; (800227c <MX_GPIO_Init+0x1dc>)
 8002188:	f004 f946 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin GNSS_RST_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|GNSS_RST_Pin;
 800218c:	f248 0302 	movw	r3, #32770	; 0x8002
 8002190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002192:	2301      	movs	r3, #1
 8002194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	4833      	ldr	r0, [pc, #204]	; (8002274 <MX_GPIO_Init+0x1d4>)
 80021a6:	f004 f937 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pin : IT_PRESS_Pin */
  GPIO_InitStruct.Pin = IT_PRESS_Pin;
 80021aa:	2304      	movs	r3, #4
 80021ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IT_PRESS_GPIO_Port, &GPIO_InitStruct);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	482e      	ldr	r0, [pc, #184]	; (8002278 <MX_GPIO_Init+0x1d8>)
 80021c0:	f004 f92a 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_GYRO_Pin PB3 PB4 */
  GPIO_InitStruct.Pin = CS_GYRO_Pin|GPIO_PIN_3|GPIO_PIN_4;
 80021c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80021c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4826      	ldr	r0, [pc, #152]	; (8002278 <MX_GPIO_Init+0x1d8>)
 80021de:	f004 f91b 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_ACC_Pin */
  GPIO_InitStruct.Pin = CS_ACC_Pin;
 80021e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e8:	2301      	movs	r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_ACC_GPIO_Port, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	4820      	ldr	r0, [pc, #128]	; (800227c <MX_GPIO_Init+0x1dc>)
 80021fc:	f004 f90c 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pins : IT_GYRO_Pin IT_ACC_Pin */
  GPIO_InitStruct.Pin = IT_GYRO_Pin|IT_ACC_Pin;
 8002200:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002206:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800220a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	4817      	ldr	r0, [pc, #92]	; (8002274 <MX_GPIO_Init+0x1d4>)
 8002218:	f004 f8fe 	bl	8006418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800221c:	2304      	movs	r3, #4
 800221e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	2301      	movs	r3, #1
 8002222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	4813      	ldr	r0, [pc, #76]	; (8002280 <MX_GPIO_Init+0x1e0>)
 8002234:	f004 f8f0 	bl	8006418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2105      	movs	r1, #5
 800223c:	2006      	movs	r0, #6
 800223e:	f003 fcb2 	bl	8005ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002242:	2006      	movs	r0, #6
 8002244:	f003 fccb 	bl	8005bde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	2105      	movs	r1, #5
 800224c:	2008      	movs	r0, #8
 800224e:	f003 fcaa 	bl	8005ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002252:	2008      	movs	r0, #8
 8002254:	f003 fcc3 	bl	8005bde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2105      	movs	r1, #5
 800225c:	2028      	movs	r0, #40	; 0x28
 800225e:	f003 fca2 	bl	8005ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002262:	2028      	movs	r0, #40	; 0x28
 8002264:	f003 fcbb 	bl	8005bde <HAL_NVIC_EnableIRQ>

}
 8002268:	bf00      	nop
 800226a:	3728      	adds	r7, #40	; 0x28
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40020800 	.word	0x40020800
 8002280:	40020c00 	.word	0x40020c00

08002284 <set_config>:

/* USER CODE BEGIN 4 */
static int8_t set_config(struct bmm150_dev *dev) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    struct bmm150_settings settings;

    /* Set powermode as normal mode */
    settings.pwr_mode = BMM150_POWERMODE_NORMAL;
 800228c:	2300      	movs	r3, #0
 800228e:	737b      	strb	r3, [r7, #13]
    rslt = bmm150_set_op_mode(&settings, dev);
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	f00a fe40 	bl	800cf1c <bmm150_set_op_mode>
 800229c:	4603      	mov	r3, r0
 800229e:	77fb      	strb	r3, [r7, #31]
    bmm150_error_codes_print_result("bmm150_set_op_mode", rslt);
 80022a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022a4:	4619      	mov	r1, r3
 80022a6:	481d      	ldr	r0, [pc, #116]	; (800231c <set_config+0x98>)
 80022a8:	f00b fe88 	bl	800dfbc <bmm150_error_codes_print_result>

    if (rslt == BMM150_OK) {
 80022ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d12d      	bne.n	8002310 <set_config+0x8c>
        /* Setting the preset mode as Low power mode
         * i.e. data rate = 10Hz, XY-rep = 1, Z-rep = 2
         */
        settings.preset_mode = BMM150_PRESETMODE_HIGHACCURACY;                  // TODO Change it to the desired preset
 80022b4:	2303      	movs	r3, #3
 80022b6:	747b      	strb	r3, [r7, #17]
        rslt = bmm150_set_presetmode(&settings, dev);
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4618      	mov	r0, r3
 80022c0:	f00a fe98 	bl	800cff4 <bmm150_set_presetmode>
 80022c4:	4603      	mov	r3, r0
 80022c6:	77fb      	strb	r3, [r7, #31]
        settings.data_rate = BMM150_DATA_RATE_30HZ;                             // TODO Change it to the desired ODR
 80022c8:	2307      	movs	r3, #7
 80022ca:	73bb      	strb	r3, [r7, #14]
        bmm150_set_sensor_settings(BMM150_SEL_DATA_RATE, &settings, dev);
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4619      	mov	r1, r3
 80022d4:	2001      	movs	r0, #1
 80022d6:	f00a fef7 	bl	800d0c8 <bmm150_set_sensor_settings>
        bmm150_error_codes_print_result("bmm150_set_presetmode", rslt);
 80022da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022de:	4619      	mov	r1, r3
 80022e0:	480f      	ldr	r0, [pc, #60]	; (8002320 <set_config+0x9c>)
 80022e2:	f00b fe6b 	bl	800dfbc <bmm150_error_codes_print_result>

        if (rslt == BMM150_OK) {
 80022e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d110      	bne.n	8002310 <set_config+0x8c>
            /* Map the data interrupt pin */
            settings.int_settings.drdy_pin_en = 0x01;
 80022ee:	2301      	movs	r3, #1
 80022f0:	74bb      	strb	r3, [r7, #18]
            rslt = bmm150_set_sensor_settings(BMM150_SEL_DRDY_PIN_EN, &settings, dev);
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4619      	mov	r1, r3
 80022fa:	2010      	movs	r0, #16
 80022fc:	f00a fee4 	bl	800d0c8 <bmm150_set_sensor_settings>
 8002300:	4603      	mov	r3, r0
 8002302:	77fb      	strb	r3, [r7, #31]
            bmm150_error_codes_print_result("bmm150_set_sensor_settings", rslt);
 8002304:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002308:	4619      	mov	r1, r3
 800230a:	4806      	ldr	r0, [pc, #24]	; (8002324 <set_config+0xa0>)
 800230c:	f00b fe56 	bl	800dfbc <bmm150_error_codes_print_result>
        }
    }

    return rslt;
 8002310:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	080153f8 	.word	0x080153f8
 8002320:	0801540c 	.word	0x0801540c
 8002324:	08015424 	.word	0x08015424

08002328 <HAL_GPIO_EXTI_Callback>:

    return reversed;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin) {
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d11c      	bne.n	8002372 <HAL_GPIO_EXTI_Callback+0x4a>
		if(state == 4){state = 5;}
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d102      	bne.n	8002346 <HAL_GPIO_EXTI_Callback+0x1e>
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002342:	2205      	movs	r2, #5
 8002344:	701a      	strb	r2, [r3, #0]
		if(state == 3){state = 4;}
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d102      	bne.n	8002354 <HAL_GPIO_EXTI_Callback+0x2c>
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002350:	2204      	movs	r2, #4
 8002352:	701a      	strb	r2, [r3, #0]
		if(state == 2){state = 3;}
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d102      	bne.n	8002362 <HAL_GPIO_EXTI_Callback+0x3a>
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800235e:	2203      	movs	r2, #3
 8002360:	701a      	strb	r2, [r3, #0]
		if(state == 1){state = 2;}
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d104      	bne.n	8002374 <HAL_GPIO_EXTI_Callback+0x4c>
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800236c:	2202      	movs	r2, #2
 800236e:	701a      	strb	r2, [r3, #0]
 8002370:	e000      	b.n	8002374 <HAL_GPIO_EXTI_Callback+0x4c>
	  } else {
	      __NOP();
 8002372:	bf00      	nop
	  }

	if(GPIO_Pin == IT_ACC_Pin) {
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237a:	d103      	bne.n	8002384 <HAL_GPIO_EXTI_Callback+0x5c>

	 readstart = 1;
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x80>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	e000      	b.n	8002386 <HAL_GPIO_EXTI_Callback+0x5e>
  } else {
      __NOP();
 8002384:	bf00      	nop
  }
  if(GPIO_Pin == IT_MAGN_Pin) {
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800238c:	d103      	bne.n	8002396 <HAL_GPIO_EXTI_Callback+0x6e>
  	 //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);

  	 billent = 1;
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <HAL_GPIO_EXTI_Callback+0x84>)
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
    } else {
        __NOP();
    }
}
 8002394:	e000      	b.n	8002398 <HAL_GPIO_EXTI_Callback+0x70>
        __NOP();
 8002396:	bf00      	nop
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	20000009 	.word	0x20000009
 80023a8:	20000008 	.word	0x20000008
 80023ac:	20000a50 	.word	0x20000a50

080023b0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a47      	ldr	r2, [pc, #284]	; (80024d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	f040 8083 	bne.w	80024c8 <HAL_TIM_IC_CaptureCallback+0x118>
	  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80023c2:	2110      	movs	r1, #16
 80023c4:	4845      	ldr	r0, [pc, #276]	; (80024dc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80023c6:	f004 f9dc 	bl	8006782 <HAL_GPIO_TogglePin>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	7f1b      	ldrb	r3, [r3, #28]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d17a      	bne.n	80024c8 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 80023d2:	4b43      	ldr	r3, [pc, #268]	; (80024e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11a      	bne.n	8002410 <HAL_TIM_IC_CaptureCallback+0x60>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80023da:	2100      	movs	r1, #0
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f007 f9dd 	bl	800979c <HAL_TIM_ReadCapturedValue>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 80023e6:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 80023e8:	4b3d      	ldr	r3, [pc, #244]	; (80024e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a1a      	ldr	r2, [r3, #32]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 020a 	bic.w	r2, r2, #10
 80023fc:	621a      	str	r2, [r3, #32]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0202 	orr.w	r2, r2, #2
 800240c:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
				//__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
			}
		}
	  }
}
 800240e:	e05b      	b.n	80024c8 <HAL_TIM_IC_CaptureCallback+0x118>
			else if (Is_First_Captured==1)   // if the first is already captured
 8002410:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d157      	bne.n	80024c8 <HAL_TIM_IC_CaptureCallback+0x118>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8002418:	2100      	movs	r1, #0
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f007 f9be 	bl	800979c <HAL_TIM_ReadCapturedValue>
 8002420:	4603      	mov	r3, r0
 8002422:	4a31      	ldr	r2, [pc, #196]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002424:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
				if (IC_Val2 > IC_Val1)
 800242e:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d907      	bls.n	800244a <HAL_TIM_IC_CaptureCallback+0x9a>
					Difference = IC_Val2-IC_Val1;
 800243a:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	4a29      	ldr	r2, [pc, #164]	; (80024ec <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e00f      	b.n	800246a <HAL_TIM_IC_CaptureCallback+0xba>
				else if (IC_Val1 > IC_Val2)
 800244a:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d909      	bls.n	800246a <HAL_TIM_IC_CaptureCallback+0xba>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 8002456:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002464:	33ff      	adds	r3, #255	; 0xff
 8002466:	4a21      	ldr	r2, [pc, #132]	; (80024ec <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002468:	6013      	str	r3, [r2, #0]
				Distance = Difference * .34/2;
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_TIM_IC_CaptureCallback+0x13c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe f848 	bl	8000504 <__aeabi_ui2d>
 8002474:	a316      	add	r3, pc, #88	; (adr r3, 80024d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247a:	f7fe f8bd 	bl	80005f8 <__aeabi_dmul>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800248e:	f7fe f9dd 	bl	800084c <__aeabi_ddiv>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f7fe fb85 	bl	8000ba8 <__aeabi_d2uiz>
 800249e:	4603      	mov	r3, r0
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <HAL_TIM_IC_CaptureCallback+0x140>)
 80024a4:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <HAL_TIM_IC_CaptureCallback+0x130>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6a1a      	ldr	r2, [r3, #32]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 020a 	bic.w	r2, r2, #10
 80024ba:	621a      	str	r2, [r3, #32]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6a12      	ldr	r2, [r2, #32]
 80024c6:	621a      	str	r2, [r3, #32]
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	5c28f5c3 	.word	0x5c28f5c3
 80024d4:	3fd5c28f 	.word	0x3fd5c28f
 80024d8:	2000068c 	.word	0x2000068c
 80024dc:	40020400 	.word	0x40020400
 80024e0:	20000b54 	.word	0x20000b54
 80024e4:	20000b48 	.word	0x20000b48
 80024e8:	20000b4c 	.word	0x20000b4c
 80024ec:	20000b50 	.word	0x20000b50
 80024f0:	20000b55 	.word	0x20000b55

080024f4 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6 )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a0b      	ldr	r2, [pc, #44]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d10d      	bne.n	8002520 <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
	  if(timerse == 1){timerse =0;}
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d102      	bne.n	8002512 <HAL_TIM_PeriodElapsedCallback+0x1e>
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
	  if(timerse == 0){timerse =1;}
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <HAL_TIM_PeriodElapsedCallback+0x2c>
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800251c:	2201      	movs	r2, #1
 800251e:	701a      	strb	r2, [r3, #0]
  }
  if(htim == &htim7){

  }
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	20000764 	.word	0x20000764
 8002530:	20000b68 	.word	0x20000b68

08002534 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a06      	ldr	r2, [pc, #24]	; (8002558 <HAL_UART_TxCpltCallback+0x24>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d102      	bne.n	800254a <HAL_UART_TxCpltCallback+0x16>
			telemetria_data_sent = 1;
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_UART_TxCpltCallback+0x28>)
 8002546:	2201      	movs	r2, #1
 8002548:	701a      	strb	r2, [r3, #0]
	}
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000880 	.word	0x20000880
 800255c:	20000b62 	.word	0x20000b62

08002560 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	if(huart ==&huart1){
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a4b      	ldr	r2, [pc, #300]	; (8002698 <HAL_UART_RxCpltCallback+0x138>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d17b      	bne.n	8002668 <HAL_UART_RxCpltCallback+0x108>
		debug_i = __HAL_TIM_GET_COUNTER(&htim6);
 8002570:	4b4a      	ldr	r3, [pc, #296]	; (800269c <HAL_UART_RxCpltCallback+0x13c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	461a      	mov	r2, r3
 8002578:	4b49      	ldr	r3, [pc, #292]	; (80026a0 <HAL_UART_RxCpltCallback+0x140>)
 800257a:	601a      	str	r2, [r3, #0]
		if(debug_i < 100){
 800257c:	4b48      	ldr	r3, [pc, #288]	; (80026a0 <HAL_UART_RxCpltCallback+0x140>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b63      	cmp	r3, #99	; 0x63
 8002582:	dc0d      	bgt.n	80025a0 <HAL_UART_RxCpltCallback+0x40>
			CRSF_debug[CRSF_i] = UART1_rxBuffer[0];
 8002584:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <HAL_UART_RxCpltCallback+0x144>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <HAL_UART_RxCpltCallback+0x148>)
 800258c:	7819      	ldrb	r1, [r3, #0]
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002590:	5499      	strb	r1, [r3, r2]
			CRSF_i++;
 8002592:	4b44      	ldr	r3, [pc, #272]	; (80026a4 <HAL_UART_RxCpltCallback+0x144>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b42      	ldr	r3, [pc, #264]	; (80026a4 <HAL_UART_RxCpltCallback+0x144>)
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	e05f      	b.n	8002660 <HAL_UART_RxCpltCallback+0x100>
		}
		else{
			if(CRSF_debug[2] == 0x16){
 80025a0:	4b42      	ldr	r3, [pc, #264]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025a2:	789b      	ldrb	r3, [r3, #2]
 80025a4:	2b16      	cmp	r3, #22
 80025a6:	d154      	bne.n	8002652 <HAL_UART_RxCpltCallback+0xf2>
				RX_roll = (((uint16_t)(CRSF_debug[4] & 0b00000111)) << 8) + (uint16_t)(CRSF_debug[3]);
 80025a8:	4b40      	ldr	r3, [pc, #256]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025aa:	791b      	ldrb	r3, [r3, #4]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025b8:	78db      	ldrb	r3, [r3, #3]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4413      	add	r3, r2
 80025be:	b29a      	uxth	r2, r3
 80025c0:	4b3b      	ldr	r3, [pc, #236]	; (80026b0 <HAL_UART_RxCpltCallback+0x150>)
 80025c2:	801a      	strh	r2, [r3, #0]
				RX_pitch = (((uint16_t)(CRSF_debug[5] & 0b00111111)) << 5) + (((uint16_t)(CRSF_debug[4] & 0b11111000)) >> 3);
 80025c4:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025c6:	795b      	ldrb	r3, [r3, #5]
 80025c8:	015b      	lsls	r3, r3, #5
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	4b36      	ldr	r3, [pc, #216]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025d4:	791b      	ldrb	r3, [r3, #4]
 80025d6:	08db      	lsrs	r3, r3, #3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	b29b      	uxth	r3, r3
 80025dc:	4413      	add	r3, r2
 80025de:	b29a      	uxth	r2, r3
 80025e0:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_UART_RxCpltCallback+0x154>)
 80025e2:	801a      	strh	r2, [r3, #0]
				RX_throttle = (((uint16_t)(CRSF_debug[7] & 0b00000001)) << 10)+ (((uint16_t)(CRSF_debug[6])) << 2) + (((uint16_t)(CRSF_debug[5] & 0b11000000)) >> 6);
 80025e4:	4b31      	ldr	r3, [pc, #196]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025e6:	79db      	ldrb	r3, [r3, #7]
 80025e8:	029b      	lsls	r3, r3, #10
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 80025f4:	799b      	ldrb	r3, [r3, #6]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002602:	795b      	ldrb	r3, [r3, #5]
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	b2db      	uxtb	r3, r3
 8002608:	b29b      	uxth	r3, r3
 800260a:	4413      	add	r3, r2
 800260c:	b29a      	uxth	r2, r3
 800260e:	4b2a      	ldr	r3, [pc, #168]	; (80026b8 <HAL_UART_RxCpltCallback+0x158>)
 8002610:	801a      	strh	r2, [r3, #0]
				RX_yaw = (((uint16_t)(CRSF_debug[8] & 0b00001111)) << 7) + (((uint16_t)(CRSF_debug[7] & 0b11111110)) >> 1);
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002614:	7a1b      	ldrb	r3, [r3, #8]
 8002616:	01db      	lsls	r3, r3, #7
 8002618:	b29b      	uxth	r3, r3
 800261a:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 800261e:	b29a      	uxth	r2, r3
 8002620:	4b22      	ldr	r3, [pc, #136]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002622:	79db      	ldrb	r3, [r3, #7]
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	b29b      	uxth	r3, r3
 800262a:	4413      	add	r3, r2
 800262c:	b29a      	uxth	r2, r3
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <HAL_UART_RxCpltCallback+0x15c>)
 8002630:	801a      	strh	r2, [r3, #0]
				RX_arm = (((uint16_t)(CRSF_debug[9] & 0b01111111)) << 4) + (((uint16_t)(CRSF_debug[8] & 0b11110000)) >> 4);
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002634:	7a5b      	ldrb	r3, [r3, #9]
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	b29b      	uxth	r3, r3
 800263a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800263e:	b29a      	uxth	r2, r3
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002642:	7a1b      	ldrb	r3, [r3, #8]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	b2db      	uxtb	r3, r3
 8002648:	b29b      	uxth	r3, r3
 800264a:	4413      	add	r3, r2
 800264c:	b29a      	uxth	r2, r3
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <HAL_UART_RxCpltCallback+0x160>)
 8002650:	801a      	strh	r2, [r3, #0]
			}
			CRSF_debug[0] = UART1_rxBuffer[0];
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_UART_RxCpltCallback+0x148>)
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_UART_RxCpltCallback+0x14c>)
 8002658:	701a      	strb	r2, [r3, #0]
			CRSF_i = 1;
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_UART_RxCpltCallback+0x144>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
		}
		htim6.Instance->CNT = 0;
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <HAL_UART_RxCpltCallback+0x13c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2200      	movs	r2, #0
 8002666:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(huart == &huart2){
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <HAL_UART_RxCpltCallback+0x164>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d10e      	bne.n	800268e <HAL_UART_RxCpltCallback+0x12e>
		if(uart_telemetria == 1){
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_UART_RxCpltCallback+0x168>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d105      	bne.n	8002684 <HAL_UART_RxCpltCallback+0x124>
			HAL_UART_Receive_IT(&huart2, telem, 11);
 8002678:	220b      	movs	r2, #11
 800267a:	4914      	ldr	r1, [pc, #80]	; (80026cc <HAL_UART_RxCpltCallback+0x16c>)
 800267c:	4811      	ldr	r0, [pc, #68]	; (80026c4 <HAL_UART_RxCpltCallback+0x164>)
 800267e:	f007 fedd 	bl	800a43c <HAL_UART_Receive_IT>
		}
		else
			HAL_UART_Receive_IT(&huart2, telem, 11);
	}
}
 8002682:	e004      	b.n	800268e <HAL_UART_RxCpltCallback+0x12e>
			HAL_UART_Receive_IT(&huart2, telem, 11);
 8002684:	220b      	movs	r2, #11
 8002686:	4911      	ldr	r1, [pc, #68]	; (80026cc <HAL_UART_RxCpltCallback+0x16c>)
 8002688:	480e      	ldr	r0, [pc, #56]	; (80026c4 <HAL_UART_RxCpltCallback+0x164>)
 800268a:	f007 fed7 	bl	800a43c <HAL_UART_Receive_IT>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2000083c 	.word	0x2000083c
 800269c:	20000764 	.word	0x20000764
 80026a0:	20000b64 	.word	0x20000b64
 80026a4:	20002b2c 	.word	0x20002b2c
 80026a8:	20002b30 	.word	0x20002b30
 80026ac:	20002aec 	.word	0x20002aec
 80026b0:	20002b32 	.word	0x20002b32
 80026b4:	20002b34 	.word	0x20002b34
 80026b8:	20002b38 	.word	0x20002b38
 80026bc:	20002b36 	.word	0x20002b36
 80026c0:	20002b3a 	.word	0x20002b3a
 80026c4:	20000880 	.word	0x20000880
 80026c8:	20000b56 	.word	0x20000b56
 80026cc:	20000000 	.word	0x20000000

080026d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80026d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026d4:	b094      	sub	sp, #80	; 0x50
 80026d6:	af04      	add	r7, sp, #16
 80026d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
//	uint8_t telemetria[8];
	uint8_t telemetria_data[40] = "HELLO WORLD \r\n";
 80026da:	4b6c      	ldr	r3, [pc, #432]	; (800288c <StartDefaultTask+0x1bc>)
 80026dc:	f107 0418 	add.w	r4, r7, #24
 80026e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026e2:	c407      	stmia	r4!, {r0, r1, r2}
 80026e4:	8023      	strh	r3, [r4, #0]
 80026e6:	3402      	adds	r4, #2
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	7023      	strb	r3, [r4, #0]
 80026ec:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
 80026fc:	615a      	str	r2, [r3, #20]
 80026fe:	761a      	strb	r2, [r3, #24]


  /* Infinite loop */
  for(;;)
  {
	  if(uart_telemetria == 1){
 8002700:	4b63      	ldr	r3, [pc, #396]	; (8002890 <StartDefaultTask+0x1c0>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	f040 8086 	bne.w	8002816 <StartDefaultTask+0x146>
		  if(telem[0] == 'P'){
 800270a:	4b62      	ldr	r3, [pc, #392]	; (8002894 <StartDefaultTask+0x1c4>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b50      	cmp	r3, #80	; 0x50
 8002710:	d13e      	bne.n	8002790 <StartDefaultTask+0xc0>
			  telem_P = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 8002712:	4b60      	ldr	r3, [pc, #384]	; (8002894 <StartDefaultTask+0x1c4>)
 8002714:	785b      	ldrb	r3, [r3, #1]
 8002716:	461a      	mov	r2, r3
 8002718:	4b5f      	ldr	r3, [pc, #380]	; (8002898 <StartDefaultTask+0x1c8>)
 800271a:	fb03 f202 	mul.w	r2, r3, r2
 800271e:	4b5d      	ldr	r3, [pc, #372]	; (8002894 <StartDefaultTask+0x1c4>)
 8002720:	789b      	ldrb	r3, [r3, #2]
 8002722:	4619      	mov	r1, r3
 8002724:	4b5d      	ldr	r3, [pc, #372]	; (800289c <StartDefaultTask+0x1cc>)
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	441a      	add	r2, r3
 800272c:	4b59      	ldr	r3, [pc, #356]	; (8002894 <StartDefaultTask+0x1c4>)
 800272e:	78db      	ldrb	r3, [r3, #3]
 8002730:	4619      	mov	r1, r3
 8002732:	f242 7310 	movw	r3, #10000	; 0x2710
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	441a      	add	r2, r3
 800273c:	4b55      	ldr	r3, [pc, #340]	; (8002894 <StartDefaultTask+0x1c4>)
 800273e:	791b      	ldrb	r3, [r3, #4]
 8002740:	4619      	mov	r1, r3
 8002742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	441a      	add	r2, r3
 800274c:	4b51      	ldr	r3, [pc, #324]	; (8002894 <StartDefaultTask+0x1c4>)
 800274e:	795b      	ldrb	r3, [r3, #5]
 8002750:	4619      	mov	r1, r3
 8002752:	2364      	movs	r3, #100	; 0x64
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	441a      	add	r2, r3
 800275a:	4b4e      	ldr	r3, [pc, #312]	; (8002894 <StartDefaultTask+0x1c4>)
 800275c:	799b      	ldrb	r3, [r3, #6]
 800275e:	4619      	mov	r1, r3
 8002760:	460b      	mov	r3, r1
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	4a4a      	ldr	r2, [pc, #296]	; (8002894 <StartDefaultTask+0x1c4>)
 800276c:	79d2      	ldrb	r2, [r2, #7]
 800276e:	441a      	add	r2, r3
 8002770:	4b4b      	ldr	r3, [pc, #300]	; (80028a0 <StartDefaultTask+0x1d0>)
 8002772:	4413      	add	r3, r2
 8002774:	ee07 3a90 	vmov	s15, r3
 8002778:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800277c:	eddf 6a49 	vldr	s13, [pc, #292]	; 80028a4 <StartDefaultTask+0x1d4>
 8002780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002784:	4b48      	ldr	r3, [pc, #288]	; (80028a8 <StartDefaultTask+0x1d8>)
 8002786:	edc3 7a00 	vstr	s15, [r3]
			  new_P = 1;
 800278a:	4b48      	ldr	r3, [pc, #288]	; (80028ac <StartDefaultTask+0x1dc>)
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
		  }
		  if(telem[0] == 'D'){
 8002790:	4b40      	ldr	r3, [pc, #256]	; (8002894 <StartDefaultTask+0x1c4>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b44      	cmp	r3, #68	; 0x44
 8002796:	d13e      	bne.n	8002816 <StartDefaultTask+0x146>
			  telem_D = (float)(((uint32_t)telem[1]-48)*1000000+((uint32_t)telem[2]-48)*100000+((uint32_t)telem[3]-48)*10000+((uint32_t)telem[4]-48)*1000+((uint32_t)telem[5]-48)*100+((uint32_t)telem[6]-48)*10+((uint32_t)telem[7]-48))/100000;
 8002798:	4b3e      	ldr	r3, [pc, #248]	; (8002894 <StartDefaultTask+0x1c4>)
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	461a      	mov	r2, r3
 800279e:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <StartDefaultTask+0x1c8>)
 80027a0:	fb03 f202 	mul.w	r2, r3, r2
 80027a4:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <StartDefaultTask+0x1c4>)
 80027a6:	789b      	ldrb	r3, [r3, #2]
 80027a8:	4619      	mov	r1, r3
 80027aa:	4b3c      	ldr	r3, [pc, #240]	; (800289c <StartDefaultTask+0x1cc>)
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	441a      	add	r2, r3
 80027b2:	4b38      	ldr	r3, [pc, #224]	; (8002894 <StartDefaultTask+0x1c4>)
 80027b4:	78db      	ldrb	r3, [r3, #3]
 80027b6:	4619      	mov	r1, r3
 80027b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	441a      	add	r2, r3
 80027c2:	4b34      	ldr	r3, [pc, #208]	; (8002894 <StartDefaultTask+0x1c4>)
 80027c4:	791b      	ldrb	r3, [r3, #4]
 80027c6:	4619      	mov	r1, r3
 80027c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	441a      	add	r2, r3
 80027d2:	4b30      	ldr	r3, [pc, #192]	; (8002894 <StartDefaultTask+0x1c4>)
 80027d4:	795b      	ldrb	r3, [r3, #5]
 80027d6:	4619      	mov	r1, r3
 80027d8:	2364      	movs	r3, #100	; 0x64
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	441a      	add	r2, r3
 80027e0:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <StartDefaultTask+0x1c4>)
 80027e2:	799b      	ldrb	r3, [r3, #6]
 80027e4:	4619      	mov	r1, r3
 80027e6:	460b      	mov	r3, r1
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	4a28      	ldr	r2, [pc, #160]	; (8002894 <StartDefaultTask+0x1c4>)
 80027f2:	79d2      	ldrb	r2, [r2, #7]
 80027f4:	441a      	add	r2, r3
 80027f6:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <StartDefaultTask+0x1d0>)
 80027f8:	4413      	add	r3, r2
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002802:	eddf 6a28 	vldr	s13, [pc, #160]	; 80028a4 <StartDefaultTask+0x1d4>
 8002806:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800280a:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <StartDefaultTask+0x1e0>)
 800280c:	edc3 7a00 	vstr	s15, [r3]
			  new_D = 1;
 8002810:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <StartDefaultTask+0x1e4>)
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if (xQueueReceive(telemetria_Queue, (void*)&telemetria_send, 0) == pdTRUE){
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <StartDefaultTask+0x1e8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f107 010c 	add.w	r1, r7, #12
 800281e:	2200      	movs	r2, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f00b fee3 	bl	800e5ec <xQueueReceive>
 8002826:	4603      	mov	r3, r0
 8002828:	2b01      	cmp	r3, #1
 800282a:	d12a      	bne.n	8002882 <StartDefaultTask+0x1b2>
//		  sprintf((char*)telemetria_data, "Raw:0,0,0,0,0,0,%d,%d,%d\r\n", (int)((drone_angle[0])*10), (int)((drone_angle[1])*10), (int)(drone_angle[2])*10); //%5.2f
	//	  sprintf((char*)telemetria_data, "Yaw: 115.47\r\n");
		  HAL_UART_Transmit (&huart2, telemetria_data, sizeof (telemetria_data), 200);
*/

		  if(telemetria_data_sent == 1){
 800282c:	4b23      	ldr	r3, [pc, #140]	; (80028bc <StartDefaultTask+0x1ec>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d126      	bne.n	8002882 <StartDefaultTask+0x1b2>
		  			  sprintf((char*)telemetria_data, "%4.3f,%4.3f,%4.3f\r\n", telemetria_send[0], telemetria_send[1], telemetria_send[2]); //%5.2f
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd fe86 	bl	8000548 <__aeabi_f2d>
 800283c:	4680      	mov	r8, r0
 800283e:	4689      	mov	r9, r1
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fe80 	bl	8000548 <__aeabi_f2d>
 8002848:	4604      	mov	r4, r0
 800284a:	460d      	mov	r5, r1
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fd fe7a 	bl	8000548 <__aeabi_f2d>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	f107 0018 	add.w	r0, r7, #24
 800285c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002860:	e9cd 4500 	strd	r4, r5, [sp]
 8002864:	4642      	mov	r2, r8
 8002866:	464b      	mov	r3, r9
 8002868:	4915      	ldr	r1, [pc, #84]	; (80028c0 <StartDefaultTask+0x1f0>)
 800286a:	f00e f8b1 	bl	80109d0 <siprintf>
//		  			  sprintf((char*)telemetria_data, "%2.2f, %2.2f, %2.2f, %3.2f, %3.2f, %3.2f, %4.1f, %4.1f, %4.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f\r\n", telemetria_send[0], telemetria_send[1], telemetria_send[2], telemetria_send[3], telemetria_send[4], telemetria_send[5], telemetria_send[6], telemetria_send[7], telemetria_send[8], telemetria_send[9], telemetria_send[10], telemetria_send[11], telemetria_send[12],telemetria_send[13], telemetria_send[14], telemetria_send[15], telemetria_send[16], telemetria_send[17], telemetria_send[18]); //%5.2f
		  			  HAL_UART_Transmit_IT(&huart2, telemetria_data, sizeof (telemetria_data));
 800286e:	f107 0318 	add.w	r3, r7, #24
 8002872:	2228      	movs	r2, #40	; 0x28
 8002874:	4619      	mov	r1, r3
 8002876:	4813      	ldr	r0, [pc, #76]	; (80028c4 <StartDefaultTask+0x1f4>)
 8002878:	f007 fd9b 	bl	800a3b2 <HAL_UART_Transmit_IT>
		  			  telemetria_data_sent = 0;
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <StartDefaultTask+0x1ec>)
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
		  		  }
	  }


	  osDelay(10);
 8002882:	200a      	movs	r0, #10
 8002884:	f00b fc29 	bl	800e0da <osDelay>
	  if(uart_telemetria == 1){
 8002888:	e73a      	b.n	8002700 <StartDefaultTask+0x30>
 800288a:	bf00      	nop
 800288c:	08015454 	.word	0x08015454
 8002890:	20000b56 	.word	0x20000b56
 8002894:	20000000 	.word	0x20000000
 8002898:	000f4240 	.word	0x000f4240
 800289c:	000186a0 	.word	0x000186a0
 80028a0:	fcd232b0 	.word	0xfcd232b0
 80028a4:	47c35000 	.word	0x47c35000
 80028a8:	20000b58 	.word	0x20000b58
 80028ac:	20000b60 	.word	0x20000b60
 80028b0:	20000b5c 	.word	0x20000b5c
 80028b4:	20000b61 	.word	0x20000b61
 80028b8:	20002b54 	.word	0x20002b54
 80028bc:	20000b62 	.word	0x20000b62
 80028c0:	08015440 	.word	0x08015440
 80028c4:	20000880 	.word	0x20000880

080028c8 <Start_Data_Reading>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Data_Reading */
void Start_Data_Reading(void const * argument)
{
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ca:	b0fd      	sub	sp, #500	; 0x1f4
 80028cc:	af06      	add	r7, sp, #24
 80028ce:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80028d2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028d6:	6018      	str	r0, [r3, #0]
	//Magneto 1.2 calibration
//	FusionVector magneto_offset = {-10.254290, 1.8038, -4.628919};
//	FusionMatrix magneto_transform = {1.030904, 0.011754, -0.008844, 0.011754, 1.040290, -0.000902, -0.008844, -0.000902, 1.008504};

	//Magneto 1.2 calibration, kinda works
	FusionVector magneto_offset = {-10.254290, 1.8038, -4.628919};
 80028d8:	4a6a      	ldr	r2, [pc, #424]	; (8002a84 <Start_Data_Reading+0x1bc>)
 80028da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028de:	ca07      	ldmia	r2, {r0, r1, r2}
 80028e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionMatrix magneto_transform = {1.030904, 0.011754, -0.008844, 0.011754, 1.040290, -0.000902, -0.008844, -0.000902, 1.008504};
 80028e4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80028e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028ec:	4a66      	ldr	r2, [pc, #408]	; (8002a88 <Start_Data_Reading+0x1c0>)
 80028ee:	461c      	mov	r4, r3
 80028f0:	4615      	mov	r5, r2
 80028f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028fa:	682b      	ldr	r3, [r5, #0]
 80028fc:	6023      	str	r3, [r4, #0]
//	FusionVector magneto_offset = {0, 0, 0};
//	FusionMatrix magneto_transform = {1,0,0,0,1,0,0,0,1};
	FusionVector magneto_data;

	//pitch angle velocity control params
	float err_pitch = 0;
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	float errd_pitch = 0;
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	float prev_err_pitch = 0;
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	float control_pitch = 0;
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	float P_pitch = 20;
 800291e:	4b5b      	ldr	r3, [pc, #364]	; (8002a8c <Start_Data_Reading+0x1c4>)
 8002920:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	float D_pitch = 0.1;
 8002924:	4b5a      	ldr	r3, [pc, #360]	; (8002a90 <Start_Data_Reading+0x1c8>)
 8002926:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

	//pitch angle control params
	float err_angle_pitch = 0;
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	float errd_angle_pitch = 0;
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	float prev_err_angle_pitch = 0;
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	float angle_control_pitch = 0;
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	float P_angle_pitch = 0.04;
 800294a:	4b52      	ldr	r3, [pc, #328]	; (8002a94 <Start_Data_Reading+0x1cc>)
 800294c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	float D_angle_pitch = 0.0001;//0.005;
 8002950:	4b51      	ldr	r3, [pc, #324]	; (8002a98 <Start_Data_Reading+0x1d0>)
 8002952:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

	//roll angle velocity control params
	float err_roll = 0;
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	float errd_roll = 0;
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	float prev_err_roll = 0;
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	float control_roll = 0;
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	float P_roll = 5;
 8002976:	4b49      	ldr	r3, [pc, #292]	; (8002a9c <Start_Data_Reading+0x1d4>)
 8002978:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	float D_roll = 0.1;//0.4
 800297c:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <Start_Data_Reading+0x1c8>)
 800297e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

	//roll angle control params
	float P_angle_roll = 0.2;
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <Start_Data_Reading+0x1d8>)
 8002984:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	float D_angle_roll = 0.0001;//0.005;
 8002988:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <Start_Data_Reading+0x1d0>)
 800298a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	float err_angle_roll = 0;
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	float errd_angle_roll = 0;
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	float prev_err_angle_roll = 0;
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	float angle_control_roll = 0;
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

	//yaw angle velocity control params
	float err_yaw = 0;
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	float errd_yaw = 0;
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	float prev_err_yaw = 0;
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	float control_yaw = 0;
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	float P_yaw = 20;
 80029ce:	4b2f      	ldr	r3, [pc, #188]	; (8002a8c <Start_Data_Reading+0x1c4>)
 80029d0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	float D_yaw = 0.1;
 80029d4:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <Start_Data_Reading+0x1c8>)
 80029d6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

	//yaw angle control params
	float P_angle_yaw = 0.8;//0.04;
 80029da:	4b32      	ldr	r3, [pc, #200]	; (8002aa4 <Start_Data_Reading+0x1dc>)
 80029dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	float D_angle_yaw = 0.000;//0.005;
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	float err_angle_yaw = 0;
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	float errd_angle_yaw = 0;
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	float prev_err_angle_yaw = 0;
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	float angle_control_yaw = 0;
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	float yaw_angle = 0;
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	float prev_euler_yaw = 0;
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	int n = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0



	//imu init function
	BMI088_Init(&imu, &hspi2, CS_ACC_GPIO_Port, CS_ACC_Pin, CS_GYRO_GPIO_Port, CS_GYRO_Pin);
 8002a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <Start_Data_Reading+0x1e0>)
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a2c:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <Start_Data_Reading+0x1e4>)
 8002a2e:	4920      	ldr	r1, [pc, #128]	; (8002ab0 <Start_Data_Reading+0x1e8>)
 8002a30:	4820      	ldr	r0, [pc, #128]	; (8002ab4 <Start_Data_Reading+0x1ec>)
 8002a32:	f001 fce1 	bl	80043f8 <BMI088_Init>


	//bmp388 pressure sensor init
	bmp._hi2c = &hi2c2;
 8002a36:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a38:	4a20      	ldr	r2, [pc, #128]	; (8002abc <Start_Data_Reading+0x1f4>)
 8002a3a:	601a      	str	r2, [r3, #0]


	BMP388_SetTempOS(&bmp, 0);
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	481e      	ldr	r0, [pc, #120]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a40:	f002 f84b 	bl	8004ada <BMP388_SetTempOS>
	HAL_Delay(10);
 8002a44:	200a      	movs	r0, #10
 8002a46:	f002 fd4d 	bl	80054e4 <HAL_Delay>
	BMP388_SetPressOS(&bmp, 0x03); //0 volt, de adatlap alapján 8x-nek megfelelő 0x03 beírva
 8002a4a:	2103      	movs	r1, #3
 8002a4c:	481a      	ldr	r0, [pc, #104]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a4e:	f002 f864 	bl	8004b1a <BMP388_SetPressOS>
	HAL_Delay(10);
 8002a52:	200a      	movs	r0, #10
 8002a54:	f002 fd46 	bl	80054e4 <HAL_Delay>
	BMP388_SetIIRFilterCoeff(&bmp, 2);
 8002a58:	2102      	movs	r1, #2
 8002a5a:	4817      	ldr	r0, [pc, #92]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a5c:	f002 f87c 	bl	8004b58 <BMP388_SetIIRFilterCoeff>
	HAL_Delay(10);
 8002a60:	200a      	movs	r0, #10
 8002a62:	f002 fd3f 	bl	80054e4 <HAL_Delay>
	BMP388_SetOutputDataRate(&bmp, 0x02);
 8002a66:	2102      	movs	r1, #2
 8002a68:	4813      	ldr	r0, [pc, #76]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a6a:	f002 f88c 	bl	8004b86 <BMP388_SetOutputDataRate>
	HAL_Delay(10);
 8002a6e:	200a      	movs	r0, #10
 8002a70:	f002 fd38 	bl	80054e4 <HAL_Delay>
	BMP388_Init(&bmp);
 8002a74:	4810      	ldr	r0, [pc, #64]	; (8002ab8 <Start_Data_Reading+0x1f0>)
 8002a76:	f001 ffb5 	bl	80049e4 <BMP388_Init>

	for(int i_init = 0; i_init<2000; i_init++ ){
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002a80:	e079      	b.n	8002b76 <Start_Data_Reading+0x2ae>
 8002a82:	bf00      	nop
 8002a84:	080154b0 	.word	0x080154b0
 8002a88:	080154bc 	.word	0x080154bc
 8002a8c:	41a00000 	.word	0x41a00000
 8002a90:	3dcccccd 	.word	0x3dcccccd
 8002a94:	3d23d70a 	.word	0x3d23d70a
 8002a98:	38d1b717 	.word	0x38d1b717
 8002a9c:	40a00000 	.word	0x40a00000
 8002aa0:	3e4ccccd 	.word	0x3e4ccccd
 8002aa4:	3f4ccccd 	.word	0x3f4ccccd
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	20000634 	.word	0x20000634
 8002ab4:	200009b8 	.word	0x200009b8
 8002ab8:	20000a08 	.word	0x20000a08
 8002abc:	2000058c 	.word	0x2000058c
	  BMP388_ReadRawPressTempTime(&bmp, &raw_press, &raw_temp, &raw_time);
 8002ac0:	4bbd      	ldr	r3, [pc, #756]	; (8002db8 <Start_Data_Reading+0x4f0>)
 8002ac2:	4abe      	ldr	r2, [pc, #760]	; (8002dbc <Start_Data_Reading+0x4f4>)
 8002ac4:	49be      	ldr	r1, [pc, #760]	; (8002dc0 <Start_Data_Reading+0x4f8>)
 8002ac6:	48bf      	ldr	r0, [pc, #764]	; (8002dc4 <Start_Data_Reading+0x4fc>)
 8002ac8:	f002 f872 	bl	8004bb0 <BMP388_ReadRawPressTempTime>
	  BMP388_CompensateRawPressTemp(&bmp, raw_press, raw_temp, &press, &temp);
 8002acc:	4bbc      	ldr	r3, [pc, #752]	; (8002dc0 <Start_Data_Reading+0x4f8>)
 8002ace:	6819      	ldr	r1, [r3, #0]
 8002ad0:	4bba      	ldr	r3, [pc, #744]	; (8002dbc <Start_Data_Reading+0x4f4>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4bbc      	ldr	r3, [pc, #752]	; (8002dc8 <Start_Data_Reading+0x500>)
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	4bbc      	ldr	r3, [pc, #752]	; (8002dcc <Start_Data_Reading+0x504>)
 8002ada:	48ba      	ldr	r0, [pc, #744]	; (8002dc4 <Start_Data_Reading+0x4fc>)
 8002adc:	f002 f894 	bl	8004c08 <BMP388_CompensateRawPressTemp>
	  h0 += BMP388_FindAltitude(ground_pressure, press);
 8002ae0:	4bba      	ldr	r3, [pc, #744]	; (8002dcc <Start_Data_Reading+0x504>)
 8002ae2:	edd3 7a00 	vldr	s15, [r3]
 8002ae6:	eef0 0a67 	vmov.f32	s1, s15
 8002aea:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8002dd0 <Start_Data_Reading+0x508>
 8002aee:	f002 f8af 	bl	8004c50 <BMP388_FindAltitude>
 8002af2:	eeb0 7a40 	vmov.f32	s14, s0
 8002af6:	4bb7      	ldr	r3, [pc, #732]	; (8002dd4 <Start_Data_Reading+0x50c>)
 8002af8:	edd3 7a00 	vldr	s15, [r3]
 8002afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b00:	4bb4      	ldr	r3, [pc, #720]	; (8002dd4 <Start_Data_Reading+0x50c>)
 8002b02:	edc3 7a00 	vstr	s15, [r3]
	  BMI088_ReadGyroscope(&imu);
 8002b06:	48b4      	ldr	r0, [pc, #720]	; (8002dd8 <Start_Data_Reading+0x510>)
 8002b08:	f001 fef4 	bl	80048f4 <BMI088_ReadGyroscope>
	  gyro_offset_x_calc += imu.gyr_rps[0];
 8002b0c:	4bb2      	ldr	r3, [pc, #712]	; (8002dd8 <Start_Data_Reading+0x510>)
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fd fd19 	bl	8000548 <__aeabi_f2d>
 8002b16:	4bb1      	ldr	r3, [pc, #708]	; (8002ddc <Start_Data_Reading+0x514>)
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	f7fd fbb6 	bl	800028c <__adddf3>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	49ad      	ldr	r1, [pc, #692]	; (8002ddc <Start_Data_Reading+0x514>)
 8002b26:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_y_calc += imu.gyr_rps[1];
 8002b2a:	4bab      	ldr	r3, [pc, #684]	; (8002dd8 <Start_Data_Reading+0x510>)
 8002b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fd0a 	bl	8000548 <__aeabi_f2d>
 8002b34:	4baa      	ldr	r3, [pc, #680]	; (8002de0 <Start_Data_Reading+0x518>)
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	f7fd fba7 	bl	800028c <__adddf3>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	49a7      	ldr	r1, [pc, #668]	; (8002de0 <Start_Data_Reading+0x518>)
 8002b44:	e9c1 2300 	strd	r2, r3, [r1]
	  gyro_offset_z_calc += imu.gyr_rps[2];
 8002b48:	4ba3      	ldr	r3, [pc, #652]	; (8002dd8 <Start_Data_Reading+0x510>)
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fcfb 	bl	8000548 <__aeabi_f2d>
 8002b52:	4ba4      	ldr	r3, [pc, #656]	; (8002de4 <Start_Data_Reading+0x51c>)
 8002b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b58:	f7fd fb98 	bl	800028c <__adddf3>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	49a0      	ldr	r1, [pc, #640]	; (8002de4 <Start_Data_Reading+0x51c>)
 8002b62:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_Delay(1);
 8002b66:	2001      	movs	r0, #1
 8002b68:	f002 fcbc 	bl	80054e4 <HAL_Delay>
	for(int i_init = 0; i_init<2000; i_init++ ){
 8002b6c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002b70:	3301      	adds	r3, #1
 8002b72:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002b76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002b7a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002b7e:	db9f      	blt.n	8002ac0 <Start_Data_Reading+0x1f8>
	}
	h0 /= 2000;
 8002b80:	4b94      	ldr	r3, [pc, #592]	; (8002dd4 <Start_Data_Reading+0x50c>)
 8002b82:	ed93 7a00 	vldr	s14, [r3]
 8002b86:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002de8 <Start_Data_Reading+0x520>
 8002b8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b8e:	4b91      	ldr	r3, [pc, #580]	; (8002dd4 <Start_Data_Reading+0x50c>)
 8002b90:	edc3 7a00 	vstr	s15, [r3]
	gyro_offset_x = gyro_offset_x_calc/2000;
 8002b94:	4b91      	ldr	r3, [pc, #580]	; (8002ddc <Start_Data_Reading+0x514>)
 8002b96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	4b93      	ldr	r3, [pc, #588]	; (8002dec <Start_Data_Reading+0x524>)
 8002ba0:	f7fd fe54 	bl	800084c <__aeabi_ddiv>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4991      	ldr	r1, [pc, #580]	; (8002df0 <Start_Data_Reading+0x528>)
 8002baa:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_y = gyro_offset_y_calc/2000;
 8002bae:	4b8c      	ldr	r3, [pc, #560]	; (8002de0 <Start_Data_Reading+0x518>)
 8002bb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	4b8c      	ldr	r3, [pc, #560]	; (8002dec <Start_Data_Reading+0x524>)
 8002bba:	f7fd fe47 	bl	800084c <__aeabi_ddiv>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	498c      	ldr	r1, [pc, #560]	; (8002df4 <Start_Data_Reading+0x52c>)
 8002bc4:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_offset_z = gyro_offset_z_calc/2000;
 8002bc8:	4b86      	ldr	r3, [pc, #536]	; (8002de4 <Start_Data_Reading+0x51c>)
 8002bca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	4b86      	ldr	r3, [pc, #536]	; (8002dec <Start_Data_Reading+0x524>)
 8002bd4:	f7fd fe3a 	bl	800084c <__aeabi_ddiv>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4986      	ldr	r1, [pc, #536]	; (8002df8 <Start_Data_Reading+0x530>)
 8002bde:	e9c1 2300 	strd	r2, r3, [r1]
	struct bmm150_mag_data mag_data;

	/* Status of api are returned to this variable */
	int8_t rslt;

	rslt = bmm150_interface_selection(&dev);
 8002be2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002be6:	4618      	mov	r0, r3
 8002be8:	f00b f9a2 	bl	800df30 <bmm150_interface_selection>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	bmm150_error_codes_print_result("bmm150_interface_selection", rslt);
 8002bf2:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4880      	ldr	r0, [pc, #512]	; (8002dfc <Start_Data_Reading+0x534>)
 8002bfa:	f00b f9df 	bl	800dfbc <bmm150_error_codes_print_result>

	if (rslt == BMM150_OK) {
 8002bfe:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d11f      	bne.n	8002c46 <Start_Data_Reading+0x37e>
	        rslt = bmm150_init(&dev);
 8002c06:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f00a f8f3 	bl	800cdf6 <bmm150_init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	        bmm150_error_codes_print_result("bmm150_init", rslt);
 8002c16:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4878      	ldr	r0, [pc, #480]	; (8002e00 <Start_Data_Reading+0x538>)
 8002c1e:	f00b f9cd 	bl	800dfbc <bmm150_error_codes_print_result>

	        if (rslt == BMM150_OK) {
 8002c22:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10d      	bne.n	8002c46 <Start_Data_Reading+0x37e>
	            rslt = set_config(&dev);
 8002c2a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fb28 	bl	8002284 <set_config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	            bmm150_error_codes_print_result("set_config", rslt);
 8002c3a:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4870      	ldr	r0, [pc, #448]	; (8002e04 <Start_Data_Reading+0x53c>)
 8002c42:	f00b f9bb 	bl	800dfbc <bmm150_error_codes_print_result>
	uint8_t transmit_data[40];
	float telemetria_float[3];



	q.SEq_1=1;
 8002c46:	4b70      	ldr	r3, [pc, #448]	; (8002e08 <Start_Data_Reading+0x540>)
 8002c48:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c4c:	601a      	str	r2, [r3, #0]
	q.SEq_2=0;
 8002c4e:	4b6e      	ldr	r3, [pc, #440]	; (8002e08 <Start_Data_Reading+0x540>)
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	605a      	str	r2, [r3, #4]
	q.SEq_3=0;
 8002c56:	4b6c      	ldr	r3, [pc, #432]	; (8002e08 <Start_Data_Reading+0x540>)
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
	q.SEq_4=0;
 8002c5e:	4b6a      	ldr	r3, [pc, #424]	; (8002e08 <Start_Data_Reading+0x540>)
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]

	w.w_bx=0;
 8002c66:	4b69      	ldr	r3, [pc, #420]	; (8002e0c <Start_Data_Reading+0x544>)
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
	w.w_by=0;
 8002c6e:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <Start_Data_Reading+0x544>)
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	605a      	str	r2, [r3, #4]
	w.w_bz=0;
 8002c76:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <Start_Data_Reading+0x544>)
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
//	P_prev.a32 = 0;
//	P_prev.a33 = 0;
//	meas.a11=0;
//	meas.a21=0;

	HAL_TIM_Base_Start_IT(&htim6);
 8002c7e:	4864      	ldr	r0, [pc, #400]	; (8002e10 <Start_Data_Reading+0x548>)
 8002c80:	f006 f830 	bl	8008ce4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8002c84:	4863      	ldr	r0, [pc, #396]	; (8002e14 <Start_Data_Reading+0x54c>)
 8002c86:	f006 f82d 	bl	8008ce4 <HAL_TIM_Base_Start_IT>
	FusionAhrsInitialise(&ahrs);
 8002c8a:	4863      	ldr	r0, [pc, #396]	; (8002e18 <Start_Data_Reading+0x550>)
 8002c8c:	f009 f932 	bl	800bef4 <FusionAhrsInitialise>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002c90:	2200      	movs	r2, #0
 8002c92:	2108      	movs	r1, #8
 8002c94:	4861      	ldr	r0, [pc, #388]	; (8002e1c <Start_Data_Reading+0x554>)
 8002c96:	f003 fd5b 	bl	8006750 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002c9a:	2064      	movs	r0, #100	; 0x64
 8002c9c:	f002 fc22 	bl	80054e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	2108      	movs	r1, #8
 8002ca4:	485d      	ldr	r0, [pc, #372]	; (8002e1c <Start_Data_Reading+0x554>)
 8002ca6:	f003 fd53 	bl	8006750 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002caa:	2064      	movs	r0, #100	; 0x64
 8002cac:	f002 fc1a 	bl	80054e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2108      	movs	r1, #8
 8002cb4:	4859      	ldr	r0, [pc, #356]	; (8002e1c <Start_Data_Reading+0x554>)
 8002cb6:	f003 fd4b 	bl	8006750 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cba:	2064      	movs	r0, #100	; 0x64
 8002cbc:	f002 fc12 	bl	80054e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	2108      	movs	r1, #8
 8002cc4:	4855      	ldr	r0, [pc, #340]	; (8002e1c <Start_Data_Reading+0x554>)
 8002cc6:	f003 fd43 	bl	8006750 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cca:	2064      	movs	r0, #100	; 0x64
 8002ccc:	f002 fc0a 	bl	80054e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2108      	movs	r1, #8
 8002cd4:	4851      	ldr	r0, [pc, #324]	; (8002e1c <Start_Data_Reading+0x554>)
 8002cd6:	f003 fd3b 	bl	8006750 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cda:	2064      	movs	r0, #100	; 0x64
 8002cdc:	f002 fc02 	bl	80054e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	2108      	movs	r1, #8
 8002ce4:	484d      	ldr	r0, [pc, #308]	; (8002e1c <Start_Data_Reading+0x554>)
 8002ce6:	f003 fd33 	bl	8006750 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cea:	2064      	movs	r0, #100	; 0x64
 8002cec:	f002 fbfa 	bl	80054e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2108      	movs	r1, #8
 8002cf4:	4849      	ldr	r0, [pc, #292]	; (8002e1c <Start_Data_Reading+0x554>)
 8002cf6:	f003 fd2b 	bl	8006750 <HAL_GPIO_WritePin>

	HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, bytetoread);
 8002cfa:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <Start_Data_Reading+0x558>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	4948      	ldr	r1, [pc, #288]	; (8002e24 <Start_Data_Reading+0x55c>)
 8002d04:	4848      	ldr	r0, [pc, #288]	; (8002e28 <Start_Data_Reading+0x560>)
 8002d06:	f007 fbc9 	bl	800a49c <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_IT(&huart2, transmit_data, sizeof (transmit_data));
 8002d0a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002d0e:	2228      	movs	r2, #40	; 0x28
 8002d10:	4619      	mov	r1, r3
 8002d12:	4846      	ldr	r0, [pc, #280]	; (8002e2c <Start_Data_Reading+0x564>)
 8002d14:	f007 fb4d 	bl	800a3b2 <HAL_UART_Transmit_IT>
//	HAL_UART_Receive_IT(&huart2, telem, 11);


	vTaskResume( defaultTaskHandle );
 8002d18:	4b45      	ldr	r3, [pc, #276]	; (8002e30 <Start_Data_Reading+0x568>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f00c f84f 	bl	800edc0 <vTaskResume>

  /* Infinite loop */
  for(;;)
  {

	  	  mytimer = __HAL_TIM_GET_COUNTER(&htim7);
 8002d22:	4b3c      	ldr	r3, [pc, #240]	; (8002e14 <Start_Data_Reading+0x54c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b42      	ldr	r3, [pc, #264]	; (8002e34 <Start_Data_Reading+0x56c>)
 8002d2c:	601a      	str	r2, [r3, #0]
	  	  htim7.Instance->CNT = 0;
 8002d2e:	4b39      	ldr	r3, [pc, #228]	; (8002e14 <Start_Data_Reading+0x54c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2200      	movs	r2, #0
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24
	  	  //BOSCH API magneto begin
	  	  bmm150_get_interrupt_status(&dev);
 8002d36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f00a faa6 	bl	800d28c <bmm150_get_interrupt_status>
	  	  if (dev.int_status & BMM150_INT_ASSERTED_DRDY) {
 8002d40:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002d44:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <Start_Data_Reading+0x49a>
	  		  /* Read mag data */
	  		  bmm150_read_mag_data(&mag_data, &dev);
 8002d52:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002d56:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f00a fa18 	bl	800d192 <bmm150_read_mag_data>

		  // magnetic field data in uT
//		  mag_data_x = BMM150_Compensate_x(field_x, Rhall,  &trim_data); //magn data compensation 33.4 us
//		  mag_data_y = BMM150_Compensate_y(field_y, Rhall,  &trim_data);
//		  mag_data_z = BMM150_Compensate_z(field_z, Rhall,  &trim_data);
		  magneto_data.axis.x = mag_data.y;
 8002d62:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002d66:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002d70:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d74:	601a      	str	r2, [r3, #0]
		  magneto_data.axis.y = -mag_data.x;
 8002d76:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002d7a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	eef1 7a67 	vneg.f32	s15, s15
 8002d86:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002d8a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002d8e:	edc3 7a01 	vstr	s15, [r3, #4]
		  magneto_data.axis.z = mag_data.z;
 8002d92:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002d96:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002da0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002da4:	609a      	str	r2, [r3, #8]

		  if(i_mag < 1000){
 8002da6:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <Start_Data_Reading+0x570>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dae:	da58      	bge.n	8002e62 <Start_Data_Reading+0x59a>
			  mag_debug_x[i_mag] = mag_data_x;
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <Start_Data_Reading+0x570>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	e042      	b.n	8002e3c <Start_Data_Reading+0x574>
 8002db6:	bf00      	nop
 8002db8:	20000a5c 	.word	0x20000a5c
 8002dbc:	20000a58 	.word	0x20000a58
 8002dc0:	20000a54 	.word	0x20000a54
 8002dc4:	20000a08 	.word	0x20000a08
 8002dc8:	20000a64 	.word	0x20000a64
 8002dcc:	20000a60 	.word	0x20000a60
 8002dd0:	47c5f400 	.word	0x47c5f400
 8002dd4:	20000a68 	.word	0x20000a68
 8002dd8:	200009b8 	.word	0x200009b8
 8002ddc:	20000b70 	.word	0x20000b70
 8002de0:	20000b78 	.word	0x20000b78
 8002de4:	20000b80 	.word	0x20000b80
 8002de8:	44fa0000 	.word	0x44fa0000
 8002dec:	409f4000 	.word	0x409f4000
 8002df0:	20000b88 	.word	0x20000b88
 8002df4:	20000b90 	.word	0x20000b90
 8002df8:	20000b98 	.word	0x20000b98
 8002dfc:	0801547c 	.word	0x0801547c
 8002e00:	08015498 	.word	0x08015498
 8002e04:	080154a4 	.word	0x080154a4
 8002e08:	20000a78 	.word	0x20000a78
 8002e0c:	20000a88 	.word	0x20000a88
 8002e10:	20000764 	.word	0x20000764
 8002e14:	200007ac 	.word	0x200007ac
 8002e18:	20000a98 	.word	0x20000a98
 8002e1c:	40020400 	.word	0x40020400
 8002e20:	2000000a 	.word	0x2000000a
 8002e24:	20002b30 	.word	0x20002b30
 8002e28:	2000083c 	.word	0x2000083c
 8002e2c:	20000880 	.word	0x20000880
 8002e30:	200009ac 	.word	0x200009ac
 8002e34:	20000b6c 	.word	0x20000b6c
 8002e38:	20002ae0 	.word	0x20002ae0
 8002e3c:	4ad2      	ldr	r2, [pc, #840]	; (8003188 <Start_Data_Reading+0x8c0>)
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	49d2      	ldr	r1, [pc, #840]	; (800318c <Start_Data_Reading+0x8c4>)
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	601a      	str	r2, [r3, #0]
			  mag_debug_y[i_mag] = mag_data_y;
 8002e48:	4bd1      	ldr	r3, [pc, #836]	; (8003190 <Start_Data_Reading+0x8c8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4ad1      	ldr	r2, [pc, #836]	; (8003194 <Start_Data_Reading+0x8cc>)
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	49d1      	ldr	r1, [pc, #836]	; (8003198 <Start_Data_Reading+0x8d0>)
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	601a      	str	r2, [r3, #0]
			  i_mag++;
 8002e58:	4bcd      	ldr	r3, [pc, #820]	; (8003190 <Start_Data_Reading+0x8c8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	4acc      	ldr	r2, [pc, #816]	; (8003190 <Start_Data_Reading+0x8c8>)
 8002e60:	6013      	str	r3, [r2, #0]
		  }

		  //read IMU
		  BMI088_ReadGyroscope(&imu);	// imu read 119 us
 8002e62:	48ce      	ldr	r0, [pc, #824]	; (800319c <Start_Data_Reading+0x8d4>)
 8002e64:	f001 fd46 	bl	80048f4 <BMI088_ReadGyroscope>
		  BMI088_ReadAccelerometer(&imu);
 8002e68:	48cc      	ldr	r0, [pc, #816]	; (800319c <Start_Data_Reading+0x8d4>)
 8002e6a:	f001 fccf 	bl	800480c <BMI088_ReadAccelerometer>
		  //filterUpdate((imu.gyr_rps[0]-gyro_offset_x), (imu.gyr_rps[1]-gyro_offset_y), imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], (imu.gyr_rps[2]-gyro_offset_z), mag_data_y, -mag_data_x, mag_data_z, &q, &f, &w);


		  //eulerAngles(q, &roll, &pitch, &yaw);

		  gyro_x_degree = ((imu.gyr_rps[0]-gyro_offset_x)*57.29);
 8002e6e:	4bcb      	ldr	r3, [pc, #812]	; (800319c <Start_Data_Reading+0x8d4>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd fb68 	bl	8000548 <__aeabi_f2d>
 8002e78:	4bc9      	ldr	r3, [pc, #804]	; (80031a0 <Start_Data_Reading+0x8d8>)
 8002e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7e:	f7fd fa03 	bl	8000288 <__aeabi_dsub>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	a3bb      	add	r3, pc, #748	; (adr r3, 8003178 <Start_Data_Reading+0x8b0>)
 8002e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e90:	f7fd fbb2 	bl	80005f8 <__aeabi_dmul>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f7fd fea4 	bl	8000be8 <__aeabi_d2f>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4ac0      	ldr	r2, [pc, #768]	; (80031a4 <Start_Data_Reading+0x8dc>)
 8002ea4:	6013      	str	r3, [r2, #0]
		  gyro_y_degree = ((imu.gyr_rps[1]-gyro_offset_x)*57.29);
 8002ea6:	4bbd      	ldr	r3, [pc, #756]	; (800319c <Start_Data_Reading+0x8d4>)
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fb4c 	bl	8000548 <__aeabi_f2d>
 8002eb0:	4bbb      	ldr	r3, [pc, #748]	; (80031a0 <Start_Data_Reading+0x8d8>)
 8002eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb6:	f7fd f9e7 	bl	8000288 <__aeabi_dsub>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	a3ad      	add	r3, pc, #692	; (adr r3, 8003178 <Start_Data_Reading+0x8b0>)
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	f7fd fb96 	bl	80005f8 <__aeabi_dmul>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f7fd fe88 	bl	8000be8 <__aeabi_d2f>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4ab3      	ldr	r2, [pc, #716]	; (80031a8 <Start_Data_Reading+0x8e0>)
 8002edc:	6013      	str	r3, [r2, #0]
		  gyro_z_degree = ((imu.gyr_rps[2]-gyro_offset_x)*57.29);
 8002ede:	4baf      	ldr	r3, [pc, #700]	; (800319c <Start_Data_Reading+0x8d4>)
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd fb30 	bl	8000548 <__aeabi_f2d>
 8002ee8:	4bad      	ldr	r3, [pc, #692]	; (80031a0 <Start_Data_Reading+0x8d8>)
 8002eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eee:	f7fd f9cb 	bl	8000288 <__aeabi_dsub>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	a39f      	add	r3, pc, #636	; (adr r3, 8003178 <Start_Data_Reading+0x8b0>)
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	f7fd fb7a 	bl	80005f8 <__aeabi_dmul>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f7fd fe6c 	bl	8000be8 <__aeabi_d2f>
 8002f10:	4603      	mov	r3, r0
 8002f12:	4aa6      	ldr	r2, [pc, #664]	; (80031ac <Start_Data_Reading+0x8e4>)
 8002f14:	6013      	str	r3, [r2, #0]


//		  magneto_data = FusionVectorSubtract(magneto_data, magneto_offset);
		  magneto_data = FusionMatrixMultiplyVector(magneto_transform, FusionVectorSubtract(magneto_data, magneto_offset));
 8002f16:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 8002f1a:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 8002f1e:	ed97 6a3e 	vldr	s12, [r7, #248]	; 0xf8
 8002f22:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002f26:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f2a:	edd3 6a00 	vldr	s13, [r3]
 8002f2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f32:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f36:	eef0 1a45 	vmov.f32	s3, s10
 8002f3a:	eeb0 2a65 	vmov.f32	s4, s11
 8002f3e:	eef0 2a46 	vmov.f32	s5, s12
 8002f42:	eeb0 0a66 	vmov.f32	s0, s13
 8002f46:	eef0 0a47 	vmov.f32	s1, s14
 8002f4a:	eeb0 1a67 	vmov.f32	s2, s15
 8002f4e:	f7fe f877 	bl	8001040 <FusionVectorSubtract>
 8002f52:	eef0 6a40 	vmov.f32	s13, s0
 8002f56:	eeb0 7a60 	vmov.f32	s14, s1
 8002f5a:	eef0 7a41 	vmov.f32	s15, s2
 8002f5e:	edc7 6a3f 	vstr	s13, [r7, #252]	; 0xfc
 8002f62:	ed87 7a40 	vstr	s14, [r7, #256]	; 0x100
 8002f66:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104
 8002f6a:	edd7 6a3f 	vldr	s13, [r7, #252]	; 0xfc
 8002f6e:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 8002f72:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8002f76:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002f7a:	f5a3 7686 	sub.w	r6, r3, #268	; 0x10c
 8002f7e:	466d      	mov	r5, sp
 8002f80:	f106 0410 	add.w	r4, r6, #16
 8002f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	602b      	str	r3, [r5, #0]
 8002f8c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002f90:	eeb0 0a66 	vmov.f32	s0, s13
 8002f94:	eef0 0a47 	vmov.f32	s1, s14
 8002f98:	eeb0 1a67 	vmov.f32	s2, s15
 8002f9c:	f7fe f8e2 	bl	8001164 <FusionMatrixMultiplyVector>
 8002fa0:	eef0 6a40 	vmov.f32	s13, s0
 8002fa4:	eeb0 7a60 	vmov.f32	s14, s1
 8002fa8:	eef0 7a41 	vmov.f32	s15, s2
 8002fac:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002fb0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fb4:	edc3 6a00 	vstr	s13, [r3]
 8002fb8:	ed83 7a01 	vstr	s14, [r3, #4]
 8002fbc:	edc3 7a02 	vstr	s15, [r3, #8]

		  const FusionVector gyroscope = {gyro_x_degree, gyro_y_degree, gyro_z_degree};
 8002fc0:	4b78      	ldr	r3, [pc, #480]	; (80031a4 <Start_Data_Reading+0x8dc>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002fc8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <Start_Data_Reading+0x8e0>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002fd6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	4b73      	ldr	r3, [pc, #460]	; (80031ac <Start_Data_Reading+0x8e4>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002fe4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002fe8:	609a      	str	r2, [r3, #8]
		  const FusionVector accelerometer = {imu.acc_mps2[0]/9.81, imu.acc_mps2[1]/9.81, imu.acc_mps2[2]/9.81};
 8002fea:	4b6c      	ldr	r3, [pc, #432]	; (800319c <Start_Data_Reading+0x8d4>)
 8002fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd faaa 	bl	8000548 <__aeabi_f2d>
 8002ff4:	a362      	add	r3, pc, #392	; (adr r3, 8003180 <Start_Data_Reading+0x8b8>)
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	f7fd fc27 	bl	800084c <__aeabi_ddiv>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	f7fd fdef 	bl	8000be8 <__aeabi_d2f>
 800300a:	4602      	mov	r2, r0
 800300c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8003010:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	4b61      	ldr	r3, [pc, #388]	; (800319c <Start_Data_Reading+0x8d4>)
 8003018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd fa94 	bl	8000548 <__aeabi_f2d>
 8003020:	a357      	add	r3, pc, #348	; (adr r3, 8003180 <Start_Data_Reading+0x8b8>)
 8003022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003026:	f7fd fc11 	bl	800084c <__aeabi_ddiv>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	f7fd fdd9 	bl	8000be8 <__aeabi_d2f>
 8003036:	4602      	mov	r2, r0
 8003038:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800303c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	4b56      	ldr	r3, [pc, #344]	; (800319c <Start_Data_Reading+0x8d4>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd fa7e 	bl	8000548 <__aeabi_f2d>
 800304c:	a34c      	add	r3, pc, #304	; (adr r3, 8003180 <Start_Data_Reading+0x8b8>)
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	f7fd fbfb 	bl	800084c <__aeabi_ddiv>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	f7fd fdc3 	bl	8000be8 <__aeabi_d2f>
 8003062:	4602      	mov	r2, r0
 8003064:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8003068:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800306c:	609a      	str	r2, [r3, #8]
		  const FusionVector magnetometer = {magneto_data.axis.x, magneto_data.axis.y, magneto_data.axis.z};
 800306e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8003072:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800307c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8003086:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8003090:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800309a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80030a4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030a8:	609a      	str	r2, [r3, #8]

		  //no magnetometer AHRS
//		  FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, SAMPLE_PERIOD);

		  //magnetometer AHRS
		  FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, SAMPLE_PERIOD);
 80030aa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80030ae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80030b2:	ed93 3a00 	vldr	s6, [r3]
 80030b6:	edd3 3a01 	vldr	s7, [r3, #4]
 80030ba:	ed93 4a02 	vldr	s8, [r3, #8]
 80030be:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80030c2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80030c6:	ed93 5a00 	vldr	s10, [r3]
 80030ca:	edd3 5a01 	vldr	s11, [r3, #4]
 80030ce:	ed93 6a02 	vldr	s12, [r3, #8]
 80030d2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80030d6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80030da:	edd3 6a00 	vldr	s13, [r3]
 80030de:	ed93 7a01 	vldr	s14, [r3, #4]
 80030e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80030e6:	eddf 4a32 	vldr	s9, [pc, #200]	; 80031b0 <Start_Data_Reading+0x8e8>
 80030ea:	eef0 1a45 	vmov.f32	s3, s10
 80030ee:	eeb0 2a65 	vmov.f32	s4, s11
 80030f2:	eef0 2a46 	vmov.f32	s5, s12
 80030f6:	eeb0 0a66 	vmov.f32	s0, s13
 80030fa:	eef0 0a47 	vmov.f32	s1, s14
 80030fe:	eeb0 1a67 	vmov.f32	s2, s15
 8003102:	482c      	ldr	r0, [pc, #176]	; (80031b4 <Start_Data_Reading+0x8ec>)
 8003104:	f009 f830 	bl	800c168 <FusionAhrsUpdate>

		  euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8003108:	482a      	ldr	r0, [pc, #168]	; (80031b4 <Start_Data_Reading+0x8ec>)
 800310a:	f009 fe51 	bl	800cdb0 <FusionAhrsGetQuaternion>
 800310e:	eeb0 6a40 	vmov.f32	s12, s0
 8003112:	eef0 6a60 	vmov.f32	s13, s1
 8003116:	eeb0 7a41 	vmov.f32	s14, s2
 800311a:	eef0 7a61 	vmov.f32	s15, s3
 800311e:	ed87 6a42 	vstr	s12, [r7, #264]	; 0x108
 8003122:	edc7 6a43 	vstr	s13, [r7, #268]	; 0x10c
 8003126:	ed87 7a44 	vstr	s14, [r7, #272]	; 0x110
 800312a:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
 800312e:	ed97 6a42 	vldr	s12, [r7, #264]	; 0x108
 8003132:	edd7 6a43 	vldr	s13, [r7, #268]	; 0x10c
 8003136:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 800313a:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 800313e:	eeb0 0a46 	vmov.f32	s0, s12
 8003142:	eef0 0a66 	vmov.f32	s1, s13
 8003146:	eeb0 1a47 	vmov.f32	s2, s14
 800314a:	eef0 1a67 	vmov.f32	s3, s15
 800314e:	f7fe f94e 	bl	80013ee <FusionQuaternionToEuler>
 8003152:	eef0 6a40 	vmov.f32	s13, s0
 8003156:	eeb0 7a60 	vmov.f32	s14, s1
 800315a:	eef0 7a41 	vmov.f32	s15, s2
 800315e:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <Start_Data_Reading+0x8f0>)
 8003160:	edc3 6a00 	vstr	s13, [r3]
 8003164:	ed83 7a01 	vstr	s14, [r3, #4]
 8003168:	edc3 7a02 	vstr	s15, [r3, #8]
		  // Rotation matrix from sensor frame to earth(NWU) frame
		  ERS = FusionQuaternionToMatrix(FusionAhrsGetQuaternion(&ahrs));
 800316c:	4811      	ldr	r0, [pc, #68]	; (80031b4 <Start_Data_Reading+0x8ec>)
 800316e:	f009 fe1f 	bl	800cdb0 <FusionAhrsGetQuaternion>
 8003172:	e023      	b.n	80031bc <Start_Data_Reading+0x8f4>
 8003174:	f3af 8000 	nop.w
 8003178:	b851eb85 	.word	0xb851eb85
 800317c:	404ca51e 	.word	0x404ca51e
 8003180:	51eb851f 	.word	0x51eb851f
 8003184:	40239eb8 	.word	0x40239eb8
 8003188:	20000a48 	.word	0x20000a48
 800318c:	20000ba0 	.word	0x20000ba0
 8003190:	20002ae0 	.word	0x20002ae0
 8003194:	20000a4c 	.word	0x20000a4c
 8003198:	20001b40 	.word	0x20001b40
 800319c:	200009b8 	.word	0x200009b8
 80031a0:	20000b88 	.word	0x20000b88
 80031a4:	20000a6c 	.word	0x20000a6c
 80031a8:	20000a70 	.word	0x20000a70
 80031ac:	20000a74 	.word	0x20000a74
 80031b0:	3ba3d70a 	.word	0x3ba3d70a
 80031b4:	20000a98 	.word	0x20000a98
 80031b8:	20000b0c 	.word	0x20000b0c
 80031bc:	eeb0 6a40 	vmov.f32	s12, s0
 80031c0:	eef0 6a60 	vmov.f32	s13, s1
 80031c4:	eeb0 7a41 	vmov.f32	s14, s2
 80031c8:	eef0 7a61 	vmov.f32	s15, s3
 80031cc:	ed87 6a46 	vstr	s12, [r7, #280]	; 0x118
 80031d0:	edc7 6a47 	vstr	s13, [r7, #284]	; 0x11c
 80031d4:	ed87 7a48 	vstr	s14, [r7, #288]	; 0x120
 80031d8:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
 80031dc:	4cdc      	ldr	r4, [pc, #880]	; (8003550 <Start_Data_Reading+0xc88>)
 80031de:	463b      	mov	r3, r7
 80031e0:	ed97 6a46 	vldr	s12, [r7, #280]	; 0x118
 80031e4:	edd7 6a47 	vldr	s13, [r7, #284]	; 0x11c
 80031e8:	ed97 7a48 	vldr	s14, [r7, #288]	; 0x120
 80031ec:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 80031f0:	eeb0 0a46 	vmov.f32	s0, s12
 80031f4:	eef0 0a66 	vmov.f32	s1, s13
 80031f8:	eeb0 1a47 	vmov.f32	s2, s14
 80031fc:	eef0 1a67 	vmov.f32	s3, s15
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe f827 	bl	8001254 <FusionQuaternionToMatrix>
 8003206:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800320a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800320e:	461d      	mov	r5, r3
 8003210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003218:	682b      	ldr	r3, [r5, #0]
 800321a:	6023      	str	r3, [r4, #0]
		  aE = FusionMatrixMultiplyVector(ERS, FusionVectorMultiplyScalar(accelerometer, 9.81));
 800321c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8003220:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003224:	edd3 6a00 	vldr	s13, [r3]
 8003228:	ed93 7a01 	vldr	s14, [r3, #4]
 800322c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003230:	eddf 1ac8 	vldr	s3, [pc, #800]	; 8003554 <Start_Data_Reading+0xc8c>
 8003234:	eeb0 0a66 	vmov.f32	s0, s13
 8003238:	eef0 0a47 	vmov.f32	s1, s14
 800323c:	eeb0 1a67 	vmov.f32	s2, s15
 8003240:	f7fd ff4c 	bl	80010dc <FusionVectorMultiplyScalar>
 8003244:	eef0 6a40 	vmov.f32	s13, s0
 8003248:	eeb0 7a60 	vmov.f32	s14, s1
 800324c:	eef0 7a41 	vmov.f32	s15, s2
 8003250:	edc7 6a4a 	vstr	s13, [r7, #296]	; 0x128
 8003254:	ed87 7a4b 	vstr	s14, [r7, #300]	; 0x12c
 8003258:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
 800325c:	edd7 6a4a 	vldr	s13, [r7, #296]	; 0x128
 8003260:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 8003264:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 8003268:	4eb9      	ldr	r6, [pc, #740]	; (8003550 <Start_Data_Reading+0xc88>)
 800326a:	466d      	mov	r5, sp
 800326c:	f106 0410 	add.w	r4, r6, #16
 8003270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	602b      	str	r3, [r5, #0]
 8003278:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800327c:	eeb0 0a66 	vmov.f32	s0, s13
 8003280:	eef0 0a47 	vmov.f32	s1, s14
 8003284:	eeb0 1a67 	vmov.f32	s2, s15
 8003288:	f7fd ff6c 	bl	8001164 <FusionMatrixMultiplyVector>
 800328c:	eef0 6a40 	vmov.f32	s13, s0
 8003290:	eeb0 7a60 	vmov.f32	s14, s1
 8003294:	eef0 7a41 	vmov.f32	s15, s2
 8003298:	4baf      	ldr	r3, [pc, #700]	; (8003558 <Start_Data_Reading+0xc90>)
 800329a:	edc3 6a00 	vstr	s13, [r3]
 800329e:	ed83 7a01 	vstr	s14, [r3, #4]
 80032a2:	edc3 7a02 	vstr	s15, [r3, #8]
		  aE.axis.z -=9.85173;
 80032a6:	4bac      	ldr	r3, [pc, #688]	; (8003558 <Start_Data_Reading+0xc90>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd f94c 	bl	8000548 <__aeabi_f2d>
 80032b0:	a3a3      	add	r3, pc, #652	; (adr r3, 8003540 <Start_Data_Reading+0xc78>)
 80032b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b6:	f7fc ffe7 	bl	8000288 <__aeabi_dsub>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4610      	mov	r0, r2
 80032c0:	4619      	mov	r1, r3
 80032c2:	f7fd fc91 	bl	8000be8 <__aeabi_d2f>
 80032c6:	4603      	mov	r3, r0
 80032c8:	4aa3      	ldr	r2, [pc, #652]	; (8003558 <Start_Data_Reading+0xc90>)
 80032ca:	6093      	str	r3, [r2, #8]



		  // calculate rotation around yaw axis
		  if(prev_euler_yaw > 170 && euler.angle.yaw < 0){
 80032cc:	edd7 7a6d 	vldr	s15, [r7, #436]	; 0x1b4
 80032d0:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 800355c <Start_Data_Reading+0xc94>
 80032d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032dc:	dd0c      	ble.n	80032f8 <Start_Data_Reading+0xa30>
 80032de:	4ba0      	ldr	r3, [pc, #640]	; (8003560 <Start_Data_Reading+0xc98>)
 80032e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80032e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ec:	d504      	bpl.n	80032f8 <Start_Data_Reading+0xa30>
			  n++;
 80032ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80032f2:	3301      	adds	r3, #1
 80032f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
		  }
		  if(prev_euler_yaw < -170 && euler.angle.yaw > 0){
 80032f8:	edd7 7a6d 	vldr	s15, [r7, #436]	; 0x1b4
 80032fc:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8003564 <Start_Data_Reading+0xc9c>
 8003300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003308:	d50c      	bpl.n	8003324 <Start_Data_Reading+0xa5c>
 800330a:	4b95      	ldr	r3, [pc, #596]	; (8003560 <Start_Data_Reading+0xc98>)
 800330c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003318:	dd04      	ble.n	8003324 <Start_Data_Reading+0xa5c>
			  n--;
 800331a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800331e:	3b01      	subs	r3, #1
 8003320:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
		  }
		  yaw_angle = euler.angle.yaw + n * 360.0;
 8003324:	4b8e      	ldr	r3, [pc, #568]	; (8003560 <Start_Data_Reading+0xc98>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd f90d 	bl	8000548 <__aeabi_f2d>
 800332e:	4604      	mov	r4, r0
 8003330:	460d      	mov	r5, r1
 8003332:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8003336:	f7fd f8f5 	bl	8000524 <__aeabi_i2d>
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	4b8a      	ldr	r3, [pc, #552]	; (8003568 <Start_Data_Reading+0xca0>)
 8003340:	f7fd f95a 	bl	80005f8 <__aeabi_dmul>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4620      	mov	r0, r4
 800334a:	4629      	mov	r1, r5
 800334c:	f7fc ff9e 	bl	800028c <__adddf3>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4610      	mov	r0, r2
 8003356:	4619      	mov	r1, r3
 8003358:	f7fd fc46 	bl	8000be8 <__aeabi_d2f>
 800335c:	4603      	mov	r3, r0
 800335e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		  abs_yaw = yaw_angle;
 8003362:	4a82      	ldr	r2, [pc, #520]	; (800356c <Start_Data_Reading+0xca4>)
 8003364:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003368:	6013      	str	r3, [r2, #0]
		  prev_euler_yaw = euler.angle.yaw;
 800336a:	4b7d      	ldr	r3, [pc, #500]	; (8003560 <Start_Data_Reading+0xc98>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
//		  HAL_UART_Transmit (&huart2, transmit_data, sizeof (transmit_data), 500);



		  //altitudeKF(prev_state, &current_state, P_prev, &P, meas);
		  M_throttle = CRSFtoDuty(RX_throttle);
 8003372:	4b7f      	ldr	r3, [pc, #508]	; (8003570 <Start_Data_Reading+0xca8>)
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f001 ffa6 	bl	80052c8 <CRSFtoDuty>
 800337c:	eef0 7a40 	vmov.f32	s15, s0
 8003380:	4b7c      	ldr	r3, [pc, #496]	; (8003574 <Start_Data_Reading+0xcac>)
 8003382:	edc3 7a00 	vstr	s15, [r3]
		  M_pitch = CRSFtoPitch(RX_pitch)*25;
 8003386:	4b7c      	ldr	r3, [pc, #496]	; (8003578 <Start_Data_Reading+0xcb0>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f001 ffde 	bl	800534c <CRSFtoPitch>
 8003390:	eef0 7a40 	vmov.f32	s15, s0
 8003394:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800339c:	4b77      	ldr	r3, [pc, #476]	; (800357c <Start_Data_Reading+0xcb4>)
 800339e:	edc3 7a00 	vstr	s15, [r3]
		  M_roll = CRSFtoRoll(RX_roll)*15;
 80033a2:	4b77      	ldr	r3, [pc, #476]	; (8003580 <Start_Data_Reading+0xcb8>)
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 ffee 	bl	8005388 <CRSFtoRoll>
 80033ac:	eef0 7a40 	vmov.f32	s15, s0
 80033b0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80033b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033b8:	4b72      	ldr	r3, [pc, #456]	; (8003584 <Start_Data_Reading+0xcbc>)
 80033ba:	edc3 7a00 	vstr	s15, [r3]
		  M_yaw += CRSFtoYaw(RX_yaw)*0.3;
 80033be:	4b72      	ldr	r3, [pc, #456]	; (8003588 <Start_Data_Reading+0xcc0>)
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f001 fffe 	bl	80053c4 <CRSFtoYaw>
 80033c8:	ee10 3a10 	vmov	r3, s0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd f8bb 	bl	8000548 <__aeabi_f2d>
 80033d2:	a35d      	add	r3, pc, #372	; (adr r3, 8003548 <Start_Data_Reading+0xc80>)
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f7fd f90e 	bl	80005f8 <__aeabi_dmul>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4614      	mov	r4, r2
 80033e2:	461d      	mov	r5, r3
 80033e4:	4b69      	ldr	r3, [pc, #420]	; (800358c <Start_Data_Reading+0xcc4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd f8ad 	bl	8000548 <__aeabi_f2d>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4620      	mov	r0, r4
 80033f4:	4629      	mov	r1, r5
 80033f6:	f7fc ff49 	bl	800028c <__adddf3>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4610      	mov	r0, r2
 8003400:	4619      	mov	r1, r3
 8003402:	f7fd fbf1 	bl	8000be8 <__aeabi_d2f>
 8003406:	4603      	mov	r3, r0
 8003408:	4a60      	ldr	r2, [pc, #384]	; (800358c <Start_Data_Reading+0xcc4>)
 800340a:	6013      	str	r3, [r2, #0]

		  //pitch angle control
		  err_angle_pitch = M_pitch - euler.angle.pitch;
 800340c:	4b5b      	ldr	r3, [pc, #364]	; (800357c <Start_Data_Reading+0xcb4>)
 800340e:	ed93 7a00 	vldr	s14, [r3]
 8003412:	4b53      	ldr	r3, [pc, #332]	; (8003560 <Start_Data_Reading+0xc98>)
 8003414:	edd3 7a01 	vldr	s15, [r3, #4]
 8003418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800341c:	edc7 7a65 	vstr	s15, [r7, #404]	; 0x194
		  errd_angle_pitch = (err_angle_pitch - prev_err_angle_pitch)/SAMPLE_PERIOD;
 8003420:	ed97 7a65 	vldr	s14, [r7, #404]	; 0x194
 8003424:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 8003428:	ee37 7a67 	vsub.f32	s14, s14, s15
 800342c:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003590 <Start_Data_Reading+0xcc8>
 8003430:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003434:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
		  angle_control_pitch = P_angle_pitch * err_angle_pitch + D_angle_pitch * errd_angle_pitch;
 8003438:	ed97 7a62 	vldr	s14, [r7, #392]	; 0x188
 800343c:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 8003440:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003444:	edd7 6a61 	vldr	s13, [r7, #388]	; 0x184
 8003448:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 800344c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003454:	edc7 7a63 	vstr	s15, [r7, #396]	; 0x18c
		  prev_err_angle_pitch = err_angle_pitch;
 8003458:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800345c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		  //debug_control1 = err_angle_pitch;

		  //pitch angle velocity control
		  err_pitch = angle_control_pitch - imu.gyr_rps[1];
 8003460:	4b4c      	ldr	r3, [pc, #304]	; (8003594 <Start_Data_Reading+0xccc>)
 8003462:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003466:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 800346a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800346e:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
		  errd_pitch = (err_pitch - prev_err_pitch)/SAMPLE_PERIOD;
 8003472:	ed97 7a6a 	vldr	s14, [r7, #424]	; 0x1a8
 8003476:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 800347a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800347e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8003590 <Start_Data_Reading+0xcc8>
 8003482:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003486:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
		  prev_err_pitch = err_pitch;
 800348a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800348e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		  control_pitch = P_pitch * err_pitch + D_pitch * errd_pitch;
 8003492:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 8003496:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 800349a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800349e:	edd7 6a66 	vldr	s13, [r7, #408]	; 0x198
 80034a2:	edd7 7a69 	vldr	s15, [r7, #420]	; 0x1a4
 80034a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ae:	edc7 7a68 	vstr	s15, [r7, #416]	; 0x1a0

		  //roll angle control
		  err_angle_roll = M_roll - euler.angle.roll;
 80034b2:	4b34      	ldr	r3, [pc, #208]	; (8003584 <Start_Data_Reading+0xcbc>)
 80034b4:	ed93 7a00 	vldr	s14, [r3]
 80034b8:	4b29      	ldr	r3, [pc, #164]	; (8003560 <Start_Data_Reading+0xc98>)
 80034ba:	edd3 7a00 	vldr	s15, [r3]
 80034be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034c2:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
		  errd_angle_roll = (err_angle_roll - prev_err_angle_roll)/SAMPLE_PERIOD;
 80034c6:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
 80034ca:	edd7 7a72 	vldr	s15, [r7, #456]	; 0x1c8
 80034ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034d2:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8003590 <Start_Data_Reading+0xcc8>
 80034d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034da:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160
		  angle_control_roll = P_angle_roll * err_angle_roll + D_angle_roll * errd_angle_roll;
 80034de:	ed97 7a5b 	vldr	s14, [r7, #364]	; 0x16c
 80034e2:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 80034e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ea:	edd7 6a5a 	vldr	s13, [r7, #360]	; 0x168
 80034ee:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 80034f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fa:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
		  prev_err_angle_roll = err_angle_roll;
 80034fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003502:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		  debug_control1 = err_angle_roll;
 8003506:	4a24      	ldr	r2, [pc, #144]	; (8003598 <Start_Data_Reading+0xcd0>)
 8003508:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800350c:	6013      	str	r3, [r2, #0]


		  //roll angle velocity control
		  err_roll = angle_control_roll - imu.gyr_rps[0]; //M_roll
 800350e:	4b21      	ldr	r3, [pc, #132]	; (8003594 <Start_Data_Reading+0xccc>)
 8003510:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003514:	ed97 7a57 	vldr	s14, [r7, #348]	; 0x15c
 8003518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800351c:	edc7 7a60 	vstr	s15, [r7, #384]	; 0x180
		  errd_roll = (err_roll - prev_err_roll)/SAMPLE_PERIOD;
 8003520:	ed97 7a60 	vldr	s14, [r7, #384]	; 0x180
 8003524:	edd7 7a73 	vldr	s15, [r7, #460]	; 0x1cc
 8003528:	ee37 7a67 	vsub.f32	s14, s14, s15
 800352c:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003590 <Start_Data_Reading+0xcc8>
 8003530:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003534:	edc7 7a5f 	vstr	s15, [r7, #380]	; 0x17c
		  prev_err_roll = err_roll;
 8003538:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800353c:	e02e      	b.n	800359c <Start_Data_Reading+0xcd4>
 800353e:	bf00      	nop
 8003540:	f45e0b4e 	.word	0xf45e0b4e
 8003544:	4023b415 	.word	0x4023b415
 8003548:	33333333 	.word	0x33333333
 800354c:	3fd33333 	.word	0x3fd33333
 8003550:	20000b18 	.word	0x20000b18
 8003554:	411cf5c3 	.word	0x411cf5c3
 8003558:	20000b3c 	.word	0x20000b3c
 800355c:	432a0000 	.word	0x432a0000
 8003560:	20000b0c 	.word	0x20000b0c
 8003564:	c32a0000 	.word	0xc32a0000
 8003568:	40768000 	.word	0x40768000
 800356c:	20000a94 	.word	0x20000a94
 8003570:	20002b38 	.word	0x20002b38
 8003574:	20002b3c 	.word	0x20002b3c
 8003578:	20002b34 	.word	0x20002b34
 800357c:	20002b40 	.word	0x20002b40
 8003580:	20002b32 	.word	0x20002b32
 8003584:	20002b44 	.word	0x20002b44
 8003588:	20002b36 	.word	0x20002b36
 800358c:	20002b48 	.word	0x20002b48
 8003590:	3ba3d70a 	.word	0x3ba3d70a
 8003594:	200009b8 	.word	0x200009b8
 8003598:	20002b4c 	.word	0x20002b4c
 800359c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
		  control_roll = P_roll * err_roll + D_roll * errd_roll;
 80035a0:	ed97 7a5d 	vldr	s14, [r7, #372]	; 0x174
 80035a4:	edd7 7a60 	vldr	s15, [r7, #384]	; 0x180
 80035a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ac:	edd7 6a5c 	vldr	s13, [r7, #368]	; 0x170
 80035b0:	edd7 7a5f 	vldr	s15, [r7, #380]	; 0x17c
 80035b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035bc:	edc7 7a5e 	vstr	s15, [r7, #376]	; 0x178
		  debug_control2 = control_roll;
 80035c0:	4a9c      	ldr	r2, [pc, #624]	; (8003834 <Start_Data_Reading+0xf6c>)
 80035c2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80035c6:	6013      	str	r3, [r2, #0]


		  //yaw angle control
		  err_angle_yaw = M_yaw - euler.angle.yaw;
 80035c8:	4b9b      	ldr	r3, [pc, #620]	; (8003838 <Start_Data_Reading+0xf70>)
 80035ca:	ed93 7a00 	vldr	s14, [r3]
 80035ce:	4b9b      	ldr	r3, [pc, #620]	; (800383c <Start_Data_Reading+0xf74>)
 80035d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80035d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035d8:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144
		  errd_angle_yaw = (err_angle_yaw - prev_err_angle_yaw)/SAMPLE_PERIOD;
 80035dc:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 80035e0:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80035e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035e8:	eddf 6a95 	vldr	s13, [pc, #596]	; 8003840 <Start_Data_Reading+0xf78>
 80035ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035f0:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
		  angle_control_yaw = P_angle_yaw * err_angle_yaw + D_angle_yaw * errd_angle_yaw;
 80035f4:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 80035f8:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 80035fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003600:	edd7 6a52 	vldr	s13, [r7, #328]	; 0x148
 8003604:	edd7 7a50 	vldr	s15, [r7, #320]	; 0x140
 8003608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800360c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003610:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
		  prev_err_angle_yaw = err_angle_yaw;
 8003614:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003618:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8



		  //yaw angle velocity control
		  err_yaw = angle_control_yaw - imu.gyr_rps[2]; //angle_control_yaw
 800361c:	4b89      	ldr	r3, [pc, #548]	; (8003844 <Start_Data_Reading+0xf7c>)
 800361e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003622:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 8003626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800362a:	edc7 7a56 	vstr	s15, [r7, #344]	; 0x158
		  errd_yaw = (err_yaw - prev_err_yaw)/SAMPLE_PERIOD;
 800362e:	ed97 7a56 	vldr	s14, [r7, #344]	; 0x158
 8003632:	edd7 7a71 	vldr	s15, [r7, #452]	; 0x1c4
 8003636:	ee37 7a67 	vsub.f32	s14, s14, s15
 800363a:	eddf 6a81 	vldr	s13, [pc, #516]	; 8003840 <Start_Data_Reading+0xf78>
 800363e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003642:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
		  prev_err_yaw = err_yaw;
 8003646:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800364a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
		  control_yaw = P_yaw * err_yaw + D_yaw * errd_yaw;
 800364e:	ed97 7a70 	vldr	s14, [r7, #448]	; 0x1c0
 8003652:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 8003656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800365a:	edd7 6a6f 	vldr	s13, [r7, #444]	; 0x1bc
 800365e:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8003662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800366a:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150



		  if(RX_arm > 1000){
 800366e:	4b76      	ldr	r3, [pc, #472]	; (8003848 <Start_Data_Reading+0xf80>)
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003676:	f240 8084 	bls.w	8003782 <Start_Data_Reading+0xeba>
			  uart_telemetria = 0;
 800367a:	4b74      	ldr	r3, [pc, #464]	; (800384c <Start_Data_Reading+0xf84>)
 800367c:	2200      	movs	r2, #0
 800367e:	701a      	strb	r2, [r3, #0]
//			  ref2 = (uint16_t)(M_throttle + control_yaw);
//			  ref3 = (uint16_t)(M_throttle - control_yaw);
//			  ref4 = (uint16_t)(M_throttle + control_yaw);

			  //all together
			  ref1 = (uint16_t)(M_throttle - control_yaw - control_pitch + control_roll);
 8003680:	4b73      	ldr	r3, [pc, #460]	; (8003850 <Start_Data_Reading+0xf88>)
 8003682:	ed93 7a00 	vldr	s14, [r3]
 8003686:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 800368a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800368e:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 8003692:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003696:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 800369a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800369e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a2:	ee17 3a90 	vmov	r3, s15
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	4b6a      	ldr	r3, [pc, #424]	; (8003854 <Start_Data_Reading+0xf8c>)
 80036aa:	801a      	strh	r2, [r3, #0]
			  ref2 = (uint16_t)(M_throttle + control_yaw - control_pitch - control_roll);
 80036ac:	4b68      	ldr	r3, [pc, #416]	; (8003850 <Start_Data_Reading+0xf88>)
 80036ae:	ed93 7a00 	vldr	s14, [r3]
 80036b2:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 80036b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036ba:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 80036be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036c2:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 80036c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ce:	ee17 3a90 	vmov	r3, s15
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	4b60      	ldr	r3, [pc, #384]	; (8003858 <Start_Data_Reading+0xf90>)
 80036d6:	801a      	strh	r2, [r3, #0]
			  ref3 = (uint16_t)(M_throttle - control_yaw + control_pitch - control_roll);
 80036d8:	4b5d      	ldr	r3, [pc, #372]	; (8003850 <Start_Data_Reading+0xf88>)
 80036da:	ed93 7a00 	vldr	s14, [r3]
 80036de:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 80036e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036e6:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 80036ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036ee:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 80036f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036fa:	ee17 3a90 	vmov	r3, s15
 80036fe:	b29a      	uxth	r2, r3
 8003700:	4b56      	ldr	r3, [pc, #344]	; (800385c <Start_Data_Reading+0xf94>)
 8003702:	801a      	strh	r2, [r3, #0]
			  ref4 = (uint16_t)(M_throttle + control_yaw + control_pitch + control_roll);
 8003704:	4b52      	ldr	r3, [pc, #328]	; (8003850 <Start_Data_Reading+0xf88>)
 8003706:	ed93 7a00 	vldr	s14, [r3]
 800370a:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 800370e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003712:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 8003716:	ee37 7a27 	vadd.f32	s14, s14, s15
 800371a:	edd7 7a5e 	vldr	s15, [r7, #376]	; 0x178
 800371e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003726:	ee17 3a90 	vmov	r3, s15
 800372a:	b29a      	uxth	r2, r3
 800372c:	4b4c      	ldr	r3, [pc, #304]	; (8003860 <Start_Data_Reading+0xf98>)
 800372e:	801a      	strh	r2, [r3, #0]
//			  ref1 = (uint16_t)(M_throttle);
//			  ref2 = (uint16_t)(M_throttle);
//			  ref3 = (uint16_t)(M_throttle);
//			  ref4 = (uint16_t)(M_throttle);

			  if(ref1<550) ref1 = 550;
 8003730:	4b48      	ldr	r3, [pc, #288]	; (8003854 <Start_Data_Reading+0xf8c>)
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	f240 2225 	movw	r2, #549	; 0x225
 8003738:	4293      	cmp	r3, r2
 800373a:	d803      	bhi.n	8003744 <Start_Data_Reading+0xe7c>
 800373c:	4b45      	ldr	r3, [pc, #276]	; (8003854 <Start_Data_Reading+0xf8c>)
 800373e:	f240 2226 	movw	r2, #550	; 0x226
 8003742:	801a      	strh	r2, [r3, #0]
			  if(ref2<550) ref2 = 550;
 8003744:	4b44      	ldr	r3, [pc, #272]	; (8003858 <Start_Data_Reading+0xf90>)
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	f240 2225 	movw	r2, #549	; 0x225
 800374c:	4293      	cmp	r3, r2
 800374e:	d803      	bhi.n	8003758 <Start_Data_Reading+0xe90>
 8003750:	4b41      	ldr	r3, [pc, #260]	; (8003858 <Start_Data_Reading+0xf90>)
 8003752:	f240 2226 	movw	r2, #550	; 0x226
 8003756:	801a      	strh	r2, [r3, #0]
			  if(ref3<550) ref3 = 550;
 8003758:	4b40      	ldr	r3, [pc, #256]	; (800385c <Start_Data_Reading+0xf94>)
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	f240 2225 	movw	r2, #549	; 0x225
 8003760:	4293      	cmp	r3, r2
 8003762:	d803      	bhi.n	800376c <Start_Data_Reading+0xea4>
 8003764:	4b3d      	ldr	r3, [pc, #244]	; (800385c <Start_Data_Reading+0xf94>)
 8003766:	f240 2226 	movw	r2, #550	; 0x226
 800376a:	801a      	strh	r2, [r3, #0]
			  if(ref4<550) ref4 = 550;
 800376c:	4b3c      	ldr	r3, [pc, #240]	; (8003860 <Start_Data_Reading+0xf98>)
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	f240 2225 	movw	r2, #549	; 0x225
 8003774:	4293      	cmp	r3, r2
 8003776:	d82d      	bhi.n	80037d4 <Start_Data_Reading+0xf0c>
 8003778:	4b39      	ldr	r3, [pc, #228]	; (8003860 <Start_Data_Reading+0xf98>)
 800377a:	f240 2226 	movw	r2, #550	; 0x226
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	e028      	b.n	80037d4 <Start_Data_Reading+0xf0c>

		  }
		  else{
			  uart_telemetria = 1;
 8003782:	4b32      	ldr	r3, [pc, #200]	; (800384c <Start_Data_Reading+0xf84>)
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
			  if(new_P == 1){
 8003788:	4b36      	ldr	r3, [pc, #216]	; (8003864 <Start_Data_Reading+0xf9c>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d106      	bne.n	800379e <Start_Data_Reading+0xed6>
				  P_yaw = telem_P;
 8003790:	4b35      	ldr	r3, [pc, #212]	; (8003868 <Start_Data_Reading+0xfa0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
				  new_P = 0;
 8003798:	4b32      	ldr	r3, [pc, #200]	; (8003864 <Start_Data_Reading+0xf9c>)
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
			  }
			  if(new_D == 1){
 800379e:	4b33      	ldr	r3, [pc, #204]	; (800386c <Start_Data_Reading+0xfa4>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d106      	bne.n	80037b4 <Start_Data_Reading+0xeec>
				  D_yaw = telem_D;
 80037a6:	4b32      	ldr	r3, [pc, #200]	; (8003870 <Start_Data_Reading+0xfa8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
				  new_D = 0;
 80037ae:	4b2f      	ldr	r3, [pc, #188]	; (800386c <Start_Data_Reading+0xfa4>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
			  }
			  ref1 = 550;
 80037b4:	4b27      	ldr	r3, [pc, #156]	; (8003854 <Start_Data_Reading+0xf8c>)
 80037b6:	f240 2226 	movw	r2, #550	; 0x226
 80037ba:	801a      	strh	r2, [r3, #0]
			  ref2 = 550;
 80037bc:	4b26      	ldr	r3, [pc, #152]	; (8003858 <Start_Data_Reading+0xf90>)
 80037be:	f240 2226 	movw	r2, #550	; 0x226
 80037c2:	801a      	strh	r2, [r3, #0]
			  ref3 = 550;
 80037c4:	4b25      	ldr	r3, [pc, #148]	; (800385c <Start_Data_Reading+0xf94>)
 80037c6:	f240 2226 	movw	r2, #550	; 0x226
 80037ca:	801a      	strh	r2, [r3, #0]
			  ref4 = 550;
 80037cc:	4b24      	ldr	r3, [pc, #144]	; (8003860 <Start_Data_Reading+0xf98>)
 80037ce:	f240 2226 	movw	r2, #550	; 0x226
 80037d2:	801a      	strh	r2, [r3, #0]

//		  telemetria_float[0] = magneto_data.axis.x;
//		  telemetria_float[1] = magneto_data.axis.y;
//		  telemetria_float[2] = magneto_data.axis.z;

		  telemetria_float[0] = euler.angle.roll;
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <Start_Data_Reading+0xf74>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80037dc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80037e0:	601a      	str	r2, [r3, #0]
		  telemetria_float[1] = euler.angle.pitch;
 80037e2:	4b16      	ldr	r3, [pc, #88]	; (800383c <Start_Data_Reading+0xf74>)
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80037ea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80037ee:	605a      	str	r2, [r3, #4]
		  telemetria_float[2] = euler.angle.yaw;
 80037f0:	4b12      	ldr	r3, [pc, #72]	; (800383c <Start_Data_Reading+0xf74>)
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80037f8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80037fc:	609a      	str	r2, [r3, #8]
		  xQueueSendToFront(telemetria_Queue, (void*)&telemetria_float, 0);
 80037fe:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <Start_Data_Reading+0xfac>)
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8003806:	2301      	movs	r3, #1
 8003808:	2200      	movs	r2, #0
 800380a:	f00a fdf1 	bl	800e3f0 <xQueueGenericSend>



//		  set_duty_Oneshot42(&htim3, 550, 550, 550, 550);
		  set_duty_Oneshot42(&htim3, ref1, ref2, ref3, ref4);
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <Start_Data_Reading+0xf8c>)
 8003810:	8819      	ldrh	r1, [r3, #0]
 8003812:	4b11      	ldr	r3, [pc, #68]	; (8003858 <Start_Data_Reading+0xf90>)
 8003814:	881a      	ldrh	r2, [r3, #0]
 8003816:	4b11      	ldr	r3, [pc, #68]	; (800385c <Start_Data_Reading+0xf94>)
 8003818:	8818      	ldrh	r0, [r3, #0]
 800381a:	4b11      	ldr	r3, [pc, #68]	; (8003860 <Start_Data_Reading+0xf98>)
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	4603      	mov	r3, r0
 8003822:	4815      	ldr	r0, [pc, #84]	; (8003878 <Start_Data_Reading+0xfb0>)
 8003824:	f001 fd2d 	bl	8005282 <set_duty_Oneshot42>
	osDelay(3);
 8003828:	2003      	movs	r0, #3
 800382a:	f00a fc56 	bl	800e0da <osDelay>
  {
 800382e:	f7ff ba78 	b.w	8002d22 <Start_Data_Reading+0x45a>
 8003832:	bf00      	nop
 8003834:	20002b50 	.word	0x20002b50
 8003838:	20002b48 	.word	0x20002b48
 800383c:	20000b0c 	.word	0x20000b0c
 8003840:	3ba3d70a 	.word	0x3ba3d70a
 8003844:	200009b8 	.word	0x200009b8
 8003848:	20002b3a 	.word	0x20002b3a
 800384c:	20000b56 	.word	0x20000b56
 8003850:	20002b3c 	.word	0x20002b3c
 8003854:	20002ae4 	.word	0x20002ae4
 8003858:	20002ae6 	.word	0x20002ae6
 800385c:	20002ae8 	.word	0x20002ae8
 8003860:	20002aea 	.word	0x20002aea
 8003864:	20000b60 	.word	0x20000b60
 8003868:	20000b58 	.word	0x20000b58
 800386c:	20000b61 	.word	0x20000b61
 8003870:	20000b5c 	.word	0x20000b5c
 8003874:	20002b54 	.word	0x20002b54
 8003878:	200006d4 	.word	0x200006d4

0800387c <Start_Orientation>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Orientation */
void Start_Orientation(void const * argument)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
//		//filterUpdateIMU(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], &q );
//		filterUpdate(imu.gyr_rps[0], imu.gyr_rps[1], imu.gyr_rps[2], imu.acc_mps2[0], imu.acc_mps2[1], imu.acc_mps2[2], mag_data_y, -mag_data_x, mag_data_z, &q, &f);
//		eulerAngles(q, &roll, &pitch, &yaw);
//		oricalc = 0;
//	  }
    osDelay(1);
 8003884:	2001      	movs	r0, #1
 8003886:	f00a fc28 	bl	800e0da <osDelay>
 800388a:	e7fb      	b.n	8003884 <Start_Orientation+0x8>

0800388c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003890:	b672      	cpsid	i
}
 8003892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003894:	e7fe      	b.n	8003894 <Error_Handler+0x8>
	...

08003898 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	4b12      	ldr	r3, [pc, #72]	; (80038ec <HAL_MspInit+0x54>)
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	4a11      	ldr	r2, [pc, #68]	; (80038ec <HAL_MspInit+0x54>)
 80038a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ac:	6453      	str	r3, [r2, #68]	; 0x44
 80038ae:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <HAL_MspInit+0x54>)
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	603b      	str	r3, [r7, #0]
 80038be:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_MspInit+0x54>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <HAL_MspInit+0x54>)
 80038c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ca:	4b08      	ldr	r3, [pc, #32]	; (80038ec <HAL_MspInit+0x54>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80038d6:	2200      	movs	r2, #0
 80038d8:	210f      	movs	r1, #15
 80038da:	f06f 0001 	mvn.w	r0, #1
 80038de:	f002 f962 	bl	8005ba6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800

080038f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08e      	sub	sp, #56	; 0x38
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]
 8003906:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a45      	ldr	r2, [pc, #276]	; (8003a24 <HAL_ADC_MspInit+0x134>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d128      	bne.n	8003964 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	623b      	str	r3, [r7, #32]
 8003916:	4b44      	ldr	r3, [pc, #272]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	4a43      	ldr	r2, [pc, #268]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 800391c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003920:	6453      	str	r3, [r2, #68]	; 0x44
 8003922:	4b41      	ldr	r3, [pc, #260]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	4b3d      	ldr	r3, [pc, #244]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	4a3c      	ldr	r2, [pc, #240]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	6313      	str	r3, [r2, #48]	; 0x30
 800393e:	4b3a      	ldr	r3, [pc, #232]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = CRNT_Pin;
 800394a:	2320      	movs	r3, #32
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800394e:	2303      	movs	r3, #3
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	2300      	movs	r3, #0
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CRNT_GPIO_Port, &GPIO_InitStruct);
 8003956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800395a:	4619      	mov	r1, r3
 800395c:	4833      	ldr	r0, [pc, #204]	; (8003a2c <HAL_ADC_MspInit+0x13c>)
 800395e:	f002 fd5b 	bl	8006418 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003962:	e05a      	b.n	8003a1a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a31      	ldr	r2, [pc, #196]	; (8003a30 <HAL_ADC_MspInit+0x140>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d128      	bne.n	80039c0 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	61bb      	str	r3, [r7, #24]
 8003972:	4b2d      	ldr	r3, [pc, #180]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	4a2c      	ldr	r2, [pc, #176]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 8003978:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800397c:	6453      	str	r3, [r2, #68]	; 0x44
 800397e:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003986:	61bb      	str	r3, [r7, #24]
 8003988:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	4a25      	ldr	r2, [pc, #148]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	6313      	str	r3, [r2, #48]	; 0x30
 800399a:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80039a6:	2310      	movs	r3, #16
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039aa:	2303      	movs	r3, #3
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b6:	4619      	mov	r1, r3
 80039b8:	481c      	ldr	r0, [pc, #112]	; (8003a2c <HAL_ADC_MspInit+0x13c>)
 80039ba:	f002 fd2d 	bl	8006418 <HAL_GPIO_Init>
}
 80039be:	e02c      	b.n	8003a1a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1b      	ldr	r2, [pc, #108]	; (8003a34 <HAL_ADC_MspInit+0x144>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d127      	bne.n	8003a1a <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	4a15      	ldr	r2, [pc, #84]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 80039d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039d8:	6453      	str	r3, [r2, #68]	; 0x44
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	4a0e      	ldr	r2, [pc, #56]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 80039f0:	f043 0304 	orr.w	r3, r3, #4
 80039f4:	6313      	str	r3, [r2, #48]	; 0x30
 80039f6:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <HAL_ADC_MspInit+0x138>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a02:	2308      	movs	r3, #8
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a06:	2303      	movs	r3, #3
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a12:	4619      	mov	r1, r3
 8003a14:	4808      	ldr	r0, [pc, #32]	; (8003a38 <HAL_ADC_MspInit+0x148>)
 8003a16:	f002 fcff 	bl	8006418 <HAL_GPIO_Init>
}
 8003a1a:	bf00      	nop
 8003a1c:	3738      	adds	r7, #56	; 0x38
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40012000 	.word	0x40012000
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40020000 	.word	0x40020000
 8003a30:	40012100 	.word	0x40012100
 8003a34:	40012200 	.word	0x40012200
 8003a38:	40020800 	.word	0x40020800

08003a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08e      	sub	sp, #56	; 0x38
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a5c      	ldr	r2, [pc, #368]	; (8003bcc <HAL_I2C_MspInit+0x190>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d12d      	bne.n	8003aba <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	623b      	str	r3, [r7, #32]
 8003a62:	4b5b      	ldr	r3, [pc, #364]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	4a5a      	ldr	r2, [pc, #360]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003a68:	f043 0302 	orr.w	r3, r3, #2
 8003a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6e:	4b58      	ldr	r3, [pc, #352]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	623b      	str	r3, [r7, #32]
 8003a78:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAGN_SCL_Pin|MAGN_SDA_Pin;
 8003a7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a80:	2312      	movs	r3, #18
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a94:	4619      	mov	r1, r3
 8003a96:	484f      	ldr	r0, [pc, #316]	; (8003bd4 <HAL_I2C_MspInit+0x198>)
 8003a98:	f002 fcbe 	bl	8006418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	4b4b      	ldr	r3, [pc, #300]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	4a4a      	ldr	r2, [pc, #296]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8003aac:	4b48      	ldr	r3, [pc, #288]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003ab8:	e083      	b.n	8003bc2 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a46      	ldr	r2, [pc, #280]	; (8003bd8 <HAL_I2C_MspInit+0x19c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d12d      	bne.n	8003b20 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61bb      	str	r3, [r7, #24]
 8003ac8:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	4a40      	ldr	r2, [pc, #256]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003ace:	f043 0302 	orr.w	r3, r3, #2
 8003ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad4:	4b3e      	ldr	r3, [pc, #248]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PRESS_SCL_Pin|PRESS_SDA_Pin;
 8003ae0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ae6:	2312      	movs	r3, #18
 8003ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aee:	2303      	movs	r3, #3
 8003af0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003af2:	2304      	movs	r3, #4
 8003af4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003afa:	4619      	mov	r1, r3
 8003afc:	4835      	ldr	r0, [pc, #212]	; (8003bd4 <HAL_I2C_MspInit+0x198>)
 8003afe:	f002 fc8b 	bl	8006418 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	4b32      	ldr	r3, [pc, #200]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	4a31      	ldr	r2, [pc, #196]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003b0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b10:	6413      	str	r3, [r2, #64]	; 0x40
 8003b12:	4b2f      	ldr	r3, [pc, #188]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	697b      	ldr	r3, [r7, #20]
}
 8003b1e:	e050      	b.n	8003bc2 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2d      	ldr	r2, [pc, #180]	; (8003bdc <HAL_I2C_MspInit+0x1a0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d14b      	bne.n	8003bc2 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	4a27      	ldr	r2, [pc, #156]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003b34:	f043 0304 	orr.w	r3, r3, #4
 8003b38:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3a:	4b25      	ldr	r3, [pc, #148]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b68:	2312      	movs	r3, #18
 8003b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b70:	2303      	movs	r3, #3
 8003b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b74:	2304      	movs	r3, #4
 8003b76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4818      	ldr	r0, [pc, #96]	; (8003be0 <HAL_I2C_MspInit+0x1a4>)
 8003b80:	f002 fc4a 	bl	8006418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b8a:	2312      	movs	r3, #18
 8003b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b92:	2303      	movs	r3, #3
 8003b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003b96:	2304      	movs	r3, #4
 8003b98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4810      	ldr	r0, [pc, #64]	; (8003be4 <HAL_I2C_MspInit+0x1a8>)
 8003ba2:	f002 fc39 	bl	8006418 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	4a08      	ldr	r2, [pc, #32]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003bb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_I2C_MspInit+0x194>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
}
 8003bc2:	bf00      	nop
 8003bc4:	3738      	adds	r7, #56	; 0x38
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40005400 	.word	0x40005400
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40020400 	.word	0x40020400
 8003bd8:	40005800 	.word	0x40005800
 8003bdc:	40005c00 	.word	0x40005c00
 8003be0:	40020800 	.word	0x40020800
 8003be4:	40020000 	.word	0x40020000

08003be8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	; 0x28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a19      	ldr	r2, [pc, #100]	; (8003c6c <HAL_SPI_MspInit+0x84>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d12c      	bne.n	8003c64 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	4b18      	ldr	r3, [pc, #96]	; (8003c70 <HAL_SPI_MspInit+0x88>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	4a17      	ldr	r2, [pc, #92]	; (8003c70 <HAL_SPI_MspInit+0x88>)
 8003c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c18:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1a:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <HAL_SPI_MspInit+0x88>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <HAL_SPI_MspInit+0x88>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	4a10      	ldr	r2, [pc, #64]	; (8003c70 <HAL_SPI_MspInit+0x88>)
 8003c30:	f043 0302 	orr.w	r3, r3, #2
 8003c34:	6313      	str	r3, [r2, #48]	; 0x30
 8003c36:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <HAL_SPI_MspInit+0x88>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8003c42:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c50:	2303      	movs	r3, #3
 8003c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c54:	2305      	movs	r3, #5
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c58:	f107 0314 	add.w	r3, r7, #20
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4805      	ldr	r0, [pc, #20]	; (8003c74 <HAL_SPI_MspInit+0x8c>)
 8003c60:	f002 fbda 	bl	8006418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003c64:	bf00      	nop
 8003c66:	3728      	adds	r7, #40	; 0x28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40003800 	.word	0x40003800
 8003c70:	40023800 	.word	0x40023800
 8003c74:	40020400 	.word	0x40020400

08003c78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08e      	sub	sp, #56	; 0x38
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c98:	d134      	bne.n	8003d04 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	623b      	str	r3, [r7, #32]
 8003c9e:	4b55      	ldr	r3, [pc, #340]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	4a54      	ldr	r2, [pc, #336]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8003caa:	4b52      	ldr	r3, [pc, #328]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	623b      	str	r3, [r7, #32]
 8003cb4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
 8003cba:	4b4e      	ldr	r3, [pc, #312]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a4d      	ldr	r2, [pc, #308]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b4b      	ldr	r3, [pc, #300]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	61fb      	str	r3, [r7, #28]
 8003cd0:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cea:	4619      	mov	r1, r3
 8003cec:	4842      	ldr	r0, [pc, #264]	; (8003df8 <HAL_TIM_Base_MspInit+0x180>)
 8003cee:	f002 fb93 	bl	8006418 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2105      	movs	r1, #5
 8003cf6:	201c      	movs	r0, #28
 8003cf8:	f001 ff55 	bl	8005ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003cfc:	201c      	movs	r0, #28
 8003cfe:	f001 ff6e 	bl	8005bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003d02:	e072      	b.n	8003dea <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM3)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a3c      	ldr	r2, [pc, #240]	; (8003dfc <HAL_TIM_Base_MspInit+0x184>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d10e      	bne.n	8003d2c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	4b38      	ldr	r3, [pc, #224]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4a37      	ldr	r2, [pc, #220]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003d18:	f043 0302 	orr.w	r3, r3, #2
 8003d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1e:	4b35      	ldr	r3, [pc, #212]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	69bb      	ldr	r3, [r7, #24]
}
 8003d2a:	e05e      	b.n	8003dea <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM4)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a33      	ldr	r2, [pc, #204]	; (8003e00 <HAL_TIM_Base_MspInit+0x188>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10e      	bne.n	8003d54 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	4b2e      	ldr	r3, [pc, #184]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	4a2d      	ldr	r2, [pc, #180]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003d40:	f043 0304 	orr.w	r3, r3, #4
 8003d44:	6413      	str	r3, [r2, #64]	; 0x40
 8003d46:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	697b      	ldr	r3, [r7, #20]
}
 8003d52:	e04a      	b.n	8003dea <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM6)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a2a      	ldr	r2, [pc, #168]	; (8003e04 <HAL_TIM_Base_MspInit+0x18c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d116      	bne.n	8003d8c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	4a23      	ldr	r2, [pc, #140]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003d68:	f043 0310 	orr.w	r3, r3, #16
 8003d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6e:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2105      	movs	r1, #5
 8003d7e:	2036      	movs	r0, #54	; 0x36
 8003d80:	f001 ff11 	bl	8005ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d84:	2036      	movs	r0, #54	; 0x36
 8003d86:	f001 ff2a 	bl	8005bde <HAL_NVIC_EnableIRQ>
}
 8003d8a:	e02e      	b.n	8003dea <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM7)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <HAL_TIM_Base_MspInit+0x190>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d116      	bne.n	8003dc4 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a15      	ldr	r2, [pc, #84]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003da0:	f043 0320 	orr.w	r3, r3, #32
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
 8003da6:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003db2:	2200      	movs	r2, #0
 8003db4:	2105      	movs	r1, #5
 8003db6:	2037      	movs	r0, #55	; 0x37
 8003db8:	f001 fef5 	bl	8005ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003dbc:	2037      	movs	r0, #55	; 0x37
 8003dbe:	f001 ff0e 	bl	8005bde <HAL_NVIC_EnableIRQ>
}
 8003dc2:	e012      	b.n	8003dea <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM10)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a10      	ldr	r2, [pc, #64]	; (8003e0c <HAL_TIM_Base_MspInit+0x194>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d10d      	bne.n	8003dea <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dde:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <HAL_TIM_Base_MspInit+0x17c>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	68bb      	ldr	r3, [r7, #8]
}
 8003dea:	bf00      	nop
 8003dec:	3738      	adds	r7, #56	; 0x38
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40020000 	.word	0x40020000
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40000800 	.word	0x40000800
 8003e04:	40001000 	.word	0x40001000
 8003e08:	40001400 	.word	0x40001400
 8003e0c:	40014400 	.word	0x40014400

08003e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	60da      	str	r2, [r3, #12]
 8003e26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a21      	ldr	r2, [pc, #132]	; (8003eb4 <HAL_TIM_MspPostInit+0xa4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d13b      	bne.n	8003eaa <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <HAL_TIM_MspPostInit+0xa8>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <HAL_TIM_MspPostInit+0xa8>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6313      	str	r3, [r2, #48]	; 0x30
 8003e42:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <HAL_TIM_MspPostInit+0xa8>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <HAL_TIM_MspPostInit+0xa8>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	4a18      	ldr	r2, [pc, #96]	; (8003eb8 <HAL_TIM_MspPostInit+0xa8>)
 8003e58:	f043 0302 	orr.w	r3, r3, #2
 8003e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5e:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <HAL_TIM_MspPostInit+0xa8>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8003e6a:	23c0      	movs	r3, #192	; 0xc0
 8003e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e76:	2300      	movs	r3, #0
 8003e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e7e:	f107 0314 	add.w	r3, r7, #20
 8003e82:	4619      	mov	r1, r3
 8003e84:	480d      	ldr	r0, [pc, #52]	; (8003ebc <HAL_TIM_MspPostInit+0xac>)
 8003e86:	f002 fac7 	bl	8006418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM3_Pin|PWM4_Pin;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e96:	2300      	movs	r3, #0
 8003e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e9e:	f107 0314 	add.w	r3, r7, #20
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4806      	ldr	r0, [pc, #24]	; (8003ec0 <HAL_TIM_MspPostInit+0xb0>)
 8003ea6:	f002 fab7 	bl	8006418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003eaa:	bf00      	nop
 8003eac:	3728      	adds	r7, #40	; 0x28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40020000 	.word	0x40020000
 8003ec0:	40020400 	.word	0x40020400

08003ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b090      	sub	sp, #64	; 0x40
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a81      	ldr	r2, [pc, #516]	; (80040e8 <HAL_UART_MspInit+0x224>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d15d      	bne.n	8003fa2 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eea:	4b80      	ldr	r3, [pc, #512]	; (80040ec <HAL_UART_MspInit+0x228>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	4a7f      	ldr	r2, [pc, #508]	; (80040ec <HAL_UART_MspInit+0x228>)
 8003ef0:	f043 0310 	orr.w	r3, r3, #16
 8003ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef6:	4b7d      	ldr	r3, [pc, #500]	; (80040ec <HAL_UART_MspInit+0x228>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
 8003f06:	4b79      	ldr	r3, [pc, #484]	; (80040ec <HAL_UART_MspInit+0x228>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	4a78      	ldr	r2, [pc, #480]	; (80040ec <HAL_UART_MspInit+0x228>)
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	6313      	str	r3, [r2, #48]	; 0x30
 8003f12:	4b76      	ldr	r3, [pc, #472]	; (80040ec <HAL_UART_MspInit+0x228>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RECEIVER_TX_Pin|RECEIVER_RX_Pin;
 8003f1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f24:	2302      	movs	r3, #2
 8003f26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f30:	2307      	movs	r3, #7
 8003f32:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f38:	4619      	mov	r1, r3
 8003f3a:	486d      	ldr	r0, [pc, #436]	; (80040f0 <HAL_UART_MspInit+0x22c>)
 8003f3c:	f002 fa6c 	bl	8006418 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003f40:	4b6c      	ldr	r3, [pc, #432]	; (80040f4 <HAL_UART_MspInit+0x230>)
 8003f42:	4a6d      	ldr	r2, [pc, #436]	; (80040f8 <HAL_UART_MspInit+0x234>)
 8003f44:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003f46:	4b6b      	ldr	r3, [pc, #428]	; (80040f4 <HAL_UART_MspInit+0x230>)
 8003f48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f4e:	4b69      	ldr	r3, [pc, #420]	; (80040f4 <HAL_UART_MspInit+0x230>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f54:	4b67      	ldr	r3, [pc, #412]	; (80040f4 <HAL_UART_MspInit+0x230>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f5a:	4b66      	ldr	r3, [pc, #408]	; (80040f4 <HAL_UART_MspInit+0x230>)
 8003f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f60:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f62:	4b64      	ldr	r3, [pc, #400]	; (80040f4 <HAL_UART_MspInit+0x230>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f68:	4b62      	ldr	r3, [pc, #392]	; (80040f4 <HAL_UART_MspInit+0x230>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003f6e:	4b61      	ldr	r3, [pc, #388]	; (80040f4 <HAL_UART_MspInit+0x230>)
 8003f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f74:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003f76:	4b5f      	ldr	r3, [pc, #380]	; (80040f4 <HAL_UART_MspInit+0x230>)
 8003f78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f7c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f7e:	4b5d      	ldr	r3, [pc, #372]	; (80040f4 <HAL_UART_MspInit+0x230>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f84:	485b      	ldr	r0, [pc, #364]	; (80040f4 <HAL_UART_MspInit+0x230>)
 8003f86:	f001 fe45 	bl	8005c14 <HAL_DMA_Init>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003f90:	f7ff fc7c 	bl	800388c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a57      	ldr	r2, [pc, #348]	; (80040f4 <HAL_UART_MspInit+0x230>)
 8003f98:	639a      	str	r2, [r3, #56]	; 0x38
 8003f9a:	4a56      	ldr	r2, [pc, #344]	; (80040f4 <HAL_UART_MspInit+0x230>)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003fa0:	e09d      	b.n	80040de <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART2)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a55      	ldr	r2, [pc, #340]	; (80040fc <HAL_UART_MspInit+0x238>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d134      	bne.n	8004016 <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fac:	2300      	movs	r3, #0
 8003fae:	623b      	str	r3, [r7, #32]
 8003fb0:	4b4e      	ldr	r3, [pc, #312]	; (80040ec <HAL_UART_MspInit+0x228>)
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	4a4d      	ldr	r2, [pc, #308]	; (80040ec <HAL_UART_MspInit+0x228>)
 8003fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fba:	6413      	str	r3, [r2, #64]	; 0x40
 8003fbc:	4b4b      	ldr	r3, [pc, #300]	; (80040ec <HAL_UART_MspInit+0x228>)
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc4:	623b      	str	r3, [r7, #32]
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	4b47      	ldr	r3, [pc, #284]	; (80040ec <HAL_UART_MspInit+0x228>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	4a46      	ldr	r2, [pc, #280]	; (80040ec <HAL_UART_MspInit+0x228>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd8:	4b44      	ldr	r3, [pc, #272]	; (80040ec <HAL_UART_MspInit+0x228>)
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003fe4:	230c      	movs	r3, #12
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ff4:	2307      	movs	r3, #7
 8003ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	483c      	ldr	r0, [pc, #240]	; (80040f0 <HAL_UART_MspInit+0x22c>)
 8004000:	f002 fa0a 	bl	8006418 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004004:	2200      	movs	r2, #0
 8004006:	2105      	movs	r1, #5
 8004008:	2026      	movs	r0, #38	; 0x26
 800400a:	f001 fdcc 	bl	8005ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800400e:	2026      	movs	r0, #38	; 0x26
 8004010:	f001 fde5 	bl	8005bde <HAL_NVIC_EnableIRQ>
}
 8004014:	e063      	b.n	80040de <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART3)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a39      	ldr	r2, [pc, #228]	; (8004100 <HAL_UART_MspInit+0x23c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d12d      	bne.n	800407c <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004020:	2300      	movs	r3, #0
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	4b31      	ldr	r3, [pc, #196]	; (80040ec <HAL_UART_MspInit+0x228>)
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	4a30      	ldr	r2, [pc, #192]	; (80040ec <HAL_UART_MspInit+0x228>)
 800402a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800402e:	6413      	str	r3, [r2, #64]	; 0x40
 8004030:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <HAL_UART_MspInit+0x228>)
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	4b2a      	ldr	r3, [pc, #168]	; (80040ec <HAL_UART_MspInit+0x228>)
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	4a29      	ldr	r2, [pc, #164]	; (80040ec <HAL_UART_MspInit+0x228>)
 8004046:	f043 0304 	orr.w	r3, r3, #4
 800404a:	6313      	str	r3, [r2, #48]	; 0x30
 800404c:	4b27      	ldr	r3, [pc, #156]	; (80040ec <HAL_UART_MspInit+0x228>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8004058:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800405c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405e:	2302      	movs	r3, #2
 8004060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004062:	2300      	movs	r3, #0
 8004064:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004066:	2303      	movs	r3, #3
 8004068:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800406a:	2307      	movs	r3, #7
 800406c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800406e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004072:	4619      	mov	r1, r3
 8004074:	4823      	ldr	r0, [pc, #140]	; (8004104 <HAL_UART_MspInit+0x240>)
 8004076:	f002 f9cf 	bl	8006418 <HAL_GPIO_Init>
}
 800407a:	e030      	b.n	80040de <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART6)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a21      	ldr	r2, [pc, #132]	; (8004108 <HAL_UART_MspInit+0x244>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d12b      	bne.n	80040de <HAL_UART_MspInit+0x21a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	4b18      	ldr	r3, [pc, #96]	; (80040ec <HAL_UART_MspInit+0x228>)
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	4a17      	ldr	r2, [pc, #92]	; (80040ec <HAL_UART_MspInit+0x228>)
 8004090:	f043 0320 	orr.w	r3, r3, #32
 8004094:	6453      	str	r3, [r2, #68]	; 0x44
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <HAL_UART_MspInit+0x228>)
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	4b11      	ldr	r3, [pc, #68]	; (80040ec <HAL_UART_MspInit+0x228>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	4a10      	ldr	r2, [pc, #64]	; (80040ec <HAL_UART_MspInit+0x228>)
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	6313      	str	r3, [r2, #48]	; 0x30
 80040b2:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <HAL_UART_MspInit+0x228>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040be:	23c0      	movs	r3, #192	; 0xc0
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c2:	2302      	movs	r3, #2
 80040c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ca:	2303      	movs	r3, #3
 80040cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80040ce:	2308      	movs	r3, #8
 80040d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040d6:	4619      	mov	r1, r3
 80040d8:	480a      	ldr	r0, [pc, #40]	; (8004104 <HAL_UART_MspInit+0x240>)
 80040da:	f002 f99d 	bl	8006418 <HAL_GPIO_Init>
}
 80040de:	bf00      	nop
 80040e0:	3740      	adds	r7, #64	; 0x40
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40011000 	.word	0x40011000
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40020000 	.word	0x40020000
 80040f4:	2000094c 	.word	0x2000094c
 80040f8:	40026440 	.word	0x40026440
 80040fc:	40004400 	.word	0x40004400
 8004100:	40004800 	.word	0x40004800
 8004104:	40020800 	.word	0x40020800
 8004108:	40011400 	.word	0x40011400

0800410c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004110:	e7fe      	b.n	8004110 <NMI_Handler+0x4>

08004112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004112:	b480      	push	{r7}
 8004114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004116:	e7fe      	b.n	8004116 <HardFault_Handler+0x4>

08004118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800411c:	e7fe      	b.n	800411c <MemManage_Handler+0x4>

0800411e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004122:	e7fe      	b.n	8004122 <BusFault_Handler+0x4>

08004124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004128:	e7fe      	b.n	8004128 <UsageFault_Handler+0x4>

0800412a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800412a:	b480      	push	{r7}
 800412c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800412e:	bf00      	nop
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800413c:	f001 f9b2 	bl	80054a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004140:	f00b fa9a 	bl	800f678 <xTaskGetSchedulerState>
 8004144:	4603      	mov	r3, r0
 8004146:	2b01      	cmp	r3, #1
 8004148:	d001      	beq.n	800414e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800414a:	f00b fd5d 	bl	800fc08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}

08004152 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8004156:	2001      	movs	r0, #1
 8004158:	f002 fb2e 	bl	80067b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800415c:	bf00      	nop
 800415e:	bd80      	pop	{r7, pc}

08004160 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_PRESS_Pin);
 8004164:	2004      	movs	r0, #4
 8004166:	f002 fb27 	bl	80067b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004174:	4802      	ldr	r0, [pc, #8]	; (8004180 <TIM2_IRQHandler+0x10>)
 8004176:	f004 ffa0 	bl	80090ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	2000068c 	.word	0x2000068c

08004184 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004188:	4802      	ldr	r0, [pc, #8]	; (8004194 <USART2_IRQHandler+0x10>)
 800418a:	f006 f9b7 	bl	800a4fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000880 	.word	0x20000880

08004198 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IT_GYRO_Pin);
 800419c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80041a0:	f002 fb0a 	bl	80067b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_ACC_Pin);
 80041a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80041a8:	f002 fb06 	bl	80067b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_MAGN_Pin);
 80041ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041b0:	f002 fb02 	bl	80067b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80041bc:	4802      	ldr	r0, [pc, #8]	; (80041c8 <TIM6_DAC_IRQHandler+0x10>)
 80041be:	f004 ff7c 	bl	80090ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000764 	.word	0x20000764

080041cc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80041d0:	4802      	ldr	r0, [pc, #8]	; (80041dc <TIM7_IRQHandler+0x10>)
 80041d2:	f004 ff72 	bl	80090ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80041d6:	bf00      	nop
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	200007ac 	.word	0x200007ac

080041e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80041e4:	4802      	ldr	r0, [pc, #8]	; (80041f0 <DMA2_Stream2_IRQHandler+0x10>)
 80041e6:	f001 fead 	bl	8005f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80041ea:	bf00      	nop
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	2000094c 	.word	0x2000094c

080041f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return 1;
 80041f8:	2301      	movs	r3, #1
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <_kill>:

int _kill(int pid, int sig)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800420e:	f00b ff35 	bl	801007c <__errno>
 8004212:	4603      	mov	r3, r0
 8004214:	2216      	movs	r2, #22
 8004216:	601a      	str	r2, [r3, #0]
  return -1;
 8004218:	f04f 33ff 	mov.w	r3, #4294967295
}
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <_exit>:

void _exit (int status)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800422c:	f04f 31ff 	mov.w	r1, #4294967295
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff ffe7 	bl	8004204 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004236:	e7fe      	b.n	8004236 <_exit+0x12>

08004238 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	e00a      	b.n	8004260 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800424a:	f3af 8000 	nop.w
 800424e:	4601      	mov	r1, r0
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	60ba      	str	r2, [r7, #8]
 8004256:	b2ca      	uxtb	r2, r1
 8004258:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	3301      	adds	r3, #1
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	dbf0      	blt.n	800424a <_read+0x12>
  }

  return len;
 8004268:	687b      	ldr	r3, [r7, #4]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b086      	sub	sp, #24
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	e009      	b.n	8004298 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	60ba      	str	r2, [r7, #8]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	3301      	adds	r3, #1
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	429a      	cmp	r2, r3
 800429e:	dbf1      	blt.n	8004284 <_write+0x12>
  }
  return len;
 80042a0:	687b      	ldr	r3, [r7, #4]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <_close>:

int _close(int file)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042d2:	605a      	str	r2, [r3, #4]
  return 0;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <_isatty>:

int _isatty(int file)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80042ea:	2301      	movs	r3, #1
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800431c:	4a14      	ldr	r2, [pc, #80]	; (8004370 <_sbrk+0x5c>)
 800431e:	4b15      	ldr	r3, [pc, #84]	; (8004374 <_sbrk+0x60>)
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004328:	4b13      	ldr	r3, [pc, #76]	; (8004378 <_sbrk+0x64>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d102      	bne.n	8004336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004330:	4b11      	ldr	r3, [pc, #68]	; (8004378 <_sbrk+0x64>)
 8004332:	4a12      	ldr	r2, [pc, #72]	; (800437c <_sbrk+0x68>)
 8004334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004336:	4b10      	ldr	r3, [pc, #64]	; (8004378 <_sbrk+0x64>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4413      	add	r3, r2
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	429a      	cmp	r2, r3
 8004342:	d207      	bcs.n	8004354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004344:	f00b fe9a 	bl	801007c <__errno>
 8004348:	4603      	mov	r3, r0
 800434a:	220c      	movs	r2, #12
 800434c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800434e:	f04f 33ff 	mov.w	r3, #4294967295
 8004352:	e009      	b.n	8004368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004354:	4b08      	ldr	r3, [pc, #32]	; (8004378 <_sbrk+0x64>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800435a:	4b07      	ldr	r3, [pc, #28]	; (8004378 <_sbrk+0x64>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4413      	add	r3, r2
 8004362:	4a05      	ldr	r2, [pc, #20]	; (8004378 <_sbrk+0x64>)
 8004364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004366:	68fb      	ldr	r3, [r7, #12]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20020000 	.word	0x20020000
 8004374:	00000400 	.word	0x00000400
 8004378:	20002b58 	.word	0x20002b58
 800437c:	200068c8 	.word	0x200068c8

08004380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004384:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <SystemInit+0x20>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438a:	4a05      	ldr	r2, [pc, #20]	; (80043a0 <SystemInit+0x20>)
 800438c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	e000ed00 	.word	0xe000ed00

080043a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80043a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043a8:	480d      	ldr	r0, [pc, #52]	; (80043e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043aa:	490e      	ldr	r1, [pc, #56]	; (80043e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043ac:	4a0e      	ldr	r2, [pc, #56]	; (80043e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043b0:	e002      	b.n	80043b8 <LoopCopyDataInit>

080043b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043b6:	3304      	adds	r3, #4

080043b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043bc:	d3f9      	bcc.n	80043b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043be:	4a0b      	ldr	r2, [pc, #44]	; (80043ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043c0:	4c0b      	ldr	r4, [pc, #44]	; (80043f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043c4:	e001      	b.n	80043ca <LoopFillZerobss>

080043c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043c8:	3204      	adds	r2, #4

080043ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043cc:	d3fb      	bcc.n	80043c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043ce:	f7ff ffd7 	bl	8004380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043d2:	f00b fe59 	bl	8010088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043d6:	f7fd f8b1 	bl	800153c <main>
  bx  lr    
 80043da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043e4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80043e8:	08015d70 	.word	0x08015d70
  ldr r2, =_sbss
 80043ec:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80043f0:	200068c8 	.word	0x200068c8

080043f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043f4:	e7fe      	b.n	80043f4 <ADC_IRQHandler>
	...

080043f8 <BMI088_Init>:
 *
 */
uint8_t BMI088_Init(BMI088 *imu,
				 SPI_HandleTypeDef *spiHandle,
				 GPIO_TypeDef *csAccPinBank, uint16_t csAccPin,
				 GPIO_TypeDef *csGyrPinBank, uint16_t csGyrPin) {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	807b      	strh	r3, [r7, #2]

	/* Store interface parameters in struct */
	imu->spiHandle 		= spiHandle;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	601a      	str	r2, [r3, #0]
	imu->csAccPinBank 	= csAccPinBank;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	605a      	str	r2, [r3, #4]
	imu->csAccPin 		= csAccPin;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	887a      	ldrh	r2, [r7, #2]
 8004416:	819a      	strh	r2, [r3, #12]
	imu->csGyrPinBank 	= csGyrPinBank;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a3a      	ldr	r2, [r7, #32]
 800441c:	609a      	str	r2, [r3, #8]
	imu->csGyrPin 		= csGyrPin;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004422:	81da      	strh	r2, [r3, #14]

	/* Clear DMA flags */
	imu->readingAcc = 0;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	741a      	strb	r2, [r3, #16]
	imu->readingGyr = 0;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	745a      	strb	r2, [r3, #17]

	uint8_t status = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	75fb      	strb	r3, [r7, #23]
	/*
	 *
	 * ACCELEROMETER
	 *
	 */
	uint8_t chipID=2;
 8004434:	2302      	movs	r3, #2
 8004436:	75bb      	strb	r3, [r7, #22]
		}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		HAL_Delay(200);
	}*/
	/* Accelerometer requires rising edge on CSB at start-up to activate SPI */
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6858      	ldr	r0, [r3, #4]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	899b      	ldrh	r3, [r3, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	4619      	mov	r1, r3
 8004444:	f002 f984 	bl	8006750 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004448:	2001      	movs	r0, #1
 800444a:	f001 f84b 	bl	80054e4 <HAL_Delay>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6858      	ldr	r0, [r3, #4]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	899b      	ldrh	r3, [r3, #12]
 8004456:	2201      	movs	r2, #1
 8004458:	4619      	mov	r1, r3
 800445a:	f002 f979 	bl	8006750 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800445e:	2032      	movs	r0, #50	; 0x32
 8004460:	f001 f840 	bl	80054e4 <HAL_Delay>

	/* Perform accelerometer soft reset */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_SOFTRESET, 0xB6);
 8004464:	22b6      	movs	r2, #182	; 0xb6
 8004466:	217e      	movs	r1, #126	; 0x7e
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f95b 	bl	8004724 <BMI088_WriteAccRegister>
 800446e:	4603      	mov	r3, r0
 8004470:	461a      	mov	r2, r3
 8004472:	7dfb      	ldrb	r3, [r7, #23]
 8004474:	4413      	add	r3, r2
 8004476:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8004478:	2032      	movs	r0, #50	; 0x32
 800447a:	f001 f833 	bl	80054e4 <HAL_Delay>

	/* Check chip ID */
	chipID=2;
 800447e:	2302      	movs	r3, #2
 8004480:	75bb      	strb	r3, [r7, #22]

	status += BMI088_ReadAccRegister(imu, BMI_ACC_CHIP_ID, &chipID);
 8004482:	f107 0316 	add.w	r3, r7, #22
 8004486:	461a      	mov	r2, r3
 8004488:	2100      	movs	r1, #0
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f8d0 	bl	8004630 <BMI088_ReadAccRegister>
 8004490:	4603      	mov	r3, r0
 8004492:	461a      	mov	r2, r3
 8004494:	7dfb      	ldrb	r3, [r7, #23]
 8004496:	4413      	add	r3, r2
 8004498:	75fb      	strb	r3, [r7, #23]

	/*HAL_Delay(10);
	//status += BMI088_ReadAccRegister(imu, 0x02, &chipID); //0x02 ACC_ERR_REG return 0xFF ->fatal error
	status += BMI088_ReadAccRegister(imu, 0x02, &chipID);*/

	HAL_Delay(10);
 800449a:	200a      	movs	r0, #10
 800449c:	f001 f822 	bl	80054e4 <HAL_Delay>

	/* Configure accelerometer  */

	status += BMI088_WriteAccRegister(imu, BMI_ACC_CONF, 0xA9); /* (0xA8 no oversampling, ODR = 100 Hz, BW = 40 Hz), 200 Hz no oversampling 0xA9, 0x99 200Hz OSR2  */
 80044a0:	22a9      	movs	r2, #169	; 0xa9
 80044a2:	2140      	movs	r1, #64	; 0x40
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f93d 	bl	8004724 <BMI088_WriteAccRegister>
 80044aa:	4603      	mov	r3, r0
 80044ac:	461a      	mov	r2, r3
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
 80044b0:	4413      	add	r3, r2
 80044b2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80044b4:	200a      	movs	r0, #10
 80044b6:	f001 f815 	bl	80054e4 <HAL_Delay>


	status += BMI088_WriteAccRegister(imu, BMI_ACC_RANGE, 0x00); /* +- 3g range */
 80044ba:	2200      	movs	r2, #0
 80044bc:	2141      	movs	r1, #65	; 0x41
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f930 	bl	8004724 <BMI088_WriteAccRegister>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	7dfb      	ldrb	r3, [r7, #23]
 80044ca:	4413      	add	r3, r2
 80044cc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80044ce:	200a      	movs	r0, #10
 80044d0:	f001 f808 	bl	80054e4 <HAL_Delay>


	/* Enable accelerometer data ready interrupt */
	status += BMI088_WriteAccRegister(imu, BMI_INT1_IO_CONF, 0x0A); /* INT1 = push-pull output, active high */
 80044d4:	220a      	movs	r2, #10
 80044d6:	2153      	movs	r1, #83	; 0x53
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f923 	bl	8004724 <BMI088_WriteAccRegister>
 80044de:	4603      	mov	r3, r0
 80044e0:	461a      	mov	r2, r3
 80044e2:	7dfb      	ldrb	r3, [r7, #23]
 80044e4:	4413      	add	r3, r2
 80044e6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80044e8:	200a      	movs	r0, #10
 80044ea:	f000 fffb 	bl	80054e4 <HAL_Delay>

	status += BMI088_WriteAccRegister(imu, BMI_INT1_INT2_MAP_DATA, 0x04);//ACC INT -> INT1
 80044ee:	2204      	movs	r2, #4
 80044f0:	2158      	movs	r1, #88	; 0x58
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f916 	bl	8004724 <BMI088_WriteAccRegister>
 80044f8:	4603      	mov	r3, r0
 80044fa:	461a      	mov	r2, r3
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
 80044fe:	4413      	add	r3, r2
 8004500:	75fb      	strb	r3, [r7, #23]

	HAL_Delay(10);
 8004502:	200a      	movs	r0, #10
 8004504:	f000 ffee 	bl	80054e4 <HAL_Delay>

	/* Put accelerometer into active mode */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CONF, 0x00);
 8004508:	2200      	movs	r2, #0
 800450a:	217c      	movs	r1, #124	; 0x7c
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f909 	bl	8004724 <BMI088_WriteAccRegister>
 8004512:	4603      	mov	r3, r0
 8004514:	461a      	mov	r2, r3
 8004516:	7dfb      	ldrb	r3, [r7, #23]
 8004518:	4413      	add	r3, r2
 800451a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800451c:	200a      	movs	r0, #10
 800451e:	f000 ffe1 	bl	80054e4 <HAL_Delay>

	/* Turn accelerometer on */
	status += BMI088_WriteAccRegister(imu, BMI_ACC_PWR_CTRL, 0x04);
 8004522:	2204      	movs	r2, #4
 8004524:	217d      	movs	r1, #125	; 0x7d
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f8fc 	bl	8004724 <BMI088_WriteAccRegister>
 800452c:	4603      	mov	r3, r0
 800452e:	461a      	mov	r2, r3
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	4413      	add	r3, r2
 8004534:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8004536:	200a      	movs	r0, #10
 8004538:	f000 ffd4 	bl	80054e4 <HAL_Delay>

	/* Pre-compute accelerometer conversion constant (raw to m/s^2), 9.81 g-constant, 32768 normalize raw data, 2^(<0x41>+1)*1.5, <0x41> is the acc range register */
	imu->accConversion = 9.81f / 32768.0f * 2.0f * 1.5f; /* Datasheet page 27 */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4a3a      	ldr	r2, [pc, #232]	; (8004628 <BMI088_Init+0x230>)
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Set accelerometer TX buffer for DMA */
	imu->accTxBuf[0] = BMI_ACC_DATA | 0x80;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2292      	movs	r2, #146	; 0x92
 8004546:	749a      	strb	r2, [r3, #18]
	 *
	 * GYROSCOPE
	 *
	 */

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6898      	ldr	r0, [r3, #8]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	89db      	ldrh	r3, [r3, #14]
 8004550:	2201      	movs	r2, #1
 8004552:	4619      	mov	r1, r3
 8004554:	f002 f8fc 	bl	8006750 <HAL_GPIO_WritePin>

	/* Perform gyro soft reset */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_SOFTRESET, 0xB6);
 8004558:	22b6      	movs	r2, #182	; 0xb6
 800455a:	2114      	movs	r1, #20
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f91b 	bl	8004798 <BMI088_WriteGyrRegister>
 8004562:	4603      	mov	r3, r0
 8004564:	461a      	mov	r2, r3
 8004566:	7dfb      	ldrb	r3, [r7, #23]
 8004568:	4413      	add	r3, r2
 800456a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(250);
 800456c:	20fa      	movs	r0, #250	; 0xfa
 800456e:	f000 ffb9 	bl	80054e4 <HAL_Delay>

	/* Check chip ID */
	status += BMI088_ReadGyrRegister(imu, BMI_GYR_CHIP_ID, &chipID);
 8004572:	f107 0316 	add.w	r3, r7, #22
 8004576:	461a      	mov	r2, r3
 8004578:	2100      	movs	r1, #0
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f896 	bl	80046ac <BMI088_ReadGyrRegister>
 8004580:	4603      	mov	r3, r0
 8004582:	461a      	mov	r2, r3
 8004584:	7dfb      	ldrb	r3, [r7, #23]
 8004586:	4413      	add	r3, r2
 8004588:	75fb      	strb	r3, [r7, #23]

		//return 0;

	}

	HAL_Delay(10);
 800458a:	200a      	movs	r0, #10
 800458c:	f000 ffaa 	bl	80054e4 <HAL_Delay>

	/* Configure gyroscope */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_RANGE, 0x01); /* +- 1000 deg/s */
 8004590:	2201      	movs	r2, #1
 8004592:	210f      	movs	r1, #15
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f8ff 	bl	8004798 <BMI088_WriteGyrRegister>
 800459a:	4603      	mov	r3, r0
 800459c:	461a      	mov	r2, r3
 800459e:	7dfb      	ldrb	r3, [r7, #23]
 80045a0:	4413      	add	r3, r2
 80045a2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80045a4:	200a      	movs	r0, #10
 80045a6:	f000 ff9d 	bl	80054e4 <HAL_Delay>


	status += BMI088_WriteGyrRegister(imu, BMI_GYR_BANDWIDTH, 0x06); /* 0x07 ODR = 100 Hz, Filter bandwidth = 32 Hz, 0x06 BW = 64Hz ODR = 200 Hz, 0x04 ODR = 200Hz BW = 23Hz */
 80045aa:	2206      	movs	r2, #6
 80045ac:	2110      	movs	r1, #16
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f8f2 	bl	8004798 <BMI088_WriteGyrRegister>
 80045b4:	4603      	mov	r3, r0
 80045b6:	461a      	mov	r2, r3
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
 80045ba:	4413      	add	r3, r2
 80045bc:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80045be:	200a      	movs	r0, #10
 80045c0:	f000 ff90 	bl	80054e4 <HAL_Delay>

	/* Enable gyroscope data ready interrupt */
	status += BMI088_WriteGyrRegister(imu, BMI_GYR_INT_CTRL, 0x80); /* New data interrupt enabled */
 80045c4:	2280      	movs	r2, #128	; 0x80
 80045c6:	2115      	movs	r1, #21
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f8e5 	bl	8004798 <BMI088_WriteGyrRegister>
 80045ce:	4603      	mov	r3, r0
 80045d0:	461a      	mov	r2, r3
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	4413      	add	r3, r2
 80045d6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80045d8:	200a      	movs	r0, #10
 80045da:	f000 ff83 	bl	80054e4 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_CONF, 0x01); /* INT3 = push-pull, active high */
 80045de:	2201      	movs	r2, #1
 80045e0:	2116      	movs	r1, #22
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f8d8 	bl	8004798 <BMI088_WriteGyrRegister>
 80045e8:	4603      	mov	r3, r0
 80045ea:	461a      	mov	r2, r3
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
 80045ee:	4413      	add	r3, r2
 80045f0:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80045f2:	200a      	movs	r0, #10
 80045f4:	f000 ff76 	bl	80054e4 <HAL_Delay>

	status += BMI088_WriteGyrRegister(imu, BMI_INT3_INT4_IO_MAP, 0x01); /* Data ready interrupt mapped to INT3 pin */
 80045f8:	2201      	movs	r2, #1
 80045fa:	2118      	movs	r1, #24
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f8cb 	bl	8004798 <BMI088_WriteGyrRegister>
 8004602:	4603      	mov	r3, r0
 8004604:	461a      	mov	r2, r3
 8004606:	7dfb      	ldrb	r3, [r7, #23]
 8004608:	4413      	add	r3, r2
 800460a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800460c:	200a      	movs	r0, #10
 800460e:	f000 ff69 	bl	80054e4 <HAL_Delay>

	/* Pre-compute gyroscope conversion constant (raw to rad/s) 0.017 °/s -> rad/s, 1000 the range, 32768 normalize the raw data*/
	imu->gyrConversion = 0.01745329251f * 1000.0f / 32768.0f; /* Datasheet page 39 */
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4a05      	ldr	r2, [pc, #20]	; (800462c <BMI088_Init+0x234>)
 8004616:	635a      	str	r2, [r3, #52]	; 0x34
	
	/* Set gyroscope TX buffer for DMA */
	imu->gyrTxBuf[0] = BMI_GYR_DATA | 0x80;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2282      	movs	r2, #130	; 0x82
 800461c:	769a      	strb	r2, [r3, #26]

	return status;
 800461e:	7dfb      	ldrb	r3, [r7, #23]

}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	3a6b70a4 	.word	0x3a6b70a4
 800462c:	3a0ba058 	.word	0x3a0ba058

08004630 <BMI088_ReadAccRegister>:
 * LOW-LEVEL REGISTER FUNCTIONS
 *
 */

/* ACCELEROMETER READS ARE DIFFERENT TO GYROSCOPE READS. SEND ONE BYTE ADDRESS, READ ONE DUMMY BYTE, READ TRUE DATA !!! */
uint8_t BMI088_ReadAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	460b      	mov	r3, r1
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[3] = {regAddr | 0x80, 0x00, 0x00};
 800463e:	7afb      	ldrb	r3, [r7, #11]
 8004640:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004644:	b2db      	uxtb	r3, r3
 8004646:	753b      	strb	r3, [r7, #20]
 8004648:	2300      	movs	r3, #0
 800464a:	757b      	strb	r3, [r7, #21]
 800464c:	2300      	movs	r3, #0
 800464e:	75bb      	strb	r3, [r7, #22]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6858      	ldr	r0, [r3, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	899b      	ldrh	r3, [r3, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	4619      	mov	r1, r3
 800465c:	f002 f878 	bl	8006750 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	f107 0210 	add.w	r2, r7, #16
 8004668:	f107 0114 	add.w	r1, r7, #20
 800466c:	f04f 33ff 	mov.w	r3, #4294967295
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	2303      	movs	r3, #3
 8004674:	f004 f803 	bl	800867e <HAL_SPI_TransmitReceive>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6858      	ldr	r0, [r3, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	899b      	ldrh	r3, [r3, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	4619      	mov	r1, r3
 8004692:	f002 f85d 	bl	8006750 <HAL_GPIO_WritePin>

	if (status == 1) {
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d102      	bne.n	80046a2 <BMI088_ReadAccRegister+0x72>

		*data = rxBuf[2];
 800469c:	7cba      	ldrb	r2, [r7, #18]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	701a      	strb	r2, [r3, #0]

	}

	return status;
 80046a2:	7dfb      	ldrb	r3, [r7, #23]

}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <BMI088_ReadGyrRegister>:

uint8_t BMI088_ReadGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t *data) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	460b      	mov	r3, r1
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	72fb      	strb	r3, [r7, #11]

	uint8_t txBuf[2] = {regAddr | 0x80, 0x00}; //0x80
 80046ba:	7afb      	ldrb	r3, [r7, #11]
 80046bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	753b      	strb	r3, [r7, #20]
 80046c4:	2300      	movs	r3, #0
 80046c6:	757b      	strb	r3, [r7, #21]
	uint8_t rxBuf[2];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6898      	ldr	r0, [r3, #8]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	89db      	ldrh	r3, [r3, #14]
 80046d0:	2200      	movs	r2, #0
 80046d2:	4619      	mov	r1, r3
 80046d4:	f002 f83c 	bl	8006750 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	f107 0210 	add.w	r2, r7, #16
 80046e0:	f107 0114 	add.w	r1, r7, #20
 80046e4:	f04f 33ff 	mov.w	r3, #4294967295
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	2302      	movs	r3, #2
 80046ec:	f003 ffc7 	bl	800867e <HAL_SPI_TransmitReceive>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bf0c      	ite	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	2300      	movne	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6898      	ldr	r0, [r3, #8]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	89db      	ldrh	r3, [r3, #14]
 8004706:	2201      	movs	r2, #1
 8004708:	4619      	mov	r1, r3
 800470a:	f002 f821 	bl	8006750 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);*/

	if (status == 1) {
 800470e:	7dfb      	ldrb	r3, [r7, #23]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d102      	bne.n	800471a <BMI088_ReadGyrRegister+0x6e>

		*data = rxBuf[1];
 8004714:	7c7a      	ldrb	r2, [r7, #17]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	701a      	strb	r2, [r3, #0]

	}

	return status;
 800471a:	7dfb      	ldrb	r3, [r7, #23]

}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <BMI088_WriteAccRegister>:

uint8_t BMI088_WriteAccRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	70fb      	strb	r3, [r7, #3]
 8004730:	4613      	mov	r3, r2
 8004732:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	733b      	strb	r3, [r7, #12]
 8004738:	78bb      	ldrb	r3, [r7, #2]
 800473a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6858      	ldr	r0, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	899b      	ldrh	r3, [r3, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	4619      	mov	r1, r3
 8004748:	f002 f802 	bl	8006750 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	f107 010c 	add.w	r1, r7, #12
 8004754:	f04f 33ff 	mov.w	r3, #4294967295
 8004758:	2202      	movs	r2, #2
 800475a:	f003 fe54 	bl	8008406 <HAL_SPI_Transmit>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800476c:	bf00      	nop
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f004 f925 	bl	80089c2 <HAL_SPI_GetState>
 8004778:	4603      	mov	r3, r0
 800477a:	2b01      	cmp	r3, #1
 800477c:	d1f7      	bne.n	800476e <BMI088_WriteAccRegister+0x4a>
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6858      	ldr	r0, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	899b      	ldrh	r3, [r3, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	4619      	mov	r1, r3
 800478a:	f001 ffe1 	bl	8006750 <HAL_GPIO_WritePin>

	return status;
 800478e:	7bfb      	ldrb	r3, [r7, #15]

}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <BMI088_WriteGyrRegister>:

uint8_t BMI088_WriteGyrRegister(BMI088 *imu, uint8_t regAddr, uint8_t data) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	70fb      	strb	r3, [r7, #3]
 80047a4:	4613      	mov	r3, r2
 80047a6:	70bb      	strb	r3, [r7, #2]

	uint8_t txBuf[2] = {regAddr, data};
 80047a8:	78fb      	ldrb	r3, [r7, #3]
 80047aa:	733b      	strb	r3, [r7, #12]
 80047ac:	78bb      	ldrb	r3, [r7, #2]
 80047ae:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6898      	ldr	r0, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	89db      	ldrh	r3, [r3, #14]
 80047b8:	2200      	movs	r2, #0
 80047ba:	4619      	mov	r1, r3
 80047bc:	f001 ffc8 	bl	8006750 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	f107 010c 	add.w	r1, r7, #12
 80047c8:	f04f 33ff 	mov.w	r3, #4294967295
 80047cc:	2202      	movs	r2, #2
 80047ce:	f003 fe1a 	bl	8008406 <HAL_SPI_Transmit>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	73fb      	strb	r3, [r7, #15]
	while(HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 80047e0:	bf00      	nop
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f004 f8eb 	bl	80089c2 <HAL_SPI_GetState>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d1f7      	bne.n	80047e2 <BMI088_WriteGyrRegister+0x4a>
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6898      	ldr	r0, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	89db      	ldrh	r3, [r3, #14]
 80047fa:	2201      	movs	r2, #1
 80047fc:	4619      	mov	r1, r3
 80047fe:	f001 ffa7 	bl	8006750 <HAL_GPIO_WritePin>

	return status;
 8004802:	7bfb      	ldrb	r3, [r7, #15]

}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <BMI088_ReadAccelerometer>:
/*
 *
 * POLLING
 *
 */
uint8_t BMI088_ReadAccelerometer(BMI088 *imu) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b08a      	sub	sp, #40	; 0x28
 8004810:	af02      	add	r7, sp, #8
 8004812:	6078      	str	r0, [r7, #4]

	/* Read raw accelerometer data */
	uint8_t txBuf[8] = {(BMI_ACC_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 1 byte dummy, 6 bytes data */
 8004814:	4a36      	ldr	r2, [pc, #216]	; (80048f0 <BMI088_ReadAccelerometer+0xe4>)
 8004816:	f107 0310 	add.w	r3, r7, #16
 800481a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800481e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rxBuf[8];

	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_RESET);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6858      	ldr	r0, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	899b      	ldrh	r3, [r3, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	4619      	mov	r1, r3
 800482e:	f001 ff8f 	bl	8006750 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 8, HAL_MAX_DELAY) == HAL_OK);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	f107 0208 	add.w	r2, r7, #8
 800483a:	f107 0110 	add.w	r1, r7, #16
 800483e:	f04f 33ff 	mov.w	r3, #4294967295
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	2308      	movs	r3, #8
 8004846:	f003 ff1a 	bl	800867e <HAL_SPI_TransmitReceive>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csAccPinBank, imu->csAccPin, GPIO_PIN_SET);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6858      	ldr	r0, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	899b      	ldrh	r3, [r3, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	4619      	mov	r1, r3
 8004864:	f001 ff74 	bl	8006750 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t accX = (int16_t) ((rxBuf[3] << 8) | rxBuf[2]);
 8004868:	7afb      	ldrb	r3, [r7, #11]
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	b21a      	sxth	r2, r3
 800486e:	7abb      	ldrb	r3, [r7, #10]
 8004870:	b21b      	sxth	r3, r3
 8004872:	4313      	orrs	r3, r2
 8004874:	83bb      	strh	r3, [r7, #28]
	int16_t accY = (int16_t) ((rxBuf[5] << 8) | rxBuf[4]);
 8004876:	7b7b      	ldrb	r3, [r7, #13]
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	b21a      	sxth	r2, r3
 800487c:	7b3b      	ldrb	r3, [r7, #12]
 800487e:	b21b      	sxth	r3, r3
 8004880:	4313      	orrs	r3, r2
 8004882:	837b      	strh	r3, [r7, #26]
	int16_t accZ = (int16_t) ((rxBuf[7] << 8) | rxBuf[6]);
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	b21a      	sxth	r2, r3
 800488a:	7bbb      	ldrb	r3, [r7, #14]
 800488c:	b21b      	sxth	r3, r3
 800488e:	4313      	orrs	r3, r2
 8004890:	833b      	strh	r3, [r7, #24]

	/* Convert to m/s^2 */
	imu->acc_mps2[0] = imu->accConversion * accX;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004898:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800489c:	ee07 3a90 	vmov	s15, r3
 80048a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	imu->acc_mps2[1] = imu->accConversion * accY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80048b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80048b8:	ee07 3a90 	vmov	s15, r3
 80048bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	imu->acc_mps2[2] = imu->accConversion * accZ;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80048d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80048d4:	ee07 3a90 	vmov	s15, r3
 80048d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	return status;
 80048e6:	7ffb      	ldrb	r3, [r7, #31]

}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3720      	adds	r7, #32
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	080154e0 	.word	0x080154e0

080048f4 <BMI088_ReadGyroscope>:

uint8_t BMI088_ReadGyroscope(BMI088 *imu) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08a      	sub	sp, #40	; 0x28
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	6078      	str	r0, [r7, #4]

	/* Read raw gyroscope data */
	uint8_t txBuf[7] = {(BMI_GYR_DATA | 0x80), 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; /* Register addr, 6 bytes data */
 80048fc:	4a38      	ldr	r2, [pc, #224]	; (80049e0 <BMI088_ReadGyroscope+0xec>)
 80048fe:	f107 0310 	add.w	r3, r7, #16
 8004902:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004906:	6018      	str	r0, [r3, #0]
 8004908:	3304      	adds	r3, #4
 800490a:	8019      	strh	r1, [r3, #0]
 800490c:	3302      	adds	r3, #2
 800490e:	0c0a      	lsrs	r2, r1, #16
 8004910:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuf[7];

	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_RESET);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6898      	ldr	r0, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	89db      	ldrh	r3, [r3, #14]
 800491a:	2200      	movs	r2, #0
 800491c:	4619      	mov	r1, r3
 800491e:	f001 ff17 	bl	8006750 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 7, HAL_MAX_DELAY) == HAL_OK);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	f107 0208 	add.w	r2, r7, #8
 800492a:	f107 0110 	add.w	r1, r7, #16
 800492e:	f04f 33ff 	mov.w	r3, #4294967295
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	2307      	movs	r3, #7
 8004936:	f003 fea2 	bl	800867e <HAL_SPI_TransmitReceive>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	77fb      	strb	r3, [r7, #31]
	HAL_GPIO_WritePin(imu->csGyrPinBank, imu->csGyrPin, GPIO_PIN_SET);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6898      	ldr	r0, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	89db      	ldrh	r3, [r3, #14]
 8004950:	2201      	movs	r2, #1
 8004952:	4619      	mov	r1, r3
 8004954:	f001 fefc 	bl	8006750 <HAL_GPIO_WritePin>

	/* Form signed 16-bit integers */
	int16_t gyrX = (int16_t) ((rxBuf[2] << 8) | rxBuf[1]);
 8004958:	7abb      	ldrb	r3, [r7, #10]
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	b21a      	sxth	r2, r3
 800495e:	7a7b      	ldrb	r3, [r7, #9]
 8004960:	b21b      	sxth	r3, r3
 8004962:	4313      	orrs	r3, r2
 8004964:	83bb      	strh	r3, [r7, #28]
	int16_t gyrY = (int16_t) ((rxBuf[4] << 8) | rxBuf[3]);
 8004966:	7b3b      	ldrb	r3, [r7, #12]
 8004968:	021b      	lsls	r3, r3, #8
 800496a:	b21a      	sxth	r2, r3
 800496c:	7afb      	ldrb	r3, [r7, #11]
 800496e:	b21b      	sxth	r3, r3
 8004970:	4313      	orrs	r3, r2
 8004972:	837b      	strh	r3, [r7, #26]
	int16_t gyrZ = (int16_t) ((rxBuf[6] << 8) | rxBuf[5]);
 8004974:	7bbb      	ldrb	r3, [r7, #14]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	b21a      	sxth	r2, r3
 800497a:	7b7b      	ldrb	r3, [r7, #13]
 800497c:	b21b      	sxth	r3, r3
 800497e:	4313      	orrs	r3, r2
 8004980:	833b      	strh	r3, [r7, #24]

	/* Convert to rad/s */
	imu->gyr_rps[0] = imu->gyrConversion * gyrX;//-0.0000661263;//-0.000220318;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004988:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800498c:	ee07 3a90 	vmov	s15, r3
 8004990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->gyr_rps[1] = imu->gyrConversion * gyrY;//-0.000491353;//-0.001161367;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80049a4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80049a8:	ee07 3a90 	vmov	s15, r3
 80049ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	imu->gyr_rps[2] = imu->gyrConversion * gyrZ;//-0.002349043;//-0.002582031;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80049c0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	//own code line
	//if(status == 1) HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	return status;
 80049d6:	7ffb      	ldrb	r3, [r7, #31]

}
 80049d8:	4618      	mov	r0, r3
 80049da:	3720      	adds	r7, #32
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	080154e8 	.word	0x080154e8

080049e4 <BMP388_Init>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_Init(BMP388_HandleTypeDef *bmp){
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t chip_id;

	// Read CHIP_ID byte
	rslt = BMP388_ReadBytes(bmp, CHIP_ID, &chip_id, 1);
 80049ec:	f107 020e 	add.w	r2, r7, #14
 80049f0:	2301      	movs	r3, #1
 80049f2:	2100      	movs	r1, #0
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fc08 	bl	800520a <BMP388_ReadBytes>
 80049fa:	4603      	mov	r3, r0
 80049fc:	73fb      	strb	r3, [r7, #15]
	if(rslt == HAL_OK && chip_id == BMP388_CHIP_ID){
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d12a      	bne.n	8004a5a <BMP388_Init+0x76>
 8004a04:	7bbb      	ldrb	r3, [r7, #14]
 8004a06:	2b50      	cmp	r3, #80	; 0x50
 8004a08:	d127      	bne.n	8004a5a <BMP388_Init+0x76>
		// using softreset command
		rslt = BMP388_SoftReset(bmp);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f962 	bl	8004cd4 <BMP388_SoftReset>
 8004a10:	4603      	mov	r3, r0
 8004a12:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11d      	bne.n	8004a56 <BMP388_Init+0x72>
			// get calibration data
			rslt = BMP388_GetCalibData(bmp);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f99a 	bl	8004d54 <BMP388_GetCalibData>
 8004a20:	4603      	mov	r3, r0
 8004a22:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004a24:	bf00      	nop
		}
	}
	else{
		return rslt;
	}
	uint8_t pwr_ctrl = BMP388_PWR_CTRL_PRESS_ON | BMP388_PWR_CTRL_TEMP_ON | BMP388_PWR_CTRL_MODE_NORMAL;
 8004a26:	2333      	movs	r3, #51	; 0x33
 8004a28:	737b      	strb	r3, [r7, #13]

	uint8_t oversampling = bmp->_oversampling;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	791b      	ldrb	r3, [r3, #4]
 8004a2e:	733b      	strb	r3, [r7, #12]
	uint8_t odr = bmp->_odr;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	799b      	ldrb	r3, [r3, #6]
 8004a34:	72fb      	strb	r3, [r7, #11]
	uint8_t filtercoeff = bmp->_filtercoeff;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	795b      	ldrb	r3, [r3, #5]
 8004a3a:	72bb      	strb	r3, [r7, #10]



	// Set OSR register
	rslt = BMP388_WriteBytes(bmp, OSR, &oversampling, 1);
 8004a3c:	f107 020c 	add.w	r2, r7, #12
 8004a40:	2301      	movs	r3, #1
 8004a42:	211c      	movs	r1, #28
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fbfe 	bl	8005246 <BMP388_WriteBytes>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d006      	beq.n	8004a62 <BMP388_Init+0x7e>
 8004a54:	e003      	b.n	8004a5e <BMP388_Init+0x7a>
			return rslt;
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	e03b      	b.n	8004ad2 <BMP388_Init+0xee>
		return rslt;
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	e039      	b.n	8004ad2 <BMP388_Init+0xee>
		return rslt;
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	e037      	b.n	8004ad2 <BMP388_Init+0xee>
	}
	// Set ODR register
	rslt = BMP388_WriteBytes(bmp, ODR, &odr, 1);
 8004a62:	f107 020b 	add.w	r2, r7, #11
 8004a66:	2301      	movs	r3, #1
 8004a68:	211d      	movs	r1, #29
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fbeb 	bl	8005246 <BMP388_WriteBytes>
 8004a70:	4603      	mov	r3, r0
 8004a72:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <BMP388_Init+0x9a>
		return rslt;
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	e029      	b.n	8004ad2 <BMP388_Init+0xee>
	}
	// Set CONFIG register
	rslt = BMP388_WriteBytes(bmp, CONFIG, &filtercoeff, 1);
 8004a7e:	f107 020a 	add.w	r2, r7, #10
 8004a82:	2301      	movs	r3, #1
 8004a84:	211f      	movs	r1, #31
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fbdd 	bl	8005246 <BMP388_WriteBytes>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <BMP388_Init+0xb6>
		return rslt;
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	e01b      	b.n	8004ad2 <BMP388_Init+0xee>
	}
	// Set PWR_CTRL register
	rslt = BMP388_WriteBytes(bmp, PWR_CTRL, &pwr_ctrl, 1);
 8004a9a:	f107 020d 	add.w	r2, r7, #13
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	211b      	movs	r1, #27
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fbcf 	bl	8005246 <BMP388_WriteBytes>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <BMP388_Init+0xd2>
		return rslt;
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	e00d      	b.n	8004ad2 <BMP388_Init+0xee>
	}

	rslt = BMP388_WriteBytes(bmp, INT_CTRL, 0x40, 1);
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	2240      	movs	r2, #64	; 0x40
 8004aba:	2119      	movs	r1, #25
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fbc2 	bl	8005246 <BMP388_WriteBytes>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	73fb      	strb	r3, [r7, #15]
	if(rslt != HAL_OK){
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <BMP388_Init+0xec>
		return rslt;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	e000      	b.n	8004ad2 <BMP388_Init+0xee>
	}

	return rslt;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <BMP388_SetTempOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetTempOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	2b05      	cmp	r3, #5
 8004aea:	d901      	bls.n	8004af0 <BMP388_SetTempOS+0x16>
		return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e00e      	b.n	8004b0e <BMP388_SetTempOS+0x34>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11000111) | (oversample << 3); //& clear the temp OS bits and the | set the temp OS reg
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	791b      	ldrb	r3, [r3, #4]
 8004af4:	b25b      	sxtb	r3, r3
 8004af6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004afa:	b25a      	sxtb	r2, r3
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	b25b      	sxtb	r3, r3
 8004b02:	4313      	orrs	r3, r2
 8004b04:	b25b      	sxtb	r3, r3
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <BMP388_SetPressOS>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetPressOS(BMP388_HandleTypeDef *bmp, uint8_t oversample){
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	70fb      	strb	r3, [r7, #3]
	if(oversample > BMP388_OVERSAMPLING_32X){
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	2b05      	cmp	r3, #5
 8004b2a:	d901      	bls.n	8004b30 <BMP388_SetPressOS+0x16>
		return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e00d      	b.n	8004b4c <BMP388_SetPressOS+0x32>
	}
	bmp->_oversampling = (bmp->_oversampling & 0b11111000) | oversample; //& clear the press OS bits and the | set the press OS reg
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	791b      	ldrb	r3, [r3, #4]
 8004b34:	b25b      	sxtb	r3, r3
 8004b36:	f023 0307 	bic.w	r3, r3, #7
 8004b3a:	b25a      	sxtb	r2, r3
 8004b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	b25b      	sxtb	r3, r3
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	711a      	strb	r2, [r3, #4]
	return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <BMP388_SetIIRFilterCoeff>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong filter coefficient
 */
HAL_StatusTypeDef BMP388_SetIIRFilterCoeff(BMP388_HandleTypeDef *bmp, uint8_t filtercoeff){
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	70fb      	strb	r3, [r7, #3]
	if(filtercoeff > BMP3_IIR_FILTER_COEFF_127){
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	2b07      	cmp	r3, #7
 8004b68:	d901      	bls.n	8004b6e <BMP388_SetIIRFilterCoeff+0x16>
		return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e005      	b.n	8004b7a <BMP388_SetIIRFilterCoeff+0x22>
	}
	bmp->_filtercoeff = filtercoeff << 1;
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <BMP388_SetOutputDataRate>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Wrong oversampling mode
 */
HAL_StatusTypeDef BMP388_SetOutputDataRate(BMP388_HandleTypeDef *bmp, uint8_t odr){
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	70fb      	strb	r3, [r7, #3]
	if(odr > BMP3_ODR_0_001_HZ){
 8004b92:	78fb      	ldrb	r3, [r7, #3]
 8004b94:	2b11      	cmp	r3, #17
 8004b96:	d901      	bls.n	8004b9c <BMP388_SetOutputDataRate+0x16>
		return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e003      	b.n	8004ba4 <BMP388_SetOutputDataRate+0x1e>
	}
	bmp->_odr = odr;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	78fa      	ldrb	r2, [r7, #3]
 8004ba0:	719a      	strb	r2, [r3, #6]
	return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <BMP388_ReadRawPressTempTime>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadRawPressTempTime(BMP388_HandleTypeDef *bmp, uint32_t *raw_pressure, uint32_t *raw_temperature, uint32_t *time){
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
	}*/

	uint8_t raw_data[11]; //registers in order 0x04 - 0x06 press data, 0x07 - 0x09 temp data, 0x0A and 0x0B reserved, 0x0C - 0x0E time data -> 11 byte
	// Get raw data for pressure and temperature
	//rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 11);
	rslt = BMP388_ReadBytes(bmp, DATA_0, raw_data, 6);
 8004bbe:	f107 0214 	add.w	r2, r7, #20
 8004bc2:	2306      	movs	r3, #6
 8004bc4:	2104      	movs	r1, #4
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fb1f 	bl	800520a <BMP388_ReadBytes>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	77fb      	strb	r3, [r7, #31]
	if(rslt != HAL_OK){
 8004bd0:	7ffb      	ldrb	r3, [r7, #31]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <BMP388_ReadRawPressTempTime+0x2a>
		return rslt;
 8004bd6:	7ffb      	ldrb	r3, [r7, #31]
 8004bd8:	e012      	b.n	8004c00 <BMP388_ReadRawPressTempTime+0x50>
//	uint32_t data_xlsb;
//	uint32_t data_lsb;
//	uint32_t data_msb;

	// Parsing pressure data
	*raw_pressure = (uint32_t)raw_data[2] << 16 | (uint32_t)raw_data[1] << 8 | (uint32_t)raw_data[0];
 8004bda:	7dbb      	ldrb	r3, [r7, #22]
 8004bdc:	041a      	lsls	r2, r3, #16
 8004bde:	7d7b      	ldrb	r3, [r7, #21]
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	4313      	orrs	r3, r2
 8004be4:	7d3a      	ldrb	r2, [r7, #20]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	601a      	str	r2, [r3, #0]

	// Parsing temperature data
	*raw_temperature = (uint32_t)raw_data[5] << 16 | (uint32_t)raw_data[4] << 8 | (uint32_t)raw_data[3];
 8004bec:	7e7b      	ldrb	r3, [r7, #25]
 8004bee:	041a      	lsls	r2, r3, #16
 8004bf0:	7e3b      	ldrb	r3, [r7, #24]
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	7dfa      	ldrb	r2, [r7, #23]
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	601a      	str	r2, [r3, #0]

	// Parsing time bytes
	//*time = (uint32_t)raw_data[10] << 16 | (uint32_t)raw_data[9] << 8 | (uint32_t)raw_data[8];


	return rslt;
 8004bfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3720      	adds	r7, #32
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <BMP388_CompensateRawPressTemp>:
 *	@param[out]	temperature		: Pointer to the variable that contain temperature.
 *
 *  @return none
 */
void BMP388_CompensateRawPressTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_pressure, uint32_t raw_temperature,
									  	  	  	  	  	  	  float *pressure, float *temperature){
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
	float temp;
	float press;

	BMP388_CompensateTemp(bmp, raw_temperature, &temp);
 8004c16:	f107 0314 	add.w	r3, r7, #20
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f9ec 	bl	8004ffc <BMP388_CompensateTemp>
	BMP388_CompensatePress(bmp, temp, raw_pressure, &press);
 8004c24:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c28:	f107 0310 	add.w	r3, r7, #16
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	eeb0 0a67 	vmov.f32	s0, s15
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fa17 	bl	8005068 <BMP388_CompensatePress>

	*pressure = press;
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	601a      	str	r2, [r3, #0]
	*temperature = temp;
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	601a      	str	r2, [r3, #0]
}
 8004c46:	bf00      	nop
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <BMP388_FindAltitude>:
 *	@param[in] ground_pressure	: Pressure at ground
 *  @param[in] pressure			: Pressure that measured at flight.
 *
 *  @return Altitude
 */
float BMP388_FindAltitude(float ground_pressure, float pressure){
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	ed87 0a01 	vstr	s0, [r7, #4]
 8004c5a:	edc7 0a00 	vstr	s1, [r7]

	// Note that using the equation from wikipedia can give bad results
	// at high altitude. See this thread for more information:
	//  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

	return 44330.0 * (1.0 - pow(pressure / ground_pressure, 0.1903));
 8004c5e:	ed97 7a00 	vldr	s14, [r7]
 8004c62:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c6a:	ee16 0a90 	vmov	r0, s13
 8004c6e:	f7fb fc6b 	bl	8000548 <__aeabi_f2d>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8004cc0 <BMP388_FindAltitude+0x70>
 8004c7a:	ec43 2b10 	vmov	d0, r2, r3
 8004c7e:	f00e f957 	bl	8012f30 <pow>
 8004c82:	ec53 2b10 	vmov	r2, r3, d0
 8004c86:	f04f 0000 	mov.w	r0, #0
 8004c8a:	4911      	ldr	r1, [pc, #68]	; (8004cd0 <BMP388_FindAltitude+0x80>)
 8004c8c:	f7fb fafc 	bl	8000288 <__aeabi_dsub>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4610      	mov	r0, r2
 8004c96:	4619      	mov	r1, r3
 8004c98:	a30b      	add	r3, pc, #44	; (adr r3, 8004cc8 <BMP388_FindAltitude+0x78>)
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	f7fb fcab 	bl	80005f8 <__aeabi_dmul>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f7fb ff9d 	bl	8000be8 <__aeabi_d2f>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	ee07 3a90 	vmov	s15, r3
}
 8004cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	1a36e2eb 	.word	0x1a36e2eb
 8004cc4:	3fc85bc0 	.word	0x3fc85bc0
 8004cc8:	00000000 	.word	0x00000000
 8004ccc:	40e5a540 	.word	0x40e5a540
 8004cd0:	3ff00000 	.word	0x3ff00000

08004cd4 <BMP388_SoftReset>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_SoftReset(BMP388_HandleTypeDef *bmp){
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	uint8_t rst_cmnd = BMP388_SOFTRESET;
 8004cdc:	23b6      	movs	r3, #182	; 0xb6
 8004cde:	73bb      	strb	r3, [r7, #14]
    uint8_t cmd_err_status;

	HAL_StatusTypeDef rslt;

	// Reading STATUS reg to understand that the BMP388 is ready to receive command
	rslt = BMP388_ReadBytes(bmp, STATUS, &cmd_rdy_status, 1);
 8004ce0:	f107 020d 	add.w	r2, r7, #13
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	2103      	movs	r1, #3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fa8e 	bl	800520a <BMP388_ReadBytes>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	73fb      	strb	r3, [r7, #15]
	if((rslt == HAL_OK) && (cmd_rdy_status & BMP388_CMD_RDY)){
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d128      	bne.n	8004d4a <BMP388_SoftReset+0x76>
 8004cf8:	7b7b      	ldrb	r3, [r7, #13]
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d023      	beq.n	8004d4a <BMP388_SoftReset+0x76>
		// Writing SOFTRESET command to CMD reg
		rslt = BMP388_WriteBytes(bmp, CMD, &rst_cmnd, 1);
 8004d02:	f107 020e 	add.w	r2, r7, #14
 8004d06:	2301      	movs	r3, #1
 8004d08:	217e      	movs	r1, #126	; 0x7e
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fa9b 	bl	8005246 <BMP388_WriteBytes>
 8004d10:	4603      	mov	r3, r0
 8004d12:	73fb      	strb	r3, [r7, #15]
		if(rslt == HAL_OK){
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d115      	bne.n	8004d46 <BMP388_SoftReset+0x72>
			// 2 ms pause then check ERR reg
			HAL_Delay(2);
 8004d1a:	2002      	movs	r0, #2
 8004d1c:	f000 fbe2 	bl	80054e4 <HAL_Delay>
			rslt = BMP388_ReadBytes(bmp, ERR_REG, &cmd_err_status, 1);
 8004d20:	f107 020c 	add.w	r2, r7, #12
 8004d24:	2301      	movs	r3, #1
 8004d26:	2102      	movs	r1, #2
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fa6e 	bl	800520a <BMP388_ReadBytes>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	73fb      	strb	r3, [r7, #15]
			if((cmd_err_status & CMD) || (rslt != HAL_OK)){
 8004d32:	7b3b      	ldrb	r3, [r7, #12]
 8004d34:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <BMP388_SoftReset+0x6e>
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <BMP388_SoftReset+0x76>
				return rslt;
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	e002      	b.n	8004d4c <BMP388_SoftReset+0x78>
			}
		}
		else{
			return rslt;
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	e000      	b.n	8004d4c <BMP388_SoftReset+0x78>
		}
	}

	return rslt;
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <BMP388_GetCalibData>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
HAL_StatusTypeDef BMP388_GetCalibData(BMP388_HandleTypeDef *bmp){
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b090      	sub	sp, #64	; 0x40
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef rslt;
	uint8_t calib_buff[BMP388_CALIBDATA_LEN] = {0};
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	f107 0310 	add.w	r3, r7, #16
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	605a      	str	r2, [r3, #4]
 8004d6a:	609a      	str	r2, [r3, #8]
 8004d6c:	60da      	str	r2, [r3, #12]
 8004d6e:	741a      	strb	r2, [r3, #16]
	int8_t		raw_par_p8;
	int16_t		raw_par_p9;
	int8_t		raw_par_p10;
	int8_t		raw_par_p11;

	rslt = BMP388_ReadBytes(bmp, CALIB_DATA, calib_buff, BMP388_CALIBDATA_LEN);
 8004d70:	f107 020c 	add.w	r2, r7, #12
 8004d74:	2315      	movs	r3, #21
 8004d76:	2131      	movs	r1, #49	; 0x31
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fa46 	bl	800520a <BMP388_ReadBytes>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	float temp_var;
	if(rslt == HAL_OK){
 8004d84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f040 812f 	bne.w	8004fec <BMP388_GetCalibData+0x298>
		// PAR_T1
		temp_var = 0.00390625f;
 8004d8e:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 8004d92:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t1 = ((uint16_t)calib_buff[1] << 8) | (uint16_t)calib_buff[0];
 8004d94:	7b7b      	ldrb	r3, [r7, #13]
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	b21a      	sxth	r2, r3
 8004d9a:	7b3b      	ldrb	r3, [r7, #12]
 8004d9c:	b21b      	sxth	r3, r3
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	b21b      	sxth	r3, r3
 8004da2:	86fb      	strh	r3, [r7, #54]	; 0x36
		bmp->_calib_data.par_t1 = (float)raw_par_t1 / temp_var;
 8004da4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dae:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	edc3 7a02 	vstr	s15, [r3, #8]
		// PAR_T2
		temp_var = 1073741824.f;
 8004dbc:	f04f 439d 	mov.w	r3, #1317011456	; 0x4e800000
 8004dc0:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t2 = ((uint16_t)calib_buff[3] << 8) | (uint16_t)calib_buff[2];
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	b21a      	sxth	r2, r3
 8004dc8:	7bbb      	ldrb	r3, [r7, #14]
 8004dca:	b21b      	sxth	r3, r3
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	b21b      	sxth	r3, r3
 8004dd0:	86bb      	strh	r3, [r7, #52]	; 0x34
		bmp->_calib_data.par_t2 = (float)raw_par_t2 / temp_var;
 8004dd2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004dd4:	ee07 3a90 	vmov	s15, r3
 8004dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ddc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	edc3 7a03 	vstr	s15, [r3, #12]
		// PAR_T3
		temp_var = 281474976710656.f;
 8004dea:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004dee:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_t3 = calib_buff[4];
 8004df0:	7c3b      	ldrb	r3, [r7, #16]
 8004df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		bmp->_calib_data.par_t3 = (float)raw_par_t3 / temp_var;
 8004df6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e02:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	edc3 7a04 	vstr	s15, [r3, #16]
		// PAR_P1
		temp_var = 1048576.f;
 8004e10:	f04f 4393 	mov.w	r3, #1233125376	; 0x49800000
 8004e14:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p1 = ((int16_t)calib_buff[6] << 8) | (int16_t)calib_buff[5];
 8004e16:	7cbb      	ldrb	r3, [r7, #18]
 8004e18:	021b      	lsls	r3, r3, #8
 8004e1a:	b21a      	sxth	r2, r3
 8004e1c:	7c7b      	ldrb	r3, [r7, #17]
 8004e1e:	b21b      	sxth	r3, r3
 8004e20:	4313      	orrs	r3, r2
 8004e22:	863b      	strh	r3, [r7, #48]	; 0x30
		bmp->_calib_data.par_p1 = ((float)raw_par_p1 - 16384) / temp_var;
 8004e24:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8004e28:	ee07 3a90 	vmov	s15, r3
 8004e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e30:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8004ff8 <BMP388_GetCalibData+0x2a4>
 8004e34:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004e38:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	edc3 7a05 	vstr	s15, [r3, #20]
		// PAR_P2
		temp_var = 536870912.f;
 8004e46:	f04f 439c 	mov.w	r3, #1308622848	; 0x4e000000
 8004e4a:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p2 = ((int16_t)calib_buff[8] << 8) | (int16_t)calib_buff[7];
 8004e4c:	7d3b      	ldrb	r3, [r7, #20]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	b21a      	sxth	r2, r3
 8004e52:	7cfb      	ldrb	r3, [r7, #19]
 8004e54:	b21b      	sxth	r3, r3
 8004e56:	4313      	orrs	r3, r2
 8004e58:	85fb      	strh	r3, [r7, #46]	; 0x2e
		bmp->_calib_data.par_p2 = ((float)raw_par_p2 - 16384) / temp_var;
 8004e5a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e66:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8004ff8 <BMP388_GetCalibData+0x2a4>
 8004e6a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004e6e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	edc3 7a06 	vstr	s15, [r3, #24]
		// PAR_P3
		temp_var = 4294967296.f;
 8004e7c:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
 8004e80:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p3 = (int8_t)calib_buff[9];
 8004e82:	7d7b      	ldrb	r3, [r7, #21]
 8004e84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		bmp->_calib_data.par_p3 = (float)raw_par_p3 / temp_var;
 8004e88:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8004e8c:	ee07 3a90 	vmov	s15, r3
 8004e90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e94:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	edc3 7a07 	vstr	s15, [r3, #28]
		// PAR_P4
		temp_var = 137438953472.f;
 8004ea2:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8004ea6:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p4 = (int8_t)calib_buff[10];
 8004ea8:	7dbb      	ldrb	r3, [r7, #22]
 8004eaa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		bmp->_calib_data.par_p4 = (float)raw_par_p4 / temp_var;
 8004eae:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004eba:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	edc3 7a08 	vstr	s15, [r3, #32]
		// PAR_P5
		temp_var = 0.125f;
 8004ec8:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8004ecc:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p5 = ((uint16_t)calib_buff[12] << 8) | (uint16_t)calib_buff[11];
 8004ece:	7e3b      	ldrb	r3, [r7, #24]
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	b21a      	sxth	r2, r3
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
 8004ed6:	b21b      	sxth	r3, r3
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	b21b      	sxth	r3, r3
 8004edc:	857b      	strh	r3, [r7, #42]	; 0x2a
		bmp->_calib_data.par_p5 = (float)raw_par_p5 / temp_var;
 8004ede:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ee0:	ee07 3a90 	vmov	s15, r3
 8004ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		// PAR_P6
		temp_var = 64.f;
 8004ef6:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8004efa:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p6 = ((uint16_t)calib_buff[14] << 8) | (uint16_t)calib_buff[13];
 8004efc:	7ebb      	ldrb	r3, [r7, #26]
 8004efe:	021b      	lsls	r3, r3, #8
 8004f00:	b21a      	sxth	r2, r3
 8004f02:	7e7b      	ldrb	r3, [r7, #25]
 8004f04:	b21b      	sxth	r3, r3
 8004f06:	4313      	orrs	r3, r2
 8004f08:	b21b      	sxth	r3, r3
 8004f0a:	853b      	strh	r3, [r7, #40]	; 0x28
		bmp->_calib_data.par_p6 = (float)raw_par_p6 / temp_var;
 8004f0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f16:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		// PAR_P7
		temp_var = 256.f;
 8004f24:	f04f 4387 	mov.w	r3, #1132462080	; 0x43800000
 8004f28:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p7 = (int8_t)calib_buff[15];
 8004f2a:	7efb      	ldrb	r3, [r7, #27]
 8004f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		bmp->_calib_data.par_p7 = (float)raw_par_p7 / temp_var;
 8004f30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f34:	ee07 3a90 	vmov	s15, r3
 8004f38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f3c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		// PAR_P8
		temp_var = 32768.f;
 8004f4a:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 8004f4e:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p8 = (int8_t)calib_buff[16];
 8004f50:	7f3b      	ldrb	r3, [r7, #28]
 8004f52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bmp->_calib_data.par_p8 = (float)raw_par_p8 / temp_var;
 8004f56:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f62:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		// PAR_P9
		temp_var = 281474976710656.f;
 8004f70:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004f74:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p9 = ((int16_t)calib_buff[18] << 8) | (int16_t)calib_buff[17];
 8004f76:	7fbb      	ldrb	r3, [r7, #30]
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	b21a      	sxth	r2, r3
 8004f7c:	7f7b      	ldrb	r3, [r7, #29]
 8004f7e:	b21b      	sxth	r3, r3
 8004f80:	4313      	orrs	r3, r2
 8004f82:	84bb      	strh	r3, [r7, #36]	; 0x24
		bmp->_calib_data.par_p9 = (float)raw_par_p9 / temp_var;
 8004f84:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004f88:	ee07 3a90 	vmov	s15, r3
 8004f8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f90:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		// PAR_P10
		temp_var = 281474976710656.f;
 8004f9e:	f04f 43af 	mov.w	r3, #1468006400	; 0x57800000
 8004fa2:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p10 = (int8_t)calib_buff[19];
 8004fa4:	7ffb      	ldrb	r3, [r7, #31]
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		bmp->_calib_data.par_p10 = (float)raw_par_p10 / temp_var;
 8004faa:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fb6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		// PAR_P11
		temp_var = 36893488147419103232.f;
 8004fc4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8004fc8:	63bb      	str	r3, [r7, #56]	; 0x38
		raw_par_p11 = (int8_t)calib_buff[20];
 8004fca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004fce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		bmp->_calib_data.par_p11 = (float)raw_par_p11 / temp_var;
 8004fd2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fde:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	}
	return rslt;
 8004fec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3740      	adds	r7, #64	; 0x40
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	46800000 	.word	0x46800000

08004ffc <BMP388_CompensateTemp>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK  		-> Success
 *  @retval != HAL_OK	  	-> Failure Info
 */
float BMP388_CompensateTemp(BMP388_HandleTypeDef *bmp, uint32_t raw_temp, float *temp){
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
    float partial_data1 = (float)(raw_temp - bmp->_calib_data.par_t1);;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	edd3 7a02 	vldr	s15, [r3, #8]
 8005018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800501c:	edc7 7a05 	vstr	s15, [r7, #20]
    float partial_data2 = (float)(partial_data1 * bmp->_calib_data.par_t2);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	edd3 7a03 	vldr	s15, [r3, #12]
 8005026:	ed97 7a05 	vldr	s14, [r7, #20]
 800502a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800502e:	edc7 7a04 	vstr	s15, [r7, #16]

    *temp = partial_data2 + (partial_data1 * partial_data1) * bmp->_calib_data.par_t3;
 8005032:	edd7 7a05 	vldr	s15, [r7, #20]
 8005036:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005044:	edd7 7a04 	vldr	s15, [r7, #16]
 8005048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	edc3 7a00 	vstr	s15, [r3]

    return *temp;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	ee07 3a90 	vmov	s15, r3
}
 800505a:	eeb0 0a67 	vmov.f32	s0, s15
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <BMP388_CompensatePress>:
 *	@param[out] press		: Measured pressure in Pa
 *
 *  @return Status of execution
 *  @retval = press			: Compensated pressure value
 */
float BMP388_CompensatePress(BMP388_HandleTypeDef *bmp, float temp, uint32_t raw_press, float *press){
 8005068:	b480      	push	{r7}
 800506a:	b08b      	sub	sp, #44	; 0x2c
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	ed87 0a02 	vstr	s0, [r7, #8]
 8005074:	6079      	str	r1, [r7, #4]
 8005076:	603a      	str	r2, [r7, #0]
    float partial_out1;
    float partial_out2;



    partial_data1 = bmp->_calib_data.par_p6 * temp;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800507e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005086:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p7 * (temp * temp);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005090:	edd7 7a02 	vldr	s15, [r7, #8]
 8005094:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800509c:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p8 * (temp * temp * temp);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80050a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80050aa:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80050ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80050b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ba:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out1 = bmp->_calib_data.par_p5 + partial_data1 + partial_data2 + partial_data3;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80050c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80050c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80050d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80050d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050dc:	edc7 7a06 	vstr	s15, [r7, #24]

    partial_data1 = bmp->_calib_data.par_p2 * temp;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80050e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80050ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p3 * (temp * temp);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	ed93 7a07 	vldr	s14, [r3, #28]
 80050f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80050fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005104:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = bmp->_calib_data.par_p4 * (temp * temp * temp);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	ed93 7a08 	vldr	s14, [r3, #32]
 800510e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005112:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005116:	edd7 7a02 	vldr	s15, [r7, #8]
 800511a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800511e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005122:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_out2 = (float)raw_press * (bmp->_calib_data.par_p1 + partial_data1 + partial_data2 + partial_data3);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	ee07 3a90 	vmov	s15, r3
 800512c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	edd3 6a05 	vldr	s13, [r3, #20]
 8005136:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800513a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800513e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005142:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005146:	edd7 7a07 	vldr	s15, [r7, #28]
 800514a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005152:	edc7 7a05 	vstr	s15, [r7, #20]

    partial_data1 = (float)raw_press * (float)raw_press;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	ee07 3a90 	vmov	s15, r3
 800515c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800516e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    partial_data2 = bmp->_calib_data.par_p9 + bmp->_calib_data.par_p10 * temp;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800517e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800518a:	edc7 7a08 	vstr	s15, [r7, #32]
    partial_data3 = partial_data1 * partial_data2;
 800518e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005192:	edd7 7a08 	vldr	s15, [r7, #32]
 8005196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519a:	edc7 7a07 	vstr	s15, [r7, #28]
    partial_data4 = partial_data3 + ((float)raw_press * (float)raw_press * (float)raw_press) * bmp->_calib_data.par_p11;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	ee07 3a90 	vmov	s15, r3
 80051a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	ee07 3a90 	vmov	s15, r3
 80051bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80051ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80051d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051d6:	edc7 7a04 	vstr	s15, [r7, #16]

    *press = partial_out1 + partial_out2 + partial_data4;
 80051da:	ed97 7a06 	vldr	s14, [r7, #24]
 80051de:	edd7 7a05 	vldr	s15, [r7, #20]
 80051e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80051ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	edc3 7a00 	vstr	s15, [r3]

    return *press;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	ee07 3a90 	vmov	s15, r3
}
 80051fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005200:	372c      	adds	r7, #44	; 0x2c
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <BMP388_ReadBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_ReadBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 800520a:	b580      	push	{r7, lr}
 800520c:	b088      	sub	sp, #32
 800520e:	af04      	add	r7, sp, #16
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	461a      	mov	r2, r3
 8005216:	460b      	mov	r3, r1
 8005218:	72fb      	strb	r3, [r7, #11]
 800521a:	4613      	mov	r3, r2
 800521c:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	7afb      	ldrb	r3, [r7, #11]
 8005224:	b29a      	uxth	r2, r3
 8005226:	7abb      	ldrb	r3, [r7, #10]
 8005228:	b29b      	uxth	r3, r3
 800522a:	2164      	movs	r1, #100	; 0x64
 800522c:	9102      	str	r1, [sp, #8]
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	2301      	movs	r3, #1
 8005236:	21ec      	movs	r1, #236	; 0xec
 8005238:	f001 fd14 	bl	8006c64 <HAL_I2C_Mem_Read>
 800523c:	4603      	mov	r3, r0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <BMP388_WriteBytes>:
 *
 *  @return Status of execution
 *  @retval = HAL_OK 		-> Success
 *  @retval != HAL_ERROR 	-> Failure Info
 */
HAL_StatusTypeDef BMP388_WriteBytes(BMP388_HandleTypeDef *bmp, BMP388_regs reg_addr, uint8_t *buff, uint8_t len){
 8005246:	b580      	push	{r7, lr}
 8005248:	b088      	sub	sp, #32
 800524a:	af04      	add	r7, sp, #16
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	461a      	mov	r2, r3
 8005252:	460b      	mov	r3, r1
 8005254:	72fb      	strb	r3, [r7, #11]
 8005256:	4613      	mov	r3, r2
 8005258:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Write(bmp->_hi2c, BMP388_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, buff, len, 100);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	7afb      	ldrb	r3, [r7, #11]
 8005260:	b29a      	uxth	r2, r3
 8005262:	7abb      	ldrb	r3, [r7, #10]
 8005264:	b29b      	uxth	r3, r3
 8005266:	2164      	movs	r1, #100	; 0x64
 8005268:	9102      	str	r1, [sp, #8]
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	2301      	movs	r3, #1
 8005272:	21ec      	movs	r1, #236	; 0xec
 8005274:	f001 fbfc 	bl	8006a70 <HAL_I2C_Mem_Write>
 8005278:	4603      	mov	r3, r0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <set_duty_Oneshot42>:
#define P_yaw 5
#define D_yaw 0



void set_duty_Oneshot42(TIM_HandleTypeDef* const pwmHandle1, uint16_t ref_1, uint16_t ref_2, uint16_t ref_3, uint16_t ref_4){
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	4608      	mov	r0, r1
 800528c:	4611      	mov	r1, r2
 800528e:	461a      	mov	r2, r3
 8005290:	4603      	mov	r3, r0
 8005292:	817b      	strh	r3, [r7, #10]
 8005294:	460b      	mov	r3, r1
 8005296:	813b      	strh	r3, [r7, #8]
 8005298:	4613      	mov	r3, r2
 800529a:	80fb      	strh	r3, [r7, #6]
	// Multishot42 12 kHz PSC 7-1, ARR 1000-1 -> 1000 = 100%, 500 = stop, ?0 = -100%?
	pwmHandle1 -> Instance -> CCR1 = ref_1;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	897a      	ldrh	r2, [r7, #10]
 80052a2:	635a      	str	r2, [r3, #52]	; 0x34
	pwmHandle1 -> Instance -> CCR2 = ref_2;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	893a      	ldrh	r2, [r7, #8]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38
	pwmHandle1 -> Instance -> CCR3 = ref_3;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	88fa      	ldrh	r2, [r7, #6]
 80052b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pwmHandle1 -> Instance -> CCR4 = ref_4;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	8b3a      	ldrh	r2, [r7, #24]
 80052ba:	641a      	str	r2, [r3, #64]	; 0x40
}
 80052bc:	bf00      	nop
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <CRSFtoDuty>:

float CRSFtoDuty(uint16_t CRSF_val){
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	80fb      	strh	r3, [r7, #6]
	float Duty;
//	Duty = 550+((float)(CRSF_val-172))/4.1; // minimum duty 55% max duty 95%
	Duty = 550+((float)(CRSF_val-172))/4.1*0.6; //for safety reasons minimum duty 55% max duty 79%
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	3bac      	subs	r3, #172	; 0xac
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052de:	ee17 0a90 	vmov	r0, s15
 80052e2:	f7fb f931 	bl	8000548 <__aeabi_f2d>
 80052e6:	a315      	add	r3, pc, #84	; (adr r3, 800533c <CRSFtoDuty+0x74>)
 80052e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ec:	f7fb faae 	bl	800084c <__aeabi_ddiv>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4610      	mov	r0, r2
 80052f6:	4619      	mov	r1, r3
 80052f8:	a312      	add	r3, pc, #72	; (adr r3, 8005344 <CRSFtoDuty+0x7c>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fb f97b 	bl	80005f8 <__aeabi_dmul>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4610      	mov	r0, r2
 8005308:	4619      	mov	r1, r3
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <CRSFtoDuty+0x70>)
 8005310:	f7fa ffbc 	bl	800028c <__adddf3>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4610      	mov	r0, r2
 800531a:	4619      	mov	r1, r3
 800531c:	f7fb fc64 	bl	8000be8 <__aeabi_d2f>
 8005320:	4603      	mov	r3, r0
 8005322:	60fb      	str	r3, [r7, #12]
	return Duty;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	ee07 3a90 	vmov	s15, r3
}
 800532a:	eeb0 0a67 	vmov.f32	s0, s15
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	f3af 8000 	nop.w
 8005338:	40813000 	.word	0x40813000
 800533c:	66666666 	.word	0x66666666
 8005340:	40106666 	.word	0x40106666
 8005344:	33333333 	.word	0x33333333
 8005348:	3fe33333 	.word	0x3fe33333

0800534c <CRSFtoPitch>:

float CRSFtoPitch(uint16_t CRSF_val){
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	80fb      	strh	r3, [r7, #6]
	float pitch;
	pitch = ((float)(CRSF_val-992))/820.0;
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800535c:	ee07 3a90 	vmov	s15, r3
 8005360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005364:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005384 <CRSFtoPitch+0x38>
 8005368:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800536c:	edc7 7a03 	vstr	s15, [r7, #12]
	return pitch;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	ee07 3a90 	vmov	s15, r3
}
 8005376:	eeb0 0a67 	vmov.f32	s0, s15
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	444d0000 	.word	0x444d0000

08005388 <CRSFtoRoll>:

float CRSFtoRoll(uint16_t CRSF_val){
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	80fb      	strh	r3, [r7, #6]
	float roll;
	roll = ((float)(CRSF_val-992))/820.0;
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8005398:	ee07 3a90 	vmov	s15, r3
 800539c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053a0:	eddf 6a07 	vldr	s13, [pc, #28]	; 80053c0 <CRSFtoRoll+0x38>
 80053a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053a8:	edc7 7a03 	vstr	s15, [r7, #12]
	return roll;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	ee07 3a90 	vmov	s15, r3
}
 80053b2:	eeb0 0a67 	vmov.f32	s0, s15
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	444d0000 	.word	0x444d0000

080053c4 <CRSFtoYaw>:

float CRSFtoYaw(uint16_t CRSF_val){
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4603      	mov	r3, r0
 80053cc:	80fb      	strh	r3, [r7, #6]
	float yaw;
	yaw = ((float)(CRSF_val-992))/820.0;
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80053d4:	ee07 3a90 	vmov	s15, r3
 80053d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053dc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80053fc <CRSFtoYaw+0x38>
 80053e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053e4:	edc7 7a03 	vstr	s15, [r7, #12]
	return yaw;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	ee07 3a90 	vmov	s15, r3
}
 80053ee:	eeb0 0a67 	vmov.f32	s0, s15
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	444d0000 	.word	0x444d0000

08005400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005404:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <HAL_Init+0x40>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a0d      	ldr	r2, [pc, #52]	; (8005440 <HAL_Init+0x40>)
 800540a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800540e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005410:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <HAL_Init+0x40>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a0a      	ldr	r2, [pc, #40]	; (8005440 <HAL_Init+0x40>)
 8005416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800541a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800541c:	4b08      	ldr	r3, [pc, #32]	; (8005440 <HAL_Init+0x40>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a07      	ldr	r2, [pc, #28]	; (8005440 <HAL_Init+0x40>)
 8005422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005426:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005428:	2003      	movs	r0, #3
 800542a:	f000 fbb1 	bl	8005b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800542e:	200f      	movs	r0, #15
 8005430:	f000 f808 	bl	8005444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005434:	f7fe fa30 	bl	8003898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	40023c00 	.word	0x40023c00

08005444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800544c:	4b12      	ldr	r3, [pc, #72]	; (8005498 <HAL_InitTick+0x54>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4b12      	ldr	r3, [pc, #72]	; (800549c <HAL_InitTick+0x58>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	4619      	mov	r1, r3
 8005456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800545a:	fbb3 f3f1 	udiv	r3, r3, r1
 800545e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fbc9 	bl	8005bfa <HAL_SYSTICK_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e00e      	b.n	8005490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b0f      	cmp	r3, #15
 8005476:	d80a      	bhi.n	800548e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005478:	2200      	movs	r2, #0
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	f000 fb91 	bl	8005ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005484:	4a06      	ldr	r2, [pc, #24]	; (80054a0 <HAL_InitTick+0x5c>)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	e000      	b.n	8005490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	2000000c 	.word	0x2000000c
 800549c:	20000014 	.word	0x20000014
 80054a0:	20000010 	.word	0x20000010

080054a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054a8:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <HAL_IncTick+0x20>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <HAL_IncTick+0x24>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4413      	add	r3, r2
 80054b4:	4a04      	ldr	r2, [pc, #16]	; (80054c8 <HAL_IncTick+0x24>)
 80054b6:	6013      	str	r3, [r2, #0]
}
 80054b8:	bf00      	nop
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20000014 	.word	0x20000014
 80054c8:	20002b5c 	.word	0x20002b5c

080054cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
  return uwTick;
 80054d0:	4b03      	ldr	r3, [pc, #12]	; (80054e0 <HAL_GetTick+0x14>)
 80054d2:	681b      	ldr	r3, [r3, #0]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20002b5c 	.word	0x20002b5c

080054e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054ec:	f7ff ffee 	bl	80054cc <HAL_GetTick>
 80054f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d005      	beq.n	800550a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054fe:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <HAL_Delay+0x44>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800550a:	bf00      	nop
 800550c:	f7ff ffde 	bl	80054cc <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	429a      	cmp	r2, r3
 800551a:	d8f7      	bhi.n	800550c <HAL_Delay+0x28>
  {
  }
}
 800551c:	bf00      	nop
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000014 	.word	0x20000014

0800552c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e033      	b.n	80055aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fe f9d0 	bl	80038f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f003 0310 	and.w	r3, r3, #16
 8005566:	2b00      	cmp	r3, #0
 8005568:	d118      	bne.n	800559c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005572:	f023 0302 	bic.w	r3, r3, #2
 8005576:	f043 0202 	orr.w	r2, r3, #2
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f93a 	bl	80057f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	f043 0201 	orr.w	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	641a      	str	r2, [r3, #64]	; 0x40
 800559a:	e001      	b.n	80055a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x1c>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e105      	b.n	80057dc <HAL_ADC_ConfigChannel+0x228>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b09      	cmp	r3, #9
 80055de:	d925      	bls.n	800562c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68d9      	ldr	r1, [r3, #12]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	4613      	mov	r3, r2
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	4413      	add	r3, r2
 80055f4:	3b1e      	subs	r3, #30
 80055f6:	2207      	movs	r2, #7
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	43da      	mvns	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	400a      	ands	r2, r1
 8005604:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68d9      	ldr	r1, [r3, #12]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	4618      	mov	r0, r3
 8005618:	4603      	mov	r3, r0
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	4403      	add	r3, r0
 800561e:	3b1e      	subs	r3, #30
 8005620:	409a      	lsls	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	60da      	str	r2, [r3, #12]
 800562a:	e022      	b.n	8005672 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6919      	ldr	r1, [r3, #16]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	4613      	mov	r3, r2
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	4413      	add	r3, r2
 8005640:	2207      	movs	r2, #7
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	43da      	mvns	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	400a      	ands	r2, r1
 800564e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6919      	ldr	r1, [r3, #16]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	b29b      	uxth	r3, r3
 8005660:	4618      	mov	r0, r3
 8005662:	4603      	mov	r3, r0
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	4403      	add	r3, r0
 8005668:	409a      	lsls	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b06      	cmp	r3, #6
 8005678:	d824      	bhi.n	80056c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	3b05      	subs	r3, #5
 800568c:	221f      	movs	r2, #31
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	43da      	mvns	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	400a      	ands	r2, r1
 800569a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	4618      	mov	r0, r3
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	3b05      	subs	r3, #5
 80056b6:	fa00 f203 	lsl.w	r2, r0, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	635a      	str	r2, [r3, #52]	; 0x34
 80056c2:	e04c      	b.n	800575e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b0c      	cmp	r3, #12
 80056ca:	d824      	bhi.n	8005716 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	3b23      	subs	r3, #35	; 0x23
 80056de:	221f      	movs	r2, #31
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	43da      	mvns	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	400a      	ands	r2, r1
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	4618      	mov	r0, r3
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	3b23      	subs	r3, #35	; 0x23
 8005708:	fa00 f203 	lsl.w	r2, r0, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
 8005714:	e023      	b.n	800575e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	3b41      	subs	r3, #65	; 0x41
 8005728:	221f      	movs	r2, #31
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	43da      	mvns	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	400a      	ands	r2, r1
 8005736:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	b29b      	uxth	r3, r3
 8005744:	4618      	mov	r0, r3
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	3b41      	subs	r3, #65	; 0x41
 8005752:	fa00 f203 	lsl.w	r2, r0, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800575e:	4b22      	ldr	r3, [pc, #136]	; (80057e8 <HAL_ADC_ConfigChannel+0x234>)
 8005760:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a21      	ldr	r2, [pc, #132]	; (80057ec <HAL_ADC_ConfigChannel+0x238>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d109      	bne.n	8005780 <HAL_ADC_ConfigChannel+0x1cc>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b12      	cmp	r3, #18
 8005772:	d105      	bne.n	8005780 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a19      	ldr	r2, [pc, #100]	; (80057ec <HAL_ADC_ConfigChannel+0x238>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d123      	bne.n	80057d2 <HAL_ADC_ConfigChannel+0x21e>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b10      	cmp	r3, #16
 8005790:	d003      	beq.n	800579a <HAL_ADC_ConfigChannel+0x1e6>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b11      	cmp	r3, #17
 8005798:	d11b      	bne.n	80057d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b10      	cmp	r3, #16
 80057ac:	d111      	bne.n	80057d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80057ae:	4b10      	ldr	r3, [pc, #64]	; (80057f0 <HAL_ADC_ConfigChannel+0x23c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a10      	ldr	r2, [pc, #64]	; (80057f4 <HAL_ADC_ConfigChannel+0x240>)
 80057b4:	fba2 2303 	umull	r2, r3, r2, r3
 80057b8:	0c9a      	lsrs	r2, r3, #18
 80057ba:	4613      	mov	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80057c4:	e002      	b.n	80057cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f9      	bne.n	80057c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	40012300 	.word	0x40012300
 80057ec:	40012000 	.word	0x40012000
 80057f0:	2000000c 	.word	0x2000000c
 80057f4:	431bde83 	.word	0x431bde83

080057f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005800:	4b79      	ldr	r3, [pc, #484]	; (80059e8 <ADC_Init+0x1f0>)
 8005802:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	431a      	orrs	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800582c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6859      	ldr	r1, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	021a      	lsls	r2, r3, #8
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005850:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6859      	ldr	r1, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005872:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6899      	ldr	r1, [r3, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588a:	4a58      	ldr	r2, [pc, #352]	; (80059ec <ADC_Init+0x1f4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d022      	beq.n	80058d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800589e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6899      	ldr	r1, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80058c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6899      	ldr	r1, [r3, #8]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	609a      	str	r2, [r3, #8]
 80058d4:	e00f      	b.n	80058f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80058f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0202 	bic.w	r2, r2, #2
 8005904:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6899      	ldr	r1, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	7e1b      	ldrb	r3, [r3, #24]
 8005910:	005a      	lsls	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01b      	beq.n	800595c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005932:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005942:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6859      	ldr	r1, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	3b01      	subs	r3, #1
 8005950:	035a      	lsls	r2, r3, #13
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
 800595a:	e007      	b.n	800596c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800596a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800597a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	3b01      	subs	r3, #1
 8005988:	051a      	lsls	r2, r3, #20
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6899      	ldr	r1, [r3, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059ae:	025a      	lsls	r2, r3, #9
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6899      	ldr	r1, [r3, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	029a      	lsls	r2, r3, #10
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	609a      	str	r2, [r3, #8]
}
 80059dc:	bf00      	nop
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40012300 	.word	0x40012300
 80059ec:	0f000001 	.word	0x0f000001

080059f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a00:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <__NVIC_SetPriorityGrouping+0x44>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a22:	4a04      	ldr	r2, [pc, #16]	; (8005a34 <__NVIC_SetPriorityGrouping+0x44>)
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	60d3      	str	r3, [r2, #12]
}
 8005a28:	bf00      	nop
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	e000ed00 	.word	0xe000ed00

08005a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a3c:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <__NVIC_GetPriorityGrouping+0x18>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	0a1b      	lsrs	r3, r3, #8
 8005a42:	f003 0307 	and.w	r3, r3, #7
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	e000ed00 	.word	0xe000ed00

08005a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	db0b      	blt.n	8005a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	f003 021f 	and.w	r2, r3, #31
 8005a6c:	4907      	ldr	r1, [pc, #28]	; (8005a8c <__NVIC_EnableIRQ+0x38>)
 8005a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	2001      	movs	r0, #1
 8005a76:	fa00 f202 	lsl.w	r2, r0, r2
 8005a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	e000e100 	.word	0xe000e100

08005a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	6039      	str	r1, [r7, #0]
 8005a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	db0a      	blt.n	8005aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	490c      	ldr	r1, [pc, #48]	; (8005adc <__NVIC_SetPriority+0x4c>)
 8005aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aae:	0112      	lsls	r2, r2, #4
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ab8:	e00a      	b.n	8005ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	4908      	ldr	r1, [pc, #32]	; (8005ae0 <__NVIC_SetPriority+0x50>)
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	3b04      	subs	r3, #4
 8005ac8:	0112      	lsls	r2, r2, #4
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	440b      	add	r3, r1
 8005ace:	761a      	strb	r2, [r3, #24]
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	e000e100 	.word	0xe000e100
 8005ae0:	e000ed00 	.word	0xe000ed00

08005ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b089      	sub	sp, #36	; 0x24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	f1c3 0307 	rsb	r3, r3, #7
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	bf28      	it	cs
 8005b02:	2304      	movcs	r3, #4
 8005b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	2b06      	cmp	r3, #6
 8005b0c:	d902      	bls.n	8005b14 <NVIC_EncodePriority+0x30>
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	3b03      	subs	r3, #3
 8005b12:	e000      	b.n	8005b16 <NVIC_EncodePriority+0x32>
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b18:	f04f 32ff 	mov.w	r2, #4294967295
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	43da      	mvns	r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	401a      	ands	r2, r3
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	fa01 f303 	lsl.w	r3, r1, r3
 8005b36:	43d9      	mvns	r1, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b3c:	4313      	orrs	r3, r2
         );
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3724      	adds	r7, #36	; 0x24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
	...

08005b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b5c:	d301      	bcc.n	8005b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e00f      	b.n	8005b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b62:	4a0a      	ldr	r2, [pc, #40]	; (8005b8c <SysTick_Config+0x40>)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b6a:	210f      	movs	r1, #15
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b70:	f7ff ff8e 	bl	8005a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b74:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <SysTick_Config+0x40>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b7a:	4b04      	ldr	r3, [pc, #16]	; (8005b8c <SysTick_Config+0x40>)
 8005b7c:	2207      	movs	r2, #7
 8005b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	e000e010 	.word	0xe000e010

08005b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff ff29 	bl	80059f0 <__NVIC_SetPriorityGrouping>
}
 8005b9e:	bf00      	nop
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b086      	sub	sp, #24
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	4603      	mov	r3, r0
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bb8:	f7ff ff3e 	bl	8005a38 <__NVIC_GetPriorityGrouping>
 8005bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	6978      	ldr	r0, [r7, #20]
 8005bc4:	f7ff ff8e 	bl	8005ae4 <NVIC_EncodePriority>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bce:	4611      	mov	r1, r2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff ff5d 	bl	8005a90 <__NVIC_SetPriority>
}
 8005bd6:	bf00      	nop
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	4603      	mov	r3, r0
 8005be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff ff31 	bl	8005a54 <__NVIC_EnableIRQ>
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7ff ffa2 	bl	8005b4c <SysTick_Config>
 8005c08:	4603      	mov	r3, r0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
	...

08005c14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c20:	f7ff fc54 	bl	80054cc <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e099      	b.n	8005d64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0201 	bic.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c50:	e00f      	b.n	8005c72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c52:	f7ff fc3b 	bl	80054cc <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b05      	cmp	r3, #5
 8005c5e:	d908      	bls.n	8005c72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2220      	movs	r2, #32
 8005c64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2203      	movs	r2, #3
 8005c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e078      	b.n	8005d64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e8      	bne.n	8005c52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4b38      	ldr	r3, [pc, #224]	; (8005d6c <HAL_DMA_Init+0x158>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d107      	bne.n	8005cdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f023 0307 	bic.w	r3, r3, #7
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d117      	bne.n	8005d36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00e      	beq.n	8005d36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fb01 	bl	8006320 <DMA_CheckFifoParam>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2240      	movs	r2, #64	; 0x40
 8005d28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d32:	2301      	movs	r3, #1
 8005d34:	e016      	b.n	8005d64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fab8 	bl	80062b4 <DMA_CalcBaseAndBitshift>
 8005d44:	4603      	mov	r3, r0
 8005d46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d4c:	223f      	movs	r2, #63	; 0x3f
 8005d4e:	409a      	lsls	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3718      	adds	r7, #24
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	f010803f 	.word	0xf010803f

08005d70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_DMA_Start_IT+0x26>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e040      	b.n	8005e18 <HAL_DMA_Start_IT+0xa8>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d12f      	bne.n	8005e0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2202      	movs	r2, #2
 8005dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	68b9      	ldr	r1, [r7, #8]
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 fa4a 	bl	8006258 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc8:	223f      	movs	r2, #63	; 0x3f
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0216 	orr.w	r2, r2, #22
 8005dde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d007      	beq.n	8005df8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0208 	orr.w	r2, r2, #8
 8005df6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	e005      	b.n	8005e16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e12:	2302      	movs	r3, #2
 8005e14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e2e:	f7ff fb4d 	bl	80054cc <HAL_GetTick>
 8005e32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d008      	beq.n	8005e52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2280      	movs	r2, #128	; 0x80
 8005e44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e052      	b.n	8005ef8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0216 	bic.w	r2, r2, #22
 8005e60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695a      	ldr	r2, [r3, #20]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d103      	bne.n	8005e82 <HAL_DMA_Abort+0x62>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d007      	beq.n	8005e92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0208 	bic.w	r2, r2, #8
 8005e90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0201 	bic.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ea2:	e013      	b.n	8005ecc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ea4:	f7ff fb12 	bl	80054cc <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b05      	cmp	r3, #5
 8005eb0:	d90c      	bls.n	8005ecc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2203      	movs	r2, #3
 8005ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e015      	b.n	8005ef8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1e4      	bne.n	8005ea4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ede:	223f      	movs	r2, #63	; 0x3f
 8005ee0:	409a      	lsls	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d004      	beq.n	8005f1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2280      	movs	r2, #128	; 0x80
 8005f18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e00c      	b.n	8005f38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2205      	movs	r2, #5
 8005f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0201 	bic.w	r2, r2, #1
 8005f34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f50:	4b8e      	ldr	r3, [pc, #568]	; (800618c <HAL_DMA_IRQHandler+0x248>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a8e      	ldr	r2, [pc, #568]	; (8006190 <HAL_DMA_IRQHandler+0x24c>)
 8005f56:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5a:	0a9b      	lsrs	r3, r3, #10
 8005f5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6e:	2208      	movs	r2, #8
 8005f70:	409a      	lsls	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4013      	ands	r3, r2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d01a      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d013      	beq.n	8005fb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0204 	bic.w	r2, r2, #4
 8005f96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9c:	2208      	movs	r2, #8
 8005f9e:	409a      	lsls	r2, r3
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa8:	f043 0201 	orr.w	r2, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	409a      	lsls	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d012      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00b      	beq.n	8005fe6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	409a      	lsls	r2, r3
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fde:	f043 0202 	orr.w	r2, r3, #2
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fea:	2204      	movs	r2, #4
 8005fec:	409a      	lsls	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d012      	beq.n	800601c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00b      	beq.n	800601c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006008:	2204      	movs	r2, #4
 800600a:	409a      	lsls	r2, r3
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006014:	f043 0204 	orr.w	r2, r3, #4
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006020:	2210      	movs	r2, #16
 8006022:	409a      	lsls	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4013      	ands	r3, r2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d043      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0308 	and.w	r3, r3, #8
 8006036:	2b00      	cmp	r3, #0
 8006038:	d03c      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800603e:	2210      	movs	r2, #16
 8006040:	409a      	lsls	r2, r3
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d018      	beq.n	8006086 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d108      	bne.n	8006074 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	2b00      	cmp	r3, #0
 8006068:	d024      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	4798      	blx	r3
 8006072:	e01f      	b.n	80060b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01b      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
 8006084:	e016      	b.n	80060b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d107      	bne.n	80060a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0208 	bic.w	r2, r2, #8
 80060a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b8:	2220      	movs	r2, #32
 80060ba:	409a      	lsls	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4013      	ands	r3, r2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 808f 	beq.w	80061e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 8087 	beq.w	80061e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060da:	2220      	movs	r2, #32
 80060dc:	409a      	lsls	r2, r3
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b05      	cmp	r3, #5
 80060ec:	d136      	bne.n	800615c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0216 	bic.w	r2, r2, #22
 80060fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800610c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	d103      	bne.n	800611e <HAL_DMA_IRQHandler+0x1da>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800611a:	2b00      	cmp	r3, #0
 800611c:	d007      	beq.n	800612e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0208 	bic.w	r2, r2, #8
 800612c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006132:	223f      	movs	r2, #63	; 0x3f
 8006134:	409a      	lsls	r2, r3
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614e:	2b00      	cmp	r3, #0
 8006150:	d07e      	beq.n	8006250 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	4798      	blx	r3
        }
        return;
 800615a:	e079      	b.n	8006250 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d01d      	beq.n	80061a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10d      	bne.n	8006194 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617c:	2b00      	cmp	r3, #0
 800617e:	d031      	beq.n	80061e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
 8006188:	e02c      	b.n	80061e4 <HAL_DMA_IRQHandler+0x2a0>
 800618a:	bf00      	nop
 800618c:	2000000c 	.word	0x2000000c
 8006190:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006198:	2b00      	cmp	r3, #0
 800619a:	d023      	beq.n	80061e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	4798      	blx	r3
 80061a4:	e01e      	b.n	80061e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10f      	bne.n	80061d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0210 	bic.w	r2, r2, #16
 80061c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d032      	beq.n	8006252 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d022      	beq.n	800623e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2205      	movs	r2, #5
 80061fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0201 	bic.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	3301      	adds	r3, #1
 8006214:	60bb      	str	r3, [r7, #8]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	429a      	cmp	r2, r3
 800621a:	d307      	bcc.n	800622c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1f2      	bne.n	8006210 <HAL_DMA_IRQHandler+0x2cc>
 800622a:	e000      	b.n	800622e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800622c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d005      	beq.n	8006252 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	4798      	blx	r3
 800624e:	e000      	b.n	8006252 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006250:	bf00      	nop
    }
  }
}
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006274:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	2b40      	cmp	r3, #64	; 0x40
 8006284:	d108      	bne.n	8006298 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006296:	e007      	b.n	80062a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	60da      	str	r2, [r3, #12]
}
 80062a8:	bf00      	nop
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	3b10      	subs	r3, #16
 80062c4:	4a14      	ldr	r2, [pc, #80]	; (8006318 <DMA_CalcBaseAndBitshift+0x64>)
 80062c6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ca:	091b      	lsrs	r3, r3, #4
 80062cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80062ce:	4a13      	ldr	r2, [pc, #76]	; (800631c <DMA_CalcBaseAndBitshift+0x68>)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4413      	add	r3, r2
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d909      	bls.n	80062f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80062ea:	f023 0303 	bic.w	r3, r3, #3
 80062ee:	1d1a      	adds	r2, r3, #4
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	659a      	str	r2, [r3, #88]	; 0x58
 80062f4:	e007      	b.n	8006306 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80062fe:	f023 0303 	bic.w	r3, r3, #3
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	aaaaaaab 	.word	0xaaaaaaab
 800631c:	08015528 	.word	0x08015528

08006320 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006330:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d11f      	bne.n	800637a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b03      	cmp	r3, #3
 800633e:	d856      	bhi.n	80063ee <DMA_CheckFifoParam+0xce>
 8006340:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <DMA_CheckFifoParam+0x28>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	08006359 	.word	0x08006359
 800634c:	0800636b 	.word	0x0800636b
 8006350:	08006359 	.word	0x08006359
 8006354:	080063ef 	.word	0x080063ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d046      	beq.n	80063f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006368:	e043      	b.n	80063f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006372:	d140      	bne.n	80063f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006378:	e03d      	b.n	80063f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006382:	d121      	bne.n	80063c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b03      	cmp	r3, #3
 8006388:	d837      	bhi.n	80063fa <DMA_CheckFifoParam+0xda>
 800638a:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <DMA_CheckFifoParam+0x70>)
 800638c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006390:	080063a1 	.word	0x080063a1
 8006394:	080063a7 	.word	0x080063a7
 8006398:	080063a1 	.word	0x080063a1
 800639c:	080063b9 	.word	0x080063b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	73fb      	strb	r3, [r7, #15]
      break;
 80063a4:	e030      	b.n	8006408 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d025      	beq.n	80063fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063b6:	e022      	b.n	80063fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063c0:	d11f      	bne.n	8006402 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80063c6:	e01c      	b.n	8006402 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d903      	bls.n	80063d6 <DMA_CheckFifoParam+0xb6>
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d003      	beq.n	80063dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80063d4:	e018      	b.n	8006408 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	73fb      	strb	r3, [r7, #15]
      break;
 80063da:	e015      	b.n	8006408 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00e      	beq.n	8006406 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	73fb      	strb	r3, [r7, #15]
      break;
 80063ec:	e00b      	b.n	8006406 <DMA_CheckFifoParam+0xe6>
      break;
 80063ee:	bf00      	nop
 80063f0:	e00a      	b.n	8006408 <DMA_CheckFifoParam+0xe8>
      break;
 80063f2:	bf00      	nop
 80063f4:	e008      	b.n	8006408 <DMA_CheckFifoParam+0xe8>
      break;
 80063f6:	bf00      	nop
 80063f8:	e006      	b.n	8006408 <DMA_CheckFifoParam+0xe8>
      break;
 80063fa:	bf00      	nop
 80063fc:	e004      	b.n	8006408 <DMA_CheckFifoParam+0xe8>
      break;
 80063fe:	bf00      	nop
 8006400:	e002      	b.n	8006408 <DMA_CheckFifoParam+0xe8>
      break;   
 8006402:	bf00      	nop
 8006404:	e000      	b.n	8006408 <DMA_CheckFifoParam+0xe8>
      break;
 8006406:	bf00      	nop
    }
  } 
  
  return status; 
 8006408:	7bfb      	ldrb	r3, [r7, #15]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop

08006418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006418:	b480      	push	{r7}
 800641a:	b089      	sub	sp, #36	; 0x24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006422:	2300      	movs	r3, #0
 8006424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006426:	2300      	movs	r3, #0
 8006428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800642a:	2300      	movs	r3, #0
 800642c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800642e:	2300      	movs	r3, #0
 8006430:	61fb      	str	r3, [r7, #28]
 8006432:	e16b      	b.n	800670c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006434:	2201      	movs	r2, #1
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4013      	ands	r3, r2
 8006446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	429a      	cmp	r2, r3
 800644e:	f040 815a 	bne.w	8006706 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	2b01      	cmp	r3, #1
 800645c:	d005      	beq.n	800646a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006466:	2b02      	cmp	r3, #2
 8006468:	d130      	bne.n	80064cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	2203      	movs	r2, #3
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	43db      	mvns	r3, r3
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	4013      	ands	r3, r2
 8006480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	fa02 f303 	lsl.w	r3, r2, r3
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	4313      	orrs	r3, r2
 8006492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064a0:	2201      	movs	r2, #1
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	fa02 f303 	lsl.w	r3, r2, r3
 80064a8:	43db      	mvns	r3, r3
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	4013      	ands	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	091b      	lsrs	r3, r3, #4
 80064b6:	f003 0201 	and.w	r2, r3, #1
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	fa02 f303 	lsl.w	r3, r2, r3
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f003 0303 	and.w	r3, r3, #3
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	d017      	beq.n	8006508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	2203      	movs	r2, #3
 80064e4:	fa02 f303 	lsl.w	r3, r2, r3
 80064e8:	43db      	mvns	r3, r3
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	4013      	ands	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	4313      	orrs	r3, r2
 8006500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d123      	bne.n	800655c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	08da      	lsrs	r2, r3, #3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3208      	adds	r2, #8
 800651c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	220f      	movs	r2, #15
 800652c:	fa02 f303 	lsl.w	r3, r2, r3
 8006530:	43db      	mvns	r3, r3
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	4013      	ands	r3, r2
 8006536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	4313      	orrs	r3, r2
 800654c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	08da      	lsrs	r2, r3, #3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	3208      	adds	r2, #8
 8006556:	69b9      	ldr	r1, [r7, #24]
 8006558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	2203      	movs	r2, #3
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	43db      	mvns	r3, r3
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	4013      	ands	r3, r2
 8006572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f003 0203 	and.w	r2, r3, #3
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	4313      	orrs	r3, r2
 8006588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80b4 	beq.w	8006706 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	4b60      	ldr	r3, [pc, #384]	; (8006724 <HAL_GPIO_Init+0x30c>)
 80065a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a6:	4a5f      	ldr	r2, [pc, #380]	; (8006724 <HAL_GPIO_Init+0x30c>)
 80065a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065ac:	6453      	str	r3, [r2, #68]	; 0x44
 80065ae:	4b5d      	ldr	r3, [pc, #372]	; (8006724 <HAL_GPIO_Init+0x30c>)
 80065b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065ba:	4a5b      	ldr	r2, [pc, #364]	; (8006728 <HAL_GPIO_Init+0x310>)
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	089b      	lsrs	r3, r3, #2
 80065c0:	3302      	adds	r3, #2
 80065c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	220f      	movs	r2, #15
 80065d2:	fa02 f303 	lsl.w	r3, r2, r3
 80065d6:	43db      	mvns	r3, r3
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	4013      	ands	r3, r2
 80065dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a52      	ldr	r2, [pc, #328]	; (800672c <HAL_GPIO_Init+0x314>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d02b      	beq.n	800663e <HAL_GPIO_Init+0x226>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a51      	ldr	r2, [pc, #324]	; (8006730 <HAL_GPIO_Init+0x318>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d025      	beq.n	800663a <HAL_GPIO_Init+0x222>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a50      	ldr	r2, [pc, #320]	; (8006734 <HAL_GPIO_Init+0x31c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d01f      	beq.n	8006636 <HAL_GPIO_Init+0x21e>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a4f      	ldr	r2, [pc, #316]	; (8006738 <HAL_GPIO_Init+0x320>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d019      	beq.n	8006632 <HAL_GPIO_Init+0x21a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a4e      	ldr	r2, [pc, #312]	; (800673c <HAL_GPIO_Init+0x324>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d013      	beq.n	800662e <HAL_GPIO_Init+0x216>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a4d      	ldr	r2, [pc, #308]	; (8006740 <HAL_GPIO_Init+0x328>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00d      	beq.n	800662a <HAL_GPIO_Init+0x212>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a4c      	ldr	r2, [pc, #304]	; (8006744 <HAL_GPIO_Init+0x32c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d007      	beq.n	8006626 <HAL_GPIO_Init+0x20e>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a4b      	ldr	r2, [pc, #300]	; (8006748 <HAL_GPIO_Init+0x330>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d101      	bne.n	8006622 <HAL_GPIO_Init+0x20a>
 800661e:	2307      	movs	r3, #7
 8006620:	e00e      	b.n	8006640 <HAL_GPIO_Init+0x228>
 8006622:	2308      	movs	r3, #8
 8006624:	e00c      	b.n	8006640 <HAL_GPIO_Init+0x228>
 8006626:	2306      	movs	r3, #6
 8006628:	e00a      	b.n	8006640 <HAL_GPIO_Init+0x228>
 800662a:	2305      	movs	r3, #5
 800662c:	e008      	b.n	8006640 <HAL_GPIO_Init+0x228>
 800662e:	2304      	movs	r3, #4
 8006630:	e006      	b.n	8006640 <HAL_GPIO_Init+0x228>
 8006632:	2303      	movs	r3, #3
 8006634:	e004      	b.n	8006640 <HAL_GPIO_Init+0x228>
 8006636:	2302      	movs	r3, #2
 8006638:	e002      	b.n	8006640 <HAL_GPIO_Init+0x228>
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <HAL_GPIO_Init+0x228>
 800663e:	2300      	movs	r3, #0
 8006640:	69fa      	ldr	r2, [r7, #28]
 8006642:	f002 0203 	and.w	r2, r2, #3
 8006646:	0092      	lsls	r2, r2, #2
 8006648:	4093      	lsls	r3, r2
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	4313      	orrs	r3, r2
 800664e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006650:	4935      	ldr	r1, [pc, #212]	; (8006728 <HAL_GPIO_Init+0x310>)
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	089b      	lsrs	r3, r3, #2
 8006656:	3302      	adds	r3, #2
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800665e:	4b3b      	ldr	r3, [pc, #236]	; (800674c <HAL_GPIO_Init+0x334>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	43db      	mvns	r3, r3
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	4013      	ands	r3, r2
 800666c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	4313      	orrs	r3, r2
 8006680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006682:	4a32      	ldr	r2, [pc, #200]	; (800674c <HAL_GPIO_Init+0x334>)
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006688:	4b30      	ldr	r3, [pc, #192]	; (800674c <HAL_GPIO_Init+0x334>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	43db      	mvns	r3, r3
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	4013      	ands	r3, r2
 8006696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066ac:	4a27      	ldr	r2, [pc, #156]	; (800674c <HAL_GPIO_Init+0x334>)
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066b2:	4b26      	ldr	r3, [pc, #152]	; (800674c <HAL_GPIO_Init+0x334>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	43db      	mvns	r3, r3
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	4013      	ands	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066d6:	4a1d      	ldr	r2, [pc, #116]	; (800674c <HAL_GPIO_Init+0x334>)
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066dc:	4b1b      	ldr	r3, [pc, #108]	; (800674c <HAL_GPIO_Init+0x334>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	4013      	ands	r3, r2
 80066ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006700:	4a12      	ldr	r2, [pc, #72]	; (800674c <HAL_GPIO_Init+0x334>)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	3301      	adds	r3, #1
 800670a:	61fb      	str	r3, [r7, #28]
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	2b0f      	cmp	r3, #15
 8006710:	f67f ae90 	bls.w	8006434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop
 8006718:	3724      	adds	r7, #36	; 0x24
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40023800 	.word	0x40023800
 8006728:	40013800 	.word	0x40013800
 800672c:	40020000 	.word	0x40020000
 8006730:	40020400 	.word	0x40020400
 8006734:	40020800 	.word	0x40020800
 8006738:	40020c00 	.word	0x40020c00
 800673c:	40021000 	.word	0x40021000
 8006740:	40021400 	.word	0x40021400
 8006744:	40021800 	.word	0x40021800
 8006748:	40021c00 	.word	0x40021c00
 800674c:	40013c00 	.word	0x40013c00

08006750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	807b      	strh	r3, [r7, #2]
 800675c:	4613      	mov	r3, r2
 800675e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006760:	787b      	ldrb	r3, [r7, #1]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006766:	887a      	ldrh	r2, [r7, #2]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800676c:	e003      	b.n	8006776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800676e:	887b      	ldrh	r3, [r7, #2]
 8006770:	041a      	lsls	r2, r3, #16
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	619a      	str	r2, [r3, #24]
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006782:	b480      	push	{r7}
 8006784:	b085      	sub	sp, #20
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	460b      	mov	r3, r1
 800678c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006794:	887a      	ldrh	r2, [r7, #2]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4013      	ands	r3, r2
 800679a:	041a      	lsls	r2, r3, #16
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	43d9      	mvns	r1, r3
 80067a0:	887b      	ldrh	r3, [r7, #2]
 80067a2:	400b      	ands	r3, r1
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	619a      	str	r2, [r3, #24]
}
 80067aa:	bf00      	nop
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	4603      	mov	r3, r0
 80067c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067c2:	4b08      	ldr	r3, [pc, #32]	; (80067e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067c4:	695a      	ldr	r2, [r3, #20]
 80067c6:	88fb      	ldrh	r3, [r7, #6]
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d006      	beq.n	80067dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067ce:	4a05      	ldr	r2, [pc, #20]	; (80067e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067d0:	88fb      	ldrh	r3, [r7, #6]
 80067d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067d4:	88fb      	ldrh	r3, [r7, #6]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fb fda6 	bl	8002328 <HAL_GPIO_EXTI_Callback>
  }
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	40013c00 	.word	0x40013c00

080067e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e12b      	b.n	8006a52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d106      	bne.n	8006814 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fd f914 	bl	8003a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2224      	movs	r2, #36	; 0x24
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0201 	bic.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800683a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800684a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800684c:	f001 fd2a 	bl	80082a4 <HAL_RCC_GetPCLK1Freq>
 8006850:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	4a81      	ldr	r2, [pc, #516]	; (8006a5c <HAL_I2C_Init+0x274>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d807      	bhi.n	800686c <HAL_I2C_Init+0x84>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4a80      	ldr	r2, [pc, #512]	; (8006a60 <HAL_I2C_Init+0x278>)
 8006860:	4293      	cmp	r3, r2
 8006862:	bf94      	ite	ls
 8006864:	2301      	movls	r3, #1
 8006866:	2300      	movhi	r3, #0
 8006868:	b2db      	uxtb	r3, r3
 800686a:	e006      	b.n	800687a <HAL_I2C_Init+0x92>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4a7d      	ldr	r2, [pc, #500]	; (8006a64 <HAL_I2C_Init+0x27c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	bf94      	ite	ls
 8006874:	2301      	movls	r3, #1
 8006876:	2300      	movhi	r3, #0
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e0e7      	b.n	8006a52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4a78      	ldr	r2, [pc, #480]	; (8006a68 <HAL_I2C_Init+0x280>)
 8006886:	fba2 2303 	umull	r2, r3, r2, r3
 800688a:	0c9b      	lsrs	r3, r3, #18
 800688c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	430a      	orrs	r2, r1
 80068a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	4a6a      	ldr	r2, [pc, #424]	; (8006a5c <HAL_I2C_Init+0x274>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d802      	bhi.n	80068bc <HAL_I2C_Init+0xd4>
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	3301      	adds	r3, #1
 80068ba:	e009      	b.n	80068d0 <HAL_I2C_Init+0xe8>
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068c2:	fb02 f303 	mul.w	r3, r2, r3
 80068c6:	4a69      	ldr	r2, [pc, #420]	; (8006a6c <HAL_I2C_Init+0x284>)
 80068c8:	fba2 2303 	umull	r2, r3, r2, r3
 80068cc:	099b      	lsrs	r3, r3, #6
 80068ce:	3301      	adds	r3, #1
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6812      	ldr	r2, [r2, #0]
 80068d4:	430b      	orrs	r3, r1
 80068d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80068e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	495c      	ldr	r1, [pc, #368]	; (8006a5c <HAL_I2C_Init+0x274>)
 80068ec:	428b      	cmp	r3, r1
 80068ee:	d819      	bhi.n	8006924 <HAL_I2C_Init+0x13c>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	1e59      	subs	r1, r3, #1
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80068fe:	1c59      	adds	r1, r3, #1
 8006900:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006904:	400b      	ands	r3, r1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <HAL_I2C_Init+0x138>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	1e59      	subs	r1, r3, #1
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	005b      	lsls	r3, r3, #1
 8006914:	fbb1 f3f3 	udiv	r3, r1, r3
 8006918:	3301      	adds	r3, #1
 800691a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800691e:	e051      	b.n	80069c4 <HAL_I2C_Init+0x1dc>
 8006920:	2304      	movs	r3, #4
 8006922:	e04f      	b.n	80069c4 <HAL_I2C_Init+0x1dc>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d111      	bne.n	8006950 <HAL_I2C_Init+0x168>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	1e58      	subs	r0, r3, #1
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6859      	ldr	r1, [r3, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	005b      	lsls	r3, r3, #1
 8006938:	440b      	add	r3, r1
 800693a:	fbb0 f3f3 	udiv	r3, r0, r3
 800693e:	3301      	adds	r3, #1
 8006940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006944:	2b00      	cmp	r3, #0
 8006946:	bf0c      	ite	eq
 8006948:	2301      	moveq	r3, #1
 800694a:	2300      	movne	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	e012      	b.n	8006976 <HAL_I2C_Init+0x18e>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	1e58      	subs	r0, r3, #1
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6859      	ldr	r1, [r3, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	440b      	add	r3, r1
 800695e:	0099      	lsls	r1, r3, #2
 8006960:	440b      	add	r3, r1
 8006962:	fbb0 f3f3 	udiv	r3, r0, r3
 8006966:	3301      	adds	r3, #1
 8006968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800696c:	2b00      	cmp	r3, #0
 800696e:	bf0c      	ite	eq
 8006970:	2301      	moveq	r3, #1
 8006972:	2300      	movne	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <HAL_I2C_Init+0x196>
 800697a:	2301      	movs	r3, #1
 800697c:	e022      	b.n	80069c4 <HAL_I2C_Init+0x1dc>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10e      	bne.n	80069a4 <HAL_I2C_Init+0x1bc>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	1e58      	subs	r0, r3, #1
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6859      	ldr	r1, [r3, #4]
 800698e:	460b      	mov	r3, r1
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	440b      	add	r3, r1
 8006994:	fbb0 f3f3 	udiv	r3, r0, r3
 8006998:	3301      	adds	r3, #1
 800699a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800699e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a2:	e00f      	b.n	80069c4 <HAL_I2C_Init+0x1dc>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	1e58      	subs	r0, r3, #1
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6859      	ldr	r1, [r3, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	440b      	add	r3, r1
 80069b2:	0099      	lsls	r1, r3, #2
 80069b4:	440b      	add	r3, r1
 80069b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80069ba:	3301      	adds	r3, #1
 80069bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	6809      	ldr	r1, [r1, #0]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	69da      	ldr	r2, [r3, #28]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80069f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6911      	ldr	r1, [r2, #16]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	68d2      	ldr	r2, [r2, #12]
 80069fe:	4311      	orrs	r1, r2
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6812      	ldr	r2, [r2, #0]
 8006a04:	430b      	orrs	r3, r1
 8006a06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	695a      	ldr	r2, [r3, #20]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0201 	orr.w	r2, r2, #1
 8006a32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	000186a0 	.word	0x000186a0
 8006a60:	001e847f 	.word	0x001e847f
 8006a64:	003d08ff 	.word	0x003d08ff
 8006a68:	431bde83 	.word	0x431bde83
 8006a6c:	10624dd3 	.word	0x10624dd3

08006a70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	4608      	mov	r0, r1
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	4603      	mov	r3, r0
 8006a80:	817b      	strh	r3, [r7, #10]
 8006a82:	460b      	mov	r3, r1
 8006a84:	813b      	strh	r3, [r7, #8]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a8a:	f7fe fd1f 	bl	80054cc <HAL_GetTick>
 8006a8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	f040 80d9 	bne.w	8006c50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	2319      	movs	r3, #25
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	496d      	ldr	r1, [pc, #436]	; (8006c5c <HAL_I2C_Mem_Write+0x1ec>)
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fdad 	bl	8007608 <I2C_WaitOnFlagUntilTimeout>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e0cc      	b.n	8006c52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_I2C_Mem_Write+0x56>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e0c5      	b.n	8006c52 <HAL_I2C_Mem_Write+0x1e2>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d007      	beq.n	8006aec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0201 	orr.w	r2, r2, #1
 8006aea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006afa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2221      	movs	r2, #33	; 0x21
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2240      	movs	r2, #64	; 0x40
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a3a      	ldr	r2, [r7, #32]
 8006b16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4a4d      	ldr	r2, [pc, #308]	; (8006c60 <HAL_I2C_Mem_Write+0x1f0>)
 8006b2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b2e:	88f8      	ldrh	r0, [r7, #6]
 8006b30:	893a      	ldrh	r2, [r7, #8]
 8006b32:	8979      	ldrh	r1, [r7, #10]
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 fbe4 	bl	800730c <I2C_RequestMemoryWrite>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d052      	beq.n	8006bf0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e081      	b.n	8006c52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 fe2e 	bl	80077b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00d      	beq.n	8006b7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d107      	bne.n	8006b76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e06b      	b.n	8006c52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	781a      	ldrb	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d11b      	bne.n	8006bf0 <HAL_I2C_Mem_Write+0x180>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d017      	beq.n	8006bf0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	3b01      	subs	r3, #1
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1aa      	bne.n	8006b4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 fe1a 	bl	8007836 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00d      	beq.n	8006c24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d107      	bne.n	8006c20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e016      	b.n	8006c52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e000      	b.n	8006c52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c50:	2302      	movs	r3, #2
  }
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	00100002 	.word	0x00100002
 8006c60:	ffff0000 	.word	0xffff0000

08006c64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08c      	sub	sp, #48	; 0x30
 8006c68:	af02      	add	r7, sp, #8
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	4611      	mov	r1, r2
 8006c70:	461a      	mov	r2, r3
 8006c72:	4603      	mov	r3, r0
 8006c74:	817b      	strh	r3, [r7, #10]
 8006c76:	460b      	mov	r3, r1
 8006c78:	813b      	strh	r3, [r7, #8]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c7e:	f7fe fc25 	bl	80054cc <HAL_GetTick>
 8006c82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	f040 8208 	bne.w	80070a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	2319      	movs	r3, #25
 8006c98:	2201      	movs	r2, #1
 8006c9a:	497b      	ldr	r1, [pc, #492]	; (8006e88 <HAL_I2C_Mem_Read+0x224>)
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 fcb3 	bl	8007608 <I2C_WaitOnFlagUntilTimeout>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e1fb      	b.n	80070a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_I2C_Mem_Read+0x56>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e1f4      	b.n	80070a4 <HAL_I2C_Mem_Read+0x440>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d007      	beq.n	8006ce0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0201 	orr.w	r2, r2, #1
 8006cde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2222      	movs	r2, #34	; 0x22
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2240      	movs	r2, #64	; 0x40
 8006cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006d10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4a5b      	ldr	r2, [pc, #364]	; (8006e8c <HAL_I2C_Mem_Read+0x228>)
 8006d20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d22:	88f8      	ldrh	r0, [r7, #6]
 8006d24:	893a      	ldrh	r2, [r7, #8]
 8006d26:	8979      	ldrh	r1, [r7, #10]
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	9301      	str	r3, [sp, #4]
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	4603      	mov	r3, r0
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 fb80 	bl	8007438 <I2C_RequestMemoryRead>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e1b0      	b.n	80070a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d113      	bne.n	8006d72 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	623b      	str	r3, [r7, #32]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	623b      	str	r3, [r7, #32]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	623b      	str	r3, [r7, #32]
 8006d5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e184      	b.n	800707c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d11b      	bne.n	8006db2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	61fb      	str	r3, [r7, #28]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	61fb      	str	r3, [r7, #28]
 8006d9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	e164      	b.n	800707c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d11b      	bne.n	8006df2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dda:	2300      	movs	r3, #0
 8006ddc:	61bb      	str	r3, [r7, #24]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	61bb      	str	r3, [r7, #24]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	e144      	b.n	800707c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006df2:	2300      	movs	r3, #0
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	617b      	str	r3, [r7, #20]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e08:	e138      	b.n	800707c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	f200 80f1 	bhi.w	8006ff6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d123      	bne.n	8006e64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 fd49 	bl	80078b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e139      	b.n	80070a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	691a      	ldr	r2, [r3, #16]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e62:	e10b      	b.n	800707c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d14e      	bne.n	8006f0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	2200      	movs	r2, #0
 8006e74:	4906      	ldr	r1, [pc, #24]	; (8006e90 <HAL_I2C_Mem_Read+0x22c>)
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 fbc6 	bl	8007608 <I2C_WaitOnFlagUntilTimeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d008      	beq.n	8006e94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e10e      	b.n	80070a4 <HAL_I2C_Mem_Read+0x440>
 8006e86:	bf00      	nop
 8006e88:	00100002 	.word	0x00100002
 8006e8c:	ffff0000 	.word	0xffff0000
 8006e90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691a      	ldr	r2, [r3, #16]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	691a      	ldr	r2, [r3, #16]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	b2d2      	uxtb	r2, r2
 8006ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3b01      	subs	r3, #1
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f08:	e0b8      	b.n	800707c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	2200      	movs	r2, #0
 8006f12:	4966      	ldr	r1, [pc, #408]	; (80070ac <HAL_I2C_Mem_Read+0x448>)
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 fb77 	bl	8007608 <I2C_WaitOnFlagUntilTimeout>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e0bf      	b.n	80070a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691a      	ldr	r2, [r3, #16]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	494f      	ldr	r1, [pc, #316]	; (80070ac <HAL_I2C_Mem_Read+0x448>)
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 fb49 	bl	8007608 <I2C_WaitOnFlagUntilTimeout>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e091      	b.n	80070a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	691a      	ldr	r2, [r3, #16]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fac:	3b01      	subs	r3, #1
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691a      	ldr	r2, [r3, #16]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	b2d2      	uxtb	r2, r2
 8006fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	3b01      	subs	r3, #1
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ff4:	e042      	b.n	800707c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 fc5c 	bl	80078b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e04c      	b.n	80070a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	691a      	ldr	r2, [r3, #16]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007032:	b29b      	uxth	r3, r3
 8007034:	3b01      	subs	r3, #1
 8007036:	b29a      	uxth	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	2b04      	cmp	r3, #4
 8007048:	d118      	bne.n	800707c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	691a      	ldr	r2, [r3, #16]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007066:	3b01      	subs	r3, #1
 8007068:	b29a      	uxth	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007080:	2b00      	cmp	r3, #0
 8007082:	f47f aec2 	bne.w	8006e0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	e000      	b.n	80070a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80070a2:	2302      	movs	r3, #2
  }
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3728      	adds	r7, #40	; 0x28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	00010004 	.word	0x00010004

080070b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08a      	sub	sp, #40	; 0x28
 80070b4:	af02      	add	r7, sp, #8
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	607a      	str	r2, [r7, #4]
 80070ba:	603b      	str	r3, [r7, #0]
 80070bc:	460b      	mov	r3, r1
 80070be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80070c0:	f7fe fa04 	bl	80054cc <HAL_GetTick>
 80070c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	f040 8111 	bne.w	80072fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	2319      	movs	r3, #25
 80070de:	2201      	movs	r2, #1
 80070e0:	4988      	ldr	r1, [pc, #544]	; (8007304 <HAL_I2C_IsDeviceReady+0x254>)
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 fa90 	bl	8007608 <I2C_WaitOnFlagUntilTimeout>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80070ee:	2302      	movs	r3, #2
 80070f0:	e104      	b.n	80072fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_I2C_IsDeviceReady+0x50>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e0fd      	b.n	80072fc <HAL_I2C_IsDeviceReady+0x24c>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b01      	cmp	r3, #1
 8007114:	d007      	beq.n	8007126 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f042 0201 	orr.w	r2, r2, #1
 8007124:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007134:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2224      	movs	r2, #36	; 0x24
 800713a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4a70      	ldr	r2, [pc, #448]	; (8007308 <HAL_I2C_IsDeviceReady+0x258>)
 8007148:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007158:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2200      	movs	r2, #0
 8007162:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 fa4e 	bl	8007608 <I2C_WaitOnFlagUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00d      	beq.n	800718e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007180:	d103      	bne.n	800718a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007188:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e0b6      	b.n	80072fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800718e:	897b      	ldrh	r3, [r7, #10]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	461a      	mov	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800719c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800719e:	f7fe f995 	bl	80054cc <HAL_GetTick>
 80071a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	bf0c      	ite	eq
 80071b2:	2301      	moveq	r3, #1
 80071b4:	2300      	movne	r3, #0
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c8:	bf0c      	ite	eq
 80071ca:	2301      	moveq	r3, #1
 80071cc:	2300      	movne	r3, #0
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80071d2:	e025      	b.n	8007220 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80071d4:	f7fe f97a 	bl	80054cc <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d302      	bcc.n	80071ea <HAL_I2C_IsDeviceReady+0x13a>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d103      	bne.n	80071f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	22a0      	movs	r2, #160	; 0xa0
 80071ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	bf0c      	ite	eq
 8007200:	2301      	moveq	r3, #1
 8007202:	2300      	movne	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007216:	bf0c      	ite	eq
 8007218:	2301      	moveq	r3, #1
 800721a:	2300      	movne	r3, #0
 800721c:	b2db      	uxtb	r3, r3
 800721e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2ba0      	cmp	r3, #160	; 0xa0
 800722a:	d005      	beq.n	8007238 <HAL_I2C_IsDeviceReady+0x188>
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d102      	bne.n	8007238 <HAL_I2C_IsDeviceReady+0x188>
 8007232:	7dbb      	ldrb	r3, [r7, #22]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0cd      	beq.n	80071d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2220      	movs	r2, #32
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b02      	cmp	r3, #2
 800724c:	d129      	bne.n	80072a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800725c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800725e:	2300      	movs	r3, #0
 8007260:	613b      	str	r3, [r7, #16]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	613b      	str	r3, [r7, #16]
 8007272:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	2319      	movs	r3, #25
 800727a:	2201      	movs	r2, #1
 800727c:	4921      	ldr	r1, [pc, #132]	; (8007304 <HAL_I2C_IsDeviceReady+0x254>)
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 f9c2 	bl	8007608 <I2C_WaitOnFlagUntilTimeout>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e036      	b.n	80072fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2220      	movs	r2, #32
 8007292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	e02c      	b.n	80072fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	2319      	movs	r3, #25
 80072c2:	2201      	movs	r2, #1
 80072c4:	490f      	ldr	r1, [pc, #60]	; (8007304 <HAL_I2C_IsDeviceReady+0x254>)
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 f99e 	bl	8007608 <I2C_WaitOnFlagUntilTimeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e012      	b.n	80072fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	3301      	adds	r3, #1
 80072da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	f4ff af32 	bcc.w	800714a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e000      	b.n	80072fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80072fa:	2302      	movs	r3, #2
  }
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3720      	adds	r7, #32
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	00100002 	.word	0x00100002
 8007308:	ffff0000 	.word	0xffff0000

0800730c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af02      	add	r7, sp, #8
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	4608      	mov	r0, r1
 8007316:	4611      	mov	r1, r2
 8007318:	461a      	mov	r2, r3
 800731a:	4603      	mov	r3, r0
 800731c:	817b      	strh	r3, [r7, #10]
 800731e:	460b      	mov	r3, r1
 8007320:	813b      	strh	r3, [r7, #8]
 8007322:	4613      	mov	r3, r2
 8007324:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007334:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	2200      	movs	r2, #0
 800733e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 f960 	bl	8007608 <I2C_WaitOnFlagUntilTimeout>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00d      	beq.n	800736a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800735c:	d103      	bne.n	8007366 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007364:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e05f      	b.n	800742a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800736a:	897b      	ldrh	r3, [r7, #10]
 800736c:	b2db      	uxtb	r3, r3
 800736e:	461a      	mov	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007378:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	6a3a      	ldr	r2, [r7, #32]
 800737e:	492d      	ldr	r1, [pc, #180]	; (8007434 <I2C_RequestMemoryWrite+0x128>)
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 f998 	bl	80076b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e04c      	b.n	800742a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007390:	2300      	movs	r3, #0
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	617b      	str	r3, [r7, #20]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a8:	6a39      	ldr	r1, [r7, #32]
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 fa02 	bl	80077b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00d      	beq.n	80073d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d107      	bne.n	80073ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e02b      	b.n	800742a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073d2:	88fb      	ldrh	r3, [r7, #6]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d105      	bne.n	80073e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073d8:	893b      	ldrh	r3, [r7, #8]
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	611a      	str	r2, [r3, #16]
 80073e2:	e021      	b.n	8007428 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80073e4:	893b      	ldrh	r3, [r7, #8]
 80073e6:	0a1b      	lsrs	r3, r3, #8
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f4:	6a39      	ldr	r1, [r7, #32]
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 f9dc 	bl	80077b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00d      	beq.n	800741e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	2b04      	cmp	r3, #4
 8007408:	d107      	bne.n	800741a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007418:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e005      	b.n	800742a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800741e:	893b      	ldrh	r3, [r7, #8]
 8007420:	b2da      	uxtb	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	00010002 	.word	0x00010002

08007438 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b088      	sub	sp, #32
 800743c:	af02      	add	r7, sp, #8
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	4608      	mov	r0, r1
 8007442:	4611      	mov	r1, r2
 8007444:	461a      	mov	r2, r3
 8007446:	4603      	mov	r3, r0
 8007448:	817b      	strh	r3, [r7, #10]
 800744a:	460b      	mov	r3, r1
 800744c:	813b      	strh	r3, [r7, #8]
 800744e:	4613      	mov	r3, r2
 8007450:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007460:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007470:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	2200      	movs	r2, #0
 800747a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 f8c2 	bl	8007608 <I2C_WaitOnFlagUntilTimeout>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00d      	beq.n	80074a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007498:	d103      	bne.n	80074a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e0aa      	b.n	80075fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80074a6:	897b      	ldrh	r3, [r7, #10]
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	461a      	mov	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80074b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	6a3a      	ldr	r2, [r7, #32]
 80074ba:	4952      	ldr	r1, [pc, #328]	; (8007604 <I2C_RequestMemoryRead+0x1cc>)
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f8fa 	bl	80076b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e097      	b.n	80075fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074cc:	2300      	movs	r3, #0
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e4:	6a39      	ldr	r1, [r7, #32]
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 f964 	bl	80077b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00d      	beq.n	800750e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d107      	bne.n	800750a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007508:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e076      	b.n	80075fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800750e:	88fb      	ldrh	r3, [r7, #6]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d105      	bne.n	8007520 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007514:	893b      	ldrh	r3, [r7, #8]
 8007516:	b2da      	uxtb	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	611a      	str	r2, [r3, #16]
 800751e:	e021      	b.n	8007564 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007520:	893b      	ldrh	r3, [r7, #8]
 8007522:	0a1b      	lsrs	r3, r3, #8
 8007524:	b29b      	uxth	r3, r3
 8007526:	b2da      	uxtb	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800752e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007530:	6a39      	ldr	r1, [r7, #32]
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 f93e 	bl	80077b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00d      	beq.n	800755a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	2b04      	cmp	r3, #4
 8007544:	d107      	bne.n	8007556 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007554:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e050      	b.n	80075fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800755a:	893b      	ldrh	r3, [r7, #8]
 800755c:	b2da      	uxtb	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007566:	6a39      	ldr	r1, [r7, #32]
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 f923 	bl	80077b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00d      	beq.n	8007590 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	2b04      	cmp	r3, #4
 800757a:	d107      	bne.n	800758c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800758a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e035      	b.n	80075fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800759e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 f82b 	bl	8007608 <I2C_WaitOnFlagUntilTimeout>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00d      	beq.n	80075d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c6:	d103      	bne.n	80075d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e013      	b.n	80075fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80075d4:	897b      	ldrh	r3, [r7, #10]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	f043 0301 	orr.w	r3, r3, #1
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	6a3a      	ldr	r2, [r7, #32]
 80075e8:	4906      	ldr	r1, [pc, #24]	; (8007604 <I2C_RequestMemoryRead+0x1cc>)
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 f863 	bl	80076b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e000      	b.n	80075fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	00010002 	.word	0x00010002

08007608 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	4613      	mov	r3, r2
 8007616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007618:	e025      	b.n	8007666 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007620:	d021      	beq.n	8007666 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007622:	f7fd ff53 	bl	80054cc <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d302      	bcc.n	8007638 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d116      	bne.n	8007666 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2220      	movs	r2, #32
 8007642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	f043 0220 	orr.w	r2, r3, #32
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e023      	b.n	80076ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	0c1b      	lsrs	r3, r3, #16
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b01      	cmp	r3, #1
 800766e:	d10d      	bne.n	800768c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	43da      	mvns	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4013      	ands	r3, r2
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	bf0c      	ite	eq
 8007682:	2301      	moveq	r3, #1
 8007684:	2300      	movne	r3, #0
 8007686:	b2db      	uxtb	r3, r3
 8007688:	461a      	mov	r2, r3
 800768a:	e00c      	b.n	80076a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	43da      	mvns	r2, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4013      	ands	r3, r2
 8007698:	b29b      	uxth	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	bf0c      	ite	eq
 800769e:	2301      	moveq	r3, #1
 80076a0:	2300      	movne	r3, #0
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	461a      	mov	r2, r3
 80076a6:	79fb      	ldrb	r3, [r7, #7]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d0b6      	beq.n	800761a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	607a      	str	r2, [r7, #4]
 80076c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076c4:	e051      	b.n	800776a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076d4:	d123      	bne.n	800771e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2220      	movs	r2, #32
 80076fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	f043 0204 	orr.w	r2, r3, #4
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e046      	b.n	80077ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007724:	d021      	beq.n	800776a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007726:	f7fd fed1 	bl	80054cc <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	429a      	cmp	r2, r3
 8007734:	d302      	bcc.n	800773c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d116      	bne.n	800776a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2220      	movs	r2, #32
 8007746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007756:	f043 0220 	orr.w	r2, r3, #32
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e020      	b.n	80077ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	0c1b      	lsrs	r3, r3, #16
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b01      	cmp	r3, #1
 8007772:	d10c      	bne.n	800778e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	43da      	mvns	r2, r3
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	4013      	ands	r3, r2
 8007780:	b29b      	uxth	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	bf14      	ite	ne
 8007786:	2301      	movne	r3, #1
 8007788:	2300      	moveq	r3, #0
 800778a:	b2db      	uxtb	r3, r3
 800778c:	e00b      	b.n	80077a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	43da      	mvns	r2, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	4013      	ands	r3, r2
 800779a:	b29b      	uxth	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	bf14      	ite	ne
 80077a0:	2301      	movne	r3, #1
 80077a2:	2300      	moveq	r3, #0
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d18d      	bne.n	80076c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077c0:	e02d      	b.n	800781e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 f8ce 	bl	8007964 <I2C_IsAcknowledgeFailed>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e02d      	b.n	800782e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d8:	d021      	beq.n	800781e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077da:	f7fd fe77 	bl	80054cc <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d302      	bcc.n	80077f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d116      	bne.n	800781e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	f043 0220 	orr.w	r2, r3, #32
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e007      	b.n	800782e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007828:	2b80      	cmp	r3, #128	; 0x80
 800782a:	d1ca      	bne.n	80077c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	60f8      	str	r0, [r7, #12]
 800783e:	60b9      	str	r1, [r7, #8]
 8007840:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007842:	e02d      	b.n	80078a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 f88d 	bl	8007964 <I2C_IsAcknowledgeFailed>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e02d      	b.n	80078b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d021      	beq.n	80078a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800785c:	f7fd fe36 	bl	80054cc <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	429a      	cmp	r2, r3
 800786a:	d302      	bcc.n	8007872 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d116      	bne.n	80078a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2220      	movs	r2, #32
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788c:	f043 0220 	orr.w	r2, r3, #32
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e007      	b.n	80078b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	f003 0304 	and.w	r3, r3, #4
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d1ca      	bne.n	8007844 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078c4:	e042      	b.n	800794c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	f003 0310 	and.w	r3, r3, #16
 80078d0:	2b10      	cmp	r3, #16
 80078d2:	d119      	bne.n	8007908 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f06f 0210 	mvn.w	r2, #16
 80078dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e029      	b.n	800795c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007908:	f7fd fde0 	bl	80054cc <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	429a      	cmp	r2, r3
 8007916:	d302      	bcc.n	800791e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d116      	bne.n	800794c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2220      	movs	r2, #32
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007938:	f043 0220 	orr.w	r2, r3, #32
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e007      	b.n	800795c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007956:	2b40      	cmp	r3, #64	; 0x40
 8007958:	d1b5      	bne.n	80078c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800797a:	d11b      	bne.n	80079b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007984:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a0:	f043 0204 	orr.w	r2, r3, #4
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e000      	b.n	80079b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
	...

080079c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e267      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d075      	beq.n	8007ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079e2:	4b88      	ldr	r3, [pc, #544]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f003 030c 	and.w	r3, r3, #12
 80079ea:	2b04      	cmp	r3, #4
 80079ec:	d00c      	beq.n	8007a08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079ee:	4b85      	ldr	r3, [pc, #532]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079f6:	2b08      	cmp	r3, #8
 80079f8:	d112      	bne.n	8007a20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079fa:	4b82      	ldr	r3, [pc, #520]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a06:	d10b      	bne.n	8007a20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a08:	4b7e      	ldr	r3, [pc, #504]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d05b      	beq.n	8007acc <HAL_RCC_OscConfig+0x108>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d157      	bne.n	8007acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e242      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a28:	d106      	bne.n	8007a38 <HAL_RCC_OscConfig+0x74>
 8007a2a:	4b76      	ldr	r3, [pc, #472]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a75      	ldr	r2, [pc, #468]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	e01d      	b.n	8007a74 <HAL_RCC_OscConfig+0xb0>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a40:	d10c      	bne.n	8007a5c <HAL_RCC_OscConfig+0x98>
 8007a42:	4b70      	ldr	r3, [pc, #448]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a6f      	ldr	r2, [pc, #444]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	4b6d      	ldr	r3, [pc, #436]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a6c      	ldr	r2, [pc, #432]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	e00b      	b.n	8007a74 <HAL_RCC_OscConfig+0xb0>
 8007a5c:	4b69      	ldr	r3, [pc, #420]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a68      	ldr	r2, [pc, #416]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	4b66      	ldr	r3, [pc, #408]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a65      	ldr	r2, [pc, #404]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d013      	beq.n	8007aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a7c:	f7fd fd26 	bl	80054cc <HAL_GetTick>
 8007a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a82:	e008      	b.n	8007a96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a84:	f7fd fd22 	bl	80054cc <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	2b64      	cmp	r3, #100	; 0x64
 8007a90:	d901      	bls.n	8007a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e207      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a96:	4b5b      	ldr	r3, [pc, #364]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0f0      	beq.n	8007a84 <HAL_RCC_OscConfig+0xc0>
 8007aa2:	e014      	b.n	8007ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa4:	f7fd fd12 	bl	80054cc <HAL_GetTick>
 8007aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aaa:	e008      	b.n	8007abe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007aac:	f7fd fd0e 	bl	80054cc <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	2b64      	cmp	r3, #100	; 0x64
 8007ab8:	d901      	bls.n	8007abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e1f3      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007abe:	4b51      	ldr	r3, [pc, #324]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1f0      	bne.n	8007aac <HAL_RCC_OscConfig+0xe8>
 8007aca:	e000      	b.n	8007ace <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d063      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ada:	4b4a      	ldr	r3, [pc, #296]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f003 030c 	and.w	r3, r3, #12
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00b      	beq.n	8007afe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ae6:	4b47      	ldr	r3, [pc, #284]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	d11c      	bne.n	8007b2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007af2:	4b44      	ldr	r3, [pc, #272]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d116      	bne.n	8007b2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007afe:	4b41      	ldr	r3, [pc, #260]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d005      	beq.n	8007b16 <HAL_RCC_OscConfig+0x152>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d001      	beq.n	8007b16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e1c7      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b16:	4b3b      	ldr	r3, [pc, #236]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	4937      	ldr	r1, [pc, #220]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b2a:	e03a      	b.n	8007ba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d020      	beq.n	8007b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b34:	4b34      	ldr	r3, [pc, #208]	; (8007c08 <HAL_RCC_OscConfig+0x244>)
 8007b36:	2201      	movs	r2, #1
 8007b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b3a:	f7fd fcc7 	bl	80054cc <HAL_GetTick>
 8007b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b40:	e008      	b.n	8007b54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b42:	f7fd fcc3 	bl	80054cc <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d901      	bls.n	8007b54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e1a8      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b54:	4b2b      	ldr	r3, [pc, #172]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0f0      	beq.n	8007b42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b60:	4b28      	ldr	r3, [pc, #160]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	00db      	lsls	r3, r3, #3
 8007b6e:	4925      	ldr	r1, [pc, #148]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	600b      	str	r3, [r1, #0]
 8007b74:	e015      	b.n	8007ba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b76:	4b24      	ldr	r3, [pc, #144]	; (8007c08 <HAL_RCC_OscConfig+0x244>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b7c:	f7fd fca6 	bl	80054cc <HAL_GetTick>
 8007b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b82:	e008      	b.n	8007b96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b84:	f7fd fca2 	bl	80054cc <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e187      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b96:	4b1b      	ldr	r3, [pc, #108]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1f0      	bne.n	8007b84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0308 	and.w	r3, r3, #8
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d036      	beq.n	8007c1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d016      	beq.n	8007be4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bb6:	4b15      	ldr	r3, [pc, #84]	; (8007c0c <HAL_RCC_OscConfig+0x248>)
 8007bb8:	2201      	movs	r2, #1
 8007bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bbc:	f7fd fc86 	bl	80054cc <HAL_GetTick>
 8007bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bc2:	e008      	b.n	8007bd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bc4:	f7fd fc82 	bl	80054cc <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e167      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bd6:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <HAL_RCC_OscConfig+0x240>)
 8007bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0f0      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x200>
 8007be2:	e01b      	b.n	8007c1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007be4:	4b09      	ldr	r3, [pc, #36]	; (8007c0c <HAL_RCC_OscConfig+0x248>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bea:	f7fd fc6f 	bl	80054cc <HAL_GetTick>
 8007bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bf0:	e00e      	b.n	8007c10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bf2:	f7fd fc6b 	bl	80054cc <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d907      	bls.n	8007c10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e150      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
 8007c04:	40023800 	.word	0x40023800
 8007c08:	42470000 	.word	0x42470000
 8007c0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c10:	4b88      	ldr	r3, [pc, #544]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1ea      	bne.n	8007bf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 8097 	beq.w	8007d58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c2e:	4b81      	ldr	r3, [pc, #516]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10f      	bne.n	8007c5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60bb      	str	r3, [r7, #8]
 8007c3e:	4b7d      	ldr	r3, [pc, #500]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c42:	4a7c      	ldr	r2, [pc, #496]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c48:	6413      	str	r3, [r2, #64]	; 0x40
 8007c4a:	4b7a      	ldr	r3, [pc, #488]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c52:	60bb      	str	r3, [r7, #8]
 8007c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c56:	2301      	movs	r3, #1
 8007c58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c5a:	4b77      	ldr	r3, [pc, #476]	; (8007e38 <HAL_RCC_OscConfig+0x474>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d118      	bne.n	8007c98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c66:	4b74      	ldr	r3, [pc, #464]	; (8007e38 <HAL_RCC_OscConfig+0x474>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a73      	ldr	r2, [pc, #460]	; (8007e38 <HAL_RCC_OscConfig+0x474>)
 8007c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c72:	f7fd fc2b 	bl	80054cc <HAL_GetTick>
 8007c76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c78:	e008      	b.n	8007c8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c7a:	f7fd fc27 	bl	80054cc <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d901      	bls.n	8007c8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e10c      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c8c:	4b6a      	ldr	r3, [pc, #424]	; (8007e38 <HAL_RCC_OscConfig+0x474>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d0f0      	beq.n	8007c7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d106      	bne.n	8007cae <HAL_RCC_OscConfig+0x2ea>
 8007ca0:	4b64      	ldr	r3, [pc, #400]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca4:	4a63      	ldr	r2, [pc, #396]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007ca6:	f043 0301 	orr.w	r3, r3, #1
 8007caa:	6713      	str	r3, [r2, #112]	; 0x70
 8007cac:	e01c      	b.n	8007ce8 <HAL_RCC_OscConfig+0x324>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b05      	cmp	r3, #5
 8007cb4:	d10c      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x30c>
 8007cb6:	4b5f      	ldr	r3, [pc, #380]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cba:	4a5e      	ldr	r2, [pc, #376]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007cbc:	f043 0304 	orr.w	r3, r3, #4
 8007cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8007cc2:	4b5c      	ldr	r3, [pc, #368]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc6:	4a5b      	ldr	r2, [pc, #364]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007cc8:	f043 0301 	orr.w	r3, r3, #1
 8007ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8007cce:	e00b      	b.n	8007ce8 <HAL_RCC_OscConfig+0x324>
 8007cd0:	4b58      	ldr	r3, [pc, #352]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd4:	4a57      	ldr	r2, [pc, #348]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007cd6:	f023 0301 	bic.w	r3, r3, #1
 8007cda:	6713      	str	r3, [r2, #112]	; 0x70
 8007cdc:	4b55      	ldr	r3, [pc, #340]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce0:	4a54      	ldr	r2, [pc, #336]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007ce2:	f023 0304 	bic.w	r3, r3, #4
 8007ce6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d015      	beq.n	8007d1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf0:	f7fd fbec 	bl	80054cc <HAL_GetTick>
 8007cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cf6:	e00a      	b.n	8007d0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cf8:	f7fd fbe8 	bl	80054cc <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d901      	bls.n	8007d0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e0cb      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d0e:	4b49      	ldr	r3, [pc, #292]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0ee      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x334>
 8007d1a:	e014      	b.n	8007d46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d1c:	f7fd fbd6 	bl	80054cc <HAL_GetTick>
 8007d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d22:	e00a      	b.n	8007d3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d24:	f7fd fbd2 	bl	80054cc <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d901      	bls.n	8007d3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e0b5      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d3a:	4b3e      	ldr	r3, [pc, #248]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1ee      	bne.n	8007d24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d105      	bne.n	8007d58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d4c:	4b39      	ldr	r3, [pc, #228]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	4a38      	ldr	r2, [pc, #224]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 80a1 	beq.w	8007ea4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d62:	4b34      	ldr	r3, [pc, #208]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f003 030c 	and.w	r3, r3, #12
 8007d6a:	2b08      	cmp	r3, #8
 8007d6c:	d05c      	beq.n	8007e28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d141      	bne.n	8007dfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d76:	4b31      	ldr	r3, [pc, #196]	; (8007e3c <HAL_RCC_OscConfig+0x478>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d7c:	f7fd fba6 	bl	80054cc <HAL_GetTick>
 8007d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d82:	e008      	b.n	8007d96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d84:	f7fd fba2 	bl	80054cc <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e087      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d96:	4b27      	ldr	r3, [pc, #156]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1f0      	bne.n	8007d84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	69da      	ldr	r2, [r3, #28]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	431a      	orrs	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	019b      	lsls	r3, r3, #6
 8007db2:	431a      	orrs	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db8:	085b      	lsrs	r3, r3, #1
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	041b      	lsls	r3, r3, #16
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	061b      	lsls	r3, r3, #24
 8007dc6:	491b      	ldr	r1, [pc, #108]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dcc:	4b1b      	ldr	r3, [pc, #108]	; (8007e3c <HAL_RCC_OscConfig+0x478>)
 8007dce:	2201      	movs	r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dd2:	f7fd fb7b 	bl	80054cc <HAL_GetTick>
 8007dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dd8:	e008      	b.n	8007dec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dda:	f7fd fb77 	bl	80054cc <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d901      	bls.n	8007dec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e05c      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dec:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d0f0      	beq.n	8007dda <HAL_RCC_OscConfig+0x416>
 8007df8:	e054      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dfa:	4b10      	ldr	r3, [pc, #64]	; (8007e3c <HAL_RCC_OscConfig+0x478>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e00:	f7fd fb64 	bl	80054cc <HAL_GetTick>
 8007e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e06:	e008      	b.n	8007e1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e08:	f7fd fb60 	bl	80054cc <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d901      	bls.n	8007e1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e045      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e1a:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <HAL_RCC_OscConfig+0x470>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1f0      	bne.n	8007e08 <HAL_RCC_OscConfig+0x444>
 8007e26:	e03d      	b.n	8007ea4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d107      	bne.n	8007e40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e038      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
 8007e34:	40023800 	.word	0x40023800
 8007e38:	40007000 	.word	0x40007000
 8007e3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e40:	4b1b      	ldr	r3, [pc, #108]	; (8007eb0 <HAL_RCC_OscConfig+0x4ec>)
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d028      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d121      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d11a      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e70:	4013      	ands	r3, r2
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d111      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e86:	085b      	lsrs	r3, r3, #1
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d107      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d001      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e000      	b.n	8007ea6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	40023800 	.word	0x40023800

08007eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e0cc      	b.n	8008062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ec8:	4b68      	ldr	r3, [pc, #416]	; (800806c <HAL_RCC_ClockConfig+0x1b8>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0307 	and.w	r3, r3, #7
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d90c      	bls.n	8007ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ed6:	4b65      	ldr	r3, [pc, #404]	; (800806c <HAL_RCC_ClockConfig+0x1b8>)
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	b2d2      	uxtb	r2, r2
 8007edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ede:	4b63      	ldr	r3, [pc, #396]	; (800806c <HAL_RCC_ClockConfig+0x1b8>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d001      	beq.n	8007ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e0b8      	b.n	8008062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0302 	and.w	r3, r3, #2
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d020      	beq.n	8007f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0304 	and.w	r3, r3, #4
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d005      	beq.n	8007f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f08:	4b59      	ldr	r3, [pc, #356]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	4a58      	ldr	r2, [pc, #352]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8007f0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0308 	and.w	r3, r3, #8
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d005      	beq.n	8007f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f20:	4b53      	ldr	r3, [pc, #332]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	4a52      	ldr	r2, [pc, #328]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8007f26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f2c:	4b50      	ldr	r3, [pc, #320]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	494d      	ldr	r1, [pc, #308]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d044      	beq.n	8007fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d107      	bne.n	8007f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f52:	4b47      	ldr	r3, [pc, #284]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d119      	bne.n	8007f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e07f      	b.n	8008062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d003      	beq.n	8007f72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d107      	bne.n	8007f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f72:	4b3f      	ldr	r3, [pc, #252]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d109      	bne.n	8007f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e06f      	b.n	8008062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f82:	4b3b      	ldr	r3, [pc, #236]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0302 	and.w	r3, r3, #2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e067      	b.n	8008062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f92:	4b37      	ldr	r3, [pc, #220]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f023 0203 	bic.w	r2, r3, #3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	4934      	ldr	r1, [pc, #208]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fa4:	f7fd fa92 	bl	80054cc <HAL_GetTick>
 8007fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007faa:	e00a      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fac:	f7fd fa8e 	bl	80054cc <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d901      	bls.n	8007fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e04f      	b.n	8008062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fc2:	4b2b      	ldr	r3, [pc, #172]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f003 020c 	and.w	r2, r3, #12
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d1eb      	bne.n	8007fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fd4:	4b25      	ldr	r3, [pc, #148]	; (800806c <HAL_RCC_ClockConfig+0x1b8>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0307 	and.w	r3, r3, #7
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d20c      	bcs.n	8007ffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fe2:	4b22      	ldr	r3, [pc, #136]	; (800806c <HAL_RCC_ClockConfig+0x1b8>)
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fea:	4b20      	ldr	r3, [pc, #128]	; (800806c <HAL_RCC_ClockConfig+0x1b8>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0307 	and.w	r3, r3, #7
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d001      	beq.n	8007ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e032      	b.n	8008062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0304 	and.w	r3, r3, #4
 8008004:	2b00      	cmp	r3, #0
 8008006:	d008      	beq.n	800801a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008008:	4b19      	ldr	r3, [pc, #100]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	4916      	ldr	r1, [pc, #88]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8008016:	4313      	orrs	r3, r2
 8008018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0308 	and.w	r3, r3, #8
 8008022:	2b00      	cmp	r3, #0
 8008024:	d009      	beq.n	800803a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008026:	4b12      	ldr	r3, [pc, #72]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	490e      	ldr	r1, [pc, #56]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8008036:	4313      	orrs	r3, r2
 8008038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800803a:	f000 f821 	bl	8008080 <HAL_RCC_GetSysClockFreq>
 800803e:	4602      	mov	r2, r0
 8008040:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <HAL_RCC_ClockConfig+0x1bc>)
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	091b      	lsrs	r3, r3, #4
 8008046:	f003 030f 	and.w	r3, r3, #15
 800804a:	490a      	ldr	r1, [pc, #40]	; (8008074 <HAL_RCC_ClockConfig+0x1c0>)
 800804c:	5ccb      	ldrb	r3, [r1, r3]
 800804e:	fa22 f303 	lsr.w	r3, r2, r3
 8008052:	4a09      	ldr	r2, [pc, #36]	; (8008078 <HAL_RCC_ClockConfig+0x1c4>)
 8008054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008056:	4b09      	ldr	r3, [pc, #36]	; (800807c <HAL_RCC_ClockConfig+0x1c8>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4618      	mov	r0, r3
 800805c:	f7fd f9f2 	bl	8005444 <HAL_InitTick>

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	40023c00 	.word	0x40023c00
 8008070:	40023800 	.word	0x40023800
 8008074:	08015510 	.word	0x08015510
 8008078:	2000000c 	.word	0x2000000c
 800807c:	20000010 	.word	0x20000010

08008080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008084:	b094      	sub	sp, #80	; 0x50
 8008086:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	647b      	str	r3, [r7, #68]	; 0x44
 800808c:	2300      	movs	r3, #0
 800808e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008090:	2300      	movs	r3, #0
 8008092:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008098:	4b79      	ldr	r3, [pc, #484]	; (8008280 <HAL_RCC_GetSysClockFreq+0x200>)
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f003 030c 	and.w	r3, r3, #12
 80080a0:	2b08      	cmp	r3, #8
 80080a2:	d00d      	beq.n	80080c0 <HAL_RCC_GetSysClockFreq+0x40>
 80080a4:	2b08      	cmp	r3, #8
 80080a6:	f200 80e1 	bhi.w	800826c <HAL_RCC_GetSysClockFreq+0x1ec>
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <HAL_RCC_GetSysClockFreq+0x34>
 80080ae:	2b04      	cmp	r3, #4
 80080b0:	d003      	beq.n	80080ba <HAL_RCC_GetSysClockFreq+0x3a>
 80080b2:	e0db      	b.n	800826c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080b4:	4b73      	ldr	r3, [pc, #460]	; (8008284 <HAL_RCC_GetSysClockFreq+0x204>)
 80080b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80080b8:	e0db      	b.n	8008272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080ba:	4b73      	ldr	r3, [pc, #460]	; (8008288 <HAL_RCC_GetSysClockFreq+0x208>)
 80080bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080be:	e0d8      	b.n	8008272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080c0:	4b6f      	ldr	r3, [pc, #444]	; (8008280 <HAL_RCC_GetSysClockFreq+0x200>)
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080ca:	4b6d      	ldr	r3, [pc, #436]	; (8008280 <HAL_RCC_GetSysClockFreq+0x200>)
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d063      	beq.n	800819e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080d6:	4b6a      	ldr	r3, [pc, #424]	; (8008280 <HAL_RCC_GetSysClockFreq+0x200>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	099b      	lsrs	r3, r3, #6
 80080dc:	2200      	movs	r2, #0
 80080de:	63bb      	str	r3, [r7, #56]	; 0x38
 80080e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e8:	633b      	str	r3, [r7, #48]	; 0x30
 80080ea:	2300      	movs	r3, #0
 80080ec:	637b      	str	r3, [r7, #52]	; 0x34
 80080ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80080f2:	4622      	mov	r2, r4
 80080f4:	462b      	mov	r3, r5
 80080f6:	f04f 0000 	mov.w	r0, #0
 80080fa:	f04f 0100 	mov.w	r1, #0
 80080fe:	0159      	lsls	r1, r3, #5
 8008100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008104:	0150      	lsls	r0, r2, #5
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	4621      	mov	r1, r4
 800810c:	1a51      	subs	r1, r2, r1
 800810e:	6139      	str	r1, [r7, #16]
 8008110:	4629      	mov	r1, r5
 8008112:	eb63 0301 	sbc.w	r3, r3, r1
 8008116:	617b      	str	r3, [r7, #20]
 8008118:	f04f 0200 	mov.w	r2, #0
 800811c:	f04f 0300 	mov.w	r3, #0
 8008120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008124:	4659      	mov	r1, fp
 8008126:	018b      	lsls	r3, r1, #6
 8008128:	4651      	mov	r1, sl
 800812a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800812e:	4651      	mov	r1, sl
 8008130:	018a      	lsls	r2, r1, #6
 8008132:	4651      	mov	r1, sl
 8008134:	ebb2 0801 	subs.w	r8, r2, r1
 8008138:	4659      	mov	r1, fp
 800813a:	eb63 0901 	sbc.w	r9, r3, r1
 800813e:	f04f 0200 	mov.w	r2, #0
 8008142:	f04f 0300 	mov.w	r3, #0
 8008146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800814a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800814e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008152:	4690      	mov	r8, r2
 8008154:	4699      	mov	r9, r3
 8008156:	4623      	mov	r3, r4
 8008158:	eb18 0303 	adds.w	r3, r8, r3
 800815c:	60bb      	str	r3, [r7, #8]
 800815e:	462b      	mov	r3, r5
 8008160:	eb49 0303 	adc.w	r3, r9, r3
 8008164:	60fb      	str	r3, [r7, #12]
 8008166:	f04f 0200 	mov.w	r2, #0
 800816a:	f04f 0300 	mov.w	r3, #0
 800816e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008172:	4629      	mov	r1, r5
 8008174:	024b      	lsls	r3, r1, #9
 8008176:	4621      	mov	r1, r4
 8008178:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800817c:	4621      	mov	r1, r4
 800817e:	024a      	lsls	r2, r1, #9
 8008180:	4610      	mov	r0, r2
 8008182:	4619      	mov	r1, r3
 8008184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008186:	2200      	movs	r2, #0
 8008188:	62bb      	str	r3, [r7, #40]	; 0x28
 800818a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800818c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008190:	f7f8 fd7a 	bl	8000c88 <__aeabi_uldivmod>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4613      	mov	r3, r2
 800819a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800819c:	e058      	b.n	8008250 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800819e:	4b38      	ldr	r3, [pc, #224]	; (8008280 <HAL_RCC_GetSysClockFreq+0x200>)
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	099b      	lsrs	r3, r3, #6
 80081a4:	2200      	movs	r2, #0
 80081a6:	4618      	mov	r0, r3
 80081a8:	4611      	mov	r1, r2
 80081aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80081ae:	623b      	str	r3, [r7, #32]
 80081b0:	2300      	movs	r3, #0
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
 80081b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80081b8:	4642      	mov	r2, r8
 80081ba:	464b      	mov	r3, r9
 80081bc:	f04f 0000 	mov.w	r0, #0
 80081c0:	f04f 0100 	mov.w	r1, #0
 80081c4:	0159      	lsls	r1, r3, #5
 80081c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081ca:	0150      	lsls	r0, r2, #5
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4641      	mov	r1, r8
 80081d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80081d6:	4649      	mov	r1, r9
 80081d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80081dc:	f04f 0200 	mov.w	r2, #0
 80081e0:	f04f 0300 	mov.w	r3, #0
 80081e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80081e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80081ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80081f0:	ebb2 040a 	subs.w	r4, r2, sl
 80081f4:	eb63 050b 	sbc.w	r5, r3, fp
 80081f8:	f04f 0200 	mov.w	r2, #0
 80081fc:	f04f 0300 	mov.w	r3, #0
 8008200:	00eb      	lsls	r3, r5, #3
 8008202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008206:	00e2      	lsls	r2, r4, #3
 8008208:	4614      	mov	r4, r2
 800820a:	461d      	mov	r5, r3
 800820c:	4643      	mov	r3, r8
 800820e:	18e3      	adds	r3, r4, r3
 8008210:	603b      	str	r3, [r7, #0]
 8008212:	464b      	mov	r3, r9
 8008214:	eb45 0303 	adc.w	r3, r5, r3
 8008218:	607b      	str	r3, [r7, #4]
 800821a:	f04f 0200 	mov.w	r2, #0
 800821e:	f04f 0300 	mov.w	r3, #0
 8008222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008226:	4629      	mov	r1, r5
 8008228:	028b      	lsls	r3, r1, #10
 800822a:	4621      	mov	r1, r4
 800822c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008230:	4621      	mov	r1, r4
 8008232:	028a      	lsls	r2, r1, #10
 8008234:	4610      	mov	r0, r2
 8008236:	4619      	mov	r1, r3
 8008238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800823a:	2200      	movs	r2, #0
 800823c:	61bb      	str	r3, [r7, #24]
 800823e:	61fa      	str	r2, [r7, #28]
 8008240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008244:	f7f8 fd20 	bl	8000c88 <__aeabi_uldivmod>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4613      	mov	r3, r2
 800824e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008250:	4b0b      	ldr	r3, [pc, #44]	; (8008280 <HAL_RCC_GetSysClockFreq+0x200>)
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	0c1b      	lsrs	r3, r3, #16
 8008256:	f003 0303 	and.w	r3, r3, #3
 800825a:	3301      	adds	r3, #1
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008260:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008264:	fbb2 f3f3 	udiv	r3, r2, r3
 8008268:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800826a:	e002      	b.n	8008272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800826c:	4b05      	ldr	r3, [pc, #20]	; (8008284 <HAL_RCC_GetSysClockFreq+0x204>)
 800826e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008274:	4618      	mov	r0, r3
 8008276:	3750      	adds	r7, #80	; 0x50
 8008278:	46bd      	mov	sp, r7
 800827a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800827e:	bf00      	nop
 8008280:	40023800 	.word	0x40023800
 8008284:	00f42400 	.word	0x00f42400
 8008288:	007a1200 	.word	0x007a1200

0800828c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008290:	4b03      	ldr	r3, [pc, #12]	; (80082a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008292:	681b      	ldr	r3, [r3, #0]
}
 8008294:	4618      	mov	r0, r3
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	2000000c 	.word	0x2000000c

080082a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80082a8:	f7ff fff0 	bl	800828c <HAL_RCC_GetHCLKFreq>
 80082ac:	4602      	mov	r2, r0
 80082ae:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	0a9b      	lsrs	r3, r3, #10
 80082b4:	f003 0307 	and.w	r3, r3, #7
 80082b8:	4903      	ldr	r1, [pc, #12]	; (80082c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082ba:	5ccb      	ldrb	r3, [r1, r3]
 80082bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	40023800 	.word	0x40023800
 80082c8:	08015520 	.word	0x08015520

080082cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80082d0:	f7ff ffdc 	bl	800828c <HAL_RCC_GetHCLKFreq>
 80082d4:	4602      	mov	r2, r0
 80082d6:	4b05      	ldr	r3, [pc, #20]	; (80082ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	0b5b      	lsrs	r3, r3, #13
 80082dc:	f003 0307 	and.w	r3, r3, #7
 80082e0:	4903      	ldr	r1, [pc, #12]	; (80082f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082e2:	5ccb      	ldrb	r3, [r1, r3]
 80082e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	40023800 	.word	0x40023800
 80082f0:	08015520 	.word	0x08015520

080082f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e07b      	b.n	80083fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830a:	2b00      	cmp	r3, #0
 800830c:	d108      	bne.n	8008320 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008316:	d009      	beq.n	800832c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	61da      	str	r2, [r3, #28]
 800831e:	e005      	b.n	800832c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d106      	bne.n	800834c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7fb fc4e 	bl	8003be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008362:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008374:	431a      	orrs	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800837e:	431a      	orrs	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	431a      	orrs	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	431a      	orrs	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800839c:	431a      	orrs	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083a6:	431a      	orrs	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b0:	ea42 0103 	orr.w	r1, r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	430a      	orrs	r2, r1
 80083c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	0c1b      	lsrs	r3, r3, #16
 80083ca:	f003 0104 	and.w	r1, r3, #4
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	f003 0210 	and.w	r2, r3, #16
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69da      	ldr	r2, [r3, #28]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b088      	sub	sp, #32
 800840a:	af00      	add	r7, sp, #0
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	603b      	str	r3, [r7, #0]
 8008412:	4613      	mov	r3, r2
 8008414:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008420:	2b01      	cmp	r3, #1
 8008422:	d101      	bne.n	8008428 <HAL_SPI_Transmit+0x22>
 8008424:	2302      	movs	r3, #2
 8008426:	e126      	b.n	8008676 <HAL_SPI_Transmit+0x270>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008430:	f7fd f84c 	bl	80054cc <HAL_GetTick>
 8008434:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008436:	88fb      	ldrh	r3, [r7, #6]
 8008438:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b01      	cmp	r3, #1
 8008444:	d002      	beq.n	800844c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008446:	2302      	movs	r3, #2
 8008448:	77fb      	strb	r3, [r7, #31]
    goto error;
 800844a:	e10b      	b.n	8008664 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d002      	beq.n	8008458 <HAL_SPI_Transmit+0x52>
 8008452:	88fb      	ldrh	r3, [r7, #6]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d102      	bne.n	800845e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800845c:	e102      	b.n	8008664 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2203      	movs	r2, #3
 8008462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	88fa      	ldrh	r2, [r7, #6]
 8008476:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	88fa      	ldrh	r2, [r7, #6]
 800847c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084a4:	d10f      	bne.n	80084c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d0:	2b40      	cmp	r3, #64	; 0x40
 80084d2:	d007      	beq.n	80084e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ec:	d14b      	bne.n	8008586 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <HAL_SPI_Transmit+0xf6>
 80084f6:	8afb      	ldrh	r3, [r7, #22]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d13e      	bne.n	800857a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008500:	881a      	ldrh	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850c:	1c9a      	adds	r2, r3, #2
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008516:	b29b      	uxth	r3, r3
 8008518:	3b01      	subs	r3, #1
 800851a:	b29a      	uxth	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008520:	e02b      	b.n	800857a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f003 0302 	and.w	r3, r3, #2
 800852c:	2b02      	cmp	r3, #2
 800852e:	d112      	bne.n	8008556 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008534:	881a      	ldrh	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008540:	1c9a      	adds	r2, r3, #2
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800854a:	b29b      	uxth	r3, r3
 800854c:	3b01      	subs	r3, #1
 800854e:	b29a      	uxth	r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	86da      	strh	r2, [r3, #54]	; 0x36
 8008554:	e011      	b.n	800857a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008556:	f7fc ffb9 	bl	80054cc <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	683a      	ldr	r2, [r7, #0]
 8008562:	429a      	cmp	r2, r3
 8008564:	d803      	bhi.n	800856e <HAL_SPI_Transmit+0x168>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856c:	d102      	bne.n	8008574 <HAL_SPI_Transmit+0x16e>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d102      	bne.n	800857a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008578:	e074      	b.n	8008664 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800857e:	b29b      	uxth	r3, r3
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1ce      	bne.n	8008522 <HAL_SPI_Transmit+0x11c>
 8008584:	e04c      	b.n	8008620 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <HAL_SPI_Transmit+0x18e>
 800858e:	8afb      	ldrh	r3, [r7, #22]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d140      	bne.n	8008616 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	330c      	adds	r3, #12
 800859e:	7812      	ldrb	r2, [r2, #0]
 80085a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	3b01      	subs	r3, #1
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80085ba:	e02c      	b.n	8008616 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f003 0302 	and.w	r3, r3, #2
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d113      	bne.n	80085f2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	330c      	adds	r3, #12
 80085d4:	7812      	ldrb	r2, [r2, #0]
 80085d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	3b01      	subs	r3, #1
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80085f0:	e011      	b.n	8008616 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085f2:	f7fc ff6b 	bl	80054cc <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d803      	bhi.n	800860a <HAL_SPI_Transmit+0x204>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008608:	d102      	bne.n	8008610 <HAL_SPI_Transmit+0x20a>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d102      	bne.n	8008616 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008614:	e026      	b.n	8008664 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800861a:	b29b      	uxth	r3, r3
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1cd      	bne.n	80085bc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 fa63 	bl	8008af0 <SPI_EndRxTxTransaction>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2220      	movs	r2, #32
 8008634:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10a      	bne.n	8008654 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800863e:	2300      	movs	r3, #0
 8008640:	613b      	str	r3, [r7, #16]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	613b      	str	r3, [r7, #16]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	613b      	str	r3, [r7, #16]
 8008652:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008658:	2b00      	cmp	r3, #0
 800865a:	d002      	beq.n	8008662 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	77fb      	strb	r3, [r7, #31]
 8008660:	e000      	b.n	8008664 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008662:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008674:	7ffb      	ldrb	r3, [r7, #31]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3720      	adds	r7, #32
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b08c      	sub	sp, #48	; 0x30
 8008682:	af00      	add	r7, sp, #0
 8008684:	60f8      	str	r0, [r7, #12]
 8008686:	60b9      	str	r1, [r7, #8]
 8008688:	607a      	str	r2, [r7, #4]
 800868a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800868c:	2301      	movs	r3, #1
 800868e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800869c:	2b01      	cmp	r3, #1
 800869e:	d101      	bne.n	80086a4 <HAL_SPI_TransmitReceive+0x26>
 80086a0:	2302      	movs	r3, #2
 80086a2:	e18a      	b.n	80089ba <HAL_SPI_TransmitReceive+0x33c>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086ac:	f7fc ff0e 	bl	80054cc <HAL_GetTick>
 80086b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80086c2:	887b      	ldrh	r3, [r7, #2]
 80086c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80086c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d00f      	beq.n	80086ee <HAL_SPI_TransmitReceive+0x70>
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086d4:	d107      	bne.n	80086e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d103      	bne.n	80086e6 <HAL_SPI_TransmitReceive+0x68>
 80086de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086e2:	2b04      	cmp	r3, #4
 80086e4:	d003      	beq.n	80086ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80086e6:	2302      	movs	r3, #2
 80086e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80086ec:	e15b      	b.n	80089a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d005      	beq.n	8008700 <HAL_SPI_TransmitReceive+0x82>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <HAL_SPI_TransmitReceive+0x82>
 80086fa:	887b      	ldrh	r3, [r7, #2]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d103      	bne.n	8008708 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008706:	e14e      	b.n	80089a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b04      	cmp	r3, #4
 8008712:	d003      	beq.n	800871c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2205      	movs	r2, #5
 8008718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	887a      	ldrh	r2, [r7, #2]
 800872c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	887a      	ldrh	r2, [r7, #2]
 8008732:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	887a      	ldrh	r2, [r7, #2]
 800873e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	887a      	ldrh	r2, [r7, #2]
 8008744:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875c:	2b40      	cmp	r3, #64	; 0x40
 800875e:	d007      	beq.n	8008770 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800876e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008778:	d178      	bne.n	800886c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d002      	beq.n	8008788 <HAL_SPI_TransmitReceive+0x10a>
 8008782:	8b7b      	ldrh	r3, [r7, #26]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d166      	bne.n	8008856 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878c:	881a      	ldrh	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008798:	1c9a      	adds	r2, r3, #2
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	3b01      	subs	r3, #1
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087ac:	e053      	b.n	8008856 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d11b      	bne.n	80087f4 <HAL_SPI_TransmitReceive+0x176>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d016      	beq.n	80087f4 <HAL_SPI_TransmitReceive+0x176>
 80087c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d113      	bne.n	80087f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d0:	881a      	ldrh	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087dc:	1c9a      	adds	r2, r3, #2
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80087f0:	2300      	movs	r3, #0
 80087f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d119      	bne.n	8008836 <HAL_SPI_TransmitReceive+0x1b8>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008806:	b29b      	uxth	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	d014      	beq.n	8008836 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	b292      	uxth	r2, r2
 8008818:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	1c9a      	adds	r2, r3, #2
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008828:	b29b      	uxth	r3, r3
 800882a:	3b01      	subs	r3, #1
 800882c:	b29a      	uxth	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008832:	2301      	movs	r3, #1
 8008834:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008836:	f7fc fe49 	bl	80054cc <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008842:	429a      	cmp	r2, r3
 8008844:	d807      	bhi.n	8008856 <HAL_SPI_TransmitReceive+0x1d8>
 8008846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884c:	d003      	beq.n	8008856 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008854:	e0a7      	b.n	80089a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800885a:	b29b      	uxth	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1a6      	bne.n	80087ae <HAL_SPI_TransmitReceive+0x130>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008864:	b29b      	uxth	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1a1      	bne.n	80087ae <HAL_SPI_TransmitReceive+0x130>
 800886a:	e07c      	b.n	8008966 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d002      	beq.n	800887a <HAL_SPI_TransmitReceive+0x1fc>
 8008874:	8b7b      	ldrh	r3, [r7, #26]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d16b      	bne.n	8008952 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	330c      	adds	r3, #12
 8008884:	7812      	ldrb	r2, [r2, #0]
 8008886:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888c:	1c5a      	adds	r2, r3, #1
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008896:	b29b      	uxth	r3, r3
 8008898:	3b01      	subs	r3, #1
 800889a:	b29a      	uxth	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088a0:	e057      	b.n	8008952 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	f003 0302 	and.w	r3, r3, #2
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d11c      	bne.n	80088ea <HAL_SPI_TransmitReceive+0x26c>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d017      	beq.n	80088ea <HAL_SPI_TransmitReceive+0x26c>
 80088ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d114      	bne.n	80088ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	330c      	adds	r3, #12
 80088ca:	7812      	ldrb	r2, [r2, #0]
 80088cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088dc:	b29b      	uxth	r3, r3
 80088de:	3b01      	subs	r3, #1
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d119      	bne.n	800892c <HAL_SPI_TransmitReceive+0x2ae>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d014      	beq.n	800892c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890c:	b2d2      	uxtb	r2, r2
 800890e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800891e:	b29b      	uxth	r3, r3
 8008920:	3b01      	subs	r3, #1
 8008922:	b29a      	uxth	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008928:	2301      	movs	r3, #1
 800892a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800892c:	f7fc fdce 	bl	80054cc <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008938:	429a      	cmp	r2, r3
 800893a:	d803      	bhi.n	8008944 <HAL_SPI_TransmitReceive+0x2c6>
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008942:	d102      	bne.n	800894a <HAL_SPI_TransmitReceive+0x2cc>
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	2b00      	cmp	r3, #0
 8008948:	d103      	bne.n	8008952 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008950:	e029      	b.n	80089a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008956:	b29b      	uxth	r3, r3
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1a2      	bne.n	80088a2 <HAL_SPI_TransmitReceive+0x224>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008960:	b29b      	uxth	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d19d      	bne.n	80088a2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008968:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f000 f8c0 	bl	8008af0 <SPI_EndRxTxTransaction>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d006      	beq.n	8008984 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2220      	movs	r2, #32
 8008980:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008982:	e010      	b.n	80089a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10b      	bne.n	80089a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	617b      	str	r3, [r7, #20]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	e000      	b.n	80089a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80089a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3730      	adds	r7, #48	; 0x30
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089d0:	b2db      	uxtb	r3, r3
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
	...

080089e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b088      	sub	sp, #32
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	4613      	mov	r3, r2
 80089ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80089f0:	f7fc fd6c 	bl	80054cc <HAL_GetTick>
 80089f4:	4602      	mov	r2, r0
 80089f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f8:	1a9b      	subs	r3, r3, r2
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	4413      	add	r3, r2
 80089fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a00:	f7fc fd64 	bl	80054cc <HAL_GetTick>
 8008a04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a06:	4b39      	ldr	r3, [pc, #228]	; (8008aec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	015b      	lsls	r3, r3, #5
 8008a0c:	0d1b      	lsrs	r3, r3, #20
 8008a0e:	69fa      	ldr	r2, [r7, #28]
 8008a10:	fb02 f303 	mul.w	r3, r2, r3
 8008a14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a16:	e054      	b.n	8008ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1e:	d050      	beq.n	8008ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a20:	f7fc fd54 	bl	80054cc <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	69fa      	ldr	r2, [r7, #28]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d902      	bls.n	8008a36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d13d      	bne.n	8008ab2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a4e:	d111      	bne.n	8008a74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a58:	d004      	beq.n	8008a64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a62:	d107      	bne.n	8008a74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a7c:	d10f      	bne.n	8008a9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e017      	b.n	8008ae2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d101      	bne.n	8008abc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	4013      	ands	r3, r2
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	bf0c      	ite	eq
 8008ad2:	2301      	moveq	r3, #1
 8008ad4:	2300      	movne	r3, #0
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	461a      	mov	r2, r3
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d19b      	bne.n	8008a18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3720      	adds	r7, #32
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	2000000c 	.word	0x2000000c

08008af0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b088      	sub	sp, #32
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008afc:	4b1b      	ldr	r3, [pc, #108]	; (8008b6c <SPI_EndRxTxTransaction+0x7c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a1b      	ldr	r2, [pc, #108]	; (8008b70 <SPI_EndRxTxTransaction+0x80>)
 8008b02:	fba2 2303 	umull	r2, r3, r2, r3
 8008b06:	0d5b      	lsrs	r3, r3, #21
 8008b08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b0c:	fb02 f303 	mul.w	r3, r2, r3
 8008b10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b1a:	d112      	bne.n	8008b42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2200      	movs	r2, #0
 8008b24:	2180      	movs	r1, #128	; 0x80
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f7ff ff5a 	bl	80089e0 <SPI_WaitFlagStateUntilTimeout>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d016      	beq.n	8008b60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b36:	f043 0220 	orr.w	r2, r3, #32
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e00f      	b.n	8008b62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00a      	beq.n	8008b5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b58:	2b80      	cmp	r3, #128	; 0x80
 8008b5a:	d0f2      	beq.n	8008b42 <SPI_EndRxTxTransaction+0x52>
 8008b5c:	e000      	b.n	8008b60 <SPI_EndRxTxTransaction+0x70>
        break;
 8008b5e:	bf00      	nop
  }

  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3718      	adds	r7, #24
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	2000000c 	.word	0x2000000c
 8008b70:	165e9f81 	.word	0x165e9f81

08008b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e041      	b.n	8008c0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d106      	bne.n	8008ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7fb f86c 	bl	8003c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	f000 fe54 	bl	8009860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
	...

08008c14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d001      	beq.n	8008c2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e046      	b.n	8008cba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a23      	ldr	r2, [pc, #140]	; (8008cc8 <HAL_TIM_Base_Start+0xb4>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d022      	beq.n	8008c84 <HAL_TIM_Base_Start+0x70>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c46:	d01d      	beq.n	8008c84 <HAL_TIM_Base_Start+0x70>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a1f      	ldr	r2, [pc, #124]	; (8008ccc <HAL_TIM_Base_Start+0xb8>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d018      	beq.n	8008c84 <HAL_TIM_Base_Start+0x70>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a1e      	ldr	r2, [pc, #120]	; (8008cd0 <HAL_TIM_Base_Start+0xbc>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d013      	beq.n	8008c84 <HAL_TIM_Base_Start+0x70>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a1c      	ldr	r2, [pc, #112]	; (8008cd4 <HAL_TIM_Base_Start+0xc0>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d00e      	beq.n	8008c84 <HAL_TIM_Base_Start+0x70>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a1b      	ldr	r2, [pc, #108]	; (8008cd8 <HAL_TIM_Base_Start+0xc4>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d009      	beq.n	8008c84 <HAL_TIM_Base_Start+0x70>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a19      	ldr	r2, [pc, #100]	; (8008cdc <HAL_TIM_Base_Start+0xc8>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d004      	beq.n	8008c84 <HAL_TIM_Base_Start+0x70>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a18      	ldr	r2, [pc, #96]	; (8008ce0 <HAL_TIM_Base_Start+0xcc>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d111      	bne.n	8008ca8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f003 0307 	and.w	r3, r3, #7
 8008c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2b06      	cmp	r3, #6
 8008c94:	d010      	beq.n	8008cb8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f042 0201 	orr.w	r2, r2, #1
 8008ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ca6:	e007      	b.n	8008cb8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f042 0201 	orr.w	r2, r2, #1
 8008cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	40010000 	.word	0x40010000
 8008ccc:	40000400 	.word	0x40000400
 8008cd0:	40000800 	.word	0x40000800
 8008cd4:	40000c00 	.word	0x40000c00
 8008cd8:	40010400 	.word	0x40010400
 8008cdc:	40014000 	.word	0x40014000
 8008ce0:	40001800 	.word	0x40001800

08008ce4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d001      	beq.n	8008cfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e04e      	b.n	8008d9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68da      	ldr	r2, [r3, #12]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f042 0201 	orr.w	r2, r2, #1
 8008d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a23      	ldr	r2, [pc, #140]	; (8008da8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d022      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x80>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d26:	d01d      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x80>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a1f      	ldr	r2, [pc, #124]	; (8008dac <HAL_TIM_Base_Start_IT+0xc8>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d018      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x80>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a1e      	ldr	r2, [pc, #120]	; (8008db0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d013      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x80>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a1c      	ldr	r2, [pc, #112]	; (8008db4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d00e      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x80>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a1b      	ldr	r2, [pc, #108]	; (8008db8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d009      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x80>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a19      	ldr	r2, [pc, #100]	; (8008dbc <HAL_TIM_Base_Start_IT+0xd8>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d004      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x80>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a18      	ldr	r2, [pc, #96]	; (8008dc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d111      	bne.n	8008d88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2b06      	cmp	r3, #6
 8008d74:	d010      	beq.n	8008d98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f042 0201 	orr.w	r2, r2, #1
 8008d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d86:	e007      	b.n	8008d98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f042 0201 	orr.w	r2, r2, #1
 8008d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	40010000 	.word	0x40010000
 8008dac:	40000400 	.word	0x40000400
 8008db0:	40000800 	.word	0x40000800
 8008db4:	40000c00 	.word	0x40000c00
 8008db8:	40010400 	.word	0x40010400
 8008dbc:	40014000 	.word	0x40014000
 8008dc0:	40001800 	.word	0x40001800

08008dc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e041      	b.n	8008e5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d106      	bne.n	8008df0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f839 	bl	8008e62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2202      	movs	r2, #2
 8008df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	3304      	adds	r3, #4
 8008e00:	4619      	mov	r1, r3
 8008e02:	4610      	mov	r0, r2
 8008e04:	f000 fd2c 	bl	8009860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b083      	sub	sp, #12
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e6a:	bf00      	nop
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
	...

08008e78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d109      	bne.n	8008e9c <HAL_TIM_PWM_Start+0x24>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	bf14      	ite	ne
 8008e94:	2301      	movne	r3, #1
 8008e96:	2300      	moveq	r3, #0
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	e022      	b.n	8008ee2 <HAL_TIM_PWM_Start+0x6a>
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2b04      	cmp	r3, #4
 8008ea0:	d109      	bne.n	8008eb6 <HAL_TIM_PWM_Start+0x3e>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	bf14      	ite	ne
 8008eae:	2301      	movne	r3, #1
 8008eb0:	2300      	moveq	r3, #0
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	e015      	b.n	8008ee2 <HAL_TIM_PWM_Start+0x6a>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d109      	bne.n	8008ed0 <HAL_TIM_PWM_Start+0x58>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	bf14      	ite	ne
 8008ec8:	2301      	movne	r3, #1
 8008eca:	2300      	moveq	r3, #0
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	e008      	b.n	8008ee2 <HAL_TIM_PWM_Start+0x6a>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	bf14      	ite	ne
 8008edc:	2301      	movne	r3, #1
 8008ede:	2300      	moveq	r3, #0
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e07c      	b.n	8008fe4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d104      	bne.n	8008efa <HAL_TIM_PWM_Start+0x82>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ef8:	e013      	b.n	8008f22 <HAL_TIM_PWM_Start+0xaa>
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b04      	cmp	r3, #4
 8008efe:	d104      	bne.n	8008f0a <HAL_TIM_PWM_Start+0x92>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2202      	movs	r2, #2
 8008f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f08:	e00b      	b.n	8008f22 <HAL_TIM_PWM_Start+0xaa>
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b08      	cmp	r3, #8
 8008f0e:	d104      	bne.n	8008f1a <HAL_TIM_PWM_Start+0xa2>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2202      	movs	r2, #2
 8008f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f18:	e003      	b.n	8008f22 <HAL_TIM_PWM_Start+0xaa>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2202      	movs	r2, #2
 8008f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2201      	movs	r2, #1
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f001 f93e 	bl	800a1ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a2d      	ldr	r2, [pc, #180]	; (8008fec <HAL_TIM_PWM_Start+0x174>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d004      	beq.n	8008f44 <HAL_TIM_PWM_Start+0xcc>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a2c      	ldr	r2, [pc, #176]	; (8008ff0 <HAL_TIM_PWM_Start+0x178>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d101      	bne.n	8008f48 <HAL_TIM_PWM_Start+0xd0>
 8008f44:	2301      	movs	r3, #1
 8008f46:	e000      	b.n	8008f4a <HAL_TIM_PWM_Start+0xd2>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d007      	beq.n	8008f5e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a22      	ldr	r2, [pc, #136]	; (8008fec <HAL_TIM_PWM_Start+0x174>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d022      	beq.n	8008fae <HAL_TIM_PWM_Start+0x136>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f70:	d01d      	beq.n	8008fae <HAL_TIM_PWM_Start+0x136>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a1f      	ldr	r2, [pc, #124]	; (8008ff4 <HAL_TIM_PWM_Start+0x17c>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d018      	beq.n	8008fae <HAL_TIM_PWM_Start+0x136>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a1d      	ldr	r2, [pc, #116]	; (8008ff8 <HAL_TIM_PWM_Start+0x180>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d013      	beq.n	8008fae <HAL_TIM_PWM_Start+0x136>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a1c      	ldr	r2, [pc, #112]	; (8008ffc <HAL_TIM_PWM_Start+0x184>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d00e      	beq.n	8008fae <HAL_TIM_PWM_Start+0x136>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a16      	ldr	r2, [pc, #88]	; (8008ff0 <HAL_TIM_PWM_Start+0x178>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d009      	beq.n	8008fae <HAL_TIM_PWM_Start+0x136>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a18      	ldr	r2, [pc, #96]	; (8009000 <HAL_TIM_PWM_Start+0x188>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d004      	beq.n	8008fae <HAL_TIM_PWM_Start+0x136>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a16      	ldr	r2, [pc, #88]	; (8009004 <HAL_TIM_PWM_Start+0x18c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d111      	bne.n	8008fd2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f003 0307 	and.w	r3, r3, #7
 8008fb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b06      	cmp	r3, #6
 8008fbe:	d010      	beq.n	8008fe2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f042 0201 	orr.w	r2, r2, #1
 8008fce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fd0:	e007      	b.n	8008fe2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f042 0201 	orr.w	r2, r2, #1
 8008fe0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	40010000 	.word	0x40010000
 8008ff0:	40010400 	.word	0x40010400
 8008ff4:	40000400 	.word	0x40000400
 8008ff8:	40000800 	.word	0x40000800
 8008ffc:	40000c00 	.word	0x40000c00
 8009000:	40014000 	.word	0x40014000
 8009004:	40001800 	.word	0x40001800

08009008 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e041      	b.n	800909e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d106      	bne.n	8009034 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f839 	bl	80090a6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2202      	movs	r2, #2
 8009038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3304      	adds	r3, #4
 8009044:	4619      	mov	r1, r3
 8009046:	4610      	mov	r0, r2
 8009048:	f000 fc0a 	bl	8009860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b083      	sub	sp, #12
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80090ae:	bf00      	nop
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	f003 0302 	and.w	r3, r3, #2
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d122      	bne.n	8009116 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d11b      	bne.n	8009116 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f06f 0202 	mvn.w	r2, #2
 80090e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	f003 0303 	and.w	r3, r3, #3
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7f9 f957 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 8009102:	e005      	b.n	8009110 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fb8d 	bl	8009824 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fb94 	bl	8009838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	f003 0304 	and.w	r3, r3, #4
 8009120:	2b04      	cmp	r3, #4
 8009122:	d122      	bne.n	800916a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	f003 0304 	and.w	r3, r3, #4
 800912e:	2b04      	cmp	r3, #4
 8009130:	d11b      	bne.n	800916a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f06f 0204 	mvn.w	r2, #4
 800913a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2202      	movs	r2, #2
 8009140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800914c:	2b00      	cmp	r3, #0
 800914e:	d003      	beq.n	8009158 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7f9 f92d 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 8009156:	e005      	b.n	8009164 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fb63 	bl	8009824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fb6a 	bl	8009838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	f003 0308 	and.w	r3, r3, #8
 8009174:	2b08      	cmp	r3, #8
 8009176:	d122      	bne.n	80091be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	f003 0308 	and.w	r3, r3, #8
 8009182:	2b08      	cmp	r3, #8
 8009184:	d11b      	bne.n	80091be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f06f 0208 	mvn.w	r2, #8
 800918e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2204      	movs	r2, #4
 8009194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	f003 0303 	and.w	r3, r3, #3
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d003      	beq.n	80091ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7f9 f903 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 80091aa:	e005      	b.n	80091b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fb39 	bl	8009824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fb40 	bl	8009838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	f003 0310 	and.w	r3, r3, #16
 80091c8:	2b10      	cmp	r3, #16
 80091ca:	d122      	bne.n	8009212 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	f003 0310 	and.w	r3, r3, #16
 80091d6:	2b10      	cmp	r3, #16
 80091d8:	d11b      	bne.n	8009212 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f06f 0210 	mvn.w	r2, #16
 80091e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2208      	movs	r2, #8
 80091e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d003      	beq.n	8009200 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7f9 f8d9 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 80091fe:	e005      	b.n	800920c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fb0f 	bl	8009824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fb16 	bl	8009838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b01      	cmp	r3, #1
 800921e:	d10e      	bne.n	800923e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	2b01      	cmp	r3, #1
 800922c:	d107      	bne.n	800923e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f06f 0201 	mvn.w	r2, #1
 8009236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7f9 f95b 	bl	80024f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009248:	2b80      	cmp	r3, #128	; 0x80
 800924a:	d10e      	bne.n	800926a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009256:	2b80      	cmp	r3, #128	; 0x80
 8009258:	d107      	bne.n	800926a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 f84d 	bl	800a304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009274:	2b40      	cmp	r3, #64	; 0x40
 8009276:	d10e      	bne.n	8009296 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009282:	2b40      	cmp	r3, #64	; 0x40
 8009284:	d107      	bne.n	8009296 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800928e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fadb 	bl	800984c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	f003 0320 	and.w	r3, r3, #32
 80092a0:	2b20      	cmp	r3, #32
 80092a2:	d10e      	bne.n	80092c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f003 0320 	and.w	r3, r3, #32
 80092ae:	2b20      	cmp	r3, #32
 80092b0:	d107      	bne.n	80092c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f06f 0220 	mvn.w	r2, #32
 80092ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f001 f817 	bl	800a2f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092c2:	bf00      	nop
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b086      	sub	sp, #24
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	60b9      	str	r1, [r7, #8]
 80092d4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d101      	bne.n	80092e8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80092e4:	2302      	movs	r3, #2
 80092e6:	e088      	b.n	80093fa <HAL_TIM_IC_ConfigChannel+0x130>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d11b      	bne.n	800932e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	6819      	ldr	r1, [r3, #0]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	f000 fd8d 	bl	8009e24 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	699a      	ldr	r2, [r3, #24]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f022 020c 	bic.w	r2, r2, #12
 8009318:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6999      	ldr	r1, [r3, #24]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	689a      	ldr	r2, [r3, #8]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	430a      	orrs	r2, r1
 800932a:	619a      	str	r2, [r3, #24]
 800932c:	e060      	b.n	80093f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b04      	cmp	r3, #4
 8009332:	d11c      	bne.n	800936e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6818      	ldr	r0, [r3, #0]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	6819      	ldr	r1, [r3, #0]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	f000 fe11 	bl	8009f6a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	699a      	ldr	r2, [r3, #24]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009356:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6999      	ldr	r1, [r3, #24]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	021a      	lsls	r2, r3, #8
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	430a      	orrs	r2, r1
 800936a:	619a      	str	r2, [r3, #24]
 800936c:	e040      	b.n	80093f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b08      	cmp	r3, #8
 8009372:	d11b      	bne.n	80093ac <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6818      	ldr	r0, [r3, #0]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	6819      	ldr	r1, [r3, #0]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	f000 fe5e 	bl	800a044 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	69da      	ldr	r2, [r3, #28]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f022 020c 	bic.w	r2, r2, #12
 8009396:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	69d9      	ldr	r1, [r3, #28]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	689a      	ldr	r2, [r3, #8]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	61da      	str	r2, [r3, #28]
 80093aa:	e021      	b.n	80093f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b0c      	cmp	r3, #12
 80093b0:	d11c      	bne.n	80093ec <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6818      	ldr	r0, [r3, #0]
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	6819      	ldr	r1, [r3, #0]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	f000 fe7b 	bl	800a0bc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	69da      	ldr	r2, [r3, #28]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80093d4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	69d9      	ldr	r1, [r3, #28]
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	021a      	lsls	r2, r3, #8
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	61da      	str	r2, [r3, #28]
 80093ea:	e001      	b.n	80093f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3718      	adds	r7, #24
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800941a:	2b01      	cmp	r3, #1
 800941c:	d101      	bne.n	8009422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800941e:	2302      	movs	r3, #2
 8009420:	e0ae      	b.n	8009580 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b0c      	cmp	r3, #12
 800942e:	f200 809f 	bhi.w	8009570 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009432:	a201      	add	r2, pc, #4	; (adr r2, 8009438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009438:	0800946d 	.word	0x0800946d
 800943c:	08009571 	.word	0x08009571
 8009440:	08009571 	.word	0x08009571
 8009444:	08009571 	.word	0x08009571
 8009448:	080094ad 	.word	0x080094ad
 800944c:	08009571 	.word	0x08009571
 8009450:	08009571 	.word	0x08009571
 8009454:	08009571 	.word	0x08009571
 8009458:	080094ef 	.word	0x080094ef
 800945c:	08009571 	.word	0x08009571
 8009460:	08009571 	.word	0x08009571
 8009464:	08009571 	.word	0x08009571
 8009468:	0800952f 	.word	0x0800952f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68b9      	ldr	r1, [r7, #8]
 8009472:	4618      	mov	r0, r3
 8009474:	f000 fa94 	bl	80099a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	699a      	ldr	r2, [r3, #24]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f042 0208 	orr.w	r2, r2, #8
 8009486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	699a      	ldr	r2, [r3, #24]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f022 0204 	bic.w	r2, r2, #4
 8009496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6999      	ldr	r1, [r3, #24]
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	691a      	ldr	r2, [r3, #16]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	430a      	orrs	r2, r1
 80094a8:	619a      	str	r2, [r3, #24]
      break;
 80094aa:	e064      	b.n	8009576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68b9      	ldr	r1, [r7, #8]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 fae4 	bl	8009a80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	699a      	ldr	r2, [r3, #24]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	699a      	ldr	r2, [r3, #24]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6999      	ldr	r1, [r3, #24]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	021a      	lsls	r2, r3, #8
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	430a      	orrs	r2, r1
 80094ea:	619a      	str	r2, [r3, #24]
      break;
 80094ec:	e043      	b.n	8009576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68b9      	ldr	r1, [r7, #8]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 fb39 	bl	8009b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	69da      	ldr	r2, [r3, #28]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f042 0208 	orr.w	r2, r2, #8
 8009508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	69da      	ldr	r2, [r3, #28]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f022 0204 	bic.w	r2, r2, #4
 8009518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	69d9      	ldr	r1, [r3, #28]
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	691a      	ldr	r2, [r3, #16]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	430a      	orrs	r2, r1
 800952a:	61da      	str	r2, [r3, #28]
      break;
 800952c:	e023      	b.n	8009576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68b9      	ldr	r1, [r7, #8]
 8009534:	4618      	mov	r0, r3
 8009536:	f000 fb8d 	bl	8009c54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	69da      	ldr	r2, [r3, #28]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	69da      	ldr	r2, [r3, #28]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	69d9      	ldr	r1, [r3, #28]
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	021a      	lsls	r2, r3, #8
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	61da      	str	r2, [r3, #28]
      break;
 800956e:	e002      	b.n	8009576 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	75fb      	strb	r3, [r7, #23]
      break;
 8009574:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800957e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3718      	adds	r7, #24
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800959c:	2b01      	cmp	r3, #1
 800959e:	d101      	bne.n	80095a4 <HAL_TIM_ConfigClockSource+0x1c>
 80095a0:	2302      	movs	r3, #2
 80095a2:	e0b4      	b.n	800970e <HAL_TIM_ConfigClockSource+0x186>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2202      	movs	r2, #2
 80095b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80095c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095dc:	d03e      	beq.n	800965c <HAL_TIM_ConfigClockSource+0xd4>
 80095de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095e2:	f200 8087 	bhi.w	80096f4 <HAL_TIM_ConfigClockSource+0x16c>
 80095e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ea:	f000 8086 	beq.w	80096fa <HAL_TIM_ConfigClockSource+0x172>
 80095ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095f2:	d87f      	bhi.n	80096f4 <HAL_TIM_ConfigClockSource+0x16c>
 80095f4:	2b70      	cmp	r3, #112	; 0x70
 80095f6:	d01a      	beq.n	800962e <HAL_TIM_ConfigClockSource+0xa6>
 80095f8:	2b70      	cmp	r3, #112	; 0x70
 80095fa:	d87b      	bhi.n	80096f4 <HAL_TIM_ConfigClockSource+0x16c>
 80095fc:	2b60      	cmp	r3, #96	; 0x60
 80095fe:	d050      	beq.n	80096a2 <HAL_TIM_ConfigClockSource+0x11a>
 8009600:	2b60      	cmp	r3, #96	; 0x60
 8009602:	d877      	bhi.n	80096f4 <HAL_TIM_ConfigClockSource+0x16c>
 8009604:	2b50      	cmp	r3, #80	; 0x50
 8009606:	d03c      	beq.n	8009682 <HAL_TIM_ConfigClockSource+0xfa>
 8009608:	2b50      	cmp	r3, #80	; 0x50
 800960a:	d873      	bhi.n	80096f4 <HAL_TIM_ConfigClockSource+0x16c>
 800960c:	2b40      	cmp	r3, #64	; 0x40
 800960e:	d058      	beq.n	80096c2 <HAL_TIM_ConfigClockSource+0x13a>
 8009610:	2b40      	cmp	r3, #64	; 0x40
 8009612:	d86f      	bhi.n	80096f4 <HAL_TIM_ConfigClockSource+0x16c>
 8009614:	2b30      	cmp	r3, #48	; 0x30
 8009616:	d064      	beq.n	80096e2 <HAL_TIM_ConfigClockSource+0x15a>
 8009618:	2b30      	cmp	r3, #48	; 0x30
 800961a:	d86b      	bhi.n	80096f4 <HAL_TIM_ConfigClockSource+0x16c>
 800961c:	2b20      	cmp	r3, #32
 800961e:	d060      	beq.n	80096e2 <HAL_TIM_ConfigClockSource+0x15a>
 8009620:	2b20      	cmp	r3, #32
 8009622:	d867      	bhi.n	80096f4 <HAL_TIM_ConfigClockSource+0x16c>
 8009624:	2b00      	cmp	r3, #0
 8009626:	d05c      	beq.n	80096e2 <HAL_TIM_ConfigClockSource+0x15a>
 8009628:	2b10      	cmp	r3, #16
 800962a:	d05a      	beq.n	80096e2 <HAL_TIM_ConfigClockSource+0x15a>
 800962c:	e062      	b.n	80096f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	6899      	ldr	r1, [r3, #8]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	f000 fd95 	bl	800a16c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	609a      	str	r2, [r3, #8]
      break;
 800965a:	e04f      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6818      	ldr	r0, [r3, #0]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	6899      	ldr	r1, [r3, #8]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f000 fd7e 	bl	800a16c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689a      	ldr	r2, [r3, #8]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800967e:	609a      	str	r2, [r3, #8]
      break;
 8009680:	e03c      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6818      	ldr	r0, [r3, #0]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	6859      	ldr	r1, [r3, #4]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	461a      	mov	r2, r3
 8009690:	f000 fc3c 	bl	8009f0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2150      	movs	r1, #80	; 0x50
 800969a:	4618      	mov	r0, r3
 800969c:	f000 fd4b 	bl	800a136 <TIM_ITRx_SetConfig>
      break;
 80096a0:	e02c      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	6859      	ldr	r1, [r3, #4]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	461a      	mov	r2, r3
 80096b0:	f000 fc98 	bl	8009fe4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2160      	movs	r1, #96	; 0x60
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 fd3b 	bl	800a136 <TIM_ITRx_SetConfig>
      break;
 80096c0:	e01c      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	6859      	ldr	r1, [r3, #4]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	461a      	mov	r2, r3
 80096d0:	f000 fc1c 	bl	8009f0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2140      	movs	r1, #64	; 0x40
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 fd2b 	bl	800a136 <TIM_ITRx_SetConfig>
      break;
 80096e0:	e00c      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4619      	mov	r1, r3
 80096ec:	4610      	mov	r0, r2
 80096ee:	f000 fd22 	bl	800a136 <TIM_ITRx_SetConfig>
      break;
 80096f2:	e003      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	73fb      	strb	r3, [r7, #15]
      break;
 80096f8:	e000      	b.n	80096fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80096fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800970c:	7bfb      	ldrb	r3, [r7, #15]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009726:	2b01      	cmp	r3, #1
 8009728:	d101      	bne.n	800972e <HAL_TIM_SlaveConfigSynchro+0x18>
 800972a:	2302      	movs	r3, #2
 800972c:	e031      	b.n	8009792 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2202      	movs	r2, #2
 800973a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 fadd 	bl	8009d00 <TIM_SlaveTimer_SetConfig>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d009      	beq.n	8009760 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e018      	b.n	8009792 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68da      	ldr	r2, [r3, #12]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800976e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68da      	ldr	r2, [r3, #12]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800977e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
	...

0800979c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80097a6:	2300      	movs	r3, #0
 80097a8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b0c      	cmp	r3, #12
 80097ae:	d831      	bhi.n	8009814 <HAL_TIM_ReadCapturedValue+0x78>
 80097b0:	a201      	add	r2, pc, #4	; (adr r2, 80097b8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80097b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b6:	bf00      	nop
 80097b8:	080097ed 	.word	0x080097ed
 80097bc:	08009815 	.word	0x08009815
 80097c0:	08009815 	.word	0x08009815
 80097c4:	08009815 	.word	0x08009815
 80097c8:	080097f7 	.word	0x080097f7
 80097cc:	08009815 	.word	0x08009815
 80097d0:	08009815 	.word	0x08009815
 80097d4:	08009815 	.word	0x08009815
 80097d8:	08009801 	.word	0x08009801
 80097dc:	08009815 	.word	0x08009815
 80097e0:	08009815 	.word	0x08009815
 80097e4:	08009815 	.word	0x08009815
 80097e8:	0800980b 	.word	0x0800980b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f2:	60fb      	str	r3, [r7, #12]

      break;
 80097f4:	e00f      	b.n	8009816 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fc:	60fb      	str	r3, [r7, #12]

      break;
 80097fe:	e00a      	b.n	8009816 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009806:	60fb      	str	r3, [r7, #12]

      break;
 8009808:	e005      	b.n	8009816 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009810:	60fb      	str	r3, [r7, #12]

      break;
 8009812:	e000      	b.n	8009816 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009814:	bf00      	nop
  }

  return tmpreg;
 8009816:	68fb      	ldr	r3, [r7, #12]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a40      	ldr	r2, [pc, #256]	; (8009974 <TIM_Base_SetConfig+0x114>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d013      	beq.n	80098a0 <TIM_Base_SetConfig+0x40>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800987e:	d00f      	beq.n	80098a0 <TIM_Base_SetConfig+0x40>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a3d      	ldr	r2, [pc, #244]	; (8009978 <TIM_Base_SetConfig+0x118>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d00b      	beq.n	80098a0 <TIM_Base_SetConfig+0x40>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a3c      	ldr	r2, [pc, #240]	; (800997c <TIM_Base_SetConfig+0x11c>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d007      	beq.n	80098a0 <TIM_Base_SetConfig+0x40>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a3b      	ldr	r2, [pc, #236]	; (8009980 <TIM_Base_SetConfig+0x120>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d003      	beq.n	80098a0 <TIM_Base_SetConfig+0x40>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a3a      	ldr	r2, [pc, #232]	; (8009984 <TIM_Base_SetConfig+0x124>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d108      	bne.n	80098b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a2f      	ldr	r2, [pc, #188]	; (8009974 <TIM_Base_SetConfig+0x114>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d02b      	beq.n	8009912 <TIM_Base_SetConfig+0xb2>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098c0:	d027      	beq.n	8009912 <TIM_Base_SetConfig+0xb2>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a2c      	ldr	r2, [pc, #176]	; (8009978 <TIM_Base_SetConfig+0x118>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d023      	beq.n	8009912 <TIM_Base_SetConfig+0xb2>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a2b      	ldr	r2, [pc, #172]	; (800997c <TIM_Base_SetConfig+0x11c>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d01f      	beq.n	8009912 <TIM_Base_SetConfig+0xb2>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a2a      	ldr	r2, [pc, #168]	; (8009980 <TIM_Base_SetConfig+0x120>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d01b      	beq.n	8009912 <TIM_Base_SetConfig+0xb2>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a29      	ldr	r2, [pc, #164]	; (8009984 <TIM_Base_SetConfig+0x124>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d017      	beq.n	8009912 <TIM_Base_SetConfig+0xb2>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a28      	ldr	r2, [pc, #160]	; (8009988 <TIM_Base_SetConfig+0x128>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d013      	beq.n	8009912 <TIM_Base_SetConfig+0xb2>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a27      	ldr	r2, [pc, #156]	; (800998c <TIM_Base_SetConfig+0x12c>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d00f      	beq.n	8009912 <TIM_Base_SetConfig+0xb2>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a26      	ldr	r2, [pc, #152]	; (8009990 <TIM_Base_SetConfig+0x130>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d00b      	beq.n	8009912 <TIM_Base_SetConfig+0xb2>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a25      	ldr	r2, [pc, #148]	; (8009994 <TIM_Base_SetConfig+0x134>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d007      	beq.n	8009912 <TIM_Base_SetConfig+0xb2>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a24      	ldr	r2, [pc, #144]	; (8009998 <TIM_Base_SetConfig+0x138>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d003      	beq.n	8009912 <TIM_Base_SetConfig+0xb2>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a23      	ldr	r2, [pc, #140]	; (800999c <TIM_Base_SetConfig+0x13c>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d108      	bne.n	8009924 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	4313      	orrs	r3, r2
 8009922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	4313      	orrs	r3, r2
 8009930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	689a      	ldr	r2, [r3, #8]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a0a      	ldr	r2, [pc, #40]	; (8009974 <TIM_Base_SetConfig+0x114>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d003      	beq.n	8009958 <TIM_Base_SetConfig+0xf8>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a0c      	ldr	r2, [pc, #48]	; (8009984 <TIM_Base_SetConfig+0x124>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d103      	bne.n	8009960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	691a      	ldr	r2, [r3, #16]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	615a      	str	r2, [r3, #20]
}
 8009966:	bf00      	nop
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	40010000 	.word	0x40010000
 8009978:	40000400 	.word	0x40000400
 800997c:	40000800 	.word	0x40000800
 8009980:	40000c00 	.word	0x40000c00
 8009984:	40010400 	.word	0x40010400
 8009988:	40014000 	.word	0x40014000
 800998c:	40014400 	.word	0x40014400
 8009990:	40014800 	.word	0x40014800
 8009994:	40001800 	.word	0x40001800
 8009998:	40001c00 	.word	0x40001c00
 800999c:	40002000 	.word	0x40002000

080099a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	f023 0201 	bic.w	r2, r3, #1
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f023 0303 	bic.w	r3, r3, #3
 80099d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	4313      	orrs	r3, r2
 80099e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f023 0302 	bic.w	r3, r3, #2
 80099e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a20      	ldr	r2, [pc, #128]	; (8009a78 <TIM_OC1_SetConfig+0xd8>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d003      	beq.n	8009a04 <TIM_OC1_SetConfig+0x64>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a1f      	ldr	r2, [pc, #124]	; (8009a7c <TIM_OC1_SetConfig+0xdc>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d10c      	bne.n	8009a1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f023 0308 	bic.w	r3, r3, #8
 8009a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	f023 0304 	bic.w	r3, r3, #4
 8009a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4a15      	ldr	r2, [pc, #84]	; (8009a78 <TIM_OC1_SetConfig+0xd8>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d003      	beq.n	8009a2e <TIM_OC1_SetConfig+0x8e>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a14      	ldr	r2, [pc, #80]	; (8009a7c <TIM_OC1_SetConfig+0xdc>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d111      	bne.n	8009a52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	621a      	str	r2, [r3, #32]
}
 8009a6c:	bf00      	nop
 8009a6e:	371c      	adds	r7, #28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr
 8009a78:	40010000 	.word	0x40010000
 8009a7c:	40010400 	.word	0x40010400

08009a80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	f023 0210 	bic.w	r2, r3, #16
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	021b      	lsls	r3, r3, #8
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f023 0320 	bic.w	r3, r3, #32
 8009aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	011b      	lsls	r3, r3, #4
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a22      	ldr	r2, [pc, #136]	; (8009b64 <TIM_OC2_SetConfig+0xe4>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d003      	beq.n	8009ae8 <TIM_OC2_SetConfig+0x68>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a21      	ldr	r2, [pc, #132]	; (8009b68 <TIM_OC2_SetConfig+0xe8>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d10d      	bne.n	8009b04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	011b      	lsls	r3, r3, #4
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a17      	ldr	r2, [pc, #92]	; (8009b64 <TIM_OC2_SetConfig+0xe4>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d003      	beq.n	8009b14 <TIM_OC2_SetConfig+0x94>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a16      	ldr	r2, [pc, #88]	; (8009b68 <TIM_OC2_SetConfig+0xe8>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d113      	bne.n	8009b3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	695b      	ldr	r3, [r3, #20]
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	693a      	ldr	r2, [r7, #16]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	621a      	str	r2, [r3, #32]
}
 8009b56:	bf00      	nop
 8009b58:	371c      	adds	r7, #28
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	40010000 	.word	0x40010000
 8009b68:	40010400 	.word	0x40010400

08009b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b087      	sub	sp, #28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f023 0303 	bic.w	r3, r3, #3
 8009ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	021b      	lsls	r3, r3, #8
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a21      	ldr	r2, [pc, #132]	; (8009c4c <TIM_OC3_SetConfig+0xe0>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d003      	beq.n	8009bd2 <TIM_OC3_SetConfig+0x66>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a20      	ldr	r2, [pc, #128]	; (8009c50 <TIM_OC3_SetConfig+0xe4>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d10d      	bne.n	8009bee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	021b      	lsls	r3, r3, #8
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a16      	ldr	r2, [pc, #88]	; (8009c4c <TIM_OC3_SetConfig+0xe0>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d003      	beq.n	8009bfe <TIM_OC3_SetConfig+0x92>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a15      	ldr	r2, [pc, #84]	; (8009c50 <TIM_OC3_SetConfig+0xe4>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d113      	bne.n	8009c26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	011b      	lsls	r3, r3, #4
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	011b      	lsls	r3, r3, #4
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	693a      	ldr	r2, [r7, #16]
 8009c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	621a      	str	r2, [r3, #32]
}
 8009c40:	bf00      	nop
 8009c42:	371c      	adds	r7, #28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	40010000 	.word	0x40010000
 8009c50:	40010400 	.word	0x40010400

08009c54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b087      	sub	sp, #28
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	021b      	lsls	r3, r3, #8
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	031b      	lsls	r3, r3, #12
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a12      	ldr	r2, [pc, #72]	; (8009cf8 <TIM_OC4_SetConfig+0xa4>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d003      	beq.n	8009cbc <TIM_OC4_SetConfig+0x68>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a11      	ldr	r2, [pc, #68]	; (8009cfc <TIM_OC4_SetConfig+0xa8>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d109      	bne.n	8009cd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	695b      	ldr	r3, [r3, #20]
 8009cc8:	019b      	lsls	r3, r3, #6
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	621a      	str	r2, [r3, #32]
}
 8009cea:	bf00      	nop
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	40010000 	.word	0x40010000
 8009cfc:	40010400 	.word	0x40010400

08009d00 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d1c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	f023 0307 	bic.w	r3, r3, #7
 8009d2e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	2b70      	cmp	r3, #112	; 0x70
 8009d48:	d01a      	beq.n	8009d80 <TIM_SlaveTimer_SetConfig+0x80>
 8009d4a:	2b70      	cmp	r3, #112	; 0x70
 8009d4c:	d860      	bhi.n	8009e10 <TIM_SlaveTimer_SetConfig+0x110>
 8009d4e:	2b60      	cmp	r3, #96	; 0x60
 8009d50:	d054      	beq.n	8009dfc <TIM_SlaveTimer_SetConfig+0xfc>
 8009d52:	2b60      	cmp	r3, #96	; 0x60
 8009d54:	d85c      	bhi.n	8009e10 <TIM_SlaveTimer_SetConfig+0x110>
 8009d56:	2b50      	cmp	r3, #80	; 0x50
 8009d58:	d046      	beq.n	8009de8 <TIM_SlaveTimer_SetConfig+0xe8>
 8009d5a:	2b50      	cmp	r3, #80	; 0x50
 8009d5c:	d858      	bhi.n	8009e10 <TIM_SlaveTimer_SetConfig+0x110>
 8009d5e:	2b40      	cmp	r3, #64	; 0x40
 8009d60:	d019      	beq.n	8009d96 <TIM_SlaveTimer_SetConfig+0x96>
 8009d62:	2b40      	cmp	r3, #64	; 0x40
 8009d64:	d854      	bhi.n	8009e10 <TIM_SlaveTimer_SetConfig+0x110>
 8009d66:	2b30      	cmp	r3, #48	; 0x30
 8009d68:	d055      	beq.n	8009e16 <TIM_SlaveTimer_SetConfig+0x116>
 8009d6a:	2b30      	cmp	r3, #48	; 0x30
 8009d6c:	d850      	bhi.n	8009e10 <TIM_SlaveTimer_SetConfig+0x110>
 8009d6e:	2b20      	cmp	r3, #32
 8009d70:	d051      	beq.n	8009e16 <TIM_SlaveTimer_SetConfig+0x116>
 8009d72:	2b20      	cmp	r3, #32
 8009d74:	d84c      	bhi.n	8009e10 <TIM_SlaveTimer_SetConfig+0x110>
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d04d      	beq.n	8009e16 <TIM_SlaveTimer_SetConfig+0x116>
 8009d7a:	2b10      	cmp	r3, #16
 8009d7c:	d04b      	beq.n	8009e16 <TIM_SlaveTimer_SetConfig+0x116>
 8009d7e:	e047      	b.n	8009e10 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6818      	ldr	r0, [r3, #0]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	68d9      	ldr	r1, [r3, #12]
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	689a      	ldr	r2, [r3, #8]
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	f000 f9ec 	bl	800a16c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8009d94:	e040      	b.n	8009e18 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b05      	cmp	r3, #5
 8009d9c:	d101      	bne.n	8009da2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e03b      	b.n	8009e1a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6a1b      	ldr	r3, [r3, #32]
 8009da8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	6a1a      	ldr	r2, [r3, #32]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f022 0201 	bic.w	r2, r2, #1
 8009db8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dc8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	011b      	lsls	r3, r3, #4
 8009dd0:	68ba      	ldr	r2, [r7, #8]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	621a      	str	r2, [r3, #32]
      break;
 8009de6:	e017      	b.n	8009e18 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6818      	ldr	r0, [r3, #0]
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	6899      	ldr	r1, [r3, #8]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	461a      	mov	r2, r3
 8009df6:	f000 f889 	bl	8009f0c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009dfa:	e00d      	b.n	8009e18 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6818      	ldr	r0, [r3, #0]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	6899      	ldr	r1, [r3, #8]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	f000 f8eb 	bl	8009fe4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009e0e:	e003      	b.n	8009e18 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	75fb      	strb	r3, [r7, #23]
      break;
 8009e14:	e000      	b.n	8009e18 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009e16:	bf00      	nop
  }

  return status;
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3718      	adds	r7, #24
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
	...

08009e24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b087      	sub	sp, #28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6a1b      	ldr	r3, [r3, #32]
 8009e36:	f023 0201 	bic.w	r2, r3, #1
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6a1b      	ldr	r3, [r3, #32]
 8009e48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	4a28      	ldr	r2, [pc, #160]	; (8009ef0 <TIM_TI1_SetConfig+0xcc>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d01b      	beq.n	8009e8a <TIM_TI1_SetConfig+0x66>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e58:	d017      	beq.n	8009e8a <TIM_TI1_SetConfig+0x66>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4a25      	ldr	r2, [pc, #148]	; (8009ef4 <TIM_TI1_SetConfig+0xd0>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d013      	beq.n	8009e8a <TIM_TI1_SetConfig+0x66>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	4a24      	ldr	r2, [pc, #144]	; (8009ef8 <TIM_TI1_SetConfig+0xd4>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d00f      	beq.n	8009e8a <TIM_TI1_SetConfig+0x66>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	4a23      	ldr	r2, [pc, #140]	; (8009efc <TIM_TI1_SetConfig+0xd8>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d00b      	beq.n	8009e8a <TIM_TI1_SetConfig+0x66>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	4a22      	ldr	r2, [pc, #136]	; (8009f00 <TIM_TI1_SetConfig+0xdc>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d007      	beq.n	8009e8a <TIM_TI1_SetConfig+0x66>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	4a21      	ldr	r2, [pc, #132]	; (8009f04 <TIM_TI1_SetConfig+0xe0>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d003      	beq.n	8009e8a <TIM_TI1_SetConfig+0x66>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	4a20      	ldr	r2, [pc, #128]	; (8009f08 <TIM_TI1_SetConfig+0xe4>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d101      	bne.n	8009e8e <TIM_TI1_SetConfig+0x6a>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e000      	b.n	8009e90 <TIM_TI1_SetConfig+0x6c>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d008      	beq.n	8009ea6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f023 0303 	bic.w	r3, r3, #3
 8009e9a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	617b      	str	r3, [r7, #20]
 8009ea4:	e003      	b.n	8009eae <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f043 0301 	orr.w	r3, r3, #1
 8009eac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009eb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	011b      	lsls	r3, r3, #4
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f023 030a 	bic.w	r3, r3, #10
 8009ec8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	f003 030a 	and.w	r3, r3, #10
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	697a      	ldr	r2, [r7, #20]
 8009eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	621a      	str	r2, [r3, #32]
}
 8009ee2:	bf00      	nop
 8009ee4:	371c      	adds	r7, #28
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	40010000 	.word	0x40010000
 8009ef4:	40000400 	.word	0x40000400
 8009ef8:	40000800 	.word	0x40000800
 8009efc:	40000c00 	.word	0x40000c00
 8009f00:	40010400 	.word	0x40010400
 8009f04:	40014000 	.word	0x40014000
 8009f08:	40001800 	.word	0x40001800

08009f0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b087      	sub	sp, #28
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6a1b      	ldr	r3, [r3, #32]
 8009f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	f023 0201 	bic.w	r2, r3, #1
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	011b      	lsls	r3, r3, #4
 8009f3c:	693a      	ldr	r2, [r7, #16]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f023 030a 	bic.w	r3, r3, #10
 8009f48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	693a      	ldr	r2, [r7, #16]
 8009f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	621a      	str	r2, [r3, #32]
}
 8009f5e:	bf00      	nop
 8009f60:	371c      	adds	r7, #28
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009f6a:	b480      	push	{r7}
 8009f6c:	b087      	sub	sp, #28
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	607a      	str	r2, [r7, #4]
 8009f76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6a1b      	ldr	r3, [r3, #32]
 8009f7c:	f023 0210 	bic.w	r2, r3, #16
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	021b      	lsls	r3, r3, #8
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	031b      	lsls	r3, r3, #12
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fbc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	011b      	lsls	r3, r3, #4
 8009fc2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	697a      	ldr	r2, [r7, #20]
 8009fd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	621a      	str	r2, [r3, #32]
}
 8009fd8:	bf00      	nop
 8009fda:	371c      	adds	r7, #28
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b087      	sub	sp, #28
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6a1b      	ldr	r3, [r3, #32]
 8009ff4:	f023 0210 	bic.w	r2, r3, #16
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	699b      	ldr	r3, [r3, #24]
 800a000:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a00e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	031b      	lsls	r3, r3, #12
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	4313      	orrs	r3, r2
 800a018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a020:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	011b      	lsls	r3, r3, #4
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	4313      	orrs	r3, r2
 800a02a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	621a      	str	r2, [r3, #32]
}
 800a038:	bf00      	nop
 800a03a:	371c      	adds	r7, #28
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a044:	b480      	push	{r7}
 800a046:	b087      	sub	sp, #28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	69db      	ldr	r3, [r3, #28]
 800a062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6a1b      	ldr	r3, [r3, #32]
 800a068:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f023 0303 	bic.w	r3, r3, #3
 800a070:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4313      	orrs	r3, r2
 800a078:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a080:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	011b      	lsls	r3, r3, #4
 800a086:	b2db      	uxtb	r3, r3
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a094:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	021b      	lsls	r3, r3, #8
 800a09a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	621a      	str	r2, [r3, #32]
}
 800a0b0:	bf00      	nop
 800a0b2:	371c      	adds	r7, #28
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b087      	sub	sp, #28
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
 800a0c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6a1b      	ldr	r3, [r3, #32]
 800a0e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	021b      	lsls	r3, r3, #8
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	031b      	lsls	r3, r3, #12
 800a100:	b29b      	uxth	r3, r3
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	4313      	orrs	r3, r2
 800a106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a10e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	031b      	lsls	r3, r3, #12
 800a114:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	621a      	str	r2, [r3, #32]
}
 800a12a:	bf00      	nop
 800a12c:	371c      	adds	r7, #28
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a136:	b480      	push	{r7}
 800a138:	b085      	sub	sp, #20
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a14c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	4313      	orrs	r3, r2
 800a154:	f043 0307 	orr.w	r3, r3, #7
 800a158:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	609a      	str	r2, [r3, #8]
}
 800a160:	bf00      	nop
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b087      	sub	sp, #28
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	021a      	lsls	r2, r3, #8
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	431a      	orrs	r2, r3
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	4313      	orrs	r3, r2
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	4313      	orrs	r3, r2
 800a198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	609a      	str	r2, [r3, #8]
}
 800a1a0:	bf00      	nop
 800a1a2:	371c      	adds	r7, #28
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b087      	sub	sp, #28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	f003 031f 	and.w	r3, r3, #31
 800a1be:	2201      	movs	r2, #1
 800a1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6a1a      	ldr	r2, [r3, #32]
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	43db      	mvns	r3, r3
 800a1ce:	401a      	ands	r2, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6a1a      	ldr	r2, [r3, #32]
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	f003 031f 	and.w	r3, r3, #31
 800a1de:	6879      	ldr	r1, [r7, #4]
 800a1e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1e4:	431a      	orrs	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	621a      	str	r2, [r3, #32]
}
 800a1ea:	bf00      	nop
 800a1ec:	371c      	adds	r7, #28
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
	...

0800a1f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d101      	bne.n	800a210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a20c:	2302      	movs	r3, #2
 800a20e:	e05a      	b.n	800a2c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	4313      	orrs	r3, r2
 800a240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a21      	ldr	r2, [pc, #132]	; (800a2d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d022      	beq.n	800a29a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a25c:	d01d      	beq.n	800a29a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a1d      	ldr	r2, [pc, #116]	; (800a2d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d018      	beq.n	800a29a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a1b      	ldr	r2, [pc, #108]	; (800a2dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d013      	beq.n	800a29a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a1a      	ldr	r2, [pc, #104]	; (800a2e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d00e      	beq.n	800a29a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a18      	ldr	r2, [pc, #96]	; (800a2e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d009      	beq.n	800a29a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a17      	ldr	r2, [pc, #92]	; (800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d004      	beq.n	800a29a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a15      	ldr	r2, [pc, #84]	; (800a2ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d10c      	bne.n	800a2b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	68ba      	ldr	r2, [r7, #8]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	40010000 	.word	0x40010000
 800a2d8:	40000400 	.word	0x40000400
 800a2dc:	40000800 	.word	0x40000800
 800a2e0:	40000c00 	.word	0x40000c00
 800a2e4:	40010400 	.word	0x40010400
 800a2e8:	40014000 	.word	0x40014000
 800a2ec:	40001800 	.word	0x40001800

0800a2f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e03f      	b.n	800a3aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a330:	b2db      	uxtb	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	d106      	bne.n	800a344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f7f9 fdc0 	bl	8003ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2224      	movs	r2, #36	; 0x24
 800a348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68da      	ldr	r2, [r3, #12]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a35a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 ff11 	bl	800b184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	691a      	ldr	r2, [r3, #16]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	695a      	ldr	r2, [r3, #20]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68da      	ldr	r2, [r3, #12]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2220      	movs	r2, #32
 800a39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b085      	sub	sp, #20
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	60f8      	str	r0, [r7, #12]
 800a3ba:	60b9      	str	r1, [r7, #8]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b20      	cmp	r3, #32
 800a3ca:	d130      	bne.n	800a42e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <HAL_UART_Transmit_IT+0x26>
 800a3d2:	88fb      	ldrh	r3, [r7, #6]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e029      	b.n	800a430 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d101      	bne.n	800a3ea <HAL_UART_Transmit_IT+0x38>
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	e022      	b.n	800a430 <HAL_UART_Transmit_IT+0x7e>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	88fa      	ldrh	r2, [r7, #6]
 800a3fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	88fa      	ldrh	r2, [r7, #6]
 800a402:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2221      	movs	r2, #33	; 0x21
 800a40e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68da      	ldr	r2, [r3, #12]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a428:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	e000      	b.n	800a430 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a42e:	2302      	movs	r3, #2
  }
}
 800a430:	4618      	mov	r0, r3
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	4613      	mov	r3, r2
 800a448:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b20      	cmp	r3, #32
 800a454:	d11d      	bne.n	800a492 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <HAL_UART_Receive_IT+0x26>
 800a45c:	88fb      	ldrh	r3, [r7, #6]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e016      	b.n	800a494 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d101      	bne.n	800a474 <HAL_UART_Receive_IT+0x38>
 800a470:	2302      	movs	r3, #2
 800a472:	e00f      	b.n	800a494 <HAL_UART_Receive_IT+0x58>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a482:	88fb      	ldrh	r3, [r7, #6]
 800a484:	461a      	mov	r2, r3
 800a486:	68b9      	ldr	r1, [r7, #8]
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f000 fbdd 	bl	800ac48 <UART_Start_Receive_IT>
 800a48e:	4603      	mov	r3, r0
 800a490:	e000      	b.n	800a494 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a492:	2302      	movs	r3, #2
  }
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b20      	cmp	r3, #32
 800a4b4:	d11d      	bne.n	800a4f2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d002      	beq.n	800a4c2 <HAL_UART_Receive_DMA+0x26>
 800a4bc:	88fb      	ldrh	r3, [r7, #6]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e016      	b.n	800a4f4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d101      	bne.n	800a4d4 <HAL_UART_Receive_DMA+0x38>
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	e00f      	b.n	800a4f4 <HAL_UART_Receive_DMA+0x58>
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a4e2:	88fb      	ldrh	r3, [r7, #6]
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	68b9      	ldr	r1, [r7, #8]
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f000 fbeb 	bl	800acc4 <UART_Start_Receive_DMA>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	e000      	b.n	800a4f4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a4f2:	2302      	movs	r3, #2
  }
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b0ba      	sub	sp, #232	; 0xe8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a522:	2300      	movs	r3, #0
 800a524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a528:	2300      	movs	r3, #0
 800a52a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a52e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a532:	f003 030f 	and.w	r3, r3, #15
 800a536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a53a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10f      	bne.n	800a562 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a546:	f003 0320 	and.w	r3, r3, #32
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d009      	beq.n	800a562 <HAL_UART_IRQHandler+0x66>
 800a54e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a552:	f003 0320 	and.w	r3, r3, #32
 800a556:	2b00      	cmp	r3, #0
 800a558:	d003      	beq.n	800a562 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fd57 	bl	800b00e <UART_Receive_IT>
      return;
 800a560:	e256      	b.n	800aa10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a566:	2b00      	cmp	r3, #0
 800a568:	f000 80de 	beq.w	800a728 <HAL_UART_IRQHandler+0x22c>
 800a56c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a570:	f003 0301 	and.w	r3, r3, #1
 800a574:	2b00      	cmp	r3, #0
 800a576:	d106      	bne.n	800a586 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a57c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a580:	2b00      	cmp	r3, #0
 800a582:	f000 80d1 	beq.w	800a728 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00b      	beq.n	800a5aa <HAL_UART_IRQHandler+0xae>
 800a592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d005      	beq.n	800a5aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a2:	f043 0201 	orr.w	r2, r3, #1
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5ae:	f003 0304 	and.w	r3, r3, #4
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00b      	beq.n	800a5ce <HAL_UART_IRQHandler+0xd2>
 800a5b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d005      	beq.n	800a5ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c6:	f043 0202 	orr.w	r2, r3, #2
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5d2:	f003 0302 	and.w	r3, r3, #2
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00b      	beq.n	800a5f2 <HAL_UART_IRQHandler+0xf6>
 800a5da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5de:	f003 0301 	and.w	r3, r3, #1
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d005      	beq.n	800a5f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ea:	f043 0204 	orr.w	r2, r3, #4
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a5f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5f6:	f003 0308 	and.w	r3, r3, #8
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d011      	beq.n	800a622 <HAL_UART_IRQHandler+0x126>
 800a5fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a602:	f003 0320 	and.w	r3, r3, #32
 800a606:	2b00      	cmp	r3, #0
 800a608:	d105      	bne.n	800a616 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a60a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a60e:	f003 0301 	and.w	r3, r3, #1
 800a612:	2b00      	cmp	r3, #0
 800a614:	d005      	beq.n	800a622 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61a:	f043 0208 	orr.w	r2, r3, #8
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a626:	2b00      	cmp	r3, #0
 800a628:	f000 81ed 	beq.w	800aa06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a62c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a630:	f003 0320 	and.w	r3, r3, #32
 800a634:	2b00      	cmp	r3, #0
 800a636:	d008      	beq.n	800a64a <HAL_UART_IRQHandler+0x14e>
 800a638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a63c:	f003 0320 	and.w	r3, r3, #32
 800a640:	2b00      	cmp	r3, #0
 800a642:	d002      	beq.n	800a64a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fce2 	bl	800b00e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	695b      	ldr	r3, [r3, #20]
 800a650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a654:	2b40      	cmp	r3, #64	; 0x40
 800a656:	bf0c      	ite	eq
 800a658:	2301      	moveq	r3, #1
 800a65a:	2300      	movne	r3, #0
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a666:	f003 0308 	and.w	r3, r3, #8
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d103      	bne.n	800a676 <HAL_UART_IRQHandler+0x17a>
 800a66e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a672:	2b00      	cmp	r3, #0
 800a674:	d04f      	beq.n	800a716 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 fbea 	bl	800ae50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a686:	2b40      	cmp	r3, #64	; 0x40
 800a688:	d141      	bne.n	800a70e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	3314      	adds	r3, #20
 800a690:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a694:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a698:	e853 3f00 	ldrex	r3, [r3]
 800a69c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a6a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a6a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	3314      	adds	r3, #20
 800a6b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a6b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a6ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a6c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a6c6:	e841 2300 	strex	r3, r2, [r1]
 800a6ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a6ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d1d9      	bne.n	800a68a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d013      	beq.n	800a706 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e2:	4a7d      	ldr	r2, [pc, #500]	; (800a8d8 <HAL_UART_IRQHandler+0x3dc>)
 800a6e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fb fc08 	bl	8005f00 <HAL_DMA_Abort_IT>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d016      	beq.n	800a724 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a700:	4610      	mov	r0, r2
 800a702:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a704:	e00e      	b.n	800a724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 f990 	bl	800aa2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a70c:	e00a      	b.n	800a724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f98c 	bl	800aa2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a714:	e006      	b.n	800a724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f988 	bl	800aa2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a722:	e170      	b.n	800aa06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a724:	bf00      	nop
    return;
 800a726:	e16e      	b.n	800aa06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	f040 814a 	bne.w	800a9c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a736:	f003 0310 	and.w	r3, r3, #16
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f000 8143 	beq.w	800a9c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a744:	f003 0310 	and.w	r3, r3, #16
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f000 813c 	beq.w	800a9c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a74e:	2300      	movs	r3, #0
 800a750:	60bb      	str	r3, [r7, #8]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	60bb      	str	r3, [r7, #8]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	60bb      	str	r3, [r7, #8]
 800a762:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a76e:	2b40      	cmp	r3, #64	; 0x40
 800a770:	f040 80b4 	bne.w	800a8dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a780:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a784:	2b00      	cmp	r3, #0
 800a786:	f000 8140 	beq.w	800aa0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a78e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a792:	429a      	cmp	r2, r3
 800a794:	f080 8139 	bcs.w	800aa0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a79e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a4:	69db      	ldr	r3, [r3, #28]
 800a7a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7aa:	f000 8088 	beq.w	800a8be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	330c      	adds	r3, #12
 800a7b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a7bc:	e853 3f00 	ldrex	r3, [r3]
 800a7c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a7c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a7c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	330c      	adds	r3, #12
 800a7d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a7da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a7de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a7e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a7ea:	e841 2300 	strex	r3, r2, [r1]
 800a7ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a7f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1d9      	bne.n	800a7ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3314      	adds	r3, #20
 800a800:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a804:	e853 3f00 	ldrex	r3, [r3]
 800a808:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a80a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a80c:	f023 0301 	bic.w	r3, r3, #1
 800a810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	3314      	adds	r3, #20
 800a81a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a81e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a822:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a824:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a826:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a82a:	e841 2300 	strex	r3, r2, [r1]
 800a82e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1e1      	bne.n	800a7fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3314      	adds	r3, #20
 800a83c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a840:	e853 3f00 	ldrex	r3, [r3]
 800a844:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a84c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3314      	adds	r3, #20
 800a856:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a85a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a85c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a860:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a862:	e841 2300 	strex	r3, r2, [r1]
 800a866:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1e3      	bne.n	800a836 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2220      	movs	r2, #32
 800a872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	330c      	adds	r3, #12
 800a882:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a886:	e853 3f00 	ldrex	r3, [r3]
 800a88a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a88c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a88e:	f023 0310 	bic.w	r3, r3, #16
 800a892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	330c      	adds	r3, #12
 800a89c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a8a0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a8a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a8a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8a8:	e841 2300 	strex	r3, r2, [r1]
 800a8ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a8ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1e3      	bne.n	800a87c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7fb fab1 	bl	8005e20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f8b6 	bl	800aa40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a8d4:	e099      	b.n	800aa0a <HAL_UART_IRQHandler+0x50e>
 800a8d6:	bf00      	nop
 800a8d8:	0800af17 	.word	0x0800af17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f000 808b 	beq.w	800aa0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a8f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 8086 	beq.w	800aa0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	330c      	adds	r3, #12
 800a908:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90c:	e853 3f00 	ldrex	r3, [r3]
 800a910:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a914:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	330c      	adds	r3, #12
 800a922:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a926:	647a      	str	r2, [r7, #68]	; 0x44
 800a928:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a92c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a92e:	e841 2300 	strex	r3, r2, [r1]
 800a932:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1e3      	bne.n	800a902 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3314      	adds	r3, #20
 800a940:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a944:	e853 3f00 	ldrex	r3, [r3]
 800a948:	623b      	str	r3, [r7, #32]
   return(result);
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	f023 0301 	bic.w	r3, r3, #1
 800a950:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3314      	adds	r3, #20
 800a95a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a95e:	633a      	str	r2, [r7, #48]	; 0x30
 800a960:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a966:	e841 2300 	strex	r3, r2, [r1]
 800a96a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1e3      	bne.n	800a93a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2220      	movs	r2, #32
 800a976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	330c      	adds	r3, #12
 800a986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	e853 3f00 	ldrex	r3, [r3]
 800a98e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f023 0310 	bic.w	r3, r3, #16
 800a996:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	330c      	adds	r3, #12
 800a9a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a9a4:	61fa      	str	r2, [r7, #28]
 800a9a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a8:	69b9      	ldr	r1, [r7, #24]
 800a9aa:	69fa      	ldr	r2, [r7, #28]
 800a9ac:	e841 2300 	strex	r3, r2, [r1]
 800a9b0:	617b      	str	r3, [r7, #20]
   return(result);
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1e3      	bne.n	800a980 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a9b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a9bc:	4619      	mov	r1, r3
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f83e 	bl	800aa40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a9c4:	e023      	b.n	800aa0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a9c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d009      	beq.n	800a9e6 <HAL_UART_IRQHandler+0x4ea>
 800a9d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 faad 	bl	800af3e <UART_Transmit_IT>
    return;
 800a9e4:	e014      	b.n	800aa10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a9e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00e      	beq.n	800aa10 <HAL_UART_IRQHandler+0x514>
 800a9f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d008      	beq.n	800aa10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 faed 	bl	800afde <UART_EndTransmit_IT>
    return;
 800aa04:	e004      	b.n	800aa10 <HAL_UART_IRQHandler+0x514>
    return;
 800aa06:	bf00      	nop
 800aa08:	e002      	b.n	800aa10 <HAL_UART_IRQHandler+0x514>
      return;
 800aa0a:	bf00      	nop
 800aa0c:	e000      	b.n	800aa10 <HAL_UART_IRQHandler+0x514>
      return;
 800aa0e:	bf00      	nop
  }
}
 800aa10:	37e8      	adds	r7, #232	; 0xe8
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop

0800aa18 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b09c      	sub	sp, #112	; 0x70
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa64:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d172      	bne.n	800ab5a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800aa74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa76:	2200      	movs	r2, #0
 800aa78:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	330c      	adds	r3, #12
 800aa80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa84:	e853 3f00 	ldrex	r3, [r3]
 800aa88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa90:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	330c      	adds	r3, #12
 800aa98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa9a:	65ba      	str	r2, [r7, #88]	; 0x58
 800aa9c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aaa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aaa2:	e841 2300 	strex	r3, r2, [r1]
 800aaa6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aaa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1e5      	bne.n	800aa7a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3314      	adds	r3, #20
 800aab4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab8:	e853 3f00 	ldrex	r3, [r3]
 800aabc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac0:	f023 0301 	bic.w	r3, r3, #1
 800aac4:	667b      	str	r3, [r7, #100]	; 0x64
 800aac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	3314      	adds	r3, #20
 800aacc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aace:	647a      	str	r2, [r7, #68]	; 0x44
 800aad0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aad4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aad6:	e841 2300 	strex	r3, r2, [r1]
 800aada:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aadc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e5      	bne.n	800aaae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3314      	adds	r3, #20
 800aae8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaec:	e853 3f00 	ldrex	r3, [r3]
 800aaf0:	623b      	str	r3, [r7, #32]
   return(result);
 800aaf2:	6a3b      	ldr	r3, [r7, #32]
 800aaf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaf8:	663b      	str	r3, [r7, #96]	; 0x60
 800aafa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	3314      	adds	r3, #20
 800ab00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab02:	633a      	str	r2, [r7, #48]	; 0x30
 800ab04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab0a:	e841 2300 	strex	r3, r2, [r1]
 800ab0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1e5      	bne.n	800aae2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab18:	2220      	movs	r2, #32
 800ab1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d119      	bne.n	800ab5a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	330c      	adds	r3, #12
 800ab2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	e853 3f00 	ldrex	r3, [r3]
 800ab34:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f023 0310 	bic.w	r3, r3, #16
 800ab3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	330c      	adds	r3, #12
 800ab44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab46:	61fa      	str	r2, [r7, #28]
 800ab48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4a:	69b9      	ldr	r1, [r7, #24]
 800ab4c:	69fa      	ldr	r2, [r7, #28]
 800ab4e:	e841 2300 	strex	r3, r2, [r1]
 800ab52:	617b      	str	r3, [r7, #20]
   return(result);
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1e5      	bne.n	800ab26 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d106      	bne.n	800ab70 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ab66:	4619      	mov	r1, r3
 800ab68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ab6a:	f7ff ff69 	bl	800aa40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab6e:	e002      	b.n	800ab76 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ab70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ab72:	f7f7 fcf5 	bl	8002560 <HAL_UART_RxCpltCallback>
}
 800ab76:	bf00      	nop
 800ab78:	3770      	adds	r7, #112	; 0x70
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d108      	bne.n	800aba6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ab98:	085b      	lsrs	r3, r3, #1
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f7ff ff4e 	bl	800aa40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aba4:	e002      	b.n	800abac <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	f7ff ff36 	bl	800aa18 <HAL_UART_RxHalfCpltCallback>
}
 800abac:	bf00      	nop
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800abbc:	2300      	movs	r3, #0
 800abbe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	695b      	ldr	r3, [r3, #20]
 800abcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd0:	2b80      	cmp	r3, #128	; 0x80
 800abd2:	bf0c      	ite	eq
 800abd4:	2301      	moveq	r3, #1
 800abd6:	2300      	movne	r3, #0
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	2b21      	cmp	r3, #33	; 0x21
 800abe6:	d108      	bne.n	800abfa <UART_DMAError+0x46>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d005      	beq.n	800abfa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2200      	movs	r2, #0
 800abf2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800abf4:	68b8      	ldr	r0, [r7, #8]
 800abf6:	f000 f903 	bl	800ae00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	695b      	ldr	r3, [r3, #20]
 800ac00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac04:	2b40      	cmp	r3, #64	; 0x40
 800ac06:	bf0c      	ite	eq
 800ac08:	2301      	moveq	r3, #1
 800ac0a:	2300      	movne	r3, #0
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	2b22      	cmp	r3, #34	; 0x22
 800ac1a:	d108      	bne.n	800ac2e <UART_DMAError+0x7a>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d005      	beq.n	800ac2e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2200      	movs	r2, #0
 800ac26:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ac28:	68b8      	ldr	r0, [r7, #8]
 800ac2a:	f000 f911 	bl	800ae50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac32:	f043 0210 	orr.w	r2, r3, #16
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac3a:	68b8      	ldr	r0, [r7, #8]
 800ac3c:	f7ff fef6 	bl	800aa2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac40:	bf00      	nop
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	4613      	mov	r3, r2
 800ac54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	88fa      	ldrh	r2, [r7, #6]
 800ac60:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	88fa      	ldrh	r2, [r7, #6]
 800ac66:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2222      	movs	r2, #34	; 0x22
 800ac72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d007      	beq.n	800ac96 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68da      	ldr	r2, [r3, #12]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac94:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	695a      	ldr	r2, [r3, #20]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f042 0201 	orr.w	r2, r2, #1
 800aca4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68da      	ldr	r2, [r3, #12]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f042 0220 	orr.w	r2, r2, #32
 800acb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3714      	adds	r7, #20
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b098      	sub	sp, #96	; 0x60
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	4613      	mov	r3, r2
 800acd0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	88fa      	ldrh	r2, [r7, #6]
 800acdc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2222      	movs	r2, #34	; 0x22
 800ace8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf0:	4a40      	ldr	r2, [pc, #256]	; (800adf4 <UART_Start_Receive_DMA+0x130>)
 800acf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf8:	4a3f      	ldr	r2, [pc, #252]	; (800adf8 <UART_Start_Receive_DMA+0x134>)
 800acfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad00:	4a3e      	ldr	r2, [pc, #248]	; (800adfc <UART_Start_Receive_DMA+0x138>)
 800ad02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad08:	2200      	movs	r2, #0
 800ad0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ad0c:	f107 0308 	add.w	r3, r7, #8
 800ad10:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	88fb      	ldrh	r3, [r7, #6]
 800ad24:	f7fb f824 	bl	8005d70 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ad28:	2300      	movs	r3, #0
 800ad2a:	613b      	str	r3, [r7, #16]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	613b      	str	r3, [r7, #16]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	613b      	str	r3, [r7, #16]
 800ad3c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d019      	beq.n	800ad82 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	330c      	adds	r3, #12
 800ad54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad58:	e853 3f00 	ldrex	r3, [r3]
 800ad5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad64:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	330c      	adds	r3, #12
 800ad6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad6e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ad70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad72:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ad74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad76:	e841 2300 	strex	r3, r2, [r1]
 800ad7a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ad7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1e5      	bne.n	800ad4e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	3314      	adds	r3, #20
 800ad88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8c:	e853 3f00 	ldrex	r3, [r3]
 800ad90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad94:	f043 0301 	orr.w	r3, r3, #1
 800ad98:	657b      	str	r3, [r7, #84]	; 0x54
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	3314      	adds	r3, #20
 800ada0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ada2:	63ba      	str	r2, [r7, #56]	; 0x38
 800ada4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ada8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adaa:	e841 2300 	strex	r3, r2, [r1]
 800adae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800adb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1e5      	bne.n	800ad82 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3314      	adds	r3, #20
 800adbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	e853 3f00 	ldrex	r3, [r3]
 800adc4:	617b      	str	r3, [r7, #20]
   return(result);
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adcc:	653b      	str	r3, [r7, #80]	; 0x50
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3314      	adds	r3, #20
 800add4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800add6:	627a      	str	r2, [r7, #36]	; 0x24
 800add8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adda:	6a39      	ldr	r1, [r7, #32]
 800addc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adde:	e841 2300 	strex	r3, r2, [r1]
 800ade2:	61fb      	str	r3, [r7, #28]
   return(result);
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1e5      	bne.n	800adb6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3760      	adds	r7, #96	; 0x60
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	0800aa59 	.word	0x0800aa59
 800adf8:	0800ab7f 	.word	0x0800ab7f
 800adfc:	0800abb5 	.word	0x0800abb5

0800ae00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b089      	sub	sp, #36	; 0x24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	330c      	adds	r3, #12
 800ae0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	e853 3f00 	ldrex	r3, [r3]
 800ae16:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ae1e:	61fb      	str	r3, [r7, #28]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	330c      	adds	r3, #12
 800ae26:	69fa      	ldr	r2, [r7, #28]
 800ae28:	61ba      	str	r2, [r7, #24]
 800ae2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2c:	6979      	ldr	r1, [r7, #20]
 800ae2e:	69ba      	ldr	r2, [r7, #24]
 800ae30:	e841 2300 	strex	r3, r2, [r1]
 800ae34:	613b      	str	r3, [r7, #16]
   return(result);
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e5      	bne.n	800ae08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2220      	movs	r2, #32
 800ae40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ae44:	bf00      	nop
 800ae46:	3724      	adds	r7, #36	; 0x24
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b095      	sub	sp, #84	; 0x54
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	330c      	adds	r3, #12
 800ae5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae62:	e853 3f00 	ldrex	r3, [r3]
 800ae66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	330c      	adds	r3, #12
 800ae76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae78:	643a      	str	r2, [r7, #64]	; 0x40
 800ae7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae80:	e841 2300 	strex	r3, r2, [r1]
 800ae84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e5      	bne.n	800ae58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3314      	adds	r3, #20
 800ae92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae94:	6a3b      	ldr	r3, [r7, #32]
 800ae96:	e853 3f00 	ldrex	r3, [r3]
 800ae9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	f023 0301 	bic.w	r3, r3, #1
 800aea2:	64bb      	str	r3, [r7, #72]	; 0x48
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	3314      	adds	r3, #20
 800aeaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aeac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aeae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aeb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeb4:	e841 2300 	strex	r3, r2, [r1]
 800aeb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1e5      	bne.n	800ae8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d119      	bne.n	800aefc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	330c      	adds	r3, #12
 800aece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	e853 3f00 	ldrex	r3, [r3]
 800aed6:	60bb      	str	r3, [r7, #8]
   return(result);
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	f023 0310 	bic.w	r3, r3, #16
 800aede:	647b      	str	r3, [r7, #68]	; 0x44
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	330c      	adds	r3, #12
 800aee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aee8:	61ba      	str	r2, [r7, #24]
 800aeea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeec:	6979      	ldr	r1, [r7, #20]
 800aeee:	69ba      	ldr	r2, [r7, #24]
 800aef0:	e841 2300 	strex	r3, r2, [r1]
 800aef4:	613b      	str	r3, [r7, #16]
   return(result);
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1e5      	bne.n	800aec8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2220      	movs	r2, #32
 800af00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	631a      	str	r2, [r3, #48]	; 0x30
}
 800af0a:	bf00      	nop
 800af0c:	3754      	adds	r7, #84	; 0x54
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b084      	sub	sp, #16
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2200      	movs	r2, #0
 800af28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2200      	movs	r2, #0
 800af2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f7ff fd7b 	bl	800aa2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af36:	bf00      	nop
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}

0800af3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af3e:	b480      	push	{r7}
 800af40:	b085      	sub	sp, #20
 800af42:	af00      	add	r7, sp, #0
 800af44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	2b21      	cmp	r3, #33	; 0x21
 800af50:	d13e      	bne.n	800afd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af5a:	d114      	bne.n	800af86 <UART_Transmit_IT+0x48>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	691b      	ldr	r3, [r3, #16]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d110      	bne.n	800af86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6a1b      	ldr	r3, [r3, #32]
 800af68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	881b      	ldrh	r3, [r3, #0]
 800af6e:	461a      	mov	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a1b      	ldr	r3, [r3, #32]
 800af7e:	1c9a      	adds	r2, r3, #2
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	621a      	str	r2, [r3, #32]
 800af84:	e008      	b.n	800af98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	1c59      	adds	r1, r3, #1
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	6211      	str	r1, [r2, #32]
 800af90:	781a      	ldrb	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	3b01      	subs	r3, #1
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	4619      	mov	r1, r3
 800afa6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d10f      	bne.n	800afcc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	68da      	ldr	r2, [r3, #12]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68da      	ldr	r2, [r3, #12]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	e000      	b.n	800afd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800afd0:	2302      	movs	r3, #2
  }
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3714      	adds	r7, #20
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr

0800afde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b082      	sub	sp, #8
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68da      	ldr	r2, [r3, #12]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aff4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2220      	movs	r2, #32
 800affa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f7f7 fa98 	bl	8002534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b08c      	sub	sp, #48	; 0x30
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b22      	cmp	r3, #34	; 0x22
 800b020:	f040 80ab 	bne.w	800b17a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b02c:	d117      	bne.n	800b05e <UART_Receive_IT+0x50>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d113      	bne.n	800b05e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b036:	2300      	movs	r3, #0
 800b038:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	b29b      	uxth	r3, r3
 800b048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b050:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b056:	1c9a      	adds	r2, r3, #2
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	629a      	str	r2, [r3, #40]	; 0x28
 800b05c:	e026      	b.n	800b0ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b062:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b064:	2300      	movs	r3, #0
 800b066:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b070:	d007      	beq.n	800b082 <UART_Receive_IT+0x74>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d10a      	bne.n	800b090 <UART_Receive_IT+0x82>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d106      	bne.n	800b090 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08c:	701a      	strb	r2, [r3, #0]
 800b08e:	e008      	b.n	800b0a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	b2db      	uxtb	r3, r3
 800b098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b09c:	b2da      	uxtb	r2, r3
 800b09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a6:	1c5a      	adds	r2, r3, #1
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d15a      	bne.n	800b176 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68da      	ldr	r2, [r3, #12]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f022 0220 	bic.w	r2, r2, #32
 800b0ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	68da      	ldr	r2, [r3, #12]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b0de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	695a      	ldr	r2, [r3, #20]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f022 0201 	bic.w	r2, r2, #1
 800b0ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2220      	movs	r2, #32
 800b0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d135      	bne.n	800b16c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	330c      	adds	r3, #12
 800b10c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	e853 3f00 	ldrex	r3, [r3]
 800b114:	613b      	str	r3, [r7, #16]
   return(result);
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	f023 0310 	bic.w	r3, r3, #16
 800b11c:	627b      	str	r3, [r7, #36]	; 0x24
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	330c      	adds	r3, #12
 800b124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b126:	623a      	str	r2, [r7, #32]
 800b128:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12a:	69f9      	ldr	r1, [r7, #28]
 800b12c:	6a3a      	ldr	r2, [r7, #32]
 800b12e:	e841 2300 	strex	r3, r2, [r1]
 800b132:	61bb      	str	r3, [r7, #24]
   return(result);
 800b134:	69bb      	ldr	r3, [r7, #24]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1e5      	bne.n	800b106 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f003 0310 	and.w	r3, r3, #16
 800b144:	2b10      	cmp	r3, #16
 800b146:	d10a      	bne.n	800b15e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b148:	2300      	movs	r3, #0
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	60fb      	str	r3, [r7, #12]
 800b15c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b162:	4619      	mov	r1, r3
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7ff fc6b 	bl	800aa40 <HAL_UARTEx_RxEventCallback>
 800b16a:	e002      	b.n	800b172 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f7f7 f9f7 	bl	8002560 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b172:	2300      	movs	r3, #0
 800b174:	e002      	b.n	800b17c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b176:	2300      	movs	r3, #0
 800b178:	e000      	b.n	800b17c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b17a:	2302      	movs	r3, #2
  }
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3730      	adds	r7, #48	; 0x30
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b188:	b0c0      	sub	sp, #256	; 0x100
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b19c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1a0:	68d9      	ldr	r1, [r3, #12]
 800b1a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	ea40 0301 	orr.w	r3, r0, r1
 800b1ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b1ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1b2:	689a      	ldr	r2, [r3, #8]
 800b1b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	431a      	orrs	r2, r3
 800b1bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	431a      	orrs	r2, r3
 800b1c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c8:	69db      	ldr	r3, [r3, #28]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b1d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b1dc:	f021 010c 	bic.w	r1, r1, #12
 800b1e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b1ea:	430b      	orrs	r3, r1
 800b1ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b1ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	695b      	ldr	r3, [r3, #20]
 800b1f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b1fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1fe:	6999      	ldr	r1, [r3, #24]
 800b200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	ea40 0301 	orr.w	r3, r0, r1
 800b20a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b20c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	4b8f      	ldr	r3, [pc, #572]	; (800b450 <UART_SetConfig+0x2cc>)
 800b214:	429a      	cmp	r2, r3
 800b216:	d005      	beq.n	800b224 <UART_SetConfig+0xa0>
 800b218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	4b8d      	ldr	r3, [pc, #564]	; (800b454 <UART_SetConfig+0x2d0>)
 800b220:	429a      	cmp	r2, r3
 800b222:	d104      	bne.n	800b22e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b224:	f7fd f852 	bl	80082cc <HAL_RCC_GetPCLK2Freq>
 800b228:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b22c:	e003      	b.n	800b236 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b22e:	f7fd f839 	bl	80082a4 <HAL_RCC_GetPCLK1Freq>
 800b232:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b23a:	69db      	ldr	r3, [r3, #28]
 800b23c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b240:	f040 810c 	bne.w	800b45c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b248:	2200      	movs	r2, #0
 800b24a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b24e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b252:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b256:	4622      	mov	r2, r4
 800b258:	462b      	mov	r3, r5
 800b25a:	1891      	adds	r1, r2, r2
 800b25c:	65b9      	str	r1, [r7, #88]	; 0x58
 800b25e:	415b      	adcs	r3, r3
 800b260:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b262:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b266:	4621      	mov	r1, r4
 800b268:	eb12 0801 	adds.w	r8, r2, r1
 800b26c:	4629      	mov	r1, r5
 800b26e:	eb43 0901 	adc.w	r9, r3, r1
 800b272:	f04f 0200 	mov.w	r2, #0
 800b276:	f04f 0300 	mov.w	r3, #0
 800b27a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b27e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b286:	4690      	mov	r8, r2
 800b288:	4699      	mov	r9, r3
 800b28a:	4623      	mov	r3, r4
 800b28c:	eb18 0303 	adds.w	r3, r8, r3
 800b290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b294:	462b      	mov	r3, r5
 800b296:	eb49 0303 	adc.w	r3, r9, r3
 800b29a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b29e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b2aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b2ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	18db      	adds	r3, r3, r3
 800b2b6:	653b      	str	r3, [r7, #80]	; 0x50
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	eb42 0303 	adc.w	r3, r2, r3
 800b2be:	657b      	str	r3, [r7, #84]	; 0x54
 800b2c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b2c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b2c8:	f7f5 fcde 	bl	8000c88 <__aeabi_uldivmod>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4b61      	ldr	r3, [pc, #388]	; (800b458 <UART_SetConfig+0x2d4>)
 800b2d2:	fba3 2302 	umull	r2, r3, r3, r2
 800b2d6:	095b      	lsrs	r3, r3, #5
 800b2d8:	011c      	lsls	r4, r3, #4
 800b2da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b2e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b2ec:	4642      	mov	r2, r8
 800b2ee:	464b      	mov	r3, r9
 800b2f0:	1891      	adds	r1, r2, r2
 800b2f2:	64b9      	str	r1, [r7, #72]	; 0x48
 800b2f4:	415b      	adcs	r3, r3
 800b2f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b2fc:	4641      	mov	r1, r8
 800b2fe:	eb12 0a01 	adds.w	sl, r2, r1
 800b302:	4649      	mov	r1, r9
 800b304:	eb43 0b01 	adc.w	fp, r3, r1
 800b308:	f04f 0200 	mov.w	r2, #0
 800b30c:	f04f 0300 	mov.w	r3, #0
 800b310:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b314:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b31c:	4692      	mov	sl, r2
 800b31e:	469b      	mov	fp, r3
 800b320:	4643      	mov	r3, r8
 800b322:	eb1a 0303 	adds.w	r3, sl, r3
 800b326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b32a:	464b      	mov	r3, r9
 800b32c:	eb4b 0303 	adc.w	r3, fp, r3
 800b330:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b340:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b344:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b348:	460b      	mov	r3, r1
 800b34a:	18db      	adds	r3, r3, r3
 800b34c:	643b      	str	r3, [r7, #64]	; 0x40
 800b34e:	4613      	mov	r3, r2
 800b350:	eb42 0303 	adc.w	r3, r2, r3
 800b354:	647b      	str	r3, [r7, #68]	; 0x44
 800b356:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b35a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b35e:	f7f5 fc93 	bl	8000c88 <__aeabi_uldivmod>
 800b362:	4602      	mov	r2, r0
 800b364:	460b      	mov	r3, r1
 800b366:	4611      	mov	r1, r2
 800b368:	4b3b      	ldr	r3, [pc, #236]	; (800b458 <UART_SetConfig+0x2d4>)
 800b36a:	fba3 2301 	umull	r2, r3, r3, r1
 800b36e:	095b      	lsrs	r3, r3, #5
 800b370:	2264      	movs	r2, #100	; 0x64
 800b372:	fb02 f303 	mul.w	r3, r2, r3
 800b376:	1acb      	subs	r3, r1, r3
 800b378:	00db      	lsls	r3, r3, #3
 800b37a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b37e:	4b36      	ldr	r3, [pc, #216]	; (800b458 <UART_SetConfig+0x2d4>)
 800b380:	fba3 2302 	umull	r2, r3, r3, r2
 800b384:	095b      	lsrs	r3, r3, #5
 800b386:	005b      	lsls	r3, r3, #1
 800b388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b38c:	441c      	add	r4, r3
 800b38e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b392:	2200      	movs	r2, #0
 800b394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b398:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b39c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b3a0:	4642      	mov	r2, r8
 800b3a2:	464b      	mov	r3, r9
 800b3a4:	1891      	adds	r1, r2, r2
 800b3a6:	63b9      	str	r1, [r7, #56]	; 0x38
 800b3a8:	415b      	adcs	r3, r3
 800b3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b3b0:	4641      	mov	r1, r8
 800b3b2:	1851      	adds	r1, r2, r1
 800b3b4:	6339      	str	r1, [r7, #48]	; 0x30
 800b3b6:	4649      	mov	r1, r9
 800b3b8:	414b      	adcs	r3, r1
 800b3ba:	637b      	str	r3, [r7, #52]	; 0x34
 800b3bc:	f04f 0200 	mov.w	r2, #0
 800b3c0:	f04f 0300 	mov.w	r3, #0
 800b3c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b3c8:	4659      	mov	r1, fp
 800b3ca:	00cb      	lsls	r3, r1, #3
 800b3cc:	4651      	mov	r1, sl
 800b3ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3d2:	4651      	mov	r1, sl
 800b3d4:	00ca      	lsls	r2, r1, #3
 800b3d6:	4610      	mov	r0, r2
 800b3d8:	4619      	mov	r1, r3
 800b3da:	4603      	mov	r3, r0
 800b3dc:	4642      	mov	r2, r8
 800b3de:	189b      	adds	r3, r3, r2
 800b3e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3e4:	464b      	mov	r3, r9
 800b3e6:	460a      	mov	r2, r1
 800b3e8:	eb42 0303 	adc.w	r3, r2, r3
 800b3ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b3f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b3fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b400:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b404:	460b      	mov	r3, r1
 800b406:	18db      	adds	r3, r3, r3
 800b408:	62bb      	str	r3, [r7, #40]	; 0x28
 800b40a:	4613      	mov	r3, r2
 800b40c:	eb42 0303 	adc.w	r3, r2, r3
 800b410:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b412:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b416:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b41a:	f7f5 fc35 	bl	8000c88 <__aeabi_uldivmod>
 800b41e:	4602      	mov	r2, r0
 800b420:	460b      	mov	r3, r1
 800b422:	4b0d      	ldr	r3, [pc, #52]	; (800b458 <UART_SetConfig+0x2d4>)
 800b424:	fba3 1302 	umull	r1, r3, r3, r2
 800b428:	095b      	lsrs	r3, r3, #5
 800b42a:	2164      	movs	r1, #100	; 0x64
 800b42c:	fb01 f303 	mul.w	r3, r1, r3
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	00db      	lsls	r3, r3, #3
 800b434:	3332      	adds	r3, #50	; 0x32
 800b436:	4a08      	ldr	r2, [pc, #32]	; (800b458 <UART_SetConfig+0x2d4>)
 800b438:	fba2 2303 	umull	r2, r3, r2, r3
 800b43c:	095b      	lsrs	r3, r3, #5
 800b43e:	f003 0207 	and.w	r2, r3, #7
 800b442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4422      	add	r2, r4
 800b44a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b44c:	e105      	b.n	800b65a <UART_SetConfig+0x4d6>
 800b44e:	bf00      	nop
 800b450:	40011000 	.word	0x40011000
 800b454:	40011400 	.word	0x40011400
 800b458:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b45c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b460:	2200      	movs	r2, #0
 800b462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b466:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b46a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b46e:	4642      	mov	r2, r8
 800b470:	464b      	mov	r3, r9
 800b472:	1891      	adds	r1, r2, r2
 800b474:	6239      	str	r1, [r7, #32]
 800b476:	415b      	adcs	r3, r3
 800b478:	627b      	str	r3, [r7, #36]	; 0x24
 800b47a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b47e:	4641      	mov	r1, r8
 800b480:	1854      	adds	r4, r2, r1
 800b482:	4649      	mov	r1, r9
 800b484:	eb43 0501 	adc.w	r5, r3, r1
 800b488:	f04f 0200 	mov.w	r2, #0
 800b48c:	f04f 0300 	mov.w	r3, #0
 800b490:	00eb      	lsls	r3, r5, #3
 800b492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b496:	00e2      	lsls	r2, r4, #3
 800b498:	4614      	mov	r4, r2
 800b49a:	461d      	mov	r5, r3
 800b49c:	4643      	mov	r3, r8
 800b49e:	18e3      	adds	r3, r4, r3
 800b4a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b4a4:	464b      	mov	r3, r9
 800b4a6:	eb45 0303 	adc.w	r3, r5, r3
 800b4aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b4ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b4ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b4be:	f04f 0200 	mov.w	r2, #0
 800b4c2:	f04f 0300 	mov.w	r3, #0
 800b4c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b4ca:	4629      	mov	r1, r5
 800b4cc:	008b      	lsls	r3, r1, #2
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	008a      	lsls	r2, r1, #2
 800b4d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b4dc:	f7f5 fbd4 	bl	8000c88 <__aeabi_uldivmod>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4b60      	ldr	r3, [pc, #384]	; (800b668 <UART_SetConfig+0x4e4>)
 800b4e6:	fba3 2302 	umull	r2, r3, r3, r2
 800b4ea:	095b      	lsrs	r3, r3, #5
 800b4ec:	011c      	lsls	r4, r3, #4
 800b4ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b4f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b4fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b500:	4642      	mov	r2, r8
 800b502:	464b      	mov	r3, r9
 800b504:	1891      	adds	r1, r2, r2
 800b506:	61b9      	str	r1, [r7, #24]
 800b508:	415b      	adcs	r3, r3
 800b50a:	61fb      	str	r3, [r7, #28]
 800b50c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b510:	4641      	mov	r1, r8
 800b512:	1851      	adds	r1, r2, r1
 800b514:	6139      	str	r1, [r7, #16]
 800b516:	4649      	mov	r1, r9
 800b518:	414b      	adcs	r3, r1
 800b51a:	617b      	str	r3, [r7, #20]
 800b51c:	f04f 0200 	mov.w	r2, #0
 800b520:	f04f 0300 	mov.w	r3, #0
 800b524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b528:	4659      	mov	r1, fp
 800b52a:	00cb      	lsls	r3, r1, #3
 800b52c:	4651      	mov	r1, sl
 800b52e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b532:	4651      	mov	r1, sl
 800b534:	00ca      	lsls	r2, r1, #3
 800b536:	4610      	mov	r0, r2
 800b538:	4619      	mov	r1, r3
 800b53a:	4603      	mov	r3, r0
 800b53c:	4642      	mov	r2, r8
 800b53e:	189b      	adds	r3, r3, r2
 800b540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b544:	464b      	mov	r3, r9
 800b546:	460a      	mov	r2, r1
 800b548:	eb42 0303 	adc.w	r3, r2, r3
 800b54c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	67bb      	str	r3, [r7, #120]	; 0x78
 800b55a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b55c:	f04f 0200 	mov.w	r2, #0
 800b560:	f04f 0300 	mov.w	r3, #0
 800b564:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b568:	4649      	mov	r1, r9
 800b56a:	008b      	lsls	r3, r1, #2
 800b56c:	4641      	mov	r1, r8
 800b56e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b572:	4641      	mov	r1, r8
 800b574:	008a      	lsls	r2, r1, #2
 800b576:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b57a:	f7f5 fb85 	bl	8000c88 <__aeabi_uldivmod>
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	4b39      	ldr	r3, [pc, #228]	; (800b668 <UART_SetConfig+0x4e4>)
 800b584:	fba3 1302 	umull	r1, r3, r3, r2
 800b588:	095b      	lsrs	r3, r3, #5
 800b58a:	2164      	movs	r1, #100	; 0x64
 800b58c:	fb01 f303 	mul.w	r3, r1, r3
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	011b      	lsls	r3, r3, #4
 800b594:	3332      	adds	r3, #50	; 0x32
 800b596:	4a34      	ldr	r2, [pc, #208]	; (800b668 <UART_SetConfig+0x4e4>)
 800b598:	fba2 2303 	umull	r2, r3, r2, r3
 800b59c:	095b      	lsrs	r3, r3, #5
 800b59e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5a2:	441c      	add	r4, r3
 800b5a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	673b      	str	r3, [r7, #112]	; 0x70
 800b5ac:	677a      	str	r2, [r7, #116]	; 0x74
 800b5ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b5b2:	4642      	mov	r2, r8
 800b5b4:	464b      	mov	r3, r9
 800b5b6:	1891      	adds	r1, r2, r2
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	415b      	adcs	r3, r3
 800b5bc:	60fb      	str	r3, [r7, #12]
 800b5be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b5c2:	4641      	mov	r1, r8
 800b5c4:	1851      	adds	r1, r2, r1
 800b5c6:	6039      	str	r1, [r7, #0]
 800b5c8:	4649      	mov	r1, r9
 800b5ca:	414b      	adcs	r3, r1
 800b5cc:	607b      	str	r3, [r7, #4]
 800b5ce:	f04f 0200 	mov.w	r2, #0
 800b5d2:	f04f 0300 	mov.w	r3, #0
 800b5d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b5da:	4659      	mov	r1, fp
 800b5dc:	00cb      	lsls	r3, r1, #3
 800b5de:	4651      	mov	r1, sl
 800b5e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5e4:	4651      	mov	r1, sl
 800b5e6:	00ca      	lsls	r2, r1, #3
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	4642      	mov	r2, r8
 800b5f0:	189b      	adds	r3, r3, r2
 800b5f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5f4:	464b      	mov	r3, r9
 800b5f6:	460a      	mov	r2, r1
 800b5f8:	eb42 0303 	adc.w	r3, r2, r3
 800b5fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b5fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	663b      	str	r3, [r7, #96]	; 0x60
 800b608:	667a      	str	r2, [r7, #100]	; 0x64
 800b60a:	f04f 0200 	mov.w	r2, #0
 800b60e:	f04f 0300 	mov.w	r3, #0
 800b612:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b616:	4649      	mov	r1, r9
 800b618:	008b      	lsls	r3, r1, #2
 800b61a:	4641      	mov	r1, r8
 800b61c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b620:	4641      	mov	r1, r8
 800b622:	008a      	lsls	r2, r1, #2
 800b624:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b628:	f7f5 fb2e 	bl	8000c88 <__aeabi_uldivmod>
 800b62c:	4602      	mov	r2, r0
 800b62e:	460b      	mov	r3, r1
 800b630:	4b0d      	ldr	r3, [pc, #52]	; (800b668 <UART_SetConfig+0x4e4>)
 800b632:	fba3 1302 	umull	r1, r3, r3, r2
 800b636:	095b      	lsrs	r3, r3, #5
 800b638:	2164      	movs	r1, #100	; 0x64
 800b63a:	fb01 f303 	mul.w	r3, r1, r3
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	011b      	lsls	r3, r3, #4
 800b642:	3332      	adds	r3, #50	; 0x32
 800b644:	4a08      	ldr	r2, [pc, #32]	; (800b668 <UART_SetConfig+0x4e4>)
 800b646:	fba2 2303 	umull	r2, r3, r2, r3
 800b64a:	095b      	lsrs	r3, r3, #5
 800b64c:	f003 020f 	and.w	r2, r3, #15
 800b650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4422      	add	r2, r4
 800b658:	609a      	str	r2, [r3, #8]
}
 800b65a:	bf00      	nop
 800b65c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b660:	46bd      	mov	sp, r7
 800b662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b666:	bf00      	nop
 800b668:	51eb851f 	.word	0x51eb851f

0800b66c <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800b676:	edd7 7a01 	vldr	s15, [r7, #4]
 800b67a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800b690 <FusionDegreesToRadians+0x24>
 800b67e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b682:	eeb0 0a67 	vmov.f32	s0, s15
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr
 800b690:	3c8efa35 	.word	0x3c8efa35

0800b694 <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	105a      	asrs	r2, r3, #1
 800b6a6:	4b10      	ldr	r3, [pc, #64]	; (800b6e8 <FusionFastInverseSqrt+0x54>)
 800b6a8:	1a9b      	subs	r3, r3, r2
 800b6aa:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 800b6ac:	ed97 7a03 	vldr	s14, [r7, #12]
 800b6b0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b6b4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800b6ec <FusionFastInverseSqrt+0x58>
 800b6b8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b6bc:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b6c4:	edd7 7a03 	vldr	s15, [r7, #12]
 800b6c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6cc:	eddf 6a08 	vldr	s13, [pc, #32]	; 800b6f0 <FusionFastInverseSqrt+0x5c>
 800b6d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b6d4:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800b6d8:	eeb0 0a67 	vmov.f32	s0, s15
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	5f1f1412 	.word	0x5f1f1412
 800b6ec:	3f36d312 	.word	0x3f36d312
 800b6f0:	3fd851ff 	.word	0x3fd851ff

0800b6f4 <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	eef0 6a40 	vmov.f32	s13, s0
 800b6fe:	eeb0 7a60 	vmov.f32	s14, s1
 800b702:	eef0 7a41 	vmov.f32	s15, s2
 800b706:	edc7 6a01 	vstr	s13, [r7, #4]
 800b70a:	ed87 7a02 	vstr	s14, [r7, #8]
 800b70e:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800b712:	edd7 7a01 	vldr	s15, [r7, #4]
 800b716:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b71e:	d10f      	bne.n	800b740 <FusionVectorIsZero+0x4c>
 800b720:	edd7 7a02 	vldr	s15, [r7, #8]
 800b724:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b72c:	d108      	bne.n	800b740 <FusionVectorIsZero+0x4c>
 800b72e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b732:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b73a:	d101      	bne.n	800b740 <FusionVectorIsZero+0x4c>
 800b73c:	2301      	movs	r3, #1
 800b73e:	e000      	b.n	800b742 <FusionVectorIsZero+0x4e>
 800b740:	2300      	movs	r3, #0
 800b742:	f003 0301 	and.w	r3, r3, #1
 800b746:	b2db      	uxtb	r3, r3
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3714      	adds	r7, #20
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800b754:	b480      	push	{r7}
 800b756:	b091      	sub	sp, #68	; 0x44
 800b758:	af00      	add	r7, sp, #0
 800b75a:	eeb0 5a40 	vmov.f32	s10, s0
 800b75e:	eef0 5a60 	vmov.f32	s11, s1
 800b762:	eeb0 6a41 	vmov.f32	s12, s2
 800b766:	eef0 6a61 	vmov.f32	s13, s3
 800b76a:	eeb0 7a42 	vmov.f32	s14, s4
 800b76e:	eef0 7a62 	vmov.f32	s15, s5
 800b772:	ed87 5a07 	vstr	s10, [r7, #28]
 800b776:	edc7 5a08 	vstr	s11, [r7, #32]
 800b77a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b77e:	edc7 6a04 	vstr	s13, [r7, #16]
 800b782:	ed87 7a05 	vstr	s14, [r7, #20]
 800b786:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 800b78a:	ed97 7a07 	vldr	s14, [r7, #28]
 800b78e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b792:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b796:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800b79a:	ed97 7a08 	vldr	s14, [r7, #32]
 800b79e:	edd7 7a05 	vldr	s15, [r7, #20]
 800b7a2:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b7a6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800b7aa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b7ae:	edd7 7a06 	vldr	s15, [r7, #24]
 800b7b2:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b7b6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b7ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b7be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b7c2:	ca07      	ldmia	r2, {r0, r1, r2}
 800b7c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b7c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b7ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ce:	ee06 1a90 	vmov	s13, r1
 800b7d2:	ee07 2a10 	vmov	s14, r2
 800b7d6:	ee07 3a90 	vmov	s15, r3
}
 800b7da:	eeb0 0a66 	vmov.f32	s0, s13
 800b7de:	eef0 0a47 	vmov.f32	s1, s14
 800b7e2:	eeb0 1a67 	vmov.f32	s2, s15
 800b7e6:	3744      	adds	r7, #68	; 0x44
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	eef0 6a40 	vmov.f32	s13, s0
 800b7fa:	eeb0 7a60 	vmov.f32	s14, s1
 800b7fe:	eef0 7a41 	vmov.f32	s15, s2
 800b802:	edc7 6a01 	vstr	s13, [r7, #4]
 800b806:	ed87 7a02 	vstr	s14, [r7, #8]
 800b80a:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800b80e:	ed97 7a01 	vldr	s14, [r7, #4]
 800b812:	edd7 7a02 	vldr	s15, [r7, #8]
 800b816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b81a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b81e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800b822:	eeb0 0a67 	vmov.f32	s0, s15
 800b826:	3714      	adds	r7, #20
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800b830:	b480      	push	{r7}
 800b832:	b08f      	sub	sp, #60	; 0x3c
 800b834:	af00      	add	r7, sp, #0
 800b836:	eef0 6a40 	vmov.f32	s13, s0
 800b83a:	eeb0 7a60 	vmov.f32	s14, s1
 800b83e:	eef0 7a41 	vmov.f32	s15, s2
 800b842:	edc7 1a04 	vstr	s3, [r7, #16]
 800b846:	edc7 6a05 	vstr	s13, [r7, #20]
 800b84a:	ed87 7a06 	vstr	s14, [r7, #24]
 800b84e:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 800b852:	ed97 7a05 	vldr	s14, [r7, #20]
 800b856:	edd7 7a04 	vldr	s15, [r7, #16]
 800b85a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b85e:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800b862:	ed97 7a06 	vldr	s14, [r7, #24]
 800b866:	edd7 7a04 	vldr	s15, [r7, #16]
 800b86a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b86e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800b872:	ed97 7a07 	vldr	s14, [r7, #28]
 800b876:	edd7 7a04 	vldr	s15, [r7, #16]
 800b87a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b87e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800b882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b886:	f107 0220 	add.w	r2, r7, #32
 800b88a:	ca07      	ldmia	r2, {r0, r1, r2}
 800b88c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b890:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b896:	ee06 1a90 	vmov	s13, r1
 800b89a:	ee07 2a10 	vmov	s14, r2
 800b89e:	ee07 3a90 	vmov	s15, r3
}
 800b8a2:	eeb0 0a66 	vmov.f32	s0, s13
 800b8a6:	eef0 0a47 	vmov.f32	s1, s14
 800b8aa:	eeb0 1a67 	vmov.f32	s2, s15
 800b8ae:	373c      	adds	r7, #60	; 0x3c
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b8b8:	b480      	push	{r7}
 800b8ba:	b091      	sub	sp, #68	; 0x44
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	eeb0 5a40 	vmov.f32	s10, s0
 800b8c2:	eef0 5a60 	vmov.f32	s11, s1
 800b8c6:	eeb0 6a41 	vmov.f32	s12, s2
 800b8ca:	eef0 6a61 	vmov.f32	s13, s3
 800b8ce:	eeb0 7a42 	vmov.f32	s14, s4
 800b8d2:	eef0 7a62 	vmov.f32	s15, s5
 800b8d6:	ed87 5a07 	vstr	s10, [r7, #28]
 800b8da:	edc7 5a08 	vstr	s11, [r7, #32]
 800b8de:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b8e2:	edc7 6a04 	vstr	s13, [r7, #16]
 800b8e6:	ed87 7a05 	vstr	s14, [r7, #20]
 800b8ea:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800b8ee:	ed97 7a07 	vldr	s14, [r7, #28]
 800b8f2:	edd7 7a04 	vldr	s15, [r7, #16]
 800b8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b8fa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800b8fe:	ed97 7a08 	vldr	s14, [r7, #32]
 800b902:	edd7 7a05 	vldr	s15, [r7, #20]
 800b906:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b90a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800b90e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b912:	edd7 7a06 	vldr	s15, [r7, #24]
 800b916:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b91a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b91e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b922:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b926:	ca07      	ldmia	r2, {r0, r1, r2}
 800b928:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b92c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b92e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b932:	ee06 1a90 	vmov	s13, r1
 800b936:	ee07 2a10 	vmov	s14, r2
 800b93a:	ee07 3a90 	vmov	s15, r3
}
 800b93e:	eeb0 0a66 	vmov.f32	s0, s13
 800b942:	eef0 0a47 	vmov.f32	s1, s14
 800b946:	eeb0 1a67 	vmov.f32	s2, s15
 800b94a:	3744      	adds	r7, #68	; 0x44
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800b954:	b480      	push	{r7}
 800b956:	b091      	sub	sp, #68	; 0x44
 800b958:	af00      	add	r7, sp, #0
 800b95a:	eeb0 5a40 	vmov.f32	s10, s0
 800b95e:	eef0 5a60 	vmov.f32	s11, s1
 800b962:	eeb0 6a41 	vmov.f32	s12, s2
 800b966:	eef0 6a61 	vmov.f32	s13, s3
 800b96a:	eeb0 7a42 	vmov.f32	s14, s4
 800b96e:	eef0 7a62 	vmov.f32	s15, s5
 800b972:	ed87 5a07 	vstr	s10, [r7, #28]
 800b976:	edc7 5a08 	vstr	s11, [r7, #32]
 800b97a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800b97e:	edc7 6a04 	vstr	s13, [r7, #16]
 800b982:	ed87 7a05 	vstr	s14, [r7, #20]
 800b986:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 800b98a:	ed97 7a08 	vldr	s14, [r7, #32]
 800b98e:	edd7 7a06 	vldr	s15, [r7, #24]
 800b992:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b996:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800b99a:	edd7 7a05 	vldr	s15, [r7, #20]
 800b99e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9a2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b9a6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800b9aa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b9ae:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9ba:	edd7 7a06 	vldr	s15, [r7, #24]
 800b9be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9c2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b9c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800b9ca:	ed97 7a07 	vldr	s14, [r7, #28]
 800b9ce:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9d6:	edd7 6a08 	vldr	s13, [r7, #32]
 800b9da:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9e2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800b9e6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800b9ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b9ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b9f2:	ca07      	ldmia	r2, {r0, r1, r2}
 800b9f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b9f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9fe:	ee06 1a90 	vmov	s13, r1
 800ba02:	ee07 2a10 	vmov	s14, r2
 800ba06:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800ba0a:	eeb0 0a66 	vmov.f32	s0, s13
 800ba0e:	eef0 0a47 	vmov.f32	s1, s14
 800ba12:	eeb0 1a67 	vmov.f32	s2, s15
 800ba16:	3744      	adds	r7, #68	; 0x44
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <FusionVectorDotProduct>:
 * @brief Returns the dot product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Dot product.
 */
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b08a      	sub	sp, #40	; 0x28
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	eeb0 5a40 	vmov.f32	s10, s0
 800ba2a:	eef0 5a60 	vmov.f32	s11, s1
 800ba2e:	eeb0 6a41 	vmov.f32	s12, s2
 800ba32:	eef0 6a61 	vmov.f32	s13, s3
 800ba36:	eeb0 7a42 	vmov.f32	s14, s4
 800ba3a:	eef0 7a62 	vmov.f32	s15, s5
 800ba3e:	ed87 5a03 	vstr	s10, [r7, #12]
 800ba42:	edc7 5a04 	vstr	s11, [r7, #16]
 800ba46:	ed87 6a05 	vstr	s12, [r7, #20]
 800ba4a:	edc7 6a00 	vstr	s13, [r7]
 800ba4e:	ed87 7a01 	vstr	s14, [r7, #4]
 800ba52:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 800ba56:	ed97 5a00 	vldr	s10, [r7]
 800ba5a:	edd7 5a01 	vldr	s11, [r7, #4]
 800ba5e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba62:	edd7 6a03 	vldr	s13, [r7, #12]
 800ba66:	ed97 7a04 	vldr	s14, [r7, #16]
 800ba6a:	edd7 7a05 	vldr	s15, [r7, #20]
 800ba6e:	eef0 1a45 	vmov.f32	s3, s10
 800ba72:	eeb0 2a65 	vmov.f32	s4, s11
 800ba76:	eef0 2a46 	vmov.f32	s5, s12
 800ba7a:	eeb0 0a66 	vmov.f32	s0, s13
 800ba7e:	eef0 0a47 	vmov.f32	s1, s14
 800ba82:	eeb0 1a67 	vmov.f32	s2, s15
 800ba86:	f7ff ff17 	bl	800b8b8 <FusionVectorHadamardProduct>
 800ba8a:	eef0 6a40 	vmov.f32	s13, s0
 800ba8e:	eeb0 7a60 	vmov.f32	s14, s1
 800ba92:	eef0 7a41 	vmov.f32	s15, s2
 800ba96:	edc7 6a07 	vstr	s13, [r7, #28]
 800ba9a:	ed87 7a08 	vstr	s14, [r7, #32]
 800ba9e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800baa2:	edd7 6a07 	vldr	s13, [r7, #28]
 800baa6:	ed97 7a08 	vldr	s14, [r7, #32]
 800baaa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800baae:	eeb0 0a66 	vmov.f32	s0, s13
 800bab2:	eef0 0a47 	vmov.f32	s1, s14
 800bab6:	eeb0 1a67 	vmov.f32	s2, s15
 800baba:	f7ff fe99 	bl	800b7f0 <FusionVectorSum>
 800babe:	eef0 7a40 	vmov.f32	s15, s0
}
 800bac2:	eeb0 0a67 	vmov.f32	s0, s15
 800bac6:	3728      	adds	r7, #40	; 0x28
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b088      	sub	sp, #32
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	eef0 6a40 	vmov.f32	s13, s0
 800bad6:	eeb0 7a60 	vmov.f32	s14, s1
 800bada:	eef0 7a41 	vmov.f32	s15, s2
 800bade:	edc7 6a01 	vstr	s13, [r7, #4]
 800bae2:	ed87 7a02 	vstr	s14, [r7, #8]
 800bae6:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800baea:	ed97 5a01 	vldr	s10, [r7, #4]
 800baee:	edd7 5a02 	vldr	s11, [r7, #8]
 800baf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800baf6:	edd7 6a01 	vldr	s13, [r7, #4]
 800bafa:	ed97 7a02 	vldr	s14, [r7, #8]
 800bafe:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb02:	eef0 1a45 	vmov.f32	s3, s10
 800bb06:	eeb0 2a65 	vmov.f32	s4, s11
 800bb0a:	eef0 2a46 	vmov.f32	s5, s12
 800bb0e:	eeb0 0a66 	vmov.f32	s0, s13
 800bb12:	eef0 0a47 	vmov.f32	s1, s14
 800bb16:	eeb0 1a67 	vmov.f32	s2, s15
 800bb1a:	f7ff fecd 	bl	800b8b8 <FusionVectorHadamardProduct>
 800bb1e:	eef0 6a40 	vmov.f32	s13, s0
 800bb22:	eeb0 7a60 	vmov.f32	s14, s1
 800bb26:	eef0 7a41 	vmov.f32	s15, s2
 800bb2a:	edc7 6a05 	vstr	s13, [r7, #20]
 800bb2e:	ed87 7a06 	vstr	s14, [r7, #24]
 800bb32:	edc7 7a07 	vstr	s15, [r7, #28]
 800bb36:	edd7 6a05 	vldr	s13, [r7, #20]
 800bb3a:	ed97 7a06 	vldr	s14, [r7, #24]
 800bb3e:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb42:	eeb0 0a66 	vmov.f32	s0, s13
 800bb46:	eef0 0a47 	vmov.f32	s1, s14
 800bb4a:	eeb0 1a67 	vmov.f32	s2, s15
 800bb4e:	f7ff fe4f 	bl	800b7f0 <FusionVectorSum>
 800bb52:	eef0 7a40 	vmov.f32	s15, s0
}
 800bb56:	eeb0 0a67 	vmov.f32	s0, s15
 800bb5a:	3720      	adds	r7, #32
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b08c      	sub	sp, #48	; 0x30
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	eef0 6a40 	vmov.f32	s13, s0
 800bb6a:	eeb0 7a60 	vmov.f32	s14, s1
 800bb6e:	eef0 7a41 	vmov.f32	s15, s2
 800bb72:	edc7 6a05 	vstr	s13, [r7, #20]
 800bb76:	ed87 7a06 	vstr	s14, [r7, #24]
 800bb7a:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800bb7e:	edd7 6a05 	vldr	s13, [r7, #20]
 800bb82:	ed97 7a06 	vldr	s14, [r7, #24]
 800bb86:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb8a:	eeb0 0a66 	vmov.f32	s0, s13
 800bb8e:	eef0 0a47 	vmov.f32	s1, s14
 800bb92:	eeb0 1a67 	vmov.f32	s2, s15
 800bb96:	f7ff ff99 	bl	800bacc <FusionVectorMagnitudeSquared>
 800bb9a:	eef0 7a40 	vmov.f32	s15, s0
 800bb9e:	eeb0 0a67 	vmov.f32	s0, s15
 800bba2:	f7ff fd77 	bl	800b694 <FusionFastInverseSqrt>
 800bba6:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800bbaa:	edd7 6a05 	vldr	s13, [r7, #20]
 800bbae:	ed97 7a06 	vldr	s14, [r7, #24]
 800bbb2:	edd7 7a07 	vldr	s15, [r7, #28]
 800bbb6:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800bbba:	eeb0 0a66 	vmov.f32	s0, s13
 800bbbe:	eef0 0a47 	vmov.f32	s1, s14
 800bbc2:	eeb0 1a67 	vmov.f32	s2, s15
 800bbc6:	f7ff fe33 	bl	800b830 <FusionVectorMultiplyScalar>
 800bbca:	eef0 6a40 	vmov.f32	s13, s0
 800bbce:	eeb0 7a60 	vmov.f32	s14, s1
 800bbd2:	eef0 7a41 	vmov.f32	s15, s2
 800bbd6:	edc7 6a08 	vstr	s13, [r7, #32]
 800bbda:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800bbde:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800bbe2:	6a39      	ldr	r1, [r7, #32]
 800bbe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe8:	ee06 1a90 	vmov	s13, r1
 800bbec:	ee07 2a10 	vmov	s14, r2
 800bbf0:	ee07 3a90 	vmov	s15, r3
}
 800bbf4:	eeb0 0a66 	vmov.f32	s0, s13
 800bbf8:	eef0 0a47 	vmov.f32	s1, s14
 800bbfc:	eeb0 1a67 	vmov.f32	s2, s15
 800bc00:	3730      	adds	r7, #48	; 0x30
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800bc06:	b490      	push	{r4, r7}
 800bc08:	b094      	sub	sp, #80	; 0x50
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	eeb0 4a40 	vmov.f32	s8, s0
 800bc10:	eef0 4a60 	vmov.f32	s9, s1
 800bc14:	eeb0 5a41 	vmov.f32	s10, s2
 800bc18:	eef0 5a61 	vmov.f32	s11, s3
 800bc1c:	eeb0 6a42 	vmov.f32	s12, s4
 800bc20:	eef0 6a62 	vmov.f32	s13, s5
 800bc24:	eeb0 7a43 	vmov.f32	s14, s6
 800bc28:	eef0 7a63 	vmov.f32	s15, s7
 800bc2c:	ed87 4a08 	vstr	s8, [r7, #32]
 800bc30:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800bc34:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 800bc38:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800bc3c:	ed87 6a04 	vstr	s12, [r7, #16]
 800bc40:	edc7 6a05 	vstr	s13, [r7, #20]
 800bc44:	ed87 7a06 	vstr	s14, [r7, #24]
 800bc48:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 800bc4c:	ed97 7a08 	vldr	s14, [r7, #32]
 800bc50:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc54:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bc58:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 800bc5c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bc60:	edd7 7a05 	vldr	s15, [r7, #20]
 800bc64:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bc68:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 800bc6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc70:	edd7 7a06 	vldr	s15, [r7, #24]
 800bc74:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bc78:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 800bc7c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800bc80:	edd7 7a07 	vldr	s15, [r7, #28]
 800bc84:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bc88:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800bc8c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800bc90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bc96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bc9a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bc9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bca2:	ee06 0a10 	vmov	s12, r0
 800bca6:	ee06 1a90 	vmov	s13, r1
 800bcaa:	ee07 2a10 	vmov	s14, r2
 800bcae:	ee07 3a90 	vmov	s15, r3
}
 800bcb2:	eeb0 0a46 	vmov.f32	s0, s12
 800bcb6:	eef0 0a66 	vmov.f32	s1, s13
 800bcba:	eeb0 1a47 	vmov.f32	s2, s14
 800bcbe:	eef0 1a67 	vmov.f32	s3, s15
 800bcc2:	3750      	adds	r7, #80	; 0x50
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bc90      	pop	{r4, r7}
 800bcc8:	4770      	bx	lr

0800bcca <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 800bcca:	b490      	push	{r4, r7}
 800bccc:	b094      	sub	sp, #80	; 0x50
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	eef0 4a40 	vmov.f32	s9, s0
 800bcd4:	eeb0 5a60 	vmov.f32	s10, s1
 800bcd8:	eef0 5a41 	vmov.f32	s11, s2
 800bcdc:	eeb0 6a61 	vmov.f32	s12, s3
 800bce0:	eef0 6a42 	vmov.f32	s13, s4
 800bce4:	eeb0 7a62 	vmov.f32	s14, s5
 800bce8:	eef0 7a43 	vmov.f32	s15, s6
 800bcec:	edc7 4a08 	vstr	s9, [r7, #32]
 800bcf0:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 800bcf4:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 800bcf8:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 800bcfc:	edc7 6a05 	vstr	s13, [r7, #20]
 800bd00:	ed87 7a06 	vstr	s14, [r7, #24]
 800bd04:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 800bd08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bd0c:	eeb1 7a67 	vneg.f32	s14, s15
 800bd10:	edd7 7a05 	vldr	s15, [r7, #20]
 800bd14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd18:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bd1c:	edd7 7a06 	vldr	s15, [r7, #24]
 800bd20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd24:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bd28:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bd2c:	edd7 7a07 	vldr	s15, [r7, #28]
 800bd30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd34:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bd38:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 800bd3c:	ed97 7a08 	vldr	s14, [r7, #32]
 800bd40:	edd7 7a05 	vldr	s15, [r7, #20]
 800bd44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd48:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bd4c:	edd7 7a07 	vldr	s15, [r7, #28]
 800bd50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd54:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd58:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bd5c:	edd7 7a06 	vldr	s15, [r7, #24]
 800bd60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd64:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bd68:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800bd6c:	ed97 7a08 	vldr	s14, [r7, #32]
 800bd70:	edd7 7a06 	vldr	s15, [r7, #24]
 800bd74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd78:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800bd7c:	edd7 7a07 	vldr	s15, [r7, #28]
 800bd80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd84:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bd88:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bd8c:	edd7 7a05 	vldr	s15, [r7, #20]
 800bd90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bd94:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bd98:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 800bd9c:	ed97 7a08 	vldr	s14, [r7, #32]
 800bda0:	edd7 7a07 	vldr	s15, [r7, #28]
 800bda4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bda8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800bdac:	edd7 7a06 	vldr	s15, [r7, #24]
 800bdb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bdb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bdb8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bdbc:	edd7 7a05 	vldr	s15, [r7, #20]
 800bdc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bdc4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bdc8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800bdcc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800bdd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bdd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bdd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bdda:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bddc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bdde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bde0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bde2:	ee06 0a10 	vmov	s12, r0
 800bde6:	ee06 1a90 	vmov	s13, r1
 800bdea:	ee07 2a10 	vmov	s14, r2
 800bdee:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 800bdf2:	eeb0 0a46 	vmov.f32	s0, s12
 800bdf6:	eef0 0a66 	vmov.f32	s1, s13
 800bdfa:	eeb0 1a47 	vmov.f32	s2, s14
 800bdfe:	eef0 1a67 	vmov.f32	s3, s15
 800be02:	3750      	adds	r7, #80	; 0x50
 800be04:	46bd      	mov	sp, r7
 800be06:	bc90      	pop	{r4, r7}
 800be08:	4770      	bx	lr

0800be0a <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800be0a:	b590      	push	{r4, r7, lr}
 800be0c:	b093      	sub	sp, #76	; 0x4c
 800be0e:	af00      	add	r7, sp, #0
 800be10:	eeb0 6a40 	vmov.f32	s12, s0
 800be14:	eef0 6a60 	vmov.f32	s13, s1
 800be18:	eeb0 7a41 	vmov.f32	s14, s2
 800be1c:	eef0 7a61 	vmov.f32	s15, s3
 800be20:	ed87 6a04 	vstr	s12, [r7, #16]
 800be24:	edc7 6a05 	vstr	s13, [r7, #20]
 800be28:	ed87 7a06 	vstr	s14, [r7, #24]
 800be2c:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800be30:	ed97 7a04 	vldr	s14, [r7, #16]
 800be34:	edd7 7a04 	vldr	s15, [r7, #16]
 800be38:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be3c:	edd7 6a05 	vldr	s13, [r7, #20]
 800be40:	edd7 7a05 	vldr	s15, [r7, #20]
 800be44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be48:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be4c:	edd7 6a06 	vldr	s13, [r7, #24]
 800be50:	edd7 7a06 	vldr	s15, [r7, #24]
 800be54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be58:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800be60:	edd7 7a07 	vldr	s15, [r7, #28]
 800be64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be6c:	eeb0 0a67 	vmov.f32	s0, s15
 800be70:	f7ff fc10 	bl	800b694 <FusionFastInverseSqrt>
 800be74:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 800be78:	ed97 7a04 	vldr	s14, [r7, #16]
 800be7c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800be80:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800be84:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 800be88:	ed97 7a05 	vldr	s14, [r7, #20]
 800be8c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800be90:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800be94:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 800be98:	ed97 7a06 	vldr	s14, [r7, #24]
 800be9c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800bea0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800bea4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 800bea8:	ed97 7a07 	vldr	s14, [r7, #28]
 800beac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800beb0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800beb4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800beb8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800bebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bec0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bec2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bec6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bec8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800beca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800becc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bece:	ee06 0a10 	vmov	s12, r0
 800bed2:	ee06 1a90 	vmov	s13, r1
 800bed6:	ee07 2a10 	vmov	s14, r2
 800beda:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 800bede:	eeb0 0a46 	vmov.f32	s0, s12
 800bee2:	eef0 0a66 	vmov.f32	s1, s13
 800bee6:	eeb0 1a47 	vmov.f32	s2, s14
 800beea:	eef0 1a67 	vmov.f32	s3, s15
 800beee:	374c      	adds	r7, #76	; 0x4c
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd90      	pop	{r4, r7, pc}

0800bef4 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 800bef4:	b5b0      	push	{r4, r5, r7, lr}
 800bef6:	b088      	sub	sp, #32
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800befc:	4b0b      	ldr	r3, [pc, #44]	; (800bf2c <FusionAhrsInitialise+0x38>)
 800befe:	f107 0408 	add.w	r4, r7, #8
 800bf02:	461d      	mov	r5, r3
 800bf04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf08:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bf0c:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800bf10:	f107 0308 	add.w	r3, r7, #8
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 f86e 	bl	800bff8 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 f807 	bl	800bf30 <FusionAhrsReset>
}
 800bf22:	bf00      	nop
 800bf24:	3720      	adds	r7, #32
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bdb0      	pop	{r4, r5, r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	080154f0 	.word	0x080154f0

0800bf30 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800bf30:	b480      	push	{r7}
 800bf32:	b091      	sub	sp, #68	; 0x44
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bf3e:	619a      	str	r2, [r3, #24]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f04f 0200 	mov.w	r2, #0
 800bf46:	61da      	str	r2, [r3, #28]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f04f 0200 	mov.w	r2, #0
 800bf4e:	621a      	str	r2, [r3, #32]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f04f 0200 	mov.w	r2, #0
 800bf56:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f04f 0200 	mov.w	r2, #0
 800bf5e:	629a      	str	r2, [r3, #40]	; 0x28
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f04f 0200 	mov.w	r2, #0
 800bf66:	62da      	str	r2, [r3, #44]	; 0x2c
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f04f 0200 	mov.w	r2, #0
 800bf6e:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2201      	movs	r2, #1
 800bf74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	4a1e      	ldr	r2, [pc, #120]	; (800bff4 <FusionAhrsReset+0xc4>)
 800bf7c:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f04f 0200 	mov.w	r2, #0
 800bf8c:	645a      	str	r2, [r3, #68]	; 0x44
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f04f 0200 	mov.w	r2, #0
 800bf94:	649a      	str	r2, [r3, #72]	; 0x48
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f04f 0200 	mov.w	r2, #0
 800bf9c:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f04f 0200 	mov.w	r2, #0
 800bfa4:	651a      	str	r2, [r3, #80]	; 0x50
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f04f 0200 	mov.w	r2, #0
 800bfac:	655a      	str	r2, [r3, #84]	; 0x54
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f04f 0200 	mov.w	r2, #0
 800bfb4:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	695b      	ldr	r3, [r3, #20]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	695b      	ldr	r3, [r3, #20]
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bfe6:	bf00      	nop
 800bfe8:	3744      	adds	r7, #68	; 0x44
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	41200000 	.word	0x41200000

0800bff8 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	781a      	ldrb	r2, [r3, #0]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	685a      	ldr	r2, [r3, #4]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	edd3 7a02 	vldr	s15, [r3, #8]
 800c018:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c020:	d007      	beq.n	800c032 <FusionAhrsSetSettings+0x3a>
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	edd3 7a02 	vldr	s15, [r3, #8]
 800c028:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c15c <FusionAhrsSetSettings+0x164>
 800c02c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c030:	e001      	b.n	800c036 <FusionAhrsSetSettings+0x3e>
 800c032:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800c160 <FusionAhrsSetSettings+0x168>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	edd3 7a03 	vldr	s15, [r3, #12]
 800c042:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c04a:	d01b      	beq.n	800c084 <FusionAhrsSetSettings+0x8c>
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	edd3 7a03 	vldr	s15, [r3, #12]
 800c052:	eeb0 0a67 	vmov.f32	s0, s15
 800c056:	f7ff fb09 	bl	800b66c <FusionDegreesToRadians>
 800c05a:	eef0 7a40 	vmov.f32	s15, s0
 800c05e:	eeb0 0a67 	vmov.f32	s0, s15
 800c062:	f006 ff1f 	bl	8012ea4 <sinf>
 800c066:	eef0 7a40 	vmov.f32	s15, s0
 800c06a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c06e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c072:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800c076:	eeb0 0a67 	vmov.f32	s0, s15
 800c07a:	f006 fff7 	bl	801306c <powf>
 800c07e:	eef0 7a40 	vmov.f32	s15, s0
 800c082:	e001      	b.n	800c088 <FusionAhrsSetSettings+0x90>
 800c084:	eddf 7a36 	vldr	s15, [pc, #216]	; 800c160 <FusionAhrsSetSettings+0x168>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	edd3 7a04 	vldr	s15, [r3, #16]
 800c094:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c09c:	d01b      	beq.n	800c0d6 <FusionAhrsSetSettings+0xde>
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	edd3 7a04 	vldr	s15, [r3, #16]
 800c0a4:	eeb0 0a67 	vmov.f32	s0, s15
 800c0a8:	f7ff fae0 	bl	800b66c <FusionDegreesToRadians>
 800c0ac:	eef0 7a40 	vmov.f32	s15, s0
 800c0b0:	eeb0 0a67 	vmov.f32	s0, s15
 800c0b4:	f006 fef6 	bl	8012ea4 <sinf>
 800c0b8:	eef0 7a40 	vmov.f32	s15, s0
 800c0bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c0c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c0c4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800c0c8:	eeb0 0a67 	vmov.f32	s0, s15
 800c0cc:	f006 ffce 	bl	801306c <powf>
 800c0d0:	eef0 7a40 	vmov.f32	s15, s0
 800c0d4:	e001      	b.n	800c0da <FusionAhrsSetSettings+0xe2>
 800c0d6:	eddf 7a22 	vldr	s15, [pc, #136]	; 800c160 <FusionAhrsSetSettings+0x168>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	695a      	ldr	r2, [r3, #20]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	695b      	ldr	r3, [r3, #20]
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	695b      	ldr	r3, [r3, #20]
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	edd3 7a01 	vldr	s15, [r3, #4]
 800c102:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c10a:	d003      	beq.n	800c114 <FusionAhrsSetSettings+0x11c>
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	695b      	ldr	r3, [r3, #20]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d105      	bne.n	800c120 <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	4a13      	ldr	r2, [pc, #76]	; (800c164 <FusionAhrsSetSettings+0x16c>)
 800c118:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	4a11      	ldr	r2, [pc, #68]	; (800c164 <FusionAhrsSetSettings+0x16c>)
 800c11e:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c126:	f083 0301 	eor.w	r3, r3, #1
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d003      	beq.n	800c138 <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	685a      	ldr	r2, [r3, #4]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	edd3 7a01 	vldr	s15, [r3, #4]
 800c13e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800c142:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c146:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c14a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 800c154:	bf00      	nop
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	3f7ae148 	.word	0x3f7ae148
 800c160:	7f7fffff 	.word	0x7f7fffff
 800c164:	7f7fffff 	.word	0x7f7fffff

0800c168 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 800c168:	b590      	push	{r4, r7, lr}
 800c16a:	b0bf      	sub	sp, #252	; 0xfc
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c170:	eeb0 5a61 	vmov.f32	s10, s3
 800c174:	eef0 5a42 	vmov.f32	s11, s4
 800c178:	eeb0 6a62 	vmov.f32	s12, s5
 800c17c:	eef0 6a43 	vmov.f32	s13, s6
 800c180:	eeb0 7a63 	vmov.f32	s14, s7
 800c184:	eef0 7a44 	vmov.f32	s15, s8
 800c188:	edc7 4a01 	vstr	s9, [r7, #4]
 800c18c:	ed87 0a08 	vstr	s0, [r7, #32]
 800c190:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 800c194:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 800c198:	ed87 5a05 	vstr	s10, [r7, #20]
 800c19c:	edc7 5a06 	vstr	s11, [r7, #24]
 800c1a0:	ed87 6a07 	vstr	s12, [r7, #28]
 800c1a4:	edc7 6a02 	vstr	s13, [r7, #8]
 800c1a8:	ed87 7a03 	vstr	s14, [r7, #12]
 800c1ac:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800c1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b2:	3328      	adds	r3, #40	; 0x28
 800c1b4:	f107 0214 	add.w	r2, r7, #20
 800c1b8:	ca07      	ldmia	r2, {r0, r1, r2}
 800c1ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 800c1be:	edd7 7a08 	vldr	s15, [r7, #32]
 800c1c2:	eeb0 7ae7 	vabs.f32	s14, s15
 800c1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c8:	edd3 7a02 	vldr	s15, [r3, #8]
 800c1cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d4:	dc17      	bgt.n	800c206 <FusionAhrsUpdate+0x9e>
 800c1d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c1da:	eeb0 7ae7 	vabs.f32	s14, s15
 800c1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e0:	edd3 7a02 	vldr	s15, [r3, #8]
 800c1e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ec:	dc0b      	bgt.n	800c206 <FusionAhrsUpdate+0x9e>
 800c1ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1f2:	eeb0 7ae7 	vabs.f32	s14, s15
 800c1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f8:	edd3 7a02 	vldr	s15, [r3, #8]
 800c1fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c204:	dd15      	ble.n	800c232 <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 800c206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c208:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800c20c:	3318      	adds	r3, #24
 800c20e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 800c214:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c216:	f7ff fe8b 	bl	800bf30 <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 800c21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21c:	f103 0418 	add.w	r4, r3, #24
 800c220:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c224:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 800c22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22c:	2201      	movs	r2, #1
 800c22e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800c232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c234:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d02d      	beq.n	800c298 <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 800c23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c244:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800c248:	edd7 7a01 	vldr	s15, [r7, #4]
 800c24c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c250:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c256:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 800c25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800c260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c262:	edd3 7a01 	vldr	s15, [r3, #4]
 800c266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c26e:	d407      	bmi.n	800c280 <FusionAhrsUpdate+0x118>
 800c270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c272:	edd3 7a01 	vldr	s15, [r3, #4]
 800c276:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c27e:	d10b      	bne.n	800c298 <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 800c280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c282:	685a      	ldr	r2, [r3, #4]
 800c284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c286:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 800c288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28a:	2200      	movs	r2, #0
 800c28c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 800c290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c292:	2200      	movs	r2, #0
 800c294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 800c298:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c29a:	f000 faf4 	bl	800c886 <HalfGravity>
 800c29e:	eef0 6a40 	vmov.f32	s13, s0
 800c2a2:	eeb0 7a60 	vmov.f32	s14, s1
 800c2a6:	eef0 7a41 	vmov.f32	s15, s2
 800c2aa:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 800c2ae:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 800c2b2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800c2b6:	f04f 0300 	mov.w	r3, #0
 800c2ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c2be:	f04f 0300 	mov.w	r3, #0
 800c2c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c2c6:	f04f 0300 	mov.w	r3, #0
 800c2ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 800c2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 800c2d6:	edd7 6a05 	vldr	s13, [r7, #20]
 800c2da:	ed97 7a06 	vldr	s14, [r7, #24]
 800c2de:	edd7 7a07 	vldr	s15, [r7, #28]
 800c2e2:	eeb0 0a66 	vmov.f32	s0, s13
 800c2e6:	eef0 0a47 	vmov.f32	s1, s14
 800c2ea:	eeb0 1a67 	vmov.f32	s2, s15
 800c2ee:	f7ff fa01 	bl	800b6f4 <FusionVectorIsZero>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	f083 0301 	eor.w	r3, r3, #1
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	f000 809c 	beq.w	800c438 <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 800c300:	edd7 6a05 	vldr	s13, [r7, #20]
 800c304:	ed97 7a06 	vldr	s14, [r7, #24]
 800c308:	edd7 7a07 	vldr	s15, [r7, #28]
 800c30c:	eeb0 0a66 	vmov.f32	s0, s13
 800c310:	eef0 0a47 	vmov.f32	s1, s14
 800c314:	eeb0 1a67 	vmov.f32	s2, s15
 800c318:	f7ff fc22 	bl	800bb60 <FusionVectorNormalise>
 800c31c:	eef0 6a40 	vmov.f32	s13, s0
 800c320:	eeb0 7a60 	vmov.f32	s14, s1
 800c324:	eef0 7a41 	vmov.f32	s15, s2
 800c328:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 800c32c:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 800c330:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800c334:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c336:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 800c33a:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800c33e:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 800c342:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800c346:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800c34a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800c34e:	eef0 1a45 	vmov.f32	s3, s10
 800c352:	eeb0 2a65 	vmov.f32	s4, s11
 800c356:	eef0 2a46 	vmov.f32	s5, s12
 800c35a:	eeb0 0a66 	vmov.f32	s0, s13
 800c35e:	eef0 0a47 	vmov.f32	s1, s14
 800c362:	eeb0 1a67 	vmov.f32	s2, s15
 800c366:	f000 fc55 	bl	800cc14 <Feedback>
 800c36a:	eef0 6a40 	vmov.f32	s13, s0
 800c36e:	eeb0 7a60 	vmov.f32	s14, s1
 800c372:	eef0 7a41 	vmov.f32	s15, s2
 800c376:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 800c37a:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 800c37e:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 800c382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c384:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d118      	bne.n	800c3be <FusionAhrsUpdate+0x256>
 800c38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38e:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800c392:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800c396:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c39a:	eeb0 0a66 	vmov.f32	s0, s13
 800c39e:	eef0 0a47 	vmov.f32	s1, s14
 800c3a2:	eeb0 1a67 	vmov.f32	s2, s15
 800c3a6:	f7ff fb91 	bl	800bacc <FusionVectorMagnitudeSquared>
 800c3aa:	eeb0 7a40 	vmov.f32	s14, s0
 800c3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b0:	edd3 7a03 	vldr	s15, [r3, #12]
 800c3b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3bc:	d80a      	bhi.n	800c3d4 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 800c3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 800c3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3ca:	f1a3 0209 	sub.w	r2, r3, #9
 800c3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d0:	661a      	str	r2, [r3, #96]	; 0x60
 800c3d2:	e004      	b.n	800c3de <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 800c3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3d8:	1c5a      	adds	r2, r3, #1
 800c3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3dc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 800c3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	dd07      	ble.n	800c3fa <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 800c3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 800c3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800c3f8:	e004      	b.n	800c404 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fc:	695b      	ldr	r3, [r3, #20]
 800c3fe:	461a      	mov	r2, r3
 800c400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c402:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800c404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c406:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40a:	695b      	ldr	r3, [r3, #20]
 800c40c:	461a      	mov	r2, r3
 800c40e:	2100      	movs	r1, #0
 800c410:	f000 fcb5 	bl	800cd7e <Clamp>
 800c414:	4602      	mov	r2, r0
 800c416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c418:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 800c41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c420:	f083 0301 	eor.w	r3, r3, #1
 800c424:	b2db      	uxtb	r3, r3
 800c426:	2b00      	cmp	r3, #0
 800c428:	d006      	beq.n	800c438 <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 800c42a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c42c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c430:	3244      	adds	r2, #68	; 0x44
 800c432:	ca07      	ldmia	r2, {r0, r1, r2}
 800c434:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800c438:	f04f 0300 	mov.w	r3, #0
 800c43c:	673b      	str	r3, [r7, #112]	; 0x70
 800c43e:	f04f 0300 	mov.w	r3, #0
 800c442:	677b      	str	r3, [r7, #116]	; 0x74
 800c444:	f04f 0300 	mov.w	r3, #0
 800c448:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = false;
 800c44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44c:	2200      	movs	r2, #0
 800c44e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 800c452:	edd7 6a02 	vldr	s13, [r7, #8]
 800c456:	ed97 7a03 	vldr	s14, [r7, #12]
 800c45a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c45e:	eeb0 0a66 	vmov.f32	s0, s13
 800c462:	eef0 0a47 	vmov.f32	s1, s14
 800c466:	eeb0 1a67 	vmov.f32	s2, s15
 800c46a:	f7ff f943 	bl	800b6f4 <FusionVectorIsZero>
 800c46e:	4603      	mov	r3, r0
 800c470:	f083 0301 	eor.w	r3, r3, #1
 800c474:	b2db      	uxtb	r3, r3
 800c476:	2b00      	cmp	r3, #0
 800c478:	f000 80d1 	beq.w	800c61e <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800c47c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c47e:	f000 fabf 	bl	800ca00 <HalfMagnetic>
 800c482:	eef0 6a40 	vmov.f32	s13, s0
 800c486:	eeb0 7a60 	vmov.f32	s14, s1
 800c48a:	eef0 7a41 	vmov.f32	s15, s2
 800c48e:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 800c492:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 800c496:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800c49a:	ed97 5a02 	vldr	s10, [r7, #8]
 800c49e:	edd7 5a03 	vldr	s11, [r7, #12]
 800c4a2:	ed97 6a04 	vldr	s12, [r7, #16]
 800c4a6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800c4aa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800c4ae:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c4b2:	eef0 1a45 	vmov.f32	s3, s10
 800c4b6:	eeb0 2a65 	vmov.f32	s4, s11
 800c4ba:	eef0 2a46 	vmov.f32	s5, s12
 800c4be:	eeb0 0a66 	vmov.f32	s0, s13
 800c4c2:	eef0 0a47 	vmov.f32	s1, s14
 800c4c6:	eeb0 1a67 	vmov.f32	s2, s15
 800c4ca:	f7ff fa43 	bl	800b954 <FusionVectorCrossProduct>
 800c4ce:	eef0 6a40 	vmov.f32	s13, s0
 800c4d2:	eeb0 7a60 	vmov.f32	s14, s1
 800c4d6:	eef0 7a41 	vmov.f32	s15, s2
 800c4da:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800c4de:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 800c4e2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 800c4e6:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800c4ea:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800c4ee:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800c4f2:	eeb0 0a66 	vmov.f32	s0, s13
 800c4f6:	eef0 0a47 	vmov.f32	s1, s14
 800c4fa:	eeb0 1a67 	vmov.f32	s2, s15
 800c4fe:	f7ff fb2f 	bl	800bb60 <FusionVectorNormalise>
 800c502:	eef0 6a40 	vmov.f32	s13, s0
 800c506:	eeb0 7a60 	vmov.f32	s14, s1
 800c50a:	eef0 7a41 	vmov.f32	s15, s2
 800c50e:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 800c512:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 800c516:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800c51a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c51c:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 800c520:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 800c524:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800c528:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800c52c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800c530:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800c534:	eef0 1a45 	vmov.f32	s3, s10
 800c538:	eeb0 2a65 	vmov.f32	s4, s11
 800c53c:	eef0 2a46 	vmov.f32	s5, s12
 800c540:	eeb0 0a66 	vmov.f32	s0, s13
 800c544:	eef0 0a47 	vmov.f32	s1, s14
 800c548:	eeb0 1a67 	vmov.f32	s2, s15
 800c54c:	f000 fb62 	bl	800cc14 <Feedback>
 800c550:	eef0 6a40 	vmov.f32	s13, s0
 800c554:	eeb0 7a60 	vmov.f32	s14, s1
 800c558:	eef0 7a41 	vmov.f32	s15, s2
 800c55c:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 800c560:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 800c564:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 800c568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d118      	bne.n	800c5a4 <FusionAhrsUpdate+0x43c>
 800c572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c574:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800c578:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800c57c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800c580:	eeb0 0a66 	vmov.f32	s0, s13
 800c584:	eef0 0a47 	vmov.f32	s1, s14
 800c588:	eeb0 1a67 	vmov.f32	s2, s15
 800c58c:	f7ff fa9e 	bl	800bacc <FusionVectorMagnitudeSquared>
 800c590:	eeb0 7a40 	vmov.f32	s14, s0
 800c594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c596:	edd3 7a04 	vldr	s15, [r3, #16]
 800c59a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a2:	d80a      	bhi.n	800c5ba <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 800c5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 800c5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5b0:	f1a3 0209 	sub.w	r2, r3, #9
 800c5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b6:	66da      	str	r2, [r3, #108]	; 0x6c
 800c5b8:	e004      	b.n	800c5c4 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 800c5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5be:	1c5a      	adds	r2, r3, #1
 800c5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c2:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 800c5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	dd07      	ble.n	800c5e0 <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 800c5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 800c5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800c5de:	e004      	b.n	800c5ea <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800c5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e2:	695b      	ldr	r3, [r3, #20]
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800c5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ec:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800c5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f0:	695b      	ldr	r3, [r3, #20]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	f000 fbc2 	bl	800cd7e <Clamp>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fe:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 800c600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c602:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c606:	f083 0301 	eor.w	r3, r3, #1
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d006      	beq.n	800c61e <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 800c610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c612:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800c616:	3250      	adds	r2, #80	; 0x50
 800c618:	ca07      	ldmia	r2, {r0, r1, r2}
 800c61a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800c61e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800c622:	f7ff f823 	bl	800b66c <FusionDegreesToRadians>
 800c626:	eeb0 6a40 	vmov.f32	s12, s0
 800c62a:	edd7 6a08 	vldr	s13, [r7, #32]
 800c62e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c632:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c636:	eef0 1a46 	vmov.f32	s3, s12
 800c63a:	eeb0 0a66 	vmov.f32	s0, s13
 800c63e:	eef0 0a47 	vmov.f32	s1, s14
 800c642:	eeb0 1a67 	vmov.f32	s2, s15
 800c646:	f7ff f8f3 	bl	800b830 <FusionVectorMultiplyScalar>
 800c64a:	eef0 6a40 	vmov.f32	s13, s0
 800c64e:	eeb0 7a60 	vmov.f32	s14, s1
 800c652:	eef0 7a41 	vmov.f32	s15, s2
 800c656:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 800c65a:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 800c65e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 800c662:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 800c666:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800c66a:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800c66e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800c672:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800c676:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c67a:	eef0 1a45 	vmov.f32	s3, s10
 800c67e:	eeb0 2a65 	vmov.f32	s4, s11
 800c682:	eef0 2a46 	vmov.f32	s5, s12
 800c686:	eeb0 0a66 	vmov.f32	s0, s13
 800c68a:	eef0 0a47 	vmov.f32	s1, s14
 800c68e:	eeb0 1a67 	vmov.f32	s2, s15
 800c692:	f7ff f85f 	bl	800b754 <FusionVectorAdd>
 800c696:	eef0 6a40 	vmov.f32	s13, s0
 800c69a:	eeb0 7a60 	vmov.f32	s14, s1
 800c69e:	eef0 7a41 	vmov.f32	s15, s2
 800c6a2:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 800c6a6:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800c6aa:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800c6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b0:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800c6b4:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800c6b8:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800c6bc:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800c6c0:	eef0 1a46 	vmov.f32	s3, s12
 800c6c4:	eeb0 0a66 	vmov.f32	s0, s13
 800c6c8:	eef0 0a47 	vmov.f32	s1, s14
 800c6cc:	eeb0 1a67 	vmov.f32	s2, s15
 800c6d0:	f7ff f8ae 	bl	800b830 <FusionVectorMultiplyScalar>
 800c6d4:	eef0 6a40 	vmov.f32	s13, s0
 800c6d8:	eeb0 7a60 	vmov.f32	s14, s1
 800c6dc:	eef0 7a41 	vmov.f32	s15, s2
 800c6e0:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 800c6e4:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 800c6e8:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800c6ec:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 800c6f0:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 800c6f4:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 800c6f8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800c6fc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800c700:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800c704:	eef0 1a45 	vmov.f32	s3, s10
 800c708:	eeb0 2a65 	vmov.f32	s4, s11
 800c70c:	eef0 2a46 	vmov.f32	s5, s12
 800c710:	eeb0 0a66 	vmov.f32	s0, s13
 800c714:	eef0 0a47 	vmov.f32	s1, s14
 800c718:	eeb0 1a67 	vmov.f32	s2, s15
 800c71c:	f7ff f81a 	bl	800b754 <FusionVectorAdd>
 800c720:	eef0 6a40 	vmov.f32	s13, s0
 800c724:	eeb0 7a60 	vmov.f32	s14, s1
 800c728:	eef0 7a41 	vmov.f32	s15, s2
 800c72c:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 800c730:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 800c734:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 800c738:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800c73c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c740:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c744:	edd7 1a01 	vldr	s3, [r7, #4]
 800c748:	eeb0 0a66 	vmov.f32	s0, s13
 800c74c:	eef0 0a47 	vmov.f32	s1, s14
 800c750:	eeb0 1a67 	vmov.f32	s2, s15
 800c754:	f7ff f86c 	bl	800b830 <FusionVectorMultiplyScalar>
 800c758:	eef0 6a40 	vmov.f32	s13, s0
 800c75c:	eeb0 7a60 	vmov.f32	s14, s1
 800c760:	eef0 7a41 	vmov.f32	s15, s2
 800c764:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 800c768:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 800c76c:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 800c770:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 800c774:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 800c778:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	ed93 6a06 	vldr	s12, [r3, #24]
 800c782:	edd3 6a07 	vldr	s13, [r3, #28]
 800c786:	ed93 7a08 	vldr	s14, [r3, #32]
 800c78a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c78e:	eeb0 2a64 	vmov.f32	s4, s9
 800c792:	eef0 2a45 	vmov.f32	s5, s10
 800c796:	eeb0 3a65 	vmov.f32	s6, s11
 800c79a:	eeb0 0a46 	vmov.f32	s0, s12
 800c79e:	eef0 0a66 	vmov.f32	s1, s13
 800c7a2:	eeb0 1a47 	vmov.f32	s2, s14
 800c7a6:	eef0 1a67 	vmov.f32	s3, s15
 800c7aa:	f7ff fa8e 	bl	800bcca <FusionQuaternionMultiplyVector>
 800c7ae:	eeb0 6a40 	vmov.f32	s12, s0
 800c7b2:	eef0 6a60 	vmov.f32	s13, s1
 800c7b6:	eeb0 7a41 	vmov.f32	s14, s2
 800c7ba:	eef0 7a61 	vmov.f32	s15, s3
 800c7be:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 800c7c2:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 800c7c6:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 800c7ca:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 800c7ce:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c7d0:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 800c7d4:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 800c7d8:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 800c7dc:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800c7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e2:	ed93 6a06 	vldr	s12, [r3, #24]
 800c7e6:	edd3 6a07 	vldr	s13, [r3, #28]
 800c7ea:	ed93 7a08 	vldr	s14, [r3, #32]
 800c7ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c7f2:	eeb0 2a44 	vmov.f32	s4, s8
 800c7f6:	eef0 2a64 	vmov.f32	s5, s9
 800c7fa:	eeb0 3a45 	vmov.f32	s6, s10
 800c7fe:	eef0 3a65 	vmov.f32	s7, s11
 800c802:	eeb0 0a46 	vmov.f32	s0, s12
 800c806:	eef0 0a66 	vmov.f32	s1, s13
 800c80a:	eeb0 1a47 	vmov.f32	s2, s14
 800c80e:	eef0 1a67 	vmov.f32	s3, s15
 800c812:	f7ff f9f8 	bl	800bc06 <FusionQuaternionAdd>
 800c816:	eeb0 6a40 	vmov.f32	s12, s0
 800c81a:	eef0 6a60 	vmov.f32	s13, s1
 800c81e:	eeb0 7a41 	vmov.f32	s14, s2
 800c822:	eef0 7a61 	vmov.f32	s15, s3
 800c826:	ed84 6a06 	vstr	s12, [r4, #24]
 800c82a:	edc4 6a07 	vstr	s13, [r4, #28]
 800c82e:	ed84 7a08 	vstr	s14, [r4, #32]
 800c832:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 800c836:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83a:	ed93 6a06 	vldr	s12, [r3, #24]
 800c83e:	edd3 6a07 	vldr	s13, [r3, #28]
 800c842:	ed93 7a08 	vldr	s14, [r3, #32]
 800c846:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c84a:	eeb0 0a46 	vmov.f32	s0, s12
 800c84e:	eef0 0a66 	vmov.f32	s1, s13
 800c852:	eeb0 1a47 	vmov.f32	s2, s14
 800c856:	eef0 1a67 	vmov.f32	s3, s15
 800c85a:	f7ff fad6 	bl	800be0a <FusionQuaternionNormalise>
 800c85e:	eeb0 6a40 	vmov.f32	s12, s0
 800c862:	eef0 6a60 	vmov.f32	s13, s1
 800c866:	eeb0 7a41 	vmov.f32	s14, s2
 800c86a:	eef0 7a61 	vmov.f32	s15, s3
 800c86e:	ed84 6a06 	vstr	s12, [r4, #24]
 800c872:	edc4 6a07 	vstr	s13, [r4, #28]
 800c876:	ed84 7a08 	vstr	s14, [r4, #32]
 800c87a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800c87e:	bf00      	nop
 800c880:	37fc      	adds	r7, #252	; 0xfc
 800c882:	46bd      	mov	sp, r7
 800c884:	bd90      	pop	{r4, r7, pc}

0800c886 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 800c886:	b480      	push	{r7}
 800c888:	b093      	sub	sp, #76	; 0x4c
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	2b01      	cmp	r3, #1
 800c894:	dc02      	bgt.n	800c89c <HalfGravity+0x16>
 800c896:	2b00      	cmp	r3, #0
 800c898:	da03      	bge.n	800c8a2 <HalfGravity+0x1c>
 800c89a:	e094      	b.n	800c9c6 <HalfGravity+0x140>
 800c89c:	2b02      	cmp	r3, #2
 800c89e:	d048      	beq.n	800c932 <HalfGravity+0xac>
 800c8a0:	e091      	b.n	800c9c6 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	ed93 7a07 	vldr	s14, [r3, #28]
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c8ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	edd3 6a06 	vldr	s13, [r3, #24]
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	edd3 7a08 	vldr	s15, [r3, #32]
 800c8be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8c2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c8c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	ed93 7a08 	vldr	s14, [r3, #32]
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c8d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	edd3 6a06 	vldr	s13, [r3, #24]
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	edd3 7a07 	vldr	s15, [r3, #28]
 800c8e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8ea:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c8ee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	ed93 7a06 	vldr	s14, [r3, #24]
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	edd3 7a06 	vldr	s15, [r3, #24]
 800c8fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c902:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c906:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c91a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c91e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 800c922:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c926:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c92a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c92c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c930:	e052      	b.n	800c9d8 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	ed93 7a06 	vldr	s14, [r3, #24]
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	edd3 7a08 	vldr	s15, [r3, #32]
 800c93e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	edd3 6a07 	vldr	s13, [r3, #28]
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c94e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c952:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c956:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	ed93 7a08 	vldr	s14, [r3, #32]
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	edd3 6a06 	vldr	s13, [r3, #24]
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	edd3 7a07 	vldr	s15, [r3, #28]
 800c976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c97a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c97e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 800c982:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	ed93 7a06 	vldr	s14, [r3, #24]
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	edd3 7a06 	vldr	s15, [r3, #24]
 800c992:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c996:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c99a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c9aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9ae:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800c9b2:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 800c9b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c9ba:	f107 0218 	add.w	r2, r7, #24
 800c9be:	ca07      	ldmia	r2, {r0, r1, r2}
 800c9c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c9c4:	e008      	b.n	800c9d8 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800c9c6:	f04f 0300 	mov.w	r3, #0
 800c9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9cc:	f04f 0300 	mov.w	r3, #0
 800c9d0:	643b      	str	r3, [r7, #64]	; 0x40
 800c9d2:	f04f 0300 	mov.w	r3, #0
 800c9d6:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 800c9d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c9da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9de:	ee06 1a90 	vmov	s13, r1
 800c9e2:	ee07 2a10 	vmov	s14, r2
 800c9e6:	ee07 3a90 	vmov	s15, r3
 800c9ea:	eeb0 0a66 	vmov.f32	s0, s13
 800c9ee:	eef0 0a47 	vmov.f32	s1, s14
 800c9f2:	eeb0 1a67 	vmov.f32	s2, s15
 800c9f6:	374c      	adds	r7, #76	; 0x4c
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 800ca00:	b480      	push	{r7}
 800ca02:	b097      	sub	sp, #92	; 0x5c
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	f000 809a 	beq.w	800cb46 <HalfMagnetic+0x146>
 800ca12:	2b02      	cmp	r3, #2
 800ca14:	f300 80e1 	bgt.w	800cbda <HalfMagnetic+0x1da>
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d002      	beq.n	800ca22 <HalfMagnetic+0x22>
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d048      	beq.n	800cab2 <HalfMagnetic+0xb2>
 800ca20:	e0db      	b.n	800cbda <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	ed93 7a07 	vldr	s14, [r3, #28]
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	edd3 7a08 	vldr	s15, [r3, #32]
 800ca2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	edd3 6a06 	vldr	s13, [r3, #24]
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ca3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca42:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800ca46:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	ed93 7a06 	vldr	s14, [r3, #24]
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	edd3 7a06 	vldr	s15, [r3, #24]
 800ca56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ca5e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	edd3 6a08 	vldr	s13, [r3, #32]
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	edd3 7a08 	vldr	s15, [r3, #32]
 800ca6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca72:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800ca76:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	ed93 7a08 	vldr	s14, [r3, #32]
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ca86:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	edd3 6a06 	vldr	s13, [r3, #24]
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	edd3 7a07 	vldr	s15, [r3, #28]
 800ca96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca9a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800ca9e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 800caa2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800caa6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800caaa:	ca07      	ldmia	r2, {r0, r1, r2}
 800caac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cab0:	e09c      	b.n	800cbec <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	ed93 7a06 	vldr	s14, [r3, #24]
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	edd3 7a06 	vldr	s15, [r3, #24]
 800cabe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cac2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cac6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	edd3 6a07 	vldr	s13, [r3, #28]
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	edd3 7a07 	vldr	s15, [r3, #28]
 800cad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cada:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800cade:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	ed93 7a06 	vldr	s14, [r3, #24]
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800caee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	edd3 6a07 	vldr	s13, [r3, #28]
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	edd3 7a08 	vldr	s15, [r3, #32]
 800cafe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cb02:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800cb06:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	ed93 7a07 	vldr	s14, [r3, #28]
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cb16:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	edd3 6a06 	vldr	s13, [r3, #24]
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	edd3 7a08 	vldr	s15, [r3, #32]
 800cb26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cb2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb2e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800cb32:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800cb36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cb3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cb3e:	ca07      	ldmia	r2, {r0, r1, r2}
 800cb40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cb44:	e052      	b.n	800cbec <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	ed93 7a07 	vldr	s14, [r3, #28]
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	edd3 7a08 	vldr	s15, [r3, #32]
 800cb52:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	edd3 6a06 	vldr	s13, [r3, #24]
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cb62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cb66:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb6a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800cb6e:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	ed93 7a06 	vldr	s14, [r3, #24]
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	edd3 7a06 	vldr	s15, [r3, #24]
 800cb7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cb86:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	edd3 6a08 	vldr	s13, [r3, #32]
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	edd3 7a08 	vldr	s15, [r3, #32]
 800cb96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cb9a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800cb9e:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	ed93 7a06 	vldr	s14, [r3, #24]
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	edd3 7a07 	vldr	s15, [r3, #28]
 800cbae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	edd3 6a08 	vldr	s13, [r3, #32]
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800cbbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cbc2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800cbc6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800cbca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cbce:	f107 021c 	add.w	r2, r7, #28
 800cbd2:	ca07      	ldmia	r2, {r0, r1, r2}
 800cbd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cbd8:	e008      	b.n	800cbec <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800cbda:	f04f 0300 	mov.w	r3, #0
 800cbde:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbe0:	f04f 0300 	mov.w	r3, #0
 800cbe4:	653b      	str	r3, [r7, #80]	; 0x50
 800cbe6:	f04f 0300 	mov.w	r3, #0
 800cbea:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 800cbec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cbee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbf2:	ee06 1a90 	vmov	s13, r1
 800cbf6:	ee07 2a10 	vmov	s14, r2
 800cbfa:	ee07 3a90 	vmov	s15, r3
 800cbfe:	eeb0 0a66 	vmov.f32	s0, s13
 800cc02:	eef0 0a47 	vmov.f32	s1, s14
 800cc06:	eeb0 1a67 	vmov.f32	s2, s15
 800cc0a:	375c      	adds	r7, #92	; 0x5c
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b090      	sub	sp, #64	; 0x40
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	eeb0 5a40 	vmov.f32	s10, s0
 800cc1e:	eef0 5a60 	vmov.f32	s11, s1
 800cc22:	eeb0 6a41 	vmov.f32	s12, s2
 800cc26:	eef0 6a61 	vmov.f32	s13, s3
 800cc2a:	eeb0 7a42 	vmov.f32	s14, s4
 800cc2e:	eef0 7a62 	vmov.f32	s15, s5
 800cc32:	ed87 5a07 	vstr	s10, [r7, #28]
 800cc36:	edc7 5a08 	vstr	s11, [r7, #32]
 800cc3a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800cc3e:	edc7 6a04 	vstr	s13, [r7, #16]
 800cc42:	ed87 7a05 	vstr	s14, [r7, #20]
 800cc46:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 800cc4a:	ed97 5a04 	vldr	s10, [r7, #16]
 800cc4e:	edd7 5a05 	vldr	s11, [r7, #20]
 800cc52:	ed97 6a06 	vldr	s12, [r7, #24]
 800cc56:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc5a:	ed97 7a08 	vldr	s14, [r7, #32]
 800cc5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cc62:	eef0 1a45 	vmov.f32	s3, s10
 800cc66:	eeb0 2a65 	vmov.f32	s4, s11
 800cc6a:	eef0 2a46 	vmov.f32	s5, s12
 800cc6e:	eeb0 0a66 	vmov.f32	s0, s13
 800cc72:	eef0 0a47 	vmov.f32	s1, s14
 800cc76:	eeb0 1a67 	vmov.f32	s2, s15
 800cc7a:	f7fe fed1 	bl	800ba20 <FusionVectorDotProduct>
 800cc7e:	eef0 7a40 	vmov.f32	s15, s0
 800cc82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc8a:	d540      	bpl.n	800cd0e <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 800cc8c:	ed97 5a04 	vldr	s10, [r7, #16]
 800cc90:	edd7 5a05 	vldr	s11, [r7, #20]
 800cc94:	ed97 6a06 	vldr	s12, [r7, #24]
 800cc98:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc9c:	ed97 7a08 	vldr	s14, [r7, #32]
 800cca0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cca4:	eef0 1a45 	vmov.f32	s3, s10
 800cca8:	eeb0 2a65 	vmov.f32	s4, s11
 800ccac:	eef0 2a46 	vmov.f32	s5, s12
 800ccb0:	eeb0 0a66 	vmov.f32	s0, s13
 800ccb4:	eef0 0a47 	vmov.f32	s1, s14
 800ccb8:	eeb0 1a67 	vmov.f32	s2, s15
 800ccbc:	f7fe fe4a 	bl	800b954 <FusionVectorCrossProduct>
 800ccc0:	eef0 6a40 	vmov.f32	s13, s0
 800ccc4:	eeb0 7a60 	vmov.f32	s14, s1
 800ccc8:	eef0 7a41 	vmov.f32	s15, s2
 800cccc:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 800ccd0:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 800ccd4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800ccd8:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800ccdc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800cce0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cce4:	eeb0 0a66 	vmov.f32	s0, s13
 800cce8:	eef0 0a47 	vmov.f32	s1, s14
 800ccec:	eeb0 1a67 	vmov.f32	s2, s15
 800ccf0:	f7fe ff36 	bl	800bb60 <FusionVectorNormalise>
 800ccf4:	eef0 6a40 	vmov.f32	s13, s0
 800ccf8:	eeb0 7a60 	vmov.f32	s14, s1
 800ccfc:	eef0 7a41 	vmov.f32	s15, s2
 800cd00:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800cd04:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800cd08:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800cd0c:	e025      	b.n	800cd5a <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 800cd0e:	ed97 5a04 	vldr	s10, [r7, #16]
 800cd12:	edd7 5a05 	vldr	s11, [r7, #20]
 800cd16:	ed97 6a06 	vldr	s12, [r7, #24]
 800cd1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd1e:	ed97 7a08 	vldr	s14, [r7, #32]
 800cd22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cd26:	eef0 1a45 	vmov.f32	s3, s10
 800cd2a:	eeb0 2a65 	vmov.f32	s4, s11
 800cd2e:	eef0 2a46 	vmov.f32	s5, s12
 800cd32:	eeb0 0a66 	vmov.f32	s0, s13
 800cd36:	eef0 0a47 	vmov.f32	s1, s14
 800cd3a:	eeb0 1a67 	vmov.f32	s2, s15
 800cd3e:	f7fe fe09 	bl	800b954 <FusionVectorCrossProduct>
 800cd42:	eef0 6a40 	vmov.f32	s13, s0
 800cd46:	eeb0 7a60 	vmov.f32	s14, s1
 800cd4a:	eef0 7a41 	vmov.f32	s15, s2
 800cd4e:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800cd52:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800cd56:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 800cd5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd60:	ee06 1a90 	vmov	s13, r1
 800cd64:	ee07 2a10 	vmov	s14, r2
 800cd68:	ee07 3a90 	vmov	s15, r3
 800cd6c:	eeb0 0a66 	vmov.f32	s0, s13
 800cd70:	eef0 0a47 	vmov.f32	s1, s14
 800cd74:	eeb0 1a67 	vmov.f32	s2, s15
 800cd78:	3740      	adds	r7, #64	; 0x40
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 800cd7e:	b480      	push	{r7}
 800cd80:	b085      	sub	sp, #20
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	60f8      	str	r0, [r7, #12]
 800cd86:	60b9      	str	r1, [r7, #8]
 800cd88:	607a      	str	r2, [r7, #4]
    if (value < min) {
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	da01      	bge.n	800cd96 <Clamp+0x18>
        return min;
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	e006      	b.n	800cda4 <Clamp+0x26>
    }
    if (value > max) {
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	dd01      	ble.n	800cda2 <Clamp+0x24>
        return max;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	e000      	b.n	800cda4 <Clamp+0x26>
    }
    return value;
 800cda2:	68fb      	ldr	r3, [r7, #12]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 800cdb0:	b490      	push	{r4, r7}
 800cdb2:	b08a      	sub	sp, #40	; 0x28
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	f107 0418 	add.w	r4, r7, #24
 800cdbe:	3318      	adds	r3, #24
 800cdc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cdc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cdc6:	69b8      	ldr	r0, [r7, #24]
 800cdc8:	69f9      	ldr	r1, [r7, #28]
 800cdca:	6a3a      	ldr	r2, [r7, #32]
 800cdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdce:	ee06 0a10 	vmov	s12, r0
 800cdd2:	ee06 1a90 	vmov	s13, r1
 800cdd6:	ee07 2a10 	vmov	s14, r2
 800cdda:	ee07 3a90 	vmov	s15, r3
}
 800cdde:	eeb0 0a46 	vmov.f32	s0, s12
 800cde2:	eef0 0a66 	vmov.f32	s1, s13
 800cde6:	eeb0 1a47 	vmov.f32	s2, s14
 800cdea:	eef0 1a67 	vmov.f32	s3, s15
 800cdee:	3728      	adds	r7, #40	; 0x28
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bc90      	pop	{r4, r7}
 800cdf4:	4770      	bx	lr

0800cdf6 <bmm150_init>:
 *  @brief This API is the entry point, Call this API before using other APIs.
 *  This API reads the chip-id of the sensor which is the first step to
 *  verify the sensor and updates the trim parameters of the sensor.
 */
int8_t bmm150_init(struct bmm150_dev *dev)
{
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b084      	sub	sp, #16
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	73bb      	strb	r3, [r7, #14]

    /* Power up the sensor from suspend to sleep mode */
    rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 800ce02:	6879      	ldr	r1, [r7, #4]
 800ce04:	2001      	movs	r0, #1
 800ce06:	f000 fa98 	bl	800d33a <set_power_control_bit>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800ce0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d11f      	bne.n	800ce56 <bmm150_init+0x60>
    {
        /* Start-up time delay of 3ms */
        dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	695b      	ldr	r3, [r3, #20]
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	6852      	ldr	r2, [r2, #4]
 800ce1e:	4611      	mov	r1, r2
 800ce20:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ce24:	4798      	blx	r3

        /* Chip ID of the sensor is read */
        rslt = bmm150_get_regs(BMM150_REG_CHIP_ID, &chip_id, 1, dev);
 800ce26:	f107 010e 	add.w	r1, r7, #14
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	2040      	movs	r0, #64	; 0x40
 800ce30:	f000 f843 	bl	800ceba <bmm150_get_regs>
 800ce34:	4603      	mov	r3, r0
 800ce36:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMM150_OK)
 800ce38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10a      	bne.n	800ce56 <bmm150_init+0x60>
        {
            /* Check for chip id validity */
            if (chip_id == BMM150_CHIP_ID)
 800ce40:	7bbb      	ldrb	r3, [r7, #14]
 800ce42:	2b32      	cmp	r3, #50	; 0x32
 800ce44:	d107      	bne.n	800ce56 <bmm150_init+0x60>
            {
                dev->chip_id = chip_id;
 800ce46:	7bba      	ldrb	r2, [r7, #14]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	701a      	strb	r2, [r3, #0]

                /* Function to update trim values */
                rslt = read_trim_registers(dev);
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 faae 	bl	800d3ae <read_trim_registers>
 800ce52:	4603      	mov	r3, r0
 800ce54:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800ce56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <bmm150_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmm150_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 800ce62:	b590      	push	{r4, r7, lr}
 800ce64:	b087      	sub	sp, #28
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	607a      	str	r2, [r7, #4]
 800ce6c:	603b      	str	r3, [r7, #0]
 800ce6e:	4603      	mov	r3, r0
 800ce70:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800ce72:	6838      	ldr	r0, [r7, #0]
 800ce74:	f000 fa3d 	bl	800d2f2 <null_ptr_check>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL) && (len != 0))
 800ce7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d112      	bne.n	800ceaa <bmm150_set_regs+0x48>
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00f      	beq.n	800ceaa <bmm150_set_regs+0x48>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00c      	beq.n	800ceaa <bmm150_set_regs+0x48>
        /* Write the data to the reg_addr */

        /* SPI write requires to set The MSB of reg_addr as 0
         * but in default the MSB is always 0
         */
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	691c      	ldr	r4, [r3, #16]
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	7bf8      	ldrb	r0, [r7, #15]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	68b9      	ldr	r1, [r7, #8]
 800ce9e:	47a0      	blx	r4
 800cea0:	4603      	mov	r3, r0
 800cea2:	461a      	mov	r2, r3
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	721a      	strb	r2, [r3, #8]
 800cea8:	e001      	b.n	800ceae <bmm150_set_regs+0x4c>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 800ceaa:	23ff      	movs	r3, #255	; 0xff
 800ceac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800ceae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	371c      	adds	r7, #28
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd90      	pop	{r4, r7, pc}

0800ceba <bmm150_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmm150_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmm150_dev *dev)
{
 800ceba:	b590      	push	{r4, r7, lr}
 800cebc:	b087      	sub	sp, #28
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
 800cec4:	603b      	str	r3, [r7, #0]
 800cec6:	4603      	mov	r3, r0
 800cec8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800ceca:	6838      	ldr	r0, [r7, #0]
 800cecc:	f000 fa11 	bl	800d2f2 <null_ptr_check>
 800ced0:	4603      	mov	r3, r0
 800ced2:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMM150_OK) && (reg_data != NULL))
 800ced4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d117      	bne.n	800cf0c <bmm150_get_regs+0x52>
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d014      	beq.n	800cf0c <bmm150_get_regs+0x52>
    {
        if (dev->intf != BMM150_I2C_INTF)
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	785b      	ldrb	r3, [r3, #1]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d003      	beq.n	800cef2 <bmm150_get_regs+0x38>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | 0x80;
 800ceea:	7bfb      	ldrb	r3, [r7, #15]
 800ceec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cef0:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	68dc      	ldr	r4, [r3, #12]
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	7bf8      	ldrb	r0, [r7, #15]
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	68b9      	ldr	r1, [r7, #8]
 800cf00:	47a0      	blx	r4
 800cf02:	4603      	mov	r3, r0
 800cf04:	461a      	mov	r2, r3
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	721a      	strb	r2, [r3, #8]
 800cf0a:	e001      	b.n	800cf10 <bmm150_get_regs+0x56>
    }
    else
    {
        rslt = BMM150_E_NULL_PTR;
 800cf0c:	23ff      	movs	r3, #255	; 0xff
 800cf0e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800cf10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	371c      	adds	r7, #28
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd90      	pop	{r4, r7, pc}

0800cf1c <bmm150_set_op_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bmm150_set_op_mode(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t pwr_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800cf26:	6838      	ldr	r0, [r7, #0]
 800cf28:	f000 f9e3 	bl	800d2f2 <null_ptr_check>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800cf30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d150      	bne.n	800cfda <bmm150_set_op_mode+0xbe>
    {
        pwr_mode = settings->pwr_mode;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	785b      	ldrb	r3, [r3, #1]
 800cf3c:	73bb      	strb	r3, [r7, #14]

        /* Select the power mode to set */
        switch (pwr_mode)
 800cf3e:	7bbb      	ldrb	r3, [r7, #14]
 800cf40:	2b04      	cmp	r3, #4
 800cf42:	d847      	bhi.n	800cfd4 <bmm150_set_op_mode+0xb8>
 800cf44:	a201      	add	r2, pc, #4	; (adr r2, 800cf4c <bmm150_set_op_mode+0x30>)
 800cf46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf4a:	bf00      	nop
 800cf4c:	0800cf61 	.word	0x0800cf61
 800cf50:	0800cf83 	.word	0x0800cf83
 800cf54:	0800cfd5 	.word	0x0800cfd5
 800cf58:	0800cfa5 	.word	0x0800cfa5
 800cf5c:	0800cfc7 	.word	0x0800cfc7
            case BMM150_POWERMODE_NORMAL:

                /* If the sensor is in suspend mode
                 * put the device to sleep mode
                 */
                rslt = suspend_to_sleep_mode(dev);
 800cf60:	6838      	ldr	r0, [r7, #0]
 800cf62:	f000 fae8 	bl	800d536 <suspend_to_sleep_mode>
 800cf66:	4603      	mov	r3, r0
 800cf68:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMM150_OK)
 800cf6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d135      	bne.n	800cfde <bmm150_set_op_mode+0xc2>
                {
                    /* write the op mode */
                    rslt = write_op_mode(pwr_mode, dev);
 800cf72:	7bbb      	ldrb	r3, [r7, #14]
 800cf74:	6839      	ldr	r1, [r7, #0]
 800cf76:	4618      	mov	r0, r3
 800cf78:	f000 faac 	bl	800d4d4 <write_op_mode>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	73fb      	strb	r3, [r7, #15]
                }

                break;
 800cf80:	e02d      	b.n	800cfde <bmm150_set_op_mode+0xc2>
            case BMM150_POWERMODE_FORCED:

                /* If the sensor is in suspend mode
                 * put the device to sleep mode
                 */
                rslt = suspend_to_sleep_mode(dev);
 800cf82:	6838      	ldr	r0, [r7, #0]
 800cf84:	f000 fad7 	bl	800d536 <suspend_to_sleep_mode>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMM150_OK)
 800cf8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d126      	bne.n	800cfe2 <bmm150_set_op_mode+0xc6>
                {
                    /* write the op mode */
                    rslt = write_op_mode(pwr_mode, dev);
 800cf94:	7bbb      	ldrb	r3, [r7, #14]
 800cf96:	6839      	ldr	r1, [r7, #0]
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f000 fa9b 	bl	800d4d4 <write_op_mode>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	73fb      	strb	r3, [r7, #15]
                }

                break;
 800cfa2:	e01e      	b.n	800cfe2 <bmm150_set_op_mode+0xc6>
            case BMM150_POWERMODE_SLEEP:

                /* If the sensor is in suspend mode
                 * put the device to sleep mode
                 */
                rslt = suspend_to_sleep_mode(dev);
 800cfa4:	6838      	ldr	r0, [r7, #0]
 800cfa6:	f000 fac6 	bl	800d536 <suspend_to_sleep_mode>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMM150_OK)
 800cfae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d117      	bne.n	800cfe6 <bmm150_set_op_mode+0xca>
                {
                    /* write the op mode */
                    rslt = write_op_mode(pwr_mode, dev);
 800cfb6:	7bbb      	ldrb	r3, [r7, #14]
 800cfb8:	6839      	ldr	r1, [r7, #0]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f000 fa8a 	bl	800d4d4 <write_op_mode>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	73fb      	strb	r3, [r7, #15]
                }

                break;
 800cfc4:	e00f      	b.n	800cfe6 <bmm150_set_op_mode+0xca>
            case BMM150_POWERMODE_SUSPEND:

                /* Set the power control bit to zero */
                rslt = set_power_control_bit(BMM150_POWER_CNTRL_DISABLE, dev);
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	2000      	movs	r0, #0
 800cfca:	f000 f9b6 	bl	800d33a <set_power_control_bit>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	73fb      	strb	r3, [r7, #15]
                break;
 800cfd2:	e009      	b.n	800cfe8 <bmm150_set_op_mode+0xcc>
            default:
                rslt = BMM150_E_INVALID_CONFIG;
 800cfd4:	23fd      	movs	r3, #253	; 0xfd
 800cfd6:	73fb      	strb	r3, [r7, #15]
                break;
 800cfd8:	e006      	b.n	800cfe8 <bmm150_set_op_mode+0xcc>
        }
    }
 800cfda:	bf00      	nop
 800cfdc:	e004      	b.n	800cfe8 <bmm150_set_op_mode+0xcc>
                break;
 800cfde:	bf00      	nop
 800cfe0:	e002      	b.n	800cfe8 <bmm150_set_op_mode+0xcc>
                break;
 800cfe2:	bf00      	nop
 800cfe4:	e000      	b.n	800cfe8 <bmm150_set_op_mode+0xcc>
                break;
 800cfe6:	bf00      	nop

    return rslt;
 800cfe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3710      	adds	r7, #16
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <bmm150_set_presetmode>:

/*!
 * @brief This API is used to set the preset mode of the sensor.
 */
int8_t bmm150_set_presetmode(struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t preset_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800cffe:	6838      	ldr	r0, [r7, #0]
 800d000:	f000 f977 	bl	800d2f2 <null_ptr_check>
 800d004:	4603      	mov	r3, r0
 800d006:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800d008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d154      	bne.n	800d0ba <bmm150_set_presetmode+0xc6>
    {
        preset_mode = settings->preset_mode;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	795b      	ldrb	r3, [r3, #5]
 800d014:	73bb      	strb	r3, [r7, #14]

        switch (preset_mode)
 800d016:	7bbb      	ldrb	r3, [r7, #14]
 800d018:	3b01      	subs	r3, #1
 800d01a:	2b03      	cmp	r3, #3
 800d01c:	d84a      	bhi.n	800d0b4 <bmm150_set_presetmode+0xc0>
 800d01e:	a201      	add	r2, pc, #4	; (adr r2, 800d024 <bmm150_set_presetmode+0x30>)
 800d020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d024:	0800d035 	.word	0x0800d035
 800d028:	0800d055 	.word	0x0800d055
 800d02c:	0800d075 	.word	0x0800d075
 800d030:	0800d095 	.word	0x0800d095
            case BMM150_PRESETMODE_LOWPOWER:

                /* Set the data rate x,y,z repetition
                 * for Low Power mode
                 */
                settings->data_rate = BMM150_DATA_RATE_10HZ;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_LOWPOWER;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2201      	movs	r2, #1
 800d03e:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_LOWPOWER;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2201      	movs	r2, #1
 800d044:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800d046:	6839      	ldr	r1, [r7, #0]
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 faf9 	bl	800d640 <set_odr_xyz_rep>
 800d04e:	4603      	mov	r3, r0
 800d050:	73fb      	strb	r3, [r7, #15]
                break;
 800d052:	e033      	b.n	800d0bc <bmm150_set_presetmode+0xc8>
            case BMM150_PRESETMODE_REGULAR:

                /* Set the data rate x,y,z repetition
                 * for Regular mode
                 */
                settings->data_rate = BMM150_DATA_RATE_10HZ;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_REGULAR;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2204      	movs	r2, #4
 800d05e:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_REGULAR;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2207      	movs	r2, #7
 800d064:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800d066:	6839      	ldr	r1, [r7, #0]
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 fae9 	bl	800d640 <set_odr_xyz_rep>
 800d06e:	4603      	mov	r3, r0
 800d070:	73fb      	strb	r3, [r7, #15]
                break;
 800d072:	e023      	b.n	800d0bc <bmm150_set_presetmode+0xc8>
            case BMM150_PRESETMODE_HIGHACCURACY:

                /* Set the data rate x,y,z repetition
                 * for High Accuracy mode *
                 */
                settings->data_rate = BMM150_DATA_RATE_20HZ;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2205      	movs	r2, #5
 800d078:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_HIGHACCURACY;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2217      	movs	r2, #23
 800d07e:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_HIGHACCURACY;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2229      	movs	r2, #41	; 0x29
 800d084:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800d086:	6839      	ldr	r1, [r7, #0]
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 fad9 	bl	800d640 <set_odr_xyz_rep>
 800d08e:	4603      	mov	r3, r0
 800d090:	73fb      	strb	r3, [r7, #15]
                break;
 800d092:	e013      	b.n	800d0bc <bmm150_set_presetmode+0xc8>
            case BMM150_PRESETMODE_ENHANCED:

                /* Set the data rate x,y,z repetition
                 * for Enhanced Accuracy mode
                 */
                settings->data_rate = BMM150_DATA_RATE_10HZ;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	709a      	strb	r2, [r3, #2]
                settings->xy_rep = BMM150_REPXY_ENHANCED;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2207      	movs	r2, #7
 800d09e:	70da      	strb	r2, [r3, #3]
                settings->z_rep = BMM150_REPZ_ENHANCED;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	220d      	movs	r2, #13
 800d0a4:	711a      	strb	r2, [r3, #4]
                rslt = set_odr_xyz_rep(settings, dev);
 800d0a6:	6839      	ldr	r1, [r7, #0]
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 fac9 	bl	800d640 <set_odr_xyz_rep>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	73fb      	strb	r3, [r7, #15]
                break;
 800d0b2:	e003      	b.n	800d0bc <bmm150_set_presetmode+0xc8>
            default:
                rslt = BMM150_E_INVALID_CONFIG;
 800d0b4:	23fd      	movs	r3, #253	; 0xfd
 800d0b6:	73fb      	strb	r3, [r7, #15]
                break;
 800d0b8:	e000      	b.n	800d0bc <bmm150_set_presetmode+0xc8>
        }
    }
 800d0ba:	bf00      	nop

    return rslt;
 800d0bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3710      	adds	r7, #16
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <bmm150_set_sensor_settings>:
 * and the dev structure configuration
 */
int8_t bmm150_set_sensor_settings(uint16_t desired_settings,
                                  const struct bmm150_settings *settings,
                                  struct bmm150_dev *dev)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b086      	sub	sp, #24
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	607a      	str	r2, [r7, #4]
 800d0d4:	81fb      	strh	r3, [r7, #14]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 f90b 	bl	800d2f2 <null_ptr_check>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800d0e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d14e      	bne.n	800d186 <bmm150_set_sensor_settings+0xbe>
    {
        if (are_settings_changed(MODE_SETTING_SEL, desired_settings))
 800d0e8:	89fb      	ldrh	r3, [r7, #14]
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	200f      	movs	r0, #15
 800d0ee:	f000 fafd 	bl	800d6ec <are_settings_changed>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d007      	beq.n	800d108 <bmm150_set_sensor_settings+0x40>
        {
            /* ODR, Control measurement, XY,Z repetition values */
            rslt = mode_settings(desired_settings, settings, dev);
 800d0f8:	89fb      	ldrh	r3, [r7, #14]
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	68b9      	ldr	r1, [r7, #8]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f000 fb0e 	bl	800d720 <mode_settings>
 800d104:	4603      	mov	r3, r0
 800d106:	75fb      	strb	r3, [r7, #23]
        }

        if ((!rslt) && are_settings_changed(INTERRUPT_PIN_SETTING_SEL, desired_settings))
 800d108:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d110      	bne.n	800d132 <bmm150_set_sensor_settings+0x6a>
 800d110:	89fb      	ldrh	r3, [r7, #14]
 800d112:	4619      	mov	r1, r3
 800d114:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 800d118:	f000 fae8 	bl	800d6ec <are_settings_changed>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d007      	beq.n	800d132 <bmm150_set_sensor_settings+0x6a>
        {
            /* Interrupt pin settings */
            rslt = interrupt_pin_settings(desired_settings, settings, dev);
 800d122:	89fb      	ldrh	r3, [r7, #14]
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	68b9      	ldr	r1, [r7, #8]
 800d128:	4618      	mov	r0, r3
 800d12a:	f000 fb34 	bl	800d796 <interrupt_pin_settings>
 800d12e:	4603      	mov	r3, r0
 800d130:	75fb      	strb	r3, [r7, #23]
        }

        if ((!rslt) && are_settings_changed(INTERRUPT_CONFIG_SEL, desired_settings))
 800d132:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d110      	bne.n	800d15c <bmm150_set_sensor_settings+0x94>
 800d13a:	89fb      	ldrh	r3, [r7, #14]
 800d13c:	4619      	mov	r1, r3
 800d13e:	f44f 50f0 	mov.w	r0, #7680	; 0x1e00
 800d142:	f000 fad3 	bl	800d6ec <are_settings_changed>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d007      	beq.n	800d15c <bmm150_set_sensor_settings+0x94>
        {
            /* Interrupt configuration settings */
            rslt = interrupt_config(desired_settings, settings, dev);
 800d14c:	89fb      	ldrh	r3, [r7, #14]
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	68b9      	ldr	r1, [r7, #8]
 800d152:	4618      	mov	r0, r3
 800d154:	f000 fbad 	bl	800d8b2 <interrupt_config>
 800d158:	4603      	mov	r3, r0
 800d15a:	75fb      	strb	r3, [r7, #23]
        }

        if ((!rslt) && are_settings_changed(INTERRUPT_THRESHOLD_CONFIG_SEL, desired_settings))
 800d15c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d110      	bne.n	800d186 <bmm150_set_sensor_settings+0xbe>
 800d164:	89fb      	ldrh	r3, [r7, #14]
 800d166:	4619      	mov	r1, r3
 800d168:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
 800d16c:	f000 fabe 	bl	800d6ec <are_settings_changed>
 800d170:	4603      	mov	r3, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	d007      	beq.n	800d186 <bmm150_set_sensor_settings+0xbe>
        {
            /* Interrupt threshold settings */
            rslt = interrupt_threshold_settings(desired_settings, settings, dev);
 800d176:	89fb      	ldrh	r3, [r7, #14]
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	68b9      	ldr	r1, [r7, #8]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f000 fc12 	bl	800d9a6 <interrupt_threshold_settings>
 800d182:	4603      	mov	r3, r0
 800d184:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800d186:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3718      	adds	r7, #24
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <bmm150_read_mag_data>:
 * @brief This API is used to read the magnetometer data from registers
 * 0x42 to 0x49 and update the dev structure with the
 * compensated mag data in micro-tesla.
 */
int8_t bmm150_read_mag_data(struct bmm150_mag_data *mag_data, struct bmm150_dev *dev)
{
 800d192:	b580      	push	{r7, lr}
 800d194:	b088      	sub	sp, #32
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
 800d19a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    int16_t msb_data;
    uint8_t reg_data[BMM150_LEN_XYZR_DATA] = { 0 };
 800d19c:	2300      	movs	r3, #0
 800d19e:	617b      	str	r3, [r7, #20]
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	61bb      	str	r3, [r7, #24]
    struct bmm150_raw_mag_data raw_mag_data;

    /* Read the mag data registers */
    rslt = bmm150_get_regs(BMM150_REG_DATA_X_LSB, reg_data, BMM150_LEN_XYZR_DATA, dev);
 800d1a4:	f107 0114 	add.w	r1, r7, #20
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	2208      	movs	r2, #8
 800d1ac:	2042      	movs	r0, #66	; 0x42
 800d1ae:	f7ff fe84 	bl	800ceba <bmm150_get_regs>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800d1b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d160      	bne.n	800d280 <bmm150_read_mag_data+0xee>
    {
        /* Mag X axis data */
        reg_data[0] = BMM150_GET_BITS(reg_data[0], BMM150_DATA_X);
 800d1be:	7d3b      	ldrb	r3, [r7, #20]
 800d1c0:	08db      	lsrs	r3, r3, #3
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	753b      	strb	r3, [r7, #20]

        /* Shift the MSB data to left by 5 bits */
        /* Multiply by 32 to get the shift left by 5 value */
        msb_data = ((int16_t)((int8_t)reg_data[1])) * 32;
 800d1c6:	7d7b      	ldrb	r3, [r7, #21]
 800d1c8:	b25b      	sxtb	r3, r3
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	015b      	lsls	r3, r3, #5
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	83bb      	strh	r3, [r7, #28]

        /* Raw mag X axis data */
        raw_mag_data.raw_datax = (int16_t)(msb_data | reg_data[0]);
 800d1d2:	7d3b      	ldrb	r3, [r7, #20]
 800d1d4:	b21a      	sxth	r2, r3
 800d1d6:	8bbb      	ldrh	r3, [r7, #28]
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	b21b      	sxth	r3, r3
 800d1dc:	81bb      	strh	r3, [r7, #12]

        /* Mag Y axis data */
        reg_data[2] = BMM150_GET_BITS(reg_data[2], BMM150_DATA_Y);
 800d1de:	7dbb      	ldrb	r3, [r7, #22]
 800d1e0:	08db      	lsrs	r3, r3, #3
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	75bb      	strb	r3, [r7, #22]

        /* Shift the MSB data to left by 5 bits */
        /* Multiply by 32 to get the shift left by 5 value */
        msb_data = ((int16_t)((int8_t)reg_data[3])) * 32;
 800d1e6:	7dfb      	ldrb	r3, [r7, #23]
 800d1e8:	b25b      	sxtb	r3, r3
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	015b      	lsls	r3, r3, #5
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	83bb      	strh	r3, [r7, #28]

        /* Raw mag Y axis data */
        raw_mag_data.raw_datay = (int16_t)(msb_data | reg_data[2]);
 800d1f2:	7dbb      	ldrb	r3, [r7, #22]
 800d1f4:	b21a      	sxth	r2, r3
 800d1f6:	8bbb      	ldrh	r3, [r7, #28]
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	b21b      	sxth	r3, r3
 800d1fc:	81fb      	strh	r3, [r7, #14]

        /* Mag Z axis data */
        reg_data[4] = BMM150_GET_BITS(reg_data[4], BMM150_DATA_Z);
 800d1fe:	7e3b      	ldrb	r3, [r7, #24]
 800d200:	085b      	lsrs	r3, r3, #1
 800d202:	b2db      	uxtb	r3, r3
 800d204:	763b      	strb	r3, [r7, #24]

        /* Shift the MSB data to left by 7 bits */
        /* Multiply by 128 to get the shift left by 7 value */
        msb_data = ((int16_t)((int8_t)reg_data[5])) * 128;
 800d206:	7e7b      	ldrb	r3, [r7, #25]
 800d208:	b25b      	sxtb	r3, r3
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	01db      	lsls	r3, r3, #7
 800d20e:	b29b      	uxth	r3, r3
 800d210:	83bb      	strh	r3, [r7, #28]

        /* Raw mag Z axis data */
        raw_mag_data.raw_dataz = (int16_t)(msb_data | reg_data[4]);
 800d212:	7e3b      	ldrb	r3, [r7, #24]
 800d214:	b21a      	sxth	r2, r3
 800d216:	8bbb      	ldrh	r3, [r7, #28]
 800d218:	4313      	orrs	r3, r2
 800d21a:	b21b      	sxth	r3, r3
 800d21c:	823b      	strh	r3, [r7, #16]

        /* Mag R-HALL data */
        reg_data[6] = BMM150_GET_BITS(reg_data[6], BMM150_DATA_RHALL);
 800d21e:	7ebb      	ldrb	r3, [r7, #26]
 800d220:	089b      	lsrs	r3, r3, #2
 800d222:	b2db      	uxtb	r3, r3
 800d224:	76bb      	strb	r3, [r7, #26]
        raw_mag_data.raw_data_r = (uint16_t)(((uint16_t)reg_data[7] << 6) | reg_data[6]);
 800d226:	7efb      	ldrb	r3, [r7, #27]
 800d228:	019b      	lsls	r3, r3, #6
 800d22a:	b21a      	sxth	r2, r3
 800d22c:	7ebb      	ldrb	r3, [r7, #26]
 800d22e:	b21b      	sxth	r3, r3
 800d230:	4313      	orrs	r3, r2
 800d232:	b21b      	sxth	r3, r3
 800d234:	b29b      	uxth	r3, r3
 800d236:	827b      	strh	r3, [r7, #18]

        /* Compensated Mag X data in int16_t format */
        mag_data->x = compensate_x(raw_mag_data.raw_datax, raw_mag_data.raw_data_r, dev);
 800d238:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d23c:	8a79      	ldrh	r1, [r7, #18]
 800d23e:	683a      	ldr	r2, [r7, #0]
 800d240:	4618      	mov	r0, r3
 800d242:	f000 fbe1 	bl	800da08 <compensate_x>
 800d246:	eef0 7a40 	vmov.f32	s15, s0
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	edc3 7a00 	vstr	s15, [r3]

        /* Compensated Mag Y data in int16_t format */
        mag_data->y = compensate_y(raw_mag_data.raw_datay, raw_mag_data.raw_data_r, dev);
 800d250:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d254:	8a79      	ldrh	r1, [r7, #18]
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	4618      	mov	r0, r3
 800d25a:	f000 fc83 	bl	800db64 <compensate_y>
 800d25e:	eef0 7a40 	vmov.f32	s15, s0
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	edc3 7a01 	vstr	s15, [r3, #4]

        /* Compensated Mag Z data in int16_t format */
        mag_data->z = compensate_z(raw_mag_data.raw_dataz, raw_mag_data.raw_data_r, dev);
 800d268:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d26c:	8a79      	ldrh	r1, [r7, #18]
 800d26e:	683a      	ldr	r2, [r7, #0]
 800d270:	4618      	mov	r0, r3
 800d272:	f000 fd25 	bl	800dcc0 <compensate_z>
 800d276:	eef0 7a40 	vmov.f32	s15, s0
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    return rslt;
 800d280:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3720      	adds	r7, #32
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <bmm150_get_interrupt_status>:
/*!
 * @brief This API is used to get the status flags of all interrupt
 * which is used to check for the assertion of interrupts
 */
int8_t bmm150_get_interrupt_status(struct bmm150_dev *dev)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t interrupt_status;
    uint8_t data_ready_status;

    /* Read the data ready status from the register 0x48 */
    rslt = bmm150_get_regs(BMM150_REG_DATA_READY_STATUS, &data_ready_status, 1, dev);
 800d294:	f107 010d 	add.w	r1, r7, #13
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	2048      	movs	r0, #72	; 0x48
 800d29e:	f7ff fe0c 	bl	800ceba <bmm150_get_regs>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800d2a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d11b      	bne.n	800d2e6 <bmm150_get_interrupt_status+0x5a>
    {
        /* Read the interrupt status from the register 0x50 */
        rslt = bmm150_get_regs(BMM150_REG_INTERRUPT_STATUS, &interrupt_status, 1, dev);
 800d2ae:	f107 010e 	add.w	r1, r7, #14
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	204a      	movs	r0, #74	; 0x4a
 800d2b8:	f7ff fdff 	bl	800ceba <bmm150_get_regs>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 800d2c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d10e      	bne.n	800d2e6 <bmm150_get_interrupt_status+0x5a>
        {
            /* Mask and store the data ready status bit */
            data_ready_status = BMM150_GET_BITS_POS_0(data_ready_status, BMM150_DRDY_STATUS);
 800d2c8:	7b7b      	ldrb	r3, [r7, #13]
 800d2ca:	f003 0301 	and.w	r3, r3, #1
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	737b      	strb	r3, [r7, #13]

            /* Store the entire interrupt status in dev */
            dev->int_status = (data_ready_status << 8) | interrupt_status;
 800d2d2:	7b7b      	ldrb	r3, [r7, #13]
 800d2d4:	021b      	lsls	r3, r3, #8
 800d2d6:	b21a      	sxth	r2, r3
 800d2d8:	7bbb      	ldrb	r3, [r7, #14]
 800d2da:	b21b      	sxth	r3, r3
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	b21b      	sxth	r3, r3
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	851a      	strh	r2, [r3, #40]	; 0x28
        }
    }

    return rslt;
 800d2e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmm150_dev *dev)
{
 800d2f2:	b480      	push	{r7}
 800d2f4:	b085      	sub	sp, #20
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d00f      	beq.n	800d320 <null_ptr_check+0x2e>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d00b      	beq.n	800d320 <null_ptr_check+0x2e>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	691b      	ldr	r3, [r3, #16]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d007      	beq.n	800d320 <null_ptr_check+0x2e>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	695b      	ldr	r3, [r3, #20]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d003      	beq.n	800d320 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d102      	bne.n	800d326 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMM150_E_NULL_PTR;
 800d320:	23ff      	movs	r3, #255	; 0xff
 800d322:	73fb      	strb	r3, [r7, #15]
 800d324:	e001      	b.n	800d32a <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMM150_OK;
 800d326:	2300      	movs	r3, #0
 800d328:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800d32a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3714      	adds	r7, #20
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr

0800d33a <set_power_control_bit>:

/*!
 * @brief This internal API sets/resets the power control bit of 0x4B register.
 */
static int8_t set_power_control_bit(uint8_t pwrcntrl_bit, struct bmm150_dev *dev)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b084      	sub	sp, #16
 800d33e:	af00      	add	r7, sp, #0
 800d340:	4603      	mov	r3, r0
 800d342:	6039      	str	r1, [r7, #0]
 800d344:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data = 0;
 800d346:	2300      	movs	r3, #0
 800d348:	73bb      	strb	r3, [r7, #14]

    /* Power control register 0x4B is read */
    rslt = bmm150_get_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 800d34a:	f107 010e 	add.w	r1, r7, #14
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	2201      	movs	r2, #1
 800d352:	204b      	movs	r0, #75	; 0x4b
 800d354:	f7ff fdb1 	bl	800ceba <bmm150_get_regs>
 800d358:	4603      	mov	r3, r0
 800d35a:	73fb      	strb	r3, [r7, #15]

    /* Proceed if everything is fine until now */
    if (rslt == BMM150_OK)
 800d35c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d11e      	bne.n	800d3a2 <set_power_control_bit+0x68>
    {
        /* Sets the value of power control bit */
        reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_PWR_CNTRL, pwrcntrl_bit);
 800d364:	7bbb      	ldrb	r3, [r7, #14]
 800d366:	b25b      	sxtb	r3, r3
 800d368:	f023 0301 	bic.w	r3, r3, #1
 800d36c:	b25a      	sxtb	r2, r3
 800d36e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d372:	f003 0301 	and.w	r3, r3, #1
 800d376:	b25b      	sxtb	r3, r3
 800d378:	4313      	orrs	r3, r2
 800d37a:	b25b      	sxtb	r3, r3
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_POWER_CONTROL, &reg_data, 1, dev);
 800d380:	f107 010e 	add.w	r1, r7, #14
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	2201      	movs	r2, #1
 800d388:	204b      	movs	r0, #75	; 0x4b
 800d38a:	f7ff fd6a 	bl	800ce62 <bmm150_set_regs>
 800d38e:	4603      	mov	r3, r0
 800d390:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 800d392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d103      	bne.n	800d3a2 <set_power_control_bit+0x68>
        {
            /* Store the power control bit
             * value in dev structure
             */
            dev->pwr_cntrl_bit = pwrcntrl_bit;
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	79fa      	ldrb	r2, [r7, #7]
 800d39e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        }
    }

    return rslt;
 800d3a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3710      	adds	r7, #16
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <read_trim_registers>:
/*!
 * @brief This internal API reads the trim registers of the sensor and stores
 * the trim values in the "trim_data" of device structure.
 */
static int8_t read_trim_registers(struct bmm150_dev *dev)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b088      	sub	sp, #32
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t trim_x1y1[2] = { 0 };
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	833b      	strh	r3, [r7, #24]
    uint8_t trim_xyz_data[4] = { 0 };
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	617b      	str	r3, [r7, #20]
    uint8_t trim_xy1xy2[10] = { 0 };
 800d3be:	2300      	movs	r3, #0
 800d3c0:	60bb      	str	r3, [r7, #8]
 800d3c2:	f107 030c 	add.w	r3, r7, #12
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	601a      	str	r2, [r3, #0]
 800d3ca:	809a      	strh	r2, [r3, #4]
    uint16_t temp_msb = 0;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	83bb      	strh	r3, [r7, #28]

    /* Trim register value is read */
    rslt = bmm150_get_regs(BMM150_DIG_X1, trim_x1y1, 2, dev);
 800d3d0:	f107 0118 	add.w	r1, r7, #24
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2202      	movs	r2, #2
 800d3d8:	205d      	movs	r0, #93	; 0x5d
 800d3da:	f7ff fd6e 	bl	800ceba <bmm150_get_regs>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800d3e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d16e      	bne.n	800d4c8 <read_trim_registers+0x11a>
    {
        rslt = bmm150_get_regs(BMM150_DIG_Z4_LSB, trim_xyz_data, 4, dev);
 800d3ea:	f107 0114 	add.w	r1, r7, #20
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2204      	movs	r2, #4
 800d3f2:	2062      	movs	r0, #98	; 0x62
 800d3f4:	f7ff fd61 	bl	800ceba <bmm150_get_regs>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMM150_OK)
 800d3fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d161      	bne.n	800d4c8 <read_trim_registers+0x11a>
        {
            rslt = bmm150_get_regs(BMM150_DIG_Z2_LSB, trim_xy1xy2, 10, dev);
 800d404:	f107 0108 	add.w	r1, r7, #8
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	220a      	movs	r2, #10
 800d40c:	2068      	movs	r0, #104	; 0x68
 800d40e:	f7ff fd54 	bl	800ceba <bmm150_get_regs>
 800d412:	4603      	mov	r3, r0
 800d414:	77fb      	strb	r3, [r7, #31]

            if (rslt == BMM150_OK)
 800d416:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d154      	bne.n	800d4c8 <read_trim_registers+0x11a>
            {
                /* Trim data which is read is updated
                 * in the device structure
                 */
                dev->trim_data.dig_x1 = (int8_t)trim_x1y1[0];//
 800d41e:	7e3b      	ldrb	r3, [r7, #24]
 800d420:	b25a      	sxtb	r2, r3
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	761a      	strb	r2, [r3, #24]
                dev->trim_data.dig_y1 = (int8_t)trim_x1y1[1];//
 800d426:	7e7b      	ldrb	r3, [r7, #25]
 800d428:	b25a      	sxtb	r2, r3
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	765a      	strb	r2, [r3, #25]
                dev->trim_data.dig_x2 = (int8_t)trim_xyz_data[2];//
 800d42e:	7dbb      	ldrb	r3, [r7, #22]
 800d430:	b25a      	sxtb	r2, r3
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	769a      	strb	r2, [r3, #26]
                dev->trim_data.dig_y2 = (int8_t)trim_xyz_data[3];//
 800d436:	7dfb      	ldrb	r3, [r7, #23]
 800d438:	b25a      	sxtb	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	76da      	strb	r2, [r3, #27]
                temp_msb = ((uint16_t)trim_xy1xy2[3]) << 8;
 800d43e:	7afb      	ldrb	r3, [r7, #11]
 800d440:	b29b      	uxth	r3, r3
 800d442:	021b      	lsls	r3, r3, #8
 800d444:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z1 = (uint16_t)(temp_msb | trim_xy1xy2[2]);//
 800d446:	7abb      	ldrb	r3, [r7, #10]
 800d448:	b29a      	uxth	r2, r3
 800d44a:	8bbb      	ldrh	r3, [r7, #28]
 800d44c:	4313      	orrs	r3, r2
 800d44e:	b29a      	uxth	r2, r3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	839a      	strh	r2, [r3, #28]
                temp_msb = ((uint16_t)trim_xy1xy2[1]) << 8;
 800d454:	7a7b      	ldrb	r3, [r7, #9]
 800d456:	b29b      	uxth	r3, r3
 800d458:	021b      	lsls	r3, r3, #8
 800d45a:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z2 = (int16_t)(temp_msb | trim_xy1xy2[0]);//
 800d45c:	7a3b      	ldrb	r3, [r7, #8]
 800d45e:	b29a      	uxth	r2, r3
 800d460:	8bbb      	ldrh	r3, [r7, #28]
 800d462:	4313      	orrs	r3, r2
 800d464:	b29b      	uxth	r3, r3
 800d466:	b21a      	sxth	r2, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	83da      	strh	r2, [r3, #30]
                temp_msb = ((uint16_t)trim_xy1xy2[7]) << 8;
 800d46c:	7bfb      	ldrb	r3, [r7, #15]
 800d46e:	b29b      	uxth	r3, r3
 800d470:	021b      	lsls	r3, r3, #8
 800d472:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z3 = (int16_t)(temp_msb | trim_xy1xy2[6]);//
 800d474:	7bbb      	ldrb	r3, [r7, #14]
 800d476:	b29a      	uxth	r2, r3
 800d478:	8bbb      	ldrh	r3, [r7, #28]
 800d47a:	4313      	orrs	r3, r2
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	b21a      	sxth	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	841a      	strh	r2, [r3, #32]
                temp_msb = ((uint16_t)trim_xyz_data[1]) << 8;
 800d484:	7d7b      	ldrb	r3, [r7, #21]
 800d486:	b29b      	uxth	r3, r3
 800d488:	021b      	lsls	r3, r3, #8
 800d48a:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_z4 = (int16_t)(temp_msb | trim_xyz_data[0]);//
 800d48c:	7d3b      	ldrb	r3, [r7, #20]
 800d48e:	b29a      	uxth	r2, r3
 800d490:	8bbb      	ldrh	r3, [r7, #28]
 800d492:	4313      	orrs	r3, r2
 800d494:	b29b      	uxth	r3, r3
 800d496:	b21a      	sxth	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	845a      	strh	r2, [r3, #34]	; 0x22
                dev->trim_data.dig_xy1 = trim_xy1xy2[9];//
 800d49c:	7c7a      	ldrb	r2, [r7, #17]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                dev->trim_data.dig_xy2 = (int8_t)trim_xy1xy2[8];//
 800d4a4:	7c3b      	ldrb	r3, [r7, #16]
 800d4a6:	b25a      	sxtb	r2, r3
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                temp_msb = ((uint16_t)(trim_xy1xy2[5] & 0x7F)) << 8;
 800d4ae:	7b7b      	ldrb	r3, [r7, #13]
 800d4b0:	021b      	lsls	r3, r3, #8
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800d4b8:	83bb      	strh	r3, [r7, #28]
                dev->trim_data.dig_xyz1 = (uint16_t)(temp_msb | trim_xy1xy2[4]);//
 800d4ba:	7b3b      	ldrb	r3, [r7, #12]
 800d4bc:	b29a      	uxth	r2, r3
 800d4be:	8bbb      	ldrh	r3, [r7, #28]
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	84da      	strh	r2, [r3, #38]	; 0x26
            }
        }
    }

    return rslt;
 800d4c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3720      	adds	r7, #32
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <write_op_mode>:
/*!
 * @brief This internal API writes the op_mode value in the Opmode bits
 * (bits 1 and 2) of 0x4C register.
 */
static int8_t write_op_mode(uint8_t op_mode, struct bmm150_dev *dev)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	6039      	str	r1, [r7, #0]
 800d4de:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data;

    /* Read the 0x4C register */
    rslt = bmm150_get_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800d4e0:	f107 010e 	add.w	r1, r7, #14
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	204c      	movs	r0, #76	; 0x4c
 800d4ea:	f7ff fce6 	bl	800ceba <bmm150_get_regs>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800d4f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d117      	bne.n	800d52a <write_op_mode+0x56>
    {
        /* Set the op_mode value in Opmode bits of 0x4C */
        reg_data = BMM150_SET_BITS(reg_data, BMM150_OP_MODE, op_mode);
 800d4fa:	7bbb      	ldrb	r3, [r7, #14]
 800d4fc:	b25b      	sxtb	r3, r3
 800d4fe:	f023 0306 	bic.w	r3, r3, #6
 800d502:	b25a      	sxtb	r2, r3
 800d504:	79fb      	ldrb	r3, [r7, #7]
 800d506:	005b      	lsls	r3, r3, #1
 800d508:	b25b      	sxtb	r3, r3
 800d50a:	f003 0306 	and.w	r3, r3, #6
 800d50e:	b25b      	sxtb	r3, r3
 800d510:	4313      	orrs	r3, r2
 800d512:	b25b      	sxtb	r3, r3
 800d514:	b2db      	uxtb	r3, r3
 800d516:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800d518:	f107 010e 	add.w	r1, r7, #14
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	2201      	movs	r2, #1
 800d520:	204c      	movs	r0, #76	; 0x4c
 800d522:	f7ff fc9e 	bl	800ce62 <bmm150_set_regs>
 800d526:	4603      	mov	r3, r0
 800d528:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800d52a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}

0800d536 <suspend_to_sleep_mode>:
/*!
 * @brief This internal API sets the device from suspend to sleep mode
 * by setting the power control bit to '1' of 0x4B register
 */
static int8_t suspend_to_sleep_mode(struct bmm150_dev *dev)
{
 800d536:	b580      	push	{r7, lr}
 800d538:	b084      	sub	sp, #16
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f7ff fed7 	bl	800d2f2 <null_ptr_check>
 800d544:	4603      	mov	r3, r0
 800d546:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMM150_OK)
 800d548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d112      	bne.n	800d576 <suspend_to_sleep_mode+0x40>
    {
        if (dev->pwr_cntrl_bit == BMM150_POWER_CNTRL_DISABLE)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800d556:	2b00      	cmp	r3, #0
 800d558:	d10d      	bne.n	800d576 <suspend_to_sleep_mode+0x40>
        {
            rslt = set_power_control_bit(BMM150_POWER_CNTRL_ENABLE, dev);
 800d55a:	6879      	ldr	r1, [r7, #4]
 800d55c:	2001      	movs	r0, #1
 800d55e:	f7ff feec 	bl	800d33a <set_power_control_bit>
 800d562:	4603      	mov	r3, r0
 800d564:	73fb      	strb	r3, [r7, #15]

            /* Start-up time delay of 3ms */
            dev->delay_us(BMM150_START_UP_TIME, dev->intf_ptr);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	695b      	ldr	r3, [r3, #20]
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	6852      	ldr	r2, [r2, #4]
 800d56e:	4611      	mov	r1, r2
 800d570:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d574:	4798      	blx	r3
        }
    }

    return rslt;
 800d576:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3710      	adds	r7, #16
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <set_xy_rep>:

/*!
 * @brief This internal API sets the xy repetition value in the 0x51 register.
 */
static int8_t set_xy_rep(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b084      	sub	sp, #16
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
 800d58a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t rep_xy;

    /* Set the xy repetition */
    rep_xy = settings->xy_rep;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	78db      	ldrb	r3, [r3, #3]
 800d590:	73bb      	strb	r3, [r7, #14]
    rslt = bmm150_set_regs(BMM150_REG_REP_XY, &rep_xy, 1, dev);
 800d592:	f107 010e 	add.w	r1, r7, #14
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	2201      	movs	r2, #1
 800d59a:	2051      	movs	r0, #81	; 0x51
 800d59c:	f7ff fc61 	bl	800ce62 <bmm150_set_regs>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800d5a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3710      	adds	r7, #16
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <set_z_rep>:

/*!
 * @brief This internal API sets the z repetition value in the 0x52 register.
 */
static int8_t set_z_rep(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t rep_z;

    /* Set the z repetition */
    rep_z = settings->z_rep;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	791b      	ldrb	r3, [r3, #4]
 800d5be:	73bb      	strb	r3, [r7, #14]
    rslt = bmm150_set_regs(BMM150_REG_REP_Z, &rep_z, 1, dev);
 800d5c0:	f107 010e 	add.w	r1, r7, #14
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	2052      	movs	r0, #82	; 0x52
 800d5ca:	f7ff fc4a 	bl	800ce62 <bmm150_set_regs>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800d5d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3710      	adds	r7, #16
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <set_odr>:

/*!
 * @brief This internal API is used to set the output data rate of the sensor.
 */
static int8_t set_odr(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b084      	sub	sp, #16
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
 800d5e6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Read the 0x4C register */
    rslt = bmm150_get_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800d5e8:	f107 010e 	add.w	r1, r7, #14
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	204c      	movs	r0, #76	; 0x4c
 800d5f2:	f7ff fc62 	bl	800ceba <bmm150_get_regs>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800d5fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d118      	bne.n	800d634 <set_odr+0x56>
    {
        /* Set the ODR value */
        reg_data = BMM150_SET_BITS(reg_data, BMM150_ODR, settings->data_rate);
 800d602:	7bbb      	ldrb	r3, [r7, #14]
 800d604:	b25b      	sxtb	r3, r3
 800d606:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800d60a:	b25a      	sxtb	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	789b      	ldrb	r3, [r3, #2]
 800d610:	00db      	lsls	r3, r3, #3
 800d612:	b25b      	sxtb	r3, r3
 800d614:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d618:	b25b      	sxtb	r3, r3
 800d61a:	4313      	orrs	r3, r2
 800d61c:	b25b      	sxtb	r3, r3
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_OP_MODE, &reg_data, 1, dev);
 800d622:	f107 010e 	add.w	r1, r7, #14
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	2201      	movs	r2, #1
 800d62a:	204c      	movs	r0, #76	; 0x4c
 800d62c:	f7ff fc19 	bl	800ce62 <bmm150_set_regs>
 800d630:	4603      	mov	r3, r0
 800d632:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800d634:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3710      	adds	r7, #16
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <set_odr_xyz_rep>:

/*!
 * @brief This internal API sets the preset mode ODR and repetition settings.
 */
static int8_t set_odr_xyz_rep(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Set the ODR */
    rslt = set_odr(settings, dev);
 800d64a:	6839      	ldr	r1, [r7, #0]
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f7ff ffc6 	bl	800d5de <set_odr>
 800d652:	4603      	mov	r3, r0
 800d654:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800d656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d10f      	bne.n	800d67e <set_odr_xyz_rep+0x3e>
    {
        /* Set the XY-repetitions number */
        rslt = set_xy_rep(settings, dev);
 800d65e:	6839      	ldr	r1, [r7, #0]
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f7ff ff8e 	bl	800d582 <set_xy_rep>
 800d666:	4603      	mov	r3, r0
 800d668:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMM150_OK)
 800d66a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d105      	bne.n	800d67e <set_odr_xyz_rep+0x3e>
        {
            /* Set the Z-repetitions number */
            rslt = set_z_rep(settings, dev);
 800d672:	6839      	ldr	r1, [r7, #0]
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f7ff ff9b 	bl	800d5b0 <set_z_rep>
 800d67a:	4603      	mov	r3, r0
 800d67c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800d67e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d682:	4618      	mov	r0, r3
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <set_control_measurement_xyz>:
/*!
 * @brief This internal API is used to enable or disable the magnetic
 * measurement of x,y,z axes based on the value of xyz_axes_control.
 */
static int8_t set_control_measurement_xyz(const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b084      	sub	sp, #16
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
 800d692:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmm150_get_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800d694:	f107 010e 	add.w	r1, r7, #14
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2201      	movs	r2, #1
 800d69c:	204e      	movs	r0, #78	; 0x4e
 800d69e:	f7ff fc0c 	bl	800ceba <bmm150_get_regs>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMM150_OK)
 800d6a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d118      	bne.n	800d6e0 <set_control_measurement_xyz+0x56>
    {
        /* Set the axes to be enabled/disabled */
        reg_data = BMM150_SET_BITS(reg_data, BMM150_CONTROL_MEASURE, settings->xyz_axes_control);
 800d6ae:	7bbb      	ldrb	r3, [r7, #14]
 800d6b0:	b25b      	sxtb	r3, r3
 800d6b2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800d6b6:	b25a      	sxtb	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	00db      	lsls	r3, r3, #3
 800d6be:	b25b      	sxtb	r3, r3
 800d6c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d6c4:	b25b      	sxtb	r3, r3
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	b25b      	sxtb	r3, r3
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	73bb      	strb	r3, [r7, #14]
        rslt = bmm150_set_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800d6ce:	f107 010e 	add.w	r1, r7, #14
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	204e      	movs	r0, #78	; 0x4e
 800d6d8:	f7ff fbc3 	bl	800ce62 <bmm150_set_regs>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800d6e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3710      	adds	r7, #16
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint16_t sub_settings, uint16_t desired_settings)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	460a      	mov	r2, r1
 800d6f6:	80fb      	strh	r3, [r7, #6]
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	80bb      	strh	r3, [r7, #4]
    uint8_t settings_changed;

    if (sub_settings & desired_settings)
 800d6fc:	88fa      	ldrh	r2, [r7, #6]
 800d6fe:	88bb      	ldrh	r3, [r7, #4]
 800d700:	4013      	ands	r3, r2
 800d702:	b29b      	uxth	r3, r3
 800d704:	2b00      	cmp	r3, #0
 800d706:	d002      	beq.n	800d70e <are_settings_changed+0x22>
    {
        /* User wants to modify this particular settings */
        settings_changed = BMM150_TRUE;
 800d708:	2301      	movs	r3, #1
 800d70a:	73fb      	strb	r3, [r7, #15]
 800d70c:	e001      	b.n	800d712 <are_settings_changed+0x26>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = BMM150_FALSE;
 800d70e:	2300      	movs	r3, #0
 800d710:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800d712:	7bfb      	ldrb	r3, [r7, #15]
}
 800d714:	4618      	mov	r0, r3
 800d716:	3714      	adds	r7, #20
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr

0800d720 <mode_settings>:
/*!
 * @brief This API sets the ODR , measurement axes control ,
 * repetition values of xy,z.
 */
static int8_t mode_settings(uint16_t desired_settings, const struct bmm150_settings *settings, struct bmm150_dev *dev)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b086      	sub	sp, #24
 800d724:	af00      	add	r7, sp, #0
 800d726:	4603      	mov	r3, r0
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	607a      	str	r2, [r7, #4]
 800d72c:	81fb      	strh	r3, [r7, #14]
    int8_t rslt = BMM150_E_INVALID_CONFIG;
 800d72e:	23fd      	movs	r3, #253	; 0xfd
 800d730:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BMM150_SEL_DATA_RATE)
 800d732:	89fb      	ldrh	r3, [r7, #14]
 800d734:	f003 0301 	and.w	r3, r3, #1
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d005      	beq.n	800d748 <mode_settings+0x28>
    {
        /* Sets the ODR */
        rslt = set_odr(settings, dev);
 800d73c:	6879      	ldr	r1, [r7, #4]
 800d73e:	68b8      	ldr	r0, [r7, #8]
 800d740:	f7ff ff4d 	bl	800d5de <set_odr>
 800d744:	4603      	mov	r3, r0
 800d746:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_CONTROL_MEASURE)
 800d748:	89fb      	ldrh	r3, [r7, #14]
 800d74a:	f003 0302 	and.w	r3, r3, #2
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d005      	beq.n	800d75e <mode_settings+0x3e>
    {
        /* Enables/Disables the control measurement axes */
        rslt = set_control_measurement_xyz(settings, dev);
 800d752:	6879      	ldr	r1, [r7, #4]
 800d754:	68b8      	ldr	r0, [r7, #8]
 800d756:	f7ff ff98 	bl	800d68a <set_control_measurement_xyz>
 800d75a:	4603      	mov	r3, r0
 800d75c:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_XY_REP)
 800d75e:	89fb      	ldrh	r3, [r7, #14]
 800d760:	f003 0304 	and.w	r3, r3, #4
 800d764:	2b00      	cmp	r3, #0
 800d766:	d005      	beq.n	800d774 <mode_settings+0x54>
    {
        /* Sets the XY repetition */
        rslt = set_xy_rep(settings, dev);
 800d768:	6879      	ldr	r1, [r7, #4]
 800d76a:	68b8      	ldr	r0, [r7, #8]
 800d76c:	f7ff ff09 	bl	800d582 <set_xy_rep>
 800d770:	4603      	mov	r3, r0
 800d772:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_Z_REP)
 800d774:	89fb      	ldrh	r3, [r7, #14]
 800d776:	f003 0308 	and.w	r3, r3, #8
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d005      	beq.n	800d78a <mode_settings+0x6a>
    {
        /* Sets the Z repetition */
        rslt = set_z_rep(settings, dev);
 800d77e:	6879      	ldr	r1, [r7, #4]
 800d780:	68b8      	ldr	r0, [r7, #8]
 800d782:	f7ff ff15 	bl	800d5b0 <set_z_rep>
 800d786:	4603      	mov	r3, r0
 800d788:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800d78a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3718      	adds	r7, #24
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}

0800d796 <interrupt_pin_settings>:
 * polarity , latch settings for the interrupt pins.
 */
static int8_t interrupt_pin_settings(uint16_t desired_settings,
                                     const struct bmm150_settings *settings,
                                     struct bmm150_dev *dev)
{
 800d796:	b580      	push	{r7, lr}
 800d798:	b088      	sub	sp, #32
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	4603      	mov	r3, r0
 800d79e:	60b9      	str	r1, [r7, #8]
 800d7a0:	607a      	str	r2, [r7, #4]
 800d7a2:	81fb      	strh	r3, [r7, #14]
    int8_t rslt;
    uint8_t reg_data;
    struct bmm150_int_ctrl_settings int_settings;

    rslt = bmm150_get_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800d7a4:	f107 011e 	add.w	r1, r7, #30
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	204e      	movs	r0, #78	; 0x4e
 800d7ae:	f7ff fb84 	bl	800ceba <bmm150_get_regs>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800d7b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d173      	bne.n	800d8a6 <interrupt_pin_settings+0x110>
    {
        int_settings = settings->int_settings;
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	f107 0310 	add.w	r3, r7, #16
 800d7c4:	3206      	adds	r2, #6
 800d7c6:	6810      	ldr	r0, [r2, #0]
 800d7c8:	6851      	ldr	r1, [r2, #4]
 800d7ca:	c303      	stmia	r3!, {r0, r1}
 800d7cc:	8911      	ldrh	r1, [r2, #8]
 800d7ce:	7a92      	ldrb	r2, [r2, #10]
 800d7d0:	8019      	strh	r1, [r3, #0]
 800d7d2:	709a      	strb	r2, [r3, #2]
        if (desired_settings & BMM150_SEL_DRDY_PIN_EN)
 800d7d4:	89fb      	ldrh	r3, [r7, #14]
 800d7d6:	f003 0310 	and.w	r3, r3, #16
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d00b      	beq.n	800d7f6 <interrupt_pin_settings+0x60>
        {
            /* Enables the Data ready interrupt and
             * maps it to the DRDY pin of the sensor
             */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_DRDY_EN, int_settings.drdy_pin_en);
 800d7de:	7fbb      	ldrb	r3, [r7, #30]
 800d7e0:	b25b      	sxtb	r3, r3
 800d7e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7e6:	b25a      	sxtb	r2, r3
 800d7e8:	7c3b      	ldrb	r3, [r7, #16]
 800d7ea:	01db      	lsls	r3, r3, #7
 800d7ec:	b25b      	sxtb	r3, r3
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	b25b      	sxtb	r3, r3
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_INT_PIN_EN)
 800d7f6:	89fb      	ldrh	r3, [r7, #14]
 800d7f8:	f003 0320 	and.w	r3, r3, #32
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d00e      	beq.n	800d81e <interrupt_pin_settings+0x88>
        {
            /* Sets interrupt pin enable */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_INT_PIN_EN, int_settings.int_pin_en);
 800d800:	7fbb      	ldrb	r3, [r7, #30]
 800d802:	b25b      	sxtb	r3, r3
 800d804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d808:	b25a      	sxtb	r2, r3
 800d80a:	7c7b      	ldrb	r3, [r7, #17]
 800d80c:	019b      	lsls	r3, r3, #6
 800d80e:	b25b      	sxtb	r3, r3
 800d810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d814:	b25b      	sxtb	r3, r3
 800d816:	4313      	orrs	r3, r2
 800d818:	b25b      	sxtb	r3, r3
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_DRDY_POLARITY)
 800d81e:	89fb      	ldrh	r3, [r7, #14]
 800d820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d824:	2b00      	cmp	r3, #0
 800d826:	d00e      	beq.n	800d846 <interrupt_pin_settings+0xb0>
        {
            /* Sets Data ready pin's polarity */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_DRDY_POLARITY, int_settings.drdy_polarity);
 800d828:	7fbb      	ldrb	r3, [r7, #30]
 800d82a:	b25b      	sxtb	r3, r3
 800d82c:	f023 0304 	bic.w	r3, r3, #4
 800d830:	b25a      	sxtb	r2, r3
 800d832:	7cbb      	ldrb	r3, [r7, #18]
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	b25b      	sxtb	r3, r3
 800d838:	f003 0304 	and.w	r3, r3, #4
 800d83c:	b25b      	sxtb	r3, r3
 800d83e:	4313      	orrs	r3, r2
 800d840:	b25b      	sxtb	r3, r3
 800d842:	b2db      	uxtb	r3, r3
 800d844:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_INT_LATCH)
 800d846:	89fb      	ldrh	r3, [r7, #14]
 800d848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d00e      	beq.n	800d86e <interrupt_pin_settings+0xd8>
        {
            /* Sets Interrupt in latched or non-latched mode */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_INT_LATCH, int_settings.int_latch);
 800d850:	7fbb      	ldrb	r3, [r7, #30]
 800d852:	b25b      	sxtb	r3, r3
 800d854:	f023 0302 	bic.w	r3, r3, #2
 800d858:	b25a      	sxtb	r2, r3
 800d85a:	7cfb      	ldrb	r3, [r7, #19]
 800d85c:	005b      	lsls	r3, r3, #1
 800d85e:	b25b      	sxtb	r3, r3
 800d860:	f003 0302 	and.w	r3, r3, #2
 800d864:	b25b      	sxtb	r3, r3
 800d866:	4313      	orrs	r3, r2
 800d868:	b25b      	sxtb	r3, r3
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_INT_POLARITY)
 800d86e:	89fb      	ldrh	r3, [r7, #14]
 800d870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d874:	2b00      	cmp	r3, #0
 800d876:	d00d      	beq.n	800d894 <interrupt_pin_settings+0xfe>
        {
            /* Sets Interrupt pin's polarity */
            reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_INT_POLARITY, int_settings.int_polarity);
 800d878:	7fbb      	ldrb	r3, [r7, #30]
 800d87a:	b25b      	sxtb	r3, r3
 800d87c:	f023 0301 	bic.w	r3, r3, #1
 800d880:	b25a      	sxtb	r2, r3
 800d882:	7d3b      	ldrb	r3, [r7, #20]
 800d884:	b25b      	sxtb	r3, r3
 800d886:	f003 0301 	and.w	r3, r3, #1
 800d88a:	b25b      	sxtb	r3, r3
 800d88c:	4313      	orrs	r3, r2
 800d88e:	b25b      	sxtb	r3, r3
 800d890:	b2db      	uxtb	r3, r3
 800d892:	77bb      	strb	r3, [r7, #30]
        }

        /* Set the interrupt configurations in the 0x4E register */
        rslt = bmm150_set_regs(BMM150_REG_AXES_ENABLE, &reg_data, 1, dev);
 800d894:	f107 011e 	add.w	r1, r7, #30
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	204e      	movs	r0, #78	; 0x4e
 800d89e:	f7ff fae0 	bl	800ce62 <bmm150_set_regs>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800d8a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3720      	adds	r7, #32
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}

0800d8b2 <interrupt_config>:
 * threshold values set by the user in the High threshold (0x50) and
 * Low threshold (0x4F) registers.
 */
static int8_t interrupt_config(uint16_t desired_settings, const struct bmm150_settings *settings,
                               struct bmm150_dev *dev)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b088      	sub	sp, #32
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	60b9      	str	r1, [r7, #8]
 800d8bc:	607a      	str	r2, [r7, #4]
 800d8be:	81fb      	strh	r3, [r7, #14]
    int8_t rslt;
    uint8_t reg_data;
    struct bmm150_int_ctrl_settings int_settings;

    rslt = bmm150_get_regs(BMM150_REG_INT_CONFIG, &reg_data, 1, dev);
 800d8c0:	f107 011e 	add.w	r1, r7, #30
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	204d      	movs	r0, #77	; 0x4d
 800d8ca:	f7ff faf6 	bl	800ceba <bmm150_get_regs>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMM150_OK)
 800d8d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d15f      	bne.n	800d99a <interrupt_config+0xe8>
    {
        int_settings = settings->int_settings;
 800d8da:	68ba      	ldr	r2, [r7, #8]
 800d8dc:	f107 0310 	add.w	r3, r7, #16
 800d8e0:	3206      	adds	r2, #6
 800d8e2:	6810      	ldr	r0, [r2, #0]
 800d8e4:	6851      	ldr	r1, [r2, #4]
 800d8e6:	c303      	stmia	r3!, {r0, r1}
 800d8e8:	8911      	ldrh	r1, [r2, #8]
 800d8ea:	7a92      	ldrb	r2, [r2, #10]
 800d8ec:	8019      	strh	r1, [r3, #0]
 800d8ee:	709a      	strb	r2, [r3, #2]
        if (desired_settings & BMM150_SEL_DATA_OVERRUN_INT)
 800d8f0:	89fb      	ldrh	r3, [r7, #14]
 800d8f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d00b      	beq.n	800d912 <interrupt_config+0x60>
        {
            /* Sets Data overrun interrupt */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_DATA_OVERRUN_INT, int_settings.data_overrun_en);
 800d8fa:	7fbb      	ldrb	r3, [r7, #30]
 800d8fc:	b25b      	sxtb	r3, r3
 800d8fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d902:	b25a      	sxtb	r2, r3
 800d904:	7d7b      	ldrb	r3, [r7, #21]
 800d906:	01db      	lsls	r3, r3, #7
 800d908:	b25b      	sxtb	r3, r3
 800d90a:	4313      	orrs	r3, r2
 800d90c:	b25b      	sxtb	r3, r3
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_OVERFLOW_INT)
 800d912:	89fb      	ldrh	r3, [r7, #14]
 800d914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d00e      	beq.n	800d93a <interrupt_config+0x88>
        {
            /* Sets Data overflow interrupt */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_OVERFLOW_INT, int_settings.overflow_int_en);
 800d91c:	7fbb      	ldrb	r3, [r7, #30]
 800d91e:	b25b      	sxtb	r3, r3
 800d920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d924:	b25a      	sxtb	r2, r3
 800d926:	7dbb      	ldrb	r3, [r7, #22]
 800d928:	019b      	lsls	r3, r3, #6
 800d92a:	b25b      	sxtb	r3, r3
 800d92c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d930:	b25b      	sxtb	r3, r3
 800d932:	4313      	orrs	r3, r2
 800d934:	b25b      	sxtb	r3, r3
 800d936:	b2db      	uxtb	r3, r3
 800d938:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_HIGH_THRESHOLD_INT)
 800d93a:	89fb      	ldrh	r3, [r7, #14]
 800d93c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00e      	beq.n	800d962 <interrupt_config+0xb0>
        {
            /* Sets high threshold interrupt */
            reg_data = BMM150_SET_BITS(reg_data, BMM150_HIGH_THRESHOLD_INT, int_settings.high_int_en);
 800d944:	7fbb      	ldrb	r3, [r7, #30]
 800d946:	b25b      	sxtb	r3, r3
 800d948:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800d94c:	b25a      	sxtb	r2, r3
 800d94e:	7dfb      	ldrb	r3, [r7, #23]
 800d950:	00db      	lsls	r3, r3, #3
 800d952:	b25b      	sxtb	r3, r3
 800d954:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d958:	b25b      	sxtb	r3, r3
 800d95a:	4313      	orrs	r3, r2
 800d95c:	b25b      	sxtb	r3, r3
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	77bb      	strb	r3, [r7, #30]
        }

        if (desired_settings & BMM150_SEL_LOW_THRESHOLD_INT)
 800d962:	89fb      	ldrh	r3, [r7, #14]
 800d964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d00d      	beq.n	800d988 <interrupt_config+0xd6>
        {
            /* Sets low threshold interrupt */
            reg_data = BMM150_SET_BITS_POS_0(reg_data, BMM150_LOW_THRESHOLD_INT, int_settings.low_int_en);
 800d96c:	7fbb      	ldrb	r3, [r7, #30]
 800d96e:	b25b      	sxtb	r3, r3
 800d970:	f023 0307 	bic.w	r3, r3, #7
 800d974:	b25a      	sxtb	r2, r3
 800d976:	7e3b      	ldrb	r3, [r7, #24]
 800d978:	b25b      	sxtb	r3, r3
 800d97a:	f003 0307 	and.w	r3, r3, #7
 800d97e:	b25b      	sxtb	r3, r3
 800d980:	4313      	orrs	r3, r2
 800d982:	b25b      	sxtb	r3, r3
 800d984:	b2db      	uxtb	r3, r3
 800d986:	77bb      	strb	r3, [r7, #30]
        }

        /* Set the interrupt configurations in the 0x4D register */
        rslt = bmm150_set_regs(BMM150_REG_INT_CONFIG, &reg_data, 1, dev);
 800d988:	f107 011e 	add.w	r1, r7, #30
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2201      	movs	r2, #1
 800d990:	204d      	movs	r0, #77	; 0x4d
 800d992:	f7ff fa66 	bl	800ce62 <bmm150_set_regs>
 800d996:	4603      	mov	r3, r0
 800d998:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800d99a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3720      	adds	r7, #32
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}

0800d9a6 <interrupt_threshold_settings>:
 * as a reference to generate the high/low threshold interrupt.
 */
static int8_t interrupt_threshold_settings(uint16_t desired_settings,
                                           const struct bmm150_settings *settings,
                                           struct bmm150_dev *dev)
{
 800d9a6:	b580      	push	{r7, lr}
 800d9a8:	b086      	sub	sp, #24
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	60b9      	str	r1, [r7, #8]
 800d9b0:	607a      	str	r2, [r7, #4]
 800d9b2:	81fb      	strh	r3, [r7, #14]
    int8_t rslt = BMM150_E_INVALID_CONFIG;
 800d9b4:	23fd      	movs	r3, #253	; 0xfd
 800d9b6:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_data;

    if (desired_settings & BMM150_SEL_LOW_THRESHOLD_SETTING)
 800d9b8:	89fb      	ldrh	r3, [r7, #14]
 800d9ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00b      	beq.n	800d9da <interrupt_threshold_settings+0x34>
    {
        /* Sets the Low threshold value to trigger interrupt */
        reg_data = settings->int_settings.low_threshold;
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	7bdb      	ldrb	r3, [r3, #15]
 800d9c6:	75bb      	strb	r3, [r7, #22]
        rslt = bmm150_set_regs(BMM150_REG_LOW_THRESHOLD, &reg_data, 1, dev);
 800d9c8:	f107 0116 	add.w	r1, r7, #22
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	204f      	movs	r0, #79	; 0x4f
 800d9d2:	f7ff fa46 	bl	800ce62 <bmm150_set_regs>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & BMM150_SEL_HIGH_THRESHOLD_SETTING)
 800d9da:	89fb      	ldrh	r3, [r7, #14]
 800d9dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00b      	beq.n	800d9fc <interrupt_threshold_settings+0x56>
    {
        /* Sets the High threshold value to trigger interrupt */
        reg_data = settings->int_settings.high_threshold;
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	7c1b      	ldrb	r3, [r3, #16]
 800d9e8:	75bb      	strb	r3, [r7, #22]
        rslt = bmm150_set_regs(BMM150_REG_HIGH_THRESHOLD, &reg_data, 1, dev);
 800d9ea:	f107 0116 	add.w	r1, r7, #22
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	2050      	movs	r0, #80	; 0x50
 800d9f4:	f7ff fa35 	bl	800ce62 <bmm150_set_regs>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800d9fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da00:	4618      	mov	r0, r3
 800da02:	3718      	adds	r7, #24
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <compensate_x>:
/*!
 * @brief This internal API is used to obtain the compensated
 * magnetometer x axis data(micro-tesla) in float.
 */
static float compensate_x(int16_t mag_data_x, uint16_t data_rhall, const struct bmm150_dev *dev)
{
 800da08:	b480      	push	{r7}
 800da0a:	b089      	sub	sp, #36	; 0x24
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	4603      	mov	r3, r0
 800da10:	603a      	str	r2, [r7, #0]
 800da12:	80fb      	strh	r3, [r7, #6]
 800da14:	460b      	mov	r3, r1
 800da16:	80bb      	strh	r3, [r7, #4]
    float retval = 0;
 800da18:	f04f 0300 	mov.w	r3, #0
 800da1c:	61fb      	str	r3, [r7, #28]
    float process_comp_x2;
    float process_comp_x3;
    float process_comp_x4;

    /* Overflow condition check */
    if ((mag_data_x != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP) && (data_rhall != 0) && (dev->trim_data.dig_xyz1 != 0))
 800da1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da22:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800da26:	f000 8086 	beq.w	800db36 <compensate_x+0x12e>
 800da2a:	88bb      	ldrh	r3, [r7, #4]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	f000 8082 	beq.w	800db36 <compensate_x+0x12e>
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800da36:	2b00      	cmp	r3, #0
 800da38:	d07d      	beq.n	800db36 <compensate_x+0x12e>
    {
        /* Processing compensation equations */
        process_comp_x0 = (((float)dev->trim_data.dig_xyz1) * 16384.0f / data_rhall);
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800da3e:	ee07 3a90 	vmov	s15, r3
 800da42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da46:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800db50 <compensate_x+0x148>
 800da4a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800da4e:	88bb      	ldrh	r3, [r7, #4]
 800da50:	ee07 3a90 	vmov	s15, r3
 800da54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800da58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da5c:	edc7 7a06 	vstr	s15, [r7, #24]
        retval = (process_comp_x0 - 16384.0f);
 800da60:	edd7 7a06 	vldr	s15, [r7, #24]
 800da64:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800db50 <compensate_x+0x148>
 800da68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da6c:	edc7 7a07 	vstr	s15, [r7, #28]
        process_comp_x1 = ((float)dev->trim_data.dig_xy2) * (retval * retval / 268435456.0f);
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 800da76:	ee07 3a90 	vmov	s15, r3
 800da7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800da7e:	edd7 7a07 	vldr	s15, [r7, #28]
 800da82:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800da86:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800db54 <compensate_x+0x14c>
 800da8a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800da8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da92:	edc7 7a05 	vstr	s15, [r7, #20]
        process_comp_x2 = process_comp_x1 + retval * ((float)dev->trim_data.dig_xy1) / 16384.0f;
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800da9c:	ee07 3a90 	vmov	s15, r3
 800daa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800daa4:	edd7 7a07 	vldr	s15, [r7, #28]
 800daa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800daac:	eddf 6a28 	vldr	s13, [pc, #160]	; 800db50 <compensate_x+0x148>
 800dab0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dab4:	ed97 7a05 	vldr	s14, [r7, #20]
 800dab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dabc:	edc7 7a04 	vstr	s15, [r7, #16]
        process_comp_x3 = ((float)dev->trim_data.dig_x2) + 160.0f;
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	f993 301a 	ldrsb.w	r3, [r3, #26]
 800dac6:	ee07 3a90 	vmov	s15, r3
 800daca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dace:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800db58 <compensate_x+0x150>
 800dad2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dad6:	edc7 7a03 	vstr	s15, [r7, #12]
        process_comp_x4 = mag_data_x * ((process_comp_x2 + 256.0f) * process_comp_x3);
 800dada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dade:	ee07 3a90 	vmov	s15, r3
 800dae2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dae6:	edd7 7a04 	vldr	s15, [r7, #16]
 800daea:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800db5c <compensate_x+0x154>
 800daee:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800daf2:	edd7 7a03 	vldr	s15, [r7, #12]
 800daf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dafa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dafe:	edc7 7a02 	vstr	s15, [r7, #8]
        retval = ((process_comp_x4 / 8192.0f) + (((float)dev->trim_data.dig_x1) * 8.0f)) / 16.0f;
 800db02:	edd7 7a02 	vldr	s15, [r7, #8]
 800db06:	eddf 6a16 	vldr	s13, [pc, #88]	; 800db60 <compensate_x+0x158>
 800db0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800db14:	ee07 3a90 	vmov	s15, r3
 800db18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db1c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800db20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800db24:	ee37 7a27 	vadd.f32	s14, s14, s15
 800db28:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800db2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800db30:	edc7 7a07 	vstr	s15, [r7, #28]
 800db34:	e002      	b.n	800db3c <compensate_x+0x134>
    }
    else
    {
        /* Overflow, set output to 0.0f */
        retval = BMM150_OVERFLOW_OUTPUT_FLOAT;
 800db36:	f04f 0300 	mov.w	r3, #0
 800db3a:	61fb      	str	r3, [r7, #28]
    }

    return retval;
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	ee07 3a90 	vmov	s15, r3
}
 800db42:	eeb0 0a67 	vmov.f32	s0, s15
 800db46:	3724      	adds	r7, #36	; 0x24
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr
 800db50:	46800000 	.word	0x46800000
 800db54:	4d800000 	.word	0x4d800000
 800db58:	43200000 	.word	0x43200000
 800db5c:	43800000 	.word	0x43800000
 800db60:	46000000 	.word	0x46000000

0800db64 <compensate_y>:
/*!
 * @brief This internal API is used to obtain the compensated
 * magnetometer y axis data(micro-tesla) in float.
 */
static float compensate_y(int16_t mag_data_y, uint16_t data_rhall, const struct bmm150_dev *dev)
{
 800db64:	b480      	push	{r7}
 800db66:	b089      	sub	sp, #36	; 0x24
 800db68:	af00      	add	r7, sp, #0
 800db6a:	4603      	mov	r3, r0
 800db6c:	603a      	str	r2, [r7, #0]
 800db6e:	80fb      	strh	r3, [r7, #6]
 800db70:	460b      	mov	r3, r1
 800db72:	80bb      	strh	r3, [r7, #4]
    float retval = 0;
 800db74:	f04f 0300 	mov.w	r3, #0
 800db78:	61fb      	str	r3, [r7, #28]
    float process_comp_y2;
    float process_comp_y3;
    float process_comp_y4;

    /* Overflow condition check */
    if ((mag_data_y != BMM150_OVERFLOW_ADCVAL_XYAXES_FLIP) && (data_rhall != 0) && (dev->trim_data.dig_xyz1 != 0))
 800db7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db7e:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 800db82:	f000 8086 	beq.w	800dc92 <compensate_y+0x12e>
 800db86:	88bb      	ldrh	r3, [r7, #4]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f000 8082 	beq.w	800dc92 <compensate_y+0x12e>
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800db92:	2b00      	cmp	r3, #0
 800db94:	d07d      	beq.n	800dc92 <compensate_y+0x12e>
    {
        /* Processing compensation equations */
        process_comp_y0 = ((float)dev->trim_data.dig_xyz1) * 16384.0f / data_rhall;
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800db9a:	ee07 3a90 	vmov	s15, r3
 800db9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dba2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800dcac <compensate_y+0x148>
 800dba6:	ee67 6a87 	vmul.f32	s13, s15, s14
 800dbaa:	88bb      	ldrh	r3, [r7, #4]
 800dbac:	ee07 3a90 	vmov	s15, r3
 800dbb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dbb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbb8:	edc7 7a06 	vstr	s15, [r7, #24]
        retval = process_comp_y0 - 16384.0f;
 800dbbc:	edd7 7a06 	vldr	s15, [r7, #24]
 800dbc0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800dcac <compensate_y+0x148>
 800dbc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dbc8:	edc7 7a07 	vstr	s15, [r7, #28]
        process_comp_y1 = ((float)dev->trim_data.dig_xy2) * (retval * retval / 268435456.0f);
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 800dbd2:	ee07 3a90 	vmov	s15, r3
 800dbd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dbda:	edd7 7a07 	vldr	s15, [r7, #28]
 800dbde:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800dbe2:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800dcb0 <compensate_y+0x14c>
 800dbe6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800dbea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbee:	edc7 7a05 	vstr	s15, [r7, #20]
        process_comp_y2 = process_comp_y1 + retval * ((float)dev->trim_data.dig_xy1) / 16384.0f;
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dbf8:	ee07 3a90 	vmov	s15, r3
 800dbfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dc00:	edd7 7a07 	vldr	s15, [r7, #28]
 800dc04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc08:	eddf 6a28 	vldr	s13, [pc, #160]	; 800dcac <compensate_y+0x148>
 800dc0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dc10:	ed97 7a05 	vldr	s14, [r7, #20]
 800dc14:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc18:	edc7 7a04 	vstr	s15, [r7, #16]
        process_comp_y3 = ((float)dev->trim_data.dig_y2) + 160.0f;
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	f993 301b 	ldrsb.w	r3, [r3, #27]
 800dc22:	ee07 3a90 	vmov	s15, r3
 800dc26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc2a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800dcb4 <compensate_y+0x150>
 800dc2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc32:	edc7 7a03 	vstr	s15, [r7, #12]
        process_comp_y4 = mag_data_y * (((process_comp_y2) + 256.0f) * process_comp_y3);
 800dc36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc3a:	ee07 3a90 	vmov	s15, r3
 800dc3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dc42:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc46:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800dcb8 <compensate_y+0x154>
 800dc4a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800dc4e:	edd7 7a03 	vldr	s15, [r7, #12]
 800dc52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc5a:	edc7 7a02 	vstr	s15, [r7, #8]
        retval = ((process_comp_y4 / 8192.0f) + (((float)dev->trim_data.dig_y1) * 8.0f)) / 16.0f;
 800dc5e:	edd7 7a02 	vldr	s15, [r7, #8]
 800dc62:	eddf 6a16 	vldr	s13, [pc, #88]	; 800dcbc <compensate_y+0x158>
 800dc66:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	f993 3019 	ldrsb.w	r3, [r3, #25]
 800dc70:	ee07 3a90 	vmov	s15, r3
 800dc74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc78:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800dc7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dc80:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc84:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800dc88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dc8c:	edc7 7a07 	vstr	s15, [r7, #28]
 800dc90:	e002      	b.n	800dc98 <compensate_y+0x134>
    }
    else
    {
        /* Overflow, set output to 0.0f */
        retval = BMM150_OVERFLOW_OUTPUT_FLOAT;
 800dc92:	f04f 0300 	mov.w	r3, #0
 800dc96:	61fb      	str	r3, [r7, #28]
    }

    return retval;
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	ee07 3a90 	vmov	s15, r3
}
 800dc9e:	eeb0 0a67 	vmov.f32	s0, s15
 800dca2:	3724      	adds	r7, #36	; 0x24
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr
 800dcac:	46800000 	.word	0x46800000
 800dcb0:	4d800000 	.word	0x4d800000
 800dcb4:	43200000 	.word	0x43200000
 800dcb8:	43800000 	.word	0x43800000
 800dcbc:	46000000 	.word	0x46000000

0800dcc0 <compensate_z>:
/*!
 * @brief This internal API is used to obtain the compensated
 * magnetometer z axis data(micro-tesla) in float.
 */
static float compensate_z(int16_t mag_data_z, uint16_t data_rhall, const struct bmm150_dev *dev)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b08b      	sub	sp, #44	; 0x2c
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	603a      	str	r2, [r7, #0]
 800dcca:	80fb      	strh	r3, [r7, #6]
 800dccc:	460b      	mov	r3, r1
 800dcce:	80bb      	strh	r3, [r7, #4]
    float retval = 0;
 800dcd0:	f04f 0300 	mov.w	r3, #0
 800dcd4:	627b      	str	r3, [r7, #36]	; 0x24
    float process_comp_z3;
    float process_comp_z4;
    float process_comp_z5;

    /* Overflow condition check */
    if ((mag_data_z != BMM150_OVERFLOW_ADCVAL_ZAXIS_HALL) && (dev->trim_data.dig_z2 != 0) &&
 800dcd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dcda:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 800dcde:	d079      	beq.n	800ddd4 <compensate_z+0x114>
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d074      	beq.n	800ddd4 <compensate_z+0x114>
        (dev->trim_data.dig_z1 != 0) && (dev->trim_data.dig_xyz1 != 0) && (data_rhall != 0))
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	8b9b      	ldrh	r3, [r3, #28]
    if ((mag_data_z != BMM150_OVERFLOW_ADCVAL_ZAXIS_HALL) && (dev->trim_data.dig_z2 != 0) &&
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d070      	beq.n	800ddd4 <compensate_z+0x114>
        (dev->trim_data.dig_z1 != 0) && (dev->trim_data.dig_xyz1 != 0) && (data_rhall != 0))
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d06c      	beq.n	800ddd4 <compensate_z+0x114>
 800dcfa:	88bb      	ldrh	r3, [r7, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d069      	beq.n	800ddd4 <compensate_z+0x114>
    {
        /* Processing compensation equations */
        process_comp_z0 = ((float)mag_data_z) - ((float)dev->trim_data.dig_z4);
 800dd00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd04:	ee07 3a90 	vmov	s15, r3
 800dd08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800dd12:	ee07 3a90 	vmov	s15, r3
 800dd16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd1e:	edc7 7a08 	vstr	s15, [r7, #32]
        process_comp_z1 = ((float)data_rhall) - ((float)dev->trim_data.dig_xyz1);
 800dd22:	88bb      	ldrh	r3, [r7, #4]
 800dd24:	ee07 3a90 	vmov	s15, r3
 800dd28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dd30:	ee07 3a90 	vmov	s15, r3
 800dd34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd3c:	edc7 7a07 	vstr	s15, [r7, #28]
        process_comp_z2 = (((float)dev->trim_data.dig_z3) * process_comp_z1);
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800dd46:	ee07 3a90 	vmov	s15, r3
 800dd4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd4e:	ed97 7a07 	vldr	s14, [r7, #28]
 800dd52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd56:	edc7 7a06 	vstr	s15, [r7, #24]
        process_comp_z3 = ((float)dev->trim_data.dig_z1) * ((float)data_rhall) / 32768.0f;
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	8b9b      	ldrh	r3, [r3, #28]
 800dd5e:	ee07 3a90 	vmov	s15, r3
 800dd62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dd66:	88bb      	ldrh	r3, [r7, #4]
 800dd68:	ee07 3a90 	vmov	s15, r3
 800dd6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd74:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800ddf0 <compensate_z+0x130>
 800dd78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dd7c:	edc7 7a05 	vstr	s15, [r7, #20]
        process_comp_z4 = ((float)dev->trim_data.dig_z2) + process_comp_z3;
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800dd86:	ee07 3a90 	vmov	s15, r3
 800dd8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd8e:	ed97 7a05 	vldr	s14, [r7, #20]
 800dd92:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd96:	edc7 7a04 	vstr	s15, [r7, #16]
        process_comp_z5 = (process_comp_z0 * 131072.0f) - process_comp_z2;
 800dd9a:	edd7 7a08 	vldr	s15, [r7, #32]
 800dd9e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800ddf4 <compensate_z+0x134>
 800dda2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dda6:	edd7 7a06 	vldr	s15, [r7, #24]
 800ddaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ddae:	edc7 7a03 	vstr	s15, [r7, #12]
        retval = (process_comp_z5 / ((process_comp_z4) * 4.0f)) / 16.0f;
 800ddb2:	edd7 7a04 	vldr	s15, [r7, #16]
 800ddb6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800ddba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddbe:	edd7 6a03 	vldr	s13, [r7, #12]
 800ddc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddc6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800ddca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ddce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800ddd2:	e002      	b.n	800ddda <compensate_z+0x11a>
    }
    else
    {
        /* Overflow, set output to 0.0f */
        retval = BMM150_OVERFLOW_OUTPUT_FLOAT;
 800ddd4:	f04f 0300 	mov.w	r3, #0
 800ddd8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return retval;
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	ee07 3a90 	vmov	s15, r3
}
 800dde0:	eeb0 0a67 	vmov.f32	s0, s15
 800dde4:	372c      	adds	r7, #44	; 0x2c
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr
 800ddee:	bf00      	nop
 800ddf0:	47000000 	.word	0x47000000
 800ddf4:	48000000 	.word	0x48000000

0800ddf8 <bmm150_user_i2c_init>:
/*!                User interface functions                                   */

/*!
 * @brief Function for initialization of I2C bus.
 */
int8_t bmm150_user_i2c_init(void) {
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	af00      	add	r7, sp, #0
    /* Implement I2C bus initialization according to the target machine. */

    if (HAL_I2C_IsDeviceReady(&hi2c1, BMM150_DEFAULT_I2C_ADDRESS << 1, 2, 2000) == HAL_OK) {
 800ddfc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800de00:	2202      	movs	r2, #2
 800de02:	2120      	movs	r1, #32
 800de04:	4805      	ldr	r0, [pc, #20]	; (800de1c <bmm150_user_i2c_init+0x24>)
 800de06:	f7f9 f953 	bl	80070b0 <HAL_I2C_IsDeviceReady>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d101      	bne.n	800de14 <bmm150_user_i2c_init+0x1c>
//        printf("BMM150 is ready\n");
        return 0;
 800de10:	2300      	movs	r3, #0
 800de12:	e000      	b.n	800de16 <bmm150_user_i2c_init+0x1e>
    }
    return 1;
 800de14:	2301      	movs	r3, #1
}
 800de16:	4618      	mov	r0, r3
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	20000538 	.word	0x20000538

0800de20 <bmm150_user_spi_init>:

/*!
 * @brief Function for initialization of SPI bus.
 */
int8_t bmm150_user_spi_init(void) {
 800de20:	b480      	push	{r7}
 800de22:	af00      	add	r7, sp, #0

    /* Implement SPI bus initialization according to the target machine. */
    return 0;
 800de24:	2300      	movs	r3, #0
}
 800de26:	4618      	mov	r0, r3
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr

0800de30 <bmm150_user_delay_us>:

/*!
 * @brief This function provides the delay for required time (Microseconds) as per the input provided in some of the
 * APIs.
 */
void bmm150_user_delay_us(uint32_t period_us, void *intf_ptr) {
 800de30:	b480      	push	{r7}
 800de32:	b083      	sub	sp, #12
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
	htim10.Instance->CNT = 0;  // set the counter value a 0
 800de3a:	4b09      	ldr	r3, [pc, #36]	; (800de60 <bmm150_user_delay_us+0x30>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2200      	movs	r2, #0
 800de40:	625a      	str	r2, [r3, #36]	; 0x24
    while (htim10.Instance->CNT < period_us);  // wait for the counter to reach the us input in the parameter
 800de42:	bf00      	nop
 800de44:	4b06      	ldr	r3, [pc, #24]	; (800de60 <bmm150_user_delay_us+0x30>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d8f9      	bhi.n	800de44 <bmm150_user_delay_us+0x14>
    /* Wait for a period amount of microseconds. */
}
 800de50:	bf00      	nop
 800de52:	bf00      	nop
 800de54:	370c      	adds	r7, #12
 800de56:	46bd      	mov	sp, r7
 800de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5c:	4770      	bx	lr
 800de5e:	bf00      	nop
 800de60:	200007f4 	.word	0x200007f4

0800de64 <bmm150_user_i2c_reg_write>:

/*!
 * @brief This function is for writing the sensor's registers through I2C bus.
 */
int8_t bmm150_user_i2c_reg_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800de64:	b580      	push	{r7, lr}
 800de66:	b088      	sub	sp, #32
 800de68:	af04      	add	r7, sp, #16
 800de6a:	60b9      	str	r1, [r7, #8]
 800de6c:	607a      	str	r2, [r7, #4]
 800de6e:	603b      	str	r3, [r7, #0]
 800de70:	4603      	mov	r3, r0
 800de72:	73fb      	strb	r3, [r7, #15]

    /* Write to registers using I2C. Return 0 for a successful execution. */
    if (HAL_I2C_Mem_Write(&hi2c1, BMM150_DEFAULT_I2C_ADDRESS << 1, reg_addr, 1, reg_data, length, 1000) == HAL_OK) {
 800de74:	7bfb      	ldrb	r3, [r7, #15]
 800de76:	b29a      	uxth	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800de80:	9102      	str	r1, [sp, #8]
 800de82:	9301      	str	r3, [sp, #4]
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	9300      	str	r3, [sp, #0]
 800de88:	2301      	movs	r3, #1
 800de8a:	2120      	movs	r1, #32
 800de8c:	4806      	ldr	r0, [pc, #24]	; (800dea8 <bmm150_user_i2c_reg_write+0x44>)
 800de8e:	f7f8 fdef 	bl	8006a70 <HAL_I2C_Mem_Write>
 800de92:	4603      	mov	r3, r0
 800de94:	2b00      	cmp	r3, #0
 800de96:	d101      	bne.n	800de9c <bmm150_user_i2c_reg_write+0x38>
        return BMM150_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	e000      	b.n	800de9e <bmm150_user_i2c_reg_write+0x3a>
    };
    return 1;
 800de9c:	2301      	movs	r3, #1
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	20000538 	.word	0x20000538

0800deac <bmm150_user_i2c_reg_read>:

/*!
 * @brief This function is for reading the sensor's registers through I2C bus.
 */
int8_t bmm150_user_i2c_reg_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800deac:	b580      	push	{r7, lr}
 800deae:	b088      	sub	sp, #32
 800deb0:	af04      	add	r7, sp, #16
 800deb2:	60b9      	str	r1, [r7, #8]
 800deb4:	607a      	str	r2, [r7, #4]
 800deb6:	603b      	str	r3, [r7, #0]
 800deb8:	4603      	mov	r3, r0
 800deba:	73fb      	strb	r3, [r7, #15]

    /* Read from registers using I2C. Return 0 for a successful execution. */
    if (HAL_I2C_Mem_Read(&hi2c1, BMM150_DEFAULT_I2C_ADDRESS << 1, reg_addr, 1, reg_data, length, 1000) == HAL_OK) {
 800debc:	7bfb      	ldrb	r3, [r7, #15]
 800debe:	b29a      	uxth	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dec8:	9102      	str	r1, [sp, #8]
 800deca:	9301      	str	r3, [sp, #4]
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	9300      	str	r3, [sp, #0]
 800ded0:	2301      	movs	r3, #1
 800ded2:	2120      	movs	r1, #32
 800ded4:	4806      	ldr	r0, [pc, #24]	; (800def0 <bmm150_user_i2c_reg_read+0x44>)
 800ded6:	f7f8 fec5 	bl	8006c64 <HAL_I2C_Mem_Read>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d101      	bne.n	800dee4 <bmm150_user_i2c_reg_read+0x38>
        return BMM150_OK;
 800dee0:	2300      	movs	r3, #0
 800dee2:	e000      	b.n	800dee6 <bmm150_user_i2c_reg_read+0x3a>
    };
    return 1;
 800dee4:	2301      	movs	r3, #1
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	20000538 	.word	0x20000538

0800def4 <bmm150_user_spi_reg_write>:

/*!
 * @brief This function is for writing the sensor's registers through SPI bus.
 */
int8_t bmm150_user_spi_reg_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800def4:	b480      	push	{r7}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	60b9      	str	r1, [r7, #8]
 800defc:	607a      	str	r2, [r7, #4]
 800defe:	603b      	str	r3, [r7, #0]
 800df00:	4603      	mov	r3, r0
 800df02:	73fb      	strb	r3, [r7, #15]

    /* Write to registers using SPI. Return 0 for a successful execution. */
    return 0;
 800df04:	2300      	movs	r3, #0
}
 800df06:	4618      	mov	r0, r3
 800df08:	3714      	adds	r7, #20
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr

0800df12 <bmm150_user_spi_reg_read>:

/*!
 * @brief This function is for reading the sensor's registers through SPI bus.
 */
int8_t bmm150_user_spi_reg_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr) {
 800df12:	b480      	push	{r7}
 800df14:	b085      	sub	sp, #20
 800df16:	af00      	add	r7, sp, #0
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	607a      	str	r2, [r7, #4]
 800df1c:	603b      	str	r3, [r7, #0]
 800df1e:	4603      	mov	r3, r0
 800df20:	73fb      	strb	r3, [r7, #15]

    /* Read from registers using SPI. Return 0 for a successful execution. */
    return 0;
 800df22:	2300      	movs	r3, #0
}
 800df24:	4618      	mov	r0, r3
 800df26:	3714      	adds	r7, #20
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr

0800df30 <bmm150_interface_selection>:

/*!
 *  @brief This function is to select the interface between SPI and I2C.
 */
int8_t bmm150_interface_selection(struct bmm150_dev *dev) {
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMM150_OK;
 800df38:	2300      	movs	r3, #0
 800df3a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL) {
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d028      	beq.n	800df94 <bmm150_interface_selection+0x64>
        /* Select the interface for execution
         * For I2C : BMM150_I2C_INTF
         * For SPI : BMM150_SPI_INTF
         */
        dev->intf = BMM150_I2C_INTF;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2201      	movs	r2, #1
 800df46:	705a      	strb	r2, [r3, #1]

        /* Bus configuration : I2C */
        if (dev->intf == BMM150_I2C_INTF) {
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	785b      	ldrb	r3, [r3, #1]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d10b      	bne.n	800df68 <bmm150_interface_selection+0x38>
//            printf("I2C Interface \n");

            /* To initialize the user I2C function */
            bmm150_user_i2c_init();
 800df50:	f7ff ff52 	bl	800ddf8 <bmm150_user_i2c_init>

            dev_addr = BMM150_DEFAULT_I2C_ADDRESS;
 800df54:	4b13      	ldr	r3, [pc, #76]	; (800dfa4 <bmm150_interface_selection+0x74>)
 800df56:	2210      	movs	r2, #16
 800df58:	701a      	strb	r2, [r3, #0]
            dev->read = bmm150_user_i2c_reg_read;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4a12      	ldr	r2, [pc, #72]	; (800dfa8 <bmm150_interface_selection+0x78>)
 800df5e:	60da      	str	r2, [r3, #12]
            dev->write = bmm150_user_i2c_reg_write;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	4a12      	ldr	r2, [pc, #72]	; (800dfac <bmm150_interface_selection+0x7c>)
 800df64:	611a      	str	r2, [r3, #16]
 800df66:	e00e      	b.n	800df86 <bmm150_interface_selection+0x56>
        }
            /* Bus configuration : SPI */
        else if (dev->intf == BMM150_SPI_INTF) {
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	785b      	ldrb	r3, [r3, #1]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d10a      	bne.n	800df86 <bmm150_interface_selection+0x56>
//            printf("SPI Interface \n");

            /* To initialize the user SPI function */
            bmm150_user_spi_init();
 800df70:	f7ff ff56 	bl	800de20 <bmm150_user_spi_init>

            dev_addr = 0;
 800df74:	4b0b      	ldr	r3, [pc, #44]	; (800dfa4 <bmm150_interface_selection+0x74>)
 800df76:	2200      	movs	r2, #0
 800df78:	701a      	strb	r2, [r3, #0]
            dev->read = bmm150_user_spi_reg_read;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	4a0c      	ldr	r2, [pc, #48]	; (800dfb0 <bmm150_interface_selection+0x80>)
 800df7e:	60da      	str	r2, [r3, #12]
            dev->write = bmm150_user_spi_reg_write;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	4a0c      	ldr	r2, [pc, #48]	; (800dfb4 <bmm150_interface_selection+0x84>)
 800df84:	611a      	str	r2, [r3, #16]
        }

        /* Assign device address to interface pointer */
        dev->intf_ptr = &dev_addr;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	4a06      	ldr	r2, [pc, #24]	; (800dfa4 <bmm150_interface_selection+0x74>)
 800df8a:	605a      	str	r2, [r3, #4]

        /* Configure delay in microseconds */
        dev->delay_us = bmm150_user_delay_us;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4a0a      	ldr	r2, [pc, #40]	; (800dfb8 <bmm150_interface_selection+0x88>)
 800df90:	615a      	str	r2, [r3, #20]
 800df92:	e001      	b.n	800df98 <bmm150_interface_selection+0x68>
    } else {
        rslt = BMM150_E_NULL_PTR;
 800df94:	23ff      	movs	r3, #255	; 0xff
 800df96:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800df98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3710      	adds	r7, #16
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	20002b60 	.word	0x20002b60
 800dfa8:	0800dead 	.word	0x0800dead
 800dfac:	0800de65 	.word	0x0800de65
 800dfb0:	0800df13 	.word	0x0800df13
 800dfb4:	0800def5 	.word	0x0800def5
 800dfb8:	0800de31 	.word	0x0800de31

0800dfbc <bmm150_error_codes_print_result>:

/*!
 * @brief This internal API prints the execution status
 */
void bmm150_error_codes_print_result(const char api_name[], int8_t rslt) {
 800dfbc:	b480      	push	{r7}
 800dfbe:	b083      	sub	sp, #12
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	70fb      	strb	r3, [r7, #3]
    if (rslt != BMM150_OK) {
 800dfc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00f      	beq.n	800dff0 <bmm150_error_codes_print_result+0x34>
//        printf("%s\t", api_name);

        switch (rslt) {
 800dfd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dfd4:	3304      	adds	r3, #4
 800dfd6:	2b03      	cmp	r3, #3
 800dfd8:	d80c      	bhi.n	800dff4 <bmm150_error_codes_print_result+0x38>
 800dfda:	a201      	add	r2, pc, #4	; (adr r2, 800dfe0 <bmm150_error_codes_print_result+0x24>)
 800dfdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfe0:	0800dff5 	.word	0x0800dff5
 800dfe4:	0800dff5 	.word	0x0800dff5
 800dfe8:	0800dff5 	.word	0x0800dff5
 800dfec:	0800dff5 	.word	0x0800dff5

            default:
//                printf("Error [%d] : Unknown error code\r\n", rslt);
                break;
        }
    }
 800dff0:	bf00      	nop
 800dff2:	e000      	b.n	800dff6 <bmm150_error_codes_print_result+0x3a>
                break;
 800dff4:	bf00      	nop
}
 800dff6:	bf00      	nop
 800dff8:	370c      	adds	r7, #12
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop

0800e004 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	4603      	mov	r3, r0
 800e00c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e00e:	2300      	movs	r3, #0
 800e010:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e016:	2b84      	cmp	r3, #132	; 0x84
 800e018:	d005      	beq.n	800e026 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e01a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	4413      	add	r3, r2
 800e022:	3303      	adds	r3, #3
 800e024:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e026:	68fb      	ldr	r3, [r7, #12]
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3714      	adds	r7, #20
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr

0800e034 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e038:	f000 ff20 	bl	800ee7c <vTaskStartScheduler>
  
  return osOK;
 800e03c:	2300      	movs	r3, #0
}
 800e03e:	4618      	mov	r0, r3
 800e040:	bd80      	pop	{r7, pc}

0800e042 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e042:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e044:	b089      	sub	sp, #36	; 0x24
 800e046:	af04      	add	r7, sp, #16
 800e048:	6078      	str	r0, [r7, #4]
 800e04a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	695b      	ldr	r3, [r3, #20]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d020      	beq.n	800e096 <osThreadCreate+0x54>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	699b      	ldr	r3, [r3, #24]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d01c      	beq.n	800e096 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	685c      	ldr	r4, [r3, #4]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681d      	ldr	r5, [r3, #0]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	691e      	ldr	r6, [r3, #16]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e06e:	4618      	mov	r0, r3
 800e070:	f7ff ffc8 	bl	800e004 <makeFreeRtosPriority>
 800e074:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	695b      	ldr	r3, [r3, #20]
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e07e:	9202      	str	r2, [sp, #8]
 800e080:	9301      	str	r3, [sp, #4]
 800e082:	9100      	str	r1, [sp, #0]
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	4632      	mov	r2, r6
 800e088:	4629      	mov	r1, r5
 800e08a:	4620      	mov	r0, r4
 800e08c:	f000 fc9e 	bl	800e9cc <xTaskCreateStatic>
 800e090:	4603      	mov	r3, r0
 800e092:	60fb      	str	r3, [r7, #12]
 800e094:	e01c      	b.n	800e0d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	685c      	ldr	r4, [r3, #4]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e0a2:	b29e      	uxth	r6, r3
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7ff ffaa 	bl	800e004 <makeFreeRtosPriority>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	f107 030c 	add.w	r3, r7, #12
 800e0b6:	9301      	str	r3, [sp, #4]
 800e0b8:	9200      	str	r2, [sp, #0]
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	4632      	mov	r2, r6
 800e0be:	4629      	mov	r1, r5
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	f000 fce0 	bl	800ea86 <xTaskCreate>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d001      	beq.n	800e0d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	e000      	b.n	800e0d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3714      	adds	r7, #20
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e0da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e0da:	b580      	push	{r7, lr}
 800e0dc:	b084      	sub	sp, #16
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d001      	beq.n	800e0f0 <osDelay+0x16>
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	e000      	b.n	800e0f2 <osDelay+0x18>
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f000 fdfe 	bl	800ecf4 <vTaskDelay>
  
  return osOK;
 800e0f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3710      	adds	r7, #16
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}

0800e102 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e102:	b480      	push	{r7}
 800e104:	b083      	sub	sp, #12
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f103 0208 	add.w	r2, r3, #8
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f04f 32ff 	mov.w	r2, #4294967295
 800e11a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f103 0208 	add.w	r2, r3, #8
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f103 0208 	add.w	r2, r3, #8
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2200      	movs	r2, #0
 800e134:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e136:	bf00      	nop
 800e138:	370c      	adds	r7, #12
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr

0800e142 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e142:	b480      	push	{r7}
 800e144:	b083      	sub	sp, #12
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2200      	movs	r2, #0
 800e14e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e150:	bf00      	nop
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e15c:	b480      	push	{r7}
 800e15e:	b085      	sub	sp, #20
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	689a      	ldr	r2, [r3, #8]
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	689b      	ldr	r3, [r3, #8]
 800e17e:	683a      	ldr	r2, [r7, #0]
 800e180:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	683a      	ldr	r2, [r7, #0]
 800e186:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	687a      	ldr	r2, [r7, #4]
 800e18c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	1c5a      	adds	r2, r3, #1
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	601a      	str	r2, [r3, #0]
}
 800e198:	bf00      	nop
 800e19a:	3714      	adds	r7, #20
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ba:	d103      	bne.n	800e1c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	691b      	ldr	r3, [r3, #16]
 800e1c0:	60fb      	str	r3, [r7, #12]
 800e1c2:	e00c      	b.n	800e1de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	3308      	adds	r3, #8
 800e1c8:	60fb      	str	r3, [r7, #12]
 800e1ca:	e002      	b.n	800e1d2 <vListInsert+0x2e>
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	60fb      	str	r3, [r7, #12]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	68ba      	ldr	r2, [r7, #8]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d2f6      	bcs.n	800e1cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	685a      	ldr	r2, [r3, #4]
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	683a      	ldr	r2, [r7, #0]
 800e1ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	68fa      	ldr	r2, [r7, #12]
 800e1f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	683a      	ldr	r2, [r7, #0]
 800e1f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	1c5a      	adds	r2, r3, #1
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	601a      	str	r2, [r3, #0]
}
 800e20a:	bf00      	nop
 800e20c:	3714      	adds	r7, #20
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr

0800e216 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e216:	b480      	push	{r7}
 800e218:	b085      	sub	sp, #20
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	691b      	ldr	r3, [r3, #16]
 800e222:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	687a      	ldr	r2, [r7, #4]
 800e22a:	6892      	ldr	r2, [r2, #8]
 800e22c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	689b      	ldr	r3, [r3, #8]
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	6852      	ldr	r2, [r2, #4]
 800e236:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	687a      	ldr	r2, [r7, #4]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d103      	bne.n	800e24a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	689a      	ldr	r2, [r3, #8]
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2200      	movs	r2, #0
 800e24e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	1e5a      	subs	r2, r3, #1
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3714      	adds	r7, #20
 800e262:	46bd      	mov	sp, r7
 800e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e268:	4770      	bx	lr
	...

0800e26c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d10a      	bne.n	800e296 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e284:	f383 8811 	msr	BASEPRI, r3
 800e288:	f3bf 8f6f 	isb	sy
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e292:	bf00      	nop
 800e294:	e7fe      	b.n	800e294 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e296:	f001 fc25 	bl	800fae4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2a2:	68f9      	ldr	r1, [r7, #12]
 800e2a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e2a6:	fb01 f303 	mul.w	r3, r1, r3
 800e2aa:	441a      	add	r2, r3
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	68f9      	ldr	r1, [r7, #12]
 800e2ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e2cc:	fb01 f303 	mul.w	r3, r1, r3
 800e2d0:	441a      	add	r2, r3
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	22ff      	movs	r2, #255	; 0xff
 800e2da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	22ff      	movs	r2, #255	; 0xff
 800e2e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d114      	bne.n	800e316 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	691b      	ldr	r3, [r3, #16]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d01a      	beq.n	800e32a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	3310      	adds	r3, #16
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f001 f801 	bl	800f300 <xTaskRemoveFromEventList>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d012      	beq.n	800e32a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e304:	4b0c      	ldr	r3, [pc, #48]	; (800e338 <xQueueGenericReset+0xcc>)
 800e306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e30a:	601a      	str	r2, [r3, #0]
 800e30c:	f3bf 8f4f 	dsb	sy
 800e310:	f3bf 8f6f 	isb	sy
 800e314:	e009      	b.n	800e32a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	3310      	adds	r3, #16
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7ff fef1 	bl	800e102 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	3324      	adds	r3, #36	; 0x24
 800e324:	4618      	mov	r0, r3
 800e326:	f7ff feec 	bl	800e102 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e32a:	f001 fc0b 	bl	800fb44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e32e:	2301      	movs	r3, #1
}
 800e330:	4618      	mov	r0, r3
 800e332:	3710      	adds	r7, #16
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	e000ed04 	.word	0xe000ed04

0800e33c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b08a      	sub	sp, #40	; 0x28
 800e340:	af02      	add	r7, sp, #8
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	4613      	mov	r3, r2
 800e348:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d10a      	bne.n	800e366 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	613b      	str	r3, [r7, #16]
}
 800e362:	bf00      	nop
 800e364:	e7fe      	b.n	800e364 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	68ba      	ldr	r2, [r7, #8]
 800e36a:	fb02 f303 	mul.w	r3, r2, r3
 800e36e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	3348      	adds	r3, #72	; 0x48
 800e374:	4618      	mov	r0, r3
 800e376:	f001 fc97 	bl	800fca8 <pvPortMalloc>
 800e37a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d011      	beq.n	800e3a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	3348      	adds	r3, #72	; 0x48
 800e38a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e38c:	69bb      	ldr	r3, [r7, #24]
 800e38e:	2200      	movs	r2, #0
 800e390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e394:	79fa      	ldrb	r2, [r7, #7]
 800e396:	69bb      	ldr	r3, [r7, #24]
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	4613      	mov	r3, r2
 800e39c:	697a      	ldr	r2, [r7, #20]
 800e39e:	68b9      	ldr	r1, [r7, #8]
 800e3a0:	68f8      	ldr	r0, [r7, #12]
 800e3a2:	f000 f805 	bl	800e3b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e3a6:	69bb      	ldr	r3, [r7, #24]
	}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3720      	adds	r7, #32
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
 800e3bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d103      	bne.n	800e3cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	69ba      	ldr	r2, [r7, #24]
 800e3c8:	601a      	str	r2, [r3, #0]
 800e3ca:	e002      	b.n	800e3d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e3cc:	69bb      	ldr	r3, [r7, #24]
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e3d2:	69bb      	ldr	r3, [r7, #24]
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	68ba      	ldr	r2, [r7, #8]
 800e3dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e3de:	2101      	movs	r1, #1
 800e3e0:	69b8      	ldr	r0, [r7, #24]
 800e3e2:	f7ff ff43 	bl	800e26c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e3e6:	bf00      	nop
 800e3e8:	3710      	adds	r7, #16
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
	...

0800e3f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b08e      	sub	sp, #56	; 0x38
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	60f8      	str	r0, [r7, #12]
 800e3f8:	60b9      	str	r1, [r7, #8]
 800e3fa:	607a      	str	r2, [r7, #4]
 800e3fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e3fe:	2300      	movs	r3, #0
 800e400:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d10a      	bne.n	800e422 <xQueueGenericSend+0x32>
	__asm volatile
 800e40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e410:	f383 8811 	msr	BASEPRI, r3
 800e414:	f3bf 8f6f 	isb	sy
 800e418:	f3bf 8f4f 	dsb	sy
 800e41c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e41e:	bf00      	nop
 800e420:	e7fe      	b.n	800e420 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d103      	bne.n	800e430 <xQueueGenericSend+0x40>
 800e428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d101      	bne.n	800e434 <xQueueGenericSend+0x44>
 800e430:	2301      	movs	r3, #1
 800e432:	e000      	b.n	800e436 <xQueueGenericSend+0x46>
 800e434:	2300      	movs	r3, #0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d10a      	bne.n	800e450 <xQueueGenericSend+0x60>
	__asm volatile
 800e43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e43e:	f383 8811 	msr	BASEPRI, r3
 800e442:	f3bf 8f6f 	isb	sy
 800e446:	f3bf 8f4f 	dsb	sy
 800e44a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e44c:	bf00      	nop
 800e44e:	e7fe      	b.n	800e44e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	2b02      	cmp	r3, #2
 800e454:	d103      	bne.n	800e45e <xQueueGenericSend+0x6e>
 800e456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d101      	bne.n	800e462 <xQueueGenericSend+0x72>
 800e45e:	2301      	movs	r3, #1
 800e460:	e000      	b.n	800e464 <xQueueGenericSend+0x74>
 800e462:	2300      	movs	r3, #0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d10a      	bne.n	800e47e <xQueueGenericSend+0x8e>
	__asm volatile
 800e468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46c:	f383 8811 	msr	BASEPRI, r3
 800e470:	f3bf 8f6f 	isb	sy
 800e474:	f3bf 8f4f 	dsb	sy
 800e478:	623b      	str	r3, [r7, #32]
}
 800e47a:	bf00      	nop
 800e47c:	e7fe      	b.n	800e47c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e47e:	f001 f8fb 	bl	800f678 <xTaskGetSchedulerState>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d102      	bne.n	800e48e <xQueueGenericSend+0x9e>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d101      	bne.n	800e492 <xQueueGenericSend+0xa2>
 800e48e:	2301      	movs	r3, #1
 800e490:	e000      	b.n	800e494 <xQueueGenericSend+0xa4>
 800e492:	2300      	movs	r3, #0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d10a      	bne.n	800e4ae <xQueueGenericSend+0xbe>
	__asm volatile
 800e498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49c:	f383 8811 	msr	BASEPRI, r3
 800e4a0:	f3bf 8f6f 	isb	sy
 800e4a4:	f3bf 8f4f 	dsb	sy
 800e4a8:	61fb      	str	r3, [r7, #28]
}
 800e4aa:	bf00      	nop
 800e4ac:	e7fe      	b.n	800e4ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4ae:	f001 fb19 	bl	800fae4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d302      	bcc.n	800e4c4 <xQueueGenericSend+0xd4>
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	2b02      	cmp	r3, #2
 800e4c2:	d129      	bne.n	800e518 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4c4:	683a      	ldr	r2, [r7, #0]
 800e4c6:	68b9      	ldr	r1, [r7, #8]
 800e4c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4ca:	f000 f96f 	bl	800e7ac <prvCopyDataToQueue>
 800e4ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d010      	beq.n	800e4fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4da:	3324      	adds	r3, #36	; 0x24
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f000 ff0f 	bl	800f300 <xTaskRemoveFromEventList>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d013      	beq.n	800e510 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e4e8:	4b3f      	ldr	r3, [pc, #252]	; (800e5e8 <xQueueGenericSend+0x1f8>)
 800e4ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4ee:	601a      	str	r2, [r3, #0]
 800e4f0:	f3bf 8f4f 	dsb	sy
 800e4f4:	f3bf 8f6f 	isb	sy
 800e4f8:	e00a      	b.n	800e510 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d007      	beq.n	800e510 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e500:	4b39      	ldr	r3, [pc, #228]	; (800e5e8 <xQueueGenericSend+0x1f8>)
 800e502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e506:	601a      	str	r2, [r3, #0]
 800e508:	f3bf 8f4f 	dsb	sy
 800e50c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e510:	f001 fb18 	bl	800fb44 <vPortExitCritical>
				return pdPASS;
 800e514:	2301      	movs	r3, #1
 800e516:	e063      	b.n	800e5e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d103      	bne.n	800e526 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e51e:	f001 fb11 	bl	800fb44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e522:	2300      	movs	r3, #0
 800e524:	e05c      	b.n	800e5e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d106      	bne.n	800e53a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e52c:	f107 0314 	add.w	r3, r7, #20
 800e530:	4618      	mov	r0, r3
 800e532:	f000 ff47 	bl	800f3c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e536:	2301      	movs	r3, #1
 800e538:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e53a:	f001 fb03 	bl	800fb44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e53e:	f000 fcfd 	bl	800ef3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e542:	f001 facf 	bl	800fae4 <vPortEnterCritical>
 800e546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e54c:	b25b      	sxtb	r3, r3
 800e54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e552:	d103      	bne.n	800e55c <xQueueGenericSend+0x16c>
 800e554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e556:	2200      	movs	r2, #0
 800e558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e562:	b25b      	sxtb	r3, r3
 800e564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e568:	d103      	bne.n	800e572 <xQueueGenericSend+0x182>
 800e56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56c:	2200      	movs	r2, #0
 800e56e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e572:	f001 fae7 	bl	800fb44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e576:	1d3a      	adds	r2, r7, #4
 800e578:	f107 0314 	add.w	r3, r7, #20
 800e57c:	4611      	mov	r1, r2
 800e57e:	4618      	mov	r0, r3
 800e580:	f000 ff36 	bl	800f3f0 <xTaskCheckForTimeOut>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d124      	bne.n	800e5d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e58a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e58c:	f000 fa06 	bl	800e99c <prvIsQueueFull>
 800e590:	4603      	mov	r3, r0
 800e592:	2b00      	cmp	r3, #0
 800e594:	d018      	beq.n	800e5c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e598:	3310      	adds	r3, #16
 800e59a:	687a      	ldr	r2, [r7, #4]
 800e59c:	4611      	mov	r1, r2
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f000 fe8a 	bl	800f2b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e5a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5a6:	f000 f991 	bl	800e8cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e5aa:	f000 fcd5 	bl	800ef58 <xTaskResumeAll>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	f47f af7c 	bne.w	800e4ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e5b6:	4b0c      	ldr	r3, [pc, #48]	; (800e5e8 <xQueueGenericSend+0x1f8>)
 800e5b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5bc:	601a      	str	r2, [r3, #0]
 800e5be:	f3bf 8f4f 	dsb	sy
 800e5c2:	f3bf 8f6f 	isb	sy
 800e5c6:	e772      	b.n	800e4ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e5c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5ca:	f000 f97f 	bl	800e8cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5ce:	f000 fcc3 	bl	800ef58 <xTaskResumeAll>
 800e5d2:	e76c      	b.n	800e4ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e5d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5d6:	f000 f979 	bl	800e8cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5da:	f000 fcbd 	bl	800ef58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e5de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3738      	adds	r7, #56	; 0x38
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	e000ed04 	.word	0xe000ed04

0800e5ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b08c      	sub	sp, #48	; 0x30
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e602:	2b00      	cmp	r3, #0
 800e604:	d10a      	bne.n	800e61c <xQueueReceive+0x30>
	__asm volatile
 800e606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60a:	f383 8811 	msr	BASEPRI, r3
 800e60e:	f3bf 8f6f 	isb	sy
 800e612:	f3bf 8f4f 	dsb	sy
 800e616:	623b      	str	r3, [r7, #32]
}
 800e618:	bf00      	nop
 800e61a:	e7fe      	b.n	800e61a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d103      	bne.n	800e62a <xQueueReceive+0x3e>
 800e622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e626:	2b00      	cmp	r3, #0
 800e628:	d101      	bne.n	800e62e <xQueueReceive+0x42>
 800e62a:	2301      	movs	r3, #1
 800e62c:	e000      	b.n	800e630 <xQueueReceive+0x44>
 800e62e:	2300      	movs	r3, #0
 800e630:	2b00      	cmp	r3, #0
 800e632:	d10a      	bne.n	800e64a <xQueueReceive+0x5e>
	__asm volatile
 800e634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e638:	f383 8811 	msr	BASEPRI, r3
 800e63c:	f3bf 8f6f 	isb	sy
 800e640:	f3bf 8f4f 	dsb	sy
 800e644:	61fb      	str	r3, [r7, #28]
}
 800e646:	bf00      	nop
 800e648:	e7fe      	b.n	800e648 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e64a:	f001 f815 	bl	800f678 <xTaskGetSchedulerState>
 800e64e:	4603      	mov	r3, r0
 800e650:	2b00      	cmp	r3, #0
 800e652:	d102      	bne.n	800e65a <xQueueReceive+0x6e>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d101      	bne.n	800e65e <xQueueReceive+0x72>
 800e65a:	2301      	movs	r3, #1
 800e65c:	e000      	b.n	800e660 <xQueueReceive+0x74>
 800e65e:	2300      	movs	r3, #0
 800e660:	2b00      	cmp	r3, #0
 800e662:	d10a      	bne.n	800e67a <xQueueReceive+0x8e>
	__asm volatile
 800e664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e668:	f383 8811 	msr	BASEPRI, r3
 800e66c:	f3bf 8f6f 	isb	sy
 800e670:	f3bf 8f4f 	dsb	sy
 800e674:	61bb      	str	r3, [r7, #24]
}
 800e676:	bf00      	nop
 800e678:	e7fe      	b.n	800e678 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e67a:	f001 fa33 	bl	800fae4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e682:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e686:	2b00      	cmp	r3, #0
 800e688:	d01f      	beq.n	800e6ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e68a:	68b9      	ldr	r1, [r7, #8]
 800e68c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e68e:	f000 f8f7 	bl	800e880 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e694:	1e5a      	subs	r2, r3, #1
 800e696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e698:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69c:	691b      	ldr	r3, [r3, #16]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d00f      	beq.n	800e6c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a4:	3310      	adds	r3, #16
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f000 fe2a 	bl	800f300 <xTaskRemoveFromEventList>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d007      	beq.n	800e6c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e6b2:	4b3d      	ldr	r3, [pc, #244]	; (800e7a8 <xQueueReceive+0x1bc>)
 800e6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6b8:	601a      	str	r2, [r3, #0]
 800e6ba:	f3bf 8f4f 	dsb	sy
 800e6be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e6c2:	f001 fa3f 	bl	800fb44 <vPortExitCritical>
				return pdPASS;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e069      	b.n	800e79e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d103      	bne.n	800e6d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e6d0:	f001 fa38 	bl	800fb44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	e062      	b.n	800e79e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d106      	bne.n	800e6ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6de:	f107 0310 	add.w	r3, r7, #16
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f000 fe6e 	bl	800f3c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e6ec:	f001 fa2a 	bl	800fb44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e6f0:	f000 fc24 	bl	800ef3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6f4:	f001 f9f6 	bl	800fae4 <vPortEnterCritical>
 800e6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6fe:	b25b      	sxtb	r3, r3
 800e700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e704:	d103      	bne.n	800e70e <xQueueReceive+0x122>
 800e706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e708:	2200      	movs	r2, #0
 800e70a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e714:	b25b      	sxtb	r3, r3
 800e716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e71a:	d103      	bne.n	800e724 <xQueueReceive+0x138>
 800e71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71e:	2200      	movs	r2, #0
 800e720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e724:	f001 fa0e 	bl	800fb44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e728:	1d3a      	adds	r2, r7, #4
 800e72a:	f107 0310 	add.w	r3, r7, #16
 800e72e:	4611      	mov	r1, r2
 800e730:	4618      	mov	r0, r3
 800e732:	f000 fe5d 	bl	800f3f0 <xTaskCheckForTimeOut>
 800e736:	4603      	mov	r3, r0
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d123      	bne.n	800e784 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e73c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e73e:	f000 f917 	bl	800e970 <prvIsQueueEmpty>
 800e742:	4603      	mov	r3, r0
 800e744:	2b00      	cmp	r3, #0
 800e746:	d017      	beq.n	800e778 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74a:	3324      	adds	r3, #36	; 0x24
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	4611      	mov	r1, r2
 800e750:	4618      	mov	r0, r3
 800e752:	f000 fdb1 	bl	800f2b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e758:	f000 f8b8 	bl	800e8cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e75c:	f000 fbfc 	bl	800ef58 <xTaskResumeAll>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d189      	bne.n	800e67a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e766:	4b10      	ldr	r3, [pc, #64]	; (800e7a8 <xQueueReceive+0x1bc>)
 800e768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e76c:	601a      	str	r2, [r3, #0]
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	e780      	b.n	800e67a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e77a:	f000 f8a7 	bl	800e8cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e77e:	f000 fbeb 	bl	800ef58 <xTaskResumeAll>
 800e782:	e77a      	b.n	800e67a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e786:	f000 f8a1 	bl	800e8cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e78a:	f000 fbe5 	bl	800ef58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e78e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e790:	f000 f8ee 	bl	800e970 <prvIsQueueEmpty>
 800e794:	4603      	mov	r3, r0
 800e796:	2b00      	cmp	r3, #0
 800e798:	f43f af6f 	beq.w	800e67a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e79c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3730      	adds	r7, #48	; 0x30
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	e000ed04 	.word	0xe000ed04

0800e7ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b086      	sub	sp, #24
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d10d      	bne.n	800e7e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d14d      	bne.n	800e86e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f000 ff6c 	bl	800f6b4 <xTaskPriorityDisinherit>
 800e7dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	609a      	str	r2, [r3, #8]
 800e7e4:	e043      	b.n	800e86e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d119      	bne.n	800e820 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	6858      	ldr	r0, [r3, #4]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	68b9      	ldr	r1, [r7, #8]
 800e7f8:	f001 fc6a 	bl	80100d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	685a      	ldr	r2, [r3, #4]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e804:	441a      	add	r2, r3
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	685a      	ldr	r2, [r3, #4]
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	429a      	cmp	r2, r3
 800e814:	d32b      	bcc.n	800e86e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	605a      	str	r2, [r3, #4]
 800e81e:	e026      	b.n	800e86e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	68d8      	ldr	r0, [r3, #12]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e828:	461a      	mov	r2, r3
 800e82a:	68b9      	ldr	r1, [r7, #8]
 800e82c:	f001 fc50 	bl	80100d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	68da      	ldr	r2, [r3, #12]
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e838:	425b      	negs	r3, r3
 800e83a:	441a      	add	r2, r3
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	68da      	ldr	r2, [r3, #12]
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d207      	bcs.n	800e85c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	689a      	ldr	r2, [r3, #8]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e854:	425b      	negs	r3, r3
 800e856:	441a      	add	r2, r3
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2b02      	cmp	r3, #2
 800e860:	d105      	bne.n	800e86e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d002      	beq.n	800e86e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	3b01      	subs	r3, #1
 800e86c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	1c5a      	adds	r2, r3, #1
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e876:	697b      	ldr	r3, [r7, #20]
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3718      	adds	r7, #24
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d018      	beq.n	800e8c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	68da      	ldr	r2, [r3, #12]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e89a:	441a      	add	r2, r3
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	68da      	ldr	r2, [r3, #12]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	689b      	ldr	r3, [r3, #8]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d303      	bcc.n	800e8b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	68d9      	ldr	r1, [r3, #12]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8bc:	461a      	mov	r2, r3
 800e8be:	6838      	ldr	r0, [r7, #0]
 800e8c0:	f001 fc06 	bl	80100d0 <memcpy>
	}
}
 800e8c4:	bf00      	nop
 800e8c6:	3708      	adds	r7, #8
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e8d4:	f001 f906 	bl	800fae4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e8e0:	e011      	b.n	800e906 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d012      	beq.n	800e910 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	3324      	adds	r3, #36	; 0x24
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f000 fd06 	bl	800f300 <xTaskRemoveFromEventList>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d001      	beq.n	800e8fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e8fa:	f000 fddb 	bl	800f4b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e8fe:	7bfb      	ldrb	r3, [r7, #15]
 800e900:	3b01      	subs	r3, #1
 800e902:	b2db      	uxtb	r3, r3
 800e904:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	dce9      	bgt.n	800e8e2 <prvUnlockQueue+0x16>
 800e90e:	e000      	b.n	800e912 <prvUnlockQueue+0x46>
					break;
 800e910:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	22ff      	movs	r2, #255	; 0xff
 800e916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e91a:	f001 f913 	bl	800fb44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e91e:	f001 f8e1 	bl	800fae4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e928:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e92a:	e011      	b.n	800e950 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d012      	beq.n	800e95a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	3310      	adds	r3, #16
 800e938:	4618      	mov	r0, r3
 800e93a:	f000 fce1 	bl	800f300 <xTaskRemoveFromEventList>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d001      	beq.n	800e948 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e944:	f000 fdb6 	bl	800f4b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e948:	7bbb      	ldrb	r3, [r7, #14]
 800e94a:	3b01      	subs	r3, #1
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e954:	2b00      	cmp	r3, #0
 800e956:	dce9      	bgt.n	800e92c <prvUnlockQueue+0x60>
 800e958:	e000      	b.n	800e95c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e95a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	22ff      	movs	r2, #255	; 0xff
 800e960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e964:	f001 f8ee 	bl	800fb44 <vPortExitCritical>
}
 800e968:	bf00      	nop
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e978:	f001 f8b4 	bl	800fae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e980:	2b00      	cmp	r3, #0
 800e982:	d102      	bne.n	800e98a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e984:	2301      	movs	r3, #1
 800e986:	60fb      	str	r3, [r7, #12]
 800e988:	e001      	b.n	800e98e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e98a:	2300      	movs	r3, #0
 800e98c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e98e:	f001 f8d9 	bl	800fb44 <vPortExitCritical>

	return xReturn;
 800e992:	68fb      	ldr	r3, [r7, #12]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3710      	adds	r7, #16
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e9a4:	f001 f89e 	bl	800fae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d102      	bne.n	800e9ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	60fb      	str	r3, [r7, #12]
 800e9b8:	e001      	b.n	800e9be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e9be:	f001 f8c1 	bl	800fb44 <vPortExitCritical>

	return xReturn;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3710      	adds	r7, #16
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b08e      	sub	sp, #56	; 0x38
 800e9d0:	af04      	add	r7, sp, #16
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	60b9      	str	r1, [r7, #8]
 800e9d6:	607a      	str	r2, [r7, #4]
 800e9d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d10a      	bne.n	800e9f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e4:	f383 8811 	msr	BASEPRI, r3
 800e9e8:	f3bf 8f6f 	isb	sy
 800e9ec:	f3bf 8f4f 	dsb	sy
 800e9f0:	623b      	str	r3, [r7, #32]
}
 800e9f2:	bf00      	nop
 800e9f4:	e7fe      	b.n	800e9f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d10a      	bne.n	800ea12 <xTaskCreateStatic+0x46>
	__asm volatile
 800e9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea00:	f383 8811 	msr	BASEPRI, r3
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	61fb      	str	r3, [r7, #28]
}
 800ea0e:	bf00      	nop
 800ea10:	e7fe      	b.n	800ea10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ea12:	2354      	movs	r3, #84	; 0x54
 800ea14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	2b54      	cmp	r3, #84	; 0x54
 800ea1a:	d00a      	beq.n	800ea32 <xTaskCreateStatic+0x66>
	__asm volatile
 800ea1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea20:	f383 8811 	msr	BASEPRI, r3
 800ea24:	f3bf 8f6f 	isb	sy
 800ea28:	f3bf 8f4f 	dsb	sy
 800ea2c:	61bb      	str	r3, [r7, #24]
}
 800ea2e:	bf00      	nop
 800ea30:	e7fe      	b.n	800ea30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ea32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ea34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d01e      	beq.n	800ea78 <xTaskCreateStatic+0xac>
 800ea3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d01b      	beq.n	800ea78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ea44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4c:	2202      	movs	r2, #2
 800ea4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ea52:	2300      	movs	r3, #0
 800ea54:	9303      	str	r3, [sp, #12]
 800ea56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea58:	9302      	str	r3, [sp, #8]
 800ea5a:	f107 0314 	add.w	r3, r7, #20
 800ea5e:	9301      	str	r3, [sp, #4]
 800ea60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea62:	9300      	str	r3, [sp, #0]
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	68b9      	ldr	r1, [r7, #8]
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	f000 f850 	bl	800eb10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ea70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea72:	f000 f8d5 	bl	800ec20 <prvAddNewTaskToReadyList>
 800ea76:	e001      	b.n	800ea7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ea7c:	697b      	ldr	r3, [r7, #20]
	}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3728      	adds	r7, #40	; 0x28
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}

0800ea86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ea86:	b580      	push	{r7, lr}
 800ea88:	b08c      	sub	sp, #48	; 0x30
 800ea8a:	af04      	add	r7, sp, #16
 800ea8c:	60f8      	str	r0, [r7, #12]
 800ea8e:	60b9      	str	r1, [r7, #8]
 800ea90:	603b      	str	r3, [r7, #0]
 800ea92:	4613      	mov	r3, r2
 800ea94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ea96:	88fb      	ldrh	r3, [r7, #6]
 800ea98:	009b      	lsls	r3, r3, #2
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f001 f904 	bl	800fca8 <pvPortMalloc>
 800eaa0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d00e      	beq.n	800eac6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eaa8:	2054      	movs	r0, #84	; 0x54
 800eaaa:	f001 f8fd 	bl	800fca8 <pvPortMalloc>
 800eaae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d003      	beq.n	800eabe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	697a      	ldr	r2, [r7, #20]
 800eaba:	631a      	str	r2, [r3, #48]	; 0x30
 800eabc:	e005      	b.n	800eaca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eabe:	6978      	ldr	r0, [r7, #20]
 800eac0:	f001 f9be 	bl	800fe40 <vPortFree>
 800eac4:	e001      	b.n	800eaca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eac6:	2300      	movs	r3, #0
 800eac8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eaca:	69fb      	ldr	r3, [r7, #28]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d017      	beq.n	800eb00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	2200      	movs	r2, #0
 800ead4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ead8:	88fa      	ldrh	r2, [r7, #6]
 800eada:	2300      	movs	r3, #0
 800eadc:	9303      	str	r3, [sp, #12]
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	9302      	str	r3, [sp, #8]
 800eae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae4:	9301      	str	r3, [sp, #4]
 800eae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae8:	9300      	str	r3, [sp, #0]
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	68b9      	ldr	r1, [r7, #8]
 800eaee:	68f8      	ldr	r0, [r7, #12]
 800eaf0:	f000 f80e 	bl	800eb10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eaf4:	69f8      	ldr	r0, [r7, #28]
 800eaf6:	f000 f893 	bl	800ec20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eafa:	2301      	movs	r3, #1
 800eafc:	61bb      	str	r3, [r7, #24]
 800eafe:	e002      	b.n	800eb06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eb00:	f04f 33ff 	mov.w	r3, #4294967295
 800eb04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eb06:	69bb      	ldr	r3, [r7, #24]
	}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3720      	adds	r7, #32
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b088      	sub	sp, #32
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	60f8      	str	r0, [r7, #12]
 800eb18:	60b9      	str	r1, [r7, #8]
 800eb1a:	607a      	str	r2, [r7, #4]
 800eb1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eb28:	3b01      	subs	r3, #1
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	4413      	add	r3, r2
 800eb2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eb30:	69bb      	ldr	r3, [r7, #24]
 800eb32:	f023 0307 	bic.w	r3, r3, #7
 800eb36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	f003 0307 	and.w	r3, r3, #7
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d00a      	beq.n	800eb58 <prvInitialiseNewTask+0x48>
	__asm volatile
 800eb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb46:	f383 8811 	msr	BASEPRI, r3
 800eb4a:	f3bf 8f6f 	isb	sy
 800eb4e:	f3bf 8f4f 	dsb	sy
 800eb52:	617b      	str	r3, [r7, #20]
}
 800eb54:	bf00      	nop
 800eb56:	e7fe      	b.n	800eb56 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d01f      	beq.n	800eb9e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eb5e:	2300      	movs	r3, #0
 800eb60:	61fb      	str	r3, [r7, #28]
 800eb62:	e012      	b.n	800eb8a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800eb64:	68ba      	ldr	r2, [r7, #8]
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	4413      	add	r3, r2
 800eb6a:	7819      	ldrb	r1, [r3, #0]
 800eb6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb6e:	69fb      	ldr	r3, [r7, #28]
 800eb70:	4413      	add	r3, r2
 800eb72:	3334      	adds	r3, #52	; 0x34
 800eb74:	460a      	mov	r2, r1
 800eb76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eb78:	68ba      	ldr	r2, [r7, #8]
 800eb7a:	69fb      	ldr	r3, [r7, #28]
 800eb7c:	4413      	add	r3, r2
 800eb7e:	781b      	ldrb	r3, [r3, #0]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d006      	beq.n	800eb92 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	3301      	adds	r3, #1
 800eb88:	61fb      	str	r3, [r7, #28]
 800eb8a:	69fb      	ldr	r3, [r7, #28]
 800eb8c:	2b0f      	cmp	r3, #15
 800eb8e:	d9e9      	bls.n	800eb64 <prvInitialiseNewTask+0x54>
 800eb90:	e000      	b.n	800eb94 <prvInitialiseNewTask+0x84>
			{
				break;
 800eb92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb96:	2200      	movs	r2, #0
 800eb98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eb9c:	e003      	b.n	800eba6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba0:	2200      	movs	r2, #0
 800eba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba8:	2b06      	cmp	r3, #6
 800ebaa:	d901      	bls.n	800ebb0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ebac:	2306      	movs	r3, #6
 800ebae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ebb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ebb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ebbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ebc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc4:	3304      	adds	r3, #4
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7ff fabb 	bl	800e142 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ebcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebce:	3318      	adds	r3, #24
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7ff fab6 	bl	800e142 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebde:	f1c3 0207 	rsb	r2, r3, #7
 800ebe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ebe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ebec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebee:	2200      	movs	r2, #0
 800ebf0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ebf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ebfa:	683a      	ldr	r2, [r7, #0]
 800ebfc:	68f9      	ldr	r1, [r7, #12]
 800ebfe:	69b8      	ldr	r0, [r7, #24]
 800ec00:	f000 fe44 	bl	800f88c <pxPortInitialiseStack>
 800ec04:	4602      	mov	r2, r0
 800ec06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ec0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d002      	beq.n	800ec16 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ec10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec16:	bf00      	nop
 800ec18:	3720      	adds	r7, #32
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
	...

0800ec20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ec28:	f000 ff5c 	bl	800fae4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ec2c:	4b2a      	ldr	r3, [pc, #168]	; (800ecd8 <prvAddNewTaskToReadyList+0xb8>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	3301      	adds	r3, #1
 800ec32:	4a29      	ldr	r2, [pc, #164]	; (800ecd8 <prvAddNewTaskToReadyList+0xb8>)
 800ec34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ec36:	4b29      	ldr	r3, [pc, #164]	; (800ecdc <prvAddNewTaskToReadyList+0xbc>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d109      	bne.n	800ec52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ec3e:	4a27      	ldr	r2, [pc, #156]	; (800ecdc <prvAddNewTaskToReadyList+0xbc>)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ec44:	4b24      	ldr	r3, [pc, #144]	; (800ecd8 <prvAddNewTaskToReadyList+0xb8>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d110      	bne.n	800ec6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ec4c:	f000 fc56 	bl	800f4fc <prvInitialiseTaskLists>
 800ec50:	e00d      	b.n	800ec6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ec52:	4b23      	ldr	r3, [pc, #140]	; (800ece0 <prvAddNewTaskToReadyList+0xc0>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d109      	bne.n	800ec6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ec5a:	4b20      	ldr	r3, [pc, #128]	; (800ecdc <prvAddNewTaskToReadyList+0xbc>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d802      	bhi.n	800ec6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ec68:	4a1c      	ldr	r2, [pc, #112]	; (800ecdc <prvAddNewTaskToReadyList+0xbc>)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ec6e:	4b1d      	ldr	r3, [pc, #116]	; (800ece4 <prvAddNewTaskToReadyList+0xc4>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	3301      	adds	r3, #1
 800ec74:	4a1b      	ldr	r2, [pc, #108]	; (800ece4 <prvAddNewTaskToReadyList+0xc4>)
 800ec76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	409a      	lsls	r2, r3
 800ec80:	4b19      	ldr	r3, [pc, #100]	; (800ece8 <prvAddNewTaskToReadyList+0xc8>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	4313      	orrs	r3, r2
 800ec86:	4a18      	ldr	r2, [pc, #96]	; (800ece8 <prvAddNewTaskToReadyList+0xc8>)
 800ec88:	6013      	str	r3, [r2, #0]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec8e:	4613      	mov	r3, r2
 800ec90:	009b      	lsls	r3, r3, #2
 800ec92:	4413      	add	r3, r2
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	4a15      	ldr	r2, [pc, #84]	; (800ecec <prvAddNewTaskToReadyList+0xcc>)
 800ec98:	441a      	add	r2, r3
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	3304      	adds	r3, #4
 800ec9e:	4619      	mov	r1, r3
 800eca0:	4610      	mov	r0, r2
 800eca2:	f7ff fa5b 	bl	800e15c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eca6:	f000 ff4d 	bl	800fb44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ecaa:	4b0d      	ldr	r3, [pc, #52]	; (800ece0 <prvAddNewTaskToReadyList+0xc0>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00e      	beq.n	800ecd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ecb2:	4b0a      	ldr	r3, [pc, #40]	; (800ecdc <prvAddNewTaskToReadyList+0xbc>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d207      	bcs.n	800ecd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ecc0:	4b0b      	ldr	r3, [pc, #44]	; (800ecf0 <prvAddNewTaskToReadyList+0xd0>)
 800ecc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecc6:	601a      	str	r2, [r3, #0]
 800ecc8:	f3bf 8f4f 	dsb	sy
 800eccc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecd0:	bf00      	nop
 800ecd2:	3708      	adds	r7, #8
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	20002c64 	.word	0x20002c64
 800ecdc:	20002b64 	.word	0x20002b64
 800ece0:	20002c70 	.word	0x20002c70
 800ece4:	20002c80 	.word	0x20002c80
 800ece8:	20002c6c 	.word	0x20002c6c
 800ecec:	20002b68 	.word	0x20002b68
 800ecf0:	e000ed04 	.word	0xe000ed04

0800ecf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d017      	beq.n	800ed36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ed06:	4b13      	ldr	r3, [pc, #76]	; (800ed54 <vTaskDelay+0x60>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d00a      	beq.n	800ed24 <vTaskDelay+0x30>
	__asm volatile
 800ed0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed12:	f383 8811 	msr	BASEPRI, r3
 800ed16:	f3bf 8f6f 	isb	sy
 800ed1a:	f3bf 8f4f 	dsb	sy
 800ed1e:	60bb      	str	r3, [r7, #8]
}
 800ed20:	bf00      	nop
 800ed22:	e7fe      	b.n	800ed22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ed24:	f000 f90a 	bl	800ef3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ed28:	2100      	movs	r1, #0
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 fd48 	bl	800f7c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ed30:	f000 f912 	bl	800ef58 <xTaskResumeAll>
 800ed34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d107      	bne.n	800ed4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ed3c:	4b06      	ldr	r3, [pc, #24]	; (800ed58 <vTaskDelay+0x64>)
 800ed3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed42:	601a      	str	r2, [r3, #0]
 800ed44:	f3bf 8f4f 	dsb	sy
 800ed48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed4c:	bf00      	nop
 800ed4e:	3710      	adds	r7, #16
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	20002c8c 	.word	0x20002c8c
 800ed58:	e000ed04 	.word	0xe000ed04

0800ed5c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b087      	sub	sp, #28
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ed64:	2300      	movs	r3, #0
 800ed66:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d10a      	bne.n	800ed88 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800ed72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed76:	f383 8811 	msr	BASEPRI, r3
 800ed7a:	f3bf 8f6f 	isb	sy
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	60fb      	str	r3, [r7, #12]
}
 800ed84:	bf00      	nop
 800ed86:	e7fe      	b.n	800ed86 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	695b      	ldr	r3, [r3, #20]
 800ed8c:	4a0a      	ldr	r2, [pc, #40]	; (800edb8 <prvTaskIsTaskSuspended+0x5c>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d10a      	bne.n	800eda8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed96:	4a09      	ldr	r2, [pc, #36]	; (800edbc <prvTaskIsTaskSuspended+0x60>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d005      	beq.n	800eda8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d101      	bne.n	800eda8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800eda4:	2301      	movs	r3, #1
 800eda6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eda8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800edaa:	4618      	mov	r0, r3
 800edac:	371c      	adds	r7, #28
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	20002c50 	.word	0x20002c50
 800edbc:	20002c24 	.word	0x20002c24

0800edc0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b084      	sub	sp, #16
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d10a      	bne.n	800ede8 <vTaskResume+0x28>
	__asm volatile
 800edd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd6:	f383 8811 	msr	BASEPRI, r3
 800edda:	f3bf 8f6f 	isb	sy
 800edde:	f3bf 8f4f 	dsb	sy
 800ede2:	60bb      	str	r3, [r7, #8]
}
 800ede4:	bf00      	nop
 800ede6:	e7fe      	b.n	800ede6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800ede8:	4b20      	ldr	r3, [pc, #128]	; (800ee6c <vTaskResume+0xac>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d037      	beq.n	800ee62 <vTaskResume+0xa2>
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d034      	beq.n	800ee62 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800edf8:	f000 fe74 	bl	800fae4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f7ff ffad 	bl	800ed5c <prvTaskIsTaskSuspended>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d02a      	beq.n	800ee5e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	3304      	adds	r3, #4
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7ff fa02 	bl	800e216 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee16:	2201      	movs	r2, #1
 800ee18:	409a      	lsls	r2, r3
 800ee1a:	4b15      	ldr	r3, [pc, #84]	; (800ee70 <vTaskResume+0xb0>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	4a13      	ldr	r2, [pc, #76]	; (800ee70 <vTaskResume+0xb0>)
 800ee22:	6013      	str	r3, [r2, #0]
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee28:	4613      	mov	r3, r2
 800ee2a:	009b      	lsls	r3, r3, #2
 800ee2c:	4413      	add	r3, r2
 800ee2e:	009b      	lsls	r3, r3, #2
 800ee30:	4a10      	ldr	r2, [pc, #64]	; (800ee74 <vTaskResume+0xb4>)
 800ee32:	441a      	add	r2, r3
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	3304      	adds	r3, #4
 800ee38:	4619      	mov	r1, r3
 800ee3a:	4610      	mov	r0, r2
 800ee3c:	f7ff f98e 	bl	800e15c <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee44:	4b09      	ldr	r3, [pc, #36]	; (800ee6c <vTaskResume+0xac>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d307      	bcc.n	800ee5e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800ee4e:	4b0a      	ldr	r3, [pc, #40]	; (800ee78 <vTaskResume+0xb8>)
 800ee50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee54:	601a      	str	r2, [r3, #0]
 800ee56:	f3bf 8f4f 	dsb	sy
 800ee5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800ee5e:	f000 fe71 	bl	800fb44 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee62:	bf00      	nop
 800ee64:	3710      	adds	r7, #16
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	20002b64 	.word	0x20002b64
 800ee70:	20002c6c 	.word	0x20002c6c
 800ee74:	20002b68 	.word	0x20002b68
 800ee78:	e000ed04 	.word	0xe000ed04

0800ee7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b08a      	sub	sp, #40	; 0x28
 800ee80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ee82:	2300      	movs	r3, #0
 800ee84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ee86:	2300      	movs	r3, #0
 800ee88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ee8a:	463a      	mov	r2, r7
 800ee8c:	1d39      	adds	r1, r7, #4
 800ee8e:	f107 0308 	add.w	r3, r7, #8
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7f2 f87a 	bl	8000f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ee98:	6839      	ldr	r1, [r7, #0]
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	68ba      	ldr	r2, [r7, #8]
 800ee9e:	9202      	str	r2, [sp, #8]
 800eea0:	9301      	str	r3, [sp, #4]
 800eea2:	2300      	movs	r3, #0
 800eea4:	9300      	str	r3, [sp, #0]
 800eea6:	2300      	movs	r3, #0
 800eea8:	460a      	mov	r2, r1
 800eeaa:	491e      	ldr	r1, [pc, #120]	; (800ef24 <vTaskStartScheduler+0xa8>)
 800eeac:	481e      	ldr	r0, [pc, #120]	; (800ef28 <vTaskStartScheduler+0xac>)
 800eeae:	f7ff fd8d 	bl	800e9cc <xTaskCreateStatic>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	4a1d      	ldr	r2, [pc, #116]	; (800ef2c <vTaskStartScheduler+0xb0>)
 800eeb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800eeb8:	4b1c      	ldr	r3, [pc, #112]	; (800ef2c <vTaskStartScheduler+0xb0>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d002      	beq.n	800eec6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800eec0:	2301      	movs	r3, #1
 800eec2:	617b      	str	r3, [r7, #20]
 800eec4:	e001      	b.n	800eeca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800eec6:	2300      	movs	r3, #0
 800eec8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d116      	bne.n	800eefe <vTaskStartScheduler+0x82>
	__asm volatile
 800eed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed4:	f383 8811 	msr	BASEPRI, r3
 800eed8:	f3bf 8f6f 	isb	sy
 800eedc:	f3bf 8f4f 	dsb	sy
 800eee0:	613b      	str	r3, [r7, #16]
}
 800eee2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800eee4:	4b12      	ldr	r3, [pc, #72]	; (800ef30 <vTaskStartScheduler+0xb4>)
 800eee6:	f04f 32ff 	mov.w	r2, #4294967295
 800eeea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800eeec:	4b11      	ldr	r3, [pc, #68]	; (800ef34 <vTaskStartScheduler+0xb8>)
 800eeee:	2201      	movs	r2, #1
 800eef0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800eef2:	4b11      	ldr	r3, [pc, #68]	; (800ef38 <vTaskStartScheduler+0xbc>)
 800eef4:	2200      	movs	r2, #0
 800eef6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800eef8:	f000 fd52 	bl	800f9a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800eefc:	e00e      	b.n	800ef1c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef04:	d10a      	bne.n	800ef1c <vTaskStartScheduler+0xa0>
	__asm volatile
 800ef06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0a:	f383 8811 	msr	BASEPRI, r3
 800ef0e:	f3bf 8f6f 	isb	sy
 800ef12:	f3bf 8f4f 	dsb	sy
 800ef16:	60fb      	str	r3, [r7, #12]
}
 800ef18:	bf00      	nop
 800ef1a:	e7fe      	b.n	800ef1a <vTaskStartScheduler+0x9e>
}
 800ef1c:	bf00      	nop
 800ef1e:	3718      	adds	r7, #24
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}
 800ef24:	08015508 	.word	0x08015508
 800ef28:	0800f4cd 	.word	0x0800f4cd
 800ef2c:	20002c88 	.word	0x20002c88
 800ef30:	20002c84 	.word	0x20002c84
 800ef34:	20002c70 	.word	0x20002c70
 800ef38:	20002c68 	.word	0x20002c68

0800ef3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ef40:	4b04      	ldr	r3, [pc, #16]	; (800ef54 <vTaskSuspendAll+0x18>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	3301      	adds	r3, #1
 800ef46:	4a03      	ldr	r2, [pc, #12]	; (800ef54 <vTaskSuspendAll+0x18>)
 800ef48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ef4a:	bf00      	nop
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr
 800ef54:	20002c8c 	.word	0x20002c8c

0800ef58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ef62:	2300      	movs	r3, #0
 800ef64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ef66:	4b41      	ldr	r3, [pc, #260]	; (800f06c <xTaskResumeAll+0x114>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d10a      	bne.n	800ef84 <xTaskResumeAll+0x2c>
	__asm volatile
 800ef6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef72:	f383 8811 	msr	BASEPRI, r3
 800ef76:	f3bf 8f6f 	isb	sy
 800ef7a:	f3bf 8f4f 	dsb	sy
 800ef7e:	603b      	str	r3, [r7, #0]
}
 800ef80:	bf00      	nop
 800ef82:	e7fe      	b.n	800ef82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ef84:	f000 fdae 	bl	800fae4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ef88:	4b38      	ldr	r3, [pc, #224]	; (800f06c <xTaskResumeAll+0x114>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	3b01      	subs	r3, #1
 800ef8e:	4a37      	ldr	r2, [pc, #220]	; (800f06c <xTaskResumeAll+0x114>)
 800ef90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef92:	4b36      	ldr	r3, [pc, #216]	; (800f06c <xTaskResumeAll+0x114>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d161      	bne.n	800f05e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ef9a:	4b35      	ldr	r3, [pc, #212]	; (800f070 <xTaskResumeAll+0x118>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d05d      	beq.n	800f05e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800efa2:	e02e      	b.n	800f002 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efa4:	4b33      	ldr	r3, [pc, #204]	; (800f074 <xTaskResumeAll+0x11c>)
 800efa6:	68db      	ldr	r3, [r3, #12]
 800efa8:	68db      	ldr	r3, [r3, #12]
 800efaa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	3318      	adds	r3, #24
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7ff f930 	bl	800e216 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	3304      	adds	r3, #4
 800efba:	4618      	mov	r0, r3
 800efbc:	f7ff f92b 	bl	800e216 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efc4:	2201      	movs	r2, #1
 800efc6:	409a      	lsls	r2, r3
 800efc8:	4b2b      	ldr	r3, [pc, #172]	; (800f078 <xTaskResumeAll+0x120>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	4313      	orrs	r3, r2
 800efce:	4a2a      	ldr	r2, [pc, #168]	; (800f078 <xTaskResumeAll+0x120>)
 800efd0:	6013      	str	r3, [r2, #0]
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efd6:	4613      	mov	r3, r2
 800efd8:	009b      	lsls	r3, r3, #2
 800efda:	4413      	add	r3, r2
 800efdc:	009b      	lsls	r3, r3, #2
 800efde:	4a27      	ldr	r2, [pc, #156]	; (800f07c <xTaskResumeAll+0x124>)
 800efe0:	441a      	add	r2, r3
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	3304      	adds	r3, #4
 800efe6:	4619      	mov	r1, r3
 800efe8:	4610      	mov	r0, r2
 800efea:	f7ff f8b7 	bl	800e15c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eff2:	4b23      	ldr	r3, [pc, #140]	; (800f080 <xTaskResumeAll+0x128>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff8:	429a      	cmp	r2, r3
 800effa:	d302      	bcc.n	800f002 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800effc:	4b21      	ldr	r3, [pc, #132]	; (800f084 <xTaskResumeAll+0x12c>)
 800effe:	2201      	movs	r2, #1
 800f000:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f002:	4b1c      	ldr	r3, [pc, #112]	; (800f074 <xTaskResumeAll+0x11c>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d1cc      	bne.n	800efa4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d001      	beq.n	800f014 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f010:	f000 fb12 	bl	800f638 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f014:	4b1c      	ldr	r3, [pc, #112]	; (800f088 <xTaskResumeAll+0x130>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d010      	beq.n	800f042 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f020:	f000 f836 	bl	800f090 <xTaskIncrementTick>
 800f024:	4603      	mov	r3, r0
 800f026:	2b00      	cmp	r3, #0
 800f028:	d002      	beq.n	800f030 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f02a:	4b16      	ldr	r3, [pc, #88]	; (800f084 <xTaskResumeAll+0x12c>)
 800f02c:	2201      	movs	r2, #1
 800f02e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	3b01      	subs	r3, #1
 800f034:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d1f1      	bne.n	800f020 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f03c:	4b12      	ldr	r3, [pc, #72]	; (800f088 <xTaskResumeAll+0x130>)
 800f03e:	2200      	movs	r2, #0
 800f040:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f042:	4b10      	ldr	r3, [pc, #64]	; (800f084 <xTaskResumeAll+0x12c>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d009      	beq.n	800f05e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f04a:	2301      	movs	r3, #1
 800f04c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f04e:	4b0f      	ldr	r3, [pc, #60]	; (800f08c <xTaskResumeAll+0x134>)
 800f050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f054:	601a      	str	r2, [r3, #0]
 800f056:	f3bf 8f4f 	dsb	sy
 800f05a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f05e:	f000 fd71 	bl	800fb44 <vPortExitCritical>

	return xAlreadyYielded;
 800f062:	68bb      	ldr	r3, [r7, #8]
}
 800f064:	4618      	mov	r0, r3
 800f066:	3710      	adds	r7, #16
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	20002c8c 	.word	0x20002c8c
 800f070:	20002c64 	.word	0x20002c64
 800f074:	20002c24 	.word	0x20002c24
 800f078:	20002c6c 	.word	0x20002c6c
 800f07c:	20002b68 	.word	0x20002b68
 800f080:	20002b64 	.word	0x20002b64
 800f084:	20002c78 	.word	0x20002c78
 800f088:	20002c74 	.word	0x20002c74
 800f08c:	e000ed04 	.word	0xe000ed04

0800f090 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b086      	sub	sp, #24
 800f094:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f096:	2300      	movs	r3, #0
 800f098:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f09a:	4b4e      	ldr	r3, [pc, #312]	; (800f1d4 <xTaskIncrementTick+0x144>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	f040 808e 	bne.w	800f1c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f0a4:	4b4c      	ldr	r3, [pc, #304]	; (800f1d8 <xTaskIncrementTick+0x148>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f0ac:	4a4a      	ldr	r2, [pc, #296]	; (800f1d8 <xTaskIncrementTick+0x148>)
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d120      	bne.n	800f0fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f0b8:	4b48      	ldr	r3, [pc, #288]	; (800f1dc <xTaskIncrementTick+0x14c>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00a      	beq.n	800f0d8 <xTaskIncrementTick+0x48>
	__asm volatile
 800f0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c6:	f383 8811 	msr	BASEPRI, r3
 800f0ca:	f3bf 8f6f 	isb	sy
 800f0ce:	f3bf 8f4f 	dsb	sy
 800f0d2:	603b      	str	r3, [r7, #0]
}
 800f0d4:	bf00      	nop
 800f0d6:	e7fe      	b.n	800f0d6 <xTaskIncrementTick+0x46>
 800f0d8:	4b40      	ldr	r3, [pc, #256]	; (800f1dc <xTaskIncrementTick+0x14c>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	60fb      	str	r3, [r7, #12]
 800f0de:	4b40      	ldr	r3, [pc, #256]	; (800f1e0 <xTaskIncrementTick+0x150>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	4a3e      	ldr	r2, [pc, #248]	; (800f1dc <xTaskIncrementTick+0x14c>)
 800f0e4:	6013      	str	r3, [r2, #0]
 800f0e6:	4a3e      	ldr	r2, [pc, #248]	; (800f1e0 <xTaskIncrementTick+0x150>)
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	6013      	str	r3, [r2, #0]
 800f0ec:	4b3d      	ldr	r3, [pc, #244]	; (800f1e4 <xTaskIncrementTick+0x154>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	4a3c      	ldr	r2, [pc, #240]	; (800f1e4 <xTaskIncrementTick+0x154>)
 800f0f4:	6013      	str	r3, [r2, #0]
 800f0f6:	f000 fa9f 	bl	800f638 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f0fa:	4b3b      	ldr	r3, [pc, #236]	; (800f1e8 <xTaskIncrementTick+0x158>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	693a      	ldr	r2, [r7, #16]
 800f100:	429a      	cmp	r2, r3
 800f102:	d348      	bcc.n	800f196 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f104:	4b35      	ldr	r3, [pc, #212]	; (800f1dc <xTaskIncrementTick+0x14c>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d104      	bne.n	800f118 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f10e:	4b36      	ldr	r3, [pc, #216]	; (800f1e8 <xTaskIncrementTick+0x158>)
 800f110:	f04f 32ff 	mov.w	r2, #4294967295
 800f114:	601a      	str	r2, [r3, #0]
					break;
 800f116:	e03e      	b.n	800f196 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f118:	4b30      	ldr	r3, [pc, #192]	; (800f1dc <xTaskIncrementTick+0x14c>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	68db      	ldr	r3, [r3, #12]
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f128:	693a      	ldr	r2, [r7, #16]
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d203      	bcs.n	800f138 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f130:	4a2d      	ldr	r2, [pc, #180]	; (800f1e8 <xTaskIncrementTick+0x158>)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f136:	e02e      	b.n	800f196 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	3304      	adds	r3, #4
 800f13c:	4618      	mov	r0, r3
 800f13e:	f7ff f86a 	bl	800e216 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f146:	2b00      	cmp	r3, #0
 800f148:	d004      	beq.n	800f154 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	3318      	adds	r3, #24
 800f14e:	4618      	mov	r0, r3
 800f150:	f7ff f861 	bl	800e216 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f158:	2201      	movs	r2, #1
 800f15a:	409a      	lsls	r2, r3
 800f15c:	4b23      	ldr	r3, [pc, #140]	; (800f1ec <xTaskIncrementTick+0x15c>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4313      	orrs	r3, r2
 800f162:	4a22      	ldr	r2, [pc, #136]	; (800f1ec <xTaskIncrementTick+0x15c>)
 800f164:	6013      	str	r3, [r2, #0]
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f16a:	4613      	mov	r3, r2
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	4413      	add	r3, r2
 800f170:	009b      	lsls	r3, r3, #2
 800f172:	4a1f      	ldr	r2, [pc, #124]	; (800f1f0 <xTaskIncrementTick+0x160>)
 800f174:	441a      	add	r2, r3
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	3304      	adds	r3, #4
 800f17a:	4619      	mov	r1, r3
 800f17c:	4610      	mov	r0, r2
 800f17e:	f7fe ffed 	bl	800e15c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f186:	4b1b      	ldr	r3, [pc, #108]	; (800f1f4 <xTaskIncrementTick+0x164>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d3b9      	bcc.n	800f104 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f190:	2301      	movs	r3, #1
 800f192:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f194:	e7b6      	b.n	800f104 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f196:	4b17      	ldr	r3, [pc, #92]	; (800f1f4 <xTaskIncrementTick+0x164>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f19c:	4914      	ldr	r1, [pc, #80]	; (800f1f0 <xTaskIncrementTick+0x160>)
 800f19e:	4613      	mov	r3, r2
 800f1a0:	009b      	lsls	r3, r3, #2
 800f1a2:	4413      	add	r3, r2
 800f1a4:	009b      	lsls	r3, r3, #2
 800f1a6:	440b      	add	r3, r1
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d901      	bls.n	800f1b2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f1b2:	4b11      	ldr	r3, [pc, #68]	; (800f1f8 <xTaskIncrementTick+0x168>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d007      	beq.n	800f1ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	617b      	str	r3, [r7, #20]
 800f1be:	e004      	b.n	800f1ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f1c0:	4b0e      	ldr	r3, [pc, #56]	; (800f1fc <xTaskIncrementTick+0x16c>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	4a0d      	ldr	r2, [pc, #52]	; (800f1fc <xTaskIncrementTick+0x16c>)
 800f1c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f1ca:	697b      	ldr	r3, [r7, #20]
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3718      	adds	r7, #24
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	20002c8c 	.word	0x20002c8c
 800f1d8:	20002c68 	.word	0x20002c68
 800f1dc:	20002c1c 	.word	0x20002c1c
 800f1e0:	20002c20 	.word	0x20002c20
 800f1e4:	20002c7c 	.word	0x20002c7c
 800f1e8:	20002c84 	.word	0x20002c84
 800f1ec:	20002c6c 	.word	0x20002c6c
 800f1f0:	20002b68 	.word	0x20002b68
 800f1f4:	20002b64 	.word	0x20002b64
 800f1f8:	20002c78 	.word	0x20002c78
 800f1fc:	20002c74 	.word	0x20002c74

0800f200 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f200:	b480      	push	{r7}
 800f202:	b087      	sub	sp, #28
 800f204:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f206:	4b27      	ldr	r3, [pc, #156]	; (800f2a4 <vTaskSwitchContext+0xa4>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d003      	beq.n	800f216 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f20e:	4b26      	ldr	r3, [pc, #152]	; (800f2a8 <vTaskSwitchContext+0xa8>)
 800f210:	2201      	movs	r2, #1
 800f212:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f214:	e03f      	b.n	800f296 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800f216:	4b24      	ldr	r3, [pc, #144]	; (800f2a8 <vTaskSwitchContext+0xa8>)
 800f218:	2200      	movs	r2, #0
 800f21a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f21c:	4b23      	ldr	r3, [pc, #140]	; (800f2ac <vTaskSwitchContext+0xac>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	fab3 f383 	clz	r3, r3
 800f228:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f22a:	7afb      	ldrb	r3, [r7, #11]
 800f22c:	f1c3 031f 	rsb	r3, r3, #31
 800f230:	617b      	str	r3, [r7, #20]
 800f232:	491f      	ldr	r1, [pc, #124]	; (800f2b0 <vTaskSwitchContext+0xb0>)
 800f234:	697a      	ldr	r2, [r7, #20]
 800f236:	4613      	mov	r3, r2
 800f238:	009b      	lsls	r3, r3, #2
 800f23a:	4413      	add	r3, r2
 800f23c:	009b      	lsls	r3, r3, #2
 800f23e:	440b      	add	r3, r1
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d10a      	bne.n	800f25c <vTaskSwitchContext+0x5c>
	__asm volatile
 800f246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f24a:	f383 8811 	msr	BASEPRI, r3
 800f24e:	f3bf 8f6f 	isb	sy
 800f252:	f3bf 8f4f 	dsb	sy
 800f256:	607b      	str	r3, [r7, #4]
}
 800f258:	bf00      	nop
 800f25a:	e7fe      	b.n	800f25a <vTaskSwitchContext+0x5a>
 800f25c:	697a      	ldr	r2, [r7, #20]
 800f25e:	4613      	mov	r3, r2
 800f260:	009b      	lsls	r3, r3, #2
 800f262:	4413      	add	r3, r2
 800f264:	009b      	lsls	r3, r3, #2
 800f266:	4a12      	ldr	r2, [pc, #72]	; (800f2b0 <vTaskSwitchContext+0xb0>)
 800f268:	4413      	add	r3, r2
 800f26a:	613b      	str	r3, [r7, #16]
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	685a      	ldr	r2, [r3, #4]
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	605a      	str	r2, [r3, #4]
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	685a      	ldr	r2, [r3, #4]
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	3308      	adds	r3, #8
 800f27e:	429a      	cmp	r2, r3
 800f280:	d104      	bne.n	800f28c <vTaskSwitchContext+0x8c>
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	685a      	ldr	r2, [r3, #4]
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	605a      	str	r2, [r3, #4]
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	68db      	ldr	r3, [r3, #12]
 800f292:	4a08      	ldr	r2, [pc, #32]	; (800f2b4 <vTaskSwitchContext+0xb4>)
 800f294:	6013      	str	r3, [r2, #0]
}
 800f296:	bf00      	nop
 800f298:	371c      	adds	r7, #28
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	20002c8c 	.word	0x20002c8c
 800f2a8:	20002c78 	.word	0x20002c78
 800f2ac:	20002c6c 	.word	0x20002c6c
 800f2b0:	20002b68 	.word	0x20002b68
 800f2b4:	20002b64 	.word	0x20002b64

0800f2b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d10a      	bne.n	800f2de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2cc:	f383 8811 	msr	BASEPRI, r3
 800f2d0:	f3bf 8f6f 	isb	sy
 800f2d4:	f3bf 8f4f 	dsb	sy
 800f2d8:	60fb      	str	r3, [r7, #12]
}
 800f2da:	bf00      	nop
 800f2dc:	e7fe      	b.n	800f2dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f2de:	4b07      	ldr	r3, [pc, #28]	; (800f2fc <vTaskPlaceOnEventList+0x44>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	3318      	adds	r3, #24
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f7fe ff5c 	bl	800e1a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f2ec:	2101      	movs	r1, #1
 800f2ee:	6838      	ldr	r0, [r7, #0]
 800f2f0:	f000 fa66 	bl	800f7c0 <prvAddCurrentTaskToDelayedList>
}
 800f2f4:	bf00      	nop
 800f2f6:	3710      	adds	r7, #16
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}
 800f2fc:	20002b64 	.word	0x20002b64

0800f300 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	68db      	ldr	r3, [r3, #12]
 800f30c:	68db      	ldr	r3, [r3, #12]
 800f30e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d10a      	bne.n	800f32c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f31a:	f383 8811 	msr	BASEPRI, r3
 800f31e:	f3bf 8f6f 	isb	sy
 800f322:	f3bf 8f4f 	dsb	sy
 800f326:	60fb      	str	r3, [r7, #12]
}
 800f328:	bf00      	nop
 800f32a:	e7fe      	b.n	800f32a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	3318      	adds	r3, #24
 800f330:	4618      	mov	r0, r3
 800f332:	f7fe ff70 	bl	800e216 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f336:	4b1d      	ldr	r3, [pc, #116]	; (800f3ac <xTaskRemoveFromEventList+0xac>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d11c      	bne.n	800f378 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	3304      	adds	r3, #4
 800f342:	4618      	mov	r0, r3
 800f344:	f7fe ff67 	bl	800e216 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f34c:	2201      	movs	r2, #1
 800f34e:	409a      	lsls	r2, r3
 800f350:	4b17      	ldr	r3, [pc, #92]	; (800f3b0 <xTaskRemoveFromEventList+0xb0>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4313      	orrs	r3, r2
 800f356:	4a16      	ldr	r2, [pc, #88]	; (800f3b0 <xTaskRemoveFromEventList+0xb0>)
 800f358:	6013      	str	r3, [r2, #0]
 800f35a:	693b      	ldr	r3, [r7, #16]
 800f35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f35e:	4613      	mov	r3, r2
 800f360:	009b      	lsls	r3, r3, #2
 800f362:	4413      	add	r3, r2
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	4a13      	ldr	r2, [pc, #76]	; (800f3b4 <xTaskRemoveFromEventList+0xb4>)
 800f368:	441a      	add	r2, r3
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	3304      	adds	r3, #4
 800f36e:	4619      	mov	r1, r3
 800f370:	4610      	mov	r0, r2
 800f372:	f7fe fef3 	bl	800e15c <vListInsertEnd>
 800f376:	e005      	b.n	800f384 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	3318      	adds	r3, #24
 800f37c:	4619      	mov	r1, r3
 800f37e:	480e      	ldr	r0, [pc, #56]	; (800f3b8 <xTaskRemoveFromEventList+0xb8>)
 800f380:	f7fe feec 	bl	800e15c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f388:	4b0c      	ldr	r3, [pc, #48]	; (800f3bc <xTaskRemoveFromEventList+0xbc>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f38e:	429a      	cmp	r2, r3
 800f390:	d905      	bls.n	800f39e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f392:	2301      	movs	r3, #1
 800f394:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f396:	4b0a      	ldr	r3, [pc, #40]	; (800f3c0 <xTaskRemoveFromEventList+0xc0>)
 800f398:	2201      	movs	r2, #1
 800f39a:	601a      	str	r2, [r3, #0]
 800f39c:	e001      	b.n	800f3a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f3a2:	697b      	ldr	r3, [r7, #20]
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3718      	adds	r7, #24
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	20002c8c 	.word	0x20002c8c
 800f3b0:	20002c6c 	.word	0x20002c6c
 800f3b4:	20002b68 	.word	0x20002b68
 800f3b8:	20002c24 	.word	0x20002c24
 800f3bc:	20002b64 	.word	0x20002b64
 800f3c0:	20002c78 	.word	0x20002c78

0800f3c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f3cc:	4b06      	ldr	r3, [pc, #24]	; (800f3e8 <vTaskInternalSetTimeOutState+0x24>)
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f3d4:	4b05      	ldr	r3, [pc, #20]	; (800f3ec <vTaskInternalSetTimeOutState+0x28>)
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	605a      	str	r2, [r3, #4]
}
 800f3dc:	bf00      	nop
 800f3de:	370c      	adds	r7, #12
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr
 800f3e8:	20002c7c 	.word	0x20002c7c
 800f3ec:	20002c68 	.word	0x20002c68

0800f3f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b088      	sub	sp, #32
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d10a      	bne.n	800f416 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f404:	f383 8811 	msr	BASEPRI, r3
 800f408:	f3bf 8f6f 	isb	sy
 800f40c:	f3bf 8f4f 	dsb	sy
 800f410:	613b      	str	r3, [r7, #16]
}
 800f412:	bf00      	nop
 800f414:	e7fe      	b.n	800f414 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d10a      	bne.n	800f432 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f420:	f383 8811 	msr	BASEPRI, r3
 800f424:	f3bf 8f6f 	isb	sy
 800f428:	f3bf 8f4f 	dsb	sy
 800f42c:	60fb      	str	r3, [r7, #12]
}
 800f42e:	bf00      	nop
 800f430:	e7fe      	b.n	800f430 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f432:	f000 fb57 	bl	800fae4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f436:	4b1d      	ldr	r3, [pc, #116]	; (800f4ac <xTaskCheckForTimeOut+0xbc>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	69ba      	ldr	r2, [r7, #24]
 800f442:	1ad3      	subs	r3, r2, r3
 800f444:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f44e:	d102      	bne.n	800f456 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f450:	2300      	movs	r3, #0
 800f452:	61fb      	str	r3, [r7, #28]
 800f454:	e023      	b.n	800f49e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	4b15      	ldr	r3, [pc, #84]	; (800f4b0 <xTaskCheckForTimeOut+0xc0>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d007      	beq.n	800f472 <xTaskCheckForTimeOut+0x82>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	69ba      	ldr	r2, [r7, #24]
 800f468:	429a      	cmp	r2, r3
 800f46a:	d302      	bcc.n	800f472 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f46c:	2301      	movs	r3, #1
 800f46e:	61fb      	str	r3, [r7, #28]
 800f470:	e015      	b.n	800f49e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	697a      	ldr	r2, [r7, #20]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d20b      	bcs.n	800f494 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	681a      	ldr	r2, [r3, #0]
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	1ad2      	subs	r2, r2, r3
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f7ff ff9b 	bl	800f3c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f48e:	2300      	movs	r3, #0
 800f490:	61fb      	str	r3, [r7, #28]
 800f492:	e004      	b.n	800f49e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	2200      	movs	r2, #0
 800f498:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f49a:	2301      	movs	r3, #1
 800f49c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f49e:	f000 fb51 	bl	800fb44 <vPortExitCritical>

	return xReturn;
 800f4a2:	69fb      	ldr	r3, [r7, #28]
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3720      	adds	r7, #32
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	20002c68 	.word	0x20002c68
 800f4b0:	20002c7c 	.word	0x20002c7c

0800f4b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f4b8:	4b03      	ldr	r3, [pc, #12]	; (800f4c8 <vTaskMissedYield+0x14>)
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	601a      	str	r2, [r3, #0]
}
 800f4be:	bf00      	nop
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr
 800f4c8:	20002c78 	.word	0x20002c78

0800f4cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f4d4:	f000 f852 	bl	800f57c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f4d8:	4b06      	ldr	r3, [pc, #24]	; (800f4f4 <prvIdleTask+0x28>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2b01      	cmp	r3, #1
 800f4de:	d9f9      	bls.n	800f4d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f4e0:	4b05      	ldr	r3, [pc, #20]	; (800f4f8 <prvIdleTask+0x2c>)
 800f4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4e6:	601a      	str	r2, [r3, #0]
 800f4e8:	f3bf 8f4f 	dsb	sy
 800f4ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f4f0:	e7f0      	b.n	800f4d4 <prvIdleTask+0x8>
 800f4f2:	bf00      	nop
 800f4f4:	20002b68 	.word	0x20002b68
 800f4f8:	e000ed04 	.word	0xe000ed04

0800f4fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f502:	2300      	movs	r3, #0
 800f504:	607b      	str	r3, [r7, #4]
 800f506:	e00c      	b.n	800f522 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	4613      	mov	r3, r2
 800f50c:	009b      	lsls	r3, r3, #2
 800f50e:	4413      	add	r3, r2
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	4a12      	ldr	r2, [pc, #72]	; (800f55c <prvInitialiseTaskLists+0x60>)
 800f514:	4413      	add	r3, r2
 800f516:	4618      	mov	r0, r3
 800f518:	f7fe fdf3 	bl	800e102 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	3301      	adds	r3, #1
 800f520:	607b      	str	r3, [r7, #4]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2b06      	cmp	r3, #6
 800f526:	d9ef      	bls.n	800f508 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f528:	480d      	ldr	r0, [pc, #52]	; (800f560 <prvInitialiseTaskLists+0x64>)
 800f52a:	f7fe fdea 	bl	800e102 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f52e:	480d      	ldr	r0, [pc, #52]	; (800f564 <prvInitialiseTaskLists+0x68>)
 800f530:	f7fe fde7 	bl	800e102 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f534:	480c      	ldr	r0, [pc, #48]	; (800f568 <prvInitialiseTaskLists+0x6c>)
 800f536:	f7fe fde4 	bl	800e102 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f53a:	480c      	ldr	r0, [pc, #48]	; (800f56c <prvInitialiseTaskLists+0x70>)
 800f53c:	f7fe fde1 	bl	800e102 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f540:	480b      	ldr	r0, [pc, #44]	; (800f570 <prvInitialiseTaskLists+0x74>)
 800f542:	f7fe fdde 	bl	800e102 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f546:	4b0b      	ldr	r3, [pc, #44]	; (800f574 <prvInitialiseTaskLists+0x78>)
 800f548:	4a05      	ldr	r2, [pc, #20]	; (800f560 <prvInitialiseTaskLists+0x64>)
 800f54a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f54c:	4b0a      	ldr	r3, [pc, #40]	; (800f578 <prvInitialiseTaskLists+0x7c>)
 800f54e:	4a05      	ldr	r2, [pc, #20]	; (800f564 <prvInitialiseTaskLists+0x68>)
 800f550:	601a      	str	r2, [r3, #0]
}
 800f552:	bf00      	nop
 800f554:	3708      	adds	r7, #8
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	20002b68 	.word	0x20002b68
 800f560:	20002bf4 	.word	0x20002bf4
 800f564:	20002c08 	.word	0x20002c08
 800f568:	20002c24 	.word	0x20002c24
 800f56c:	20002c38 	.word	0x20002c38
 800f570:	20002c50 	.word	0x20002c50
 800f574:	20002c1c 	.word	0x20002c1c
 800f578:	20002c20 	.word	0x20002c20

0800f57c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f582:	e019      	b.n	800f5b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f584:	f000 faae 	bl	800fae4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f588:	4b10      	ldr	r3, [pc, #64]	; (800f5cc <prvCheckTasksWaitingTermination+0x50>)
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	3304      	adds	r3, #4
 800f594:	4618      	mov	r0, r3
 800f596:	f7fe fe3e 	bl	800e216 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f59a:	4b0d      	ldr	r3, [pc, #52]	; (800f5d0 <prvCheckTasksWaitingTermination+0x54>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	3b01      	subs	r3, #1
 800f5a0:	4a0b      	ldr	r2, [pc, #44]	; (800f5d0 <prvCheckTasksWaitingTermination+0x54>)
 800f5a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f5a4:	4b0b      	ldr	r3, [pc, #44]	; (800f5d4 <prvCheckTasksWaitingTermination+0x58>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	3b01      	subs	r3, #1
 800f5aa:	4a0a      	ldr	r2, [pc, #40]	; (800f5d4 <prvCheckTasksWaitingTermination+0x58>)
 800f5ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f5ae:	f000 fac9 	bl	800fb44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 f810 	bl	800f5d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f5b8:	4b06      	ldr	r3, [pc, #24]	; (800f5d4 <prvCheckTasksWaitingTermination+0x58>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d1e1      	bne.n	800f584 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f5c0:	bf00      	nop
 800f5c2:	bf00      	nop
 800f5c4:	3708      	adds	r7, #8
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	20002c38 	.word	0x20002c38
 800f5d0:	20002c64 	.word	0x20002c64
 800f5d4:	20002c4c 	.word	0x20002c4c

0800f5d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d108      	bne.n	800f5fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f000 fc26 	bl	800fe40 <vPortFree>
				vPortFree( pxTCB );
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 fc23 	bl	800fe40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f5fa:	e018      	b.n	800f62e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f602:	2b01      	cmp	r3, #1
 800f604:	d103      	bne.n	800f60e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f000 fc1a 	bl	800fe40 <vPortFree>
	}
 800f60c:	e00f      	b.n	800f62e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f614:	2b02      	cmp	r3, #2
 800f616:	d00a      	beq.n	800f62e <prvDeleteTCB+0x56>
	__asm volatile
 800f618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f61c:	f383 8811 	msr	BASEPRI, r3
 800f620:	f3bf 8f6f 	isb	sy
 800f624:	f3bf 8f4f 	dsb	sy
 800f628:	60fb      	str	r3, [r7, #12]
}
 800f62a:	bf00      	nop
 800f62c:	e7fe      	b.n	800f62c <prvDeleteTCB+0x54>
	}
 800f62e:	bf00      	nop
 800f630:	3710      	adds	r7, #16
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
	...

0800f638 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f638:	b480      	push	{r7}
 800f63a:	b083      	sub	sp, #12
 800f63c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f63e:	4b0c      	ldr	r3, [pc, #48]	; (800f670 <prvResetNextTaskUnblockTime+0x38>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d104      	bne.n	800f652 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f648:	4b0a      	ldr	r3, [pc, #40]	; (800f674 <prvResetNextTaskUnblockTime+0x3c>)
 800f64a:	f04f 32ff 	mov.w	r2, #4294967295
 800f64e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f650:	e008      	b.n	800f664 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f652:	4b07      	ldr	r3, [pc, #28]	; (800f670 <prvResetNextTaskUnblockTime+0x38>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	68db      	ldr	r3, [r3, #12]
 800f658:	68db      	ldr	r3, [r3, #12]
 800f65a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	4a04      	ldr	r2, [pc, #16]	; (800f674 <prvResetNextTaskUnblockTime+0x3c>)
 800f662:	6013      	str	r3, [r2, #0]
}
 800f664:	bf00      	nop
 800f666:	370c      	adds	r7, #12
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr
 800f670:	20002c1c 	.word	0x20002c1c
 800f674:	20002c84 	.word	0x20002c84

0800f678 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f678:	b480      	push	{r7}
 800f67a:	b083      	sub	sp, #12
 800f67c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f67e:	4b0b      	ldr	r3, [pc, #44]	; (800f6ac <xTaskGetSchedulerState+0x34>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d102      	bne.n	800f68c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f686:	2301      	movs	r3, #1
 800f688:	607b      	str	r3, [r7, #4]
 800f68a:	e008      	b.n	800f69e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f68c:	4b08      	ldr	r3, [pc, #32]	; (800f6b0 <xTaskGetSchedulerState+0x38>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d102      	bne.n	800f69a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f694:	2302      	movs	r3, #2
 800f696:	607b      	str	r3, [r7, #4]
 800f698:	e001      	b.n	800f69e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f69a:	2300      	movs	r3, #0
 800f69c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f69e:	687b      	ldr	r3, [r7, #4]
	}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr
 800f6ac:	20002c70 	.word	0x20002c70
 800f6b0:	20002c8c 	.word	0x20002c8c

0800f6b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b086      	sub	sp, #24
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d06e      	beq.n	800f7a8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f6ca:	4b3a      	ldr	r3, [pc, #232]	; (800f7b4 <xTaskPriorityDisinherit+0x100>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	693a      	ldr	r2, [r7, #16]
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d00a      	beq.n	800f6ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d8:	f383 8811 	msr	BASEPRI, r3
 800f6dc:	f3bf 8f6f 	isb	sy
 800f6e0:	f3bf 8f4f 	dsb	sy
 800f6e4:	60fb      	str	r3, [r7, #12]
}
 800f6e6:	bf00      	nop
 800f6e8:	e7fe      	b.n	800f6e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d10a      	bne.n	800f708 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f6:	f383 8811 	msr	BASEPRI, r3
 800f6fa:	f3bf 8f6f 	isb	sy
 800f6fe:	f3bf 8f4f 	dsb	sy
 800f702:	60bb      	str	r3, [r7, #8]
}
 800f704:	bf00      	nop
 800f706:	e7fe      	b.n	800f706 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f70c:	1e5a      	subs	r2, r3, #1
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f71a:	429a      	cmp	r2, r3
 800f71c:	d044      	beq.n	800f7a8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f722:	2b00      	cmp	r3, #0
 800f724:	d140      	bne.n	800f7a8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	3304      	adds	r3, #4
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7fe fd73 	bl	800e216 <uxListRemove>
 800f730:	4603      	mov	r3, r0
 800f732:	2b00      	cmp	r3, #0
 800f734:	d115      	bne.n	800f762 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f73a:	491f      	ldr	r1, [pc, #124]	; (800f7b8 <xTaskPriorityDisinherit+0x104>)
 800f73c:	4613      	mov	r3, r2
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	4413      	add	r3, r2
 800f742:	009b      	lsls	r3, r3, #2
 800f744:	440b      	add	r3, r1
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d10a      	bne.n	800f762 <xTaskPriorityDisinherit+0xae>
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f750:	2201      	movs	r2, #1
 800f752:	fa02 f303 	lsl.w	r3, r2, r3
 800f756:	43da      	mvns	r2, r3
 800f758:	4b18      	ldr	r3, [pc, #96]	; (800f7bc <xTaskPriorityDisinherit+0x108>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	4013      	ands	r3, r2
 800f75e:	4a17      	ldr	r2, [pc, #92]	; (800f7bc <xTaskPriorityDisinherit+0x108>)
 800f760:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f76e:	f1c3 0207 	rsb	r2, r3, #7
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f77a:	2201      	movs	r2, #1
 800f77c:	409a      	lsls	r2, r3
 800f77e:	4b0f      	ldr	r3, [pc, #60]	; (800f7bc <xTaskPriorityDisinherit+0x108>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	4313      	orrs	r3, r2
 800f784:	4a0d      	ldr	r2, [pc, #52]	; (800f7bc <xTaskPriorityDisinherit+0x108>)
 800f786:	6013      	str	r3, [r2, #0]
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f78c:	4613      	mov	r3, r2
 800f78e:	009b      	lsls	r3, r3, #2
 800f790:	4413      	add	r3, r2
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4a08      	ldr	r2, [pc, #32]	; (800f7b8 <xTaskPriorityDisinherit+0x104>)
 800f796:	441a      	add	r2, r3
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	3304      	adds	r3, #4
 800f79c:	4619      	mov	r1, r3
 800f79e:	4610      	mov	r0, r2
 800f7a0:	f7fe fcdc 	bl	800e15c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f7a8:	697b      	ldr	r3, [r7, #20]
	}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3718      	adds	r7, #24
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	20002b64 	.word	0x20002b64
 800f7b8:	20002b68 	.word	0x20002b68
 800f7bc:	20002c6c 	.word	0x20002c6c

0800f7c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f7ca:	4b29      	ldr	r3, [pc, #164]	; (800f870 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7d0:	4b28      	ldr	r3, [pc, #160]	; (800f874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	3304      	adds	r3, #4
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fe fd1d 	bl	800e216 <uxListRemove>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d10b      	bne.n	800f7fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f7e2:	4b24      	ldr	r3, [pc, #144]	; (800f874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	fa02 f303 	lsl.w	r3, r2, r3
 800f7ee:	43da      	mvns	r2, r3
 800f7f0:	4b21      	ldr	r3, [pc, #132]	; (800f878 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	4013      	ands	r3, r2
 800f7f6:	4a20      	ldr	r2, [pc, #128]	; (800f878 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f7f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f800:	d10a      	bne.n	800f818 <prvAddCurrentTaskToDelayedList+0x58>
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d007      	beq.n	800f818 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f808:	4b1a      	ldr	r3, [pc, #104]	; (800f874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	3304      	adds	r3, #4
 800f80e:	4619      	mov	r1, r3
 800f810:	481a      	ldr	r0, [pc, #104]	; (800f87c <prvAddCurrentTaskToDelayedList+0xbc>)
 800f812:	f7fe fca3 	bl	800e15c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f816:	e026      	b.n	800f866 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f818:	68fa      	ldr	r2, [r7, #12]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4413      	add	r3, r2
 800f81e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f820:	4b14      	ldr	r3, [pc, #80]	; (800f874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	68ba      	ldr	r2, [r7, #8]
 800f826:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f828:	68ba      	ldr	r2, [r7, #8]
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d209      	bcs.n	800f844 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f830:	4b13      	ldr	r3, [pc, #76]	; (800f880 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f832:	681a      	ldr	r2, [r3, #0]
 800f834:	4b0f      	ldr	r3, [pc, #60]	; (800f874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	3304      	adds	r3, #4
 800f83a:	4619      	mov	r1, r3
 800f83c:	4610      	mov	r0, r2
 800f83e:	f7fe fcb1 	bl	800e1a4 <vListInsert>
}
 800f842:	e010      	b.n	800f866 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f844:	4b0f      	ldr	r3, [pc, #60]	; (800f884 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f846:	681a      	ldr	r2, [r3, #0]
 800f848:	4b0a      	ldr	r3, [pc, #40]	; (800f874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	3304      	adds	r3, #4
 800f84e:	4619      	mov	r1, r3
 800f850:	4610      	mov	r0, r2
 800f852:	f7fe fca7 	bl	800e1a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f856:	4b0c      	ldr	r3, [pc, #48]	; (800f888 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	68ba      	ldr	r2, [r7, #8]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d202      	bcs.n	800f866 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f860:	4a09      	ldr	r2, [pc, #36]	; (800f888 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	6013      	str	r3, [r2, #0]
}
 800f866:	bf00      	nop
 800f868:	3710      	adds	r7, #16
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
 800f86e:	bf00      	nop
 800f870:	20002c68 	.word	0x20002c68
 800f874:	20002b64 	.word	0x20002b64
 800f878:	20002c6c 	.word	0x20002c6c
 800f87c:	20002c50 	.word	0x20002c50
 800f880:	20002c20 	.word	0x20002c20
 800f884:	20002c1c 	.word	0x20002c1c
 800f888:	20002c84 	.word	0x20002c84

0800f88c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f88c:	b480      	push	{r7}
 800f88e:	b085      	sub	sp, #20
 800f890:	af00      	add	r7, sp, #0
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	60b9      	str	r1, [r7, #8]
 800f896:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	3b04      	subs	r3, #4
 800f89c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f8a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	3b04      	subs	r3, #4
 800f8aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	f023 0201 	bic.w	r2, r3, #1
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	3b04      	subs	r3, #4
 800f8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f8bc:	4a0c      	ldr	r2, [pc, #48]	; (800f8f0 <pxPortInitialiseStack+0x64>)
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	3b14      	subs	r3, #20
 800f8c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f8c8:	687a      	ldr	r2, [r7, #4]
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	3b04      	subs	r3, #4
 800f8d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f06f 0202 	mvn.w	r2, #2
 800f8da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	3b20      	subs	r3, #32
 800f8e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3714      	adds	r7, #20
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr
 800f8f0:	0800f8f5 	.word	0x0800f8f5

0800f8f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f8fe:	4b12      	ldr	r3, [pc, #72]	; (800f948 <prvTaskExitError+0x54>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f906:	d00a      	beq.n	800f91e <prvTaskExitError+0x2a>
	__asm volatile
 800f908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f90c:	f383 8811 	msr	BASEPRI, r3
 800f910:	f3bf 8f6f 	isb	sy
 800f914:	f3bf 8f4f 	dsb	sy
 800f918:	60fb      	str	r3, [r7, #12]
}
 800f91a:	bf00      	nop
 800f91c:	e7fe      	b.n	800f91c <prvTaskExitError+0x28>
	__asm volatile
 800f91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f922:	f383 8811 	msr	BASEPRI, r3
 800f926:	f3bf 8f6f 	isb	sy
 800f92a:	f3bf 8f4f 	dsb	sy
 800f92e:	60bb      	str	r3, [r7, #8]
}
 800f930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f932:	bf00      	nop
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d0fc      	beq.n	800f934 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f93a:	bf00      	nop
 800f93c:	bf00      	nop
 800f93e:	3714      	adds	r7, #20
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr
 800f948:	20000018 	.word	0x20000018
 800f94c:	00000000 	.word	0x00000000

0800f950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f950:	4b07      	ldr	r3, [pc, #28]	; (800f970 <pxCurrentTCBConst2>)
 800f952:	6819      	ldr	r1, [r3, #0]
 800f954:	6808      	ldr	r0, [r1, #0]
 800f956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f95a:	f380 8809 	msr	PSP, r0
 800f95e:	f3bf 8f6f 	isb	sy
 800f962:	f04f 0000 	mov.w	r0, #0
 800f966:	f380 8811 	msr	BASEPRI, r0
 800f96a:	4770      	bx	lr
 800f96c:	f3af 8000 	nop.w

0800f970 <pxCurrentTCBConst2>:
 800f970:	20002b64 	.word	0x20002b64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f974:	bf00      	nop
 800f976:	bf00      	nop

0800f978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f978:	4808      	ldr	r0, [pc, #32]	; (800f99c <prvPortStartFirstTask+0x24>)
 800f97a:	6800      	ldr	r0, [r0, #0]
 800f97c:	6800      	ldr	r0, [r0, #0]
 800f97e:	f380 8808 	msr	MSP, r0
 800f982:	f04f 0000 	mov.w	r0, #0
 800f986:	f380 8814 	msr	CONTROL, r0
 800f98a:	b662      	cpsie	i
 800f98c:	b661      	cpsie	f
 800f98e:	f3bf 8f4f 	dsb	sy
 800f992:	f3bf 8f6f 	isb	sy
 800f996:	df00      	svc	0
 800f998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f99a:	bf00      	nop
 800f99c:	e000ed08 	.word	0xe000ed08

0800f9a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b086      	sub	sp, #24
 800f9a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f9a6:	4b46      	ldr	r3, [pc, #280]	; (800fac0 <xPortStartScheduler+0x120>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4a46      	ldr	r2, [pc, #280]	; (800fac4 <xPortStartScheduler+0x124>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d10a      	bne.n	800f9c6 <xPortStartScheduler+0x26>
	__asm volatile
 800f9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b4:	f383 8811 	msr	BASEPRI, r3
 800f9b8:	f3bf 8f6f 	isb	sy
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	613b      	str	r3, [r7, #16]
}
 800f9c2:	bf00      	nop
 800f9c4:	e7fe      	b.n	800f9c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f9c6:	4b3e      	ldr	r3, [pc, #248]	; (800fac0 <xPortStartScheduler+0x120>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	4a3f      	ldr	r2, [pc, #252]	; (800fac8 <xPortStartScheduler+0x128>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d10a      	bne.n	800f9e6 <xPortStartScheduler+0x46>
	__asm volatile
 800f9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d4:	f383 8811 	msr	BASEPRI, r3
 800f9d8:	f3bf 8f6f 	isb	sy
 800f9dc:	f3bf 8f4f 	dsb	sy
 800f9e0:	60fb      	str	r3, [r7, #12]
}
 800f9e2:	bf00      	nop
 800f9e4:	e7fe      	b.n	800f9e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f9e6:	4b39      	ldr	r3, [pc, #228]	; (800facc <xPortStartScheduler+0x12c>)
 800f9e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	781b      	ldrb	r3, [r3, #0]
 800f9ee:	b2db      	uxtb	r3, r3
 800f9f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	22ff      	movs	r2, #255	; 0xff
 800f9f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fa00:	78fb      	ldrb	r3, [r7, #3]
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fa08:	b2da      	uxtb	r2, r3
 800fa0a:	4b31      	ldr	r3, [pc, #196]	; (800fad0 <xPortStartScheduler+0x130>)
 800fa0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fa0e:	4b31      	ldr	r3, [pc, #196]	; (800fad4 <xPortStartScheduler+0x134>)
 800fa10:	2207      	movs	r2, #7
 800fa12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa14:	e009      	b.n	800fa2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fa16:	4b2f      	ldr	r3, [pc, #188]	; (800fad4 <xPortStartScheduler+0x134>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	3b01      	subs	r3, #1
 800fa1c:	4a2d      	ldr	r2, [pc, #180]	; (800fad4 <xPortStartScheduler+0x134>)
 800fa1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fa20:	78fb      	ldrb	r3, [r7, #3]
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	005b      	lsls	r3, r3, #1
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa2a:	78fb      	ldrb	r3, [r7, #3]
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa32:	2b80      	cmp	r3, #128	; 0x80
 800fa34:	d0ef      	beq.n	800fa16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fa36:	4b27      	ldr	r3, [pc, #156]	; (800fad4 <xPortStartScheduler+0x134>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	f1c3 0307 	rsb	r3, r3, #7
 800fa3e:	2b04      	cmp	r3, #4
 800fa40:	d00a      	beq.n	800fa58 <xPortStartScheduler+0xb8>
	__asm volatile
 800fa42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa46:	f383 8811 	msr	BASEPRI, r3
 800fa4a:	f3bf 8f6f 	isb	sy
 800fa4e:	f3bf 8f4f 	dsb	sy
 800fa52:	60bb      	str	r3, [r7, #8]
}
 800fa54:	bf00      	nop
 800fa56:	e7fe      	b.n	800fa56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fa58:	4b1e      	ldr	r3, [pc, #120]	; (800fad4 <xPortStartScheduler+0x134>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	021b      	lsls	r3, r3, #8
 800fa5e:	4a1d      	ldr	r2, [pc, #116]	; (800fad4 <xPortStartScheduler+0x134>)
 800fa60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fa62:	4b1c      	ldr	r3, [pc, #112]	; (800fad4 <xPortStartScheduler+0x134>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fa6a:	4a1a      	ldr	r2, [pc, #104]	; (800fad4 <xPortStartScheduler+0x134>)
 800fa6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	b2da      	uxtb	r2, r3
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fa76:	4b18      	ldr	r3, [pc, #96]	; (800fad8 <xPortStartScheduler+0x138>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	4a17      	ldr	r2, [pc, #92]	; (800fad8 <xPortStartScheduler+0x138>)
 800fa7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fa80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fa82:	4b15      	ldr	r3, [pc, #84]	; (800fad8 <xPortStartScheduler+0x138>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	4a14      	ldr	r2, [pc, #80]	; (800fad8 <xPortStartScheduler+0x138>)
 800fa88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fa8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fa8e:	f000 f8dd 	bl	800fc4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fa92:	4b12      	ldr	r3, [pc, #72]	; (800fadc <xPortStartScheduler+0x13c>)
 800fa94:	2200      	movs	r2, #0
 800fa96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fa98:	f000 f8fc 	bl	800fc94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fa9c:	4b10      	ldr	r3, [pc, #64]	; (800fae0 <xPortStartScheduler+0x140>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	4a0f      	ldr	r2, [pc, #60]	; (800fae0 <xPortStartScheduler+0x140>)
 800faa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800faa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800faa8:	f7ff ff66 	bl	800f978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800faac:	f7ff fba8 	bl	800f200 <vTaskSwitchContext>
	prvTaskExitError();
 800fab0:	f7ff ff20 	bl	800f8f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3718      	adds	r7, #24
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	e000ed00 	.word	0xe000ed00
 800fac4:	410fc271 	.word	0x410fc271
 800fac8:	410fc270 	.word	0x410fc270
 800facc:	e000e400 	.word	0xe000e400
 800fad0:	20002c90 	.word	0x20002c90
 800fad4:	20002c94 	.word	0x20002c94
 800fad8:	e000ed20 	.word	0xe000ed20
 800fadc:	20000018 	.word	0x20000018
 800fae0:	e000ef34 	.word	0xe000ef34

0800fae4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
	__asm volatile
 800faea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faee:	f383 8811 	msr	BASEPRI, r3
 800faf2:	f3bf 8f6f 	isb	sy
 800faf6:	f3bf 8f4f 	dsb	sy
 800fafa:	607b      	str	r3, [r7, #4]
}
 800fafc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fafe:	4b0f      	ldr	r3, [pc, #60]	; (800fb3c <vPortEnterCritical+0x58>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	3301      	adds	r3, #1
 800fb04:	4a0d      	ldr	r2, [pc, #52]	; (800fb3c <vPortEnterCritical+0x58>)
 800fb06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fb08:	4b0c      	ldr	r3, [pc, #48]	; (800fb3c <vPortEnterCritical+0x58>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	2b01      	cmp	r3, #1
 800fb0e:	d10f      	bne.n	800fb30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fb10:	4b0b      	ldr	r3, [pc, #44]	; (800fb40 <vPortEnterCritical+0x5c>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00a      	beq.n	800fb30 <vPortEnterCritical+0x4c>
	__asm volatile
 800fb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb1e:	f383 8811 	msr	BASEPRI, r3
 800fb22:	f3bf 8f6f 	isb	sy
 800fb26:	f3bf 8f4f 	dsb	sy
 800fb2a:	603b      	str	r3, [r7, #0]
}
 800fb2c:	bf00      	nop
 800fb2e:	e7fe      	b.n	800fb2e <vPortEnterCritical+0x4a>
	}
}
 800fb30:	bf00      	nop
 800fb32:	370c      	adds	r7, #12
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr
 800fb3c:	20000018 	.word	0x20000018
 800fb40:	e000ed04 	.word	0xe000ed04

0800fb44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fb4a:	4b12      	ldr	r3, [pc, #72]	; (800fb94 <vPortExitCritical+0x50>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d10a      	bne.n	800fb68 <vPortExitCritical+0x24>
	__asm volatile
 800fb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb56:	f383 8811 	msr	BASEPRI, r3
 800fb5a:	f3bf 8f6f 	isb	sy
 800fb5e:	f3bf 8f4f 	dsb	sy
 800fb62:	607b      	str	r3, [r7, #4]
}
 800fb64:	bf00      	nop
 800fb66:	e7fe      	b.n	800fb66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fb68:	4b0a      	ldr	r3, [pc, #40]	; (800fb94 <vPortExitCritical+0x50>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	3b01      	subs	r3, #1
 800fb6e:	4a09      	ldr	r2, [pc, #36]	; (800fb94 <vPortExitCritical+0x50>)
 800fb70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fb72:	4b08      	ldr	r3, [pc, #32]	; (800fb94 <vPortExitCritical+0x50>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d105      	bne.n	800fb86 <vPortExitCritical+0x42>
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fb84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fb86:	bf00      	nop
 800fb88:	370c      	adds	r7, #12
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop
 800fb94:	20000018 	.word	0x20000018
	...

0800fba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fba0:	f3ef 8009 	mrs	r0, PSP
 800fba4:	f3bf 8f6f 	isb	sy
 800fba8:	4b15      	ldr	r3, [pc, #84]	; (800fc00 <pxCurrentTCBConst>)
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	f01e 0f10 	tst.w	lr, #16
 800fbb0:	bf08      	it	eq
 800fbb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fbb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbba:	6010      	str	r0, [r2, #0]
 800fbbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fbc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fbc4:	f380 8811 	msr	BASEPRI, r0
 800fbc8:	f3bf 8f4f 	dsb	sy
 800fbcc:	f3bf 8f6f 	isb	sy
 800fbd0:	f7ff fb16 	bl	800f200 <vTaskSwitchContext>
 800fbd4:	f04f 0000 	mov.w	r0, #0
 800fbd8:	f380 8811 	msr	BASEPRI, r0
 800fbdc:	bc09      	pop	{r0, r3}
 800fbde:	6819      	ldr	r1, [r3, #0]
 800fbe0:	6808      	ldr	r0, [r1, #0]
 800fbe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbe6:	f01e 0f10 	tst.w	lr, #16
 800fbea:	bf08      	it	eq
 800fbec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fbf0:	f380 8809 	msr	PSP, r0
 800fbf4:	f3bf 8f6f 	isb	sy
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop
 800fbfc:	f3af 8000 	nop.w

0800fc00 <pxCurrentTCBConst>:
 800fc00:	20002b64 	.word	0x20002b64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fc04:	bf00      	nop
 800fc06:	bf00      	nop

0800fc08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
	__asm volatile
 800fc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc12:	f383 8811 	msr	BASEPRI, r3
 800fc16:	f3bf 8f6f 	isb	sy
 800fc1a:	f3bf 8f4f 	dsb	sy
 800fc1e:	607b      	str	r3, [r7, #4]
}
 800fc20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fc22:	f7ff fa35 	bl	800f090 <xTaskIncrementTick>
 800fc26:	4603      	mov	r3, r0
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d003      	beq.n	800fc34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fc2c:	4b06      	ldr	r3, [pc, #24]	; (800fc48 <xPortSysTickHandler+0x40>)
 800fc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc32:	601a      	str	r2, [r3, #0]
 800fc34:	2300      	movs	r3, #0
 800fc36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	f383 8811 	msr	BASEPRI, r3
}
 800fc3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fc40:	bf00      	nop
 800fc42:	3708      	adds	r7, #8
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}
 800fc48:	e000ed04 	.word	0xe000ed04

0800fc4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fc50:	4b0b      	ldr	r3, [pc, #44]	; (800fc80 <vPortSetupTimerInterrupt+0x34>)
 800fc52:	2200      	movs	r2, #0
 800fc54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fc56:	4b0b      	ldr	r3, [pc, #44]	; (800fc84 <vPortSetupTimerInterrupt+0x38>)
 800fc58:	2200      	movs	r2, #0
 800fc5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fc5c:	4b0a      	ldr	r3, [pc, #40]	; (800fc88 <vPortSetupTimerInterrupt+0x3c>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4a0a      	ldr	r2, [pc, #40]	; (800fc8c <vPortSetupTimerInterrupt+0x40>)
 800fc62:	fba2 2303 	umull	r2, r3, r2, r3
 800fc66:	099b      	lsrs	r3, r3, #6
 800fc68:	4a09      	ldr	r2, [pc, #36]	; (800fc90 <vPortSetupTimerInterrupt+0x44>)
 800fc6a:	3b01      	subs	r3, #1
 800fc6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fc6e:	4b04      	ldr	r3, [pc, #16]	; (800fc80 <vPortSetupTimerInterrupt+0x34>)
 800fc70:	2207      	movs	r2, #7
 800fc72:	601a      	str	r2, [r3, #0]
}
 800fc74:	bf00      	nop
 800fc76:	46bd      	mov	sp, r7
 800fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7c:	4770      	bx	lr
 800fc7e:	bf00      	nop
 800fc80:	e000e010 	.word	0xe000e010
 800fc84:	e000e018 	.word	0xe000e018
 800fc88:	2000000c 	.word	0x2000000c
 800fc8c:	10624dd3 	.word	0x10624dd3
 800fc90:	e000e014 	.word	0xe000e014

0800fc94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fc94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fca4 <vPortEnableVFP+0x10>
 800fc98:	6801      	ldr	r1, [r0, #0]
 800fc9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fc9e:	6001      	str	r1, [r0, #0]
 800fca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fca2:	bf00      	nop
 800fca4:	e000ed88 	.word	0xe000ed88

0800fca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b08a      	sub	sp, #40	; 0x28
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fcb4:	f7ff f942 	bl	800ef3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fcb8:	4b5b      	ldr	r3, [pc, #364]	; (800fe28 <pvPortMalloc+0x180>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d101      	bne.n	800fcc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fcc0:	f000 f920 	bl	800ff04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fcc4:	4b59      	ldr	r3, [pc, #356]	; (800fe2c <pvPortMalloc+0x184>)
 800fcc6:	681a      	ldr	r2, [r3, #0]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	4013      	ands	r3, r2
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	f040 8093 	bne.w	800fdf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d01d      	beq.n	800fd14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fcd8:	2208      	movs	r2, #8
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	4413      	add	r3, r2
 800fcde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f003 0307 	and.w	r3, r3, #7
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d014      	beq.n	800fd14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f023 0307 	bic.w	r3, r3, #7
 800fcf0:	3308      	adds	r3, #8
 800fcf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f003 0307 	and.w	r3, r3, #7
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d00a      	beq.n	800fd14 <pvPortMalloc+0x6c>
	__asm volatile
 800fcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd02:	f383 8811 	msr	BASEPRI, r3
 800fd06:	f3bf 8f6f 	isb	sy
 800fd0a:	f3bf 8f4f 	dsb	sy
 800fd0e:	617b      	str	r3, [r7, #20]
}
 800fd10:	bf00      	nop
 800fd12:	e7fe      	b.n	800fd12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d06e      	beq.n	800fdf8 <pvPortMalloc+0x150>
 800fd1a:	4b45      	ldr	r3, [pc, #276]	; (800fe30 <pvPortMalloc+0x188>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d869      	bhi.n	800fdf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fd24:	4b43      	ldr	r3, [pc, #268]	; (800fe34 <pvPortMalloc+0x18c>)
 800fd26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fd28:	4b42      	ldr	r3, [pc, #264]	; (800fe34 <pvPortMalloc+0x18c>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd2e:	e004      	b.n	800fd3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	687a      	ldr	r2, [r7, #4]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d903      	bls.n	800fd4c <pvPortMalloc+0xa4>
 800fd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d1f1      	bne.n	800fd30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fd4c:	4b36      	ldr	r3, [pc, #216]	; (800fe28 <pvPortMalloc+0x180>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d050      	beq.n	800fdf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fd56:	6a3b      	ldr	r3, [r7, #32]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2208      	movs	r2, #8
 800fd5c:	4413      	add	r3, r2
 800fd5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	6a3b      	ldr	r3, [r7, #32]
 800fd66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6a:	685a      	ldr	r2, [r3, #4]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	1ad2      	subs	r2, r2, r3
 800fd70:	2308      	movs	r3, #8
 800fd72:	005b      	lsls	r3, r3, #1
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d91f      	bls.n	800fdb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fd78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	4413      	add	r3, r2
 800fd7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd80:	69bb      	ldr	r3, [r7, #24]
 800fd82:	f003 0307 	and.w	r3, r3, #7
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d00a      	beq.n	800fda0 <pvPortMalloc+0xf8>
	__asm volatile
 800fd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd8e:	f383 8811 	msr	BASEPRI, r3
 800fd92:	f3bf 8f6f 	isb	sy
 800fd96:	f3bf 8f4f 	dsb	sy
 800fd9a:	613b      	str	r3, [r7, #16]
}
 800fd9c:	bf00      	nop
 800fd9e:	e7fe      	b.n	800fd9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda2:	685a      	ldr	r2, [r3, #4]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	1ad2      	subs	r2, r2, r3
 800fda8:	69bb      	ldr	r3, [r7, #24]
 800fdaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fdb2:	69b8      	ldr	r0, [r7, #24]
 800fdb4:	f000 f908 	bl	800ffc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fdb8:	4b1d      	ldr	r3, [pc, #116]	; (800fe30 <pvPortMalloc+0x188>)
 800fdba:	681a      	ldr	r2, [r3, #0]
 800fdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbe:	685b      	ldr	r3, [r3, #4]
 800fdc0:	1ad3      	subs	r3, r2, r3
 800fdc2:	4a1b      	ldr	r2, [pc, #108]	; (800fe30 <pvPortMalloc+0x188>)
 800fdc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fdc6:	4b1a      	ldr	r3, [pc, #104]	; (800fe30 <pvPortMalloc+0x188>)
 800fdc8:	681a      	ldr	r2, [r3, #0]
 800fdca:	4b1b      	ldr	r3, [pc, #108]	; (800fe38 <pvPortMalloc+0x190>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d203      	bcs.n	800fdda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fdd2:	4b17      	ldr	r3, [pc, #92]	; (800fe30 <pvPortMalloc+0x188>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	4a18      	ldr	r2, [pc, #96]	; (800fe38 <pvPortMalloc+0x190>)
 800fdd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fddc:	685a      	ldr	r2, [r3, #4]
 800fdde:	4b13      	ldr	r3, [pc, #76]	; (800fe2c <pvPortMalloc+0x184>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	431a      	orrs	r2, r3
 800fde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdea:	2200      	movs	r2, #0
 800fdec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fdee:	4b13      	ldr	r3, [pc, #76]	; (800fe3c <pvPortMalloc+0x194>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	4a11      	ldr	r2, [pc, #68]	; (800fe3c <pvPortMalloc+0x194>)
 800fdf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fdf8:	f7ff f8ae 	bl	800ef58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	f003 0307 	and.w	r3, r3, #7
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d00a      	beq.n	800fe1c <pvPortMalloc+0x174>
	__asm volatile
 800fe06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe0a:	f383 8811 	msr	BASEPRI, r3
 800fe0e:	f3bf 8f6f 	isb	sy
 800fe12:	f3bf 8f4f 	dsb	sy
 800fe16:	60fb      	str	r3, [r7, #12]
}
 800fe18:	bf00      	nop
 800fe1a:	e7fe      	b.n	800fe1a <pvPortMalloc+0x172>
	return pvReturn;
 800fe1c:	69fb      	ldr	r3, [r7, #28]
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3728      	adds	r7, #40	; 0x28
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	200068a0 	.word	0x200068a0
 800fe2c:	200068b4 	.word	0x200068b4
 800fe30:	200068a4 	.word	0x200068a4
 800fe34:	20006898 	.word	0x20006898
 800fe38:	200068a8 	.word	0x200068a8
 800fe3c:	200068ac 	.word	0x200068ac

0800fe40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b086      	sub	sp, #24
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d04d      	beq.n	800feee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fe52:	2308      	movs	r3, #8
 800fe54:	425b      	negs	r3, r3
 800fe56:	697a      	ldr	r2, [r7, #20]
 800fe58:	4413      	add	r3, r2
 800fe5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	685a      	ldr	r2, [r3, #4]
 800fe64:	4b24      	ldr	r3, [pc, #144]	; (800fef8 <vPortFree+0xb8>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	4013      	ands	r3, r2
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d10a      	bne.n	800fe84 <vPortFree+0x44>
	__asm volatile
 800fe6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe72:	f383 8811 	msr	BASEPRI, r3
 800fe76:	f3bf 8f6f 	isb	sy
 800fe7a:	f3bf 8f4f 	dsb	sy
 800fe7e:	60fb      	str	r3, [r7, #12]
}
 800fe80:	bf00      	nop
 800fe82:	e7fe      	b.n	800fe82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d00a      	beq.n	800fea2 <vPortFree+0x62>
	__asm volatile
 800fe8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe90:	f383 8811 	msr	BASEPRI, r3
 800fe94:	f3bf 8f6f 	isb	sy
 800fe98:	f3bf 8f4f 	dsb	sy
 800fe9c:	60bb      	str	r3, [r7, #8]
}
 800fe9e:	bf00      	nop
 800fea0:	e7fe      	b.n	800fea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	685a      	ldr	r2, [r3, #4]
 800fea6:	4b14      	ldr	r3, [pc, #80]	; (800fef8 <vPortFree+0xb8>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	4013      	ands	r3, r2
 800feac:	2b00      	cmp	r3, #0
 800feae:	d01e      	beq.n	800feee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800feb0:	693b      	ldr	r3, [r7, #16]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d11a      	bne.n	800feee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	685a      	ldr	r2, [r3, #4]
 800febc:	4b0e      	ldr	r3, [pc, #56]	; (800fef8 <vPortFree+0xb8>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	43db      	mvns	r3, r3
 800fec2:	401a      	ands	r2, r3
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fec8:	f7ff f838 	bl	800ef3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	685a      	ldr	r2, [r3, #4]
 800fed0:	4b0a      	ldr	r3, [pc, #40]	; (800fefc <vPortFree+0xbc>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	4413      	add	r3, r2
 800fed6:	4a09      	ldr	r2, [pc, #36]	; (800fefc <vPortFree+0xbc>)
 800fed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800feda:	6938      	ldr	r0, [r7, #16]
 800fedc:	f000 f874 	bl	800ffc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fee0:	4b07      	ldr	r3, [pc, #28]	; (800ff00 <vPortFree+0xc0>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	3301      	adds	r3, #1
 800fee6:	4a06      	ldr	r2, [pc, #24]	; (800ff00 <vPortFree+0xc0>)
 800fee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800feea:	f7ff f835 	bl	800ef58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800feee:	bf00      	nop
 800fef0:	3718      	adds	r7, #24
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
 800fef6:	bf00      	nop
 800fef8:	200068b4 	.word	0x200068b4
 800fefc:	200068a4 	.word	0x200068a4
 800ff00:	200068b0 	.word	0x200068b0

0800ff04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ff04:	b480      	push	{r7}
 800ff06:	b085      	sub	sp, #20
 800ff08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ff0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ff0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ff10:	4b27      	ldr	r3, [pc, #156]	; (800ffb0 <prvHeapInit+0xac>)
 800ff12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	f003 0307 	and.w	r3, r3, #7
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d00c      	beq.n	800ff38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	3307      	adds	r3, #7
 800ff22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f023 0307 	bic.w	r3, r3, #7
 800ff2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ff2c:	68ba      	ldr	r2, [r7, #8]
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	1ad3      	subs	r3, r2, r3
 800ff32:	4a1f      	ldr	r2, [pc, #124]	; (800ffb0 <prvHeapInit+0xac>)
 800ff34:	4413      	add	r3, r2
 800ff36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ff3c:	4a1d      	ldr	r2, [pc, #116]	; (800ffb4 <prvHeapInit+0xb0>)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ff42:	4b1c      	ldr	r3, [pc, #112]	; (800ffb4 <prvHeapInit+0xb0>)
 800ff44:	2200      	movs	r2, #0
 800ff46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	68ba      	ldr	r2, [r7, #8]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ff50:	2208      	movs	r2, #8
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	1a9b      	subs	r3, r3, r2
 800ff56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f023 0307 	bic.w	r3, r3, #7
 800ff5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	4a15      	ldr	r2, [pc, #84]	; (800ffb8 <prvHeapInit+0xb4>)
 800ff64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ff66:	4b14      	ldr	r3, [pc, #80]	; (800ffb8 <prvHeapInit+0xb4>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ff6e:	4b12      	ldr	r3, [pc, #72]	; (800ffb8 <prvHeapInit+0xb4>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	2200      	movs	r2, #0
 800ff74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	68fa      	ldr	r2, [r7, #12]
 800ff7e:	1ad2      	subs	r2, r2, r3
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ff84:	4b0c      	ldr	r3, [pc, #48]	; (800ffb8 <prvHeapInit+0xb4>)
 800ff86:	681a      	ldr	r2, [r3, #0]
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	4a0a      	ldr	r2, [pc, #40]	; (800ffbc <prvHeapInit+0xb8>)
 800ff92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	4a09      	ldr	r2, [pc, #36]	; (800ffc0 <prvHeapInit+0xbc>)
 800ff9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff9c:	4b09      	ldr	r3, [pc, #36]	; (800ffc4 <prvHeapInit+0xc0>)
 800ff9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ffa2:	601a      	str	r2, [r3, #0]
}
 800ffa4:	bf00      	nop
 800ffa6:	3714      	adds	r7, #20
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffae:	4770      	bx	lr
 800ffb0:	20002c98 	.word	0x20002c98
 800ffb4:	20006898 	.word	0x20006898
 800ffb8:	200068a0 	.word	0x200068a0
 800ffbc:	200068a8 	.word	0x200068a8
 800ffc0:	200068a4 	.word	0x200068a4
 800ffc4:	200068b4 	.word	0x200068b4

0800ffc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b085      	sub	sp, #20
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ffd0:	4b28      	ldr	r3, [pc, #160]	; (8010074 <prvInsertBlockIntoFreeList+0xac>)
 800ffd2:	60fb      	str	r3, [r7, #12]
 800ffd4:	e002      	b.n	800ffdc <prvInsertBlockIntoFreeList+0x14>
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	60fb      	str	r3, [r7, #12]
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d8f7      	bhi.n	800ffd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	685b      	ldr	r3, [r3, #4]
 800ffee:	68ba      	ldr	r2, [r7, #8]
 800fff0:	4413      	add	r3, r2
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d108      	bne.n	801000a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	685a      	ldr	r2, [r3, #4]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	441a      	add	r2, r3
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	68ba      	ldr	r2, [r7, #8]
 8010014:	441a      	add	r2, r3
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	429a      	cmp	r2, r3
 801001c:	d118      	bne.n	8010050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	4b15      	ldr	r3, [pc, #84]	; (8010078 <prvInsertBlockIntoFreeList+0xb0>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	429a      	cmp	r2, r3
 8010028:	d00d      	beq.n	8010046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	685a      	ldr	r2, [r3, #4]
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	441a      	add	r2, r3
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	601a      	str	r2, [r3, #0]
 8010044:	e008      	b.n	8010058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010046:	4b0c      	ldr	r3, [pc, #48]	; (8010078 <prvInsertBlockIntoFreeList+0xb0>)
 8010048:	681a      	ldr	r2, [r3, #0]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	601a      	str	r2, [r3, #0]
 801004e:	e003      	b.n	8010058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010058:	68fa      	ldr	r2, [r7, #12]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	429a      	cmp	r2, r3
 801005e:	d002      	beq.n	8010066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	687a      	ldr	r2, [r7, #4]
 8010064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010066:	bf00      	nop
 8010068:	3714      	adds	r7, #20
 801006a:	46bd      	mov	sp, r7
 801006c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010070:	4770      	bx	lr
 8010072:	bf00      	nop
 8010074:	20006898 	.word	0x20006898
 8010078:	200068a0 	.word	0x200068a0

0801007c <__errno>:
 801007c:	4b01      	ldr	r3, [pc, #4]	; (8010084 <__errno+0x8>)
 801007e:	6818      	ldr	r0, [r3, #0]
 8010080:	4770      	bx	lr
 8010082:	bf00      	nop
 8010084:	2000001c 	.word	0x2000001c

08010088 <__libc_init_array>:
 8010088:	b570      	push	{r4, r5, r6, lr}
 801008a:	4d0d      	ldr	r5, [pc, #52]	; (80100c0 <__libc_init_array+0x38>)
 801008c:	4c0d      	ldr	r4, [pc, #52]	; (80100c4 <__libc_init_array+0x3c>)
 801008e:	1b64      	subs	r4, r4, r5
 8010090:	10a4      	asrs	r4, r4, #2
 8010092:	2600      	movs	r6, #0
 8010094:	42a6      	cmp	r6, r4
 8010096:	d109      	bne.n	80100ac <__libc_init_array+0x24>
 8010098:	4d0b      	ldr	r5, [pc, #44]	; (80100c8 <__libc_init_array+0x40>)
 801009a:	4c0c      	ldr	r4, [pc, #48]	; (80100cc <__libc_init_array+0x44>)
 801009c:	f005 f960 	bl	8015360 <_init>
 80100a0:	1b64      	subs	r4, r4, r5
 80100a2:	10a4      	asrs	r4, r4, #2
 80100a4:	2600      	movs	r6, #0
 80100a6:	42a6      	cmp	r6, r4
 80100a8:	d105      	bne.n	80100b6 <__libc_init_array+0x2e>
 80100aa:	bd70      	pop	{r4, r5, r6, pc}
 80100ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80100b0:	4798      	blx	r3
 80100b2:	3601      	adds	r6, #1
 80100b4:	e7ee      	b.n	8010094 <__libc_init_array+0xc>
 80100b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80100ba:	4798      	blx	r3
 80100bc:	3601      	adds	r6, #1
 80100be:	e7f2      	b.n	80100a6 <__libc_init_array+0x1e>
 80100c0:	08015d68 	.word	0x08015d68
 80100c4:	08015d68 	.word	0x08015d68
 80100c8:	08015d68 	.word	0x08015d68
 80100cc:	08015d6c 	.word	0x08015d6c

080100d0 <memcpy>:
 80100d0:	440a      	add	r2, r1
 80100d2:	4291      	cmp	r1, r2
 80100d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80100d8:	d100      	bne.n	80100dc <memcpy+0xc>
 80100da:	4770      	bx	lr
 80100dc:	b510      	push	{r4, lr}
 80100de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100e6:	4291      	cmp	r1, r2
 80100e8:	d1f9      	bne.n	80100de <memcpy+0xe>
 80100ea:	bd10      	pop	{r4, pc}

080100ec <memset>:
 80100ec:	4402      	add	r2, r0
 80100ee:	4603      	mov	r3, r0
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d100      	bne.n	80100f6 <memset+0xa>
 80100f4:	4770      	bx	lr
 80100f6:	f803 1b01 	strb.w	r1, [r3], #1
 80100fa:	e7f9      	b.n	80100f0 <memset+0x4>

080100fc <__cvt>:
 80100fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010100:	ec55 4b10 	vmov	r4, r5, d0
 8010104:	2d00      	cmp	r5, #0
 8010106:	460e      	mov	r6, r1
 8010108:	4619      	mov	r1, r3
 801010a:	462b      	mov	r3, r5
 801010c:	bfbb      	ittet	lt
 801010e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010112:	461d      	movlt	r5, r3
 8010114:	2300      	movge	r3, #0
 8010116:	232d      	movlt	r3, #45	; 0x2d
 8010118:	700b      	strb	r3, [r1, #0]
 801011a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801011c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010120:	4691      	mov	r9, r2
 8010122:	f023 0820 	bic.w	r8, r3, #32
 8010126:	bfbc      	itt	lt
 8010128:	4622      	movlt	r2, r4
 801012a:	4614      	movlt	r4, r2
 801012c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010130:	d005      	beq.n	801013e <__cvt+0x42>
 8010132:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010136:	d100      	bne.n	801013a <__cvt+0x3e>
 8010138:	3601      	adds	r6, #1
 801013a:	2102      	movs	r1, #2
 801013c:	e000      	b.n	8010140 <__cvt+0x44>
 801013e:	2103      	movs	r1, #3
 8010140:	ab03      	add	r3, sp, #12
 8010142:	9301      	str	r3, [sp, #4]
 8010144:	ab02      	add	r3, sp, #8
 8010146:	9300      	str	r3, [sp, #0]
 8010148:	ec45 4b10 	vmov	d0, r4, r5
 801014c:	4653      	mov	r3, sl
 801014e:	4632      	mov	r2, r6
 8010150:	f000 fcea 	bl	8010b28 <_dtoa_r>
 8010154:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010158:	4607      	mov	r7, r0
 801015a:	d102      	bne.n	8010162 <__cvt+0x66>
 801015c:	f019 0f01 	tst.w	r9, #1
 8010160:	d022      	beq.n	80101a8 <__cvt+0xac>
 8010162:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010166:	eb07 0906 	add.w	r9, r7, r6
 801016a:	d110      	bne.n	801018e <__cvt+0x92>
 801016c:	783b      	ldrb	r3, [r7, #0]
 801016e:	2b30      	cmp	r3, #48	; 0x30
 8010170:	d10a      	bne.n	8010188 <__cvt+0x8c>
 8010172:	2200      	movs	r2, #0
 8010174:	2300      	movs	r3, #0
 8010176:	4620      	mov	r0, r4
 8010178:	4629      	mov	r1, r5
 801017a:	f7f0 fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 801017e:	b918      	cbnz	r0, 8010188 <__cvt+0x8c>
 8010180:	f1c6 0601 	rsb	r6, r6, #1
 8010184:	f8ca 6000 	str.w	r6, [sl]
 8010188:	f8da 3000 	ldr.w	r3, [sl]
 801018c:	4499      	add	r9, r3
 801018e:	2200      	movs	r2, #0
 8010190:	2300      	movs	r3, #0
 8010192:	4620      	mov	r0, r4
 8010194:	4629      	mov	r1, r5
 8010196:	f7f0 fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 801019a:	b108      	cbz	r0, 80101a0 <__cvt+0xa4>
 801019c:	f8cd 900c 	str.w	r9, [sp, #12]
 80101a0:	2230      	movs	r2, #48	; 0x30
 80101a2:	9b03      	ldr	r3, [sp, #12]
 80101a4:	454b      	cmp	r3, r9
 80101a6:	d307      	bcc.n	80101b8 <__cvt+0xbc>
 80101a8:	9b03      	ldr	r3, [sp, #12]
 80101aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80101ac:	1bdb      	subs	r3, r3, r7
 80101ae:	4638      	mov	r0, r7
 80101b0:	6013      	str	r3, [r2, #0]
 80101b2:	b004      	add	sp, #16
 80101b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101b8:	1c59      	adds	r1, r3, #1
 80101ba:	9103      	str	r1, [sp, #12]
 80101bc:	701a      	strb	r2, [r3, #0]
 80101be:	e7f0      	b.n	80101a2 <__cvt+0xa6>

080101c0 <__exponent>:
 80101c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101c2:	4603      	mov	r3, r0
 80101c4:	2900      	cmp	r1, #0
 80101c6:	bfb8      	it	lt
 80101c8:	4249      	neglt	r1, r1
 80101ca:	f803 2b02 	strb.w	r2, [r3], #2
 80101ce:	bfb4      	ite	lt
 80101d0:	222d      	movlt	r2, #45	; 0x2d
 80101d2:	222b      	movge	r2, #43	; 0x2b
 80101d4:	2909      	cmp	r1, #9
 80101d6:	7042      	strb	r2, [r0, #1]
 80101d8:	dd2a      	ble.n	8010230 <__exponent+0x70>
 80101da:	f10d 0407 	add.w	r4, sp, #7
 80101de:	46a4      	mov	ip, r4
 80101e0:	270a      	movs	r7, #10
 80101e2:	46a6      	mov	lr, r4
 80101e4:	460a      	mov	r2, r1
 80101e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80101ea:	fb07 1516 	mls	r5, r7, r6, r1
 80101ee:	3530      	adds	r5, #48	; 0x30
 80101f0:	2a63      	cmp	r2, #99	; 0x63
 80101f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80101f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80101fa:	4631      	mov	r1, r6
 80101fc:	dcf1      	bgt.n	80101e2 <__exponent+0x22>
 80101fe:	3130      	adds	r1, #48	; 0x30
 8010200:	f1ae 0502 	sub.w	r5, lr, #2
 8010204:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010208:	1c44      	adds	r4, r0, #1
 801020a:	4629      	mov	r1, r5
 801020c:	4561      	cmp	r1, ip
 801020e:	d30a      	bcc.n	8010226 <__exponent+0x66>
 8010210:	f10d 0209 	add.w	r2, sp, #9
 8010214:	eba2 020e 	sub.w	r2, r2, lr
 8010218:	4565      	cmp	r5, ip
 801021a:	bf88      	it	hi
 801021c:	2200      	movhi	r2, #0
 801021e:	4413      	add	r3, r2
 8010220:	1a18      	subs	r0, r3, r0
 8010222:	b003      	add	sp, #12
 8010224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010226:	f811 2b01 	ldrb.w	r2, [r1], #1
 801022a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801022e:	e7ed      	b.n	801020c <__exponent+0x4c>
 8010230:	2330      	movs	r3, #48	; 0x30
 8010232:	3130      	adds	r1, #48	; 0x30
 8010234:	7083      	strb	r3, [r0, #2]
 8010236:	70c1      	strb	r1, [r0, #3]
 8010238:	1d03      	adds	r3, r0, #4
 801023a:	e7f1      	b.n	8010220 <__exponent+0x60>

0801023c <_printf_float>:
 801023c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010240:	ed2d 8b02 	vpush	{d8}
 8010244:	b08d      	sub	sp, #52	; 0x34
 8010246:	460c      	mov	r4, r1
 8010248:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801024c:	4616      	mov	r6, r2
 801024e:	461f      	mov	r7, r3
 8010250:	4605      	mov	r5, r0
 8010252:	f001 fa57 	bl	8011704 <_localeconv_r>
 8010256:	f8d0 a000 	ldr.w	sl, [r0]
 801025a:	4650      	mov	r0, sl
 801025c:	f7ef ffb8 	bl	80001d0 <strlen>
 8010260:	2300      	movs	r3, #0
 8010262:	930a      	str	r3, [sp, #40]	; 0x28
 8010264:	6823      	ldr	r3, [r4, #0]
 8010266:	9305      	str	r3, [sp, #20]
 8010268:	f8d8 3000 	ldr.w	r3, [r8]
 801026c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010270:	3307      	adds	r3, #7
 8010272:	f023 0307 	bic.w	r3, r3, #7
 8010276:	f103 0208 	add.w	r2, r3, #8
 801027a:	f8c8 2000 	str.w	r2, [r8]
 801027e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010282:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010286:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801028a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801028e:	9307      	str	r3, [sp, #28]
 8010290:	f8cd 8018 	str.w	r8, [sp, #24]
 8010294:	ee08 0a10 	vmov	s16, r0
 8010298:	4b9f      	ldr	r3, [pc, #636]	; (8010518 <_printf_float+0x2dc>)
 801029a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801029e:	f04f 32ff 	mov.w	r2, #4294967295
 80102a2:	f7f0 fc43 	bl	8000b2c <__aeabi_dcmpun>
 80102a6:	bb88      	cbnz	r0, 801030c <_printf_float+0xd0>
 80102a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102ac:	4b9a      	ldr	r3, [pc, #616]	; (8010518 <_printf_float+0x2dc>)
 80102ae:	f04f 32ff 	mov.w	r2, #4294967295
 80102b2:	f7f0 fc1d 	bl	8000af0 <__aeabi_dcmple>
 80102b6:	bb48      	cbnz	r0, 801030c <_printf_float+0xd0>
 80102b8:	2200      	movs	r2, #0
 80102ba:	2300      	movs	r3, #0
 80102bc:	4640      	mov	r0, r8
 80102be:	4649      	mov	r1, r9
 80102c0:	f7f0 fc0c 	bl	8000adc <__aeabi_dcmplt>
 80102c4:	b110      	cbz	r0, 80102cc <_printf_float+0x90>
 80102c6:	232d      	movs	r3, #45	; 0x2d
 80102c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102cc:	4b93      	ldr	r3, [pc, #588]	; (801051c <_printf_float+0x2e0>)
 80102ce:	4894      	ldr	r0, [pc, #592]	; (8010520 <_printf_float+0x2e4>)
 80102d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80102d4:	bf94      	ite	ls
 80102d6:	4698      	movls	r8, r3
 80102d8:	4680      	movhi	r8, r0
 80102da:	2303      	movs	r3, #3
 80102dc:	6123      	str	r3, [r4, #16]
 80102de:	9b05      	ldr	r3, [sp, #20]
 80102e0:	f023 0204 	bic.w	r2, r3, #4
 80102e4:	6022      	str	r2, [r4, #0]
 80102e6:	f04f 0900 	mov.w	r9, #0
 80102ea:	9700      	str	r7, [sp, #0]
 80102ec:	4633      	mov	r3, r6
 80102ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80102f0:	4621      	mov	r1, r4
 80102f2:	4628      	mov	r0, r5
 80102f4:	f000 f9d8 	bl	80106a8 <_printf_common>
 80102f8:	3001      	adds	r0, #1
 80102fa:	f040 8090 	bne.w	801041e <_printf_float+0x1e2>
 80102fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010302:	b00d      	add	sp, #52	; 0x34
 8010304:	ecbd 8b02 	vpop	{d8}
 8010308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801030c:	4642      	mov	r2, r8
 801030e:	464b      	mov	r3, r9
 8010310:	4640      	mov	r0, r8
 8010312:	4649      	mov	r1, r9
 8010314:	f7f0 fc0a 	bl	8000b2c <__aeabi_dcmpun>
 8010318:	b140      	cbz	r0, 801032c <_printf_float+0xf0>
 801031a:	464b      	mov	r3, r9
 801031c:	2b00      	cmp	r3, #0
 801031e:	bfbc      	itt	lt
 8010320:	232d      	movlt	r3, #45	; 0x2d
 8010322:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010326:	487f      	ldr	r0, [pc, #508]	; (8010524 <_printf_float+0x2e8>)
 8010328:	4b7f      	ldr	r3, [pc, #508]	; (8010528 <_printf_float+0x2ec>)
 801032a:	e7d1      	b.n	80102d0 <_printf_float+0x94>
 801032c:	6863      	ldr	r3, [r4, #4]
 801032e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010332:	9206      	str	r2, [sp, #24]
 8010334:	1c5a      	adds	r2, r3, #1
 8010336:	d13f      	bne.n	80103b8 <_printf_float+0x17c>
 8010338:	2306      	movs	r3, #6
 801033a:	6063      	str	r3, [r4, #4]
 801033c:	9b05      	ldr	r3, [sp, #20]
 801033e:	6861      	ldr	r1, [r4, #4]
 8010340:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010344:	2300      	movs	r3, #0
 8010346:	9303      	str	r3, [sp, #12]
 8010348:	ab0a      	add	r3, sp, #40	; 0x28
 801034a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801034e:	ab09      	add	r3, sp, #36	; 0x24
 8010350:	ec49 8b10 	vmov	d0, r8, r9
 8010354:	9300      	str	r3, [sp, #0]
 8010356:	6022      	str	r2, [r4, #0]
 8010358:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801035c:	4628      	mov	r0, r5
 801035e:	f7ff fecd 	bl	80100fc <__cvt>
 8010362:	9b06      	ldr	r3, [sp, #24]
 8010364:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010366:	2b47      	cmp	r3, #71	; 0x47
 8010368:	4680      	mov	r8, r0
 801036a:	d108      	bne.n	801037e <_printf_float+0x142>
 801036c:	1cc8      	adds	r0, r1, #3
 801036e:	db02      	blt.n	8010376 <_printf_float+0x13a>
 8010370:	6863      	ldr	r3, [r4, #4]
 8010372:	4299      	cmp	r1, r3
 8010374:	dd41      	ble.n	80103fa <_printf_float+0x1be>
 8010376:	f1ab 0b02 	sub.w	fp, fp, #2
 801037a:	fa5f fb8b 	uxtb.w	fp, fp
 801037e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010382:	d820      	bhi.n	80103c6 <_printf_float+0x18a>
 8010384:	3901      	subs	r1, #1
 8010386:	465a      	mov	r2, fp
 8010388:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801038c:	9109      	str	r1, [sp, #36]	; 0x24
 801038e:	f7ff ff17 	bl	80101c0 <__exponent>
 8010392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010394:	1813      	adds	r3, r2, r0
 8010396:	2a01      	cmp	r2, #1
 8010398:	4681      	mov	r9, r0
 801039a:	6123      	str	r3, [r4, #16]
 801039c:	dc02      	bgt.n	80103a4 <_printf_float+0x168>
 801039e:	6822      	ldr	r2, [r4, #0]
 80103a0:	07d2      	lsls	r2, r2, #31
 80103a2:	d501      	bpl.n	80103a8 <_printf_float+0x16c>
 80103a4:	3301      	adds	r3, #1
 80103a6:	6123      	str	r3, [r4, #16]
 80103a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d09c      	beq.n	80102ea <_printf_float+0xae>
 80103b0:	232d      	movs	r3, #45	; 0x2d
 80103b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103b6:	e798      	b.n	80102ea <_printf_float+0xae>
 80103b8:	9a06      	ldr	r2, [sp, #24]
 80103ba:	2a47      	cmp	r2, #71	; 0x47
 80103bc:	d1be      	bne.n	801033c <_printf_float+0x100>
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d1bc      	bne.n	801033c <_printf_float+0x100>
 80103c2:	2301      	movs	r3, #1
 80103c4:	e7b9      	b.n	801033a <_printf_float+0xfe>
 80103c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80103ca:	d118      	bne.n	80103fe <_printf_float+0x1c2>
 80103cc:	2900      	cmp	r1, #0
 80103ce:	6863      	ldr	r3, [r4, #4]
 80103d0:	dd0b      	ble.n	80103ea <_printf_float+0x1ae>
 80103d2:	6121      	str	r1, [r4, #16]
 80103d4:	b913      	cbnz	r3, 80103dc <_printf_float+0x1a0>
 80103d6:	6822      	ldr	r2, [r4, #0]
 80103d8:	07d0      	lsls	r0, r2, #31
 80103da:	d502      	bpl.n	80103e2 <_printf_float+0x1a6>
 80103dc:	3301      	adds	r3, #1
 80103de:	440b      	add	r3, r1
 80103e0:	6123      	str	r3, [r4, #16]
 80103e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80103e4:	f04f 0900 	mov.w	r9, #0
 80103e8:	e7de      	b.n	80103a8 <_printf_float+0x16c>
 80103ea:	b913      	cbnz	r3, 80103f2 <_printf_float+0x1b6>
 80103ec:	6822      	ldr	r2, [r4, #0]
 80103ee:	07d2      	lsls	r2, r2, #31
 80103f0:	d501      	bpl.n	80103f6 <_printf_float+0x1ba>
 80103f2:	3302      	adds	r3, #2
 80103f4:	e7f4      	b.n	80103e0 <_printf_float+0x1a4>
 80103f6:	2301      	movs	r3, #1
 80103f8:	e7f2      	b.n	80103e0 <_printf_float+0x1a4>
 80103fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80103fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010400:	4299      	cmp	r1, r3
 8010402:	db05      	blt.n	8010410 <_printf_float+0x1d4>
 8010404:	6823      	ldr	r3, [r4, #0]
 8010406:	6121      	str	r1, [r4, #16]
 8010408:	07d8      	lsls	r0, r3, #31
 801040a:	d5ea      	bpl.n	80103e2 <_printf_float+0x1a6>
 801040c:	1c4b      	adds	r3, r1, #1
 801040e:	e7e7      	b.n	80103e0 <_printf_float+0x1a4>
 8010410:	2900      	cmp	r1, #0
 8010412:	bfd4      	ite	le
 8010414:	f1c1 0202 	rsble	r2, r1, #2
 8010418:	2201      	movgt	r2, #1
 801041a:	4413      	add	r3, r2
 801041c:	e7e0      	b.n	80103e0 <_printf_float+0x1a4>
 801041e:	6823      	ldr	r3, [r4, #0]
 8010420:	055a      	lsls	r2, r3, #21
 8010422:	d407      	bmi.n	8010434 <_printf_float+0x1f8>
 8010424:	6923      	ldr	r3, [r4, #16]
 8010426:	4642      	mov	r2, r8
 8010428:	4631      	mov	r1, r6
 801042a:	4628      	mov	r0, r5
 801042c:	47b8      	blx	r7
 801042e:	3001      	adds	r0, #1
 8010430:	d12c      	bne.n	801048c <_printf_float+0x250>
 8010432:	e764      	b.n	80102fe <_printf_float+0xc2>
 8010434:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010438:	f240 80e0 	bls.w	80105fc <_printf_float+0x3c0>
 801043c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010440:	2200      	movs	r2, #0
 8010442:	2300      	movs	r3, #0
 8010444:	f7f0 fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 8010448:	2800      	cmp	r0, #0
 801044a:	d034      	beq.n	80104b6 <_printf_float+0x27a>
 801044c:	4a37      	ldr	r2, [pc, #220]	; (801052c <_printf_float+0x2f0>)
 801044e:	2301      	movs	r3, #1
 8010450:	4631      	mov	r1, r6
 8010452:	4628      	mov	r0, r5
 8010454:	47b8      	blx	r7
 8010456:	3001      	adds	r0, #1
 8010458:	f43f af51 	beq.w	80102fe <_printf_float+0xc2>
 801045c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010460:	429a      	cmp	r2, r3
 8010462:	db02      	blt.n	801046a <_printf_float+0x22e>
 8010464:	6823      	ldr	r3, [r4, #0]
 8010466:	07d8      	lsls	r0, r3, #31
 8010468:	d510      	bpl.n	801048c <_printf_float+0x250>
 801046a:	ee18 3a10 	vmov	r3, s16
 801046e:	4652      	mov	r2, sl
 8010470:	4631      	mov	r1, r6
 8010472:	4628      	mov	r0, r5
 8010474:	47b8      	blx	r7
 8010476:	3001      	adds	r0, #1
 8010478:	f43f af41 	beq.w	80102fe <_printf_float+0xc2>
 801047c:	f04f 0800 	mov.w	r8, #0
 8010480:	f104 091a 	add.w	r9, r4, #26
 8010484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010486:	3b01      	subs	r3, #1
 8010488:	4543      	cmp	r3, r8
 801048a:	dc09      	bgt.n	80104a0 <_printf_float+0x264>
 801048c:	6823      	ldr	r3, [r4, #0]
 801048e:	079b      	lsls	r3, r3, #30
 8010490:	f100 8105 	bmi.w	801069e <_printf_float+0x462>
 8010494:	68e0      	ldr	r0, [r4, #12]
 8010496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010498:	4298      	cmp	r0, r3
 801049a:	bfb8      	it	lt
 801049c:	4618      	movlt	r0, r3
 801049e:	e730      	b.n	8010302 <_printf_float+0xc6>
 80104a0:	2301      	movs	r3, #1
 80104a2:	464a      	mov	r2, r9
 80104a4:	4631      	mov	r1, r6
 80104a6:	4628      	mov	r0, r5
 80104a8:	47b8      	blx	r7
 80104aa:	3001      	adds	r0, #1
 80104ac:	f43f af27 	beq.w	80102fe <_printf_float+0xc2>
 80104b0:	f108 0801 	add.w	r8, r8, #1
 80104b4:	e7e6      	b.n	8010484 <_printf_float+0x248>
 80104b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	dc39      	bgt.n	8010530 <_printf_float+0x2f4>
 80104bc:	4a1b      	ldr	r2, [pc, #108]	; (801052c <_printf_float+0x2f0>)
 80104be:	2301      	movs	r3, #1
 80104c0:	4631      	mov	r1, r6
 80104c2:	4628      	mov	r0, r5
 80104c4:	47b8      	blx	r7
 80104c6:	3001      	adds	r0, #1
 80104c8:	f43f af19 	beq.w	80102fe <_printf_float+0xc2>
 80104cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80104d0:	4313      	orrs	r3, r2
 80104d2:	d102      	bne.n	80104da <_printf_float+0x29e>
 80104d4:	6823      	ldr	r3, [r4, #0]
 80104d6:	07d9      	lsls	r1, r3, #31
 80104d8:	d5d8      	bpl.n	801048c <_printf_float+0x250>
 80104da:	ee18 3a10 	vmov	r3, s16
 80104de:	4652      	mov	r2, sl
 80104e0:	4631      	mov	r1, r6
 80104e2:	4628      	mov	r0, r5
 80104e4:	47b8      	blx	r7
 80104e6:	3001      	adds	r0, #1
 80104e8:	f43f af09 	beq.w	80102fe <_printf_float+0xc2>
 80104ec:	f04f 0900 	mov.w	r9, #0
 80104f0:	f104 0a1a 	add.w	sl, r4, #26
 80104f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104f6:	425b      	negs	r3, r3
 80104f8:	454b      	cmp	r3, r9
 80104fa:	dc01      	bgt.n	8010500 <_printf_float+0x2c4>
 80104fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104fe:	e792      	b.n	8010426 <_printf_float+0x1ea>
 8010500:	2301      	movs	r3, #1
 8010502:	4652      	mov	r2, sl
 8010504:	4631      	mov	r1, r6
 8010506:	4628      	mov	r0, r5
 8010508:	47b8      	blx	r7
 801050a:	3001      	adds	r0, #1
 801050c:	f43f aef7 	beq.w	80102fe <_printf_float+0xc2>
 8010510:	f109 0901 	add.w	r9, r9, #1
 8010514:	e7ee      	b.n	80104f4 <_printf_float+0x2b8>
 8010516:	bf00      	nop
 8010518:	7fefffff 	.word	0x7fefffff
 801051c:	08015534 	.word	0x08015534
 8010520:	08015538 	.word	0x08015538
 8010524:	08015540 	.word	0x08015540
 8010528:	0801553c 	.word	0x0801553c
 801052c:	08015544 	.word	0x08015544
 8010530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010532:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010534:	429a      	cmp	r2, r3
 8010536:	bfa8      	it	ge
 8010538:	461a      	movge	r2, r3
 801053a:	2a00      	cmp	r2, #0
 801053c:	4691      	mov	r9, r2
 801053e:	dc37      	bgt.n	80105b0 <_printf_float+0x374>
 8010540:	f04f 0b00 	mov.w	fp, #0
 8010544:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010548:	f104 021a 	add.w	r2, r4, #26
 801054c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801054e:	9305      	str	r3, [sp, #20]
 8010550:	eba3 0309 	sub.w	r3, r3, r9
 8010554:	455b      	cmp	r3, fp
 8010556:	dc33      	bgt.n	80105c0 <_printf_float+0x384>
 8010558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801055c:	429a      	cmp	r2, r3
 801055e:	db3b      	blt.n	80105d8 <_printf_float+0x39c>
 8010560:	6823      	ldr	r3, [r4, #0]
 8010562:	07da      	lsls	r2, r3, #31
 8010564:	d438      	bmi.n	80105d8 <_printf_float+0x39c>
 8010566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010568:	9a05      	ldr	r2, [sp, #20]
 801056a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801056c:	1a9a      	subs	r2, r3, r2
 801056e:	eba3 0901 	sub.w	r9, r3, r1
 8010572:	4591      	cmp	r9, r2
 8010574:	bfa8      	it	ge
 8010576:	4691      	movge	r9, r2
 8010578:	f1b9 0f00 	cmp.w	r9, #0
 801057c:	dc35      	bgt.n	80105ea <_printf_float+0x3ae>
 801057e:	f04f 0800 	mov.w	r8, #0
 8010582:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010586:	f104 0a1a 	add.w	sl, r4, #26
 801058a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801058e:	1a9b      	subs	r3, r3, r2
 8010590:	eba3 0309 	sub.w	r3, r3, r9
 8010594:	4543      	cmp	r3, r8
 8010596:	f77f af79 	ble.w	801048c <_printf_float+0x250>
 801059a:	2301      	movs	r3, #1
 801059c:	4652      	mov	r2, sl
 801059e:	4631      	mov	r1, r6
 80105a0:	4628      	mov	r0, r5
 80105a2:	47b8      	blx	r7
 80105a4:	3001      	adds	r0, #1
 80105a6:	f43f aeaa 	beq.w	80102fe <_printf_float+0xc2>
 80105aa:	f108 0801 	add.w	r8, r8, #1
 80105ae:	e7ec      	b.n	801058a <_printf_float+0x34e>
 80105b0:	4613      	mov	r3, r2
 80105b2:	4631      	mov	r1, r6
 80105b4:	4642      	mov	r2, r8
 80105b6:	4628      	mov	r0, r5
 80105b8:	47b8      	blx	r7
 80105ba:	3001      	adds	r0, #1
 80105bc:	d1c0      	bne.n	8010540 <_printf_float+0x304>
 80105be:	e69e      	b.n	80102fe <_printf_float+0xc2>
 80105c0:	2301      	movs	r3, #1
 80105c2:	4631      	mov	r1, r6
 80105c4:	4628      	mov	r0, r5
 80105c6:	9205      	str	r2, [sp, #20]
 80105c8:	47b8      	blx	r7
 80105ca:	3001      	adds	r0, #1
 80105cc:	f43f ae97 	beq.w	80102fe <_printf_float+0xc2>
 80105d0:	9a05      	ldr	r2, [sp, #20]
 80105d2:	f10b 0b01 	add.w	fp, fp, #1
 80105d6:	e7b9      	b.n	801054c <_printf_float+0x310>
 80105d8:	ee18 3a10 	vmov	r3, s16
 80105dc:	4652      	mov	r2, sl
 80105de:	4631      	mov	r1, r6
 80105e0:	4628      	mov	r0, r5
 80105e2:	47b8      	blx	r7
 80105e4:	3001      	adds	r0, #1
 80105e6:	d1be      	bne.n	8010566 <_printf_float+0x32a>
 80105e8:	e689      	b.n	80102fe <_printf_float+0xc2>
 80105ea:	9a05      	ldr	r2, [sp, #20]
 80105ec:	464b      	mov	r3, r9
 80105ee:	4442      	add	r2, r8
 80105f0:	4631      	mov	r1, r6
 80105f2:	4628      	mov	r0, r5
 80105f4:	47b8      	blx	r7
 80105f6:	3001      	adds	r0, #1
 80105f8:	d1c1      	bne.n	801057e <_printf_float+0x342>
 80105fa:	e680      	b.n	80102fe <_printf_float+0xc2>
 80105fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105fe:	2a01      	cmp	r2, #1
 8010600:	dc01      	bgt.n	8010606 <_printf_float+0x3ca>
 8010602:	07db      	lsls	r3, r3, #31
 8010604:	d538      	bpl.n	8010678 <_printf_float+0x43c>
 8010606:	2301      	movs	r3, #1
 8010608:	4642      	mov	r2, r8
 801060a:	4631      	mov	r1, r6
 801060c:	4628      	mov	r0, r5
 801060e:	47b8      	blx	r7
 8010610:	3001      	adds	r0, #1
 8010612:	f43f ae74 	beq.w	80102fe <_printf_float+0xc2>
 8010616:	ee18 3a10 	vmov	r3, s16
 801061a:	4652      	mov	r2, sl
 801061c:	4631      	mov	r1, r6
 801061e:	4628      	mov	r0, r5
 8010620:	47b8      	blx	r7
 8010622:	3001      	adds	r0, #1
 8010624:	f43f ae6b 	beq.w	80102fe <_printf_float+0xc2>
 8010628:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801062c:	2200      	movs	r2, #0
 801062e:	2300      	movs	r3, #0
 8010630:	f7f0 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010634:	b9d8      	cbnz	r0, 801066e <_printf_float+0x432>
 8010636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010638:	f108 0201 	add.w	r2, r8, #1
 801063c:	3b01      	subs	r3, #1
 801063e:	4631      	mov	r1, r6
 8010640:	4628      	mov	r0, r5
 8010642:	47b8      	blx	r7
 8010644:	3001      	adds	r0, #1
 8010646:	d10e      	bne.n	8010666 <_printf_float+0x42a>
 8010648:	e659      	b.n	80102fe <_printf_float+0xc2>
 801064a:	2301      	movs	r3, #1
 801064c:	4652      	mov	r2, sl
 801064e:	4631      	mov	r1, r6
 8010650:	4628      	mov	r0, r5
 8010652:	47b8      	blx	r7
 8010654:	3001      	adds	r0, #1
 8010656:	f43f ae52 	beq.w	80102fe <_printf_float+0xc2>
 801065a:	f108 0801 	add.w	r8, r8, #1
 801065e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010660:	3b01      	subs	r3, #1
 8010662:	4543      	cmp	r3, r8
 8010664:	dcf1      	bgt.n	801064a <_printf_float+0x40e>
 8010666:	464b      	mov	r3, r9
 8010668:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801066c:	e6dc      	b.n	8010428 <_printf_float+0x1ec>
 801066e:	f04f 0800 	mov.w	r8, #0
 8010672:	f104 0a1a 	add.w	sl, r4, #26
 8010676:	e7f2      	b.n	801065e <_printf_float+0x422>
 8010678:	2301      	movs	r3, #1
 801067a:	4642      	mov	r2, r8
 801067c:	e7df      	b.n	801063e <_printf_float+0x402>
 801067e:	2301      	movs	r3, #1
 8010680:	464a      	mov	r2, r9
 8010682:	4631      	mov	r1, r6
 8010684:	4628      	mov	r0, r5
 8010686:	47b8      	blx	r7
 8010688:	3001      	adds	r0, #1
 801068a:	f43f ae38 	beq.w	80102fe <_printf_float+0xc2>
 801068e:	f108 0801 	add.w	r8, r8, #1
 8010692:	68e3      	ldr	r3, [r4, #12]
 8010694:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010696:	1a5b      	subs	r3, r3, r1
 8010698:	4543      	cmp	r3, r8
 801069a:	dcf0      	bgt.n	801067e <_printf_float+0x442>
 801069c:	e6fa      	b.n	8010494 <_printf_float+0x258>
 801069e:	f04f 0800 	mov.w	r8, #0
 80106a2:	f104 0919 	add.w	r9, r4, #25
 80106a6:	e7f4      	b.n	8010692 <_printf_float+0x456>

080106a8 <_printf_common>:
 80106a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106ac:	4616      	mov	r6, r2
 80106ae:	4699      	mov	r9, r3
 80106b0:	688a      	ldr	r2, [r1, #8]
 80106b2:	690b      	ldr	r3, [r1, #16]
 80106b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80106b8:	4293      	cmp	r3, r2
 80106ba:	bfb8      	it	lt
 80106bc:	4613      	movlt	r3, r2
 80106be:	6033      	str	r3, [r6, #0]
 80106c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80106c4:	4607      	mov	r7, r0
 80106c6:	460c      	mov	r4, r1
 80106c8:	b10a      	cbz	r2, 80106ce <_printf_common+0x26>
 80106ca:	3301      	adds	r3, #1
 80106cc:	6033      	str	r3, [r6, #0]
 80106ce:	6823      	ldr	r3, [r4, #0]
 80106d0:	0699      	lsls	r1, r3, #26
 80106d2:	bf42      	ittt	mi
 80106d4:	6833      	ldrmi	r3, [r6, #0]
 80106d6:	3302      	addmi	r3, #2
 80106d8:	6033      	strmi	r3, [r6, #0]
 80106da:	6825      	ldr	r5, [r4, #0]
 80106dc:	f015 0506 	ands.w	r5, r5, #6
 80106e0:	d106      	bne.n	80106f0 <_printf_common+0x48>
 80106e2:	f104 0a19 	add.w	sl, r4, #25
 80106e6:	68e3      	ldr	r3, [r4, #12]
 80106e8:	6832      	ldr	r2, [r6, #0]
 80106ea:	1a9b      	subs	r3, r3, r2
 80106ec:	42ab      	cmp	r3, r5
 80106ee:	dc26      	bgt.n	801073e <_printf_common+0x96>
 80106f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80106f4:	1e13      	subs	r3, r2, #0
 80106f6:	6822      	ldr	r2, [r4, #0]
 80106f8:	bf18      	it	ne
 80106fa:	2301      	movne	r3, #1
 80106fc:	0692      	lsls	r2, r2, #26
 80106fe:	d42b      	bmi.n	8010758 <_printf_common+0xb0>
 8010700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010704:	4649      	mov	r1, r9
 8010706:	4638      	mov	r0, r7
 8010708:	47c0      	blx	r8
 801070a:	3001      	adds	r0, #1
 801070c:	d01e      	beq.n	801074c <_printf_common+0xa4>
 801070e:	6823      	ldr	r3, [r4, #0]
 8010710:	68e5      	ldr	r5, [r4, #12]
 8010712:	6832      	ldr	r2, [r6, #0]
 8010714:	f003 0306 	and.w	r3, r3, #6
 8010718:	2b04      	cmp	r3, #4
 801071a:	bf08      	it	eq
 801071c:	1aad      	subeq	r5, r5, r2
 801071e:	68a3      	ldr	r3, [r4, #8]
 8010720:	6922      	ldr	r2, [r4, #16]
 8010722:	bf0c      	ite	eq
 8010724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010728:	2500      	movne	r5, #0
 801072a:	4293      	cmp	r3, r2
 801072c:	bfc4      	itt	gt
 801072e:	1a9b      	subgt	r3, r3, r2
 8010730:	18ed      	addgt	r5, r5, r3
 8010732:	2600      	movs	r6, #0
 8010734:	341a      	adds	r4, #26
 8010736:	42b5      	cmp	r5, r6
 8010738:	d11a      	bne.n	8010770 <_printf_common+0xc8>
 801073a:	2000      	movs	r0, #0
 801073c:	e008      	b.n	8010750 <_printf_common+0xa8>
 801073e:	2301      	movs	r3, #1
 8010740:	4652      	mov	r2, sl
 8010742:	4649      	mov	r1, r9
 8010744:	4638      	mov	r0, r7
 8010746:	47c0      	blx	r8
 8010748:	3001      	adds	r0, #1
 801074a:	d103      	bne.n	8010754 <_printf_common+0xac>
 801074c:	f04f 30ff 	mov.w	r0, #4294967295
 8010750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010754:	3501      	adds	r5, #1
 8010756:	e7c6      	b.n	80106e6 <_printf_common+0x3e>
 8010758:	18e1      	adds	r1, r4, r3
 801075a:	1c5a      	adds	r2, r3, #1
 801075c:	2030      	movs	r0, #48	; 0x30
 801075e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010762:	4422      	add	r2, r4
 8010764:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010768:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801076c:	3302      	adds	r3, #2
 801076e:	e7c7      	b.n	8010700 <_printf_common+0x58>
 8010770:	2301      	movs	r3, #1
 8010772:	4622      	mov	r2, r4
 8010774:	4649      	mov	r1, r9
 8010776:	4638      	mov	r0, r7
 8010778:	47c0      	blx	r8
 801077a:	3001      	adds	r0, #1
 801077c:	d0e6      	beq.n	801074c <_printf_common+0xa4>
 801077e:	3601      	adds	r6, #1
 8010780:	e7d9      	b.n	8010736 <_printf_common+0x8e>
	...

08010784 <_printf_i>:
 8010784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010788:	7e0f      	ldrb	r7, [r1, #24]
 801078a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801078c:	2f78      	cmp	r7, #120	; 0x78
 801078e:	4691      	mov	r9, r2
 8010790:	4680      	mov	r8, r0
 8010792:	460c      	mov	r4, r1
 8010794:	469a      	mov	sl, r3
 8010796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801079a:	d807      	bhi.n	80107ac <_printf_i+0x28>
 801079c:	2f62      	cmp	r7, #98	; 0x62
 801079e:	d80a      	bhi.n	80107b6 <_printf_i+0x32>
 80107a0:	2f00      	cmp	r7, #0
 80107a2:	f000 80d8 	beq.w	8010956 <_printf_i+0x1d2>
 80107a6:	2f58      	cmp	r7, #88	; 0x58
 80107a8:	f000 80a3 	beq.w	80108f2 <_printf_i+0x16e>
 80107ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80107b4:	e03a      	b.n	801082c <_printf_i+0xa8>
 80107b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80107ba:	2b15      	cmp	r3, #21
 80107bc:	d8f6      	bhi.n	80107ac <_printf_i+0x28>
 80107be:	a101      	add	r1, pc, #4	; (adr r1, 80107c4 <_printf_i+0x40>)
 80107c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80107c4:	0801081d 	.word	0x0801081d
 80107c8:	08010831 	.word	0x08010831
 80107cc:	080107ad 	.word	0x080107ad
 80107d0:	080107ad 	.word	0x080107ad
 80107d4:	080107ad 	.word	0x080107ad
 80107d8:	080107ad 	.word	0x080107ad
 80107dc:	08010831 	.word	0x08010831
 80107e0:	080107ad 	.word	0x080107ad
 80107e4:	080107ad 	.word	0x080107ad
 80107e8:	080107ad 	.word	0x080107ad
 80107ec:	080107ad 	.word	0x080107ad
 80107f0:	0801093d 	.word	0x0801093d
 80107f4:	08010861 	.word	0x08010861
 80107f8:	0801091f 	.word	0x0801091f
 80107fc:	080107ad 	.word	0x080107ad
 8010800:	080107ad 	.word	0x080107ad
 8010804:	0801095f 	.word	0x0801095f
 8010808:	080107ad 	.word	0x080107ad
 801080c:	08010861 	.word	0x08010861
 8010810:	080107ad 	.word	0x080107ad
 8010814:	080107ad 	.word	0x080107ad
 8010818:	08010927 	.word	0x08010927
 801081c:	682b      	ldr	r3, [r5, #0]
 801081e:	1d1a      	adds	r2, r3, #4
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	602a      	str	r2, [r5, #0]
 8010824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801082c:	2301      	movs	r3, #1
 801082e:	e0a3      	b.n	8010978 <_printf_i+0x1f4>
 8010830:	6820      	ldr	r0, [r4, #0]
 8010832:	6829      	ldr	r1, [r5, #0]
 8010834:	0606      	lsls	r6, r0, #24
 8010836:	f101 0304 	add.w	r3, r1, #4
 801083a:	d50a      	bpl.n	8010852 <_printf_i+0xce>
 801083c:	680e      	ldr	r6, [r1, #0]
 801083e:	602b      	str	r3, [r5, #0]
 8010840:	2e00      	cmp	r6, #0
 8010842:	da03      	bge.n	801084c <_printf_i+0xc8>
 8010844:	232d      	movs	r3, #45	; 0x2d
 8010846:	4276      	negs	r6, r6
 8010848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801084c:	485e      	ldr	r0, [pc, #376]	; (80109c8 <_printf_i+0x244>)
 801084e:	230a      	movs	r3, #10
 8010850:	e019      	b.n	8010886 <_printf_i+0x102>
 8010852:	680e      	ldr	r6, [r1, #0]
 8010854:	602b      	str	r3, [r5, #0]
 8010856:	f010 0f40 	tst.w	r0, #64	; 0x40
 801085a:	bf18      	it	ne
 801085c:	b236      	sxthne	r6, r6
 801085e:	e7ef      	b.n	8010840 <_printf_i+0xbc>
 8010860:	682b      	ldr	r3, [r5, #0]
 8010862:	6820      	ldr	r0, [r4, #0]
 8010864:	1d19      	adds	r1, r3, #4
 8010866:	6029      	str	r1, [r5, #0]
 8010868:	0601      	lsls	r1, r0, #24
 801086a:	d501      	bpl.n	8010870 <_printf_i+0xec>
 801086c:	681e      	ldr	r6, [r3, #0]
 801086e:	e002      	b.n	8010876 <_printf_i+0xf2>
 8010870:	0646      	lsls	r6, r0, #25
 8010872:	d5fb      	bpl.n	801086c <_printf_i+0xe8>
 8010874:	881e      	ldrh	r6, [r3, #0]
 8010876:	4854      	ldr	r0, [pc, #336]	; (80109c8 <_printf_i+0x244>)
 8010878:	2f6f      	cmp	r7, #111	; 0x6f
 801087a:	bf0c      	ite	eq
 801087c:	2308      	moveq	r3, #8
 801087e:	230a      	movne	r3, #10
 8010880:	2100      	movs	r1, #0
 8010882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010886:	6865      	ldr	r5, [r4, #4]
 8010888:	60a5      	str	r5, [r4, #8]
 801088a:	2d00      	cmp	r5, #0
 801088c:	bfa2      	ittt	ge
 801088e:	6821      	ldrge	r1, [r4, #0]
 8010890:	f021 0104 	bicge.w	r1, r1, #4
 8010894:	6021      	strge	r1, [r4, #0]
 8010896:	b90e      	cbnz	r6, 801089c <_printf_i+0x118>
 8010898:	2d00      	cmp	r5, #0
 801089a:	d04d      	beq.n	8010938 <_printf_i+0x1b4>
 801089c:	4615      	mov	r5, r2
 801089e:	fbb6 f1f3 	udiv	r1, r6, r3
 80108a2:	fb03 6711 	mls	r7, r3, r1, r6
 80108a6:	5dc7      	ldrb	r7, [r0, r7]
 80108a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80108ac:	4637      	mov	r7, r6
 80108ae:	42bb      	cmp	r3, r7
 80108b0:	460e      	mov	r6, r1
 80108b2:	d9f4      	bls.n	801089e <_printf_i+0x11a>
 80108b4:	2b08      	cmp	r3, #8
 80108b6:	d10b      	bne.n	80108d0 <_printf_i+0x14c>
 80108b8:	6823      	ldr	r3, [r4, #0]
 80108ba:	07de      	lsls	r6, r3, #31
 80108bc:	d508      	bpl.n	80108d0 <_printf_i+0x14c>
 80108be:	6923      	ldr	r3, [r4, #16]
 80108c0:	6861      	ldr	r1, [r4, #4]
 80108c2:	4299      	cmp	r1, r3
 80108c4:	bfde      	ittt	le
 80108c6:	2330      	movle	r3, #48	; 0x30
 80108c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80108cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80108d0:	1b52      	subs	r2, r2, r5
 80108d2:	6122      	str	r2, [r4, #16]
 80108d4:	f8cd a000 	str.w	sl, [sp]
 80108d8:	464b      	mov	r3, r9
 80108da:	aa03      	add	r2, sp, #12
 80108dc:	4621      	mov	r1, r4
 80108de:	4640      	mov	r0, r8
 80108e0:	f7ff fee2 	bl	80106a8 <_printf_common>
 80108e4:	3001      	adds	r0, #1
 80108e6:	d14c      	bne.n	8010982 <_printf_i+0x1fe>
 80108e8:	f04f 30ff 	mov.w	r0, #4294967295
 80108ec:	b004      	add	sp, #16
 80108ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108f2:	4835      	ldr	r0, [pc, #212]	; (80109c8 <_printf_i+0x244>)
 80108f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80108f8:	6829      	ldr	r1, [r5, #0]
 80108fa:	6823      	ldr	r3, [r4, #0]
 80108fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8010900:	6029      	str	r1, [r5, #0]
 8010902:	061d      	lsls	r5, r3, #24
 8010904:	d514      	bpl.n	8010930 <_printf_i+0x1ac>
 8010906:	07df      	lsls	r7, r3, #31
 8010908:	bf44      	itt	mi
 801090a:	f043 0320 	orrmi.w	r3, r3, #32
 801090e:	6023      	strmi	r3, [r4, #0]
 8010910:	b91e      	cbnz	r6, 801091a <_printf_i+0x196>
 8010912:	6823      	ldr	r3, [r4, #0]
 8010914:	f023 0320 	bic.w	r3, r3, #32
 8010918:	6023      	str	r3, [r4, #0]
 801091a:	2310      	movs	r3, #16
 801091c:	e7b0      	b.n	8010880 <_printf_i+0xfc>
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	f043 0320 	orr.w	r3, r3, #32
 8010924:	6023      	str	r3, [r4, #0]
 8010926:	2378      	movs	r3, #120	; 0x78
 8010928:	4828      	ldr	r0, [pc, #160]	; (80109cc <_printf_i+0x248>)
 801092a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801092e:	e7e3      	b.n	80108f8 <_printf_i+0x174>
 8010930:	0659      	lsls	r1, r3, #25
 8010932:	bf48      	it	mi
 8010934:	b2b6      	uxthmi	r6, r6
 8010936:	e7e6      	b.n	8010906 <_printf_i+0x182>
 8010938:	4615      	mov	r5, r2
 801093a:	e7bb      	b.n	80108b4 <_printf_i+0x130>
 801093c:	682b      	ldr	r3, [r5, #0]
 801093e:	6826      	ldr	r6, [r4, #0]
 8010940:	6961      	ldr	r1, [r4, #20]
 8010942:	1d18      	adds	r0, r3, #4
 8010944:	6028      	str	r0, [r5, #0]
 8010946:	0635      	lsls	r5, r6, #24
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	d501      	bpl.n	8010950 <_printf_i+0x1cc>
 801094c:	6019      	str	r1, [r3, #0]
 801094e:	e002      	b.n	8010956 <_printf_i+0x1d2>
 8010950:	0670      	lsls	r0, r6, #25
 8010952:	d5fb      	bpl.n	801094c <_printf_i+0x1c8>
 8010954:	8019      	strh	r1, [r3, #0]
 8010956:	2300      	movs	r3, #0
 8010958:	6123      	str	r3, [r4, #16]
 801095a:	4615      	mov	r5, r2
 801095c:	e7ba      	b.n	80108d4 <_printf_i+0x150>
 801095e:	682b      	ldr	r3, [r5, #0]
 8010960:	1d1a      	adds	r2, r3, #4
 8010962:	602a      	str	r2, [r5, #0]
 8010964:	681d      	ldr	r5, [r3, #0]
 8010966:	6862      	ldr	r2, [r4, #4]
 8010968:	2100      	movs	r1, #0
 801096a:	4628      	mov	r0, r5
 801096c:	f7ef fc38 	bl	80001e0 <memchr>
 8010970:	b108      	cbz	r0, 8010976 <_printf_i+0x1f2>
 8010972:	1b40      	subs	r0, r0, r5
 8010974:	6060      	str	r0, [r4, #4]
 8010976:	6863      	ldr	r3, [r4, #4]
 8010978:	6123      	str	r3, [r4, #16]
 801097a:	2300      	movs	r3, #0
 801097c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010980:	e7a8      	b.n	80108d4 <_printf_i+0x150>
 8010982:	6923      	ldr	r3, [r4, #16]
 8010984:	462a      	mov	r2, r5
 8010986:	4649      	mov	r1, r9
 8010988:	4640      	mov	r0, r8
 801098a:	47d0      	blx	sl
 801098c:	3001      	adds	r0, #1
 801098e:	d0ab      	beq.n	80108e8 <_printf_i+0x164>
 8010990:	6823      	ldr	r3, [r4, #0]
 8010992:	079b      	lsls	r3, r3, #30
 8010994:	d413      	bmi.n	80109be <_printf_i+0x23a>
 8010996:	68e0      	ldr	r0, [r4, #12]
 8010998:	9b03      	ldr	r3, [sp, #12]
 801099a:	4298      	cmp	r0, r3
 801099c:	bfb8      	it	lt
 801099e:	4618      	movlt	r0, r3
 80109a0:	e7a4      	b.n	80108ec <_printf_i+0x168>
 80109a2:	2301      	movs	r3, #1
 80109a4:	4632      	mov	r2, r6
 80109a6:	4649      	mov	r1, r9
 80109a8:	4640      	mov	r0, r8
 80109aa:	47d0      	blx	sl
 80109ac:	3001      	adds	r0, #1
 80109ae:	d09b      	beq.n	80108e8 <_printf_i+0x164>
 80109b0:	3501      	adds	r5, #1
 80109b2:	68e3      	ldr	r3, [r4, #12]
 80109b4:	9903      	ldr	r1, [sp, #12]
 80109b6:	1a5b      	subs	r3, r3, r1
 80109b8:	42ab      	cmp	r3, r5
 80109ba:	dcf2      	bgt.n	80109a2 <_printf_i+0x21e>
 80109bc:	e7eb      	b.n	8010996 <_printf_i+0x212>
 80109be:	2500      	movs	r5, #0
 80109c0:	f104 0619 	add.w	r6, r4, #25
 80109c4:	e7f5      	b.n	80109b2 <_printf_i+0x22e>
 80109c6:	bf00      	nop
 80109c8:	08015546 	.word	0x08015546
 80109cc:	08015557 	.word	0x08015557

080109d0 <siprintf>:
 80109d0:	b40e      	push	{r1, r2, r3}
 80109d2:	b500      	push	{lr}
 80109d4:	b09c      	sub	sp, #112	; 0x70
 80109d6:	ab1d      	add	r3, sp, #116	; 0x74
 80109d8:	9002      	str	r0, [sp, #8]
 80109da:	9006      	str	r0, [sp, #24]
 80109dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80109e0:	4809      	ldr	r0, [pc, #36]	; (8010a08 <siprintf+0x38>)
 80109e2:	9107      	str	r1, [sp, #28]
 80109e4:	9104      	str	r1, [sp, #16]
 80109e6:	4909      	ldr	r1, [pc, #36]	; (8010a0c <siprintf+0x3c>)
 80109e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80109ec:	9105      	str	r1, [sp, #20]
 80109ee:	6800      	ldr	r0, [r0, #0]
 80109f0:	9301      	str	r3, [sp, #4]
 80109f2:	a902      	add	r1, sp, #8
 80109f4:	f001 fb68 	bl	80120c8 <_svfiprintf_r>
 80109f8:	9b02      	ldr	r3, [sp, #8]
 80109fa:	2200      	movs	r2, #0
 80109fc:	701a      	strb	r2, [r3, #0]
 80109fe:	b01c      	add	sp, #112	; 0x70
 8010a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a04:	b003      	add	sp, #12
 8010a06:	4770      	bx	lr
 8010a08:	2000001c 	.word	0x2000001c
 8010a0c:	ffff0208 	.word	0xffff0208

08010a10 <quorem>:
 8010a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a14:	6903      	ldr	r3, [r0, #16]
 8010a16:	690c      	ldr	r4, [r1, #16]
 8010a18:	42a3      	cmp	r3, r4
 8010a1a:	4607      	mov	r7, r0
 8010a1c:	f2c0 8081 	blt.w	8010b22 <quorem+0x112>
 8010a20:	3c01      	subs	r4, #1
 8010a22:	f101 0814 	add.w	r8, r1, #20
 8010a26:	f100 0514 	add.w	r5, r0, #20
 8010a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a2e:	9301      	str	r3, [sp, #4]
 8010a30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010a34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a38:	3301      	adds	r3, #1
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010a40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010a44:	fbb2 f6f3 	udiv	r6, r2, r3
 8010a48:	d331      	bcc.n	8010aae <quorem+0x9e>
 8010a4a:	f04f 0e00 	mov.w	lr, #0
 8010a4e:	4640      	mov	r0, r8
 8010a50:	46ac      	mov	ip, r5
 8010a52:	46f2      	mov	sl, lr
 8010a54:	f850 2b04 	ldr.w	r2, [r0], #4
 8010a58:	b293      	uxth	r3, r2
 8010a5a:	fb06 e303 	mla	r3, r6, r3, lr
 8010a5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	ebaa 0303 	sub.w	r3, sl, r3
 8010a68:	f8dc a000 	ldr.w	sl, [ip]
 8010a6c:	0c12      	lsrs	r2, r2, #16
 8010a6e:	fa13 f38a 	uxtah	r3, r3, sl
 8010a72:	fb06 e202 	mla	r2, r6, r2, lr
 8010a76:	9300      	str	r3, [sp, #0]
 8010a78:	9b00      	ldr	r3, [sp, #0]
 8010a7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010a7e:	b292      	uxth	r2, r2
 8010a80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a88:	f8bd 3000 	ldrh.w	r3, [sp]
 8010a8c:	4581      	cmp	r9, r0
 8010a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a92:	f84c 3b04 	str.w	r3, [ip], #4
 8010a96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010a9a:	d2db      	bcs.n	8010a54 <quorem+0x44>
 8010a9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010aa0:	b92b      	cbnz	r3, 8010aae <quorem+0x9e>
 8010aa2:	9b01      	ldr	r3, [sp, #4]
 8010aa4:	3b04      	subs	r3, #4
 8010aa6:	429d      	cmp	r5, r3
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	d32e      	bcc.n	8010b0a <quorem+0xfa>
 8010aac:	613c      	str	r4, [r7, #16]
 8010aae:	4638      	mov	r0, r7
 8010ab0:	f001 f8b6 	bl	8011c20 <__mcmp>
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	db24      	blt.n	8010b02 <quorem+0xf2>
 8010ab8:	3601      	adds	r6, #1
 8010aba:	4628      	mov	r0, r5
 8010abc:	f04f 0c00 	mov.w	ip, #0
 8010ac0:	f858 2b04 	ldr.w	r2, [r8], #4
 8010ac4:	f8d0 e000 	ldr.w	lr, [r0]
 8010ac8:	b293      	uxth	r3, r2
 8010aca:	ebac 0303 	sub.w	r3, ip, r3
 8010ace:	0c12      	lsrs	r2, r2, #16
 8010ad0:	fa13 f38e 	uxtah	r3, r3, lr
 8010ad4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010adc:	b29b      	uxth	r3, r3
 8010ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ae2:	45c1      	cmp	r9, r8
 8010ae4:	f840 3b04 	str.w	r3, [r0], #4
 8010ae8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010aec:	d2e8      	bcs.n	8010ac0 <quorem+0xb0>
 8010aee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010af2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010af6:	b922      	cbnz	r2, 8010b02 <quorem+0xf2>
 8010af8:	3b04      	subs	r3, #4
 8010afa:	429d      	cmp	r5, r3
 8010afc:	461a      	mov	r2, r3
 8010afe:	d30a      	bcc.n	8010b16 <quorem+0x106>
 8010b00:	613c      	str	r4, [r7, #16]
 8010b02:	4630      	mov	r0, r6
 8010b04:	b003      	add	sp, #12
 8010b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b0a:	6812      	ldr	r2, [r2, #0]
 8010b0c:	3b04      	subs	r3, #4
 8010b0e:	2a00      	cmp	r2, #0
 8010b10:	d1cc      	bne.n	8010aac <quorem+0x9c>
 8010b12:	3c01      	subs	r4, #1
 8010b14:	e7c7      	b.n	8010aa6 <quorem+0x96>
 8010b16:	6812      	ldr	r2, [r2, #0]
 8010b18:	3b04      	subs	r3, #4
 8010b1a:	2a00      	cmp	r2, #0
 8010b1c:	d1f0      	bne.n	8010b00 <quorem+0xf0>
 8010b1e:	3c01      	subs	r4, #1
 8010b20:	e7eb      	b.n	8010afa <quorem+0xea>
 8010b22:	2000      	movs	r0, #0
 8010b24:	e7ee      	b.n	8010b04 <quorem+0xf4>
	...

08010b28 <_dtoa_r>:
 8010b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b2c:	ed2d 8b04 	vpush	{d8-d9}
 8010b30:	ec57 6b10 	vmov	r6, r7, d0
 8010b34:	b093      	sub	sp, #76	; 0x4c
 8010b36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010b38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010b3c:	9106      	str	r1, [sp, #24]
 8010b3e:	ee10 aa10 	vmov	sl, s0
 8010b42:	4604      	mov	r4, r0
 8010b44:	9209      	str	r2, [sp, #36]	; 0x24
 8010b46:	930c      	str	r3, [sp, #48]	; 0x30
 8010b48:	46bb      	mov	fp, r7
 8010b4a:	b975      	cbnz	r5, 8010b6a <_dtoa_r+0x42>
 8010b4c:	2010      	movs	r0, #16
 8010b4e:	f000 fddd 	bl	801170c <malloc>
 8010b52:	4602      	mov	r2, r0
 8010b54:	6260      	str	r0, [r4, #36]	; 0x24
 8010b56:	b920      	cbnz	r0, 8010b62 <_dtoa_r+0x3a>
 8010b58:	4ba7      	ldr	r3, [pc, #668]	; (8010df8 <_dtoa_r+0x2d0>)
 8010b5a:	21ea      	movs	r1, #234	; 0xea
 8010b5c:	48a7      	ldr	r0, [pc, #668]	; (8010dfc <_dtoa_r+0x2d4>)
 8010b5e:	f001 fbc3 	bl	80122e8 <__assert_func>
 8010b62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010b66:	6005      	str	r5, [r0, #0]
 8010b68:	60c5      	str	r5, [r0, #12]
 8010b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b6c:	6819      	ldr	r1, [r3, #0]
 8010b6e:	b151      	cbz	r1, 8010b86 <_dtoa_r+0x5e>
 8010b70:	685a      	ldr	r2, [r3, #4]
 8010b72:	604a      	str	r2, [r1, #4]
 8010b74:	2301      	movs	r3, #1
 8010b76:	4093      	lsls	r3, r2
 8010b78:	608b      	str	r3, [r1, #8]
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f000 fe0e 	bl	801179c <_Bfree>
 8010b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b82:	2200      	movs	r2, #0
 8010b84:	601a      	str	r2, [r3, #0]
 8010b86:	1e3b      	subs	r3, r7, #0
 8010b88:	bfaa      	itet	ge
 8010b8a:	2300      	movge	r3, #0
 8010b8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010b90:	f8c8 3000 	strge.w	r3, [r8]
 8010b94:	4b9a      	ldr	r3, [pc, #616]	; (8010e00 <_dtoa_r+0x2d8>)
 8010b96:	bfbc      	itt	lt
 8010b98:	2201      	movlt	r2, #1
 8010b9a:	f8c8 2000 	strlt.w	r2, [r8]
 8010b9e:	ea33 030b 	bics.w	r3, r3, fp
 8010ba2:	d11b      	bne.n	8010bdc <_dtoa_r+0xb4>
 8010ba4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ba6:	f242 730f 	movw	r3, #9999	; 0x270f
 8010baa:	6013      	str	r3, [r2, #0]
 8010bac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010bb0:	4333      	orrs	r3, r6
 8010bb2:	f000 8592 	beq.w	80116da <_dtoa_r+0xbb2>
 8010bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010bb8:	b963      	cbnz	r3, 8010bd4 <_dtoa_r+0xac>
 8010bba:	4b92      	ldr	r3, [pc, #584]	; (8010e04 <_dtoa_r+0x2dc>)
 8010bbc:	e022      	b.n	8010c04 <_dtoa_r+0xdc>
 8010bbe:	4b92      	ldr	r3, [pc, #584]	; (8010e08 <_dtoa_r+0x2e0>)
 8010bc0:	9301      	str	r3, [sp, #4]
 8010bc2:	3308      	adds	r3, #8
 8010bc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010bc6:	6013      	str	r3, [r2, #0]
 8010bc8:	9801      	ldr	r0, [sp, #4]
 8010bca:	b013      	add	sp, #76	; 0x4c
 8010bcc:	ecbd 8b04 	vpop	{d8-d9}
 8010bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd4:	4b8b      	ldr	r3, [pc, #556]	; (8010e04 <_dtoa_r+0x2dc>)
 8010bd6:	9301      	str	r3, [sp, #4]
 8010bd8:	3303      	adds	r3, #3
 8010bda:	e7f3      	b.n	8010bc4 <_dtoa_r+0x9c>
 8010bdc:	2200      	movs	r2, #0
 8010bde:	2300      	movs	r3, #0
 8010be0:	4650      	mov	r0, sl
 8010be2:	4659      	mov	r1, fp
 8010be4:	f7ef ff70 	bl	8000ac8 <__aeabi_dcmpeq>
 8010be8:	ec4b ab19 	vmov	d9, sl, fp
 8010bec:	4680      	mov	r8, r0
 8010bee:	b158      	cbz	r0, 8010c08 <_dtoa_r+0xe0>
 8010bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	6013      	str	r3, [r2, #0]
 8010bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	f000 856b 	beq.w	80116d4 <_dtoa_r+0xbac>
 8010bfe:	4883      	ldr	r0, [pc, #524]	; (8010e0c <_dtoa_r+0x2e4>)
 8010c00:	6018      	str	r0, [r3, #0]
 8010c02:	1e43      	subs	r3, r0, #1
 8010c04:	9301      	str	r3, [sp, #4]
 8010c06:	e7df      	b.n	8010bc8 <_dtoa_r+0xa0>
 8010c08:	ec4b ab10 	vmov	d0, sl, fp
 8010c0c:	aa10      	add	r2, sp, #64	; 0x40
 8010c0e:	a911      	add	r1, sp, #68	; 0x44
 8010c10:	4620      	mov	r0, r4
 8010c12:	f001 f8ab 	bl	8011d6c <__d2b>
 8010c16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010c1a:	ee08 0a10 	vmov	s16, r0
 8010c1e:	2d00      	cmp	r5, #0
 8010c20:	f000 8084 	beq.w	8010d2c <_dtoa_r+0x204>
 8010c24:	ee19 3a90 	vmov	r3, s19
 8010c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010c30:	4656      	mov	r6, sl
 8010c32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010c36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010c3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010c3e:	4b74      	ldr	r3, [pc, #464]	; (8010e10 <_dtoa_r+0x2e8>)
 8010c40:	2200      	movs	r2, #0
 8010c42:	4630      	mov	r0, r6
 8010c44:	4639      	mov	r1, r7
 8010c46:	f7ef fb1f 	bl	8000288 <__aeabi_dsub>
 8010c4a:	a365      	add	r3, pc, #404	; (adr r3, 8010de0 <_dtoa_r+0x2b8>)
 8010c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c50:	f7ef fcd2 	bl	80005f8 <__aeabi_dmul>
 8010c54:	a364      	add	r3, pc, #400	; (adr r3, 8010de8 <_dtoa_r+0x2c0>)
 8010c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5a:	f7ef fb17 	bl	800028c <__adddf3>
 8010c5e:	4606      	mov	r6, r0
 8010c60:	4628      	mov	r0, r5
 8010c62:	460f      	mov	r7, r1
 8010c64:	f7ef fc5e 	bl	8000524 <__aeabi_i2d>
 8010c68:	a361      	add	r3, pc, #388	; (adr r3, 8010df0 <_dtoa_r+0x2c8>)
 8010c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6e:	f7ef fcc3 	bl	80005f8 <__aeabi_dmul>
 8010c72:	4602      	mov	r2, r0
 8010c74:	460b      	mov	r3, r1
 8010c76:	4630      	mov	r0, r6
 8010c78:	4639      	mov	r1, r7
 8010c7a:	f7ef fb07 	bl	800028c <__adddf3>
 8010c7e:	4606      	mov	r6, r0
 8010c80:	460f      	mov	r7, r1
 8010c82:	f7ef ff69 	bl	8000b58 <__aeabi_d2iz>
 8010c86:	2200      	movs	r2, #0
 8010c88:	9000      	str	r0, [sp, #0]
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	4630      	mov	r0, r6
 8010c8e:	4639      	mov	r1, r7
 8010c90:	f7ef ff24 	bl	8000adc <__aeabi_dcmplt>
 8010c94:	b150      	cbz	r0, 8010cac <_dtoa_r+0x184>
 8010c96:	9800      	ldr	r0, [sp, #0]
 8010c98:	f7ef fc44 	bl	8000524 <__aeabi_i2d>
 8010c9c:	4632      	mov	r2, r6
 8010c9e:	463b      	mov	r3, r7
 8010ca0:	f7ef ff12 	bl	8000ac8 <__aeabi_dcmpeq>
 8010ca4:	b910      	cbnz	r0, 8010cac <_dtoa_r+0x184>
 8010ca6:	9b00      	ldr	r3, [sp, #0]
 8010ca8:	3b01      	subs	r3, #1
 8010caa:	9300      	str	r3, [sp, #0]
 8010cac:	9b00      	ldr	r3, [sp, #0]
 8010cae:	2b16      	cmp	r3, #22
 8010cb0:	d85a      	bhi.n	8010d68 <_dtoa_r+0x240>
 8010cb2:	9a00      	ldr	r2, [sp, #0]
 8010cb4:	4b57      	ldr	r3, [pc, #348]	; (8010e14 <_dtoa_r+0x2ec>)
 8010cb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cbe:	ec51 0b19 	vmov	r0, r1, d9
 8010cc2:	f7ef ff0b 	bl	8000adc <__aeabi_dcmplt>
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	d050      	beq.n	8010d6c <_dtoa_r+0x244>
 8010cca:	9b00      	ldr	r3, [sp, #0]
 8010ccc:	3b01      	subs	r3, #1
 8010cce:	9300      	str	r3, [sp, #0]
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8010cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010cd6:	1b5d      	subs	r5, r3, r5
 8010cd8:	1e6b      	subs	r3, r5, #1
 8010cda:	9305      	str	r3, [sp, #20]
 8010cdc:	bf45      	ittet	mi
 8010cde:	f1c5 0301 	rsbmi	r3, r5, #1
 8010ce2:	9304      	strmi	r3, [sp, #16]
 8010ce4:	2300      	movpl	r3, #0
 8010ce6:	2300      	movmi	r3, #0
 8010ce8:	bf4c      	ite	mi
 8010cea:	9305      	strmi	r3, [sp, #20]
 8010cec:	9304      	strpl	r3, [sp, #16]
 8010cee:	9b00      	ldr	r3, [sp, #0]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	db3d      	blt.n	8010d70 <_dtoa_r+0x248>
 8010cf4:	9b05      	ldr	r3, [sp, #20]
 8010cf6:	9a00      	ldr	r2, [sp, #0]
 8010cf8:	920a      	str	r2, [sp, #40]	; 0x28
 8010cfa:	4413      	add	r3, r2
 8010cfc:	9305      	str	r3, [sp, #20]
 8010cfe:	2300      	movs	r3, #0
 8010d00:	9307      	str	r3, [sp, #28]
 8010d02:	9b06      	ldr	r3, [sp, #24]
 8010d04:	2b09      	cmp	r3, #9
 8010d06:	f200 8089 	bhi.w	8010e1c <_dtoa_r+0x2f4>
 8010d0a:	2b05      	cmp	r3, #5
 8010d0c:	bfc4      	itt	gt
 8010d0e:	3b04      	subgt	r3, #4
 8010d10:	9306      	strgt	r3, [sp, #24]
 8010d12:	9b06      	ldr	r3, [sp, #24]
 8010d14:	f1a3 0302 	sub.w	r3, r3, #2
 8010d18:	bfcc      	ite	gt
 8010d1a:	2500      	movgt	r5, #0
 8010d1c:	2501      	movle	r5, #1
 8010d1e:	2b03      	cmp	r3, #3
 8010d20:	f200 8087 	bhi.w	8010e32 <_dtoa_r+0x30a>
 8010d24:	e8df f003 	tbb	[pc, r3]
 8010d28:	59383a2d 	.word	0x59383a2d
 8010d2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010d30:	441d      	add	r5, r3
 8010d32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010d36:	2b20      	cmp	r3, #32
 8010d38:	bfc1      	itttt	gt
 8010d3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010d3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010d42:	fa0b f303 	lslgt.w	r3, fp, r3
 8010d46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010d4a:	bfda      	itte	le
 8010d4c:	f1c3 0320 	rsble	r3, r3, #32
 8010d50:	fa06 f003 	lslle.w	r0, r6, r3
 8010d54:	4318      	orrgt	r0, r3
 8010d56:	f7ef fbd5 	bl	8000504 <__aeabi_ui2d>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	4606      	mov	r6, r0
 8010d5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010d62:	3d01      	subs	r5, #1
 8010d64:	930e      	str	r3, [sp, #56]	; 0x38
 8010d66:	e76a      	b.n	8010c3e <_dtoa_r+0x116>
 8010d68:	2301      	movs	r3, #1
 8010d6a:	e7b2      	b.n	8010cd2 <_dtoa_r+0x1aa>
 8010d6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8010d6e:	e7b1      	b.n	8010cd4 <_dtoa_r+0x1ac>
 8010d70:	9b04      	ldr	r3, [sp, #16]
 8010d72:	9a00      	ldr	r2, [sp, #0]
 8010d74:	1a9b      	subs	r3, r3, r2
 8010d76:	9304      	str	r3, [sp, #16]
 8010d78:	4253      	negs	r3, r2
 8010d7a:	9307      	str	r3, [sp, #28]
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8010d80:	e7bf      	b.n	8010d02 <_dtoa_r+0x1da>
 8010d82:	2300      	movs	r3, #0
 8010d84:	9308      	str	r3, [sp, #32]
 8010d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	dc55      	bgt.n	8010e38 <_dtoa_r+0x310>
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010d92:	461a      	mov	r2, r3
 8010d94:	9209      	str	r2, [sp, #36]	; 0x24
 8010d96:	e00c      	b.n	8010db2 <_dtoa_r+0x28a>
 8010d98:	2301      	movs	r3, #1
 8010d9a:	e7f3      	b.n	8010d84 <_dtoa_r+0x25c>
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010da0:	9308      	str	r3, [sp, #32]
 8010da2:	9b00      	ldr	r3, [sp, #0]
 8010da4:	4413      	add	r3, r2
 8010da6:	9302      	str	r3, [sp, #8]
 8010da8:	3301      	adds	r3, #1
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	9303      	str	r3, [sp, #12]
 8010dae:	bfb8      	it	lt
 8010db0:	2301      	movlt	r3, #1
 8010db2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010db4:	2200      	movs	r2, #0
 8010db6:	6042      	str	r2, [r0, #4]
 8010db8:	2204      	movs	r2, #4
 8010dba:	f102 0614 	add.w	r6, r2, #20
 8010dbe:	429e      	cmp	r6, r3
 8010dc0:	6841      	ldr	r1, [r0, #4]
 8010dc2:	d93d      	bls.n	8010e40 <_dtoa_r+0x318>
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	f000 fca9 	bl	801171c <_Balloc>
 8010dca:	9001      	str	r0, [sp, #4]
 8010dcc:	2800      	cmp	r0, #0
 8010dce:	d13b      	bne.n	8010e48 <_dtoa_r+0x320>
 8010dd0:	4b11      	ldr	r3, [pc, #68]	; (8010e18 <_dtoa_r+0x2f0>)
 8010dd2:	4602      	mov	r2, r0
 8010dd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010dd8:	e6c0      	b.n	8010b5c <_dtoa_r+0x34>
 8010dda:	2301      	movs	r3, #1
 8010ddc:	e7df      	b.n	8010d9e <_dtoa_r+0x276>
 8010dde:	bf00      	nop
 8010de0:	636f4361 	.word	0x636f4361
 8010de4:	3fd287a7 	.word	0x3fd287a7
 8010de8:	8b60c8b3 	.word	0x8b60c8b3
 8010dec:	3fc68a28 	.word	0x3fc68a28
 8010df0:	509f79fb 	.word	0x509f79fb
 8010df4:	3fd34413 	.word	0x3fd34413
 8010df8:	08015575 	.word	0x08015575
 8010dfc:	0801558c 	.word	0x0801558c
 8010e00:	7ff00000 	.word	0x7ff00000
 8010e04:	08015571 	.word	0x08015571
 8010e08:	08015568 	.word	0x08015568
 8010e0c:	08015545 	.word	0x08015545
 8010e10:	3ff80000 	.word	0x3ff80000
 8010e14:	08015680 	.word	0x08015680
 8010e18:	080155e7 	.word	0x080155e7
 8010e1c:	2501      	movs	r5, #1
 8010e1e:	2300      	movs	r3, #0
 8010e20:	9306      	str	r3, [sp, #24]
 8010e22:	9508      	str	r5, [sp, #32]
 8010e24:	f04f 33ff 	mov.w	r3, #4294967295
 8010e28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	2312      	movs	r3, #18
 8010e30:	e7b0      	b.n	8010d94 <_dtoa_r+0x26c>
 8010e32:	2301      	movs	r3, #1
 8010e34:	9308      	str	r3, [sp, #32]
 8010e36:	e7f5      	b.n	8010e24 <_dtoa_r+0x2fc>
 8010e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010e3e:	e7b8      	b.n	8010db2 <_dtoa_r+0x28a>
 8010e40:	3101      	adds	r1, #1
 8010e42:	6041      	str	r1, [r0, #4]
 8010e44:	0052      	lsls	r2, r2, #1
 8010e46:	e7b8      	b.n	8010dba <_dtoa_r+0x292>
 8010e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e4a:	9a01      	ldr	r2, [sp, #4]
 8010e4c:	601a      	str	r2, [r3, #0]
 8010e4e:	9b03      	ldr	r3, [sp, #12]
 8010e50:	2b0e      	cmp	r3, #14
 8010e52:	f200 809d 	bhi.w	8010f90 <_dtoa_r+0x468>
 8010e56:	2d00      	cmp	r5, #0
 8010e58:	f000 809a 	beq.w	8010f90 <_dtoa_r+0x468>
 8010e5c:	9b00      	ldr	r3, [sp, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	dd32      	ble.n	8010ec8 <_dtoa_r+0x3a0>
 8010e62:	4ab7      	ldr	r2, [pc, #732]	; (8011140 <_dtoa_r+0x618>)
 8010e64:	f003 030f 	and.w	r3, r3, #15
 8010e68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010e6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e70:	9b00      	ldr	r3, [sp, #0]
 8010e72:	05d8      	lsls	r0, r3, #23
 8010e74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010e78:	d516      	bpl.n	8010ea8 <_dtoa_r+0x380>
 8010e7a:	4bb2      	ldr	r3, [pc, #712]	; (8011144 <_dtoa_r+0x61c>)
 8010e7c:	ec51 0b19 	vmov	r0, r1, d9
 8010e80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010e84:	f7ef fce2 	bl	800084c <__aeabi_ddiv>
 8010e88:	f007 070f 	and.w	r7, r7, #15
 8010e8c:	4682      	mov	sl, r0
 8010e8e:	468b      	mov	fp, r1
 8010e90:	2503      	movs	r5, #3
 8010e92:	4eac      	ldr	r6, [pc, #688]	; (8011144 <_dtoa_r+0x61c>)
 8010e94:	b957      	cbnz	r7, 8010eac <_dtoa_r+0x384>
 8010e96:	4642      	mov	r2, r8
 8010e98:	464b      	mov	r3, r9
 8010e9a:	4650      	mov	r0, sl
 8010e9c:	4659      	mov	r1, fp
 8010e9e:	f7ef fcd5 	bl	800084c <__aeabi_ddiv>
 8010ea2:	4682      	mov	sl, r0
 8010ea4:	468b      	mov	fp, r1
 8010ea6:	e028      	b.n	8010efa <_dtoa_r+0x3d2>
 8010ea8:	2502      	movs	r5, #2
 8010eaa:	e7f2      	b.n	8010e92 <_dtoa_r+0x36a>
 8010eac:	07f9      	lsls	r1, r7, #31
 8010eae:	d508      	bpl.n	8010ec2 <_dtoa_r+0x39a>
 8010eb0:	4640      	mov	r0, r8
 8010eb2:	4649      	mov	r1, r9
 8010eb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010eb8:	f7ef fb9e 	bl	80005f8 <__aeabi_dmul>
 8010ebc:	3501      	adds	r5, #1
 8010ebe:	4680      	mov	r8, r0
 8010ec0:	4689      	mov	r9, r1
 8010ec2:	107f      	asrs	r7, r7, #1
 8010ec4:	3608      	adds	r6, #8
 8010ec6:	e7e5      	b.n	8010e94 <_dtoa_r+0x36c>
 8010ec8:	f000 809b 	beq.w	8011002 <_dtoa_r+0x4da>
 8010ecc:	9b00      	ldr	r3, [sp, #0]
 8010ece:	4f9d      	ldr	r7, [pc, #628]	; (8011144 <_dtoa_r+0x61c>)
 8010ed0:	425e      	negs	r6, r3
 8010ed2:	4b9b      	ldr	r3, [pc, #620]	; (8011140 <_dtoa_r+0x618>)
 8010ed4:	f006 020f 	and.w	r2, r6, #15
 8010ed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee0:	ec51 0b19 	vmov	r0, r1, d9
 8010ee4:	f7ef fb88 	bl	80005f8 <__aeabi_dmul>
 8010ee8:	1136      	asrs	r6, r6, #4
 8010eea:	4682      	mov	sl, r0
 8010eec:	468b      	mov	fp, r1
 8010eee:	2300      	movs	r3, #0
 8010ef0:	2502      	movs	r5, #2
 8010ef2:	2e00      	cmp	r6, #0
 8010ef4:	d17a      	bne.n	8010fec <_dtoa_r+0x4c4>
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d1d3      	bne.n	8010ea2 <_dtoa_r+0x37a>
 8010efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	f000 8082 	beq.w	8011006 <_dtoa_r+0x4de>
 8010f02:	4b91      	ldr	r3, [pc, #580]	; (8011148 <_dtoa_r+0x620>)
 8010f04:	2200      	movs	r2, #0
 8010f06:	4650      	mov	r0, sl
 8010f08:	4659      	mov	r1, fp
 8010f0a:	f7ef fde7 	bl	8000adc <__aeabi_dcmplt>
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	d079      	beq.n	8011006 <_dtoa_r+0x4de>
 8010f12:	9b03      	ldr	r3, [sp, #12]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d076      	beq.n	8011006 <_dtoa_r+0x4de>
 8010f18:	9b02      	ldr	r3, [sp, #8]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	dd36      	ble.n	8010f8c <_dtoa_r+0x464>
 8010f1e:	9b00      	ldr	r3, [sp, #0]
 8010f20:	4650      	mov	r0, sl
 8010f22:	4659      	mov	r1, fp
 8010f24:	1e5f      	subs	r7, r3, #1
 8010f26:	2200      	movs	r2, #0
 8010f28:	4b88      	ldr	r3, [pc, #544]	; (801114c <_dtoa_r+0x624>)
 8010f2a:	f7ef fb65 	bl	80005f8 <__aeabi_dmul>
 8010f2e:	9e02      	ldr	r6, [sp, #8]
 8010f30:	4682      	mov	sl, r0
 8010f32:	468b      	mov	fp, r1
 8010f34:	3501      	adds	r5, #1
 8010f36:	4628      	mov	r0, r5
 8010f38:	f7ef faf4 	bl	8000524 <__aeabi_i2d>
 8010f3c:	4652      	mov	r2, sl
 8010f3e:	465b      	mov	r3, fp
 8010f40:	f7ef fb5a 	bl	80005f8 <__aeabi_dmul>
 8010f44:	4b82      	ldr	r3, [pc, #520]	; (8011150 <_dtoa_r+0x628>)
 8010f46:	2200      	movs	r2, #0
 8010f48:	f7ef f9a0 	bl	800028c <__adddf3>
 8010f4c:	46d0      	mov	r8, sl
 8010f4e:	46d9      	mov	r9, fp
 8010f50:	4682      	mov	sl, r0
 8010f52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010f56:	2e00      	cmp	r6, #0
 8010f58:	d158      	bne.n	801100c <_dtoa_r+0x4e4>
 8010f5a:	4b7e      	ldr	r3, [pc, #504]	; (8011154 <_dtoa_r+0x62c>)
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	4640      	mov	r0, r8
 8010f60:	4649      	mov	r1, r9
 8010f62:	f7ef f991 	bl	8000288 <__aeabi_dsub>
 8010f66:	4652      	mov	r2, sl
 8010f68:	465b      	mov	r3, fp
 8010f6a:	4680      	mov	r8, r0
 8010f6c:	4689      	mov	r9, r1
 8010f6e:	f7ef fdd3 	bl	8000b18 <__aeabi_dcmpgt>
 8010f72:	2800      	cmp	r0, #0
 8010f74:	f040 8295 	bne.w	80114a2 <_dtoa_r+0x97a>
 8010f78:	4652      	mov	r2, sl
 8010f7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010f7e:	4640      	mov	r0, r8
 8010f80:	4649      	mov	r1, r9
 8010f82:	f7ef fdab 	bl	8000adc <__aeabi_dcmplt>
 8010f86:	2800      	cmp	r0, #0
 8010f88:	f040 8289 	bne.w	801149e <_dtoa_r+0x976>
 8010f8c:	ec5b ab19 	vmov	sl, fp, d9
 8010f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	f2c0 8148 	blt.w	8011228 <_dtoa_r+0x700>
 8010f98:	9a00      	ldr	r2, [sp, #0]
 8010f9a:	2a0e      	cmp	r2, #14
 8010f9c:	f300 8144 	bgt.w	8011228 <_dtoa_r+0x700>
 8010fa0:	4b67      	ldr	r3, [pc, #412]	; (8011140 <_dtoa_r+0x618>)
 8010fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fa6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	f280 80d5 	bge.w	801115c <_dtoa_r+0x634>
 8010fb2:	9b03      	ldr	r3, [sp, #12]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	f300 80d1 	bgt.w	801115c <_dtoa_r+0x634>
 8010fba:	f040 826f 	bne.w	801149c <_dtoa_r+0x974>
 8010fbe:	4b65      	ldr	r3, [pc, #404]	; (8011154 <_dtoa_r+0x62c>)
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	4640      	mov	r0, r8
 8010fc4:	4649      	mov	r1, r9
 8010fc6:	f7ef fb17 	bl	80005f8 <__aeabi_dmul>
 8010fca:	4652      	mov	r2, sl
 8010fcc:	465b      	mov	r3, fp
 8010fce:	f7ef fd99 	bl	8000b04 <__aeabi_dcmpge>
 8010fd2:	9e03      	ldr	r6, [sp, #12]
 8010fd4:	4637      	mov	r7, r6
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	f040 8245 	bne.w	8011466 <_dtoa_r+0x93e>
 8010fdc:	9d01      	ldr	r5, [sp, #4]
 8010fde:	2331      	movs	r3, #49	; 0x31
 8010fe0:	f805 3b01 	strb.w	r3, [r5], #1
 8010fe4:	9b00      	ldr	r3, [sp, #0]
 8010fe6:	3301      	adds	r3, #1
 8010fe8:	9300      	str	r3, [sp, #0]
 8010fea:	e240      	b.n	801146e <_dtoa_r+0x946>
 8010fec:	07f2      	lsls	r2, r6, #31
 8010fee:	d505      	bpl.n	8010ffc <_dtoa_r+0x4d4>
 8010ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ff4:	f7ef fb00 	bl	80005f8 <__aeabi_dmul>
 8010ff8:	3501      	adds	r5, #1
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	1076      	asrs	r6, r6, #1
 8010ffe:	3708      	adds	r7, #8
 8011000:	e777      	b.n	8010ef2 <_dtoa_r+0x3ca>
 8011002:	2502      	movs	r5, #2
 8011004:	e779      	b.n	8010efa <_dtoa_r+0x3d2>
 8011006:	9f00      	ldr	r7, [sp, #0]
 8011008:	9e03      	ldr	r6, [sp, #12]
 801100a:	e794      	b.n	8010f36 <_dtoa_r+0x40e>
 801100c:	9901      	ldr	r1, [sp, #4]
 801100e:	4b4c      	ldr	r3, [pc, #304]	; (8011140 <_dtoa_r+0x618>)
 8011010:	4431      	add	r1, r6
 8011012:	910d      	str	r1, [sp, #52]	; 0x34
 8011014:	9908      	ldr	r1, [sp, #32]
 8011016:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801101a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801101e:	2900      	cmp	r1, #0
 8011020:	d043      	beq.n	80110aa <_dtoa_r+0x582>
 8011022:	494d      	ldr	r1, [pc, #308]	; (8011158 <_dtoa_r+0x630>)
 8011024:	2000      	movs	r0, #0
 8011026:	f7ef fc11 	bl	800084c <__aeabi_ddiv>
 801102a:	4652      	mov	r2, sl
 801102c:	465b      	mov	r3, fp
 801102e:	f7ef f92b 	bl	8000288 <__aeabi_dsub>
 8011032:	9d01      	ldr	r5, [sp, #4]
 8011034:	4682      	mov	sl, r0
 8011036:	468b      	mov	fp, r1
 8011038:	4649      	mov	r1, r9
 801103a:	4640      	mov	r0, r8
 801103c:	f7ef fd8c 	bl	8000b58 <__aeabi_d2iz>
 8011040:	4606      	mov	r6, r0
 8011042:	f7ef fa6f 	bl	8000524 <__aeabi_i2d>
 8011046:	4602      	mov	r2, r0
 8011048:	460b      	mov	r3, r1
 801104a:	4640      	mov	r0, r8
 801104c:	4649      	mov	r1, r9
 801104e:	f7ef f91b 	bl	8000288 <__aeabi_dsub>
 8011052:	3630      	adds	r6, #48	; 0x30
 8011054:	f805 6b01 	strb.w	r6, [r5], #1
 8011058:	4652      	mov	r2, sl
 801105a:	465b      	mov	r3, fp
 801105c:	4680      	mov	r8, r0
 801105e:	4689      	mov	r9, r1
 8011060:	f7ef fd3c 	bl	8000adc <__aeabi_dcmplt>
 8011064:	2800      	cmp	r0, #0
 8011066:	d163      	bne.n	8011130 <_dtoa_r+0x608>
 8011068:	4642      	mov	r2, r8
 801106a:	464b      	mov	r3, r9
 801106c:	4936      	ldr	r1, [pc, #216]	; (8011148 <_dtoa_r+0x620>)
 801106e:	2000      	movs	r0, #0
 8011070:	f7ef f90a 	bl	8000288 <__aeabi_dsub>
 8011074:	4652      	mov	r2, sl
 8011076:	465b      	mov	r3, fp
 8011078:	f7ef fd30 	bl	8000adc <__aeabi_dcmplt>
 801107c:	2800      	cmp	r0, #0
 801107e:	f040 80b5 	bne.w	80111ec <_dtoa_r+0x6c4>
 8011082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011084:	429d      	cmp	r5, r3
 8011086:	d081      	beq.n	8010f8c <_dtoa_r+0x464>
 8011088:	4b30      	ldr	r3, [pc, #192]	; (801114c <_dtoa_r+0x624>)
 801108a:	2200      	movs	r2, #0
 801108c:	4650      	mov	r0, sl
 801108e:	4659      	mov	r1, fp
 8011090:	f7ef fab2 	bl	80005f8 <__aeabi_dmul>
 8011094:	4b2d      	ldr	r3, [pc, #180]	; (801114c <_dtoa_r+0x624>)
 8011096:	4682      	mov	sl, r0
 8011098:	468b      	mov	fp, r1
 801109a:	4640      	mov	r0, r8
 801109c:	4649      	mov	r1, r9
 801109e:	2200      	movs	r2, #0
 80110a0:	f7ef faaa 	bl	80005f8 <__aeabi_dmul>
 80110a4:	4680      	mov	r8, r0
 80110a6:	4689      	mov	r9, r1
 80110a8:	e7c6      	b.n	8011038 <_dtoa_r+0x510>
 80110aa:	4650      	mov	r0, sl
 80110ac:	4659      	mov	r1, fp
 80110ae:	f7ef faa3 	bl	80005f8 <__aeabi_dmul>
 80110b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110b4:	9d01      	ldr	r5, [sp, #4]
 80110b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80110b8:	4682      	mov	sl, r0
 80110ba:	468b      	mov	fp, r1
 80110bc:	4649      	mov	r1, r9
 80110be:	4640      	mov	r0, r8
 80110c0:	f7ef fd4a 	bl	8000b58 <__aeabi_d2iz>
 80110c4:	4606      	mov	r6, r0
 80110c6:	f7ef fa2d 	bl	8000524 <__aeabi_i2d>
 80110ca:	3630      	adds	r6, #48	; 0x30
 80110cc:	4602      	mov	r2, r0
 80110ce:	460b      	mov	r3, r1
 80110d0:	4640      	mov	r0, r8
 80110d2:	4649      	mov	r1, r9
 80110d4:	f7ef f8d8 	bl	8000288 <__aeabi_dsub>
 80110d8:	f805 6b01 	strb.w	r6, [r5], #1
 80110dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110de:	429d      	cmp	r5, r3
 80110e0:	4680      	mov	r8, r0
 80110e2:	4689      	mov	r9, r1
 80110e4:	f04f 0200 	mov.w	r2, #0
 80110e8:	d124      	bne.n	8011134 <_dtoa_r+0x60c>
 80110ea:	4b1b      	ldr	r3, [pc, #108]	; (8011158 <_dtoa_r+0x630>)
 80110ec:	4650      	mov	r0, sl
 80110ee:	4659      	mov	r1, fp
 80110f0:	f7ef f8cc 	bl	800028c <__adddf3>
 80110f4:	4602      	mov	r2, r0
 80110f6:	460b      	mov	r3, r1
 80110f8:	4640      	mov	r0, r8
 80110fa:	4649      	mov	r1, r9
 80110fc:	f7ef fd0c 	bl	8000b18 <__aeabi_dcmpgt>
 8011100:	2800      	cmp	r0, #0
 8011102:	d173      	bne.n	80111ec <_dtoa_r+0x6c4>
 8011104:	4652      	mov	r2, sl
 8011106:	465b      	mov	r3, fp
 8011108:	4913      	ldr	r1, [pc, #76]	; (8011158 <_dtoa_r+0x630>)
 801110a:	2000      	movs	r0, #0
 801110c:	f7ef f8bc 	bl	8000288 <__aeabi_dsub>
 8011110:	4602      	mov	r2, r0
 8011112:	460b      	mov	r3, r1
 8011114:	4640      	mov	r0, r8
 8011116:	4649      	mov	r1, r9
 8011118:	f7ef fce0 	bl	8000adc <__aeabi_dcmplt>
 801111c:	2800      	cmp	r0, #0
 801111e:	f43f af35 	beq.w	8010f8c <_dtoa_r+0x464>
 8011122:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011124:	1e6b      	subs	r3, r5, #1
 8011126:	930f      	str	r3, [sp, #60]	; 0x3c
 8011128:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801112c:	2b30      	cmp	r3, #48	; 0x30
 801112e:	d0f8      	beq.n	8011122 <_dtoa_r+0x5fa>
 8011130:	9700      	str	r7, [sp, #0]
 8011132:	e049      	b.n	80111c8 <_dtoa_r+0x6a0>
 8011134:	4b05      	ldr	r3, [pc, #20]	; (801114c <_dtoa_r+0x624>)
 8011136:	f7ef fa5f 	bl	80005f8 <__aeabi_dmul>
 801113a:	4680      	mov	r8, r0
 801113c:	4689      	mov	r9, r1
 801113e:	e7bd      	b.n	80110bc <_dtoa_r+0x594>
 8011140:	08015680 	.word	0x08015680
 8011144:	08015658 	.word	0x08015658
 8011148:	3ff00000 	.word	0x3ff00000
 801114c:	40240000 	.word	0x40240000
 8011150:	401c0000 	.word	0x401c0000
 8011154:	40140000 	.word	0x40140000
 8011158:	3fe00000 	.word	0x3fe00000
 801115c:	9d01      	ldr	r5, [sp, #4]
 801115e:	4656      	mov	r6, sl
 8011160:	465f      	mov	r7, fp
 8011162:	4642      	mov	r2, r8
 8011164:	464b      	mov	r3, r9
 8011166:	4630      	mov	r0, r6
 8011168:	4639      	mov	r1, r7
 801116a:	f7ef fb6f 	bl	800084c <__aeabi_ddiv>
 801116e:	f7ef fcf3 	bl	8000b58 <__aeabi_d2iz>
 8011172:	4682      	mov	sl, r0
 8011174:	f7ef f9d6 	bl	8000524 <__aeabi_i2d>
 8011178:	4642      	mov	r2, r8
 801117a:	464b      	mov	r3, r9
 801117c:	f7ef fa3c 	bl	80005f8 <__aeabi_dmul>
 8011180:	4602      	mov	r2, r0
 8011182:	460b      	mov	r3, r1
 8011184:	4630      	mov	r0, r6
 8011186:	4639      	mov	r1, r7
 8011188:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801118c:	f7ef f87c 	bl	8000288 <__aeabi_dsub>
 8011190:	f805 6b01 	strb.w	r6, [r5], #1
 8011194:	9e01      	ldr	r6, [sp, #4]
 8011196:	9f03      	ldr	r7, [sp, #12]
 8011198:	1bae      	subs	r6, r5, r6
 801119a:	42b7      	cmp	r7, r6
 801119c:	4602      	mov	r2, r0
 801119e:	460b      	mov	r3, r1
 80111a0:	d135      	bne.n	801120e <_dtoa_r+0x6e6>
 80111a2:	f7ef f873 	bl	800028c <__adddf3>
 80111a6:	4642      	mov	r2, r8
 80111a8:	464b      	mov	r3, r9
 80111aa:	4606      	mov	r6, r0
 80111ac:	460f      	mov	r7, r1
 80111ae:	f7ef fcb3 	bl	8000b18 <__aeabi_dcmpgt>
 80111b2:	b9d0      	cbnz	r0, 80111ea <_dtoa_r+0x6c2>
 80111b4:	4642      	mov	r2, r8
 80111b6:	464b      	mov	r3, r9
 80111b8:	4630      	mov	r0, r6
 80111ba:	4639      	mov	r1, r7
 80111bc:	f7ef fc84 	bl	8000ac8 <__aeabi_dcmpeq>
 80111c0:	b110      	cbz	r0, 80111c8 <_dtoa_r+0x6a0>
 80111c2:	f01a 0f01 	tst.w	sl, #1
 80111c6:	d110      	bne.n	80111ea <_dtoa_r+0x6c2>
 80111c8:	4620      	mov	r0, r4
 80111ca:	ee18 1a10 	vmov	r1, s16
 80111ce:	f000 fae5 	bl	801179c <_Bfree>
 80111d2:	2300      	movs	r3, #0
 80111d4:	9800      	ldr	r0, [sp, #0]
 80111d6:	702b      	strb	r3, [r5, #0]
 80111d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111da:	3001      	adds	r0, #1
 80111dc:	6018      	str	r0, [r3, #0]
 80111de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	f43f acf1 	beq.w	8010bc8 <_dtoa_r+0xa0>
 80111e6:	601d      	str	r5, [r3, #0]
 80111e8:	e4ee      	b.n	8010bc8 <_dtoa_r+0xa0>
 80111ea:	9f00      	ldr	r7, [sp, #0]
 80111ec:	462b      	mov	r3, r5
 80111ee:	461d      	mov	r5, r3
 80111f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80111f4:	2a39      	cmp	r2, #57	; 0x39
 80111f6:	d106      	bne.n	8011206 <_dtoa_r+0x6de>
 80111f8:	9a01      	ldr	r2, [sp, #4]
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d1f7      	bne.n	80111ee <_dtoa_r+0x6c6>
 80111fe:	9901      	ldr	r1, [sp, #4]
 8011200:	2230      	movs	r2, #48	; 0x30
 8011202:	3701      	adds	r7, #1
 8011204:	700a      	strb	r2, [r1, #0]
 8011206:	781a      	ldrb	r2, [r3, #0]
 8011208:	3201      	adds	r2, #1
 801120a:	701a      	strb	r2, [r3, #0]
 801120c:	e790      	b.n	8011130 <_dtoa_r+0x608>
 801120e:	4ba6      	ldr	r3, [pc, #664]	; (80114a8 <_dtoa_r+0x980>)
 8011210:	2200      	movs	r2, #0
 8011212:	f7ef f9f1 	bl	80005f8 <__aeabi_dmul>
 8011216:	2200      	movs	r2, #0
 8011218:	2300      	movs	r3, #0
 801121a:	4606      	mov	r6, r0
 801121c:	460f      	mov	r7, r1
 801121e:	f7ef fc53 	bl	8000ac8 <__aeabi_dcmpeq>
 8011222:	2800      	cmp	r0, #0
 8011224:	d09d      	beq.n	8011162 <_dtoa_r+0x63a>
 8011226:	e7cf      	b.n	80111c8 <_dtoa_r+0x6a0>
 8011228:	9a08      	ldr	r2, [sp, #32]
 801122a:	2a00      	cmp	r2, #0
 801122c:	f000 80d7 	beq.w	80113de <_dtoa_r+0x8b6>
 8011230:	9a06      	ldr	r2, [sp, #24]
 8011232:	2a01      	cmp	r2, #1
 8011234:	f300 80ba 	bgt.w	80113ac <_dtoa_r+0x884>
 8011238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801123a:	2a00      	cmp	r2, #0
 801123c:	f000 80b2 	beq.w	80113a4 <_dtoa_r+0x87c>
 8011240:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011244:	9e07      	ldr	r6, [sp, #28]
 8011246:	9d04      	ldr	r5, [sp, #16]
 8011248:	9a04      	ldr	r2, [sp, #16]
 801124a:	441a      	add	r2, r3
 801124c:	9204      	str	r2, [sp, #16]
 801124e:	9a05      	ldr	r2, [sp, #20]
 8011250:	2101      	movs	r1, #1
 8011252:	441a      	add	r2, r3
 8011254:	4620      	mov	r0, r4
 8011256:	9205      	str	r2, [sp, #20]
 8011258:	f000 fb58 	bl	801190c <__i2b>
 801125c:	4607      	mov	r7, r0
 801125e:	2d00      	cmp	r5, #0
 8011260:	dd0c      	ble.n	801127c <_dtoa_r+0x754>
 8011262:	9b05      	ldr	r3, [sp, #20]
 8011264:	2b00      	cmp	r3, #0
 8011266:	dd09      	ble.n	801127c <_dtoa_r+0x754>
 8011268:	42ab      	cmp	r3, r5
 801126a:	9a04      	ldr	r2, [sp, #16]
 801126c:	bfa8      	it	ge
 801126e:	462b      	movge	r3, r5
 8011270:	1ad2      	subs	r2, r2, r3
 8011272:	9204      	str	r2, [sp, #16]
 8011274:	9a05      	ldr	r2, [sp, #20]
 8011276:	1aed      	subs	r5, r5, r3
 8011278:	1ad3      	subs	r3, r2, r3
 801127a:	9305      	str	r3, [sp, #20]
 801127c:	9b07      	ldr	r3, [sp, #28]
 801127e:	b31b      	cbz	r3, 80112c8 <_dtoa_r+0x7a0>
 8011280:	9b08      	ldr	r3, [sp, #32]
 8011282:	2b00      	cmp	r3, #0
 8011284:	f000 80af 	beq.w	80113e6 <_dtoa_r+0x8be>
 8011288:	2e00      	cmp	r6, #0
 801128a:	dd13      	ble.n	80112b4 <_dtoa_r+0x78c>
 801128c:	4639      	mov	r1, r7
 801128e:	4632      	mov	r2, r6
 8011290:	4620      	mov	r0, r4
 8011292:	f000 fbfb 	bl	8011a8c <__pow5mult>
 8011296:	ee18 2a10 	vmov	r2, s16
 801129a:	4601      	mov	r1, r0
 801129c:	4607      	mov	r7, r0
 801129e:	4620      	mov	r0, r4
 80112a0:	f000 fb4a 	bl	8011938 <__multiply>
 80112a4:	ee18 1a10 	vmov	r1, s16
 80112a8:	4680      	mov	r8, r0
 80112aa:	4620      	mov	r0, r4
 80112ac:	f000 fa76 	bl	801179c <_Bfree>
 80112b0:	ee08 8a10 	vmov	s16, r8
 80112b4:	9b07      	ldr	r3, [sp, #28]
 80112b6:	1b9a      	subs	r2, r3, r6
 80112b8:	d006      	beq.n	80112c8 <_dtoa_r+0x7a0>
 80112ba:	ee18 1a10 	vmov	r1, s16
 80112be:	4620      	mov	r0, r4
 80112c0:	f000 fbe4 	bl	8011a8c <__pow5mult>
 80112c4:	ee08 0a10 	vmov	s16, r0
 80112c8:	2101      	movs	r1, #1
 80112ca:	4620      	mov	r0, r4
 80112cc:	f000 fb1e 	bl	801190c <__i2b>
 80112d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	4606      	mov	r6, r0
 80112d6:	f340 8088 	ble.w	80113ea <_dtoa_r+0x8c2>
 80112da:	461a      	mov	r2, r3
 80112dc:	4601      	mov	r1, r0
 80112de:	4620      	mov	r0, r4
 80112e0:	f000 fbd4 	bl	8011a8c <__pow5mult>
 80112e4:	9b06      	ldr	r3, [sp, #24]
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	4606      	mov	r6, r0
 80112ea:	f340 8081 	ble.w	80113f0 <_dtoa_r+0x8c8>
 80112ee:	f04f 0800 	mov.w	r8, #0
 80112f2:	6933      	ldr	r3, [r6, #16]
 80112f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80112f8:	6918      	ldr	r0, [r3, #16]
 80112fa:	f000 fab7 	bl	801186c <__hi0bits>
 80112fe:	f1c0 0020 	rsb	r0, r0, #32
 8011302:	9b05      	ldr	r3, [sp, #20]
 8011304:	4418      	add	r0, r3
 8011306:	f010 001f 	ands.w	r0, r0, #31
 801130a:	f000 8092 	beq.w	8011432 <_dtoa_r+0x90a>
 801130e:	f1c0 0320 	rsb	r3, r0, #32
 8011312:	2b04      	cmp	r3, #4
 8011314:	f340 808a 	ble.w	801142c <_dtoa_r+0x904>
 8011318:	f1c0 001c 	rsb	r0, r0, #28
 801131c:	9b04      	ldr	r3, [sp, #16]
 801131e:	4403      	add	r3, r0
 8011320:	9304      	str	r3, [sp, #16]
 8011322:	9b05      	ldr	r3, [sp, #20]
 8011324:	4403      	add	r3, r0
 8011326:	4405      	add	r5, r0
 8011328:	9305      	str	r3, [sp, #20]
 801132a:	9b04      	ldr	r3, [sp, #16]
 801132c:	2b00      	cmp	r3, #0
 801132e:	dd07      	ble.n	8011340 <_dtoa_r+0x818>
 8011330:	ee18 1a10 	vmov	r1, s16
 8011334:	461a      	mov	r2, r3
 8011336:	4620      	mov	r0, r4
 8011338:	f000 fc02 	bl	8011b40 <__lshift>
 801133c:	ee08 0a10 	vmov	s16, r0
 8011340:	9b05      	ldr	r3, [sp, #20]
 8011342:	2b00      	cmp	r3, #0
 8011344:	dd05      	ble.n	8011352 <_dtoa_r+0x82a>
 8011346:	4631      	mov	r1, r6
 8011348:	461a      	mov	r2, r3
 801134a:	4620      	mov	r0, r4
 801134c:	f000 fbf8 	bl	8011b40 <__lshift>
 8011350:	4606      	mov	r6, r0
 8011352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011354:	2b00      	cmp	r3, #0
 8011356:	d06e      	beq.n	8011436 <_dtoa_r+0x90e>
 8011358:	ee18 0a10 	vmov	r0, s16
 801135c:	4631      	mov	r1, r6
 801135e:	f000 fc5f 	bl	8011c20 <__mcmp>
 8011362:	2800      	cmp	r0, #0
 8011364:	da67      	bge.n	8011436 <_dtoa_r+0x90e>
 8011366:	9b00      	ldr	r3, [sp, #0]
 8011368:	3b01      	subs	r3, #1
 801136a:	ee18 1a10 	vmov	r1, s16
 801136e:	9300      	str	r3, [sp, #0]
 8011370:	220a      	movs	r2, #10
 8011372:	2300      	movs	r3, #0
 8011374:	4620      	mov	r0, r4
 8011376:	f000 fa33 	bl	80117e0 <__multadd>
 801137a:	9b08      	ldr	r3, [sp, #32]
 801137c:	ee08 0a10 	vmov	s16, r0
 8011380:	2b00      	cmp	r3, #0
 8011382:	f000 81b1 	beq.w	80116e8 <_dtoa_r+0xbc0>
 8011386:	2300      	movs	r3, #0
 8011388:	4639      	mov	r1, r7
 801138a:	220a      	movs	r2, #10
 801138c:	4620      	mov	r0, r4
 801138e:	f000 fa27 	bl	80117e0 <__multadd>
 8011392:	9b02      	ldr	r3, [sp, #8]
 8011394:	2b00      	cmp	r3, #0
 8011396:	4607      	mov	r7, r0
 8011398:	f300 808e 	bgt.w	80114b8 <_dtoa_r+0x990>
 801139c:	9b06      	ldr	r3, [sp, #24]
 801139e:	2b02      	cmp	r3, #2
 80113a0:	dc51      	bgt.n	8011446 <_dtoa_r+0x91e>
 80113a2:	e089      	b.n	80114b8 <_dtoa_r+0x990>
 80113a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80113a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80113aa:	e74b      	b.n	8011244 <_dtoa_r+0x71c>
 80113ac:	9b03      	ldr	r3, [sp, #12]
 80113ae:	1e5e      	subs	r6, r3, #1
 80113b0:	9b07      	ldr	r3, [sp, #28]
 80113b2:	42b3      	cmp	r3, r6
 80113b4:	bfbf      	itttt	lt
 80113b6:	9b07      	ldrlt	r3, [sp, #28]
 80113b8:	9607      	strlt	r6, [sp, #28]
 80113ba:	1af2      	sublt	r2, r6, r3
 80113bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80113be:	bfb6      	itet	lt
 80113c0:	189b      	addlt	r3, r3, r2
 80113c2:	1b9e      	subge	r6, r3, r6
 80113c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80113c6:	9b03      	ldr	r3, [sp, #12]
 80113c8:	bfb8      	it	lt
 80113ca:	2600      	movlt	r6, #0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	bfb7      	itett	lt
 80113d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80113d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80113d8:	1a9d      	sublt	r5, r3, r2
 80113da:	2300      	movlt	r3, #0
 80113dc:	e734      	b.n	8011248 <_dtoa_r+0x720>
 80113de:	9e07      	ldr	r6, [sp, #28]
 80113e0:	9d04      	ldr	r5, [sp, #16]
 80113e2:	9f08      	ldr	r7, [sp, #32]
 80113e4:	e73b      	b.n	801125e <_dtoa_r+0x736>
 80113e6:	9a07      	ldr	r2, [sp, #28]
 80113e8:	e767      	b.n	80112ba <_dtoa_r+0x792>
 80113ea:	9b06      	ldr	r3, [sp, #24]
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	dc18      	bgt.n	8011422 <_dtoa_r+0x8fa>
 80113f0:	f1ba 0f00 	cmp.w	sl, #0
 80113f4:	d115      	bne.n	8011422 <_dtoa_r+0x8fa>
 80113f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80113fa:	b993      	cbnz	r3, 8011422 <_dtoa_r+0x8fa>
 80113fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011400:	0d1b      	lsrs	r3, r3, #20
 8011402:	051b      	lsls	r3, r3, #20
 8011404:	b183      	cbz	r3, 8011428 <_dtoa_r+0x900>
 8011406:	9b04      	ldr	r3, [sp, #16]
 8011408:	3301      	adds	r3, #1
 801140a:	9304      	str	r3, [sp, #16]
 801140c:	9b05      	ldr	r3, [sp, #20]
 801140e:	3301      	adds	r3, #1
 8011410:	9305      	str	r3, [sp, #20]
 8011412:	f04f 0801 	mov.w	r8, #1
 8011416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011418:	2b00      	cmp	r3, #0
 801141a:	f47f af6a 	bne.w	80112f2 <_dtoa_r+0x7ca>
 801141e:	2001      	movs	r0, #1
 8011420:	e76f      	b.n	8011302 <_dtoa_r+0x7da>
 8011422:	f04f 0800 	mov.w	r8, #0
 8011426:	e7f6      	b.n	8011416 <_dtoa_r+0x8ee>
 8011428:	4698      	mov	r8, r3
 801142a:	e7f4      	b.n	8011416 <_dtoa_r+0x8ee>
 801142c:	f43f af7d 	beq.w	801132a <_dtoa_r+0x802>
 8011430:	4618      	mov	r0, r3
 8011432:	301c      	adds	r0, #28
 8011434:	e772      	b.n	801131c <_dtoa_r+0x7f4>
 8011436:	9b03      	ldr	r3, [sp, #12]
 8011438:	2b00      	cmp	r3, #0
 801143a:	dc37      	bgt.n	80114ac <_dtoa_r+0x984>
 801143c:	9b06      	ldr	r3, [sp, #24]
 801143e:	2b02      	cmp	r3, #2
 8011440:	dd34      	ble.n	80114ac <_dtoa_r+0x984>
 8011442:	9b03      	ldr	r3, [sp, #12]
 8011444:	9302      	str	r3, [sp, #8]
 8011446:	9b02      	ldr	r3, [sp, #8]
 8011448:	b96b      	cbnz	r3, 8011466 <_dtoa_r+0x93e>
 801144a:	4631      	mov	r1, r6
 801144c:	2205      	movs	r2, #5
 801144e:	4620      	mov	r0, r4
 8011450:	f000 f9c6 	bl	80117e0 <__multadd>
 8011454:	4601      	mov	r1, r0
 8011456:	4606      	mov	r6, r0
 8011458:	ee18 0a10 	vmov	r0, s16
 801145c:	f000 fbe0 	bl	8011c20 <__mcmp>
 8011460:	2800      	cmp	r0, #0
 8011462:	f73f adbb 	bgt.w	8010fdc <_dtoa_r+0x4b4>
 8011466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011468:	9d01      	ldr	r5, [sp, #4]
 801146a:	43db      	mvns	r3, r3
 801146c:	9300      	str	r3, [sp, #0]
 801146e:	f04f 0800 	mov.w	r8, #0
 8011472:	4631      	mov	r1, r6
 8011474:	4620      	mov	r0, r4
 8011476:	f000 f991 	bl	801179c <_Bfree>
 801147a:	2f00      	cmp	r7, #0
 801147c:	f43f aea4 	beq.w	80111c8 <_dtoa_r+0x6a0>
 8011480:	f1b8 0f00 	cmp.w	r8, #0
 8011484:	d005      	beq.n	8011492 <_dtoa_r+0x96a>
 8011486:	45b8      	cmp	r8, r7
 8011488:	d003      	beq.n	8011492 <_dtoa_r+0x96a>
 801148a:	4641      	mov	r1, r8
 801148c:	4620      	mov	r0, r4
 801148e:	f000 f985 	bl	801179c <_Bfree>
 8011492:	4639      	mov	r1, r7
 8011494:	4620      	mov	r0, r4
 8011496:	f000 f981 	bl	801179c <_Bfree>
 801149a:	e695      	b.n	80111c8 <_dtoa_r+0x6a0>
 801149c:	2600      	movs	r6, #0
 801149e:	4637      	mov	r7, r6
 80114a0:	e7e1      	b.n	8011466 <_dtoa_r+0x93e>
 80114a2:	9700      	str	r7, [sp, #0]
 80114a4:	4637      	mov	r7, r6
 80114a6:	e599      	b.n	8010fdc <_dtoa_r+0x4b4>
 80114a8:	40240000 	.word	0x40240000
 80114ac:	9b08      	ldr	r3, [sp, #32]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	f000 80ca 	beq.w	8011648 <_dtoa_r+0xb20>
 80114b4:	9b03      	ldr	r3, [sp, #12]
 80114b6:	9302      	str	r3, [sp, #8]
 80114b8:	2d00      	cmp	r5, #0
 80114ba:	dd05      	ble.n	80114c8 <_dtoa_r+0x9a0>
 80114bc:	4639      	mov	r1, r7
 80114be:	462a      	mov	r2, r5
 80114c0:	4620      	mov	r0, r4
 80114c2:	f000 fb3d 	bl	8011b40 <__lshift>
 80114c6:	4607      	mov	r7, r0
 80114c8:	f1b8 0f00 	cmp.w	r8, #0
 80114cc:	d05b      	beq.n	8011586 <_dtoa_r+0xa5e>
 80114ce:	6879      	ldr	r1, [r7, #4]
 80114d0:	4620      	mov	r0, r4
 80114d2:	f000 f923 	bl	801171c <_Balloc>
 80114d6:	4605      	mov	r5, r0
 80114d8:	b928      	cbnz	r0, 80114e6 <_dtoa_r+0x9be>
 80114da:	4b87      	ldr	r3, [pc, #540]	; (80116f8 <_dtoa_r+0xbd0>)
 80114dc:	4602      	mov	r2, r0
 80114de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80114e2:	f7ff bb3b 	b.w	8010b5c <_dtoa_r+0x34>
 80114e6:	693a      	ldr	r2, [r7, #16]
 80114e8:	3202      	adds	r2, #2
 80114ea:	0092      	lsls	r2, r2, #2
 80114ec:	f107 010c 	add.w	r1, r7, #12
 80114f0:	300c      	adds	r0, #12
 80114f2:	f7fe fded 	bl	80100d0 <memcpy>
 80114f6:	2201      	movs	r2, #1
 80114f8:	4629      	mov	r1, r5
 80114fa:	4620      	mov	r0, r4
 80114fc:	f000 fb20 	bl	8011b40 <__lshift>
 8011500:	9b01      	ldr	r3, [sp, #4]
 8011502:	f103 0901 	add.w	r9, r3, #1
 8011506:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801150a:	4413      	add	r3, r2
 801150c:	9305      	str	r3, [sp, #20]
 801150e:	f00a 0301 	and.w	r3, sl, #1
 8011512:	46b8      	mov	r8, r7
 8011514:	9304      	str	r3, [sp, #16]
 8011516:	4607      	mov	r7, r0
 8011518:	4631      	mov	r1, r6
 801151a:	ee18 0a10 	vmov	r0, s16
 801151e:	f7ff fa77 	bl	8010a10 <quorem>
 8011522:	4641      	mov	r1, r8
 8011524:	9002      	str	r0, [sp, #8]
 8011526:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801152a:	ee18 0a10 	vmov	r0, s16
 801152e:	f000 fb77 	bl	8011c20 <__mcmp>
 8011532:	463a      	mov	r2, r7
 8011534:	9003      	str	r0, [sp, #12]
 8011536:	4631      	mov	r1, r6
 8011538:	4620      	mov	r0, r4
 801153a:	f000 fb8d 	bl	8011c58 <__mdiff>
 801153e:	68c2      	ldr	r2, [r0, #12]
 8011540:	f109 3bff 	add.w	fp, r9, #4294967295
 8011544:	4605      	mov	r5, r0
 8011546:	bb02      	cbnz	r2, 801158a <_dtoa_r+0xa62>
 8011548:	4601      	mov	r1, r0
 801154a:	ee18 0a10 	vmov	r0, s16
 801154e:	f000 fb67 	bl	8011c20 <__mcmp>
 8011552:	4602      	mov	r2, r0
 8011554:	4629      	mov	r1, r5
 8011556:	4620      	mov	r0, r4
 8011558:	9207      	str	r2, [sp, #28]
 801155a:	f000 f91f 	bl	801179c <_Bfree>
 801155e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011562:	ea43 0102 	orr.w	r1, r3, r2
 8011566:	9b04      	ldr	r3, [sp, #16]
 8011568:	430b      	orrs	r3, r1
 801156a:	464d      	mov	r5, r9
 801156c:	d10f      	bne.n	801158e <_dtoa_r+0xa66>
 801156e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011572:	d02a      	beq.n	80115ca <_dtoa_r+0xaa2>
 8011574:	9b03      	ldr	r3, [sp, #12]
 8011576:	2b00      	cmp	r3, #0
 8011578:	dd02      	ble.n	8011580 <_dtoa_r+0xa58>
 801157a:	9b02      	ldr	r3, [sp, #8]
 801157c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011580:	f88b a000 	strb.w	sl, [fp]
 8011584:	e775      	b.n	8011472 <_dtoa_r+0x94a>
 8011586:	4638      	mov	r0, r7
 8011588:	e7ba      	b.n	8011500 <_dtoa_r+0x9d8>
 801158a:	2201      	movs	r2, #1
 801158c:	e7e2      	b.n	8011554 <_dtoa_r+0xa2c>
 801158e:	9b03      	ldr	r3, [sp, #12]
 8011590:	2b00      	cmp	r3, #0
 8011592:	db04      	blt.n	801159e <_dtoa_r+0xa76>
 8011594:	9906      	ldr	r1, [sp, #24]
 8011596:	430b      	orrs	r3, r1
 8011598:	9904      	ldr	r1, [sp, #16]
 801159a:	430b      	orrs	r3, r1
 801159c:	d122      	bne.n	80115e4 <_dtoa_r+0xabc>
 801159e:	2a00      	cmp	r2, #0
 80115a0:	ddee      	ble.n	8011580 <_dtoa_r+0xa58>
 80115a2:	ee18 1a10 	vmov	r1, s16
 80115a6:	2201      	movs	r2, #1
 80115a8:	4620      	mov	r0, r4
 80115aa:	f000 fac9 	bl	8011b40 <__lshift>
 80115ae:	4631      	mov	r1, r6
 80115b0:	ee08 0a10 	vmov	s16, r0
 80115b4:	f000 fb34 	bl	8011c20 <__mcmp>
 80115b8:	2800      	cmp	r0, #0
 80115ba:	dc03      	bgt.n	80115c4 <_dtoa_r+0xa9c>
 80115bc:	d1e0      	bne.n	8011580 <_dtoa_r+0xa58>
 80115be:	f01a 0f01 	tst.w	sl, #1
 80115c2:	d0dd      	beq.n	8011580 <_dtoa_r+0xa58>
 80115c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80115c8:	d1d7      	bne.n	801157a <_dtoa_r+0xa52>
 80115ca:	2339      	movs	r3, #57	; 0x39
 80115cc:	f88b 3000 	strb.w	r3, [fp]
 80115d0:	462b      	mov	r3, r5
 80115d2:	461d      	mov	r5, r3
 80115d4:	3b01      	subs	r3, #1
 80115d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80115da:	2a39      	cmp	r2, #57	; 0x39
 80115dc:	d071      	beq.n	80116c2 <_dtoa_r+0xb9a>
 80115de:	3201      	adds	r2, #1
 80115e0:	701a      	strb	r2, [r3, #0]
 80115e2:	e746      	b.n	8011472 <_dtoa_r+0x94a>
 80115e4:	2a00      	cmp	r2, #0
 80115e6:	dd07      	ble.n	80115f8 <_dtoa_r+0xad0>
 80115e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80115ec:	d0ed      	beq.n	80115ca <_dtoa_r+0xaa2>
 80115ee:	f10a 0301 	add.w	r3, sl, #1
 80115f2:	f88b 3000 	strb.w	r3, [fp]
 80115f6:	e73c      	b.n	8011472 <_dtoa_r+0x94a>
 80115f8:	9b05      	ldr	r3, [sp, #20]
 80115fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80115fe:	4599      	cmp	r9, r3
 8011600:	d047      	beq.n	8011692 <_dtoa_r+0xb6a>
 8011602:	ee18 1a10 	vmov	r1, s16
 8011606:	2300      	movs	r3, #0
 8011608:	220a      	movs	r2, #10
 801160a:	4620      	mov	r0, r4
 801160c:	f000 f8e8 	bl	80117e0 <__multadd>
 8011610:	45b8      	cmp	r8, r7
 8011612:	ee08 0a10 	vmov	s16, r0
 8011616:	f04f 0300 	mov.w	r3, #0
 801161a:	f04f 020a 	mov.w	r2, #10
 801161e:	4641      	mov	r1, r8
 8011620:	4620      	mov	r0, r4
 8011622:	d106      	bne.n	8011632 <_dtoa_r+0xb0a>
 8011624:	f000 f8dc 	bl	80117e0 <__multadd>
 8011628:	4680      	mov	r8, r0
 801162a:	4607      	mov	r7, r0
 801162c:	f109 0901 	add.w	r9, r9, #1
 8011630:	e772      	b.n	8011518 <_dtoa_r+0x9f0>
 8011632:	f000 f8d5 	bl	80117e0 <__multadd>
 8011636:	4639      	mov	r1, r7
 8011638:	4680      	mov	r8, r0
 801163a:	2300      	movs	r3, #0
 801163c:	220a      	movs	r2, #10
 801163e:	4620      	mov	r0, r4
 8011640:	f000 f8ce 	bl	80117e0 <__multadd>
 8011644:	4607      	mov	r7, r0
 8011646:	e7f1      	b.n	801162c <_dtoa_r+0xb04>
 8011648:	9b03      	ldr	r3, [sp, #12]
 801164a:	9302      	str	r3, [sp, #8]
 801164c:	9d01      	ldr	r5, [sp, #4]
 801164e:	ee18 0a10 	vmov	r0, s16
 8011652:	4631      	mov	r1, r6
 8011654:	f7ff f9dc 	bl	8010a10 <quorem>
 8011658:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801165c:	9b01      	ldr	r3, [sp, #4]
 801165e:	f805 ab01 	strb.w	sl, [r5], #1
 8011662:	1aea      	subs	r2, r5, r3
 8011664:	9b02      	ldr	r3, [sp, #8]
 8011666:	4293      	cmp	r3, r2
 8011668:	dd09      	ble.n	801167e <_dtoa_r+0xb56>
 801166a:	ee18 1a10 	vmov	r1, s16
 801166e:	2300      	movs	r3, #0
 8011670:	220a      	movs	r2, #10
 8011672:	4620      	mov	r0, r4
 8011674:	f000 f8b4 	bl	80117e0 <__multadd>
 8011678:	ee08 0a10 	vmov	s16, r0
 801167c:	e7e7      	b.n	801164e <_dtoa_r+0xb26>
 801167e:	9b02      	ldr	r3, [sp, #8]
 8011680:	2b00      	cmp	r3, #0
 8011682:	bfc8      	it	gt
 8011684:	461d      	movgt	r5, r3
 8011686:	9b01      	ldr	r3, [sp, #4]
 8011688:	bfd8      	it	le
 801168a:	2501      	movle	r5, #1
 801168c:	441d      	add	r5, r3
 801168e:	f04f 0800 	mov.w	r8, #0
 8011692:	ee18 1a10 	vmov	r1, s16
 8011696:	2201      	movs	r2, #1
 8011698:	4620      	mov	r0, r4
 801169a:	f000 fa51 	bl	8011b40 <__lshift>
 801169e:	4631      	mov	r1, r6
 80116a0:	ee08 0a10 	vmov	s16, r0
 80116a4:	f000 fabc 	bl	8011c20 <__mcmp>
 80116a8:	2800      	cmp	r0, #0
 80116aa:	dc91      	bgt.n	80115d0 <_dtoa_r+0xaa8>
 80116ac:	d102      	bne.n	80116b4 <_dtoa_r+0xb8c>
 80116ae:	f01a 0f01 	tst.w	sl, #1
 80116b2:	d18d      	bne.n	80115d0 <_dtoa_r+0xaa8>
 80116b4:	462b      	mov	r3, r5
 80116b6:	461d      	mov	r5, r3
 80116b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80116bc:	2a30      	cmp	r2, #48	; 0x30
 80116be:	d0fa      	beq.n	80116b6 <_dtoa_r+0xb8e>
 80116c0:	e6d7      	b.n	8011472 <_dtoa_r+0x94a>
 80116c2:	9a01      	ldr	r2, [sp, #4]
 80116c4:	429a      	cmp	r2, r3
 80116c6:	d184      	bne.n	80115d2 <_dtoa_r+0xaaa>
 80116c8:	9b00      	ldr	r3, [sp, #0]
 80116ca:	3301      	adds	r3, #1
 80116cc:	9300      	str	r3, [sp, #0]
 80116ce:	2331      	movs	r3, #49	; 0x31
 80116d0:	7013      	strb	r3, [r2, #0]
 80116d2:	e6ce      	b.n	8011472 <_dtoa_r+0x94a>
 80116d4:	4b09      	ldr	r3, [pc, #36]	; (80116fc <_dtoa_r+0xbd4>)
 80116d6:	f7ff ba95 	b.w	8010c04 <_dtoa_r+0xdc>
 80116da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116dc:	2b00      	cmp	r3, #0
 80116de:	f47f aa6e 	bne.w	8010bbe <_dtoa_r+0x96>
 80116e2:	4b07      	ldr	r3, [pc, #28]	; (8011700 <_dtoa_r+0xbd8>)
 80116e4:	f7ff ba8e 	b.w	8010c04 <_dtoa_r+0xdc>
 80116e8:	9b02      	ldr	r3, [sp, #8]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	dcae      	bgt.n	801164c <_dtoa_r+0xb24>
 80116ee:	9b06      	ldr	r3, [sp, #24]
 80116f0:	2b02      	cmp	r3, #2
 80116f2:	f73f aea8 	bgt.w	8011446 <_dtoa_r+0x91e>
 80116f6:	e7a9      	b.n	801164c <_dtoa_r+0xb24>
 80116f8:	080155e7 	.word	0x080155e7
 80116fc:	08015544 	.word	0x08015544
 8011700:	08015568 	.word	0x08015568

08011704 <_localeconv_r>:
 8011704:	4800      	ldr	r0, [pc, #0]	; (8011708 <_localeconv_r+0x4>)
 8011706:	4770      	bx	lr
 8011708:	20000170 	.word	0x20000170

0801170c <malloc>:
 801170c:	4b02      	ldr	r3, [pc, #8]	; (8011718 <malloc+0xc>)
 801170e:	4601      	mov	r1, r0
 8011710:	6818      	ldr	r0, [r3, #0]
 8011712:	f000 bc09 	b.w	8011f28 <_malloc_r>
 8011716:	bf00      	nop
 8011718:	2000001c 	.word	0x2000001c

0801171c <_Balloc>:
 801171c:	b570      	push	{r4, r5, r6, lr}
 801171e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011720:	4604      	mov	r4, r0
 8011722:	460d      	mov	r5, r1
 8011724:	b976      	cbnz	r6, 8011744 <_Balloc+0x28>
 8011726:	2010      	movs	r0, #16
 8011728:	f7ff fff0 	bl	801170c <malloc>
 801172c:	4602      	mov	r2, r0
 801172e:	6260      	str	r0, [r4, #36]	; 0x24
 8011730:	b920      	cbnz	r0, 801173c <_Balloc+0x20>
 8011732:	4b18      	ldr	r3, [pc, #96]	; (8011794 <_Balloc+0x78>)
 8011734:	4818      	ldr	r0, [pc, #96]	; (8011798 <_Balloc+0x7c>)
 8011736:	2166      	movs	r1, #102	; 0x66
 8011738:	f000 fdd6 	bl	80122e8 <__assert_func>
 801173c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011740:	6006      	str	r6, [r0, #0]
 8011742:	60c6      	str	r6, [r0, #12]
 8011744:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011746:	68f3      	ldr	r3, [r6, #12]
 8011748:	b183      	cbz	r3, 801176c <_Balloc+0x50>
 801174a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801174c:	68db      	ldr	r3, [r3, #12]
 801174e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011752:	b9b8      	cbnz	r0, 8011784 <_Balloc+0x68>
 8011754:	2101      	movs	r1, #1
 8011756:	fa01 f605 	lsl.w	r6, r1, r5
 801175a:	1d72      	adds	r2, r6, #5
 801175c:	0092      	lsls	r2, r2, #2
 801175e:	4620      	mov	r0, r4
 8011760:	f000 fb60 	bl	8011e24 <_calloc_r>
 8011764:	b160      	cbz	r0, 8011780 <_Balloc+0x64>
 8011766:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801176a:	e00e      	b.n	801178a <_Balloc+0x6e>
 801176c:	2221      	movs	r2, #33	; 0x21
 801176e:	2104      	movs	r1, #4
 8011770:	4620      	mov	r0, r4
 8011772:	f000 fb57 	bl	8011e24 <_calloc_r>
 8011776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011778:	60f0      	str	r0, [r6, #12]
 801177a:	68db      	ldr	r3, [r3, #12]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d1e4      	bne.n	801174a <_Balloc+0x2e>
 8011780:	2000      	movs	r0, #0
 8011782:	bd70      	pop	{r4, r5, r6, pc}
 8011784:	6802      	ldr	r2, [r0, #0]
 8011786:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801178a:	2300      	movs	r3, #0
 801178c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011790:	e7f7      	b.n	8011782 <_Balloc+0x66>
 8011792:	bf00      	nop
 8011794:	08015575 	.word	0x08015575
 8011798:	080155f8 	.word	0x080155f8

0801179c <_Bfree>:
 801179c:	b570      	push	{r4, r5, r6, lr}
 801179e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80117a0:	4605      	mov	r5, r0
 80117a2:	460c      	mov	r4, r1
 80117a4:	b976      	cbnz	r6, 80117c4 <_Bfree+0x28>
 80117a6:	2010      	movs	r0, #16
 80117a8:	f7ff ffb0 	bl	801170c <malloc>
 80117ac:	4602      	mov	r2, r0
 80117ae:	6268      	str	r0, [r5, #36]	; 0x24
 80117b0:	b920      	cbnz	r0, 80117bc <_Bfree+0x20>
 80117b2:	4b09      	ldr	r3, [pc, #36]	; (80117d8 <_Bfree+0x3c>)
 80117b4:	4809      	ldr	r0, [pc, #36]	; (80117dc <_Bfree+0x40>)
 80117b6:	218a      	movs	r1, #138	; 0x8a
 80117b8:	f000 fd96 	bl	80122e8 <__assert_func>
 80117bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80117c0:	6006      	str	r6, [r0, #0]
 80117c2:	60c6      	str	r6, [r0, #12]
 80117c4:	b13c      	cbz	r4, 80117d6 <_Bfree+0x3a>
 80117c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80117c8:	6862      	ldr	r2, [r4, #4]
 80117ca:	68db      	ldr	r3, [r3, #12]
 80117cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80117d0:	6021      	str	r1, [r4, #0]
 80117d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80117d6:	bd70      	pop	{r4, r5, r6, pc}
 80117d8:	08015575 	.word	0x08015575
 80117dc:	080155f8 	.word	0x080155f8

080117e0 <__multadd>:
 80117e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117e4:	690d      	ldr	r5, [r1, #16]
 80117e6:	4607      	mov	r7, r0
 80117e8:	460c      	mov	r4, r1
 80117ea:	461e      	mov	r6, r3
 80117ec:	f101 0c14 	add.w	ip, r1, #20
 80117f0:	2000      	movs	r0, #0
 80117f2:	f8dc 3000 	ldr.w	r3, [ip]
 80117f6:	b299      	uxth	r1, r3
 80117f8:	fb02 6101 	mla	r1, r2, r1, r6
 80117fc:	0c1e      	lsrs	r6, r3, #16
 80117fe:	0c0b      	lsrs	r3, r1, #16
 8011800:	fb02 3306 	mla	r3, r2, r6, r3
 8011804:	b289      	uxth	r1, r1
 8011806:	3001      	adds	r0, #1
 8011808:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801180c:	4285      	cmp	r5, r0
 801180e:	f84c 1b04 	str.w	r1, [ip], #4
 8011812:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011816:	dcec      	bgt.n	80117f2 <__multadd+0x12>
 8011818:	b30e      	cbz	r6, 801185e <__multadd+0x7e>
 801181a:	68a3      	ldr	r3, [r4, #8]
 801181c:	42ab      	cmp	r3, r5
 801181e:	dc19      	bgt.n	8011854 <__multadd+0x74>
 8011820:	6861      	ldr	r1, [r4, #4]
 8011822:	4638      	mov	r0, r7
 8011824:	3101      	adds	r1, #1
 8011826:	f7ff ff79 	bl	801171c <_Balloc>
 801182a:	4680      	mov	r8, r0
 801182c:	b928      	cbnz	r0, 801183a <__multadd+0x5a>
 801182e:	4602      	mov	r2, r0
 8011830:	4b0c      	ldr	r3, [pc, #48]	; (8011864 <__multadd+0x84>)
 8011832:	480d      	ldr	r0, [pc, #52]	; (8011868 <__multadd+0x88>)
 8011834:	21b5      	movs	r1, #181	; 0xb5
 8011836:	f000 fd57 	bl	80122e8 <__assert_func>
 801183a:	6922      	ldr	r2, [r4, #16]
 801183c:	3202      	adds	r2, #2
 801183e:	f104 010c 	add.w	r1, r4, #12
 8011842:	0092      	lsls	r2, r2, #2
 8011844:	300c      	adds	r0, #12
 8011846:	f7fe fc43 	bl	80100d0 <memcpy>
 801184a:	4621      	mov	r1, r4
 801184c:	4638      	mov	r0, r7
 801184e:	f7ff ffa5 	bl	801179c <_Bfree>
 8011852:	4644      	mov	r4, r8
 8011854:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011858:	3501      	adds	r5, #1
 801185a:	615e      	str	r6, [r3, #20]
 801185c:	6125      	str	r5, [r4, #16]
 801185e:	4620      	mov	r0, r4
 8011860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011864:	080155e7 	.word	0x080155e7
 8011868:	080155f8 	.word	0x080155f8

0801186c <__hi0bits>:
 801186c:	0c03      	lsrs	r3, r0, #16
 801186e:	041b      	lsls	r3, r3, #16
 8011870:	b9d3      	cbnz	r3, 80118a8 <__hi0bits+0x3c>
 8011872:	0400      	lsls	r0, r0, #16
 8011874:	2310      	movs	r3, #16
 8011876:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801187a:	bf04      	itt	eq
 801187c:	0200      	lsleq	r0, r0, #8
 801187e:	3308      	addeq	r3, #8
 8011880:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011884:	bf04      	itt	eq
 8011886:	0100      	lsleq	r0, r0, #4
 8011888:	3304      	addeq	r3, #4
 801188a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801188e:	bf04      	itt	eq
 8011890:	0080      	lsleq	r0, r0, #2
 8011892:	3302      	addeq	r3, #2
 8011894:	2800      	cmp	r0, #0
 8011896:	db05      	blt.n	80118a4 <__hi0bits+0x38>
 8011898:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801189c:	f103 0301 	add.w	r3, r3, #1
 80118a0:	bf08      	it	eq
 80118a2:	2320      	moveq	r3, #32
 80118a4:	4618      	mov	r0, r3
 80118a6:	4770      	bx	lr
 80118a8:	2300      	movs	r3, #0
 80118aa:	e7e4      	b.n	8011876 <__hi0bits+0xa>

080118ac <__lo0bits>:
 80118ac:	6803      	ldr	r3, [r0, #0]
 80118ae:	f013 0207 	ands.w	r2, r3, #7
 80118b2:	4601      	mov	r1, r0
 80118b4:	d00b      	beq.n	80118ce <__lo0bits+0x22>
 80118b6:	07da      	lsls	r2, r3, #31
 80118b8:	d423      	bmi.n	8011902 <__lo0bits+0x56>
 80118ba:	0798      	lsls	r0, r3, #30
 80118bc:	bf49      	itett	mi
 80118be:	085b      	lsrmi	r3, r3, #1
 80118c0:	089b      	lsrpl	r3, r3, #2
 80118c2:	2001      	movmi	r0, #1
 80118c4:	600b      	strmi	r3, [r1, #0]
 80118c6:	bf5c      	itt	pl
 80118c8:	600b      	strpl	r3, [r1, #0]
 80118ca:	2002      	movpl	r0, #2
 80118cc:	4770      	bx	lr
 80118ce:	b298      	uxth	r0, r3
 80118d0:	b9a8      	cbnz	r0, 80118fe <__lo0bits+0x52>
 80118d2:	0c1b      	lsrs	r3, r3, #16
 80118d4:	2010      	movs	r0, #16
 80118d6:	b2da      	uxtb	r2, r3
 80118d8:	b90a      	cbnz	r2, 80118de <__lo0bits+0x32>
 80118da:	3008      	adds	r0, #8
 80118dc:	0a1b      	lsrs	r3, r3, #8
 80118de:	071a      	lsls	r2, r3, #28
 80118e0:	bf04      	itt	eq
 80118e2:	091b      	lsreq	r3, r3, #4
 80118e4:	3004      	addeq	r0, #4
 80118e6:	079a      	lsls	r2, r3, #30
 80118e8:	bf04      	itt	eq
 80118ea:	089b      	lsreq	r3, r3, #2
 80118ec:	3002      	addeq	r0, #2
 80118ee:	07da      	lsls	r2, r3, #31
 80118f0:	d403      	bmi.n	80118fa <__lo0bits+0x4e>
 80118f2:	085b      	lsrs	r3, r3, #1
 80118f4:	f100 0001 	add.w	r0, r0, #1
 80118f8:	d005      	beq.n	8011906 <__lo0bits+0x5a>
 80118fa:	600b      	str	r3, [r1, #0]
 80118fc:	4770      	bx	lr
 80118fe:	4610      	mov	r0, r2
 8011900:	e7e9      	b.n	80118d6 <__lo0bits+0x2a>
 8011902:	2000      	movs	r0, #0
 8011904:	4770      	bx	lr
 8011906:	2020      	movs	r0, #32
 8011908:	4770      	bx	lr
	...

0801190c <__i2b>:
 801190c:	b510      	push	{r4, lr}
 801190e:	460c      	mov	r4, r1
 8011910:	2101      	movs	r1, #1
 8011912:	f7ff ff03 	bl	801171c <_Balloc>
 8011916:	4602      	mov	r2, r0
 8011918:	b928      	cbnz	r0, 8011926 <__i2b+0x1a>
 801191a:	4b05      	ldr	r3, [pc, #20]	; (8011930 <__i2b+0x24>)
 801191c:	4805      	ldr	r0, [pc, #20]	; (8011934 <__i2b+0x28>)
 801191e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011922:	f000 fce1 	bl	80122e8 <__assert_func>
 8011926:	2301      	movs	r3, #1
 8011928:	6144      	str	r4, [r0, #20]
 801192a:	6103      	str	r3, [r0, #16]
 801192c:	bd10      	pop	{r4, pc}
 801192e:	bf00      	nop
 8011930:	080155e7 	.word	0x080155e7
 8011934:	080155f8 	.word	0x080155f8

08011938 <__multiply>:
 8011938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801193c:	4691      	mov	r9, r2
 801193e:	690a      	ldr	r2, [r1, #16]
 8011940:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011944:	429a      	cmp	r2, r3
 8011946:	bfb8      	it	lt
 8011948:	460b      	movlt	r3, r1
 801194a:	460c      	mov	r4, r1
 801194c:	bfbc      	itt	lt
 801194e:	464c      	movlt	r4, r9
 8011950:	4699      	movlt	r9, r3
 8011952:	6927      	ldr	r7, [r4, #16]
 8011954:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011958:	68a3      	ldr	r3, [r4, #8]
 801195a:	6861      	ldr	r1, [r4, #4]
 801195c:	eb07 060a 	add.w	r6, r7, sl
 8011960:	42b3      	cmp	r3, r6
 8011962:	b085      	sub	sp, #20
 8011964:	bfb8      	it	lt
 8011966:	3101      	addlt	r1, #1
 8011968:	f7ff fed8 	bl	801171c <_Balloc>
 801196c:	b930      	cbnz	r0, 801197c <__multiply+0x44>
 801196e:	4602      	mov	r2, r0
 8011970:	4b44      	ldr	r3, [pc, #272]	; (8011a84 <__multiply+0x14c>)
 8011972:	4845      	ldr	r0, [pc, #276]	; (8011a88 <__multiply+0x150>)
 8011974:	f240 115d 	movw	r1, #349	; 0x15d
 8011978:	f000 fcb6 	bl	80122e8 <__assert_func>
 801197c:	f100 0514 	add.w	r5, r0, #20
 8011980:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011984:	462b      	mov	r3, r5
 8011986:	2200      	movs	r2, #0
 8011988:	4543      	cmp	r3, r8
 801198a:	d321      	bcc.n	80119d0 <__multiply+0x98>
 801198c:	f104 0314 	add.w	r3, r4, #20
 8011990:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011994:	f109 0314 	add.w	r3, r9, #20
 8011998:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801199c:	9202      	str	r2, [sp, #8]
 801199e:	1b3a      	subs	r2, r7, r4
 80119a0:	3a15      	subs	r2, #21
 80119a2:	f022 0203 	bic.w	r2, r2, #3
 80119a6:	3204      	adds	r2, #4
 80119a8:	f104 0115 	add.w	r1, r4, #21
 80119ac:	428f      	cmp	r7, r1
 80119ae:	bf38      	it	cc
 80119b0:	2204      	movcc	r2, #4
 80119b2:	9201      	str	r2, [sp, #4]
 80119b4:	9a02      	ldr	r2, [sp, #8]
 80119b6:	9303      	str	r3, [sp, #12]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d80c      	bhi.n	80119d6 <__multiply+0x9e>
 80119bc:	2e00      	cmp	r6, #0
 80119be:	dd03      	ble.n	80119c8 <__multiply+0x90>
 80119c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d05a      	beq.n	8011a7e <__multiply+0x146>
 80119c8:	6106      	str	r6, [r0, #16]
 80119ca:	b005      	add	sp, #20
 80119cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d0:	f843 2b04 	str.w	r2, [r3], #4
 80119d4:	e7d8      	b.n	8011988 <__multiply+0x50>
 80119d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80119da:	f1ba 0f00 	cmp.w	sl, #0
 80119de:	d024      	beq.n	8011a2a <__multiply+0xf2>
 80119e0:	f104 0e14 	add.w	lr, r4, #20
 80119e4:	46a9      	mov	r9, r5
 80119e6:	f04f 0c00 	mov.w	ip, #0
 80119ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80119ee:	f8d9 1000 	ldr.w	r1, [r9]
 80119f2:	fa1f fb82 	uxth.w	fp, r2
 80119f6:	b289      	uxth	r1, r1
 80119f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80119fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011a00:	f8d9 2000 	ldr.w	r2, [r9]
 8011a04:	4461      	add	r1, ip
 8011a06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011a0a:	fb0a c20b 	mla	r2, sl, fp, ip
 8011a0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011a12:	b289      	uxth	r1, r1
 8011a14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011a18:	4577      	cmp	r7, lr
 8011a1a:	f849 1b04 	str.w	r1, [r9], #4
 8011a1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011a22:	d8e2      	bhi.n	80119ea <__multiply+0xb2>
 8011a24:	9a01      	ldr	r2, [sp, #4]
 8011a26:	f845 c002 	str.w	ip, [r5, r2]
 8011a2a:	9a03      	ldr	r2, [sp, #12]
 8011a2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011a30:	3304      	adds	r3, #4
 8011a32:	f1b9 0f00 	cmp.w	r9, #0
 8011a36:	d020      	beq.n	8011a7a <__multiply+0x142>
 8011a38:	6829      	ldr	r1, [r5, #0]
 8011a3a:	f104 0c14 	add.w	ip, r4, #20
 8011a3e:	46ae      	mov	lr, r5
 8011a40:	f04f 0a00 	mov.w	sl, #0
 8011a44:	f8bc b000 	ldrh.w	fp, [ip]
 8011a48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011a4c:	fb09 220b 	mla	r2, r9, fp, r2
 8011a50:	4492      	add	sl, r2
 8011a52:	b289      	uxth	r1, r1
 8011a54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011a58:	f84e 1b04 	str.w	r1, [lr], #4
 8011a5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011a60:	f8be 1000 	ldrh.w	r1, [lr]
 8011a64:	0c12      	lsrs	r2, r2, #16
 8011a66:	fb09 1102 	mla	r1, r9, r2, r1
 8011a6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011a6e:	4567      	cmp	r7, ip
 8011a70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011a74:	d8e6      	bhi.n	8011a44 <__multiply+0x10c>
 8011a76:	9a01      	ldr	r2, [sp, #4]
 8011a78:	50a9      	str	r1, [r5, r2]
 8011a7a:	3504      	adds	r5, #4
 8011a7c:	e79a      	b.n	80119b4 <__multiply+0x7c>
 8011a7e:	3e01      	subs	r6, #1
 8011a80:	e79c      	b.n	80119bc <__multiply+0x84>
 8011a82:	bf00      	nop
 8011a84:	080155e7 	.word	0x080155e7
 8011a88:	080155f8 	.word	0x080155f8

08011a8c <__pow5mult>:
 8011a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a90:	4615      	mov	r5, r2
 8011a92:	f012 0203 	ands.w	r2, r2, #3
 8011a96:	4606      	mov	r6, r0
 8011a98:	460f      	mov	r7, r1
 8011a9a:	d007      	beq.n	8011aac <__pow5mult+0x20>
 8011a9c:	4c25      	ldr	r4, [pc, #148]	; (8011b34 <__pow5mult+0xa8>)
 8011a9e:	3a01      	subs	r2, #1
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011aa6:	f7ff fe9b 	bl	80117e0 <__multadd>
 8011aaa:	4607      	mov	r7, r0
 8011aac:	10ad      	asrs	r5, r5, #2
 8011aae:	d03d      	beq.n	8011b2c <__pow5mult+0xa0>
 8011ab0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011ab2:	b97c      	cbnz	r4, 8011ad4 <__pow5mult+0x48>
 8011ab4:	2010      	movs	r0, #16
 8011ab6:	f7ff fe29 	bl	801170c <malloc>
 8011aba:	4602      	mov	r2, r0
 8011abc:	6270      	str	r0, [r6, #36]	; 0x24
 8011abe:	b928      	cbnz	r0, 8011acc <__pow5mult+0x40>
 8011ac0:	4b1d      	ldr	r3, [pc, #116]	; (8011b38 <__pow5mult+0xac>)
 8011ac2:	481e      	ldr	r0, [pc, #120]	; (8011b3c <__pow5mult+0xb0>)
 8011ac4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011ac8:	f000 fc0e 	bl	80122e8 <__assert_func>
 8011acc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011ad0:	6004      	str	r4, [r0, #0]
 8011ad2:	60c4      	str	r4, [r0, #12]
 8011ad4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011ad8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011adc:	b94c      	cbnz	r4, 8011af2 <__pow5mult+0x66>
 8011ade:	f240 2171 	movw	r1, #625	; 0x271
 8011ae2:	4630      	mov	r0, r6
 8011ae4:	f7ff ff12 	bl	801190c <__i2b>
 8011ae8:	2300      	movs	r3, #0
 8011aea:	f8c8 0008 	str.w	r0, [r8, #8]
 8011aee:	4604      	mov	r4, r0
 8011af0:	6003      	str	r3, [r0, #0]
 8011af2:	f04f 0900 	mov.w	r9, #0
 8011af6:	07eb      	lsls	r3, r5, #31
 8011af8:	d50a      	bpl.n	8011b10 <__pow5mult+0x84>
 8011afa:	4639      	mov	r1, r7
 8011afc:	4622      	mov	r2, r4
 8011afe:	4630      	mov	r0, r6
 8011b00:	f7ff ff1a 	bl	8011938 <__multiply>
 8011b04:	4639      	mov	r1, r7
 8011b06:	4680      	mov	r8, r0
 8011b08:	4630      	mov	r0, r6
 8011b0a:	f7ff fe47 	bl	801179c <_Bfree>
 8011b0e:	4647      	mov	r7, r8
 8011b10:	106d      	asrs	r5, r5, #1
 8011b12:	d00b      	beq.n	8011b2c <__pow5mult+0xa0>
 8011b14:	6820      	ldr	r0, [r4, #0]
 8011b16:	b938      	cbnz	r0, 8011b28 <__pow5mult+0x9c>
 8011b18:	4622      	mov	r2, r4
 8011b1a:	4621      	mov	r1, r4
 8011b1c:	4630      	mov	r0, r6
 8011b1e:	f7ff ff0b 	bl	8011938 <__multiply>
 8011b22:	6020      	str	r0, [r4, #0]
 8011b24:	f8c0 9000 	str.w	r9, [r0]
 8011b28:	4604      	mov	r4, r0
 8011b2a:	e7e4      	b.n	8011af6 <__pow5mult+0x6a>
 8011b2c:	4638      	mov	r0, r7
 8011b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b32:	bf00      	nop
 8011b34:	08015748 	.word	0x08015748
 8011b38:	08015575 	.word	0x08015575
 8011b3c:	080155f8 	.word	0x080155f8

08011b40 <__lshift>:
 8011b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b44:	460c      	mov	r4, r1
 8011b46:	6849      	ldr	r1, [r1, #4]
 8011b48:	6923      	ldr	r3, [r4, #16]
 8011b4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011b4e:	68a3      	ldr	r3, [r4, #8]
 8011b50:	4607      	mov	r7, r0
 8011b52:	4691      	mov	r9, r2
 8011b54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011b58:	f108 0601 	add.w	r6, r8, #1
 8011b5c:	42b3      	cmp	r3, r6
 8011b5e:	db0b      	blt.n	8011b78 <__lshift+0x38>
 8011b60:	4638      	mov	r0, r7
 8011b62:	f7ff fddb 	bl	801171c <_Balloc>
 8011b66:	4605      	mov	r5, r0
 8011b68:	b948      	cbnz	r0, 8011b7e <__lshift+0x3e>
 8011b6a:	4602      	mov	r2, r0
 8011b6c:	4b2a      	ldr	r3, [pc, #168]	; (8011c18 <__lshift+0xd8>)
 8011b6e:	482b      	ldr	r0, [pc, #172]	; (8011c1c <__lshift+0xdc>)
 8011b70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011b74:	f000 fbb8 	bl	80122e8 <__assert_func>
 8011b78:	3101      	adds	r1, #1
 8011b7a:	005b      	lsls	r3, r3, #1
 8011b7c:	e7ee      	b.n	8011b5c <__lshift+0x1c>
 8011b7e:	2300      	movs	r3, #0
 8011b80:	f100 0114 	add.w	r1, r0, #20
 8011b84:	f100 0210 	add.w	r2, r0, #16
 8011b88:	4618      	mov	r0, r3
 8011b8a:	4553      	cmp	r3, sl
 8011b8c:	db37      	blt.n	8011bfe <__lshift+0xbe>
 8011b8e:	6920      	ldr	r0, [r4, #16]
 8011b90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b94:	f104 0314 	add.w	r3, r4, #20
 8011b98:	f019 091f 	ands.w	r9, r9, #31
 8011b9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011ba0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011ba4:	d02f      	beq.n	8011c06 <__lshift+0xc6>
 8011ba6:	f1c9 0e20 	rsb	lr, r9, #32
 8011baa:	468a      	mov	sl, r1
 8011bac:	f04f 0c00 	mov.w	ip, #0
 8011bb0:	681a      	ldr	r2, [r3, #0]
 8011bb2:	fa02 f209 	lsl.w	r2, r2, r9
 8011bb6:	ea42 020c 	orr.w	r2, r2, ip
 8011bba:	f84a 2b04 	str.w	r2, [sl], #4
 8011bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bc2:	4298      	cmp	r0, r3
 8011bc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011bc8:	d8f2      	bhi.n	8011bb0 <__lshift+0x70>
 8011bca:	1b03      	subs	r3, r0, r4
 8011bcc:	3b15      	subs	r3, #21
 8011bce:	f023 0303 	bic.w	r3, r3, #3
 8011bd2:	3304      	adds	r3, #4
 8011bd4:	f104 0215 	add.w	r2, r4, #21
 8011bd8:	4290      	cmp	r0, r2
 8011bda:	bf38      	it	cc
 8011bdc:	2304      	movcc	r3, #4
 8011bde:	f841 c003 	str.w	ip, [r1, r3]
 8011be2:	f1bc 0f00 	cmp.w	ip, #0
 8011be6:	d001      	beq.n	8011bec <__lshift+0xac>
 8011be8:	f108 0602 	add.w	r6, r8, #2
 8011bec:	3e01      	subs	r6, #1
 8011bee:	4638      	mov	r0, r7
 8011bf0:	612e      	str	r6, [r5, #16]
 8011bf2:	4621      	mov	r1, r4
 8011bf4:	f7ff fdd2 	bl	801179c <_Bfree>
 8011bf8:	4628      	mov	r0, r5
 8011bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8011c02:	3301      	adds	r3, #1
 8011c04:	e7c1      	b.n	8011b8a <__lshift+0x4a>
 8011c06:	3904      	subs	r1, #4
 8011c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011c10:	4298      	cmp	r0, r3
 8011c12:	d8f9      	bhi.n	8011c08 <__lshift+0xc8>
 8011c14:	e7ea      	b.n	8011bec <__lshift+0xac>
 8011c16:	bf00      	nop
 8011c18:	080155e7 	.word	0x080155e7
 8011c1c:	080155f8 	.word	0x080155f8

08011c20 <__mcmp>:
 8011c20:	b530      	push	{r4, r5, lr}
 8011c22:	6902      	ldr	r2, [r0, #16]
 8011c24:	690c      	ldr	r4, [r1, #16]
 8011c26:	1b12      	subs	r2, r2, r4
 8011c28:	d10e      	bne.n	8011c48 <__mcmp+0x28>
 8011c2a:	f100 0314 	add.w	r3, r0, #20
 8011c2e:	3114      	adds	r1, #20
 8011c30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011c34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011c38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011c3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011c40:	42a5      	cmp	r5, r4
 8011c42:	d003      	beq.n	8011c4c <__mcmp+0x2c>
 8011c44:	d305      	bcc.n	8011c52 <__mcmp+0x32>
 8011c46:	2201      	movs	r2, #1
 8011c48:	4610      	mov	r0, r2
 8011c4a:	bd30      	pop	{r4, r5, pc}
 8011c4c:	4283      	cmp	r3, r0
 8011c4e:	d3f3      	bcc.n	8011c38 <__mcmp+0x18>
 8011c50:	e7fa      	b.n	8011c48 <__mcmp+0x28>
 8011c52:	f04f 32ff 	mov.w	r2, #4294967295
 8011c56:	e7f7      	b.n	8011c48 <__mcmp+0x28>

08011c58 <__mdiff>:
 8011c58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c5c:	460c      	mov	r4, r1
 8011c5e:	4606      	mov	r6, r0
 8011c60:	4611      	mov	r1, r2
 8011c62:	4620      	mov	r0, r4
 8011c64:	4690      	mov	r8, r2
 8011c66:	f7ff ffdb 	bl	8011c20 <__mcmp>
 8011c6a:	1e05      	subs	r5, r0, #0
 8011c6c:	d110      	bne.n	8011c90 <__mdiff+0x38>
 8011c6e:	4629      	mov	r1, r5
 8011c70:	4630      	mov	r0, r6
 8011c72:	f7ff fd53 	bl	801171c <_Balloc>
 8011c76:	b930      	cbnz	r0, 8011c86 <__mdiff+0x2e>
 8011c78:	4b3a      	ldr	r3, [pc, #232]	; (8011d64 <__mdiff+0x10c>)
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	f240 2132 	movw	r1, #562	; 0x232
 8011c80:	4839      	ldr	r0, [pc, #228]	; (8011d68 <__mdiff+0x110>)
 8011c82:	f000 fb31 	bl	80122e8 <__assert_func>
 8011c86:	2301      	movs	r3, #1
 8011c88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011c8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c90:	bfa4      	itt	ge
 8011c92:	4643      	movge	r3, r8
 8011c94:	46a0      	movge	r8, r4
 8011c96:	4630      	mov	r0, r6
 8011c98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011c9c:	bfa6      	itte	ge
 8011c9e:	461c      	movge	r4, r3
 8011ca0:	2500      	movge	r5, #0
 8011ca2:	2501      	movlt	r5, #1
 8011ca4:	f7ff fd3a 	bl	801171c <_Balloc>
 8011ca8:	b920      	cbnz	r0, 8011cb4 <__mdiff+0x5c>
 8011caa:	4b2e      	ldr	r3, [pc, #184]	; (8011d64 <__mdiff+0x10c>)
 8011cac:	4602      	mov	r2, r0
 8011cae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011cb2:	e7e5      	b.n	8011c80 <__mdiff+0x28>
 8011cb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011cb8:	6926      	ldr	r6, [r4, #16]
 8011cba:	60c5      	str	r5, [r0, #12]
 8011cbc:	f104 0914 	add.w	r9, r4, #20
 8011cc0:	f108 0514 	add.w	r5, r8, #20
 8011cc4:	f100 0e14 	add.w	lr, r0, #20
 8011cc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011ccc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011cd0:	f108 0210 	add.w	r2, r8, #16
 8011cd4:	46f2      	mov	sl, lr
 8011cd6:	2100      	movs	r1, #0
 8011cd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8011cdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011ce0:	fa1f f883 	uxth.w	r8, r3
 8011ce4:	fa11 f18b 	uxtah	r1, r1, fp
 8011ce8:	0c1b      	lsrs	r3, r3, #16
 8011cea:	eba1 0808 	sub.w	r8, r1, r8
 8011cee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011cf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011cf6:	fa1f f888 	uxth.w	r8, r8
 8011cfa:	1419      	asrs	r1, r3, #16
 8011cfc:	454e      	cmp	r6, r9
 8011cfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011d02:	f84a 3b04 	str.w	r3, [sl], #4
 8011d06:	d8e7      	bhi.n	8011cd8 <__mdiff+0x80>
 8011d08:	1b33      	subs	r3, r6, r4
 8011d0a:	3b15      	subs	r3, #21
 8011d0c:	f023 0303 	bic.w	r3, r3, #3
 8011d10:	3304      	adds	r3, #4
 8011d12:	3415      	adds	r4, #21
 8011d14:	42a6      	cmp	r6, r4
 8011d16:	bf38      	it	cc
 8011d18:	2304      	movcc	r3, #4
 8011d1a:	441d      	add	r5, r3
 8011d1c:	4473      	add	r3, lr
 8011d1e:	469e      	mov	lr, r3
 8011d20:	462e      	mov	r6, r5
 8011d22:	4566      	cmp	r6, ip
 8011d24:	d30e      	bcc.n	8011d44 <__mdiff+0xec>
 8011d26:	f10c 0203 	add.w	r2, ip, #3
 8011d2a:	1b52      	subs	r2, r2, r5
 8011d2c:	f022 0203 	bic.w	r2, r2, #3
 8011d30:	3d03      	subs	r5, #3
 8011d32:	45ac      	cmp	ip, r5
 8011d34:	bf38      	it	cc
 8011d36:	2200      	movcc	r2, #0
 8011d38:	441a      	add	r2, r3
 8011d3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011d3e:	b17b      	cbz	r3, 8011d60 <__mdiff+0x108>
 8011d40:	6107      	str	r7, [r0, #16]
 8011d42:	e7a3      	b.n	8011c8c <__mdiff+0x34>
 8011d44:	f856 8b04 	ldr.w	r8, [r6], #4
 8011d48:	fa11 f288 	uxtah	r2, r1, r8
 8011d4c:	1414      	asrs	r4, r2, #16
 8011d4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011d52:	b292      	uxth	r2, r2
 8011d54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011d58:	f84e 2b04 	str.w	r2, [lr], #4
 8011d5c:	1421      	asrs	r1, r4, #16
 8011d5e:	e7e0      	b.n	8011d22 <__mdiff+0xca>
 8011d60:	3f01      	subs	r7, #1
 8011d62:	e7ea      	b.n	8011d3a <__mdiff+0xe2>
 8011d64:	080155e7 	.word	0x080155e7
 8011d68:	080155f8 	.word	0x080155f8

08011d6c <__d2b>:
 8011d6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d70:	4689      	mov	r9, r1
 8011d72:	2101      	movs	r1, #1
 8011d74:	ec57 6b10 	vmov	r6, r7, d0
 8011d78:	4690      	mov	r8, r2
 8011d7a:	f7ff fccf 	bl	801171c <_Balloc>
 8011d7e:	4604      	mov	r4, r0
 8011d80:	b930      	cbnz	r0, 8011d90 <__d2b+0x24>
 8011d82:	4602      	mov	r2, r0
 8011d84:	4b25      	ldr	r3, [pc, #148]	; (8011e1c <__d2b+0xb0>)
 8011d86:	4826      	ldr	r0, [pc, #152]	; (8011e20 <__d2b+0xb4>)
 8011d88:	f240 310a 	movw	r1, #778	; 0x30a
 8011d8c:	f000 faac 	bl	80122e8 <__assert_func>
 8011d90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011d94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011d98:	bb35      	cbnz	r5, 8011de8 <__d2b+0x7c>
 8011d9a:	2e00      	cmp	r6, #0
 8011d9c:	9301      	str	r3, [sp, #4]
 8011d9e:	d028      	beq.n	8011df2 <__d2b+0x86>
 8011da0:	4668      	mov	r0, sp
 8011da2:	9600      	str	r6, [sp, #0]
 8011da4:	f7ff fd82 	bl	80118ac <__lo0bits>
 8011da8:	9900      	ldr	r1, [sp, #0]
 8011daa:	b300      	cbz	r0, 8011dee <__d2b+0x82>
 8011dac:	9a01      	ldr	r2, [sp, #4]
 8011dae:	f1c0 0320 	rsb	r3, r0, #32
 8011db2:	fa02 f303 	lsl.w	r3, r2, r3
 8011db6:	430b      	orrs	r3, r1
 8011db8:	40c2      	lsrs	r2, r0
 8011dba:	6163      	str	r3, [r4, #20]
 8011dbc:	9201      	str	r2, [sp, #4]
 8011dbe:	9b01      	ldr	r3, [sp, #4]
 8011dc0:	61a3      	str	r3, [r4, #24]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	bf14      	ite	ne
 8011dc6:	2202      	movne	r2, #2
 8011dc8:	2201      	moveq	r2, #1
 8011dca:	6122      	str	r2, [r4, #16]
 8011dcc:	b1d5      	cbz	r5, 8011e04 <__d2b+0x98>
 8011dce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011dd2:	4405      	add	r5, r0
 8011dd4:	f8c9 5000 	str.w	r5, [r9]
 8011dd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011ddc:	f8c8 0000 	str.w	r0, [r8]
 8011de0:	4620      	mov	r0, r4
 8011de2:	b003      	add	sp, #12
 8011de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011dec:	e7d5      	b.n	8011d9a <__d2b+0x2e>
 8011dee:	6161      	str	r1, [r4, #20]
 8011df0:	e7e5      	b.n	8011dbe <__d2b+0x52>
 8011df2:	a801      	add	r0, sp, #4
 8011df4:	f7ff fd5a 	bl	80118ac <__lo0bits>
 8011df8:	9b01      	ldr	r3, [sp, #4]
 8011dfa:	6163      	str	r3, [r4, #20]
 8011dfc:	2201      	movs	r2, #1
 8011dfe:	6122      	str	r2, [r4, #16]
 8011e00:	3020      	adds	r0, #32
 8011e02:	e7e3      	b.n	8011dcc <__d2b+0x60>
 8011e04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011e08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011e0c:	f8c9 0000 	str.w	r0, [r9]
 8011e10:	6918      	ldr	r0, [r3, #16]
 8011e12:	f7ff fd2b 	bl	801186c <__hi0bits>
 8011e16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011e1a:	e7df      	b.n	8011ddc <__d2b+0x70>
 8011e1c:	080155e7 	.word	0x080155e7
 8011e20:	080155f8 	.word	0x080155f8

08011e24 <_calloc_r>:
 8011e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e26:	fba1 2402 	umull	r2, r4, r1, r2
 8011e2a:	b94c      	cbnz	r4, 8011e40 <_calloc_r+0x1c>
 8011e2c:	4611      	mov	r1, r2
 8011e2e:	9201      	str	r2, [sp, #4]
 8011e30:	f000 f87a 	bl	8011f28 <_malloc_r>
 8011e34:	9a01      	ldr	r2, [sp, #4]
 8011e36:	4605      	mov	r5, r0
 8011e38:	b930      	cbnz	r0, 8011e48 <_calloc_r+0x24>
 8011e3a:	4628      	mov	r0, r5
 8011e3c:	b003      	add	sp, #12
 8011e3e:	bd30      	pop	{r4, r5, pc}
 8011e40:	220c      	movs	r2, #12
 8011e42:	6002      	str	r2, [r0, #0]
 8011e44:	2500      	movs	r5, #0
 8011e46:	e7f8      	b.n	8011e3a <_calloc_r+0x16>
 8011e48:	4621      	mov	r1, r4
 8011e4a:	f7fe f94f 	bl	80100ec <memset>
 8011e4e:	e7f4      	b.n	8011e3a <_calloc_r+0x16>

08011e50 <_free_r>:
 8011e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e52:	2900      	cmp	r1, #0
 8011e54:	d044      	beq.n	8011ee0 <_free_r+0x90>
 8011e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e5a:	9001      	str	r0, [sp, #4]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	f1a1 0404 	sub.w	r4, r1, #4
 8011e62:	bfb8      	it	lt
 8011e64:	18e4      	addlt	r4, r4, r3
 8011e66:	f000 fa9b 	bl	80123a0 <__malloc_lock>
 8011e6a:	4a1e      	ldr	r2, [pc, #120]	; (8011ee4 <_free_r+0x94>)
 8011e6c:	9801      	ldr	r0, [sp, #4]
 8011e6e:	6813      	ldr	r3, [r2, #0]
 8011e70:	b933      	cbnz	r3, 8011e80 <_free_r+0x30>
 8011e72:	6063      	str	r3, [r4, #4]
 8011e74:	6014      	str	r4, [r2, #0]
 8011e76:	b003      	add	sp, #12
 8011e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e7c:	f000 ba96 	b.w	80123ac <__malloc_unlock>
 8011e80:	42a3      	cmp	r3, r4
 8011e82:	d908      	bls.n	8011e96 <_free_r+0x46>
 8011e84:	6825      	ldr	r5, [r4, #0]
 8011e86:	1961      	adds	r1, r4, r5
 8011e88:	428b      	cmp	r3, r1
 8011e8a:	bf01      	itttt	eq
 8011e8c:	6819      	ldreq	r1, [r3, #0]
 8011e8e:	685b      	ldreq	r3, [r3, #4]
 8011e90:	1949      	addeq	r1, r1, r5
 8011e92:	6021      	streq	r1, [r4, #0]
 8011e94:	e7ed      	b.n	8011e72 <_free_r+0x22>
 8011e96:	461a      	mov	r2, r3
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	b10b      	cbz	r3, 8011ea0 <_free_r+0x50>
 8011e9c:	42a3      	cmp	r3, r4
 8011e9e:	d9fa      	bls.n	8011e96 <_free_r+0x46>
 8011ea0:	6811      	ldr	r1, [r2, #0]
 8011ea2:	1855      	adds	r5, r2, r1
 8011ea4:	42a5      	cmp	r5, r4
 8011ea6:	d10b      	bne.n	8011ec0 <_free_r+0x70>
 8011ea8:	6824      	ldr	r4, [r4, #0]
 8011eaa:	4421      	add	r1, r4
 8011eac:	1854      	adds	r4, r2, r1
 8011eae:	42a3      	cmp	r3, r4
 8011eb0:	6011      	str	r1, [r2, #0]
 8011eb2:	d1e0      	bne.n	8011e76 <_free_r+0x26>
 8011eb4:	681c      	ldr	r4, [r3, #0]
 8011eb6:	685b      	ldr	r3, [r3, #4]
 8011eb8:	6053      	str	r3, [r2, #4]
 8011eba:	4421      	add	r1, r4
 8011ebc:	6011      	str	r1, [r2, #0]
 8011ebe:	e7da      	b.n	8011e76 <_free_r+0x26>
 8011ec0:	d902      	bls.n	8011ec8 <_free_r+0x78>
 8011ec2:	230c      	movs	r3, #12
 8011ec4:	6003      	str	r3, [r0, #0]
 8011ec6:	e7d6      	b.n	8011e76 <_free_r+0x26>
 8011ec8:	6825      	ldr	r5, [r4, #0]
 8011eca:	1961      	adds	r1, r4, r5
 8011ecc:	428b      	cmp	r3, r1
 8011ece:	bf04      	itt	eq
 8011ed0:	6819      	ldreq	r1, [r3, #0]
 8011ed2:	685b      	ldreq	r3, [r3, #4]
 8011ed4:	6063      	str	r3, [r4, #4]
 8011ed6:	bf04      	itt	eq
 8011ed8:	1949      	addeq	r1, r1, r5
 8011eda:	6021      	streq	r1, [r4, #0]
 8011edc:	6054      	str	r4, [r2, #4]
 8011ede:	e7ca      	b.n	8011e76 <_free_r+0x26>
 8011ee0:	b003      	add	sp, #12
 8011ee2:	bd30      	pop	{r4, r5, pc}
 8011ee4:	200068b8 	.word	0x200068b8

08011ee8 <sbrk_aligned>:
 8011ee8:	b570      	push	{r4, r5, r6, lr}
 8011eea:	4e0e      	ldr	r6, [pc, #56]	; (8011f24 <sbrk_aligned+0x3c>)
 8011eec:	460c      	mov	r4, r1
 8011eee:	6831      	ldr	r1, [r6, #0]
 8011ef0:	4605      	mov	r5, r0
 8011ef2:	b911      	cbnz	r1, 8011efa <sbrk_aligned+0x12>
 8011ef4:	f000 f9e8 	bl	80122c8 <_sbrk_r>
 8011ef8:	6030      	str	r0, [r6, #0]
 8011efa:	4621      	mov	r1, r4
 8011efc:	4628      	mov	r0, r5
 8011efe:	f000 f9e3 	bl	80122c8 <_sbrk_r>
 8011f02:	1c43      	adds	r3, r0, #1
 8011f04:	d00a      	beq.n	8011f1c <sbrk_aligned+0x34>
 8011f06:	1cc4      	adds	r4, r0, #3
 8011f08:	f024 0403 	bic.w	r4, r4, #3
 8011f0c:	42a0      	cmp	r0, r4
 8011f0e:	d007      	beq.n	8011f20 <sbrk_aligned+0x38>
 8011f10:	1a21      	subs	r1, r4, r0
 8011f12:	4628      	mov	r0, r5
 8011f14:	f000 f9d8 	bl	80122c8 <_sbrk_r>
 8011f18:	3001      	adds	r0, #1
 8011f1a:	d101      	bne.n	8011f20 <sbrk_aligned+0x38>
 8011f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8011f20:	4620      	mov	r0, r4
 8011f22:	bd70      	pop	{r4, r5, r6, pc}
 8011f24:	200068bc 	.word	0x200068bc

08011f28 <_malloc_r>:
 8011f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f2c:	1ccd      	adds	r5, r1, #3
 8011f2e:	f025 0503 	bic.w	r5, r5, #3
 8011f32:	3508      	adds	r5, #8
 8011f34:	2d0c      	cmp	r5, #12
 8011f36:	bf38      	it	cc
 8011f38:	250c      	movcc	r5, #12
 8011f3a:	2d00      	cmp	r5, #0
 8011f3c:	4607      	mov	r7, r0
 8011f3e:	db01      	blt.n	8011f44 <_malloc_r+0x1c>
 8011f40:	42a9      	cmp	r1, r5
 8011f42:	d905      	bls.n	8011f50 <_malloc_r+0x28>
 8011f44:	230c      	movs	r3, #12
 8011f46:	603b      	str	r3, [r7, #0]
 8011f48:	2600      	movs	r6, #0
 8011f4a:	4630      	mov	r0, r6
 8011f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f50:	4e2e      	ldr	r6, [pc, #184]	; (801200c <_malloc_r+0xe4>)
 8011f52:	f000 fa25 	bl	80123a0 <__malloc_lock>
 8011f56:	6833      	ldr	r3, [r6, #0]
 8011f58:	461c      	mov	r4, r3
 8011f5a:	bb34      	cbnz	r4, 8011faa <_malloc_r+0x82>
 8011f5c:	4629      	mov	r1, r5
 8011f5e:	4638      	mov	r0, r7
 8011f60:	f7ff ffc2 	bl	8011ee8 <sbrk_aligned>
 8011f64:	1c43      	adds	r3, r0, #1
 8011f66:	4604      	mov	r4, r0
 8011f68:	d14d      	bne.n	8012006 <_malloc_r+0xde>
 8011f6a:	6834      	ldr	r4, [r6, #0]
 8011f6c:	4626      	mov	r6, r4
 8011f6e:	2e00      	cmp	r6, #0
 8011f70:	d140      	bne.n	8011ff4 <_malloc_r+0xcc>
 8011f72:	6823      	ldr	r3, [r4, #0]
 8011f74:	4631      	mov	r1, r6
 8011f76:	4638      	mov	r0, r7
 8011f78:	eb04 0803 	add.w	r8, r4, r3
 8011f7c:	f000 f9a4 	bl	80122c8 <_sbrk_r>
 8011f80:	4580      	cmp	r8, r0
 8011f82:	d13a      	bne.n	8011ffa <_malloc_r+0xd2>
 8011f84:	6821      	ldr	r1, [r4, #0]
 8011f86:	3503      	adds	r5, #3
 8011f88:	1a6d      	subs	r5, r5, r1
 8011f8a:	f025 0503 	bic.w	r5, r5, #3
 8011f8e:	3508      	adds	r5, #8
 8011f90:	2d0c      	cmp	r5, #12
 8011f92:	bf38      	it	cc
 8011f94:	250c      	movcc	r5, #12
 8011f96:	4629      	mov	r1, r5
 8011f98:	4638      	mov	r0, r7
 8011f9a:	f7ff ffa5 	bl	8011ee8 <sbrk_aligned>
 8011f9e:	3001      	adds	r0, #1
 8011fa0:	d02b      	beq.n	8011ffa <_malloc_r+0xd2>
 8011fa2:	6823      	ldr	r3, [r4, #0]
 8011fa4:	442b      	add	r3, r5
 8011fa6:	6023      	str	r3, [r4, #0]
 8011fa8:	e00e      	b.n	8011fc8 <_malloc_r+0xa0>
 8011faa:	6822      	ldr	r2, [r4, #0]
 8011fac:	1b52      	subs	r2, r2, r5
 8011fae:	d41e      	bmi.n	8011fee <_malloc_r+0xc6>
 8011fb0:	2a0b      	cmp	r2, #11
 8011fb2:	d916      	bls.n	8011fe2 <_malloc_r+0xba>
 8011fb4:	1961      	adds	r1, r4, r5
 8011fb6:	42a3      	cmp	r3, r4
 8011fb8:	6025      	str	r5, [r4, #0]
 8011fba:	bf18      	it	ne
 8011fbc:	6059      	strne	r1, [r3, #4]
 8011fbe:	6863      	ldr	r3, [r4, #4]
 8011fc0:	bf08      	it	eq
 8011fc2:	6031      	streq	r1, [r6, #0]
 8011fc4:	5162      	str	r2, [r4, r5]
 8011fc6:	604b      	str	r3, [r1, #4]
 8011fc8:	4638      	mov	r0, r7
 8011fca:	f104 060b 	add.w	r6, r4, #11
 8011fce:	f000 f9ed 	bl	80123ac <__malloc_unlock>
 8011fd2:	f026 0607 	bic.w	r6, r6, #7
 8011fd6:	1d23      	adds	r3, r4, #4
 8011fd8:	1af2      	subs	r2, r6, r3
 8011fda:	d0b6      	beq.n	8011f4a <_malloc_r+0x22>
 8011fdc:	1b9b      	subs	r3, r3, r6
 8011fde:	50a3      	str	r3, [r4, r2]
 8011fe0:	e7b3      	b.n	8011f4a <_malloc_r+0x22>
 8011fe2:	6862      	ldr	r2, [r4, #4]
 8011fe4:	42a3      	cmp	r3, r4
 8011fe6:	bf0c      	ite	eq
 8011fe8:	6032      	streq	r2, [r6, #0]
 8011fea:	605a      	strne	r2, [r3, #4]
 8011fec:	e7ec      	b.n	8011fc8 <_malloc_r+0xa0>
 8011fee:	4623      	mov	r3, r4
 8011ff0:	6864      	ldr	r4, [r4, #4]
 8011ff2:	e7b2      	b.n	8011f5a <_malloc_r+0x32>
 8011ff4:	4634      	mov	r4, r6
 8011ff6:	6876      	ldr	r6, [r6, #4]
 8011ff8:	e7b9      	b.n	8011f6e <_malloc_r+0x46>
 8011ffa:	230c      	movs	r3, #12
 8011ffc:	603b      	str	r3, [r7, #0]
 8011ffe:	4638      	mov	r0, r7
 8012000:	f000 f9d4 	bl	80123ac <__malloc_unlock>
 8012004:	e7a1      	b.n	8011f4a <_malloc_r+0x22>
 8012006:	6025      	str	r5, [r4, #0]
 8012008:	e7de      	b.n	8011fc8 <_malloc_r+0xa0>
 801200a:	bf00      	nop
 801200c:	200068b8 	.word	0x200068b8

08012010 <__ssputs_r>:
 8012010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012014:	688e      	ldr	r6, [r1, #8]
 8012016:	429e      	cmp	r6, r3
 8012018:	4682      	mov	sl, r0
 801201a:	460c      	mov	r4, r1
 801201c:	4690      	mov	r8, r2
 801201e:	461f      	mov	r7, r3
 8012020:	d838      	bhi.n	8012094 <__ssputs_r+0x84>
 8012022:	898a      	ldrh	r2, [r1, #12]
 8012024:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012028:	d032      	beq.n	8012090 <__ssputs_r+0x80>
 801202a:	6825      	ldr	r5, [r4, #0]
 801202c:	6909      	ldr	r1, [r1, #16]
 801202e:	eba5 0901 	sub.w	r9, r5, r1
 8012032:	6965      	ldr	r5, [r4, #20]
 8012034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801203c:	3301      	adds	r3, #1
 801203e:	444b      	add	r3, r9
 8012040:	106d      	asrs	r5, r5, #1
 8012042:	429d      	cmp	r5, r3
 8012044:	bf38      	it	cc
 8012046:	461d      	movcc	r5, r3
 8012048:	0553      	lsls	r3, r2, #21
 801204a:	d531      	bpl.n	80120b0 <__ssputs_r+0xa0>
 801204c:	4629      	mov	r1, r5
 801204e:	f7ff ff6b 	bl	8011f28 <_malloc_r>
 8012052:	4606      	mov	r6, r0
 8012054:	b950      	cbnz	r0, 801206c <__ssputs_r+0x5c>
 8012056:	230c      	movs	r3, #12
 8012058:	f8ca 3000 	str.w	r3, [sl]
 801205c:	89a3      	ldrh	r3, [r4, #12]
 801205e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012062:	81a3      	strh	r3, [r4, #12]
 8012064:	f04f 30ff 	mov.w	r0, #4294967295
 8012068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801206c:	6921      	ldr	r1, [r4, #16]
 801206e:	464a      	mov	r2, r9
 8012070:	f7fe f82e 	bl	80100d0 <memcpy>
 8012074:	89a3      	ldrh	r3, [r4, #12]
 8012076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801207a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801207e:	81a3      	strh	r3, [r4, #12]
 8012080:	6126      	str	r6, [r4, #16]
 8012082:	6165      	str	r5, [r4, #20]
 8012084:	444e      	add	r6, r9
 8012086:	eba5 0509 	sub.w	r5, r5, r9
 801208a:	6026      	str	r6, [r4, #0]
 801208c:	60a5      	str	r5, [r4, #8]
 801208e:	463e      	mov	r6, r7
 8012090:	42be      	cmp	r6, r7
 8012092:	d900      	bls.n	8012096 <__ssputs_r+0x86>
 8012094:	463e      	mov	r6, r7
 8012096:	6820      	ldr	r0, [r4, #0]
 8012098:	4632      	mov	r2, r6
 801209a:	4641      	mov	r1, r8
 801209c:	f000 f966 	bl	801236c <memmove>
 80120a0:	68a3      	ldr	r3, [r4, #8]
 80120a2:	1b9b      	subs	r3, r3, r6
 80120a4:	60a3      	str	r3, [r4, #8]
 80120a6:	6823      	ldr	r3, [r4, #0]
 80120a8:	4433      	add	r3, r6
 80120aa:	6023      	str	r3, [r4, #0]
 80120ac:	2000      	movs	r0, #0
 80120ae:	e7db      	b.n	8012068 <__ssputs_r+0x58>
 80120b0:	462a      	mov	r2, r5
 80120b2:	f000 f981 	bl	80123b8 <_realloc_r>
 80120b6:	4606      	mov	r6, r0
 80120b8:	2800      	cmp	r0, #0
 80120ba:	d1e1      	bne.n	8012080 <__ssputs_r+0x70>
 80120bc:	6921      	ldr	r1, [r4, #16]
 80120be:	4650      	mov	r0, sl
 80120c0:	f7ff fec6 	bl	8011e50 <_free_r>
 80120c4:	e7c7      	b.n	8012056 <__ssputs_r+0x46>
	...

080120c8 <_svfiprintf_r>:
 80120c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120cc:	4698      	mov	r8, r3
 80120ce:	898b      	ldrh	r3, [r1, #12]
 80120d0:	061b      	lsls	r3, r3, #24
 80120d2:	b09d      	sub	sp, #116	; 0x74
 80120d4:	4607      	mov	r7, r0
 80120d6:	460d      	mov	r5, r1
 80120d8:	4614      	mov	r4, r2
 80120da:	d50e      	bpl.n	80120fa <_svfiprintf_r+0x32>
 80120dc:	690b      	ldr	r3, [r1, #16]
 80120de:	b963      	cbnz	r3, 80120fa <_svfiprintf_r+0x32>
 80120e0:	2140      	movs	r1, #64	; 0x40
 80120e2:	f7ff ff21 	bl	8011f28 <_malloc_r>
 80120e6:	6028      	str	r0, [r5, #0]
 80120e8:	6128      	str	r0, [r5, #16]
 80120ea:	b920      	cbnz	r0, 80120f6 <_svfiprintf_r+0x2e>
 80120ec:	230c      	movs	r3, #12
 80120ee:	603b      	str	r3, [r7, #0]
 80120f0:	f04f 30ff 	mov.w	r0, #4294967295
 80120f4:	e0d1      	b.n	801229a <_svfiprintf_r+0x1d2>
 80120f6:	2340      	movs	r3, #64	; 0x40
 80120f8:	616b      	str	r3, [r5, #20]
 80120fa:	2300      	movs	r3, #0
 80120fc:	9309      	str	r3, [sp, #36]	; 0x24
 80120fe:	2320      	movs	r3, #32
 8012100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012104:	f8cd 800c 	str.w	r8, [sp, #12]
 8012108:	2330      	movs	r3, #48	; 0x30
 801210a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80122b4 <_svfiprintf_r+0x1ec>
 801210e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012112:	f04f 0901 	mov.w	r9, #1
 8012116:	4623      	mov	r3, r4
 8012118:	469a      	mov	sl, r3
 801211a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801211e:	b10a      	cbz	r2, 8012124 <_svfiprintf_r+0x5c>
 8012120:	2a25      	cmp	r2, #37	; 0x25
 8012122:	d1f9      	bne.n	8012118 <_svfiprintf_r+0x50>
 8012124:	ebba 0b04 	subs.w	fp, sl, r4
 8012128:	d00b      	beq.n	8012142 <_svfiprintf_r+0x7a>
 801212a:	465b      	mov	r3, fp
 801212c:	4622      	mov	r2, r4
 801212e:	4629      	mov	r1, r5
 8012130:	4638      	mov	r0, r7
 8012132:	f7ff ff6d 	bl	8012010 <__ssputs_r>
 8012136:	3001      	adds	r0, #1
 8012138:	f000 80aa 	beq.w	8012290 <_svfiprintf_r+0x1c8>
 801213c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801213e:	445a      	add	r2, fp
 8012140:	9209      	str	r2, [sp, #36]	; 0x24
 8012142:	f89a 3000 	ldrb.w	r3, [sl]
 8012146:	2b00      	cmp	r3, #0
 8012148:	f000 80a2 	beq.w	8012290 <_svfiprintf_r+0x1c8>
 801214c:	2300      	movs	r3, #0
 801214e:	f04f 32ff 	mov.w	r2, #4294967295
 8012152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012156:	f10a 0a01 	add.w	sl, sl, #1
 801215a:	9304      	str	r3, [sp, #16]
 801215c:	9307      	str	r3, [sp, #28]
 801215e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012162:	931a      	str	r3, [sp, #104]	; 0x68
 8012164:	4654      	mov	r4, sl
 8012166:	2205      	movs	r2, #5
 8012168:	f814 1b01 	ldrb.w	r1, [r4], #1
 801216c:	4851      	ldr	r0, [pc, #324]	; (80122b4 <_svfiprintf_r+0x1ec>)
 801216e:	f7ee f837 	bl	80001e0 <memchr>
 8012172:	9a04      	ldr	r2, [sp, #16]
 8012174:	b9d8      	cbnz	r0, 80121ae <_svfiprintf_r+0xe6>
 8012176:	06d0      	lsls	r0, r2, #27
 8012178:	bf44      	itt	mi
 801217a:	2320      	movmi	r3, #32
 801217c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012180:	0711      	lsls	r1, r2, #28
 8012182:	bf44      	itt	mi
 8012184:	232b      	movmi	r3, #43	; 0x2b
 8012186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801218a:	f89a 3000 	ldrb.w	r3, [sl]
 801218e:	2b2a      	cmp	r3, #42	; 0x2a
 8012190:	d015      	beq.n	80121be <_svfiprintf_r+0xf6>
 8012192:	9a07      	ldr	r2, [sp, #28]
 8012194:	4654      	mov	r4, sl
 8012196:	2000      	movs	r0, #0
 8012198:	f04f 0c0a 	mov.w	ip, #10
 801219c:	4621      	mov	r1, r4
 801219e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121a2:	3b30      	subs	r3, #48	; 0x30
 80121a4:	2b09      	cmp	r3, #9
 80121a6:	d94e      	bls.n	8012246 <_svfiprintf_r+0x17e>
 80121a8:	b1b0      	cbz	r0, 80121d8 <_svfiprintf_r+0x110>
 80121aa:	9207      	str	r2, [sp, #28]
 80121ac:	e014      	b.n	80121d8 <_svfiprintf_r+0x110>
 80121ae:	eba0 0308 	sub.w	r3, r0, r8
 80121b2:	fa09 f303 	lsl.w	r3, r9, r3
 80121b6:	4313      	orrs	r3, r2
 80121b8:	9304      	str	r3, [sp, #16]
 80121ba:	46a2      	mov	sl, r4
 80121bc:	e7d2      	b.n	8012164 <_svfiprintf_r+0x9c>
 80121be:	9b03      	ldr	r3, [sp, #12]
 80121c0:	1d19      	adds	r1, r3, #4
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	9103      	str	r1, [sp, #12]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	bfbb      	ittet	lt
 80121ca:	425b      	neglt	r3, r3
 80121cc:	f042 0202 	orrlt.w	r2, r2, #2
 80121d0:	9307      	strge	r3, [sp, #28]
 80121d2:	9307      	strlt	r3, [sp, #28]
 80121d4:	bfb8      	it	lt
 80121d6:	9204      	strlt	r2, [sp, #16]
 80121d8:	7823      	ldrb	r3, [r4, #0]
 80121da:	2b2e      	cmp	r3, #46	; 0x2e
 80121dc:	d10c      	bne.n	80121f8 <_svfiprintf_r+0x130>
 80121de:	7863      	ldrb	r3, [r4, #1]
 80121e0:	2b2a      	cmp	r3, #42	; 0x2a
 80121e2:	d135      	bne.n	8012250 <_svfiprintf_r+0x188>
 80121e4:	9b03      	ldr	r3, [sp, #12]
 80121e6:	1d1a      	adds	r2, r3, #4
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	9203      	str	r2, [sp, #12]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	bfb8      	it	lt
 80121f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80121f4:	3402      	adds	r4, #2
 80121f6:	9305      	str	r3, [sp, #20]
 80121f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80122c4 <_svfiprintf_r+0x1fc>
 80121fc:	7821      	ldrb	r1, [r4, #0]
 80121fe:	2203      	movs	r2, #3
 8012200:	4650      	mov	r0, sl
 8012202:	f7ed ffed 	bl	80001e0 <memchr>
 8012206:	b140      	cbz	r0, 801221a <_svfiprintf_r+0x152>
 8012208:	2340      	movs	r3, #64	; 0x40
 801220a:	eba0 000a 	sub.w	r0, r0, sl
 801220e:	fa03 f000 	lsl.w	r0, r3, r0
 8012212:	9b04      	ldr	r3, [sp, #16]
 8012214:	4303      	orrs	r3, r0
 8012216:	3401      	adds	r4, #1
 8012218:	9304      	str	r3, [sp, #16]
 801221a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801221e:	4826      	ldr	r0, [pc, #152]	; (80122b8 <_svfiprintf_r+0x1f0>)
 8012220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012224:	2206      	movs	r2, #6
 8012226:	f7ed ffdb 	bl	80001e0 <memchr>
 801222a:	2800      	cmp	r0, #0
 801222c:	d038      	beq.n	80122a0 <_svfiprintf_r+0x1d8>
 801222e:	4b23      	ldr	r3, [pc, #140]	; (80122bc <_svfiprintf_r+0x1f4>)
 8012230:	bb1b      	cbnz	r3, 801227a <_svfiprintf_r+0x1b2>
 8012232:	9b03      	ldr	r3, [sp, #12]
 8012234:	3307      	adds	r3, #7
 8012236:	f023 0307 	bic.w	r3, r3, #7
 801223a:	3308      	adds	r3, #8
 801223c:	9303      	str	r3, [sp, #12]
 801223e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012240:	4433      	add	r3, r6
 8012242:	9309      	str	r3, [sp, #36]	; 0x24
 8012244:	e767      	b.n	8012116 <_svfiprintf_r+0x4e>
 8012246:	fb0c 3202 	mla	r2, ip, r2, r3
 801224a:	460c      	mov	r4, r1
 801224c:	2001      	movs	r0, #1
 801224e:	e7a5      	b.n	801219c <_svfiprintf_r+0xd4>
 8012250:	2300      	movs	r3, #0
 8012252:	3401      	adds	r4, #1
 8012254:	9305      	str	r3, [sp, #20]
 8012256:	4619      	mov	r1, r3
 8012258:	f04f 0c0a 	mov.w	ip, #10
 801225c:	4620      	mov	r0, r4
 801225e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012262:	3a30      	subs	r2, #48	; 0x30
 8012264:	2a09      	cmp	r2, #9
 8012266:	d903      	bls.n	8012270 <_svfiprintf_r+0x1a8>
 8012268:	2b00      	cmp	r3, #0
 801226a:	d0c5      	beq.n	80121f8 <_svfiprintf_r+0x130>
 801226c:	9105      	str	r1, [sp, #20]
 801226e:	e7c3      	b.n	80121f8 <_svfiprintf_r+0x130>
 8012270:	fb0c 2101 	mla	r1, ip, r1, r2
 8012274:	4604      	mov	r4, r0
 8012276:	2301      	movs	r3, #1
 8012278:	e7f0      	b.n	801225c <_svfiprintf_r+0x194>
 801227a:	ab03      	add	r3, sp, #12
 801227c:	9300      	str	r3, [sp, #0]
 801227e:	462a      	mov	r2, r5
 8012280:	4b0f      	ldr	r3, [pc, #60]	; (80122c0 <_svfiprintf_r+0x1f8>)
 8012282:	a904      	add	r1, sp, #16
 8012284:	4638      	mov	r0, r7
 8012286:	f7fd ffd9 	bl	801023c <_printf_float>
 801228a:	1c42      	adds	r2, r0, #1
 801228c:	4606      	mov	r6, r0
 801228e:	d1d6      	bne.n	801223e <_svfiprintf_r+0x176>
 8012290:	89ab      	ldrh	r3, [r5, #12]
 8012292:	065b      	lsls	r3, r3, #25
 8012294:	f53f af2c 	bmi.w	80120f0 <_svfiprintf_r+0x28>
 8012298:	9809      	ldr	r0, [sp, #36]	; 0x24
 801229a:	b01d      	add	sp, #116	; 0x74
 801229c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122a0:	ab03      	add	r3, sp, #12
 80122a2:	9300      	str	r3, [sp, #0]
 80122a4:	462a      	mov	r2, r5
 80122a6:	4b06      	ldr	r3, [pc, #24]	; (80122c0 <_svfiprintf_r+0x1f8>)
 80122a8:	a904      	add	r1, sp, #16
 80122aa:	4638      	mov	r0, r7
 80122ac:	f7fe fa6a 	bl	8010784 <_printf_i>
 80122b0:	e7eb      	b.n	801228a <_svfiprintf_r+0x1c2>
 80122b2:	bf00      	nop
 80122b4:	08015754 	.word	0x08015754
 80122b8:	0801575e 	.word	0x0801575e
 80122bc:	0801023d 	.word	0x0801023d
 80122c0:	08012011 	.word	0x08012011
 80122c4:	0801575a 	.word	0x0801575a

080122c8 <_sbrk_r>:
 80122c8:	b538      	push	{r3, r4, r5, lr}
 80122ca:	4d06      	ldr	r5, [pc, #24]	; (80122e4 <_sbrk_r+0x1c>)
 80122cc:	2300      	movs	r3, #0
 80122ce:	4604      	mov	r4, r0
 80122d0:	4608      	mov	r0, r1
 80122d2:	602b      	str	r3, [r5, #0]
 80122d4:	f7f2 f81e 	bl	8004314 <_sbrk>
 80122d8:	1c43      	adds	r3, r0, #1
 80122da:	d102      	bne.n	80122e2 <_sbrk_r+0x1a>
 80122dc:	682b      	ldr	r3, [r5, #0]
 80122de:	b103      	cbz	r3, 80122e2 <_sbrk_r+0x1a>
 80122e0:	6023      	str	r3, [r4, #0]
 80122e2:	bd38      	pop	{r3, r4, r5, pc}
 80122e4:	200068c0 	.word	0x200068c0

080122e8 <__assert_func>:
 80122e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80122ea:	4614      	mov	r4, r2
 80122ec:	461a      	mov	r2, r3
 80122ee:	4b09      	ldr	r3, [pc, #36]	; (8012314 <__assert_func+0x2c>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	4605      	mov	r5, r0
 80122f4:	68d8      	ldr	r0, [r3, #12]
 80122f6:	b14c      	cbz	r4, 801230c <__assert_func+0x24>
 80122f8:	4b07      	ldr	r3, [pc, #28]	; (8012318 <__assert_func+0x30>)
 80122fa:	9100      	str	r1, [sp, #0]
 80122fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012300:	4906      	ldr	r1, [pc, #24]	; (801231c <__assert_func+0x34>)
 8012302:	462b      	mov	r3, r5
 8012304:	f000 f80e 	bl	8012324 <fiprintf>
 8012308:	f000 faac 	bl	8012864 <abort>
 801230c:	4b04      	ldr	r3, [pc, #16]	; (8012320 <__assert_func+0x38>)
 801230e:	461c      	mov	r4, r3
 8012310:	e7f3      	b.n	80122fa <__assert_func+0x12>
 8012312:	bf00      	nop
 8012314:	2000001c 	.word	0x2000001c
 8012318:	08015765 	.word	0x08015765
 801231c:	08015772 	.word	0x08015772
 8012320:	080157a0 	.word	0x080157a0

08012324 <fiprintf>:
 8012324:	b40e      	push	{r1, r2, r3}
 8012326:	b503      	push	{r0, r1, lr}
 8012328:	4601      	mov	r1, r0
 801232a:	ab03      	add	r3, sp, #12
 801232c:	4805      	ldr	r0, [pc, #20]	; (8012344 <fiprintf+0x20>)
 801232e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012332:	6800      	ldr	r0, [r0, #0]
 8012334:	9301      	str	r3, [sp, #4]
 8012336:	f000 f897 	bl	8012468 <_vfiprintf_r>
 801233a:	b002      	add	sp, #8
 801233c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012340:	b003      	add	sp, #12
 8012342:	4770      	bx	lr
 8012344:	2000001c 	.word	0x2000001c

08012348 <__ascii_mbtowc>:
 8012348:	b082      	sub	sp, #8
 801234a:	b901      	cbnz	r1, 801234e <__ascii_mbtowc+0x6>
 801234c:	a901      	add	r1, sp, #4
 801234e:	b142      	cbz	r2, 8012362 <__ascii_mbtowc+0x1a>
 8012350:	b14b      	cbz	r3, 8012366 <__ascii_mbtowc+0x1e>
 8012352:	7813      	ldrb	r3, [r2, #0]
 8012354:	600b      	str	r3, [r1, #0]
 8012356:	7812      	ldrb	r2, [r2, #0]
 8012358:	1e10      	subs	r0, r2, #0
 801235a:	bf18      	it	ne
 801235c:	2001      	movne	r0, #1
 801235e:	b002      	add	sp, #8
 8012360:	4770      	bx	lr
 8012362:	4610      	mov	r0, r2
 8012364:	e7fb      	b.n	801235e <__ascii_mbtowc+0x16>
 8012366:	f06f 0001 	mvn.w	r0, #1
 801236a:	e7f8      	b.n	801235e <__ascii_mbtowc+0x16>

0801236c <memmove>:
 801236c:	4288      	cmp	r0, r1
 801236e:	b510      	push	{r4, lr}
 8012370:	eb01 0402 	add.w	r4, r1, r2
 8012374:	d902      	bls.n	801237c <memmove+0x10>
 8012376:	4284      	cmp	r4, r0
 8012378:	4623      	mov	r3, r4
 801237a:	d807      	bhi.n	801238c <memmove+0x20>
 801237c:	1e43      	subs	r3, r0, #1
 801237e:	42a1      	cmp	r1, r4
 8012380:	d008      	beq.n	8012394 <memmove+0x28>
 8012382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012386:	f803 2f01 	strb.w	r2, [r3, #1]!
 801238a:	e7f8      	b.n	801237e <memmove+0x12>
 801238c:	4402      	add	r2, r0
 801238e:	4601      	mov	r1, r0
 8012390:	428a      	cmp	r2, r1
 8012392:	d100      	bne.n	8012396 <memmove+0x2a>
 8012394:	bd10      	pop	{r4, pc}
 8012396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801239a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801239e:	e7f7      	b.n	8012390 <memmove+0x24>

080123a0 <__malloc_lock>:
 80123a0:	4801      	ldr	r0, [pc, #4]	; (80123a8 <__malloc_lock+0x8>)
 80123a2:	f000 bc1f 	b.w	8012be4 <__retarget_lock_acquire_recursive>
 80123a6:	bf00      	nop
 80123a8:	200068c4 	.word	0x200068c4

080123ac <__malloc_unlock>:
 80123ac:	4801      	ldr	r0, [pc, #4]	; (80123b4 <__malloc_unlock+0x8>)
 80123ae:	f000 bc1a 	b.w	8012be6 <__retarget_lock_release_recursive>
 80123b2:	bf00      	nop
 80123b4:	200068c4 	.word	0x200068c4

080123b8 <_realloc_r>:
 80123b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123bc:	4680      	mov	r8, r0
 80123be:	4614      	mov	r4, r2
 80123c0:	460e      	mov	r6, r1
 80123c2:	b921      	cbnz	r1, 80123ce <_realloc_r+0x16>
 80123c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123c8:	4611      	mov	r1, r2
 80123ca:	f7ff bdad 	b.w	8011f28 <_malloc_r>
 80123ce:	b92a      	cbnz	r2, 80123dc <_realloc_r+0x24>
 80123d0:	f7ff fd3e 	bl	8011e50 <_free_r>
 80123d4:	4625      	mov	r5, r4
 80123d6:	4628      	mov	r0, r5
 80123d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123dc:	f000 fc6a 	bl	8012cb4 <_malloc_usable_size_r>
 80123e0:	4284      	cmp	r4, r0
 80123e2:	4607      	mov	r7, r0
 80123e4:	d802      	bhi.n	80123ec <_realloc_r+0x34>
 80123e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80123ea:	d812      	bhi.n	8012412 <_realloc_r+0x5a>
 80123ec:	4621      	mov	r1, r4
 80123ee:	4640      	mov	r0, r8
 80123f0:	f7ff fd9a 	bl	8011f28 <_malloc_r>
 80123f4:	4605      	mov	r5, r0
 80123f6:	2800      	cmp	r0, #0
 80123f8:	d0ed      	beq.n	80123d6 <_realloc_r+0x1e>
 80123fa:	42bc      	cmp	r4, r7
 80123fc:	4622      	mov	r2, r4
 80123fe:	4631      	mov	r1, r6
 8012400:	bf28      	it	cs
 8012402:	463a      	movcs	r2, r7
 8012404:	f7fd fe64 	bl	80100d0 <memcpy>
 8012408:	4631      	mov	r1, r6
 801240a:	4640      	mov	r0, r8
 801240c:	f7ff fd20 	bl	8011e50 <_free_r>
 8012410:	e7e1      	b.n	80123d6 <_realloc_r+0x1e>
 8012412:	4635      	mov	r5, r6
 8012414:	e7df      	b.n	80123d6 <_realloc_r+0x1e>

08012416 <__sfputc_r>:
 8012416:	6893      	ldr	r3, [r2, #8]
 8012418:	3b01      	subs	r3, #1
 801241a:	2b00      	cmp	r3, #0
 801241c:	b410      	push	{r4}
 801241e:	6093      	str	r3, [r2, #8]
 8012420:	da08      	bge.n	8012434 <__sfputc_r+0x1e>
 8012422:	6994      	ldr	r4, [r2, #24]
 8012424:	42a3      	cmp	r3, r4
 8012426:	db01      	blt.n	801242c <__sfputc_r+0x16>
 8012428:	290a      	cmp	r1, #10
 801242a:	d103      	bne.n	8012434 <__sfputc_r+0x1e>
 801242c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012430:	f000 b94a 	b.w	80126c8 <__swbuf_r>
 8012434:	6813      	ldr	r3, [r2, #0]
 8012436:	1c58      	adds	r0, r3, #1
 8012438:	6010      	str	r0, [r2, #0]
 801243a:	7019      	strb	r1, [r3, #0]
 801243c:	4608      	mov	r0, r1
 801243e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012442:	4770      	bx	lr

08012444 <__sfputs_r>:
 8012444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012446:	4606      	mov	r6, r0
 8012448:	460f      	mov	r7, r1
 801244a:	4614      	mov	r4, r2
 801244c:	18d5      	adds	r5, r2, r3
 801244e:	42ac      	cmp	r4, r5
 8012450:	d101      	bne.n	8012456 <__sfputs_r+0x12>
 8012452:	2000      	movs	r0, #0
 8012454:	e007      	b.n	8012466 <__sfputs_r+0x22>
 8012456:	f814 1b01 	ldrb.w	r1, [r4], #1
 801245a:	463a      	mov	r2, r7
 801245c:	4630      	mov	r0, r6
 801245e:	f7ff ffda 	bl	8012416 <__sfputc_r>
 8012462:	1c43      	adds	r3, r0, #1
 8012464:	d1f3      	bne.n	801244e <__sfputs_r+0xa>
 8012466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012468 <_vfiprintf_r>:
 8012468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801246c:	460d      	mov	r5, r1
 801246e:	b09d      	sub	sp, #116	; 0x74
 8012470:	4614      	mov	r4, r2
 8012472:	4698      	mov	r8, r3
 8012474:	4606      	mov	r6, r0
 8012476:	b118      	cbz	r0, 8012480 <_vfiprintf_r+0x18>
 8012478:	6983      	ldr	r3, [r0, #24]
 801247a:	b90b      	cbnz	r3, 8012480 <_vfiprintf_r+0x18>
 801247c:	f000 fb14 	bl	8012aa8 <__sinit>
 8012480:	4b89      	ldr	r3, [pc, #548]	; (80126a8 <_vfiprintf_r+0x240>)
 8012482:	429d      	cmp	r5, r3
 8012484:	d11b      	bne.n	80124be <_vfiprintf_r+0x56>
 8012486:	6875      	ldr	r5, [r6, #4]
 8012488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801248a:	07d9      	lsls	r1, r3, #31
 801248c:	d405      	bmi.n	801249a <_vfiprintf_r+0x32>
 801248e:	89ab      	ldrh	r3, [r5, #12]
 8012490:	059a      	lsls	r2, r3, #22
 8012492:	d402      	bmi.n	801249a <_vfiprintf_r+0x32>
 8012494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012496:	f000 fba5 	bl	8012be4 <__retarget_lock_acquire_recursive>
 801249a:	89ab      	ldrh	r3, [r5, #12]
 801249c:	071b      	lsls	r3, r3, #28
 801249e:	d501      	bpl.n	80124a4 <_vfiprintf_r+0x3c>
 80124a0:	692b      	ldr	r3, [r5, #16]
 80124a2:	b9eb      	cbnz	r3, 80124e0 <_vfiprintf_r+0x78>
 80124a4:	4629      	mov	r1, r5
 80124a6:	4630      	mov	r0, r6
 80124a8:	f000 f96e 	bl	8012788 <__swsetup_r>
 80124ac:	b1c0      	cbz	r0, 80124e0 <_vfiprintf_r+0x78>
 80124ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124b0:	07dc      	lsls	r4, r3, #31
 80124b2:	d50e      	bpl.n	80124d2 <_vfiprintf_r+0x6a>
 80124b4:	f04f 30ff 	mov.w	r0, #4294967295
 80124b8:	b01d      	add	sp, #116	; 0x74
 80124ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124be:	4b7b      	ldr	r3, [pc, #492]	; (80126ac <_vfiprintf_r+0x244>)
 80124c0:	429d      	cmp	r5, r3
 80124c2:	d101      	bne.n	80124c8 <_vfiprintf_r+0x60>
 80124c4:	68b5      	ldr	r5, [r6, #8]
 80124c6:	e7df      	b.n	8012488 <_vfiprintf_r+0x20>
 80124c8:	4b79      	ldr	r3, [pc, #484]	; (80126b0 <_vfiprintf_r+0x248>)
 80124ca:	429d      	cmp	r5, r3
 80124cc:	bf08      	it	eq
 80124ce:	68f5      	ldreq	r5, [r6, #12]
 80124d0:	e7da      	b.n	8012488 <_vfiprintf_r+0x20>
 80124d2:	89ab      	ldrh	r3, [r5, #12]
 80124d4:	0598      	lsls	r0, r3, #22
 80124d6:	d4ed      	bmi.n	80124b4 <_vfiprintf_r+0x4c>
 80124d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124da:	f000 fb84 	bl	8012be6 <__retarget_lock_release_recursive>
 80124de:	e7e9      	b.n	80124b4 <_vfiprintf_r+0x4c>
 80124e0:	2300      	movs	r3, #0
 80124e2:	9309      	str	r3, [sp, #36]	; 0x24
 80124e4:	2320      	movs	r3, #32
 80124e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80124ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80124ee:	2330      	movs	r3, #48	; 0x30
 80124f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80126b4 <_vfiprintf_r+0x24c>
 80124f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80124f8:	f04f 0901 	mov.w	r9, #1
 80124fc:	4623      	mov	r3, r4
 80124fe:	469a      	mov	sl, r3
 8012500:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012504:	b10a      	cbz	r2, 801250a <_vfiprintf_r+0xa2>
 8012506:	2a25      	cmp	r2, #37	; 0x25
 8012508:	d1f9      	bne.n	80124fe <_vfiprintf_r+0x96>
 801250a:	ebba 0b04 	subs.w	fp, sl, r4
 801250e:	d00b      	beq.n	8012528 <_vfiprintf_r+0xc0>
 8012510:	465b      	mov	r3, fp
 8012512:	4622      	mov	r2, r4
 8012514:	4629      	mov	r1, r5
 8012516:	4630      	mov	r0, r6
 8012518:	f7ff ff94 	bl	8012444 <__sfputs_r>
 801251c:	3001      	adds	r0, #1
 801251e:	f000 80aa 	beq.w	8012676 <_vfiprintf_r+0x20e>
 8012522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012524:	445a      	add	r2, fp
 8012526:	9209      	str	r2, [sp, #36]	; 0x24
 8012528:	f89a 3000 	ldrb.w	r3, [sl]
 801252c:	2b00      	cmp	r3, #0
 801252e:	f000 80a2 	beq.w	8012676 <_vfiprintf_r+0x20e>
 8012532:	2300      	movs	r3, #0
 8012534:	f04f 32ff 	mov.w	r2, #4294967295
 8012538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801253c:	f10a 0a01 	add.w	sl, sl, #1
 8012540:	9304      	str	r3, [sp, #16]
 8012542:	9307      	str	r3, [sp, #28]
 8012544:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012548:	931a      	str	r3, [sp, #104]	; 0x68
 801254a:	4654      	mov	r4, sl
 801254c:	2205      	movs	r2, #5
 801254e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012552:	4858      	ldr	r0, [pc, #352]	; (80126b4 <_vfiprintf_r+0x24c>)
 8012554:	f7ed fe44 	bl	80001e0 <memchr>
 8012558:	9a04      	ldr	r2, [sp, #16]
 801255a:	b9d8      	cbnz	r0, 8012594 <_vfiprintf_r+0x12c>
 801255c:	06d1      	lsls	r1, r2, #27
 801255e:	bf44      	itt	mi
 8012560:	2320      	movmi	r3, #32
 8012562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012566:	0713      	lsls	r3, r2, #28
 8012568:	bf44      	itt	mi
 801256a:	232b      	movmi	r3, #43	; 0x2b
 801256c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012570:	f89a 3000 	ldrb.w	r3, [sl]
 8012574:	2b2a      	cmp	r3, #42	; 0x2a
 8012576:	d015      	beq.n	80125a4 <_vfiprintf_r+0x13c>
 8012578:	9a07      	ldr	r2, [sp, #28]
 801257a:	4654      	mov	r4, sl
 801257c:	2000      	movs	r0, #0
 801257e:	f04f 0c0a 	mov.w	ip, #10
 8012582:	4621      	mov	r1, r4
 8012584:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012588:	3b30      	subs	r3, #48	; 0x30
 801258a:	2b09      	cmp	r3, #9
 801258c:	d94e      	bls.n	801262c <_vfiprintf_r+0x1c4>
 801258e:	b1b0      	cbz	r0, 80125be <_vfiprintf_r+0x156>
 8012590:	9207      	str	r2, [sp, #28]
 8012592:	e014      	b.n	80125be <_vfiprintf_r+0x156>
 8012594:	eba0 0308 	sub.w	r3, r0, r8
 8012598:	fa09 f303 	lsl.w	r3, r9, r3
 801259c:	4313      	orrs	r3, r2
 801259e:	9304      	str	r3, [sp, #16]
 80125a0:	46a2      	mov	sl, r4
 80125a2:	e7d2      	b.n	801254a <_vfiprintf_r+0xe2>
 80125a4:	9b03      	ldr	r3, [sp, #12]
 80125a6:	1d19      	adds	r1, r3, #4
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	9103      	str	r1, [sp, #12]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	bfbb      	ittet	lt
 80125b0:	425b      	neglt	r3, r3
 80125b2:	f042 0202 	orrlt.w	r2, r2, #2
 80125b6:	9307      	strge	r3, [sp, #28]
 80125b8:	9307      	strlt	r3, [sp, #28]
 80125ba:	bfb8      	it	lt
 80125bc:	9204      	strlt	r2, [sp, #16]
 80125be:	7823      	ldrb	r3, [r4, #0]
 80125c0:	2b2e      	cmp	r3, #46	; 0x2e
 80125c2:	d10c      	bne.n	80125de <_vfiprintf_r+0x176>
 80125c4:	7863      	ldrb	r3, [r4, #1]
 80125c6:	2b2a      	cmp	r3, #42	; 0x2a
 80125c8:	d135      	bne.n	8012636 <_vfiprintf_r+0x1ce>
 80125ca:	9b03      	ldr	r3, [sp, #12]
 80125cc:	1d1a      	adds	r2, r3, #4
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	9203      	str	r2, [sp, #12]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	bfb8      	it	lt
 80125d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80125da:	3402      	adds	r4, #2
 80125dc:	9305      	str	r3, [sp, #20]
 80125de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80126c4 <_vfiprintf_r+0x25c>
 80125e2:	7821      	ldrb	r1, [r4, #0]
 80125e4:	2203      	movs	r2, #3
 80125e6:	4650      	mov	r0, sl
 80125e8:	f7ed fdfa 	bl	80001e0 <memchr>
 80125ec:	b140      	cbz	r0, 8012600 <_vfiprintf_r+0x198>
 80125ee:	2340      	movs	r3, #64	; 0x40
 80125f0:	eba0 000a 	sub.w	r0, r0, sl
 80125f4:	fa03 f000 	lsl.w	r0, r3, r0
 80125f8:	9b04      	ldr	r3, [sp, #16]
 80125fa:	4303      	orrs	r3, r0
 80125fc:	3401      	adds	r4, #1
 80125fe:	9304      	str	r3, [sp, #16]
 8012600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012604:	482c      	ldr	r0, [pc, #176]	; (80126b8 <_vfiprintf_r+0x250>)
 8012606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801260a:	2206      	movs	r2, #6
 801260c:	f7ed fde8 	bl	80001e0 <memchr>
 8012610:	2800      	cmp	r0, #0
 8012612:	d03f      	beq.n	8012694 <_vfiprintf_r+0x22c>
 8012614:	4b29      	ldr	r3, [pc, #164]	; (80126bc <_vfiprintf_r+0x254>)
 8012616:	bb1b      	cbnz	r3, 8012660 <_vfiprintf_r+0x1f8>
 8012618:	9b03      	ldr	r3, [sp, #12]
 801261a:	3307      	adds	r3, #7
 801261c:	f023 0307 	bic.w	r3, r3, #7
 8012620:	3308      	adds	r3, #8
 8012622:	9303      	str	r3, [sp, #12]
 8012624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012626:	443b      	add	r3, r7
 8012628:	9309      	str	r3, [sp, #36]	; 0x24
 801262a:	e767      	b.n	80124fc <_vfiprintf_r+0x94>
 801262c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012630:	460c      	mov	r4, r1
 8012632:	2001      	movs	r0, #1
 8012634:	e7a5      	b.n	8012582 <_vfiprintf_r+0x11a>
 8012636:	2300      	movs	r3, #0
 8012638:	3401      	adds	r4, #1
 801263a:	9305      	str	r3, [sp, #20]
 801263c:	4619      	mov	r1, r3
 801263e:	f04f 0c0a 	mov.w	ip, #10
 8012642:	4620      	mov	r0, r4
 8012644:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012648:	3a30      	subs	r2, #48	; 0x30
 801264a:	2a09      	cmp	r2, #9
 801264c:	d903      	bls.n	8012656 <_vfiprintf_r+0x1ee>
 801264e:	2b00      	cmp	r3, #0
 8012650:	d0c5      	beq.n	80125de <_vfiprintf_r+0x176>
 8012652:	9105      	str	r1, [sp, #20]
 8012654:	e7c3      	b.n	80125de <_vfiprintf_r+0x176>
 8012656:	fb0c 2101 	mla	r1, ip, r1, r2
 801265a:	4604      	mov	r4, r0
 801265c:	2301      	movs	r3, #1
 801265e:	e7f0      	b.n	8012642 <_vfiprintf_r+0x1da>
 8012660:	ab03      	add	r3, sp, #12
 8012662:	9300      	str	r3, [sp, #0]
 8012664:	462a      	mov	r2, r5
 8012666:	4b16      	ldr	r3, [pc, #88]	; (80126c0 <_vfiprintf_r+0x258>)
 8012668:	a904      	add	r1, sp, #16
 801266a:	4630      	mov	r0, r6
 801266c:	f7fd fde6 	bl	801023c <_printf_float>
 8012670:	4607      	mov	r7, r0
 8012672:	1c78      	adds	r0, r7, #1
 8012674:	d1d6      	bne.n	8012624 <_vfiprintf_r+0x1bc>
 8012676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012678:	07d9      	lsls	r1, r3, #31
 801267a:	d405      	bmi.n	8012688 <_vfiprintf_r+0x220>
 801267c:	89ab      	ldrh	r3, [r5, #12]
 801267e:	059a      	lsls	r2, r3, #22
 8012680:	d402      	bmi.n	8012688 <_vfiprintf_r+0x220>
 8012682:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012684:	f000 faaf 	bl	8012be6 <__retarget_lock_release_recursive>
 8012688:	89ab      	ldrh	r3, [r5, #12]
 801268a:	065b      	lsls	r3, r3, #25
 801268c:	f53f af12 	bmi.w	80124b4 <_vfiprintf_r+0x4c>
 8012690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012692:	e711      	b.n	80124b8 <_vfiprintf_r+0x50>
 8012694:	ab03      	add	r3, sp, #12
 8012696:	9300      	str	r3, [sp, #0]
 8012698:	462a      	mov	r2, r5
 801269a:	4b09      	ldr	r3, [pc, #36]	; (80126c0 <_vfiprintf_r+0x258>)
 801269c:	a904      	add	r1, sp, #16
 801269e:	4630      	mov	r0, r6
 80126a0:	f7fe f870 	bl	8010784 <_printf_i>
 80126a4:	e7e4      	b.n	8012670 <_vfiprintf_r+0x208>
 80126a6:	bf00      	nop
 80126a8:	080158cc 	.word	0x080158cc
 80126ac:	080158ec 	.word	0x080158ec
 80126b0:	080158ac 	.word	0x080158ac
 80126b4:	08015754 	.word	0x08015754
 80126b8:	0801575e 	.word	0x0801575e
 80126bc:	0801023d 	.word	0x0801023d
 80126c0:	08012445 	.word	0x08012445
 80126c4:	0801575a 	.word	0x0801575a

080126c8 <__swbuf_r>:
 80126c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ca:	460e      	mov	r6, r1
 80126cc:	4614      	mov	r4, r2
 80126ce:	4605      	mov	r5, r0
 80126d0:	b118      	cbz	r0, 80126da <__swbuf_r+0x12>
 80126d2:	6983      	ldr	r3, [r0, #24]
 80126d4:	b90b      	cbnz	r3, 80126da <__swbuf_r+0x12>
 80126d6:	f000 f9e7 	bl	8012aa8 <__sinit>
 80126da:	4b21      	ldr	r3, [pc, #132]	; (8012760 <__swbuf_r+0x98>)
 80126dc:	429c      	cmp	r4, r3
 80126de:	d12b      	bne.n	8012738 <__swbuf_r+0x70>
 80126e0:	686c      	ldr	r4, [r5, #4]
 80126e2:	69a3      	ldr	r3, [r4, #24]
 80126e4:	60a3      	str	r3, [r4, #8]
 80126e6:	89a3      	ldrh	r3, [r4, #12]
 80126e8:	071a      	lsls	r2, r3, #28
 80126ea:	d52f      	bpl.n	801274c <__swbuf_r+0x84>
 80126ec:	6923      	ldr	r3, [r4, #16]
 80126ee:	b36b      	cbz	r3, 801274c <__swbuf_r+0x84>
 80126f0:	6923      	ldr	r3, [r4, #16]
 80126f2:	6820      	ldr	r0, [r4, #0]
 80126f4:	1ac0      	subs	r0, r0, r3
 80126f6:	6963      	ldr	r3, [r4, #20]
 80126f8:	b2f6      	uxtb	r6, r6
 80126fa:	4283      	cmp	r3, r0
 80126fc:	4637      	mov	r7, r6
 80126fe:	dc04      	bgt.n	801270a <__swbuf_r+0x42>
 8012700:	4621      	mov	r1, r4
 8012702:	4628      	mov	r0, r5
 8012704:	f000 f93c 	bl	8012980 <_fflush_r>
 8012708:	bb30      	cbnz	r0, 8012758 <__swbuf_r+0x90>
 801270a:	68a3      	ldr	r3, [r4, #8]
 801270c:	3b01      	subs	r3, #1
 801270e:	60a3      	str	r3, [r4, #8]
 8012710:	6823      	ldr	r3, [r4, #0]
 8012712:	1c5a      	adds	r2, r3, #1
 8012714:	6022      	str	r2, [r4, #0]
 8012716:	701e      	strb	r6, [r3, #0]
 8012718:	6963      	ldr	r3, [r4, #20]
 801271a:	3001      	adds	r0, #1
 801271c:	4283      	cmp	r3, r0
 801271e:	d004      	beq.n	801272a <__swbuf_r+0x62>
 8012720:	89a3      	ldrh	r3, [r4, #12]
 8012722:	07db      	lsls	r3, r3, #31
 8012724:	d506      	bpl.n	8012734 <__swbuf_r+0x6c>
 8012726:	2e0a      	cmp	r6, #10
 8012728:	d104      	bne.n	8012734 <__swbuf_r+0x6c>
 801272a:	4621      	mov	r1, r4
 801272c:	4628      	mov	r0, r5
 801272e:	f000 f927 	bl	8012980 <_fflush_r>
 8012732:	b988      	cbnz	r0, 8012758 <__swbuf_r+0x90>
 8012734:	4638      	mov	r0, r7
 8012736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012738:	4b0a      	ldr	r3, [pc, #40]	; (8012764 <__swbuf_r+0x9c>)
 801273a:	429c      	cmp	r4, r3
 801273c:	d101      	bne.n	8012742 <__swbuf_r+0x7a>
 801273e:	68ac      	ldr	r4, [r5, #8]
 8012740:	e7cf      	b.n	80126e2 <__swbuf_r+0x1a>
 8012742:	4b09      	ldr	r3, [pc, #36]	; (8012768 <__swbuf_r+0xa0>)
 8012744:	429c      	cmp	r4, r3
 8012746:	bf08      	it	eq
 8012748:	68ec      	ldreq	r4, [r5, #12]
 801274a:	e7ca      	b.n	80126e2 <__swbuf_r+0x1a>
 801274c:	4621      	mov	r1, r4
 801274e:	4628      	mov	r0, r5
 8012750:	f000 f81a 	bl	8012788 <__swsetup_r>
 8012754:	2800      	cmp	r0, #0
 8012756:	d0cb      	beq.n	80126f0 <__swbuf_r+0x28>
 8012758:	f04f 37ff 	mov.w	r7, #4294967295
 801275c:	e7ea      	b.n	8012734 <__swbuf_r+0x6c>
 801275e:	bf00      	nop
 8012760:	080158cc 	.word	0x080158cc
 8012764:	080158ec 	.word	0x080158ec
 8012768:	080158ac 	.word	0x080158ac

0801276c <__ascii_wctomb>:
 801276c:	b149      	cbz	r1, 8012782 <__ascii_wctomb+0x16>
 801276e:	2aff      	cmp	r2, #255	; 0xff
 8012770:	bf85      	ittet	hi
 8012772:	238a      	movhi	r3, #138	; 0x8a
 8012774:	6003      	strhi	r3, [r0, #0]
 8012776:	700a      	strbls	r2, [r1, #0]
 8012778:	f04f 30ff 	movhi.w	r0, #4294967295
 801277c:	bf98      	it	ls
 801277e:	2001      	movls	r0, #1
 8012780:	4770      	bx	lr
 8012782:	4608      	mov	r0, r1
 8012784:	4770      	bx	lr
	...

08012788 <__swsetup_r>:
 8012788:	4b32      	ldr	r3, [pc, #200]	; (8012854 <__swsetup_r+0xcc>)
 801278a:	b570      	push	{r4, r5, r6, lr}
 801278c:	681d      	ldr	r5, [r3, #0]
 801278e:	4606      	mov	r6, r0
 8012790:	460c      	mov	r4, r1
 8012792:	b125      	cbz	r5, 801279e <__swsetup_r+0x16>
 8012794:	69ab      	ldr	r3, [r5, #24]
 8012796:	b913      	cbnz	r3, 801279e <__swsetup_r+0x16>
 8012798:	4628      	mov	r0, r5
 801279a:	f000 f985 	bl	8012aa8 <__sinit>
 801279e:	4b2e      	ldr	r3, [pc, #184]	; (8012858 <__swsetup_r+0xd0>)
 80127a0:	429c      	cmp	r4, r3
 80127a2:	d10f      	bne.n	80127c4 <__swsetup_r+0x3c>
 80127a4:	686c      	ldr	r4, [r5, #4]
 80127a6:	89a3      	ldrh	r3, [r4, #12]
 80127a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80127ac:	0719      	lsls	r1, r3, #28
 80127ae:	d42c      	bmi.n	801280a <__swsetup_r+0x82>
 80127b0:	06dd      	lsls	r5, r3, #27
 80127b2:	d411      	bmi.n	80127d8 <__swsetup_r+0x50>
 80127b4:	2309      	movs	r3, #9
 80127b6:	6033      	str	r3, [r6, #0]
 80127b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80127bc:	81a3      	strh	r3, [r4, #12]
 80127be:	f04f 30ff 	mov.w	r0, #4294967295
 80127c2:	e03e      	b.n	8012842 <__swsetup_r+0xba>
 80127c4:	4b25      	ldr	r3, [pc, #148]	; (801285c <__swsetup_r+0xd4>)
 80127c6:	429c      	cmp	r4, r3
 80127c8:	d101      	bne.n	80127ce <__swsetup_r+0x46>
 80127ca:	68ac      	ldr	r4, [r5, #8]
 80127cc:	e7eb      	b.n	80127a6 <__swsetup_r+0x1e>
 80127ce:	4b24      	ldr	r3, [pc, #144]	; (8012860 <__swsetup_r+0xd8>)
 80127d0:	429c      	cmp	r4, r3
 80127d2:	bf08      	it	eq
 80127d4:	68ec      	ldreq	r4, [r5, #12]
 80127d6:	e7e6      	b.n	80127a6 <__swsetup_r+0x1e>
 80127d8:	0758      	lsls	r0, r3, #29
 80127da:	d512      	bpl.n	8012802 <__swsetup_r+0x7a>
 80127dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80127de:	b141      	cbz	r1, 80127f2 <__swsetup_r+0x6a>
 80127e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80127e4:	4299      	cmp	r1, r3
 80127e6:	d002      	beq.n	80127ee <__swsetup_r+0x66>
 80127e8:	4630      	mov	r0, r6
 80127ea:	f7ff fb31 	bl	8011e50 <_free_r>
 80127ee:	2300      	movs	r3, #0
 80127f0:	6363      	str	r3, [r4, #52]	; 0x34
 80127f2:	89a3      	ldrh	r3, [r4, #12]
 80127f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80127f8:	81a3      	strh	r3, [r4, #12]
 80127fa:	2300      	movs	r3, #0
 80127fc:	6063      	str	r3, [r4, #4]
 80127fe:	6923      	ldr	r3, [r4, #16]
 8012800:	6023      	str	r3, [r4, #0]
 8012802:	89a3      	ldrh	r3, [r4, #12]
 8012804:	f043 0308 	orr.w	r3, r3, #8
 8012808:	81a3      	strh	r3, [r4, #12]
 801280a:	6923      	ldr	r3, [r4, #16]
 801280c:	b94b      	cbnz	r3, 8012822 <__swsetup_r+0x9a>
 801280e:	89a3      	ldrh	r3, [r4, #12]
 8012810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012818:	d003      	beq.n	8012822 <__swsetup_r+0x9a>
 801281a:	4621      	mov	r1, r4
 801281c:	4630      	mov	r0, r6
 801281e:	f000 fa09 	bl	8012c34 <__smakebuf_r>
 8012822:	89a0      	ldrh	r0, [r4, #12]
 8012824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012828:	f010 0301 	ands.w	r3, r0, #1
 801282c:	d00a      	beq.n	8012844 <__swsetup_r+0xbc>
 801282e:	2300      	movs	r3, #0
 8012830:	60a3      	str	r3, [r4, #8]
 8012832:	6963      	ldr	r3, [r4, #20]
 8012834:	425b      	negs	r3, r3
 8012836:	61a3      	str	r3, [r4, #24]
 8012838:	6923      	ldr	r3, [r4, #16]
 801283a:	b943      	cbnz	r3, 801284e <__swsetup_r+0xc6>
 801283c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012840:	d1ba      	bne.n	80127b8 <__swsetup_r+0x30>
 8012842:	bd70      	pop	{r4, r5, r6, pc}
 8012844:	0781      	lsls	r1, r0, #30
 8012846:	bf58      	it	pl
 8012848:	6963      	ldrpl	r3, [r4, #20]
 801284a:	60a3      	str	r3, [r4, #8]
 801284c:	e7f4      	b.n	8012838 <__swsetup_r+0xb0>
 801284e:	2000      	movs	r0, #0
 8012850:	e7f7      	b.n	8012842 <__swsetup_r+0xba>
 8012852:	bf00      	nop
 8012854:	2000001c 	.word	0x2000001c
 8012858:	080158cc 	.word	0x080158cc
 801285c:	080158ec 	.word	0x080158ec
 8012860:	080158ac 	.word	0x080158ac

08012864 <abort>:
 8012864:	b508      	push	{r3, lr}
 8012866:	2006      	movs	r0, #6
 8012868:	f000 fa54 	bl	8012d14 <raise>
 801286c:	2001      	movs	r0, #1
 801286e:	f7f1 fcd9 	bl	8004224 <_exit>
	...

08012874 <__sflush_r>:
 8012874:	898a      	ldrh	r2, [r1, #12]
 8012876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801287a:	4605      	mov	r5, r0
 801287c:	0710      	lsls	r0, r2, #28
 801287e:	460c      	mov	r4, r1
 8012880:	d458      	bmi.n	8012934 <__sflush_r+0xc0>
 8012882:	684b      	ldr	r3, [r1, #4]
 8012884:	2b00      	cmp	r3, #0
 8012886:	dc05      	bgt.n	8012894 <__sflush_r+0x20>
 8012888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801288a:	2b00      	cmp	r3, #0
 801288c:	dc02      	bgt.n	8012894 <__sflush_r+0x20>
 801288e:	2000      	movs	r0, #0
 8012890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012896:	2e00      	cmp	r6, #0
 8012898:	d0f9      	beq.n	801288e <__sflush_r+0x1a>
 801289a:	2300      	movs	r3, #0
 801289c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80128a0:	682f      	ldr	r7, [r5, #0]
 80128a2:	602b      	str	r3, [r5, #0]
 80128a4:	d032      	beq.n	801290c <__sflush_r+0x98>
 80128a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80128a8:	89a3      	ldrh	r3, [r4, #12]
 80128aa:	075a      	lsls	r2, r3, #29
 80128ac:	d505      	bpl.n	80128ba <__sflush_r+0x46>
 80128ae:	6863      	ldr	r3, [r4, #4]
 80128b0:	1ac0      	subs	r0, r0, r3
 80128b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80128b4:	b10b      	cbz	r3, 80128ba <__sflush_r+0x46>
 80128b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80128b8:	1ac0      	subs	r0, r0, r3
 80128ba:	2300      	movs	r3, #0
 80128bc:	4602      	mov	r2, r0
 80128be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128c0:	6a21      	ldr	r1, [r4, #32]
 80128c2:	4628      	mov	r0, r5
 80128c4:	47b0      	blx	r6
 80128c6:	1c43      	adds	r3, r0, #1
 80128c8:	89a3      	ldrh	r3, [r4, #12]
 80128ca:	d106      	bne.n	80128da <__sflush_r+0x66>
 80128cc:	6829      	ldr	r1, [r5, #0]
 80128ce:	291d      	cmp	r1, #29
 80128d0:	d82c      	bhi.n	801292c <__sflush_r+0xb8>
 80128d2:	4a2a      	ldr	r2, [pc, #168]	; (801297c <__sflush_r+0x108>)
 80128d4:	40ca      	lsrs	r2, r1
 80128d6:	07d6      	lsls	r6, r2, #31
 80128d8:	d528      	bpl.n	801292c <__sflush_r+0xb8>
 80128da:	2200      	movs	r2, #0
 80128dc:	6062      	str	r2, [r4, #4]
 80128de:	04d9      	lsls	r1, r3, #19
 80128e0:	6922      	ldr	r2, [r4, #16]
 80128e2:	6022      	str	r2, [r4, #0]
 80128e4:	d504      	bpl.n	80128f0 <__sflush_r+0x7c>
 80128e6:	1c42      	adds	r2, r0, #1
 80128e8:	d101      	bne.n	80128ee <__sflush_r+0x7a>
 80128ea:	682b      	ldr	r3, [r5, #0]
 80128ec:	b903      	cbnz	r3, 80128f0 <__sflush_r+0x7c>
 80128ee:	6560      	str	r0, [r4, #84]	; 0x54
 80128f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80128f2:	602f      	str	r7, [r5, #0]
 80128f4:	2900      	cmp	r1, #0
 80128f6:	d0ca      	beq.n	801288e <__sflush_r+0x1a>
 80128f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80128fc:	4299      	cmp	r1, r3
 80128fe:	d002      	beq.n	8012906 <__sflush_r+0x92>
 8012900:	4628      	mov	r0, r5
 8012902:	f7ff faa5 	bl	8011e50 <_free_r>
 8012906:	2000      	movs	r0, #0
 8012908:	6360      	str	r0, [r4, #52]	; 0x34
 801290a:	e7c1      	b.n	8012890 <__sflush_r+0x1c>
 801290c:	6a21      	ldr	r1, [r4, #32]
 801290e:	2301      	movs	r3, #1
 8012910:	4628      	mov	r0, r5
 8012912:	47b0      	blx	r6
 8012914:	1c41      	adds	r1, r0, #1
 8012916:	d1c7      	bne.n	80128a8 <__sflush_r+0x34>
 8012918:	682b      	ldr	r3, [r5, #0]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d0c4      	beq.n	80128a8 <__sflush_r+0x34>
 801291e:	2b1d      	cmp	r3, #29
 8012920:	d001      	beq.n	8012926 <__sflush_r+0xb2>
 8012922:	2b16      	cmp	r3, #22
 8012924:	d101      	bne.n	801292a <__sflush_r+0xb6>
 8012926:	602f      	str	r7, [r5, #0]
 8012928:	e7b1      	b.n	801288e <__sflush_r+0x1a>
 801292a:	89a3      	ldrh	r3, [r4, #12]
 801292c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012930:	81a3      	strh	r3, [r4, #12]
 8012932:	e7ad      	b.n	8012890 <__sflush_r+0x1c>
 8012934:	690f      	ldr	r7, [r1, #16]
 8012936:	2f00      	cmp	r7, #0
 8012938:	d0a9      	beq.n	801288e <__sflush_r+0x1a>
 801293a:	0793      	lsls	r3, r2, #30
 801293c:	680e      	ldr	r6, [r1, #0]
 801293e:	bf08      	it	eq
 8012940:	694b      	ldreq	r3, [r1, #20]
 8012942:	600f      	str	r7, [r1, #0]
 8012944:	bf18      	it	ne
 8012946:	2300      	movne	r3, #0
 8012948:	eba6 0807 	sub.w	r8, r6, r7
 801294c:	608b      	str	r3, [r1, #8]
 801294e:	f1b8 0f00 	cmp.w	r8, #0
 8012952:	dd9c      	ble.n	801288e <__sflush_r+0x1a>
 8012954:	6a21      	ldr	r1, [r4, #32]
 8012956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012958:	4643      	mov	r3, r8
 801295a:	463a      	mov	r2, r7
 801295c:	4628      	mov	r0, r5
 801295e:	47b0      	blx	r6
 8012960:	2800      	cmp	r0, #0
 8012962:	dc06      	bgt.n	8012972 <__sflush_r+0xfe>
 8012964:	89a3      	ldrh	r3, [r4, #12]
 8012966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801296a:	81a3      	strh	r3, [r4, #12]
 801296c:	f04f 30ff 	mov.w	r0, #4294967295
 8012970:	e78e      	b.n	8012890 <__sflush_r+0x1c>
 8012972:	4407      	add	r7, r0
 8012974:	eba8 0800 	sub.w	r8, r8, r0
 8012978:	e7e9      	b.n	801294e <__sflush_r+0xda>
 801297a:	bf00      	nop
 801297c:	20400001 	.word	0x20400001

08012980 <_fflush_r>:
 8012980:	b538      	push	{r3, r4, r5, lr}
 8012982:	690b      	ldr	r3, [r1, #16]
 8012984:	4605      	mov	r5, r0
 8012986:	460c      	mov	r4, r1
 8012988:	b913      	cbnz	r3, 8012990 <_fflush_r+0x10>
 801298a:	2500      	movs	r5, #0
 801298c:	4628      	mov	r0, r5
 801298e:	bd38      	pop	{r3, r4, r5, pc}
 8012990:	b118      	cbz	r0, 801299a <_fflush_r+0x1a>
 8012992:	6983      	ldr	r3, [r0, #24]
 8012994:	b90b      	cbnz	r3, 801299a <_fflush_r+0x1a>
 8012996:	f000 f887 	bl	8012aa8 <__sinit>
 801299a:	4b14      	ldr	r3, [pc, #80]	; (80129ec <_fflush_r+0x6c>)
 801299c:	429c      	cmp	r4, r3
 801299e:	d11b      	bne.n	80129d8 <_fflush_r+0x58>
 80129a0:	686c      	ldr	r4, [r5, #4]
 80129a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d0ef      	beq.n	801298a <_fflush_r+0xa>
 80129aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80129ac:	07d0      	lsls	r0, r2, #31
 80129ae:	d404      	bmi.n	80129ba <_fflush_r+0x3a>
 80129b0:	0599      	lsls	r1, r3, #22
 80129b2:	d402      	bmi.n	80129ba <_fflush_r+0x3a>
 80129b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129b6:	f000 f915 	bl	8012be4 <__retarget_lock_acquire_recursive>
 80129ba:	4628      	mov	r0, r5
 80129bc:	4621      	mov	r1, r4
 80129be:	f7ff ff59 	bl	8012874 <__sflush_r>
 80129c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80129c4:	07da      	lsls	r2, r3, #31
 80129c6:	4605      	mov	r5, r0
 80129c8:	d4e0      	bmi.n	801298c <_fflush_r+0xc>
 80129ca:	89a3      	ldrh	r3, [r4, #12]
 80129cc:	059b      	lsls	r3, r3, #22
 80129ce:	d4dd      	bmi.n	801298c <_fflush_r+0xc>
 80129d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129d2:	f000 f908 	bl	8012be6 <__retarget_lock_release_recursive>
 80129d6:	e7d9      	b.n	801298c <_fflush_r+0xc>
 80129d8:	4b05      	ldr	r3, [pc, #20]	; (80129f0 <_fflush_r+0x70>)
 80129da:	429c      	cmp	r4, r3
 80129dc:	d101      	bne.n	80129e2 <_fflush_r+0x62>
 80129de:	68ac      	ldr	r4, [r5, #8]
 80129e0:	e7df      	b.n	80129a2 <_fflush_r+0x22>
 80129e2:	4b04      	ldr	r3, [pc, #16]	; (80129f4 <_fflush_r+0x74>)
 80129e4:	429c      	cmp	r4, r3
 80129e6:	bf08      	it	eq
 80129e8:	68ec      	ldreq	r4, [r5, #12]
 80129ea:	e7da      	b.n	80129a2 <_fflush_r+0x22>
 80129ec:	080158cc 	.word	0x080158cc
 80129f0:	080158ec 	.word	0x080158ec
 80129f4:	080158ac 	.word	0x080158ac

080129f8 <std>:
 80129f8:	2300      	movs	r3, #0
 80129fa:	b510      	push	{r4, lr}
 80129fc:	4604      	mov	r4, r0
 80129fe:	e9c0 3300 	strd	r3, r3, [r0]
 8012a02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012a06:	6083      	str	r3, [r0, #8]
 8012a08:	8181      	strh	r1, [r0, #12]
 8012a0a:	6643      	str	r3, [r0, #100]	; 0x64
 8012a0c:	81c2      	strh	r2, [r0, #14]
 8012a0e:	6183      	str	r3, [r0, #24]
 8012a10:	4619      	mov	r1, r3
 8012a12:	2208      	movs	r2, #8
 8012a14:	305c      	adds	r0, #92	; 0x5c
 8012a16:	f7fd fb69 	bl	80100ec <memset>
 8012a1a:	4b05      	ldr	r3, [pc, #20]	; (8012a30 <std+0x38>)
 8012a1c:	6263      	str	r3, [r4, #36]	; 0x24
 8012a1e:	4b05      	ldr	r3, [pc, #20]	; (8012a34 <std+0x3c>)
 8012a20:	62a3      	str	r3, [r4, #40]	; 0x28
 8012a22:	4b05      	ldr	r3, [pc, #20]	; (8012a38 <std+0x40>)
 8012a24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012a26:	4b05      	ldr	r3, [pc, #20]	; (8012a3c <std+0x44>)
 8012a28:	6224      	str	r4, [r4, #32]
 8012a2a:	6323      	str	r3, [r4, #48]	; 0x30
 8012a2c:	bd10      	pop	{r4, pc}
 8012a2e:	bf00      	nop
 8012a30:	08012d4d 	.word	0x08012d4d
 8012a34:	08012d6f 	.word	0x08012d6f
 8012a38:	08012da7 	.word	0x08012da7
 8012a3c:	08012dcb 	.word	0x08012dcb

08012a40 <_cleanup_r>:
 8012a40:	4901      	ldr	r1, [pc, #4]	; (8012a48 <_cleanup_r+0x8>)
 8012a42:	f000 b8af 	b.w	8012ba4 <_fwalk_reent>
 8012a46:	bf00      	nop
 8012a48:	08012981 	.word	0x08012981

08012a4c <__sfmoreglue>:
 8012a4c:	b570      	push	{r4, r5, r6, lr}
 8012a4e:	2268      	movs	r2, #104	; 0x68
 8012a50:	1e4d      	subs	r5, r1, #1
 8012a52:	4355      	muls	r5, r2
 8012a54:	460e      	mov	r6, r1
 8012a56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012a5a:	f7ff fa65 	bl	8011f28 <_malloc_r>
 8012a5e:	4604      	mov	r4, r0
 8012a60:	b140      	cbz	r0, 8012a74 <__sfmoreglue+0x28>
 8012a62:	2100      	movs	r1, #0
 8012a64:	e9c0 1600 	strd	r1, r6, [r0]
 8012a68:	300c      	adds	r0, #12
 8012a6a:	60a0      	str	r0, [r4, #8]
 8012a6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012a70:	f7fd fb3c 	bl	80100ec <memset>
 8012a74:	4620      	mov	r0, r4
 8012a76:	bd70      	pop	{r4, r5, r6, pc}

08012a78 <__sfp_lock_acquire>:
 8012a78:	4801      	ldr	r0, [pc, #4]	; (8012a80 <__sfp_lock_acquire+0x8>)
 8012a7a:	f000 b8b3 	b.w	8012be4 <__retarget_lock_acquire_recursive>
 8012a7e:	bf00      	nop
 8012a80:	200068c5 	.word	0x200068c5

08012a84 <__sfp_lock_release>:
 8012a84:	4801      	ldr	r0, [pc, #4]	; (8012a8c <__sfp_lock_release+0x8>)
 8012a86:	f000 b8ae 	b.w	8012be6 <__retarget_lock_release_recursive>
 8012a8a:	bf00      	nop
 8012a8c:	200068c5 	.word	0x200068c5

08012a90 <__sinit_lock_acquire>:
 8012a90:	4801      	ldr	r0, [pc, #4]	; (8012a98 <__sinit_lock_acquire+0x8>)
 8012a92:	f000 b8a7 	b.w	8012be4 <__retarget_lock_acquire_recursive>
 8012a96:	bf00      	nop
 8012a98:	200068c6 	.word	0x200068c6

08012a9c <__sinit_lock_release>:
 8012a9c:	4801      	ldr	r0, [pc, #4]	; (8012aa4 <__sinit_lock_release+0x8>)
 8012a9e:	f000 b8a2 	b.w	8012be6 <__retarget_lock_release_recursive>
 8012aa2:	bf00      	nop
 8012aa4:	200068c6 	.word	0x200068c6

08012aa8 <__sinit>:
 8012aa8:	b510      	push	{r4, lr}
 8012aaa:	4604      	mov	r4, r0
 8012aac:	f7ff fff0 	bl	8012a90 <__sinit_lock_acquire>
 8012ab0:	69a3      	ldr	r3, [r4, #24]
 8012ab2:	b11b      	cbz	r3, 8012abc <__sinit+0x14>
 8012ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ab8:	f7ff bff0 	b.w	8012a9c <__sinit_lock_release>
 8012abc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012ac0:	6523      	str	r3, [r4, #80]	; 0x50
 8012ac2:	4b13      	ldr	r3, [pc, #76]	; (8012b10 <__sinit+0x68>)
 8012ac4:	4a13      	ldr	r2, [pc, #76]	; (8012b14 <__sinit+0x6c>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	62a2      	str	r2, [r4, #40]	; 0x28
 8012aca:	42a3      	cmp	r3, r4
 8012acc:	bf04      	itt	eq
 8012ace:	2301      	moveq	r3, #1
 8012ad0:	61a3      	streq	r3, [r4, #24]
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	f000 f820 	bl	8012b18 <__sfp>
 8012ad8:	6060      	str	r0, [r4, #4]
 8012ada:	4620      	mov	r0, r4
 8012adc:	f000 f81c 	bl	8012b18 <__sfp>
 8012ae0:	60a0      	str	r0, [r4, #8]
 8012ae2:	4620      	mov	r0, r4
 8012ae4:	f000 f818 	bl	8012b18 <__sfp>
 8012ae8:	2200      	movs	r2, #0
 8012aea:	60e0      	str	r0, [r4, #12]
 8012aec:	2104      	movs	r1, #4
 8012aee:	6860      	ldr	r0, [r4, #4]
 8012af0:	f7ff ff82 	bl	80129f8 <std>
 8012af4:	68a0      	ldr	r0, [r4, #8]
 8012af6:	2201      	movs	r2, #1
 8012af8:	2109      	movs	r1, #9
 8012afa:	f7ff ff7d 	bl	80129f8 <std>
 8012afe:	68e0      	ldr	r0, [r4, #12]
 8012b00:	2202      	movs	r2, #2
 8012b02:	2112      	movs	r1, #18
 8012b04:	f7ff ff78 	bl	80129f8 <std>
 8012b08:	2301      	movs	r3, #1
 8012b0a:	61a3      	str	r3, [r4, #24]
 8012b0c:	e7d2      	b.n	8012ab4 <__sinit+0xc>
 8012b0e:	bf00      	nop
 8012b10:	08015530 	.word	0x08015530
 8012b14:	08012a41 	.word	0x08012a41

08012b18 <__sfp>:
 8012b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b1a:	4607      	mov	r7, r0
 8012b1c:	f7ff ffac 	bl	8012a78 <__sfp_lock_acquire>
 8012b20:	4b1e      	ldr	r3, [pc, #120]	; (8012b9c <__sfp+0x84>)
 8012b22:	681e      	ldr	r6, [r3, #0]
 8012b24:	69b3      	ldr	r3, [r6, #24]
 8012b26:	b913      	cbnz	r3, 8012b2e <__sfp+0x16>
 8012b28:	4630      	mov	r0, r6
 8012b2a:	f7ff ffbd 	bl	8012aa8 <__sinit>
 8012b2e:	3648      	adds	r6, #72	; 0x48
 8012b30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012b34:	3b01      	subs	r3, #1
 8012b36:	d503      	bpl.n	8012b40 <__sfp+0x28>
 8012b38:	6833      	ldr	r3, [r6, #0]
 8012b3a:	b30b      	cbz	r3, 8012b80 <__sfp+0x68>
 8012b3c:	6836      	ldr	r6, [r6, #0]
 8012b3e:	e7f7      	b.n	8012b30 <__sfp+0x18>
 8012b40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012b44:	b9d5      	cbnz	r5, 8012b7c <__sfp+0x64>
 8012b46:	4b16      	ldr	r3, [pc, #88]	; (8012ba0 <__sfp+0x88>)
 8012b48:	60e3      	str	r3, [r4, #12]
 8012b4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012b4e:	6665      	str	r5, [r4, #100]	; 0x64
 8012b50:	f000 f847 	bl	8012be2 <__retarget_lock_init_recursive>
 8012b54:	f7ff ff96 	bl	8012a84 <__sfp_lock_release>
 8012b58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012b5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012b60:	6025      	str	r5, [r4, #0]
 8012b62:	61a5      	str	r5, [r4, #24]
 8012b64:	2208      	movs	r2, #8
 8012b66:	4629      	mov	r1, r5
 8012b68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012b6c:	f7fd fabe 	bl	80100ec <memset>
 8012b70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012b74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012b78:	4620      	mov	r0, r4
 8012b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b7c:	3468      	adds	r4, #104	; 0x68
 8012b7e:	e7d9      	b.n	8012b34 <__sfp+0x1c>
 8012b80:	2104      	movs	r1, #4
 8012b82:	4638      	mov	r0, r7
 8012b84:	f7ff ff62 	bl	8012a4c <__sfmoreglue>
 8012b88:	4604      	mov	r4, r0
 8012b8a:	6030      	str	r0, [r6, #0]
 8012b8c:	2800      	cmp	r0, #0
 8012b8e:	d1d5      	bne.n	8012b3c <__sfp+0x24>
 8012b90:	f7ff ff78 	bl	8012a84 <__sfp_lock_release>
 8012b94:	230c      	movs	r3, #12
 8012b96:	603b      	str	r3, [r7, #0]
 8012b98:	e7ee      	b.n	8012b78 <__sfp+0x60>
 8012b9a:	bf00      	nop
 8012b9c:	08015530 	.word	0x08015530
 8012ba0:	ffff0001 	.word	0xffff0001

08012ba4 <_fwalk_reent>:
 8012ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ba8:	4606      	mov	r6, r0
 8012baa:	4688      	mov	r8, r1
 8012bac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012bb0:	2700      	movs	r7, #0
 8012bb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012bb6:	f1b9 0901 	subs.w	r9, r9, #1
 8012bba:	d505      	bpl.n	8012bc8 <_fwalk_reent+0x24>
 8012bbc:	6824      	ldr	r4, [r4, #0]
 8012bbe:	2c00      	cmp	r4, #0
 8012bc0:	d1f7      	bne.n	8012bb2 <_fwalk_reent+0xe>
 8012bc2:	4638      	mov	r0, r7
 8012bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bc8:	89ab      	ldrh	r3, [r5, #12]
 8012bca:	2b01      	cmp	r3, #1
 8012bcc:	d907      	bls.n	8012bde <_fwalk_reent+0x3a>
 8012bce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	d003      	beq.n	8012bde <_fwalk_reent+0x3a>
 8012bd6:	4629      	mov	r1, r5
 8012bd8:	4630      	mov	r0, r6
 8012bda:	47c0      	blx	r8
 8012bdc:	4307      	orrs	r7, r0
 8012bde:	3568      	adds	r5, #104	; 0x68
 8012be0:	e7e9      	b.n	8012bb6 <_fwalk_reent+0x12>

08012be2 <__retarget_lock_init_recursive>:
 8012be2:	4770      	bx	lr

08012be4 <__retarget_lock_acquire_recursive>:
 8012be4:	4770      	bx	lr

08012be6 <__retarget_lock_release_recursive>:
 8012be6:	4770      	bx	lr

08012be8 <__swhatbuf_r>:
 8012be8:	b570      	push	{r4, r5, r6, lr}
 8012bea:	460e      	mov	r6, r1
 8012bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bf0:	2900      	cmp	r1, #0
 8012bf2:	b096      	sub	sp, #88	; 0x58
 8012bf4:	4614      	mov	r4, r2
 8012bf6:	461d      	mov	r5, r3
 8012bf8:	da08      	bge.n	8012c0c <__swhatbuf_r+0x24>
 8012bfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	602a      	str	r2, [r5, #0]
 8012c02:	061a      	lsls	r2, r3, #24
 8012c04:	d410      	bmi.n	8012c28 <__swhatbuf_r+0x40>
 8012c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012c0a:	e00e      	b.n	8012c2a <__swhatbuf_r+0x42>
 8012c0c:	466a      	mov	r2, sp
 8012c0e:	f000 f903 	bl	8012e18 <_fstat_r>
 8012c12:	2800      	cmp	r0, #0
 8012c14:	dbf1      	blt.n	8012bfa <__swhatbuf_r+0x12>
 8012c16:	9a01      	ldr	r2, [sp, #4]
 8012c18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012c1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012c20:	425a      	negs	r2, r3
 8012c22:	415a      	adcs	r2, r3
 8012c24:	602a      	str	r2, [r5, #0]
 8012c26:	e7ee      	b.n	8012c06 <__swhatbuf_r+0x1e>
 8012c28:	2340      	movs	r3, #64	; 0x40
 8012c2a:	2000      	movs	r0, #0
 8012c2c:	6023      	str	r3, [r4, #0]
 8012c2e:	b016      	add	sp, #88	; 0x58
 8012c30:	bd70      	pop	{r4, r5, r6, pc}
	...

08012c34 <__smakebuf_r>:
 8012c34:	898b      	ldrh	r3, [r1, #12]
 8012c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012c38:	079d      	lsls	r5, r3, #30
 8012c3a:	4606      	mov	r6, r0
 8012c3c:	460c      	mov	r4, r1
 8012c3e:	d507      	bpl.n	8012c50 <__smakebuf_r+0x1c>
 8012c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012c44:	6023      	str	r3, [r4, #0]
 8012c46:	6123      	str	r3, [r4, #16]
 8012c48:	2301      	movs	r3, #1
 8012c4a:	6163      	str	r3, [r4, #20]
 8012c4c:	b002      	add	sp, #8
 8012c4e:	bd70      	pop	{r4, r5, r6, pc}
 8012c50:	ab01      	add	r3, sp, #4
 8012c52:	466a      	mov	r2, sp
 8012c54:	f7ff ffc8 	bl	8012be8 <__swhatbuf_r>
 8012c58:	9900      	ldr	r1, [sp, #0]
 8012c5a:	4605      	mov	r5, r0
 8012c5c:	4630      	mov	r0, r6
 8012c5e:	f7ff f963 	bl	8011f28 <_malloc_r>
 8012c62:	b948      	cbnz	r0, 8012c78 <__smakebuf_r+0x44>
 8012c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c68:	059a      	lsls	r2, r3, #22
 8012c6a:	d4ef      	bmi.n	8012c4c <__smakebuf_r+0x18>
 8012c6c:	f023 0303 	bic.w	r3, r3, #3
 8012c70:	f043 0302 	orr.w	r3, r3, #2
 8012c74:	81a3      	strh	r3, [r4, #12]
 8012c76:	e7e3      	b.n	8012c40 <__smakebuf_r+0xc>
 8012c78:	4b0d      	ldr	r3, [pc, #52]	; (8012cb0 <__smakebuf_r+0x7c>)
 8012c7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8012c7c:	89a3      	ldrh	r3, [r4, #12]
 8012c7e:	6020      	str	r0, [r4, #0]
 8012c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c84:	81a3      	strh	r3, [r4, #12]
 8012c86:	9b00      	ldr	r3, [sp, #0]
 8012c88:	6163      	str	r3, [r4, #20]
 8012c8a:	9b01      	ldr	r3, [sp, #4]
 8012c8c:	6120      	str	r0, [r4, #16]
 8012c8e:	b15b      	cbz	r3, 8012ca8 <__smakebuf_r+0x74>
 8012c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c94:	4630      	mov	r0, r6
 8012c96:	f000 f8d1 	bl	8012e3c <_isatty_r>
 8012c9a:	b128      	cbz	r0, 8012ca8 <__smakebuf_r+0x74>
 8012c9c:	89a3      	ldrh	r3, [r4, #12]
 8012c9e:	f023 0303 	bic.w	r3, r3, #3
 8012ca2:	f043 0301 	orr.w	r3, r3, #1
 8012ca6:	81a3      	strh	r3, [r4, #12]
 8012ca8:	89a0      	ldrh	r0, [r4, #12]
 8012caa:	4305      	orrs	r5, r0
 8012cac:	81a5      	strh	r5, [r4, #12]
 8012cae:	e7cd      	b.n	8012c4c <__smakebuf_r+0x18>
 8012cb0:	08012a41 	.word	0x08012a41

08012cb4 <_malloc_usable_size_r>:
 8012cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012cb8:	1f18      	subs	r0, r3, #4
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	bfbc      	itt	lt
 8012cbe:	580b      	ldrlt	r3, [r1, r0]
 8012cc0:	18c0      	addlt	r0, r0, r3
 8012cc2:	4770      	bx	lr

08012cc4 <_raise_r>:
 8012cc4:	291f      	cmp	r1, #31
 8012cc6:	b538      	push	{r3, r4, r5, lr}
 8012cc8:	4604      	mov	r4, r0
 8012cca:	460d      	mov	r5, r1
 8012ccc:	d904      	bls.n	8012cd8 <_raise_r+0x14>
 8012cce:	2316      	movs	r3, #22
 8012cd0:	6003      	str	r3, [r0, #0]
 8012cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8012cd6:	bd38      	pop	{r3, r4, r5, pc}
 8012cd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012cda:	b112      	cbz	r2, 8012ce2 <_raise_r+0x1e>
 8012cdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012ce0:	b94b      	cbnz	r3, 8012cf6 <_raise_r+0x32>
 8012ce2:	4620      	mov	r0, r4
 8012ce4:	f000 f830 	bl	8012d48 <_getpid_r>
 8012ce8:	462a      	mov	r2, r5
 8012cea:	4601      	mov	r1, r0
 8012cec:	4620      	mov	r0, r4
 8012cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cf2:	f000 b817 	b.w	8012d24 <_kill_r>
 8012cf6:	2b01      	cmp	r3, #1
 8012cf8:	d00a      	beq.n	8012d10 <_raise_r+0x4c>
 8012cfa:	1c59      	adds	r1, r3, #1
 8012cfc:	d103      	bne.n	8012d06 <_raise_r+0x42>
 8012cfe:	2316      	movs	r3, #22
 8012d00:	6003      	str	r3, [r0, #0]
 8012d02:	2001      	movs	r0, #1
 8012d04:	e7e7      	b.n	8012cd6 <_raise_r+0x12>
 8012d06:	2400      	movs	r4, #0
 8012d08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012d0c:	4628      	mov	r0, r5
 8012d0e:	4798      	blx	r3
 8012d10:	2000      	movs	r0, #0
 8012d12:	e7e0      	b.n	8012cd6 <_raise_r+0x12>

08012d14 <raise>:
 8012d14:	4b02      	ldr	r3, [pc, #8]	; (8012d20 <raise+0xc>)
 8012d16:	4601      	mov	r1, r0
 8012d18:	6818      	ldr	r0, [r3, #0]
 8012d1a:	f7ff bfd3 	b.w	8012cc4 <_raise_r>
 8012d1e:	bf00      	nop
 8012d20:	2000001c 	.word	0x2000001c

08012d24 <_kill_r>:
 8012d24:	b538      	push	{r3, r4, r5, lr}
 8012d26:	4d07      	ldr	r5, [pc, #28]	; (8012d44 <_kill_r+0x20>)
 8012d28:	2300      	movs	r3, #0
 8012d2a:	4604      	mov	r4, r0
 8012d2c:	4608      	mov	r0, r1
 8012d2e:	4611      	mov	r1, r2
 8012d30:	602b      	str	r3, [r5, #0]
 8012d32:	f7f1 fa67 	bl	8004204 <_kill>
 8012d36:	1c43      	adds	r3, r0, #1
 8012d38:	d102      	bne.n	8012d40 <_kill_r+0x1c>
 8012d3a:	682b      	ldr	r3, [r5, #0]
 8012d3c:	b103      	cbz	r3, 8012d40 <_kill_r+0x1c>
 8012d3e:	6023      	str	r3, [r4, #0]
 8012d40:	bd38      	pop	{r3, r4, r5, pc}
 8012d42:	bf00      	nop
 8012d44:	200068c0 	.word	0x200068c0

08012d48 <_getpid_r>:
 8012d48:	f7f1 ba54 	b.w	80041f4 <_getpid>

08012d4c <__sread>:
 8012d4c:	b510      	push	{r4, lr}
 8012d4e:	460c      	mov	r4, r1
 8012d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d54:	f000 f894 	bl	8012e80 <_read_r>
 8012d58:	2800      	cmp	r0, #0
 8012d5a:	bfab      	itete	ge
 8012d5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012d5e:	89a3      	ldrhlt	r3, [r4, #12]
 8012d60:	181b      	addge	r3, r3, r0
 8012d62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012d66:	bfac      	ite	ge
 8012d68:	6563      	strge	r3, [r4, #84]	; 0x54
 8012d6a:	81a3      	strhlt	r3, [r4, #12]
 8012d6c:	bd10      	pop	{r4, pc}

08012d6e <__swrite>:
 8012d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d72:	461f      	mov	r7, r3
 8012d74:	898b      	ldrh	r3, [r1, #12]
 8012d76:	05db      	lsls	r3, r3, #23
 8012d78:	4605      	mov	r5, r0
 8012d7a:	460c      	mov	r4, r1
 8012d7c:	4616      	mov	r6, r2
 8012d7e:	d505      	bpl.n	8012d8c <__swrite+0x1e>
 8012d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d84:	2302      	movs	r3, #2
 8012d86:	2200      	movs	r2, #0
 8012d88:	f000 f868 	bl	8012e5c <_lseek_r>
 8012d8c:	89a3      	ldrh	r3, [r4, #12]
 8012d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012d96:	81a3      	strh	r3, [r4, #12]
 8012d98:	4632      	mov	r2, r6
 8012d9a:	463b      	mov	r3, r7
 8012d9c:	4628      	mov	r0, r5
 8012d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012da2:	f000 b817 	b.w	8012dd4 <_write_r>

08012da6 <__sseek>:
 8012da6:	b510      	push	{r4, lr}
 8012da8:	460c      	mov	r4, r1
 8012daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dae:	f000 f855 	bl	8012e5c <_lseek_r>
 8012db2:	1c43      	adds	r3, r0, #1
 8012db4:	89a3      	ldrh	r3, [r4, #12]
 8012db6:	bf15      	itete	ne
 8012db8:	6560      	strne	r0, [r4, #84]	; 0x54
 8012dba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012dbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012dc2:	81a3      	strheq	r3, [r4, #12]
 8012dc4:	bf18      	it	ne
 8012dc6:	81a3      	strhne	r3, [r4, #12]
 8012dc8:	bd10      	pop	{r4, pc}

08012dca <__sclose>:
 8012dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dce:	f000 b813 	b.w	8012df8 <_close_r>
	...

08012dd4 <_write_r>:
 8012dd4:	b538      	push	{r3, r4, r5, lr}
 8012dd6:	4d07      	ldr	r5, [pc, #28]	; (8012df4 <_write_r+0x20>)
 8012dd8:	4604      	mov	r4, r0
 8012dda:	4608      	mov	r0, r1
 8012ddc:	4611      	mov	r1, r2
 8012dde:	2200      	movs	r2, #0
 8012de0:	602a      	str	r2, [r5, #0]
 8012de2:	461a      	mov	r2, r3
 8012de4:	f7f1 fa45 	bl	8004272 <_write>
 8012de8:	1c43      	adds	r3, r0, #1
 8012dea:	d102      	bne.n	8012df2 <_write_r+0x1e>
 8012dec:	682b      	ldr	r3, [r5, #0]
 8012dee:	b103      	cbz	r3, 8012df2 <_write_r+0x1e>
 8012df0:	6023      	str	r3, [r4, #0]
 8012df2:	bd38      	pop	{r3, r4, r5, pc}
 8012df4:	200068c0 	.word	0x200068c0

08012df8 <_close_r>:
 8012df8:	b538      	push	{r3, r4, r5, lr}
 8012dfa:	4d06      	ldr	r5, [pc, #24]	; (8012e14 <_close_r+0x1c>)
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	4604      	mov	r4, r0
 8012e00:	4608      	mov	r0, r1
 8012e02:	602b      	str	r3, [r5, #0]
 8012e04:	f7f1 fa51 	bl	80042aa <_close>
 8012e08:	1c43      	adds	r3, r0, #1
 8012e0a:	d102      	bne.n	8012e12 <_close_r+0x1a>
 8012e0c:	682b      	ldr	r3, [r5, #0]
 8012e0e:	b103      	cbz	r3, 8012e12 <_close_r+0x1a>
 8012e10:	6023      	str	r3, [r4, #0]
 8012e12:	bd38      	pop	{r3, r4, r5, pc}
 8012e14:	200068c0 	.word	0x200068c0

08012e18 <_fstat_r>:
 8012e18:	b538      	push	{r3, r4, r5, lr}
 8012e1a:	4d07      	ldr	r5, [pc, #28]	; (8012e38 <_fstat_r+0x20>)
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	4604      	mov	r4, r0
 8012e20:	4608      	mov	r0, r1
 8012e22:	4611      	mov	r1, r2
 8012e24:	602b      	str	r3, [r5, #0]
 8012e26:	f7f1 fa4c 	bl	80042c2 <_fstat>
 8012e2a:	1c43      	adds	r3, r0, #1
 8012e2c:	d102      	bne.n	8012e34 <_fstat_r+0x1c>
 8012e2e:	682b      	ldr	r3, [r5, #0]
 8012e30:	b103      	cbz	r3, 8012e34 <_fstat_r+0x1c>
 8012e32:	6023      	str	r3, [r4, #0]
 8012e34:	bd38      	pop	{r3, r4, r5, pc}
 8012e36:	bf00      	nop
 8012e38:	200068c0 	.word	0x200068c0

08012e3c <_isatty_r>:
 8012e3c:	b538      	push	{r3, r4, r5, lr}
 8012e3e:	4d06      	ldr	r5, [pc, #24]	; (8012e58 <_isatty_r+0x1c>)
 8012e40:	2300      	movs	r3, #0
 8012e42:	4604      	mov	r4, r0
 8012e44:	4608      	mov	r0, r1
 8012e46:	602b      	str	r3, [r5, #0]
 8012e48:	f7f1 fa4b 	bl	80042e2 <_isatty>
 8012e4c:	1c43      	adds	r3, r0, #1
 8012e4e:	d102      	bne.n	8012e56 <_isatty_r+0x1a>
 8012e50:	682b      	ldr	r3, [r5, #0]
 8012e52:	b103      	cbz	r3, 8012e56 <_isatty_r+0x1a>
 8012e54:	6023      	str	r3, [r4, #0]
 8012e56:	bd38      	pop	{r3, r4, r5, pc}
 8012e58:	200068c0 	.word	0x200068c0

08012e5c <_lseek_r>:
 8012e5c:	b538      	push	{r3, r4, r5, lr}
 8012e5e:	4d07      	ldr	r5, [pc, #28]	; (8012e7c <_lseek_r+0x20>)
 8012e60:	4604      	mov	r4, r0
 8012e62:	4608      	mov	r0, r1
 8012e64:	4611      	mov	r1, r2
 8012e66:	2200      	movs	r2, #0
 8012e68:	602a      	str	r2, [r5, #0]
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	f7f1 fa44 	bl	80042f8 <_lseek>
 8012e70:	1c43      	adds	r3, r0, #1
 8012e72:	d102      	bne.n	8012e7a <_lseek_r+0x1e>
 8012e74:	682b      	ldr	r3, [r5, #0]
 8012e76:	b103      	cbz	r3, 8012e7a <_lseek_r+0x1e>
 8012e78:	6023      	str	r3, [r4, #0]
 8012e7a:	bd38      	pop	{r3, r4, r5, pc}
 8012e7c:	200068c0 	.word	0x200068c0

08012e80 <_read_r>:
 8012e80:	b538      	push	{r3, r4, r5, lr}
 8012e82:	4d07      	ldr	r5, [pc, #28]	; (8012ea0 <_read_r+0x20>)
 8012e84:	4604      	mov	r4, r0
 8012e86:	4608      	mov	r0, r1
 8012e88:	4611      	mov	r1, r2
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	602a      	str	r2, [r5, #0]
 8012e8e:	461a      	mov	r2, r3
 8012e90:	f7f1 f9d2 	bl	8004238 <_read>
 8012e94:	1c43      	adds	r3, r0, #1
 8012e96:	d102      	bne.n	8012e9e <_read_r+0x1e>
 8012e98:	682b      	ldr	r3, [r5, #0]
 8012e9a:	b103      	cbz	r3, 8012e9e <_read_r+0x1e>
 8012e9c:	6023      	str	r3, [r4, #0]
 8012e9e:	bd38      	pop	{r3, r4, r5, pc}
 8012ea0:	200068c0 	.word	0x200068c0

08012ea4 <sinf>:
 8012ea4:	ee10 3a10 	vmov	r3, s0
 8012ea8:	b507      	push	{r0, r1, r2, lr}
 8012eaa:	4a1f      	ldr	r2, [pc, #124]	; (8012f28 <sinf+0x84>)
 8012eac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012eb0:	4293      	cmp	r3, r2
 8012eb2:	dc07      	bgt.n	8012ec4 <sinf+0x20>
 8012eb4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8012f2c <sinf+0x88>
 8012eb8:	2000      	movs	r0, #0
 8012eba:	b003      	add	sp, #12
 8012ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ec0:	f001 bf78 	b.w	8014db4 <__kernel_sinf>
 8012ec4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012ec8:	db04      	blt.n	8012ed4 <sinf+0x30>
 8012eca:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012ece:	b003      	add	sp, #12
 8012ed0:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ed4:	4668      	mov	r0, sp
 8012ed6:	f001 fb57 	bl	8014588 <__ieee754_rem_pio2f>
 8012eda:	f000 0003 	and.w	r0, r0, #3
 8012ede:	2801      	cmp	r0, #1
 8012ee0:	d00a      	beq.n	8012ef8 <sinf+0x54>
 8012ee2:	2802      	cmp	r0, #2
 8012ee4:	d00f      	beq.n	8012f06 <sinf+0x62>
 8012ee6:	b9c0      	cbnz	r0, 8012f1a <sinf+0x76>
 8012ee8:	eddd 0a01 	vldr	s1, [sp, #4]
 8012eec:	ed9d 0a00 	vldr	s0, [sp]
 8012ef0:	2001      	movs	r0, #1
 8012ef2:	f001 ff5f 	bl	8014db4 <__kernel_sinf>
 8012ef6:	e7ea      	b.n	8012ece <sinf+0x2a>
 8012ef8:	eddd 0a01 	vldr	s1, [sp, #4]
 8012efc:	ed9d 0a00 	vldr	s0, [sp]
 8012f00:	f001 fc82 	bl	8014808 <__kernel_cosf>
 8012f04:	e7e3      	b.n	8012ece <sinf+0x2a>
 8012f06:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f0a:	ed9d 0a00 	vldr	s0, [sp]
 8012f0e:	2001      	movs	r0, #1
 8012f10:	f001 ff50 	bl	8014db4 <__kernel_sinf>
 8012f14:	eeb1 0a40 	vneg.f32	s0, s0
 8012f18:	e7d9      	b.n	8012ece <sinf+0x2a>
 8012f1a:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f1e:	ed9d 0a00 	vldr	s0, [sp]
 8012f22:	f001 fc71 	bl	8014808 <__kernel_cosf>
 8012f26:	e7f5      	b.n	8012f14 <sinf+0x70>
 8012f28:	3f490fd8 	.word	0x3f490fd8
 8012f2c:	00000000 	.word	0x00000000

08012f30 <pow>:
 8012f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f32:	ed2d 8b02 	vpush	{d8}
 8012f36:	eeb0 8a40 	vmov.f32	s16, s0
 8012f3a:	eef0 8a60 	vmov.f32	s17, s1
 8012f3e:	ec55 4b11 	vmov	r4, r5, d1
 8012f42:	f000 f8ed 	bl	8013120 <__ieee754_pow>
 8012f46:	4622      	mov	r2, r4
 8012f48:	462b      	mov	r3, r5
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	4629      	mov	r1, r5
 8012f4e:	ec57 6b10 	vmov	r6, r7, d0
 8012f52:	f7ed fdeb 	bl	8000b2c <__aeabi_dcmpun>
 8012f56:	2800      	cmp	r0, #0
 8012f58:	d13b      	bne.n	8012fd2 <pow+0xa2>
 8012f5a:	ec51 0b18 	vmov	r0, r1, d8
 8012f5e:	2200      	movs	r2, #0
 8012f60:	2300      	movs	r3, #0
 8012f62:	f7ed fdb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8012f66:	b1b8      	cbz	r0, 8012f98 <pow+0x68>
 8012f68:	2200      	movs	r2, #0
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	4629      	mov	r1, r5
 8012f70:	f7ed fdaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8012f74:	2800      	cmp	r0, #0
 8012f76:	d146      	bne.n	8013006 <pow+0xd6>
 8012f78:	ec45 4b10 	vmov	d0, r4, r5
 8012f7c:	f001 ffbd 	bl	8014efa <finite>
 8012f80:	b338      	cbz	r0, 8012fd2 <pow+0xa2>
 8012f82:	2200      	movs	r2, #0
 8012f84:	2300      	movs	r3, #0
 8012f86:	4620      	mov	r0, r4
 8012f88:	4629      	mov	r1, r5
 8012f8a:	f7ed fda7 	bl	8000adc <__aeabi_dcmplt>
 8012f8e:	b300      	cbz	r0, 8012fd2 <pow+0xa2>
 8012f90:	f7fd f874 	bl	801007c <__errno>
 8012f94:	2322      	movs	r3, #34	; 0x22
 8012f96:	e01b      	b.n	8012fd0 <pow+0xa0>
 8012f98:	ec47 6b10 	vmov	d0, r6, r7
 8012f9c:	f001 ffad 	bl	8014efa <finite>
 8012fa0:	b9e0      	cbnz	r0, 8012fdc <pow+0xac>
 8012fa2:	eeb0 0a48 	vmov.f32	s0, s16
 8012fa6:	eef0 0a68 	vmov.f32	s1, s17
 8012faa:	f001 ffa6 	bl	8014efa <finite>
 8012fae:	b1a8      	cbz	r0, 8012fdc <pow+0xac>
 8012fb0:	ec45 4b10 	vmov	d0, r4, r5
 8012fb4:	f001 ffa1 	bl	8014efa <finite>
 8012fb8:	b180      	cbz	r0, 8012fdc <pow+0xac>
 8012fba:	4632      	mov	r2, r6
 8012fbc:	463b      	mov	r3, r7
 8012fbe:	4630      	mov	r0, r6
 8012fc0:	4639      	mov	r1, r7
 8012fc2:	f7ed fdb3 	bl	8000b2c <__aeabi_dcmpun>
 8012fc6:	2800      	cmp	r0, #0
 8012fc8:	d0e2      	beq.n	8012f90 <pow+0x60>
 8012fca:	f7fd f857 	bl	801007c <__errno>
 8012fce:	2321      	movs	r3, #33	; 0x21
 8012fd0:	6003      	str	r3, [r0, #0]
 8012fd2:	ecbd 8b02 	vpop	{d8}
 8012fd6:	ec47 6b10 	vmov	d0, r6, r7
 8012fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fdc:	2200      	movs	r2, #0
 8012fde:	2300      	movs	r3, #0
 8012fe0:	4630      	mov	r0, r6
 8012fe2:	4639      	mov	r1, r7
 8012fe4:	f7ed fd70 	bl	8000ac8 <__aeabi_dcmpeq>
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	d0f2      	beq.n	8012fd2 <pow+0xa2>
 8012fec:	eeb0 0a48 	vmov.f32	s0, s16
 8012ff0:	eef0 0a68 	vmov.f32	s1, s17
 8012ff4:	f001 ff81 	bl	8014efa <finite>
 8012ff8:	2800      	cmp	r0, #0
 8012ffa:	d0ea      	beq.n	8012fd2 <pow+0xa2>
 8012ffc:	ec45 4b10 	vmov	d0, r4, r5
 8013000:	f001 ff7b 	bl	8014efa <finite>
 8013004:	e7c3      	b.n	8012f8e <pow+0x5e>
 8013006:	4f01      	ldr	r7, [pc, #4]	; (801300c <pow+0xdc>)
 8013008:	2600      	movs	r6, #0
 801300a:	e7e2      	b.n	8012fd2 <pow+0xa2>
 801300c:	3ff00000 	.word	0x3ff00000

08013010 <asinf>:
 8013010:	b508      	push	{r3, lr}
 8013012:	ed2d 8b02 	vpush	{d8}
 8013016:	eeb0 8a40 	vmov.f32	s16, s0
 801301a:	f000 fe61 	bl	8013ce0 <__ieee754_asinf>
 801301e:	eeb4 8a48 	vcmp.f32	s16, s16
 8013022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013026:	eef0 8a40 	vmov.f32	s17, s0
 801302a:	d615      	bvs.n	8013058 <asinf+0x48>
 801302c:	eeb0 0a48 	vmov.f32	s0, s16
 8013030:	f002 f8c8 	bl	80151c4 <fabsf>
 8013034:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013038:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801303c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013040:	dd0a      	ble.n	8013058 <asinf+0x48>
 8013042:	f7fd f81b 	bl	801007c <__errno>
 8013046:	ecbd 8b02 	vpop	{d8}
 801304a:	2321      	movs	r3, #33	; 0x21
 801304c:	6003      	str	r3, [r0, #0]
 801304e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013052:	4804      	ldr	r0, [pc, #16]	; (8013064 <asinf+0x54>)
 8013054:	f002 b90c 	b.w	8015270 <nanf>
 8013058:	eeb0 0a68 	vmov.f32	s0, s17
 801305c:	ecbd 8b02 	vpop	{d8}
 8013060:	bd08      	pop	{r3, pc}
 8013062:	bf00      	nop
 8013064:	080157a0 	.word	0x080157a0

08013068 <atan2f>:
 8013068:	f000 bf20 	b.w	8013eac <__ieee754_atan2f>

0801306c <powf>:
 801306c:	b508      	push	{r3, lr}
 801306e:	ed2d 8b04 	vpush	{d8-d9}
 8013072:	eeb0 8a60 	vmov.f32	s16, s1
 8013076:	eeb0 9a40 	vmov.f32	s18, s0
 801307a:	f000 ffb7 	bl	8013fec <__ieee754_powf>
 801307e:	eeb4 8a48 	vcmp.f32	s16, s16
 8013082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013086:	eef0 8a40 	vmov.f32	s17, s0
 801308a:	d63e      	bvs.n	801310a <powf+0x9e>
 801308c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8013090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013094:	d112      	bne.n	80130bc <powf+0x50>
 8013096:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801309a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801309e:	d039      	beq.n	8013114 <powf+0xa8>
 80130a0:	eeb0 0a48 	vmov.f32	s0, s16
 80130a4:	f002 f895 	bl	80151d2 <finitef>
 80130a8:	b378      	cbz	r0, 801310a <powf+0x9e>
 80130aa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80130ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130b2:	d52a      	bpl.n	801310a <powf+0x9e>
 80130b4:	f7fc ffe2 	bl	801007c <__errno>
 80130b8:	2322      	movs	r3, #34	; 0x22
 80130ba:	e014      	b.n	80130e6 <powf+0x7a>
 80130bc:	f002 f889 	bl	80151d2 <finitef>
 80130c0:	b998      	cbnz	r0, 80130ea <powf+0x7e>
 80130c2:	eeb0 0a49 	vmov.f32	s0, s18
 80130c6:	f002 f884 	bl	80151d2 <finitef>
 80130ca:	b170      	cbz	r0, 80130ea <powf+0x7e>
 80130cc:	eeb0 0a48 	vmov.f32	s0, s16
 80130d0:	f002 f87f 	bl	80151d2 <finitef>
 80130d4:	b148      	cbz	r0, 80130ea <powf+0x7e>
 80130d6:	eef4 8a68 	vcmp.f32	s17, s17
 80130da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130de:	d7e9      	bvc.n	80130b4 <powf+0x48>
 80130e0:	f7fc ffcc 	bl	801007c <__errno>
 80130e4:	2321      	movs	r3, #33	; 0x21
 80130e6:	6003      	str	r3, [r0, #0]
 80130e8:	e00f      	b.n	801310a <powf+0x9e>
 80130ea:	eef5 8a40 	vcmp.f32	s17, #0.0
 80130ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130f2:	d10a      	bne.n	801310a <powf+0x9e>
 80130f4:	eeb0 0a49 	vmov.f32	s0, s18
 80130f8:	f002 f86b 	bl	80151d2 <finitef>
 80130fc:	b128      	cbz	r0, 801310a <powf+0x9e>
 80130fe:	eeb0 0a48 	vmov.f32	s0, s16
 8013102:	f002 f866 	bl	80151d2 <finitef>
 8013106:	2800      	cmp	r0, #0
 8013108:	d1d4      	bne.n	80130b4 <powf+0x48>
 801310a:	eeb0 0a68 	vmov.f32	s0, s17
 801310e:	ecbd 8b04 	vpop	{d8-d9}
 8013112:	bd08      	pop	{r3, pc}
 8013114:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013118:	e7f7      	b.n	801310a <powf+0x9e>
 801311a:	0000      	movs	r0, r0
 801311c:	0000      	movs	r0, r0
	...

08013120 <__ieee754_pow>:
 8013120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013124:	ed2d 8b06 	vpush	{d8-d10}
 8013128:	b089      	sub	sp, #36	; 0x24
 801312a:	ed8d 1b00 	vstr	d1, [sp]
 801312e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013132:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013136:	ea58 0102 	orrs.w	r1, r8, r2
 801313a:	ec57 6b10 	vmov	r6, r7, d0
 801313e:	d115      	bne.n	801316c <__ieee754_pow+0x4c>
 8013140:	19b3      	adds	r3, r6, r6
 8013142:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8013146:	4152      	adcs	r2, r2
 8013148:	4299      	cmp	r1, r3
 801314a:	4b89      	ldr	r3, [pc, #548]	; (8013370 <__ieee754_pow+0x250>)
 801314c:	4193      	sbcs	r3, r2
 801314e:	f080 84d2 	bcs.w	8013af6 <__ieee754_pow+0x9d6>
 8013152:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013156:	4630      	mov	r0, r6
 8013158:	4639      	mov	r1, r7
 801315a:	f7ed f897 	bl	800028c <__adddf3>
 801315e:	ec41 0b10 	vmov	d0, r0, r1
 8013162:	b009      	add	sp, #36	; 0x24
 8013164:	ecbd 8b06 	vpop	{d8-d10}
 8013168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801316c:	4b81      	ldr	r3, [pc, #516]	; (8013374 <__ieee754_pow+0x254>)
 801316e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013172:	429c      	cmp	r4, r3
 8013174:	ee10 aa10 	vmov	sl, s0
 8013178:	463d      	mov	r5, r7
 801317a:	dc06      	bgt.n	801318a <__ieee754_pow+0x6a>
 801317c:	d101      	bne.n	8013182 <__ieee754_pow+0x62>
 801317e:	2e00      	cmp	r6, #0
 8013180:	d1e7      	bne.n	8013152 <__ieee754_pow+0x32>
 8013182:	4598      	cmp	r8, r3
 8013184:	dc01      	bgt.n	801318a <__ieee754_pow+0x6a>
 8013186:	d10f      	bne.n	80131a8 <__ieee754_pow+0x88>
 8013188:	b172      	cbz	r2, 80131a8 <__ieee754_pow+0x88>
 801318a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801318e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8013192:	ea55 050a 	orrs.w	r5, r5, sl
 8013196:	d1dc      	bne.n	8013152 <__ieee754_pow+0x32>
 8013198:	e9dd 3200 	ldrd	r3, r2, [sp]
 801319c:	18db      	adds	r3, r3, r3
 801319e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80131a2:	4152      	adcs	r2, r2
 80131a4:	429d      	cmp	r5, r3
 80131a6:	e7d0      	b.n	801314a <__ieee754_pow+0x2a>
 80131a8:	2d00      	cmp	r5, #0
 80131aa:	da3b      	bge.n	8013224 <__ieee754_pow+0x104>
 80131ac:	4b72      	ldr	r3, [pc, #456]	; (8013378 <__ieee754_pow+0x258>)
 80131ae:	4598      	cmp	r8, r3
 80131b0:	dc51      	bgt.n	8013256 <__ieee754_pow+0x136>
 80131b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80131b6:	4598      	cmp	r8, r3
 80131b8:	f340 84ac 	ble.w	8013b14 <__ieee754_pow+0x9f4>
 80131bc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80131c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80131c4:	2b14      	cmp	r3, #20
 80131c6:	dd0f      	ble.n	80131e8 <__ieee754_pow+0xc8>
 80131c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80131cc:	fa22 f103 	lsr.w	r1, r2, r3
 80131d0:	fa01 f303 	lsl.w	r3, r1, r3
 80131d4:	4293      	cmp	r3, r2
 80131d6:	f040 849d 	bne.w	8013b14 <__ieee754_pow+0x9f4>
 80131da:	f001 0101 	and.w	r1, r1, #1
 80131de:	f1c1 0302 	rsb	r3, r1, #2
 80131e2:	9304      	str	r3, [sp, #16]
 80131e4:	b182      	cbz	r2, 8013208 <__ieee754_pow+0xe8>
 80131e6:	e05f      	b.n	80132a8 <__ieee754_pow+0x188>
 80131e8:	2a00      	cmp	r2, #0
 80131ea:	d15b      	bne.n	80132a4 <__ieee754_pow+0x184>
 80131ec:	f1c3 0314 	rsb	r3, r3, #20
 80131f0:	fa48 f103 	asr.w	r1, r8, r3
 80131f4:	fa01 f303 	lsl.w	r3, r1, r3
 80131f8:	4543      	cmp	r3, r8
 80131fa:	f040 8488 	bne.w	8013b0e <__ieee754_pow+0x9ee>
 80131fe:	f001 0101 	and.w	r1, r1, #1
 8013202:	f1c1 0302 	rsb	r3, r1, #2
 8013206:	9304      	str	r3, [sp, #16]
 8013208:	4b5c      	ldr	r3, [pc, #368]	; (801337c <__ieee754_pow+0x25c>)
 801320a:	4598      	cmp	r8, r3
 801320c:	d132      	bne.n	8013274 <__ieee754_pow+0x154>
 801320e:	f1b9 0f00 	cmp.w	r9, #0
 8013212:	f280 8478 	bge.w	8013b06 <__ieee754_pow+0x9e6>
 8013216:	4959      	ldr	r1, [pc, #356]	; (801337c <__ieee754_pow+0x25c>)
 8013218:	4632      	mov	r2, r6
 801321a:	463b      	mov	r3, r7
 801321c:	2000      	movs	r0, #0
 801321e:	f7ed fb15 	bl	800084c <__aeabi_ddiv>
 8013222:	e79c      	b.n	801315e <__ieee754_pow+0x3e>
 8013224:	2300      	movs	r3, #0
 8013226:	9304      	str	r3, [sp, #16]
 8013228:	2a00      	cmp	r2, #0
 801322a:	d13d      	bne.n	80132a8 <__ieee754_pow+0x188>
 801322c:	4b51      	ldr	r3, [pc, #324]	; (8013374 <__ieee754_pow+0x254>)
 801322e:	4598      	cmp	r8, r3
 8013230:	d1ea      	bne.n	8013208 <__ieee754_pow+0xe8>
 8013232:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013236:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801323a:	ea53 030a 	orrs.w	r3, r3, sl
 801323e:	f000 845a 	beq.w	8013af6 <__ieee754_pow+0x9d6>
 8013242:	4b4f      	ldr	r3, [pc, #316]	; (8013380 <__ieee754_pow+0x260>)
 8013244:	429c      	cmp	r4, r3
 8013246:	dd08      	ble.n	801325a <__ieee754_pow+0x13a>
 8013248:	f1b9 0f00 	cmp.w	r9, #0
 801324c:	f2c0 8457 	blt.w	8013afe <__ieee754_pow+0x9de>
 8013250:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013254:	e783      	b.n	801315e <__ieee754_pow+0x3e>
 8013256:	2302      	movs	r3, #2
 8013258:	e7e5      	b.n	8013226 <__ieee754_pow+0x106>
 801325a:	f1b9 0f00 	cmp.w	r9, #0
 801325e:	f04f 0000 	mov.w	r0, #0
 8013262:	f04f 0100 	mov.w	r1, #0
 8013266:	f6bf af7a 	bge.w	801315e <__ieee754_pow+0x3e>
 801326a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801326e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013272:	e774      	b.n	801315e <__ieee754_pow+0x3e>
 8013274:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013278:	d106      	bne.n	8013288 <__ieee754_pow+0x168>
 801327a:	4632      	mov	r2, r6
 801327c:	463b      	mov	r3, r7
 801327e:	4630      	mov	r0, r6
 8013280:	4639      	mov	r1, r7
 8013282:	f7ed f9b9 	bl	80005f8 <__aeabi_dmul>
 8013286:	e76a      	b.n	801315e <__ieee754_pow+0x3e>
 8013288:	4b3e      	ldr	r3, [pc, #248]	; (8013384 <__ieee754_pow+0x264>)
 801328a:	4599      	cmp	r9, r3
 801328c:	d10c      	bne.n	80132a8 <__ieee754_pow+0x188>
 801328e:	2d00      	cmp	r5, #0
 8013290:	db0a      	blt.n	80132a8 <__ieee754_pow+0x188>
 8013292:	ec47 6b10 	vmov	d0, r6, r7
 8013296:	b009      	add	sp, #36	; 0x24
 8013298:	ecbd 8b06 	vpop	{d8-d10}
 801329c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132a0:	f000 bc6c 	b.w	8013b7c <__ieee754_sqrt>
 80132a4:	2300      	movs	r3, #0
 80132a6:	9304      	str	r3, [sp, #16]
 80132a8:	ec47 6b10 	vmov	d0, r6, r7
 80132ac:	f001 fe1c 	bl	8014ee8 <fabs>
 80132b0:	ec51 0b10 	vmov	r0, r1, d0
 80132b4:	f1ba 0f00 	cmp.w	sl, #0
 80132b8:	d129      	bne.n	801330e <__ieee754_pow+0x1ee>
 80132ba:	b124      	cbz	r4, 80132c6 <__ieee754_pow+0x1a6>
 80132bc:	4b2f      	ldr	r3, [pc, #188]	; (801337c <__ieee754_pow+0x25c>)
 80132be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80132c2:	429a      	cmp	r2, r3
 80132c4:	d123      	bne.n	801330e <__ieee754_pow+0x1ee>
 80132c6:	f1b9 0f00 	cmp.w	r9, #0
 80132ca:	da05      	bge.n	80132d8 <__ieee754_pow+0x1b8>
 80132cc:	4602      	mov	r2, r0
 80132ce:	460b      	mov	r3, r1
 80132d0:	2000      	movs	r0, #0
 80132d2:	492a      	ldr	r1, [pc, #168]	; (801337c <__ieee754_pow+0x25c>)
 80132d4:	f7ed faba 	bl	800084c <__aeabi_ddiv>
 80132d8:	2d00      	cmp	r5, #0
 80132da:	f6bf af40 	bge.w	801315e <__ieee754_pow+0x3e>
 80132de:	9b04      	ldr	r3, [sp, #16]
 80132e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80132e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80132e8:	4323      	orrs	r3, r4
 80132ea:	d108      	bne.n	80132fe <__ieee754_pow+0x1de>
 80132ec:	4602      	mov	r2, r0
 80132ee:	460b      	mov	r3, r1
 80132f0:	4610      	mov	r0, r2
 80132f2:	4619      	mov	r1, r3
 80132f4:	f7ec ffc8 	bl	8000288 <__aeabi_dsub>
 80132f8:	4602      	mov	r2, r0
 80132fa:	460b      	mov	r3, r1
 80132fc:	e78f      	b.n	801321e <__ieee754_pow+0xfe>
 80132fe:	9b04      	ldr	r3, [sp, #16]
 8013300:	2b01      	cmp	r3, #1
 8013302:	f47f af2c 	bne.w	801315e <__ieee754_pow+0x3e>
 8013306:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801330a:	4619      	mov	r1, r3
 801330c:	e727      	b.n	801315e <__ieee754_pow+0x3e>
 801330e:	0feb      	lsrs	r3, r5, #31
 8013310:	3b01      	subs	r3, #1
 8013312:	9306      	str	r3, [sp, #24]
 8013314:	9a06      	ldr	r2, [sp, #24]
 8013316:	9b04      	ldr	r3, [sp, #16]
 8013318:	4313      	orrs	r3, r2
 801331a:	d102      	bne.n	8013322 <__ieee754_pow+0x202>
 801331c:	4632      	mov	r2, r6
 801331e:	463b      	mov	r3, r7
 8013320:	e7e6      	b.n	80132f0 <__ieee754_pow+0x1d0>
 8013322:	4b19      	ldr	r3, [pc, #100]	; (8013388 <__ieee754_pow+0x268>)
 8013324:	4598      	cmp	r8, r3
 8013326:	f340 80fb 	ble.w	8013520 <__ieee754_pow+0x400>
 801332a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801332e:	4598      	cmp	r8, r3
 8013330:	4b13      	ldr	r3, [pc, #76]	; (8013380 <__ieee754_pow+0x260>)
 8013332:	dd0c      	ble.n	801334e <__ieee754_pow+0x22e>
 8013334:	429c      	cmp	r4, r3
 8013336:	dc0f      	bgt.n	8013358 <__ieee754_pow+0x238>
 8013338:	f1b9 0f00 	cmp.w	r9, #0
 801333c:	da0f      	bge.n	801335e <__ieee754_pow+0x23e>
 801333e:	2000      	movs	r0, #0
 8013340:	b009      	add	sp, #36	; 0x24
 8013342:	ecbd 8b06 	vpop	{d8-d10}
 8013346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801334a:	f001 bda2 	b.w	8014e92 <__math_oflow>
 801334e:	429c      	cmp	r4, r3
 8013350:	dbf2      	blt.n	8013338 <__ieee754_pow+0x218>
 8013352:	4b0a      	ldr	r3, [pc, #40]	; (801337c <__ieee754_pow+0x25c>)
 8013354:	429c      	cmp	r4, r3
 8013356:	dd19      	ble.n	801338c <__ieee754_pow+0x26c>
 8013358:	f1b9 0f00 	cmp.w	r9, #0
 801335c:	dcef      	bgt.n	801333e <__ieee754_pow+0x21e>
 801335e:	2000      	movs	r0, #0
 8013360:	b009      	add	sp, #36	; 0x24
 8013362:	ecbd 8b06 	vpop	{d8-d10}
 8013366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801336a:	f001 bd89 	b.w	8014e80 <__math_uflow>
 801336e:	bf00      	nop
 8013370:	fff00000 	.word	0xfff00000
 8013374:	7ff00000 	.word	0x7ff00000
 8013378:	433fffff 	.word	0x433fffff
 801337c:	3ff00000 	.word	0x3ff00000
 8013380:	3fefffff 	.word	0x3fefffff
 8013384:	3fe00000 	.word	0x3fe00000
 8013388:	41e00000 	.word	0x41e00000
 801338c:	4b60      	ldr	r3, [pc, #384]	; (8013510 <__ieee754_pow+0x3f0>)
 801338e:	2200      	movs	r2, #0
 8013390:	f7ec ff7a 	bl	8000288 <__aeabi_dsub>
 8013394:	a354      	add	r3, pc, #336	; (adr r3, 80134e8 <__ieee754_pow+0x3c8>)
 8013396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801339a:	4604      	mov	r4, r0
 801339c:	460d      	mov	r5, r1
 801339e:	f7ed f92b 	bl	80005f8 <__aeabi_dmul>
 80133a2:	a353      	add	r3, pc, #332	; (adr r3, 80134f0 <__ieee754_pow+0x3d0>)
 80133a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a8:	4606      	mov	r6, r0
 80133aa:	460f      	mov	r7, r1
 80133ac:	4620      	mov	r0, r4
 80133ae:	4629      	mov	r1, r5
 80133b0:	f7ed f922 	bl	80005f8 <__aeabi_dmul>
 80133b4:	4b57      	ldr	r3, [pc, #348]	; (8013514 <__ieee754_pow+0x3f4>)
 80133b6:	4682      	mov	sl, r0
 80133b8:	468b      	mov	fp, r1
 80133ba:	2200      	movs	r2, #0
 80133bc:	4620      	mov	r0, r4
 80133be:	4629      	mov	r1, r5
 80133c0:	f7ed f91a 	bl	80005f8 <__aeabi_dmul>
 80133c4:	4602      	mov	r2, r0
 80133c6:	460b      	mov	r3, r1
 80133c8:	a14b      	add	r1, pc, #300	; (adr r1, 80134f8 <__ieee754_pow+0x3d8>)
 80133ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133ce:	f7ec ff5b 	bl	8000288 <__aeabi_dsub>
 80133d2:	4622      	mov	r2, r4
 80133d4:	462b      	mov	r3, r5
 80133d6:	f7ed f90f 	bl	80005f8 <__aeabi_dmul>
 80133da:	4602      	mov	r2, r0
 80133dc:	460b      	mov	r3, r1
 80133de:	2000      	movs	r0, #0
 80133e0:	494d      	ldr	r1, [pc, #308]	; (8013518 <__ieee754_pow+0x3f8>)
 80133e2:	f7ec ff51 	bl	8000288 <__aeabi_dsub>
 80133e6:	4622      	mov	r2, r4
 80133e8:	4680      	mov	r8, r0
 80133ea:	4689      	mov	r9, r1
 80133ec:	462b      	mov	r3, r5
 80133ee:	4620      	mov	r0, r4
 80133f0:	4629      	mov	r1, r5
 80133f2:	f7ed f901 	bl	80005f8 <__aeabi_dmul>
 80133f6:	4602      	mov	r2, r0
 80133f8:	460b      	mov	r3, r1
 80133fa:	4640      	mov	r0, r8
 80133fc:	4649      	mov	r1, r9
 80133fe:	f7ed f8fb 	bl	80005f8 <__aeabi_dmul>
 8013402:	a33f      	add	r3, pc, #252	; (adr r3, 8013500 <__ieee754_pow+0x3e0>)
 8013404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013408:	f7ed f8f6 	bl	80005f8 <__aeabi_dmul>
 801340c:	4602      	mov	r2, r0
 801340e:	460b      	mov	r3, r1
 8013410:	4650      	mov	r0, sl
 8013412:	4659      	mov	r1, fp
 8013414:	f7ec ff38 	bl	8000288 <__aeabi_dsub>
 8013418:	4602      	mov	r2, r0
 801341a:	460b      	mov	r3, r1
 801341c:	4680      	mov	r8, r0
 801341e:	4689      	mov	r9, r1
 8013420:	4630      	mov	r0, r6
 8013422:	4639      	mov	r1, r7
 8013424:	f7ec ff32 	bl	800028c <__adddf3>
 8013428:	2000      	movs	r0, #0
 801342a:	4632      	mov	r2, r6
 801342c:	463b      	mov	r3, r7
 801342e:	4604      	mov	r4, r0
 8013430:	460d      	mov	r5, r1
 8013432:	f7ec ff29 	bl	8000288 <__aeabi_dsub>
 8013436:	4602      	mov	r2, r0
 8013438:	460b      	mov	r3, r1
 801343a:	4640      	mov	r0, r8
 801343c:	4649      	mov	r1, r9
 801343e:	f7ec ff23 	bl	8000288 <__aeabi_dsub>
 8013442:	9b04      	ldr	r3, [sp, #16]
 8013444:	9a06      	ldr	r2, [sp, #24]
 8013446:	3b01      	subs	r3, #1
 8013448:	4313      	orrs	r3, r2
 801344a:	4682      	mov	sl, r0
 801344c:	468b      	mov	fp, r1
 801344e:	f040 81e7 	bne.w	8013820 <__ieee754_pow+0x700>
 8013452:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013508 <__ieee754_pow+0x3e8>
 8013456:	eeb0 8a47 	vmov.f32	s16, s14
 801345a:	eef0 8a67 	vmov.f32	s17, s15
 801345e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013462:	2600      	movs	r6, #0
 8013464:	4632      	mov	r2, r6
 8013466:	463b      	mov	r3, r7
 8013468:	e9dd 0100 	ldrd	r0, r1, [sp]
 801346c:	f7ec ff0c 	bl	8000288 <__aeabi_dsub>
 8013470:	4622      	mov	r2, r4
 8013472:	462b      	mov	r3, r5
 8013474:	f7ed f8c0 	bl	80005f8 <__aeabi_dmul>
 8013478:	e9dd 2300 	ldrd	r2, r3, [sp]
 801347c:	4680      	mov	r8, r0
 801347e:	4689      	mov	r9, r1
 8013480:	4650      	mov	r0, sl
 8013482:	4659      	mov	r1, fp
 8013484:	f7ed f8b8 	bl	80005f8 <__aeabi_dmul>
 8013488:	4602      	mov	r2, r0
 801348a:	460b      	mov	r3, r1
 801348c:	4640      	mov	r0, r8
 801348e:	4649      	mov	r1, r9
 8013490:	f7ec fefc 	bl	800028c <__adddf3>
 8013494:	4632      	mov	r2, r6
 8013496:	463b      	mov	r3, r7
 8013498:	4680      	mov	r8, r0
 801349a:	4689      	mov	r9, r1
 801349c:	4620      	mov	r0, r4
 801349e:	4629      	mov	r1, r5
 80134a0:	f7ed f8aa 	bl	80005f8 <__aeabi_dmul>
 80134a4:	460b      	mov	r3, r1
 80134a6:	4604      	mov	r4, r0
 80134a8:	460d      	mov	r5, r1
 80134aa:	4602      	mov	r2, r0
 80134ac:	4649      	mov	r1, r9
 80134ae:	4640      	mov	r0, r8
 80134b0:	f7ec feec 	bl	800028c <__adddf3>
 80134b4:	4b19      	ldr	r3, [pc, #100]	; (801351c <__ieee754_pow+0x3fc>)
 80134b6:	4299      	cmp	r1, r3
 80134b8:	ec45 4b19 	vmov	d9, r4, r5
 80134bc:	4606      	mov	r6, r0
 80134be:	460f      	mov	r7, r1
 80134c0:	468b      	mov	fp, r1
 80134c2:	f340 82f1 	ble.w	8013aa8 <__ieee754_pow+0x988>
 80134c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80134ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80134ce:	4303      	orrs	r3, r0
 80134d0:	f000 81e4 	beq.w	801389c <__ieee754_pow+0x77c>
 80134d4:	ec51 0b18 	vmov	r0, r1, d8
 80134d8:	2200      	movs	r2, #0
 80134da:	2300      	movs	r3, #0
 80134dc:	f7ed fafe 	bl	8000adc <__aeabi_dcmplt>
 80134e0:	3800      	subs	r0, #0
 80134e2:	bf18      	it	ne
 80134e4:	2001      	movne	r0, #1
 80134e6:	e72b      	b.n	8013340 <__ieee754_pow+0x220>
 80134e8:	60000000 	.word	0x60000000
 80134ec:	3ff71547 	.word	0x3ff71547
 80134f0:	f85ddf44 	.word	0xf85ddf44
 80134f4:	3e54ae0b 	.word	0x3e54ae0b
 80134f8:	55555555 	.word	0x55555555
 80134fc:	3fd55555 	.word	0x3fd55555
 8013500:	652b82fe 	.word	0x652b82fe
 8013504:	3ff71547 	.word	0x3ff71547
 8013508:	00000000 	.word	0x00000000
 801350c:	bff00000 	.word	0xbff00000
 8013510:	3ff00000 	.word	0x3ff00000
 8013514:	3fd00000 	.word	0x3fd00000
 8013518:	3fe00000 	.word	0x3fe00000
 801351c:	408fffff 	.word	0x408fffff
 8013520:	4bd5      	ldr	r3, [pc, #852]	; (8013878 <__ieee754_pow+0x758>)
 8013522:	402b      	ands	r3, r5
 8013524:	2200      	movs	r2, #0
 8013526:	b92b      	cbnz	r3, 8013534 <__ieee754_pow+0x414>
 8013528:	4bd4      	ldr	r3, [pc, #848]	; (801387c <__ieee754_pow+0x75c>)
 801352a:	f7ed f865 	bl	80005f8 <__aeabi_dmul>
 801352e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013532:	460c      	mov	r4, r1
 8013534:	1523      	asrs	r3, r4, #20
 8013536:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801353a:	4413      	add	r3, r2
 801353c:	9305      	str	r3, [sp, #20]
 801353e:	4bd0      	ldr	r3, [pc, #832]	; (8013880 <__ieee754_pow+0x760>)
 8013540:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013544:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013548:	429c      	cmp	r4, r3
 801354a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801354e:	dd08      	ble.n	8013562 <__ieee754_pow+0x442>
 8013550:	4bcc      	ldr	r3, [pc, #816]	; (8013884 <__ieee754_pow+0x764>)
 8013552:	429c      	cmp	r4, r3
 8013554:	f340 8162 	ble.w	801381c <__ieee754_pow+0x6fc>
 8013558:	9b05      	ldr	r3, [sp, #20]
 801355a:	3301      	adds	r3, #1
 801355c:	9305      	str	r3, [sp, #20]
 801355e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013562:	2400      	movs	r4, #0
 8013564:	00e3      	lsls	r3, r4, #3
 8013566:	9307      	str	r3, [sp, #28]
 8013568:	4bc7      	ldr	r3, [pc, #796]	; (8013888 <__ieee754_pow+0x768>)
 801356a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801356e:	ed93 7b00 	vldr	d7, [r3]
 8013572:	4629      	mov	r1, r5
 8013574:	ec53 2b17 	vmov	r2, r3, d7
 8013578:	eeb0 9a47 	vmov.f32	s18, s14
 801357c:	eef0 9a67 	vmov.f32	s19, s15
 8013580:	4682      	mov	sl, r0
 8013582:	f7ec fe81 	bl	8000288 <__aeabi_dsub>
 8013586:	4652      	mov	r2, sl
 8013588:	4606      	mov	r6, r0
 801358a:	460f      	mov	r7, r1
 801358c:	462b      	mov	r3, r5
 801358e:	ec51 0b19 	vmov	r0, r1, d9
 8013592:	f7ec fe7b 	bl	800028c <__adddf3>
 8013596:	4602      	mov	r2, r0
 8013598:	460b      	mov	r3, r1
 801359a:	2000      	movs	r0, #0
 801359c:	49bb      	ldr	r1, [pc, #748]	; (801388c <__ieee754_pow+0x76c>)
 801359e:	f7ed f955 	bl	800084c <__aeabi_ddiv>
 80135a2:	ec41 0b1a 	vmov	d10, r0, r1
 80135a6:	4602      	mov	r2, r0
 80135a8:	460b      	mov	r3, r1
 80135aa:	4630      	mov	r0, r6
 80135ac:	4639      	mov	r1, r7
 80135ae:	f7ed f823 	bl	80005f8 <__aeabi_dmul>
 80135b2:	2300      	movs	r3, #0
 80135b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135b8:	9302      	str	r3, [sp, #8]
 80135ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80135be:	46ab      	mov	fp, r5
 80135c0:	106d      	asrs	r5, r5, #1
 80135c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80135c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80135ca:	ec41 0b18 	vmov	d8, r0, r1
 80135ce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80135d2:	2200      	movs	r2, #0
 80135d4:	4640      	mov	r0, r8
 80135d6:	4649      	mov	r1, r9
 80135d8:	4614      	mov	r4, r2
 80135da:	461d      	mov	r5, r3
 80135dc:	f7ed f80c 	bl	80005f8 <__aeabi_dmul>
 80135e0:	4602      	mov	r2, r0
 80135e2:	460b      	mov	r3, r1
 80135e4:	4630      	mov	r0, r6
 80135e6:	4639      	mov	r1, r7
 80135e8:	f7ec fe4e 	bl	8000288 <__aeabi_dsub>
 80135ec:	ec53 2b19 	vmov	r2, r3, d9
 80135f0:	4606      	mov	r6, r0
 80135f2:	460f      	mov	r7, r1
 80135f4:	4620      	mov	r0, r4
 80135f6:	4629      	mov	r1, r5
 80135f8:	f7ec fe46 	bl	8000288 <__aeabi_dsub>
 80135fc:	4602      	mov	r2, r0
 80135fe:	460b      	mov	r3, r1
 8013600:	4650      	mov	r0, sl
 8013602:	4659      	mov	r1, fp
 8013604:	f7ec fe40 	bl	8000288 <__aeabi_dsub>
 8013608:	4642      	mov	r2, r8
 801360a:	464b      	mov	r3, r9
 801360c:	f7ec fff4 	bl	80005f8 <__aeabi_dmul>
 8013610:	4602      	mov	r2, r0
 8013612:	460b      	mov	r3, r1
 8013614:	4630      	mov	r0, r6
 8013616:	4639      	mov	r1, r7
 8013618:	f7ec fe36 	bl	8000288 <__aeabi_dsub>
 801361c:	ec53 2b1a 	vmov	r2, r3, d10
 8013620:	f7ec ffea 	bl	80005f8 <__aeabi_dmul>
 8013624:	ec53 2b18 	vmov	r2, r3, d8
 8013628:	ec41 0b19 	vmov	d9, r0, r1
 801362c:	ec51 0b18 	vmov	r0, r1, d8
 8013630:	f7ec ffe2 	bl	80005f8 <__aeabi_dmul>
 8013634:	a37c      	add	r3, pc, #496	; (adr r3, 8013828 <__ieee754_pow+0x708>)
 8013636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363a:	4604      	mov	r4, r0
 801363c:	460d      	mov	r5, r1
 801363e:	f7ec ffdb 	bl	80005f8 <__aeabi_dmul>
 8013642:	a37b      	add	r3, pc, #492	; (adr r3, 8013830 <__ieee754_pow+0x710>)
 8013644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013648:	f7ec fe20 	bl	800028c <__adddf3>
 801364c:	4622      	mov	r2, r4
 801364e:	462b      	mov	r3, r5
 8013650:	f7ec ffd2 	bl	80005f8 <__aeabi_dmul>
 8013654:	a378      	add	r3, pc, #480	; (adr r3, 8013838 <__ieee754_pow+0x718>)
 8013656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801365a:	f7ec fe17 	bl	800028c <__adddf3>
 801365e:	4622      	mov	r2, r4
 8013660:	462b      	mov	r3, r5
 8013662:	f7ec ffc9 	bl	80005f8 <__aeabi_dmul>
 8013666:	a376      	add	r3, pc, #472	; (adr r3, 8013840 <__ieee754_pow+0x720>)
 8013668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801366c:	f7ec fe0e 	bl	800028c <__adddf3>
 8013670:	4622      	mov	r2, r4
 8013672:	462b      	mov	r3, r5
 8013674:	f7ec ffc0 	bl	80005f8 <__aeabi_dmul>
 8013678:	a373      	add	r3, pc, #460	; (adr r3, 8013848 <__ieee754_pow+0x728>)
 801367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801367e:	f7ec fe05 	bl	800028c <__adddf3>
 8013682:	4622      	mov	r2, r4
 8013684:	462b      	mov	r3, r5
 8013686:	f7ec ffb7 	bl	80005f8 <__aeabi_dmul>
 801368a:	a371      	add	r3, pc, #452	; (adr r3, 8013850 <__ieee754_pow+0x730>)
 801368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013690:	f7ec fdfc 	bl	800028c <__adddf3>
 8013694:	4622      	mov	r2, r4
 8013696:	4606      	mov	r6, r0
 8013698:	460f      	mov	r7, r1
 801369a:	462b      	mov	r3, r5
 801369c:	4620      	mov	r0, r4
 801369e:	4629      	mov	r1, r5
 80136a0:	f7ec ffaa 	bl	80005f8 <__aeabi_dmul>
 80136a4:	4602      	mov	r2, r0
 80136a6:	460b      	mov	r3, r1
 80136a8:	4630      	mov	r0, r6
 80136aa:	4639      	mov	r1, r7
 80136ac:	f7ec ffa4 	bl	80005f8 <__aeabi_dmul>
 80136b0:	4642      	mov	r2, r8
 80136b2:	4604      	mov	r4, r0
 80136b4:	460d      	mov	r5, r1
 80136b6:	464b      	mov	r3, r9
 80136b8:	ec51 0b18 	vmov	r0, r1, d8
 80136bc:	f7ec fde6 	bl	800028c <__adddf3>
 80136c0:	ec53 2b19 	vmov	r2, r3, d9
 80136c4:	f7ec ff98 	bl	80005f8 <__aeabi_dmul>
 80136c8:	4622      	mov	r2, r4
 80136ca:	462b      	mov	r3, r5
 80136cc:	f7ec fdde 	bl	800028c <__adddf3>
 80136d0:	4642      	mov	r2, r8
 80136d2:	4682      	mov	sl, r0
 80136d4:	468b      	mov	fp, r1
 80136d6:	464b      	mov	r3, r9
 80136d8:	4640      	mov	r0, r8
 80136da:	4649      	mov	r1, r9
 80136dc:	f7ec ff8c 	bl	80005f8 <__aeabi_dmul>
 80136e0:	4b6b      	ldr	r3, [pc, #428]	; (8013890 <__ieee754_pow+0x770>)
 80136e2:	2200      	movs	r2, #0
 80136e4:	4606      	mov	r6, r0
 80136e6:	460f      	mov	r7, r1
 80136e8:	f7ec fdd0 	bl	800028c <__adddf3>
 80136ec:	4652      	mov	r2, sl
 80136ee:	465b      	mov	r3, fp
 80136f0:	f7ec fdcc 	bl	800028c <__adddf3>
 80136f4:	2000      	movs	r0, #0
 80136f6:	4604      	mov	r4, r0
 80136f8:	460d      	mov	r5, r1
 80136fa:	4602      	mov	r2, r0
 80136fc:	460b      	mov	r3, r1
 80136fe:	4640      	mov	r0, r8
 8013700:	4649      	mov	r1, r9
 8013702:	f7ec ff79 	bl	80005f8 <__aeabi_dmul>
 8013706:	4b62      	ldr	r3, [pc, #392]	; (8013890 <__ieee754_pow+0x770>)
 8013708:	4680      	mov	r8, r0
 801370a:	4689      	mov	r9, r1
 801370c:	2200      	movs	r2, #0
 801370e:	4620      	mov	r0, r4
 8013710:	4629      	mov	r1, r5
 8013712:	f7ec fdb9 	bl	8000288 <__aeabi_dsub>
 8013716:	4632      	mov	r2, r6
 8013718:	463b      	mov	r3, r7
 801371a:	f7ec fdb5 	bl	8000288 <__aeabi_dsub>
 801371e:	4602      	mov	r2, r0
 8013720:	460b      	mov	r3, r1
 8013722:	4650      	mov	r0, sl
 8013724:	4659      	mov	r1, fp
 8013726:	f7ec fdaf 	bl	8000288 <__aeabi_dsub>
 801372a:	ec53 2b18 	vmov	r2, r3, d8
 801372e:	f7ec ff63 	bl	80005f8 <__aeabi_dmul>
 8013732:	4622      	mov	r2, r4
 8013734:	4606      	mov	r6, r0
 8013736:	460f      	mov	r7, r1
 8013738:	462b      	mov	r3, r5
 801373a:	ec51 0b19 	vmov	r0, r1, d9
 801373e:	f7ec ff5b 	bl	80005f8 <__aeabi_dmul>
 8013742:	4602      	mov	r2, r0
 8013744:	460b      	mov	r3, r1
 8013746:	4630      	mov	r0, r6
 8013748:	4639      	mov	r1, r7
 801374a:	f7ec fd9f 	bl	800028c <__adddf3>
 801374e:	4606      	mov	r6, r0
 8013750:	460f      	mov	r7, r1
 8013752:	4602      	mov	r2, r0
 8013754:	460b      	mov	r3, r1
 8013756:	4640      	mov	r0, r8
 8013758:	4649      	mov	r1, r9
 801375a:	f7ec fd97 	bl	800028c <__adddf3>
 801375e:	a33e      	add	r3, pc, #248	; (adr r3, 8013858 <__ieee754_pow+0x738>)
 8013760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013764:	2000      	movs	r0, #0
 8013766:	4604      	mov	r4, r0
 8013768:	460d      	mov	r5, r1
 801376a:	f7ec ff45 	bl	80005f8 <__aeabi_dmul>
 801376e:	4642      	mov	r2, r8
 8013770:	ec41 0b18 	vmov	d8, r0, r1
 8013774:	464b      	mov	r3, r9
 8013776:	4620      	mov	r0, r4
 8013778:	4629      	mov	r1, r5
 801377a:	f7ec fd85 	bl	8000288 <__aeabi_dsub>
 801377e:	4602      	mov	r2, r0
 8013780:	460b      	mov	r3, r1
 8013782:	4630      	mov	r0, r6
 8013784:	4639      	mov	r1, r7
 8013786:	f7ec fd7f 	bl	8000288 <__aeabi_dsub>
 801378a:	a335      	add	r3, pc, #212	; (adr r3, 8013860 <__ieee754_pow+0x740>)
 801378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013790:	f7ec ff32 	bl	80005f8 <__aeabi_dmul>
 8013794:	a334      	add	r3, pc, #208	; (adr r3, 8013868 <__ieee754_pow+0x748>)
 8013796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801379a:	4606      	mov	r6, r0
 801379c:	460f      	mov	r7, r1
 801379e:	4620      	mov	r0, r4
 80137a0:	4629      	mov	r1, r5
 80137a2:	f7ec ff29 	bl	80005f8 <__aeabi_dmul>
 80137a6:	4602      	mov	r2, r0
 80137a8:	460b      	mov	r3, r1
 80137aa:	4630      	mov	r0, r6
 80137ac:	4639      	mov	r1, r7
 80137ae:	f7ec fd6d 	bl	800028c <__adddf3>
 80137b2:	9a07      	ldr	r2, [sp, #28]
 80137b4:	4b37      	ldr	r3, [pc, #220]	; (8013894 <__ieee754_pow+0x774>)
 80137b6:	4413      	add	r3, r2
 80137b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137bc:	f7ec fd66 	bl	800028c <__adddf3>
 80137c0:	4682      	mov	sl, r0
 80137c2:	9805      	ldr	r0, [sp, #20]
 80137c4:	468b      	mov	fp, r1
 80137c6:	f7ec fead 	bl	8000524 <__aeabi_i2d>
 80137ca:	9a07      	ldr	r2, [sp, #28]
 80137cc:	4b32      	ldr	r3, [pc, #200]	; (8013898 <__ieee754_pow+0x778>)
 80137ce:	4413      	add	r3, r2
 80137d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80137d4:	4606      	mov	r6, r0
 80137d6:	460f      	mov	r7, r1
 80137d8:	4652      	mov	r2, sl
 80137da:	465b      	mov	r3, fp
 80137dc:	ec51 0b18 	vmov	r0, r1, d8
 80137e0:	f7ec fd54 	bl	800028c <__adddf3>
 80137e4:	4642      	mov	r2, r8
 80137e6:	464b      	mov	r3, r9
 80137e8:	f7ec fd50 	bl	800028c <__adddf3>
 80137ec:	4632      	mov	r2, r6
 80137ee:	463b      	mov	r3, r7
 80137f0:	f7ec fd4c 	bl	800028c <__adddf3>
 80137f4:	2000      	movs	r0, #0
 80137f6:	4632      	mov	r2, r6
 80137f8:	463b      	mov	r3, r7
 80137fa:	4604      	mov	r4, r0
 80137fc:	460d      	mov	r5, r1
 80137fe:	f7ec fd43 	bl	8000288 <__aeabi_dsub>
 8013802:	4642      	mov	r2, r8
 8013804:	464b      	mov	r3, r9
 8013806:	f7ec fd3f 	bl	8000288 <__aeabi_dsub>
 801380a:	ec53 2b18 	vmov	r2, r3, d8
 801380e:	f7ec fd3b 	bl	8000288 <__aeabi_dsub>
 8013812:	4602      	mov	r2, r0
 8013814:	460b      	mov	r3, r1
 8013816:	4650      	mov	r0, sl
 8013818:	4659      	mov	r1, fp
 801381a:	e610      	b.n	801343e <__ieee754_pow+0x31e>
 801381c:	2401      	movs	r4, #1
 801381e:	e6a1      	b.n	8013564 <__ieee754_pow+0x444>
 8013820:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013870 <__ieee754_pow+0x750>
 8013824:	e617      	b.n	8013456 <__ieee754_pow+0x336>
 8013826:	bf00      	nop
 8013828:	4a454eef 	.word	0x4a454eef
 801382c:	3fca7e28 	.word	0x3fca7e28
 8013830:	93c9db65 	.word	0x93c9db65
 8013834:	3fcd864a 	.word	0x3fcd864a
 8013838:	a91d4101 	.word	0xa91d4101
 801383c:	3fd17460 	.word	0x3fd17460
 8013840:	518f264d 	.word	0x518f264d
 8013844:	3fd55555 	.word	0x3fd55555
 8013848:	db6fabff 	.word	0xdb6fabff
 801384c:	3fdb6db6 	.word	0x3fdb6db6
 8013850:	33333303 	.word	0x33333303
 8013854:	3fe33333 	.word	0x3fe33333
 8013858:	e0000000 	.word	0xe0000000
 801385c:	3feec709 	.word	0x3feec709
 8013860:	dc3a03fd 	.word	0xdc3a03fd
 8013864:	3feec709 	.word	0x3feec709
 8013868:	145b01f5 	.word	0x145b01f5
 801386c:	be3e2fe0 	.word	0xbe3e2fe0
 8013870:	00000000 	.word	0x00000000
 8013874:	3ff00000 	.word	0x3ff00000
 8013878:	7ff00000 	.word	0x7ff00000
 801387c:	43400000 	.word	0x43400000
 8013880:	0003988e 	.word	0x0003988e
 8013884:	000bb679 	.word	0x000bb679
 8013888:	08015910 	.word	0x08015910
 801388c:	3ff00000 	.word	0x3ff00000
 8013890:	40080000 	.word	0x40080000
 8013894:	08015930 	.word	0x08015930
 8013898:	08015920 	.word	0x08015920
 801389c:	a3b5      	add	r3, pc, #724	; (adr r3, 8013b74 <__ieee754_pow+0xa54>)
 801389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138a2:	4640      	mov	r0, r8
 80138a4:	4649      	mov	r1, r9
 80138a6:	f7ec fcf1 	bl	800028c <__adddf3>
 80138aa:	4622      	mov	r2, r4
 80138ac:	ec41 0b1a 	vmov	d10, r0, r1
 80138b0:	462b      	mov	r3, r5
 80138b2:	4630      	mov	r0, r6
 80138b4:	4639      	mov	r1, r7
 80138b6:	f7ec fce7 	bl	8000288 <__aeabi_dsub>
 80138ba:	4602      	mov	r2, r0
 80138bc:	460b      	mov	r3, r1
 80138be:	ec51 0b1a 	vmov	r0, r1, d10
 80138c2:	f7ed f929 	bl	8000b18 <__aeabi_dcmpgt>
 80138c6:	2800      	cmp	r0, #0
 80138c8:	f47f ae04 	bne.w	80134d4 <__ieee754_pow+0x3b4>
 80138cc:	4aa4      	ldr	r2, [pc, #656]	; (8013b60 <__ieee754_pow+0xa40>)
 80138ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80138d2:	4293      	cmp	r3, r2
 80138d4:	f340 8108 	ble.w	8013ae8 <__ieee754_pow+0x9c8>
 80138d8:	151b      	asrs	r3, r3, #20
 80138da:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80138de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80138e2:	fa4a f303 	asr.w	r3, sl, r3
 80138e6:	445b      	add	r3, fp
 80138e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80138ec:	4e9d      	ldr	r6, [pc, #628]	; (8013b64 <__ieee754_pow+0xa44>)
 80138ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80138f2:	4116      	asrs	r6, r2
 80138f4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80138f8:	2000      	movs	r0, #0
 80138fa:	ea23 0106 	bic.w	r1, r3, r6
 80138fe:	f1c2 0214 	rsb	r2, r2, #20
 8013902:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013906:	fa4a fa02 	asr.w	sl, sl, r2
 801390a:	f1bb 0f00 	cmp.w	fp, #0
 801390e:	4602      	mov	r2, r0
 8013910:	460b      	mov	r3, r1
 8013912:	4620      	mov	r0, r4
 8013914:	4629      	mov	r1, r5
 8013916:	bfb8      	it	lt
 8013918:	f1ca 0a00 	rsblt	sl, sl, #0
 801391c:	f7ec fcb4 	bl	8000288 <__aeabi_dsub>
 8013920:	ec41 0b19 	vmov	d9, r0, r1
 8013924:	4642      	mov	r2, r8
 8013926:	464b      	mov	r3, r9
 8013928:	ec51 0b19 	vmov	r0, r1, d9
 801392c:	f7ec fcae 	bl	800028c <__adddf3>
 8013930:	a37b      	add	r3, pc, #492	; (adr r3, 8013b20 <__ieee754_pow+0xa00>)
 8013932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013936:	2000      	movs	r0, #0
 8013938:	4604      	mov	r4, r0
 801393a:	460d      	mov	r5, r1
 801393c:	f7ec fe5c 	bl	80005f8 <__aeabi_dmul>
 8013940:	ec53 2b19 	vmov	r2, r3, d9
 8013944:	4606      	mov	r6, r0
 8013946:	460f      	mov	r7, r1
 8013948:	4620      	mov	r0, r4
 801394a:	4629      	mov	r1, r5
 801394c:	f7ec fc9c 	bl	8000288 <__aeabi_dsub>
 8013950:	4602      	mov	r2, r0
 8013952:	460b      	mov	r3, r1
 8013954:	4640      	mov	r0, r8
 8013956:	4649      	mov	r1, r9
 8013958:	f7ec fc96 	bl	8000288 <__aeabi_dsub>
 801395c:	a372      	add	r3, pc, #456	; (adr r3, 8013b28 <__ieee754_pow+0xa08>)
 801395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013962:	f7ec fe49 	bl	80005f8 <__aeabi_dmul>
 8013966:	a372      	add	r3, pc, #456	; (adr r3, 8013b30 <__ieee754_pow+0xa10>)
 8013968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396c:	4680      	mov	r8, r0
 801396e:	4689      	mov	r9, r1
 8013970:	4620      	mov	r0, r4
 8013972:	4629      	mov	r1, r5
 8013974:	f7ec fe40 	bl	80005f8 <__aeabi_dmul>
 8013978:	4602      	mov	r2, r0
 801397a:	460b      	mov	r3, r1
 801397c:	4640      	mov	r0, r8
 801397e:	4649      	mov	r1, r9
 8013980:	f7ec fc84 	bl	800028c <__adddf3>
 8013984:	4604      	mov	r4, r0
 8013986:	460d      	mov	r5, r1
 8013988:	4602      	mov	r2, r0
 801398a:	460b      	mov	r3, r1
 801398c:	4630      	mov	r0, r6
 801398e:	4639      	mov	r1, r7
 8013990:	f7ec fc7c 	bl	800028c <__adddf3>
 8013994:	4632      	mov	r2, r6
 8013996:	463b      	mov	r3, r7
 8013998:	4680      	mov	r8, r0
 801399a:	4689      	mov	r9, r1
 801399c:	f7ec fc74 	bl	8000288 <__aeabi_dsub>
 80139a0:	4602      	mov	r2, r0
 80139a2:	460b      	mov	r3, r1
 80139a4:	4620      	mov	r0, r4
 80139a6:	4629      	mov	r1, r5
 80139a8:	f7ec fc6e 	bl	8000288 <__aeabi_dsub>
 80139ac:	4642      	mov	r2, r8
 80139ae:	4606      	mov	r6, r0
 80139b0:	460f      	mov	r7, r1
 80139b2:	464b      	mov	r3, r9
 80139b4:	4640      	mov	r0, r8
 80139b6:	4649      	mov	r1, r9
 80139b8:	f7ec fe1e 	bl	80005f8 <__aeabi_dmul>
 80139bc:	a35e      	add	r3, pc, #376	; (adr r3, 8013b38 <__ieee754_pow+0xa18>)
 80139be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c2:	4604      	mov	r4, r0
 80139c4:	460d      	mov	r5, r1
 80139c6:	f7ec fe17 	bl	80005f8 <__aeabi_dmul>
 80139ca:	a35d      	add	r3, pc, #372	; (adr r3, 8013b40 <__ieee754_pow+0xa20>)
 80139cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d0:	f7ec fc5a 	bl	8000288 <__aeabi_dsub>
 80139d4:	4622      	mov	r2, r4
 80139d6:	462b      	mov	r3, r5
 80139d8:	f7ec fe0e 	bl	80005f8 <__aeabi_dmul>
 80139dc:	a35a      	add	r3, pc, #360	; (adr r3, 8013b48 <__ieee754_pow+0xa28>)
 80139de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e2:	f7ec fc53 	bl	800028c <__adddf3>
 80139e6:	4622      	mov	r2, r4
 80139e8:	462b      	mov	r3, r5
 80139ea:	f7ec fe05 	bl	80005f8 <__aeabi_dmul>
 80139ee:	a358      	add	r3, pc, #352	; (adr r3, 8013b50 <__ieee754_pow+0xa30>)
 80139f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f4:	f7ec fc48 	bl	8000288 <__aeabi_dsub>
 80139f8:	4622      	mov	r2, r4
 80139fa:	462b      	mov	r3, r5
 80139fc:	f7ec fdfc 	bl	80005f8 <__aeabi_dmul>
 8013a00:	a355      	add	r3, pc, #340	; (adr r3, 8013b58 <__ieee754_pow+0xa38>)
 8013a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a06:	f7ec fc41 	bl	800028c <__adddf3>
 8013a0a:	4622      	mov	r2, r4
 8013a0c:	462b      	mov	r3, r5
 8013a0e:	f7ec fdf3 	bl	80005f8 <__aeabi_dmul>
 8013a12:	4602      	mov	r2, r0
 8013a14:	460b      	mov	r3, r1
 8013a16:	4640      	mov	r0, r8
 8013a18:	4649      	mov	r1, r9
 8013a1a:	f7ec fc35 	bl	8000288 <__aeabi_dsub>
 8013a1e:	4604      	mov	r4, r0
 8013a20:	460d      	mov	r5, r1
 8013a22:	4602      	mov	r2, r0
 8013a24:	460b      	mov	r3, r1
 8013a26:	4640      	mov	r0, r8
 8013a28:	4649      	mov	r1, r9
 8013a2a:	f7ec fde5 	bl	80005f8 <__aeabi_dmul>
 8013a2e:	2200      	movs	r2, #0
 8013a30:	ec41 0b19 	vmov	d9, r0, r1
 8013a34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013a38:	4620      	mov	r0, r4
 8013a3a:	4629      	mov	r1, r5
 8013a3c:	f7ec fc24 	bl	8000288 <__aeabi_dsub>
 8013a40:	4602      	mov	r2, r0
 8013a42:	460b      	mov	r3, r1
 8013a44:	ec51 0b19 	vmov	r0, r1, d9
 8013a48:	f7ec ff00 	bl	800084c <__aeabi_ddiv>
 8013a4c:	4632      	mov	r2, r6
 8013a4e:	4604      	mov	r4, r0
 8013a50:	460d      	mov	r5, r1
 8013a52:	463b      	mov	r3, r7
 8013a54:	4640      	mov	r0, r8
 8013a56:	4649      	mov	r1, r9
 8013a58:	f7ec fdce 	bl	80005f8 <__aeabi_dmul>
 8013a5c:	4632      	mov	r2, r6
 8013a5e:	463b      	mov	r3, r7
 8013a60:	f7ec fc14 	bl	800028c <__adddf3>
 8013a64:	4602      	mov	r2, r0
 8013a66:	460b      	mov	r3, r1
 8013a68:	4620      	mov	r0, r4
 8013a6a:	4629      	mov	r1, r5
 8013a6c:	f7ec fc0c 	bl	8000288 <__aeabi_dsub>
 8013a70:	4642      	mov	r2, r8
 8013a72:	464b      	mov	r3, r9
 8013a74:	f7ec fc08 	bl	8000288 <__aeabi_dsub>
 8013a78:	460b      	mov	r3, r1
 8013a7a:	4602      	mov	r2, r0
 8013a7c:	493a      	ldr	r1, [pc, #232]	; (8013b68 <__ieee754_pow+0xa48>)
 8013a7e:	2000      	movs	r0, #0
 8013a80:	f7ec fc02 	bl	8000288 <__aeabi_dsub>
 8013a84:	ec41 0b10 	vmov	d0, r0, r1
 8013a88:	ee10 3a90 	vmov	r3, s1
 8013a8c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013a90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013a94:	da2b      	bge.n	8013aee <__ieee754_pow+0x9ce>
 8013a96:	4650      	mov	r0, sl
 8013a98:	f001 fa3a 	bl	8014f10 <scalbn>
 8013a9c:	ec51 0b10 	vmov	r0, r1, d0
 8013aa0:	ec53 2b18 	vmov	r2, r3, d8
 8013aa4:	f7ff bbed 	b.w	8013282 <__ieee754_pow+0x162>
 8013aa8:	4b30      	ldr	r3, [pc, #192]	; (8013b6c <__ieee754_pow+0xa4c>)
 8013aaa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013aae:	429e      	cmp	r6, r3
 8013ab0:	f77f af0c 	ble.w	80138cc <__ieee754_pow+0x7ac>
 8013ab4:	4b2e      	ldr	r3, [pc, #184]	; (8013b70 <__ieee754_pow+0xa50>)
 8013ab6:	440b      	add	r3, r1
 8013ab8:	4303      	orrs	r3, r0
 8013aba:	d009      	beq.n	8013ad0 <__ieee754_pow+0x9b0>
 8013abc:	ec51 0b18 	vmov	r0, r1, d8
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	f7ed f80a 	bl	8000adc <__aeabi_dcmplt>
 8013ac8:	3800      	subs	r0, #0
 8013aca:	bf18      	it	ne
 8013acc:	2001      	movne	r0, #1
 8013ace:	e447      	b.n	8013360 <__ieee754_pow+0x240>
 8013ad0:	4622      	mov	r2, r4
 8013ad2:	462b      	mov	r3, r5
 8013ad4:	f7ec fbd8 	bl	8000288 <__aeabi_dsub>
 8013ad8:	4642      	mov	r2, r8
 8013ada:	464b      	mov	r3, r9
 8013adc:	f7ed f812 	bl	8000b04 <__aeabi_dcmpge>
 8013ae0:	2800      	cmp	r0, #0
 8013ae2:	f43f aef3 	beq.w	80138cc <__ieee754_pow+0x7ac>
 8013ae6:	e7e9      	b.n	8013abc <__ieee754_pow+0x99c>
 8013ae8:	f04f 0a00 	mov.w	sl, #0
 8013aec:	e71a      	b.n	8013924 <__ieee754_pow+0x804>
 8013aee:	ec51 0b10 	vmov	r0, r1, d0
 8013af2:	4619      	mov	r1, r3
 8013af4:	e7d4      	b.n	8013aa0 <__ieee754_pow+0x980>
 8013af6:	491c      	ldr	r1, [pc, #112]	; (8013b68 <__ieee754_pow+0xa48>)
 8013af8:	2000      	movs	r0, #0
 8013afa:	f7ff bb30 	b.w	801315e <__ieee754_pow+0x3e>
 8013afe:	2000      	movs	r0, #0
 8013b00:	2100      	movs	r1, #0
 8013b02:	f7ff bb2c 	b.w	801315e <__ieee754_pow+0x3e>
 8013b06:	4630      	mov	r0, r6
 8013b08:	4639      	mov	r1, r7
 8013b0a:	f7ff bb28 	b.w	801315e <__ieee754_pow+0x3e>
 8013b0e:	9204      	str	r2, [sp, #16]
 8013b10:	f7ff bb7a 	b.w	8013208 <__ieee754_pow+0xe8>
 8013b14:	2300      	movs	r3, #0
 8013b16:	f7ff bb64 	b.w	80131e2 <__ieee754_pow+0xc2>
 8013b1a:	bf00      	nop
 8013b1c:	f3af 8000 	nop.w
 8013b20:	00000000 	.word	0x00000000
 8013b24:	3fe62e43 	.word	0x3fe62e43
 8013b28:	fefa39ef 	.word	0xfefa39ef
 8013b2c:	3fe62e42 	.word	0x3fe62e42
 8013b30:	0ca86c39 	.word	0x0ca86c39
 8013b34:	be205c61 	.word	0xbe205c61
 8013b38:	72bea4d0 	.word	0x72bea4d0
 8013b3c:	3e663769 	.word	0x3e663769
 8013b40:	c5d26bf1 	.word	0xc5d26bf1
 8013b44:	3ebbbd41 	.word	0x3ebbbd41
 8013b48:	af25de2c 	.word	0xaf25de2c
 8013b4c:	3f11566a 	.word	0x3f11566a
 8013b50:	16bebd93 	.word	0x16bebd93
 8013b54:	3f66c16c 	.word	0x3f66c16c
 8013b58:	5555553e 	.word	0x5555553e
 8013b5c:	3fc55555 	.word	0x3fc55555
 8013b60:	3fe00000 	.word	0x3fe00000
 8013b64:	000fffff 	.word	0x000fffff
 8013b68:	3ff00000 	.word	0x3ff00000
 8013b6c:	4090cbff 	.word	0x4090cbff
 8013b70:	3f6f3400 	.word	0x3f6f3400
 8013b74:	652b82fe 	.word	0x652b82fe
 8013b78:	3c971547 	.word	0x3c971547

08013b7c <__ieee754_sqrt>:
 8013b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b80:	ec55 4b10 	vmov	r4, r5, d0
 8013b84:	4e55      	ldr	r6, [pc, #340]	; (8013cdc <__ieee754_sqrt+0x160>)
 8013b86:	43ae      	bics	r6, r5
 8013b88:	ee10 0a10 	vmov	r0, s0
 8013b8c:	ee10 3a10 	vmov	r3, s0
 8013b90:	462a      	mov	r2, r5
 8013b92:	4629      	mov	r1, r5
 8013b94:	d110      	bne.n	8013bb8 <__ieee754_sqrt+0x3c>
 8013b96:	ee10 2a10 	vmov	r2, s0
 8013b9a:	462b      	mov	r3, r5
 8013b9c:	f7ec fd2c 	bl	80005f8 <__aeabi_dmul>
 8013ba0:	4602      	mov	r2, r0
 8013ba2:	460b      	mov	r3, r1
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	4629      	mov	r1, r5
 8013ba8:	f7ec fb70 	bl	800028c <__adddf3>
 8013bac:	4604      	mov	r4, r0
 8013bae:	460d      	mov	r5, r1
 8013bb0:	ec45 4b10 	vmov	d0, r4, r5
 8013bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bb8:	2d00      	cmp	r5, #0
 8013bba:	dc10      	bgt.n	8013bde <__ieee754_sqrt+0x62>
 8013bbc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013bc0:	4330      	orrs	r0, r6
 8013bc2:	d0f5      	beq.n	8013bb0 <__ieee754_sqrt+0x34>
 8013bc4:	b15d      	cbz	r5, 8013bde <__ieee754_sqrt+0x62>
 8013bc6:	ee10 2a10 	vmov	r2, s0
 8013bca:	462b      	mov	r3, r5
 8013bcc:	ee10 0a10 	vmov	r0, s0
 8013bd0:	f7ec fb5a 	bl	8000288 <__aeabi_dsub>
 8013bd4:	4602      	mov	r2, r0
 8013bd6:	460b      	mov	r3, r1
 8013bd8:	f7ec fe38 	bl	800084c <__aeabi_ddiv>
 8013bdc:	e7e6      	b.n	8013bac <__ieee754_sqrt+0x30>
 8013bde:	1512      	asrs	r2, r2, #20
 8013be0:	d074      	beq.n	8013ccc <__ieee754_sqrt+0x150>
 8013be2:	07d4      	lsls	r4, r2, #31
 8013be4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013be8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8013bec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8013bf0:	bf5e      	ittt	pl
 8013bf2:	0fda      	lsrpl	r2, r3, #31
 8013bf4:	005b      	lslpl	r3, r3, #1
 8013bf6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8013bfa:	2400      	movs	r4, #0
 8013bfc:	0fda      	lsrs	r2, r3, #31
 8013bfe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8013c02:	107f      	asrs	r7, r7, #1
 8013c04:	005b      	lsls	r3, r3, #1
 8013c06:	2516      	movs	r5, #22
 8013c08:	4620      	mov	r0, r4
 8013c0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013c0e:	1886      	adds	r6, r0, r2
 8013c10:	428e      	cmp	r6, r1
 8013c12:	bfde      	ittt	le
 8013c14:	1b89      	suble	r1, r1, r6
 8013c16:	18b0      	addle	r0, r6, r2
 8013c18:	18a4      	addle	r4, r4, r2
 8013c1a:	0049      	lsls	r1, r1, #1
 8013c1c:	3d01      	subs	r5, #1
 8013c1e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8013c22:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8013c26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013c2a:	d1f0      	bne.n	8013c0e <__ieee754_sqrt+0x92>
 8013c2c:	462a      	mov	r2, r5
 8013c2e:	f04f 0e20 	mov.w	lr, #32
 8013c32:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013c36:	4281      	cmp	r1, r0
 8013c38:	eb06 0c05 	add.w	ip, r6, r5
 8013c3c:	dc02      	bgt.n	8013c44 <__ieee754_sqrt+0xc8>
 8013c3e:	d113      	bne.n	8013c68 <__ieee754_sqrt+0xec>
 8013c40:	459c      	cmp	ip, r3
 8013c42:	d811      	bhi.n	8013c68 <__ieee754_sqrt+0xec>
 8013c44:	f1bc 0f00 	cmp.w	ip, #0
 8013c48:	eb0c 0506 	add.w	r5, ip, r6
 8013c4c:	da43      	bge.n	8013cd6 <__ieee754_sqrt+0x15a>
 8013c4e:	2d00      	cmp	r5, #0
 8013c50:	db41      	blt.n	8013cd6 <__ieee754_sqrt+0x15a>
 8013c52:	f100 0801 	add.w	r8, r0, #1
 8013c56:	1a09      	subs	r1, r1, r0
 8013c58:	459c      	cmp	ip, r3
 8013c5a:	bf88      	it	hi
 8013c5c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8013c60:	eba3 030c 	sub.w	r3, r3, ip
 8013c64:	4432      	add	r2, r6
 8013c66:	4640      	mov	r0, r8
 8013c68:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8013c6c:	f1be 0e01 	subs.w	lr, lr, #1
 8013c70:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8013c74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013c78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013c7c:	d1db      	bne.n	8013c36 <__ieee754_sqrt+0xba>
 8013c7e:	430b      	orrs	r3, r1
 8013c80:	d006      	beq.n	8013c90 <__ieee754_sqrt+0x114>
 8013c82:	1c50      	adds	r0, r2, #1
 8013c84:	bf13      	iteet	ne
 8013c86:	3201      	addne	r2, #1
 8013c88:	3401      	addeq	r4, #1
 8013c8a:	4672      	moveq	r2, lr
 8013c8c:	f022 0201 	bicne.w	r2, r2, #1
 8013c90:	1063      	asrs	r3, r4, #1
 8013c92:	0852      	lsrs	r2, r2, #1
 8013c94:	07e1      	lsls	r1, r4, #31
 8013c96:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013c9a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013c9e:	bf48      	it	mi
 8013ca0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8013ca4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8013ca8:	4614      	mov	r4, r2
 8013caa:	e781      	b.n	8013bb0 <__ieee754_sqrt+0x34>
 8013cac:	0ad9      	lsrs	r1, r3, #11
 8013cae:	3815      	subs	r0, #21
 8013cb0:	055b      	lsls	r3, r3, #21
 8013cb2:	2900      	cmp	r1, #0
 8013cb4:	d0fa      	beq.n	8013cac <__ieee754_sqrt+0x130>
 8013cb6:	02cd      	lsls	r5, r1, #11
 8013cb8:	d50a      	bpl.n	8013cd0 <__ieee754_sqrt+0x154>
 8013cba:	f1c2 0420 	rsb	r4, r2, #32
 8013cbe:	fa23 f404 	lsr.w	r4, r3, r4
 8013cc2:	1e55      	subs	r5, r2, #1
 8013cc4:	4093      	lsls	r3, r2
 8013cc6:	4321      	orrs	r1, r4
 8013cc8:	1b42      	subs	r2, r0, r5
 8013cca:	e78a      	b.n	8013be2 <__ieee754_sqrt+0x66>
 8013ccc:	4610      	mov	r0, r2
 8013cce:	e7f0      	b.n	8013cb2 <__ieee754_sqrt+0x136>
 8013cd0:	0049      	lsls	r1, r1, #1
 8013cd2:	3201      	adds	r2, #1
 8013cd4:	e7ef      	b.n	8013cb6 <__ieee754_sqrt+0x13a>
 8013cd6:	4680      	mov	r8, r0
 8013cd8:	e7bd      	b.n	8013c56 <__ieee754_sqrt+0xda>
 8013cda:	bf00      	nop
 8013cdc:	7ff00000 	.word	0x7ff00000

08013ce0 <__ieee754_asinf>:
 8013ce0:	b538      	push	{r3, r4, r5, lr}
 8013ce2:	ee10 5a10 	vmov	r5, s0
 8013ce6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013cea:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013cee:	ed2d 8b04 	vpush	{d8-d9}
 8013cf2:	d10c      	bne.n	8013d0e <__ieee754_asinf+0x2e>
 8013cf4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8013e6c <__ieee754_asinf+0x18c>
 8013cf8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8013e70 <__ieee754_asinf+0x190>
 8013cfc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013d00:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013d04:	eeb0 0a67 	vmov.f32	s0, s15
 8013d08:	ecbd 8b04 	vpop	{d8-d9}
 8013d0c:	bd38      	pop	{r3, r4, r5, pc}
 8013d0e:	dd04      	ble.n	8013d1a <__ieee754_asinf+0x3a>
 8013d10:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013d14:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013d18:	e7f6      	b.n	8013d08 <__ieee754_asinf+0x28>
 8013d1a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013d1e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013d22:	da0b      	bge.n	8013d3c <__ieee754_asinf+0x5c>
 8013d24:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8013d28:	da52      	bge.n	8013dd0 <__ieee754_asinf+0xf0>
 8013d2a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8013e74 <__ieee754_asinf+0x194>
 8013d2e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013d32:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d3a:	dce5      	bgt.n	8013d08 <__ieee754_asinf+0x28>
 8013d3c:	f001 fa42 	bl	80151c4 <fabsf>
 8013d40:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8013d44:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8013d48:	ee20 8a08 	vmul.f32	s16, s0, s16
 8013d4c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8013e78 <__ieee754_asinf+0x198>
 8013d50:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8013e7c <__ieee754_asinf+0x19c>
 8013d54:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8013e80 <__ieee754_asinf+0x1a0>
 8013d58:	eea8 7a27 	vfma.f32	s14, s16, s15
 8013d5c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8013e84 <__ieee754_asinf+0x1a4>
 8013d60:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013d64:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8013e88 <__ieee754_asinf+0x1a8>
 8013d68:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013d6c:	eddf 7a47 	vldr	s15, [pc, #284]	; 8013e8c <__ieee754_asinf+0x1ac>
 8013d70:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013d74:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8013e90 <__ieee754_asinf+0x1b0>
 8013d78:	eea7 9a88 	vfma.f32	s18, s15, s16
 8013d7c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8013e94 <__ieee754_asinf+0x1b4>
 8013d80:	eee8 7a07 	vfma.f32	s15, s16, s14
 8013d84:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8013e98 <__ieee754_asinf+0x1b8>
 8013d88:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013d8c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8013e9c <__ieee754_asinf+0x1bc>
 8013d90:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013d94:	eeb0 0a48 	vmov.f32	s0, s16
 8013d98:	eee7 8a88 	vfma.f32	s17, s15, s16
 8013d9c:	f000 fd30 	bl	8014800 <__ieee754_sqrtf>
 8013da0:	4b3f      	ldr	r3, [pc, #252]	; (8013ea0 <__ieee754_asinf+0x1c0>)
 8013da2:	ee29 9a08 	vmul.f32	s18, s18, s16
 8013da6:	429c      	cmp	r4, r3
 8013da8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8013dac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013db0:	dd3d      	ble.n	8013e2e <__ieee754_asinf+0x14e>
 8013db2:	eea0 0a06 	vfma.f32	s0, s0, s12
 8013db6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8013ea4 <__ieee754_asinf+0x1c4>
 8013dba:	eee0 7a26 	vfma.f32	s15, s0, s13
 8013dbe:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8013e70 <__ieee754_asinf+0x190>
 8013dc2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013dc6:	2d00      	cmp	r5, #0
 8013dc8:	bfd8      	it	le
 8013dca:	eeb1 0a40 	vnegle.f32	s0, s0
 8013dce:	e79b      	b.n	8013d08 <__ieee754_asinf+0x28>
 8013dd0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013dd4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8013e78 <__ieee754_asinf+0x198>
 8013dd8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8013e7c <__ieee754_asinf+0x19c>
 8013ddc:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8013e90 <__ieee754_asinf+0x1b0>
 8013de0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013de4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8013e84 <__ieee754_asinf+0x1a4>
 8013de8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013dec:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8013e88 <__ieee754_asinf+0x1a8>
 8013df0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013df4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8013e8c <__ieee754_asinf+0x1ac>
 8013df8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013dfc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8013e80 <__ieee754_asinf+0x1a0>
 8013e00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013e04:	eddf 6a23 	vldr	s13, [pc, #140]	; 8013e94 <__ieee754_asinf+0x1b4>
 8013e08:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013e0c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8013e98 <__ieee754_asinf+0x1b8>
 8013e10:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013e14:	eddf 6a21 	vldr	s13, [pc, #132]	; 8013e9c <__ieee754_asinf+0x1bc>
 8013e18:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013e20:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8013e24:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013e28:	eea0 0a27 	vfma.f32	s0, s0, s15
 8013e2c:	e76c      	b.n	8013d08 <__ieee754_asinf+0x28>
 8013e2e:	ee10 3a10 	vmov	r3, s0
 8013e32:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013e36:	f023 030f 	bic.w	r3, r3, #15
 8013e3a:	ee07 3a10 	vmov	s14, r3
 8013e3e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8013e42:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013e46:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013e4a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8013e4e:	eddf 7a07 	vldr	s15, [pc, #28]	; 8013e6c <__ieee754_asinf+0x18c>
 8013e52:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8013e56:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8013e5a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8013ea8 <__ieee754_asinf+0x1c8>
 8013e5e:	eeb0 6a40 	vmov.f32	s12, s0
 8013e62:	eea7 6a66 	vfms.f32	s12, s14, s13
 8013e66:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013e6a:	e7aa      	b.n	8013dc2 <__ieee754_asinf+0xe2>
 8013e6c:	b33bbd2e 	.word	0xb33bbd2e
 8013e70:	3fc90fdb 	.word	0x3fc90fdb
 8013e74:	7149f2ca 	.word	0x7149f2ca
 8013e78:	3811ef08 	.word	0x3811ef08
 8013e7c:	3a4f7f04 	.word	0x3a4f7f04
 8013e80:	3e2aaaab 	.word	0x3e2aaaab
 8013e84:	bd241146 	.word	0xbd241146
 8013e88:	3e4e0aa8 	.word	0x3e4e0aa8
 8013e8c:	bea6b090 	.word	0xbea6b090
 8013e90:	3d9dc62e 	.word	0x3d9dc62e
 8013e94:	bf303361 	.word	0xbf303361
 8013e98:	4001572d 	.word	0x4001572d
 8013e9c:	c019d139 	.word	0xc019d139
 8013ea0:	3f799999 	.word	0x3f799999
 8013ea4:	333bbd2e 	.word	0x333bbd2e
 8013ea8:	3f490fdb 	.word	0x3f490fdb

08013eac <__ieee754_atan2f>:
 8013eac:	ee10 2a90 	vmov	r2, s1
 8013eb0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013eb4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013eb8:	b510      	push	{r4, lr}
 8013eba:	eef0 7a40 	vmov.f32	s15, s0
 8013ebe:	dc06      	bgt.n	8013ece <__ieee754_atan2f+0x22>
 8013ec0:	ee10 0a10 	vmov	r0, s0
 8013ec4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8013ec8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013ecc:	dd04      	ble.n	8013ed8 <__ieee754_atan2f+0x2c>
 8013ece:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8013ed6:	bd10      	pop	{r4, pc}
 8013ed8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013edc:	d103      	bne.n	8013ee6 <__ieee754_atan2f+0x3a>
 8013ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ee2:	f001 b89b 	b.w	801501c <atanf>
 8013ee6:	1794      	asrs	r4, r2, #30
 8013ee8:	f004 0402 	and.w	r4, r4, #2
 8013eec:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8013ef0:	b943      	cbnz	r3, 8013f04 <__ieee754_atan2f+0x58>
 8013ef2:	2c02      	cmp	r4, #2
 8013ef4:	d05e      	beq.n	8013fb4 <__ieee754_atan2f+0x108>
 8013ef6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013fc8 <__ieee754_atan2f+0x11c>
 8013efa:	2c03      	cmp	r4, #3
 8013efc:	bf08      	it	eq
 8013efe:	eef0 7a47 	vmoveq.f32	s15, s14
 8013f02:	e7e6      	b.n	8013ed2 <__ieee754_atan2f+0x26>
 8013f04:	b941      	cbnz	r1, 8013f18 <__ieee754_atan2f+0x6c>
 8013f06:	eddf 7a31 	vldr	s15, [pc, #196]	; 8013fcc <__ieee754_atan2f+0x120>
 8013f0a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8013fd0 <__ieee754_atan2f+0x124>
 8013f0e:	2800      	cmp	r0, #0
 8013f10:	bfb8      	it	lt
 8013f12:	eef0 7a40 	vmovlt.f32	s15, s0
 8013f16:	e7dc      	b.n	8013ed2 <__ieee754_atan2f+0x26>
 8013f18:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013f1c:	d110      	bne.n	8013f40 <__ieee754_atan2f+0x94>
 8013f1e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013f22:	f104 34ff 	add.w	r4, r4, #4294967295
 8013f26:	d107      	bne.n	8013f38 <__ieee754_atan2f+0x8c>
 8013f28:	2c02      	cmp	r4, #2
 8013f2a:	d846      	bhi.n	8013fba <__ieee754_atan2f+0x10e>
 8013f2c:	4b29      	ldr	r3, [pc, #164]	; (8013fd4 <__ieee754_atan2f+0x128>)
 8013f2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013f32:	edd4 7a00 	vldr	s15, [r4]
 8013f36:	e7cc      	b.n	8013ed2 <__ieee754_atan2f+0x26>
 8013f38:	2c02      	cmp	r4, #2
 8013f3a:	d841      	bhi.n	8013fc0 <__ieee754_atan2f+0x114>
 8013f3c:	4b26      	ldr	r3, [pc, #152]	; (8013fd8 <__ieee754_atan2f+0x12c>)
 8013f3e:	e7f6      	b.n	8013f2e <__ieee754_atan2f+0x82>
 8013f40:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013f44:	d0df      	beq.n	8013f06 <__ieee754_atan2f+0x5a>
 8013f46:	1a5b      	subs	r3, r3, r1
 8013f48:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8013f4c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8013f50:	da1a      	bge.n	8013f88 <__ieee754_atan2f+0xdc>
 8013f52:	2a00      	cmp	r2, #0
 8013f54:	da01      	bge.n	8013f5a <__ieee754_atan2f+0xae>
 8013f56:	313c      	adds	r1, #60	; 0x3c
 8013f58:	db19      	blt.n	8013f8e <__ieee754_atan2f+0xe2>
 8013f5a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8013f5e:	f001 f931 	bl	80151c4 <fabsf>
 8013f62:	f001 f85b 	bl	801501c <atanf>
 8013f66:	eef0 7a40 	vmov.f32	s15, s0
 8013f6a:	2c01      	cmp	r4, #1
 8013f6c:	d012      	beq.n	8013f94 <__ieee754_atan2f+0xe8>
 8013f6e:	2c02      	cmp	r4, #2
 8013f70:	d017      	beq.n	8013fa2 <__ieee754_atan2f+0xf6>
 8013f72:	2c00      	cmp	r4, #0
 8013f74:	d0ad      	beq.n	8013ed2 <__ieee754_atan2f+0x26>
 8013f76:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8013fdc <__ieee754_atan2f+0x130>
 8013f7a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013f7e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8013fe0 <__ieee754_atan2f+0x134>
 8013f82:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013f86:	e7a4      	b.n	8013ed2 <__ieee754_atan2f+0x26>
 8013f88:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013fcc <__ieee754_atan2f+0x120>
 8013f8c:	e7ed      	b.n	8013f6a <__ieee754_atan2f+0xbe>
 8013f8e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013fe4 <__ieee754_atan2f+0x138>
 8013f92:	e7ea      	b.n	8013f6a <__ieee754_atan2f+0xbe>
 8013f94:	ee17 3a90 	vmov	r3, s15
 8013f98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013f9c:	ee07 3a90 	vmov	s15, r3
 8013fa0:	e797      	b.n	8013ed2 <__ieee754_atan2f+0x26>
 8013fa2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013fdc <__ieee754_atan2f+0x130>
 8013fa6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013faa:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8013fe0 <__ieee754_atan2f+0x134>
 8013fae:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013fb2:	e78e      	b.n	8013ed2 <__ieee754_atan2f+0x26>
 8013fb4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8013fe0 <__ieee754_atan2f+0x134>
 8013fb8:	e78b      	b.n	8013ed2 <__ieee754_atan2f+0x26>
 8013fba:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013fe8 <__ieee754_atan2f+0x13c>
 8013fbe:	e788      	b.n	8013ed2 <__ieee754_atan2f+0x26>
 8013fc0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013fe4 <__ieee754_atan2f+0x138>
 8013fc4:	e785      	b.n	8013ed2 <__ieee754_atan2f+0x26>
 8013fc6:	bf00      	nop
 8013fc8:	c0490fdb 	.word	0xc0490fdb
 8013fcc:	3fc90fdb 	.word	0x3fc90fdb
 8013fd0:	bfc90fdb 	.word	0xbfc90fdb
 8013fd4:	08015940 	.word	0x08015940
 8013fd8:	0801594c 	.word	0x0801594c
 8013fdc:	33bbbd2e 	.word	0x33bbbd2e
 8013fe0:	40490fdb 	.word	0x40490fdb
 8013fe4:	00000000 	.word	0x00000000
 8013fe8:	3f490fdb 	.word	0x3f490fdb

08013fec <__ieee754_powf>:
 8013fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ff0:	ee10 4a90 	vmov	r4, s1
 8013ff4:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8013ff8:	ed2d 8b02 	vpush	{d8}
 8013ffc:	ee10 6a10 	vmov	r6, s0
 8014000:	eeb0 8a40 	vmov.f32	s16, s0
 8014004:	eef0 8a60 	vmov.f32	s17, s1
 8014008:	d10c      	bne.n	8014024 <__ieee754_powf+0x38>
 801400a:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 801400e:	0076      	lsls	r6, r6, #1
 8014010:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8014014:	f240 8296 	bls.w	8014544 <__ieee754_powf+0x558>
 8014018:	ee38 0a28 	vadd.f32	s0, s16, s17
 801401c:	ecbd 8b02 	vpop	{d8}
 8014020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014024:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8014028:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801402c:	dcf4      	bgt.n	8014018 <__ieee754_powf+0x2c>
 801402e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8014032:	dd08      	ble.n	8014046 <__ieee754_powf+0x5a>
 8014034:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8014038:	d1ee      	bne.n	8014018 <__ieee754_powf+0x2c>
 801403a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801403e:	0064      	lsls	r4, r4, #1
 8014040:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8014044:	e7e6      	b.n	8014014 <__ieee754_powf+0x28>
 8014046:	2e00      	cmp	r6, #0
 8014048:	da20      	bge.n	801408c <__ieee754_powf+0xa0>
 801404a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 801404e:	da2d      	bge.n	80140ac <__ieee754_powf+0xc0>
 8014050:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8014054:	f2c0 827f 	blt.w	8014556 <__ieee754_powf+0x56a>
 8014058:	ea4f 53e8 	mov.w	r3, r8, asr #23
 801405c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8014060:	fa48 f703 	asr.w	r7, r8, r3
 8014064:	fa07 f303 	lsl.w	r3, r7, r3
 8014068:	4543      	cmp	r3, r8
 801406a:	f040 8274 	bne.w	8014556 <__ieee754_powf+0x56a>
 801406e:	f007 0701 	and.w	r7, r7, #1
 8014072:	f1c7 0702 	rsb	r7, r7, #2
 8014076:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801407a:	d11f      	bne.n	80140bc <__ieee754_powf+0xd0>
 801407c:	2c00      	cmp	r4, #0
 801407e:	f280 8267 	bge.w	8014550 <__ieee754_powf+0x564>
 8014082:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014086:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801408a:	e7c7      	b.n	801401c <__ieee754_powf+0x30>
 801408c:	2700      	movs	r7, #0
 801408e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8014092:	d1f0      	bne.n	8014076 <__ieee754_powf+0x8a>
 8014094:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8014098:	f000 8254 	beq.w	8014544 <__ieee754_powf+0x558>
 801409c:	dd08      	ble.n	80140b0 <__ieee754_powf+0xc4>
 801409e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 80143a8 <__ieee754_powf+0x3bc>
 80140a2:	2c00      	cmp	r4, #0
 80140a4:	bfa8      	it	ge
 80140a6:	eeb0 0a68 	vmovge.f32	s0, s17
 80140aa:	e7b7      	b.n	801401c <__ieee754_powf+0x30>
 80140ac:	2702      	movs	r7, #2
 80140ae:	e7ee      	b.n	801408e <__ieee754_powf+0xa2>
 80140b0:	2c00      	cmp	r4, #0
 80140b2:	f280 824a 	bge.w	801454a <__ieee754_powf+0x55e>
 80140b6:	eeb1 0a68 	vneg.f32	s0, s17
 80140ba:	e7af      	b.n	801401c <__ieee754_powf+0x30>
 80140bc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80140c0:	d102      	bne.n	80140c8 <__ieee754_powf+0xdc>
 80140c2:	ee28 0a08 	vmul.f32	s0, s16, s16
 80140c6:	e7a9      	b.n	801401c <__ieee754_powf+0x30>
 80140c8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80140cc:	eeb0 0a48 	vmov.f32	s0, s16
 80140d0:	d107      	bne.n	80140e2 <__ieee754_powf+0xf6>
 80140d2:	2e00      	cmp	r6, #0
 80140d4:	db05      	blt.n	80140e2 <__ieee754_powf+0xf6>
 80140d6:	ecbd 8b02 	vpop	{d8}
 80140da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140de:	f000 bb8f 	b.w	8014800 <__ieee754_sqrtf>
 80140e2:	f001 f86f 	bl	80151c4 <fabsf>
 80140e6:	b125      	cbz	r5, 80140f2 <__ieee754_powf+0x106>
 80140e8:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80140ec:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80140f0:	d116      	bne.n	8014120 <__ieee754_powf+0x134>
 80140f2:	2c00      	cmp	r4, #0
 80140f4:	bfbc      	itt	lt
 80140f6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80140fa:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80140fe:	2e00      	cmp	r6, #0
 8014100:	da8c      	bge.n	801401c <__ieee754_powf+0x30>
 8014102:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8014106:	ea55 0307 	orrs.w	r3, r5, r7
 801410a:	d104      	bne.n	8014116 <__ieee754_powf+0x12a>
 801410c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014110:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014114:	e782      	b.n	801401c <__ieee754_powf+0x30>
 8014116:	2f01      	cmp	r7, #1
 8014118:	d180      	bne.n	801401c <__ieee754_powf+0x30>
 801411a:	eeb1 0a40 	vneg.f32	s0, s0
 801411e:	e77d      	b.n	801401c <__ieee754_powf+0x30>
 8014120:	0ff0      	lsrs	r0, r6, #31
 8014122:	3801      	subs	r0, #1
 8014124:	ea57 0300 	orrs.w	r3, r7, r0
 8014128:	d104      	bne.n	8014134 <__ieee754_powf+0x148>
 801412a:	ee38 8a48 	vsub.f32	s16, s16, s16
 801412e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8014132:	e773      	b.n	801401c <__ieee754_powf+0x30>
 8014134:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8014138:	dd74      	ble.n	8014224 <__ieee754_powf+0x238>
 801413a:	4b9c      	ldr	r3, [pc, #624]	; (80143ac <__ieee754_powf+0x3c0>)
 801413c:	429d      	cmp	r5, r3
 801413e:	dc08      	bgt.n	8014152 <__ieee754_powf+0x166>
 8014140:	2c00      	cmp	r4, #0
 8014142:	da0b      	bge.n	801415c <__ieee754_powf+0x170>
 8014144:	2000      	movs	r0, #0
 8014146:	ecbd 8b02 	vpop	{d8}
 801414a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801414e:	f000 bec5 	b.w	8014edc <__math_oflowf>
 8014152:	4b97      	ldr	r3, [pc, #604]	; (80143b0 <__ieee754_powf+0x3c4>)
 8014154:	429d      	cmp	r5, r3
 8014156:	dd08      	ble.n	801416a <__ieee754_powf+0x17e>
 8014158:	2c00      	cmp	r4, #0
 801415a:	dcf3      	bgt.n	8014144 <__ieee754_powf+0x158>
 801415c:	2000      	movs	r0, #0
 801415e:	ecbd 8b02 	vpop	{d8}
 8014162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014166:	f000 beb3 	b.w	8014ed0 <__math_uflowf>
 801416a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801416e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014172:	eddf 6a90 	vldr	s13, [pc, #576]	; 80143b4 <__ieee754_powf+0x3c8>
 8014176:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801417a:	eee0 6a67 	vfms.f32	s13, s0, s15
 801417e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014182:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8014186:	ee20 7a00 	vmul.f32	s14, s0, s0
 801418a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801418e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80143b8 <__ieee754_powf+0x3cc>
 8014192:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8014196:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80143bc <__ieee754_powf+0x3d0>
 801419a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801419e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80143c0 <__ieee754_powf+0x3d4>
 80141a2:	eef0 6a67 	vmov.f32	s13, s15
 80141a6:	eee0 6a07 	vfma.f32	s13, s0, s14
 80141aa:	ee16 3a90 	vmov	r3, s13
 80141ae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80141b2:	f023 030f 	bic.w	r3, r3, #15
 80141b6:	ee00 3a90 	vmov	s1, r3
 80141ba:	eee0 0a47 	vfms.f32	s1, s0, s14
 80141be:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80141c2:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80141c6:	f024 040f 	bic.w	r4, r4, #15
 80141ca:	ee07 4a10 	vmov	s14, r4
 80141ce:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80141d2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80141d6:	ee07 3a90 	vmov	s15, r3
 80141da:	eee7 0a27 	vfma.f32	s1, s14, s15
 80141de:	3f01      	subs	r7, #1
 80141e0:	ea57 0200 	orrs.w	r2, r7, r0
 80141e4:	ee07 4a10 	vmov	s14, r4
 80141e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80141ec:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80141f0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80141f4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80141f8:	ee17 4a10 	vmov	r4, s14
 80141fc:	bf08      	it	eq
 80141fe:	eeb0 8a40 	vmoveq.f32	s16, s0
 8014202:	2c00      	cmp	r4, #0
 8014204:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014208:	f340 817e 	ble.w	8014508 <__ieee754_powf+0x51c>
 801420c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8014210:	f340 80f8 	ble.w	8014404 <__ieee754_powf+0x418>
 8014214:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801421c:	bf4c      	ite	mi
 801421e:	2001      	movmi	r0, #1
 8014220:	2000      	movpl	r0, #0
 8014222:	e790      	b.n	8014146 <__ieee754_powf+0x15a>
 8014224:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8014228:	bf01      	itttt	eq
 801422a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80143c4 <__ieee754_powf+0x3d8>
 801422e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8014232:	f06f 0217 	mvneq.w	r2, #23
 8014236:	ee17 5a90 	vmoveq	r5, s15
 801423a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801423e:	bf18      	it	ne
 8014240:	2200      	movne	r2, #0
 8014242:	3b7f      	subs	r3, #127	; 0x7f
 8014244:	4413      	add	r3, r2
 8014246:	4a60      	ldr	r2, [pc, #384]	; (80143c8 <__ieee754_powf+0x3dc>)
 8014248:	f3c5 0516 	ubfx	r5, r5, #0, #23
 801424c:	4295      	cmp	r5, r2
 801424e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8014252:	dd06      	ble.n	8014262 <__ieee754_powf+0x276>
 8014254:	4a5d      	ldr	r2, [pc, #372]	; (80143cc <__ieee754_powf+0x3e0>)
 8014256:	4295      	cmp	r5, r2
 8014258:	f340 80a4 	ble.w	80143a4 <__ieee754_powf+0x3b8>
 801425c:	3301      	adds	r3, #1
 801425e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8014262:	2500      	movs	r5, #0
 8014264:	4a5a      	ldr	r2, [pc, #360]	; (80143d0 <__ieee754_powf+0x3e4>)
 8014266:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801426a:	ee07 1a90 	vmov	s15, r1
 801426e:	ed92 7a00 	vldr	s14, [r2]
 8014272:	4a58      	ldr	r2, [pc, #352]	; (80143d4 <__ieee754_powf+0x3e8>)
 8014274:	ee37 6a27 	vadd.f32	s12, s14, s15
 8014278:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801427c:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8014280:	1049      	asrs	r1, r1, #1
 8014282:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8014286:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801428a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 801428e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8014292:	ee06 1a10 	vmov	s12, r1
 8014296:	ee65 4a26 	vmul.f32	s9, s10, s13
 801429a:	ee36 7a47 	vsub.f32	s14, s12, s14
 801429e:	ee14 6a90 	vmov	r6, s9
 80142a2:	4016      	ands	r6, r2
 80142a4:	ee05 6a90 	vmov	s11, r6
 80142a8:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80142ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80142b0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80143d8 <__ieee754_powf+0x3ec>
 80142b4:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80142b8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80142bc:	ee25 6a26 	vmul.f32	s12, s10, s13
 80142c0:	eddf 6a46 	vldr	s13, [pc, #280]	; 80143dc <__ieee754_powf+0x3f0>
 80142c4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80142c8:	eddf 6a45 	vldr	s13, [pc, #276]	; 80143e0 <__ieee754_powf+0x3f4>
 80142cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80142d0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80143b4 <__ieee754_powf+0x3c8>
 80142d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80142d8:	eddf 6a42 	vldr	s13, [pc, #264]	; 80143e4 <__ieee754_powf+0x3f8>
 80142dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80142e0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80143e8 <__ieee754_powf+0x3fc>
 80142e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80142e8:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80142ec:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80142f0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80142f4:	eee5 6a07 	vfma.f32	s13, s10, s14
 80142f8:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80142fc:	eef0 7a45 	vmov.f32	s15, s10
 8014300:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8014304:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014308:	ee17 1a90 	vmov	r1, s15
 801430c:	4011      	ands	r1, r2
 801430e:	ee07 1a90 	vmov	s15, r1
 8014312:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8014316:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801431a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801431e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8014322:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014326:	eeb0 6a47 	vmov.f32	s12, s14
 801432a:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801432e:	ee16 1a10 	vmov	r1, s12
 8014332:	4011      	ands	r1, r2
 8014334:	ee06 1a90 	vmov	s13, r1
 8014338:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801433c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80143ec <__ieee754_powf+0x400>
 8014340:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80143f0 <__ieee754_powf+0x404>
 8014344:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014348:	ee06 1a10 	vmov	s12, r1
 801434c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014350:	eddf 7a28 	vldr	s15, [pc, #160]	; 80143f4 <__ieee754_powf+0x408>
 8014354:	4928      	ldr	r1, [pc, #160]	; (80143f8 <__ieee754_powf+0x40c>)
 8014356:	eea6 7a27 	vfma.f32	s14, s12, s15
 801435a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801435e:	edd1 7a00 	vldr	s15, [r1]
 8014362:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014366:	ee07 3a90 	vmov	s15, r3
 801436a:	4b24      	ldr	r3, [pc, #144]	; (80143fc <__ieee754_powf+0x410>)
 801436c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014370:	eef0 7a47 	vmov.f32	s15, s14
 8014374:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014378:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801437c:	edd5 0a00 	vldr	s1, [r5]
 8014380:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014388:	ee17 3a90 	vmov	r3, s15
 801438c:	4013      	ands	r3, r2
 801438e:	ee07 3a90 	vmov	s15, r3
 8014392:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8014396:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801439a:	eee6 6a65 	vfms.f32	s13, s12, s11
 801439e:	ee77 7a66 	vsub.f32	s15, s14, s13
 80143a2:	e70e      	b.n	80141c2 <__ieee754_powf+0x1d6>
 80143a4:	2501      	movs	r5, #1
 80143a6:	e75d      	b.n	8014264 <__ieee754_powf+0x278>
 80143a8:	00000000 	.word	0x00000000
 80143ac:	3f7ffff3 	.word	0x3f7ffff3
 80143b0:	3f800007 	.word	0x3f800007
 80143b4:	3eaaaaab 	.word	0x3eaaaaab
 80143b8:	3fb8aa3b 	.word	0x3fb8aa3b
 80143bc:	36eca570 	.word	0x36eca570
 80143c0:	3fb8aa00 	.word	0x3fb8aa00
 80143c4:	4b800000 	.word	0x4b800000
 80143c8:	001cc471 	.word	0x001cc471
 80143cc:	005db3d6 	.word	0x005db3d6
 80143d0:	08015958 	.word	0x08015958
 80143d4:	fffff000 	.word	0xfffff000
 80143d8:	3e6c3255 	.word	0x3e6c3255
 80143dc:	3e53f142 	.word	0x3e53f142
 80143e0:	3e8ba305 	.word	0x3e8ba305
 80143e4:	3edb6db7 	.word	0x3edb6db7
 80143e8:	3f19999a 	.word	0x3f19999a
 80143ec:	3f76384f 	.word	0x3f76384f
 80143f0:	3f763800 	.word	0x3f763800
 80143f4:	369dc3a0 	.word	0x369dc3a0
 80143f8:	08015968 	.word	0x08015968
 80143fc:	08015960 	.word	0x08015960
 8014400:	3338aa3c 	.word	0x3338aa3c
 8014404:	f040 8095 	bne.w	8014532 <__ieee754_powf+0x546>
 8014408:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8014400 <__ieee754_powf+0x414>
 801440c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014410:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8014414:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801441c:	f73f aefa 	bgt.w	8014214 <__ieee754_powf+0x228>
 8014420:	15db      	asrs	r3, r3, #23
 8014422:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8014426:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801442a:	4103      	asrs	r3, r0
 801442c:	4423      	add	r3, r4
 801442e:	494b      	ldr	r1, [pc, #300]	; (801455c <__ieee754_powf+0x570>)
 8014430:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014434:	3a7f      	subs	r2, #127	; 0x7f
 8014436:	4111      	asrs	r1, r2
 8014438:	ea23 0101 	bic.w	r1, r3, r1
 801443c:	ee07 1a10 	vmov	s14, r1
 8014440:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8014444:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8014448:	f1c2 0217 	rsb	r2, r2, #23
 801444c:	4110      	asrs	r0, r2
 801444e:	2c00      	cmp	r4, #0
 8014450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014454:	bfb8      	it	lt
 8014456:	4240      	neglt	r0, r0
 8014458:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801445c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8014560 <__ieee754_powf+0x574>
 8014460:	eddf 6a40 	vldr	s13, [pc, #256]	; 8014564 <__ieee754_powf+0x578>
 8014464:	ee17 3a10 	vmov	r3, s14
 8014468:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801446c:	f023 030f 	bic.w	r3, r3, #15
 8014470:	ee07 3a10 	vmov	s14, r3
 8014474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014478:	ee27 0a00 	vmul.f32	s0, s14, s0
 801447c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014480:	eddf 7a39 	vldr	s15, [pc, #228]	; 8014568 <__ieee754_powf+0x57c>
 8014484:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8014488:	eef0 7a40 	vmov.f32	s15, s0
 801448c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014490:	eeb0 6a67 	vmov.f32	s12, s15
 8014494:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014498:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801449c:	ee30 0a46 	vsub.f32	s0, s0, s12
 80144a0:	eddf 6a32 	vldr	s13, [pc, #200]	; 801456c <__ieee754_powf+0x580>
 80144a4:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8014570 <__ieee754_powf+0x584>
 80144a8:	eee7 6a06 	vfma.f32	s13, s14, s12
 80144ac:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8014574 <__ieee754_powf+0x588>
 80144b0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80144b4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8014578 <__ieee754_powf+0x58c>
 80144b8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80144bc:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801457c <__ieee754_powf+0x590>
 80144c0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80144c4:	eef0 6a67 	vmov.f32	s13, s15
 80144c8:	eee6 6a47 	vfms.f32	s13, s12, s14
 80144cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80144d0:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80144d4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80144d8:	eea7 0a80 	vfma.f32	s0, s15, s0
 80144dc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80144e0:	ee37 0a40 	vsub.f32	s0, s14, s0
 80144e4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80144e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80144ec:	ee30 0a67 	vsub.f32	s0, s0, s15
 80144f0:	ee10 3a10 	vmov	r3, s0
 80144f4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80144f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80144fc:	da1f      	bge.n	801453e <__ieee754_powf+0x552>
 80144fe:	f000 febd 	bl	801527c <scalbnf>
 8014502:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014506:	e589      	b.n	801401c <__ieee754_powf+0x30>
 8014508:	4a1d      	ldr	r2, [pc, #116]	; (8014580 <__ieee754_powf+0x594>)
 801450a:	4293      	cmp	r3, r2
 801450c:	dd07      	ble.n	801451e <__ieee754_powf+0x532>
 801450e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014516:	bf4c      	ite	mi
 8014518:	2001      	movmi	r0, #1
 801451a:	2000      	movpl	r0, #0
 801451c:	e61f      	b.n	801415e <__ieee754_powf+0x172>
 801451e:	d108      	bne.n	8014532 <__ieee754_powf+0x546>
 8014520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014524:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8014528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801452c:	f6ff af78 	blt.w	8014420 <__ieee754_powf+0x434>
 8014530:	e7ed      	b.n	801450e <__ieee754_powf+0x522>
 8014532:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8014536:	f73f af73 	bgt.w	8014420 <__ieee754_powf+0x434>
 801453a:	2000      	movs	r0, #0
 801453c:	e78c      	b.n	8014458 <__ieee754_powf+0x46c>
 801453e:	ee00 3a10 	vmov	s0, r3
 8014542:	e7de      	b.n	8014502 <__ieee754_powf+0x516>
 8014544:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014548:	e568      	b.n	801401c <__ieee754_powf+0x30>
 801454a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8014584 <__ieee754_powf+0x598>
 801454e:	e565      	b.n	801401c <__ieee754_powf+0x30>
 8014550:	eeb0 0a48 	vmov.f32	s0, s16
 8014554:	e562      	b.n	801401c <__ieee754_powf+0x30>
 8014556:	2700      	movs	r7, #0
 8014558:	e58d      	b.n	8014076 <__ieee754_powf+0x8a>
 801455a:	bf00      	nop
 801455c:	007fffff 	.word	0x007fffff
 8014560:	35bfbe8c 	.word	0x35bfbe8c
 8014564:	3f317200 	.word	0x3f317200
 8014568:	3f317218 	.word	0x3f317218
 801456c:	b5ddea0e 	.word	0xb5ddea0e
 8014570:	3331bb4c 	.word	0x3331bb4c
 8014574:	388ab355 	.word	0x388ab355
 8014578:	bb360b61 	.word	0xbb360b61
 801457c:	3e2aaaab 	.word	0x3e2aaaab
 8014580:	43160000 	.word	0x43160000
 8014584:	00000000 	.word	0x00000000

08014588 <__ieee754_rem_pio2f>:
 8014588:	b5f0      	push	{r4, r5, r6, r7, lr}
 801458a:	ee10 6a10 	vmov	r6, s0
 801458e:	4b8e      	ldr	r3, [pc, #568]	; (80147c8 <__ieee754_rem_pio2f+0x240>)
 8014590:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8014594:	429d      	cmp	r5, r3
 8014596:	b087      	sub	sp, #28
 8014598:	eef0 7a40 	vmov.f32	s15, s0
 801459c:	4604      	mov	r4, r0
 801459e:	dc05      	bgt.n	80145ac <__ieee754_rem_pio2f+0x24>
 80145a0:	2300      	movs	r3, #0
 80145a2:	ed80 0a00 	vstr	s0, [r0]
 80145a6:	6043      	str	r3, [r0, #4]
 80145a8:	2000      	movs	r0, #0
 80145aa:	e01a      	b.n	80145e2 <__ieee754_rem_pio2f+0x5a>
 80145ac:	4b87      	ldr	r3, [pc, #540]	; (80147cc <__ieee754_rem_pio2f+0x244>)
 80145ae:	429d      	cmp	r5, r3
 80145b0:	dc46      	bgt.n	8014640 <__ieee754_rem_pio2f+0xb8>
 80145b2:	2e00      	cmp	r6, #0
 80145b4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80147d0 <__ieee754_rem_pio2f+0x248>
 80145b8:	4b86      	ldr	r3, [pc, #536]	; (80147d4 <__ieee754_rem_pio2f+0x24c>)
 80145ba:	f025 050f 	bic.w	r5, r5, #15
 80145be:	dd1f      	ble.n	8014600 <__ieee754_rem_pio2f+0x78>
 80145c0:	429d      	cmp	r5, r3
 80145c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80145c6:	d00e      	beq.n	80145e6 <__ieee754_rem_pio2f+0x5e>
 80145c8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80147d8 <__ieee754_rem_pio2f+0x250>
 80145cc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80145d0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80145d4:	ed80 0a00 	vstr	s0, [r0]
 80145d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80145dc:	2001      	movs	r0, #1
 80145de:	edc4 7a01 	vstr	s15, [r4, #4]
 80145e2:	b007      	add	sp, #28
 80145e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145e6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80147dc <__ieee754_rem_pio2f+0x254>
 80145ea:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80147e0 <__ieee754_rem_pio2f+0x258>
 80145ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80145f2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80145f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80145fa:	edc0 6a00 	vstr	s13, [r0]
 80145fe:	e7eb      	b.n	80145d8 <__ieee754_rem_pio2f+0x50>
 8014600:	429d      	cmp	r5, r3
 8014602:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014606:	d00e      	beq.n	8014626 <__ieee754_rem_pio2f+0x9e>
 8014608:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80147d8 <__ieee754_rem_pio2f+0x250>
 801460c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8014610:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014614:	ed80 0a00 	vstr	s0, [r0]
 8014618:	ee77 7a87 	vadd.f32	s15, s15, s14
 801461c:	f04f 30ff 	mov.w	r0, #4294967295
 8014620:	edc4 7a01 	vstr	s15, [r4, #4]
 8014624:	e7dd      	b.n	80145e2 <__ieee754_rem_pio2f+0x5a>
 8014626:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80147dc <__ieee754_rem_pio2f+0x254>
 801462a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80147e0 <__ieee754_rem_pio2f+0x258>
 801462e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014632:	ee77 6a87 	vadd.f32	s13, s15, s14
 8014636:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801463a:	edc0 6a00 	vstr	s13, [r0]
 801463e:	e7eb      	b.n	8014618 <__ieee754_rem_pio2f+0x90>
 8014640:	4b68      	ldr	r3, [pc, #416]	; (80147e4 <__ieee754_rem_pio2f+0x25c>)
 8014642:	429d      	cmp	r5, r3
 8014644:	dc72      	bgt.n	801472c <__ieee754_rem_pio2f+0x1a4>
 8014646:	f000 fdbd 	bl	80151c4 <fabsf>
 801464a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80147e8 <__ieee754_rem_pio2f+0x260>
 801464e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014652:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801465a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801465e:	ee17 0a90 	vmov	r0, s15
 8014662:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80147d0 <__ieee754_rem_pio2f+0x248>
 8014666:	eea7 0a67 	vfms.f32	s0, s14, s15
 801466a:	281f      	cmp	r0, #31
 801466c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80147d8 <__ieee754_rem_pio2f+0x250>
 8014670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014674:	eeb1 6a47 	vneg.f32	s12, s14
 8014678:	ee70 6a67 	vsub.f32	s13, s0, s15
 801467c:	ee16 2a90 	vmov	r2, s13
 8014680:	dc1c      	bgt.n	80146bc <__ieee754_rem_pio2f+0x134>
 8014682:	495a      	ldr	r1, [pc, #360]	; (80147ec <__ieee754_rem_pio2f+0x264>)
 8014684:	1e47      	subs	r7, r0, #1
 8014686:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801468a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801468e:	428b      	cmp	r3, r1
 8014690:	d014      	beq.n	80146bc <__ieee754_rem_pio2f+0x134>
 8014692:	6022      	str	r2, [r4, #0]
 8014694:	ed94 7a00 	vldr	s14, [r4]
 8014698:	ee30 0a47 	vsub.f32	s0, s0, s14
 801469c:	2e00      	cmp	r6, #0
 801469e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80146a2:	ed84 0a01 	vstr	s0, [r4, #4]
 80146a6:	da9c      	bge.n	80145e2 <__ieee754_rem_pio2f+0x5a>
 80146a8:	eeb1 7a47 	vneg.f32	s14, s14
 80146ac:	eeb1 0a40 	vneg.f32	s0, s0
 80146b0:	ed84 7a00 	vstr	s14, [r4]
 80146b4:	ed84 0a01 	vstr	s0, [r4, #4]
 80146b8:	4240      	negs	r0, r0
 80146ba:	e792      	b.n	80145e2 <__ieee754_rem_pio2f+0x5a>
 80146bc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80146c0:	15eb      	asrs	r3, r5, #23
 80146c2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80146c6:	2d08      	cmp	r5, #8
 80146c8:	dde3      	ble.n	8014692 <__ieee754_rem_pio2f+0x10a>
 80146ca:	eddf 7a44 	vldr	s15, [pc, #272]	; 80147dc <__ieee754_rem_pio2f+0x254>
 80146ce:	eddf 5a44 	vldr	s11, [pc, #272]	; 80147e0 <__ieee754_rem_pio2f+0x258>
 80146d2:	eef0 6a40 	vmov.f32	s13, s0
 80146d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80146da:	ee30 0a66 	vsub.f32	s0, s0, s13
 80146de:	eea6 0a27 	vfma.f32	s0, s12, s15
 80146e2:	eef0 7a40 	vmov.f32	s15, s0
 80146e6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80146ea:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80146ee:	ee15 2a90 	vmov	r2, s11
 80146f2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80146f6:	1a5b      	subs	r3, r3, r1
 80146f8:	2b19      	cmp	r3, #25
 80146fa:	dc04      	bgt.n	8014706 <__ieee754_rem_pio2f+0x17e>
 80146fc:	edc4 5a00 	vstr	s11, [r4]
 8014700:	eeb0 0a66 	vmov.f32	s0, s13
 8014704:	e7c6      	b.n	8014694 <__ieee754_rem_pio2f+0x10c>
 8014706:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80147f0 <__ieee754_rem_pio2f+0x268>
 801470a:	eeb0 0a66 	vmov.f32	s0, s13
 801470e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8014712:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8014716:	eddf 6a37 	vldr	s13, [pc, #220]	; 80147f4 <__ieee754_rem_pio2f+0x26c>
 801471a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801471e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8014722:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014726:	ed84 7a00 	vstr	s14, [r4]
 801472a:	e7b3      	b.n	8014694 <__ieee754_rem_pio2f+0x10c>
 801472c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8014730:	db06      	blt.n	8014740 <__ieee754_rem_pio2f+0x1b8>
 8014732:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014736:	edc0 7a01 	vstr	s15, [r0, #4]
 801473a:	edc0 7a00 	vstr	s15, [r0]
 801473e:	e733      	b.n	80145a8 <__ieee754_rem_pio2f+0x20>
 8014740:	15ea      	asrs	r2, r5, #23
 8014742:	3a86      	subs	r2, #134	; 0x86
 8014744:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8014748:	ee07 3a90 	vmov	s15, r3
 801474c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014750:	eddf 6a29 	vldr	s13, [pc, #164]	; 80147f8 <__ieee754_rem_pio2f+0x270>
 8014754:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014758:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801475c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014760:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014764:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014768:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801476c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014770:	ed8d 7a04 	vstr	s14, [sp, #16]
 8014774:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014778:	eef5 7a40 	vcmp.f32	s15, #0.0
 801477c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014780:	edcd 7a05 	vstr	s15, [sp, #20]
 8014784:	d11e      	bne.n	80147c4 <__ieee754_rem_pio2f+0x23c>
 8014786:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801478a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801478e:	bf14      	ite	ne
 8014790:	2302      	movne	r3, #2
 8014792:	2301      	moveq	r3, #1
 8014794:	4919      	ldr	r1, [pc, #100]	; (80147fc <__ieee754_rem_pio2f+0x274>)
 8014796:	9101      	str	r1, [sp, #4]
 8014798:	2102      	movs	r1, #2
 801479a:	9100      	str	r1, [sp, #0]
 801479c:	a803      	add	r0, sp, #12
 801479e:	4621      	mov	r1, r4
 80147a0:	f000 f892 	bl	80148c8 <__kernel_rem_pio2f>
 80147a4:	2e00      	cmp	r6, #0
 80147a6:	f6bf af1c 	bge.w	80145e2 <__ieee754_rem_pio2f+0x5a>
 80147aa:	edd4 7a00 	vldr	s15, [r4]
 80147ae:	eef1 7a67 	vneg.f32	s15, s15
 80147b2:	edc4 7a00 	vstr	s15, [r4]
 80147b6:	edd4 7a01 	vldr	s15, [r4, #4]
 80147ba:	eef1 7a67 	vneg.f32	s15, s15
 80147be:	edc4 7a01 	vstr	s15, [r4, #4]
 80147c2:	e779      	b.n	80146b8 <__ieee754_rem_pio2f+0x130>
 80147c4:	2303      	movs	r3, #3
 80147c6:	e7e5      	b.n	8014794 <__ieee754_rem_pio2f+0x20c>
 80147c8:	3f490fd8 	.word	0x3f490fd8
 80147cc:	4016cbe3 	.word	0x4016cbe3
 80147d0:	3fc90f80 	.word	0x3fc90f80
 80147d4:	3fc90fd0 	.word	0x3fc90fd0
 80147d8:	37354443 	.word	0x37354443
 80147dc:	37354400 	.word	0x37354400
 80147e0:	2e85a308 	.word	0x2e85a308
 80147e4:	43490f80 	.word	0x43490f80
 80147e8:	3f22f984 	.word	0x3f22f984
 80147ec:	08015970 	.word	0x08015970
 80147f0:	2e85a300 	.word	0x2e85a300
 80147f4:	248d3132 	.word	0x248d3132
 80147f8:	43800000 	.word	0x43800000
 80147fc:	080159f0 	.word	0x080159f0

08014800 <__ieee754_sqrtf>:
 8014800:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014804:	4770      	bx	lr
	...

08014808 <__kernel_cosf>:
 8014808:	ee10 3a10 	vmov	r3, s0
 801480c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014810:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014814:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014818:	da05      	bge.n	8014826 <__kernel_cosf+0x1e>
 801481a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801481e:	ee17 2a90 	vmov	r2, s15
 8014822:	2a00      	cmp	r2, #0
 8014824:	d03d      	beq.n	80148a2 <__kernel_cosf+0x9a>
 8014826:	ee60 5a00 	vmul.f32	s11, s0, s0
 801482a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80148a8 <__kernel_cosf+0xa0>
 801482e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80148ac <__kernel_cosf+0xa4>
 8014832:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80148b0 <__kernel_cosf+0xa8>
 8014836:	4a1f      	ldr	r2, [pc, #124]	; (80148b4 <__kernel_cosf+0xac>)
 8014838:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801483c:	4293      	cmp	r3, r2
 801483e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80148b8 <__kernel_cosf+0xb0>
 8014842:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014846:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80148bc <__kernel_cosf+0xb4>
 801484a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801484e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80148c0 <__kernel_cosf+0xb8>
 8014852:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014856:	eeb0 7a66 	vmov.f32	s14, s13
 801485a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801485e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014862:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8014866:	ee67 6a25 	vmul.f32	s13, s14, s11
 801486a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801486e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014872:	dc04      	bgt.n	801487e <__kernel_cosf+0x76>
 8014874:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014878:	ee36 0a47 	vsub.f32	s0, s12, s14
 801487c:	4770      	bx	lr
 801487e:	4a11      	ldr	r2, [pc, #68]	; (80148c4 <__kernel_cosf+0xbc>)
 8014880:	4293      	cmp	r3, r2
 8014882:	bfda      	itte	le
 8014884:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8014888:	ee06 3a90 	vmovle	s13, r3
 801488c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8014890:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014894:	ee36 0a66 	vsub.f32	s0, s12, s13
 8014898:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801489c:	ee30 0a67 	vsub.f32	s0, s0, s15
 80148a0:	4770      	bx	lr
 80148a2:	eeb0 0a46 	vmov.f32	s0, s12
 80148a6:	4770      	bx	lr
 80148a8:	ad47d74e 	.word	0xad47d74e
 80148ac:	310f74f6 	.word	0x310f74f6
 80148b0:	3d2aaaab 	.word	0x3d2aaaab
 80148b4:	3e999999 	.word	0x3e999999
 80148b8:	b493f27c 	.word	0xb493f27c
 80148bc:	37d00d01 	.word	0x37d00d01
 80148c0:	bab60b61 	.word	0xbab60b61
 80148c4:	3f480000 	.word	0x3f480000

080148c8 <__kernel_rem_pio2f>:
 80148c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148cc:	ed2d 8b04 	vpush	{d8-d9}
 80148d0:	b0d9      	sub	sp, #356	; 0x164
 80148d2:	4688      	mov	r8, r1
 80148d4:	9002      	str	r0, [sp, #8]
 80148d6:	49bb      	ldr	r1, [pc, #748]	; (8014bc4 <__kernel_rem_pio2f+0x2fc>)
 80148d8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80148da:	9301      	str	r3, [sp, #4]
 80148dc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80148e0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80148e4:	1e59      	subs	r1, r3, #1
 80148e6:	1d13      	adds	r3, r2, #4
 80148e8:	db27      	blt.n	801493a <__kernel_rem_pio2f+0x72>
 80148ea:	f1b2 0b03 	subs.w	fp, r2, #3
 80148ee:	bf48      	it	mi
 80148f0:	f102 0b04 	addmi.w	fp, r2, #4
 80148f4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80148f8:	1c45      	adds	r5, r0, #1
 80148fa:	00ec      	lsls	r4, r5, #3
 80148fc:	1a47      	subs	r7, r0, r1
 80148fe:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8014bd4 <__kernel_rem_pio2f+0x30c>
 8014902:	9403      	str	r4, [sp, #12]
 8014904:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8014908:	eb0a 0c01 	add.w	ip, sl, r1
 801490c:	ae1c      	add	r6, sp, #112	; 0x70
 801490e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8014912:	2400      	movs	r4, #0
 8014914:	4564      	cmp	r4, ip
 8014916:	dd12      	ble.n	801493e <__kernel_rem_pio2f+0x76>
 8014918:	9b01      	ldr	r3, [sp, #4]
 801491a:	ac1c      	add	r4, sp, #112	; 0x70
 801491c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8014920:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8014924:	f04f 0c00 	mov.w	ip, #0
 8014928:	45d4      	cmp	ip, sl
 801492a:	dc27      	bgt.n	801497c <__kernel_rem_pio2f+0xb4>
 801492c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8014930:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8014bd4 <__kernel_rem_pio2f+0x30c>
 8014934:	4627      	mov	r7, r4
 8014936:	2600      	movs	r6, #0
 8014938:	e016      	b.n	8014968 <__kernel_rem_pio2f+0xa0>
 801493a:	2000      	movs	r0, #0
 801493c:	e7dc      	b.n	80148f8 <__kernel_rem_pio2f+0x30>
 801493e:	42e7      	cmn	r7, r4
 8014940:	bf5d      	ittte	pl
 8014942:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8014946:	ee07 3a90 	vmovpl	s15, r3
 801494a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801494e:	eef0 7a47 	vmovmi.f32	s15, s14
 8014952:	ece6 7a01 	vstmia	r6!, {s15}
 8014956:	3401      	adds	r4, #1
 8014958:	e7dc      	b.n	8014914 <__kernel_rem_pio2f+0x4c>
 801495a:	ecf9 6a01 	vldmia	r9!, {s13}
 801495e:	ed97 7a00 	vldr	s14, [r7]
 8014962:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014966:	3601      	adds	r6, #1
 8014968:	428e      	cmp	r6, r1
 801496a:	f1a7 0704 	sub.w	r7, r7, #4
 801496e:	ddf4      	ble.n	801495a <__kernel_rem_pio2f+0x92>
 8014970:	eceb 7a01 	vstmia	fp!, {s15}
 8014974:	f10c 0c01 	add.w	ip, ip, #1
 8014978:	3404      	adds	r4, #4
 801497a:	e7d5      	b.n	8014928 <__kernel_rem_pio2f+0x60>
 801497c:	ab08      	add	r3, sp, #32
 801497e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8014982:	eddf 8a93 	vldr	s17, [pc, #588]	; 8014bd0 <__kernel_rem_pio2f+0x308>
 8014986:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8014bcc <__kernel_rem_pio2f+0x304>
 801498a:	9304      	str	r3, [sp, #16]
 801498c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8014990:	4656      	mov	r6, sl
 8014992:	00b3      	lsls	r3, r6, #2
 8014994:	9305      	str	r3, [sp, #20]
 8014996:	ab58      	add	r3, sp, #352	; 0x160
 8014998:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801499c:	ac08      	add	r4, sp, #32
 801499e:	ab44      	add	r3, sp, #272	; 0x110
 80149a0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80149a4:	46a4      	mov	ip, r4
 80149a6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80149aa:	4637      	mov	r7, r6
 80149ac:	2f00      	cmp	r7, #0
 80149ae:	f1a0 0004 	sub.w	r0, r0, #4
 80149b2:	dc4f      	bgt.n	8014a54 <__kernel_rem_pio2f+0x18c>
 80149b4:	4628      	mov	r0, r5
 80149b6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80149ba:	f000 fc5f 	bl	801527c <scalbnf>
 80149be:	eeb0 8a40 	vmov.f32	s16, s0
 80149c2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80149c6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80149ca:	f000 fc0f 	bl	80151ec <floorf>
 80149ce:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80149d2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80149d6:	2d00      	cmp	r5, #0
 80149d8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80149dc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80149e0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80149e4:	ee17 9a90 	vmov	r9, s15
 80149e8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80149ec:	dd44      	ble.n	8014a78 <__kernel_rem_pio2f+0x1b0>
 80149ee:	f106 3cff 	add.w	ip, r6, #4294967295
 80149f2:	ab08      	add	r3, sp, #32
 80149f4:	f1c5 0e08 	rsb	lr, r5, #8
 80149f8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80149fc:	fa47 f00e 	asr.w	r0, r7, lr
 8014a00:	4481      	add	r9, r0
 8014a02:	fa00 f00e 	lsl.w	r0, r0, lr
 8014a06:	1a3f      	subs	r7, r7, r0
 8014a08:	f1c5 0007 	rsb	r0, r5, #7
 8014a0c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8014a10:	4107      	asrs	r7, r0
 8014a12:	2f00      	cmp	r7, #0
 8014a14:	dd3f      	ble.n	8014a96 <__kernel_rem_pio2f+0x1ce>
 8014a16:	f04f 0e00 	mov.w	lr, #0
 8014a1a:	f109 0901 	add.w	r9, r9, #1
 8014a1e:	4673      	mov	r3, lr
 8014a20:	4576      	cmp	r6, lr
 8014a22:	dc6b      	bgt.n	8014afc <__kernel_rem_pio2f+0x234>
 8014a24:	2d00      	cmp	r5, #0
 8014a26:	dd04      	ble.n	8014a32 <__kernel_rem_pio2f+0x16a>
 8014a28:	2d01      	cmp	r5, #1
 8014a2a:	d078      	beq.n	8014b1e <__kernel_rem_pio2f+0x256>
 8014a2c:	2d02      	cmp	r5, #2
 8014a2e:	f000 8081 	beq.w	8014b34 <__kernel_rem_pio2f+0x26c>
 8014a32:	2f02      	cmp	r7, #2
 8014a34:	d12f      	bne.n	8014a96 <__kernel_rem_pio2f+0x1ce>
 8014a36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014a3a:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014a3e:	b353      	cbz	r3, 8014a96 <__kernel_rem_pio2f+0x1ce>
 8014a40:	4628      	mov	r0, r5
 8014a42:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8014a46:	f000 fc19 	bl	801527c <scalbnf>
 8014a4a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8014a4e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014a52:	e020      	b.n	8014a96 <__kernel_rem_pio2f+0x1ce>
 8014a54:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014a58:	3f01      	subs	r7, #1
 8014a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a62:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014a66:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014a6a:	ecac 0a01 	vstmia	ip!, {s0}
 8014a6e:	ed90 0a00 	vldr	s0, [r0]
 8014a72:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014a76:	e799      	b.n	80149ac <__kernel_rem_pio2f+0xe4>
 8014a78:	d105      	bne.n	8014a86 <__kernel_rem_pio2f+0x1be>
 8014a7a:	1e70      	subs	r0, r6, #1
 8014a7c:	ab08      	add	r3, sp, #32
 8014a7e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8014a82:	11ff      	asrs	r7, r7, #7
 8014a84:	e7c5      	b.n	8014a12 <__kernel_rem_pio2f+0x14a>
 8014a86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014a8a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a92:	da31      	bge.n	8014af8 <__kernel_rem_pio2f+0x230>
 8014a94:	2700      	movs	r7, #0
 8014a96:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a9e:	f040 809b 	bne.w	8014bd8 <__kernel_rem_pio2f+0x310>
 8014aa2:	1e74      	subs	r4, r6, #1
 8014aa4:	46a4      	mov	ip, r4
 8014aa6:	2000      	movs	r0, #0
 8014aa8:	45d4      	cmp	ip, sl
 8014aaa:	da4a      	bge.n	8014b42 <__kernel_rem_pio2f+0x27a>
 8014aac:	2800      	cmp	r0, #0
 8014aae:	d07a      	beq.n	8014ba6 <__kernel_rem_pio2f+0x2de>
 8014ab0:	ab08      	add	r3, sp, #32
 8014ab2:	3d08      	subs	r5, #8
 8014ab4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	f000 8081 	beq.w	8014bc0 <__kernel_rem_pio2f+0x2f8>
 8014abe:	4628      	mov	r0, r5
 8014ac0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014ac4:	00a5      	lsls	r5, r4, #2
 8014ac6:	f000 fbd9 	bl	801527c <scalbnf>
 8014aca:	aa44      	add	r2, sp, #272	; 0x110
 8014acc:	1d2b      	adds	r3, r5, #4
 8014ace:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8014bd0 <__kernel_rem_pio2f+0x308>
 8014ad2:	18d1      	adds	r1, r2, r3
 8014ad4:	4622      	mov	r2, r4
 8014ad6:	2a00      	cmp	r2, #0
 8014ad8:	f280 80ae 	bge.w	8014c38 <__kernel_rem_pio2f+0x370>
 8014adc:	4622      	mov	r2, r4
 8014ade:	2a00      	cmp	r2, #0
 8014ae0:	f2c0 80cc 	blt.w	8014c7c <__kernel_rem_pio2f+0x3b4>
 8014ae4:	a944      	add	r1, sp, #272	; 0x110
 8014ae6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8014aea:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8014bc8 <__kernel_rem_pio2f+0x300>
 8014aee:	eddf 7a39 	vldr	s15, [pc, #228]	; 8014bd4 <__kernel_rem_pio2f+0x30c>
 8014af2:	2000      	movs	r0, #0
 8014af4:	1aa1      	subs	r1, r4, r2
 8014af6:	e0b6      	b.n	8014c66 <__kernel_rem_pio2f+0x39e>
 8014af8:	2702      	movs	r7, #2
 8014afa:	e78c      	b.n	8014a16 <__kernel_rem_pio2f+0x14e>
 8014afc:	6820      	ldr	r0, [r4, #0]
 8014afe:	b94b      	cbnz	r3, 8014b14 <__kernel_rem_pio2f+0x24c>
 8014b00:	b118      	cbz	r0, 8014b0a <__kernel_rem_pio2f+0x242>
 8014b02:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8014b06:	6020      	str	r0, [r4, #0]
 8014b08:	2001      	movs	r0, #1
 8014b0a:	f10e 0e01 	add.w	lr, lr, #1
 8014b0e:	3404      	adds	r4, #4
 8014b10:	4603      	mov	r3, r0
 8014b12:	e785      	b.n	8014a20 <__kernel_rem_pio2f+0x158>
 8014b14:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8014b18:	6020      	str	r0, [r4, #0]
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	e7f5      	b.n	8014b0a <__kernel_rem_pio2f+0x242>
 8014b1e:	1e74      	subs	r4, r6, #1
 8014b20:	a808      	add	r0, sp, #32
 8014b22:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8014b26:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8014b2a:	f10d 0c20 	add.w	ip, sp, #32
 8014b2e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8014b32:	e77e      	b.n	8014a32 <__kernel_rem_pio2f+0x16a>
 8014b34:	1e74      	subs	r4, r6, #1
 8014b36:	a808      	add	r0, sp, #32
 8014b38:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8014b3c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8014b40:	e7f3      	b.n	8014b2a <__kernel_rem_pio2f+0x262>
 8014b42:	ab08      	add	r3, sp, #32
 8014b44:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8014b48:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014b4c:	4318      	orrs	r0, r3
 8014b4e:	e7ab      	b.n	8014aa8 <__kernel_rem_pio2f+0x1e0>
 8014b50:	f10c 0c01 	add.w	ip, ip, #1
 8014b54:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8014b58:	2c00      	cmp	r4, #0
 8014b5a:	d0f9      	beq.n	8014b50 <__kernel_rem_pio2f+0x288>
 8014b5c:	9b05      	ldr	r3, [sp, #20]
 8014b5e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8014b62:	eb0d 0003 	add.w	r0, sp, r3
 8014b66:	9b01      	ldr	r3, [sp, #4]
 8014b68:	18f4      	adds	r4, r6, r3
 8014b6a:	ab1c      	add	r3, sp, #112	; 0x70
 8014b6c:	1c77      	adds	r7, r6, #1
 8014b6e:	384c      	subs	r0, #76	; 0x4c
 8014b70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014b74:	4466      	add	r6, ip
 8014b76:	42be      	cmp	r6, r7
 8014b78:	f6ff af0b 	blt.w	8014992 <__kernel_rem_pio2f+0xca>
 8014b7c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8014b80:	f8dd e008 	ldr.w	lr, [sp, #8]
 8014b84:	ee07 3a90 	vmov	s15, r3
 8014b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b8c:	f04f 0c00 	mov.w	ip, #0
 8014b90:	ece4 7a01 	vstmia	r4!, {s15}
 8014b94:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8014bd4 <__kernel_rem_pio2f+0x30c>
 8014b98:	46a1      	mov	r9, r4
 8014b9a:	458c      	cmp	ip, r1
 8014b9c:	dd07      	ble.n	8014bae <__kernel_rem_pio2f+0x2e6>
 8014b9e:	ece0 7a01 	vstmia	r0!, {s15}
 8014ba2:	3701      	adds	r7, #1
 8014ba4:	e7e7      	b.n	8014b76 <__kernel_rem_pio2f+0x2ae>
 8014ba6:	9804      	ldr	r0, [sp, #16]
 8014ba8:	f04f 0c01 	mov.w	ip, #1
 8014bac:	e7d2      	b.n	8014b54 <__kernel_rem_pio2f+0x28c>
 8014bae:	ecfe 6a01 	vldmia	lr!, {s13}
 8014bb2:	ed39 7a01 	vldmdb	r9!, {s14}
 8014bb6:	f10c 0c01 	add.w	ip, ip, #1
 8014bba:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014bbe:	e7ec      	b.n	8014b9a <__kernel_rem_pio2f+0x2d2>
 8014bc0:	3c01      	subs	r4, #1
 8014bc2:	e775      	b.n	8014ab0 <__kernel_rem_pio2f+0x1e8>
 8014bc4:	08015d34 	.word	0x08015d34
 8014bc8:	08015d08 	.word	0x08015d08
 8014bcc:	43800000 	.word	0x43800000
 8014bd0:	3b800000 	.word	0x3b800000
 8014bd4:	00000000 	.word	0x00000000
 8014bd8:	9b03      	ldr	r3, [sp, #12]
 8014bda:	eeb0 0a48 	vmov.f32	s0, s16
 8014bde:	1a98      	subs	r0, r3, r2
 8014be0:	f000 fb4c 	bl	801527c <scalbnf>
 8014be4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8014bcc <__kernel_rem_pio2f+0x304>
 8014be8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bf0:	db19      	blt.n	8014c26 <__kernel_rem_pio2f+0x35e>
 8014bf2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8014bd0 <__kernel_rem_pio2f+0x308>
 8014bf6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014bfa:	aa08      	add	r2, sp, #32
 8014bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c00:	1c74      	adds	r4, r6, #1
 8014c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c06:	3508      	adds	r5, #8
 8014c08:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c10:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014c14:	ee10 3a10 	vmov	r3, s0
 8014c18:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014c1c:	ee17 3a90 	vmov	r3, s15
 8014c20:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014c24:	e74b      	b.n	8014abe <__kernel_rem_pio2f+0x1f6>
 8014c26:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014c2a:	aa08      	add	r2, sp, #32
 8014c2c:	ee10 3a10 	vmov	r3, s0
 8014c30:	4634      	mov	r4, r6
 8014c32:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014c36:	e742      	b.n	8014abe <__kernel_rem_pio2f+0x1f6>
 8014c38:	a808      	add	r0, sp, #32
 8014c3a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8014c3e:	9001      	str	r0, [sp, #4]
 8014c40:	ee07 0a90 	vmov	s15, r0
 8014c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c48:	3a01      	subs	r2, #1
 8014c4a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014c4e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014c52:	ed61 7a01 	vstmdb	r1!, {s15}
 8014c56:	e73e      	b.n	8014ad6 <__kernel_rem_pio2f+0x20e>
 8014c58:	ecfc 6a01 	vldmia	ip!, {s13}
 8014c5c:	ecb6 7a01 	vldmia	r6!, {s14}
 8014c60:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014c64:	3001      	adds	r0, #1
 8014c66:	4550      	cmp	r0, sl
 8014c68:	dc01      	bgt.n	8014c6e <__kernel_rem_pio2f+0x3a6>
 8014c6a:	4288      	cmp	r0, r1
 8014c6c:	ddf4      	ble.n	8014c58 <__kernel_rem_pio2f+0x390>
 8014c6e:	a858      	add	r0, sp, #352	; 0x160
 8014c70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014c74:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8014c78:	3a01      	subs	r2, #1
 8014c7a:	e730      	b.n	8014ade <__kernel_rem_pio2f+0x216>
 8014c7c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8014c7e:	2a02      	cmp	r2, #2
 8014c80:	dc09      	bgt.n	8014c96 <__kernel_rem_pio2f+0x3ce>
 8014c82:	2a00      	cmp	r2, #0
 8014c84:	dc2a      	bgt.n	8014cdc <__kernel_rem_pio2f+0x414>
 8014c86:	d043      	beq.n	8014d10 <__kernel_rem_pio2f+0x448>
 8014c88:	f009 0007 	and.w	r0, r9, #7
 8014c8c:	b059      	add	sp, #356	; 0x164
 8014c8e:	ecbd 8b04 	vpop	{d8-d9}
 8014c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c96:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8014c98:	2b03      	cmp	r3, #3
 8014c9a:	d1f5      	bne.n	8014c88 <__kernel_rem_pio2f+0x3c0>
 8014c9c:	ab30      	add	r3, sp, #192	; 0xc0
 8014c9e:	442b      	add	r3, r5
 8014ca0:	461a      	mov	r2, r3
 8014ca2:	4619      	mov	r1, r3
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	2800      	cmp	r0, #0
 8014ca8:	f1a1 0104 	sub.w	r1, r1, #4
 8014cac:	dc51      	bgt.n	8014d52 <__kernel_rem_pio2f+0x48a>
 8014cae:	4621      	mov	r1, r4
 8014cb0:	2901      	cmp	r1, #1
 8014cb2:	f1a2 0204 	sub.w	r2, r2, #4
 8014cb6:	dc5c      	bgt.n	8014d72 <__kernel_rem_pio2f+0x4aa>
 8014cb8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8014bd4 <__kernel_rem_pio2f+0x30c>
 8014cbc:	3304      	adds	r3, #4
 8014cbe:	2c01      	cmp	r4, #1
 8014cc0:	dc67      	bgt.n	8014d92 <__kernel_rem_pio2f+0x4ca>
 8014cc2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014cc6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8014cca:	2f00      	cmp	r7, #0
 8014ccc:	d167      	bne.n	8014d9e <__kernel_rem_pio2f+0x4d6>
 8014cce:	edc8 6a00 	vstr	s13, [r8]
 8014cd2:	ed88 7a01 	vstr	s14, [r8, #4]
 8014cd6:	edc8 7a02 	vstr	s15, [r8, #8]
 8014cda:	e7d5      	b.n	8014c88 <__kernel_rem_pio2f+0x3c0>
 8014cdc:	aa30      	add	r2, sp, #192	; 0xc0
 8014cde:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8014bd4 <__kernel_rem_pio2f+0x30c>
 8014ce2:	4413      	add	r3, r2
 8014ce4:	4622      	mov	r2, r4
 8014ce6:	2a00      	cmp	r2, #0
 8014ce8:	da24      	bge.n	8014d34 <__kernel_rem_pio2f+0x46c>
 8014cea:	b34f      	cbz	r7, 8014d40 <__kernel_rem_pio2f+0x478>
 8014cec:	eef1 7a47 	vneg.f32	s15, s14
 8014cf0:	edc8 7a00 	vstr	s15, [r8]
 8014cf4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8014cf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014cfc:	aa31      	add	r2, sp, #196	; 0xc4
 8014cfe:	2301      	movs	r3, #1
 8014d00:	429c      	cmp	r4, r3
 8014d02:	da20      	bge.n	8014d46 <__kernel_rem_pio2f+0x47e>
 8014d04:	b10f      	cbz	r7, 8014d0a <__kernel_rem_pio2f+0x442>
 8014d06:	eef1 7a67 	vneg.f32	s15, s15
 8014d0a:	edc8 7a01 	vstr	s15, [r8, #4]
 8014d0e:	e7bb      	b.n	8014c88 <__kernel_rem_pio2f+0x3c0>
 8014d10:	aa30      	add	r2, sp, #192	; 0xc0
 8014d12:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8014bd4 <__kernel_rem_pio2f+0x30c>
 8014d16:	4413      	add	r3, r2
 8014d18:	2c00      	cmp	r4, #0
 8014d1a:	da05      	bge.n	8014d28 <__kernel_rem_pio2f+0x460>
 8014d1c:	b10f      	cbz	r7, 8014d22 <__kernel_rem_pio2f+0x45a>
 8014d1e:	eef1 7a67 	vneg.f32	s15, s15
 8014d22:	edc8 7a00 	vstr	s15, [r8]
 8014d26:	e7af      	b.n	8014c88 <__kernel_rem_pio2f+0x3c0>
 8014d28:	ed33 7a01 	vldmdb	r3!, {s14}
 8014d2c:	3c01      	subs	r4, #1
 8014d2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d32:	e7f1      	b.n	8014d18 <__kernel_rem_pio2f+0x450>
 8014d34:	ed73 7a01 	vldmdb	r3!, {s15}
 8014d38:	3a01      	subs	r2, #1
 8014d3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014d3e:	e7d2      	b.n	8014ce6 <__kernel_rem_pio2f+0x41e>
 8014d40:	eef0 7a47 	vmov.f32	s15, s14
 8014d44:	e7d4      	b.n	8014cf0 <__kernel_rem_pio2f+0x428>
 8014d46:	ecb2 7a01 	vldmia	r2!, {s14}
 8014d4a:	3301      	adds	r3, #1
 8014d4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d50:	e7d6      	b.n	8014d00 <__kernel_rem_pio2f+0x438>
 8014d52:	edd1 7a00 	vldr	s15, [r1]
 8014d56:	edd1 6a01 	vldr	s13, [r1, #4]
 8014d5a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014d5e:	3801      	subs	r0, #1
 8014d60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d64:	ed81 7a00 	vstr	s14, [r1]
 8014d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014d6c:	edc1 7a01 	vstr	s15, [r1, #4]
 8014d70:	e799      	b.n	8014ca6 <__kernel_rem_pio2f+0x3de>
 8014d72:	edd2 7a00 	vldr	s15, [r2]
 8014d76:	edd2 6a01 	vldr	s13, [r2, #4]
 8014d7a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014d7e:	3901      	subs	r1, #1
 8014d80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d84:	ed82 7a00 	vstr	s14, [r2]
 8014d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014d8c:	edc2 7a01 	vstr	s15, [r2, #4]
 8014d90:	e78e      	b.n	8014cb0 <__kernel_rem_pio2f+0x3e8>
 8014d92:	ed33 7a01 	vldmdb	r3!, {s14}
 8014d96:	3c01      	subs	r4, #1
 8014d98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d9c:	e78f      	b.n	8014cbe <__kernel_rem_pio2f+0x3f6>
 8014d9e:	eef1 6a66 	vneg.f32	s13, s13
 8014da2:	eeb1 7a47 	vneg.f32	s14, s14
 8014da6:	edc8 6a00 	vstr	s13, [r8]
 8014daa:	ed88 7a01 	vstr	s14, [r8, #4]
 8014dae:	eef1 7a67 	vneg.f32	s15, s15
 8014db2:	e790      	b.n	8014cd6 <__kernel_rem_pio2f+0x40e>

08014db4 <__kernel_sinf>:
 8014db4:	ee10 3a10 	vmov	r3, s0
 8014db8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014dbc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014dc0:	da04      	bge.n	8014dcc <__kernel_sinf+0x18>
 8014dc2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014dc6:	ee17 3a90 	vmov	r3, s15
 8014dca:	b35b      	cbz	r3, 8014e24 <__kernel_sinf+0x70>
 8014dcc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014dd0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014e28 <__kernel_sinf+0x74>
 8014dd4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8014e2c <__kernel_sinf+0x78>
 8014dd8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014ddc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8014e30 <__kernel_sinf+0x7c>
 8014de0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014de4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8014e34 <__kernel_sinf+0x80>
 8014de8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8014dec:	eddf 7a12 	vldr	s15, [pc, #72]	; 8014e38 <__kernel_sinf+0x84>
 8014df0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8014df4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014df8:	b930      	cbnz	r0, 8014e08 <__kernel_sinf+0x54>
 8014dfa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8014e3c <__kernel_sinf+0x88>
 8014dfe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014e02:	eea6 0a26 	vfma.f32	s0, s12, s13
 8014e06:	4770      	bx	lr
 8014e08:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8014e0c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014e10:	eee0 7a86 	vfma.f32	s15, s1, s12
 8014e14:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8014e18:	eddf 7a09 	vldr	s15, [pc, #36]	; 8014e40 <__kernel_sinf+0x8c>
 8014e1c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8014e20:	ee30 0a60 	vsub.f32	s0, s0, s1
 8014e24:	4770      	bx	lr
 8014e26:	bf00      	nop
 8014e28:	2f2ec9d3 	.word	0x2f2ec9d3
 8014e2c:	b2d72f34 	.word	0xb2d72f34
 8014e30:	3638ef1b 	.word	0x3638ef1b
 8014e34:	b9500d01 	.word	0xb9500d01
 8014e38:	3c088889 	.word	0x3c088889
 8014e3c:	be2aaaab 	.word	0xbe2aaaab
 8014e40:	3e2aaaab 	.word	0x3e2aaaab

08014e44 <with_errno>:
 8014e44:	b570      	push	{r4, r5, r6, lr}
 8014e46:	4604      	mov	r4, r0
 8014e48:	460d      	mov	r5, r1
 8014e4a:	4616      	mov	r6, r2
 8014e4c:	f7fb f916 	bl	801007c <__errno>
 8014e50:	4629      	mov	r1, r5
 8014e52:	6006      	str	r6, [r0, #0]
 8014e54:	4620      	mov	r0, r4
 8014e56:	bd70      	pop	{r4, r5, r6, pc}

08014e58 <xflow>:
 8014e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e5a:	4614      	mov	r4, r2
 8014e5c:	461d      	mov	r5, r3
 8014e5e:	b108      	cbz	r0, 8014e64 <xflow+0xc>
 8014e60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014e64:	e9cd 2300 	strd	r2, r3, [sp]
 8014e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e6c:	4620      	mov	r0, r4
 8014e6e:	4629      	mov	r1, r5
 8014e70:	f7eb fbc2 	bl	80005f8 <__aeabi_dmul>
 8014e74:	2222      	movs	r2, #34	; 0x22
 8014e76:	b003      	add	sp, #12
 8014e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e7c:	f7ff bfe2 	b.w	8014e44 <with_errno>

08014e80 <__math_uflow>:
 8014e80:	b508      	push	{r3, lr}
 8014e82:	2200      	movs	r2, #0
 8014e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014e88:	f7ff ffe6 	bl	8014e58 <xflow>
 8014e8c:	ec41 0b10 	vmov	d0, r0, r1
 8014e90:	bd08      	pop	{r3, pc}

08014e92 <__math_oflow>:
 8014e92:	b508      	push	{r3, lr}
 8014e94:	2200      	movs	r2, #0
 8014e96:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8014e9a:	f7ff ffdd 	bl	8014e58 <xflow>
 8014e9e:	ec41 0b10 	vmov	d0, r0, r1
 8014ea2:	bd08      	pop	{r3, pc}

08014ea4 <with_errnof>:
 8014ea4:	b513      	push	{r0, r1, r4, lr}
 8014ea6:	4604      	mov	r4, r0
 8014ea8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014eac:	f7fb f8e6 	bl	801007c <__errno>
 8014eb0:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014eb4:	6004      	str	r4, [r0, #0]
 8014eb6:	b002      	add	sp, #8
 8014eb8:	bd10      	pop	{r4, pc}

08014eba <xflowf>:
 8014eba:	b130      	cbz	r0, 8014eca <xflowf+0x10>
 8014ebc:	eef1 7a40 	vneg.f32	s15, s0
 8014ec0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014ec4:	2022      	movs	r0, #34	; 0x22
 8014ec6:	f7ff bfed 	b.w	8014ea4 <with_errnof>
 8014eca:	eef0 7a40 	vmov.f32	s15, s0
 8014ece:	e7f7      	b.n	8014ec0 <xflowf+0x6>

08014ed0 <__math_uflowf>:
 8014ed0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014ed8 <__math_uflowf+0x8>
 8014ed4:	f7ff bff1 	b.w	8014eba <xflowf>
 8014ed8:	10000000 	.word	0x10000000

08014edc <__math_oflowf>:
 8014edc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014ee4 <__math_oflowf+0x8>
 8014ee0:	f7ff bfeb 	b.w	8014eba <xflowf>
 8014ee4:	70000000 	.word	0x70000000

08014ee8 <fabs>:
 8014ee8:	ec51 0b10 	vmov	r0, r1, d0
 8014eec:	ee10 2a10 	vmov	r2, s0
 8014ef0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014ef4:	ec43 2b10 	vmov	d0, r2, r3
 8014ef8:	4770      	bx	lr

08014efa <finite>:
 8014efa:	b082      	sub	sp, #8
 8014efc:	ed8d 0b00 	vstr	d0, [sp]
 8014f00:	9801      	ldr	r0, [sp, #4]
 8014f02:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014f06:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014f0a:	0fc0      	lsrs	r0, r0, #31
 8014f0c:	b002      	add	sp, #8
 8014f0e:	4770      	bx	lr

08014f10 <scalbn>:
 8014f10:	b570      	push	{r4, r5, r6, lr}
 8014f12:	ec55 4b10 	vmov	r4, r5, d0
 8014f16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014f1a:	4606      	mov	r6, r0
 8014f1c:	462b      	mov	r3, r5
 8014f1e:	b99a      	cbnz	r2, 8014f48 <scalbn+0x38>
 8014f20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014f24:	4323      	orrs	r3, r4
 8014f26:	d036      	beq.n	8014f96 <scalbn+0x86>
 8014f28:	4b39      	ldr	r3, [pc, #228]	; (8015010 <scalbn+0x100>)
 8014f2a:	4629      	mov	r1, r5
 8014f2c:	ee10 0a10 	vmov	r0, s0
 8014f30:	2200      	movs	r2, #0
 8014f32:	f7eb fb61 	bl	80005f8 <__aeabi_dmul>
 8014f36:	4b37      	ldr	r3, [pc, #220]	; (8015014 <scalbn+0x104>)
 8014f38:	429e      	cmp	r6, r3
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	460d      	mov	r5, r1
 8014f3e:	da10      	bge.n	8014f62 <scalbn+0x52>
 8014f40:	a32b      	add	r3, pc, #172	; (adr r3, 8014ff0 <scalbn+0xe0>)
 8014f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f46:	e03a      	b.n	8014fbe <scalbn+0xae>
 8014f48:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014f4c:	428a      	cmp	r2, r1
 8014f4e:	d10c      	bne.n	8014f6a <scalbn+0x5a>
 8014f50:	ee10 2a10 	vmov	r2, s0
 8014f54:	4620      	mov	r0, r4
 8014f56:	4629      	mov	r1, r5
 8014f58:	f7eb f998 	bl	800028c <__adddf3>
 8014f5c:	4604      	mov	r4, r0
 8014f5e:	460d      	mov	r5, r1
 8014f60:	e019      	b.n	8014f96 <scalbn+0x86>
 8014f62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014f66:	460b      	mov	r3, r1
 8014f68:	3a36      	subs	r2, #54	; 0x36
 8014f6a:	4432      	add	r2, r6
 8014f6c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014f70:	428a      	cmp	r2, r1
 8014f72:	dd08      	ble.n	8014f86 <scalbn+0x76>
 8014f74:	2d00      	cmp	r5, #0
 8014f76:	a120      	add	r1, pc, #128	; (adr r1, 8014ff8 <scalbn+0xe8>)
 8014f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f7c:	da1c      	bge.n	8014fb8 <scalbn+0xa8>
 8014f7e:	a120      	add	r1, pc, #128	; (adr r1, 8015000 <scalbn+0xf0>)
 8014f80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f84:	e018      	b.n	8014fb8 <scalbn+0xa8>
 8014f86:	2a00      	cmp	r2, #0
 8014f88:	dd08      	ble.n	8014f9c <scalbn+0x8c>
 8014f8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014f8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014f92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014f96:	ec45 4b10 	vmov	d0, r4, r5
 8014f9a:	bd70      	pop	{r4, r5, r6, pc}
 8014f9c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014fa0:	da19      	bge.n	8014fd6 <scalbn+0xc6>
 8014fa2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014fa6:	429e      	cmp	r6, r3
 8014fa8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8014fac:	dd0a      	ble.n	8014fc4 <scalbn+0xb4>
 8014fae:	a112      	add	r1, pc, #72	; (adr r1, 8014ff8 <scalbn+0xe8>)
 8014fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d1e2      	bne.n	8014f7e <scalbn+0x6e>
 8014fb8:	a30f      	add	r3, pc, #60	; (adr r3, 8014ff8 <scalbn+0xe8>)
 8014fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fbe:	f7eb fb1b 	bl	80005f8 <__aeabi_dmul>
 8014fc2:	e7cb      	b.n	8014f5c <scalbn+0x4c>
 8014fc4:	a10a      	add	r1, pc, #40	; (adr r1, 8014ff0 <scalbn+0xe0>)
 8014fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d0b8      	beq.n	8014f40 <scalbn+0x30>
 8014fce:	a10e      	add	r1, pc, #56	; (adr r1, 8015008 <scalbn+0xf8>)
 8014fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014fd4:	e7b4      	b.n	8014f40 <scalbn+0x30>
 8014fd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014fda:	3236      	adds	r2, #54	; 0x36
 8014fdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014fe0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014fe4:	4620      	mov	r0, r4
 8014fe6:	4b0c      	ldr	r3, [pc, #48]	; (8015018 <scalbn+0x108>)
 8014fe8:	2200      	movs	r2, #0
 8014fea:	e7e8      	b.n	8014fbe <scalbn+0xae>
 8014fec:	f3af 8000 	nop.w
 8014ff0:	c2f8f359 	.word	0xc2f8f359
 8014ff4:	01a56e1f 	.word	0x01a56e1f
 8014ff8:	8800759c 	.word	0x8800759c
 8014ffc:	7e37e43c 	.word	0x7e37e43c
 8015000:	8800759c 	.word	0x8800759c
 8015004:	fe37e43c 	.word	0xfe37e43c
 8015008:	c2f8f359 	.word	0xc2f8f359
 801500c:	81a56e1f 	.word	0x81a56e1f
 8015010:	43500000 	.word	0x43500000
 8015014:	ffff3cb0 	.word	0xffff3cb0
 8015018:	3c900000 	.word	0x3c900000

0801501c <atanf>:
 801501c:	b538      	push	{r3, r4, r5, lr}
 801501e:	ee10 5a10 	vmov	r5, s0
 8015022:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8015026:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801502a:	eef0 7a40 	vmov.f32	s15, s0
 801502e:	db10      	blt.n	8015052 <atanf+0x36>
 8015030:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015034:	dd04      	ble.n	8015040 <atanf+0x24>
 8015036:	ee70 7a00 	vadd.f32	s15, s0, s0
 801503a:	eeb0 0a67 	vmov.f32	s0, s15
 801503e:	bd38      	pop	{r3, r4, r5, pc}
 8015040:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8015178 <atanf+0x15c>
 8015044:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801517c <atanf+0x160>
 8015048:	2d00      	cmp	r5, #0
 801504a:	bfd8      	it	le
 801504c:	eef0 7a40 	vmovle.f32	s15, s0
 8015050:	e7f3      	b.n	801503a <atanf+0x1e>
 8015052:	4b4b      	ldr	r3, [pc, #300]	; (8015180 <atanf+0x164>)
 8015054:	429c      	cmp	r4, r3
 8015056:	dc10      	bgt.n	801507a <atanf+0x5e>
 8015058:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801505c:	da0a      	bge.n	8015074 <atanf+0x58>
 801505e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8015184 <atanf+0x168>
 8015062:	ee30 7a07 	vadd.f32	s14, s0, s14
 8015066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801506a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015072:	dce2      	bgt.n	801503a <atanf+0x1e>
 8015074:	f04f 33ff 	mov.w	r3, #4294967295
 8015078:	e013      	b.n	80150a2 <atanf+0x86>
 801507a:	f000 f8a3 	bl	80151c4 <fabsf>
 801507e:	4b42      	ldr	r3, [pc, #264]	; (8015188 <atanf+0x16c>)
 8015080:	429c      	cmp	r4, r3
 8015082:	dc4f      	bgt.n	8015124 <atanf+0x108>
 8015084:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8015088:	429c      	cmp	r4, r3
 801508a:	dc41      	bgt.n	8015110 <atanf+0xf4>
 801508c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015090:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015094:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015098:	2300      	movs	r3, #0
 801509a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801509e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80150a2:	1c5a      	adds	r2, r3, #1
 80150a4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80150a8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801518c <atanf+0x170>
 80150ac:	eddf 5a38 	vldr	s11, [pc, #224]	; 8015190 <atanf+0x174>
 80150b0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8015194 <atanf+0x178>
 80150b4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80150b8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80150bc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8015198 <atanf+0x17c>
 80150c0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80150c4:	eddf 5a35 	vldr	s11, [pc, #212]	; 801519c <atanf+0x180>
 80150c8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80150cc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80151a0 <atanf+0x184>
 80150d0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80150d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80151a4 <atanf+0x188>
 80150d8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80150dc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80151a8 <atanf+0x18c>
 80150e0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80150e4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80151ac <atanf+0x190>
 80150e8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80150ec:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80151b0 <atanf+0x194>
 80150f0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80150f4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80151b4 <atanf+0x198>
 80150f8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80150fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015100:	eea5 7a86 	vfma.f32	s14, s11, s12
 8015104:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015108:	d121      	bne.n	801514e <atanf+0x132>
 801510a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801510e:	e794      	b.n	801503a <atanf+0x1e>
 8015110:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015114:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015118:	ee30 0a27 	vadd.f32	s0, s0, s15
 801511c:	2301      	movs	r3, #1
 801511e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015122:	e7be      	b.n	80150a2 <atanf+0x86>
 8015124:	4b24      	ldr	r3, [pc, #144]	; (80151b8 <atanf+0x19c>)
 8015126:	429c      	cmp	r4, r3
 8015128:	dc0b      	bgt.n	8015142 <atanf+0x126>
 801512a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801512e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015132:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015136:	2302      	movs	r3, #2
 8015138:	ee70 6a67 	vsub.f32	s13, s0, s15
 801513c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015140:	e7af      	b.n	80150a2 <atanf+0x86>
 8015142:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015146:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801514a:	2303      	movs	r3, #3
 801514c:	e7a9      	b.n	80150a2 <atanf+0x86>
 801514e:	4a1b      	ldr	r2, [pc, #108]	; (80151bc <atanf+0x1a0>)
 8015150:	491b      	ldr	r1, [pc, #108]	; (80151c0 <atanf+0x1a4>)
 8015152:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015156:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801515a:	ed93 0a00 	vldr	s0, [r3]
 801515e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8015162:	ed92 0a00 	vldr	s0, [r2]
 8015166:	ee77 7a67 	vsub.f32	s15, s14, s15
 801516a:	2d00      	cmp	r5, #0
 801516c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015170:	bfb8      	it	lt
 8015172:	eef1 7a67 	vneglt.f32	s15, s15
 8015176:	e760      	b.n	801503a <atanf+0x1e>
 8015178:	3fc90fdb 	.word	0x3fc90fdb
 801517c:	bfc90fdb 	.word	0xbfc90fdb
 8015180:	3edfffff 	.word	0x3edfffff
 8015184:	7149f2ca 	.word	0x7149f2ca
 8015188:	3f97ffff 	.word	0x3f97ffff
 801518c:	3c8569d7 	.word	0x3c8569d7
 8015190:	3d4bda59 	.word	0x3d4bda59
 8015194:	bd6ef16b 	.word	0xbd6ef16b
 8015198:	3d886b35 	.word	0x3d886b35
 801519c:	3dba2e6e 	.word	0x3dba2e6e
 80151a0:	3e124925 	.word	0x3e124925
 80151a4:	3eaaaaab 	.word	0x3eaaaaab
 80151a8:	bd15a221 	.word	0xbd15a221
 80151ac:	bd9d8795 	.word	0xbd9d8795
 80151b0:	bde38e38 	.word	0xbde38e38
 80151b4:	be4ccccd 	.word	0xbe4ccccd
 80151b8:	401bffff 	.word	0x401bffff
 80151bc:	08015d40 	.word	0x08015d40
 80151c0:	08015d50 	.word	0x08015d50

080151c4 <fabsf>:
 80151c4:	ee10 3a10 	vmov	r3, s0
 80151c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80151cc:	ee00 3a10 	vmov	s0, r3
 80151d0:	4770      	bx	lr

080151d2 <finitef>:
 80151d2:	b082      	sub	sp, #8
 80151d4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80151d8:	9801      	ldr	r0, [sp, #4]
 80151da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80151de:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80151e2:	bfac      	ite	ge
 80151e4:	2000      	movge	r0, #0
 80151e6:	2001      	movlt	r0, #1
 80151e8:	b002      	add	sp, #8
 80151ea:	4770      	bx	lr

080151ec <floorf>:
 80151ec:	ee10 3a10 	vmov	r3, s0
 80151f0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80151f4:	3a7f      	subs	r2, #127	; 0x7f
 80151f6:	2a16      	cmp	r2, #22
 80151f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80151fc:	dc2a      	bgt.n	8015254 <floorf+0x68>
 80151fe:	2a00      	cmp	r2, #0
 8015200:	da11      	bge.n	8015226 <floorf+0x3a>
 8015202:	eddf 7a18 	vldr	s15, [pc, #96]	; 8015264 <floorf+0x78>
 8015206:	ee30 0a27 	vadd.f32	s0, s0, s15
 801520a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801520e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015212:	dd05      	ble.n	8015220 <floorf+0x34>
 8015214:	2b00      	cmp	r3, #0
 8015216:	da23      	bge.n	8015260 <floorf+0x74>
 8015218:	4a13      	ldr	r2, [pc, #76]	; (8015268 <floorf+0x7c>)
 801521a:	2900      	cmp	r1, #0
 801521c:	bf18      	it	ne
 801521e:	4613      	movne	r3, r2
 8015220:	ee00 3a10 	vmov	s0, r3
 8015224:	4770      	bx	lr
 8015226:	4911      	ldr	r1, [pc, #68]	; (801526c <floorf+0x80>)
 8015228:	4111      	asrs	r1, r2
 801522a:	420b      	tst	r3, r1
 801522c:	d0fa      	beq.n	8015224 <floorf+0x38>
 801522e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8015264 <floorf+0x78>
 8015232:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015236:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801523a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801523e:	ddef      	ble.n	8015220 <floorf+0x34>
 8015240:	2b00      	cmp	r3, #0
 8015242:	bfbe      	ittt	lt
 8015244:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8015248:	fa40 f202 	asrlt.w	r2, r0, r2
 801524c:	189b      	addlt	r3, r3, r2
 801524e:	ea23 0301 	bic.w	r3, r3, r1
 8015252:	e7e5      	b.n	8015220 <floorf+0x34>
 8015254:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015258:	d3e4      	bcc.n	8015224 <floorf+0x38>
 801525a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801525e:	4770      	bx	lr
 8015260:	2300      	movs	r3, #0
 8015262:	e7dd      	b.n	8015220 <floorf+0x34>
 8015264:	7149f2ca 	.word	0x7149f2ca
 8015268:	bf800000 	.word	0xbf800000
 801526c:	007fffff 	.word	0x007fffff

08015270 <nanf>:
 8015270:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015278 <nanf+0x8>
 8015274:	4770      	bx	lr
 8015276:	bf00      	nop
 8015278:	7fc00000 	.word	0x7fc00000

0801527c <scalbnf>:
 801527c:	ee10 3a10 	vmov	r3, s0
 8015280:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8015284:	d025      	beq.n	80152d2 <scalbnf+0x56>
 8015286:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801528a:	d302      	bcc.n	8015292 <scalbnf+0x16>
 801528c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015290:	4770      	bx	lr
 8015292:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8015296:	d122      	bne.n	80152de <scalbnf+0x62>
 8015298:	4b2a      	ldr	r3, [pc, #168]	; (8015344 <scalbnf+0xc8>)
 801529a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8015348 <scalbnf+0xcc>
 801529e:	4298      	cmp	r0, r3
 80152a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80152a4:	db16      	blt.n	80152d4 <scalbnf+0x58>
 80152a6:	ee10 3a10 	vmov	r3, s0
 80152aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80152ae:	3a19      	subs	r2, #25
 80152b0:	4402      	add	r2, r0
 80152b2:	2afe      	cmp	r2, #254	; 0xfe
 80152b4:	dd15      	ble.n	80152e2 <scalbnf+0x66>
 80152b6:	ee10 3a10 	vmov	r3, s0
 80152ba:	eddf 7a24 	vldr	s15, [pc, #144]	; 801534c <scalbnf+0xd0>
 80152be:	eddf 6a24 	vldr	s13, [pc, #144]	; 8015350 <scalbnf+0xd4>
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	eeb0 7a67 	vmov.f32	s14, s15
 80152c8:	bfb8      	it	lt
 80152ca:	eef0 7a66 	vmovlt.f32	s15, s13
 80152ce:	ee27 0a27 	vmul.f32	s0, s14, s15
 80152d2:	4770      	bx	lr
 80152d4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015354 <scalbnf+0xd8>
 80152d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80152dc:	4770      	bx	lr
 80152de:	0dd2      	lsrs	r2, r2, #23
 80152e0:	e7e6      	b.n	80152b0 <scalbnf+0x34>
 80152e2:	2a00      	cmp	r2, #0
 80152e4:	dd06      	ble.n	80152f4 <scalbnf+0x78>
 80152e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80152ea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80152ee:	ee00 3a10 	vmov	s0, r3
 80152f2:	4770      	bx	lr
 80152f4:	f112 0f16 	cmn.w	r2, #22
 80152f8:	da1a      	bge.n	8015330 <scalbnf+0xb4>
 80152fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80152fe:	4298      	cmp	r0, r3
 8015300:	ee10 3a10 	vmov	r3, s0
 8015304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015308:	dd0a      	ble.n	8015320 <scalbnf+0xa4>
 801530a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801534c <scalbnf+0xd0>
 801530e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8015350 <scalbnf+0xd4>
 8015312:	eef0 7a40 	vmov.f32	s15, s0
 8015316:	2b00      	cmp	r3, #0
 8015318:	bf18      	it	ne
 801531a:	eeb0 0a47 	vmovne.f32	s0, s14
 801531e:	e7db      	b.n	80152d8 <scalbnf+0x5c>
 8015320:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8015354 <scalbnf+0xd8>
 8015324:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8015358 <scalbnf+0xdc>
 8015328:	eef0 7a40 	vmov.f32	s15, s0
 801532c:	2b00      	cmp	r3, #0
 801532e:	e7f3      	b.n	8015318 <scalbnf+0x9c>
 8015330:	3219      	adds	r2, #25
 8015332:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015336:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801533a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801535c <scalbnf+0xe0>
 801533e:	ee07 3a10 	vmov	s14, r3
 8015342:	e7c4      	b.n	80152ce <scalbnf+0x52>
 8015344:	ffff3cb0 	.word	0xffff3cb0
 8015348:	4c000000 	.word	0x4c000000
 801534c:	7149f2ca 	.word	0x7149f2ca
 8015350:	f149f2ca 	.word	0xf149f2ca
 8015354:	0da24260 	.word	0x0da24260
 8015358:	8da24260 	.word	0x8da24260
 801535c:	33000000 	.word	0x33000000

08015360 <_init>:
 8015360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015362:	bf00      	nop
 8015364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015366:	bc08      	pop	{r3}
 8015368:	469e      	mov	lr, r3
 801536a:	4770      	bx	lr

0801536c <_fini>:
 801536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801536e:	bf00      	nop
 8015370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015372:	bc08      	pop	{r3}
 8015374:	469e      	mov	lr, r3
 8015376:	4770      	bx	lr
